
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 c4 41 02 c0       	mov    eax,0xc00241c4
c0000025:	3d c4 41 02 c0       	cmp    eax,0xc00241c4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 c4 41 02 c0       	push   0xc00241c4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 c4 41 02 c0       	mov    eax,0xc00241c4
c0000051:	2d c4 41 02 c0       	sub    eax,0xc00241c4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 c4 41 02 c0       	push   0xc00241c4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb fc 03 02 c0       	mov    ebx,0xc00203fc
c0000097:	81 eb f8 03 02 c0    	sub    ebx,0xc00203f8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be f8 03 02 c0       	mov    esi,0xc00203f8
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 c4 41 02 c0       	push   0xc00241c4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 c4 41 02 c0       	push   0xc00241c4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 43 56 01 00       	call   c00158f0 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 21 56 01 00       	call   c00158f0 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 2e 5b 01 00       	call   c0015e1c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 ed 61 01 00       	call   c00164e4 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 87 12 01 00       	jmp    c0011606 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 00 04 02 c0 02 	test   BYTE PTR [edx-0x3ffdfc00],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 00 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfc00],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 00 04 02 c0 08 	test   BYTE PTR [edx-0x3ffdfc00],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 00 04 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfc00],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 00 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfc00],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000df7:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c0001176:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011b2:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011b7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011c5:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c0001216:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c0001231:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c00012eb:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c00012f1:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c00012f8:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013be:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013c4:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c00013cb:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 04 05 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfafc]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 ea 7c 01 00       	jmp    c0019a8c <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 14 7d 01 00       	jmp    c0019acc <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 35 7d 01 00       	jmp    c0019b0c <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 60 06 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf9a0]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 60 06 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf9a0]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba e0 2d 02 c0       	mov    edx,0xc0022de0
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 1c 05 02 c0       	mov    edx,0xc002051c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 22 05 02 c0       	mov    eax,0xc0020522
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf e0 05 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfa20]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 2b 05 02 c0       	mov    eax,0xc002052b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 60 06 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf9a0]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 b0 05 02 c0       	mov    eax,0xc00205b0
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb a0 05 02 c0       	mov    ebx,0xc00205a0
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 80 05 02 c0       	mov    eax,0xc0020580
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 90 05 02 c0       	mov    eax,0xc0020590
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 32 05 02 c0       	mov    edx,0xc0020532
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 3e 05 02 c0       	mov    edx,0xc002053e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba 52 05 02 c0       	mov    edx,0xc0020552
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c 80 09 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020980
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 80 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020980
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 80 07 02 c0       	mov    eax,0xc0020780
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 c0 06 02 c0       	mov    eax,0xc00206c0
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 80 06 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf980]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 80 0a 02 c0       	push   0xc0020a80
c000611b:	e8 08 43 01 00       	call   c001a428 <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 8e 0a 02 c0       	push   0xc0020a8e
c0006153:	e8 d0 42 01 00       	call   c001a428 <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 39 42 01 00       	call   c001a3cc <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 60 02 c0       	mov    eax,0xc0026020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 6e 02 c0    	mov    ebp,DWORD PTR ds:0xc0026eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 9d 0a 02 c0       	push   0xc0020a9d
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000655e:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c0006564:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c0006580:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00065f9:	8b 8d 4c 65 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd9ab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00066f1:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000672f:	05 40 65 02 c0       	add    eax,0xc0026540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00067ee:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 a0 0a 02 c0       	push   0xc0020aa0
c0006812:	e8 11 3c 01 00       	call   c001a428 <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 25 3c 01 00       	call   c001a444 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 a5 0a 02 c0 	mov    DWORD PTR [esp],0xc0020aa5
c000682c:	e8 f7 3b 01 00       	call   c001a428 <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006838:	e8 07 3c 01 00       	call   c001a444 <iso_kprintfd>
c000683d:	c7 04 24 ab 0a 02 c0 	mov    DWORD PTR [esp],0xc0020aab
c0006844:	e8 df 3b 01 00       	call   c001a428 <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006850:	e8 ef 3b 01 00       	call   c001a444 <iso_kprintfd>
c0006855:	c7 04 24 b1 0a 02 c0 	mov    DWORD PTR [esp],0xc0020ab1
c000685c:	e8 c7 3b 01 00       	call   c001a428 <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006868:	e8 d7 3b 01 00       	call   c001a444 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068ce:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 65 02 c0    	lea    ebp,[eax-0x3ffd9aa8]
c000692a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 65 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd9aa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 9d 0a 02 c0       	push   0xc0020a9d
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a06:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a0c:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 65 02 c0       	add    eax,0xc0026550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 ba 0a 02 c0       	push   0xc0020aba
c0006a31:	e8 f2 39 01 00       	call   c001a428 <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a66:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 c5 0a 02 c0       	push   0xc0020ac5
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 cc 0a 02 c0       	push   0xc0020acc
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b27:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 d3 0a 02 c0       	push   0xc0020ad3
c0006b48:	e8 db 38 01 00       	call   c001a428 <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 de 0a 02 c0       	push   0xc0020ade
c0006b63:	e8 c0 38 01 00       	call   c001a428 <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 65 02 c0       	push   0xc0026540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c4d:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 ca a1 00 00       	call   c0010e3c <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 5f 5e 00 00       	call   c000cae0 <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 ef 0a 02 c0       	push   0xc0020aef
c0006cb2:	e8 64 a2 00 00       	call   c0010f1b <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006cd1:	50                   	push   eax
c0006cd2:	68 08 0b 02 c0       	push   0xc0020b08
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 69 ef 00 00       	call   c0015c48 <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 fd 74 00 c0       	push   0xc00074fd
c0006cee:	53                   	push   ebx
c0006cef:	e8 78 f1 00 00       	call   c0015e6c <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 54 69 01 c0       	push   0xc0016954
c0006d03:	52                   	push   edx
c0006d04:	e8 63 f1 00 00       	call   c0015e6c <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 14             	add    esp,0x14
c0006d0c:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d11:	68 04 0c 02 c0       	push   0xc0020c04
c0006d16:	e8 00 a2 00 00       	call   c0010f1b <KeSetBootMessage(char const*)>
c0006d1b:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d22:	e8 ad aa 00 00       	call   c00117d4 <KeInitRand()>
c0006d27:	e8 4b 00 01 00       	call   c0016d77 <Vm::initialise8086()>
c0006d2c:	e8 f5 4a 00 00       	call   c000b826 <Fs::initVFS()>
c0006d31:	c7 04 24 15 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b15
c0006d38:	e8 de a1 00 00       	call   c0010f1b <KeSetBootMessage(char const*)>
c0006d3d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d42:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	6a 00                	push   0x0
c0006d50:	50                   	push   eax
c0006d51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d54:	83 c4 14             	add    esp,0x14
c0006d57:	68 04 0c 02 c0       	push   0xc0020c04
c0006d5c:	e8 ba a1 00 00       	call   c0010f1b <KeSetBootMessage(char const*)>
c0006d61:	e8 5e 42 00 00       	call   c000afc4 <KeInitialiseSymlinks()>
c0006d66:	e8 13 a7 00 00       	call   c001147e <KeLoadSystemEnv()>
c0006d6b:	e8 70 a9 00 00       	call   c00116e0 <KeSetupPowerManager()>
c0006d70:	83 c4 0c             	add    esp,0xc
c0006d73:	6a 3a                	push   0x3a
c0006d75:	68 2f 0b 02 c0       	push   0xc0020b2f
c0006d7a:	68 38 0b 02 c0       	push   0xc0020b38
c0006d7f:	e8 e0 d0 00 00       	call   c0013e64 <Reg::readIntWithDefault(char*, char*, int)>
c0006d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d87:	e8 b4 56 00 00       	call   c000c440 <User::loadClockSettings(int)>
c0006d8c:	c7 04 24 28 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c28
c0006d93:	e8 83 a1 00 00       	call   c0010f1b <KeSetBootMessage(char const*)>
c0006d98:	59                   	pop    ecx
c0006d99:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d9e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da4:	53                   	push   ebx
c0006da5:	e8 34 5d 00 00       	call   c000cade <Device::loadDriversForAll()>
c0006daa:	c7 04 24 40 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b40
c0006db1:	e8 65 a1 00 00       	call   c0010f1b <KeSetBootMessage(char const*)>
c0006db6:	58                   	pop    eax
c0006db7:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006dbd:	5a                   	pop    edx
c0006dbe:	6a 01                	push   0x1
c0006dc0:	68 51 0b 02 c0       	push   0xc0020b51
c0006dc5:	e8 91 e8 00 00       	call   c001565b <Thr::loadDLL(char const*, bool)>
c0006dca:	59                   	pop    ecx
c0006dcb:	5a                   	pop    edx
c0006dcc:	53                   	push   ebx
c0006dcd:	50                   	push   eax
c0006dce:	e8 b9 ea 00 00       	call   c001588c <Thr::executeDLL(unsigned long, void*)>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	6a 02                	push   0x2
c0006ddb:	e8 f0 f4 00 00       	call   c00162d0 <blockTask(TaskState)>
c0006de0:	83 c4 10             	add    esp,0x10
c0006de3:	eb f1                	jmp    c0006dd6 <Krnl::firstTask()+0x12e>
c0006de5:	90                   	nop

c0006de6 <Computer::Computer()>:
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ded:	83 ec 08             	sub    esp,0x8
c0006df0:	68 6d 0b 02 c0       	push   0xc0020b6d
c0006df5:	50                   	push   eax
c0006df6:	e8 5f 5d 00 00       	call   c000cb5a <Device::Device(char const*)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	ba 74 0c 02 c0       	mov    edx,0xc0020c74
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	89 10                	mov    DWORD PTR [eax],edx
c0006e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e2f:	83 ca 04             	or     edx,0x4
c0006e32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e42:	0f b6 d0             	movzx  edx,al
c0006e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e49:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	0f b6 d0             	movzx  edx,al
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e70:	8d 50 01             	lea    edx,[eax+0x1]
c0006e73:	88 d1                	mov    cl,dl
c0006e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e79:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e7f:	0f b6 d0             	movzx  edx,al
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8a:	83 e1 3f             	and    ecx,0x3f
c0006e8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e91:	90                   	nop
c0006e92:	83 c4 0c             	add    esp,0xc
c0006e95:	c3                   	ret    

c0006e96 <Computer::setBootMessage(char const*)>:
c0006e96:	c3                   	ret    
c0006e97:	90                   	nop

c0006e98 <Computer::detectFeatures()>:
c0006e98:	55                   	push   ebp
c0006e99:	57                   	push   edi
c0006e9a:	56                   	push   esi
c0006e9b:	53                   	push   ebx
c0006e9c:	83 ec 1c             	sub    esp,0x1c
c0006e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eaf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb5:	e8 3f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eba:	31 d2                	xor    edx,edx
c0006ebc:	85 c0                	test   eax,eax
c0006ebe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec4:	0f 95 c2             	setne  dl
c0006ec7:	83 e0 fd             	and    eax,0xfffffffd
c0006eca:	d1 e2                	shl    edx,1
c0006ecc:	09 d0                	or     eax,edx
c0006ece:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed4:	a8 02                	test   al,0x2
c0006ed6:	75 51                	jne    c0006f29 <Computer::detectFeatures()+0x91>
c0006ed8:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006edf:	74 0f                	je     c0006ef0 <Computer::detectFeatures()+0x58>
c0006ee1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee7:	83 e0 fb             	and    eax,0xfffffffb
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	e8 01 85 01 00       	call   c001f3f6 <x87Detect>
c0006ef5:	83 e0 01             	and    eax,0x1
c0006ef8:	c1 e0 04             	shl    eax,0x4
c0006efb:	89 c2                	mov    edx,eax
c0006efd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f03:	83 e0 ef             	and    eax,0xffffffef
c0006f06:	09 d0                	or     eax,edx
c0006f08:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0e:	88 c2                	mov    dl,al
c0006f10:	a8 10                	test   al,0x10
c0006f12:	0f 85 33 01 00 00    	jne    c000704b <Computer::detectFeatures()+0x1b3>
c0006f18:	80 e2 80             	and    dl,0x80
c0006f1b:	0f 85 4c 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1d5>
c0006f21:	83 c4 1c             	add    esp,0x1c
c0006f24:	5b                   	pop    ebx
c0006f25:	5e                   	pop    esi
c0006f26:	5f                   	pop    edi
c0006f27:	5d                   	pop    ebp
c0006f28:	c3                   	ret    
c0006f29:	83 ec 0c             	sub    esp,0xc
c0006f2c:	6a 20                	push   0x20
c0006f2e:	e8 21 94 00 00       	call   c0010354 <CPU::cpuidCheckEDX(unsigned int)>
c0006f33:	83 e0 01             	and    eax,0x1
c0006f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f43:	83 e0 f7             	and    eax,0xfffffff7
c0006f46:	09 d0                	or     eax,edx
c0006f48:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f4e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f55:	e8 fa 93 00 00       	call   c0010354 <CPU::cpuidCheckEDX(unsigned int)>
c0006f5a:	89 c2                	mov    edx,eax
c0006f5c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f62:	83 e2 01             	and    edx,0x1
c0006f65:	83 e0 fe             	and    eax,0xfffffffe
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f70:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f77:	e8 d8 93 00 00       	call   c0010354 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	c1 e2 07             	shl    edx,0x7
c0006f87:	83 e0 7f             	and    eax,0x7f
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f99:	e8 b6 93 00 00       	call   c0010354 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	83 c4 10             	add    esp,0x10
c0006fa1:	83 e0 01             	and    eax,0x1
c0006fa4:	c1 e0 05             	shl    eax,0x5
c0006fa7:	89 c2                	mov    edx,eax
c0006fa9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006faf:	83 e0 df             	and    eax,0xffffffdf
c0006fb2:	09 d0                	or     eax,edx
c0006fb4:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc4:	0f 84 c9 00 00 00    	je     c0007093 <Computer::detectFeatures()+0x1fb>
c0006fca:	83 e0 fe             	and    eax,0xfffffffe
c0006fcd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	83 e2 09             	and    edx,0x9
c0006fde:	83 fa 01             	cmp    edx,0x1
c0006fe1:	75 09                	jne    c0006fec <Computer::detectFeatures()+0x154>
c0006fe3:	83 e0 fe             	and    eax,0xfffffffe
c0006fe6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff3:	50                   	push   eax
c0006ff4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff8:	55                   	push   ebp
c0006ff9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ffd:	57                   	push   edi
c0006ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007002:	56                   	push   esi
c0007003:	68 00 00 00 80       	push   0x80000000
c0007008:	e8 c3 92 00 00       	call   c00102d0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700d:	83 c4 20             	add    esp,0x20
c0007010:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701b:	0f 86 b7 fe ff ff    	jbe    c0006ed8 <Computer::detectFeatures()+0x40>
c0007021:	83 ec 0c             	sub    esp,0xc
c0007024:	50                   	push   eax
c0007025:	55                   	push   ebp
c0007026:	57                   	push   edi
c0007027:	56                   	push   esi
c0007028:	68 01 00 00 80       	push   0x80000001
c000702d:	e8 9e 92 00 00       	call   c00102d0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007032:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007038:	83 c4 20             	add    esp,0x20
c000703b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007040:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007046:	e9 8d fe ff ff       	jmp    c0006ed8 <Computer::detectFeatures()+0x40>
c000704b:	e8 60 83 01 00       	call   c001f3b0 <absolutelyNoChanceInHell>
c0007050:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007056:	c1 e0 07             	shl    eax,0x7
c0007059:	83 e2 7f             	and    edx,0x7f
c000705c:	09 c2                	or     edx,eax
c000705e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007064:	80 e2 80             	and    dl,0x80
c0007067:	0f 84 b4 fe ff ff    	je     c0006f21 <Computer::detectFeatures()+0x89>
c000706d:	e8 ae 7f 01 00       	call   c001f020 <avxDetect>
c0007072:	83 e0 01             	and    eax,0x1
c0007075:	c1 e0 05             	shl    eax,0x5
c0007078:	89 c2                	mov    edx,eax
c000707a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007080:	83 e0 df             	and    eax,0xffffffdf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708b:	83 c4 1c             	add    esp,0x1c
c000708e:	5b                   	pop    ebx
c000708f:	5e                   	pop    esi
c0007090:	5f                   	pop    edi
c0007091:	5d                   	pop    ebp
c0007092:	c3                   	ret    
c0007093:	83 ec 0c             	sub    esp,0xc
c0007096:	68 00 02 00 00       	push   0x200
c000709b:	e8 b4 92 00 00       	call   c0010354 <CPU::cpuidCheckEDX(unsigned int)>
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	89 c2                	mov    edx,eax
c00070a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ab:	83 e2 01             	and    edx,0x1
c00070ae:	83 e0 fe             	and    eax,0xfffffffe
c00070b1:	09 d0                	or     eax,edx
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 15 ff ff ff       	jmp    c0006fd3 <Computer::detectFeatures()+0x13b>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 0c             	add    esp,0xc
c00070d9:	c3                   	ret    
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	68 76 0b 02 c0       	push   0xc0020b76
c00070e2:	e8 34 a5 00 00       	call   c001161b <KePanic(char const*)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	eb e4                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	83 ec 04             	sub    esp,0x4
c00070f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007104:	74 10                	je     c0007116 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007106:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710a:	89 f0                	mov    eax,esi
c000710c:	89 fa                	mov    edx,edi
c000710e:	0f 30                	wrmsr  
c0007110:	83 c4 04             	add    esp,0x4
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	c3                   	ret    
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	68 7c 0b 02 c0       	push   0xc0020b7c
c000711e:	e8 f8 a4 00 00       	call   c001161b <KePanic(char const*)>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	eb de                	jmp    c0007106 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007128 <Computer::shutdown()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007131:	6a 00                	push   0x0
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	50                   	push   eax
c0007138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713b:	83 c4 1c             	add    esp,0x1c
c000713e:	c3                   	ret    
c000713f:	90                   	nop

c0007140 <Computer::restart()>:
c0007140:	83 ec 0c             	sub    esp,0xc
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 10                	mov    edx,DWORD PTR [eax]
c0007149:	6a 00                	push   0x0
c000714b:	6a 00                	push   0x0
c000714d:	6a 01                	push   0x1
c000714f:	50                   	push   eax
c0007150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007153:	83 c4 1c             	add    esp,0x1c
c0007156:	c3                   	ret    
c0007157:	90                   	nop

c0007158 <Computer::sleep()>:
c0007158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007166:	e9 01 8c 00 00       	jmp    c000fd6c <ACPI::sleep()>
c000716b:	90                   	nop

c000716c <Computer::nmiEnabled()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <Computer::readCMOS(unsigned char)>:
c0007178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007180:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007187:	75 09                	jne    c0007192 <Computer::readCMOS(unsigned char)+0x1a>
c0007189:	b2 80                	mov    dl,0x80
c000718b:	09 d0                	or     eax,edx
c000718d:	e6 70                	out    0x70,al
c000718f:	e4 71                	in     al,0x71
c0007191:	c3                   	ret    
c0007192:	31 d2                	xor    edx,edx
c0007194:	eb f5                	jmp    c000718b <Computer::readCMOS(unsigned char)+0x13>

c0007196 <Computer::enableNMI(bool)>:
c0007196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ac:	eb ca                	jmp    c0007178 <Computer::readCMOS(unsigned char)>

c00071ae <Computer::open(int, int, void*)>:
c00071ae:	56                   	push   esi
c00071af:	53                   	push   ebx
c00071b0:	83 ec 10             	sub    esp,0x10
c00071b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b7:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071be:	68 82 0b 02 c0       	push   0xc0020b82
c00071c3:	0f 94 05 20 36 02 c0 	sete   BYTE PTR ds:0xc0023620
c00071ca:	e8 4c 9d 00 00       	call   c0010f1b <KeSetBootMessage(char const*)>
c00071cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d6:	e8 db 08 00 00       	call   c0007ab6 <malloc>
c00071db:	89 04 24             	mov    DWORD PTR [esp],eax
c00071de:	89 c6                	mov    esi,eax
c00071e0:	e8 fb 86 00 00       	call   c000f8e0 <ACPI::ACPI()>
c00071e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071eb:	58                   	pop    eax
c00071ec:	5a                   	pop    edx
c00071ed:	56                   	push   esi
c00071ee:	53                   	push   ebx
c00071ef:	e8 ce 57 00 00       	call   c000c9c2 <Device::addChild(Device*)>
c00071f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f7:	e8 9c fc ff ff       	call   c0006e98 <Computer::detectFeatures()>
c00071fc:	59                   	pop    ecx
c00071fd:	5e                   	pop    esi
c00071fe:	6a 01                	push   0x1
c0007200:	53                   	push   ebx
c0007201:	e8 90 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c0007206:	c7 04 24 9a 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b9a
c000720d:	e8 09 9d 00 00       	call   c0010f1b <KeSetBootMessage(char const*)>
c0007212:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007219:	e8 98 08 00 00       	call   c0007ab6 <malloc>
c000721e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007221:	89 c6                	mov    esi,eax
c0007223:	e8 e4 91 00 00       	call   c001040c <CPU::CPU()>
c0007228:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000722e:	58                   	pop    eax
c000722f:	5a                   	pop    edx
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	e8 8b 57 00 00       	call   c000c9c2 <Device::addChild(Device*)>
c0007237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007241:	8b 10                	mov    edx,DWORD PTR [eax]
c0007243:	51                   	push   ecx
c0007244:	6a 00                	push   0x0
c0007246:	6a 00                	push   0x0
c0007248:	50                   	push   eax
c0007249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724c:	83 c4 14             	add    esp,0x14
c000724f:	68 48 0c 02 c0       	push   0xc0020c48
c0007254:	e8 c2 9c 00 00       	call   c0010f1b <KeSetBootMessage(char const*)>
c0007259:	e8 56 0d 01 00       	call   c0017fb4 <HalInitialiseCoprocessor()>
c000725e:	c7 04 24 b4 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bb4
c0007265:	e8 b1 9c 00 00       	call   c0010f1b <KeSetBootMessage(char const*)>
c000726a:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007271:	e8 22 ed 00 00       	call   c0015f98 <setupMultitasking(void (*)())>
c0007276:	83 c4 14             	add    esp,0x14
c0007279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000727e:	5b                   	pop    ebx
c000727f:	5e                   	pop    esi
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::disableNMI()>:
c0007282:	6a 00                	push   0x0
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	50                   	push   eax
c0007289:	e8 08 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c000728e:	5a                   	pop    edx
c000728f:	59                   	pop    ecx
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007292:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000729e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a5:	75 0b                	jne    c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a7:	b1 80                	mov    cl,0x80
c00072a9:	09 c8                	or     eax,ecx
c00072ab:	e6 70                	out    0x70,al
c00072ad:	88 d0                	mov    al,dl
c00072af:	e6 71                	out    0x71,al
c00072b1:	c3                   	ret    
c00072b2:	31 c9                	xor    ecx,ecx
c00072b4:	eb f3                	jmp    c00072a9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b6 <Computer::handleNMI()>:
c00072b6:	56                   	push   esi
c00072b7:	53                   	push   ebx
c00072b8:	83 ec 10             	sub    esp,0x10
c00072bb:	e4 92                	in     al,0x92
c00072bd:	89 c6                	mov    esi,eax
c00072bf:	e4 61                	in     al,0x61
c00072c1:	68 cf 0b 02 c0       	push   0xc0020bcf
c00072c6:	88 c3                	mov    bl,al
c00072c8:	e8 78 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cd:	83 c4 10             	add    esp,0x10
c00072d0:	83 e6 10             	and    esi,0x10
c00072d3:	75 10                	jne    c00072e5 <Computer::handleNMI()+0x2f>
c00072d5:	f6 c3 40             	test   bl,0x40
c00072d8:	75 20                	jne    c00072fa <Computer::handleNMI()+0x44>
c00072da:	80 e3 80             	and    bl,0x80
c00072dd:	75 30                	jne    c000730f <Computer::handleNMI()+0x59>
c00072df:	83 c4 04             	add    esp,0x4
c00072e2:	5b                   	pop    ebx
c00072e3:	5e                   	pop    esi
c00072e4:	c3                   	ret    
c00072e5:	83 ec 0c             	sub    esp,0xc
c00072e8:	68 e0 0b 02 c0       	push   0xc0020be0
c00072ed:	e8 29 a3 00 00       	call   c001161b <KePanic(char const*)>
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	74 e0                	je     c00072da <Computer::handleNMI()+0x24>
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	68 ed 0b 02 c0       	push   0xc0020bed
c0007302:	e8 14 a3 00 00       	call   c001161b <KePanic(char const*)>
c0007307:	83 c4 10             	add    esp,0x10
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	74 d0                	je     c00072df <Computer::handleNMI()+0x29>
c000730f:	c7 44 24 10 f7 0b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020bf7
c0007317:	83 c4 04             	add    esp,0x4
c000731a:	5b                   	pop    ebx
c000731b:	5e                   	pop    esi
c000731c:	e9 fa a2 00 00       	jmp    c001161b <KePanic(char const*)>
c0007321:	90                   	nop

c0007322 <GDTEntry::setBase(unsigned int)>:
c0007322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732a:	89 c1                	mov    ecx,eax
c000732c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007330:	c1 e9 10             	shr    ecx,0x10
c0007333:	c1 e8 18             	shr    eax,0x18
c0007336:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007339:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733c:	c3                   	ret    
c000733d:	90                   	nop

c000733e <GDTEntry::setLimit(unsigned int)>:
c000733e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007349:	66 89 01             	mov    WORD PTR [ecx],ax
c000734c:	83 e2 f0             	and    edx,0xfffffff0
c000734f:	c1 e8 10             	shr    eax,0x10
c0007352:	83 e0 0f             	and    eax,0xf
c0007355:	09 d0                	or     eax,edx
c0007357:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <GDT::GDT()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <GDT::addEntry(GDTEntry)>:
c0007372:	53                   	push   ebx
c0007373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737b:	8b 02                	mov    eax,DWORD PTR [edx]
c000737d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007381:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007385:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007389:	8d 48 01             	lea    ecx,[eax+0x1]
c000738c:	c1 e0 03             	shl    eax,0x3
c000738f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007391:	5b                   	pop    ebx
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::getNumberOfEntries()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 00                	mov    eax,DWORD PTR [eax]
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <GDT::flush()>:
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a2:	83 c0 04             	add    eax,0x4
c00073a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ac:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073b1:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073b8:	e9 9d 8f ff ff       	jmp    c000035a <loadGDT>
c00073bd:	90                   	nop

c00073be <GDT::setup()>:
c00073be:	57                   	push   edi
c00073bf:	56                   	push   esi
c00073c0:	53                   	push   ebx
c00073c1:	83 ec 30             	sub    esp,0x30
c00073c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c8:	6a 00                	push   0x0
c00073ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ce:	56                   	push   esi
c00073cf:	e8 4e ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073d4:	6a 00                	push   0x0
c00073d6:	56                   	push   esi
c00073d7:	e8 62 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e4:	6a 00                	push   0x0
c00073e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ea:	56                   	push   esi
c00073eb:	e8 32 ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073f0:	68 ff ff ff 00       	push   0xffffff
c00073f5:	56                   	push   esi
c00073f6:	e8 43 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007407:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007410:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741d:	89 f8                	mov    eax,edi
c000741f:	89 fa                	mov    edx,edi
c0007421:	80 e4 f7             	and    ah,0xf7
c0007424:	80 ce 60             	or     dh,0x60
c0007427:	89 c7                	mov    edi,eax
c0007429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742d:	80 cc 60             	or     ah,0x60
c0007430:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007438:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007440:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007444:	83 c4 20             	add    esp,0x20
c0007447:	6a 00                	push   0x0
c0007449:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744d:	50                   	push   eax
c000744e:	e8 cf fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007453:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007457:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000745f:	83 e0 3f             	and    eax,0x3f
c0007462:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007466:	6a 00                	push   0x0
c0007468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746c:	50                   	push   eax
c000746d:	e8 b0 fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007472:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007476:	83 e0 3f             	and    eax,0x3f
c0007479:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747d:	83 c4 0c             	add    esp,0xc
c0007480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	53                   	push   ebx
c0007489:	e8 e4 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	53                   	push   ebx
c000749a:	e8 d3 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	e8 c8 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074aa:	83 c4 0c             	add    esp,0xc
c00074ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	53                   	push   ebx
c00074b6:	e8 b7 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074bb:	83 c4 0c             	add    esp,0xc
c00074be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	53                   	push   ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	53                   	push   ebx
c00074d8:	e8 95 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	53                   	push   ebx
c00074e9:	e8 84 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f1:	e8 a6 fe ff ff       	call   c000739c <GDT::flush()>
c00074f6:	83 c4 40             	add    esp,0x40
c00074f9:	5b                   	pop    ebx
c00074fa:	5e                   	pop    esi
c00074fb:	5f                   	pop    edi
c00074fc:	c3                   	ret    

c00074fd <idleFunction(void*)>:
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007505:	48                   	dec    eax
c0007506:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000750b:	75 01                	jne    c000750e <idleFunction(void*)+0x11>
c000750d:	fb                   	sti    
c000750e:	e8 6d 07 01 00       	call   c0017c80 <HalSystemIdle()>
c0007513:	e8 9a 84 01 00       	call   c001f9b2 <idleCommon()>
c0007518:	eb f4                	jmp    c000750e <idleFunction(void*)+0x11>
c000751a:	66 90                	xchg   ax,ax

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007615:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000761a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 b0 f0 01 c0       	push   0xc001f0b0
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 c0 f0 01 c0       	push   0xc001f0c0
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 ca f0 01 c0       	push   0xc001f0ca
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 d4 f0 01 c0       	push   0xc001f0d4
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 de f0 01 c0       	push   0xc001f0de
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 e8 f0 01 c0       	push   0xc001f0e8
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 f2 f0 01 c0       	push   0xc001f0f2
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 fc f0 01 c0       	push   0xc001f0fc
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 06 f1 01 c0       	push   0xc001f106
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 0e f1 01 c0       	push   0xc001f10e
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 18 f1 01 c0       	push   0xc001f118
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 20 f1 01 c0       	push   0xc001f120
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 28 f1 01 c0       	push   0xc001f128
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 30 f1 01 c0       	push   0xc001f130
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 4a f1 01 c0       	push   0xc001f14a
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 52 f1 01 c0       	push   0xc001f152
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 5c f1 01 c0       	push   0xc001f15c
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 66 f1 01 c0       	push   0xc001f166
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 70 f1 01 c0       	push   0xc001f170
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 0a f2 01 c0       	push   0xc001f20a
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 11 f2 01 c0       	push   0xc001f211
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 fc f1 01 c0       	push   0xc001f1fc
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 03 f2 01 c0       	push   0xc001f203
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 7a f1 01 c0       	push   0xc001f17a
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 84 f1 01 c0       	push   0xc001f184
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 8e f1 01 c0       	push   0xc001f18e
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 98 f1 01 c0       	push   0xc001f198
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 a2 f1 01 c0       	push   0xc001f1a2
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 ac f1 01 c0       	push   0xc001f1ac
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 b6 f1 01 c0       	push   0xc001f1b6
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 c0 f1 01 c0       	push   0xc001f1c0
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 ca f1 01 c0       	push   0xc001f1ca
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 d4 f1 01 c0       	push   0xc001f1d4
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 de f1 01 c0       	push   0xc001f1de
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 e8 f1 01 c0       	push   0xc001f1e8
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 f2 f1 01 c0       	push   0xc001f1f2
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 4c f3 01 c0       	push   0xc001f34c
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 56 f3 01 c0       	push   0xc001f356
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 60 f3 01 c0       	push   0xc001f360
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 6a f3 01 c0       	push   0xc001f36a
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 74 f3 01 c0       	push   0xc001f374
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 7e f3 01 c0       	push   0xc001f37e
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 88 f3 01 c0       	push   0xc001f388
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 92 f3 01 c0       	push   0xc001f392
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 06 f1 01 c0       	push   0xc001f106
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 10 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023610
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079ba:	8b 3d 10 36 02 c0    	mov    edi,DWORD PTR ds:0xc0023610
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 10 36 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023610,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 10 36 02 c0       	mov    eax,ds:0xc0023610
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 98 0c 02 c0       	push   0xc0020c98
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 c8 0c 02 c0       	push   0xc0020cc8
c0007a27:	e8 ef 9b 00 00       	call   c001161b <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 cd 0c 02 c0       	push   0xc0020ccd
c0007a3d:	e8 d9 9b 00 00       	call   c001161b <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 d4 0c 02 c0       	push   0xc0020cd4
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 36 93 00 00       	call   c0010e9f <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 5f 92 00 00       	call   c0010de9 <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007b9b:	e8 aa 7d 01 00       	call   c001f94a <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 30 f2 ff ff       	call   c0006de6 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e7 f5 ff ff       	call   c00071ae <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 ec 0c 02 c0       	push   0xc0020cec
c0007c31:	e8 e5 99 00 00       	call   c001161b <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 6e 02 c0    	lea    edx,[ebp-0x3ffd9114]
c0007c75:	8d 84 05 ed 6e 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 ec 0c 02 c0       	push   0xc0020cec
c0007ca2:	e8 74 99 00 00       	call   c001161b <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 14 36 02 c0    	mov    esi,DWORD PTR ds:0xc0023614
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d 14 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023614
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 14 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023614
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 91 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020d91
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 6e 98 00 00       	jmp    c001161b <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 14 0d 02 c0       	push   0xc0020d14
c0007e31:	e8 e5 97 00 00       	call   c001161b <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e58:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 a7 0d 02 c0       	push   0xc0020da7
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 44 0d 02 c0       	push   0xc0020d44
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 68 0d 02 c0       	push   0xc0020d68
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 cd 0d 02 c0       	push   0xc0020dcd
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 bf 0d 02 c0       	push   0xc0020dbf
c000813c:	e8 da 94 00 00       	call   c001161b <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba 2c 0e 02 c0       	mov    edx,0xc0020e2c
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 e9 0d 02 c0       	push   0xc0020de9
c0008311:	e8 05 93 00 00       	call   c001161b <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000835a:	e8 5d dd 00 00       	call   c00160bc <schedule()>
c000835f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008364:	48                   	dec    eax
c0008365:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 39 74 01 00       	call   c001f830 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 06 0e 02 c0       	push   0xc0020e06
c000840c:	e8 0a 92 00 00       	call   c001161b <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba 2c 0e 02 c0       	mov    edx,0xc0020e2c
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba 74 0e 02 c0       	mov    edx,0xc0020e74
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 a6 53 00 00       	call   c000d89c <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 58 09 01 00       	call   c0018e74 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d 40 36 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc9c0]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d 40 36 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc9c0]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 f8 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcb08]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 d0 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcb30]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 8a 06 01 00       	call   c0018d08 <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 e7 06 01 00       	jmp    c0018e10 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 40 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020e40
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 a5 8e 00 00       	jmp    c001161b <KePanic(char const*)>
c0008776:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 14 3b 00 00       	jmp    c000c3e7 <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be 4e 0e 02 c0       	mov    esi,0xc0020e4e
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 ee 01 01 00       	call   c0018e10 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba 74 0e 02 c0       	mov    edx,0xc0020e74
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 5f 0e 02 c0       	push   0xc0020e5f
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 65 0e 02 c0       	push   0xc0020e65
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b3 e2 ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 be e2 ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 ba e2 ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c1 e2 ff ff       	call   c000739c <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba 3c 0f 02 c0       	mov    edx,0xc0020f3c
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 80 36 02 c0       	mov    eax,ds:0xc0023680
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 80 36 02 c0    	mov    DWORD PTR ds:0xc0023680,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 6f 02 c0       	push   0xc0026f98
c00091fc:	e8 17 68 01 00       	call   c001fa18 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba 58 0f 02 c0       	mov    edx,0xc0020f58
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba 3c 0f 02 c0       	mov    edx,0xc0020f3c
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 6f 02 c0       	push   0xc0026f98
c00093d0:	e8 17 67 01 00       	call   c001faec <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 6f 02 c0       	push   0xc0026f98
c00093e4:	e8 0b 67 01 00       	call   c001faf4 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 6f 02 c0       	push   0xc0026f98
c0009402:	e8 11 66 01 00       	call   c001fa18 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 14 0f 02 c0       	push   0xc0020f14
c000942c:	e8 ea 81 00 00       	call   c001161b <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba 58 0f 02 c0       	mov    edx,0xc0020f58
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 6f 02 c0       	push   0xc0026f98
c00094d1:	e8 16 66 01 00       	call   c001faec <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 6f 02 c0       	push   0xc0026f98
c00094ee:	e8 a3 66 01 00       	call   c001fb96 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 6f 02 c0       	push   0xc0026f98
c0009570:	e8 61 64 01 00       	call   c001f9d6 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 0c 36 02 c0       	push   0xc002360c
c0009580:	68 98 6f 02 c0       	push   0xc0026f98
c0009585:	68 d4 f9 01 c0       	push   0xc001f9d4
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 88 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023688
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d 88 36 02 c0    	mov    ecx,DWORD PTR ds:0xc0023688
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 84 36 02 c0    	mov    esi,DWORD PTR ds:0xc0023684
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 84 36 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023684,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 84 36 02 c0    	mov    DWORD PTR ds:0xc0023684,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 6c 0f 02 c0       	push   0xc0020f6c
c0009689:	e8 8d 7f 00 00       	call   c001161b <KePanic(char const*)>
c000968e:	8b 35 84 36 02 c0    	mov    esi,DWORD PTR ds:0xc0023684
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d 84 36 02 c0    	mov    DWORD PTR ds:0xc0023684,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 84 36 02 c0       	mov    eax,ds:0xc0023684
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 84 36 02 c0    	mov    DWORD PTR ds:0xc0023684,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 84 36 02 c0       	mov    ds:0xc0023684,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 8c 36 02 c0    	mov    edx,DWORD PTR ds:0xc002368c
c000975f:	8b 0d 94 36 02 c0    	mov    ecx,DWORD PTR ds:0xc0023694
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d 8c 36 02 c0    	mov    ecx,DWORD PTR ds:0xc002368c
c000977a:	a1 90 36 02 c0       	mov    eax,ds:0xc0023690
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d 90 36 02 c0    	cmp    DWORD PTR ds:0xc0023690,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 00 12 02 c0       	push   0xc0021200
c00097c0:	e8 56 7e 00 00       	call   c001161b <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 17 12 02 c0       	push   0xc0021217
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d 90 36 02 c0    	mov    DWORD PTR ds:0xc0023690,ebx
c0009864:	c6 05 98 36 02 c0 43 	mov    BYTE PTR ds:0xc0023698,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 94 36 02 c0       	mov    ds:0xc0023694,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 8c 36 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002368c,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 90 36 02 c0       	mov    eax,ds:0xc0023690
c0009896:	f7 35 8c 36 02 c0    	div    DWORD PTR ds:0xc002368c
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 8c 0f 02 c0       	push   0xc0020f8c
c00098d1:	e8 45 7d 00 00       	call   c001161b <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 2e 12 02 c0       	push   0xc002122e
c00099a3:	e8 73 7c 00 00       	call   c001161b <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 b0 0f 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020fb0
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 10 7c 00 00       	jmp    c001161b <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 4a 12 02 c0       	push   0xc002124a
c0009a18:	e8 fe 7b 00 00       	call   c001161b <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 66 12 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021266
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 b4 7b 00 00       	jmp    c001161b <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 d4 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020fd4
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b26:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009d10:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 f8 0f 02 c0       	push   0xc0020ff8
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 60 10 02 c0       	push   0xc0021060
c0009dad:	e8 69 78 00 00       	call   c001161b <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 84 10 02 c0       	push   0xc0021084
c0009e99:	e8 7d 77 00 00       	call   c001161b <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 b0 10 02 c0       	push   0xc00210b0
c0009fed:	e8 29 76 00 00       	call   c001161b <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 32 2a 00 00       	call   c000cc56 <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 80 12 02 c0       	push   0xc0021280
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 8c 36 02 c0       	mov    eax,ds:0xc002368c
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 98 36 02 c0 	movsx  eax,BYTE PTR ds:0xc0023698
c000a2fd:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a304:	50                   	push   eax
c000a305:	e8 06 3b 00 00       	call   c000de10 <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d 8c 36 02 c0    	cmp    DWORD PTR ds:0xc002368c,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 d4 10 02 c0       	push   0xc00210d4
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a36f:	c7 44 24 50 8e 12 02 c0 	mov    DWORD PTR [esp+0x50],0xc002128e
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 b1 12 02 c0       	push   0xc00212b1
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 9f 12 02 c0       	push   0xc002129f
c000a3db:	e8 3b 72 00 00       	call   c001161b <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 b1 12 02 c0       	push   0xc00212b1
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 8c 36 02 c0    	mov    edx,DWORD PTR ds:0xc002368c
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 98 36 02 c0 	movsx  eax,BYTE PTR ds:0xc0023698
c000a47a:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a481:	50                   	push   eax
c000a482:	e8 1d 39 00 00       	call   c000dda4 <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 8c 36 02 c0    	cmp    DWORD PTR ds:0xc002368c,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 c4 12 02 c0       	push   0xc00212c4
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 04 11 02 c0       	push   0xc0021104
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 24 11 02 c0       	push   0xc0021124
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 84 11 02 c0 	mov    DWORD PTR [esp],0xc0021184
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 d9 12 02 c0       	push   0xc00212d9
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 ed 12 02 c0       	push   0xc00212ed
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 00 13 02 c0       	push   0xc0021300
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 50 02 c0       	push   0xc0025000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 50 02 c0       	push   0xc0025000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 0d 13 02 c0       	push   0xc002130d
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 26 13 02 c0       	push   0xc0021326
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 26 13 02 c0       	push   0xc0021326
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 2e 13 02 c0 	mov    DWORD PTR [esp],0xc002132e
c000a7f8:	e8 1e 6e 00 00       	call   c001161b <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 46 13 02 c0       	push   0xc0021346
c000a80a:	e8 0c 6e 00 00       	call   c001161b <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be 4f 0e 02 c0       	mov    esi,0xc0020e4f
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 4e 0e 02 c0       	mov    al,ds:0xc0020e4e
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 5c 13 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdeca4]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 ac 14 02 c0       	push   0xc00214ac
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 c0 14 02 c0       	push   0xc00214c0
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 ca 14 02 c0       	push   0xc00214ca
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 d4 14 02 c0       	push   0xc00214d4
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 18 16 02 c0       	push   0xc0021618
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 de 14 02 c0       	push   0xc00214de
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 38 16 02 c0       	push   0xc0021638
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 f3 14 02 c0       	push   0xc00214f3
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 0d 15 02 c0       	push   0xc002150d
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 a0 36 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc960]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 60 16 02 c0       	push   0xc0021660
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 18 16 02 c0       	push   0xc0021618
c000abb4:	e8 62 6a 00 00       	call   c001161b <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 a8 16 02 c0       	push   0xc00216a8
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 a8 16 02 c0       	push   0xc00216a8
c000abe3:	e8 33 6a 00 00       	call   c001161b <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 18 15 02 c0       	push   0xc0021518
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 18 15 02 c0       	push   0xc0021518
c000ac0f:	e8 07 6a 00 00       	call   c001161b <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 35 15 02 c0       	push   0xc0021535
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 35 15 02 c0       	push   0xc0021535
c000ac3b:	e8 db 69 00 00       	call   c001161b <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 c8 16 02 c0       	push   0xc00216c8
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 c8 16 02 c0       	push   0xc00216c8
c000ac67:	e8 af 69 00 00       	call   c001161b <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 ec 16 02 c0       	push   0xc00216ec
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 ec 16 02 c0       	push   0xc00216ec
c000ac93:	e8 83 69 00 00       	call   c001161b <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 51 15 02 c0       	push   0xc0021551
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 51 15 02 c0       	push   0xc0021551
c000acbf:	e8 57 69 00 00       	call   c001161b <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 6d 15 02 c0       	push   0xc002156d
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 6d 15 02 c0       	push   0xc002156d
c000aceb:	e8 2b 69 00 00       	call   c001161b <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 0c 17 02 c0       	push   0xc002170c
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 0c 17 02 c0       	push   0xc002170c
c000ad17:	e8 ff 68 00 00       	call   c001161b <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 30 17 02 c0       	push   0xc0021730
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 30 17 02 c0       	push   0xc0021730
c000ad43:	e8 d3 68 00 00       	call   c001161b <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiIsHashInTable(unsigned short)>:
c000ad50:	0f b7 d0             	movzx  edx,ax
c000ad53:	83 e0 07             	and    eax,0x7
c000ad56:	c1 fa 03             	sar    edx,0x3
c000ad59:	88 c1                	mov    cl,al
c000ad5b:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad62:	d3 fa                	sar    edx,cl
c000ad64:	89 d0                	mov    eax,edx
c000ad66:	83 e0 01             	and    eax,0x1
c000ad69:	c3                   	ret    

c000ad6a <KiSetHashInTable(unsigned short, bool)>:
c000ad6a:	56                   	push   esi
c000ad6b:	53                   	push   ebx
c000ad6c:	0f b7 d8             	movzx  ebx,ax
c000ad6f:	83 e0 07             	and    eax,0x7
c000ad72:	c1 fb 03             	sar    ebx,0x3
c000ad75:	89 c1                	mov    ecx,eax
c000ad77:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ad7e:	b8 01 00 00 00       	mov    eax,0x1
c000ad83:	d3 e0                	shl    eax,cl
c000ad85:	84 d2                	test   dl,dl
c000ad87:	74 04                	je     c000ad8d <KiSetHashInTable(unsigned short, bool)+0x23>
c000ad89:	09 f0                	or     eax,esi
c000ad8b:	eb 04                	jmp    c000ad91 <KiSetHashInTable(unsigned short, bool)+0x27>
c000ad8d:	f7 d0                	not    eax
c000ad8f:	21 f0                	and    eax,esi
c000ad91:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000ad97:	5b                   	pop    ebx
c000ad98:	5e                   	pop    esi
c000ad99:	c3                   	ret    

c000ad9a <KiFlushSymlinkChanges()>:
c000ad9a:	57                   	push   edi
c000ad9b:	56                   	push   esi
c000ad9c:	53                   	push   ebx
c000ad9d:	83 ec 1c             	sub    esp,0x1c
c000ada0:	68 14 01 00 00       	push   0x114
c000ada5:	e8 0c cd ff ff       	call   c0007ab6 <malloc>
c000adaa:	83 c4 0c             	add    esp,0xc
c000adad:	89 c3                	mov    ebx,eax
c000adaf:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000adb5:	68 4f 17 02 c0       	push   0xc002174f
c000adba:	50                   	push   eax
c000adbb:	e8 88 0d 00 00       	call   c000bb48 <File::File(char const*, Process*)>
c000adc0:	83 c4 10             	add    esp,0x10
c000adc3:	85 db                	test   ebx,ebx
c000adc5:	75 10                	jne    c000add7 <KiFlushSymlinkChanges()+0x3d>
c000adc7:	83 ec 0c             	sub    esp,0xc
c000adca:	68 6d 17 02 c0       	push   0xc002176d
c000adcf:	e8 47 68 00 00       	call   c001161b <KePanic(char const*)>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	50                   	push   eax
c000add8:	50                   	push   eax
c000add9:	6a 06                	push   0x6
c000addb:	53                   	push   ebx
c000addc:	e8 85 0d 00 00       	call   c000bb66 <File::open(FileOpenMode)>
c000ade1:	83 c4 10             	add    esp,0x10
c000ade4:	85 c0                	test   eax,eax
c000ade6:	74 10                	je     c000adf8 <KiFlushSymlinkChanges()+0x5e>
c000ade8:	83 ec 0c             	sub    esp,0xc
c000adeb:	68 87 17 02 c0       	push   0xc0021787
c000adf0:	e8 26 68 00 00       	call   c001161b <KePanic(char const*)>
c000adf5:	83 c4 10             	add    esp,0x10
c000adf8:	31 f6                	xor    esi,esi
c000adfa:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000ae00:	7e 70                	jle    c000ae72 <KiFlushSymlinkChanges()+0xd8>
c000ae02:	83 ec 0c             	sub    esp,0xc
c000ae05:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae07:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ae0b:	89 f0                	mov    eax,esi
c000ae0d:	57                   	push   edi
c000ae0e:	c1 e0 08             	shl    eax,0x8
c000ae11:	05 00 70 02 c0       	add    eax,0xc0027000
c000ae16:	50                   	push   eax
c000ae17:	6a 00                	push   0x0
c000ae19:	68 00 01 00 00       	push   0x100
c000ae1e:	53                   	push   ebx
c000ae1f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae22:	83 c4 20             	add    esp,0x20
c000ae25:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae2d:	74 10                	je     c000ae3f <KiFlushSymlinkChanges()+0xa5>
c000ae2f:	83 ec 0c             	sub    esp,0xc
c000ae32:	68 a1 17 02 c0       	push   0xc00217a1
c000ae37:	e8 df 67 00 00       	call   c001161b <KePanic(char const*)>
c000ae3c:	83 c4 10             	add    esp,0x10
c000ae3f:	83 ec 0c             	sub    esp,0xc
c000ae42:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae44:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae4b:	57                   	push   edi
c000ae4c:	52                   	push   edx
c000ae4d:	6a 00                	push   0x0
c000ae4f:	6a 08                	push   0x8
c000ae51:	53                   	push   ebx
c000ae52:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae55:	83 c4 20             	add    esp,0x20
c000ae58:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae5d:	74 10                	je     c000ae6f <KiFlushSymlinkChanges()+0xd5>
c000ae5f:	83 ec 0c             	sub    esp,0xc
c000ae62:	68 bb 17 02 c0       	push   0xc00217bb
c000ae67:	e8 af 67 00 00       	call   c001161b <KePanic(char const*)>
c000ae6c:	83 c4 10             	add    esp,0x10
c000ae6f:	46                   	inc    esi
c000ae70:	eb 88                	jmp    c000adfa <KiFlushSymlinkChanges()+0x60>
c000ae72:	83 ec 0c             	sub    esp,0xc
c000ae75:	53                   	push   ebx
c000ae76:	e8 49 0d 00 00       	call   c000bbc4 <File::close()>
c000ae7b:	83 c4 10             	add    esp,0x10
c000ae7e:	85 db                	test   ebx,ebx
c000ae80:	74 0c                	je     c000ae8e <KiFlushSymlinkChanges()+0xf4>
c000ae82:	83 ec 0c             	sub    esp,0xc
c000ae85:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae87:	53                   	push   ebx
c000ae88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae8b:	83 c4 10             	add    esp,0x10
c000ae8e:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae98:	83 c4 10             	add    esp,0x10
c000ae9b:	5b                   	pop    ebx
c000ae9c:	5e                   	pop    esi
c000ae9d:	5f                   	pop    edi
c000ae9e:	c3                   	ret    

c000ae9f <KiDeinitialiseSymlinks(void*)>:
c000ae9f:	e9 f6 fe ff ff       	jmp    c000ad9a <KiFlushSymlinkChanges()>

c000aea4 <KiGetSymlinkHash(char const*)>:
c000aea4:	53                   	push   ebx
c000aea5:	89 c3                	mov    ebx,eax
c000aea7:	83 ec 14             	sub    esp,0x14
c000aeaa:	50                   	push   eax
c000aeab:	e8 c0 56 ff ff       	call   c0000570 <strlen>
c000aeb0:	5a                   	pop    edx
c000aeb1:	59                   	pop    ecx
c000aeb2:	50                   	push   eax
c000aeb3:	53                   	push   ebx
c000aeb4:	e8 e4 60 00 00       	call   c0010f9d <KeCalculateCRC32(unsigned char*, int)>
c000aeb9:	83 c4 18             	add    esp,0x18
c000aebc:	89 c2                	mov    edx,eax
c000aebe:	5b                   	pop    ebx
c000aebf:	c1 ea 10             	shr    edx,0x10
c000aec2:	31 d0                	xor    eax,edx
c000aec4:	c3                   	ret    

c000aec5 <KiCreateSymlinkID()>:
c000aec5:	55                   	push   ebp
c000aec6:	57                   	push   edi
c000aec7:	56                   	push   esi
c000aec8:	53                   	push   ebx
c000aec9:	31 db                	xor    ebx,ebx
c000aecb:	83 ec 1c             	sub    esp,0x1c
c000aece:	e8 96 68 00 00       	call   c0011769 <KeRand()>
c000aed3:	43                   	inc    ebx
c000aed4:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000aeda:	31 d2                	xor    edx,edx
c000aedc:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000aedf:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000aee3:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000aee9:	c1 e0 1f             	shl    eax,0x1f
c000aeec:	89 d7                	mov    edi,edx
c000aeee:	89 c6                	mov    esi,eax
c000aef0:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000aef4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aefc:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000af02:	75 10                	jne    c000af14 <KiCreateSymlinkID()+0x4f>
c000af04:	83 ec 0c             	sub    esp,0xc
c000af07:	68 d5 17 02 c0       	push   0xc00217d5
c000af0c:	e8 0a 67 00 00       	call   c001161b <KePanic(char const*)>
c000af11:	83 c4 10             	add    esp,0x10
c000af14:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000af18:	75 04                	jne    c000af1e <KiCreateSymlinkID()+0x59>
c000af1a:	39 f5                	cmp    ebp,esi
c000af1c:	74 b0                	je     c000aece <KiCreateSymlinkID()+0x9>
c000af1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af26:	31 f0                	xor    eax,esi
c000af28:	83 c4 1c             	add    esp,0x1c
c000af2b:	31 fa                	xor    edx,edi
c000af2d:	5b                   	pop    ebx
c000af2e:	5e                   	pop    esi
c000af2f:	5f                   	pop    edi
c000af30:	5d                   	pop    ebp
c000af31:	c3                   	ret    

c000af32 <KeRegisterSymlink(char const*, unsigned long long)>:
c000af32:	53                   	push   ebx
c000af33:	83 ec 0c             	sub    esp,0xc
c000af36:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af3a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af3e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af42:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af47:	68 00 01 00 00       	push   0x100
c000af4c:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af53:	6a 00                	push   0x0
c000af55:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af5c:	c1 e0 08             	shl    eax,0x8
c000af5f:	05 00 70 02 c0       	add    eax,0xc0027000
c000af64:	50                   	push   eax
c000af65:	e8 86 55 ff ff       	call   c00004f0 <memset>
c000af6a:	58                   	pop    eax
c000af6b:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af70:	5a                   	pop    edx
c000af71:	c1 e0 08             	shl    eax,0x8
c000af74:	53                   	push   ebx
c000af75:	05 00 70 02 c0       	add    eax,0xc0027000
c000af7a:	50                   	push   eax
c000af7b:	e8 c0 56 ff ff       	call   c0000640 <strcpy>
c000af80:	89 d8                	mov    eax,ebx
c000af82:	e8 1d ff ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000af87:	59                   	pop    ecx
c000af88:	0f b7 d8             	movzx  ebx,ax
c000af8b:	58                   	pop    eax
c000af8c:	53                   	push   ebx
c000af8d:	68 de 17 02 c0       	push   0xc00217de
c000af92:	e8 ae f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af97:	89 d8                	mov    eax,ebx
c000af99:	ba 01 00 00 00       	mov    edx,0x1
c000af9e:	e8 c7 fd ff ff       	call   c000ad6a <KiSetHashInTable(unsigned short, bool)>
c000afa3:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000afa8:	83 c4 10             	add    esp,0x10
c000afab:	40                   	inc    eax
c000afac:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000afb1:	83 f8 03             	cmp    eax,0x3
c000afb4:	7e 09                	jle    c000afbf <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c000afb6:	83 c4 08             	add    esp,0x8
c000afb9:	5b                   	pop    ebx
c000afba:	e9 db fd ff ff       	jmp    c000ad9a <KiFlushSymlinkChanges()>
c000afbf:	83 c4 08             	add    esp,0x8
c000afc2:	5b                   	pop    ebx
c000afc3:	c3                   	ret    

c000afc4 <KeInitialiseSymlinks()>:
c000afc4:	57                   	push   edi
c000afc5:	56                   	push   esi
c000afc6:	53                   	push   ebx
c000afc7:	81 ec 14 01 00 00    	sub    esp,0x114
c000afcd:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c000afd7:	68 00 20 00 00       	push   0x2000
c000afdc:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000afe6:	6a 00                	push   0x0
c000afe8:	68 00 74 02 c0       	push   0xc0027400
c000afed:	e8 fe 54 ff ff       	call   c00004f0 <memset>
c000aff2:	59                   	pop    ecx
c000aff3:	5b                   	pop    ebx
c000aff4:	ff 35 00 94 02 c0    	push   DWORD PTR ds:0xc0029400
c000affa:	68 f2 17 02 c0       	push   0xc00217f2
c000afff:	e8 41 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b004:	5e                   	pop    esi
c000b005:	5f                   	pop    edi
c000b006:	6a 00                	push   0x0
c000b008:	68 9f ae 00 c0       	push   0xc000ae9f
c000b00d:	e8 f6 5d 00 00       	call   c0010e08 <KeRegisterAtexit(void (*)(void*), void*)>
c000b012:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b019:	e8 98 ca ff ff       	call   c0007ab6 <malloc>
c000b01e:	83 c4 0c             	add    esp,0xc
c000b021:	89 c3                	mov    ebx,eax
c000b023:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b029:	68 4f 17 02 c0       	push   0xc002174f
c000b02e:	50                   	push   eax
c000b02f:	e8 14 0b 00 00       	call   c000bb48 <File::File(char const*, Process*)>
c000b034:	83 c4 10             	add    esp,0x10
c000b037:	85 db                	test   ebx,ebx
c000b039:	75 10                	jne    c000b04b <KeInitialiseSymlinks()+0x87>
c000b03b:	83 ec 0c             	sub    esp,0xc
c000b03e:	68 0f 18 02 c0       	push   0xc002180f
c000b043:	e8 d3 65 00 00       	call   c001161b <KePanic(char const*)>
c000b048:	83 c4 10             	add    esp,0x10
c000b04b:	83 ec 0c             	sub    esp,0xc
c000b04e:	53                   	push   ebx
c000b04f:	e8 d6 0d 00 00       	call   c000be2a <File::exists()>
c000b054:	83 c4 10             	add    esp,0x10
c000b057:	84 c0                	test   al,al
c000b059:	75 3a                	jne    c000b095 <KeInitialiseSymlinks()+0xd1>
c000b05b:	52                   	push   edx
c000b05c:	52                   	push   edx
c000b05d:	6a 12                	push   0x12
c000b05f:	53                   	push   ebx
c000b060:	e8 01 0b 00 00       	call   c000bb66 <File::open(FileOpenMode)>
c000b065:	83 c4 10             	add    esp,0x10
c000b068:	85 c0                	test   eax,eax
c000b06a:	74 10                	je     c000b07c <KeInitialiseSymlinks()+0xb8>
c000b06c:	83 ec 0c             	sub    esp,0xc
c000b06f:	68 2c 18 02 c0       	push   0xc002182c
c000b074:	e8 a2 65 00 00       	call   c001161b <KePanic(char const*)>
c000b079:	83 c4 10             	add    esp,0x10
c000b07c:	83 ec 0c             	sub    esp,0xc
c000b07f:	53                   	push   ebx
c000b080:	e8 3f 0b 00 00       	call   c000bbc4 <File::close()>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	85 db                	test   ebx,ebx
c000b08a:	0f 84 9e 00 00 00    	je     c000b12e <KeInitialiseSymlinks()+0x16a>
c000b090:	e9 8d 00 00 00       	jmp    c000b122 <KeInitialiseSymlinks()+0x15e>
c000b095:	50                   	push   eax
c000b096:	50                   	push   eax
c000b097:	6a 01                	push   0x1
c000b099:	53                   	push   ebx
c000b09a:	e8 c7 0a 00 00       	call   c000bb66 <File::open(FileOpenMode)>
c000b09f:	83 c4 10             	add    esp,0x10
c000b0a2:	85 c0                	test   eax,eax
c000b0a4:	74 10                	je     c000b0b6 <KeInitialiseSymlinks()+0xf2>
c000b0a6:	83 ec 0c             	sub    esp,0xc
c000b0a9:	68 49 18 02 c0       	push   0xc0021849
c000b0ae:	e8 68 65 00 00       	call   c001161b <KePanic(char const*)>
c000b0b3:	83 c4 10             	add    esp,0x10
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	ff 05 00 94 02 c0    	inc    DWORD PTR ds:0xc0029400
c000b0bf:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b0c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0c5:	57                   	push   edi
c000b0c6:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b0ca:	56                   	push   esi
c000b0cb:	6a 00                	push   0x0
c000b0cd:	68 00 01 00 00       	push   0x100
c000b0d2:	53                   	push   ebx
c000b0d3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0d6:	83 c4 20             	add    esp,0x20
c000b0d9:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b0e1:	75 33                	jne    c000b116 <KeInitialiseSymlinks()+0x152>
c000b0e3:	83 ec 0c             	sub    esp,0xc
c000b0e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0e8:	57                   	push   edi
c000b0e9:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b0ed:	52                   	push   edx
c000b0ee:	6a 00                	push   0x0
c000b0f0:	6a 08                	push   0x8
c000b0f2:	53                   	push   ebx
c000b0f3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0f6:	83 c4 20             	add    esp,0x20
c000b0f9:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b0fe:	75 16                	jne    c000b116 <KeInitialiseSymlinks()+0x152>
c000b100:	89 f0                	mov    eax,esi
c000b102:	e8 9d fd ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000b107:	ba 01 00 00 00       	mov    edx,0x1
c000b10c:	0f b7 c0             	movzx  eax,ax
c000b10f:	e8 56 fc ff ff       	call   c000ad6a <KiSetHashInTable(unsigned short, bool)>
c000b114:	eb a0                	jmp    c000b0b6 <KeInitialiseSymlinks()+0xf2>
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	53                   	push   ebx
c000b11a:	e8 a5 0a 00 00       	call   c000bbc4 <File::close()>
c000b11f:	83 c4 10             	add    esp,0x10
c000b122:	83 ec 0c             	sub    esp,0xc
c000b125:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b127:	53                   	push   ebx
c000b128:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	81 c4 10 01 00 00    	add    esp,0x110
c000b134:	5b                   	pop    ebx
c000b135:	5e                   	pop    esi
c000b136:	5f                   	pop    edi
c000b137:	c3                   	ret    

c000b138 <KiIsSymlinkRegistered(char const*)>:
c000b138:	55                   	push   ebp
c000b139:	57                   	push   edi
c000b13a:	56                   	push   esi
c000b13b:	53                   	push   ebx
c000b13c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000b142:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000b149:	89 f0                	mov    eax,esi
c000b14b:	e8 54 fd ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000b150:	0f b7 c0             	movzx  eax,ax
c000b153:	53                   	push   ebx
c000b154:	53                   	push   ebx
c000b155:	50                   	push   eax
c000b156:	68 64 18 02 c0       	push   0xc0021864
c000b15b:	e8 e5 f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b160:	89 f0                	mov    eax,esi
c000b162:	e8 3d fd ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000b167:	0f b7 c0             	movzx  eax,ax
c000b16a:	e8 e1 fb ff ff       	call   c000ad50 <KiIsHashInTable(unsigned short)>
c000b16f:	83 c4 10             	add    esp,0x10
c000b172:	88 c1                	mov    cl,al
c000b174:	31 d2                	xor    edx,edx
c000b176:	31 c0                	xor    eax,eax
c000b178:	84 c9                	test   cl,cl
c000b17a:	0f 84 31 01 00 00    	je     c000b2b1 <KiIsSymlinkRegistered(char const*)+0x179>
c000b180:	31 db                	xor    ebx,ebx
c000b182:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000b188:	7e 30                	jle    c000b1ba <KiIsSymlinkRegistered(char const*)+0x82>
c000b18a:	89 d8                	mov    eax,ebx
c000b18c:	51                   	push   ecx
c000b18d:	c1 e0 08             	shl    eax,0x8
c000b190:	51                   	push   ecx
c000b191:	05 00 70 02 c0       	add    eax,0xc0027000
c000b196:	50                   	push   eax
c000b197:	56                   	push   esi
c000b198:	e8 b3 55 ff ff       	call   c0000750 <strcmp>
c000b19d:	83 c4 10             	add    esp,0x10
c000b1a0:	85 c0                	test   eax,eax
c000b1a2:	75 13                	jne    c000b1b7 <KiIsSymlinkRegistered(char const*)+0x7f>
c000b1a4:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000b1ab:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b1b2:	e9 fa 00 00 00       	jmp    c000b2b1 <KiIsSymlinkRegistered(char const*)+0x179>
c000b1b7:	43                   	inc    ebx
c000b1b8:	eb c8                	jmp    c000b182 <KiIsSymlinkRegistered(char const*)+0x4a>
c000b1ba:	83 ec 0c             	sub    esp,0xc
c000b1bd:	68 14 01 00 00       	push   0x114
c000b1c2:	e8 ef c8 ff ff       	call   c0007ab6 <malloc>
c000b1c7:	83 c4 0c             	add    esp,0xc
c000b1ca:	89 c3                	mov    ebx,eax
c000b1cc:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b1d2:	68 4f 17 02 c0       	push   0xc002174f
c000b1d7:	50                   	push   eax
c000b1d8:	e8 6b 09 00 00       	call   c000bb48 <File::File(char const*, Process*)>
c000b1dd:	83 c4 10             	add    esp,0x10
c000b1e0:	85 db                	test   ebx,ebx
c000b1e2:	75 12                	jne    c000b1f6 <KiIsSymlinkRegistered(char const*)+0xbe>
c000b1e4:	83 ec 0c             	sub    esp,0xc
c000b1e7:	68 74 18 02 c0       	push   0xc0021874
c000b1ec:	e8 2a 64 00 00       	call   c001161b <KePanic(char const*)>
c000b1f1:	83 c4 10             	add    esp,0x10
c000b1f4:	eb 10                	jmp    c000b206 <KiIsSymlinkRegistered(char const*)+0xce>
c000b1f6:	83 ec 0c             	sub    esp,0xc
c000b1f9:	53                   	push   ebx
c000b1fa:	e8 2b 0c 00 00       	call   c000be2a <File::exists()>
c000b1ff:	83 c4 10             	add    esp,0x10
c000b202:	84 c0                	test   al,al
c000b204:	74 de                	je     c000b1e4 <KiIsSymlinkRegistered(char const*)+0xac>
c000b206:	52                   	push   edx
c000b207:	52                   	push   edx
c000b208:	6a 01                	push   0x1
c000b20a:	53                   	push   ebx
c000b20b:	e8 56 09 00 00       	call   c000bb66 <File::open(FileOpenMode)>
c000b210:	83 c4 10             	add    esp,0x10
c000b213:	85 c0                	test   eax,eax
c000b215:	74 10                	je     c000b227 <KiIsSymlinkRegistered(char const*)+0xef>
c000b217:	83 ec 0c             	sub    esp,0xc
c000b21a:	68 8f 18 02 c0       	push   0xc002188f
c000b21f:	e8 f7 63 00 00       	call   c001161b <KePanic(char const*)>
c000b224:	83 c4 10             	add    esp,0x10
c000b227:	83 ec 0c             	sub    esp,0xc
c000b22a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b22c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b230:	55                   	push   ebp
c000b231:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b235:	57                   	push   edi
c000b236:	6a 00                	push   0x0
c000b238:	68 00 01 00 00       	push   0x100
c000b23d:	53                   	push   ebx
c000b23e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b241:	83 c4 20             	add    esp,0x20
c000b244:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b24c:	75 4b                	jne    c000b299 <KiIsSymlinkRegistered(char const*)+0x161>
c000b24e:	83 ec 0c             	sub    esp,0xc
c000b251:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b253:	55                   	push   ebp
c000b254:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b258:	52                   	push   edx
c000b259:	6a 00                	push   0x0
c000b25b:	6a 08                	push   0x8
c000b25d:	53                   	push   ebx
c000b25e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b261:	83 c4 20             	add    esp,0x20
c000b264:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b269:	75 2e                	jne    c000b299 <KiIsSymlinkRegistered(char const*)+0x161>
c000b26b:	50                   	push   eax
c000b26c:	50                   	push   eax
c000b26d:	57                   	push   edi
c000b26e:	56                   	push   esi
c000b26f:	e8 dc 54 ff ff       	call   c0000750 <strcmp>
c000b274:	83 c4 10             	add    esp,0x10
c000b277:	85 c0                	test   eax,eax
c000b279:	75 ac                	jne    c000b227 <KiIsSymlinkRegistered(char const*)+0xef>
c000b27b:	83 ec 0c             	sub    esp,0xc
c000b27e:	53                   	push   ebx
c000b27f:	e8 40 09 00 00       	call   c000bbc4 <File::close()>
c000b284:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b286:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b289:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b28c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b290:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b294:	83 c4 10             	add    esp,0x10
c000b297:	eb 18                	jmp    c000b2b1 <KiIsSymlinkRegistered(char const*)+0x179>
c000b299:	83 ec 0c             	sub    esp,0xc
c000b29c:	53                   	push   ebx
c000b29d:	e8 22 09 00 00       	call   c000bbc4 <File::close()>
c000b2a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2aa:	83 c4 10             	add    esp,0x10
c000b2ad:	31 c0                	xor    eax,eax
c000b2af:	31 d2                	xor    edx,edx
c000b2b1:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b2b7:	5b                   	pop    ebx
c000b2b8:	5e                   	pop    esi
c000b2b9:	5f                   	pop    edi
c000b2ba:	5d                   	pop    ebp
c000b2bb:	c3                   	ret    

c000b2bc <KeDereferenceSymlink(char const*, char*)>:
c000b2bc:	55                   	push   ebp
c000b2bd:	57                   	push   edi
c000b2be:	56                   	push   esi
c000b2bf:	53                   	push   ebx
c000b2c0:	83 ec 48             	sub    esp,0x48
c000b2c3:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000b2c7:	56                   	push   esi
c000b2c8:	e8 6b fe ff ff       	call   c000b138 <KiIsSymlinkRegistered(char const*)>
c000b2cd:	83 c4 10             	add    esp,0x10
c000b2d0:	89 c7                	mov    edi,eax
c000b2d2:	89 d0                	mov    eax,edx
c000b2d4:	09 f8                	or     eax,edi
c000b2d6:	75 07                	jne    c000b2df <KeDereferenceSymlink(char const*, char*)+0x23>
c000b2d8:	31 c0                	xor    eax,eax
c000b2da:	e9 7c 01 00 00       	jmp    c000b45b <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b2df:	83 ec 0c             	sub    esp,0xc
c000b2e2:	89 d5                	mov    ebp,edx
c000b2e4:	68 14 01 00 00       	push   0x114
c000b2e9:	e8 c8 c7 ff ff       	call   c0007ab6 <malloc>
c000b2ee:	83 c4 0c             	add    esp,0xc
c000b2f1:	89 c3                	mov    ebx,eax
c000b2f3:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b2f9:	56                   	push   esi
c000b2fa:	50                   	push   eax
c000b2fb:	e8 48 08 00 00       	call   c000bb48 <File::File(char const*, Process*)>
c000b300:	83 c4 10             	add    esp,0x10
c000b303:	85 db                	test   ebx,ebx
c000b305:	0f 84 32 01 00 00    	je     c000b43d <KeDereferenceSymlink(char const*, char*)+0x181>
c000b30b:	56                   	push   esi
c000b30c:	56                   	push   esi
c000b30d:	6a 01                	push   0x1
c000b30f:	53                   	push   ebx
c000b310:	e8 51 08 00 00       	call   c000bb66 <File::open(FileOpenMode)>
c000b315:	83 c4 10             	add    esp,0x10
c000b318:	85 c0                	test   eax,eax
c000b31a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b31c:	74 09                	je     c000b327 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000b31e:	83 ec 0c             	sub    esp,0xc
c000b321:	53                   	push   ebx
c000b322:	e9 10 01 00 00       	jmp    c000b437 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b327:	83 ec 0c             	sub    esp,0xc
c000b32a:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b32e:	56                   	push   esi
c000b32f:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b333:	52                   	push   edx
c000b334:	6a 00                	push   0x0
c000b336:	6a 08                	push   0x8
c000b338:	53                   	push   ebx
c000b339:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b33c:	83 c4 20             	add    esp,0x20
c000b33f:	85 c0                	test   eax,eax
c000b341:	0f 85 e2 00 00 00    	jne    c000b429 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b347:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b34c:	0f 85 d7 00 00 00    	jne    c000b429 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b352:	83 ec 0c             	sub    esp,0xc
c000b355:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b357:	56                   	push   esi
c000b358:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b35c:	52                   	push   edx
c000b35d:	6a 00                	push   0x0
c000b35f:	6a 08                	push   0x8
c000b361:	53                   	push   ebx
c000b362:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b365:	83 c4 20             	add    esp,0x20
c000b368:	85 c0                	test   eax,eax
c000b36a:	0f 85 b9 00 00 00    	jne    c000b429 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b370:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b375:	0f 85 ae 00 00 00    	jne    c000b429 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b37b:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b37f:	0f 85 53 ff ff ff    	jne    c000b2d8 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b385:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b389:	0f 85 49 ff ff ff    	jne    c000b2d8 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b38f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b397:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b39f:	51                   	push   ecx
c000b3a0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b3a4:	50                   	push   eax
c000b3a5:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b3a9:	50                   	push   eax
c000b3aa:	53                   	push   ebx
c000b3ab:	e8 b8 0a 00 00       	call   c000be68 <File::stat(unsigned long long*, bool*)>
c000b3b0:	83 c4 10             	add    esp,0x10
c000b3b3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b3b8:	75 6f                	jne    c000b429 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3ba:	31 c9                	xor    ecx,ecx
c000b3bc:	bf 0f 00 00 00       	mov    edi,0xf
c000b3c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b3c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b3c9:	39 c7                	cmp    edi,eax
c000b3cb:	89 cf                	mov    edi,ecx
c000b3cd:	19 d7                	sbb    edi,edx
c000b3cf:	73 58                	jae    c000b429 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3d1:	83 c0 f0             	add    eax,0xfffffff0
c000b3d4:	bf ff 00 00 00       	mov    edi,0xff
c000b3d9:	83 d2 ff             	adc    edx,0xffffffff
c000b3dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b3e0:	39 c7                	cmp    edi,eax
c000b3e2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b3e6:	19 d1                	sbb    ecx,edx
c000b3e8:	72 53                	jb     c000b43d <KeDereferenceSymlink(char const*, char*)+0x181>
c000b3ea:	40                   	inc    eax
c000b3eb:	52                   	push   edx
c000b3ec:	50                   	push   eax
c000b3ed:	6a 00                	push   0x0
c000b3ef:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000b3f3:	e8 f8 50 ff ff       	call   c00004f0 <memset>
c000b3f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3fa:	89 34 24             	mov    DWORD PTR [esp],esi
c000b3fd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b401:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b405:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b409:	53                   	push   ebx
c000b40a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b40d:	83 c4 20             	add    esp,0x20
c000b410:	85 c0                	test   eax,eax
c000b412:	75 15                	jne    c000b429 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b414:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b418:	89 c7                	mov    edi,eax
c000b41a:	c1 ff 1f             	sar    edi,0x1f
c000b41d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b421:	75 06                	jne    c000b429 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b423:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b427:	74 19                	je     c000b442 <KeDereferenceSymlink(char const*, char*)+0x186>
c000b429:	83 ec 0c             	sub    esp,0xc
c000b42c:	53                   	push   ebx
c000b42d:	e8 92 07 00 00       	call   c000bbc4 <File::close()>
c000b432:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b434:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b437:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b43a:	83 c4 10             	add    esp,0x10
c000b43d:	83 c8 ff             	or     eax,0xffffffff
c000b440:	eb 19                	jmp    c000b45b <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b442:	83 ec 0c             	sub    esp,0xc
c000b445:	53                   	push   ebx
c000b446:	e8 79 07 00 00       	call   c000bbc4 <File::close()>
c000b44b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b44d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b450:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b453:	83 c4 10             	add    esp,0x10
c000b456:	b8 01 00 00 00       	mov    eax,0x1
c000b45b:	83 c4 3c             	add    esp,0x3c
c000b45e:	5b                   	pop    ebx
c000b45f:	5e                   	pop    esi
c000b460:	5f                   	pop    edi
c000b461:	5d                   	pop    ebp
c000b462:	c3                   	ret    

c000b463 <KeCreateSymlink(char const*, char const*)>:
c000b463:	55                   	push   ebp
c000b464:	57                   	push   edi
c000b465:	56                   	push   esi
c000b466:	53                   	push   ebx
c000b467:	83 ec 38             	sub    esp,0x38
c000b46a:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b46e:	68 14 01 00 00       	push   0x114
c000b473:	e8 3e c6 ff ff       	call   c0007ab6 <malloc>
c000b478:	6a 00                	push   0x0
c000b47a:	89 c3                	mov    ebx,eax
c000b47c:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b482:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b486:	50                   	push   eax
c000b487:	e8 de 05 00 00       	call   c000ba6a <File::File(char const*, Process*, bool)>
c000b48c:	83 c4 20             	add    esp,0x20
c000b48f:	b8 01 00 00 00       	mov    eax,0x1
c000b494:	85 db                	test   ebx,ebx
c000b496:	0f 84 16 01 00 00    	je     c000b5b2 <KeCreateSymlink(char const*, char const*)+0x14f>
c000b49c:	50                   	push   eax
c000b49d:	50                   	push   eax
c000b49e:	6a 12                	push   0x12
c000b4a0:	53                   	push   ebx
c000b4a1:	e8 c0 06 00 00       	call   c000bb66 <File::open(FileOpenMode)>
c000b4a6:	83 c4 10             	add    esp,0x10
c000b4a9:	85 c0                	test   eax,eax
c000b4ab:	74 0b                	je     c000b4b8 <KeCreateSymlink(char const*, char const*)+0x55>
c000b4ad:	83 ec 0c             	sub    esp,0xc
c000b4b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4b2:	53                   	push   ebx
c000b4b3:	e9 ef 00 00 00       	jmp    c000b5a7 <KeCreateSymlink(char const*, char const*)+0x144>
c000b4b8:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b4bc:	be d5 18 02 c0       	mov    esi,0xc00218d5
c000b4c1:	b9 09 00 00 00       	mov    ecx,0x9
c000b4c6:	fc                   	cld    
c000b4c7:	83 ec 0c             	sub    esp,0xc
c000b4ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b4cc:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b4d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4d2:	56                   	push   esi
c000b4d3:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b4d7:	52                   	push   edx
c000b4d8:	6a 00                	push   0x0
c000b4da:	6a 08                	push   0x8
c000b4dc:	53                   	push   ebx
c000b4dd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b4e0:	83 c4 20             	add    esp,0x20
c000b4e3:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b4e8:	0f 85 ab 00 00 00    	jne    c000b599 <KeCreateSymlink(char const*, char const*)+0x136>
c000b4ee:	85 c0                	test   eax,eax
c000b4f0:	0f 85 a3 00 00 00    	jne    c000b599 <KeCreateSymlink(char const*, char const*)+0x136>
c000b4f6:	e8 ca f9 ff ff       	call   c000aec5 <KiCreateSymlinkID()>
c000b4fb:	83 ec 0c             	sub    esp,0xc
c000b4fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b502:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b506:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b508:	56                   	push   esi
c000b509:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b50d:	52                   	push   edx
c000b50e:	6a 00                	push   0x0
c000b510:	6a 08                	push   0x8
c000b512:	53                   	push   ebx
c000b513:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b516:	83 c4 20             	add    esp,0x20
c000b519:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b51e:	75 79                	jne    c000b599 <KeCreateSymlink(char const*, char const*)+0x136>
c000b520:	85 c0                	test   eax,eax
c000b522:	75 75                	jne    c000b599 <KeCreateSymlink(char const*, char const*)+0x136>
c000b524:	83 ec 0c             	sub    esp,0xc
c000b527:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b529:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b52c:	55                   	push   ebp
c000b52d:	e8 3e 50 ff ff       	call   c0000570 <strlen>
c000b532:	89 34 24             	mov    DWORD PTR [esp],esi
c000b535:	31 d2                	xor    edx,edx
c000b537:	55                   	push   ebp
c000b538:	52                   	push   edx
c000b539:	50                   	push   eax
c000b53a:	53                   	push   ebx
c000b53b:	ff d7                	call   edi
c000b53d:	83 c4 14             	add    esp,0x14
c000b540:	89 c6                	mov    esi,eax
c000b542:	55                   	push   ebp
c000b543:	e8 28 50 ff ff       	call   c0000570 <strlen>
c000b548:	83 c4 10             	add    esp,0x10
c000b54b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b54f:	75 48                	jne    c000b599 <KeCreateSymlink(char const*, char const*)+0x136>
c000b551:	85 f6                	test   esi,esi
c000b553:	75 44                	jne    c000b599 <KeCreateSymlink(char const*, char const*)+0x136>
c000b555:	83 ec 0c             	sub    esp,0xc
c000b558:	68 aa 18 02 c0       	push   0xc00218aa
c000b55d:	e8 e3 f3 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b562:	83 c4 0c             	add    esp,0xc
c000b565:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b569:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b56d:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b571:	e8 bc f9 ff ff       	call   c000af32 <KeRegisterSymlink(char const*, unsigned long long)>
c000b576:	c7 04 24 c8 18 02 c0 	mov    DWORD PTR [esp],0xc00218c8
c000b57d:	e8 c3 f3 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b582:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b585:	e8 3a 06 00 00       	call   c000bbc4 <File::close()>
c000b58a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b58c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b58f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b592:	83 c4 10             	add    esp,0x10
c000b595:	31 c0                	xor    eax,eax
c000b597:	eb 19                	jmp    c000b5b2 <KeCreateSymlink(char const*, char const*)+0x14f>
c000b599:	83 ec 0c             	sub    esp,0xc
c000b59c:	53                   	push   ebx
c000b59d:	e8 22 06 00 00       	call   c000bbc4 <File::close()>
c000b5a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b5aa:	83 c4 10             	add    esp,0x10
c000b5ad:	b8 01 00 00 00       	mov    eax,0x1
c000b5b2:	83 c4 2c             	add    esp,0x2c
c000b5b5:	5b                   	pop    ebx
c000b5b6:	5e                   	pop    esi
c000b5b7:	5f                   	pop    edi
c000b5b8:	5d                   	pop    ebp
c000b5b9:	c3                   	ret    

c000b5ba <File::read(unsigned long long, void*, int*)>:
c000b5ba:	53                   	push   ebx
c000b5bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5bf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5c3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b5ca:	83 f8 19             	cmp    eax,0x19
c000b5cd:	77 35                	ja     c000b604 <File::read(unsigned long long, void*, int*)+0x4a>
c000b5cf:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b5d6:	85 c0                	test   eax,eax
c000b5d8:	74 2a                	je     c000b604 <File::read(unsigned long long, void*, int*)+0x4a>
c000b5da:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5e0:	85 c0                	test   eax,eax
c000b5e2:	74 20                	je     c000b604 <File::read(unsigned long long, void*, int*)+0x4a>
c000b5e4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5e8:	74 21                	je     c000b60b <File::read(unsigned long long, void*, int*)+0x51>
c000b5ea:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b5ec:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b5f0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	5b                   	pop    ebx
c000b5ff:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b602:	ff e0                	jmp    eax
c000b604:	b8 0b 00 00 00       	mov    eax,0xb
c000b609:	eb 05                	jmp    c000b610 <File::read(unsigned long long, void*, int*)+0x56>
c000b60b:	b8 05 00 00 00       	mov    eax,0x5
c000b610:	5b                   	pop    ebx
c000b611:	c3                   	ret    

c000b612 <File::write(unsigned long long, void*, int*)>:
c000b612:	53                   	push   ebx
c000b613:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b617:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b61b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b622:	83 f8 19             	cmp    eax,0x19
c000b625:	77 35                	ja     c000b65c <File::write(unsigned long long, void*, int*)+0x4a>
c000b627:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b62e:	85 c0                	test   eax,eax
c000b630:	74 2a                	je     c000b65c <File::write(unsigned long long, void*, int*)+0x4a>
c000b632:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b638:	85 c0                	test   eax,eax
c000b63a:	74 20                	je     c000b65c <File::write(unsigned long long, void*, int*)+0x4a>
c000b63c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b640:	74 21                	je     c000b663 <File::write(unsigned long long, void*, int*)+0x51>
c000b642:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b644:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b648:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b64e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b652:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b656:	5b                   	pop    ebx
c000b657:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b65a:	ff e0                	jmp    eax
c000b65c:	b8 0b 00 00 00       	mov    eax,0xb
c000b661:	eb 05                	jmp    c000b668 <File::write(unsigned long long, void*, int*)+0x56>
c000b663:	b8 05 00 00 00       	mov    eax,0x5
c000b668:	5b                   	pop    ebx
c000b669:	c3                   	ret    

c000b66a <Directory::read(unsigned long long, void*, int*)>:
c000b66a:	53                   	push   ebx
c000b66b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b66f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b673:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b67a:	83 f8 19             	cmp    eax,0x19
c000b67d:	77 35                	ja     c000b6b4 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b67f:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b686:	85 c0                	test   eax,eax
c000b688:	74 2a                	je     c000b6b4 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b68a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b690:	85 c0                	test   eax,eax
c000b692:	74 20                	je     c000b6b4 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b694:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b698:	74 21                	je     c000b6bb <Directory::read(unsigned long long, void*, int*)+0x51>
c000b69a:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b69c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b6a0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b6a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6ae:	5b                   	pop    ebx
c000b6af:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b6b2:	ff e0                	jmp    eax
c000b6b4:	b8 0b 00 00 00       	mov    eax,0xb
c000b6b9:	eb 05                	jmp    c000b6c0 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b6bb:	b8 05 00 00 00       	mov    eax,0x5
c000b6c0:	5b                   	pop    ebx
c000b6c1:	c3                   	ret    

c000b6c2 <Directory::write(unsigned long long, void*, int*)>:
c000b6c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6c6:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b6cd:	b8 0b 00 00 00       	mov    eax,0xb
c000b6d2:	83 fa 19             	cmp    edx,0x19
c000b6d5:	77 18                	ja     c000b6ef <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6d7:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b6de:	85 d2                	test   edx,edx
c000b6e0:	74 0d                	je     c000b6ef <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6e2:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b6e9:	19 c0                	sbb    eax,eax
c000b6eb:	83 e0 0a             	and    eax,0xa
c000b6ee:	40                   	inc    eax
c000b6ef:	c3                   	ret    

c000b6f0 <File::isAtty()>:
c000b6f0:	31 c0                	xor    eax,eax
c000b6f2:	c3                   	ret    
c000b6f3:	90                   	nop

c000b6f4 <Directory::isAtty()>:
c000b6f4:	31 c0                	xor    eax,eax
c000b6f6:	c3                   	ret    
c000b6f7:	90                   	nop

c000b6f8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b6f8:	b8 0a 00 00 00       	mov    eax,0xa
c000b6fd:	c3                   	ret    

c000b6fe <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b6fe:	b8 0a 00 00 00       	mov    eax,0xa
c000b703:	c3                   	ret    

c000b704 <Filesystem::allocateSwapfile(char const*, int)>:
c000b704:	31 c0                	xor    eax,eax
c000b706:	31 d2                	xor    edx,edx
c000b708:	c3                   	ret    
c000b709:	90                   	nop

c000b70a <File::~File()>:
c000b70a:	83 ec 0c             	sub    esp,0xc
c000b70d:	ba 94 19 02 c0       	mov    edx,0xc0021994
c000b712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b716:	89 10                	mov    DWORD PTR [eax],edx
c000b718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b71c:	83 ec 0c             	sub    esp,0xc
c000b71f:	50                   	push   eax
c000b720:	e8 7f dc ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b725:	83 c4 10             	add    esp,0x10
c000b728:	90                   	nop
c000b729:	83 c4 0c             	add    esp,0xc
c000b72c:	c3                   	ret    
c000b72d:	90                   	nop

c000b72e <File::~File()>:
c000b72e:	83 ec 0c             	sub    esp,0xc
c000b731:	83 ec 0c             	sub    esp,0xc
c000b734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b738:	e8 cd ff ff ff       	call   c000b70a <File::~File()>
c000b73d:	83 c4 10             	add    esp,0x10
c000b740:	83 ec 08             	sub    esp,0x8
c000b743:	68 14 01 00 00       	push   0x114
c000b748:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b74c:	e8 c7 f0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b751:	83 c4 10             	add    esp,0x10
c000b754:	83 c4 0c             	add    esp,0xc
c000b757:	c3                   	ret    

c000b758 <Directory::~Directory()>:
c000b758:	83 ec 0c             	sub    esp,0xc
c000b75b:	ba b0 19 02 c0       	mov    edx,0xc00219b0
c000b760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b764:	89 10                	mov    DWORD PTR [eax],edx
c000b766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b76a:	83 ec 0c             	sub    esp,0xc
c000b76d:	50                   	push   eax
c000b76e:	e8 31 dc ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b773:	83 c4 10             	add    esp,0x10
c000b776:	90                   	nop
c000b777:	83 c4 0c             	add    esp,0xc
c000b77a:	c3                   	ret    
c000b77b:	90                   	nop

c000b77c <Directory::~Directory()>:
c000b77c:	83 ec 0c             	sub    esp,0xc
c000b77f:	83 ec 0c             	sub    esp,0xc
c000b782:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b786:	e8 cd ff ff ff       	call   c000b758 <Directory::~Directory()>
c000b78b:	83 c4 10             	add    esp,0x10
c000b78e:	83 ec 08             	sub    esp,0x8
c000b791:	68 14 01 00 00       	push   0x114
c000b796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79a:	e8 79 f0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b79f:	83 c4 10             	add    esp,0x10
c000b7a2:	83 c4 0c             	add    esp,0xc
c000b7a5:	c3                   	ret    

c000b7a6 <Filesystem::Filesystem()>:
c000b7a6:	ba 28 19 02 c0       	mov    edx,0xc0021928
c000b7ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7af:	89 10                	mov    DWORD PTR [eax],edx
c000b7b1:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b7b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7bb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b7be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7c2:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b7c7:	90                   	nop
c000b7c8:	c3                   	ret    
c000b7c9:	90                   	nop

c000b7ca <Filesystem::~Filesystem()>:
c000b7ca:	ba 28 19 02 c0       	mov    edx,0xc0021928
c000b7cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7d3:	89 10                	mov    DWORD PTR [eax],edx
c000b7d5:	90                   	nop
c000b7d6:	c3                   	ret    
c000b7d7:	90                   	nop

c000b7d8 <Filesystem::~Filesystem()>:
c000b7d8:	83 ec 0c             	sub    esp,0xc
c000b7db:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7df:	e8 e6 ff ff ff       	call   c000b7ca <Filesystem::~Filesystem()>
c000b7e4:	83 c4 04             	add    esp,0x4
c000b7e7:	83 ec 08             	sub    esp,0x8
c000b7ea:	6a 08                	push   0x8
c000b7ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f0:	e8 23 f0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b7f5:	83 c4 10             	add    esp,0x10
c000b7f8:	83 c4 0c             	add    esp,0xc
c000b7fb:	c3                   	ret    

c000b7fc <Fs::getcwd(Process*, char*, int)>:
c000b7fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b800:	31 c0                	xor    eax,eax
c000b802:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b805:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b809:	7d 15                	jge    c000b820 <Fs::getcwd(Process*, char*, int)+0x24>
c000b80b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b80f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b816:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b819:	84 c9                	test   cl,cl
c000b81b:	74 06                	je     c000b823 <Fs::getcwd(Process*, char*, int)+0x27>
c000b81d:	40                   	inc    eax
c000b81e:	eb e2                	jmp    c000b802 <Fs::getcwd(Process*, char*, int)+0x6>
c000b820:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b823:	31 c0                	xor    eax,eax
c000b825:	c3                   	ret    

c000b826 <Fs::initVFS()>:
c000b826:	83 ec 18             	sub    esp,0x18
c000b829:	6a 08                	push   0x8
c000b82b:	e8 86 c2 ff ff       	call   c0007ab6 <malloc>
c000b830:	89 04 24             	mov    DWORD PTR [esp],eax
c000b833:	e8 f0 e3 00 00       	call   c0019c28 <FAT::FAT()>
c000b838:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b83f:	e8 72 c2 ff ff       	call   c0007ab6 <malloc>
c000b844:	89 04 24             	mov    DWORD PTR [esp],eax
c000b847:	e8 08 f3 00 00       	call   c001ab54 <ISO9660::ISO9660()>
c000b84c:	83 c4 1c             	add    esp,0x1c
c000b84f:	c3                   	ret    

c000b850 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b850:	55                   	push   ebp
c000b851:	57                   	push   edi
c000b852:	56                   	push   esi
c000b853:	53                   	push   ebx
c000b854:	81 ec 10 04 00 00    	sub    esp,0x410
c000b85a:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c000b861:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c000b868:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c000b870:	68 00 04 00 00       	push   0x400
c000b875:	6a 00                	push   0x0
c000b877:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000b87b:	57                   	push   edi
c000b87c:	e8 6f 4c ff ff       	call   c00004f0 <memset>
c000b881:	83 c4 10             	add    esp,0x10
c000b884:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c000b888:	75 0b                	jne    c000b895 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c000b88a:	50                   	push   eax
c000b88b:	50                   	push   eax
c000b88c:	55                   	push   ebp
c000b88d:	57                   	push   edi
c000b88e:	e8 ad 4d ff ff       	call   c0000640 <strcpy>
c000b893:	eb 51                	jmp    c000b8e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c000b895:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000b899:	83 f8 5c             	cmp    eax,0x5c
c000b89c:	74 05                	je     c000b8a3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c000b89e:	83 f8 2f             	cmp    eax,0x2f
c000b8a1:	75 1e                	jne    c000b8c1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c000b8a3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c000b8aa:	8a 00                	mov    al,BYTE PTR [eax]
c000b8ac:	3c 60                	cmp    al,0x60
c000b8ae:	7e 03                	jle    c000b8b3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c000b8b0:	83 e8 20             	sub    eax,0x20
c000b8b3:	88 04 24             	mov    BYTE PTR [esp],al
c000b8b6:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b8bd:	50                   	push   eax
c000b8be:	50                   	push   eax
c000b8bf:	eb 1e                	jmp    c000b8df <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000b8c1:	50                   	push   eax
c000b8c2:	50                   	push   eax
c000b8c3:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c000b8ca:	57                   	push   edi
c000b8cb:	e8 70 4d ff ff       	call   c0000640 <strcpy>
c000b8d0:	58                   	pop    eax
c000b8d1:	5a                   	pop    edx
c000b8d2:	68 ff 28 02 c0       	push   0xc00228ff
c000b8d7:	57                   	push   edi
c000b8d8:	e8 63 4f ff ff       	call   c0000840 <strcat>
c000b8dd:	59                   	pop    ecx
c000b8de:	58                   	pop    eax
c000b8df:	55                   	push   ebp
c000b8e0:	57                   	push   edi
c000b8e1:	e8 5a 4f ff ff       	call   c0000840 <strcat>
c000b8e6:	83 c4 10             	add    esp,0x10
c000b8e9:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b8ec:	3c 60                	cmp    al,0x60
c000b8ee:	7e 03                	jle    c000b8f3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000b8f0:	83 e8 20             	sub    eax,0x20
c000b8f3:	88 04 24             	mov    BYTE PTR [esp],al
c000b8f6:	88 06                	mov    BYTE PTR [esi],al
c000b8f8:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b8ff:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c000b905:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c000b909:	bf 03 00 00 00       	mov    edi,0x3
c000b90e:	b8 03 00 00 00       	mov    eax,0x3
c000b913:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b917:	89 e9                	mov    ecx,ebp
c000b919:	85 ed                	test   ebp,ebp
c000b91b:	0f 84 97 00 00 00    	je     c000b9b8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000b921:	8d 57 01             	lea    edx,[edi+0x1]
c000b924:	83 fd 5c             	cmp    ebp,0x5c
c000b927:	74 05                	je     c000b92e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c000b929:	83 fd 2f             	cmp    ebp,0x2f
c000b92c:	75 12                	jne    c000b940 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b92e:	89 c5                	mov    ebp,eax
c000b930:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b935:	74 09                	je     c000b940 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b937:	40                   	inc    eax
c000b938:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c000b93c:	89 d7                	mov    edi,edx
c000b93e:	eb d3                	jmp    c000b913 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b940:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b945:	0f be e9             	movsx  ebp,cl
c000b948:	75 5e                	jne    c000b9a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b94a:	83 fd 2e             	cmp    ebp,0x2e
c000b94d:	75 59                	jne    c000b9a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b94f:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000b953:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b958:	74 18                	je     c000b972 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c000b95a:	83 fd 2e             	cmp    ebp,0x2e
c000b95d:	74 53                	je     c000b9b2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b95f:	89 fa                	mov    edx,edi
c000b961:	42                   	inc    edx
c000b962:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b966:	83 f9 2f             	cmp    ecx,0x2f
c000b969:	74 f6                	je     c000b961 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b96b:	83 f9 5c             	cmp    ecx,0x5c
c000b96e:	74 f1                	je     c000b961 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b970:	eb ca                	jmp    c000b93c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b972:	83 fd 2e             	cmp    ebp,0x2e
c000b975:	74 3b                	je     c000b9b2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b977:	83 f8 03             	cmp    eax,0x3
c000b97a:	74 c0                	je     c000b93c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b97c:	42                   	inc    edx
c000b97d:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b981:	83 f9 5c             	cmp    ecx,0x5c
c000b984:	74 f6                	je     c000b97c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b986:	83 f9 2f             	cmp    ecx,0x2f
c000b989:	74 f1                	je     c000b97c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b98b:	48                   	dec    eax
c000b98c:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b990:	75 06                	jne    c000b998 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b992:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b996:	eb f3                	jmp    c000b98b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c000b998:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b99c:	74 07                	je     c000b9a5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c000b99e:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b9a2:	48                   	dec    eax
c000b9a3:	eb f3                	jmp    c000b998 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b9a5:	40                   	inc    eax
c000b9a6:	eb 94                	jmp    c000b93c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9a8:	83 fd 5c             	cmp    ebp,0x5c
c000b9ab:	74 8f                	je     c000b93c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9ad:	83 fd 2f             	cmp    ebp,0x2f
c000b9b0:	74 8a                	je     c000b93c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9b2:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c000b9b5:	40                   	inc    eax
c000b9b6:	eb 84                	jmp    c000b93c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9b8:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b9bc:	83 ec 0c             	sub    esp,0xc
c000b9bf:	56                   	push   esi
c000b9c0:	e8 ab 4b ff ff       	call   c0000570 <strlen>
c000b9c5:	83 c4 10             	add    esp,0x10
c000b9c8:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c000b9cd:	74 17                	je     c000b9e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000b9cf:	83 ec 0c             	sub    esp,0xc
c000b9d2:	56                   	push   esi
c000b9d3:	e8 98 4b ff ff       	call   c0000570 <strlen>
c000b9d8:	83 c4 10             	add    esp,0x10
c000b9db:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b9e0:	74 04                	je     c000b9e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000b9e2:	31 ff                	xor    edi,edi
c000b9e4:	eb 5c                	jmp    c000ba42 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c000b9e6:	83 ec 0c             	sub    esp,0xc
c000b9e9:	56                   	push   esi
c000b9ea:	e8 81 4b ff ff       	call   c0000570 <strlen>
c000b9ef:	83 c4 10             	add    esp,0x10
c000b9f2:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c000b9f7:	74 e9                	je     c000b9e2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000b9f9:	83 ec 0c             	sub    esp,0xc
c000b9fc:	56                   	push   esi
c000b9fd:	e8 6e 4b ff ff       	call   c0000570 <strlen>
c000ba02:	83 c4 10             	add    esp,0x10
c000ba05:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000ba0a:	eb b0                	jmp    c000b9bc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000ba0c:	52                   	push   edx
c000ba0d:	52                   	push   edx
c000ba0e:	56                   	push   esi
c000ba0f:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c000ba13:	55                   	push   ebp
c000ba14:	e8 27 4c ff ff       	call   c0000640 <strcpy>
c000ba19:	59                   	pop    ecx
c000ba1a:	58                   	pop    eax
c000ba1b:	56                   	push   esi
c000ba1c:	55                   	push   ebp
c000ba1d:	e8 9a f8 ff ff       	call   c000b2bc <KeDereferenceSymlink(char const*, char*)>
c000ba22:	83 c4 10             	add    esp,0x10
c000ba25:	48                   	dec    eax
c000ba26:	75 37                	jne    c000ba5f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000ba28:	50                   	push   eax
c000ba29:	56                   	push   esi
c000ba2a:	55                   	push   ebp
c000ba2b:	68 de 18 02 c0       	push   0xc00218de
c000ba30:	e8 10 ef ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ba35:	83 c4 10             	add    esp,0x10
c000ba38:	8d 47 01             	lea    eax,[edi+0x1]
c000ba3b:	83 ff 14             	cmp    edi,0x14
c000ba3e:	74 08                	je     c000ba48 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000ba40:	89 c7                	mov    edi,eax
c000ba42:	85 db                	test   ebx,ebx
c000ba44:	75 c6                	jne    c000ba0c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c000ba46:	eb 17                	jmp    c000ba5f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000ba48:	83 ec 0c             	sub    esp,0xc
c000ba4b:	bf 15 00 00 00       	mov    edi,0x15
c000ba50:	68 f9 18 02 c0       	push   0xc00218f9
c000ba55:	e8 c1 5b 00 00       	call   c001161b <KePanic(char const*)>
c000ba5a:	83 c4 10             	add    esp,0x10
c000ba5d:	eb e3                	jmp    c000ba42 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c000ba5f:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ba65:	5b                   	pop    ebx
c000ba66:	5e                   	pop    esi
c000ba67:	5f                   	pop    edi
c000ba68:	5d                   	pop    ebp
c000ba69:	c3                   	ret    

c000ba6a <File::File(char const*, Process*, bool)>:
c000ba6a:	83 ec 1c             	sub    esp,0x1c
c000ba6d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba71:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ba75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba79:	83 ec 08             	sub    esp,0x8
c000ba7c:	6a 00                	push   0x0
c000ba7e:	50                   	push   eax
c000ba7f:	e8 3a d7 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000ba84:	83 c4 10             	add    esp,0x10
c000ba87:	ba 94 19 02 c0       	mov    edx,0xc0021994
c000ba8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba90:	89 10                	mov    DWORD PTR [eax],edx
c000ba92:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ba97:	85 c0                	test   eax,eax
c000ba99:	74 0f                	je     c000baaa <File::File(char const*, Process*, bool)+0x40>
c000ba9b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000baa0:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000baa4:	74 04                	je     c000baaa <File::File(char const*, Process*, bool)+0x40>
c000baa6:	b0 01                	mov    al,0x1
c000baa8:	eb 02                	jmp    c000baac <File::File(char const*, Process*, bool)+0x42>
c000baaa:	b0 00                	mov    al,0x0
c000baac:	0f b6 c0             	movzx  eax,al
c000baaf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bab3:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bab9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000babd:	83 c2 0d             	add    edx,0xd
c000bac0:	50                   	push   eax
c000bac1:	51                   	push   ecx
c000bac2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bac6:	52                   	push   edx
c000bac7:	e8 84 fd ff ff       	call   c000b850 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bacc:	83 c4 10             	add    esp,0x10
c000bacf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bad3:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bad6:	83 e8 41             	sub    eax,0x41
c000bad9:	88 c2                	mov    dl,al
c000badb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000badf:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bae9:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000baed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000baf7:	0f b6 c0             	movzx  eax,al
c000bafa:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb01:	85 c0                	test   eax,eax
c000bb03:	74 3e                	je     c000bb43 <File::File(char const*, Process*, bool)+0xd9>
c000bb05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb09:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb0f:	0f b6 c0             	movzx  eax,al
c000bb12:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb19:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bb1f:	85 c0                	test   eax,eax
c000bb21:	75 20                	jne    c000bb43 <File::File(char const*, Process*, bool)+0xd9>
c000bb23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb27:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb2d:	0f b6 c0             	movzx  eax,al
c000bb30:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb37:	83 ec 0c             	sub    esp,0xc
c000bb3a:	50                   	push   eax
c000bb3b:	e8 a2 21 00 00       	call   c000dce2 <LogicalDisk::mount()>
c000bb40:	83 c4 10             	add    esp,0x10
c000bb43:	90                   	nop
c000bb44:	83 c4 1c             	add    esp,0x1c
c000bb47:	c3                   	ret    

c000bb48 <File::File(char const*, Process*)>:
c000bb48:	83 ec 0c             	sub    esp,0xc
c000bb4b:	6a 01                	push   0x1
c000bb4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb59:	e8 0c ff ff ff       	call   c000ba6a <File::File(char const*, Process*, bool)>
c000bb5e:	83 c4 10             	add    esp,0x10
c000bb61:	90                   	nop
c000bb62:	83 c4 0c             	add    esp,0xc
c000bb65:	c3                   	ret    

c000bb66 <File::open(FileOpenMode)>:
c000bb66:	53                   	push   ebx
c000bb67:	b8 0b 00 00 00       	mov    eax,0xb
c000bb6c:	83 ec 08             	sub    esp,0x8
c000bb6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb73:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bb7a:	83 fa 19             	cmp    edx,0x19
c000bb7d:	77 40                	ja     c000bbbf <File::open(FileOpenMode)+0x59>
c000bb7f:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bb86:	85 d2                	test   edx,edx
c000bb88:	74 35                	je     c000bbbf <File::open(FileOpenMode)+0x59>
c000bb8a:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bb90:	85 d2                	test   edx,edx
c000bb92:	74 2b                	je     c000bbbf <File::open(FileOpenMode)+0x59>
c000bb94:	b8 06 00 00 00       	mov    eax,0x6
c000bb99:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bb9d:	75 20                	jne    c000bbbf <File::open(FileOpenMode)+0x59>
c000bb9f:	8b 02                	mov    eax,DWORD PTR [edx]
c000bba1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bba7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbab:	51                   	push   ecx
c000bbac:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bbaf:	51                   	push   ecx
c000bbb0:	52                   	push   edx
c000bbb1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	85 c0                	test   eax,eax
c000bbb9:	75 04                	jne    c000bbbf <File::open(FileOpenMode)+0x59>
c000bbbb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bbbf:	83 c4 08             	add    esp,0x8
c000bbc2:	5b                   	pop    ebx
c000bbc3:	c3                   	ret    

c000bbc4 <File::close()>:
c000bbc4:	53                   	push   ebx
c000bbc5:	b8 0b 00 00 00       	mov    eax,0xb
c000bbca:	83 ec 08             	sub    esp,0x8
c000bbcd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbd1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbd8:	83 f9 19             	cmp    ecx,0x19
c000bbdb:	77 41                	ja     c000bc1e <File::close()+0x5a>
c000bbdd:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bbe4:	85 db                	test   ebx,ebx
c000bbe6:	74 36                	je     c000bc1e <File::close()+0x5a>
c000bbe8:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bbef:	74 2d                	je     c000bc1e <File::close()+0x5a>
c000bbf1:	b8 05 00 00 00       	mov    eax,0x5
c000bbf6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bbfa:	74 22                	je     c000bc1e <File::close()+0x5a>
c000bbfc:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bc00:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bc07:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bc0d:	53                   	push   ebx
c000bc0e:	53                   	push   ebx
c000bc0f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bc11:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc17:	50                   	push   eax
c000bc18:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bc1b:	83 c4 10             	add    esp,0x10
c000bc1e:	83 c4 08             	add    esp,0x8
c000bc21:	5b                   	pop    ebx
c000bc22:	c3                   	ret    
c000bc23:	90                   	nop

c000bc24 <File::seek(unsigned long long)>:
c000bc24:	56                   	push   esi
c000bc25:	53                   	push   ebx
c000bc26:	b8 0b 00 00 00       	mov    eax,0xb
c000bc2b:	51                   	push   ecx
c000bc2c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc30:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc34:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc3b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc3f:	83 fa 19             	cmp    edx,0x19
c000bc42:	77 31                	ja     c000bc75 <File::seek(unsigned long long)+0x51>
c000bc44:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc4b:	85 d2                	test   edx,edx
c000bc4d:	74 26                	je     c000bc75 <File::seek(unsigned long long)+0x51>
c000bc4f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc55:	85 d2                	test   edx,edx
c000bc57:	74 1c                	je     c000bc75 <File::seek(unsigned long long)+0x51>
c000bc59:	b8 05 00 00 00       	mov    eax,0x5
c000bc5e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc62:	74 11                	je     c000bc75 <File::seek(unsigned long long)+0x51>
c000bc64:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc66:	53                   	push   ebx
c000bc67:	51                   	push   ecx
c000bc68:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bc6e:	52                   	push   edx
c000bc6f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bc72:	83 c4 10             	add    esp,0x10
c000bc75:	5a                   	pop    edx
c000bc76:	5b                   	pop    ebx
c000bc77:	5e                   	pop    esi
c000bc78:	c3                   	ret    
c000bc79:	90                   	nop

c000bc7a <File::truncate(unsigned long long)>:
c000bc7a:	56                   	push   esi
c000bc7b:	53                   	push   ebx
c000bc7c:	b8 0b 00 00 00       	mov    eax,0xb
c000bc81:	51                   	push   ecx
c000bc82:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc86:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc8a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc91:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc95:	83 fa 19             	cmp    edx,0x19
c000bc98:	77 31                	ja     c000bccb <File::truncate(unsigned long long)+0x51>
c000bc9a:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bca1:	85 d2                	test   edx,edx
c000bca3:	74 26                	je     c000bccb <File::truncate(unsigned long long)+0x51>
c000bca5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bcab:	85 d2                	test   edx,edx
c000bcad:	74 1c                	je     c000bccb <File::truncate(unsigned long long)+0x51>
c000bcaf:	b8 05 00 00 00       	mov    eax,0x5
c000bcb4:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bcb8:	74 11                	je     c000bccb <File::truncate(unsigned long long)+0x51>
c000bcba:	8b 02                	mov    eax,DWORD PTR [edx]
c000bcbc:	53                   	push   ebx
c000bcbd:	51                   	push   ecx
c000bcbe:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bcc4:	52                   	push   edx
c000bcc5:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bcc8:	83 c4 10             	add    esp,0x10
c000bccb:	5a                   	pop    edx
c000bccc:	5b                   	pop    ebx
c000bccd:	5e                   	pop    esi
c000bcce:	c3                   	ret    
c000bccf:	90                   	nop

c000bcd0 <File::tell(unsigned long long*)>:
c000bcd0:	83 ec 0c             	sub    esp,0xc
c000bcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000bcd8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bcdc:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bce3:	83 fa 19             	cmp    edx,0x19
c000bce6:	77 34                	ja     c000bd1c <File::tell(unsigned long long*)+0x4c>
c000bce8:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcef:	85 d2                	test   edx,edx
c000bcf1:	74 29                	je     c000bd1c <File::tell(unsigned long long*)+0x4c>
c000bcf3:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bcf9:	85 d2                	test   edx,edx
c000bcfb:	74 1f                	je     c000bd1c <File::tell(unsigned long long*)+0x4c>
c000bcfd:	b8 05 00 00 00       	mov    eax,0x5
c000bd02:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bd06:	74 14                	je     c000bd1c <File::tell(unsigned long long*)+0x4c>
c000bd08:	50                   	push   eax
c000bd09:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd0f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bd15:	52                   	push   edx
c000bd16:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bd19:	83 c4 10             	add    esp,0x10
c000bd1c:	83 c4 0c             	add    esp,0xc
c000bd1f:	c3                   	ret    

c000bd20 <File::rewind()>:
c000bd20:	83 ec 10             	sub    esp,0x10
c000bd23:	6a 00                	push   0x0
c000bd25:	6a 00                	push   0x0
c000bd27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd2b:	e8 f4 fe ff ff       	call   c000bc24 <File::seek(unsigned long long)>
c000bd30:	83 c4 1c             	add    esp,0x1c
c000bd33:	c3                   	ret    

c000bd34 <File::unlink()>:
c000bd34:	83 ec 0c             	sub    esp,0xc
c000bd37:	b8 0b 00 00 00       	mov    eax,0xb
c000bd3c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd40:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd47:	83 f9 19             	cmp    ecx,0x19
c000bd4a:	77 2f                	ja     c000bd7b <File::unlink()+0x47>
c000bd4c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd53:	85 c9                	test   ecx,ecx
c000bd55:	74 24                	je     c000bd7b <File::unlink()+0x47>
c000bd57:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd5d:	85 c9                	test   ecx,ecx
c000bd5f:	74 1a                	je     c000bd7b <File::unlink()+0x47>
c000bd61:	b8 06 00 00 00       	mov    eax,0x6
c000bd66:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd6a:	75 0f                	jne    c000bd7b <File::unlink()+0x47>
c000bd6c:	83 c2 0d             	add    edx,0xd
c000bd6f:	50                   	push   eax
c000bd70:	50                   	push   eax
c000bd71:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bd73:	52                   	push   edx
c000bd74:	51                   	push   ecx
c000bd75:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bd78:	83 c4 10             	add    esp,0x10
c000bd7b:	83 c4 0c             	add    esp,0xc
c000bd7e:	c3                   	ret    
c000bd7f:	90                   	nop

c000bd80 <File::rename(char const*)>:
c000bd80:	83 ec 0c             	sub    esp,0xc
c000bd83:	b8 0b 00 00 00       	mov    eax,0xb
c000bd88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd8c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd93:	83 f9 19             	cmp    ecx,0x19
c000bd96:	77 32                	ja     c000bdca <File::rename(char const*)+0x4a>
c000bd98:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd9f:	85 c9                	test   ecx,ecx
c000bda1:	74 27                	je     c000bdca <File::rename(char const*)+0x4a>
c000bda3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bda9:	85 c9                	test   ecx,ecx
c000bdab:	74 1d                	je     c000bdca <File::rename(char const*)+0x4a>
c000bdad:	b8 06 00 00 00       	mov    eax,0x6
c000bdb2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdb6:	75 12                	jne    c000bdca <File::rename(char const*)+0x4a>
c000bdb8:	83 c2 0d             	add    edx,0xd
c000bdbb:	50                   	push   eax
c000bdbc:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bdbe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bdc2:	52                   	push   edx
c000bdc3:	51                   	push   ecx
c000bdc4:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bdc7:	83 c4 10             	add    esp,0x10
c000bdca:	83 c4 0c             	add    esp,0xc
c000bdcd:	c3                   	ret    

c000bdce <File::chfatattr(unsigned char, unsigned char)>:
c000bdce:	57                   	push   edi
c000bdcf:	b8 0b 00 00 00       	mov    eax,0xb
c000bdd4:	56                   	push   esi
c000bdd5:	53                   	push   ebx
c000bdd6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdda:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bdde:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bde5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bde9:	83 f9 19             	cmp    ecx,0x19
c000bdec:	77 37                	ja     c000be25 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdee:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bdf5:	85 c9                	test   ecx,ecx
c000bdf7:	74 2c                	je     c000be25 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdf9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdff:	85 c9                	test   ecx,ecx
c000be01:	74 22                	je     c000be25 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be03:	b8 06 00 00 00       	mov    eax,0x6
c000be08:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be0c:	75 17                	jne    c000be25 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be0e:	8b 39                	mov    edi,DWORD PTR [ecx]
c000be10:	89 f0                	mov    eax,esi
c000be12:	83 c2 0d             	add    edx,0xd
c000be15:	0f b6 f0             	movzx  esi,al
c000be18:	0f b6 db             	movzx  ebx,bl
c000be1b:	56                   	push   esi
c000be1c:	53                   	push   ebx
c000be1d:	52                   	push   edx
c000be1e:	51                   	push   ecx
c000be1f:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000be22:	83 c4 10             	add    esp,0x10
c000be25:	5b                   	pop    ebx
c000be26:	5e                   	pop    esi
c000be27:	5f                   	pop    edi
c000be28:	c3                   	ret    
c000be29:	90                   	nop

c000be2a <File::exists()>:
c000be2a:	83 ec 0c             	sub    esp,0xc
c000be2d:	31 c0                	xor    eax,eax
c000be2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be33:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be3a:	83 f9 19             	cmp    ecx,0x19
c000be3d:	77 24                	ja     c000be63 <File::exists()+0x39>
c000be3f:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be46:	85 c9                	test   ecx,ecx
c000be48:	74 19                	je     c000be63 <File::exists()+0x39>
c000be4a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be50:	85 c9                	test   ecx,ecx
c000be52:	74 0f                	je     c000be63 <File::exists()+0x39>
c000be54:	83 c2 0d             	add    edx,0xd
c000be57:	50                   	push   eax
c000be58:	50                   	push   eax
c000be59:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be5b:	52                   	push   edx
c000be5c:	51                   	push   ecx
c000be5d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000be60:	83 c4 10             	add    esp,0x10
c000be63:	83 c4 0c             	add    esp,0xc
c000be66:	c3                   	ret    
c000be67:	90                   	nop

c000be68 <File::stat(unsigned long long*, bool*)>:
c000be68:	56                   	push   esi
c000be69:	53                   	push   ebx
c000be6a:	50                   	push   eax
c000be6b:	b8 0b 00 00 00       	mov    eax,0xb
c000be70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be74:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be78:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be7f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000be83:	83 f9 19             	cmp    ecx,0x19
c000be86:	77 3d                	ja     c000bec5 <File::stat(unsigned long long*, bool*)+0x5d>
c000be88:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be8f:	85 c9                	test   ecx,ecx
c000be91:	74 32                	je     c000bec5 <File::stat(unsigned long long*, bool*)+0x5d>
c000be93:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be99:	85 c9                	test   ecx,ecx
c000be9b:	74 28                	je     c000bec5 <File::stat(unsigned long long*, bool*)+0x5d>
c000be9d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be9f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bea3:	74 13                	je     c000beb8 <File::stat(unsigned long long*, bool*)+0x50>
c000bea5:	83 ec 04             	sub    esp,0x4
c000bea8:	56                   	push   esi
c000bea9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000beaf:	51                   	push   ecx
c000beb0:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000beb3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000beb6:	eb 0a                	jmp    c000bec2 <File::stat(unsigned long long*, bool*)+0x5a>
c000beb8:	53                   	push   ebx
c000beb9:	83 c2 0d             	add    edx,0xd
c000bebc:	56                   	push   esi
c000bebd:	52                   	push   edx
c000bebe:	51                   	push   ecx
c000bebf:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bec2:	83 c4 10             	add    esp,0x10
c000bec5:	5a                   	pop    edx
c000bec6:	5b                   	pop    ebx
c000bec7:	5e                   	pop    esi
c000bec8:	c3                   	ret    

c000bec9 <Fs::setcwd(Process*, char*)>:
c000bec9:	55                   	push   ebp
c000beca:	57                   	push   edi
c000becb:	56                   	push   esi
c000becc:	53                   	push   ebx
c000becd:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bed3:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000beda:	6a 00                	push   0x0
c000bedc:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bee2:	57                   	push   edi
c000bee3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000beea:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000beee:	56                   	push   esi
c000beef:	e8 5c f9 ff ff       	call   c000b850 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bef4:	89 34 24             	mov    DWORD PTR [esp],esi
c000bef7:	e8 74 46 ff ff       	call   c0000570 <strlen>
c000befc:	83 c4 10             	add    esp,0x10
c000beff:	83 f8 02             	cmp    eax,0x2
c000bf02:	77 15                	ja     c000bf19 <Fs::setcwd(Process*, char*)+0x50>
c000bf04:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bf09:	83 eb 41             	sub    ebx,0x41
c000bf0c:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bf13:	85 c0                	test   eax,eax
c000bf15:	75 1c                	jne    c000bf33 <Fs::setcwd(Process*, char*)+0x6a>
c000bf17:	eb 2f                	jmp    c000bf48 <Fs::setcwd(Process*, char*)+0x7f>
c000bf19:	83 ec 0c             	sub    esp,0xc
c000bf1c:	56                   	push   esi
c000bf1d:	e8 4e 46 ff ff       	call   c0000570 <strlen>
c000bf22:	83 c4 10             	add    esp,0x10
c000bf25:	83 f8 03             	cmp    eax,0x3
c000bf28:	75 57                	jne    c000bf81 <Fs::setcwd(Process*, char*)+0xb8>
c000bf2a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bf2f:	75 50                	jne    c000bf81 <Fs::setcwd(Process*, char*)+0xb8>
c000bf31:	eb d1                	jmp    c000bf04 <Fs::setcwd(Process*, char*)+0x3b>
c000bf33:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bf3a:	75 0c                	jne    c000bf48 <Fs::setcwd(Process*, char*)+0x7f>
c000bf3c:	83 ec 0c             	sub    esp,0xc
c000bf3f:	50                   	push   eax
c000bf40:	e8 9d 1d 00 00       	call   c000dce2 <LogicalDisk::mount()>
c000bf45:	83 c4 10             	add    esp,0x10
c000bf48:	b8 03 00 00 00       	mov    eax,0x3
c000bf4d:	83 fb 19             	cmp    ebx,0x19
c000bf50:	0f 87 c6 00 00 00    	ja     c000c01c <Fs::setcwd(Process*, char*)+0x153>
c000bf56:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bf5d:	b8 05 00 00 00       	mov    eax,0x5
c000bf62:	85 d2                	test   edx,edx
c000bf64:	0f 84 b2 00 00 00    	je     c000c01c <Fs::setcwd(Process*, char*)+0x153>
c000bf6a:	b8 06 00 00 00       	mov    eax,0x6
c000bf6f:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bf76:	0f 85 92 00 00 00    	jne    c000c00e <Fs::setcwd(Process*, char*)+0x145>
c000bf7c:	e9 9b 00 00 00       	jmp    c000c01c <Fs::setcwd(Process*, char*)+0x153>
c000bf81:	83 ec 0c             	sub    esp,0xc
c000bf84:	68 14 01 00 00       	push   0x114
c000bf89:	e8 28 bb ff ff       	call   c0007ab6 <malloc>
c000bf8e:	83 c4 0c             	add    esp,0xc
c000bf91:	89 c3                	mov    ebx,eax
c000bf93:	55                   	push   ebp
c000bf94:	56                   	push   esi
c000bf95:	50                   	push   eax
c000bf96:	e8 ad fb ff ff       	call   c000bb48 <File::File(char const*, Process*)>
c000bf9b:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bfa0:	83 c4 0c             	add    esp,0xc
c000bfa3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bfa7:	50                   	push   eax
c000bfa8:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bfac:	50                   	push   eax
c000bfad:	53                   	push   ebx
c000bfae:	e8 b5 fe ff ff       	call   c000be68 <File::stat(unsigned long long*, bool*)>
c000bfb3:	83 c4 10             	add    esp,0x10
c000bfb6:	83 f8 02             	cmp    eax,0x2
c000bfb9:	74 27                	je     c000bfe2 <Fs::setcwd(Process*, char*)+0x119>
c000bfbb:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bfc0:	75 1c                	jne    c000bfde <Fs::setcwd(Process*, char*)+0x115>
c000bfc2:	b8 02 00 00 00       	mov    eax,0x2
c000bfc7:	85 db                	test   ebx,ebx
c000bfc9:	74 51                	je     c000c01c <Fs::setcwd(Process*, char*)+0x153>
c000bfcb:	83 ec 0c             	sub    esp,0xc
c000bfce:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfd0:	53                   	push   ebx
c000bfd1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bfd4:	83 c4 10             	add    esp,0x10
c000bfd7:	b8 02 00 00 00       	mov    eax,0x2
c000bfdc:	eb 3e                	jmp    c000c01c <Fs::setcwd(Process*, char*)+0x153>
c000bfde:	85 c0                	test   eax,eax
c000bfe0:	74 1c                	je     c000bffe <Fs::setcwd(Process*, char*)+0x135>
c000bfe2:	b8 01 00 00 00       	mov    eax,0x1
c000bfe7:	85 db                	test   ebx,ebx
c000bfe9:	74 31                	je     c000c01c <Fs::setcwd(Process*, char*)+0x153>
c000bfeb:	83 ec 0c             	sub    esp,0xc
c000bfee:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bff0:	53                   	push   ebx
c000bff1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bff4:	83 c4 10             	add    esp,0x10
c000bff7:	b8 01 00 00 00       	mov    eax,0x1
c000bffc:	eb 1e                	jmp    c000c01c <Fs::setcwd(Process*, char*)+0x153>
c000bffe:	85 db                	test   ebx,ebx
c000c000:	74 0c                	je     c000c00e <Fs::setcwd(Process*, char*)+0x145>
c000c002:	83 ec 0c             	sub    esp,0xc
c000c005:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c007:	53                   	push   ebx
c000c008:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c00b:	83 c4 10             	add    esp,0x10
c000c00e:	50                   	push   eax
c000c00f:	50                   	push   eax
c000c010:	56                   	push   esi
c000c011:	57                   	push   edi
c000c012:	e8 29 46 ff ff       	call   c0000640 <strcpy>
c000c017:	83 c4 10             	add    esp,0x10
c000c01a:	31 c0                	xor    eax,eax
c000c01c:	81 c4 1c 02 00 00    	add    esp,0x21c
c000c022:	5b                   	pop    ebx
c000c023:	5e                   	pop    esi
c000c024:	5f                   	pop    edi
c000c025:	5d                   	pop    ebp
c000c026:	c3                   	ret    
c000c027:	90                   	nop

c000c028 <Directory::Directory(char const*, Process*)>:
c000c028:	83 ec 0c             	sub    esp,0xc
c000c02b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c02f:	83 ec 08             	sub    esp,0x8
c000c032:	6a 00                	push   0x0
c000c034:	50                   	push   eax
c000c035:	e8 84 d1 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000c03a:	83 c4 10             	add    esp,0x10
c000c03d:	ba b0 19 02 c0       	mov    edx,0xc00219b0
c000c042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c046:	89 10                	mov    DWORD PTR [eax],edx
c000c048:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c04d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c051:	0f 95 c0             	setne  al
c000c054:	0f b6 c0             	movzx  eax,al
c000c057:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c05b:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c061:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c065:	83 c2 0d             	add    edx,0xd
c000c068:	50                   	push   eax
c000c069:	51                   	push   ecx
c000c06a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c06e:	52                   	push   edx
c000c06f:	e8 dc f7 ff ff       	call   c000b850 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c074:	83 c4 10             	add    esp,0x10
c000c077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c07b:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c07e:	83 e8 41             	sub    eax,0x41
c000c081:	88 c2                	mov    dl,al
c000c083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c087:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c08d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c091:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c099:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c09f:	0f b6 c0             	movzx  eax,al
c000c0a2:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0a9:	85 c0                	test   eax,eax
c000c0ab:	74 3e                	je     c000c0eb <Directory::Directory(char const*, Process*)+0xc3>
c000c0ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0b1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0b7:	0f b6 c0             	movzx  eax,al
c000c0ba:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0c1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c0c7:	85 c0                	test   eax,eax
c000c0c9:	75 20                	jne    c000c0eb <Directory::Directory(char const*, Process*)+0xc3>
c000c0cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0cf:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0d5:	0f b6 c0             	movzx  eax,al
c000c0d8:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0df:	83 ec 0c             	sub    esp,0xc
c000c0e2:	50                   	push   eax
c000c0e3:	e8 fa 1b 00 00       	call   c000dce2 <LogicalDisk::mount()>
c000c0e8:	83 c4 10             	add    esp,0x10
c000c0eb:	90                   	nop
c000c0ec:	83 c4 0c             	add    esp,0xc
c000c0ef:	c3                   	ret    

c000c0f0 <Directory::open()>:
c000c0f0:	53                   	push   ebx
c000c0f1:	b8 0b 00 00 00       	mov    eax,0xb
c000c0f6:	83 ec 08             	sub    esp,0x8
c000c0f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c0fd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c104:	83 fa 19             	cmp    edx,0x19
c000c107:	77 3d                	ja     c000c146 <Directory::open()+0x56>
c000c109:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c110:	85 d2                	test   edx,edx
c000c112:	74 32                	je     c000c146 <Directory::open()+0x56>
c000c114:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c11a:	85 d2                	test   edx,edx
c000c11c:	74 28                	je     c000c146 <Directory::open()+0x56>
c000c11e:	b8 06 00 00 00       	mov    eax,0x6
c000c123:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c127:	75 1d                	jne    c000c146 <Directory::open()+0x56>
c000c129:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c12f:	50                   	push   eax
c000c130:	8b 02                	mov    eax,DWORD PTR [edx]
c000c132:	51                   	push   ecx
c000c133:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c136:	51                   	push   ecx
c000c137:	52                   	push   edx
c000c138:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c13b:	83 c4 10             	add    esp,0x10
c000c13e:	85 c0                	test   eax,eax
c000c140:	75 04                	jne    c000c146 <Directory::open()+0x56>
c000c142:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c146:	83 c4 08             	add    esp,0x8
c000c149:	5b                   	pop    ebx
c000c14a:	c3                   	ret    
c000c14b:	90                   	nop

c000c14c <Directory::close()>:
c000c14c:	53                   	push   ebx
c000c14d:	b8 0b 00 00 00       	mov    eax,0xb
c000c152:	83 ec 08             	sub    esp,0x8
c000c155:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c159:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c160:	83 f9 19             	cmp    ecx,0x19
c000c163:	77 41                	ja     c000c1a6 <Directory::close()+0x5a>
c000c165:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c16c:	85 db                	test   ebx,ebx
c000c16e:	74 36                	je     c000c1a6 <Directory::close()+0x5a>
c000c170:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c177:	74 2d                	je     c000c1a6 <Directory::close()+0x5a>
c000c179:	b8 05 00 00 00       	mov    eax,0x5
c000c17e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c182:	74 22                	je     c000c1a6 <Directory::close()+0x5a>
c000c184:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c188:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c18f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c195:	53                   	push   ebx
c000c196:	53                   	push   ebx
c000c197:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c199:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c19f:	50                   	push   eax
c000c1a0:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c1a3:	83 c4 10             	add    esp,0x10
c000c1a6:	83 c4 08             	add    esp,0x8
c000c1a9:	5b                   	pop    ebx
c000c1aa:	c3                   	ret    
c000c1ab:	90                   	nop

c000c1ac <Directory::unlink()>:
c000c1ac:	83 ec 0c             	sub    esp,0xc
c000c1af:	b8 0b 00 00 00       	mov    eax,0xb
c000c1b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1b8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1bf:	83 f9 19             	cmp    ecx,0x19
c000c1c2:	77 2f                	ja     c000c1f3 <Directory::unlink()+0x47>
c000c1c4:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1cb:	85 c9                	test   ecx,ecx
c000c1cd:	74 24                	je     c000c1f3 <Directory::unlink()+0x47>
c000c1cf:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c1d5:	85 c9                	test   ecx,ecx
c000c1d7:	74 1a                	je     c000c1f3 <Directory::unlink()+0x47>
c000c1d9:	b8 06 00 00 00       	mov    eax,0x6
c000c1de:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1e2:	75 0f                	jne    c000c1f3 <Directory::unlink()+0x47>
c000c1e4:	83 c2 0d             	add    edx,0xd
c000c1e7:	50                   	push   eax
c000c1e8:	50                   	push   eax
c000c1e9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1eb:	52                   	push   edx
c000c1ec:	51                   	push   ecx
c000c1ed:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c1f0:	83 c4 10             	add    esp,0x10
c000c1f3:	83 c4 0c             	add    esp,0xc
c000c1f6:	c3                   	ret    
c000c1f7:	90                   	nop

c000c1f8 <Directory::rename(char const*)>:
c000c1f8:	83 ec 0c             	sub    esp,0xc
c000c1fb:	b8 0b 00 00 00       	mov    eax,0xb
c000c200:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c204:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c20b:	83 f9 19             	cmp    ecx,0x19
c000c20e:	77 32                	ja     c000c242 <Directory::rename(char const*)+0x4a>
c000c210:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c217:	85 c9                	test   ecx,ecx
c000c219:	74 27                	je     c000c242 <Directory::rename(char const*)+0x4a>
c000c21b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c221:	85 c9                	test   ecx,ecx
c000c223:	74 1d                	je     c000c242 <Directory::rename(char const*)+0x4a>
c000c225:	b8 06 00 00 00       	mov    eax,0x6
c000c22a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c22e:	75 12                	jne    c000c242 <Directory::rename(char const*)+0x4a>
c000c230:	83 c2 0d             	add    edx,0xd
c000c233:	50                   	push   eax
c000c234:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c236:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c23a:	52                   	push   edx
c000c23b:	51                   	push   ecx
c000c23c:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c23f:	83 c4 10             	add    esp,0x10
c000c242:	83 c4 0c             	add    esp,0xc
c000c245:	c3                   	ret    

c000c246 <Directory::exists()>:
c000c246:	83 ec 0c             	sub    esp,0xc
c000c249:	31 c0                	xor    eax,eax
c000c24b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c24f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c256:	83 f9 19             	cmp    ecx,0x19
c000c259:	77 24                	ja     c000c27f <Directory::exists()+0x39>
c000c25b:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c262:	85 c9                	test   ecx,ecx
c000c264:	74 19                	je     c000c27f <Directory::exists()+0x39>
c000c266:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c26c:	85 c9                	test   ecx,ecx
c000c26e:	74 0f                	je     c000c27f <Directory::exists()+0x39>
c000c270:	83 c2 0d             	add    edx,0xd
c000c273:	50                   	push   eax
c000c274:	50                   	push   eax
c000c275:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c277:	52                   	push   edx
c000c278:	51                   	push   ecx
c000c279:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c27c:	83 c4 10             	add    esp,0x10
c000c27f:	83 c4 0c             	add    esp,0xc
c000c282:	c3                   	ret    
c000c283:	90                   	nop

c000c284 <Directory::read(dirent*)>:
c000c284:	83 ec 1c             	sub    esp,0x1c
c000c287:	b8 0b 00 00 00       	mov    eax,0xb
c000c28c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c290:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c297:	83 f9 19             	cmp    ecx,0x19
c000c29a:	77 30                	ja     c000c2cc <Directory::read(dirent*)+0x48>
c000c29c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2a3:	85 c9                	test   ecx,ecx
c000c2a5:	74 25                	je     c000c2cc <Directory::read(dirent*)+0x48>
c000c2a7:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c2ae:	74 1c                	je     c000c2cc <Directory::read(dirent*)+0x48>
c000c2b0:	83 ec 0c             	sub    esp,0xc
c000c2b3:	8b 02                	mov    eax,DWORD PTR [edx]
c000c2b5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c2b9:	51                   	push   ecx
c000c2ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2be:	6a 00                	push   0x0
c000c2c0:	68 10 01 00 00       	push   0x110
c000c2c5:	52                   	push   edx
c000c2c6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c2c9:	83 c4 20             	add    esp,0x20
c000c2cc:	83 c4 1c             	add    esp,0x1c
c000c2cf:	c3                   	ret    

c000c2d0 <Directory::create()>:
c000c2d0:	83 ec 0c             	sub    esp,0xc
c000c2d3:	b8 0b 00 00 00       	mov    eax,0xb
c000c2d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c2dc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2e3:	83 f9 19             	cmp    ecx,0x19
c000c2e6:	77 2f                	ja     c000c317 <Directory::create()+0x47>
c000c2e8:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2ef:	85 c9                	test   ecx,ecx
c000c2f1:	74 24                	je     c000c317 <Directory::create()+0x47>
c000c2f3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c2f9:	85 c9                	test   ecx,ecx
c000c2fb:	74 1a                	je     c000c317 <Directory::create()+0x47>
c000c2fd:	b8 06 00 00 00       	mov    eax,0x6
c000c302:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c306:	75 0f                	jne    c000c317 <Directory::create()+0x47>
c000c308:	83 c2 0d             	add    edx,0xd
c000c30b:	50                   	push   eax
c000c30c:	50                   	push   eax
c000c30d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c30f:	52                   	push   edx
c000c310:	51                   	push   ecx
c000c311:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c314:	83 c4 10             	add    esp,0x10
c000c317:	83 c4 0c             	add    esp,0xc
c000c31a:	c3                   	ret    
c000c31b:	90                   	nop

c000c31c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c31c:	b8 0a 00 00 00       	mov    eax,0xa
c000c321:	c3                   	ret    
c000c322:	66 90                	xchg   ax,ax

c000c324 <Bus::Bus(char const*)>:
c000c324:	83 ec 0c             	sub    esp,0xc
c000c327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c32b:	83 ec 08             	sub    esp,0x8
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	50                   	push   eax
c000c333:	e8 22 08 00 00       	call   c000cb5a <Device::Device(char const*)>
c000c338:	83 c4 10             	add    esp,0x10
c000c33b:	ba cc 19 02 c0       	mov    edx,0xc00219cc
c000c340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c344:	89 10                	mov    DWORD PTR [eax],edx
c000c346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c34a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c354:	90                   	nop
c000c355:	83 c4 0c             	add    esp,0xc
c000c358:	c3                   	ret    
c000c359:	90                   	nop
c000c35a:	66 90                	xchg   ax,ax

c000c35c <Bus::~Bus()>:
c000c35c:	83 ec 0c             	sub    esp,0xc
c000c35f:	ba cc 19 02 c0       	mov    edx,0xc00219cc
c000c364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c368:	89 10                	mov    DWORD PTR [eax],edx
c000c36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c36e:	83 ec 0c             	sub    esp,0xc
c000c371:	50                   	push   eax
c000c372:	e8 4d 05 00 00       	call   c000c8c4 <Device::~Device()>
c000c377:	83 c4 10             	add    esp,0x10
c000c37a:	90                   	nop
c000c37b:	83 c4 0c             	add    esp,0xc
c000c37e:	c3                   	ret    
c000c37f:	90                   	nop

c000c380 <Bus::~Bus()>:
c000c380:	83 ec 0c             	sub    esp,0xc
c000c383:	83 ec 0c             	sub    esp,0xc
c000c386:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38a:	e8 cd ff ff ff       	call   c000c35c <Bus::~Bus()>
c000c38f:	83 c4 10             	add    esp,0x10
c000c392:	83 ec 08             	sub    esp,0x8
c000c395:	68 58 01 00 00       	push   0x158
c000c39a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c39e:	e8 75 e4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c3a3:	83 c4 10             	add    esp,0x10
c000c3a6:	83 c4 0c             	add    esp,0xc
c000c3a9:	c3                   	ret    

c000c3aa <beepThread(void*)>:
c000c3aa:	83 ec 0c             	sub    esp,0xc
c000c3ad:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c3b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3b6:	48                   	dec    eax
c000c3b7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c3bc:	75 01                	jne    c000c3bf <beepThread(void*)+0x15>
c000c3be:	fb                   	sti    
c000c3bf:	83 ec 0c             	sub    esp,0xc
c000c3c2:	6b c2 0a             	imul   eax,edx,0xa
c000c3c5:	50                   	push   eax
c000c3c6:	e8 21 a0 00 00       	call   c00163ec <milliTenthSleep(unsigned int)>
c000c3cb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c3d2:	e8 70 bf 00 00       	call   c0018347 <HalMakeBeep(int)>
c000c3d7:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c3df:	83 c4 1c             	add    esp,0x1c
c000c3e2:	e9 e9 9e 00 00       	jmp    c00162d0 <blockTask(TaskState)>

c000c3e7 <Krnl::beep(int, int, bool)>:
c000c3e7:	56                   	push   esi
c000c3e8:	53                   	push   ebx
c000c3e9:	83 ec 10             	sub    esp,0x10
c000c3ec:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c3f0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c3f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3f8:	e8 4a bf 00 00       	call   c0018347 <HalMakeBeep(int)>
c000c3fd:	83 c4 10             	add    esp,0x10
c000c400:	89 f0                	mov    eax,esi
c000c402:	84 c0                	test   al,al
c000c404:	74 1e                	je     c000c424 <Krnl::beep(int, int, bool)+0x3d>
c000c406:	83 ec 0c             	sub    esp,0xc
c000c409:	6b db 0a             	imul   ebx,ebx,0xa
c000c40c:	53                   	push   ebx
c000c40d:	e8 da 9f 00 00       	call   c00163ec <milliTenthSleep(unsigned int)>
c000c412:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c41a:	83 c4 14             	add    esp,0x14
c000c41d:	5b                   	pop    ebx
c000c41e:	5e                   	pop    esi
c000c41f:	e9 23 bf 00 00       	jmp    c0018347 <HalMakeBeep(int)>
c000c424:	68 e6 00 00 00       	push   0xe6
c000c429:	53                   	push   ebx
c000c42a:	68 aa c3 00 c0       	push   0xc000c3aa
c000c42f:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c435:	e8 32 9a 00 00       	call   c0015e6c <Process::createThread(void (*)(void*), void*, int)>
c000c43a:	83 c4 14             	add    esp,0x14
c000c43d:	5b                   	pop    ebx
c000c43e:	5e                   	pop    esi
c000c43f:	c3                   	ret    

c000c440 <User::loadClockSettings(int)>:
c000c440:	53                   	push   ebx
c000c441:	83 ec 14             	sub    esp,0x14
c000c444:	68 14 01 00 00       	push   0x114
c000c449:	e8 68 b6 ff ff       	call   c0007ab6 <malloc>
c000c44e:	83 c4 0c             	add    esp,0xc
c000c451:	89 c3                	mov    ebx,eax
c000c453:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c459:	68 f0 19 02 c0       	push   0xc00219f0
c000c45e:	50                   	push   eax
c000c45f:	e8 e4 f6 ff ff       	call   c000bb48 <File::File(char const*, Process*)>
c000c464:	58                   	pop    eax
c000c465:	5a                   	pop    edx
c000c466:	6a 01                	push   0x1
c000c468:	53                   	push   ebx
c000c469:	e8 f8 f6 ff ff       	call   c000bb66 <File::open(FileOpenMode)>
c000c46e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c471:	e8 4e f7 ff ff       	call   c000bbc4 <File::close()>
c000c476:	83 c4 10             	add    esp,0x10
c000c479:	85 db                	test   ebx,ebx
c000c47b:	74 0f                	je     c000c48c <User::loadClockSettings(int)+0x4c>
c000c47d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c47f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c483:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c486:	83 c4 08             	add    esp,0x8
c000c489:	5b                   	pop    ebx
c000c48a:	ff e0                	jmp    eax
c000c48c:	83 c4 08             	add    esp,0x8
c000c48f:	5b                   	pop    ebx
c000c490:	c3                   	ret    
c000c491:	90                   	nop

c000c492 <Clock::Clock(char const*)>:
c000c492:	83 ec 0c             	sub    esp,0xc
c000c495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c499:	83 ec 08             	sub    esp,0x8
c000c49c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4a0:	50                   	push   eax
c000c4a1:	e8 b4 06 00 00       	call   c000cb5a <Device::Device(char const*)>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	ba 18 1a 02 c0       	mov    edx,0xc0021a18
c000c4ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4b2:	89 10                	mov    DWORD PTR [eax],edx
c000c4b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4b8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c4c2:	90                   	nop
c000c4c3:	83 c4 0c             	add    esp,0xc
c000c4c6:	c3                   	ret    
c000c4c7:	90                   	nop

c000c4c8 <Clock::~Clock()>:
c000c4c8:	83 ec 0c             	sub    esp,0xc
c000c4cb:	ba 18 1a 02 c0       	mov    edx,0xc0021a18
c000c4d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4d4:	89 10                	mov    DWORD PTR [eax],edx
c000c4d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4da:	83 ec 0c             	sub    esp,0xc
c000c4dd:	50                   	push   eax
c000c4de:	e8 e1 03 00 00       	call   c000c8c4 <Device::~Device()>
c000c4e3:	83 c4 10             	add    esp,0x10
c000c4e6:	90                   	nop
c000c4e7:	83 c4 0c             	add    esp,0xc
c000c4ea:	c3                   	ret    
c000c4eb:	90                   	nop

c000c4ec <Clock::~Clock()>:
c000c4ec:	83 ec 0c             	sub    esp,0xc
c000c4ef:	83 ec 0c             	sub    esp,0xc
c000c4f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4f6:	e8 cd ff ff ff       	call   c000c4c8 <Clock::~Clock()>
c000c4fb:	83 c4 10             	add    esp,0x10
c000c4fe:	83 ec 08             	sub    esp,0x8
c000c501:	68 58 01 00 00       	push   0x158
c000c506:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c50a:	e8 09 e3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c50f:	83 c4 10             	add    esp,0x10
c000c512:	83 c4 0c             	add    esp,0xc
c000c515:	c3                   	ret    

c000c516 <Clock::timeInSecondsLocal()>:
c000c516:	53                   	push   ebx
c000c517:	83 ec 14             	sub    esp,0x14
c000c51a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c51e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c520:	50                   	push   eax
c000c521:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c524:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c52b:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c531:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c537:	89 cb                	mov    ebx,ecx
c000c539:	c1 fb 1f             	sar    ebx,0x1f
c000c53c:	01 c8                	add    eax,ecx
c000c53e:	11 da                	adc    edx,ebx
c000c540:	83 c4 10             	add    esp,0x10
c000c543:	31 c9                	xor    ecx,ecx
c000c545:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c54c:	74 05                	je     c000c553 <Clock::timeInSecondsLocal()+0x3d>
c000c54e:	b9 08 07 00 00       	mov    ecx,0x708
c000c553:	31 db                	xor    ebx,ebx
c000c555:	01 c8                	add    eax,ecx
c000c557:	11 da                	adc    edx,ebx
c000c559:	83 c4 08             	add    esp,0x8
c000c55c:	5b                   	pop    ebx
c000c55d:	c3                   	ret    

c000c55e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c55e:	57                   	push   edi
c000c55f:	56                   	push   esi
c000c560:	53                   	push   ebx
c000c561:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c565:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c569:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c56b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c56f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c572:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c579:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c57f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c585:	99                   	cdq    
c000c586:	29 c6                	sub    esi,eax
c000c588:	19 d7                	sbb    edi,edx
c000c58a:	89 f0                	mov    eax,esi
c000c58c:	89 fa                	mov    edx,edi
c000c58e:	31 f6                	xor    esi,esi
c000c590:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c597:	74 05                	je     c000c59e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c599:	be 08 07 00 00       	mov    esi,0x708
c000c59e:	31 ff                	xor    edi,edi
c000c5a0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c5a4:	29 f0                	sub    eax,esi
c000c5a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c5aa:	19 fa                	sbb    edx,edi
c000c5ac:	89 d8                	mov    eax,ebx
c000c5ae:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c5b2:	5b                   	pop    ebx
c000c5b3:	5e                   	pop    esi
c000c5b4:	5f                   	pop    edi
c000c5b5:	ff e0                	jmp    eax

c000c5b7 <datetimeToSeconds(datetime_t)>:
c000c5b7:	55                   	push   ebp
c000c5b8:	57                   	push   edi
c000c5b9:	56                   	push   esi
c000c5ba:	53                   	push   ebx
c000c5bb:	83 ec 0c             	sub    esp,0xc
c000c5be:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c5c2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c5c6:	89 d6                	mov    esi,edx
c000c5c8:	0f b6 c7             	movzx  eax,bh
c000c5cb:	c1 ee 10             	shr    esi,0x10
c000c5ce:	6b e8 3c             	imul   ebp,eax,0x3c
c000c5d1:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c5d7:	0f b6 ce             	movzx  ecx,dh
c000c5da:	89 df                	mov    edi,ebx
c000c5dc:	49                   	dec    ecx
c000c5dd:	c1 ef 10             	shr    edi,0x10
c000c5e0:	0f b6 db             	movzx  ebx,bl
c000c5e3:	89 f8                	mov    eax,edi
c000c5e5:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c5eb:	0f b6 f8             	movzx  edi,al
c000c5ee:	0f b6 d2             	movzx  edx,dl
c000c5f1:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c5f5:	01 d8                	add    eax,ebx
c000c5f7:	0f b7 de             	movzx  ebx,si
c000c5fa:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5fd:	c1 f8 1f             	sar    eax,0x1f
c000c600:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c604:	0f b6 c1             	movzx  eax,cl
c000c607:	8b 0c 85 60 1a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde5a0]
c000c60e:	83 f8 01             	cmp    eax,0x1
c000c611:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c615:	76 27                	jbe    c000c63e <datetimeToSeconds(datetime_t)+0x87>
c000c617:	83 e6 03             	and    esi,0x3
c000c61a:	75 22                	jne    c000c63e <datetimeToSeconds(datetime_t)+0x87>
c000c61c:	31 d2                	xor    edx,edx
c000c61e:	be 64 00 00 00       	mov    esi,0x64
c000c623:	89 d8                	mov    eax,ebx
c000c625:	f7 f6                	div    esi
c000c627:	85 d2                	test   edx,edx
c000c629:	75 12                	jne    c000c63d <datetimeToSeconds(datetime_t)+0x86>
c000c62b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c631:	be 90 01 00 00       	mov    esi,0x190
c000c636:	99                   	cdq    
c000c637:	f7 fe                	idiv   esi
c000c639:	85 d2                	test   edx,edx
c000c63b:	75 01                	jne    c000c63e <datetimeToSeconds(datetime_t)+0x87>
c000c63d:	41                   	inc    ecx
c000c63e:	83 fb 46             	cmp    ebx,0x46
c000c641:	76 48                	jbe    c000c68b <datetimeToSeconds(datetime_t)+0xd4>
c000c643:	be 46 00 00 00       	mov    esi,0x46
c000c648:	bf 64 00 00 00       	mov    edi,0x64
c000c64d:	bd 90 01 00 00       	mov    ebp,0x190
c000c652:	b8 6d 01 00 00       	mov    eax,0x16d
c000c657:	f7 c6 03 00 00 00    	test   esi,0x3
c000c65d:	75 23                	jne    c000c682 <datetimeToSeconds(datetime_t)+0xcb>
c000c65f:	89 f0                	mov    eax,esi
c000c661:	99                   	cdq    
c000c662:	f7 ff                	idiv   edi
c000c664:	b8 6e 01 00 00       	mov    eax,0x16e
c000c669:	85 d2                	test   edx,edx
c000c66b:	75 15                	jne    c000c682 <datetimeToSeconds(datetime_t)+0xcb>
c000c66d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c673:	99                   	cdq    
c000c674:	f7 fd                	idiv   ebp
c000c676:	83 fa 01             	cmp    edx,0x1
c000c679:	19 c0                	sbb    eax,eax
c000c67b:	f7 d0                	not    eax
c000c67d:	05 6e 01 00 00       	add    eax,0x16e
c000c682:	01 c1                	add    ecx,eax
c000c684:	46                   	inc    esi
c000c685:	39 de                	cmp    esi,ebx
c000c687:	7c c9                	jl     c000c652 <datetimeToSeconds(datetime_t)+0x9b>
c000c689:	eb 34                	jmp    c000c6bf <datetimeToSeconds(datetime_t)+0x108>
c000c68b:	74 32                	je     c000c6bf <datetimeToSeconds(datetime_t)+0x108>
c000c68d:	b8 45 00 00 00       	mov    eax,0x45
c000c692:	89 c2                	mov    edx,eax
c000c694:	83 e2 03             	and    edx,0x3
c000c697:	39 d8                	cmp    eax,ebx
c000c699:	7e 0f                	jle    c000c6aa <datetimeToSeconds(datetime_t)+0xf3>
c000c69b:	83 fa 01             	cmp    edx,0x1
c000c69e:	19 d2                	sbb    edx,edx
c000c6a0:	48                   	dec    eax
c000c6a1:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c6a8:	eb e8                	jmp    c000c692 <datetimeToSeconds(datetime_t)+0xdb>
c000c6aa:	b8 6d 01 00 00       	mov    eax,0x16d
c000c6af:	85 d2                	test   edx,edx
c000c6b1:	75 0a                	jne    c000c6bd <datetimeToSeconds(datetime_t)+0x106>
c000c6b3:	83 fb 01             	cmp    ebx,0x1
c000c6b6:	19 c0                	sbb    eax,eax
c000c6b8:	05 6e 01 00 00       	add    eax,0x16e
c000c6bd:	29 c1                	sub    ecx,eax
c000c6bf:	b8 80 51 01 00       	mov    eax,0x15180
c000c6c4:	f7 e9                	imul   ecx
c000c6c6:	03 04 24             	add    eax,DWORD PTR [esp]
c000c6c9:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c6cd:	83 c4 0c             	add    esp,0xc
c000c6d0:	5b                   	pop    ebx
c000c6d1:	5e                   	pop    esi
c000c6d2:	5f                   	pop    edi
c000c6d3:	5d                   	pop    ebp
c000c6d4:	c3                   	ret    
c000c6d5:	90                   	nop

c000c6d6 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c6d6:	57                   	push   edi
c000c6d7:	56                   	push   esi
c000c6d8:	53                   	push   ebx
c000c6d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c6dd:	8b 06                	mov    eax,DWORD PTR [esi]
c000c6df:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c6e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6ea:	e8 c8 fe ff ff       	call   c000c5b7 <datetimeToSeconds(datetime_t)>
c000c6ef:	59                   	pop    ecx
c000c6f0:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c6f7:	5b                   	pop    ebx
c000c6f8:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c6fe:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c704:	89 cb                	mov    ebx,ecx
c000c706:	c1 fb 1f             	sar    ebx,0x1f
c000c709:	29 c8                	sub    eax,ecx
c000c70b:	19 da                	sbb    edx,ebx
c000c70d:	31 c9                	xor    ecx,ecx
c000c70f:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c716:	74 05                	je     c000c71d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c718:	b9 08 07 00 00       	mov    ecx,0x708
c000c71d:	31 db                	xor    ebx,ebx
c000c71f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c723:	29 c8                	sub    eax,ecx
c000c725:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c729:	19 da                	sbb    edx,ebx
c000c72b:	89 f8                	mov    eax,edi
c000c72d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c731:	5b                   	pop    ebx
c000c732:	5e                   	pop    esi
c000c733:	5f                   	pop    edi
c000c734:	ff e0                	jmp    eax

c000c736 <secondsToDatetime(unsigned long long)>:
c000c736:	55                   	push   ebp
c000c737:	57                   	push   edi
c000c738:	56                   	push   esi
c000c739:	53                   	push   ebx
c000c73a:	83 ec 1c             	sub    esp,0x1c
c000c73d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c741:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c745:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c749:	6a 00                	push   0x0
c000c74b:	68 80 51 01 00       	push   0x15180
c000c750:	55                   	push   ebp
c000c751:	57                   	push   edi
c000c752:	e8 d9 2f 01 00       	call   c001f730 <__udivdi3>
c000c757:	83 c4 10             	add    esp,0x10
c000c75a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c760:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c764:	6a 00                	push   0x0
c000c766:	68 80 51 01 00       	push   0x15180
c000c76b:	55                   	push   ebp
c000c76c:	57                   	push   edi
c000c76d:	bf 10 0e 00 00       	mov    edi,0xe10
c000c772:	e8 b9 30 01 00       	call   c001f830 <__umoddi3>
c000c777:	83 c4 10             	add    esp,0x10
c000c77a:	99                   	cdq    
c000c77b:	f7 ff                	idiv   edi
c000c77d:	bf 3c 00 00 00       	mov    edi,0x3c
c000c782:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c785:	89 d0                	mov    eax,edx
c000c787:	99                   	cdq    
c000c788:	f7 ff                	idiv   edi
c000c78a:	85 db                	test   ebx,ebx
c000c78c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c78f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c792:	79 11                	jns    c000c7a5 <secondsToDatetime(unsigned long long)+0x6f>
c000c794:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c798:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c79e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7a3:	eb 07                	jmp    c000c7ac <secondsToDatetime(unsigned long long)+0x76>
c000c7a5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7aa:	89 d8                	mov    eax,ebx
c000c7ac:	bf b4 05 00 00       	mov    edi,0x5b4
c000c7b1:	99                   	cdq    
c000c7b2:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c7b7:	f7 f9                	idiv   ecx
c000c7b9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c7be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7c2:	31 d2                	xor    edx,edx
c000c7c4:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c7cc:	01 c3                	add    ebx,eax
c000c7ce:	89 d8                	mov    eax,ebx
c000c7d0:	f7 f1                	div    ecx
c000c7d2:	31 d2                	xor    edx,edx
c000c7d4:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c7d7:	89 d8                	mov    eax,ebx
c000c7d9:	f7 f7                	div    edi
c000c7db:	31 d2                	xor    edx,edx
c000c7dd:	29 c1                	sub    ecx,eax
c000c7df:	89 d8                	mov    eax,ebx
c000c7e1:	f7 f5                	div    ebp
c000c7e3:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c7e8:	29 c1                	sub    ecx,eax
c000c7ea:	31 d2                	xor    edx,edx
c000c7ec:	89 c8                	mov    eax,ecx
c000c7ee:	f7 f5                	div    ebp
c000c7f0:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c7f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7f9:	31 d2                	xor    edx,edx
c000c7fb:	89 c8                	mov    eax,ecx
c000c7fd:	f7 f5                	div    ebp
c000c7ff:	31 d2                	xor    edx,edx
c000c801:	01 c3                	add    ebx,eax
c000c803:	89 c8                	mov    eax,ecx
c000c805:	f7 f7                	div    edi
c000c807:	bf 99 00 00 00       	mov    edi,0x99
c000c80c:	29 c3                	sub    ebx,eax
c000c80e:	31 d2                	xor    edx,edx
c000c810:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c818:	29 c3                	sub    ebx,eax
c000c81a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c81d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c820:	bb 05 00 00 00       	mov    ebx,0x5
c000c825:	83 c1 02             	add    ecx,0x2
c000c828:	89 c8                	mov    eax,ecx
c000c82a:	f7 f7                	div    edi
c000c82c:	31 d2                	xor    edx,edx
c000c82e:	89 c7                	mov    edi,eax
c000c830:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c836:	83 c0 02             	add    eax,0x2
c000c839:	f7 f3                	div    ebx
c000c83b:	89 eb                	mov    ebx,ebp
c000c83d:	29 c3                	sub    ebx,eax
c000c83f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c845:	88 1e                	mov    BYTE PTR [esi],bl
c000c847:	19 c0                	sbb    eax,eax
c000c849:	31 d2                	xor    edx,edx
c000c84b:	83 e0 0c             	and    eax,0xc
c000c84e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c852:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c85a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c85e:	83 f9 01             	cmp    ecx,0x1
c000c861:	0f 96 c2             	setbe  dl
c000c864:	41                   	inc    ecx
c000c865:	01 d0                	add    eax,edx
c000c867:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c86a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c86e:	83 c4 1c             	add    esp,0x1c
c000c871:	89 f0                	mov    eax,esi
c000c873:	5b                   	pop    ebx
c000c874:	5e                   	pop    esi
c000c875:	5f                   	pop    edi
c000c876:	5d                   	pop    ebp
c000c877:	c2 04 00             	ret    0x4

c000c87a <Clock::timeInDatetimeLocal()>:
c000c87a:	53                   	push   ebx
c000c87b:	83 ec 14             	sub    esp,0x14
c000c87e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c882:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c886:	e8 8b fc ff ff       	call   c000c516 <Clock::timeInSecondsLocal()>
c000c88b:	83 c4 0c             	add    esp,0xc
c000c88e:	52                   	push   edx
c000c88f:	50                   	push   eax
c000c890:	53                   	push   ebx
c000c891:	e8 a0 fe ff ff       	call   c000c736 <secondsToDatetime(unsigned long long)>
c000c896:	89 d8                	mov    eax,ebx
c000c898:	83 c4 14             	add    esp,0x14
c000c89b:	5b                   	pop    ebx
c000c89c:	c2 04 00             	ret    0x4
c000c89f:	90                   	nop

c000c8a0 <Device::hibernate()>:
c000c8a0:	c3                   	ret    
c000c8a1:	90                   	nop

c000c8a2 <Device::wake()>:
c000c8a2:	c3                   	ret    
c000c8a3:	90                   	nop

c000c8a4 <Device::detect()>:
c000c8a4:	c3                   	ret    
c000c8a5:	90                   	nop

c000c8a6 <Device::disableLegacy()>:
c000c8a6:	c3                   	ret    
c000c8a7:	90                   	nop

c000c8a8 <Device::powerSaving(PowerSavingLevel)>:
c000c8a8:	c3                   	ret    
c000c8a9:	90                   	nop

c000c8aa <DriverlessDevice::close(int, int, void*)>:
c000c8aa:	31 c0                	xor    eax,eax
c000c8ac:	c3                   	ret    
c000c8ad:	90                   	nop

c000c8ae <DriverlessDevice::detect()>:
c000c8ae:	c3                   	ret    
c000c8af:	90                   	nop

c000c8b0 <DriverlessDevice::open(int, int, void*)>:
c000c8b0:	83 ec 18             	sub    esp,0x18
c000c8b3:	68 90 1a 02 c0       	push   0xc0021a90
c000c8b8:	e8 5e 4d 00 00       	call   c001161b <KePanic(char const*)>
c000c8bd:	83 c8 ff             	or     eax,0xffffffff
c000c8c0:	83 c4 1c             	add    esp,0x1c
c000c8c3:	c3                   	ret    

c000c8c4 <Device::~Device()>:
c000c8c4:	ba f0 1a 02 c0       	mov    edx,0xc0021af0
c000c8c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8cd:	89 10                	mov    DWORD PTR [eax],edx
c000c8cf:	90                   	nop
c000c8d0:	c3                   	ret    
c000c8d1:	90                   	nop

c000c8d2 <Device::~Device()>:
c000c8d2:	83 ec 0c             	sub    esp,0xc
c000c8d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c8d9:	e8 e6 ff ff ff       	call   c000c8c4 <Device::~Device()>
c000c8de:	83 c4 04             	add    esp,0x4
c000c8e1:	83 ec 08             	sub    esp,0x8
c000c8e4:	68 58 01 00 00       	push   0x158
c000c8e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ed:	e8 26 df ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c8f2:	83 c4 10             	add    esp,0x10
c000c8f5:	83 c4 0c             	add    esp,0xc
c000c8f8:	c3                   	ret    
c000c8f9:	90                   	nop

c000c8fa <Device::findAndLoadDriver()>:
c000c8fa:	c7 44 24 04 ae 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021aae
c000c902:	e9 3e e0 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c907:	90                   	nop

c000c908 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c908:	57                   	push   edi
c000c909:	b9 09 00 00 00       	mov    ecx,0x9
c000c90e:	56                   	push   esi
c000c90f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c913:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c917:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c921:	81 c7 18 01 00 00    	add    edi,0x118
c000c927:	fc                   	cld    
c000c928:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c92a:	5e                   	pop    esi
c000c92b:	5f                   	pop    edi
c000c92c:	c3                   	ret    
c000c92d:	90                   	nop

c000c92e <Device::preOpenACPI(void*, char*, char*)>:
c000c92e:	57                   	push   edi
c000c92f:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c934:	56                   	push   esi
c000c935:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c939:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c93d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c947:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c94d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c953:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c957:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c959:	b9 0e 00 00 00       	mov    ecx,0xe
c000c95e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c964:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c968:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c96a:	5e                   	pop    esi
c000c96b:	5f                   	pop    edi
c000c96c:	c3                   	ret    
c000c96d:	90                   	nop

c000c96e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c96e:	53                   	push   ebx
c000c96f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c973:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c977:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c97b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c97f:	0f b6 c0             	movzx  eax,al
c000c982:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c986:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c98a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c98e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c992:	5b                   	pop    ebx
c000c993:	e9 a8 05 00 00       	jmp    c000cf40 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c998 <Device::getParent()>:
c000c998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c99c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c9a2:	c3                   	ret    
c000c9a3:	90                   	nop

c000c9a4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c9a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9a8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9ac:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c9b1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c9b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c9bd:	e9 e6 06 00 00       	jmp    c000d0a8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c9c2 <Device::addChild(Device*)>:
c000c9c2:	53                   	push   ebx
c000c9c3:	83 ec 08             	sub    esp,0x8
c000c9c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c9ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9ce:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c9d4:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c9da:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c9dc:	85 d2                	test   edx,edx
c000c9de:	74 04                	je     c000c9e4 <Device::addChild(Device*)+0x22>
c000c9e0:	89 d3                	mov    ebx,edx
c000c9e2:	eb f6                	jmp    c000c9da <Device::addChild(Device*)+0x18>
c000c9e4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c9e7:	83 ec 0c             	sub    esp,0xc
c000c9ea:	6a 08                	push   0x8
c000c9ec:	e8 c5 b0 ff ff       	call   c0007ab6 <malloc>
c000c9f1:	89 03                	mov    DWORD PTR [ebx],eax
c000c9f3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c9f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca00:	83 c4 18             	add    esp,0x18
c000ca03:	5b                   	pop    ebx
c000ca04:	c3                   	ret    
c000ca05:	90                   	nop

c000ca06 <Device::removeAllChildren()>:
c000ca06:	56                   	push   esi
c000ca07:	53                   	push   ebx
c000ca08:	52                   	push   edx
c000ca09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ca0d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ca13:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca16:	74 17                	je     c000ca2f <Device::removeAllChildren()+0x29>
c000ca18:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ca1b:	85 c0                	test   eax,eax
c000ca1d:	74 0c                	je     c000ca2b <Device::removeAllChildren()+0x25>
c000ca1f:	83 ec 0c             	sub    esp,0xc
c000ca22:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca24:	50                   	push   eax
c000ca25:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ca28:	83 c4 10             	add    esp,0x10
c000ca2b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca2d:	eb e4                	jmp    c000ca13 <Device::removeAllChildren()+0xd>
c000ca2f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca35:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca3b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca41:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca48:	58                   	pop    eax
c000ca49:	5b                   	pop    ebx
c000ca4a:	5e                   	pop    esi
c000ca4b:	c3                   	ret    

c000ca4c <Device::hibernateAll()>:
c000ca4c:	53                   	push   ebx
c000ca4d:	83 ec 14             	sub    esp,0x14
c000ca50:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca54:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca56:	53                   	push   ebx
c000ca57:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ca5a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca60:	83 c4 10             	add    esp,0x10
c000ca63:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca66:	74 0f                	je     c000ca77 <Device::hibernateAll()+0x2b>
c000ca68:	83 ec 0c             	sub    esp,0xc
c000ca6b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca6e:	e8 d9 ff ff ff       	call   c000ca4c <Device::hibernateAll()>
c000ca73:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca75:	eb e9                	jmp    c000ca60 <Device::hibernateAll()+0x14>
c000ca77:	83 c4 08             	add    esp,0x8
c000ca7a:	5b                   	pop    ebx
c000ca7b:	c3                   	ret    

c000ca7c <Device::wakeAll()>:
c000ca7c:	53                   	push   ebx
c000ca7d:	83 ec 14             	sub    esp,0x14
c000ca80:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca84:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca86:	53                   	push   ebx
c000ca87:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ca8a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca90:	83 c4 10             	add    esp,0x10
c000ca93:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca96:	74 0f                	je     c000caa7 <Device::wakeAll()+0x2b>
c000ca98:	83 ec 0c             	sub    esp,0xc
c000ca9b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca9e:	e8 d9 ff ff ff       	call   c000ca7c <Device::wakeAll()>
c000caa3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000caa5:	eb e9                	jmp    c000ca90 <Device::wakeAll()+0x14>
c000caa7:	83 c4 08             	add    esp,0x8
c000caaa:	5b                   	pop    ebx
c000caab:	c3                   	ret    

c000caac <Device::detectAll()>:
c000caac:	53                   	push   ebx
c000caad:	83 ec 14             	sub    esp,0x14
c000cab0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cab4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cab6:	53                   	push   ebx
c000cab7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000caba:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cac0:	83 c4 10             	add    esp,0x10
c000cac3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cac6:	74 0f                	je     c000cad7 <Device::detectAll()+0x2b>
c000cac8:	83 ec 0c             	sub    esp,0xc
c000cacb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cace:	e8 d9 ff ff ff       	call   c000caac <Device::detectAll()>
c000cad3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cad5:	eb e9                	jmp    c000cac0 <Device::detectAll()+0x14>
c000cad7:	83 c4 08             	add    esp,0x8
c000cada:	5b                   	pop    ebx
c000cadb:	c3                   	ret    

c000cadc <Device::disableLegacyAll()>:
c000cadc:	c3                   	ret    
c000cadd:	90                   	nop

c000cade <Device::loadDriversForAll()>:
c000cade:	c3                   	ret    
c000cadf:	90                   	nop

c000cae0 <Device::closeAll()>:
c000cae0:	53                   	push   ebx
c000cae1:	83 ec 08             	sub    esp,0x8
c000cae4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cae8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000caea:	6a 00                	push   0x0
c000caec:	6a 00                	push   0x0
c000caee:	6a 00                	push   0x0
c000caf0:	53                   	push   ebx
c000caf1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000caf4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cafa:	83 c4 10             	add    esp,0x10
c000cafd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb00:	74 0f                	je     c000cb11 <Device::closeAll()+0x31>
c000cb02:	83 ec 0c             	sub    esp,0xc
c000cb05:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb08:	e8 d3 ff ff ff       	call   c000cae0 <Device::closeAll()>
c000cb0d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb0f:	eb e9                	jmp    c000cafa <Device::closeAll()+0x1a>
c000cb11:	83 c4 08             	add    esp,0x8
c000cb14:	5b                   	pop    ebx
c000cb15:	c3                   	ret    

c000cb16 <Device::powerSavingAll(PowerSavingLevel)>:
c000cb16:	56                   	push   esi
c000cb17:	53                   	push   ebx
c000cb18:	83 ec 0c             	sub    esp,0xc
c000cb1b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cb1f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cb23:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb25:	56                   	push   esi
c000cb26:	53                   	push   ebx
c000cb27:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cb2a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb30:	83 c4 10             	add    esp,0x10
c000cb33:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb36:	74 0f                	je     c000cb47 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cb38:	52                   	push   edx
c000cb39:	52                   	push   edx
c000cb3a:	56                   	push   esi
c000cb3b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb3e:	e8 d3 ff ff ff       	call   c000cb16 <Device::powerSavingAll(PowerSavingLevel)>
c000cb43:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb45:	eb e9                	jmp    c000cb30 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cb47:	58                   	pop    eax
c000cb48:	5b                   	pop    ebx
c000cb49:	5e                   	pop    esi
c000cb4a:	c3                   	ret    
c000cb4b:	90                   	nop

c000cb4c <Device::setName(char const*)>:
c000cb4c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cb54:	e9 e7 3a ff ff       	jmp    c0000640 <strcpy>
c000cb59:	90                   	nop

c000cb5a <Device::Device(char const*)>:
c000cb5a:	83 ec 1c             	sub    esp,0x1c
c000cb5d:	ba f0 1a 02 c0       	mov    edx,0xc0021af0
c000cb62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb66:	89 10                	mov    DWORD PTR [eax],edx
c000cb68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb6c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cb76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb7a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cb84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb88:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cb92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb96:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cba0:	83 ec 08             	sub    esp,0x8
c000cba3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbab:	e8 9c ff ff ff       	call   c000cb4c <Device::setName(char const*)>
c000cbb0:	83 c4 10             	add    esp,0x10
c000cbb3:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cbbb:	83 ec 0c             	sub    esp,0xc
c000cbbe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbc2:	e8 ef ae ff ff       	call   c0007ab6 <malloc>
c000cbc7:	83 c4 10             	add    esp,0x10
c000cbca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cbd0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cbd7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cbdb:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cbe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbe5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cbeb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cbf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbf5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cbfb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc06:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cc0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc11:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cc18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc1c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cc26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc2a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cc34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc38:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cc42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc46:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000cc50:	90                   	nop
c000cc51:	83 c4 1c             	add    esp,0x1c
c000cc54:	c3                   	ret    
c000cc55:	90                   	nop

c000cc56 <Device::getName()>:
c000cc56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc5a:	05 d0 00 00 00       	add    eax,0xd0
c000cc5f:	c3                   	ret    

c000cc60 <DriverlessDevice::DriverlessDevice(char const*)>:
c000cc60:	83 ec 0c             	sub    esp,0xc
c000cc63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc67:	83 ec 08             	sub    esp,0x8
c000cc6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc6e:	50                   	push   eax
c000cc6f:	e8 e6 fe ff ff       	call   c000cb5a <Device::Device(char const*)>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	ba 1c 1b 02 c0       	mov    edx,0xc0021b1c
c000cc7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc80:	89 10                	mov    DWORD PTR [eax],edx
c000cc82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc86:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000cc90:	90                   	nop
c000cc91:	83 c4 0c             	add    esp,0xc
c000cc94:	c3                   	ret    
c000cc95:	90                   	nop

c000cc96 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000cc96:	57                   	push   edi
c000cc97:	56                   	push   esi
c000cc98:	53                   	push   ebx
c000cc99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000cca1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cca5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000ccab:	75 0c                	jne    c000ccb9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000ccad:	52                   	push   edx
c000ccae:	52                   	push   edx
c000ccaf:	53                   	push   ebx
c000ccb0:	56                   	push   esi
c000ccb1:	e8 2c 2f 01 00       	call   c001fbe2 <LinkedList<Device>::addElement(Device*)>
c000ccb6:	83 c4 10             	add    esp,0x10
c000ccb9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ccbf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ccc2:	74 12                	je     c000ccd6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ccc4:	50                   	push   eax
c000ccc5:	57                   	push   edi
c000ccc6:	56                   	push   esi
c000ccc7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ccca:	e8 c7 ff ff ff       	call   c000cc96 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cccf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ccd1:	83 c4 10             	add    esp,0x10
c000ccd4:	eb e9                	jmp    c000ccbf <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ccd6:	5b                   	pop    ebx
c000ccd7:	5e                   	pop    esi
c000ccd8:	5f                   	pop    edi
c000ccd9:	c3                   	ret    

c000ccda <getDevicesOfType(DeviceType)>:
c000ccda:	53                   	push   ebx
c000ccdb:	83 ec 14             	sub    esp,0x14
c000ccde:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cce2:	53                   	push   ebx
c000cce3:	e8 d6 2f 01 00       	call   c001fcbe <LinkedList<Device>::LinkedList()>
c000cce8:	83 c4 0c             	add    esp,0xc
c000cceb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ccef:	53                   	push   ebx
c000ccf0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000ccf6:	e8 9b ff ff ff       	call   c000cc96 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ccfb:	89 d8                	mov    eax,ebx
c000ccfd:	83 c4 18             	add    esp,0x18
c000cd00:	5b                   	pop    ebx
c000cd01:	c2 04 00             	ret    0x4

c000cd04 <HardDiskController::HardDiskController(char const*)>:
c000cd04:	83 ec 0c             	sub    esp,0xc
c000cd07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd0b:	83 ec 08             	sub    esp,0x8
c000cd0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd12:	50                   	push   eax
c000cd13:	e8 42 fe ff ff       	call   c000cb5a <Device::Device(char const*)>
c000cd18:	83 c4 10             	add    esp,0x10
c000cd1b:	ba 48 1b 02 c0       	mov    edx,0xc0021b48
c000cd20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd24:	89 10                	mov    DWORD PTR [eax],edx
c000cd26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd2a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cd34:	90                   	nop
c000cd35:	83 c4 0c             	add    esp,0xc
c000cd38:	c3                   	ret    
c000cd39:	90                   	nop
c000cd3a:	66 90                	xchg   ax,ax

c000cd3c <HardDiskController::~HardDiskController()>:
c000cd3c:	83 ec 0c             	sub    esp,0xc
c000cd3f:	ba 48 1b 02 c0       	mov    edx,0xc0021b48
c000cd44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd48:	89 10                	mov    DWORD PTR [eax],edx
c000cd4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd4e:	83 ec 0c             	sub    esp,0xc
c000cd51:	50                   	push   eax
c000cd52:	e8 6d fb ff ff       	call   c000c8c4 <Device::~Device()>
c000cd57:	83 c4 10             	add    esp,0x10
c000cd5a:	90                   	nop
c000cd5b:	83 c4 0c             	add    esp,0xc
c000cd5e:	c3                   	ret    
c000cd5f:	90                   	nop

c000cd60 <HardDiskController::~HardDiskController()>:
c000cd60:	83 ec 0c             	sub    esp,0xc
c000cd63:	83 ec 0c             	sub    esp,0xc
c000cd66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd6a:	e8 cd ff ff ff       	call   c000cd3c <HardDiskController::~HardDiskController()>
c000cd6f:	83 c4 10             	add    esp,0x10
c000cd72:	83 ec 08             	sub    esp,0x8
c000cd75:	68 58 01 00 00       	push   0x158
c000cd7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd7e:	e8 95 da ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cd83:	83 c4 10             	add    esp,0x10
c000cd86:	83 c4 0c             	add    esp,0xc
c000cd89:	c3                   	ret    

c000cd8a <PhysicalDisk::eject()>:
c000cd8a:	83 c8 ff             	or     eax,0xffffffff
c000cd8d:	c3                   	ret    

c000cd8e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cd8e:	83 ec 0c             	sub    esp,0xc
c000cd91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd95:	83 ec 08             	sub    esp,0x8
c000cd98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9c:	50                   	push   eax
c000cd9d:	e8 b8 fd ff ff       	call   c000cb5a <Device::Device(char const*)>
c000cda2:	83 c4 10             	add    esp,0x10
c000cda5:	ba 74 1b 02 c0       	mov    edx,0xc0021b74
c000cdaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdae:	89 10                	mov    DWORD PTR [eax],edx
c000cdb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdb4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cdbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdbf:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cdc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdca:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cdd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdd8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cddc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cdf0:	90                   	nop
c000cdf1:	83 c4 0c             	add    esp,0xc
c000cdf4:	c3                   	ret    
c000cdf5:	90                   	nop

c000cdf6 <PhysicalDisk::startCache()>:
c000cdf6:	56                   	push   esi
c000cdf7:	53                   	push   ebx
c000cdf8:	83 ec 10             	sub    esp,0x10
c000cdfb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cdff:	6a 44                	push   0x44
c000ce01:	e8 b0 ac ff ff       	call   c0007ab6 <malloc>
c000ce06:	89 c6                	mov    esi,eax
c000ce08:	58                   	pop    eax
c000ce09:	5a                   	pop    edx
c000ce0a:	53                   	push   ebx
c000ce0b:	56                   	push   esi
c000ce0c:	e8 7b 17 00 00       	call   c000e58c <VCache::VCache(PhysicalDisk*)>
c000ce11:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ce17:	83 c4 14             	add    esp,0x14
c000ce1a:	5b                   	pop    ebx
c000ce1b:	5e                   	pop    esi
c000ce1c:	c3                   	ret    
c000ce1d:	90                   	nop

c000ce1e <PhysicalDisk::~PhysicalDisk()>:
c000ce1e:	83 ec 0c             	sub    esp,0xc
c000ce21:	ba 74 1b 02 c0       	mov    edx,0xc0021b74
c000ce26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce2a:	89 10                	mov    DWORD PTR [eax],edx
c000ce2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce30:	83 ec 0c             	sub    esp,0xc
c000ce33:	50                   	push   eax
c000ce34:	e8 8b fa ff ff       	call   c000c8c4 <Device::~Device()>
c000ce39:	83 c4 10             	add    esp,0x10
c000ce3c:	90                   	nop
c000ce3d:	83 c4 0c             	add    esp,0xc
c000ce40:	c3                   	ret    
c000ce41:	90                   	nop

c000ce42 <PhysicalDisk::~PhysicalDisk()>:
c000ce42:	83 ec 0c             	sub    esp,0xc
c000ce45:	83 ec 0c             	sub    esp,0xc
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	e8 cd ff ff ff       	call   c000ce1e <PhysicalDisk::~PhysicalDisk()>
c000ce51:	83 c4 10             	add    esp,0x10
c000ce54:	83 ec 08             	sub    esp,0x8
c000ce57:	68 6c 01 00 00       	push   0x16c
c000ce5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce60:	e8 b3 d9 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000ce65:	83 c4 10             	add    esp,0x10
c000ce68:	83 c4 0c             	add    esp,0xc
c000ce6b:	c3                   	ret    

c000ce6c <int_handler>:
c000ce6c:	55                   	push   ebp
c000ce6d:	57                   	push   edi
c000ce6e:	56                   	push   esi
c000ce6f:	53                   	push   ebx
c000ce70:	83 ec 0c             	sub    esp,0xc
c000ce73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ce77:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce7e:	74 0b                	je     c000ce8b <int_handler+0x1f>
c000ce80:	fa                   	cli    
c000ce81:	f4                   	hlt    
c000ce82:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce89:	75 f5                	jne    c000ce80 <int_handler+0x14>
c000ce8b:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000ce8e:	8d 46 e0             	lea    eax,[esi-0x20]
c000ce91:	83 f8 17             	cmp    eax,0x17
c000ce94:	76 40                	jbe    c000ced6 <int_handler+0x6a>
c000ce96:	c1 e6 04             	shl    esi,0x4
c000ce99:	31 db                	xor    ebx,ebx
c000ce9b:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000cea1:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000cea7:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ceab:	85 c0                	test   eax,eax
c000cead:	74 13                	je     c000cec2 <int_handler+0x56>
c000ceaf:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000ceb2:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000ceb6:	74 2c                	je     c000cee4 <int_handler+0x78>
c000ceb8:	83 ec 08             	sub    esp,0x8
c000cebb:	52                   	push   edx
c000cebc:	57                   	push   edi
c000cebd:	ff d0                	call   eax
c000cebf:	83 c4 10             	add    esp,0x10
c000cec2:	83 c3 01             	add    ebx,0x1
c000cec5:	83 fb 04             	cmp    ebx,0x4
c000cec8:	75 dd                	jne    c000cea7 <int_handler+0x3b>
c000ceca:	83 c4 0c             	add    esp,0xc
c000cecd:	31 c0                	xor    eax,eax
c000cecf:	5b                   	pop    ebx
c000ced0:	31 d2                	xor    edx,edx
c000ced2:	5e                   	pop    esi
c000ced3:	5f                   	pop    edi
c000ced4:	5d                   	pop    ebp
c000ced5:	c3                   	ret    
c000ced6:	83 ec 0c             	sub    esp,0xc
c000ced9:	50                   	push   eax
c000ceda:	e8 a5 b4 00 00       	call   c0018384 <HalEndOfInterrupt(int)>
c000cedf:	83 c4 10             	add    esp,0x10
c000cee2:	eb b2                	jmp    c000ce96 <int_handler+0x2a>
c000cee4:	83 ec 08             	sub    esp,0x8
c000cee7:	52                   	push   edx
c000cee8:	57                   	push   edi
c000cee9:	ff d0                	call   eax
c000ceeb:	83 c4 10             	add    esp,0x10
c000ceee:	83 c4 0c             	add    esp,0xc
c000cef1:	5b                   	pop    ebx
c000cef2:	5e                   	pop    esi
c000cef3:	5f                   	pop    edi
c000cef4:	5d                   	pop    ebp
c000cef5:	c3                   	ret    

c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cef6:	56                   	push   esi
c000cef7:	31 c0                	xor    eax,eax
c000cef9:	53                   	push   ebx
c000cefa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cefe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf02:	89 ca                	mov    edx,ecx
c000cf04:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf08:	c1 e2 04             	shl    edx,0x4
c000cf0b:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cf13:	74 17                	je     c000cf2c <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cf15:	83 c0 01             	add    eax,0x1
c000cf18:	83 f8 04             	cmp    eax,0x4
c000cf1b:	75 ee                	jne    c000cf0b <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cf1d:	c7 44 24 0c a4 1b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021ba4
c000cf25:	5b                   	pop    ebx
c000cf26:	5e                   	pop    esi
c000cf27:	e9 ef 46 00 00       	jmp    c001161b <KePanic(char const*)>
c000cf2c:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cf2f:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cf36:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cf3d:	5b                   	pop    ebx
c000cf3e:	5e                   	pop    esi
c000cf3f:	c3                   	ret    

c000cf40 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cf40:	57                   	push   edi
c000cf41:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cf47:	56                   	push   esi
c000cf48:	53                   	push   ebx
c000cf49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cf4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cf51:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf58:	74 54                	je     c000cfae <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cf5a:	89 c7                	mov    edi,eax
c000cf5c:	84 c0                	test   al,al
c000cf5e:	74 1d                	je     c000cf7d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cf60:	83 fe 0f             	cmp    esi,0xf
c000cf63:	0f 8f d5 00 00 00    	jg     c000d03e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cf69:	0f b6 b6 c8 36 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc938]
c000cf70:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cf78:	d1 ef                	shr    edi,1
c000cf7a:	83 e7 01             	and    edi,0x1
c000cf7d:	83 ec 08             	sub    esp,0x8
c000cf80:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf85:	31 db                	xor    ebx,ebx
c000cf87:	50                   	push   eax
c000cf88:	68 b1 1b 02 c0       	push   0xc0021bb1
c000cf8d:	e8 b3 d9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000cf92:	83 c4 10             	add    esp,0x10
c000cf95:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf9a:	85 c0                	test   eax,eax
c000cf9c:	7f 55                	jg     c000cff3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cf9e:	83 ec 0c             	sub    esp,0xc
c000cfa1:	68 c8 1b 02 c0       	push   0xc0021bc8
c000cfa6:	e8 70 46 00 00       	call   c001161b <KePanic(char const*)>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	8d 7e 20             	lea    edi,[esi+0x20]
c000cfb1:	89 f8                	mov    eax,edi
c000cfb3:	31 d2                	xor    edx,edx
c000cfb5:	c1 e0 04             	shl    eax,0x4
c000cfb8:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000cfbf:	85 c9                	test   ecx,ecx
c000cfc1:	0f 84 8e 00 00 00    	je     c000d055 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000cfc7:	83 c2 01             	add    edx,0x1
c000cfca:	83 fa 04             	cmp    edx,0x4
c000cfcd:	75 e9                	jne    c000cfb8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cfcf:	83 ec 0c             	sub    esp,0xc
c000cfd2:	68 1c 1c 02 c0       	push   0xc0021c1c
c000cfd7:	e8 3f 46 00 00       	call   c001161b <KePanic(char const*)>
c000cfdc:	83 c4 10             	add    esp,0x10
c000cfdf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cfe4:	5b                   	pop    ebx
c000cfe5:	5e                   	pop    esi
c000cfe6:	5f                   	pop    edi
c000cfe7:	c3                   	ret    
c000cfe8:	83 c3 01             	add    ebx,0x1
c000cfeb:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000cff1:	7e ab                	jle    c000cf9e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000cff3:	83 ec 08             	sub    esp,0x8
c000cff6:	8b 04 9d e0 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2f20]
c000cffd:	56                   	push   esi
c000cffe:	50                   	push   eax
c000cfff:	e8 0a 1b 01 00       	call   c001eb0e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000d004:	83 c4 10             	add    esp,0x10
c000d007:	84 c0                	test   al,al
c000d009:	74 dd                	je     c000cfe8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000d00b:	83 ec 04             	sub    esp,0x4
c000d00e:	89 f8                	mov    eax,edi
c000d010:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000d017:	0f b6 f8             	movzx  edi,al
c000d01a:	57                   	push   edi
c000d01b:	8d 7e 20             	lea    edi,[esi+0x20]
c000d01e:	6a 00                	push   0x0
c000d020:	89 f8                	mov    eax,edi
c000d022:	0f b6 c0             	movzx  eax,al
c000d025:	50                   	push   eax
c000d026:	89 f0                	mov    eax,esi
c000d028:	6a 00                	push   0x0
c000d02a:	0f b6 c0             	movzx  eax,al
c000d02d:	6a 00                	push   0x0
c000d02f:	50                   	push   eax
c000d030:	53                   	push   ebx
c000d031:	e8 44 1c 01 00       	call   c001ec7a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d036:	83 c4 20             	add    esp,0x20
c000d039:	e9 73 ff ff ff       	jmp    c000cfb1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000d03e:	83 ec 0c             	sub    esp,0xc
c000d041:	31 ff                	xor    edi,edi
c000d043:	68 e4 1b 02 c0       	push   0xc0021be4
c000d048:	e8 ce 45 00 00       	call   c001161b <KePanic(char const*)>
c000d04d:	83 c4 10             	add    esp,0x10
c000d050:	e9 28 ff ff ff       	jmp    c000cf7d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000d055:	8d 04 ba             	lea    eax,[edx+edi*4]
c000d058:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d05c:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d063:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d067:	5b                   	pop    ebx
c000d068:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d06f:	89 f0                	mov    eax,esi
c000d071:	5e                   	pop    esi
c000d072:	5f                   	pop    edi
c000d073:	c3                   	ret    

c000d074 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d074:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d078:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d07c:	c1 e0 04             	shl    eax,0x4
c000d07f:	8d 50 10             	lea    edx,[eax+0x10]
c000d082:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d088:	74 08                	je     c000d092 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d08a:	83 c0 04             	add    eax,0x4
c000d08d:	39 d0                	cmp    eax,edx
c000d08f:	75 f1                	jne    c000d082 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d091:	c3                   	ret    
c000d092:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d09c:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d0a6:	eb e2                	jmp    c000d08a <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d0a8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d0a8:	53                   	push   ebx
c000d0a9:	83 ec 08             	sub    esp,0x8
c000d0ac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d0b0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d0b5:	74 0e                	je     c000d0c5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d0b7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d0bc:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d0c3:	75 37                	jne    c000d0fc <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000d0c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0c9:	83 c0 20             	add    eax,0x20
c000d0cc:	c1 e0 04             	shl    eax,0x4
c000d0cf:	8d 50 10             	lea    edx,[eax+0x10]
c000d0d2:	39 98 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ebx
c000d0d8:	74 0c                	je     c000d0e6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000d0da:	83 c0 04             	add    eax,0x4
c000d0dd:	39 d0                	cmp    eax,edx
c000d0df:	75 f1                	jne    c000d0d2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000d0e1:	83 c4 08             	add    esp,0x8
c000d0e4:	5b                   	pop    ebx
c000d0e5:	c3                   	ret    
c000d0e6:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0f0:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d0fa:	eb de                	jmp    c000d0da <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000d0fc:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000d101:	7f 11                	jg     c000d114 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000d103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d107:	0f b6 80 c8 36 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc938]
c000d10e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d112:	eb b1                	jmp    c000d0c5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d114:	83 ec 0c             	sub    esp,0xc
c000d117:	68 d5 1b 02 c0       	push   0xc0021bd5
c000d11c:	e8 fa 44 00 00       	call   c001161b <KePanic(char const*)>
c000d121:	83 c4 10             	add    esp,0x10
c000d124:	eb 9f                	jmp    c000d0c5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000d126 <setupINTS()>:
c000d126:	31 c0                	xor    eax,eax
c000d128:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d132:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d13c:	c7 80 24 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bdc],0x0
c000d146:	c7 80 24 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bdc],0x0
c000d150:	c7 80 28 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd8],0x0
c000d15a:	c7 80 28 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd8],0x0
c000d164:	c7 80 2c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd4],0x0
c000d16e:	c7 80 2c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd4],0x0
c000d178:	83 c0 10             	add    eax,0x10
c000d17b:	3d 00 10 00 00       	cmp    eax,0x1000
c000d180:	75 a6                	jne    c000d128 <setupINTS()+0x2>
c000d182:	c3                   	ret    

c000d183 <convertLegacyIRQNumber(int)>:
c000d183:	83 ec 0c             	sub    esp,0xc
c000d186:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d18c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d190:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d197:	74 0c                	je     c000d1a5 <convertLegacyIRQNumber(int)+0x22>
c000d199:	83 f8 0f             	cmp    eax,0xf
c000d19c:	7f 0b                	jg     c000d1a9 <convertLegacyIRQNumber(int)+0x26>
c000d19e:	0f b6 80 c8 36 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc938]
c000d1a5:	83 c4 0c             	add    esp,0xc
c000d1a8:	c3                   	ret    
c000d1a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1ad:	83 ec 0c             	sub    esp,0xc
c000d1b0:	68 e4 1b 02 c0       	push   0xc0021be4
c000d1b5:	e8 61 44 00 00       	call   c001161b <KePanic(char const*)>
c000d1ba:	83 c4 10             	add    esp,0x10
c000d1bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1c1:	83 c4 0c             	add    esp,0xc
c000d1c4:	c3                   	ret    
c000d1c5:	90                   	nop

c000d1c6 <startGUI(void*)>:
c000d1c6:	55                   	push   ebp
c000d1c7:	89 e5                	mov    ebp,esp
c000d1c9:	53                   	push   ebx
c000d1ca:	83 ec 04             	sub    esp,0x4
c000d1cd:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1d2:	83 e8 01             	sub    eax,0x1
c000d1d5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d1da:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1df:	85 c0                	test   eax,eax
c000d1e1:	75 01                	jne    c000d1e4 <startGUI(void*)+0x1e>
c000d1e3:	fb                   	sti    
c000d1e4:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d1ea:	83 ec 08             	sub    esp,0x8
c000d1ed:	6a 01                	push   0x1
c000d1ef:	68 41 1c 02 c0       	push   0xc0021c41
c000d1f4:	e8 62 84 00 00       	call   c001565b <Thr::loadDLL(char const*, bool)>
c000d1f9:	83 c4 10             	add    esp,0x10
c000d1fc:	83 ec 08             	sub    esp,0x8
c000d1ff:	53                   	push   ebx
c000d200:	50                   	push   eax
c000d201:	e8 86 86 00 00       	call   c001588c <Thr::executeDLL(unsigned long, void*)>
c000d206:	83 c4 10             	add    esp,0x10
c000d209:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d20f:	83 ec 08             	sub    esp,0x8
c000d212:	6a 01                	push   0x1
c000d214:	68 5b 1c 02 c0       	push   0xc0021c5b
c000d219:	e8 3d 84 00 00       	call   c001565b <Thr::loadDLL(char const*, bool)>
c000d21e:	83 c4 10             	add    esp,0x10
c000d221:	83 ec 08             	sub    esp,0x8
c000d224:	53                   	push   ebx
c000d225:	50                   	push   eax
c000d226:	e8 61 86 00 00       	call   c001588c <Thr::executeDLL(unsigned long, void*)>
c000d22b:	83 c4 10             	add    esp,0x10
c000d22e:	90                   	nop
c000d22f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d232:	c9                   	leave  
c000d233:	c3                   	ret    

c000d234 <startGUIVESA(void*)>:
c000d234:	55                   	push   ebp
c000d235:	89 e5                	mov    ebp,esp
c000d237:	53                   	push   ebx
c000d238:	83 ec 04             	sub    esp,0x4
c000d23b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d240:	83 e8 01             	sub    eax,0x1
c000d243:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d248:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d24d:	85 c0                	test   eax,eax
c000d24f:	75 01                	jne    c000d252 <startGUIVESA(void*)+0x1e>
c000d251:	fb                   	sti    
c000d252:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d258:	83 ec 08             	sub    esp,0x8
c000d25b:	6a 01                	push   0x1
c000d25d:	68 79 1c 02 c0       	push   0xc0021c79
c000d262:	e8 f4 83 00 00       	call   c001565b <Thr::loadDLL(char const*, bool)>
c000d267:	83 c4 10             	add    esp,0x10
c000d26a:	83 ec 08             	sub    esp,0x8
c000d26d:	53                   	push   ebx
c000d26e:	50                   	push   eax
c000d26f:	e8 18 86 00 00       	call   c001588c <Thr::executeDLL(unsigned long, void*)>
c000d274:	83 c4 10             	add    esp,0x10
c000d277:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d27d:	83 ec 08             	sub    esp,0x8
c000d280:	6a 01                	push   0x1
c000d282:	68 5b 1c 02 c0       	push   0xc0021c5b
c000d287:	e8 cf 83 00 00       	call   c001565b <Thr::loadDLL(char const*, bool)>
c000d28c:	83 c4 10             	add    esp,0x10
c000d28f:	83 ec 08             	sub    esp,0x8
c000d292:	53                   	push   ebx
c000d293:	50                   	push   eax
c000d294:	e8 f3 85 00 00       	call   c001588c <Thr::executeDLL(unsigned long, void*)>
c000d299:	83 c4 10             	add    esp,0x10
c000d29c:	90                   	nop
c000d29d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d2a0:	c9                   	leave  
c000d2a1:	c3                   	ret    

c000d2a2 <sendKeyToTerminal(unsigned char)>:
c000d2a2:	55                   	push   ebp
c000d2a3:	89 e5                	mov    ebp,esp
c000d2a5:	83 ec 28             	sub    esp,0x28
c000d2a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2ab:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d2ae:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d2b3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d2b7:	83 ec 08             	sub    esp,0x8
c000d2ba:	52                   	push   edx
c000d2bb:	50                   	push   eax
c000d2bc:	e8 f5 ba ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000d2c1:	83 c4 10             	add    esp,0x10
c000d2c4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2c8:	83 f8 0a             	cmp    eax,0xa
c000d2cb:	74 16                	je     c000d2e3 <sendKeyToTerminal(unsigned char)+0x41>
c000d2cd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2d1:	83 f8 03             	cmp    eax,0x3
c000d2d4:	74 0d                	je     c000d2e3 <sendKeyToTerminal(unsigned char)+0x41>
c000d2d6:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2da:	83 f8 1c             	cmp    eax,0x1c
c000d2dd:	0f 85 97 00 00 00    	jne    c000d37a <sendKeyToTerminal(unsigned char)+0xd8>
c000d2e3:	fa                   	cli    
c000d2e4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2e9:	83 c0 01             	add    eax,0x1
c000d2ec:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d2f1:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d2f6:	83 c0 01             	add    eax,0x1
c000d2f9:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d2fe:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d303:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d306:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d310:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d314:	74 1f                	je     c000d335 <sendKeyToTerminal(unsigned char)+0x93>
c000d316:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d319:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d31c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d31f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d322:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d325:	83 ec 0c             	sub    esp,0xc
c000d328:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d32b:	e8 a4 92 00 00       	call   c00165d4 <unblockTask(ThreadControlBlock*)>
c000d330:	83 c4 10             	add    esp,0x10
c000d333:	eb db                	jmp    c000d310 <sendKeyToTerminal(unsigned char)+0x6e>
c000d335:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d33a:	83 e8 01             	sub    eax,0x1
c000d33d:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d342:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d347:	85 c0                	test   eax,eax
c000d349:	75 18                	jne    c000d363 <sendKeyToTerminal(unsigned char)+0xc1>
c000d34b:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d350:	85 c0                	test   eax,eax
c000d352:	74 0f                	je     c000d363 <sendKeyToTerminal(unsigned char)+0xc1>
c000d354:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d35e:	e8 59 8d 00 00       	call   c00160bc <schedule()>
c000d363:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d368:	83 e8 01             	sub    eax,0x1
c000d36b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d370:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d375:	85 c0                	test   eax,eax
c000d377:	75 01                	jne    c000d37a <sendKeyToTerminal(unsigned char)+0xd8>
c000d379:	fb                   	sti    
c000d37a:	90                   	nop
c000d37b:	c9                   	leave  
c000d37c:	c3                   	ret    

c000d37d <sendKeyboardToken(KeyboardToken)>:
c000d37d:	55                   	push   ebp
c000d37e:	89 e5                	mov    ebp,esp
c000d380:	83 ec 18             	sub    esp,0x18
c000d383:	e8 e3 42 00 00       	call   c001166b <KeUserIOReceived()>
c000d388:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d38b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d38e:	0f b7 c0             	movzx  eax,ax
c000d391:	83 f2 01             	xor    edx,0x1
c000d394:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d39a:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d39f:	85 c0                	test   eax,eax
c000d3a1:	74 24                	je     c000d3c7 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d3a3:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d3a9:	83 ec 04             	sub    esp,0x4
c000d3ac:	68 40 b4 02 c0       	push   0xc002b440
c000d3b1:	83 ec 08             	sub    esp,0x8
c000d3b4:	89 e2                	mov    edx,esp
c000d3b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3b9:	89 02                	mov    DWORD PTR [edx],eax
c000d3bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d3be:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d3c2:	ff d1                	call   ecx
c000d3c4:	83 c4 10             	add    esp,0x10
c000d3c7:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d3cb:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d3ce:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d3d3:	0f b6 d2             	movzx  edx,dl
c000d3d6:	0f b6 c0             	movzx  eax,al
c000d3d9:	39 c2                	cmp    edx,eax
c000d3db:	74 1c                	je     c000d3f9 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d3dd:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d3e0:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d3e5:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d3ea:	0f b6 c0             	movzx  eax,al
c000d3ed:	83 ec 0c             	sub    esp,0xc
c000d3f0:	50                   	push   eax
c000d3f1:	e8 0c b1 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d3f6:	83 c4 10             	add    esp,0x10
c000d3f9:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d3fc:	0f b6 c0             	movzx  eax,al
c000d3ff:	85 c0                	test   eax,eax
c000d401:	0f 84 da 00 00 00    	je     c000d4e1 <sendKeyboardToken(KeyboardToken)+0x164>
c000d407:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d40a:	0f b7 c0             	movzx  eax,ax
c000d40d:	3d 18 03 00 00       	cmp    eax,0x318
c000d412:	75 06                	jne    c000d41a <sendKeyboardToken(KeyboardToken)+0x9d>
c000d414:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d41a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d41d:	0f b7 c0             	movzx  eax,ax
c000d420:	3d 19 03 00 00       	cmp    eax,0x319
c000d425:	75 06                	jne    c000d42d <sendKeyboardToken(KeyboardToken)+0xb0>
c000d427:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d42d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d430:	0f b7 c0             	movzx  eax,ax
c000d433:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d438:	75 06                	jne    c000d440 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d43a:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d440:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d443:	0f b7 c0             	movzx  eax,ax
c000d446:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d44b:	75 06                	jne    c000d453 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d44d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d453:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d456:	0f b7 c0             	movzx  eax,ax
c000d459:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d45e:	75 06                	jne    c000d466 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d460:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d466:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d469:	0f b7 c0             	movzx  eax,ax
c000d46c:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d471:	75 06                	jne    c000d479 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d473:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d479:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d47c:	0f b7 c0             	movzx  eax,ax
c000d47f:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d484:	75 06                	jne    c000d48c <sendKeyboardToken(KeyboardToken)+0x10f>
c000d486:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d48c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d48f:	0f b7 c0             	movzx  eax,ax
c000d492:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d497:	75 06                	jne    c000d49f <sendKeyboardToken(KeyboardToken)+0x122>
c000d499:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d49f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a2:	0f b7 c0             	movzx  eax,ax
c000d4a5:	3d 20 03 00 00       	cmp    eax,0x320
c000d4aa:	75 06                	jne    c000d4b2 <sendKeyboardToken(KeyboardToken)+0x135>
c000d4ac:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d4b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4b5:	0f b7 c0             	movzx  eax,ax
c000d4b8:	3d 21 03 00 00       	cmp    eax,0x321
c000d4bd:	75 06                	jne    c000d4c5 <sendKeyboardToken(KeyboardToken)+0x148>
c000d4bf:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d4c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4c8:	0f b7 c0             	movzx  eax,ax
c000d4cb:	3d 22 03 00 00       	cmp    eax,0x322
c000d4d0:	0f 85 f1 00 00 00    	jne    c000d5c7 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d4d6:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d4dc:	e9 e6 00 00 00       	jmp    c000d5c7 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d4e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4e4:	0f b7 c0             	movzx  eax,ax
c000d4e7:	3d 18 03 00 00       	cmp    eax,0x318
c000d4ec:	75 0a                	jne    c000d4f8 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d4ee:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d4f4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4fb:	0f b7 c0             	movzx  eax,ax
c000d4fe:	3d 19 03 00 00       	cmp    eax,0x319
c000d503:	75 0a                	jne    c000d50f <sendKeyboardToken(KeyboardToken)+0x192>
c000d505:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d50b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d50f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d512:	0f b7 c0             	movzx  eax,ax
c000d515:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d51a:	75 0a                	jne    c000d526 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d51c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d522:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d526:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d529:	0f b7 c0             	movzx  eax,ax
c000d52c:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d531:	75 0a                	jne    c000d53d <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d533:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d539:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d53d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d540:	0f b7 c0             	movzx  eax,ax
c000d543:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d548:	75 0a                	jne    c000d554 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d54a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d550:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d554:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d557:	0f b7 c0             	movzx  eax,ax
c000d55a:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d55f:	75 0a                	jne    c000d56b <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d561:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d567:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d56b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d56e:	0f b7 c0             	movzx  eax,ax
c000d571:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d576:	75 0a                	jne    c000d582 <sendKeyboardToken(KeyboardToken)+0x205>
c000d578:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d57e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d582:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d585:	0f b7 c0             	movzx  eax,ax
c000d588:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d58d:	75 0a                	jne    c000d599 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d58f:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d595:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d59c:	0f b7 c0             	movzx  eax,ax
c000d59f:	3d 20 03 00 00       	cmp    eax,0x320
c000d5a4:	75 0a                	jne    c000d5b0 <sendKeyboardToken(KeyboardToken)+0x233>
c000d5a6:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d5ac:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5b3:	0f b7 c0             	movzx  eax,ax
c000d5b6:	3d 21 03 00 00       	cmp    eax,0x321
c000d5bb:	75 0a                	jne    c000d5c7 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d5bd:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d5c3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ca:	0f b7 c0             	movzx  eax,ax
c000d5cd:	3d 00 02 00 00       	cmp    eax,0x200
c000d5d2:	75 2f                	jne    c000d603 <sendKeyboardToken(KeyboardToken)+0x286>
c000d5d4:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d5d9:	83 f0 01             	xor    eax,0x1
c000d5dc:	0f b6 c0             	movzx  eax,al
c000d5df:	85 c0                	test   eax,eax
c000d5e1:	74 20                	je     c000d603 <sendKeyboardToken(KeyboardToken)+0x286>
c000d5e3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d5e8:	6a 01                	push   0x1
c000d5ea:	6a 00                	push   0x0
c000d5ec:	68 c6 d1 00 c0       	push   0xc000d1c6
c000d5f1:	50                   	push   eax
c000d5f2:	e8 75 88 00 00       	call   c0015e6c <Process::createThread(void (*)(void*), void*, int)>
c000d5f7:	83 c4 10             	add    esp,0x10
c000d5fa:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d601:	eb 3a                	jmp    c000d63d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d606:	0f b7 c0             	movzx  eax,ax
c000d609:	3d 01 02 00 00       	cmp    eax,0x201
c000d60e:	75 2d                	jne    c000d63d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d610:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d615:	83 f0 01             	xor    eax,0x1
c000d618:	0f b6 c0             	movzx  eax,al
c000d61b:	85 c0                	test   eax,eax
c000d61d:	74 1e                	je     c000d63d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d61f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d624:	6a 01                	push   0x1
c000d626:	6a 00                	push   0x0
c000d628:	68 34 d2 00 c0       	push   0xc000d234
c000d62d:	50                   	push   eax
c000d62e:	e8 39 88 00 00       	call   c0015e6c <Process::createThread(void (*)(void*), void*, int)>
c000d633:	83 c4 10             	add    esp,0x10
c000d636:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d63d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d640:	0f b7 c0             	movzx  eax,ax
c000d643:	3d 25 03 00 00       	cmp    eax,0x325
c000d648:	75 06                	jne    c000d650 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d64a:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d653:	0f b7 c0             	movzx  eax,ax
c000d656:	3d 24 03 00 00       	cmp    eax,0x324
c000d65b:	75 06                	jne    c000d663 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d65d:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d663:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d666:	0f b7 c0             	movzx  eax,ax
c000d669:	3d 23 03 00 00       	cmp    eax,0x323
c000d66e:	75 06                	jne    c000d676 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d670:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d676:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d679:	0f b7 c0             	movzx  eax,ax
c000d67c:	3d 26 03 00 00       	cmp    eax,0x326
c000d681:	75 06                	jne    c000d689 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d683:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d68c:	0f b7 c0             	movzx  eax,ax
c000d68f:	3d 27 03 00 00       	cmp    eax,0x327
c000d694:	75 06                	jne    c000d69c <sendKeyboardToken(KeyboardToken)+0x31f>
c000d696:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d69c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d69f:	0f b7 c0             	movzx  eax,ax
c000d6a2:	3d 22 03 00 00       	cmp    eax,0x322
c000d6a7:	75 06                	jne    c000d6af <sendKeyboardToken(KeyboardToken)+0x332>
c000d6a9:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d6af:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d6b3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d6b6:	83 f0 01             	xor    eax,0x1
c000d6b9:	0f b6 c0             	movzx  eax,al
c000d6bc:	85 c0                	test   eax,eax
c000d6be:	74 7c                	je     c000d73c <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d6c0:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d6c5:	0f b6 c0             	movzx  eax,al
c000d6c8:	85 c0                	test   eax,eax
c000d6ca:	74 43                	je     c000d70f <sendKeyboardToken(KeyboardToken)+0x392>
c000d6cc:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d6d0:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d6d4:	85 c0                	test   eax,eax
c000d6d6:	74 2b                	je     c000d703 <sendKeyboardToken(KeyboardToken)+0x386>
c000d6d8:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d6de:	89 d0                	mov    eax,edx
c000d6e0:	c1 e0 02             	shl    eax,0x2
c000d6e3:	01 d0                	add    eax,edx
c000d6e5:	01 c0                	add    eax,eax
c000d6e7:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d6ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ef:	0f b7 c0             	movzx  eax,ax
c000d6f2:	8d 50 d0             	lea    edx,[eax-0x30]
c000d6f5:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6fa:	01 d0                	add    eax,edx
c000d6fc:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d701:	eb 71                	jmp    c000d774 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d703:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d70d:	eb 65                	jmp    c000d774 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d70f:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d714:	85 c0                	test   eax,eax
c000d716:	74 18                	je     c000d730 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d718:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d71d:	0f b6 c0             	movzx  eax,al
c000d720:	83 ec 0c             	sub    esp,0xc
c000d723:	50                   	push   eax
c000d724:	e8 79 fb ff ff       	call   c000d2a2 <sendKeyToTerminal(unsigned char)>
c000d729:	83 c4 10             	add    esp,0x10
c000d72c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d730:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d73a:	eb 38                	jmp    c000d774 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d73c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d73f:	0f b7 c0             	movzx  eax,ax
c000d742:	3d 01 01 00 00       	cmp    eax,0x101
c000d747:	75 2b                	jne    c000d774 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d749:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d74e:	85 c0                	test   eax,eax
c000d750:	74 18                	je     c000d76a <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d752:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d757:	0f b6 c0             	movzx  eax,al
c000d75a:	83 ec 0c             	sub    esp,0xc
c000d75d:	50                   	push   eax
c000d75e:	e8 3f fb ff ff       	call   c000d2a2 <sendKeyToTerminal(unsigned char)>
c000d763:	83 c4 10             	add    esp,0x10
c000d766:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d76a:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d774:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d777:	83 f0 01             	xor    eax,0x1
c000d77a:	0f b6 c0             	movzx  eax,al
c000d77d:	85 c0                	test   eax,eax
c000d77f:	74 5a                	je     c000d7db <sendKeyboardToken(KeyboardToken)+0x45e>
c000d781:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d784:	83 f0 01             	xor    eax,0x1
c000d787:	0f b6 c0             	movzx  eax,al
c000d78a:	85 c0                	test   eax,eax
c000d78c:	74 4d                	je     c000d7db <sendKeyboardToken(KeyboardToken)+0x45e>
c000d78e:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d793:	83 f0 01             	xor    eax,0x1
c000d796:	0f b6 c0             	movzx  eax,al
c000d799:	85 c0                	test   eax,eax
c000d79b:	74 3e                	je     c000d7db <sendKeyboardToken(KeyboardToken)+0x45e>
c000d79d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7a0:	0f b7 c0             	movzx  eax,ax
c000d7a3:	83 f8 1f             	cmp    eax,0x1f
c000d7a6:	76 0b                	jbe    c000d7b3 <sendKeyboardToken(KeyboardToken)+0x436>
c000d7a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7ab:	0f b7 c0             	movzx  eax,ax
c000d7ae:	83 f8 7e             	cmp    eax,0x7e
c000d7b1:	76 16                	jbe    c000d7c9 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7b6:	0f b7 c0             	movzx  eax,ax
c000d7b9:	83 f8 0a             	cmp    eax,0xa
c000d7bc:	74 0b                	je     c000d7c9 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7c1:	0f b7 c0             	movzx  eax,ax
c000d7c4:	83 f8 08             	cmp    eax,0x8
c000d7c7:	75 12                	jne    c000d7db <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7cc:	0f b6 c0             	movzx  eax,al
c000d7cf:	83 ec 0c             	sub    esp,0xc
c000d7d2:	50                   	push   eax
c000d7d3:	e8 ca fa ff ff       	call   c000d2a2 <sendKeyToTerminal(unsigned char)>
c000d7d8:	83 c4 10             	add    esp,0x10
c000d7db:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7de:	83 f0 01             	xor    eax,0x1
c000d7e1:	0f b6 c0             	movzx  eax,al
c000d7e4:	85 c0                	test   eax,eax
c000d7e6:	74 5d                	je     c000d845 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7e8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7eb:	83 f0 01             	xor    eax,0x1
c000d7ee:	0f b6 c0             	movzx  eax,al
c000d7f1:	85 c0                	test   eax,eax
c000d7f3:	74 50                	je     c000d845 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7f5:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d7fa:	0f b6 c0             	movzx  eax,al
c000d7fd:	85 c0                	test   eax,eax
c000d7ff:	74 44                	je     c000d845 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d801:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d804:	0f b7 c0             	movzx  eax,ax
c000d807:	83 f8 3f             	cmp    eax,0x3f
c000d80a:	76 39                	jbe    c000d845 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d80c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d80f:	0f b7 c0             	movzx  eax,ax
c000d812:	83 f8 7f             	cmp    eax,0x7f
c000d815:	77 2e                	ja     c000d845 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d817:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d81a:	88 c2                	mov    dl,al
c000d81c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d81f:	0f b7 c0             	movzx  eax,ax
c000d822:	83 f8 5f             	cmp    eax,0x5f
c000d825:	76 04                	jbe    c000d82b <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d827:	b0 20                	mov    al,0x20
c000d829:	eb 02                	jmp    c000d82d <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d82b:	b0 00                	mov    al,0x0
c000d82d:	89 d1                	mov    ecx,edx
c000d82f:	29 c1                	sub    ecx,eax
c000d831:	89 c8                	mov    eax,ecx
c000d833:	83 e8 40             	sub    eax,0x40
c000d836:	0f b6 c0             	movzx  eax,al
c000d839:	83 ec 0c             	sub    esp,0xc
c000d83c:	50                   	push   eax
c000d83d:	e8 60 fa ff ff       	call   c000d2a2 <sendKeyToTerminal(unsigned char)>
c000d842:	83 c4 10             	add    esp,0x10
c000d845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d848:	0f b7 c0             	movzx  eax,ax
c000d84b:	3d 00 03 00 00       	cmp    eax,0x300
c000d850:	75 12                	jne    c000d864 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d852:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d855:	83 f0 01             	xor    eax,0x1
c000d858:	0f b6 c0             	movzx  eax,al
c000d85b:	85 c0                	test   eax,eax
c000d85d:	74 05                	je     c000d864 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d85f:	e8 9f ac ff ff       	call   c0008503 <doTerminalCycle()>
c000d864:	90                   	nop
c000d865:	c9                   	leave  
c000d866:	c3                   	ret    

c000d867 <clearInternalKeybuffer(VgaText*)>:
c000d867:	55                   	push   ebp
c000d868:	89 e5                	mov    ebp,esp
c000d86a:	83 ec 08             	sub    esp,0x8
c000d86d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d870:	05 02 01 00 00       	add    eax,0x102
c000d875:	83 ec 0c             	sub    esp,0xc
c000d878:	50                   	push   eax
c000d879:	e8 f2 2c ff ff       	call   c0000570 <strlen>
c000d87e:	83 c4 10             	add    esp,0x10
c000d881:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d884:	81 c2 02 01 00 00    	add    edx,0x102
c000d88a:	83 ec 04             	sub    esp,0x4
c000d88d:	50                   	push   eax
c000d88e:	6a 00                	push   0x0
c000d890:	52                   	push   edx
c000d891:	e8 5a 2c ff ff       	call   c00004f0 <memset>
c000d896:	83 c4 10             	add    esp,0x10
c000d899:	90                   	nop
c000d89a:	c9                   	leave  
c000d89b:	c3                   	ret    

c000d89c <readKeyboard(VgaText*, char*, unsigned long)>:
c000d89c:	55                   	push   ebp
c000d89d:	89 e5                	mov    ebp,esp
c000d89f:	83 ec 18             	sub    esp,0x18
c000d8a2:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d8a7:	85 c0                	test   eax,eax
c000d8a9:	74 2a                	je     c000d8d5 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d8ab:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d8b1:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d8b7:	83 ec 04             	sub    esp,0x4
c000d8ba:	68 40 b4 02 c0       	push   0xc002b440
c000d8bf:	83 ec 08             	sub    esp,0x8
c000d8c2:	89 e2                	mov    edx,esp
c000d8c4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d8c7:	89 02                	mov    DWORD PTR [edx],eax
c000d8c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d8cc:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d8d0:	ff d1                	call   ecx
c000d8d2:	83 c4 10             	add    esp,0x10
c000d8d5:	fb                   	sti    
c000d8d6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d8dd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d8e1:	0f 84 0d 01 00 00    	je     c000d9f4 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d8e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8ea:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d8f0:	0f be c0             	movsx  eax,al
c000d8f3:	85 c0                	test   eax,eax
c000d8f5:	75 2c                	jne    c000d923 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d8f7:	fa                   	cli    
c000d8f8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d8fd:	83 c0 01             	add    eax,0x1
c000d900:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d905:	e8 b2 87 00 00       	call   c00160bc <schedule()>
c000d90a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d90f:	83 e8 01             	sub    eax,0x1
c000d912:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d917:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d91c:	85 c0                	test   eax,eax
c000d91e:	75 c7                	jne    c000d8e7 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d920:	fb                   	sti    
c000d921:	eb c4                	jmp    c000d8e7 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d923:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d926:	8d 50 01             	lea    edx,[eax+0x1]
c000d929:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d92c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d92f:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d935:	88 10                	mov    BYTE PTR [eax],dl
c000d937:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d93a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d940:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d943:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d947:	83 f8 03             	cmp    eax,0x3
c000d94a:	75 1e                	jne    c000d96a <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d94c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d951:	8b 00                	mov    eax,DWORD PTR [eax]
c000d953:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d956:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d95c:	83 ec 08             	sub    esp,0x8
c000d95f:	6a 02                	push   0x2
c000d961:	50                   	push   eax
c000d962:	e8 57 41 00 00       	call   c0011abe <KeRaiseSignal(SigHandlerBlock*, int)>
c000d967:	83 c4 10             	add    esp,0x10
c000d96a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d96e:	83 f8 1c             	cmp    eax,0x1c
c000d971:	75 1e                	jne    c000d991 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d973:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d97d:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d983:	83 ec 08             	sub    esp,0x8
c000d986:	6a 09                	push   0x9
c000d988:	50                   	push   eax
c000d989:	e8 30 41 00 00       	call   c0011abe <KeRaiseSignal(SigHandlerBlock*, int)>
c000d98e:	83 c4 10             	add    esp,0x10
c000d991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d994:	05 02 01 00 00       	add    eax,0x102
c000d999:	83 ec 0c             	sub    esp,0xc
c000d99c:	50                   	push   eax
c000d99d:	e8 ce 2b ff ff       	call   c0000570 <strlen>
c000d9a2:	83 c4 10             	add    esp,0x10
c000d9a5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9a8:	81 c2 02 01 00 00    	add    edx,0x102
c000d9ae:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d9b1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9b4:	81 c2 02 01 00 00    	add    edx,0x102
c000d9ba:	83 ec 04             	sub    esp,0x4
c000d9bd:	50                   	push   eax
c000d9be:	51                   	push   ecx
c000d9bf:	52                   	push   edx
c000d9c0:	e8 0b 2a ff ff       	call   c00003d0 <memmove>
c000d9c5:	83 c4 10             	add    esp,0x10
c000d9c8:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d9cc:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d9d0:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9d4:	83 f8 0a             	cmp    eax,0xa
c000d9d7:	74 16                	je     c000d9ef <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d9d9:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9dd:	83 f8 03             	cmp    eax,0x3
c000d9e0:	74 0d                	je     c000d9ef <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d9e2:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9e6:	83 f8 1c             	cmp    eax,0x1c
c000d9e9:	0f 85 ee fe ff ff    	jne    c000d8dd <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d9ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d9f2:	eb 03                	jmp    c000d9f7 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d9f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d9f7:	c9                   	leave  
c000d9f8:	c3                   	ret    
c000d9f9:	90                   	nop

c000d9fa <Keyboard::Keyboard(char const*)>:
c000d9fa:	83 ec 0c             	sub    esp,0xc
c000d9fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da01:	83 ec 08             	sub    esp,0x8
c000da04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da08:	50                   	push   eax
c000da09:	e8 4c f1 ff ff       	call   c000cb5a <Device::Device(char const*)>
c000da0e:	83 c4 10             	add    esp,0x10
c000da11:	ba 9c 1c 02 c0       	mov    edx,0xc0021c9c
c000da16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da1a:	89 10                	mov    DWORD PTR [eax],edx
c000da1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da20:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000da2a:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000da31:	90                   	nop
c000da32:	83 c4 0c             	add    esp,0xc
c000da35:	c3                   	ret    

c000da36 <Keyboard::~Keyboard()>:
c000da36:	83 ec 0c             	sub    esp,0xc
c000da39:	ba 9c 1c 02 c0       	mov    edx,0xc0021c9c
c000da3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da42:	89 10                	mov    DWORD PTR [eax],edx
c000da44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da48:	83 ec 0c             	sub    esp,0xc
c000da4b:	50                   	push   eax
c000da4c:	e8 73 ee ff ff       	call   c000c8c4 <Device::~Device()>
c000da51:	83 c4 10             	add    esp,0x10
c000da54:	90                   	nop
c000da55:	83 c4 0c             	add    esp,0xc
c000da58:	c3                   	ret    
c000da59:	90                   	nop

c000da5a <Keyboard::~Keyboard()>:
c000da5a:	83 ec 0c             	sub    esp,0xc
c000da5d:	83 ec 0c             	sub    esp,0xc
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	e8 cd ff ff ff       	call   c000da36 <Keyboard::~Keyboard()>
c000da69:	83 c4 10             	add    esp,0x10
c000da6c:	83 ec 08             	sub    esp,0x8
c000da6f:	68 5c 01 00 00       	push   0x15c
c000da74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da78:	e8 9b cd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000da7d:	83 c4 10             	add    esp,0x10
c000da80:	83 c4 0c             	add    esp,0xc
c000da83:	c3                   	ret    

c000da84 <LogicalDisk::close(int, int, void*)>:
c000da84:	83 c8 ff             	or     eax,0xffffffff
c000da87:	c3                   	ret    

c000da88 <LogicalDisk::~LogicalDisk()>:
c000da88:	83 ec 0c             	sub    esp,0xc
c000da8b:	ba 14 1d 02 c0       	mov    edx,0xc0021d14
c000da90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da94:	89 10                	mov    DWORD PTR [eax],edx
c000da96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da9a:	83 ec 0c             	sub    esp,0xc
c000da9d:	50                   	push   eax
c000da9e:	e8 21 ee ff ff       	call   c000c8c4 <Device::~Device()>
c000daa3:	83 c4 10             	add    esp,0x10
c000daa6:	90                   	nop
c000daa7:	83 c4 0c             	add    esp,0xc
c000daaa:	c3                   	ret    
c000daab:	90                   	nop

c000daac <LogicalDisk::~LogicalDisk()>:
c000daac:	83 ec 0c             	sub    esp,0xc
c000daaf:	83 ec 0c             	sub    esp,0xc
c000dab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dab6:	e8 cd ff ff ff       	call   c000da88 <LogicalDisk::~LogicalDisk()>
c000dabb:	83 c4 10             	add    esp,0x10
c000dabe:	83 ec 08             	sub    esp,0x8
c000dac1:	68 78 01 00 00       	push   0x178
c000dac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daca:	e8 49 cd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dacf:	83 c4 10             	add    esp,0x10
c000dad2:	83 c4 0c             	add    esp,0xc
c000dad5:	c3                   	ret    

c000dad6 <LogicalDisk::open(int, int, void*)>:
c000dad6:	83 ec 18             	sub    esp,0x18
c000dad9:	68 c8 1c 02 c0       	push   0xc0021cc8
c000dade:	e8 38 3b 00 00       	call   c001161b <KePanic(char const*)>
c000dae3:	83 c8 ff             	or     eax,0xffffffff
c000dae6:	83 c4 1c             	add    esp,0x1c
c000dae9:	c3                   	ret    

c000daea <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000daea:	53                   	push   ebx
c000daeb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000daef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000daf3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000daf7:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000dafd:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000db03:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000db09:	77 10                	ja     c000db1b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000db0b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000db11:	89 d3                	mov    ebx,edx
c000db13:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000db19:	72 05                	jb     c000db20 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000db1b:	83 c8 ff             	or     eax,0xffffffff
c000db1e:	89 c2                	mov    edx,eax
c000db20:	5b                   	pop    ebx
c000db21:	c3                   	ret    

c000db22 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000db22:	56                   	push   esi
c000db23:	83 c8 ff             	or     eax,0xffffffff
c000db26:	53                   	push   ebx
c000db27:	89 c2                	mov    edx,eax
c000db29:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db2d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000db31:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000db35:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db3b:	77 27                	ja     c000db64 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db3d:	89 d8                	mov    eax,ebx
c000db3f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000db45:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000db4b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000db50:	89 c2                	mov    edx,eax
c000db52:	73 10                	jae    c000db64 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db54:	89 c8                	mov    eax,ecx
c000db56:	89 da                	mov    edx,ebx
c000db58:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000db5e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000db64:	5b                   	pop    ebx
c000db65:	5e                   	pop    esi
c000db66:	c3                   	ret    
c000db67:	90                   	nop

c000db68 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000db68:	83 ec 1c             	sub    esp,0x1c
c000db6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000db6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db7b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db7f:	89 04 24             	mov    DWORD PTR [esp],eax
c000db82:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000db8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db8e:	83 ec 08             	sub    esp,0x8
c000db91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db95:	50                   	push   eax
c000db96:	e8 bf ef ff ff       	call   c000cb5a <Device::Device(char const*)>
c000db9b:	83 c4 10             	add    esp,0x10
c000db9e:	ba 14 1d 02 c0       	mov    edx,0xc0021d14
c000dba3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dba7:	89 10                	mov    DWORD PTR [eax],edx
c000dba9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbad:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dbb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbb8:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000dbbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbc3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dbca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbce:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000dbd8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dbdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dbe0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dbe4:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dbea:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dbf0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dbf4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dbf7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dbfb:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dc01:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dc07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc0b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dc0f:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dc15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc19:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dc23:	90                   	nop
c000dc24:	83 c4 1c             	add    esp,0x1c
c000dc27:	c3                   	ret    

c000dc28 <LogicalDisk::assignDriveLetter()>:
c000dc28:	55                   	push   ebp
c000dc29:	57                   	push   edi
c000dc2a:	56                   	push   esi
c000dc2b:	53                   	push   ebx
c000dc2c:	83 ec 14             	sub    esp,0x14
c000dc2f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dc33:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dc39:	b0 41                	mov    al,0x41
c000dc3b:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dc41:	84 d2                	test   dl,dl
c000dc43:	75 02                	jne    c000dc47 <LogicalDisk::assignDriveLetter()+0x1f>
c000dc45:	b0 43                	mov    al,0x43
c000dc47:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dc4d:	0f b6 ca             	movzx  ecx,dl
c000dc50:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dc54:	0f be e8             	movsx  ebp,al
c000dc57:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dc5d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc61:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dc65:	3c 43                	cmp    al,0x43
c000dc67:	75 10                	jne    c000dc79 <LogicalDisk::assignDriveLetter()+0x51>
c000dc69:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dc70:	75 5a                	jne    c000dccc <LogicalDisk::assignDriveLetter()+0xa4>
c000dc72:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dc77:	75 53                	jne    c000dccc <LogicalDisk::assignDriveLetter()+0xa4>
c000dc79:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dc7c:	ba 01 00 00 00       	mov    edx,0x1
c000dc81:	89 34 24             	mov    DWORD PTR [esp],esi
c000dc84:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dc87:	d3 e2                	shl    edx,cl
c000dc89:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc8d:	89 d7                	mov    edi,edx
c000dc8f:	89 d6                	mov    esi,edx
c000dc91:	c1 ff 1f             	sar    edi,0x1f
c000dc94:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dc98:	21 f9                	and    ecx,edi
c000dc9a:	09 d1                	or     ecx,edx
c000dc9c:	75 2e                	jne    c000dccc <LogicalDisk::assignDriveLetter()+0xa4>
c000dc9e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dca2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dca6:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dcac:	09 f2                	or     edx,esi
c000dcae:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dcb1:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dcb7:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dcbe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dcc2:	09 fa                	or     edx,edi
c000dcc4:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dcca:	eb 0d                	jmp    c000dcd9 <LogicalDisk::assignDriveLetter()+0xb1>
c000dccc:	8d 50 01             	lea    edx,[eax+0x1]
c000dccf:	45                   	inc    ebp
c000dcd0:	88 d0                	mov    al,dl
c000dcd2:	80 fa 5b             	cmp    dl,0x5b
c000dcd5:	75 8e                	jne    c000dc65 <LogicalDisk::assignDriveLetter()+0x3d>
c000dcd7:	31 c0                	xor    eax,eax
c000dcd9:	83 c4 14             	add    esp,0x14
c000dcdc:	5b                   	pop    ebx
c000dcdd:	5e                   	pop    esi
c000dcde:	5f                   	pop    edi
c000dcdf:	5d                   	pop    ebp
c000dce0:	c3                   	ret    
c000dce1:	90                   	nop

c000dce2 <LogicalDisk::mount()>:
c000dce2:	56                   	push   esi
c000dce3:	53                   	push   ebx
c000dce4:	53                   	push   ebx
c000dce5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dce9:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dcef:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dcf9:	85 db                	test   ebx,ebx
c000dcfb:	74 27                	je     c000dd24 <LogicalDisk::mount()+0x42>
c000dcfd:	51                   	push   ecx
c000dcfe:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dd05:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dd07:	83 e8 41             	sub    eax,0x41
c000dd0a:	50                   	push   eax
c000dd0b:	56                   	push   esi
c000dd0c:	53                   	push   ebx
c000dd0d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dd10:	83 c4 10             	add    esp,0x10
c000dd13:	84 c0                	test   al,al
c000dd15:	74 08                	je     c000dd1f <LogicalDisk::mount()+0x3d>
c000dd17:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dd1d:	eb 07                	jmp    c000dd26 <LogicalDisk::mount()+0x44>
c000dd1f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dd22:	eb d5                	jmp    c000dcf9 <LogicalDisk::mount()+0x17>
c000dd24:	31 c0                	xor    eax,eax
c000dd26:	5a                   	pop    edx
c000dd27:	5b                   	pop    ebx
c000dd28:	5e                   	pop    esi
c000dd29:	c3                   	ret    

c000dd2a <LogicalDisk::unmount()>:
c000dd2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd2e:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dd38:	c3                   	ret    
c000dd39:	90                   	nop

c000dd3a <LogicalDisk::eject()>:
c000dd3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd3e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dd44:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd4a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dd4d:	90                   	nop

c000dd4e <LogicalDisk::unassignDriveLetter()>:
c000dd4e:	57                   	push   edi
c000dd4f:	56                   	push   esi
c000dd50:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dd54:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dd5b:	85 c9                	test   ecx,ecx
c000dd5d:	75 0f                	jne    c000dd6e <LogicalDisk::unassignDriveLetter()+0x20>
c000dd5f:	c7 44 24 0c ec 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021cec
c000dd67:	5e                   	pop    esi
c000dd68:	5f                   	pop    edi
c000dd69:	e9 ad 38 00 00       	jmp    c001161b <KePanic(char const*)>
c000dd6e:	83 e9 41             	sub    ecx,0x41
c000dd71:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dd78:	b8 01 00 00 00       	mov    eax,0x1
c000dd7d:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000dd88:	d3 e0                	shl    eax,cl
c000dd8a:	89 c7                	mov    edi,eax
c000dd8c:	f7 d0                	not    eax
c000dd8e:	c1 ff 1f             	sar    edi,0x1f
c000dd91:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000dd97:	89 fe                	mov    esi,edi
c000dd99:	f7 d6                	not    esi
c000dd9b:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000dda1:	5e                   	pop    esi
c000dda2:	5f                   	pop    edi
c000dda3:	c3                   	ret    

c000dda4 <LogicalDisk::read(unsigned long long, int, void*)>:
c000dda4:	57                   	push   edi
c000dda5:	56                   	push   esi
c000dda6:	53                   	push   ebx
c000dda7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ddab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ddaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ddb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ddb7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ddbd:	77 41                	ja     c000de00 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000ddbf:	99                   	cdq    
c000ddc0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ddc6:	01 c8                	add    eax,ecx
c000ddc8:	11 da                	adc    edx,ebx
c000ddca:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ddd0:	19 d7                	sbb    edi,edx
c000ddd2:	72 33                	jb     c000de07 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000ddd4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ddda:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dde0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dde4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dde8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ddee:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ddf4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddf8:	5b                   	pop    ebx
c000ddf9:	5e                   	pop    esi
c000ddfa:	5f                   	pop    edi
c000ddfb:	e9 c6 0a 00 00       	jmp    c000e8c6 <VCache::read(unsigned long long, int, void*)>
c000de00:	b8 05 00 00 00       	mov    eax,0x5
c000de05:	eb 05                	jmp    c000de0c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000de07:	b8 07 00 00 00       	mov    eax,0x7
c000de0c:	5b                   	pop    ebx
c000de0d:	5e                   	pop    esi
c000de0e:	5f                   	pop    edi
c000de0f:	c3                   	ret    

c000de10 <LogicalDisk::write(unsigned long long, int, void*)>:
c000de10:	57                   	push   edi
c000de11:	56                   	push   esi
c000de12:	53                   	push   ebx
c000de13:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de1b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de23:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de29:	77 41                	ja     c000de6c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000de2b:	99                   	cdq    
c000de2c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de32:	01 c8                	add    eax,ecx
c000de34:	11 da                	adc    edx,ebx
c000de36:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de3c:	19 d7                	sbb    edi,edx
c000de3e:	72 33                	jb     c000de73 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000de40:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de46:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de4c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de50:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de54:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de5a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de64:	5b                   	pop    ebx
c000de65:	5e                   	pop    esi
c000de66:	5f                   	pop    edi
c000de67:	e9 6c 09 00 00       	jmp    c000e7d8 <VCache::write(unsigned long long, int, void*)>
c000de6c:	b8 05 00 00 00       	mov    eax,0x5
c000de71:	eb 05                	jmp    c000de78 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000de73:	b8 07 00 00 00       	mov    eax,0x7
c000de78:	5b                   	pop    ebx
c000de79:	5e                   	pop    esi
c000de7a:	5f                   	pop    edi
c000de7b:	c3                   	ret    

c000de7c <Mouse::Mouse(char const*)>:
c000de7c:	83 ec 0c             	sub    esp,0xc
c000de7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de83:	83 ec 08             	sub    esp,0x8
c000de86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de8a:	50                   	push   eax
c000de8b:	e8 ca ec ff ff       	call   c000cb5a <Device::Device(char const*)>
c000de90:	83 c4 10             	add    esp,0x10
c000de93:	ba 40 1d 02 c0       	mov    edx,0xc0021d40
c000de98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de9c:	89 10                	mov    DWORD PTR [eax],edx
c000de9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dea2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000deac:	90                   	nop
c000dead:	83 c4 0c             	add    esp,0xc
c000deb0:	c3                   	ret    
c000deb1:	90                   	nop
c000deb2:	66 90                	xchg   ax,ax

c000deb4 <Mouse::~Mouse()>:
c000deb4:	83 ec 0c             	sub    esp,0xc
c000deb7:	ba 40 1d 02 c0       	mov    edx,0xc0021d40
c000debc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec0:	89 10                	mov    DWORD PTR [eax],edx
c000dec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec6:	83 ec 0c             	sub    esp,0xc
c000dec9:	50                   	push   eax
c000deca:	e8 f5 e9 ff ff       	call   c000c8c4 <Device::~Device()>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	90                   	nop
c000ded3:	83 c4 0c             	add    esp,0xc
c000ded6:	c3                   	ret    
c000ded7:	90                   	nop

c000ded8 <Mouse::~Mouse()>:
c000ded8:	83 ec 0c             	sub    esp,0xc
c000dedb:	83 ec 0c             	sub    esp,0xc
c000dede:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dee2:	e8 cd ff ff ff       	call   c000deb4 <Mouse::~Mouse()>
c000dee7:	83 c4 10             	add    esp,0x10
c000deea:	83 ec 08             	sub    esp,0x8
c000deed:	68 58 01 00 00       	push   0x158
c000def2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000def6:	e8 1d c9 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000defb:	83 c4 10             	add    esp,0x10
c000defe:	83 c4 0c             	add    esp,0xc
c000df01:	c3                   	ret    

c000df02 <NIC::getMAC()>:
c000df02:	31 c0                	xor    eax,eax
c000df04:	31 d2                	xor    edx,edx
c000df06:	c3                   	ret    
c000df07:	90                   	nop

c000df08 <NIC::write(int, unsigned char*, int*)>:
c000df08:	b8 01 00 00 00       	mov    eax,0x1
c000df0d:	c3                   	ret    

c000df0e <NIC::NIC(char const*)>:
c000df0e:	83 ec 0c             	sub    esp,0xc
c000df11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df15:	83 ec 08             	sub    esp,0x8
c000df18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df1c:	50                   	push   eax
c000df1d:	e8 38 ec ff ff       	call   c000cb5a <Device::Device(char const*)>
c000df22:	83 c4 10             	add    esp,0x10
c000df25:	ba 6c 1d 02 c0       	mov    edx,0xc0021d6c
c000df2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df2e:	89 10                	mov    DWORD PTR [eax],edx
c000df30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df34:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000df3e:	90                   	nop
c000df3f:	83 c4 0c             	add    esp,0xc
c000df42:	c3                   	ret    
c000df43:	90                   	nop

c000df44 <NIC::~NIC()>:
c000df44:	83 ec 0c             	sub    esp,0xc
c000df47:	ba 6c 1d 02 c0       	mov    edx,0xc0021d6c
c000df4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df50:	89 10                	mov    DWORD PTR [eax],edx
c000df52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df56:	83 ec 0c             	sub    esp,0xc
c000df59:	50                   	push   eax
c000df5a:	e8 65 e9 ff ff       	call   c000c8c4 <Device::~Device()>
c000df5f:	83 c4 10             	add    esp,0x10
c000df62:	90                   	nop
c000df63:	83 c4 0c             	add    esp,0xc
c000df66:	c3                   	ret    
c000df67:	90                   	nop

c000df68 <NIC::~NIC()>:
c000df68:	83 ec 0c             	sub    esp,0xc
c000df6b:	83 ec 0c             	sub    esp,0xc
c000df6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df72:	e8 cd ff ff ff       	call   c000df44 <NIC::~NIC()>
c000df77:	83 c4 10             	add    esp,0x10
c000df7a:	83 ec 08             	sub    esp,0x8
c000df7d:	68 58 01 00 00       	push   0x158
c000df82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df86:	e8 8d c8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000df8b:	83 c4 10             	add    esp,0x10
c000df8e:	83 c4 0c             	add    esp,0xc
c000df91:	c3                   	ret    

c000df92 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000df92:	55                   	push   ebp
c000df93:	57                   	push   edi
c000df94:	56                   	push   esi
c000df95:	53                   	push   ebx
c000df96:	81 ec 28 01 00 00    	sub    esp,0x128
c000df9c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000dfa3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000dfaa:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000dfb1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000dfb8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dfbc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dfc0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dfc7:	e8 8a ec ff ff       	call   c000cc56 <Device::getName()>
c000dfcc:	5a                   	pop    edx
c000dfcd:	59                   	pop    ecx
c000dfce:	50                   	push   eax
c000dfcf:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dfd3:	55                   	push   ebp
c000dfd4:	e8 67 26 ff ff       	call   c0000640 <strcpy>
c000dfd9:	5b                   	pop    ebx
c000dfda:	58                   	pop    eax
c000dfdb:	68 98 1d 02 c0       	push   0xc0021d98
c000dfe0:	55                   	push   ebp
c000dfe1:	e8 5a 28 ff ff       	call   c0000840 <strcat>
c000dfe6:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dfed:	e8 c4 9a ff ff       	call   c0007ab6 <malloc>
c000dff2:	83 c4 0c             	add    esp,0xc
c000dff5:	89 c3                	mov    ebx,eax
c000dff7:	57                   	push   edi
c000dff8:	56                   	push   esi
c000dff9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dffd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e001:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000e008:	55                   	push   ebp
c000e009:	50                   	push   eax
c000e00a:	e8 59 fb ff ff       	call   c000db68 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000e00f:	83 c4 14             	add    esp,0x14
c000e012:	53                   	push   ebx
c000e013:	e8 10 fc ff ff       	call   c000dc28 <LogicalDisk::assignDriveLetter()>
c000e018:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e01b:	e8 c2 fc ff ff       	call   c000dce2 <LogicalDisk::mount()>
c000e020:	58                   	pop    eax
c000e021:	5a                   	pop    edx
c000e022:	53                   	push   ebx
c000e023:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e02a:	e8 93 e9 ff ff       	call   c000c9c2 <Device::addChild(Device*)>
c000e02f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e035:	5b                   	pop    ebx
c000e036:	5e                   	pop    esi
c000e037:	5f                   	pop    edi
c000e038:	5d                   	pop    ebp
c000e039:	c3                   	ret    

c000e03a <createPartitionsForDisk(PhysicalDisk*)>:
c000e03a:	55                   	push   ebp
c000e03b:	57                   	push   edi
c000e03c:	56                   	push   esi
c000e03d:	53                   	push   ebx
c000e03e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e044:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e04b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e051:	3d 00 02 00 00       	cmp    eax,0x200
c000e056:	74 27                	je     c000e07f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e058:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e05e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e064:	83 ec 10             	sub    esp,0x10
c000e067:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e06b:	99                   	cdq    
c000e06c:	c1 e6 0a             	shl    esi,0xa
c000e06f:	52                   	push   edx
c000e070:	89 fd                	mov    ebp,edi
c000e072:	50                   	push   eax
c000e073:	55                   	push   ebp
c000e074:	56                   	push   esi
c000e075:	e8 b6 16 01 00       	call   c001f730 <__udivdi3>
c000e07a:	e9 b9 00 00 00       	jmp    c000e138 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e07f:	83 ec 0c             	sub    esp,0xc
c000e082:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e084:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e088:	56                   	push   esi
c000e089:	6a 01                	push   0x1
c000e08b:	6a 00                	push   0x0
c000e08d:	6a 00                	push   0x0
c000e08f:	53                   	push   ebx
c000e090:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e093:	83 c4 20             	add    esp,0x20
c000e096:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e09e:	75 0a                	jne    c000e0aa <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e0a0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e0a8:	74 2c                	je     c000e0d6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e0aa:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e0b0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e0b6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e0bc:	83 ec 10             	sub    esp,0x10
c000e0bf:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e0c3:	89 f7                	mov    edi,esi
c000e0c5:	c1 e0 0a             	shl    eax,0xa
c000e0c8:	c1 ff 1f             	sar    edi,0x1f
c000e0cb:	57                   	push   edi
c000e0cc:	56                   	push   esi
c000e0cd:	52                   	push   edx
c000e0ce:	50                   	push   eax
c000e0cf:	e8 5c 16 01 00       	call   c001f730 <__udivdi3>
c000e0d4:	eb 62                	jmp    c000e138 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e0d6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e0dd:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e0e4:	89 cf                	mov    edi,ecx
c000e0e6:	83 e2 7f             	and    edx,0x7f
c000e0e9:	83 e7 7f             	and    edi,0x7f
c000e0ec:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e0f3:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e0f6:	83 e0 7f             	and    eax,0x7f
c000e0f9:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e0fc:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e103:	83 e0 7f             	and    eax,0x7f
c000e106:	01 d0                	add    eax,edx
c000e108:	89 c5                	mov    ebp,eax
c000e10a:	84 c0                	test   al,al
c000e10c:	74 41                	je     c000e14f <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e10e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e114:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e11a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e120:	83 ec 10             	sub    esp,0x10
c000e123:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e127:	89 f7                	mov    edi,esi
c000e129:	c1 e0 0a             	shl    eax,0xa
c000e12c:	c1 ff 1f             	sar    edi,0x1f
c000e12f:	57                   	push   edi
c000e130:	56                   	push   esi
c000e131:	52                   	push   edx
c000e132:	50                   	push   eax
c000e133:	e8 f8 15 01 00       	call   c001f730 <__udivdi3>
c000e138:	83 c4 14             	add    esp,0x14
c000e13b:	52                   	push   edx
c000e13c:	50                   	push   eax
c000e13d:	6a 00                	push   0x0
c000e13f:	6a 00                	push   0x0
c000e141:	53                   	push   ebx
c000e142:	e8 4b fe ff ff       	call   c000df92 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e147:	83 c4 20             	add    esp,0x20
c000e14a:	e9 73 01 00 00       	jmp    c000e2c2 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e14f:	89 f0                	mov    eax,esi
c000e151:	31 c9                	xor    ecx,ecx
c000e153:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e15a:	75 02                	jne    c000e15e <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e15c:	89 cd                	mov    ebp,ecx
c000e15e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e165:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000e16c:	c1 e2 08             	shl    edx,0x8
c000e16f:	c1 e6 10             	shl    esi,0x10
c000e172:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e17a:	09 f2                	or     edx,esi
c000e17c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e184:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000e18b:	83 c0 10             	add    eax,0x10
c000e18e:	09 f2                	or     edx,esi
c000e190:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e197:	c1 e6 18             	shl    esi,0x18
c000e19a:	09 f2                	or     edx,esi
c000e19c:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e1a3:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e1a7:	c1 e6 10             	shl    esi,0x10
c000e1aa:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e1b1:	c1 e2 08             	shl    edx,0x8
c000e1b4:	09 f2                	or     edx,esi
c000e1b6:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e1bd:	09 f2                	or     edx,esi
c000e1bf:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e1c6:	c1 e6 18             	shl    esi,0x18
c000e1c9:	09 f2                	or     edx,esi
c000e1cb:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e1cf:	41                   	inc    ecx
c000e1d0:	83 f9 04             	cmp    ecx,0x4
c000e1d3:	0f 85 7a ff ff ff    	jne    c000e153 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e1d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1dd:	83 f0 01             	xor    eax,0x1
c000e1e0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e1e4:	75 4f                	jne    c000e235 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e1e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e1ea:	83 f0 01             	xor    eax,0x1
c000e1ed:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e1f1:	75 42                	jne    c000e235 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e1f3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e1fb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e203:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e209:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e20f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e215:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e219:	89 f7                	mov    edi,esi
c000e21b:	c1 e0 0a             	shl    eax,0xa
c000e21e:	c1 ff 1f             	sar    edi,0x1f
c000e221:	57                   	push   edi
c000e222:	56                   	push   esi
c000e223:	52                   	push   edx
c000e224:	50                   	push   eax
c000e225:	e8 06 15 01 00       	call   c001f730 <__udivdi3>
c000e22a:	83 c4 10             	add    esp,0x10
c000e22d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e231:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e235:	89 e8                	mov    eax,ebp
c000e237:	0f b6 e8             	movzx  ebp,al
c000e23a:	85 ed                	test   ebp,ebp
c000e23c:	74 50                	je     c000e28e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e23e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e242:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e246:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e24a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e24e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e252:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e256:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e25a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e25e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e262:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e266:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e26a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e26e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e272:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e276:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e27a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e27e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e282:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e286:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e28a:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e28e:	31 ed                	xor    ebp,ebp
c000e290:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e294:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e298:	89 f8                	mov    eax,edi
c000e29a:	09 f0                	or     eax,esi
c000e29c:	74 1e                	je     c000e2bc <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e29e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e2a2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e2a6:	89 d1                	mov    ecx,edx
c000e2a8:	09 c1                	or     ecx,eax
c000e2aa:	74 10                	je     c000e2bc <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2ac:	83 ec 0c             	sub    esp,0xc
c000e2af:	57                   	push   edi
c000e2b0:	56                   	push   esi
c000e2b1:	52                   	push   edx
c000e2b2:	50                   	push   eax
c000e2b3:	53                   	push   ebx
c000e2b4:	e8 d9 fc ff ff       	call   c000df92 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e2b9:	83 c4 20             	add    esp,0x20
c000e2bc:	45                   	inc    ebp
c000e2bd:	83 fd 04             	cmp    ebp,0x4
c000e2c0:	75 ce                	jne    c000e290 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e2c2:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e2c8:	5b                   	pop    ebx
c000e2c9:	5e                   	pop    esi
c000e2ca:	5f                   	pop    edi
c000e2cb:	5d                   	pop    ebp
c000e2cc:	c3                   	ret    
c000e2cd:	66 90                	xchg   ax,ax
c000e2cf:	90                   	nop

c000e2d0 <Serial::Serial(char const*)>:
c000e2d0:	83 ec 0c             	sub    esp,0xc
c000e2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2d7:	83 ec 08             	sub    esp,0x8
c000e2da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2de:	50                   	push   eax
c000e2df:	e8 76 e8 ff ff       	call   c000cb5a <Device::Device(char const*)>
c000e2e4:	83 c4 10             	add    esp,0x10
c000e2e7:	ba ac 1d 02 c0       	mov    edx,0xc0021dac
c000e2ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f0:	89 10                	mov    DWORD PTR [eax],edx
c000e2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e300:	90                   	nop
c000e301:	83 c4 0c             	add    esp,0xc
c000e304:	c3                   	ret    
c000e305:	90                   	nop
c000e306:	66 90                	xchg   ax,ax

c000e308 <Serial::~Serial()>:
c000e308:	83 ec 0c             	sub    esp,0xc
c000e30b:	ba ac 1d 02 c0       	mov    edx,0xc0021dac
c000e310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e314:	89 10                	mov    DWORD PTR [eax],edx
c000e316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31a:	83 ec 0c             	sub    esp,0xc
c000e31d:	50                   	push   eax
c000e31e:	e8 a1 e5 ff ff       	call   c000c8c4 <Device::~Device()>
c000e323:	83 c4 10             	add    esp,0x10
c000e326:	90                   	nop
c000e327:	83 c4 0c             	add    esp,0xc
c000e32a:	c3                   	ret    
c000e32b:	90                   	nop

c000e32c <Serial::~Serial()>:
c000e32c:	83 ec 0c             	sub    esp,0xc
c000e32f:	83 ec 0c             	sub    esp,0xc
c000e332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e336:	e8 cd ff ff ff       	call   c000e308 <Serial::~Serial()>
c000e33b:	83 c4 10             	add    esp,0x10
c000e33e:	83 ec 08             	sub    esp,0x8
c000e341:	68 58 01 00 00       	push   0x158
c000e346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e34a:	e8 c9 c4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e34f:	83 c4 10             	add    esp,0x10
c000e352:	83 c4 0c             	add    esp,0xc
c000e355:	c3                   	ret    
c000e356:	66 90                	xchg   ax,ax

c000e358 <Timer::Timer(char const*)>:
c000e358:	83 ec 0c             	sub    esp,0xc
c000e35b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e35f:	83 ec 08             	sub    esp,0x8
c000e362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e366:	50                   	push   eax
c000e367:	e8 ee e7 ff ff       	call   c000cb5a <Device::Device(char const*)>
c000e36c:	83 c4 10             	add    esp,0x10
c000e36f:	ba f0 1d 02 c0       	mov    edx,0xc0021df0
c000e374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e378:	89 10                	mov    DWORD PTR [eax],edx
c000e37a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e37e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e388:	90                   	nop
c000e389:	83 c4 0c             	add    esp,0xc
c000e38c:	c3                   	ret    
c000e38d:	90                   	nop
c000e38e:	66 90                	xchg   ax,ax

c000e390 <Timer::~Timer()>:
c000e390:	83 ec 0c             	sub    esp,0xc
c000e393:	ba f0 1d 02 c0       	mov    edx,0xc0021df0
c000e398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e39c:	89 10                	mov    DWORD PTR [eax],edx
c000e39e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a2:	83 ec 0c             	sub    esp,0xc
c000e3a5:	50                   	push   eax
c000e3a6:	e8 19 e5 ff ff       	call   c000c8c4 <Device::~Device()>
c000e3ab:	83 c4 10             	add    esp,0x10
c000e3ae:	90                   	nop
c000e3af:	83 c4 0c             	add    esp,0xc
c000e3b2:	c3                   	ret    
c000e3b3:	90                   	nop

c000e3b4 <Timer::~Timer()>:
c000e3b4:	83 ec 0c             	sub    esp,0xc
c000e3b7:	83 ec 0c             	sub    esp,0xc
c000e3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3be:	e8 cd ff ff ff       	call   c000e390 <Timer::~Timer()>
c000e3c3:	83 c4 10             	add    esp,0x10
c000e3c6:	83 ec 08             	sub    esp,0x8
c000e3c9:	68 5c 01 00 00       	push   0x15c
c000e3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3d2:	e8 41 c4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e3d7:	83 c4 10             	add    esp,0x10
c000e3da:	83 c4 0c             	add    esp,0xc
c000e3dd:	c3                   	ret    

c000e3de <Timer::read()>:
c000e3de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3e2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e3e8:	c3                   	ret    

c000e3e9 <setupTimer(int)>:
c000e3e9:	53                   	push   ebx
c000e3ea:	83 ec 14             	sub    esp,0x14
c000e3ed:	68 5c 01 00 00       	push   0x15c
c000e3f2:	e8 bf 96 ff ff       	call   c0007ab6 <malloc>
c000e3f7:	89 04 24             	mov    DWORD PTR [esp],eax
c000e3fa:	89 c3                	mov    ebx,eax
c000e3fc:	e8 97 0b 01 00       	call   c001ef98 <PIT::PIT()>
c000e401:	58                   	pop    eax
c000e402:	5a                   	pop    edx
c000e403:	53                   	push   ebx
c000e404:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e40a:	e8 b3 e5 ff ff       	call   c000c9c2 <Device::addChild(Device*)>
c000e40f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e411:	6a 00                	push   0x0
c000e413:	6a 00                	push   0x0
c000e415:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e419:	53                   	push   ebx
c000e41a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e41d:	89 d8                	mov    eax,ebx
c000e41f:	83 c4 28             	add    esp,0x28
c000e422:	5b                   	pop    ebx
c000e423:	c3                   	ret    

c000e424 <timerHandler(unsigned int)>:
c000e424:	56                   	push   esi
c000e425:	53                   	push   ebx
c000e426:	51                   	push   ecx
c000e427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e42b:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e431:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e438:	0f 84 4a 01 00 00    	je     c000e588 <timerHandler(unsigned int)+0x164>
c000e43e:	fa                   	cli    
c000e43f:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e445:	83 ec 0c             	sub    esp,0xc
c000e448:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e44e:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e453:	e8 a8 18 01 00       	call   c001fd00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e458:	83 c4 10             	add    esp,0x10
c000e45b:	84 c0                	test   al,al
c000e45d:	0f 85 a1 00 00 00    	jne    c000e504 <timerHandler(unsigned int)+0xe0>
c000e463:	83 ec 0c             	sub    esp,0xc
c000e466:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e46b:	e8 ac 18 01 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e470:	83 c4 10             	add    esp,0x10
c000e473:	89 c6                	mov    esi,eax
c000e475:	8d 76 00             	lea    esi,[esi+0x0]
c000e478:	83 ec 0c             	sub    esp,0xc
c000e47b:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e480:	e8 97 18 01 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e485:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e48c:	89 c3                	mov    ebx,eax
c000e48e:	e8 91 18 01 00       	call   c001fd24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e493:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e496:	83 c4 10             	add    esp,0x10
c000e499:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e49f:	77 23                	ja     c000e4c4 <timerHandler(unsigned int)+0xa0>
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	53                   	push   ebx
c000e4a5:	e8 2a 81 00 00       	call   c00165d4 <unblockTask(ThreadControlBlock*)>
c000e4aa:	83 c4 10             	add    esp,0x10
c000e4ad:	39 de                	cmp    esi,ebx
c000e4af:	75 27                	jne    c000e4d8 <timerHandler(unsigned int)+0xb4>
c000e4b1:	83 ec 0c             	sub    esp,0xc
c000e4b4:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4b9:	e8 5e 18 01 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4be:	89 c6                	mov    esi,eax
c000e4c0:	eb 12                	jmp    c000e4d4 <timerHandler(unsigned int)+0xb0>
c000e4c2:	66 90                	xchg   ax,ax
c000e4c4:	52                   	push   edx
c000e4c5:	52                   	push   edx
c000e4c6:	53                   	push   ebx
c000e4c7:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4cc:	e8 0f 19 01 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e4d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e4d4:	83 c4 10             	add    esp,0x10
c000e4d7:	90                   	nop
c000e4d8:	83 ec 0c             	sub    esp,0xc
c000e4db:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4e0:	e8 1b 18 01 00       	call   c001fd00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e4e5:	83 c4 10             	add    esp,0x10
c000e4e8:	84 c0                	test   al,al
c000e4ea:	75 18                	jne    c000e504 <timerHandler(unsigned int)+0xe0>
c000e4ec:	83 ec 0c             	sub    esp,0xc
c000e4ef:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4f4:	e8 23 18 01 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4f9:	83 c4 10             	add    esp,0x10
c000e4fc:	39 f0                	cmp    eax,esi
c000e4fe:	0f 85 74 ff ff ff    	jne    c000e478 <timerHandler(unsigned int)+0x54>
c000e504:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e509:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e50d:	74 41                	je     c000e550 <timerHandler(unsigned int)+0x12c>
c000e50f:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e516:	74 38                	je     c000e550 <timerHandler(unsigned int)+0x12c>
c000e518:	fa                   	cli    
c000e519:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e51f:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e524:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e52a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e52d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e533:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e536:	72 08                	jb     c000e540 <timerHandler(unsigned int)+0x11c>
c000e538:	e8 7f 7b 00 00       	call   c00160bc <schedule()>
c000e53d:	8d 76 00             	lea    esi,[esi+0x0]
c000e540:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e545:	48                   	dec    eax
c000e546:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e54b:	75 03                	jne    c000e550 <timerHandler(unsigned int)+0x12c>
c000e54d:	fb                   	sti    
c000e54e:	66 90                	xchg   ax,ax
c000e550:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e555:	48                   	dec    eax
c000e556:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e55b:	75 1b                	jne    c000e578 <timerHandler(unsigned int)+0x154>
c000e55d:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e564:	74 12                	je     c000e578 <timerHandler(unsigned int)+0x154>
c000e566:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e570:	e8 47 7b 00 00       	call   c00160bc <schedule()>
c000e575:	8d 76 00             	lea    esi,[esi+0x0]
c000e578:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e57d:	48                   	dec    eax
c000e57e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e583:	75 03                	jne    c000e588 <timerHandler(unsigned int)+0x164>
c000e585:	fb                   	sti    
c000e586:	66 90                	xchg   ax,ax
c000e588:	58                   	pop    eax
c000e589:	5b                   	pop    ebx
c000e58a:	5e                   	pop    esi
c000e58b:	c3                   	ret    

c000e58c <VCache::VCache(PhysicalDisk*)>:
c000e58c:	53                   	push   ebx
c000e58d:	83 ec 18             	sub    esp,0x18
c000e590:	ba 20 1e 02 c0       	mov    edx,0xc0021e20
c000e595:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e599:	89 10                	mov    DWORD PTR [eax],edx
c000e59b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e59f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e5a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5aa:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e5b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5b5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e5bc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e5c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5c7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e5ce:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e5d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5d9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e5e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5e4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e5e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5ec:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e5f3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e5fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5fe:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e602:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e606:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e60a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e60e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e612:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e616:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e61d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e625:	83 ec 0c             	sub    esp,0xc
c000e628:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e62c:	e8 85 94 ff ff       	call   c0007ab6 <malloc>
c000e631:	83 c4 10             	add    esp,0x10
c000e634:	89 c3                	mov    ebx,eax
c000e636:	83 ec 0c             	sub    esp,0xc
c000e639:	53                   	push   ebx
c000e63a:	e8 19 78 00 00       	call   c0015e58 <Mutex::Mutex()>
c000e63f:	83 c4 10             	add    esp,0x10
c000e642:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e646:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e649:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e64d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e651:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e654:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e658:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e65f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e663:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e669:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e66d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e670:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e674:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e67a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e680:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e684:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e687:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e68a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e68e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e692:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e696:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e69c:	05 00 02 00 00       	add    eax,0x200
c000e6a1:	c1 e0 03             	shl    eax,0x3
c000e6a4:	83 ec 0c             	sub    esp,0xc
c000e6a7:	50                   	push   eax
c000e6a8:	e8 09 94 ff ff       	call   c0007ab6 <malloc>
c000e6ad:	83 c4 10             	add    esp,0x10
c000e6b0:	89 c2                	mov    edx,eax
c000e6b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6b6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e6b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6bd:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e6c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6c8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e6cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6d0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e6d6:	89 d0                	mov    eax,edx
c000e6d8:	c1 e0 02             	shl    eax,0x2
c000e6db:	01 d0                	add    eax,edx
c000e6dd:	c1 e0 04             	shl    eax,0x4
c000e6e0:	83 ec 0c             	sub    esp,0xc
c000e6e3:	50                   	push   eax
c000e6e4:	e8 cd 93 ff ff       	call   c0007ab6 <malloc>
c000e6e9:	83 c4 10             	add    esp,0x10
c000e6ec:	89 c2                	mov    edx,eax
c000e6ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6f2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e6f5:	90                   	nop
c000e6f6:	83 c4 18             	add    esp,0x18
c000e6f9:	5b                   	pop    ebx
c000e6fa:	c3                   	ret    
c000e6fb:	90                   	nop

c000e6fc <VCache::invalidateReadBuffer()>:
c000e6fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e700:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e706:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e70a:	c3                   	ret    
c000e70b:	90                   	nop

c000e70c <VCache::writeWriteBuffer()>:
c000e70c:	53                   	push   ebx
c000e70d:	83 ec 08             	sub    esp,0x8
c000e710:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e714:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e718:	74 1e                	je     c000e738 <VCache::writeWriteBuffer()+0x2c>
c000e71a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e71d:	83 ec 0c             	sub    esp,0xc
c000e720:	8b 10                	mov    edx,DWORD PTR [eax]
c000e722:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e725:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e728:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e72b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e72e:	50                   	push   eax
c000e72f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e732:	83 c4 20             	add    esp,0x20
c000e735:	8d 76 00             	lea    esi,[esi+0x0]
c000e738:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e73f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e746:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e74a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e751:	83 c4 08             	add    esp,0x8
c000e754:	5b                   	pop    ebx
c000e755:	c3                   	ret    
c000e756:	66 90                	xchg   ax,ax

c000e758 <VCache::~VCache()>:
c000e758:	83 ec 0c             	sub    esp,0xc
c000e75b:	ba 20 1e 02 c0       	mov    edx,0xc0021e20
c000e760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e764:	89 10                	mov    DWORD PTR [eax],edx
c000e766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e76d:	0f b6 c0             	movzx  eax,al
c000e770:	85 c0                	test   eax,eax
c000e772:	74 10                	je     c000e784 <VCache::~VCache()+0x2c>
c000e774:	83 ec 0c             	sub    esp,0xc
c000e777:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e77b:	e8 8c ff ff ff       	call   c000e70c <VCache::writeWriteBuffer()>
c000e780:	83 c4 10             	add    esp,0x10
c000e783:	90                   	nop
c000e784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e788:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e78b:	83 ec 0c             	sub    esp,0xc
c000e78e:	50                   	push   eax
c000e78f:	e8 32 93 ff ff       	call   c0007ac6 <free>
c000e794:	83 c4 10             	add    esp,0x10
c000e797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e79e:	83 ec 0c             	sub    esp,0xc
c000e7a1:	50                   	push   eax
c000e7a2:	e8 1f 93 ff ff       	call   c0007ac6 <free>
c000e7a7:	83 c4 10             	add    esp,0x10
c000e7aa:	90                   	nop
c000e7ab:	83 c4 0c             	add    esp,0xc
c000e7ae:	c3                   	ret    
c000e7af:	90                   	nop

c000e7b0 <VCache::~VCache()>:
c000e7b0:	83 ec 0c             	sub    esp,0xc
c000e7b3:	83 ec 0c             	sub    esp,0xc
c000e7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ba:	e8 99 ff ff ff       	call   c000e758 <VCache::~VCache()>
c000e7bf:	83 c4 10             	add    esp,0x10
c000e7c2:	83 ec 08             	sub    esp,0x8
c000e7c5:	6a 44                	push   0x44
c000e7c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7cb:	e8 48 c0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e7d0:	83 c4 10             	add    esp,0x10
c000e7d3:	83 c4 0c             	add    esp,0xc
c000e7d6:	c3                   	ret    
c000e7d7:	90                   	nop

c000e7d8 <VCache::write(unsigned long long, int, void*)>:
c000e7d8:	55                   	push   ebp
c000e7d9:	57                   	push   edi
c000e7da:	56                   	push   esi
c000e7db:	53                   	push   ebx
c000e7dc:	83 ec 1c             	sub    esp,0x1c
c000e7df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e7e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7e7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e7eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e7ef:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e7f3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e7f7:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e7fb:	74 07                	je     c000e804 <VCache::write(unsigned long long, int, void*)+0x2c>
c000e7fd:	53                   	push   ebx
c000e7fe:	e8 f9 fe ff ff       	call   c000e6fc <VCache::invalidateReadBuffer()>
c000e803:	58                   	pop    eax
c000e804:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e808:	74 62                	je     c000e86c <VCache::write(unsigned long long, int, void*)+0x94>
c000e80a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e80d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e811:	99                   	cdq    
c000e812:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e816:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e819:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e81c:	31 c1                	xor    ecx,eax
c000e81e:	89 d0                	mov    eax,edx
c000e820:	89 ca                	mov    edx,ecx
c000e822:	31 e8                	xor    eax,ebp
c000e824:	09 c2                	or     edx,eax
c000e826:	75 38                	jne    c000e860 <VCache::write(unsigned long long, int, void*)+0x88>
c000e828:	83 ff 01             	cmp    edi,0x1
c000e82b:	75 33                	jne    c000e860 <VCache::write(unsigned long long, int, void*)+0x88>
c000e82d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e830:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e834:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e83a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e83d:	0f af c8             	imul   ecx,eax
c000e840:	01 cf                	add    edi,ecx
c000e842:	89 c1                	mov    ecx,eax
c000e844:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e846:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e849:	40                   	inc    eax
c000e84a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e84d:	83 f8 50             	cmp    eax,0x50
c000e850:	75 6a                	jne    c000e8bc <VCache::write(unsigned long long, int, void*)+0xe4>
c000e852:	83 ec 0c             	sub    esp,0xc
c000e855:	53                   	push   ebx
c000e856:	e8 b1 fe ff ff       	call   c000e70c <VCache::writeWriteBuffer()>
c000e85b:	83 c4 10             	add    esp,0x10
c000e85e:	eb 5c                	jmp    c000e8bc <VCache::write(unsigned long long, int, void*)+0xe4>
c000e860:	83 ec 0c             	sub    esp,0xc
c000e863:	53                   	push   ebx
c000e864:	e8 a3 fe ff ff       	call   c000e70c <VCache::writeWriteBuffer()>
c000e869:	83 c4 10             	add    esp,0x10
c000e86c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e86f:	83 ff 4f             	cmp    edi,0x4f
c000e872:	7f 20                	jg     c000e894 <VCache::write(unsigned long long, int, void*)+0xbc>
c000e874:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e877:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e87b:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e87e:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e881:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e885:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e888:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e88e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e890:	eb 2a                	jmp    c000e8bc <VCache::write(unsigned long long, int, void*)+0xe4>
c000e892:	66 90                	xchg   ax,ax
c000e894:	8b 10                	mov    edx,DWORD PTR [eax]
c000e896:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e89a:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e89e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e8a2:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e8a6:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e8aa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e8ae:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e8b1:	83 c4 1c             	add    esp,0x1c
c000e8b4:	5b                   	pop    ebx
c000e8b5:	5e                   	pop    esi
c000e8b6:	5f                   	pop    edi
c000e8b7:	5d                   	pop    ebp
c000e8b8:	ff e0                	jmp    eax
c000e8ba:	66 90                	xchg   ax,ax
c000e8bc:	83 c4 1c             	add    esp,0x1c
c000e8bf:	31 c0                	xor    eax,eax
c000e8c1:	5b                   	pop    ebx
c000e8c2:	5e                   	pop    esi
c000e8c3:	5f                   	pop    edi
c000e8c4:	5d                   	pop    ebp
c000e8c5:	c3                   	ret    

c000e8c6 <VCache::read(unsigned long long, int, void*)>:
c000e8c6:	55                   	push   ebp
c000e8c7:	57                   	push   edi
c000e8c8:	56                   	push   esi
c000e8c9:	53                   	push   ebx
c000e8ca:	83 ec 1c             	sub    esp,0x1c
c000e8cd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e8d1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e8d5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e8d9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e8dd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e8e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e8e5:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e8e9:	74 0d                	je     c000e8f8 <VCache::read(unsigned long long, int, void*)+0x32>
c000e8eb:	83 ec 0c             	sub    esp,0xc
c000e8ee:	57                   	push   edi
c000e8ef:	e8 18 fe ff ff       	call   c000e70c <VCache::writeWriteBuffer()>
c000e8f4:	83 c4 10             	add    esp,0x10
c000e8f7:	90                   	nop
c000e8f8:	83 fd 01             	cmp    ebp,0x1
c000e8fb:	0f 85 93 00 00 00    	jne    c000e994 <VCache::read(unsigned long long, int, void*)+0xce>
c000e901:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e904:	89 04 24             	mov    DWORD PTR [esp],eax
c000e907:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e90e:	0f 85 80 00 00 00    	jne    c000e994 <VCache::read(unsigned long long, int, void*)+0xce>
c000e914:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e917:	89 e9                	mov    ecx,ebp
c000e919:	f7 d9                	neg    ecx
c000e91b:	89 c8                	mov    eax,ecx
c000e91d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e921:	c1 f8 1f             	sar    eax,0x1f
c000e924:	21 d9                	and    ecx,ebx
c000e926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e92a:	89 c8                	mov    eax,ecx
c000e92c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e930:	21 f1                	and    ecx,esi
c000e932:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e936:	89 ca                	mov    edx,ecx
c000e938:	74 2e                	je     c000e968 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e93a:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e93d:	75 29                	jne    c000e968 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e93f:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e942:	75 24                	jne    c000e968 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e944:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e947:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e94d:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e950:	8d 70 ff             	lea    esi,[eax-0x1]
c000e953:	21 f3                	and    ebx,esi
c000e955:	0f af d9             	imul   ebx,ecx
c000e958:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e95b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e95f:	89 de                	mov    esi,ebx
c000e961:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e963:	31 c0                	xor    eax,eax
c000e965:	eb 61                	jmp    c000e9c8 <VCache::read(unsigned long long, int, void*)+0x102>
c000e967:	90                   	nop
c000e968:	83 ec 0c             	sub    esp,0xc
c000e96b:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e96f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e973:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e976:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e979:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e97b:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e97e:	55                   	push   ebp
c000e97f:	52                   	push   edx
c000e980:	50                   	push   eax
c000e981:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e985:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e988:	83 c4 20             	add    esp,0x20
c000e98b:	85 c0                	test   eax,eax
c000e98d:	75 39                	jne    c000e9c8 <VCache::read(unsigned long long, int, void*)+0x102>
c000e98f:	eb b3                	jmp    c000e944 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e991:	8d 76 00             	lea    esi,[esi+0x0]
c000e994:	83 ec 0c             	sub    esp,0xc
c000e997:	57                   	push   edi
c000e998:	e8 5f fd ff ff       	call   c000e6fc <VCache::invalidateReadBuffer()>
c000e99d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e9a4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9a6:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e9aa:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e9ae:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e9b2:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e9b6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e9ba:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e9bd:	83 c4 2c             	add    esp,0x2c
c000e9c0:	5b                   	pop    ebx
c000e9c1:	5e                   	pop    esi
c000e9c2:	5f                   	pop    edi
c000e9c3:	5d                   	pop    ebp
c000e9c4:	ff e0                	jmp    eax
c000e9c6:	66 90                	xchg   ax,ax
c000e9c8:	83 c4 1c             	add    esp,0x1c
c000e9cb:	5b                   	pop    ebx
c000e9cc:	5e                   	pop    esi
c000e9cd:	5f                   	pop    edi
c000e9ce:	5d                   	pop    ebp
c000e9cf:	c3                   	ret    

c000e9d0 <Video::putrect(int, int, int, int, unsigned int)>:
c000e9d0:	55                   	push   ebp
c000e9d1:	57                   	push   edi
c000e9d2:	56                   	push   esi
c000e9d3:	53                   	push   ebx
c000e9d4:	83 ec 1c             	sub    esp,0x1c
c000e9d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e9db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e9df:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e9e3:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e9e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e9eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9ef:	01 df                	add    edi,ebx
c000e9f1:	39 fb                	cmp    ebx,edi
c000e9f3:	7d 1f                	jge    c000ea14 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e9f5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e9f9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e9fd:	7d 12                	jge    c000ea11 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e9ff:	8b 16                	mov    edx,DWORD PTR [esi]
c000ea01:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ea05:	53                   	push   ebx
c000ea06:	55                   	push   ebp
c000ea07:	45                   	inc    ebp
c000ea08:	56                   	push   esi
c000ea09:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ea0c:	83 c4 10             	add    esp,0x10
c000ea0f:	eb e8                	jmp    c000e9f9 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ea11:	43                   	inc    ebx
c000ea12:	eb dd                	jmp    c000e9f1 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ea14:	83 c4 1c             	add    esp,0x1c
c000ea17:	5b                   	pop    ebx
c000ea18:	5e                   	pop    esi
c000ea19:	5f                   	pop    edi
c000ea1a:	5d                   	pop    ebp
c000ea1b:	c3                   	ret    

c000ea1c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ea1c:	55                   	push   ebp
c000ea1d:	57                   	push   edi
c000ea1e:	31 ff                	xor    edi,edi
c000ea20:	56                   	push   esi
c000ea21:	53                   	push   ebx
c000ea22:	83 ec 1c             	sub    esp,0x1c
c000ea25:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ea29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ea2d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ea34:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ea39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ea3d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ea41:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ea45:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ea48:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea4c:	01 f9                	add    ecx,edi
c000ea4e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ea52:	7d 2f                	jge    c000ea83 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ea54:	31 f6                	xor    esi,esi
c000ea56:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea5a:	01 f2                	add    edx,esi
c000ea5c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ea60:	7d 1a                	jge    c000ea7c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ea62:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ea65:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ea68:	46                   	inc    esi
c000ea69:	51                   	push   ecx
c000ea6a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ea6e:	52                   	push   edx
c000ea6f:	55                   	push   ebp
c000ea70:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea73:	83 c4 10             	add    esp,0x10
c000ea76:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea7a:	eb da                	jmp    c000ea56 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ea7c:	47                   	inc    edi
c000ea7d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ea81:	eb c5                	jmp    c000ea48 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ea83:	83 c4 1c             	add    esp,0x1c
c000ea86:	5b                   	pop    ebx
c000ea87:	5e                   	pop    esi
c000ea88:	5f                   	pop    edi
c000ea89:	5d                   	pop    ebp
c000ea8a:	c3                   	ret    
c000ea8b:	90                   	nop

c000ea8c <Video::blit(unsigned int*, int, int, int, int)>:
c000ea8c:	55                   	push   ebp
c000ea8d:	57                   	push   edi
c000ea8e:	56                   	push   esi
c000ea8f:	53                   	push   ebx
c000ea90:	83 ec 1c             	sub    esp,0x1c
c000ea93:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea97:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea9b:	85 c0                	test   eax,eax
c000ea9d:	79 02                	jns    c000eaa1 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000ea9f:	31 c0                	xor    eax,eax
c000eaa1:	c1 e0 02             	shl    eax,0x2
c000eaa4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000eaa8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eaac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eab0:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000eab4:	39 d8                	cmp    eax,ebx
c000eab6:	7e 49                	jle    c000eb01 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000eab8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eabe:	7c 41                	jl     c000eb01 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000eac0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eac4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eac8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eacc:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000ead0:	39 f9                	cmp    ecx,edi
c000ead2:	7e 22                	jle    c000eaf6 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000ead4:	83 c5 04             	add    ebp,0x4
c000ead7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eadd:	7c 14                	jl     c000eaf3 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000eadf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eae1:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000eae4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eae8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eaec:	56                   	push   esi
c000eaed:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eaf0:	83 c4 10             	add    esp,0x10
c000eaf3:	47                   	inc    edi
c000eaf4:	eb d2                	jmp    c000eac8 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000eaf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eafa:	43                   	inc    ebx
c000eafb:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000eaff:	eb ab                	jmp    c000eaac <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000eb01:	83 c4 1c             	add    esp,0x1c
c000eb04:	5b                   	pop    ebx
c000eb05:	5e                   	pop    esi
c000eb06:	5f                   	pop    edi
c000eb07:	5d                   	pop    ebp
c000eb08:	c3                   	ret    
c000eb09:	90                   	nop

c000eb0a <Video::clearScreen(unsigned int)>:
c000eb0a:	57                   	push   edi
c000eb0b:	56                   	push   esi
c000eb0c:	53                   	push   ebx
c000eb0d:	31 db                	xor    ebx,ebx
c000eb0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eb13:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb19:	7e 1f                	jle    c000eb3a <Video::clearScreen(unsigned int)+0x30>
c000eb1b:	31 ff                	xor    edi,edi
c000eb1d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb23:	7e 12                	jle    c000eb37 <Video::clearScreen(unsigned int)+0x2d>
c000eb25:	8b 06                	mov    eax,DWORD PTR [esi]
c000eb27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb2b:	53                   	push   ebx
c000eb2c:	57                   	push   edi
c000eb2d:	47                   	inc    edi
c000eb2e:	56                   	push   esi
c000eb2f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eb32:	83 c4 10             	add    esp,0x10
c000eb35:	eb e6                	jmp    c000eb1d <Video::clearScreen(unsigned int)+0x13>
c000eb37:	43                   	inc    ebx
c000eb38:	eb d9                	jmp    c000eb13 <Video::clearScreen(unsigned int)+0x9>
c000eb3a:	5b                   	pop    ebx
c000eb3b:	5e                   	pop    esi
c000eb3c:	5f                   	pop    edi
c000eb3d:	c3                   	ret    

c000eb3e <Video::putpixel(int, int, unsigned int)>:
c000eb3e:	c7 44 24 04 28 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021e28
c000eb46:	e9 d0 2a 00 00       	jmp    c001161b <KePanic(char const*)>
c000eb4b:	90                   	nop

c000eb4c <Video::readPixelApprox(int, int)>:
c000eb4c:	83 ec 18             	sub    esp,0x18
c000eb4f:	68 49 1e 02 c0       	push   0xc0021e49
c000eb54:	e8 c2 2a 00 00       	call   c001161b <KePanic(char const*)>
c000eb59:	31 c0                	xor    eax,eax
c000eb5b:	83 c4 1c             	add    esp,0x1c
c000eb5e:	c3                   	ret    
c000eb5f:	90                   	nop

c000eb60 <Video::Video(char const*)>:
c000eb60:	83 ec 0c             	sub    esp,0xc
c000eb63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb67:	83 ec 08             	sub    esp,0x8
c000eb6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb6e:	50                   	push   eax
c000eb6f:	e8 e6 df ff ff       	call   c000cb5a <Device::Device(char const*)>
c000eb74:	83 c4 10             	add    esp,0x10
c000eb77:	ba c4 1e 02 c0       	mov    edx,0xc0021ec4
c000eb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb80:	89 10                	mov    DWORD PTR [eax],edx
c000eb82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb86:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000eb90:	90                   	nop
c000eb91:	83 c4 0c             	add    esp,0xc
c000eb94:	c3                   	ret    
c000eb95:	90                   	nop

c000eb96 <Video::~Video()>:
c000eb96:	83 ec 0c             	sub    esp,0xc
c000eb99:	ba c4 1e 02 c0       	mov    edx,0xc0021ec4
c000eb9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eba2:	89 10                	mov    DWORD PTR [eax],edx
c000eba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eba8:	83 ec 0c             	sub    esp,0xc
c000ebab:	50                   	push   eax
c000ebac:	e8 13 dd ff ff       	call   c000c8c4 <Device::~Device()>
c000ebb1:	83 c4 10             	add    esp,0x10
c000ebb4:	90                   	nop
c000ebb5:	83 c4 0c             	add    esp,0xc
c000ebb8:	c3                   	ret    
c000ebb9:	90                   	nop

c000ebba <Video::~Video()>:
c000ebba:	83 ec 0c             	sub    esp,0xc
c000ebbd:	83 ec 0c             	sub    esp,0xc
c000ebc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebc4:	e8 cd ff ff ff       	call   c000eb96 <Video::~Video()>
c000ebc9:	83 c4 10             	add    esp,0x10
c000ebcc:	83 ec 08             	sub    esp,0x8
c000ebcf:	68 64 01 00 00       	push   0x164
c000ebd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebd8:	e8 3b bc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000ebdd:	83 c4 10             	add    esp,0x10
c000ebe0:	83 c4 0c             	add    esp,0xc
c000ebe3:	c3                   	ret    

c000ebe4 <Video::isMonochrome()>:
c000ebe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebe8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ebee:	c3                   	ret    
c000ebef:	90                   	nop

c000ebf0 <Video::getWidth()>:
c000ebf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebf4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ebfa:	c3                   	ret    
c000ebfb:	90                   	nop

c000ebfc <Video::getHeight()>:
c000ebfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec00:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ec06:	c3                   	ret    
c000ec07:	90                   	nop

c000ec08 <Video::drawCursor(int, int, unsigned int*, int)>:
c000ec08:	55                   	push   ebp
c000ec09:	57                   	push   edi
c000ec0a:	56                   	push   esi
c000ec0b:	53                   	push   ebx
c000ec0c:	83 ec 2c             	sub    esp,0x2c
c000ec0f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec13:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ec17:	83 f8 01             	cmp    eax,0x1
c000ec1a:	19 c9                	sbb    ecx,ecx
c000ec1c:	31 db                	xor    ebx,ebx
c000ec1e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ec22:	89 cd                	mov    ebp,ecx
c000ec24:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ec2c:	f7 d5                	not    ebp
c000ec2e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000ec34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ec38:	01 d8                	add    eax,ebx
c000ec3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec3e:	56                   	push   esi
c000ec3f:	e8 b8 ff ff ff       	call   c000ebfc <Video::getHeight()>
c000ec44:	59                   	pop    ecx
c000ec45:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ec49:	7e 70                	jle    c000ecbb <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ec4b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec4f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000ec53:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ec56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec5a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec5e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ec65:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec69:	89 f8                	mov    eax,edi
c000ec6b:	83 c0 20             	add    eax,0x20
c000ec6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec72:	56                   	push   esi
c000ec73:	e8 78 ff ff ff       	call   c000ebf0 <Video::getWidth()>
c000ec78:	5a                   	pop    edx
c000ec79:	39 c7                	cmp    edi,eax
c000ec7b:	7d 34                	jge    c000ecb1 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ec7d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ec82:	74 05                	je     c000ec89 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ec84:	8b 06                	mov    eax,DWORD PTR [esi]
c000ec86:	55                   	push   ebp
c000ec87:	eb 0d                	jmp    c000ec96 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ec89:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ec8e:	74 12                	je     c000eca2 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ec90:	8b 06                	mov    eax,DWORD PTR [esi]
c000ec92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec96:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ec9a:	57                   	push   edi
c000ec9b:	56                   	push   esi
c000ec9c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ec9f:	83 c4 10             	add    esp,0x10
c000eca2:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000eca6:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ecaa:	47                   	inc    edi
c000ecab:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ecaf:	75 c1                	jne    c000ec72 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ecb1:	43                   	inc    ebx
c000ecb2:	83 fb 20             	cmp    ebx,0x20
c000ecb5:	0f 85 79 ff ff ff    	jne    c000ec34 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ecbb:	83 c4 2c             	add    esp,0x2c
c000ecbe:	5b                   	pop    ebx
c000ecbf:	5e                   	pop    esi
c000ecc0:	5f                   	pop    edi
c000ecc1:	5d                   	pop    ebp
c000ecc2:	c3                   	ret    
c000ecc3:	90                   	nop

c000ecc4 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ecc4:	55                   	push   ebp
c000ecc5:	57                   	push   edi
c000ecc6:	56                   	push   esi
c000ecc7:	53                   	push   ebx
c000ecc8:	83 ec 28             	sub    esp,0x28
c000eccb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000eccf:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ecd3:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ecd7:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000ecdb:	c1 e6 08             	shl    esi,0x8
c000ecde:	01 c6                	add    esi,eax
c000ece0:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ece4:	c1 e0 08             	shl    eax,0x8
c000ece7:	01 d0                	add    eax,edx
c000ece9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eced:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecf1:	0f af c6             	imul   eax,esi
c000ecf4:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ecfb:	50                   	push   eax
c000ecfc:	e8 b5 8d ff ff       	call   c0007ab6 <malloc>
c000ed01:	83 c4 10             	add    esp,0x10
c000ed04:	89 c7                	mov    edi,eax
c000ed06:	85 c0                	test   eax,eax
c000ed08:	75 10                	jne    c000ed1a <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ed0a:	83 ec 0c             	sub    esp,0xc
c000ed0d:	68 74 1e 02 c0       	push   0xc0021e74
c000ed12:	e8 04 29 00 00       	call   c001161b <KePanic(char const*)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ed1e:	ba 12 00 00 00       	mov    edx,0x12
c000ed23:	85 c0                	test   eax,eax
c000ed25:	74 11                	je     c000ed38 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ed27:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ed2b:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ed2f:	c1 fa 03             	sar    edx,0x3
c000ed32:	0f af d1             	imul   edx,ecx
c000ed35:	83 c2 12             	add    edx,0x12
c000ed38:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ed3c:	74 04                	je     c000ed42 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ed3e:	85 f6                	test   esi,esi
c000ed40:	75 12                	jne    c000ed54 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ed42:	83 ec 0c             	sub    esp,0xc
c000ed45:	68 84 1e 02 c0       	push   0xc0021e84
c000ed4a:	e8 f6 bb ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ed4f:	e9 b8 00 00 00       	jmp    c000ee0c <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000ed54:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000ed58:	83 f9 02             	cmp    ecx,0x2
c000ed5b:	0f 85 96 00 00 00    	jne    c000edf7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ed61:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ed66:	75 0e                	jne    c000ed76 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed68:	85 c0                	test   eax,eax
c000ed6a:	75 0a                	jne    c000ed76 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed6c:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ed6f:	83 e8 18             	sub    eax,0x18
c000ed72:	a8 f7                	test   al,0xf7
c000ed74:	74 0a                	je     c000ed80 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ed76:	83 ec 0c             	sub    esp,0xc
c000ed79:	68 99 1e 02 c0       	push   0xc0021e99
c000ed7e:	eb 7f                	jmp    c000edff <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ed80:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ed88:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ed90:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000ed94:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ed9c:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000eda0:	75 0c                	jne    c000edae <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000eda2:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000eda7:	c1 e0 18             	shl    eax,0x18
c000edaa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000edae:	45                   	inc    ebp
c000edaf:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000edb4:	c1 e1 10             	shl    ecx,0x10
c000edb7:	89 c8                	mov    eax,ecx
c000edb9:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000edbe:	c1 e1 08             	shl    ecx,0x8
c000edc1:	09 c1                	or     ecx,eax
c000edc3:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000edc7:	09 c1                	or     ecx,eax
c000edc9:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000edcd:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000edd1:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000edd5:	c1 f8 03             	sar    eax,0x3
c000edd8:	01 c2                	add    edx,eax
c000edda:	89 e8                	mov    eax,ebp
c000eddc:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ede0:	39 c6                	cmp    esi,eax
c000ede2:	7f b0                	jg     c000ed94 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ede4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ede8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edec:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000edef:	7e 22                	jle    c000ee13 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000edf1:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000edf5:	eb 99                	jmp    c000ed90 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000edf7:	50                   	push   eax
c000edf8:	50                   	push   eax
c000edf9:	51                   	push   ecx
c000edfa:	68 a7 1e 02 c0       	push   0xc0021ea7
c000edff:	e8 41 bb ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ee04:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ee07:	e8 ba 8c ff ff       	call   c0007ac6 <free>
c000ee0c:	83 c4 10             	add    esp,0x10
c000ee0f:	31 ff                	xor    edi,edi
c000ee11:	eb 0f                	jmp    c000ee22 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ee13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee17:	89 30                	mov    DWORD PTR [eax],esi
c000ee19:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee1d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ee20:	89 30                	mov    DWORD PTR [eax],esi
c000ee22:	83 c4 1c             	add    esp,0x1c
c000ee25:	89 f8                	mov    eax,edi
c000ee27:	5b                   	pop    ebx
c000ee28:	5e                   	pop    esi
c000ee29:	5f                   	pop    edi
c000ee2a:	5d                   	pop    ebp
c000ee2b:	c3                   	ret    

c000ee2c <Video::putTGA(int, int, unsigned char*, int)>:
c000ee2c:	55                   	push   ebp
c000ee2d:	57                   	push   edi
c000ee2e:	56                   	push   esi
c000ee2f:	53                   	push   ebx
c000ee30:	83 ec 28             	sub    esp,0x28
c000ee33:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ee37:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee3b:	50                   	push   eax
c000ee3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee40:	50                   	push   eax
c000ee41:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee45:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee49:	56                   	push   esi
c000ee4a:	e8 75 fe ff ff       	call   c000ecc4 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ee4f:	83 c4 20             	add    esp,0x20
c000ee52:	85 c0                	test   eax,eax
c000ee54:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ee58:	74 35                	je     c000ee8f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee5a:	89 c7                	mov    edi,eax
c000ee5c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee60:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ee64:	39 d8                	cmp    eax,ebx
c000ee66:	7e 27                	jle    c000ee8f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee68:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ee6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ee74:	39 e8                	cmp    eax,ebp
c000ee76:	7e 14                	jle    c000ee8c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ee78:	8b 06                	mov    eax,DWORD PTR [esi]
c000ee7a:	83 c7 04             	add    edi,0x4
c000ee7d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000ee80:	53                   	push   ebx
c000ee81:	55                   	push   ebp
c000ee82:	45                   	inc    ebp
c000ee83:	56                   	push   esi
c000ee84:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ee87:	83 c4 10             	add    esp,0x10
c000ee8a:	eb e0                	jmp    c000ee6c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ee8c:	43                   	inc    ebx
c000ee8d:	eb cd                	jmp    c000ee5c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ee8f:	83 c4 1c             	add    esp,0x1c
c000ee92:	5b                   	pop    ebx
c000ee93:	5e                   	pop    esi
c000ee94:	5f                   	pop    edi
c000ee95:	5d                   	pop    ebp
c000ee96:	c3                   	ret    
c000ee97:	90                   	nop

c000ee98 <ACPI::close(int, int, void*)>:
c000ee98:	83 ec 1c             	sub    esp,0x1c
c000ee9b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eea3:	74 0b                	je     c000eeb0 <ACPI::close(int, int, void*)+0x18>
c000eea5:	b8 00 00 00 00       	mov    eax,0x0
c000eeaa:	e9 99 00 00 00       	jmp    c000ef48 <ACPI::close(int, int, void*)+0xb0>
c000eeaf:	90                   	nop
c000eeb0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000eeb5:	75 29                	jne    c000eee0 <ACPI::close(int, int, void*)+0x48>
c000eeb7:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000eebc:	85 c0                	test   eax,eax
c000eebe:	74 08                	je     c000eec8 <ACPI::close(int, int, void*)+0x30>
c000eec0:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000eec5:	ff d0                	call   eax
c000eec7:	90                   	nop
c000eec8:	83 ec 0c             	sub    esp,0xc
c000eecb:	68 08 1f 02 c0       	push   0xc0021f08
c000eed0:	e8 46 27 00 00       	call   c001161b <KePanic(char const*)>
c000eed5:	83 c4 10             	add    esp,0x10
c000eed8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eedd:	eb 69                	jmp    c000ef48 <ACPI::close(int, int, void*)+0xb0>
c000eedf:	90                   	nop
c000eee0:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000eee5:	75 59                	jne    c000ef40 <ACPI::close(int, int, void*)+0xa8>
c000eee7:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000eeec:	85 c0                	test   eax,eax
c000eeee:	74 08                	je     c000eef8 <ACPI::close(int, int, void*)+0x60>
c000eef0:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000eef5:	ff d0                	call   eax
c000eef7:	90                   	nop
c000eef8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000eefd:	8d 76 00             	lea    esi,[esi+0x0]
c000ef00:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ef05:	83 e0 02             	and    eax,0x2
c000ef08:	74 1e                	je     c000ef28 <ACPI::close(int, int, void*)+0x90>
c000ef0a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ef11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef15:	89 c2                	mov    edx,eax
c000ef17:	ec                   	in     al,dx
c000ef18:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ef1c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ef20:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ef24:	eb da                	jmp    c000ef00 <ACPI::close(int, int, void*)+0x68>
c000ef26:	66 90                	xchg   ax,ax
c000ef28:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ef2f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ef34:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ef38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef3c:	ee                   	out    dx,al
c000ef3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef45:	8d 76 00             	lea    esi,[esi+0x0]
c000ef48:	83 c4 1c             	add    esp,0x1c
c000ef4b:	c3                   	ret    

c000ef4c <findRSDP()>:
c000ef4c:	83 ec 1c             	sub    esp,0x1c
c000ef4f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ef54:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef5a:	83 e0 04             	and    eax,0x4
c000ef5d:	0f b6 c0             	movzx  eax,al
c000ef60:	85 c0                	test   eax,eax
c000ef62:	75 08                	jne    c000ef6c <findRSDP()+0x20>
c000ef64:	b8 00 00 00 00       	mov    eax,0x0
c000ef69:	eb 75                	jmp    c000efe0 <findRSDP()+0x94>
c000ef6b:	90                   	nop
c000ef6c:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000ef71:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ef76:	7f 1c                	jg     c000ef94 <findRSDP()+0x48>
c000ef78:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ef7d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ef83:	83 e2 fb             	and    edx,0xfffffffb
c000ef86:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ef8c:	b8 00 00 00 00       	mov    eax,0x0
c000ef91:	eb 4d                	jmp    c000efe0 <findRSDP()+0x94>
c000ef93:	90                   	nop
c000ef94:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ef9c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000efa4:	77 32                	ja     c000efd8 <findRSDP()+0x8c>
c000efa6:	83 ec 04             	sub    esp,0x4
c000efa9:	6a 08                	push   0x8
c000efab:	68 a3 1f 02 c0       	push   0xc0021fa3
c000efb0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000efb4:	e8 c7 13 ff ff       	call   c0000380 <memcmp>
c000efb9:	83 c4 10             	add    esp,0x10
c000efbc:	85 c0                	test   eax,eax
c000efbe:	0f 94 c0             	sete   al
c000efc1:	0f b6 c0             	movzx  eax,al
c000efc4:	85 c0                	test   eax,eax
c000efc6:	74 08                	je     c000efd0 <findRSDP()+0x84>
c000efc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efcc:	eb 12                	jmp    c000efe0 <findRSDP()+0x94>
c000efce:	66 90                	xchg   ax,ax
c000efd0:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000efd5:	eb c5                	jmp    c000ef9c <findRSDP()+0x50>
c000efd7:	90                   	nop
c000efd8:	b8 00 00 00 00       	mov    eax,0x0
c000efdd:	8d 76 00             	lea    esi,[esi+0x0]
c000efe0:	83 c4 1c             	add    esp,0x1c
c000efe3:	c3                   	ret    

c000efe4 <loadACPITables(unsigned char*)>:
c000efe4:	57                   	push   edi
c000efe5:	56                   	push   esi
c000efe6:	53                   	push   ebx
c000efe7:	83 ec 60             	sub    esp,0x60
c000efea:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000efef:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eff5:	83 e0 04             	and    eax,0x4
c000eff8:	0f b6 c0             	movzx  eax,al
c000effb:	85 c0                	test   eax,eax
c000effd:	0f 84 41 02 00 00    	je     c000f244 <loadACPITables(unsigned char*)+0x260>
c000f003:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000f008:	0f b6 c0             	movzx  eax,al
c000f00b:	85 c0                	test   eax,eax
c000f00d:	74 79                	je     c000f088 <loadACPITables(unsigned char*)+0xa4>
c000f00f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f013:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000f017:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f01b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f01e:	83 e8 24             	sub    eax,0x24
c000f021:	c1 e8 03             	shr    eax,0x3
c000f024:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f028:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000f030:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f034:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f038:	0f 8d ba 00 00 00    	jge    c000f0f8 <loadACPITables(unsigned char*)+0x114>
c000f03e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f042:	83 c0 24             	add    eax,0x24
c000f045:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f049:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f04d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f051:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f055:	c1 e0 03             	shl    eax,0x3
c000f058:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f05c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f060:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f063:	8b 00                	mov    eax,DWORD PTR [eax]
c000f065:	89 c1                	mov    ecx,eax
c000f067:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f06c:	8d 50 01             	lea    edx,[eax+0x1]
c000f06f:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f075:	89 ca                	mov    edx,ecx
c000f077:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f07e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f083:	eb ab                	jmp    c000f030 <loadACPITables(unsigned char*)+0x4c>
c000f085:	8d 76 00             	lea    esi,[esi+0x0]
c000f088:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f08c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f090:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f094:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f097:	83 e8 24             	sub    eax,0x24
c000f09a:	c1 e8 02             	shr    eax,0x2
c000f09d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f0a1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f0a9:	8d 76 00             	lea    esi,[esi+0x0]
c000f0ac:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f0b0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f0b4:	7d 42                	jge    c000f0f8 <loadACPITables(unsigned char*)+0x114>
c000f0b6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0ba:	83 c0 24             	add    eax,0x24
c000f0bd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f0c1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f0c5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f0c9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f0cd:	c1 e0 02             	shl    eax,0x2
c000f0d0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f0d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f0d8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f0da:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f0df:	8d 50 01             	lea    edx,[eax+0x1]
c000f0e2:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f0e8:	89 ca                	mov    edx,ecx
c000f0ea:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f0f1:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f0f6:	eb b4                	jmp    c000f0ac <loadACPITables(unsigned char*)+0xc8>
c000f0f8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f100:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f105:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f109:	0f 8d 39 01 00 00    	jge    c000f248 <loadACPITables(unsigned char*)+0x264>
c000f10f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f113:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f11a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f11e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f122:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f12a:	25 ff 0f 00 00       	and    eax,0xfff
c000f12f:	89 c6                	mov    esi,eax
c000f131:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f137:	83 ec 0c             	sub    esp,0xc
c000f13a:	6a 01                	push   0x1
c000f13c:	e8 cc a4 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f141:	83 c4 10             	add    esp,0x10
c000f144:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f148:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f14e:	83 ec 0c             	sub    esp,0xc
c000f151:	6a 01                	push   0x1
c000f153:	6a 01                	push   0x1
c000f155:	50                   	push   eax
c000f156:	52                   	push   edx
c000f157:	53                   	push   ebx
c000f158:	e8 bd ad ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f15d:	83 c4 20             	add    esp,0x20
c000f160:	09 f0                	or     eax,esi
c000f162:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f166:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f16a:	c1 e0 03             	shl    eax,0x3
c000f16d:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f172:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f176:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f17a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f17e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f186:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f18a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f18e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f192:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f196:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f19a:	89 c6                	mov    esi,eax
c000f19c:	89 d7                	mov    edi,edx
c000f19e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f1a0:	89 c8                	mov    eax,ecx
c000f1a2:	89 fa                	mov    edx,edi
c000f1a4:	89 f3                	mov    ebx,esi
c000f1a6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f1aa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f1ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f1b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f1b9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f1bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1c1:	05 00 10 00 00       	add    eax,0x1000
c000f1c6:	c1 e8 0c             	shr    eax,0xc
c000f1c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f1cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f1d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1d9:	25 ff 0f 00 00       	and    eax,0xfff
c000f1de:	89 c6                	mov    esi,eax
c000f1e0:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f1e6:	83 ec 0c             	sub    esp,0xc
c000f1e9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1ed:	e8 1b a4 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f1f2:	83 c4 10             	add    esp,0x10
c000f1f5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f1f9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f1ff:	83 ec 0c             	sub    esp,0xc
c000f202:	6a 01                	push   0x1
c000f204:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f208:	50                   	push   eax
c000f209:	52                   	push   edx
c000f20a:	53                   	push   ebx
c000f20b:	e8 0a ad ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f210:	83 c4 20             	add    esp,0x20
c000f213:	09 f0                	or     eax,esi
c000f215:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f219:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f21d:	83 ec 0c             	sub    esp,0xc
c000f220:	50                   	push   eax
c000f221:	e8 05 a7 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000f226:	83 c4 10             	add    esp,0x10
c000f229:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f22d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f231:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f238:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f23d:	e9 be fe ff ff       	jmp    c000f100 <loadACPITables(unsigned char*)+0x11c>
c000f242:	66 90                	xchg   ax,ax
c000f244:	90                   	nop
c000f245:	8d 76 00             	lea    esi,[esi+0x0]
c000f248:	83 c4 60             	add    esp,0x60
c000f24b:	5b                   	pop    ebx
c000f24c:	5e                   	pop    esi
c000f24d:	5f                   	pop    edi
c000f24e:	c3                   	ret    
c000f24f:	90                   	nop

c000f250 <findRSDT(unsigned char*)>:
c000f250:	57                   	push   edi
c000f251:	56                   	push   esi
c000f252:	53                   	push   ebx
c000f253:	83 ec 50             	sub    esp,0x50
c000f256:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f25b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f261:	83 e0 04             	and    eax,0x4
c000f264:	0f b6 c0             	movzx  eax,al
c000f267:	85 c0                	test   eax,eax
c000f269:	75 0d                	jne    c000f278 <findRSDT(unsigned char*)+0x28>
c000f26b:	b8 00 00 00 00       	mov    eax,0x0
c000f270:	e9 2b 01 00 00       	jmp    c000f3a0 <findRSDT(unsigned char*)+0x150>
c000f275:	8d 76 00             	lea    esi,[esi+0x0]
c000f278:	89 e0                	mov    eax,esp
c000f27a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f27e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f282:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f286:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f28e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f292:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f296:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f29a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f29e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f2a2:	89 c6                	mov    esi,eax
c000f2a4:	89 d7                	mov    edi,edx
c000f2a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2a8:	89 c8                	mov    eax,ecx
c000f2aa:	89 fa                	mov    edx,edi
c000f2ac:	89 f3                	mov    ebx,esi
c000f2ae:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f2b2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f2b6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f2ba:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f2be:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f2c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f2ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f2ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2d2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f2d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2da:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f2de:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f2e2:	25 ff 0f 00 00       	and    eax,0xfff
c000f2e7:	89 c6                	mov    esi,eax
c000f2e9:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f2ef:	83 ec 0c             	sub    esp,0xc
c000f2f2:	6a 02                	push   0x2
c000f2f4:	e8 14 a3 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f2f9:	83 c4 10             	add    esp,0x10
c000f2fc:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f300:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f306:	83 ec 0c             	sub    esp,0xc
c000f309:	6a 01                	push   0x1
c000f30b:	6a 02                	push   0x2
c000f30d:	50                   	push   eax
c000f30e:	52                   	push   edx
c000f30f:	53                   	push   ebx
c000f310:	e8 05 ac ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f315:	83 c4 20             	add    esp,0x20
c000f318:	09 f0                	or     eax,esi
c000f31a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f31e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f322:	25 ff 0f 00 00       	and    eax,0xfff
c000f327:	89 c6                	mov    esi,eax
c000f329:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f32f:	83 ec 0c             	sub    esp,0xc
c000f332:	6a 02                	push   0x2
c000f334:	e8 d4 a2 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f339:	83 c4 10             	add    esp,0x10
c000f33c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f340:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f346:	83 ec 0c             	sub    esp,0xc
c000f349:	6a 01                	push   0x1
c000f34b:	6a 02                	push   0x2
c000f34d:	50                   	push   eax
c000f34e:	52                   	push   edx
c000f34f:	53                   	push   ebx
c000f350:	e8 c5 ab ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f355:	83 c4 20             	add    esp,0x20
c000f358:	09 f0                	or     eax,esi
c000f35a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f35e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f363:	85 c0                	test   eax,eax
c000f365:	75 11                	jne    c000f378 <findRSDT(unsigned char*)+0x128>
c000f367:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f36e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f372:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f376:	eb 24                	jmp    c000f39c <findRSDT(unsigned char*)+0x14c>
c000f378:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f37d:	83 f8 02             	cmp    eax,0x2
c000f380:	75 12                	jne    c000f394 <findRSDT(unsigned char*)+0x144>
c000f382:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f389:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f38d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f391:	eb 09                	jmp    c000f39c <findRSDT(unsigned char*)+0x14c>
c000f393:	90                   	nop
c000f394:	b8 00 00 00 00       	mov    eax,0x0
c000f399:	eb 05                	jmp    c000f3a0 <findRSDT(unsigned char*)+0x150>
c000f39b:	90                   	nop
c000f39c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3a0:	83 c4 50             	add    esp,0x50
c000f3a3:	5b                   	pop    ebx
c000f3a4:	5e                   	pop    esi
c000f3a5:	5f                   	pop    edi
c000f3a6:	c3                   	ret    
c000f3a7:	90                   	nop

c000f3a8 <findDataTable(unsigned char*, char*)>:
c000f3a8:	83 ec 1c             	sub    esp,0x1c
c000f3ab:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f3b0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f3b6:	83 e0 04             	and    eax,0x4
c000f3b9:	0f b6 c0             	movzx  eax,al
c000f3bc:	85 c0                	test   eax,eax
c000f3be:	75 08                	jne    c000f3c8 <findDataTable(unsigned char*, char*)+0x20>
c000f3c0:	b8 00 00 00 00       	mov    eax,0x0
c000f3c5:	eb 5d                	jmp    c000f424 <findDataTable(unsigned char*, char*)+0x7c>
c000f3c7:	90                   	nop
c000f3c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f3d0:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f3d5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f3d9:	7d 41                	jge    c000f41c <findDataTable(unsigned char*, char*)+0x74>
c000f3db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3df:	c1 e0 03             	shl    eax,0x3
c000f3e2:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f3e7:	83 ec 04             	sub    esp,0x4
c000f3ea:	6a 04                	push   0x4
c000f3ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3f0:	50                   	push   eax
c000f3f1:	e8 8a 0f ff ff       	call   c0000380 <memcmp>
c000f3f6:	83 c4 10             	add    esp,0x10
c000f3f9:	85 c0                	test   eax,eax
c000f3fb:	0f 94 c0             	sete   al
c000f3fe:	0f b6 c0             	movzx  eax,al
c000f401:	85 c0                	test   eax,eax
c000f403:	74 0f                	je     c000f414 <findDataTable(unsigned char*, char*)+0x6c>
c000f405:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f409:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f410:	eb 12                	jmp    c000f424 <findDataTable(unsigned char*, char*)+0x7c>
c000f412:	66 90                	xchg   ax,ax
c000f414:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f419:	eb b5                	jmp    c000f3d0 <findDataTable(unsigned char*, char*)+0x28>
c000f41b:	90                   	nop
c000f41c:	b8 00 00 00 00       	mov    eax,0x0
c000f421:	8d 76 00             	lea    esi,[esi+0x0]
c000f424:	83 c4 1c             	add    esp,0x1c
c000f427:	c3                   	ret    

c000f428 <scanMADT()>:
c000f428:	53                   	push   ebx
c000f429:	83 ec 38             	sub    esp,0x38
c000f42c:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f431:	25 00 04 00 00       	and    eax,0x400
c000f436:	74 14                	je     c000f44c <scanMADT()+0x24>
c000f438:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f43d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f443:	83 e2 fb             	and    edx,0xfffffffb
c000f446:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f44c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f451:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f457:	83 e0 04             	and    eax,0x4
c000f45a:	0f b6 c0             	movzx  eax,al
c000f45d:	85 c0                	test   eax,eax
c000f45f:	0f 84 6b 04 00 00    	je     c000f8d0 <scanMADT()+0x4a8>
c000f465:	e8 e2 fa ff ff       	call   c000ef4c <findRSDP()>
c000f46a:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f46f:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f474:	85 c0                	test   eax,eax
c000f476:	75 1c                	jne    c000f494 <scanMADT()+0x6c>
c000f478:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f47d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f483:	83 e2 fb             	and    edx,0xfffffffb
c000f486:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f48c:	e9 47 04 00 00       	jmp    c000f8d8 <scanMADT()+0x4b0>
c000f491:	8d 76 00             	lea    esi,[esi+0x0]
c000f494:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f499:	83 ec 0c             	sub    esp,0xc
c000f49c:	50                   	push   eax
c000f49d:	e8 ae fd ff ff       	call   c000f250 <findRSDT(unsigned char*)>
c000f4a2:	83 c4 10             	add    esp,0x10
c000f4a5:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f4aa:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f4af:	85 c0                	test   eax,eax
c000f4b1:	75 19                	jne    c000f4cc <scanMADT()+0xa4>
c000f4b3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4b8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4be:	83 e2 fb             	and    edx,0xfffffffb
c000f4c1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4c7:	e9 0c 04 00 00       	jmp    c000f8d8 <scanMADT()+0x4b0>
c000f4cc:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f4d1:	83 ec 0c             	sub    esp,0xc
c000f4d4:	50                   	push   eax
c000f4d5:	e8 0a fb ff ff       	call   c000efe4 <loadACPITables(unsigned char*)>
c000f4da:	83 c4 10             	add    esp,0x10
c000f4dd:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f4e2:	83 ec 08             	sub    esp,0x8
c000f4e5:	68 ac 1f 02 c0       	push   0xc0021fac
c000f4ea:	50                   	push   eax
c000f4eb:	e8 b8 fe ff ff       	call   c000f3a8 <findDataTable(unsigned char*, char*)>
c000f4f0:	83 c4 10             	add    esp,0x10
c000f4f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f4f7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f4fc:	75 1a                	jne    c000f518 <scanMADT()+0xf0>
c000f4fe:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f503:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f509:	83 e2 fe             	and    edx,0xfffffffe
c000f50c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f512:	e9 c1 03 00 00       	jmp    c000f8d8 <scanMADT()+0x4b0>
c000f517:	90                   	nop
c000f518:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f520:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f524:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f527:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f52b:	0f 87 a7 03 00 00    	ja     c000f8d8 <scanMADT()+0x4b0>
c000f531:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f539:	0f 87 99 03 00 00    	ja     c000f8d8 <scanMADT()+0x4b0>
c000f53f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f543:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f547:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f54b:	8d 50 01             	lea    edx,[eax+0x1]
c000f54e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f552:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f556:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f55a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f55e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f562:	8d 50 01             	lea    edx,[eax+0x1]
c000f565:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f569:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f56d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f571:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f575:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f57a:	83 f8 02             	cmp    eax,0x2
c000f57d:	0f 86 51 03 00 00    	jbe    c000f8d4 <scanMADT()+0x4ac>
c000f583:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f588:	85 c0                	test   eax,eax
c000f58a:	75 58                	jne    c000f5e4 <scanMADT()+0x1bc>
c000f58c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f590:	8d 50 01             	lea    edx,[eax+0x1]
c000f593:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f597:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f59d:	0f b6 d2             	movzx  edx,dl
c000f5a0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f5a4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f5a8:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f5ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5b2:	8d 50 01             	lea    edx,[eax+0x1]
c000f5b5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5b9:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f5bf:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f5c2:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f5c8:	0f b6 d2             	movzx  edx,dl
c000f5cb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f5cf:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f5d3:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f5d9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f5de:	e9 d9 02 00 00       	jmp    c000f8bc <scanMADT()+0x494>
c000f5e3:	90                   	nop
c000f5e4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f5e9:	83 f8 01             	cmp    eax,0x1
c000f5ec:	0f 85 1a 01 00 00    	jne    c000f70c <scanMADT()+0x2e4>
c000f5f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5f6:	8d 50 01             	lea    edx,[eax+0x1]
c000f5f9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5fd:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f603:	0f b6 d2             	movzx  edx,dl
c000f606:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f60a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f60e:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f614:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f619:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f61d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f621:	01 d0                	add    eax,edx
c000f623:	83 c0 2c             	add    eax,0x2c
c000f626:	8a 00                	mov    al,BYTE PTR [eax]
c000f628:	0f b6 d0             	movzx  edx,al
c000f62b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f62f:	8d 48 01             	lea    ecx,[eax+0x1]
c000f632:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f636:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f63a:	0f b6 c0             	movzx  eax,al
c000f63d:	c1 e0 08             	shl    eax,0x8
c000f640:	89 d1                	mov    ecx,edx
c000f642:	09 c1                	or     ecx,eax
c000f644:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f648:	8d 50 02             	lea    edx,[eax+0x2]
c000f64b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f64f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f653:	0f b6 c0             	movzx  eax,al
c000f656:	c1 e0 10             	shl    eax,0x10
c000f659:	09 c1                	or     ecx,eax
c000f65b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f65f:	8d 50 03             	lea    edx,[eax+0x3]
c000f662:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f666:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f66a:	0f b6 c0             	movzx  eax,al
c000f66d:	c1 e0 18             	shl    eax,0x18
c000f670:	09 c1                	or     ecx,eax
c000f672:	89 ca                	mov    edx,ecx
c000f674:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f679:	0f b6 c0             	movzx  eax,al
c000f67c:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f683:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f688:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f68c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f690:	01 d0                	add    eax,edx
c000f692:	83 c0 2c             	add    eax,0x2c
c000f695:	8a 00                	mov    al,BYTE PTR [eax]
c000f697:	0f b6 d0             	movzx  edx,al
c000f69a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f69e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f6a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6a5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f6a9:	0f b6 c0             	movzx  eax,al
c000f6ac:	c1 e0 08             	shl    eax,0x8
c000f6af:	89 d1                	mov    ecx,edx
c000f6b1:	09 c1                	or     ecx,eax
c000f6b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6b7:	8d 50 02             	lea    edx,[eax+0x2]
c000f6ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6be:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6c2:	0f b6 c0             	movzx  eax,al
c000f6c5:	c1 e0 10             	shl    eax,0x10
c000f6c8:	09 c1                	or     ecx,eax
c000f6ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6ce:	8d 50 03             	lea    edx,[eax+0x3]
c000f6d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6d5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6d9:	0f b6 c0             	movzx  eax,al
c000f6dc:	c1 e0 18             	shl    eax,0x18
c000f6df:	09 c1                	or     ecx,eax
c000f6e1:	89 ca                	mov    edx,ecx
c000f6e3:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f6e8:	0f b6 c0             	movzx  eax,al
c000f6eb:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f6f2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f6f7:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f6fc:	83 c0 01             	add    eax,0x1
c000f6ff:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f704:	e9 b3 01 00 00       	jmp    c000f8bc <scanMADT()+0x494>
c000f709:	8d 76 00             	lea    esi,[esi+0x0]
c000f70c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f711:	83 f8 02             	cmp    eax,0x2
c000f714:	0f 85 ea 00 00 00    	jne    c000f804 <scanMADT()+0x3dc>
c000f71a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f71e:	8d 50 01             	lea    edx,[eax+0x1]
c000f721:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f725:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f729:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f72d:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f731:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f735:	8d 50 01             	lea    edx,[eax+0x1]
c000f738:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f73c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f740:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f744:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f748:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f74c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f750:	01 d0                	add    eax,edx
c000f752:	83 c0 2c             	add    eax,0x2c
c000f755:	8a 00                	mov    al,BYTE PTR [eax]
c000f757:	0f b6 d0             	movzx  edx,al
c000f75a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f75e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f761:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f765:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f769:	0f b6 c0             	movzx  eax,al
c000f76c:	c1 e0 08             	shl    eax,0x8
c000f76f:	89 d1                	mov    ecx,edx
c000f771:	09 c1                	or     ecx,eax
c000f773:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f777:	8d 50 02             	lea    edx,[eax+0x2]
c000f77a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f77e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f782:	0f b6 c0             	movzx  eax,al
c000f785:	c1 e0 10             	shl    eax,0x10
c000f788:	09 c1                	or     ecx,eax
c000f78a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f78e:	8d 50 03             	lea    edx,[eax+0x3]
c000f791:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f795:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f799:	0f b6 c0             	movzx  eax,al
c000f79c:	c1 e0 18             	shl    eax,0x18
c000f79f:	09 c8                	or     eax,ecx
c000f7a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f7a5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f7aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7b2:	01 d0                	add    eax,edx
c000f7b4:	83 c0 2c             	add    eax,0x2c
c000f7b7:	8a 00                	mov    al,BYTE PTR [eax]
c000f7b9:	0f b6 c0             	movzx  eax,al
c000f7bc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f7c0:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f7c3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7c7:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f7cb:	0f b6 d2             	movzx  edx,dl
c000f7ce:	c1 e2 08             	shl    edx,0x8
c000f7d1:	09 d0                	or     eax,edx
c000f7d3:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f7d8:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f7dd:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f7e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f7e6:	88 90 c8 36 02 c0    	mov    BYTE PTR [eax-0x3ffdc938],dl
c000f7ec:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f7f1:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f7f6:	66 89 84 12 c0 bb 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd4440],ax
c000f7fe:	e9 b9 00 00 00       	jmp    c000f8bc <scanMADT()+0x494>
c000f803:	90                   	nop
c000f804:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f809:	83 f8 04             	cmp    eax,0x4
c000f80c:	0f 85 9a 00 00 00    	jne    c000f8ac <scanMADT()+0x484>
c000f812:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f816:	8d 50 01             	lea    edx,[eax+0x1]
c000f819:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f81d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f821:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f825:	0f b6 c0             	movzx  eax,al
c000f828:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f82c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f830:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f834:	01 d0                	add    eax,edx
c000f836:	83 c0 2c             	add    eax,0x2c
c000f839:	8a 00                	mov    al,BYTE PTR [eax]
c000f83b:	0f b6 d0             	movzx  edx,al
c000f83e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f842:	8d 48 01             	lea    ecx,[eax+0x1]
c000f845:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f849:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f84d:	0f b6 c0             	movzx  eax,al
c000f850:	c1 e0 08             	shl    eax,0x8
c000f853:	09 d0                	or     eax,edx
c000f855:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f859:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f85e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f862:	8d 50 01             	lea    edx,[eax+0x1]
c000f865:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f869:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f86d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f871:	0f b6 c0             	movzx  eax,al
c000f874:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f87c:	c1 e0 08             	shl    eax,0x8
c000f87f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f883:	89 c1                	mov    ecx,eax
c000f885:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f889:	c1 e0 18             	shl    eax,0x18
c000f88c:	89 c3                	mov    ebx,eax
c000f88e:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f893:	8d 50 01             	lea    edx,[eax+0x1]
c000f896:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f89c:	09 d9                	or     ecx,ebx
c000f89e:	89 ca                	mov    edx,ecx
c000f8a0:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f8a7:	eb 13                	jmp    c000f8bc <scanMADT()+0x494>
c000f8a9:	8d 76 00             	lea    esi,[esi+0x0]
c000f8ac:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f8b1:	83 f8 05             	cmp    eax,0x5
c000f8b4:	75 06                	jne    c000f8bc <scanMADT()+0x494>
c000f8b6:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f8bb:	90                   	nop
c000f8bc:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f8c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f8c5:	01 d0                	add    eax,edx
c000f8c7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f8cb:	e9 50 fc ff ff       	jmp    c000f520 <scanMADT()+0xf8>
c000f8d0:	90                   	nop
c000f8d1:	eb 05                	jmp    c000f8d8 <scanMADT()+0x4b0>
c000f8d3:	90                   	nop
c000f8d4:	90                   	nop
c000f8d5:	8d 76 00             	lea    esi,[esi+0x0]
c000f8d8:	83 c4 38             	add    esp,0x38
c000f8db:	5b                   	pop    ebx
c000f8dc:	c3                   	ret    
c000f8dd:	90                   	nop
c000f8de:	66 90                	xchg   ax,ax

c000f8e0 <ACPI::ACPI()>:
c000f8e0:	83 ec 0c             	sub    esp,0xc
c000f8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8e7:	83 ec 08             	sub    esp,0x8
c000f8ea:	68 b1 1f 02 c0       	push   0xc0021fb1
c000f8ef:	50                   	push   eax
c000f8f0:	e8 65 d2 ff ff       	call   c000cb5a <Device::Device(char const*)>
c000f8f5:	83 c4 10             	add    esp,0x10
c000f8f8:	ba 20 21 02 c0       	mov    edx,0xc0022120
c000f8fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f901:	89 10                	mov    DWORD PTR [eax],edx
c000f903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f907:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f90e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f912:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f91c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f920:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f92a:	e8 f9 fa ff ff       	call   c000f428 <scanMADT()>
c000f92f:	90                   	nop
c000f930:	83 c4 0c             	add    esp,0xc
c000f933:	c3                   	ret    

c000f934 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f934:	83 ec 2c             	sub    esp,0x2c
c000f937:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f93b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f93f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f943:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f947:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f94c:	88 d0                	mov    al,dl
c000f94e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f952:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f957:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f95f:	90                   	nop
c000f960:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f964:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f96a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f96e:	0f 8d b0 00 00 00    	jge    c000fa24 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f974:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f978:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f97c:	83 c2 2a             	add    edx,0x2a
c000f97f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f983:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f988:	0f b7 c0             	movzx  eax,ax
c000f98b:	39 c2                	cmp    edx,eax
c000f98d:	0f 85 85 00 00 00    	jne    c000fa18 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f993:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f997:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f99b:	83 c2 2a             	add    edx,0x2a
c000f99e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f9a2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f9a7:	0f b6 c0             	movzx  eax,al
c000f9aa:	39 c2                	cmp    edx,eax
c000f9ac:	75 6a                	jne    c000fa18 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f9ae:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f9b3:	85 c0                	test   eax,eax
c000f9b5:	74 3d                	je     c000f9f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f9b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9bf:	83 c2 2a             	add    edx,0x2a
c000f9c2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f9c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f9cd:	39 c2                	cmp    edx,eax
c000f9cf:	74 13                	je     c000f9e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f9d1:	83 ec 0c             	sub    esp,0xc
c000f9d4:	68 2c 1f 02 c0       	push   0xc0021f2c
c000f9d9:	e8 3d 1c 00 00       	call   c001161b <KePanic(char const*)>
c000f9de:	83 c4 10             	add    esp,0x10
c000f9e1:	8d 76 00             	lea    esi,[esi+0x0]
c000f9e4:	83 ec 0c             	sub    esp,0xc
c000f9e7:	68 b6 1f 02 c0       	push   0xc0021fb6
c000f9ec:	e8 2a 1c 00 00       	call   c001161b <KePanic(char const*)>
c000f9f1:	83 c4 10             	add    esp,0x10
c000f9f4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f9f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa00:	83 c2 2a             	add    edx,0x2a
c000fa03:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000fa07:	8b 02                	mov    eax,DWORD PTR [edx]
c000fa09:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000fa0c:	89 01                	mov    DWORD PTR [ecx],eax
c000fa0e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000fa11:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fa16:	66 90                	xchg   ax,ax
c000fa18:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000fa1d:	e9 3e ff ff ff       	jmp    c000f960 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000fa22:	66 90                	xchg   ax,ax
c000fa24:	90                   	nop
c000fa25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa29:	83 c4 2c             	add    esp,0x2c
c000fa2c:	c2 04 00             	ret    0x4
c000fa2f:	90                   	nop

c000fa30 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000fa30:	83 ec 1c             	sub    esp,0x1c
c000fa33:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa37:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fa3b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fa3f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000fa44:	88 c8                	mov    al,cl
c000fa46:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000fa4a:	88 d0                	mov    al,dl
c000fa4c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fa50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa54:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa5e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fa61:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000fa65:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000fa69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa6d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa73:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fa77:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000fa7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa7e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000fa83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa87:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa8d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fa91:	83 c0 01             	add    eax,0x1
c000fa94:	88 c1                	mov    cl,al
c000fa96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa9a:	83 c2 2a             	add    edx,0x2a
c000fa9d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000faa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faa5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000faab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faaf:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fab2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fab6:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000faba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fabe:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fac4:	8d 50 01             	lea    edx,[eax+0x1]
c000fac7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000facb:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fad1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fad5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fadb:	3d 00 02 00 00       	cmp    eax,0x200
c000fae0:	75 12                	jne    c000faf4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000fae2:	83 ec 0c             	sub    esp,0xc
c000fae5:	68 c5 1f 02 c0       	push   0xc0021fc5
c000faea:	e8 2c 1b 00 00       	call   c001161b <KePanic(char const*)>
c000faef:	83 c4 10             	add    esp,0x10
c000faf2:	66 90                	xchg   ax,ax
c000faf4:	90                   	nop
c000faf5:	83 c4 1c             	add    esp,0x1c
c000faf8:	c3                   	ret    
c000faf9:	90                   	nop
c000fafa:	66 90                	xchg   ax,ax

c000fafc <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fafc:	b8 00 00 00 00       	mov    eax,0x0
c000fb01:	c3                   	ret    
c000fb02:	66 90                	xchg   ax,ax

c000fb04 <ACPI::detectPCI()>:
c000fb04:	53                   	push   ebx
c000fb05:	83 ec 28             	sub    esp,0x28
c000fb08:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fb0d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fb12:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fb17:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fb1d:	83 e0 04             	and    eax,0x4
c000fb20:	0f b6 c0             	movzx  eax,al
c000fb23:	85 c0                	test   eax,eax
c000fb25:	74 2d                	je     c000fb54 <ACPI::detectPCI()+0x50>
c000fb27:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fb2c:	83 ec 08             	sub    esp,0x8
c000fb2f:	68 e2 1f 02 c0       	push   0xc0021fe2
c000fb34:	50                   	push   eax
c000fb35:	e8 6e f8 ff ff       	call   c000f3a8 <findDataTable(unsigned char*, char*)>
c000fb3a:	83 c4 10             	add    esp,0x10
c000fb3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fb41:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fb46:	74 0c                	je     c000fb54 <ACPI::detectPCI()+0x50>
c000fb48:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb4d:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb52:	66 90                	xchg   ax,ax
c000fb54:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fb5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb60:	8a 00                	mov    al,BYTE PTR [eax]
c000fb62:	0f b6 c0             	movzx  eax,al
c000fb65:	83 f8 01             	cmp    eax,0x1
c000fb68:	75 0e                	jne    c000fb78 <ACPI::detectPCI()+0x74>
c000fb6a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb6f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb74:	eb 2e                	jmp    c000fba4 <ACPI::detectPCI()+0xa0>
c000fb76:	66 90                	xchg   ax,ax
c000fb78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb7c:	8a 00                	mov    al,BYTE PTR [eax]
c000fb7e:	0f b6 c0             	movzx  eax,al
c000fb81:	83 f8 02             	cmp    eax,0x2
c000fb84:	75 1e                	jne    c000fba4 <ACPI::detectPCI()+0xa0>
c000fb86:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb8b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fb90:	85 c0                	test   eax,eax
c000fb92:	74 10                	je     c000fba4 <ACPI::detectPCI()+0xa0>
c000fb94:	83 ec 0c             	sub    esp,0xc
c000fb97:	68 5c 1f 02 c0       	push   0xc0021f5c
c000fb9c:	e8 7a 1a 00 00       	call   c001161b <KePanic(char const*)>
c000fba1:	83 c4 10             	add    esp,0x10
c000fba4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fba8:	83 f0 01             	xor    eax,0x1
c000fbab:	0f b6 c0             	movzx  eax,al
c000fbae:	85 c0                	test   eax,eax
c000fbb0:	74 46                	je     c000fbf8 <ACPI::detectPCI()+0xf4>
c000fbb2:	e8 79 05 ff ff       	call   c0000130 <manualPCIProbe>
c000fbb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fbbb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fbc0:	75 0e                	jne    c000fbd0 <ACPI::detectPCI()+0xcc>
c000fbc2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbc7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fbcc:	eb 2a                	jmp    c000fbf8 <ACPI::detectPCI()+0xf4>
c000fbce:	66 90                	xchg   ax,ax
c000fbd0:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fbd5:	75 21                	jne    c000fbf8 <ACPI::detectPCI()+0xf4>
c000fbd7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbdc:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fbe1:	85 c0                	test   eax,eax
c000fbe3:	74 13                	je     c000fbf8 <ACPI::detectPCI()+0xf4>
c000fbe5:	83 ec 0c             	sub    esp,0xc
c000fbe8:	68 5c 1f 02 c0       	push   0xc0021f5c
c000fbed:	e8 29 1a 00 00       	call   c001161b <KePanic(char const*)>
c000fbf2:	83 c4 10             	add    esp,0x10
c000fbf5:	8d 76 00             	lea    esi,[esi+0x0]
c000fbf8:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fbfd:	85 c0                	test   eax,eax
c000fbff:	0f 84 87 00 00 00    	je     c000fc8c <ACPI::detectPCI()+0x188>
c000fc05:	83 ec 0c             	sub    esp,0xc
c000fc08:	68 e7 1f 02 c0       	push   0xc0021fe7
c000fc0d:	e8 09 13 00 00       	call   c0010f1b <KeSetBootMessage(char const*)>
c000fc12:	83 c4 10             	add    esp,0x10
c000fc15:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fc1d:	83 ec 0c             	sub    esp,0xc
c000fc20:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fc24:	e8 8d 7e ff ff       	call   c0007ab6 <malloc>
c000fc29:	83 c4 10             	add    esp,0x10
c000fc2c:	89 c3                	mov    ebx,eax
c000fc2e:	83 ec 0c             	sub    esp,0xc
c000fc31:	53                   	push   ebx
c000fc32:	e8 5d b5 00 00       	call   c001b194 <PCI::PCI()>
c000fc37:	83 c4 10             	add    esp,0x10
c000fc3a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fc3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc42:	83 ec 08             	sub    esp,0x8
c000fc45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fc49:	50                   	push   eax
c000fc4a:	e8 73 cd ff ff       	call   c000c9c2 <Device::addChild(Device*)>
c000fc4f:	83 c4 10             	add    esp,0x10
c000fc52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc56:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc58:	83 c0 08             	add    eax,0x8
c000fc5b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc5d:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fc62:	85 d2                	test   edx,edx
c000fc64:	74 0a                	je     c000fc70 <ACPI::detectPCI()+0x16c>
c000fc66:	ba 01 00 00 00       	mov    edx,0x1
c000fc6b:	eb 0b                	jmp    c000fc78 <ACPI::detectPCI()+0x174>
c000fc6d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc70:	ba 02 00 00 00       	mov    edx,0x2
c000fc75:	8d 76 00             	lea    esi,[esi+0x0]
c000fc78:	6a 00                	push   0x0
c000fc7a:	6a 00                	push   0x0
c000fc7c:	52                   	push   edx
c000fc7d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc81:	ff d0                	call   eax
c000fc83:	83 c4 10             	add    esp,0x10
c000fc86:	e9 91 00 00 00       	jmp    c000fd1c <ACPI::detectPCI()+0x218>
c000fc8b:	90                   	nop
c000fc8c:	83 ec 0c             	sub    esp,0xc
c000fc8f:	68 ff 1f 02 c0       	push   0xc0021fff
c000fc94:	e8 82 12 00 00       	call   c0010f1b <KeSetBootMessage(char const*)>
c000fc99:	83 c4 10             	add    esp,0x10
c000fc9c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fca3:	83 ec 0c             	sub    esp,0xc
c000fca6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fcaa:	e8 07 7e ff ff       	call   c0007ab6 <malloc>
c000fcaf:	83 c4 10             	add    esp,0x10
c000fcb2:	89 c3                	mov    ebx,eax
c000fcb4:	83 ec 0c             	sub    esp,0xc
c000fcb7:	53                   	push   ebx
c000fcb8:	e8 71 c0 00 00       	call   c001bd2e <IDE::IDE()>
c000fcbd:	83 c4 10             	add    esp,0x10
c000fcc0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fcc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fcc8:	83 ec 08             	sub    esp,0x8
c000fccb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fccf:	50                   	push   eax
c000fcd0:	e8 ed cc ff ff       	call   c000c9c2 <Device::addChild(Device*)>
c000fcd5:	83 c4 10             	add    esp,0x10
c000fcd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcdc:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fce6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcea:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fcf3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcf7:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fd00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd04:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd06:	83 c0 08             	add    eax,0x8
c000fd09:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd0b:	6a 00                	push   0x0
c000fd0d:	6a 00                	push   0x0
c000fd0f:	6a 00                	push   0x0
c000fd11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd15:	ff d0                	call   eax
c000fd17:	83 c4 10             	add    esp,0x10
c000fd1a:	66 90                	xchg   ax,ax
c000fd1c:	90                   	nop
c000fd1d:	83 c4 28             	add    esp,0x28
c000fd20:	5b                   	pop    ebx
c000fd21:	c3                   	ret    
c000fd22:	66 90                	xchg   ax,ax

c000fd24 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fd24:	83 ec 1c             	sub    esp,0x1c
c000fd27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd2b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fd2e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fd32:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fd37:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fd3c:	83 ec 08             	sub    esp,0x8
c000fd3f:	52                   	push   edx
c000fd40:	50                   	push   eax
c000fd41:	e8 32 74 ff ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c000fd46:	83 c4 10             	add    esp,0x10
c000fd49:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fd4d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fd52:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fd57:	83 ec 04             	sub    esp,0x4
c000fd5a:	6a 01                	push   0x1
c000fd5c:	52                   	push   edx
c000fd5d:	50                   	push   eax
c000fd5e:	e8 2f 75 ff ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fd63:	83 c4 10             	add    esp,0x10
c000fd66:	90                   	nop
c000fd67:	83 c4 1c             	add    esp,0x1c
c000fd6a:	c3                   	ret    
c000fd6b:	90                   	nop

c000fd6c <ACPI::sleep()>:
c000fd6c:	83 ec 0c             	sub    esp,0xc
c000fd6f:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fd74:	85 c0                	test   eax,eax
c000fd76:	74 08                	je     c000fd80 <ACPI::sleep()+0x14>
c000fd78:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fd7d:	ff d0                	call   eax
c000fd7f:	90                   	nop
c000fd80:	90                   	nop
c000fd81:	83 c4 0c             	add    esp,0xc
c000fd84:	c3                   	ret    
c000fd85:	90                   	nop
c000fd86:	66 90                	xchg   ax,ax

c000fd88 <ACPI::open(int, int, void*)>:
c000fd88:	57                   	push   edi
c000fd89:	56                   	push   esi
c000fd8a:	53                   	push   ebx
c000fd8b:	81 ec 70 01 00 00    	sub    esp,0x170
c000fd91:	83 ec 0c             	sub    esp,0xc
c000fd94:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fd9b:	e8 64 fd ff ff       	call   c000fb04 <ACPI::detectPCI()>
c000fda0:	83 c4 10             	add    esp,0x10
c000fda3:	83 ec 0c             	sub    esp,0xc
c000fda6:	68 84 1f 02 c0       	push   0xc0021f84
c000fdab:	e8 6b 11 00 00       	call   c0010f1b <KeSetBootMessage(char const*)>
c000fdb0:	83 c4 10             	add    esp,0x10
c000fdb3:	b8 4c 05 00 00       	mov    eax,0x54c
c000fdb8:	8a 00                	mov    al,BYTE PTR [eax]
c000fdba:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fdc1:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fdc9:	83 f8 01             	cmp    eax,0x1
c000fdcc:	75 12                	jne    c000fde0 <ACPI::open(int, int, void*)+0x58>
c000fdce:	83 ec 0c             	sub    esp,0xc
c000fdd1:	68 14 20 02 c0       	push   0xc0022014
c000fdd6:	e8 06 4e 00 00       	call   c0014be1 <Thr::loadKernelSymbolTable(char const*)>
c000fddb:	83 c4 10             	add    esp,0x10
c000fdde:	eb 34                	jmp    c000fe14 <ACPI::open(int, int, void*)+0x8c>
c000fde0:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fde8:	3d bb 00 00 00       	cmp    eax,0xbb
c000fded:	75 15                	jne    c000fe04 <ACPI::open(int, int, void*)+0x7c>
c000fdef:	83 ec 0c             	sub    esp,0xc
c000fdf2:	68 32 20 02 c0       	push   0xc0022032
c000fdf7:	e8 e5 4d 00 00       	call   c0014be1 <Thr::loadKernelSymbolTable(char const*)>
c000fdfc:	83 c4 10             	add    esp,0x10
c000fdff:	eb 13                	jmp    c000fe14 <ACPI::open(int, int, void*)+0x8c>
c000fe01:	8d 76 00             	lea    esi,[esi+0x0]
c000fe04:	83 ec 0c             	sub    esp,0xc
c000fe07:	68 50 20 02 c0       	push   0xc0022050
c000fe0c:	e8 0a 18 00 00       	call   c001161b <KePanic(char const*)>
c000fe11:	83 c4 10             	add    esp,0x10
c000fe14:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fe1c:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fe27:	83 ec 0c             	sub    esp,0xc
c000fe2a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fe31:	e8 80 7c ff ff       	call   c0007ab6 <malloc>
c000fe36:	83 c4 10             	add    esp,0x10
c000fe39:	89 c3                	mov    ebx,eax
c000fe3b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000fe40:	83 ec 04             	sub    esp,0x4
c000fe43:	50                   	push   eax
c000fe44:	68 6a 20 02 c0       	push   0xc002206a
c000fe49:	53                   	push   ebx
c000fe4a:	e8 f9 bc ff ff       	call   c000bb48 <File::File(char const*, Process*)>
c000fe4f:	83 c4 10             	add    esp,0x10
c000fe52:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fe59:	83 ec 08             	sub    esp,0x8
c000fe5c:	6a 01                	push   0x1
c000fe5e:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fe65:	e8 fc bc ff ff       	call   c000bb66 <File::open(FileOpenMode)>
c000fe6a:	83 c4 10             	add    esp,0x10
c000fe6d:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000fe74:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000fe7c:	75 16                	jne    c000fe94 <ACPI::open(int, int, void*)+0x10c>
c000fe7e:	83 ec 0c             	sub    esp,0xc
c000fe81:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fe88:	e8 37 bd ff ff       	call   c000bbc4 <File::close()>
c000fe8d:	83 c4 10             	add    esp,0x10
c000fe90:	eb 0a                	jmp    c000fe9c <ACPI::open(int, int, void*)+0x114>
c000fe92:	66 90                	xchg   ax,ax
c000fe94:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000fe9c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000fea4:	74 1e                	je     c000fec4 <ACPI::open(int, int, void*)+0x13c>
c000fea6:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000fead:	8b 00                	mov    eax,DWORD PTR [eax]
c000feaf:	83 c0 08             	add    eax,0x8
c000feb2:	8b 00                	mov    eax,DWORD PTR [eax]
c000feb4:	83 ec 0c             	sub    esp,0xc
c000feb7:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000febe:	ff d0                	call   eax
c000fec0:	83 c4 10             	add    esp,0x10
c000fec3:	90                   	nop
c000fec4:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000fecb:	83 f0 01             	xor    eax,0x1
c000fece:	0f b6 c0             	movzx  eax,al
c000fed1:	85 c0                	test   eax,eax
c000fed3:	74 43                	je     c000ff18 <ACPI::open(int, int, void*)+0x190>
c000fed5:	83 ec 0c             	sub    esp,0xc
c000fed8:	68 88 20 02 c0       	push   0xc0022088
c000fedd:	e8 39 10 00 00       	call   c0010f1b <KeSetBootMessage(char const*)>
c000fee2:	83 c4 10             	add    esp,0x10
c000fee5:	83 ec 04             	sub    esp,0x4
c000fee8:	6a 0c                	push   0xc
c000feea:	68 a3 20 02 c0       	push   0xc00220a3
c000feef:	68 b4 20 02 c0       	push   0xc00220b4
c000fef4:	e8 6b 3f 00 00       	call   c0013e64 <Reg::readIntWithDefault(char*, char*, int)>
c000fef9:	83 c4 10             	add    esp,0x10
c000fefc:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ff03:	83 ec 0c             	sub    esp,0xc
c000ff06:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ff0d:	e8 2a 99 ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000ff12:	83 c4 10             	add    esp,0x10
c000ff15:	8d 76 00             	lea    esi,[esi+0x0]
c000ff18:	83 ec 0c             	sub    esp,0xc
c000ff1b:	68 15 0b 02 c0       	push   0xc0020b15
c000ff20:	e8 f6 0f 00 00       	call   c0010f1b <KeSetBootMessage(char const*)>
c000ff25:	83 c4 10             	add    esp,0x10
c000ff28:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ff2f:	83 ec 08             	sub    esp,0x8
c000ff32:	6a 13                	push   0x13
c000ff34:	50                   	push   eax
c000ff35:	e8 a0 cd ff ff       	call   c000ccda <getDevicesOfType(DeviceType)>
c000ff3a:	83 c4 0c             	add    esp,0xc
c000ff3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ff40:	83 ec 0c             	sub    esp,0xc
c000ff43:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ff4a:	50                   	push   eax
c000ff4b:	e8 c0 ff 00 00       	call   c001ff10 <LinkedList<Device>::isEmpty()>
c000ff50:	83 c4 10             	add    esp,0x10
c000ff53:	83 f0 01             	xor    eax,0x1
c000ff56:	0f b6 c0             	movzx  eax,al
c000ff59:	85 c0                	test   eax,eax
c000ff5b:	0f 84 47 01 00 00    	je     c00100a8 <ACPI::open(int, int, void*)+0x320>
c000ff61:	83 ec 0c             	sub    esp,0xc
c000ff64:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ff6b:	50                   	push   eax
c000ff6c:	e8 bb ff 00 00       	call   c001ff2c <LinkedList<Device>::getFirstElement()>
c000ff71:	83 c4 10             	add    esp,0x10
c000ff74:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ff7b:	83 ec 0c             	sub    esp,0xc
c000ff7e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ff85:	50                   	push   eax
c000ff86:	e8 a9 ff 00 00       	call   c001ff34 <LinkedList<Device>::removeFirst()>
c000ff8b:	83 c4 10             	add    esp,0x10
c000ff8e:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ff95:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ff9c:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ffa3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffa7:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ffad:	ba 09 00 00 00       	mov    edx,0x9
c000ffb2:	fc                   	cld    
c000ffb3:	89 c7                	mov    edi,eax
c000ffb5:	89 de                	mov    esi,ebx
c000ffb7:	89 d1                	mov    ecx,edx
c000ffb9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ffbb:	83 ec 08             	sub    esp,0x8
c000ffbe:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ffc2:	50                   	push   eax
c000ffc3:	83 ec 24             	sub    esp,0x24
c000ffc6:	89 e0                	mov    eax,esp
c000ffc8:	89 c3                	mov    ebx,eax
c000ffca:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ffce:	ba 09 00 00 00       	mov    edx,0x9
c000ffd3:	89 df                	mov    edi,ebx
c000ffd5:	89 c6                	mov    esi,eax
c000ffd7:	89 d1                	mov    ecx,edx
c000ffd9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ffdb:	e8 9e b6 00 00       	call   c001b67e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ffe0:	83 c4 30             	add    esp,0x30
c000ffe3:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ffea:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000fff2:	0f 84 48 ff ff ff    	je     c000ff40 <ACPI::open(int, int, void*)+0x1b8>
c000fff8:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0010003:	83 ec 0c             	sub    esp,0xc
c0010006:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001000d:	e8 a4 7a ff ff       	call   c0007ab6 <malloc>
c0010012:	83 c4 10             	add    esp,0x10
c0010015:	89 c3                	mov    ebx,eax
c0010017:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001001c:	83 ec 04             	sub    esp,0x4
c001001f:	50                   	push   eax
c0010020:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0010027:	53                   	push   ebx
c0010028:	e8 1b bb ff ff       	call   c000bb48 <File::File(char const*, Process*)>
c001002d:	83 c4 10             	add    esp,0x10
c0010030:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0010037:	83 ec 0c             	sub    esp,0xc
c001003a:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0010041:	e8 e4 bd ff ff       	call   c000be2a <File::exists()>
c0010046:	83 c4 10             	add    esp,0x10
c0010049:	0f b6 c0             	movzx  eax,al
c001004c:	85 c0                	test   eax,eax
c001004e:	74 28                	je     c0010078 <ACPI::open(int, int, void*)+0x2f0>
c0010050:	83 ec 08             	sub    esp,0x8
c0010053:	6a 01                	push   0x1
c0010055:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001005c:	e8 fa 55 00 00       	call   c001565b <Thr::loadDLL(char const*, bool)>
c0010061:	83 c4 10             	add    esp,0x10
c0010064:	83 ec 08             	sub    esp,0x8
c0010067:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001006e:	50                   	push   eax
c001006f:	e8 18 58 00 00       	call   c001588c <Thr::executeDLL(unsigned long, void*)>
c0010074:	83 c4 10             	add    esp,0x10
c0010077:	90                   	nop
c0010078:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0010080:	0f 84 ba fe ff ff    	je     c000ff40 <ACPI::open(int, int, void*)+0x1b8>
c0010086:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c001008d:	8b 00                	mov    eax,DWORD PTR [eax]
c001008f:	83 c0 08             	add    eax,0x8
c0010092:	8b 00                	mov    eax,DWORD PTR [eax]
c0010094:	83 ec 0c             	sub    esp,0xc
c0010097:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001009e:	ff d0                	call   eax
c00100a0:	83 c4 10             	add    esp,0x10
c00100a3:	e9 98 fe ff ff       	jmp    c000ff40 <ACPI::open(int, int, void*)+0x1b8>
c00100a8:	83 ec 0c             	sub    esp,0xc
c00100ab:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00100b2:	50                   	push   eax
c00100b3:	e8 54 fe 00 00       	call   c001ff0c <LinkedList<Device>::~LinkedList()>
c00100b8:	83 c4 10             	add    esp,0x10
c00100bb:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c00100c1:	83 ec 08             	sub    esp,0x8
c00100c4:	6a 01                	push   0x1
c00100c6:	68 bb 20 02 c0       	push   0xc00220bb
c00100cb:	e8 8b 55 00 00       	call   c001565b <Thr::loadDLL(char const*, bool)>
c00100d0:	83 c4 10             	add    esp,0x10
c00100d3:	83 ec 08             	sub    esp,0x8
c00100d6:	53                   	push   ebx
c00100d7:	50                   	push   eax
c00100d8:	e8 af 57 00 00       	call   c001588c <Thr::executeDLL(unsigned long, void*)>
c00100dd:	83 c4 10             	add    esp,0x10
c00100e0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00100e5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00100eb:	83 e0 04             	and    eax,0x4
c00100ee:	0f b6 c0             	movzx  eax,al
c00100f1:	85 c0                	test   eax,eax
c00100f3:	0f 84 1b 01 00 00    	je     c0010214 <ACPI::open(int, int, void*)+0x48c>
c00100f9:	83 ec 0c             	sub    esp,0xc
c00100fc:	68 d8 20 02 c0       	push   0xc00220d8
c0010101:	e8 15 0e 00 00       	call   c0010f1b <KeSetBootMessage(char const*)>
c0010106:	83 c4 10             	add    esp,0x10
c0010109:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0010114:	83 ec 0c             	sub    esp,0xc
c0010117:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001011e:	e8 93 79 ff ff       	call   c0007ab6 <malloc>
c0010123:	83 c4 10             	add    esp,0x10
c0010126:	89 c3                	mov    ebx,eax
c0010128:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001012d:	83 ec 04             	sub    esp,0x4
c0010130:	50                   	push   eax
c0010131:	68 f5 20 02 c0       	push   0xc00220f5
c0010136:	53                   	push   ebx
c0010137:	e8 0c ba ff ff       	call   c000bb48 <File::File(char const*, Process*)>
c001013c:	83 c4 10             	add    esp,0x10
c001013f:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0010146:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001014e:	74 20                	je     c0010170 <ACPI::open(int, int, void*)+0x3e8>
c0010150:	83 ec 0c             	sub    esp,0xc
c0010153:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001015a:	e8 cb bc ff ff       	call   c000be2a <File::exists()>
c001015f:	83 c4 10             	add    esp,0x10
c0010162:	0f b6 c0             	movzx  eax,al
c0010165:	85 c0                	test   eax,eax
c0010167:	74 07                	je     c0010170 <ACPI::open(int, int, void*)+0x3e8>
c0010169:	b0 01                	mov    al,0x1
c001016b:	eb 07                	jmp    c0010174 <ACPI::open(int, int, void*)+0x3ec>
c001016d:	8d 76 00             	lea    esi,[esi+0x0]
c0010170:	b0 00                	mov    al,0x0
c0010172:	66 90                	xchg   ax,ax
c0010174:	0f b6 c0             	movzx  eax,al
c0010177:	85 c0                	test   eax,eax
c0010179:	74 25                	je     c00101a0 <ACPI::open(int, int, void*)+0x418>
c001017b:	83 ec 08             	sub    esp,0x8
c001017e:	6a 01                	push   0x1
c0010180:	68 f5 20 02 c0       	push   0xc00220f5
c0010185:	e8 d1 54 00 00       	call   c001565b <Thr::loadDLL(char const*, bool)>
c001018a:	83 c4 10             	add    esp,0x10
c001018d:	83 ec 08             	sub    esp,0x8
c0010190:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0010197:	50                   	push   eax
c0010198:	e8 ef 56 00 00       	call   c001588c <Thr::executeDLL(unsigned long, void*)>
c001019d:	83 c4 10             	add    esp,0x10
c00101a0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00101a8:	74 2a                	je     c00101d4 <ACPI::open(int, int, void*)+0x44c>
c00101aa:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00101b2:	74 20                	je     c00101d4 <ACPI::open(int, int, void*)+0x44c>
c00101b4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00101bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00101bd:	83 c0 08             	add    eax,0x8
c00101c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00101c2:	83 ec 0c             	sub    esp,0xc
c00101c5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00101cc:	ff d0                	call   eax
c00101ce:	83 c4 10             	add    esp,0x10
c00101d1:	8d 76 00             	lea    esi,[esi+0x0]
c00101d4:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c00101d9:	83 ec 08             	sub    esp,0x8
c00101dc:	68 12 21 02 c0       	push   0xc0022112
c00101e1:	50                   	push   eax
c00101e2:	e8 c1 f1 ff ff       	call   c000f3a8 <findDataTable(unsigned char*, char*)>
c00101e7:	83 c4 10             	add    esp,0x10
c00101ea:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c00101f1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00101f9:	74 19                	je     c0010214 <ACPI::open(int, int, void*)+0x48c>
c00101fb:	83 ec 08             	sub    esp,0x8
c00101fe:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0010205:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001020c:	e8 13 fb ff ff       	call   c000fd24 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0010211:	83 c4 10             	add    esp,0x10
c0010214:	b8 00 00 00 00       	mov    eax,0x0
c0010219:	81 c4 70 01 00 00    	add    esp,0x170
c001021f:	5b                   	pop    ebx
c0010220:	5e                   	pop    esi
c0010221:	5f                   	pop    edi
c0010222:	c3                   	ret    
c0010223:	90                   	nop

c0010224 <CPU::close(int, int, void*)>:
c0010224:	31 c0                	xor    eax,eax
c0010226:	c3                   	ret    
c0010227:	90                   	nop

c0010228 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0010228:	60                   	pusha  
c0010229:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001022d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010231:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010235:	9c                   	pushf  
c0010236:	fa                   	cli    
c0010237:	0f 09                	wbinvd 
c0010239:	0f 30                	wrmsr  
c001023b:	9d                   	popf   
c001023c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010240:	89 02                	mov    DWORD PTR [edx],eax
c0010242:	61                   	popa   
c0010243:	c3                   	ret    

c0010244 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0010244:	60                   	pusha  
c0010245:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010249:	9c                   	pushf  
c001024a:	fa                   	cli    
c001024b:	0f 09                	wbinvd 
c001024d:	31 c0                	xor    eax,eax
c001024f:	31 d2                	xor    edx,edx
c0010251:	0f 32                	rdmsr  
c0010253:	9d                   	popf   
c0010254:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010258:	89 02                	mov    DWORD PTR [edx],eax
c001025a:	61                   	popa   
c001025b:	c3                   	ret    

c001025c <CPU::AMD_K6_writeback(int, int, int)>:
c001025c:	56                   	push   esi
c001025d:	53                   	push   ebx
c001025e:	83 ec 10             	sub    esp,0x10
c0010261:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010265:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001026a:	75 5d                	jne    c00102c9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001026c:	83 f8 08             	cmp    eax,0x8
c001026f:	75 09                	jne    c001027a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0010271:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0010276:	7e 13                	jle    c001028b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010278:	eb 30                	jmp    c00102aa <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001027a:	83 f8 06             	cmp    eax,0x6
c001027d:	7c 4a                	jl     c00102c9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001027f:	83 f8 07             	cmp    eax,0x7
c0010282:	7e 07                	jle    c001028b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010284:	83 f8 09             	cmp    eax,0x9
c0010287:	74 21                	je     c00102aa <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010289:	eb 3e                	jmp    c00102c9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001028b:	89 e6                	mov    esi,esp
c001028d:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c0010293:	56                   	push   esi
c0010294:	c1 eb 15             	shr    ebx,0x15
c0010297:	68 82 00 00 c0       	push   0xc0000082
c001029c:	83 e3 7e             	and    ebx,0x7e
c001029f:	e8 a0 ff ff ff       	call   c0010244 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00102a4:	56                   	push   esi
c00102a5:	6a 00                	push   0x0
c00102a7:	53                   	push   ebx
c00102a8:	eb 12                	jmp    c00102bc <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00102aa:	89 e3                	mov    ebx,esp
c00102ac:	53                   	push   ebx
c00102ad:	68 82 00 00 c0       	push   0xc0000082
c00102b2:	e8 8d ff ff ff       	call   c0010244 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00102b7:	53                   	push   ebx
c00102b8:	6a 00                	push   0x0
c00102ba:	6a 00                	push   0x0
c00102bc:	68 82 00 00 c0       	push   0xc0000082
c00102c1:	e8 62 ff ff ff       	call   c0010228 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00102c6:	83 c4 18             	add    esp,0x18
c00102c9:	83 c4 10             	add    esp,0x10
c00102cc:	5b                   	pop    ebx
c00102cd:	5e                   	pop    esi
c00102ce:	c3                   	ret    
c00102cf:	90                   	nop

c00102d0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00102d0:	55                   	push   ebp
c00102d1:	57                   	push   edi
c00102d2:	56                   	push   esi
c00102d3:	53                   	push   ebx
c00102d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102d8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00102dc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00102e0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00102e4:	39 05 d8 36 02 c0    	cmp    DWORD PTR ds:0xc00236d8,eax
c00102ea:	75 23                	jne    c001030f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00102ec:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c00102f1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00102f5:	89 06                	mov    DWORD PTR [esi],eax
c00102f7:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00102fc:	89 07                	mov    DWORD PTR [edi],eax
c00102fe:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c0010303:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010306:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c001030b:	89 02                	mov    DWORD PTR [edx],eax
c001030d:	eb 3f                	jmp    c001034e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001030f:	31 c9                	xor    ecx,ecx
c0010311:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010315:	0f a2                	cpuid  
c0010317:	89 06                	mov    DWORD PTR [esi],eax
c0010319:	89 1f                	mov    DWORD PTR [edi],ebx
c001031b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001031f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0010322:	89 10                	mov    DWORD PTR [eax],edx
c0010324:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010328:	a3 d8 36 02 c0       	mov    ds:0xc00236d8,eax
c001032d:	8b 06                	mov    eax,DWORD PTR [esi]
c001032f:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c0010334:	8b 07                	mov    eax,DWORD PTR [edi]
c0010336:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c001033b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001033e:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c0010343:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010347:	8b 00                	mov    eax,DWORD PTR [eax]
c0010349:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c001034e:	5b                   	pop    ebx
c001034f:	5e                   	pop    esi
c0010350:	5f                   	pop    edi
c0010351:	5d                   	pop    ebp
c0010352:	c3                   	ret    
c0010353:	90                   	nop

c0010354 <CPU::cpuidCheckEDX(unsigned int)>:
c0010354:	83 ec 10             	sub    esp,0x10
c0010357:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001035b:	50                   	push   eax
c001035c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010360:	50                   	push   eax
c0010361:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010365:	50                   	push   eax
c0010366:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001036a:	50                   	push   eax
c001036b:	6a 01                	push   0x1
c001036d:	e8 5e ff ff ff       	call   c00102d0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010372:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010376:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001037a:	0f 95 c0             	setne  al
c001037d:	83 c4 24             	add    esp,0x24
c0010380:	c3                   	ret    
c0010381:	90                   	nop

c0010382 <CPU::cpuidCheckECX(unsigned int)>:
c0010382:	83 ec 10             	sub    esp,0x10
c0010385:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010389:	50                   	push   eax
c001038a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001038e:	50                   	push   eax
c001038f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010393:	50                   	push   eax
c0010394:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010398:	50                   	push   eax
c0010399:	6a 01                	push   0x1
c001039b:	e8 30 ff ff ff       	call   c00102d0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103a4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00103a8:	0f 95 c0             	setne  al
c00103ab:	83 c4 24             	add    esp,0x24
c00103ae:	c3                   	ret    
c00103af:	90                   	nop

c00103b0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00103b0:	83 ec 10             	sub    esp,0x10
c00103b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103b7:	50                   	push   eax
c00103b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103bc:	50                   	push   eax
c00103bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103c1:	50                   	push   eax
c00103c2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103c6:	50                   	push   eax
c00103c7:	6a 07                	push   0x7
c00103c9:	e8 02 ff ff ff       	call   c00102d0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103d2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00103d6:	0f 95 c0             	setne  al
c00103d9:	83 c4 24             	add    esp,0x24
c00103dc:	c3                   	ret    
c00103dd:	90                   	nop

c00103de <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00103de:	83 ec 10             	sub    esp,0x10
c00103e1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103e5:	50                   	push   eax
c00103e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103ea:	50                   	push   eax
c00103eb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103ef:	50                   	push   eax
c00103f0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103f4:	50                   	push   eax
c00103f5:	6a 07                	push   0x7
c00103f7:	e8 d4 fe ff ff       	call   c00102d0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010400:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010404:	0f 95 c0             	setne  al
c0010407:	83 c4 24             	add    esp,0x24
c001040a:	c3                   	ret    
c001040b:	90                   	nop

c001040c <CPU::CPU()>:
c001040c:	83 ec 0c             	sub    esp,0xc
c001040f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010413:	83 ec 08             	sub    esp,0x8
c0010416:	68 35 22 02 c0       	push   0xc0022235
c001041b:	50                   	push   eax
c001041c:	e8 39 c7 ff ff       	call   c000cb5a <Device::Device(char const*)>
c0010421:	83 c4 10             	add    esp,0x10
c0010424:	ba c8 22 02 c0       	mov    edx,0xc00222c8
c0010429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001042d:	89 10                	mov    DWORD PTR [eax],edx
c001042f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010433:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001043d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010441:	05 78 01 00 00       	add    eax,0x178
c0010446:	83 ec 0c             	sub    esp,0xc
c0010449:	50                   	push   eax
c001044a:	e8 0d 6f ff ff       	call   c000735c <GDT::GDT()>
c001044f:	83 c4 10             	add    esp,0x10
c0010452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010456:	05 7c 09 00 00       	add    eax,0x97c
c001045b:	83 ec 0c             	sub    esp,0xc
c001045e:	50                   	push   eax
c001045f:	e8 48 71 ff ff       	call   c00075ac <IDT::IDT()>
c0010464:	83 c4 10             	add    esp,0x10
c0010467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001046b:	05 7c 11 00 00       	add    eax,0x117c
c0010470:	83 ec 0c             	sub    esp,0xc
c0010473:	50                   	push   eax
c0010474:	e8 cb 8a ff ff       	call   c0008f44 <TSS::TSS()>
c0010479:	83 c4 10             	add    esp,0x10
c001047c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010480:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001048b:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010495:	90                   	nop
c0010496:	83 c4 0c             	add    esp,0xc
c0010499:	c3                   	ret    

c001049a <CPU::displayFeatures()>:
c001049a:	c3                   	ret    
c001049b:	90                   	nop

c001049c <CPU::detectFeatures()>:
c001049c:	55                   	push   ebp
c001049d:	57                   	push   edi
c001049e:	56                   	push   esi
c001049f:	53                   	push   ebx
c00104a0:	83 ec 30             	sub    esp,0x30
c00104a3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00104a7:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c00104b1:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c00104b8:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00104be:	6a 0d                	push   0xd
c00104c0:	6a 00                	push   0x0
c00104c2:	55                   	push   ebp
c00104c3:	e8 28 00 ff ff       	call   c00004f0 <memset>
c00104c8:	83 c4 10             	add    esp,0x10
c00104cb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00104d0:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00104d7:	0f 84 db 05 00 00    	je     c0010ab8 <CPU::detectFeatures()+0x61c>
c00104dd:	83 ec 0c             	sub    esp,0xc
c00104e0:	89 ef                	mov    edi,ebp
c00104e2:	6a 10                	push   0x10
c00104e4:	e8 6b fe ff ff       	call   c0010354 <CPU::cpuidCheckEDX(unsigned int)>
c00104e9:	83 e0 01             	and    eax,0x1
c00104ec:	8d 14 00             	lea    edx,[eax+eax*1]
c00104ef:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104f5:	83 e0 fd             	and    eax,0xfffffffd
c00104f8:	09 d0                	or     eax,edx
c00104fa:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010500:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0010507:	e8 48 fe ff ff       	call   c0010354 <CPU::cpuidCheckEDX(unsigned int)>
c001050c:	83 e0 01             	and    eax,0x1
c001050f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010516:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001051c:	83 e0 fb             	and    eax,0xfffffffb
c001051f:	09 d0                	or     eax,edx
c0010521:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010527:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001052e:	e8 21 fe ff ff       	call   c0010354 <CPU::cpuidCheckEDX(unsigned int)>
c0010533:	83 e0 01             	and    eax,0x1
c0010536:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001053d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010543:	83 e0 f7             	and    eax,0xfffffff7
c0010546:	09 d0                	or     eax,edx
c0010548:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001054e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010555:	e8 fa fd ff ff       	call   c0010354 <CPU::cpuidCheckEDX(unsigned int)>
c001055a:	83 e0 01             	and    eax,0x1
c001055d:	c1 e0 04             	shl    eax,0x4
c0010560:	89 c2                	mov    edx,eax
c0010562:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010568:	83 e0 ef             	and    eax,0xffffffef
c001056b:	09 d0                	or     eax,edx
c001056d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010573:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001057a:	e8 d5 fd ff ff       	call   c0010354 <CPU::cpuidCheckEDX(unsigned int)>
c001057f:	83 e0 01             	and    eax,0x1
c0010582:	c1 e0 05             	shl    eax,0x5
c0010585:	89 c2                	mov    edx,eax
c0010587:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001058d:	83 e0 df             	and    eax,0xffffffdf
c0010590:	09 d0                	or     eax,edx
c0010592:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010598:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001059f:	e8 b0 fd ff ff       	call   c0010354 <CPU::cpuidCheckEDX(unsigned int)>
c00105a4:	83 e0 01             	and    eax,0x1
c00105a7:	8d 14 00             	lea    edx,[eax+eax*1]
c00105aa:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00105b0:	83 e0 fd             	and    eax,0xfffffffd
c00105b3:	09 d0                	or     eax,edx
c00105b5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00105bb:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00105c2:	e8 8d fd ff ff       	call   c0010354 <CPU::cpuidCheckEDX(unsigned int)>
c00105c7:	83 e0 01             	and    eax,0x1
c00105ca:	c1 e0 06             	shl    eax,0x6
c00105cd:	89 c2                	mov    edx,eax
c00105cf:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00105d5:	83 e0 bf             	and    eax,0xffffffbf
c00105d8:	09 d0                	or     eax,edx
c00105da:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00105e0:	58                   	pop    eax
c00105e1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105e5:	50                   	push   eax
c00105e6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105ea:	50                   	push   eax
c00105eb:	8d 74 24 28          	lea    esi,[esp+0x28]
c00105ef:	56                   	push   esi
c00105f0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105f4:	50                   	push   eax
c00105f5:	6a 00                	push   0x0
c00105f7:	e8 d4 fc ff ff       	call   c00102d0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00105fc:	b8 04 00 00 00       	mov    eax,0x4
c0010601:	89 c1                	mov    ecx,eax
c0010603:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010605:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001060b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001060f:	89 c1                	mov    ecx,eax
c0010611:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010613:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010619:	8d 74 24 38          	lea    esi,[esp+0x38]
c001061d:	89 c1                	mov    ecx,eax
c001061f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010621:	83 c4 18             	add    esp,0x18
c0010624:	68 44 21 02 c0       	push   0xc0022144
c0010629:	55                   	push   ebp
c001062a:	e8 21 01 ff ff       	call   c0000750 <strcmp>
c001062f:	83 c4 10             	add    esp,0x10
c0010632:	85 c0                	test   eax,eax
c0010634:	75 0f                	jne    c0010645 <CPU::detectFeatures()+0x1a9>
c0010636:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0010640:	e9 22 02 00 00       	jmp    c0010867 <CPU::detectFeatures()+0x3cb>
c0010645:	50                   	push   eax
c0010646:	50                   	push   eax
c0010647:	68 51 21 02 c0       	push   0xc0022151
c001064c:	55                   	push   ebp
c001064d:	e8 fe 00 ff ff       	call   c0000750 <strcmp>
c0010652:	83 c4 10             	add    esp,0x10
c0010655:	85 c0                	test   eax,eax
c0010657:	74 dd                	je     c0010636 <CPU::detectFeatures()+0x19a>
c0010659:	50                   	push   eax
c001065a:	50                   	push   eax
c001065b:	68 5e 21 02 c0       	push   0xc002215e
c0010660:	55                   	push   ebp
c0010661:	e8 ea 00 ff ff       	call   c0000750 <strcmp>
c0010666:	83 c4 10             	add    esp,0x10
c0010669:	85 c0                	test   eax,eax
c001066b:	74 2a                	je     c0010697 <CPU::detectFeatures()+0x1fb>
c001066d:	50                   	push   eax
c001066e:	50                   	push   eax
c001066f:	68 6b 21 02 c0       	push   0xc002216b
c0010674:	55                   	push   ebp
c0010675:	e8 d6 00 ff ff       	call   c0000750 <strcmp>
c001067a:	83 c4 10             	add    esp,0x10
c001067d:	85 c0                	test   eax,eax
c001067f:	74 16                	je     c0010697 <CPU::detectFeatures()+0x1fb>
c0010681:	50                   	push   eax
c0010682:	50                   	push   eax
c0010683:	68 78 21 02 c0       	push   0xc0022178
c0010688:	55                   	push   ebp
c0010689:	e8 c2 00 ff ff       	call   c0000750 <strcmp>
c001068e:	83 c4 10             	add    esp,0x10
c0010691:	85 c0                	test   eax,eax
c0010693:	74 48                	je     c00106dd <CPU::detectFeatures()+0x241>
c0010695:	eb 0f                	jmp    c00106a6 <CPU::detectFeatures()+0x20a>
c0010697:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00106a1:	e9 c1 01 00 00       	jmp    c0010867 <CPU::detectFeatures()+0x3cb>
c00106a6:	50                   	push   eax
c00106a7:	50                   	push   eax
c00106a8:	68 85 21 02 c0       	push   0xc0022185
c00106ad:	55                   	push   ebp
c00106ae:	e8 9d 00 ff ff       	call   c0000750 <strcmp>
c00106b3:	83 c4 10             	add    esp,0x10
c00106b6:	85 c0                	test   eax,eax
c00106b8:	74 23                	je     c00106dd <CPU::detectFeatures()+0x241>
c00106ba:	57                   	push   edi
c00106bb:	57                   	push   edi
c00106bc:	68 92 21 02 c0       	push   0xc0022192
c00106c1:	55                   	push   ebp
c00106c2:	e8 89 00 ff ff       	call   c0000750 <strcmp>
c00106c7:	83 c4 10             	add    esp,0x10
c00106ca:	85 c0                	test   eax,eax
c00106cc:	75 1e                	jne    c00106ec <CPU::detectFeatures()+0x250>
c00106ce:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00106d8:	e9 8a 01 00 00       	jmp    c0010867 <CPU::detectFeatures()+0x3cb>
c00106dd:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00106e7:	e9 7b 01 00 00       	jmp    c0010867 <CPU::detectFeatures()+0x3cb>
c00106ec:	56                   	push   esi
c00106ed:	56                   	push   esi
c00106ee:	68 9f 21 02 c0       	push   0xc002219f
c00106f3:	55                   	push   ebp
c00106f4:	e8 57 00 ff ff       	call   c0000750 <strcmp>
c00106f9:	83 c4 10             	add    esp,0x10
c00106fc:	85 c0                	test   eax,eax
c00106fe:	75 0f                	jne    c001070f <CPU::detectFeatures()+0x273>
c0010700:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001070a:	e9 58 01 00 00       	jmp    c0010867 <CPU::detectFeatures()+0x3cb>
c001070f:	51                   	push   ecx
c0010710:	51                   	push   ecx
c0010711:	68 5e 21 02 c0       	push   0xc002215e
c0010716:	55                   	push   ebp
c0010717:	e8 34 00 ff ff       	call   c0000750 <strcmp>
c001071c:	83 c4 10             	add    esp,0x10
c001071f:	85 c0                	test   eax,eax
c0010721:	75 0f                	jne    c0010732 <CPU::detectFeatures()+0x296>
c0010723:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001072d:	e9 35 01 00 00       	jmp    c0010867 <CPU::detectFeatures()+0x3cb>
c0010732:	52                   	push   edx
c0010733:	52                   	push   edx
c0010734:	68 ac 21 02 c0       	push   0xc00221ac
c0010739:	55                   	push   ebp
c001073a:	e8 11 00 ff ff       	call   c0000750 <strcmp>
c001073f:	83 c4 10             	add    esp,0x10
c0010742:	85 c0                	test   eax,eax
c0010744:	75 0f                	jne    c0010755 <CPU::detectFeatures()+0x2b9>
c0010746:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0010750:	e9 12 01 00 00       	jmp    c0010867 <CPU::detectFeatures()+0x3cb>
c0010755:	50                   	push   eax
c0010756:	50                   	push   eax
c0010757:	68 b9 21 02 c0       	push   0xc00221b9
c001075c:	55                   	push   ebp
c001075d:	e8 ee ff fe ff       	call   c0000750 <strcmp>
c0010762:	83 c4 10             	add    esp,0x10
c0010765:	85 c0                	test   eax,eax
c0010767:	75 0f                	jne    c0010778 <CPU::detectFeatures()+0x2dc>
c0010769:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010773:	e9 ef 00 00 00       	jmp    c0010867 <CPU::detectFeatures()+0x3cb>
c0010778:	50                   	push   eax
c0010779:	50                   	push   eax
c001077a:	68 c6 21 02 c0       	push   0xc00221c6
c001077f:	55                   	push   ebp
c0010780:	e8 cb ff fe ff       	call   c0000750 <strcmp>
c0010785:	83 c4 10             	add    esp,0x10
c0010788:	85 c0                	test   eax,eax
c001078a:	75 0f                	jne    c001079b <CPU::detectFeatures()+0x2ff>
c001078c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010796:	e9 cc 00 00 00       	jmp    c0010867 <CPU::detectFeatures()+0x3cb>
c001079b:	50                   	push   eax
c001079c:	50                   	push   eax
c001079d:	68 d3 21 02 c0       	push   0xc00221d3
c00107a2:	55                   	push   ebp
c00107a3:	e8 a8 ff fe ff       	call   c0000750 <strcmp>
c00107a8:	83 c4 10             	add    esp,0x10
c00107ab:	85 c0                	test   eax,eax
c00107ad:	75 0f                	jne    c00107be <CPU::detectFeatures()+0x322>
c00107af:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00107b9:	e9 a9 00 00 00       	jmp    c0010867 <CPU::detectFeatures()+0x3cb>
c00107be:	50                   	push   eax
c00107bf:	50                   	push   eax
c00107c0:	68 e0 21 02 c0       	push   0xc00221e0
c00107c5:	55                   	push   ebp
c00107c6:	e8 85 ff fe ff       	call   c0000750 <strcmp>
c00107cb:	83 c4 10             	add    esp,0x10
c00107ce:	85 c0                	test   eax,eax
c00107d0:	75 0f                	jne    c00107e1 <CPU::detectFeatures()+0x345>
c00107d2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00107dc:	e9 86 00 00 00       	jmp    c0010867 <CPU::detectFeatures()+0x3cb>
c00107e1:	50                   	push   eax
c00107e2:	50                   	push   eax
c00107e3:	68 ed 21 02 c0       	push   0xc00221ed
c00107e8:	55                   	push   ebp
c00107e9:	e8 62 ff fe ff       	call   c0000750 <strcmp>
c00107ee:	83 c4 10             	add    esp,0x10
c00107f1:	85 c0                	test   eax,eax
c00107f3:	75 0c                	jne    c0010801 <CPU::detectFeatures()+0x365>
c00107f5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00107ff:	eb 66                	jmp    c0010867 <CPU::detectFeatures()+0x3cb>
c0010801:	50                   	push   eax
c0010802:	50                   	push   eax
c0010803:	68 fa 21 02 c0       	push   0xc00221fa
c0010808:	55                   	push   ebp
c0010809:	e8 42 ff fe ff       	call   c0000750 <strcmp>
c001080e:	83 c4 10             	add    esp,0x10
c0010811:	85 c0                	test   eax,eax
c0010813:	75 0c                	jne    c0010821 <CPU::detectFeatures()+0x385>
c0010815:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001081f:	eb 46                	jmp    c0010867 <CPU::detectFeatures()+0x3cb>
c0010821:	57                   	push   edi
c0010822:	57                   	push   edi
c0010823:	68 07 22 02 c0       	push   0xc0022207
c0010828:	55                   	push   ebp
c0010829:	e8 22 ff fe ff       	call   c0000750 <strcmp>
c001082e:	83 c4 10             	add    esp,0x10
c0010831:	85 c0                	test   eax,eax
c0010833:	74 e0                	je     c0010815 <CPU::detectFeatures()+0x379>
c0010835:	56                   	push   esi
c0010836:	56                   	push   esi
c0010837:	68 14 22 02 c0       	push   0xc0022214
c001083c:	55                   	push   ebp
c001083d:	e8 0e ff fe ff       	call   c0000750 <strcmp>
c0010842:	83 c4 10             	add    esp,0x10
c0010845:	85 c0                	test   eax,eax
c0010847:	74 cc                	je     c0010815 <CPU::detectFeatures()+0x379>
c0010849:	51                   	push   ecx
c001084a:	51                   	push   ecx
c001084b:	68 21 22 02 c0       	push   0xc0022221
c0010850:	55                   	push   ebp
c0010851:	e8 fa fe fe ff       	call   c0000750 <strcmp>
c0010856:	83 c4 10             	add    esp,0x10
c0010859:	85 c0                	test   eax,eax
c001085b:	74 b8                	je     c0010815 <CPU::detectFeatures()+0x379>
c001085d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010867:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001086c:	0f 86 be 00 00 00    	jbe    c0010930 <CPU::detectFeatures()+0x494>
c0010872:	83 ec 0c             	sub    esp,0xc
c0010875:	68 80 00 00 00       	push   0x80
c001087a:	e8 31 fb ff ff       	call   c00103b0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001087f:	83 e0 01             	and    eax,0x1
c0010882:	c1 e0 06             	shl    eax,0x6
c0010885:	89 c2                	mov    edx,eax
c0010887:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001088d:	83 e0 bf             	and    eax,0xffffffbf
c0010890:	09 d0                	or     eax,edx
c0010892:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010898:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001089f:	e8 0c fb ff ff       	call   c00103b0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00108a4:	83 e0 01             	and    eax,0x1
c00108a7:	c1 e0 04             	shl    eax,0x4
c00108aa:	89 c2                	mov    edx,eax
c00108ac:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00108b2:	83 e0 ef             	and    eax,0xffffffef
c00108b5:	09 d0                	or     eax,edx
c00108b7:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00108bd:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00108c4:	e8 e7 fa ff ff       	call   c00103b0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00108c9:	89 c2                	mov    edx,eax
c00108cb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00108d1:	c1 e2 07             	shl    edx,0x7
c00108d4:	83 e0 7f             	and    eax,0x7f
c00108d7:	09 d0                	or     eax,edx
c00108d9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00108df:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00108e6:	e8 f3 fa ff ff       	call   c00103de <CPU::cpuidCheckExtendedECX(unsigned int)>
c00108eb:	83 e0 01             	and    eax,0x1
c00108ee:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00108f5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00108fb:	83 e0 f7             	and    eax,0xfffffff7
c00108fe:	09 d0                	or     eax,edx
c0010900:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010906:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001090d:	e8 cc fa ff ff       	call   c00103de <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010912:	83 c4 10             	add    esp,0x10
c0010915:	83 e0 01             	and    eax,0x1
c0010918:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001091f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010925:	83 e0 fb             	and    eax,0xfffffffb
c0010928:	09 d0                	or     eax,edx
c001092a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010930:	83 ec 0c             	sub    esp,0xc
c0010933:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010937:	50                   	push   eax
c0010938:	8d 44 24 28          	lea    eax,[esp+0x28]
c001093c:	50                   	push   eax
c001093d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010941:	57                   	push   edi
c0010942:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010946:	56                   	push   esi
c0010947:	6a 01                	push   0x1
c0010949:	e8 82 f9 ff ff       	call   c00102d0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001094e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010952:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010958:	89 c1                	mov    ecx,eax
c001095a:	83 e2 f0             	and    edx,0xfffffff0
c001095d:	83 e1 0f             	and    ecx,0xf
c0010960:	09 ca                	or     edx,ecx
c0010962:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010968:	89 c2                	mov    edx,eax
c001096a:	c1 ea 04             	shr    edx,0x4
c001096d:	83 e2 0f             	and    edx,0xf
c0010970:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010974:	89 d1                	mov    ecx,edx
c0010976:	83 c4 20             	add    esp,0x20
c0010979:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001097f:	c1 e1 06             	shl    ecx,0x6
c0010982:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010988:	09 ca                	or     edx,ecx
c001098a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010991:	89 c2                	mov    edx,eax
c0010993:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010999:	c1 ea 08             	shr    edx,0x8
c001099c:	83 e1 3f             	and    ecx,0x3f
c001099f:	83 e2 0f             	and    edx,0xf
c00109a2:	89 d5                	mov    ebp,edx
c00109a4:	83 e5 03             	and    ebp,0x3
c00109a7:	c1 e5 06             	shl    ebp,0x6
c00109aa:	09 e9                	or     ecx,ebp
c00109ac:	89 d5                	mov    ebp,edx
c00109ae:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c00109b4:	c1 ed 02             	shr    ebp,0x2
c00109b7:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c00109bd:	83 e1 c0             	and    ecx,0xffffffc0
c00109c0:	09 e9                	or     ecx,ebp
c00109c2:	89 c5                	mov    ebp,eax
c00109c4:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00109ca:	c1 ed 08             	shr    ebp,0x8
c00109cd:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c00109d3:	83 e5 30             	and    ebp,0x30
c00109d6:	83 e1 cf             	and    ecx,0xffffffcf
c00109d9:	09 e9                	or     ecx,ebp
c00109db:	83 fa 06             	cmp    edx,0x6
c00109de:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00109e4:	74 05                	je     c00109eb <CPU::detectFeatures()+0x54f>
c00109e6:	83 fa 0f             	cmp    edx,0xf
c00109e9:	75 64                	jne    c0010a4f <CPU::detectFeatures()+0x5b3>
c00109eb:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00109f1:	89 c1                	mov    ecx,eax
c00109f3:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00109f9:	c1 e9 10             	shr    ecx,0x10
c00109fc:	c1 e1 04             	shl    ecx,0x4
c00109ff:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010a03:	0f b6 c9             	movzx  ecx,cl
c0010a06:	c1 e1 06             	shl    ecx,0x6
c0010a09:	09 e9                	or     ecx,ebp
c0010a0b:	83 fa 0f             	cmp    edx,0xf
c0010a0e:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010a15:	75 38                	jne    c0010a4f <CPU::detectFeatures()+0x5b3>
c0010a17:	c1 e8 14             	shr    eax,0x14
c0010a1a:	83 c0 0f             	add    eax,0xf
c0010a1d:	0f b6 c0             	movzx  eax,al
c0010a20:	89 c2                	mov    edx,eax
c0010a22:	c1 e8 02             	shr    eax,0x2
c0010a25:	83 e2 03             	and    edx,0x3
c0010a28:	89 d1                	mov    ecx,edx
c0010a2a:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010a30:	c1 e1 06             	shl    ecx,0x6
c0010a33:	83 e2 3f             	and    edx,0x3f
c0010a36:	09 ca                	or     edx,ecx
c0010a38:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010a3e:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010a44:	83 e2 c0             	and    edx,0xffffffc0
c0010a47:	09 d0                	or     eax,edx
c0010a49:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010a4f:	83 ec 0c             	sub    esp,0xc
c0010a52:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010a58:	83 c8 07             	or     eax,0x7
c0010a5b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010a61:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010a65:	50                   	push   eax
c0010a66:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010a6a:	55                   	push   ebp
c0010a6b:	57                   	push   edi
c0010a6c:	56                   	push   esi
c0010a6d:	68 00 00 00 80       	push   0x80000000
c0010a72:	e8 59 f8 ff ff       	call   c00102d0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a77:	83 c4 20             	add    esp,0x20
c0010a7a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010a82:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010a86:	76 1e                	jbe    c0010aa6 <CPU::detectFeatures()+0x60a>
c0010a88:	83 ec 0c             	sub    esp,0xc
c0010a8b:	50                   	push   eax
c0010a8c:	55                   	push   ebp
c0010a8d:	57                   	push   edi
c0010a8e:	56                   	push   esi
c0010a8f:	68 01 00 00 80       	push   0x80000001
c0010a94:	e8 37 f8 ff ff       	call   c00102d0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a99:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010aa3:	83 c4 20             	add    esp,0x20
c0010aa6:	52                   	push   edx
c0010aa7:	52                   	push   edx
c0010aa8:	68 2d 22 02 c0       	push   0xc002222d
c0010aad:	53                   	push   ebx
c0010aae:	e8 99 c0 ff ff       	call   c000cb4c <Device::setName(char const*)>
c0010ab3:	83 c4 10             	add    esp,0x10
c0010ab6:	eb 69                	jmp    c0010b21 <CPU::detectFeatures()+0x685>
c0010ab8:	50                   	push   eax
c0010ab9:	50                   	push   eax
c0010aba:	68 92 21 02 c0       	push   0xc0022192
c0010abf:	55                   	push   ebp
c0010ac0:	e8 7b fb fe ff       	call   c0000640 <strcpy>
c0010ac5:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010acf:	e8 ef f6 fe ff       	call   c00001c3 <is486>
c0010ad4:	83 c4 10             	add    esp,0x10
c0010ad7:	85 c0                	test   eax,eax
c0010ad9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010adf:	74 1f                	je     c0010b00 <CPU::detectFeatures()+0x664>
c0010ae1:	83 c8 07             	or     eax,0x7
c0010ae4:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010aea:	0f 20 c0             	mov    eax,cr0
c0010aed:	83 e0 14             	and    eax,0x14
c0010af0:	83 f8 04             	cmp    eax,0x4
c0010af3:	75 10                	jne    c0010b05 <CPU::detectFeatures()+0x669>
c0010af5:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010afb:	83 e0 fd             	and    eax,0xfffffffd
c0010afe:	eb 1b                	jmp    c0010b1b <CPU::detectFeatures()+0x67f>
c0010b00:	83 e0 f8             	and    eax,0xfffffff8
c0010b03:	eb df                	jmp    c0010ae4 <CPU::detectFeatures()+0x648>
c0010b05:	e8 94 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010b0a:	83 e0 01             	and    eax,0x1
c0010b0d:	8d 14 00             	lea    edx,[eax+eax*1]
c0010b10:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b16:	83 e0 fd             	and    eax,0xfffffffd
c0010b19:	09 d0                	or     eax,edx
c0010b1b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b21:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010b28:	74 17                	je     c0010b41 <CPU::detectFeatures()+0x6a5>
c0010b2a:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010b30:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010b36:	83 c8 10             	or     eax,0x10
c0010b39:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010b3f:	eb 20                	jmp    c0010b61 <CPU::detectFeatures()+0x6c5>
c0010b41:	e8 58 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010b46:	83 e0 01             	and    eax,0x1
c0010b49:	8d 14 00             	lea    edx,[eax+eax*1]
c0010b4c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b52:	83 e0 fd             	and    eax,0xfffffffd
c0010b55:	09 d0                	or     eax,edx
c0010b57:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b5d:	a8 02                	test   al,0x2
c0010b5f:	75 c9                	jne    c0010b2a <CPU::detectFeatures()+0x68e>
c0010b61:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010b68:	83 c4 2c             	add    esp,0x2c
c0010b6b:	5b                   	pop    ebx
c0010b6c:	5e                   	pop    esi
c0010b6d:	5f                   	pop    edi
c0010b6e:	5d                   	pop    ebp
c0010b6f:	c3                   	ret    

c0010b70 <CPU::setupSMEP()>:
c0010b70:	0f 20 e0             	mov    eax,cr4
c0010b73:	0d 00 00 10 00       	or     eax,0x100000
c0010b78:	0f 22 e0             	mov    cr4,eax
c0010b7b:	c3                   	ret    

c0010b7c <CPU::setupUMIP()>:
c0010b7c:	0f 20 e0             	mov    eax,cr4
c0010b7f:	80 cc 08             	or     ah,0x8
c0010b82:	0f 22 e0             	mov    cr4,eax
c0010b85:	c3                   	ret    

c0010b86 <CPU::setupTSC()>:
c0010b86:	0f 20 e0             	mov    eax,cr4
c0010b89:	83 c8 04             	or     eax,0x4
c0010b8c:	0f 22 e0             	mov    cr4,eax
c0010b8f:	c3                   	ret    

c0010b90 <CPU::setupLargePages()>:
c0010b90:	0f 20 e0             	mov    eax,cr4
c0010b93:	83 c8 10             	or     eax,0x10
c0010b96:	0f 22 e0             	mov    cr4,eax
c0010b99:	c3                   	ret    

c0010b9a <CPU::setupPAT()>:
c0010b9a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010b9f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010ba6:	74 2c                	je     c0010bd4 <CPU::setupPAT()+0x3a>
c0010ba8:	53                   	push   ebx
c0010ba9:	83 ec 10             	sub    esp,0x10
c0010bac:	68 77 02 00 00       	push   0x277
c0010bb1:	50                   	push   eax
c0010bb2:	e8 09 65 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0010bb7:	83 e2 f8             	and    edx,0xfffffff8
c0010bba:	83 ca 01             	or     edx,0x1
c0010bbd:	52                   	push   edx
c0010bbe:	50                   	push   eax
c0010bbf:	68 77 02 00 00       	push   0x277
c0010bc4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010bca:	e8 1d 65 ff ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0010bcf:	83 c4 28             	add    esp,0x28
c0010bd2:	5b                   	pop    ebx
c0010bd3:	c3                   	ret    
c0010bd4:	c3                   	ret    
c0010bd5:	90                   	nop

c0010bd6 <CPU::setupMTRR()>:
c0010bd6:	c3                   	ret    
c0010bd7:	90                   	nop

c0010bd8 <CPU::setupGlobalPages()>:
c0010bd8:	0f 20 e0             	mov    eax,cr4
c0010bdb:	0c 80                	or     al,0x80
c0010bdd:	0f 22 e0             	mov    cr4,eax
c0010be0:	c3                   	ret    
c0010be1:	90                   	nop

c0010be2 <CPU::allowUsermodeDataAccess()>:
c0010be2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010be6:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010bed:	74 03                	je     c0010bf2 <CPU::allowUsermodeDataAccess()+0x10>
c0010bef:	0f 01 cb             	stac   
c0010bf2:	c3                   	ret    
c0010bf3:	90                   	nop

c0010bf4 <CPU::prohibitUsermodeDataAccess()>:
c0010bf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bf8:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010bff:	74 03                	je     c0010c04 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010c01:	0f 01 ca             	clac   
c0010c04:	c3                   	ret    
c0010c05:	90                   	nop

c0010c06 <CPU::setupSMAP()>:
c0010c06:	0f 20 e0             	mov    eax,cr4
c0010c09:	0d 00 00 20 00       	or     eax,0x200000
c0010c0e:	0f 22 e0             	mov    cr4,eax
c0010c11:	eb e1                	jmp    c0010bf4 <CPU::prohibitUsermodeDataAccess()>
c0010c13:	90                   	nop

c0010c14 <CPU::setupFeatures()>:
c0010c14:	53                   	push   ebx
c0010c15:	83 ec 08             	sub    esp,0x8
c0010c18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c1c:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010c23:	74 18                	je     c0010c3d <CPU::setupFeatures()+0x29>
c0010c25:	83 ec 0c             	sub    esp,0xc
c0010c28:	68 39 22 02 c0       	push   0xc0022239
c0010c2d:	e8 13 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c35:	e8 42 ff ff ff       	call   c0010b7c <CPU::setupUMIP()>
c0010c3a:	83 c4 10             	add    esp,0x10
c0010c3d:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010c44:	74 18                	je     c0010c5e <CPU::setupFeatures()+0x4a>
c0010c46:	83 ec 0c             	sub    esp,0xc
c0010c49:	68 43 22 02 c0       	push   0xc0022243
c0010c4e:	e8 f2 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c56:	e8 2b ff ff ff       	call   c0010b86 <CPU::setupTSC()>
c0010c5b:	83 c4 10             	add    esp,0x10
c0010c5e:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010c65:	74 18                	je     c0010c7f <CPU::setupFeatures()+0x6b>
c0010c67:	83 ec 0c             	sub    esp,0xc
c0010c6a:	68 4c 22 02 c0       	push   0xc002224c
c0010c6f:	e8 d1 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c77:	e8 14 ff ff ff       	call   c0010b90 <CPU::setupLargePages()>
c0010c7c:	83 c4 10             	add    esp,0x10
c0010c7f:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010c86:	74 18                	je     c0010ca0 <CPU::setupFeatures()+0x8c>
c0010c88:	83 ec 0c             	sub    esp,0xc
c0010c8b:	68 55 22 02 c0       	push   0xc0022255
c0010c90:	e8 b0 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c98:	e8 3b ff ff ff       	call   c0010bd8 <CPU::setupGlobalPages()>
c0010c9d:	83 c4 10             	add    esp,0x10
c0010ca0:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010ca7:	74 18                	je     c0010cc1 <CPU::setupFeatures()+0xad>
c0010ca9:	83 ec 0c             	sub    esp,0xc
c0010cac:	68 67 22 02 c0       	push   0xc0022267
c0010cb1:	e8 8f 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010cb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cb9:	e8 dc fe ff ff       	call   c0010b9a <CPU::setupPAT()>
c0010cbe:	83 c4 10             	add    esp,0x10
c0010cc1:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010cc8:	74 11                	je     c0010cdb <CPU::setupFeatures()+0xc7>
c0010cca:	c7 44 24 10 70 22 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022270
c0010cd2:	83 c4 08             	add    esp,0x8
c0010cd5:	5b                   	pop    ebx
c0010cd6:	e9 6a 9c ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c0010cdb:	83 c4 08             	add    esp,0x8
c0010cde:	5b                   	pop    ebx
c0010cdf:	c3                   	ret    

c0010ce0 <CPU::open(int, int, void*)>:
c0010ce0:	55                   	push   ebp
c0010ce1:	57                   	push   edi
c0010ce2:	56                   	push   esi
c0010ce3:	53                   	push   ebx
c0010ce4:	83 ec 18             	sub    esp,0x18
c0010ce7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010ceb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010cef:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010cf3:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010cf9:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010cff:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010d05:	50                   	push   eax
c0010d06:	e8 b3 66 ff ff       	call   c00073be <GDT::setup()>
c0010d0b:	83 c4 0c             	add    esp,0xc
c0010d0e:	6a 00                	push   0x0
c0010d10:	68 ef be ad de       	push   0xdeadbeef
c0010d15:	55                   	push   ebp
c0010d16:	e8 6d 82 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c0010d1b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010d1e:	e8 45 82 ff ff       	call   c0008f68 <TSS::flush()>
c0010d23:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010d29:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d2c:	e8 f1 68 ff ff       	call   c0007622 <IDT::setup()>
c0010d31:	b8 00 04 00 00       	mov    eax,0x400
c0010d36:	0f 23 f8             	mov    db7,eax
c0010d39:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010d43:	e8 77 70 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0010d48:	83 c4 10             	add    esp,0x10
c0010d4b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010d51:	85 f6                	test   esi,esi
c0010d53:	89 38                	mov    DWORD PTR [eax],edi
c0010d55:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010d5b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010d5e:	74 10                	je     c0010d70 <CPU::open(int, int, void*)+0x90>
c0010d60:	50                   	push   eax
c0010d61:	50                   	push   eax
c0010d62:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010d68:	56                   	push   esi
c0010d69:	e8 40 8b ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c0010d6e:	eb 0d                	jmp    c0010d7d <CPU::open(int, int, void*)+0x9d>
c0010d70:	83 ec 0c             	sub    esp,0xc
c0010d73:	68 7a 22 02 c0       	push   0xc002227a
c0010d78:	e8 9e 08 00 00       	call   c001161b <KePanic(char const*)>
c0010d7d:	83 c4 10             	add    esp,0x10
c0010d80:	83 ec 0c             	sub    esp,0xc
c0010d83:	68 88 22 02 c0       	push   0xc0022288
c0010d88:	e8 8e 01 00 00       	call   c0010f1b <KeSetBootMessage(char const*)>
c0010d8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d90:	e8 07 f7 ff ff       	call   c001049c <CPU::detectFeatures()>
c0010d95:	c7 04 24 ab 22 02 c0 	mov    DWORD PTR [esp],0xc00222ab
c0010d9c:	e8 7a 01 00 00       	call   c0010f1b <KeSetBootMessage(char const*)>
c0010da1:	e8 eb 73 00 00       	call   c0018191 <HalInitialise()>
c0010da6:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010dab:	83 e0 10             	and    eax,0x10
c0010dae:	83 f8 01             	cmp    eax,0x1
c0010db1:	19 c0                	sbb    eax,eax
c0010db3:	83 e0 46             	and    eax,0x46
c0010db6:	83 c0 1e             	add    eax,0x1e
c0010db9:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dbc:	e8 28 d6 ff ff       	call   c000e3e9 <setupTimer(int)>
c0010dc1:	83 c4 10             	add    esp,0x10
c0010dc4:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010dca:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010dd1:	74 0c                	je     c0010ddf <CPU::open(int, int, void*)+0xff>
c0010dd3:	83 ec 0c             	sub    esp,0xc
c0010dd6:	53                   	push   ebx
c0010dd7:	e8 38 fe ff ff       	call   c0010c14 <CPU::setupFeatures()>
c0010ddc:	83 c4 10             	add    esp,0x10
c0010ddf:	83 c4 0c             	add    esp,0xc
c0010de2:	31 c0                	xor    eax,eax
c0010de4:	5b                   	pop    ebx
c0010de5:	5e                   	pop    esi
c0010de6:	5f                   	pop    edi
c0010de7:	5d                   	pop    ebp
c0010de8:	c3                   	ret    

c0010de9 <KeInitialiseAtexit()>:
c0010de9:	83 ec 10             	sub    esp,0x10
c0010dec:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010df6:	6a 60                	push   0x60
c0010df8:	6a 00                	push   0x0
c0010dfa:	68 20 be 02 c0       	push   0xc002be20
c0010dff:	e8 ec f6 fe ff       	call   c00004f0 <memset>
c0010e04:	83 c4 1c             	add    esp,0x1c
c0010e07:	c3                   	ret    

c0010e08 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010e08:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010e0d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010e11:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010e18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e1c:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010e23:	40                   	inc    eax
c0010e24:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010e29:	83 f8 17             	cmp    eax,0x17
c0010e2c:	7e 0d                	jle    c0010e3b <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010e2e:	c7 44 24 04 ec 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc00222ec
c0010e36:	e9 e0 07 00 00       	jmp    c001161b <KePanic(char const*)>
c0010e3b:	c3                   	ret    

c0010e3c <KeExecuteAtexit()>:
c0010e3c:	53                   	push   ebx
c0010e3d:	31 db                	xor    ebx,ebx
c0010e3f:	83 ec 08             	sub    esp,0x8
c0010e42:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010e48:	7e 50                	jle    c0010e9a <KeExecuteAtexit()+0x5e>
c0010e4a:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010e51:	85 c0                	test   eax,eax
c0010e53:	74 42                	je     c0010e97 <KeExecuteAtexit()+0x5b>
c0010e55:	51                   	push   ecx
c0010e56:	50                   	push   eax
c0010e57:	53                   	push   ebx
c0010e58:	68 05 23 02 c0       	push   0xc0022305
c0010e5d:	e8 e3 9a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010e62:	58                   	pop    eax
c0010e63:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010e6a:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010e71:	c7 04 24 27 23 02 c0 	mov    DWORD PTR [esp],0xc0022327
c0010e78:	e8 c8 9a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010e7d:	c7 04 24 c5 18 02 c0 	mov    DWORD PTR [esp],0xc00218c5
c0010e84:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010e8f:	e8 b1 9a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010e94:	83 c4 10             	add    esp,0x10
c0010e97:	43                   	inc    ebx
c0010e98:	eb a8                	jmp    c0010e42 <KeExecuteAtexit()+0x6>
c0010e9a:	83 c4 08             	add    esp,0x8
c0010e9d:	5b                   	pop    ebx
c0010e9e:	c3                   	ret    

c0010e9f <KeDisplaySplashScreen()>:
c0010e9f:	55                   	push   ebp
c0010ea0:	bd 05 00 00 00       	mov    ebp,0x5
c0010ea5:	57                   	push   edi
c0010ea6:	bf 0a 00 00 00       	mov    edi,0xa
c0010eab:	56                   	push   esi
c0010eac:	31 f6                	xor    esi,esi
c0010eae:	53                   	push   ebx
c0010eaf:	31 db                	xor    ebx,ebx
c0010eb1:	83 ec 0c             	sub    esp,0xc
c0010eb4:	0f b6 96 e0 36 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc920]
c0010ebb:	89 d0                	mov    eax,edx
c0010ebd:	85 d2                	test   edx,edx
c0010ebf:	74 52                	je     c0010f13 <KeDisplaySplashScreen()+0x74>
c0010ec1:	80 bb 16 37 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc8ea],0xdb
c0010ec8:	75 13                	jne    c0010edd <KeDisplaySplashScreen()+0x3e>
c0010eca:	0f b6 8b 15 37 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc8eb]
c0010ed1:	83 e1 fe             	and    ecx,0xfffffffe
c0010ed4:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010eda:	75 01                	jne    c0010edd <KeDisplaySplashScreen()+0x3e>
c0010edc:	47                   	inc    edi
c0010edd:	83 fa 0d             	cmp    edx,0xd
c0010ee0:	74 28                	je     c0010f0a <KeDisplaySplashScreen()+0x6b>
c0010ee2:	83 fa 0a             	cmp    edx,0xa
c0010ee5:	75 0a                	jne    c0010ef1 <KeDisplaySplashScreen()+0x52>
c0010ee7:	45                   	inc    ebp
c0010ee8:	bf 0a 00 00 00       	mov    edi,0xa
c0010eed:	31 db                	xor    ebx,ebx
c0010eef:	eb 19                	jmp    c0010f0a <KeDisplaySplashScreen()+0x6b>
c0010ef1:	83 ec 0c             	sub    esp,0xc
c0010ef4:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010ef7:	55                   	push   ebp
c0010ef8:	0f be c0             	movsx  eax,al
c0010efb:	52                   	push   edx
c0010efc:	43                   	inc    ebx
c0010efd:	6a 00                	push   0x0
c0010eff:	6a 0e                	push   0xe
c0010f01:	50                   	push   eax
c0010f02:	e8 09 7f 00 00       	call   c0018e10 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010f07:	83 c4 20             	add    esp,0x20
c0010f0a:	46                   	inc    esi
c0010f0b:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010f11:	75 a1                	jne    c0010eb4 <KeDisplaySplashScreen()+0x15>
c0010f13:	83 c4 0c             	add    esp,0xc
c0010f16:	5b                   	pop    ebx
c0010f17:	5e                   	pop    esi
c0010f18:	5f                   	pop    edi
c0010f19:	5d                   	pop    ebp
c0010f1a:	c3                   	ret    

c0010f1b <KeSetBootMessage(char const*)>:
c0010f1b:	57                   	push   edi
c0010f1c:	56                   	push   esi
c0010f1d:	53                   	push   ebx
c0010f1e:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010f24:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010f2b:	68 9e 00 00 00       	push   0x9e
c0010f30:	6a 00                	push   0x0
c0010f32:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010f36:	56                   	push   esi
c0010f37:	e8 b4 f5 fe ff       	call   c00004f0 <memset>
c0010f3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f3f:	e8 2c f6 fe ff       	call   c0000570 <strlen>
c0010f44:	ba 50 00 00 00       	mov    edx,0x50
c0010f49:	83 c4 10             	add    esp,0x10
c0010f4c:	29 c2                	sub    edx,eax
c0010f4e:	31 c9                	xor    ecx,ecx
c0010f50:	83 e2 fe             	and    edx,0xfffffffe
c0010f53:	01 f2                	add    edx,esi
c0010f55:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010f5a:	84 c0                	test   al,al
c0010f5c:	74 0a                	je     c0010f68 <KeSetBootMessage(char const*)+0x4d>
c0010f5e:	80 cc 0f             	or     ah,0xf
c0010f61:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010f65:	41                   	inc    ecx
c0010f66:	eb ed                	jmp    c0010f55 <KeSetBootMessage(char const*)+0x3a>
c0010f68:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010f6d:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010f72:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f74:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010f7a:	5b                   	pop    ebx
c0010f7b:	5e                   	pop    esi
c0010f7c:	5f                   	pop    edi
c0010f7d:	c3                   	ret    
c0010f7e:	66 90                	xchg   ax,ax

c0010f80 <Krnl::handlePowerButton()>:
c0010f80:	83 ec 0c             	sub    esp,0xc
c0010f83:	e8 ee 06 00 00       	call   c0011676 <KeHandlePowerButton()>
c0010f88:	90                   	nop
c0010f89:	83 c4 0c             	add    esp,0xc
c0010f8c:	c3                   	ret    
c0010f8d:	8d 76 00             	lea    esi,[esi+0x0]

c0010f90 <Krnl::handleSleepButton()>:
c0010f90:	83 ec 0c             	sub    esp,0xc
c0010f93:	e8 13 07 00 00       	call   c00116ab <KeHandleSleepButton()>
c0010f98:	90                   	nop
c0010f99:	83 c4 0c             	add    esp,0xc
c0010f9c:	c3                   	ret    

c0010f9d <KeCalculateCRC32(unsigned char*, int)>:
c0010f9d:	53                   	push   ebx
c0010f9e:	83 c8 ff             	or     eax,0xffffffff
c0010fa1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010fa5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010fa9:	01 cb                	add    ebx,ecx
c0010fab:	39 d9                	cmp    ecx,ebx
c0010fad:	74 15                	je     c0010fc4 <KeCalculateCRC32(unsigned char*, int)+0x27>
c0010faf:	41                   	inc    ecx
c0010fb0:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c0010fb3:	31 c2                	xor    edx,eax
c0010fb5:	c1 e8 08             	shr    eax,0x8
c0010fb8:	0f b6 d2             	movzx  edx,dl
c0010fbb:	33 04 95 40 38 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc7c0]
c0010fc2:	eb e7                	jmp    c0010fab <KeCalculateCRC32(unsigned char*, int)+0xe>
c0010fc4:	f7 d0                	not    eax
c0010fc6:	5b                   	pop    ebx
c0010fc7:	c3                   	ret    

c0010fc8 <EnvVarContainer::getEnv(char const*)>:
c0010fc8:	57                   	push   edi
c0010fc9:	56                   	push   esi
c0010fca:	53                   	push   ebx
c0010fcb:	31 db                	xor    ebx,ebx
c0010fcd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010fd1:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010fd3:	7e 2b                	jle    c0011000 <EnvVarContainer::getEnv(char const*)+0x38>
c0010fd5:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010fdc:	50                   	push   eax
c0010fdd:	50                   	push   eax
c0010fde:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010fe1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010fe4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010fe8:	e8 63 f7 fe ff       	call   c0000750 <strcmp>
c0010fed:	83 c4 10             	add    esp,0x10
c0010ff0:	85 c0                	test   eax,eax
c0010ff2:	75 09                	jne    c0010ffd <EnvVarContainer::getEnv(char const*)+0x35>
c0010ff4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010ff7:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010ffb:	eb 05                	jmp    c0011002 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010ffd:	43                   	inc    ebx
c0010ffe:	eb d1                	jmp    c0010fd1 <EnvVarContainer::getEnv(char const*)+0x9>
c0011000:	31 c0                	xor    eax,eax
c0011002:	5b                   	pop    ebx
c0011003:	5e                   	pop    esi
c0011004:	5f                   	pop    edi
c0011005:	c3                   	ret    

c0011006 <EnvVarContainer::setEnv(char const*, char const*)>:
c0011006:	55                   	push   ebp
c0011007:	57                   	push   edi
c0011008:	56                   	push   esi
c0011009:	53                   	push   ebx
c001100a:	83 ec 28             	sub    esp,0x28
c001100d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011011:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0011015:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0011019:	56                   	push   esi
c001101a:	e8 51 f5 fe ff       	call   c0000570 <strlen>
c001101f:	40                   	inc    eax
c0011020:	89 04 24             	mov    DWORD PTR [esp],eax
c0011023:	e8 8e 6a ff ff       	call   c0007ab6 <malloc>
c0011028:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001102b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001102f:	e8 3c f5 fe ff       	call   c0000570 <strlen>
c0011034:	40                   	inc    eax
c0011035:	89 04 24             	mov    DWORD PTR [esp],eax
c0011038:	e8 79 6a ff ff       	call   c0007ab6 <malloc>
c001103d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011040:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011044:	e8 27 f5 fe ff       	call   c0000570 <strlen>
c0011049:	83 c4 0c             	add    esp,0xc
c001104c:	40                   	inc    eax
c001104d:	50                   	push   eax
c001104e:	6a 00                	push   0x0
c0011050:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011054:	e8 97 f4 fe ff       	call   c00004f0 <memset>
c0011059:	89 34 24             	mov    DWORD PTR [esp],esi
c001105c:	e8 0f f5 fe ff       	call   c0000570 <strlen>
c0011061:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011065:	8d 48 01             	lea    ecx,[eax+0x1]
c0011068:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001106a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001106d:	89 de                	mov    esi,ebx
c001106f:	e8 fc f4 fe ff       	call   c0000570 <strlen>
c0011074:	83 c4 0c             	add    esp,0xc
c0011077:	40                   	inc    eax
c0011078:	50                   	push   eax
c0011079:	6a 00                	push   0x0
c001107b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001107f:	e8 6c f4 fe ff       	call   c00004f0 <memset>
c0011084:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011087:	e8 e4 f4 fe ff       	call   c0000570 <strlen>
c001108c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0011090:	8d 48 01             	lea    ecx,[eax+0x1]
c0011093:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011095:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011098:	40                   	inc    eax
c0011099:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001109c:	c1 e0 03             	shl    eax,0x3
c001109f:	5a                   	pop    edx
c00110a0:	59                   	pop    ecx
c00110a1:	50                   	push   eax
c00110a2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00110a5:	e8 f8 69 ff ff       	call   c0007aa2 <realloc>
c00110aa:	8d 74 24 18          	lea    esi,[esp+0x18]
c00110ae:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00110b1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00110b4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00110b8:	b9 08 00 00 00       	mov    ecx,0x8
c00110bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110bf:	83 c4 2c             	add    esp,0x2c
c00110c2:	5b                   	pop    ebx
c00110c3:	5e                   	pop    esi
c00110c4:	5f                   	pop    edi
c00110c5:	5d                   	pop    ebp
c00110c6:	c3                   	ret    
c00110c7:	90                   	nop

c00110c8 <EnvVarContainer::deleteEnv(char const*)>:
c00110c8:	c3                   	ret    
c00110c9:	90                   	nop

c00110ca <EnvVarContainer::loadFrom(char const*, char const*)>:
c00110ca:	55                   	push   ebp
c00110cb:	57                   	push   edi
c00110cc:	56                   	push   esi
c00110cd:	53                   	push   ebx
c00110ce:	81 ec 38 01 00 00    	sub    esp,0x138
c00110d4:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00110db:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00110e2:	68 14 01 00 00       	push   0x114
c00110e7:	e8 ca 69 ff ff       	call   c0007ab6 <malloc>
c00110ec:	83 c4 0c             	add    esp,0xc
c00110ef:	89 c3                	mov    ebx,eax
c00110f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00110f4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00110fb:	50                   	push   eax
c00110fc:	e8 47 aa ff ff       	call   c000bb48 <File::File(char const*, Process*)>
c0011101:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011104:	e8 21 ad ff ff       	call   c000be2a <File::exists()>
c0011109:	83 c4 10             	add    esp,0x10
c001110c:	84 c0                	test   al,al
c001110e:	75 31                	jne    c0011141 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0011110:	50                   	push   eax
c0011111:	50                   	push   eax
c0011112:	6a 12                	push   0x12
c0011114:	53                   	push   ebx
c0011115:	e8 4c aa ff ff       	call   c000bb66 <File::open(FileOpenMode)>
c001111a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001111c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001111f:	89 34 24             	mov    DWORD PTR [esp],esi
c0011122:	e8 49 f4 fe ff       	call   c0000570 <strlen>
c0011127:	5a                   	pop    edx
c0011128:	31 d2                	xor    edx,edx
c001112a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001112e:	51                   	push   ecx
c001112f:	56                   	push   esi
c0011130:	52                   	push   edx
c0011131:	50                   	push   eax
c0011132:	53                   	push   ebx
c0011133:	ff d7                	call   edi
c0011135:	83 c4 14             	add    esp,0x14
c0011138:	53                   	push   ebx
c0011139:	e8 86 aa ff ff       	call   c000bbc4 <File::close()>
c001113e:	83 c4 10             	add    esp,0x10
c0011141:	56                   	push   esi
c0011142:	31 f6                	xor    esi,esi
c0011144:	68 00 01 00 00       	push   0x100
c0011149:	6a 00                	push   0x0
c001114b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001114f:	50                   	push   eax
c0011150:	e8 9b f3 fe ff       	call   c00004f0 <memset>
c0011155:	5f                   	pop    edi
c0011156:	58                   	pop    eax
c0011157:	6a 01                	push   0x1
c0011159:	53                   	push   ebx
c001115a:	e8 07 aa ff ff       	call   c000bb66 <File::open(FileOpenMode)>
c001115f:	83 c4 10             	add    esp,0x10
c0011162:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001116a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011172:	83 ec 0c             	sub    esp,0xc
c0011175:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011177:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001117b:	51                   	push   ecx
c001117c:	8d 54 24 23          	lea    edx,[esp+0x23]
c0011180:	52                   	push   edx
c0011181:	6a 00                	push   0x0
c0011183:	6a 01                	push   0x1
c0011185:	53                   	push   ebx
c0011186:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011189:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001118e:	83 c4 20             	add    esp,0x20
c0011191:	89 c2                	mov    edx,eax
c0011193:	85 c0                	test   eax,eax
c0011195:	0f 84 36 01 00 00    	je     c00112d1 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001119b:	83 f8 0d             	cmp    eax,0xd
c001119e:	0f 84 22 01 00 00    	je     c00112c6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00111a4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00111a9:	0f 84 f0 00 00 00    	je     c001129f <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c00111af:	83 f8 0a             	cmp    eax,0xa
c00111b2:	74 13                	je     c00111c7 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00111b4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00111b9:	74 0c                	je     c00111c7 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00111bb:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00111c1:	0f 8e f6 00 00 00    	jle    c00112bd <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c00111c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111cb:	83 ec 0c             	sub    esp,0xc
c00111ce:	8d 78 01             	lea    edi,[eax+0x1]
c00111d1:	57                   	push   edi
c00111d2:	e8 df 68 ff ff       	call   c0007ab6 <malloc>
c00111d7:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00111db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00111df:	8d 56 04             	lea    edx,[esi+0x4]
c00111e2:	89 14 24             	mov    DWORD PTR [esp],edx
c00111e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00111e9:	e8 c8 68 ff ff       	call   c0007ab6 <malloc>
c00111ee:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00111f2:	83 c4 0c             	add    esp,0xc
c00111f5:	57                   	push   edi
c00111f6:	6a 00                	push   0x0
c00111f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00111fc:	e8 ef f2 fe ff       	call   c00004f0 <memset>
c0011201:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011205:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011209:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001120d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001120f:	83 c4 0c             	add    esp,0xc
c0011212:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011216:	52                   	push   edx
c0011217:	6a 00                	push   0x0
c0011219:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001121d:	e8 ce f2 fe ff       	call   c00004f0 <memset>
c0011222:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011226:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001122a:	89 34 24             	mov    DWORD PTR [esp],esi
c001122d:	e8 3e f3 fe ff       	call   c0000570 <strlen>
c0011232:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0011236:	89 c1                	mov    ecx,eax
c0011238:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001123a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001123d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0011240:	40                   	inc    eax
c0011241:	83 c4 10             	add    esp,0x10
c0011244:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011247:	85 d2                	test   edx,edx
c0011249:	75 0c                	jne    c0011257 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c001124b:	83 ec 0c             	sub    esp,0xc
c001124e:	6a 08                	push   0x8
c0011250:	e8 61 68 ff ff       	call   c0007ab6 <malloc>
c0011255:	eb 0c                	jmp    c0011263 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0011257:	c1 e0 03             	shl    eax,0x3
c001125a:	51                   	push   ecx
c001125b:	51                   	push   ecx
c001125c:	50                   	push   eax
c001125d:	52                   	push   edx
c001125e:	e8 3f 68 ff ff       	call   c0007aa2 <realloc>
c0011263:	83 c4 10             	add    esp,0x10
c0011266:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011269:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001126c:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001126f:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011273:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011277:	b9 08 00 00 00       	mov    ecx,0x8
c001127c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001127e:	31 f6                	xor    esi,esi
c0011280:	50                   	push   eax
c0011281:	68 00 01 00 00       	push   0x100
c0011286:	6a 00                	push   0x0
c0011288:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001128c:	50                   	push   eax
c001128d:	e8 5e f2 fe ff       	call   c00004f0 <memset>
c0011292:	83 c4 10             	add    esp,0x10
c0011295:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001129d:	eb 27                	jmp    c00112c6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001129f:	83 f8 3d             	cmp    eax,0x3d
c00112a2:	74 1e                	je     c00112c2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c00112a4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00112aa:	7f 07                	jg     c00112b3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c00112ac:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c00112b0:	46                   	inc    esi
c00112b1:	eb 13                	jmp    c00112c6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00112b3:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00112bb:	eb 09                	jmp    c00112c6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00112bd:	83 f8 3d             	cmp    eax,0x3d
c00112c0:	75 ea                	jne    c00112ac <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c00112c2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00112c6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00112cb:	0f 85 99 fe ff ff    	jne    c001116a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00112d1:	83 ec 0c             	sub    esp,0xc
c00112d4:	53                   	push   ebx
c00112d5:	e8 ea a8 ff ff       	call   c000bbc4 <File::close()>
c00112da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00112e2:	81 c4 3c 01 00 00    	add    esp,0x13c
c00112e8:	5b                   	pop    ebx
c00112e9:	5e                   	pop    esi
c00112ea:	5f                   	pop    edi
c00112eb:	5d                   	pop    ebp
c00112ec:	c3                   	ret    
c00112ed:	90                   	nop

c00112ee <EnvVarContainer::__loadSystem()>:
c00112ee:	83 ec 10             	sub    esp,0x10
c00112f1:	68 40 3c 02 c0       	push   0xc0023c40
c00112f6:	68 2c 23 02 c0       	push   0xc002232c
c00112fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ff:	e8 c6 fd ff ff       	call   c00110ca <EnvVarContainer::loadFrom(char const*, char const*)>
c0011304:	83 c4 1c             	add    esp,0x1c
c0011307:	c3                   	ret    

c0011308 <EnvVarContainer::__loadUser()>:
c0011308:	c3                   	ret    
c0011309:	90                   	nop

c001130a <EnvVarContainer::EnvVarContainer(Process*)>:
c001130a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001130e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011314:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011318:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001131c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001131f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011323:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001132a:	90                   	nop
c001132b:	c3                   	ret    

c001132c <EnvVarContainer::~EnvVarContainer()>:
c001132c:	83 ec 0c             	sub    esp,0xc
c001132f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011333:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011336:	85 c0                	test   eax,eax
c0011338:	74 1d                	je     c0011357 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001133a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001133e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011340:	85 c0                	test   eax,eax
c0011342:	74 13                	je     c0011357 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011348:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001134b:	83 ec 0c             	sub    esp,0xc
c001134e:	50                   	push   eax
c001134f:	e8 72 67 ff ff       	call   c0007ac6 <free>
c0011354:	83 c4 10             	add    esp,0x10
c0011357:	90                   	nop
c0011358:	83 c4 0c             	add    esp,0xc
c001135b:	c3                   	ret    

c001135c <KeGetEnv(Process*, char const*)>:
c001135c:	53                   	push   ebx
c001135d:	83 ec 08             	sub    esp,0x8
c0011360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011364:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011368:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c001136e:	74 04                	je     c0011374 <KeGetEnv(Process*, char const*)+0x18>
c0011370:	85 c0                	test   eax,eax
c0011372:	75 0b                	jne    c001137f <KeGetEnv(Process*, char const*)+0x23>
c0011374:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011379:	85 c0                	test   eax,eax
c001137b:	75 19                	jne    c0011396 <KeGetEnv(Process*, char const*)+0x3a>
c001137d:	eb 27                	jmp    c00113a6 <KeGetEnv(Process*, char const*)+0x4a>
c001137f:	52                   	push   edx
c0011380:	52                   	push   edx
c0011381:	53                   	push   ebx
c0011382:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0011388:	e8 3b fc ff ff       	call   c0010fc8 <EnvVarContainer::getEnv(char const*)>
c001138d:	83 c4 10             	add    esp,0x10
c0011390:	85 c0                	test   eax,eax
c0011392:	75 28                	jne    c00113bc <KeGetEnv(Process*, char const*)+0x60>
c0011394:	eb de                	jmp    c0011374 <KeGetEnv(Process*, char const*)+0x18>
c0011396:	52                   	push   edx
c0011397:	52                   	push   edx
c0011398:	53                   	push   ebx
c0011399:	50                   	push   eax
c001139a:	e8 29 fc ff ff       	call   c0010fc8 <EnvVarContainer::getEnv(char const*)>
c001139f:	83 c4 10             	add    esp,0x10
c00113a2:	85 c0                	test   eax,eax
c00113a4:	75 16                	jne    c00113bc <KeGetEnv(Process*, char const*)+0x60>
c00113a6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00113aa:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00113af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00113b3:	83 c4 08             	add    esp,0x8
c00113b6:	5b                   	pop    ebx
c00113b7:	e9 0c fc ff ff       	jmp    c0010fc8 <EnvVarContainer::getEnv(char const*)>
c00113bc:	83 c4 08             	add    esp,0x8
c00113bf:	5b                   	pop    ebx
c00113c0:	c3                   	ret    

c00113c1 <KeSetEnvSystem(char const*, char const*)>:
c00113c1:	83 ec 10             	sub    esp,0x10
c00113c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113cc:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c00113d2:	e8 2f fc ff ff       	call   c0011006 <EnvVarContainer::setEnv(char const*, char const*)>
c00113d7:	83 c4 1c             	add    esp,0x1c
c00113da:	c3                   	ret    

c00113db <KeSetEnvUser(char const*, char const*)>:
c00113db:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c00113e0:	85 c0                	test   eax,eax
c00113e2:	74 15                	je     c00113f9 <KeSetEnvUser(char const*, char const*)+0x1e>
c00113e4:	83 ec 10             	sub    esp,0x10
c00113e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113ef:	50                   	push   eax
c00113f0:	e8 11 fc ff ff       	call   c0011006 <EnvVarContainer::setEnv(char const*, char const*)>
c00113f5:	83 c4 1c             	add    esp,0x1c
c00113f8:	c3                   	ret    
c00113f9:	c3                   	ret    

c00113fa <KeSetEnvProcess(Process*, char const*, char const*)>:
c00113fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113fe:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0011404:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011408:	e9 f9 fb ff ff       	jmp    c0011006 <EnvVarContainer::setEnv(char const*, char const*)>

c001140d <KeDeleteEnvSystem(char const*)>:
c001140d:	c3                   	ret    

c001140e <KeDeleteEnvUser(char const*)>:
c001140e:	c3                   	ret    

c001140f <KeDeleteEnvProcess(Process*, char const*)>:
c001140f:	c3                   	ret    

c0011410 <KeNewProcessEnv(Process*)>:
c0011410:	83 ec 28             	sub    esp,0x28
c0011413:	6a 0c                	push   0xc
c0011415:	e8 9c 66 ff ff       	call   c0007ab6 <malloc>
c001141a:	5a                   	pop    edx
c001141b:	59                   	pop    ecx
c001141c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011420:	50                   	push   eax
c0011421:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011425:	e8 e0 fe ff ff       	call   c001130a <EnvVarContainer::EnvVarContainer(Process*)>
c001142a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001142e:	83 c4 2c             	add    esp,0x2c
c0011431:	c3                   	ret    

c0011432 <KeCopyProcessEnv(Process*, Process*)>:
c0011432:	57                   	push   edi
c0011433:	56                   	push   esi
c0011434:	53                   	push   ebx
c0011435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011439:	83 ec 0c             	sub    esp,0xc
c001143c:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0011442:	6a 0c                	push   0xc
c0011444:	e8 6d 66 ff ff       	call   c0007ab6 <malloc>
c0011449:	89 c3                	mov    ebx,eax
c001144b:	58                   	pop    eax
c001144c:	5a                   	pop    edx
c001144d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011451:	53                   	push   ebx
c0011452:	e8 b3 fe ff ff       	call   c001130a <EnvVarContainer::EnvVarContainer(Process*)>
c0011457:	8b 07                	mov    eax,DWORD PTR [edi]
c0011459:	89 03                	mov    DWORD PTR [ebx],eax
c001145b:	c1 e0 03             	shl    eax,0x3
c001145e:	89 04 24             	mov    DWORD PTR [esp],eax
c0011461:	e8 50 66 ff ff       	call   c0007ab6 <malloc>
c0011466:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0011469:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001146b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001146e:	c1 e1 03             	shl    ecx,0x3
c0011471:	89 c7                	mov    edi,eax
c0011473:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011475:	83 c4 10             	add    esp,0x10
c0011478:	89 d8                	mov    eax,ebx
c001147a:	5b                   	pop    ebx
c001147b:	5e                   	pop    esi
c001147c:	5f                   	pop    edi
c001147d:	c3                   	ret    

c001147e <KeLoadSystemEnv()>:
c001147e:	53                   	push   ebx
c001147f:	83 ec 14             	sub    esp,0x14
c0011482:	6a 0c                	push   0xc
c0011484:	e8 2d 66 ff ff       	call   c0007ab6 <malloc>
c0011489:	89 c3                	mov    ebx,eax
c001148b:	58                   	pop    eax
c001148c:	5a                   	pop    edx
c001148d:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011493:	53                   	push   ebx
c0011494:	e8 71 fe ff ff       	call   c001130a <EnvVarContainer::EnvVarContainer(Process*)>
c0011499:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001149c:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c00114a2:	e8 47 fe ff ff       	call   c00112ee <EnvVarContainer::__loadSystem()>
c00114a7:	83 c4 18             	add    esp,0x18
c00114aa:	5b                   	pop    ebx
c00114ab:	c3                   	ret    

c00114ac <KeLoadUserEnv()>:
c00114ac:	53                   	push   ebx
c00114ad:	83 ec 14             	sub    esp,0x14
c00114b0:	6a 0c                	push   0xc
c00114b2:	e8 ff 65 ff ff       	call   c0007ab6 <malloc>
c00114b7:	89 c3                	mov    ebx,eax
c00114b9:	58                   	pop    eax
c00114ba:	5a                   	pop    edx
c00114bb:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00114c1:	53                   	push   ebx
c00114c2:	e8 43 fe ff ff       	call   c001130a <EnvVarContainer::EnvVarContainer(Process*)>
c00114c7:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c00114cd:	83 c4 18             	add    esp,0x18
c00114d0:	5b                   	pop    ebx
c00114d1:	c3                   	ret    

c00114d2 <KeFlushEnv()>:
c00114d2:	c3                   	ret    

c00114d3 <KeGetProcessTotalEnvCount(Process*)>:
c00114d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114d7:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c00114dd:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00114e3:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00114e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00114ea:	03 01                	add    eax,DWORD PTR [ecx]
c00114ec:	85 d2                	test   edx,edx
c00114ee:	74 02                	je     c00114f2 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00114f0:	03 02                	add    eax,DWORD PTR [edx]
c00114f2:	c3                   	ret    

c00114f3 <KeGetProcessEnvPair(Process*, int)>:
c00114f3:	57                   	push   edi
c00114f4:	56                   	push   esi
c00114f5:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c00114fb:	53                   	push   ebx
c00114fc:	85 f6                	test   esi,esi
c00114fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011502:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011506:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001150c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011510:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011512:	75 16                	jne    c001152a <KeGetProcessEnvPair(Process*, int)+0x37>
c0011514:	39 c2                	cmp    edx,eax
c0011516:	7c 16                	jl     c001152e <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011518:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c001151e:	8b 31                	mov    esi,DWORD PTR [ecx]
c0011520:	01 c6                	add    esi,eax
c0011522:	39 d6                	cmp    esi,edx
c0011524:	7e 3c                	jle    c0011562 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011526:	29 c2                	sub    edx,eax
c0011528:	eb 04                	jmp    c001152e <KeGetProcessEnvPair(Process*, int)+0x3b>
c001152a:	39 c2                	cmp    edx,eax
c001152c:	7d 05                	jge    c0011533 <KeGetProcessEnvPair(Process*, int)+0x40>
c001152e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0011531:	eb 20                	jmp    c0011553 <KeGetProcessEnvPair(Process*, int)+0x60>
c0011533:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011535:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0011538:	39 d1                	cmp    ecx,edx
c001153a:	7e 04                	jle    c0011540 <KeGetProcessEnvPair(Process*, int)+0x4d>
c001153c:	29 c2                	sub    edx,eax
c001153e:	eb 10                	jmp    c0011550 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0011540:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c0011546:	03 0e                	add    ecx,DWORD PTR [esi]
c0011548:	39 d1                	cmp    ecx,edx
c001154a:	7e 16                	jle    c0011562 <KeGetProcessEnvPair(Process*, int)+0x6f>
c001154c:	29 c2                	sub    edx,eax
c001154e:	29 fa                	sub    edx,edi
c0011550:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011553:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011556:	8b 02                	mov    eax,DWORD PTR [edx]
c0011558:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001155b:	89 03                	mov    DWORD PTR [ebx],eax
c001155d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011560:	eb 1d                	jmp    c001157f <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011562:	83 ec 0c             	sub    esp,0xc
c0011565:	68 4e 23 02 c0       	push   0xc002234e
c001156a:	e8 ac 00 00 00       	call   c001161b <KePanic(char const*)>
c001156f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011575:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001157c:	83 c4 10             	add    esp,0x10
c001157f:	89 d8                	mov    eax,ebx
c0011581:	5b                   	pop    ebx
c0011582:	5e                   	pop    esi
c0011583:	5f                   	pop    edi
c0011584:	c2 04 00             	ret    0x4

c0011587 <CPU::current()>:
c0011587:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001158c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011592:	c3                   	ret    

c0011593 <operator new(unsigned long)>:
c0011593:	e9 1e 65 ff ff       	jmp    c0007ab6 <malloc>

c0011598 <operator delete(void*)>:
c0011598:	e9 39 65 ff ff       	jmp    c0007ad6 <rfree>

c001159d <disableIRQs()>:
c001159d:	fa                   	cli    
c001159e:	c3                   	ret    

c001159f <enableIRQs()>:
c001159f:	fb                   	sti    
c00115a0:	c3                   	ret    

c00115a1 <lockScheduler()>:
c00115a1:	fa                   	cli    
c00115a2:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00115a8:	c3                   	ret    

c00115a9 <unlockScheduler()>:
c00115a9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00115ae:	48                   	dec    eax
c00115af:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00115b4:	75 01                	jne    c00115b7 <unlockScheduler()+0xe>
c00115b6:	fb                   	sti    
c00115b7:	c3                   	ret    

c00115b8 <lockStuff()>:
c00115b8:	fa                   	cli    
c00115b9:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00115bf:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c00115c5:	c3                   	ret    

c00115c6 <unlockStuff()>:
c00115c6:	83 ec 0c             	sub    esp,0xc
c00115c9:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00115ce:	48                   	dec    eax
c00115cf:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00115d4:	75 18                	jne    c00115ee <unlockStuff()+0x28>
c00115d6:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c00115dd:	74 0f                	je     c00115ee <unlockStuff()+0x28>
c00115df:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00115e9:	e8 ce 4a 00 00       	call   c00160bc <schedule()>
c00115ee:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00115f3:	48                   	dec    eax
c00115f4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00115f9:	75 01                	jne    c00115fc <unlockStuff()+0x36>
c00115fb:	fb                   	sti    
c00115fc:	83 c4 0c             	add    esp,0xc
c00115ff:	c3                   	ret    

c0011600 <Virt::getAKernelVAS()>:
c0011600:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0011605:	c3                   	ret    

c0011606 <__not_memcpy>:
c0011606:	57                   	push   edi
c0011607:	56                   	push   esi
c0011608:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001160c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011610:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011614:	89 c7                	mov    edi,eax
c0011616:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011618:	5e                   	pop    esi
c0011619:	5f                   	pop    edi
c001161a:	c3                   	ret    

c001161b <KePanic(char const*)>:
c001161b:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c0011622:	e9 3b 6a 00 00       	jmp    c0018062 <HalPanic(char const*)>

c0011627 <KePowerThread(void*)>:
c0011627:	83 ec 0c             	sub    esp,0xc
c001162a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001162f:	48                   	dec    eax
c0011630:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011635:	75 01                	jne    c0011638 <KePowerThread(void*)+0x11>
c0011637:	fb                   	sti    
c0011638:	83 ec 0c             	sub    esp,0xc
c001163b:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c0011642:	6a 0a                	push   0xa
c0011644:	e8 b7 4d 00 00       	call   c0016400 <sleep(unsigned int)>
c0011649:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c0011650:	83 c4 10             	add    esp,0x10
c0011653:	eb e3                	jmp    c0011638 <KePowerThread(void*)+0x11>

c0011655 <KeChangePowerSettings(PowerSettings)>:
c0011655:	57                   	push   edi
c0011656:	b9 09 00 00 00       	mov    ecx,0x9
c001165b:	56                   	push   esi
c001165c:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c0011661:	fc                   	cld    
c0011662:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011666:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011668:	5e                   	pop    esi
c0011669:	5f                   	pop    edi
c001166a:	c3                   	ret    

c001166b <KeUserIOReceived()>:
c001166b:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011675:	c3                   	ret    

c0011676 <KeHandlePowerButton()>:
c0011676:	83 ec 0c             	sub    esp,0xc
c0011679:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c001167e:	83 f8 02             	cmp    eax,0x2
c0011681:	75 10                	jne    c0011693 <KeHandlePowerButton()+0x1d>
c0011683:	83 ec 0c             	sub    esp,0xc
c0011686:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001168c:	e8 97 5a ff ff       	call   c0007128 <Computer::shutdown()>
c0011691:	eb 11                	jmp    c00116a4 <KeHandlePowerButton()+0x2e>
c0011693:	48                   	dec    eax
c0011694:	75 11                	jne    c00116a7 <KeHandlePowerButton()+0x31>
c0011696:	83 ec 0c             	sub    esp,0xc
c0011699:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001169f:	e8 b4 5a ff ff       	call   c0007158 <Computer::sleep()>
c00116a4:	83 c4 10             	add    esp,0x10
c00116a7:	83 c4 0c             	add    esp,0xc
c00116aa:	c3                   	ret    

c00116ab <KeHandleSleepButton()>:
c00116ab:	83 ec 0c             	sub    esp,0xc
c00116ae:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c00116b3:	83 f8 02             	cmp    eax,0x2
c00116b6:	75 10                	jne    c00116c8 <KeHandleSleepButton()+0x1d>
c00116b8:	83 ec 0c             	sub    esp,0xc
c00116bb:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116c1:	e8 62 5a ff ff       	call   c0007128 <Computer::shutdown()>
c00116c6:	eb 11                	jmp    c00116d9 <KeHandleSleepButton()+0x2e>
c00116c8:	48                   	dec    eax
c00116c9:	75 11                	jne    c00116dc <KeHandleSleepButton()+0x31>
c00116cb:	83 ec 0c             	sub    esp,0xc
c00116ce:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116d4:	e8 7f 5a ff ff       	call   c0007158 <Computer::sleep()>
c00116d9:	83 c4 10             	add    esp,0x10
c00116dc:	83 c4 0c             	add    esp,0xc
c00116df:	c3                   	ret    

c00116e0 <KeSetupPowerManager()>:
c00116e0:	83 ec 0c             	sub    esp,0xc
c00116e3:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c00116ed:	68 f0 00 00 00       	push   0xf0
c00116f2:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c00116f9:	6a 00                	push   0x0
c00116fb:	68 27 16 01 c0       	push   0xc0011627
c0011700:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011706:	e8 61 47 00 00       	call   c0015e6c <Process::createThread(void (*)(void*), void*, int)>
c001170b:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c0011715:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c001171f:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c0011729:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c0011733:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c001173d:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c0011747:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c0011751:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c001175b:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c0011765:	83 c4 1c             	add    esp,0x1c
c0011768:	c3                   	ret    

c0011769 <KeRand()>:
c0011769:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c0011773:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c001177d:	53                   	push   ebx
c001177e:	01 c1                	add    ecx,eax
c0011780:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011785:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c001178b:	01 ca                	add    edx,ecx
c001178d:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011792:	83 d2 00             	adc    edx,0x0
c0011795:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c001179a:	0f b7 da             	movzx  ebx,dx
c001179d:	89 da                	mov    edx,ebx
c001179f:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c00117a5:	0f ac d0 0e          	shrd   eax,edx,0xe
c00117a9:	5b                   	pop    ebx
c00117aa:	c3                   	ret    

c00117ab <KeSeedRand(unsigned int)>:
c00117ab:	53                   	push   ebx
c00117ac:	83 ec 08             	sub    esp,0x8
c00117af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117b3:	e8 c9 6b 00 00       	call   c0018381 <HalGetRand()>
c00117b8:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c00117c2:	31 d8                	xor    eax,ebx
c00117c4:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c00117c9:	e8 9b ff ff ff       	call   c0011769 <KeRand()>
c00117ce:	83 c4 08             	add    esp,0x8
c00117d1:	5b                   	pop    ebx
c00117d2:	eb 95                	jmp    c0011769 <KeRand()>

c00117d4 <KeInitRand()>:
c00117d4:	83 ec 0c             	sub    esp,0xc
c00117d7:	e8 9a 69 00 00       	call   c0018176 <HalQueryPerformanceCounter()>
c00117dc:	0f 20 da             	mov    edx,cr3
c00117df:	0f 22 da             	mov    cr3,edx
c00117e2:	0f 20 da             	mov    edx,cr3
c00117e5:	0f 22 da             	mov    cr3,edx
c00117e8:	0f 20 da             	mov    edx,cr3
c00117eb:	0f 22 da             	mov    cr3,edx
c00117ee:	0f 20 da             	mov    edx,cr3
c00117f1:	0f 22 da             	mov    cr3,edx
c00117f4:	83 ec 0c             	sub    esp,0xc
c00117f7:	35 03 8a 95 38       	xor    eax,0x38958a03
c00117fc:	50                   	push   eax
c00117fd:	e8 a9 ff ff ff       	call   c00117ab <KeSeedRand(unsigned int)>
c0011802:	83 c4 1c             	add    esp,0x1c
c0011805:	c3                   	ret    
c0011806:	66 90                	xchg   ax,ax

c0011808 <KeResolveCompatibilitySymbol(char*)>:
c0011808:	83 ec 0c             	sub    esp,0xc
c001180b:	83 ec 08             	sub    esp,0x8
c001180e:	68 68 23 02 c0       	push   0xc0022368
c0011813:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011817:	e8 34 ef fe ff       	call   c0000750 <strcmp>
c001181c:	83 c4 10             	add    esp,0x10
c001181f:	85 c0                	test   eax,eax
c0011821:	0f 94 c0             	sete   al
c0011824:	0f b6 c0             	movzx  eax,al
c0011827:	85 c0                	test   eax,eax
c0011829:	74 0d                	je     c0011838 <KeResolveCompatibilitySymbol(char*)+0x30>
c001182b:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c0011830:	e9 8b 01 00 00       	jmp    c00119c0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011835:	8d 76 00             	lea    esi,[esi+0x0]
c0011838:	83 ec 08             	sub    esp,0x8
c001183b:	68 71 23 02 c0       	push   0xc0022371
c0011840:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011844:	e8 07 ef fe ff       	call   c0000750 <strcmp>
c0011849:	83 c4 10             	add    esp,0x10
c001184c:	85 c0                	test   eax,eax
c001184e:	0f 94 c0             	sete   al
c0011851:	0f b6 c0             	movzx  eax,al
c0011854:	85 c0                	test   eax,eax
c0011856:	74 0c                	je     c0011864 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011858:	b8 30 f7 01 c0       	mov    eax,0xc001f730
c001185d:	e9 5e 01 00 00       	jmp    c00119c0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011862:	66 90                	xchg   ax,ax
c0011864:	83 ec 08             	sub    esp,0x8
c0011867:	68 7b 23 02 c0       	push   0xc002237b
c001186c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011870:	e8 db ee fe ff       	call   c0000750 <strcmp>
c0011875:	83 c4 10             	add    esp,0x10
c0011878:	85 c0                	test   eax,eax
c001187a:	0f 94 c0             	sete   al
c001187d:	0f b6 c0             	movzx  eax,al
c0011880:	85 c0                	test   eax,eax
c0011882:	74 0c                	je     c0011890 <KeResolveCompatibilitySymbol(char*)+0x88>
c0011884:	b8 64 f4 01 c0       	mov    eax,0xc001f464
c0011889:	e9 32 01 00 00       	jmp    c00119c0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001188e:	66 90                	xchg   ax,ax
c0011890:	83 ec 08             	sub    esp,0x8
c0011893:	68 84 23 02 c0       	push   0xc0022384
c0011898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001189c:	e8 af ee fe ff       	call   c0000750 <strcmp>
c00118a1:	83 c4 10             	add    esp,0x10
c00118a4:	85 c0                	test   eax,eax
c00118a6:	0f 94 c0             	sete   al
c00118a9:	0f b6 c0             	movzx  eax,al
c00118ac:	85 c0                	test   eax,eax
c00118ae:	74 0c                	je     c00118bc <KeResolveCompatibilitySymbol(char*)+0xb4>
c00118b0:	b8 1b 16 01 c0       	mov    eax,0xc001161b
c00118b5:	e9 06 01 00 00       	jmp    c00119c0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118ba:	66 90                	xchg   ax,ax
c00118bc:	83 ec 08             	sub    esp,0x8
c00118bf:	68 97 23 02 c0       	push   0xc0022397
c00118c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118c8:	e8 83 ee fe ff       	call   c0000750 <strcmp>
c00118cd:	83 c4 10             	add    esp,0x10
c00118d0:	85 c0                	test   eax,eax
c00118d2:	0f 94 c0             	sete   al
c00118d5:	0f b6 c0             	movzx  eax,al
c00118d8:	85 c0                	test   eax,eax
c00118da:	74 0c                	je     c00118e8 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00118dc:	b8 1b 0f 01 c0       	mov    eax,0xc0010f1b
c00118e1:	e9 da 00 00 00       	jmp    c00119c0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118e6:	66 90                	xchg   ax,ax
c00118e8:	83 ec 08             	sub    esp,0x8
c00118eb:	68 b4 23 02 c0       	push   0xc00223b4
c00118f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118f4:	e8 57 ee fe ff       	call   c0000750 <strcmp>
c00118f9:	83 c4 10             	add    esp,0x10
c00118fc:	85 c0                	test   eax,eax
c00118fe:	0f 94 c0             	sete   al
c0011901:	0f b6 c0             	movzx  eax,al
c0011904:	85 c0                	test   eax,eax
c0011906:	74 0c                	je     c0011914 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011908:	b8 30 f8 01 c0       	mov    eax,0xc001f830
c001190d:	e9 ae 00 00 00       	jmp    c00119c0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011912:	66 90                	xchg   ax,ax
c0011914:	83 ec 08             	sub    esp,0x8
c0011917:	68 be 23 02 c0       	push   0xc00223be
c001191c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011920:	e8 2b ee fe ff       	call   c0000750 <strcmp>
c0011925:	83 c4 10             	add    esp,0x10
c0011928:	85 c0                	test   eax,eax
c001192a:	0f 94 c0             	sete   al
c001192d:	0f b6 c0             	movzx  eax,al
c0011930:	85 c0                	test   eax,eax
c0011932:	74 0c                	je     c0011940 <KeResolveCompatibilitySymbol(char*)+0x138>
c0011934:	b8 b0 f5 01 c0       	mov    eax,0xc001f5b0
c0011939:	e9 82 00 00 00       	jmp    c00119c0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001193e:	66 90                	xchg   ax,ax
c0011940:	83 ec 08             	sub    esp,0x8
c0011943:	68 c7 23 02 c0       	push   0xc00223c7
c0011948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001194c:	e8 ff ed fe ff       	call   c0000750 <strcmp>
c0011951:	83 c4 10             	add    esp,0x10
c0011954:	85 c0                	test   eax,eax
c0011956:	0f 94 c0             	sete   al
c0011959:	0f b6 c0             	movzx  eax,al
c001195c:	85 c0                	test   eax,eax
c001195e:	74 08                	je     c0011968 <KeResolveCompatibilitySymbol(char*)+0x160>
c0011960:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011965:	eb 59                	jmp    c00119c0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011967:	90                   	nop
c0011968:	83 ec 08             	sub    esp,0x8
c001196b:	68 df 23 02 c0       	push   0xc00223df
c0011970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011974:	e8 d7 ed fe ff       	call   c0000750 <strcmp>
c0011979:	83 c4 10             	add    esp,0x10
c001197c:	85 c0                	test   eax,eax
c001197e:	0f 94 c0             	sete   al
c0011981:	0f b6 c0             	movzx  eax,al
c0011984:	85 c0                	test   eax,eax
c0011986:	74 08                	je     c0011990 <KeResolveCompatibilitySymbol(char*)+0x188>
c0011988:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c001198d:	eb 31                	jmp    c00119c0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001198f:	90                   	nop
c0011990:	83 ec 08             	sub    esp,0x8
c0011993:	68 ec 23 02 c0       	push   0xc00223ec
c0011998:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001199c:	e8 af ed fe ff       	call   c0000750 <strcmp>
c00119a1:	83 c4 10             	add    esp,0x10
c00119a4:	85 c0                	test   eax,eax
c00119a6:	0f 94 c0             	sete   al
c00119a9:	0f b6 c0             	movzx  eax,al
c00119ac:	85 c0                	test   eax,eax
c00119ae:	74 08                	je     c00119b8 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00119b0:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c00119b5:	eb 09                	jmp    c00119c0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119b7:	90                   	nop
c00119b8:	b8 00 00 00 00       	mov    eax,0x0
c00119bd:	8d 76 00             	lea    esi,[esi+0x0]
c00119c0:	83 c4 0c             	add    esp,0xc
c00119c3:	c3                   	ret    

c00119c4 <KiSigKill(int)>:
c00119c4:	83 ec 0c             	sub    esp,0xc
c00119c7:	6a 00                	push   0x0
c00119c9:	6a 00                	push   0x0
c00119cb:	6a ff                	push   0xffffffff
c00119cd:	6a 01                	push   0x1
c00119cf:	e8 7e 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119d4:	83 c4 1c             	add    esp,0x1c
c00119d7:	c3                   	ret    

c00119d8 <KiDefaultSignalHandlerIgnore(int)>:
c00119d8:	c3                   	ret    

c00119d9 <KiDefaultSignalHandlerPause(int)>:
c00119d9:	57                   	push   edi
c00119da:	b9 07 00 00 00       	mov    ecx,0x7
c00119df:	56                   	push   esi
c00119e0:	be 35 24 02 c0       	mov    esi,0xc0022435
c00119e5:	83 ec 24             	sub    esp,0x24
c00119e8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00119ec:	fc                   	cld    
c00119ed:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00119ef:	8d 44 24 04          	lea    eax,[esp+0x4]
c00119f3:	50                   	push   eax
c00119f4:	6a 00                	push   0x0
c00119f6:	6a 00                	push   0x0
c00119f8:	6a 27                	push   0x27
c00119fa:	e8 53 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119ff:	83 c4 34             	add    esp,0x34
c0011a02:	5e                   	pop    esi
c0011a03:	5f                   	pop    edi
c0011a04:	c3                   	ret    

c0011a05 <KiDefaultSignalHandlerResume(int)>:
c0011a05:	57                   	push   edi
c0011a06:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011a0b:	56                   	push   esi
c0011a0c:	be 51 24 02 c0       	mov    esi,0xc0022451
c0011a11:	83 ec 24             	sub    esp,0x24
c0011a14:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011a18:	fc                   	cld    
c0011a19:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a1b:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011a1f:	50                   	push   eax
c0011a20:	6a 00                	push   0x0
c0011a22:	6a 00                	push   0x0
c0011a24:	6a 27                	push   0x27
c0011a26:	e8 27 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a2b:	83 c4 34             	add    esp,0x34
c0011a2e:	5e                   	pop    esi
c0011a2f:	5f                   	pop    edi
c0011a30:	c3                   	ret    

c0011a31 <KeDeinitSignals(SigHandlerBlock*)>:
c0011a31:	e9 90 60 ff ff       	jmp    c0007ac6 <free>

c0011a36 <KeInitSignals()>:
c0011a36:	53                   	push   ebx
c0011a37:	83 ec 14             	sub    esp,0x14
c0011a3a:	68 c8 00 00 00       	push   0xc8
c0011a3f:	e8 72 60 ff ff       	call   c0007ab6 <malloc>
c0011a44:	83 c4 0c             	add    esp,0xc
c0011a47:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011a51:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011a5b:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011a62:	89 c3                	mov    ebx,eax
c0011a64:	6a 20                	push   0x20
c0011a66:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011a6c:	6a 00                	push   0x0
c0011a6e:	50                   	push   eax
c0011a6f:	e8 7c ea fe ff       	call   c00004f0 <memset>
c0011a74:	83 c4 0c             	add    esp,0xc
c0011a77:	6a 44                	push   0x44
c0011a79:	6a 00                	push   0x0
c0011a7b:	53                   	push   ebx
c0011a7c:	e8 6f ea fe ff       	call   c00004f0 <memset>
c0011a81:	89 d8                	mov    eax,ebx
c0011a83:	83 c4 18             	add    esp,0x18
c0011a86:	5b                   	pop    ebx
c0011a87:	c3                   	ret    

c0011a88 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011a88:	53                   	push   ebx
c0011a89:	b8 01 00 00 00       	mov    eax,0x1
c0011a8e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011a92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a96:	83 f9 10             	cmp    ecx,0x10
c0011a99:	7f 21                	jg     c0011abc <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011a9b:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011aa2:	89 03                	mov    DWORD PTR [ebx],eax
c0011aa4:	b8 01 00 00 00       	mov    eax,0x1
c0011aa9:	d3 e0                	shl    eax,cl
c0011aab:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011aaf:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011ab2:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011aba:	31 c0                	xor    eax,eax
c0011abc:	5b                   	pop    ebx
c0011abd:	c3                   	ret    

c0011abe <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011abe:	55                   	push   ebp
c0011abf:	57                   	push   edi
c0011ac0:	bf 08 00 00 00       	mov    edi,0x8
c0011ac5:	56                   	push   esi
c0011ac6:	53                   	push   ebx
c0011ac7:	83 ec 18             	sub    esp,0x18
c0011aca:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011ace:	68 6e 24 02 c0       	push   0xc002246e
c0011ad3:	e8 6d 8e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011ad8:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011adf:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011ae5:	83 c4 10             	add    esp,0x10
c0011ae8:	31 c9                	xor    ecx,ecx
c0011aea:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011aee:	99                   	cdq    
c0011aef:	f7 ff                	idiv   edi
c0011af1:	8d 42 24             	lea    eax,[edx+0x24]
c0011af4:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011af8:	85 f6                	test   esi,esi
c0011afa:	75 1a                	jne    c0011b16 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011afc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011b00:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011b04:	50                   	push   eax
c0011b05:	50                   	push   eax
c0011b06:	52                   	push   edx
c0011b07:	68 7f 24 02 c0       	push   0xc002247f
c0011b0c:	e8 34 8e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011b11:	83 c4 10             	add    esp,0x10
c0011b14:	eb 1b                	jmp    c0011b31 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011b16:	41                   	inc    ecx
c0011b17:	83 f9 08             	cmp    ecx,0x8
c0011b1a:	75 ce                	jne    c0011aea <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011b1c:	83 ec 0c             	sub    esp,0xc
c0011b1f:	be 01 00 00 00       	mov    esi,0x1
c0011b24:	68 a0 24 02 c0       	push   0xc00224a0
c0011b29:	e8 17 8e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011b2e:	83 c4 10             	add    esp,0x10
c0011b31:	83 c4 0c             	add    esp,0xc
c0011b34:	89 f0                	mov    eax,esi
c0011b36:	5b                   	pop    ebx
c0011b37:	5e                   	pop    esi
c0011b38:	5f                   	pop    edi
c0011b39:	5d                   	pop    ebp
c0011b3a:	c3                   	ret    

c0011b3b <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011b3b:	55                   	push   ebp
c0011b3c:	57                   	push   edi
c0011b3d:	56                   	push   esi
c0011b3e:	53                   	push   ebx
c0011b3f:	51                   	push   ecx
c0011b40:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011b44:	85 db                	test   ebx,ebx
c0011b46:	0f 84 bc 00 00 00    	je     c0011c08 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b4c:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011b53:	0f 84 af 00 00 00    	je     c0011c08 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b59:	31 c9                	xor    ecx,ecx
c0011b5b:	bf 08 00 00 00       	mov    edi,0x8
c0011b60:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011b66:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011b69:	99                   	cdq    
c0011b6a:	f7 ff                	idiv   edi
c0011b6c:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011b73:	85 ed                	test   ebp,ebp
c0011b75:	0f 84 9e 00 00 00    	je     c0011c19 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011b7b:	89 e9                	mov    ecx,ebp
c0011b7d:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011b83:	bf 01 00 00 00       	mov    edi,0x1
c0011b88:	89 04 24             	mov    DWORD PTR [esp],eax
c0011b8b:	d3 e7                	shl    edi,cl
c0011b8d:	31 c9                	xor    ecx,ecx
c0011b8f:	b8 01 00 00 00       	mov    eax,0x1
c0011b94:	d3 e0                	shl    eax,cl
c0011b96:	85 04 24             	test   DWORD PTR [esp],eax
c0011b99:	74 06                	je     c0011ba1 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011b9b:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011b9f:	75 67                	jne    c0011c08 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011ba1:	41                   	inc    ecx
c0011ba2:	83 f9 11             	cmp    ecx,0x11
c0011ba5:	75 e8                	jne    c0011b8f <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011ba7:	46                   	inc    esi
c0011ba8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011bab:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011bb1:	09 f8                	or     eax,edi
c0011bb3:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011bbe:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011bc4:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011bcb:	31 c0                	xor    eax,eax
c0011bcd:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011bd5:	74 09                	je     c0011be0 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011bd7:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011bde:	eb 06                	jmp    c0011be6 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011be0:	40                   	inc    eax
c0011be1:	83 f8 08             	cmp    eax,0x8
c0011be4:	75 e7                	jne    c0011bcd <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011be6:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011be9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011bed:	83 fd 09             	cmp    ebp,0x9
c0011bf0:	89 2a                	mov    DWORD PTR [edx],ebp
c0011bf2:	75 07                	jne    c0011bfb <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011bf4:	b8 c4 19 01 c0       	mov    eax,0xc00119c4
c0011bf9:	eb 31                	jmp    c0011c2c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bfb:	83 f8 01             	cmp    eax,0x1
c0011bfe:	75 0c                	jne    c0011c0c <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011c00:	f7 d7                	not    edi
c0011c02:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011c08:	31 c0                	xor    eax,eax
c0011c0a:	eb 20                	jmp    c0011c2c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c0c:	85 c0                	test   eax,eax
c0011c0e:	75 1c                	jne    c0011c2c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c10:	8b 04 ad a0 3c 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc360]
c0011c17:	eb 13                	jmp    c0011c2c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c19:	46                   	inc    esi
c0011c1a:	41                   	inc    ecx
c0011c1b:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011c21:	83 f9 08             	cmp    ecx,0x8
c0011c24:	0f 85 36 ff ff ff    	jne    c0011b60 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011c2a:	eb dc                	jmp    c0011c08 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011c2c:	5a                   	pop    edx
c0011c2d:	5b                   	pop    ebx
c0011c2e:	5e                   	pop    esi
c0011c2f:	5f                   	pop    edi
c0011c30:	5d                   	pop    ebp
c0011c31:	c3                   	ret    

c0011c32 <KiCheckSignalZ>:
c0011c32:	83 ec 10             	sub    esp,0x10
c0011c35:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011c39:	50                   	push   eax
c0011c3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c3f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c42:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c48:	e8 ee fe ff ff       	call   c0011b3b <KeCheckSignal(SigHandlerBlock*, int*)>
c0011c4d:	5a                   	pop    edx
c0011c4e:	31 d2                	xor    edx,edx
c0011c50:	59                   	pop    ecx
c0011c51:	85 c0                	test   eax,eax
c0011c53:	74 19                	je     c0011c6e <KiCheckSignalZ+0x3c>
c0011c55:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011c5b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011c5e:	89 02                	mov    DWORD PTR [edx],eax
c0011c60:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011c67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c6b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011c6e:	89 d0                	mov    eax,edx
c0011c70:	83 c4 10             	add    esp,0x10
c0011c73:	c3                   	ret    

c0011c74 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011c74:	56                   	push   esi
c0011c75:	53                   	push   ebx
c0011c76:	bb 01 00 00 00       	mov    ebx,0x1
c0011c7b:	52                   	push   edx
c0011c7c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011c80:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c84:	d3 e3                	shl    ebx,cl
c0011c86:	83 f9 10             	cmp    ecx,0x10
c0011c89:	7f 08                	jg     c0011c93 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011c8b:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011c91:	75 10                	jne    c0011ca3 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011c93:	83 ec 0c             	sub    esp,0xc
c0011c96:	68 b1 24 02 c0       	push   0xc00224b1
c0011c9b:	e8 7b f9 ff ff       	call   c001161b <KePanic(char const*)>
c0011ca0:	83 c4 10             	add    esp,0x10
c0011ca3:	f7 d3                	not    ebx
c0011ca5:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011cab:	58                   	pop    eax
c0011cac:	5b                   	pop    ebx
c0011cad:	5e                   	pop    esi
c0011cae:	c3                   	ret    

c0011caf <KiFinishSignalZ>:
c0011caf:	53                   	push   ebx
c0011cb0:	83 ec 10             	sub    esp,0x10
c0011cb3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011cb7:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011cba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cbf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cc2:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011cc8:	e8 a7 ff ff ff       	call   c0011c74 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011ccd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011cd3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011cda:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011ce1:	83 c4 18             	add    esp,0x18
c0011ce4:	5b                   	pop    ebx
c0011ce5:	c3                   	ret    

c0011ce6 <SysSeekDir(regs*)>:
c0011ce6:	31 c0                	xor    eax,eax
c0011ce8:	31 d2                	xor    edx,edx
c0011cea:	c3                   	ret    

c0011ceb <SysTellDir(regs*)>:
c0011ceb:	31 c0                	xor    eax,eax
c0011ced:	31 d2                	xor    edx,edx
c0011cef:	c3                   	ret    

c0011cf0 <SysVerify(regs*)>:
c0011cf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cf4:	31 d2                	xor    edx,edx
c0011cf6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011cf9:	c3                   	ret    

c0011cfa <SysGetArgc(regs*)>:
c0011cfa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d02:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011d08:	89 c2                	mov    edx,eax
c0011d0a:	c1 fa 1f             	sar    edx,0x1f
c0011d0d:	c3                   	ret    

c0011d0e <SysTTYName(regs*)>:
c0011d0e:	b8 01 00 00 00       	mov    eax,0x1
c0011d13:	31 d2                	xor    edx,edx
c0011d15:	c3                   	ret    

c0011d16 <SysFormatDisk(regs*)>:
c0011d16:	56                   	push   esi
c0011d17:	53                   	push   ebx
c0011d18:	83 ec 04             	sub    esp,0x4
c0011d1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d1f:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011d25:	eb 28                	jmp    c0011d4f <SysFormatDisk(regs*)+0x39>
c0011d27:	83 ec 0c             	sub    esp,0xc
c0011d2a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011d2d:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011d30:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d32:	51                   	push   ecx
c0011d33:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011d36:	51                   	push   ecx
c0011d37:	50                   	push   eax
c0011d38:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011d3f:	50                   	push   eax
c0011d40:	53                   	push   ebx
c0011d41:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011d44:	83 c4 20             	add    esp,0x20
c0011d47:	83 f8 08             	cmp    eax,0x8
c0011d4a:	75 14                	jne    c0011d60 <SysFormatDisk(regs*)+0x4a>
c0011d4c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011d4f:	85 db                	test   ebx,ebx
c0011d51:	75 d4                	jne    c0011d27 <SysFormatDisk(regs*)+0x11>
c0011d53:	83 c4 04             	add    esp,0x4
c0011d56:	b8 03 00 00 00       	mov    eax,0x3
c0011d5b:	31 d2                	xor    edx,edx
c0011d5d:	5b                   	pop    ebx
c0011d5e:	5e                   	pop    esi
c0011d5f:	c3                   	ret    
c0011d60:	85 c0                	test   eax,eax
c0011d62:	74 1f                	je     c0011d83 <SysFormatDisk(regs*)+0x6d>
c0011d64:	83 f8 09             	cmp    eax,0x9
c0011d67:	74 0d                	je     c0011d76 <SysFormatDisk(regs*)+0x60>
c0011d69:	83 c4 04             	add    esp,0x4
c0011d6c:	b8 02 00 00 00       	mov    eax,0x2
c0011d71:	31 d2                	xor    edx,edx
c0011d73:	5b                   	pop    ebx
c0011d74:	5e                   	pop    esi
c0011d75:	c3                   	ret    
c0011d76:	83 c4 04             	add    esp,0x4
c0011d79:	b8 01 00 00 00       	mov    eax,0x1
c0011d7e:	31 d2                	xor    edx,edx
c0011d80:	5b                   	pop    ebx
c0011d81:	5e                   	pop    esi
c0011d82:	c3                   	ret    
c0011d83:	83 c4 04             	add    esp,0x4
c0011d86:	31 c0                	xor    eax,eax
c0011d88:	31 d2                	xor    edx,edx
c0011d8a:	5b                   	pop    ebx
c0011d8b:	5e                   	pop    esi
c0011d8c:	c3                   	ret    

c0011d8d <SysSetDiskVolumeLabel(regs*)>:
c0011d8d:	56                   	push   esi
c0011d8e:	53                   	push   ebx
c0011d8f:	83 ec 04             	sub    esp,0x4
c0011d92:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011d96:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011d99:	83 f8 19             	cmp    eax,0x19
c0011d9c:	77 33                	ja     c0011dd1 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d9e:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011da5:	85 c9                	test   ecx,ecx
c0011da7:	74 28                	je     c0011dd1 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011da9:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011dac:	85 db                	test   ebx,ebx
c0011dae:	74 21                	je     c0011dd1 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011db0:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011db6:	85 d2                	test   edx,edx
c0011db8:	74 17                	je     c0011dd1 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011dba:	8b 32                	mov    esi,DWORD PTR [edx]
c0011dbc:	53                   	push   ebx
c0011dbd:	50                   	push   eax
c0011dbe:	51                   	push   ecx
c0011dbf:	52                   	push   edx
c0011dc0:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011dc3:	83 c4 10             	add    esp,0x10
c0011dc6:	89 c2                	mov    edx,eax
c0011dc8:	83 c4 04             	add    esp,0x4
c0011dcb:	c1 fa 1f             	sar    edx,0x1f
c0011dce:	5b                   	pop    ebx
c0011dcf:	5e                   	pop    esi
c0011dd0:	c3                   	ret    
c0011dd1:	83 c4 04             	add    esp,0x4
c0011dd4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011dd9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011dde:	5b                   	pop    ebx
c0011ddf:	5e                   	pop    esi
c0011de0:	c3                   	ret    

c0011de1 <SysGetDiskVolumeLabel(regs*)>:
c0011de1:	57                   	push   edi
c0011de2:	56                   	push   esi
c0011de3:	53                   	push   ebx
c0011de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011de8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011deb:	83 fa 19             	cmp    edx,0x19
c0011dee:	77 3c                	ja     c0011e2c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011df0:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011df7:	85 c9                	test   ecx,ecx
c0011df9:	74 31                	je     c0011e2c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dfb:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011dfe:	85 db                	test   ebx,ebx
c0011e00:	74 2a                	je     c0011e2c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e02:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011e05:	85 f6                	test   esi,esi
c0011e07:	74 23                	je     c0011e2c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e09:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011e0f:	85 c0                	test   eax,eax
c0011e11:	74 19                	je     c0011e2c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e13:	83 ec 0c             	sub    esp,0xc
c0011e16:	8b 38                	mov    edi,DWORD PTR [eax]
c0011e18:	56                   	push   esi
c0011e19:	53                   	push   ebx
c0011e1a:	52                   	push   edx
c0011e1b:	51                   	push   ecx
c0011e1c:	50                   	push   eax
c0011e1d:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011e20:	83 c4 20             	add    esp,0x20
c0011e23:	89 c2                	mov    edx,eax
c0011e25:	5b                   	pop    ebx
c0011e26:	c1 fa 1f             	sar    edx,0x1f
c0011e29:	5e                   	pop    esi
c0011e2a:	5f                   	pop    edi
c0011e2b:	c3                   	ret    
c0011e2c:	5b                   	pop    ebx
c0011e2d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011e32:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e37:	5e                   	pop    esi
c0011e38:	5f                   	pop    edi
c0011e39:	c3                   	ret    

c0011e3a <SysShutdown(regs*)>:
c0011e3a:	83 ec 0c             	sub    esp,0xc
c0011e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e41:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011e44:	85 c0                	test   eax,eax
c0011e46:	74 18                	je     c0011e60 <SysShutdown(regs*)+0x26>
c0011e48:	83 f8 01             	cmp    eax,0x1
c0011e4b:	74 38                	je     c0011e85 <SysShutdown(regs*)+0x4b>
c0011e4d:	83 f8 02             	cmp    eax,0x2
c0011e50:	74 24                	je     c0011e76 <SysShutdown(regs*)+0x3c>
c0011e52:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e57:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e5c:	83 c4 0c             	add    esp,0xc
c0011e5f:	c3                   	ret    
c0011e60:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e65:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e67:	6a 00                	push   0x0
c0011e69:	6a 00                	push   0x0
c0011e6b:	6a 00                	push   0x0
c0011e6d:	50                   	push   eax
c0011e6e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e71:	83 c4 10             	add    esp,0x10
c0011e74:	eb dc                	jmp    c0011e52 <SysShutdown(regs*)+0x18>
c0011e76:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e7d:	6a 00                	push   0x0
c0011e7f:	6a 00                	push   0x0
c0011e81:	6a 01                	push   0x1
c0011e83:	eb e8                	jmp    c0011e6d <SysShutdown(regs*)+0x33>
c0011e85:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011e8a:	85 c0                	test   eax,eax
c0011e8c:	74 02                	je     c0011e90 <SysShutdown(regs*)+0x56>
c0011e8e:	ff d0                	call   eax
c0011e90:	31 c0                	xor    eax,eax
c0011e92:	31 d2                	xor    edx,edx
c0011e94:	83 c4 0c             	add    esp,0xc
c0011e97:	c3                   	ret    

c0011e98 <SysRealpath(regs*)>:
c0011e98:	83 ec 0c             	sub    esp,0xc
c0011e9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e9f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011ea2:	85 d2                	test   edx,edx
c0011ea4:	74 07                	je     c0011ead <SysRealpath(regs*)+0x15>
c0011ea6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011ea9:	85 c0                	test   eax,eax
c0011eab:	75 0b                	jne    c0011eb8 <SysRealpath(regs*)+0x20>
c0011ead:	b8 01 00 00 00       	mov    eax,0x1
c0011eb2:	31 d2                	xor    edx,edx
c0011eb4:	83 c4 0c             	add    esp,0xc
c0011eb7:	c3                   	ret    
c0011eb8:	6a 00                	push   0x0
c0011eba:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011ec0:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011ec3:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011ec9:	51                   	push   ecx
c0011eca:	52                   	push   edx
c0011ecb:	50                   	push   eax
c0011ecc:	e8 7f 99 ff ff       	call   c000b850 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011ed1:	83 c4 10             	add    esp,0x10
c0011ed4:	31 c0                	xor    eax,eax
c0011ed6:	31 d2                	xor    edx,edx
c0011ed8:	83 c4 0c             	add    esp,0xc
c0011edb:	c3                   	ret    

c0011edc <SysReadDir(regs*)>:
c0011edc:	53                   	push   ebx
c0011edd:	83 ec 18             	sub    esp,0x18
c0011ee0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ee4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011ee7:	83 f8 02             	cmp    eax,0x2
c0011eea:	76 61                	jbe    c0011f4d <SysReadDir(regs*)+0x71>
c0011eec:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011ef3:	77 49                	ja     c0011f3e <SysReadDir(regs*)+0x62>
c0011ef5:	83 ec 0c             	sub    esp,0xc
c0011ef8:	50                   	push   eax
c0011ef9:	e8 b5 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011efe:	83 c4 10             	add    esp,0x10
c0011f01:	85 c0                	test   eax,eax
c0011f03:	74 39                	je     c0011f3e <SysReadDir(regs*)+0x62>
c0011f05:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f0d:	83 ec 0c             	sub    esp,0xc
c0011f10:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f12:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f16:	51                   	push   ecx
c0011f17:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011f1a:	51                   	push   ecx
c0011f1b:	6a 00                	push   0x0
c0011f1d:	68 10 01 00 00       	push   0x110
c0011f22:	50                   	push   eax
c0011f23:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f26:	83 c4 20             	add    esp,0x20
c0011f29:	85 c0                	test   eax,eax
c0011f2b:	74 29                	je     c0011f56 <SysReadDir(regs*)+0x7a>
c0011f2d:	83 f8 07             	cmp    eax,0x7
c0011f30:	74 1b                	je     c0011f4d <SysReadDir(regs*)+0x71>
c0011f32:	b8 02 00 00 00       	mov    eax,0x2
c0011f37:	31 d2                	xor    edx,edx
c0011f39:	83 c4 18             	add    esp,0x18
c0011f3c:	5b                   	pop    ebx
c0011f3d:	c3                   	ret    
c0011f3e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f43:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f48:	83 c4 18             	add    esp,0x18
c0011f4b:	5b                   	pop    ebx
c0011f4c:	c3                   	ret    
c0011f4d:	b8 01 00 00 00       	mov    eax,0x1
c0011f52:	31 d2                	xor    edx,edx
c0011f54:	eb e3                	jmp    c0011f39 <SysReadDir(regs*)+0x5d>
c0011f56:	31 c0                	xor    eax,eax
c0011f58:	31 d2                	xor    edx,edx
c0011f5a:	eb dd                	jmp    c0011f39 <SysReadDir(regs*)+0x5d>

c0011f5c <SysIsATTY(regs*)>:
c0011f5c:	83 ec 0c             	sub    esp,0xc
c0011f5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f63:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f66:	83 f8 02             	cmp    eax,0x2
c0011f69:	76 07                	jbe    c0011f72 <SysIsATTY(regs*)+0x16>
c0011f6b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011f70:	75 26                	jne    c0011f98 <SysIsATTY(regs*)+0x3c>
c0011f72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f77:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f7a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011f80:	85 c0                	test   eax,eax
c0011f82:	74 24                	je     c0011fa8 <SysIsATTY(regs*)+0x4c>
c0011f84:	83 ec 0c             	sub    esp,0xc
c0011f87:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f89:	50                   	push   eax
c0011f8a:	ff 12                	call   DWORD PTR [edx]
c0011f8c:	31 d2                	xor    edx,edx
c0011f8e:	0f b6 c0             	movzx  eax,al
c0011f91:	83 c4 10             	add    esp,0x10
c0011f94:	83 c4 0c             	add    esp,0xc
c0011f97:	c3                   	ret    
c0011f98:	83 ec 0c             	sub    esp,0xc
c0011f9b:	50                   	push   eax
c0011f9c:	e8 12 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011fa1:	83 c4 10             	add    esp,0x10
c0011fa4:	85 c0                	test   eax,eax
c0011fa6:	75 dc                	jne    c0011f84 <SysIsATTY(regs*)+0x28>
c0011fa8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fad:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fb2:	83 c4 0c             	add    esp,0xc
c0011fb5:	c3                   	ret    

c0011fb6 <SysSeek(regs*)>:
c0011fb6:	53                   	push   ebx
c0011fb7:	83 ec 08             	sub    esp,0x8
c0011fba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fbe:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011fc1:	8d 50 fd             	lea    edx,[eax-0x3]
c0011fc4:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011fca:	77 32                	ja     c0011ffe <SysSeek(regs*)+0x48>
c0011fcc:	83 ec 0c             	sub    esp,0xc
c0011fcf:	50                   	push   eax
c0011fd0:	e8 de 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011fd5:	83 c4 0c             	add    esp,0xc
c0011fd8:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011fdb:	31 db                	xor    ebx,ebx
c0011fdd:	53                   	push   ebx
c0011fde:	51                   	push   ecx
c0011fdf:	50                   	push   eax
c0011fe0:	e8 3f 9c ff ff       	call   c000bc24 <File::seek(unsigned long long)>
c0011fe5:	83 c4 10             	add    esp,0x10
c0011fe8:	85 c0                	test   eax,eax
c0011fea:	0f 95 c0             	setne  al
c0011fed:	31 d2                	xor    edx,edx
c0011fef:	0f b6 c0             	movzx  eax,al
c0011ff2:	f7 d8                	neg    eax
c0011ff4:	83 d2 00             	adc    edx,0x0
c0011ff7:	83 c4 08             	add    esp,0x8
c0011ffa:	f7 da                	neg    edx
c0011ffc:	5b                   	pop    ebx
c0011ffd:	c3                   	ret    
c0011ffe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012003:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012008:	83 c4 08             	add    esp,0x8
c001200b:	5b                   	pop    ebx
c001200c:	c3                   	ret    

c001200d <SysTell(regs*)>:
c001200d:	53                   	push   ebx
c001200e:	83 ec 08             	sub    esp,0x8
c0012011:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012015:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012018:	83 f8 02             	cmp    eax,0x2
c001201b:	76 4e                	jbe    c001206b <SysTell(regs*)+0x5e>
c001201d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012022:	76 19                	jbe    c001203d <SysTell(regs*)+0x30>
c0012024:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012027:	31 d2                	xor    edx,edx
c0012029:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001202f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012036:	31 c0                	xor    eax,eax
c0012038:	83 c4 08             	add    esp,0x8
c001203b:	5b                   	pop    ebx
c001203c:	c3                   	ret    
c001203d:	83 ec 0c             	sub    esp,0xc
c0012040:	50                   	push   eax
c0012041:	e8 6d 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0012046:	5a                   	pop    edx
c0012047:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001204a:	59                   	pop    ecx
c001204b:	53                   	push   ebx
c001204c:	50                   	push   eax
c001204d:	e8 7e 9c ff ff       	call   c000bcd0 <File::tell(unsigned long long*)>
c0012052:	83 c4 10             	add    esp,0x10
c0012055:	85 c0                	test   eax,eax
c0012057:	0f 95 c0             	setne  al
c001205a:	31 d2                	xor    edx,edx
c001205c:	0f b6 c0             	movzx  eax,al
c001205f:	f7 d8                	neg    eax
c0012061:	83 d2 00             	adc    edx,0x0
c0012064:	83 c4 08             	add    esp,0x8
c0012067:	f7 da                	neg    edx
c0012069:	5b                   	pop    ebx
c001206a:	c3                   	ret    
c001206b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012070:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012075:	83 c4 08             	add    esp,0x8
c0012078:	5b                   	pop    ebx
c0012079:	c3                   	ret    

c001207a <SysSize(regs*)>:
c001207a:	53                   	push   ebx
c001207b:	83 ec 18             	sub    esp,0x18
c001207e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012082:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012085:	83 f8 02             	cmp    eax,0x2
c0012088:	76 54                	jbe    c00120de <SysSize(regs*)+0x64>
c001208a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001208f:	76 19                	jbe    c00120aa <SysSize(regs*)+0x30>
c0012091:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012094:	31 d2                	xor    edx,edx
c0012096:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001209c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120a3:	31 c0                	xor    eax,eax
c00120a5:	83 c4 18             	add    esp,0x18
c00120a8:	5b                   	pop    ebx
c00120a9:	c3                   	ret    
c00120aa:	83 ec 0c             	sub    esp,0xc
c00120ad:	50                   	push   eax
c00120ae:	e8 00 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00120b3:	83 c4 0c             	add    esp,0xc
c00120b6:	8d 54 24 13          	lea    edx,[esp+0x13]
c00120ba:	52                   	push   edx
c00120bb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00120be:	52                   	push   edx
c00120bf:	50                   	push   eax
c00120c0:	e8 a3 9d ff ff       	call   c000be68 <File::stat(unsigned long long*, bool*)>
c00120c5:	83 c4 10             	add    esp,0x10
c00120c8:	85 c0                	test   eax,eax
c00120ca:	0f 95 c0             	setne  al
c00120cd:	31 d2                	xor    edx,edx
c00120cf:	0f b6 c0             	movzx  eax,al
c00120d2:	f7 d8                	neg    eax
c00120d4:	83 d2 00             	adc    edx,0x0
c00120d7:	83 c4 18             	add    esp,0x18
c00120da:	f7 da                	neg    edx
c00120dc:	5b                   	pop    ebx
c00120dd:	c3                   	ret    
c00120de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120e3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120e8:	83 c4 18             	add    esp,0x18
c00120eb:	5b                   	pop    ebx
c00120ec:	c3                   	ret    

c00120ed <SysSizeFromFilename(regs*)>:
c00120ed:	55                   	push   ebp
c00120ee:	57                   	push   edi
c00120ef:	56                   	push   esi
c00120f0:	53                   	push   ebx
c00120f1:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00120f7:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00120fe:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012101:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012104:	85 f6                	test   esi,esi
c0012106:	74 34                	je     c001213c <SysSizeFromFilename(regs*)+0x4f>
c0012108:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001210e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012111:	83 f8 02             	cmp    eax,0x2
c0012114:	76 2d                	jbe    c0012143 <SysSizeFromFilename(regs*)+0x56>
c0012116:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001211b:	76 3b                	jbe    c0012158 <SysSizeFromFilename(regs*)+0x6b>
c001211d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012120:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012126:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001212d:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012133:	31 c0                	xor    eax,eax
c0012135:	5b                   	pop    ebx
c0012136:	31 d2                	xor    edx,edx
c0012138:	5e                   	pop    esi
c0012139:	5f                   	pop    edi
c001213a:	5d                   	pop    ebp
c001213b:	c3                   	ret    
c001213c:	89 f8                	mov    eax,edi
c001213e:	83 f8 02             	cmp    eax,0x2
c0012141:	77 d3                	ja     c0012116 <SysSizeFromFilename(regs*)+0x29>
c0012143:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012149:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001214e:	5b                   	pop    ebx
c001214f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012154:	5e                   	pop    esi
c0012155:	5f                   	pop    edi
c0012156:	5d                   	pop    ebp
c0012157:	c3                   	ret    
c0012158:	83 ec 0c             	sub    esp,0xc
c001215b:	68 14 01 00 00       	push   0x114
c0012160:	e8 51 59 ff ff       	call   c0007ab6 <malloc>
c0012165:	6a 01                	push   0x1
c0012167:	89 c5                	mov    ebp,eax
c0012169:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001216e:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012171:	51                   	push   ecx
c0012172:	57                   	push   edi
c0012173:	55                   	push   ebp
c0012174:	e8 f1 98 ff ff       	call   c000ba6a <File::File(char const*, Process*, bool)>
c0012179:	83 c4 1c             	add    esp,0x1c
c001217c:	8d 44 24 23          	lea    eax,[esp+0x23]
c0012180:	50                   	push   eax
c0012181:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012184:	53                   	push   ebx
c0012185:	55                   	push   ebp
c0012186:	e8 dd 9c ff ff       	call   c000be68 <File::stat(unsigned long long*, bool*)>
c001218b:	83 c4 10             	add    esp,0x10
c001218e:	85 ed                	test   ebp,ebp
c0012190:	74 15                	je     c00121a7 <SysSizeFromFilename(regs*)+0xba>
c0012192:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012196:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012199:	83 ec 0c             	sub    esp,0xc
c001219c:	55                   	push   ebp
c001219d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00121a0:	83 c4 10             	add    esp,0x10
c00121a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121a7:	85 c0                	test   eax,eax
c00121a9:	75 98                	jne    c0012143 <SysSizeFromFilename(regs*)+0x56>
c00121ab:	6a 00                	push   0x0
c00121ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121b5:	05 0c 01 00 00       	add    eax,0x10c
c00121ba:	50                   	push   eax
c00121bb:	57                   	push   edi
c00121bc:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c00121c3:	53                   	push   ebx
c00121c4:	e8 87 96 ff ff       	call   c000b850 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00121c9:	58                   	pop    eax
c00121ca:	5a                   	pop    edx
c00121cb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00121cf:	50                   	push   eax
c00121d0:	53                   	push   ebx
c00121d1:	e8 e6 90 ff ff       	call   c000b2bc <KeDereferenceSymlink(char const*, char*)>
c00121d6:	83 c4 10             	add    esp,0x10
c00121d9:	83 f8 01             	cmp    eax,0x1
c00121dc:	74 1a                	je     c00121f8 <SysSizeFromFilename(regs*)+0x10b>
c00121de:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00121e3:	74 26                	je     c001220b <SysSizeFromFilename(regs*)+0x11e>
c00121e5:	85 f6                	test   esi,esi
c00121e7:	0f 84 40 ff ff ff    	je     c001212d <SysSizeFromFilename(regs*)+0x40>
c00121ed:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00121f3:	e9 35 ff ff ff       	jmp    c001212d <SysSizeFromFilename(regs*)+0x40>
c00121f8:	85 f6                	test   esi,esi
c00121fa:	0f 84 2d ff ff ff    	je     c001212d <SysSizeFromFilename(regs*)+0x40>
c0012200:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012206:	e9 22 ff ff ff       	jmp    c001212d <SysSizeFromFilename(regs*)+0x40>
c001220b:	85 f6                	test   esi,esi
c001220d:	0f 84 1a ff ff ff    	je     c001212d <SysSizeFromFilename(regs*)+0x40>
c0012213:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012219:	e9 0f ff ff ff       	jmp    c001212d <SysSizeFromFilename(regs*)+0x40>

c001221e <SysSizeFromFilenameNoSymlink(regs*)>:
c001221e:	55                   	push   ebp
c001221f:	57                   	push   edi
c0012220:	56                   	push   esi
c0012221:	53                   	push   ebx
c0012222:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0012228:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001222f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012232:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012235:	85 f6                	test   esi,esi
c0012237:	74 34                	je     c001226d <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0012239:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001223f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012242:	83 f8 02             	cmp    eax,0x2
c0012245:	76 2d                	jbe    c0012274 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0012247:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001224c:	76 3b                	jbe    c0012289 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c001224e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012251:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012257:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001225e:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012264:	31 c0                	xor    eax,eax
c0012266:	5b                   	pop    ebx
c0012267:	31 d2                	xor    edx,edx
c0012269:	5e                   	pop    esi
c001226a:	5f                   	pop    edi
c001226b:	5d                   	pop    ebp
c001226c:	c3                   	ret    
c001226d:	89 f8                	mov    eax,edi
c001226f:	83 f8 02             	cmp    eax,0x2
c0012272:	77 d3                	ja     c0012247 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0012274:	81 c4 5c 02 00 00    	add    esp,0x25c
c001227a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001227f:	5b                   	pop    ebx
c0012280:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012285:	5e                   	pop    esi
c0012286:	5f                   	pop    edi
c0012287:	5d                   	pop    ebp
c0012288:	c3                   	ret    
c0012289:	83 ec 0c             	sub    esp,0xc
c001228c:	68 14 01 00 00       	push   0x114
c0012291:	e8 20 58 ff ff       	call   c0007ab6 <malloc>
c0012296:	6a 00                	push   0x0
c0012298:	89 c5                	mov    ebp,eax
c001229a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001229f:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00122a2:	51                   	push   ecx
c00122a3:	57                   	push   edi
c00122a4:	55                   	push   ebp
c00122a5:	e8 c0 97 ff ff       	call   c000ba6a <File::File(char const*, Process*, bool)>
c00122aa:	83 c4 1c             	add    esp,0x1c
c00122ad:	8d 44 24 23          	lea    eax,[esp+0x23]
c00122b1:	50                   	push   eax
c00122b2:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00122b5:	53                   	push   ebx
c00122b6:	55                   	push   ebp
c00122b7:	e8 ac 9b ff ff       	call   c000be68 <File::stat(unsigned long long*, bool*)>
c00122bc:	83 c4 10             	add    esp,0x10
c00122bf:	85 ed                	test   ebp,ebp
c00122c1:	74 15                	je     c00122d8 <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c00122c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122c7:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00122ca:	83 ec 0c             	sub    esp,0xc
c00122cd:	55                   	push   ebp
c00122ce:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00122d1:	83 c4 10             	add    esp,0x10
c00122d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00122d8:	85 c0                	test   eax,eax
c00122da:	75 98                	jne    c0012274 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00122dc:	6a 00                	push   0x0
c00122de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122e3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122e6:	05 0c 01 00 00       	add    eax,0x10c
c00122eb:	50                   	push   eax
c00122ec:	57                   	push   edi
c00122ed:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c00122f4:	53                   	push   ebx
c00122f5:	e8 56 95 ff ff       	call   c000b850 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00122fa:	58                   	pop    eax
c00122fb:	5a                   	pop    edx
c00122fc:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012300:	50                   	push   eax
c0012301:	53                   	push   ebx
c0012302:	e8 b5 8f ff ff       	call   c000b2bc <KeDereferenceSymlink(char const*, char*)>
c0012307:	83 c4 10             	add    esp,0x10
c001230a:	83 f8 01             	cmp    eax,0x1
c001230d:	74 1a                	je     c0012329 <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c001230f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012314:	74 26                	je     c001233c <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c0012316:	85 f6                	test   esi,esi
c0012318:	0f 84 40 ff ff ff    	je     c001225e <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001231e:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0012324:	e9 35 ff ff ff       	jmp    c001225e <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012329:	85 f6                	test   esi,esi
c001232b:	0f 84 2d ff ff ff    	je     c001225e <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012331:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012337:	e9 22 ff ff ff       	jmp    c001225e <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001233c:	85 f6                	test   esi,esi
c001233e:	0f 84 1a ff ff ff    	je     c001225e <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012344:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001234a:	e9 0f ff ff ff       	jmp    c001225e <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c001234f <SysClose(regs*)>:
c001234f:	53                   	push   ebx
c0012350:	83 ec 08             	sub    esp,0x8
c0012353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012357:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001235a:	83 f8 02             	cmp    eax,0x2
c001235d:	76 41                	jbe    c00123a0 <SysClose(regs*)+0x51>
c001235f:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0012365:	83 fa 01             	cmp    edx,0x1
c0012368:	76 2d                	jbe    c0012397 <SysClose(regs*)+0x48>
c001236a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001236f:	77 2f                	ja     c00123a0 <SysClose(regs*)+0x51>
c0012371:	83 ec 0c             	sub    esp,0xc
c0012374:	50                   	push   eax
c0012375:	e8 39 71 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001237a:	89 c3                	mov    ebx,eax
c001237c:	89 04 24             	mov    DWORD PTR [esp],eax
c001237f:	e8 40 98 ff ff       	call   c000bbc4 <File::close()>
c0012384:	83 c4 10             	add    esp,0x10
c0012387:	85 db                	test   ebx,ebx
c0012389:	74 0c                	je     c0012397 <SysClose(regs*)+0x48>
c001238b:	83 ec 0c             	sub    esp,0xc
c001238e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012390:	53                   	push   ebx
c0012391:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012394:	83 c4 10             	add    esp,0x10
c0012397:	31 c0                	xor    eax,eax
c0012399:	31 d2                	xor    edx,edx
c001239b:	83 c4 08             	add    esp,0x8
c001239e:	5b                   	pop    ebx
c001239f:	c3                   	ret    
c00123a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00123a5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00123aa:	83 c4 08             	add    esp,0x8
c00123ad:	5b                   	pop    ebx
c00123ae:	c3                   	ret    

c00123af <SysOpenDir(regs*)>:
c00123af:	56                   	push   esi
c00123b0:	53                   	push   ebx
c00123b1:	83 ec 04             	sub    esp,0x4
c00123b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00123b8:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00123bb:	85 c9                	test   ecx,ecx
c00123bd:	74 5d                	je     c001241c <SysOpenDir(regs*)+0x6d>
c00123bf:	83 ec 0c             	sub    esp,0xc
c00123c2:	68 14 01 00 00       	push   0x114
c00123c7:	e8 ea 56 ff ff       	call   c0007ab6 <malloc>
c00123cc:	83 c4 0c             	add    esp,0xc
c00123cf:	89 c6                	mov    esi,eax
c00123d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123d6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123d9:	50                   	push   eax
c00123da:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00123dd:	52                   	push   edx
c00123de:	56                   	push   esi
c00123df:	e8 44 9c ff ff       	call   c000c028 <Directory::Directory(char const*, Process*)>
c00123e4:	83 c4 10             	add    esp,0x10
c00123e7:	85 f6                	test   esi,esi
c00123e9:	74 31                	je     c001241c <SysOpenDir(regs*)+0x6d>
c00123eb:	83 ec 0c             	sub    esp,0xc
c00123ee:	56                   	push   esi
c00123ef:	e8 fc 9c ff ff       	call   c000c0f0 <Directory::open()>
c00123f4:	83 c4 10             	add    esp,0x10
c00123f7:	85 c0                	test   eax,eax
c00123f9:	75 21                	jne    c001241c <SysOpenDir(regs*)+0x6d>
c00123fb:	83 ec 0c             	sub    esp,0xc
c00123fe:	56                   	push   esi
c00123ff:	e8 b2 6d ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012404:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012407:	83 c4 10             	add    esp,0x10
c001240a:	89 02                	mov    DWORD PTR [edx],eax
c001240c:	c1 f8 1f             	sar    eax,0x1f
c001240f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012412:	83 c4 04             	add    esp,0x4
c0012415:	31 c0                	xor    eax,eax
c0012417:	31 d2                	xor    edx,edx
c0012419:	5b                   	pop    ebx
c001241a:	5e                   	pop    esi
c001241b:	c3                   	ret    
c001241c:	83 c4 04             	add    esp,0x4
c001241f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012424:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012429:	5b                   	pop    ebx
c001242a:	5e                   	pop    esi
c001242b:	c3                   	ret    

c001242c <SysMakeDir(regs*)>:
c001242c:	56                   	push   esi
c001242d:	53                   	push   ebx
c001242e:	83 ec 10             	sub    esp,0x10
c0012431:	68 14 01 00 00       	push   0x114
c0012436:	e8 7b 56 ff ff       	call   c0007ab6 <malloc>
c001243b:	83 c4 0c             	add    esp,0xc
c001243e:	89 c3                	mov    ebx,eax
c0012440:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012445:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012448:	50                   	push   eax
c0012449:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001244d:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0012450:	52                   	push   edx
c0012451:	53                   	push   ebx
c0012452:	e8 d1 9b ff ff       	call   c000c028 <Directory::Directory(char const*, Process*)>
c0012457:	83 c4 10             	add    esp,0x10
c001245a:	85 db                	test   ebx,ebx
c001245c:	74 2c                	je     c001248a <SysMakeDir(regs*)+0x5e>
c001245e:	83 ec 0c             	sub    esp,0xc
c0012461:	53                   	push   ebx
c0012462:	e8 69 9e ff ff       	call   c000c2d0 <Directory::create()>
c0012467:	89 c6                	mov    esi,eax
c0012469:	8b 03                	mov    eax,DWORD PTR [ebx]
c001246b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001246e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012471:	83 c4 10             	add    esp,0x10
c0012474:	31 c0                	xor    eax,eax
c0012476:	85 f6                	test   esi,esi
c0012478:	0f 95 c0             	setne  al
c001247b:	31 d2                	xor    edx,edx
c001247d:	f7 d8                	neg    eax
c001247f:	83 d2 00             	adc    edx,0x0
c0012482:	83 c4 04             	add    esp,0x4
c0012485:	f7 da                	neg    edx
c0012487:	5b                   	pop    ebx
c0012488:	5e                   	pop    esi
c0012489:	c3                   	ret    
c001248a:	83 c4 04             	add    esp,0x4
c001248d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012492:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012497:	5b                   	pop    ebx
c0012498:	5e                   	pop    esi
c0012499:	c3                   	ret    

c001249a <SysCloseDir(regs*)>:
c001249a:	53                   	push   ebx
c001249b:	83 ec 08             	sub    esp,0x8
c001249e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124a2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00124a5:	8d 50 fd             	lea    edx,[eax-0x3]
c00124a8:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00124ae:	77 2f                	ja     c00124df <SysCloseDir(regs*)+0x45>
c00124b0:	83 ec 0c             	sub    esp,0xc
c00124b3:	50                   	push   eax
c00124b4:	e8 fa 6f ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00124b9:	89 c3                	mov    ebx,eax
c00124bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00124be:	e8 89 9c ff ff       	call   c000c14c <Directory::close()>
c00124c3:	83 c4 10             	add    esp,0x10
c00124c6:	85 db                	test   ebx,ebx
c00124c8:	74 0c                	je     c00124d6 <SysCloseDir(regs*)+0x3c>
c00124ca:	83 ec 0c             	sub    esp,0xc
c00124cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124cf:	53                   	push   ebx
c00124d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124d3:	83 c4 10             	add    esp,0x10
c00124d6:	31 c0                	xor    eax,eax
c00124d8:	31 d2                	xor    edx,edx
c00124da:	83 c4 08             	add    esp,0x8
c00124dd:	5b                   	pop    ebx
c00124de:	c3                   	ret    
c00124df:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124e4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124e9:	83 c4 08             	add    esp,0x8
c00124ec:	5b                   	pop    ebx
c00124ed:	c3                   	ret    

c00124ee <SysWait(regs*)>:
c00124ee:	83 ec 10             	sub    esp,0x10
c00124f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124f5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00124f8:	52                   	push   edx
c00124f9:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00124fc:	51                   	push   ecx
c00124fd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012500:	50                   	push   eax
c0012501:	e8 02 3e 00 00       	call   c0016308 <waitTask(int, int*, int)>
c0012506:	83 c4 1c             	add    esp,0x1c
c0012509:	89 c2                	mov    edx,eax
c001250b:	c1 fa 1f             	sar    edx,0x1f
c001250e:	c3                   	ret    

c001250f <SysNotImpl(regs*)>:
c001250f:	83 ec 18             	sub    esp,0x18
c0012512:	68 c2 24 02 c0       	push   0xc00224c2
c0012517:	e8 ff f0 ff ff       	call   c001161b <KePanic(char const*)>
c001251c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012521:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012526:	83 c4 1c             	add    esp,0x1c
c0012529:	c3                   	ret    

c001252a <SysPanic(regs*)>:
c001252a:	83 ec 18             	sub    esp,0x18
c001252d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012531:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0012534:	50                   	push   eax
c0012535:	e8 e1 f0 ff ff       	call   c001161b <KePanic(char const*)>
c001253a:	b8 01 00 00 00       	mov    eax,0x1
c001253f:	31 d2                	xor    edx,edx
c0012541:	83 c4 1c             	add    esp,0x1c
c0012544:	c3                   	ret    

c0012545 <SysRmdir(regs*)>:
c0012545:	56                   	push   esi
c0012546:	53                   	push   ebx
c0012547:	83 ec 20             	sub    esp,0x20
c001254a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001254e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012551:	68 14 01 00 00       	push   0x114
c0012556:	e8 5b 55 ff ff       	call   c0007ab6 <malloc>
c001255b:	6a 00                	push   0x0
c001255d:	89 c3                	mov    ebx,eax
c001255f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012564:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012567:	50                   	push   eax
c0012568:	56                   	push   esi
c0012569:	53                   	push   ebx
c001256a:	e8 fb 94 ff ff       	call   c000ba6a <File::File(char const*, Process*, bool)>
c001256f:	83 c4 14             	add    esp,0x14
c0012572:	53                   	push   ebx
c0012573:	e8 bc 97 ff ff       	call   c000bd34 <File::unlink()>
c0012578:	83 c4 10             	add    esp,0x10
c001257b:	85 db                	test   ebx,ebx
c001257d:	74 14                	je     c0012593 <SysRmdir(regs*)+0x4e>
c001257f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012583:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012585:	83 ec 0c             	sub    esp,0xc
c0012588:	53                   	push   ebx
c0012589:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001258c:	83 c4 10             	add    esp,0x10
c001258f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012593:	85 c0                	test   eax,eax
c0012595:	0f 95 c0             	setne  al
c0012598:	31 d2                	xor    edx,edx
c001259a:	0f b6 c0             	movzx  eax,al
c001259d:	f7 d8                	neg    eax
c001259f:	83 d2 00             	adc    edx,0x0
c00125a2:	83 c4 14             	add    esp,0x14
c00125a5:	f7 da                	neg    edx
c00125a7:	5b                   	pop    ebx
c00125a8:	5e                   	pop    esi
c00125a9:	c3                   	ret    

c00125aa <SysUnlink(regs*)>:
c00125aa:	56                   	push   esi
c00125ab:	53                   	push   ebx
c00125ac:	83 ec 20             	sub    esp,0x20
c00125af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00125b3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00125b6:	68 14 01 00 00       	push   0x114
c00125bb:	e8 f6 54 ff ff       	call   c0007ab6 <malloc>
c00125c0:	6a 00                	push   0x0
c00125c2:	89 c3                	mov    ebx,eax
c00125c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125c9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125cc:	50                   	push   eax
c00125cd:	56                   	push   esi
c00125ce:	53                   	push   ebx
c00125cf:	e8 96 94 ff ff       	call   c000ba6a <File::File(char const*, Process*, bool)>
c00125d4:	83 c4 14             	add    esp,0x14
c00125d7:	53                   	push   ebx
c00125d8:	e8 57 97 ff ff       	call   c000bd34 <File::unlink()>
c00125dd:	83 c4 10             	add    esp,0x10
c00125e0:	85 db                	test   ebx,ebx
c00125e2:	74 14                	je     c00125f8 <SysUnlink(regs*)+0x4e>
c00125e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125e8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00125ea:	83 ec 0c             	sub    esp,0xc
c00125ed:	53                   	push   ebx
c00125ee:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00125f1:	83 c4 10             	add    esp,0x10
c00125f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125f8:	85 c0                	test   eax,eax
c00125fa:	0f 95 c0             	setne  al
c00125fd:	31 d2                	xor    edx,edx
c00125ff:	0f b6 c0             	movzx  eax,al
c0012602:	f7 d8                	neg    eax
c0012604:	83 d2 00             	adc    edx,0x0
c0012607:	83 c4 14             	add    esp,0x14
c001260a:	f7 da                	neg    edx
c001260c:	5b                   	pop    ebx
c001260d:	5e                   	pop    esi
c001260e:	c3                   	ret    

c001260f <SysGetArgv(regs*)>:
c001260f:	83 ec 0c             	sub    esp,0xc
c0012612:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012616:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0012619:	85 c0                	test   eax,eax
c001261b:	78 2c                	js     c0012649 <SysGetArgv(regs*)+0x3a>
c001261d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012623:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0012626:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001262c:	7d 1b                	jge    c0012649 <SysGetArgv(regs*)+0x3a>
c001262e:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012635:	85 c0                	test   eax,eax
c0012637:	74 18                	je     c0012651 <SysGetArgv(regs*)+0x42>
c0012639:	83 ec 08             	sub    esp,0x8
c001263c:	50                   	push   eax
c001263d:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012640:	50                   	push   eax
c0012641:	e8 fa df fe ff       	call   c0000640 <strcpy>
c0012646:	83 c4 10             	add    esp,0x10
c0012649:	31 c0                	xor    eax,eax
c001264b:	31 d2                	xor    edx,edx
c001264d:	83 c4 0c             	add    esp,0xc
c0012650:	c3                   	ret    
c0012651:	b8 01 00 00 00       	mov    eax,0x1
c0012656:	31 d2                	xor    edx,edx
c0012658:	83 c4 0c             	add    esp,0xc
c001265b:	c3                   	ret    

c001265c <SysUSleep(regs*)>:
c001265c:	83 ec 1c             	sub    esp,0x1c
c001265f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012663:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012666:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012669:	6a 00                	push   0x0
c001266b:	6a 64                	push   0x64
c001266d:	52                   	push   edx
c001266e:	50                   	push   eax
c001266f:	e8 bc d0 00 00       	call   c001f730 <__udivdi3>
c0012674:	83 c4 14             	add    esp,0x14
c0012677:	50                   	push   eax
c0012678:	e8 6f 3d 00 00       	call   c00163ec <milliTenthSleep(unsigned int)>
c001267d:	31 c0                	xor    eax,eax
c001267f:	31 d2                	xor    edx,edx
c0012681:	83 c4 1c             	add    esp,0x1c
c0012684:	c3                   	ret    

c0012685 <SysSpawn(regs*)>:
c0012685:	56                   	push   esi
c0012686:	53                   	push   ebx
c0012687:	83 ec 04             	sub    esp,0x4
c001268a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001268e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012691:	85 f6                	test   esi,esi
c0012693:	75 0a                	jne    c001269f <SysSpawn(regs*)+0x1a>
c0012695:	83 c4 04             	add    esp,0x4
c0012698:	31 c0                	xor    eax,eax
c001269a:	31 d2                	xor    edx,edx
c001269c:	5b                   	pop    ebx
c001269d:	5e                   	pop    esi
c001269e:	c3                   	ret    
c001269f:	83 ec 0c             	sub    esp,0xc
c00126a2:	68 24 07 00 00       	push   0x724
c00126a7:	e8 0a 54 ff ff       	call   c0007ab6 <malloc>
c00126ac:	83 c4 10             	add    esp,0x10
c00126af:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00126b2:	89 c6                	mov    esi,eax
c00126b4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00126b7:	85 c9                	test   ecx,ecx
c00126b9:	75 39                	jne    c00126f4 <SysSpawn(regs*)+0x6f>
c00126bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126c0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00126c3:	52                   	push   edx
c00126c4:	50                   	push   eax
c00126c5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00126c8:	50                   	push   eax
c00126c9:	56                   	push   esi
c00126ca:	e8 6d 33 00 00       	call   c0015a3c <Process::Process(char const*, Process*, char**)>
c00126cf:	83 c4 10             	add    esp,0x10
c00126d2:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00126d9:	75 ba                	jne    c0012695 <SysSpawn(regs*)+0x10>
c00126db:	83 ec 0c             	sub    esp,0xc
c00126de:	56                   	push   esi
c00126df:	e8 94 38 00 00       	call   c0015f78 <Process::createUserThread()>
c00126e4:	8b 06                	mov    eax,DWORD PTR [esi]
c00126e6:	83 c4 10             	add    esp,0x10
c00126e9:	89 c2                	mov    edx,eax
c00126eb:	83 c4 04             	add    esp,0x4
c00126ee:	c1 fa 1f             	sar    edx,0x1f
c00126f1:	5b                   	pop    ebx
c00126f2:	5e                   	pop    esi
c00126f3:	c3                   	ret    
c00126f4:	31 c0                	xor    eax,eax
c00126f6:	eb cb                	jmp    c00126c3 <SysSpawn(regs*)+0x3e>

c00126f8 <SysGetEnv(regs*)>:
c00126f8:	57                   	push   edi
c00126f9:	56                   	push   esi
c00126fa:	53                   	push   ebx
c00126fb:	83 ec 1c             	sub    esp,0x1c
c00126fe:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012702:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012707:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001270a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001270d:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012710:	51                   	push   ecx
c0012711:	e8 bd ed ff ff       	call   c00114d3 <KeGetProcessTotalEnvCount(Process*)>
c0012716:	83 c4 10             	add    esp,0x10
c0012719:	39 c7                	cmp    edi,eax
c001271b:	7c 14                	jl     c0012731 <SysGetEnv(regs*)+0x39>
c001271d:	85 f6                	test   esi,esi
c001271f:	75 0b                	jne    c001272c <SysGetEnv(regs*)+0x34>
c0012721:	83 c4 10             	add    esp,0x10
c0012724:	31 c0                	xor    eax,eax
c0012726:	5b                   	pop    ebx
c0012727:	31 d2                	xor    edx,edx
c0012729:	5e                   	pop    esi
c001272a:	5f                   	pop    edi
c001272b:	c3                   	ret    
c001272c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001272f:	eb f0                	jmp    c0012721 <SysGetEnv(regs*)+0x29>
c0012731:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012735:	83 ec 04             	sub    esp,0x4
c0012738:	57                   	push   edi
c0012739:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001273f:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012742:	57                   	push   edi
c0012743:	50                   	push   eax
c0012744:	e8 aa ed ff ff       	call   c00114f3 <KeGetProcessEnvPair(Process*, int)>
c0012749:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001274c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012750:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012754:	83 c4 0c             	add    esp,0xc
c0012757:	85 d2                	test   edx,edx
c0012759:	75 23                	jne    c001277e <SysGetEnv(regs*)+0x86>
c001275b:	83 ec 0c             	sub    esp,0xc
c001275e:	50                   	push   eax
c001275f:	e8 0c de fe ff       	call   c0000570 <strlen>
c0012764:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012767:	89 c3                	mov    ebx,eax
c0012769:	e8 02 de fe ff       	call   c0000570 <strlen>
c001276e:	83 c4 10             	add    esp,0x10
c0012771:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012775:	83 c4 10             	add    esp,0x10
c0012778:	31 d2                	xor    edx,edx
c001277a:	5b                   	pop    ebx
c001277b:	5e                   	pop    esi
c001277c:	5f                   	pop    edi
c001277d:	c3                   	ret    
c001277e:	83 ec 08             	sub    esp,0x8
c0012781:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012784:	50                   	push   eax
c0012785:	56                   	push   esi
c0012786:	e8 b5 de fe ff       	call   c0000640 <strcpy>
c001278b:	58                   	pop    eax
c001278c:	5a                   	pop    edx
c001278d:	68 dc 24 02 c0       	push   0xc00224dc
c0012792:	56                   	push   esi
c0012793:	e8 a8 e0 fe ff       	call   c0000840 <strcat>
c0012798:	59                   	pop    ecx
c0012799:	5b                   	pop    ebx
c001279a:	57                   	push   edi
c001279b:	56                   	push   esi
c001279c:	e8 9f e0 fe ff       	call   c0000840 <strcat>
c00127a1:	83 c4 10             	add    esp,0x10
c00127a4:	e9 78 ff ff ff       	jmp    c0012721 <SysGetEnv(regs*)+0x29>

c00127a9 <SysSetFatAttrib(regs*)>:
c00127a9:	57                   	push   edi
c00127aa:	56                   	push   esi
c00127ab:	53                   	push   ebx
c00127ac:	83 ec 1c             	sub    esp,0x1c
c00127af:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00127b3:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00127b6:	68 14 01 00 00       	push   0x114
c00127bb:	e8 f6 52 ff ff       	call   c0007ab6 <malloc>
c00127c0:	83 c4 0c             	add    esp,0xc
c00127c3:	89 c3                	mov    ebx,eax
c00127c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00127ca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00127cd:	50                   	push   eax
c00127ce:	57                   	push   edi
c00127cf:	53                   	push   ebx
c00127d0:	e8 73 93 ff ff       	call   c000bb48 <File::File(char const*, Process*)>
c00127d5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00127d8:	83 c4 0c             	add    esp,0xc
c00127db:	0f b6 d4             	movzx  edx,ah
c00127de:	0f b6 c0             	movzx  eax,al
c00127e1:	52                   	push   edx
c00127e2:	50                   	push   eax
c00127e3:	53                   	push   ebx
c00127e4:	e8 e5 95 ff ff       	call   c000bdce <File::chfatattr(unsigned char, unsigned char)>
c00127e9:	83 c4 10             	add    esp,0x10
c00127ec:	85 db                	test   ebx,ebx
c00127ee:	74 14                	je     c0012804 <SysSetFatAttrib(regs*)+0x5b>
c00127f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127f4:	8b 13                	mov    edx,DWORD PTR [ebx]
c00127f6:	83 ec 0c             	sub    esp,0xc
c00127f9:	53                   	push   ebx
c00127fa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00127fd:	83 c4 10             	add    esp,0x10
c0012800:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012804:	85 c0                	test   eax,eax
c0012806:	0f 95 c0             	setne  al
c0012809:	31 d2                	xor    edx,edx
c001280b:	0f b6 c0             	movzx  eax,al
c001280e:	f7 d8                	neg    eax
c0012810:	83 d2 00             	adc    edx,0x0
c0012813:	83 c4 10             	add    esp,0x10
c0012816:	f7 da                	neg    edx
c0012818:	5b                   	pop    ebx
c0012819:	5e                   	pop    esi
c001281a:	5f                   	pop    edi
c001281b:	c3                   	ret    

c001281c <SysPipe(regs*)>:
c001281c:	57                   	push   edi
c001281d:	56                   	push   esi
c001281e:	53                   	push   ebx
c001281f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012823:	83 ec 0c             	sub    esp,0xc
c0012826:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012829:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001282c:	6a 20                	push   0x20
c001282e:	e8 83 52 ff ff       	call   c0007ab6 <malloc>
c0012833:	89 c3                	mov    ebx,eax
c0012835:	58                   	pop    eax
c0012836:	5a                   	pop    edx
c0012837:	68 00 50 00 00       	push   0x5000
c001283c:	53                   	push   ebx
c001283d:	e8 e6 5b ff ff       	call   c0008428 <Pipe::Pipe(int)>
c0012842:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012845:	e8 6c 69 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c001284a:	89 07                	mov    DWORD PTR [edi],eax
c001284c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001284f:	e8 62 69 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012854:	83 c4 10             	add    esp,0x10
c0012857:	89 06                	mov    DWORD PTR [esi],eax
c0012859:	31 d2                	xor    edx,edx
c001285b:	5b                   	pop    ebx
c001285c:	31 c0                	xor    eax,eax
c001285e:	5e                   	pop    esi
c001285f:	5f                   	pop    edi
c0012860:	c3                   	ret    

c0012861 <SysGetUnixTime(regs*)>:
c0012861:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0012866:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001286c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012870:	e9 a1 9c ff ff       	jmp    c000c516 <Clock::timeInSecondsLocal()>

c0012875 <string_ends_with(char const*, char const*)>:
c0012875:	57                   	push   edi
c0012876:	56                   	push   esi
c0012877:	53                   	push   ebx
c0012878:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001287c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012880:	83 ec 0c             	sub    esp,0xc
c0012883:	53                   	push   ebx
c0012884:	e8 e7 dc fe ff       	call   c0000570 <strlen>
c0012889:	89 3c 24             	mov    DWORD PTR [esp],edi
c001288c:	89 c6                	mov    esi,eax
c001288e:	e8 dd dc fe ff       	call   c0000570 <strlen>
c0012893:	83 c4 10             	add    esp,0x10
c0012896:	39 c6                	cmp    esi,eax
c0012898:	7d 06                	jge    c00128a0 <string_ends_with(char const*, char const*)+0x2b>
c001289a:	5b                   	pop    ebx
c001289b:	31 c0                	xor    eax,eax
c001289d:	5e                   	pop    esi
c001289e:	5f                   	pop    edi
c001289f:	c3                   	ret    
c00128a0:	83 ec 08             	sub    esp,0x8
c00128a3:	29 c6                	sub    esi,eax
c00128a5:	57                   	push   edi
c00128a6:	01 f3                	add    ebx,esi
c00128a8:	53                   	push   ebx
c00128a9:	e8 a2 de fe ff       	call   c0000750 <strcmp>
c00128ae:	83 c4 10             	add    esp,0x10
c00128b1:	85 c0                	test   eax,eax
c00128b3:	5b                   	pop    ebx
c00128b4:	0f 94 c0             	sete   al
c00128b7:	5e                   	pop    esi
c00128b8:	0f b6 c0             	movzx  eax,al
c00128bb:	5f                   	pop    edi
c00128bc:	c3                   	ret    

c00128bd <SysOpen(regs*)>:
c00128bd:	56                   	push   esi
c00128be:	53                   	push   ebx
c00128bf:	81 ec 04 01 00 00    	sub    esp,0x104
c00128c5:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00128cc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00128cf:	85 c0                	test   eax,eax
c00128d1:	0f 84 bc 01 00 00    	je     c0012a93 <SysOpen(regs*)+0x1d6>
c00128d7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128da:	85 c0                	test   eax,eax
c00128dc:	0f 84 b1 01 00 00    	je     c0012a93 <SysOpen(regs*)+0x1d6>
c00128e2:	6a 00                	push   0x0
c00128e4:	68 de 24 02 c0       	push   0xc00224de
c00128e9:	50                   	push   eax
c00128ea:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00128ee:	56                   	push   esi
c00128ef:	e8 5c 8f ff ff       	call   c000b850 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00128f4:	89 34 24             	mov    DWORD PTR [esp],esi
c00128f7:	e8 74 dc fe ff       	call   c0000570 <strlen>
c00128fc:	83 c4 10             	add    esp,0x10
c00128ff:	83 e8 01             	sub    eax,0x1
c0012902:	74 21                	je     c0012925 <SysOpen(regs*)+0x68>
c0012904:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012908:	eb 12                	jmp    c001291c <SysOpen(regs*)+0x5f>
c001290a:	83 fa 3a             	cmp    edx,0x3a
c001290d:	74 12                	je     c0012921 <SysOpen(regs*)+0x64>
c001290f:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012913:	83 e8 01             	sub    eax,0x1
c0012916:	74 0d                	je     c0012925 <SysOpen(regs*)+0x68>
c0012918:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c001291c:	83 fa 2e             	cmp    edx,0x2e
c001291f:	75 e9                	jne    c001290a <SysOpen(regs*)+0x4d>
c0012921:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012925:	83 ec 08             	sub    esp,0x8
c0012928:	68 e2 24 02 c0       	push   0xc00224e2
c001292d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012930:	50                   	push   eax
c0012931:	e8 3f ff ff ff       	call   c0012875 <string_ends_with(char const*, char const*)>
c0012936:	83 c4 10             	add    esp,0x10
c0012939:	85 c0                	test   eax,eax
c001293b:	74 1d                	je     c001295a <SysOpen(regs*)+0x9d>
c001293d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012940:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012946:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001294d:	81 c4 04 01 00 00    	add    esp,0x104
c0012953:	31 c0                	xor    eax,eax
c0012955:	31 d2                	xor    edx,edx
c0012957:	5b                   	pop    ebx
c0012958:	5e                   	pop    esi
c0012959:	c3                   	ret    
c001295a:	83 ec 08             	sub    esp,0x8
c001295d:	68 e7 24 02 c0       	push   0xc00224e7
c0012962:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012965:	50                   	push   eax
c0012966:	e8 0a ff ff ff       	call   c0012875 <string_ends_with(char const*, char const*)>
c001296b:	83 c4 10             	add    esp,0x10
c001296e:	85 c0                	test   eax,eax
c0012970:	75 cb                	jne    c001293d <SysOpen(regs*)+0x80>
c0012972:	83 ec 08             	sub    esp,0x8
c0012975:	68 e3 24 02 c0       	push   0xc00224e3
c001297a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001297d:	50                   	push   eax
c001297e:	e8 cd dd fe ff       	call   c0000750 <strcmp>
c0012983:	83 c4 10             	add    esp,0x10
c0012986:	85 c0                	test   eax,eax
c0012988:	74 b3                	je     c001293d <SysOpen(regs*)+0x80>
c001298a:	83 ec 08             	sub    esp,0x8
c001298d:	68 e2 24 02 c0       	push   0xc00224e2
c0012992:	56                   	push   esi
c0012993:	e8 dd fe ff ff       	call   c0012875 <string_ends_with(char const*, char const*)>
c0012998:	83 c4 10             	add    esp,0x10
c001299b:	85 c0                	test   eax,eax
c001299d:	75 9e                	jne    c001293d <SysOpen(regs*)+0x80>
c001299f:	83 ec 08             	sub    esp,0x8
c00129a2:	68 ec 24 02 c0       	push   0xc00224ec
c00129a7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129aa:	50                   	push   eax
c00129ab:	e8 c5 fe ff ff       	call   c0012875 <string_ends_with(char const*, char const*)>
c00129b0:	83 c4 10             	add    esp,0x10
c00129b3:	85 c0                	test   eax,eax
c00129b5:	0f 85 eb 00 00 00    	jne    c0012aa6 <SysOpen(regs*)+0x1e9>
c00129bb:	83 ec 08             	sub    esp,0x8
c00129be:	68 f1 24 02 c0       	push   0xc00224f1
c00129c3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129c6:	50                   	push   eax
c00129c7:	e8 a9 fe ff ff       	call   c0012875 <string_ends_with(char const*, char const*)>
c00129cc:	83 c4 10             	add    esp,0x10
c00129cf:	85 c0                	test   eax,eax
c00129d1:	0f 85 cf 00 00 00    	jne    c0012aa6 <SysOpen(regs*)+0x1e9>
c00129d7:	83 ec 08             	sub    esp,0x8
c00129da:	68 ed 24 02 c0       	push   0xc00224ed
c00129df:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00129e2:	51                   	push   ecx
c00129e3:	e8 68 dd fe ff       	call   c0000750 <strcmp>
c00129e8:	83 c4 10             	add    esp,0x10
c00129eb:	85 c0                	test   eax,eax
c00129ed:	0f 84 b3 00 00 00    	je     c0012aa6 <SysOpen(regs*)+0x1e9>
c00129f3:	83 ec 08             	sub    esp,0x8
c00129f6:	68 ec 24 02 c0       	push   0xc00224ec
c00129fb:	56                   	push   esi
c00129fc:	e8 74 fe ff ff       	call   c0012875 <string_ends_with(char const*, char const*)>
c0012a01:	83 c4 10             	add    esp,0x10
c0012a04:	85 c0                	test   eax,eax
c0012a06:	0f 85 9a 00 00 00    	jne    c0012aa6 <SysOpen(regs*)+0x1e9>
c0012a0c:	83 ec 0c             	sub    esp,0xc
c0012a0f:	68 14 01 00 00       	push   0x114
c0012a14:	e8 9d 50 ff ff       	call   c0007ab6 <malloc>
c0012a19:	83 c4 0c             	add    esp,0xc
c0012a1c:	89 c6                	mov    esi,eax
c0012a1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a23:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012a26:	50                   	push   eax
c0012a27:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012a2a:	52                   	push   edx
c0012a2b:	56                   	push   esi
c0012a2c:	e8 17 91 ff ff       	call   c000bb48 <File::File(char const*, Process*)>
c0012a31:	83 c4 10             	add    esp,0x10
c0012a34:	85 f6                	test   esi,esi
c0012a36:	74 5b                	je     c0012a93 <SysOpen(regs*)+0x1d6>
c0012a38:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012a3b:	0f b6 c2             	movzx  eax,dl
c0012a3e:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012a41:	89 d0                	mov    eax,edx
c0012a43:	83 e0 01             	and    eax,0x1
c0012a46:	f6 c2 02             	test   dl,0x2
c0012a49:	74 03                	je     c0012a4e <SysOpen(regs*)+0x191>
c0012a4b:	83 c8 02             	or     eax,0x2
c0012a4e:	f6 c2 04             	test   dl,0x4
c0012a51:	74 03                	je     c0012a56 <SysOpen(regs*)+0x199>
c0012a53:	83 c8 04             	or     eax,0x4
c0012a56:	f6 c2 08             	test   dl,0x8
c0012a59:	74 03                	je     c0012a5e <SysOpen(regs*)+0x1a1>
c0012a5b:	83 c8 0a             	or     eax,0xa
c0012a5e:	80 e2 10             	and    dl,0x10
c0012a61:	74 03                	je     c0012a66 <SysOpen(regs*)+0x1a9>
c0012a63:	83 c8 12             	or     eax,0x12
c0012a66:	83 ec 08             	sub    esp,0x8
c0012a69:	50                   	push   eax
c0012a6a:	56                   	push   esi
c0012a6b:	e8 f6 90 ff ff       	call   c000bb66 <File::open(FileOpenMode)>
c0012a70:	83 c4 10             	add    esp,0x10
c0012a73:	85 c0                	test   eax,eax
c0012a75:	75 1c                	jne    c0012a93 <SysOpen(regs*)+0x1d6>
c0012a77:	83 ec 0c             	sub    esp,0xc
c0012a7a:	56                   	push   esi
c0012a7b:	e8 36 67 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012a80:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012a83:	83 c4 10             	add    esp,0x10
c0012a86:	89 02                	mov    DWORD PTR [edx],eax
c0012a88:	c1 f8 1f             	sar    eax,0x1f
c0012a8b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012a8e:	e9 ba fe ff ff       	jmp    c001294d <SysOpen(regs*)+0x90>
c0012a93:	81 c4 04 01 00 00    	add    esp,0x104
c0012a99:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012a9e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012aa3:	5b                   	pop    ebx
c0012aa4:	5e                   	pop    esi
c0012aa5:	c3                   	ret    
c0012aa6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012aa9:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012aaf:	e9 92 fe ff ff       	jmp    c0012946 <SysOpen(regs*)+0x89>

c0012ab4 <KeSystemCall(regs*, void*)>:
c0012ab4:	53                   	push   ebx
c0012ab5:	83 ec 08             	sub    esp,0x8
c0012ab8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012abc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012abf:	83 f8 3e             	cmp    eax,0x3e
c0012ac2:	77 16                	ja     c0012ada <KeSystemCall(regs*, void*)+0x26>
c0012ac4:	8b 14 85 00 3d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc300]
c0012acb:	85 d2                	test   edx,edx
c0012acd:	74 0b                	je     c0012ada <KeSystemCall(regs*, void*)+0x26>
c0012acf:	83 ec 0c             	sub    esp,0xc
c0012ad2:	53                   	push   ebx
c0012ad3:	ff d2                	call   edx
c0012ad5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012ad8:	eb 0d                	jmp    c0012ae7 <KeSystemCall(regs*, void*)+0x33>
c0012ada:	52                   	push   edx
c0012adb:	52                   	push   edx
c0012adc:	50                   	push   eax
c0012add:	68 f6 24 02 c0       	push   0xc00224f6
c0012ae2:	e8 5e 7e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012ae7:	83 c4 10             	add    esp,0x10
c0012aea:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012aef:	31 d2                	xor    edx,edx
c0012af1:	83 c4 08             	add    esp,0x8
c0012af4:	5b                   	pop    ebx
c0012af5:	c3                   	ret    
c0012af6:	66 90                	xchg   ax,ax

c0012af8 <KeSwitchEndian16(unsigned short)>:
c0012af8:	83 ec 04             	sub    esp,0x4
c0012afb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012aff:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012b03:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012b07:	c1 f8 08             	sar    eax,0x8
c0012b0a:	89 c2                	mov    edx,eax
c0012b0c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012b10:	c1 e0 08             	shl    eax,0x8
c0012b13:	09 d0                	or     eax,edx
c0012b15:	83 c4 04             	add    esp,0x4
c0012b18:	c3                   	ret    
c0012b19:	8d 76 00             	lea    esi,[esi+0x0]

c0012b1c <KeSwitchEndian32(unsigned int)>:
c0012b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b20:	c1 e8 18             	shr    eax,0x18
c0012b23:	89 c2                	mov    edx,eax
c0012b25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b29:	c1 e0 08             	shl    eax,0x8
c0012b2c:	25 00 00 ff 00       	and    eax,0xff0000
c0012b31:	09 c2                	or     edx,eax
c0012b33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b37:	c1 e8 08             	shr    eax,0x8
c0012b3a:	25 00 ff 00 00       	and    eax,0xff00
c0012b3f:	09 c2                	or     edx,eax
c0012b41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b45:	c1 e0 18             	shl    eax,0x18
c0012b48:	09 d0                	or     eax,edx
c0012b4a:	c3                   	ret    
c0012b4b:	90                   	nop

c0012b4c <EthernetCRC32(unsigned char*, int)>:
c0012b4c:	83 ec 10             	sub    esp,0x10
c0012b4f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012b54:	75 0a                	jne    c0012b60 <EthernetCRC32(unsigned char*, int)+0x14>
c0012b56:	b8 00 00 00 00       	mov    eax,0x0
c0012b5b:	e9 8c 00 00 00       	jmp    c0012bec <EthernetCRC32(unsigned char*, int)+0xa0>
c0012b60:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012b65:	7f 09                	jg     c0012b70 <EthernetCRC32(unsigned char*, int)+0x24>
c0012b67:	b8 00 00 00 00       	mov    eax,0x0
c0012b6c:	eb 7e                	jmp    c0012bec <EthernetCRC32(unsigned char*, int)+0xa0>
c0012b6e:	66 90                	xchg   ax,ax
c0012b70:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012b78:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012b80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b84:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012b88:	7d 5a                	jge    c0012be4 <EthernetCRC32(unsigned char*, int)+0x98>
c0012b8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012b92:	01 d0                	add    eax,edx
c0012b94:	8a 00                	mov    al,BYTE PTR [eax]
c0012b96:	0f b6 c0             	movzx  eax,al
c0012b99:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012b9d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ba8:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012bad:	7f 2d                	jg     c0012bdc <EthernetCRC32(unsigned char*, int)+0x90>
c0012baf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bb3:	83 e0 01             	and    eax,0x1
c0012bb6:	74 10                	je     c0012bc8 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012bb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bbc:	d1 e8                	shr    eax,1
c0012bbe:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012bc3:	eb 0b                	jmp    c0012bd0 <EthernetCRC32(unsigned char*, int)+0x84>
c0012bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0012bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bcc:	d1 e8                	shr    eax,1
c0012bce:	66 90                	xchg   ax,ax
c0012bd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012bd4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012bd9:	eb cd                	jmp    c0012ba8 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012bdb:	90                   	nop
c0012bdc:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012be1:	eb 9d                	jmp    c0012b80 <EthernetCRC32(unsigned char*, int)+0x34>
c0012be3:	90                   	nop
c0012be4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012be8:	f7 d0                	not    eax
c0012bea:	66 90                	xchg   ax,ax
c0012bec:	83 c4 10             	add    esp,0x10
c0012bef:	c3                   	ret    

c0012bf0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012bf0:	83 ec 2c             	sub    esp,0x2c
c0012bf3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012bf7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012bfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c00:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c0b:	0f b7 c0             	movzx  eax,ax
c0012c0e:	3d 06 08 00 00       	cmp    eax,0x806
c0012c13:	75 13                	jne    c0012c28 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012c15:	83 ec 0c             	sub    esp,0xc
c0012c18:	68 0a 25 02 c0       	push   0xc002250a
c0012c1d:	e8 23 7d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012c22:	83 c4 10             	add    esp,0x10
c0012c25:	eb 25                	jmp    c0012c4c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012c27:	90                   	nop
c0012c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c2c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c2f:	0f b7 c0             	movzx  eax,ax
c0012c32:	3d 00 08 00 00       	cmp    eax,0x800
c0012c37:	75 13                	jne    c0012c4c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012c39:	83 ec 0c             	sub    esp,0xc
c0012c3c:	68 20 25 02 c0       	push   0xc0022520
c0012c41:	e8 ff 7c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012c46:	83 c4 10             	add    esp,0x10
c0012c49:	8d 76 00             	lea    esi,[esi+0x0]
c0012c4c:	90                   	nop
c0012c4d:	83 c4 2c             	add    esp,0x2c
c0012c50:	c3                   	ret    

c0012c51 <CmOpen(char const*)>:
c0012c51:	57                   	push   edi
c0012c52:	56                   	push   esi
c0012c53:	53                   	push   ebx
c0012c54:	83 ec 1c             	sub    esp,0x1c
c0012c57:	6a 30                	push   0x30
c0012c59:	e8 58 4e ff ff       	call   c0007ab6 <malloc>
c0012c5e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012c65:	89 c3                	mov    ebx,eax
c0012c67:	e8 4a 4e ff ff       	call   c0007ab6 <malloc>
c0012c6c:	83 c4 0c             	add    esp,0xc
c0012c6f:	89 c6                	mov    esi,eax
c0012c71:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012c77:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012c7b:	50                   	push   eax
c0012c7c:	e8 c7 8e ff ff       	call   c000bb48 <File::File(char const*, Process*)>
c0012c81:	83 c4 0c             	add    esp,0xc
c0012c84:	89 33                	mov    DWORD PTR [ebx],esi
c0012c86:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012c8a:	50                   	push   eax
c0012c8b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012c8f:	50                   	push   eax
c0012c90:	56                   	push   esi
c0012c91:	e8 d2 91 ff ff       	call   c000be68 <File::stat(unsigned long long*, bool*)>
c0012c96:	5a                   	pop    edx
c0012c97:	59                   	pop    ecx
c0012c98:	6a 01                	push   0x1
c0012c9a:	ff 33                	push   DWORD PTR [ebx]
c0012c9c:	e8 c5 8e ff ff       	call   c000bb66 <File::open(FileOpenMode)>
c0012ca1:	5e                   	pop    esi
c0012ca2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ca6:	e8 0b 4e ff ff       	call   c0007ab6 <malloc>
c0012cab:	5a                   	pop    edx
c0012cac:	89 c7                	mov    edi,eax
c0012cae:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012cb2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cb4:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cb6:	56                   	push   esi
c0012cb7:	57                   	push   edi
c0012cb8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cbc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cc0:	50                   	push   eax
c0012cc1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012cc4:	83 c4 14             	add    esp,0x14
c0012cc7:	ff 33                	push   DWORD PTR [ebx]
c0012cc9:	e8 f6 8e ff ff       	call   c000bbc4 <File::close()>
c0012cce:	59                   	pop    ecx
c0012ccf:	58                   	pop    eax
c0012cd0:	6a 13                	push   0x13
c0012cd2:	ff 33                	push   DWORD PTR [ebx]
c0012cd4:	e8 8d 8e ff ff       	call   c000bb66 <File::open(FileOpenMode)>
c0012cd9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cdb:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cdd:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ce0:	57                   	push   edi
c0012ce1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ce5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ce9:	50                   	push   eax
c0012cea:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012ced:	83 c4 14             	add    esp,0x14
c0012cf0:	57                   	push   edi
c0012cf1:	e8 d0 4d ff ff       	call   c0007ac6 <free>
c0012cf6:	83 c4 10             	add    esp,0x10
c0012cf9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012cfc:	75 10                	jne    c0012d0e <CmOpen(char const*)+0xbd>
c0012cfe:	83 ec 0c             	sub    esp,0xc
c0012d01:	68 35 25 02 c0       	push   0xc0022535
c0012d06:	e8 10 e9 ff ff       	call   c001161b <KePanic(char const*)>
c0012d0b:	83 c4 10             	add    esp,0x10
c0012d0e:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012d11:	50                   	push   eax
c0012d12:	6a 00                	push   0x0
c0012d14:	6a 00                	push   0x0
c0012d16:	ff 33                	push   DWORD PTR [ebx]
c0012d18:	e8 07 8f ff ff       	call   c000bc24 <File::seek(unsigned long long)>
c0012d1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d21:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d24:	57                   	push   edi
c0012d25:	6a 00                	push   0x0
c0012d27:	6a 2b                	push   0x2b
c0012d29:	50                   	push   eax
c0012d2a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d2d:	83 c4 1c             	add    esp,0x1c
c0012d30:	6a 00                	push   0x0
c0012d32:	6a 00                	push   0x0
c0012d34:	ff 33                	push   DWORD PTR [ebx]
c0012d36:	e8 e9 8e ff ff       	call   c000bc24 <File::seek(unsigned long long)>
c0012d3b:	83 c4 0c             	add    esp,0xc
c0012d3e:	6a 08                	push   0x8
c0012d40:	68 46 25 02 c0       	push   0xc0022546
c0012d45:	57                   	push   edi
c0012d46:	e8 35 d6 fe ff       	call   c0000380 <memcmp>
c0012d4b:	83 c4 10             	add    esp,0x10
c0012d4e:	85 c0                	test   eax,eax
c0012d50:	74 10                	je     c0012d62 <CmOpen(char const*)+0x111>
c0012d52:	83 ec 0c             	sub    esp,0xc
c0012d55:	68 4f 25 02 c0       	push   0xc002254f
c0012d5a:	e8 bc e8 ff ff       	call   c001161b <KePanic(char const*)>
c0012d5f:	83 c4 10             	add    esp,0x10
c0012d62:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012d66:	89 d8                	mov    eax,ebx
c0012d68:	83 c4 10             	add    esp,0x10
c0012d6b:	5b                   	pop    ebx
c0012d6c:	5e                   	pop    esi
c0012d6d:	5f                   	pop    edi
c0012d6e:	c3                   	ret    

c0012d6f <CmClose(Reghive_Tag*)>:
c0012d6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d73:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012d77:	74 0b                	je     c0012d84 <CmClose(Reghive_Tag*)+0x15>
c0012d79:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d7b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012d7f:	e9 40 8e ff ff       	jmp    c000bbc4 <File::close()>
c0012d84:	c3                   	ret    

c0012d85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012d85:	53                   	push   ebx
c0012d86:	83 ec 18             	sub    esp,0x18
c0012d89:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012d8d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012d91:	74 29                	je     c0012dbc <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012d93:	50                   	push   eax
c0012d94:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012d99:	99                   	cdq    
c0012d9a:	52                   	push   edx
c0012d9b:	50                   	push   eax
c0012d9c:	ff 33                	push   DWORD PTR [ebx]
c0012d9e:	e8 81 8e ff ff       	call   c000bc24 <File::seek(unsigned long long)>
c0012da3:	5a                   	pop    edx
c0012da4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012da6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012daa:	8b 10                	mov    edx,DWORD PTR [eax]
c0012dac:	51                   	push   ecx
c0012dad:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012db1:	6a 00                	push   0x0
c0012db3:	6a 2b                	push   0x2b
c0012db5:	50                   	push   eax
c0012db6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012db9:	83 c4 20             	add    esp,0x20
c0012dbc:	83 c4 18             	add    esp,0x18
c0012dbf:	5b                   	pop    ebx
c0012dc0:	c3                   	ret    

c0012dc1 <CmGetString(Reghive_Tag*, int, char*)>:
c0012dc1:	55                   	push   ebp
c0012dc2:	57                   	push   edi
c0012dc3:	56                   	push   esi
c0012dc4:	53                   	push   ebx
c0012dc5:	31 db                	xor    ebx,ebx
c0012dc7:	83 ec 70             	sub    esp,0x70
c0012dca:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012dd1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012dd5:	50                   	push   eax
c0012dd6:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012ddd:	55                   	push   ebp
c0012dde:	e8 a2 ff ff ff       	call   c0012d85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012de3:	83 c4 10             	add    esp,0x10
c0012de6:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012deb:	c1 e0 08             	shl    eax,0x8
c0012dee:	89 c2                	mov    edx,eax
c0012df0:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012df5:	09 d0                	or     eax,edx
c0012df7:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012dfc:	c1 e0 08             	shl    eax,0x8
c0012dff:	09 d0                	or     eax,edx
c0012e01:	74 25                	je     c0012e28 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012e03:	6b fb 0d             	imul   edi,ebx,0xd
c0012e06:	52                   	push   edx
c0012e07:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012e0b:	52                   	push   edx
c0012e0c:	50                   	push   eax
c0012e0d:	55                   	push   ebp
c0012e0e:	e8 72 ff ff ff       	call   c0012d85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e13:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012e17:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012e1e:	b9 27 00 00 00       	mov    ecx,0x27
c0012e23:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e25:	83 c4 10             	add    esp,0x10
c0012e28:	83 c3 03             	add    ebx,0x3
c0012e2b:	83 fb 15             	cmp    ebx,0x15
c0012e2e:	75 b6                	jne    c0012de6 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012e30:	83 c4 6c             	add    esp,0x6c
c0012e33:	5b                   	pop    ebx
c0012e34:	5e                   	pop    esi
c0012e35:	5f                   	pop    edi
c0012e36:	5d                   	pop    ebp
c0012e37:	c3                   	ret    

c0012e38 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012e38:	83 ec 40             	sub    esp,0x40
c0012e3b:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e3f:	50                   	push   eax
c0012e40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e48:	e8 38 ff ff ff       	call   c0012d85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e4d:	83 c4 10             	add    esp,0x10
c0012e50:	83 c8 ff             	or     eax,0xffffffff
c0012e53:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012e58:	75 19                	jne    c0012e73 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012e5a:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012e5f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012e64:	c1 e0 08             	shl    eax,0x8
c0012e67:	09 c2                	or     edx,eax
c0012e69:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012e6e:	c1 e0 10             	shl    eax,0x10
c0012e71:	09 d0                	or     eax,edx
c0012e73:	83 c4 3c             	add    esp,0x3c
c0012e76:	c3                   	ret    

c0012e77 <CmGetNext(Reghive_Tag*, int)>:
c0012e77:	83 ec 40             	sub    esp,0x40
c0012e7a:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e7e:	50                   	push   eax
c0012e7f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e83:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e87:	e8 f9 fe ff ff       	call   c0012d85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e8c:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012e91:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012e96:	c1 e0 08             	shl    eax,0x8
c0012e99:	09 c2                	or     edx,eax
c0012e9b:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012ea0:	83 c4 4c             	add    esp,0x4c
c0012ea3:	c1 e0 10             	shl    eax,0x10
c0012ea6:	09 d0                	or     eax,edx
c0012ea8:	c3                   	ret    

c0012ea9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012ea9:	53                   	push   ebx
c0012eaa:	83 ec 18             	sub    esp,0x18
c0012ead:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012eb1:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012eb5:	74 29                	je     c0012ee0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012eb7:	50                   	push   eax
c0012eb8:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012ebd:	99                   	cdq    
c0012ebe:	52                   	push   edx
c0012ebf:	50                   	push   eax
c0012ec0:	ff 33                	push   DWORD PTR [ebx]
c0012ec2:	e8 5d 8d ff ff       	call   c000bc24 <File::seek(unsigned long long)>
c0012ec7:	5a                   	pop    edx
c0012ec8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012eca:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012ece:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ed0:	51                   	push   ecx
c0012ed1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012ed5:	6a 00                	push   0x0
c0012ed7:	6a 2b                	push   0x2b
c0012ed9:	50                   	push   eax
c0012eda:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012edd:	83 c4 20             	add    esp,0x20
c0012ee0:	83 c4 18             	add    esp,0x18
c0012ee3:	5b                   	pop    ebx
c0012ee4:	c3                   	ret    

c0012ee5 <CmFreeExtent(Reghive_Tag*, int)>:
c0012ee5:	53                   	push   ebx
c0012ee6:	83 ec 3c             	sub    esp,0x3c
c0012ee9:	6a 2b                	push   0x2b
c0012eeb:	6a 00                	push   0x0
c0012eed:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012ef1:	53                   	push   ebx
c0012ef2:	e8 f9 d5 fe ff       	call   c00004f0 <memset>
c0012ef7:	83 c4 0c             	add    esp,0xc
c0012efa:	53                   	push   ebx
c0012efb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012eff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f03:	e8 a1 ff ff ff       	call   c0012ea9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f08:	83 c4 48             	add    esp,0x48
c0012f0b:	5b                   	pop    ebx
c0012f0c:	c3                   	ret    

c0012f0d <CmUpdateHeader(Reghive_Tag*)>:
c0012f0d:	83 ec 0c             	sub    esp,0xc
c0012f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f14:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012f18:	74 10                	je     c0012f2a <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012f1a:	52                   	push   edx
c0012f1b:	8d 50 05             	lea    edx,[eax+0x5]
c0012f1e:	52                   	push   edx
c0012f1f:	6a 00                	push   0x0
c0012f21:	50                   	push   eax
c0012f22:	e8 82 ff ff ff       	call   c0012ea9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f27:	83 c4 10             	add    esp,0x10
c0012f2a:	83 c4 0c             	add    esp,0xc
c0012f2d:	c3                   	ret    

c0012f2e <CmExpand(Reghive_Tag*, int)>:
c0012f2e:	57                   	push   edi
c0012f2f:	56                   	push   esi
c0012f30:	83 ce ff             	or     esi,0xffffffff
c0012f33:	53                   	push   ebx
c0012f34:	83 ec 30             	sub    esp,0x30
c0012f37:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012f3b:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012f3f:	74 5f                	je     c0012fa0 <CmExpand(Reghive_Tag*, int)+0x72>
c0012f41:	31 d2                	xor    edx,edx
c0012f43:	31 f6                	xor    esi,esi
c0012f45:	50                   	push   eax
c0012f46:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012f4a:	52                   	push   edx
c0012f4b:	50                   	push   eax
c0012f4c:	ff 33                	push   DWORD PTR [ebx]
c0012f4e:	e8 d1 8c ff ff       	call   c000bc24 <File::seek(unsigned long long)>
c0012f53:	83 c4 0c             	add    esp,0xc
c0012f56:	6a 2b                	push   0x2b
c0012f58:	6a 00                	push   0x0
c0012f5a:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0012f5e:	57                   	push   edi
c0012f5f:	e8 8c d5 fe ff       	call   c00004f0 <memset>
c0012f64:	83 c4 10             	add    esp,0x10
c0012f67:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0012f6b:	7d 1b                	jge    c0012f88 <CmExpand(Reghive_Tag*, int)+0x5a>
c0012f6d:	83 ec 0c             	sub    esp,0xc
c0012f70:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f72:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012f76:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f78:	46                   	inc    esi
c0012f79:	51                   	push   ecx
c0012f7a:	57                   	push   edi
c0012f7b:	6a 00                	push   0x0
c0012f7d:	6a 2b                	push   0x2b
c0012f7f:	50                   	push   eax
c0012f80:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012f83:	83 c4 20             	add    esp,0x20
c0012f86:	eb df                	jmp    c0012f67 <CmExpand(Reghive_Tag*, int)+0x39>
c0012f88:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012f8c:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0012f8f:	83 ec 0c             	sub    esp,0xc
c0012f92:	01 f2                	add    edx,esi
c0012f94:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0012f97:	53                   	push   ebx
c0012f98:	e8 70 ff ff ff       	call   c0012f0d <CmUpdateHeader(Reghive_Tag*)>
c0012f9d:	83 c4 10             	add    esp,0x10
c0012fa0:	83 c4 30             	add    esp,0x30
c0012fa3:	89 f0                	mov    eax,esi
c0012fa5:	5b                   	pop    ebx
c0012fa6:	5e                   	pop    esi
c0012fa7:	5f                   	pop    edi
c0012fa8:	c3                   	ret    

c0012fa9 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012fa9:	55                   	push   ebp
c0012faa:	57                   	push   edi
c0012fab:	56                   	push   esi
c0012fac:	53                   	push   ebx
c0012fad:	83 cb ff             	or     ebx,0xffffffff
c0012fb0:	83 ec 1c             	sub    esp,0x1c
c0012fb3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012fb7:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012fbb:	74 68                	je     c0013025 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012fbd:	be 2b 00 00 00       	mov    esi,0x2b
c0012fc2:	51                   	push   ecx
c0012fc3:	31 ff                	xor    edi,edi
c0012fc5:	6a 00                	push   0x0
c0012fc7:	31 db                	xor    ebx,ebx
c0012fc9:	6a 00                	push   0x0
c0012fcb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012fce:	e8 51 8c ff ff       	call   c000bc24 <File::seek(unsigned long long)>
c0012fd3:	83 c4 10             	add    esp,0x10
c0012fd6:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012fd9:	76 3b                	jbe    c0013016 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012fdb:	83 ec 0c             	sub    esp,0xc
c0012fde:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012fe1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012fe5:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fe7:	51                   	push   ecx
c0012fe8:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012fec:	51                   	push   ecx
c0012fed:	6a 00                	push   0x0
c0012fef:	6a 01                	push   0x1
c0012ff1:	50                   	push   eax
c0012ff2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012ff5:	83 c4 20             	add    esp,0x20
c0012ff8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012ffd:	74 26                	je     c0013025 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012fff:	43                   	inc    ebx
c0013000:	52                   	push   edx
c0013001:	57                   	push   edi
c0013002:	56                   	push   esi
c0013003:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0013006:	e8 19 8c ff ff       	call   c000bc24 <File::seek(unsigned long long)>
c001300b:	83 c6 2b             	add    esi,0x2b
c001300e:	83 d7 00             	adc    edi,0x0
c0013011:	83 c4 10             	add    esp,0x10
c0013014:	eb c0                	jmp    c0012fd6 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0013016:	50                   	push   eax
c0013017:	50                   	push   eax
c0013018:	6a 40                	push   0x40
c001301a:	55                   	push   ebp
c001301b:	e8 0e ff ff ff       	call   c0012f2e <CmExpand(Reghive_Tag*, int)>
c0013020:	83 c4 10             	add    esp,0x10
c0013023:	89 c3                	mov    ebx,eax
c0013025:	83 c4 1c             	add    esp,0x1c
c0013028:	89 d8                	mov    eax,ebx
c001302a:	5b                   	pop    ebx
c001302b:	5e                   	pop    esi
c001302c:	5f                   	pop    edi
c001302d:	5d                   	pop    ebp
c001302e:	c3                   	ret    

c001302f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c001302f:	55                   	push   ebp
c0013030:	57                   	push   edi
c0013031:	56                   	push   esi
c0013032:	53                   	push   ebx
c0013033:	81 ec 88 00 00 00    	sub    esp,0x88
c0013039:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0013040:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013047:	e8 5d ff ff ff       	call   c0012fa9 <CmFindUnusedExtent(Reghive_Tag*)>
c001304c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013050:	83 c4 0c             	add    esp,0xc
c0013053:	6a 2b                	push   0x2b
c0013055:	6a 00                	push   0x0
c0013057:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c001305b:	55                   	push   ebp
c001305c:	e8 8f d4 fe ff       	call   c00004f0 <memset>
c0013061:	83 c4 10             	add    esp,0x10
c0013064:	85 db                	test   ebx,ebx
c0013066:	74 12                	je     c001307a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0013068:	51                   	push   ecx
c0013069:	55                   	push   ebp
c001306a:	53                   	push   ebx
c001306b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013072:	e8 0e fd ff ff       	call   c0012d85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013077:	83 c4 10             	add    esp,0x10
c001307a:	8d 7c 24 45          	lea    edi,[esp+0x45]
c001307e:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0013085:	b9 2b 00 00 00       	mov    ecx,0x2b
c001308a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001308c:	85 db                	test   ebx,ebx
c001308e:	74 49                	je     c00130d9 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0013090:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0013095:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c001309a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001309e:	c1 e0 08             	shl    eax,0x8
c00130a1:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00130a7:	09 c8                	or     eax,ecx
c00130a9:	74 11                	je     c00130bc <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00130ab:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00130af:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00130b3:	c1 e8 10             	shr    eax,0x10
c00130b6:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00130ba:	eb 0f                	jmp    c00130cb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c00130bc:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00130c1:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00130c6:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00130cb:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c00130cf:	c1 ea 08             	shr    edx,0x8
c00130d2:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c00130d7:	eb 0f                	jmp    c00130e8 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c00130d9:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00130de:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00130e3:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00130e8:	52                   	push   edx
c00130e9:	8d 44 24 49          	lea    eax,[esp+0x49]
c00130ed:	50                   	push   eax
c00130ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00130f2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130f9:	e8 ab fd ff ff       	call   c0012ea9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00130fe:	83 c4 10             	add    esp,0x10
c0013101:	85 db                	test   ebx,ebx
c0013103:	74 12                	je     c0013117 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0013105:	50                   	push   eax
c0013106:	55                   	push   ebp
c0013107:	53                   	push   ebx
c0013108:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001310f:	e8 95 fd ff ff       	call   c0012ea9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013114:	83 c4 10             	add    esp,0x10
c0013117:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001311b:	83 c4 7c             	add    esp,0x7c
c001311e:	5b                   	pop    ebx
c001311f:	5e                   	pop    esi
c0013120:	5f                   	pop    edi
c0013121:	5d                   	pop    ebp
c0013122:	c3                   	ret    

c0013123 <CmSetString(Reghive_Tag*, int, char const*)>:
c0013123:	55                   	push   ebp
c0013124:	57                   	push   edi
c0013125:	56                   	push   esi
c0013126:	53                   	push   ebx
c0013127:	bb 27 00 00 00       	mov    ebx,0x27
c001312c:	81 ec 88 00 00 00    	sub    esp,0x88
c0013132:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0013139:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0013140:	e8 2b d4 fe ff       	call   c0000570 <strlen>
c0013145:	8d 48 26             	lea    ecx,[eax+0x26]
c0013148:	89 c8                	mov    eax,ecx
c001314a:	99                   	cdq    
c001314b:	f7 fb                	idiv   ebx
c001314d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013151:	83 c4 10             	add    esp,0x10
c0013154:	81 f9 37 01 00 00    	cmp    ecx,0x137
c001315a:	7e 10                	jle    c001316c <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c001315c:	83 ec 0c             	sub    esp,0xc
c001315f:	68 60 25 02 c0       	push   0xc0022560
c0013164:	e8 b2 e4 ff ff       	call   c001161b <KePanic(char const*)>
c0013169:	83 c4 10             	add    esp,0x10
c001316c:	31 ff                	xor    edi,edi
c001316e:	50                   	push   eax
c001316f:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0013173:	53                   	push   ebx
c0013174:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001317b:	56                   	push   esi
c001317c:	e8 04 fc ff ff       	call   c0012d85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013181:	83 c4 10             	add    esp,0x10
c0013184:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0013188:	89 d0                	mov    eax,edx
c001318a:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c001318e:	c1 e0 08             	shl    eax,0x8
c0013191:	09 c2                	or     edx,eax
c0013193:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0013197:	c1 e2 08             	shl    edx,0x8
c001319a:	09 c2                	or     edx,eax
c001319c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00131a0:	7e 76                	jle    c0013218 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c00131a2:	85 d2                	test   edx,edx
c00131a4:	75 25                	jne    c00131cb <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00131a6:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00131ab:	8d 44 24 45          	lea    eax,[esp+0x45]
c00131af:	50                   	push   eax
c00131b0:	6a 00                	push   0x0
c00131b2:	6a 00                	push   0x0
c00131b4:	56                   	push   esi
c00131b5:	e8 75 fe ff ff       	call   c001302f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00131ba:	83 c4 10             	add    esp,0x10
c00131bd:	89 c2                	mov    edx,eax
c00131bf:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00131c2:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00131c5:	c1 f8 10             	sar    eax,0x10
c00131c8:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c00131cb:	55                   	push   ebp
c00131cc:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c00131d0:	55                   	push   ebp
c00131d1:	52                   	push   edx
c00131d2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00131d6:	56                   	push   esi
c00131d7:	e8 a9 fb ff ff       	call   c0012d85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00131dc:	83 c4 0c             	add    esp,0xc
c00131df:	6a 27                	push   0x27
c00131e1:	6a 00                	push   0x0
c00131e3:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00131e7:	51                   	push   ecx
c00131e8:	e8 03 d3 fe ff       	call   c00004f0 <memset>
c00131ed:	83 c4 0c             	add    esp,0xc
c00131f0:	6b c7 27             	imul   eax,edi,0x27
c00131f3:	6a 27                	push   0x27
c00131f5:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c00131fc:	50                   	push   eax
c00131fd:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0013201:	51                   	push   ecx
c0013202:	e8 79 d4 fe ff       	call   c0000680 <strncpy>
c0013207:	83 c4 0c             	add    esp,0xc
c001320a:	55                   	push   ebp
c001320b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001320f:	52                   	push   edx
c0013210:	56                   	push   esi
c0013211:	e8 93 fc ff ff       	call   c0012ea9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013216:	eb 19                	jmp    c0013231 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0013218:	85 d2                	test   edx,edx
c001321a:	74 18                	je     c0013234 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c001321c:	51                   	push   ecx
c001321d:	51                   	push   ecx
c001321e:	52                   	push   edx
c001321f:	56                   	push   esi
c0013220:	e8 c0 fc ff ff       	call   c0012ee5 <CmFreeExtent(Reghive_Tag*, int)>
c0013225:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0013229:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c001322d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0013231:	83 c4 10             	add    esp,0x10
c0013234:	47                   	inc    edi
c0013235:	83 c3 03             	add    ebx,0x3
c0013238:	83 ff 07             	cmp    edi,0x7
c001323b:	0f 85 43 ff ff ff    	jne    c0013184 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0013241:	50                   	push   eax
c0013242:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0013246:	50                   	push   eax
c0013247:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001324e:	56                   	push   esi
c001324f:	e8 55 fc ff ff       	call   c0012ea9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013254:	81 c4 8c 00 00 00    	add    esp,0x8c
c001325a:	5b                   	pop    ebx
c001325b:	5e                   	pop    esi
c001325c:	5f                   	pop    edi
c001325d:	5d                   	pop    ebp
c001325e:	c3                   	ret    

c001325f <CmGetMatch(char*, char*, bool, bool*)>:
c001325f:	56                   	push   esi
c0013260:	53                   	push   ebx
c0013261:	50                   	push   eax
c0013262:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013266:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001326b:	74 25                	je     c0013292 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c001326d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013270:	31 db                	xor    ebx,ebx
c0013272:	50                   	push   eax
c0013273:	50                   	push   eax
c0013274:	8d 04 9d 00 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc200]
c001327b:	50                   	push   eax
c001327c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013280:	e8 cb d4 fe ff       	call   c0000750 <strcmp>
c0013285:	83 c4 10             	add    esp,0x10
c0013288:	85 c0                	test   eax,eax
c001328a:	74 2e                	je     c00132ba <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c001328c:	43                   	inc    ebx
c001328d:	83 fb 3f             	cmp    ebx,0x3f
c0013290:	75 e0                	jne    c0013272 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0013292:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013295:	31 db                	xor    ebx,ebx
c0013297:	8d 04 9d 00 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc200]
c001329e:	51                   	push   ecx
c001329f:	51                   	push   ecx
c00132a0:	50                   	push   eax
c00132a1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00132a5:	e8 a6 d4 fe ff       	call   c0000750 <strcmp>
c00132aa:	83 c4 10             	add    esp,0x10
c00132ad:	85 c0                	test   eax,eax
c00132af:	74 09                	je     c00132ba <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00132b1:	43                   	inc    ebx
c00132b2:	83 fb 3f             	cmp    ebx,0x3f
c00132b5:	75 e0                	jne    c0013297 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00132b7:	83 cb ff             	or     ebx,0xffffffff
c00132ba:	89 d8                	mov    eax,ebx
c00132bc:	5a                   	pop    edx
c00132bd:	5b                   	pop    ebx
c00132be:	5e                   	pop    esi
c00132bf:	c3                   	ret    

c00132c0 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00132c0:	55                   	push   ebp
c00132c1:	31 c0                	xor    eax,eax
c00132c3:	57                   	push   edi
c00132c4:	56                   	push   esi
c00132c5:	53                   	push   ebx
c00132c6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00132ca:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00132ce:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00132d0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00132d4:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00132d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00132db:	83 fd 1f             	cmp    ebp,0x1f
c00132de:	7f 0b                	jg     c00132eb <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00132e0:	0f b6 c2             	movzx  eax,dl
c00132e3:	d3 e0                	shl    eax,cl
c00132e5:	09 07                	or     DWORD PTR [edi],eax
c00132e7:	b0 01                	mov    al,0x1
c00132e9:	01 33                	add    DWORD PTR [ebx],esi
c00132eb:	5b                   	pop    ebx
c00132ec:	5e                   	pop    esi
c00132ed:	5f                   	pop    edi
c00132ee:	5d                   	pop    ebp
c00132ef:	c3                   	ret    

c00132f0 <CmGetShift(unsigned int*, int*, int, bool*)>:
c00132f0:	57                   	push   edi
c00132f1:	56                   	push   esi
c00132f2:	53                   	push   ebx
c00132f3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00132f7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00132fb:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00132ff:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013303:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0013305:	7c 17                	jl     c001331e <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0013307:	8b 17                	mov    edx,DWORD PTR [edi]
c0013309:	b8 01 00 00 00       	mov    eax,0x1
c001330e:	d3 e0                	shl    eax,cl
c0013310:	48                   	dec    eax
c0013311:	21 d0                	and    eax,edx
c0013313:	d3 ea                	shr    edx,cl
c0013315:	89 17                	mov    DWORD PTR [edi],edx
c0013317:	29 0b                	sub    DWORD PTR [ebx],ecx
c0013319:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001331c:	eb 05                	jmp    c0013323 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c001331e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013321:	31 c0                	xor    eax,eax
c0013323:	5b                   	pop    ebx
c0013324:	5e                   	pop    esi
c0013325:	5f                   	pop    edi
c0013326:	c3                   	ret    

c0013327 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0013327:	83 ec 40             	sub    esp,0x40
c001332a:	8d 44 24 09          	lea    eax,[esp+0x9]
c001332e:	50                   	push   eax
c001332f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013333:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013337:	e8 49 fa ff ff       	call   c0012d85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001333c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0013340:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0013344:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0013348:	89 10                	mov    DWORD PTR [eax],edx
c001334a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001334d:	83 c4 4c             	add    esp,0x4c
c0013350:	c3                   	ret    

c0013351 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0013351:	55                   	push   ebp
c0013352:	57                   	push   edi
c0013353:	56                   	push   esi
c0013354:	53                   	push   ebx
c0013355:	83 ec 40             	sub    esp,0x40
c0013358:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001335c:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0013360:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0013364:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0013368:	53                   	push   ebx
c0013369:	56                   	push   esi
c001336a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001336e:	e8 12 fa ff ff       	call   c0012d85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013373:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0013377:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c001337b:	83 c4 0c             	add    esp,0xc
c001337e:	53                   	push   ebx
c001337f:	56                   	push   esi
c0013380:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013384:	e8 20 fb ff ff       	call   c0012ea9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013389:	83 c4 4c             	add    esp,0x4c
c001338c:	5b                   	pop    ebx
c001338d:	5e                   	pop    esi
c001338e:	5f                   	pop    edi
c001338f:	5d                   	pop    ebp
c0013390:	c3                   	ret    

c0013391 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0013391:	55                   	push   ebp
c0013392:	57                   	push   edi
c0013393:	56                   	push   esi
c0013394:	31 f6                	xor    esi,esi
c0013396:	53                   	push   ebx
c0013397:	31 db                	xor    ebx,ebx
c0013399:	83 ec 40             	sub    esp,0x40
c001339c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00133a4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00133ac:	6a 12                	push   0x12
c00133ae:	68 ee 00 00 00       	push   0xee
c00133b3:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00133b7:	e8 34 d1 fe ff       	call   c00004f0 <memset>
c00133bc:	83 c4 10             	add    esp,0x10
c00133bf:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00133c3:	6a 08                	push   0x8
c00133c5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00133c9:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00133cd:	50                   	push   eax
c00133ce:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00133d2:	55                   	push   ebp
c00133d3:	57                   	push   edi
c00133d4:	e8 e7 fe ff ff       	call   c00132c0 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00133d9:	83 c4 10             	add    esp,0x10
c00133dc:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00133e0:	50                   	push   eax
c00133e1:	6a 06                	push   0x6
c00133e3:	55                   	push   ebp
c00133e4:	57                   	push   edi
c00133e5:	e8 06 ff ff ff       	call   c00132f0 <CmGetShift(unsigned int*, int*, int, bool*)>
c00133ea:	83 c4 10             	add    esp,0x10
c00133ed:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00133f2:	74 07                	je     c00133fb <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c00133f4:	46                   	inc    esi
c00133f5:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c00133f9:	eb e1                	jmp    c00133dc <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c00133fb:	43                   	inc    ebx
c00133fc:	83 fb 12             	cmp    ebx,0x12
c00133ff:	75 c2                	jne    c00133c3 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0013401:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013405:	31 db                	xor    ebx,ebx
c0013407:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001340a:	50                   	push   eax
c001340b:	50                   	push   eax
c001340c:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0013411:	43                   	inc    ebx
c0013412:	8d 04 85 00 3e 02 c0 	lea    eax,[eax*4-0x3ffdc200]
c0013419:	50                   	push   eax
c001341a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001341e:	e8 1d d4 fe ff       	call   c0000840 <strcat>
c0013423:	83 c4 10             	add    esp,0x10
c0013426:	83 fb 18             	cmp    ebx,0x18
c0013429:	75 df                	jne    c001340a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001342b:	83 c4 3c             	add    esp,0x3c
c001342e:	31 c0                	xor    eax,eax
c0013430:	5b                   	pop    ebx
c0013431:	5e                   	pop    esi
c0013432:	5f                   	pop    edi
c0013433:	5d                   	pop    ebp
c0013434:	c3                   	ret    

c0013435 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013435:	83 ec 40             	sub    esp,0x40
c0013438:	8d 44 24 09          	lea    eax,[esp+0x9]
c001343c:	50                   	push   eax
c001343d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013441:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013445:	e8 3b f9 ff ff       	call   c0012d85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001344a:	58                   	pop    eax
c001344b:	5a                   	pop    edx
c001344c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013450:	8d 44 24 15          	lea    eax,[esp+0x15]
c0013454:	50                   	push   eax
c0013455:	e8 37 ff ff ff       	call   c0013391 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c001345a:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c001345f:	83 c4 4c             	add    esp,0x4c
c0013462:	c3                   	ret    

c0013463 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0013463:	55                   	push   ebp
c0013464:	57                   	push   edi
c0013465:	56                   	push   esi
c0013466:	53                   	push   ebx
c0013467:	31 db                	xor    ebx,ebx
c0013469:	83 ec 70             	sub    esp,0x70
c001346c:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0013473:	6a 30                	push   0x30
c0013475:	6a 00                	push   0x0
c0013477:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001347b:	56                   	push   esi
c001347c:	e8 6f d0 fe ff       	call   c00004f0 <memset>
c0013481:	83 c4 10             	add    esp,0x10
c0013484:	83 ec 0c             	sub    esp,0xc
c0013487:	57                   	push   edi
c0013488:	e8 e3 d0 fe ff       	call   c0000570 <strlen>
c001348d:	83 c4 10             	add    esp,0x10
c0013490:	39 d8                	cmp    eax,ebx
c0013492:	76 16                	jbe    c00134aa <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0013494:	83 ec 0c             	sub    esp,0xc
c0013497:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c001349b:	50                   	push   eax
c001349c:	e8 8f d4 fe ff       	call   c0000930 <toupper>
c00134a1:	83 c4 10             	add    esp,0x10
c00134a4:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00134a7:	43                   	inc    ebx
c00134a8:	eb da                	jmp    c0013484 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00134aa:	31 f6                	xor    esi,esi
c00134ac:	52                   	push   edx
c00134ad:	31 ff                	xor    edi,edi
c00134af:	6a 18                	push   0x18
c00134b1:	6a 3f                	push   0x3f
c00134b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00134b7:	50                   	push   eax
c00134b8:	e8 33 d0 fe ff       	call   c00004f0 <memset>
c00134bd:	83 c4 10             	add    esp,0x10
c00134c0:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c00134c4:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c00134c8:	84 c0                	test   al,al
c00134ca:	0f 84 b0 00 00 00    	je     c0013580 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00134d0:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00134d4:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00134d9:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00134dd:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c00134e2:	8d 6e 01             	lea    ebp,[esi+0x1]
c00134e5:	83 ec 0c             	sub    esp,0xc
c00134e8:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00134ec:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00134f0:	53                   	push   ebx
c00134f1:	e8 7a d0 fe ff       	call   c0000570 <strlen>
c00134f6:	83 c4 10             	add    esp,0x10
c00134f9:	85 c0                	test   eax,eax
c00134fb:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00134ff:	74 0b                	je     c001350c <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0013501:	50                   	push   eax
c0013502:	6a 01                	push   0x1
c0013504:	53                   	push   ebx
c0013505:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013509:	50                   	push   eax
c001350a:	eb 0a                	jmp    c0013516 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c001350c:	50                   	push   eax
c001350d:	6a 00                	push   0x0
c001350f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0013513:	50                   	push   eax
c0013514:	6a 00                	push   0x0
c0013516:	e8 44 fd ff ff       	call   c001325f <CmGetMatch(char*, char*, bool, bool*)>
c001351b:	83 c4 10             	add    esp,0x10
c001351e:	83 f8 ff             	cmp    eax,0xffffffff
c0013521:	75 1a                	jne    c001353d <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0013523:	83 ec 0c             	sub    esp,0xc
c0013526:	68 75 25 02 c0       	push   0xc0022575
c001352b:	e8 eb e0 ff ff       	call   c001161b <KePanic(char const*)>
c0013530:	83 c4 10             	add    esp,0x10
c0013533:	b8 02 00 00 00       	mov    eax,0x2
c0013538:	e9 bc 00 00 00       	jmp    c00135f9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001353d:	83 ff 18             	cmp    edi,0x18
c0013540:	75 1a                	jne    c001355c <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0013542:	83 ec 0c             	sub    esp,0xc
c0013545:	68 8a 25 02 c0       	push   0xc002258a
c001354a:	e8 cc e0 ff ff       	call   c001161b <KePanic(char const*)>
c001354f:	83 c4 10             	add    esp,0x10
c0013552:	b8 01 00 00 00       	mov    eax,0x1
c0013557:	e9 9d 00 00 00       	jmp    c00135f9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001355c:	47                   	inc    edi
c001355d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013562:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0013566:	74 02                	je     c001356a <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0013568:	89 ee                	mov    esi,ebp
c001356a:	83 ec 0c             	sub    esp,0xc
c001356d:	53                   	push   ebx
c001356e:	e8 fd cf fe ff       	call   c0000570 <strlen>
c0013573:	83 c4 10             	add    esp,0x10
c0013576:	85 c0                	test   eax,eax
c0013578:	74 06                	je     c0013580 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c001357a:	46                   	inc    esi
c001357b:	e9 40 ff ff ff       	jmp    c00134c0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0013580:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013588:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013590:	31 f6                	xor    esi,esi
c0013592:	50                   	push   eax
c0013593:	31 ff                	xor    edi,edi
c0013595:	6a 12                	push   0x12
c0013597:	68 ee 00 00 00       	push   0xee
c001359c:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00135a3:	e8 48 cf fe ff       	call   c00004f0 <memset>
c00135a8:	83 c4 10             	add    esp,0x10
c00135ab:	83 fe 17             	cmp    esi,0x17
c00135ae:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00135b2:	7e 26                	jle    c00135da <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c00135b4:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00135b8:	50                   	push   eax
c00135b9:	6a 08                	push   0x8
c00135bb:	55                   	push   ebp
c00135bc:	53                   	push   ebx
c00135bd:	e8 2e fd ff ff       	call   c00132f0 <CmGetShift(unsigned int*, int*, int, bool*)>
c00135c2:	83 c4 10             	add    esp,0x10
c00135c5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00135ca:	74 26                	je     c00135f2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c00135cc:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00135d3:	4e                   	dec    esi
c00135d4:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00135d7:	47                   	inc    edi
c00135d8:	eb 1c                	jmp    c00135f6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00135da:	6a 06                	push   0x6
c00135dc:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c00135e1:	50                   	push   eax
c00135e2:	55                   	push   ebp
c00135e3:	53                   	push   ebx
c00135e4:	e8 d7 fc ff ff       	call   c00132c0 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00135e9:	83 c4 10             	add    esp,0x10
c00135ec:	84 c0                	test   al,al
c00135ee:	75 06                	jne    c00135f6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00135f0:	eb c2                	jmp    c00135b4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c00135f2:	31 c0                	xor    eax,eax
c00135f4:	eb 03                	jmp    c00135f9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00135f6:	46                   	inc    esi
c00135f7:	eb b2                	jmp    c00135ab <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c00135f9:	83 c4 6c             	add    esp,0x6c
c00135fc:	5b                   	pop    ebx
c00135fd:	5e                   	pop    esi
c00135fe:	5f                   	pop    edi
c00135ff:	5d                   	pop    ebp
c0013600:	c3                   	ret    

c0013601 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013601:	53                   	push   ebx
c0013602:	83 ec 3c             	sub    esp,0x3c
c0013605:	6a 2b                	push   0x2b
c0013607:	6a 00                	push   0x0
c0013609:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001360d:	53                   	push   ebx
c001360e:	e8 dd ce fe ff       	call   c00004f0 <memset>
c0013613:	58                   	pop    eax
c0013614:	5a                   	pop    edx
c0013615:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013619:	50                   	push   eax
c001361a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001361e:	e8 40 fe ff ff       	call   c0013463 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013623:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0013628:	83 c4 0c             	add    esp,0xc
c001362b:	6a 15                	push   0x15
c001362d:	6a 00                	push   0x0
c001362f:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013633:	50                   	push   eax
c0013634:	e8 b7 ce fe ff       	call   c00004f0 <memset>
c0013639:	53                   	push   ebx
c001363a:	6a 00                	push   0x0
c001363c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013640:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013644:	e8 e6 f9 ff ff       	call   c001302f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013649:	83 c4 58             	add    esp,0x58
c001364c:	5b                   	pop    ebx
c001364d:	c3                   	ret    

c001364e <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c001364e:	56                   	push   esi
c001364f:	53                   	push   ebx
c0013650:	83 ec 48             	sub    esp,0x48
c0013653:	6a 12                	push   0x12
c0013655:	68 ff 00 00 00       	push   0xff
c001365a:	8d 74 24 0f          	lea    esi,[esp+0xf]
c001365e:	56                   	push   esi
c001365f:	e8 8c ce fe ff       	call   c00004f0 <memset>
c0013664:	5a                   	pop    edx
c0013665:	59                   	pop    ecx
c0013666:	56                   	push   esi
c0013667:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001366b:	e8 f3 fd ff ff       	call   c0013463 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013670:	83 c4 10             	add    esp,0x10
c0013673:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013677:	85 db                	test   ebx,ebx
c0013679:	74 42                	je     c00136bd <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001367b:	50                   	push   eax
c001367c:	8d 44 24 19          	lea    eax,[esp+0x19]
c0013680:	50                   	push   eax
c0013681:	53                   	push   ebx
c0013682:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013686:	e8 fa f6 ff ff       	call   c0012d85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001368b:	83 c4 0c             	add    esp,0xc
c001368e:	6a 12                	push   0x12
c0013690:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013694:	50                   	push   eax
c0013695:	56                   	push   esi
c0013696:	e8 e5 cc fe ff       	call   c0000380 <memcmp>
c001369b:	83 c4 10             	add    esp,0x10
c001369e:	85 c0                	test   eax,eax
c00136a0:	74 1e                	je     c00136c0 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00136a2:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00136a7:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00136ac:	c1 e3 08             	shl    ebx,0x8
c00136af:	09 d8                	or     eax,ebx
c00136b1:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00136b6:	c1 e3 10             	shl    ebx,0x10
c00136b9:	09 c3                	or     ebx,eax
c00136bb:	eb ba                	jmp    c0013677 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00136bd:	83 cb ff             	or     ebx,0xffffffff
c00136c0:	89 d8                	mov    eax,ebx
c00136c2:	83 c4 44             	add    esp,0x44
c00136c5:	5b                   	pop    ebx
c00136c6:	5e                   	pop    esi
c00136c7:	c3                   	ret    

c00136c8 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00136c8:	57                   	push   edi
c00136c9:	56                   	push   esi
c00136ca:	53                   	push   ebx
c00136cb:	83 ec 34             	sub    esp,0x34
c00136ce:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00136d2:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00136d6:	6a 2b                	push   0x2b
c00136d8:	6a 00                	push   0x0
c00136da:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00136de:	53                   	push   ebx
c00136df:	e8 0c ce fe ff       	call   c00004f0 <memset>
c00136e4:	58                   	pop    eax
c00136e5:	5a                   	pop    edx
c00136e6:	8d 44 24 11          	lea    eax,[esp+0x11]
c00136ea:	50                   	push   eax
c00136eb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00136ef:	e8 6f fd ff ff       	call   c0013463 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00136f4:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00136f8:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00136fc:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0013700:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013704:	53                   	push   ebx
c0013705:	6a 00                	push   0x0
c0013707:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001370b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001370f:	e8 1b f9 ff ff       	call   c001302f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013714:	83 c4 50             	add    esp,0x50
c0013717:	5b                   	pop    ebx
c0013718:	5e                   	pop    esi
c0013719:	5f                   	pop    edi
c001371a:	c3                   	ret    

c001371b <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001371b:	55                   	push   ebp
c001371c:	57                   	push   edi
c001371d:	56                   	push   esi
c001371e:	53                   	push   ebx
c001371f:	83 ec 40             	sub    esp,0x40
c0013722:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0013726:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001372a:	6a 2b                	push   0x2b
c001372c:	6a 00                	push   0x0
c001372e:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013732:	56                   	push   esi
c0013733:	e8 b8 cd fe ff       	call   c00004f0 <memset>
c0013738:	5f                   	pop    edi
c0013739:	89 ef                	mov    edi,ebp
c001373b:	58                   	pop    eax
c001373c:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013740:	50                   	push   eax
c0013741:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013745:	e8 19 fd ff ff       	call   c0013463 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001374a:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c001374f:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013754:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0013759:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c001375e:	83 c4 10             	add    esp,0x10
c0013761:	85 ed                	test   ebp,ebp
c0013763:	74 14                	je     c0013779 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013765:	51                   	push   ecx
c0013766:	51                   	push   ecx
c0013767:	57                   	push   edi
c0013768:	53                   	push   ebx
c0013769:	e8 09 f7 ff ff       	call   c0012e77 <CmGetNext(Reghive_Tag*, int)>
c001376e:	83 c4 10             	add    esp,0x10
c0013771:	85 c0                	test   eax,eax
c0013773:	74 04                	je     c0013779 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013775:	89 c7                	mov    edi,eax
c0013777:	eb e8                	jmp    c0013761 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013779:	56                   	push   esi
c001377a:	6a 00                	push   0x0
c001377c:	57                   	push   edi
c001377d:	53                   	push   ebx
c001377e:	e8 ac f8 ff ff       	call   c001302f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013783:	83 c4 0c             	add    esp,0xc
c0013786:	89 c7                	mov    edi,eax
c0013788:	56                   	push   esi
c0013789:	50                   	push   eax
c001378a:	53                   	push   ebx
c001378b:	e8 f5 f5 ff ff       	call   c0012d85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013790:	58                   	pop    eax
c0013791:	5a                   	pop    edx
c0013792:	6a 6c                	push   0x6c
c0013794:	6a 00                	push   0x0
c0013796:	6a 00                	push   0x0
c0013798:	68 9b 25 02 c0       	push   0xc002259b
c001379d:	57                   	push   edi
c001379e:	53                   	push   ebx
c001379f:	e8 24 ff ff ff       	call   c00136c8 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00137a4:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00137a8:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00137ac:	c1 e8 10             	shr    eax,0x10
c00137af:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00137b3:	83 c4 1c             	add    esp,0x1c
c00137b6:	56                   	push   esi
c00137b7:	57                   	push   edi
c00137b8:	53                   	push   ebx
c00137b9:	e8 eb f6 ff ff       	call   c0012ea9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00137be:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00137c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00137c8:	c1 e0 08             	shl    eax,0x8
c00137cb:	09 c2                	or     edx,eax
c00137cd:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00137d2:	83 c4 4c             	add    esp,0x4c
c00137d5:	c1 e0 10             	shl    eax,0x10
c00137d8:	5b                   	pop    ebx
c00137d9:	09 d0                	or     eax,edx
c00137db:	5e                   	pop    esi
c00137dc:	5f                   	pop    edi
c00137dd:	5d                   	pop    ebp
c00137de:	c3                   	ret    

c00137df <zStrtok(char*, char const*)>:
c00137df:	55                   	push   ebp
c00137e0:	57                   	push   edi
c00137e1:	56                   	push   esi
c00137e2:	53                   	push   ebx
c00137e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137eb:	85 db                	test   ebx,ebx
c00137ed:	74 2f                	je     c001381e <zStrtok(char*, char const*)+0x3f>
c00137ef:	85 c0                	test   eax,eax
c00137f1:	75 09                	jne    c00137fc <zStrtok(char*, char const*)+0x1d>
c00137f3:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c00137f8:	85 c0                	test   eax,eax
c00137fa:	74 50                	je     c001384c <zStrtok(char*, char const*)+0x6d>
c00137fc:	31 c9                	xor    ecx,ecx
c00137fe:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013802:	74 03                	je     c0013807 <zStrtok(char*, char const*)+0x28>
c0013804:	41                   	inc    ecx
c0013805:	eb f7                	jmp    c00137fe <zStrtok(char*, char const*)+0x1f>
c0013807:	31 d2                	xor    edx,edx
c0013809:	39 ca                	cmp    edx,ecx
c001380b:	74 15                	je     c0013822 <zStrtok(char*, char const*)+0x43>
c001380d:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013811:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0013814:	8d 3c 10             	lea    edi,[eax+edx*1]
c0013817:	39 ee                	cmp    esi,ebp
c0013819:	74 13                	je     c001382e <zStrtok(char*, char const*)+0x4f>
c001381b:	42                   	inc    edx
c001381c:	eb eb                	jmp    c0013809 <zStrtok(char*, char const*)+0x2a>
c001381e:	31 c0                	xor    eax,eax
c0013820:	eb 2a                	jmp    c001384c <zStrtok(char*, char const*)+0x6d>
c0013822:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c001382c:	eb 1e                	jmp    c001384c <zStrtok(char*, char const*)+0x6d>
c001382e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013831:	39 ce                	cmp    esi,ecx
c0013833:	75 0a                	jne    c001383f <zStrtok(char*, char const*)+0x60>
c0013835:	40                   	inc    eax
c0013836:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c001383b:	89 d8                	mov    eax,ebx
c001383d:	eb 0d                	jmp    c001384c <zStrtok(char*, char const*)+0x6d>
c001383f:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013843:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0013846:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c001384c:	5b                   	pop    ebx
c001384d:	5e                   	pop    esi
c001384e:	5f                   	pop    edi
c001384f:	5d                   	pop    ebp
c0013850:	c3                   	ret    

c0013851 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013851:	57                   	push   edi
c0013852:	56                   	push   esi
c0013853:	53                   	push   ebx
c0013854:	81 ec 08 01 00 00    	sub    esp,0x108
c001385a:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013861:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0013868:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001386c:	53                   	push   ebx
c001386d:	e8 ce cd fe ff       	call   c0000640 <strcpy>
c0013872:	59                   	pop    ecx
c0013873:	5e                   	pop    esi
c0013874:	68 ff 28 02 c0       	push   0xc00228ff
c0013879:	53                   	push   ebx
c001387a:	bb 01 00 00 00       	mov    ebx,0x1
c001387f:	e8 5b ff ff ff       	call   c00137df <zStrtok(char*, char const*)>
c0013884:	83 c4 10             	add    esp,0x10
c0013887:	85 c0                	test   eax,eax
c0013889:	74 3b                	je     c00138c6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001388b:	52                   	push   edx
c001388c:	50                   	push   eax
c001388d:	6a 01                	push   0x1
c001388f:	57                   	push   edi
c0013890:	e8 b9 fd ff ff       	call   c001364e <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013895:	59                   	pop    ecx
c0013896:	89 c3                	mov    ebx,eax
c0013898:	5e                   	pop    esi
c0013899:	68 ff 28 02 c0       	push   0xc00228ff
c001389e:	6a 00                	push   0x0
c00138a0:	e8 3a ff ff ff       	call   c00137df <zStrtok(char*, char const*)>
c00138a5:	83 c4 10             	add    esp,0x10
c00138a8:	89 c6                	mov    esi,eax
c00138aa:	85 c0                	test   eax,eax
c00138ac:	74 18                	je     c00138c6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00138ae:	52                   	push   edx
c00138af:	52                   	push   edx
c00138b0:	53                   	push   ebx
c00138b1:	57                   	push   edi
c00138b2:	e8 81 f5 ff ff       	call   c0012e38 <CmEnterDirectory(Reghive_Tag*, int)>
c00138b7:	83 c4 10             	add    esp,0x10
c00138ba:	89 c3                	mov    ebx,eax
c00138bc:	83 f8 ff             	cmp    eax,0xffffffff
c00138bf:	74 05                	je     c00138c6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00138c1:	50                   	push   eax
c00138c2:	56                   	push   esi
c00138c3:	53                   	push   ebx
c00138c4:	eb c9                	jmp    c001388f <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00138c6:	81 c4 00 01 00 00    	add    esp,0x100
c00138cc:	89 d8                	mov    eax,ebx
c00138ce:	5b                   	pop    ebx
c00138cf:	5e                   	pop    esi
c00138d0:	5f                   	pop    edi
c00138d1:	c3                   	ret    

c00138d2 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00138d2:	55                   	push   ebp
c00138d3:	57                   	push   edi
c00138d4:	56                   	push   esi
c00138d5:	53                   	push   ebx
c00138d6:	83 ec 5c             	sub    esp,0x5c
c00138d9:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00138dd:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00138e1:	85 db                	test   ebx,ebx
c00138e3:	0f 8e 84 00 00 00    	jle    c001396d <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00138e9:	31 ed                	xor    ebp,ebp
c00138eb:	57                   	push   edi
c00138ec:	6a 32                	push   0x32
c00138ee:	6a 00                	push   0x0
c00138f0:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00138f4:	57                   	push   edi
c00138f5:	e8 f6 cb fe ff       	call   c00004f0 <memset>
c00138fa:	83 c4 0c             	add    esp,0xc
c00138fd:	57                   	push   edi
c00138fe:	53                   	push   ebx
c00138ff:	56                   	push   esi
c0013900:	e8 30 fb ff ff       	call   c0013435 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013905:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013909:	83 c4 10             	add    esp,0x10
c001390c:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013910:	7d 13                	jge    c0013925 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013912:	83 ec 0c             	sub    esp,0xc
c0013915:	45                   	inc    ebp
c0013916:	68 a3 2c 02 c0       	push   0xc0022ca3
c001391b:	e8 25 70 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013920:	83 c4 10             	add    esp,0x10
c0013923:	eb e7                	jmp    c001390c <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013925:	51                   	push   ecx
c0013926:	57                   	push   edi
c0013927:	53                   	push   ebx
c0013928:	68 a1 25 02 c0       	push   0xc00225a1
c001392d:	e8 13 70 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013932:	83 c4 10             	add    esp,0x10
c0013935:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001393a:	75 1e                	jne    c001395a <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c001393c:	52                   	push   edx
c001393d:	52                   	push   edx
c001393e:	53                   	push   ebx
c001393f:	56                   	push   esi
c0013940:	e8 f3 f4 ff ff       	call   c0012e38 <CmEnterDirectory(Reghive_Tag*, int)>
c0013945:	83 c4 0c             	add    esp,0xc
c0013948:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c001394c:	8d 51 04             	lea    edx,[ecx+0x4]
c001394f:	52                   	push   edx
c0013950:	50                   	push   eax
c0013951:	56                   	push   esi
c0013952:	e8 7b ff ff ff       	call   c00138d2 <CmDisplayTree(Reghive_Tag*, int, int)>
c0013957:	83 c4 10             	add    esp,0x10
c001395a:	50                   	push   eax
c001395b:	50                   	push   eax
c001395c:	53                   	push   ebx
c001395d:	56                   	push   esi
c001395e:	e8 14 f5 ff ff       	call   c0012e77 <CmGetNext(Reghive_Tag*, int)>
c0013963:	83 c4 10             	add    esp,0x10
c0013966:	89 c3                	mov    ebx,eax
c0013968:	e9 74 ff ff ff       	jmp    c00138e1 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c001396d:	83 c4 5c             	add    esp,0x5c
c0013970:	5b                   	pop    ebx
c0013971:	5e                   	pop    esi
c0013972:	5f                   	pop    edi
c0013973:	5d                   	pop    ebp
c0013974:	c3                   	ret    

c0013975 <CmSplitFinalSlashInPlace(char*)>:
c0013975:	53                   	push   ebx
c0013976:	83 ec 14             	sub    esp,0x14
c0013979:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001397d:	53                   	push   ebx
c001397e:	e8 ed cb fe ff       	call   c0000570 <strlen>
c0013983:	83 c4 10             	add    esp,0x10
c0013986:	48                   	dec    eax
c0013987:	85 c0                	test   eax,eax
c0013989:	74 15                	je     c00139a0 <CmSplitFinalSlashInPlace(char*)+0x2b>
c001398b:	8d 14 03             	lea    edx,[ebx+eax*1]
c001398e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013992:	75 09                	jne    c001399d <CmSplitFinalSlashInPlace(char*)+0x28>
c0013994:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013997:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001399b:	eb 05                	jmp    c00139a2 <CmSplitFinalSlashInPlace(char*)+0x2d>
c001399d:	48                   	dec    eax
c001399e:	eb e7                	jmp    c0013987 <CmSplitFinalSlashInPlace(char*)+0x12>
c00139a0:	31 c0                	xor    eax,eax
c00139a2:	83 c4 08             	add    esp,0x8
c00139a5:	5b                   	pop    ebx
c00139a6:	c3                   	ret    

c00139a7 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00139a7:	55                   	push   ebp
c00139a8:	57                   	push   edi
c00139a9:	56                   	push   esi
c00139aa:	53                   	push   ebx
c00139ab:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00139b1:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00139b8:	8a 13                	mov    dl,BYTE PTR [ebx]
c00139ba:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00139bd:	80 fa 40             	cmp    dl,0x40
c00139c0:	75 1c                	jne    c00139de <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c00139c2:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c00139c5:	85 c9                	test   ecx,ecx
c00139c7:	0f 84 09 01 00 00    	je     c0013ad6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00139cd:	8d 43 01             	lea    eax,[ebx+0x1]
c00139d0:	83 f9 3a             	cmp    ecx,0x3a
c00139d3:	74 04                	je     c00139d9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c00139d5:	89 c3                	mov    ebx,eax
c00139d7:	eb e9                	jmp    c00139c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00139d9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00139dc:	89 c3                	mov    ebx,eax
c00139de:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00139e2:	50                   	push   eax
c00139e3:	6a 40                	push   0x40
c00139e5:	6a 00                	push   0x0
c00139e7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00139eb:	50                   	push   eax
c00139ec:	e8 ff ca fe ff       	call   c00004f0 <memset>
c00139f1:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00139f8:	31 c0                	xor    eax,eax
c00139fa:	83 c4 10             	add    esp,0x10
c00139fd:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0013a02:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013a05:	89 d1                	mov    ecx,edx
c0013a07:	85 d2                	test   edx,edx
c0013a09:	0f 84 c7 00 00 00    	je     c0013ad6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a0f:	3d c7 00 00 00       	cmp    eax,0xc7
c0013a14:	0f 8f bc 00 00 00    	jg     c0013ad6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a1a:	83 fa 0a             	cmp    edx,0xa
c0013a1d:	0f 85 a4 00 00 00    	jne    c0013ac7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0013a23:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013a28:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013a2d:	89 c8                	mov    eax,ecx
c0013a2f:	a8 df                	test   al,0xdf
c0013a31:	0f 94 c2             	sete   dl
c0013a34:	83 f9 23             	cmp    ecx,0x23
c0013a37:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013a3c:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0013a40:	80 e2 01             	and    dl,0x1
c0013a43:	75 4a                	jne    c0013a8f <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013a45:	83 e8 09             	sub    eax,0x9
c0013a48:	3c 01                	cmp    al,0x1
c0013a4a:	76 43                	jbe    c0013a8f <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013a4c:	83 f9 5b             	cmp    ecx,0x5b
c0013a4f:	75 42                	jne    c0013a93 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0013a51:	83 fe 40             	cmp    esi,0x40
c0013a54:	75 39                	jne    c0013a8f <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013a56:	83 ec 0c             	sub    esp,0xc
c0013a59:	8d 54 24 65          	lea    edx,[esp+0x65]
c0013a5d:	52                   	push   edx
c0013a5e:	e8 0d cb fe ff       	call   c0000570 <strlen>
c0013a63:	83 c4 10             	add    esp,0x10
c0013a66:	83 f8 3f             	cmp    eax,0x3f
c0013a69:	77 6b                	ja     c0013ad6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a6b:	50                   	push   eax
c0013a6c:	50                   	push   eax
c0013a6d:	8d 54 24 61          	lea    edx,[esp+0x61]
c0013a71:	52                   	push   edx
c0013a72:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013a76:	52                   	push   edx
c0013a77:	e8 c4 cb fe ff       	call   c0000640 <strcpy>
c0013a7c:	58                   	pop    eax
c0013a7d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013a81:	52                   	push   edx
c0013a82:	e8 e9 ca fe ff       	call   c0000570 <strlen>
c0013a87:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013a8c:	83 c4 10             	add    esp,0x10
c0013a8f:	31 d2                	xor    edx,edx
c0013a91:	eb 3b                	jmp    c0013ace <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0013a93:	83 fe 40             	cmp    esi,0x40
c0013a96:	74 06                	je     c0013a9e <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0013a98:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013a9c:	eb 20                	jmp    c0013abe <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0013a9e:	50                   	push   eax
c0013a9f:	50                   	push   eax
c0013aa0:	55                   	push   ebp
c0013aa1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013aa5:	50                   	push   eax
c0013aa6:	e8 a5 cc fe ff       	call   c0000750 <strcmp>
c0013aab:	83 c4 10             	add    esp,0x10
c0013aae:	85 c0                	test   eax,eax
c0013ab0:	75 dd                	jne    c0013a8f <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013ab2:	eb e4                	jmp    c0013a98 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013ab4:	8d 50 01             	lea    edx,[eax+0x1]
c0013ab7:	83 f9 3d             	cmp    ecx,0x3d
c0013aba:	74 1e                	je     c0013ada <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0013abc:	89 d0                	mov    eax,edx
c0013abe:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013ac1:	85 c9                	test   ecx,ecx
c0013ac3:	75 ef                	jne    c0013ab4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0013ac5:	eb 0f                	jmp    c0013ad6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013ac7:	8d 50 01             	lea    edx,[eax+0x1]
c0013aca:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013ace:	47                   	inc    edi
c0013acf:	89 d0                	mov    eax,edx
c0013ad1:	e9 2c ff ff ff       	jmp    c0013a02 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0013ad6:	31 c0                	xor    eax,eax
c0013ad8:	eb 33                	jmp    c0013b0d <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0013ada:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013ade:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013ae1:	50                   	push   eax
c0013ae2:	50                   	push   eax
c0013ae3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013ae7:	50                   	push   eax
c0013ae8:	53                   	push   ebx
c0013ae9:	e8 62 cc fe ff       	call   c0000750 <strcmp>
c0013aee:	83 c4 10             	add    esp,0x10
c0013af1:	85 c0                	test   eax,eax
c0013af3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013af7:	75 96                	jne    c0013a8f <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013af9:	51                   	push   ecx
c0013afa:	51                   	push   ecx
c0013afb:	52                   	push   edx
c0013afc:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013b03:	e8 38 cb fe ff       	call   c0000640 <strcpy>
c0013b08:	83 c4 10             	add    esp,0x10
c0013b0b:	b0 01                	mov    al,0x1
c0013b0d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013b13:	5b                   	pop    ebx
c0013b14:	5e                   	pop    esi
c0013b15:	5f                   	pop    edi
c0013b16:	5d                   	pop    ebp
c0013b17:	c3                   	ret    

c0013b18 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013b18:	57                   	push   edi
c0013b19:	56                   	push   esi
c0013b1a:	53                   	push   ebx
c0013b1b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013b21:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013b28:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013b2f:	53                   	push   ebx
c0013b30:	e8 3b ca fe ff       	call   c0000570 <strlen>
c0013b35:	89 34 24             	mov    DWORD PTR [esp],esi
c0013b38:	89 c7                	mov    edi,eax
c0013b3a:	e8 31 ca fe ff       	call   c0000570 <strlen>
c0013b3f:	83 c4 10             	add    esp,0x10
c0013b42:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013b46:	3d ff 00 00 00       	cmp    eax,0xff
c0013b4b:	0f 87 d3 00 00 00    	ja     c0013c24 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013b51:	57                   	push   edi
c0013b52:	57                   	push   edi
c0013b53:	56                   	push   esi
c0013b54:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013b58:	56                   	push   esi
c0013b59:	e8 e2 ca fe ff       	call   c0000640 <strcpy>
c0013b5e:	58                   	pop    eax
c0013b5f:	5a                   	pop    edx
c0013b60:	68 ff 28 02 c0       	push   0xc00228ff
c0013b65:	56                   	push   esi
c0013b66:	e8 d5 cc fe ff       	call   c0000840 <strcat>
c0013b6b:	59                   	pop    ecx
c0013b6c:	5f                   	pop    edi
c0013b6d:	53                   	push   ebx
c0013b6e:	56                   	push   esi
c0013b6f:	e8 cc cc fe ff       	call   c0000840 <strcat>
c0013b74:	58                   	pop    eax
c0013b75:	5a                   	pop    edx
c0013b76:	68 ab 25 02 c0       	push   0xc00225ab
c0013b7b:	56                   	push   esi
c0013b7c:	e8 bf cc fe ff       	call   c0000840 <strcat>
c0013b81:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013b88:	e8 29 3f ff ff       	call   c0007ab6 <malloc>
c0013b8d:	83 c4 0c             	add    esp,0xc
c0013b90:	89 c3                	mov    ebx,eax
c0013b92:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013b98:	56                   	push   esi
c0013b99:	50                   	push   eax
c0013b9a:	e8 a9 7f ff ff       	call   c000bb48 <File::File(char const*, Process*)>
c0013b9f:	83 c4 10             	add    esp,0x10
c0013ba2:	85 db                	test   ebx,ebx
c0013ba4:	74 7e                	je     c0013c24 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013ba6:	51                   	push   ecx
c0013ba7:	51                   	push   ecx
c0013ba8:	6a 01                	push   0x1
c0013baa:	53                   	push   ebx
c0013bab:	e8 b6 7f ff ff       	call   c000bb66 <File::open(FileOpenMode)>
c0013bb0:	83 c4 10             	add    esp,0x10
c0013bb3:	85 c0                	test   eax,eax
c0013bb5:	74 08                	je     c0013bbf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013bb7:	83 ec 0c             	sub    esp,0xc
c0013bba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bbc:	53                   	push   ebx
c0013bbd:	eb 5f                	jmp    c0013c1e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013bbf:	52                   	push   edx
c0013bc0:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013bc4:	50                   	push   eax
c0013bc5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013bc9:	50                   	push   eax
c0013bca:	53                   	push   ebx
c0013bcb:	e8 98 82 ff ff       	call   c000be68 <File::stat(unsigned long long*, bool*)>
c0013bd0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013bd4:	83 c4 10             	add    esp,0x10
c0013bd7:	89 c1                	mov    ecx,eax
c0013bd9:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013bdd:	74 31                	je     c0013c10 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013bdf:	83 ec 0c             	sub    esp,0xc
c0013be2:	50                   	push   eax
c0013be3:	e8 ce 3e ff ff       	call   c0007ab6 <malloc>
c0013be8:	89 c6                	mov    esi,eax
c0013bea:	58                   	pop    eax
c0013beb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bed:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013bf1:	52                   	push   edx
c0013bf2:	56                   	push   esi
c0013bf3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013bf7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013bfb:	53                   	push   ebx
c0013bfc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bff:	83 c4 20             	add    esp,0x20
c0013c02:	85 c0                	test   eax,eax
c0013c04:	75 0a                	jne    c0013c10 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013c06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c0a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013c0e:	74 18                	je     c0013c28 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013c10:	83 ec 0c             	sub    esp,0xc
c0013c13:	53                   	push   ebx
c0013c14:	e8 ab 7f ff ff       	call   c000bbc4 <File::close()>
c0013c19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c1e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c21:	83 c4 10             	add    esp,0x10
c0013c24:	31 c0                	xor    eax,eax
c0013c26:	eb 3b                	jmp    c0013c63 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013c28:	83 ec 0c             	sub    esp,0xc
c0013c2b:	53                   	push   ebx
c0013c2c:	e8 93 7f ff ff       	call   c000bbc4 <File::close()>
c0013c31:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c36:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c39:	83 c4 0c             	add    esp,0xc
c0013c3c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c43:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c4a:	56                   	push   esi
c0013c4b:	e8 57 fd ff ff       	call   c00139a7 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013c50:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c53:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013c57:	e8 6a 3e ff ff       	call   c0007ac6 <free>
c0013c5c:	83 c4 10             	add    esp,0x10
c0013c5f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013c63:	81 c4 20 01 00 00    	add    esp,0x120
c0013c69:	5b                   	pop    ebx
c0013c6a:	5e                   	pop    esi
c0013c6b:	5f                   	pop    edi
c0013c6c:	c3                   	ret    

c0013c6d <Reg::getLine(char*, char*, char*)>:
c0013c6d:	57                   	push   edi
c0013c6e:	56                   	push   esi
c0013c6f:	53                   	push   ebx
c0013c70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c74:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c78:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013c7c:	57                   	push   edi
c0013c7d:	56                   	push   esi
c0013c7e:	53                   	push   ebx
c0013c7f:	68 b0 25 02 c0       	push   0xc00225b0
c0013c84:	e8 8f fe ff ff       	call   c0013b18 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013c89:	83 c4 10             	add    esp,0x10
c0013c8c:	84 c0                	test   al,al
c0013c8e:	75 10                	jne    c0013ca0 <Reg::getLine(char*, char*, char*)+0x33>
c0013c90:	57                   	push   edi
c0013c91:	56                   	push   esi
c0013c92:	53                   	push   ebx
c0013c93:	68 d5 25 02 c0       	push   0xc00225d5
c0013c98:	e8 7b fe ff ff       	call   c0013b18 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013c9d:	83 c4 10             	add    esp,0x10
c0013ca0:	5b                   	pop    ebx
c0013ca1:	5e                   	pop    esi
c0013ca2:	5f                   	pop    edi
c0013ca3:	c3                   	ret    

c0013ca4 <Reg::readInt(char*, char*, int*)>:
c0013ca4:	55                   	push   ebp
c0013ca5:	57                   	push   edi
c0013ca6:	56                   	push   esi
c0013ca7:	53                   	push   ebx
c0013ca8:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013cae:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013cb2:	55                   	push   ebp
c0013cb3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013cba:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013cc1:	e8 a7 ff ff ff       	call   c0013c6d <Reg::getLine(char*, char*, char*)>
c0013cc6:	83 c4 10             	add    esp,0x10
c0013cc9:	84 c0                	test   al,al
c0013ccb:	0f 84 b6 00 00 00    	je     c0013d87 <Reg::readInt(char*, char*, int*)+0xe3>
c0013cd1:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013cd6:	83 fa 2b             	cmp    edx,0x2b
c0013cd9:	74 0c                	je     c0013ce7 <Reg::readInt(char*, char*, int*)+0x43>
c0013cdb:	83 fa 2d             	cmp    edx,0x2d
c0013cde:	75 0e                	jne    c0013cee <Reg::readInt(char*, char*, int*)+0x4a>
c0013ce0:	ba 01 00 00 00       	mov    edx,0x1
c0013ce5:	eb 0b                	jmp    c0013cf2 <Reg::readInt(char*, char*, int*)+0x4e>
c0013ce7:	ba 01 00 00 00       	mov    edx,0x1
c0013cec:	eb 02                	jmp    c0013cf0 <Reg::readInt(char*, char*, int*)+0x4c>
c0013cee:	31 d2                	xor    edx,edx
c0013cf0:	31 c0                	xor    eax,eax
c0013cf2:	be 0a 00 00 00       	mov    esi,0xa
c0013cf7:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013cfc:	75 21                	jne    c0013d1f <Reg::readInt(char*, char*, int*)+0x7b>
c0013cfe:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013d03:	83 f9 78             	cmp    ecx,0x78
c0013d06:	75 0a                	jne    c0013d12 <Reg::readInt(char*, char*, int*)+0x6e>
c0013d08:	83 c2 02             	add    edx,0x2
c0013d0b:	be 10 00 00 00       	mov    esi,0x10
c0013d10:	eb 0d                	jmp    c0013d1f <Reg::readInt(char*, char*, int*)+0x7b>
c0013d12:	83 f9 62             	cmp    ecx,0x62
c0013d15:	75 08                	jne    c0013d1f <Reg::readInt(char*, char*, int*)+0x7b>
c0013d17:	83 c2 02             	add    edx,0x2
c0013d1a:	be 02 00 00 00       	mov    esi,0x2
c0013d1f:	01 d5                	add    ebp,edx
c0013d21:	31 d2                	xor    edx,edx
c0013d23:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013d27:	83 f9 0d             	cmp    ecx,0xd
c0013d2a:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013d2e:	0f 94 c3             	sete   bl
c0013d31:	85 c9                	test   ecx,ecx
c0013d33:	89 df                	mov    edi,ebx
c0013d35:	0f 94 c3             	sete   bl
c0013d38:	09 df                	or     edi,ebx
c0013d3a:	89 fb                	mov    ebx,edi
c0013d3c:	83 e7 01             	and    edi,0x1
c0013d3f:	75 35                	jne    c0013d76 <Reg::readInt(char*, char*, int*)+0xd2>
c0013d41:	0f af d6             	imul   edx,esi
c0013d44:	83 fe 10             	cmp    esi,0x10
c0013d47:	75 26                	jne    c0013d6f <Reg::readInt(char*, char*, int*)+0xcb>
c0013d49:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013d4d:	83 ef 41             	sub    edi,0x41
c0013d50:	89 fb                	mov    ebx,edi
c0013d52:	80 fb 05             	cmp    bl,0x5
c0013d55:	77 06                	ja     c0013d5d <Reg::readInt(char*, char*, int*)+0xb9>
c0013d57:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013d5b:	eb 16                	jmp    c0013d73 <Reg::readInt(char*, char*, int*)+0xcf>
c0013d5d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013d61:	83 eb 61             	sub    ebx,0x61
c0013d64:	80 fb 05             	cmp    bl,0x5
c0013d67:	77 06                	ja     c0013d6f <Reg::readInt(char*, char*, int*)+0xcb>
c0013d69:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013d6d:	eb 04                	jmp    c0013d73 <Reg::readInt(char*, char*, int*)+0xcf>
c0013d6f:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013d73:	45                   	inc    ebp
c0013d74:	eb ad                	jmp    c0013d23 <Reg::readInt(char*, char*, int*)+0x7f>
c0013d76:	84 c0                	test   al,al
c0013d78:	74 02                	je     c0013d7c <Reg::readInt(char*, char*, int*)+0xd8>
c0013d7a:	f7 da                	neg    edx
c0013d7c:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013d83:	89 10                	mov    DWORD PTR [eax],edx
c0013d85:	88 d8                	mov    al,bl
c0013d87:	81 c4 ec 00 00 00    	add    esp,0xec
c0013d8d:	5b                   	pop    ebx
c0013d8e:	5e                   	pop    esi
c0013d8f:	5f                   	pop    edi
c0013d90:	5d                   	pop    ebp
c0013d91:	c3                   	ret    

c0013d92 <Reg::readString(char*, char*, char*, int)>:
c0013d92:	57                   	push   edi
c0013d93:	56                   	push   esi
c0013d94:	53                   	push   ebx
c0013d95:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013d9b:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013da2:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013da6:	57                   	push   edi
c0013da7:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013dae:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013db5:	e8 b3 fe ff ff       	call   c0013c6d <Reg::getLine(char*, char*, char*)>
c0013dba:	83 c4 10             	add    esp,0x10
c0013dbd:	89 c6                	mov    esi,eax
c0013dbf:	84 c0                	test   al,al
c0013dc1:	74 44                	je     c0013e07 <Reg::readString(char*, char*, char*, int)+0x75>
c0013dc3:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013dca:	31 c0                	xor    eax,eax
c0013dcc:	4a                   	dec    edx
c0013dcd:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013dd0:	84 c9                	test   cl,cl
c0013dd2:	74 0f                	je     c0013de3 <Reg::readString(char*, char*, char*, int)+0x51>
c0013dd4:	39 c2                	cmp    edx,eax
c0013dd6:	7e 0b                	jle    c0013de3 <Reg::readString(char*, char*, char*, int)+0x51>
c0013dd8:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013ddb:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013de0:	40                   	inc    eax
c0013de1:	eb ea                	jmp    c0013dcd <Reg::readString(char*, char*, char*, int)+0x3b>
c0013de3:	83 ec 0c             	sub    esp,0xc
c0013de6:	53                   	push   ebx
c0013de7:	e8 84 c7 fe ff       	call   c0000570 <strlen>
c0013dec:	83 c4 10             	add    esp,0x10
c0013def:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013df4:	75 11                	jne    c0013e07 <Reg::readString(char*, char*, char*, int)+0x75>
c0013df6:	83 ec 0c             	sub    esp,0xc
c0013df9:	53                   	push   ebx
c0013dfa:	e8 71 c7 fe ff       	call   c0000570 <strlen>
c0013dff:	83 c4 10             	add    esp,0x10
c0013e02:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013e07:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013e0d:	89 f0                	mov    eax,esi
c0013e0f:	5b                   	pop    ebx
c0013e10:	5e                   	pop    esi
c0013e11:	5f                   	pop    edi
c0013e12:	c3                   	ret    

c0013e13 <Reg::readBool(char*, char*, bool*)>:
c0013e13:	83 ec 20             	sub    esp,0x20
c0013e16:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e1a:	50                   	push   eax
c0013e1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e23:	e8 7c fe ff ff       	call   c0013ca4 <Reg::readInt(char*, char*, int*)>
c0013e28:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013e2d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013e31:	0f 95 02             	setne  BYTE PTR [edx]
c0013e34:	83 c4 2c             	add    esp,0x2c
c0013e37:	c3                   	ret    

c0013e38 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013e38:	53                   	push   ebx
c0013e39:	83 ec 1c             	sub    esp,0x1c
c0013e3c:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013e40:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013e44:	50                   	push   eax
c0013e45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e4d:	e8 c1 ff ff ff       	call   c0013e13 <Reg::readBool(char*, char*, bool*)>
c0013e52:	83 c4 10             	add    esp,0x10
c0013e55:	84 c0                	test   al,al
c0013e57:	74 04                	je     c0013e5d <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013e59:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013e5d:	88 d8                	mov    al,bl
c0013e5f:	83 c4 18             	add    esp,0x18
c0013e62:	5b                   	pop    ebx
c0013e63:	c3                   	ret    

c0013e64 <Reg::readIntWithDefault(char*, char*, int)>:
c0013e64:	53                   	push   ebx
c0013e65:	83 ec 1c             	sub    esp,0x1c
c0013e68:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013e6c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e70:	50                   	push   eax
c0013e71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e79:	e8 26 fe ff ff       	call   c0013ca4 <Reg::readInt(char*, char*, int*)>
c0013e7e:	83 c4 10             	add    esp,0x10
c0013e81:	84 c0                	test   al,al
c0013e83:	74 04                	je     c0013e89 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013e85:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013e89:	89 d8                	mov    eax,ebx
c0013e8b:	83 c4 18             	add    esp,0x18
c0013e8e:	5b                   	pop    ebx
c0013e8f:	c3                   	ret    

c0013e90 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013e90:	57                   	push   edi
c0013e91:	56                   	push   esi
c0013e92:	56                   	push   esi
c0013e93:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e97:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013e9b:	56                   	push   esi
c0013e9c:	57                   	push   edi
c0013e9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ea1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ea5:	e8 e8 fe ff ff       	call   c0013d92 <Reg::readString(char*, char*, char*, int)>
c0013eaa:	83 c4 10             	add    esp,0x10
c0013ead:	84 c0                	test   al,al
c0013eaf:	75 1a                	jne    c0013ecb <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013eb1:	51                   	push   ecx
c0013eb2:	56                   	push   esi
c0013eb3:	6a 00                	push   0x0
c0013eb5:	57                   	push   edi
c0013eb6:	e8 35 c6 fe ff       	call   c00004f0 <memset>
c0013ebb:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013ebe:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013ec2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ec4:	83 c4 10             	add    esp,0x10
c0013ec7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013ecb:	89 f8                	mov    eax,edi
c0013ecd:	5a                   	pop    edx
c0013ece:	5e                   	pop    esi
c0013ecf:	5f                   	pop    edi
c0013ed0:	c3                   	ret    

c0013ed1 <SysEject(regs*)>:
c0013ed1:	83 ec 0c             	sub    esp,0xc
c0013ed4:	83 ca ff             	or     edx,0xffffffff
c0013ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013edb:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013ede:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013ee3:	83 e9 41             	sub    ecx,0x41
c0013ee6:	83 f9 19             	cmp    ecx,0x19
c0013ee9:	77 18                	ja     c0013f03 <SysEject(regs*)+0x32>
c0013eeb:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013ef2:	85 c9                	test   ecx,ecx
c0013ef4:	74 0d                	je     c0013f03 <SysEject(regs*)+0x32>
c0013ef6:	83 ec 0c             	sub    esp,0xc
c0013ef9:	51                   	push   ecx
c0013efa:	e8 3b 9e ff ff       	call   c000dd3a <LogicalDisk::eject()>
c0013eff:	83 c4 10             	add    esp,0x10
c0013f02:	99                   	cdq    
c0013f03:	83 c4 0c             	add    esp,0xc
c0013f06:	c3                   	ret    

c0013f07 <SysExit(regs*)>:
c0013f07:	83 ec 18             	sub    esp,0x18
c0013f0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f0e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f11:	e8 46 2b 00 00       	call   c0016a5c <terminateTask(int)>
c0013f16:	83 c8 ff             	or     eax,0xffffffff
c0013f19:	83 c4 1c             	add    esp,0x1c
c0013f1c:	89 c2                	mov    edx,eax
c0013f1e:	c3                   	ret    

c0013f1f <SysGetCwd(regs*)>:
c0013f1f:	83 ec 10             	sub    esp,0x10
c0013f22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f26:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013f29:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f31:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f34:	e8 c3 78 ff ff       	call   c000b7fc <Fs::getcwd(Process*, char*, int)>
c0013f39:	83 c4 1c             	add    esp,0x1c
c0013f3c:	99                   	cdq    
c0013f3d:	c3                   	ret    

c0013f3e <SysGetPID(regs*)>:
c0013f3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f43:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f46:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f48:	99                   	cdq    
c0013f49:	c3                   	ret    

c0013f4a <SysGetRAMData(regs*)>:
c0013f4a:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013f50:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013f5a:	99                   	cdq    
c0013f5b:	f7 f9                	idiv   ecx
c0013f5d:	c1 e0 18             	shl    eax,0x18
c0013f60:	09 c8                	or     eax,ecx
c0013f62:	99                   	cdq    
c0013f63:	c3                   	ret    

c0013f64 <SysGetVGAPtr(regs*)>:
c0013f64:	55                   	push   ebp
c0013f65:	57                   	push   edi
c0013f66:	56                   	push   esi
c0013f67:	53                   	push   ebx
c0013f68:	83 ec 18             	sub    esp,0x18
c0013f6b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013f6f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013f72:	e8 b1 25 00 00       	call   c0016528 <Thr::processFromPID(int)>
c0013f77:	83 c4 10             	add    esp,0x10
c0013f7a:	89 c1                	mov    ecx,eax
c0013f7c:	b8 01 00 00 00       	mov    eax,0x1
c0013f81:	85 c9                	test   ecx,ecx
c0013f83:	74 57                	je     c0013fdc <SysGetVGAPtr(regs*)+0x78>
c0013f85:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013f8b:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013f8f:	74 0c                	je     c0013f9d <SysGetVGAPtr(regs*)+0x39>
c0013f91:	83 ec 0c             	sub    esp,0xc
c0013f94:	55                   	push   ebp
c0013f95:	e8 bf 47 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013f9a:	83 c4 10             	add    esp,0x10
c0013f9d:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013fa0:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013fa3:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013fa8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013faa:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013fad:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fb0:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013fb6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fb9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013fbc:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013fc2:	50                   	push   eax
c0013fc3:	50                   	push   eax
c0013fc4:	68 f0 25 02 c0       	push   0xc00225f0
c0013fc9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fcc:	05 a8 0f 00 00       	add    eax,0xfa8
c0013fd1:	50                   	push   eax
c0013fd2:	e8 69 c6 fe ff       	call   c0000640 <strcpy>
c0013fd7:	83 c4 10             	add    esp,0x10
c0013fda:	31 c0                	xor    eax,eax
c0013fdc:	83 c4 0c             	add    esp,0xc
c0013fdf:	31 d2                	xor    edx,edx
c0013fe1:	5b                   	pop    ebx
c0013fe2:	5e                   	pop    esi
c0013fe3:	5f                   	pop    edi
c0013fe4:	5d                   	pop    ebp
c0013fe5:	c3                   	ret    
c0013fe6:	66 90                	xchg   ax,ax

c0013fe8 <SysKill(regs*)>:
c0013fe8:	53                   	push   ebx
c0013fe9:	83 ec 08             	sub    esp,0x8
c0013fec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ff0:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013ff4:	75 16                	jne    c001400c <SysKill(regs*)+0x24>
c0013ff6:	83 ec 0c             	sub    esp,0xc
c0013ff9:	68 fa 25 02 c0       	push   0xc00225fa
c0013ffe:	e8 18 d6 ff ff       	call   c001161b <KePanic(char const*)>
c0014003:	83 c4 10             	add    esp,0x10
c0014006:	e9 89 00 00 00       	jmp    c0014094 <SysKill(regs*)+0xac>
c001400b:	90                   	nop
c001400c:	83 ec 0c             	sub    esp,0xc
c001400f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014014:	e8 03 bd 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014019:	8d 76 00             	lea    esi,[esi+0x0]
c001401c:	83 c4 10             	add    esp,0x10
c001401f:	85 c0                	test   eax,eax
c0014021:	74 19                	je     c001403c <SysKill(regs*)+0x54>
c0014023:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0014026:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014029:	39 0a                	cmp    DWORD PTR [edx],ecx
c001402b:	74 33                	je     c0014060 <SysKill(regs*)+0x78>
c001402d:	52                   	push   edx
c001402e:	52                   	push   edx
c001402f:	50                   	push   eax
c0014030:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014035:	e8 02 c0 00 00       	call   c002003c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001403a:	eb e0                	jmp    c001401c <SysKill(regs*)+0x34>
c001403c:	83 ec 0c             	sub    esp,0xc
c001403f:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014044:	e8 d3 bc 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014049:	8d 76 00             	lea    esi,[esi+0x0]
c001404c:	83 c4 10             	add    esp,0x10
c001404f:	85 c0                	test   eax,eax
c0014051:	74 41                	je     c0014094 <SysKill(regs*)+0xac>
c0014053:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0014056:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014059:	39 0a                	cmp    DWORD PTR [edx],ecx
c001405b:	75 27                	jne    c0014084 <SysKill(regs*)+0x9c>
c001405d:	8d 76 00             	lea    esi,[esi+0x0]
c0014060:	51                   	push   ecx
c0014061:	51                   	push   ecx
c0014062:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014065:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001406a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001406d:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0014073:	e8 46 da ff ff       	call   c0011abe <KeRaiseSignal(SigHandlerBlock*, int)>
c0014078:	83 c4 10             	add    esp,0x10
c001407b:	31 c0                	xor    eax,eax
c001407d:	31 d2                	xor    edx,edx
c001407f:	eb 1b                	jmp    c001409c <SysKill(regs*)+0xb4>
c0014081:	8d 76 00             	lea    esi,[esi+0x0]
c0014084:	52                   	push   edx
c0014085:	52                   	push   edx
c0014086:	50                   	push   eax
c0014087:	68 d8 c6 02 c0       	push   0xc002c6d8
c001408c:	e8 ab bf 00 00       	call   c002003c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014091:	eb b9                	jmp    c001404c <SysKill(regs*)+0x64>
c0014093:	90                   	nop
c0014094:	83 c8 ff             	or     eax,0xffffffff
c0014097:	89 c2                	mov    edx,eax
c0014099:	8d 76 00             	lea    esi,[esi+0x0]
c001409c:	83 c4 08             	add    esp,0x8
c001409f:	5b                   	pop    ebx
c00140a0:	c3                   	ret    

c00140a1 <SysLoadDLL(regs*)>:
c00140a1:	56                   	push   esi
c00140a2:	53                   	push   ebx
c00140a3:	31 d2                	xor    edx,edx
c00140a5:	51                   	push   ecx
c00140a6:	b8 01 00 00 00       	mov    eax,0x1
c00140ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140af:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00140b3:	0f 84 8c 00 00 00    	je     c0014145 <SysLoadDLL(regs*)+0xa4>
c00140b9:	83 ec 0c             	sub    esp,0xc
c00140bc:	68 14 01 00 00       	push   0x114
c00140c1:	e8 f0 39 ff ff       	call   c0007ab6 <malloc>
c00140c6:	83 c4 0c             	add    esp,0xc
c00140c9:	89 c3                	mov    ebx,eax
c00140cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140d0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00140d3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00140d6:	53                   	push   ebx
c00140d7:	e8 6c 7a ff ff       	call   c000bb48 <File::File(char const*, Process*)>
c00140dc:	83 c4 10             	add    esp,0x10
c00140df:	31 d2                	xor    edx,edx
c00140e1:	b8 02 00 00 00       	mov    eax,0x2
c00140e6:	85 db                	test   ebx,ebx
c00140e8:	74 5b                	je     c0014145 <SysLoadDLL(regs*)+0xa4>
c00140ea:	83 ec 0c             	sub    esp,0xc
c00140ed:	53                   	push   ebx
c00140ee:	e8 37 7d ff ff       	call   c000be2a <File::exists()>
c00140f3:	83 c4 10             	add    esp,0x10
c00140f6:	84 c0                	test   al,al
c00140f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140fa:	75 11                	jne    c001410d <SysLoadDLL(regs*)+0x6c>
c00140fc:	83 ec 0c             	sub    esp,0xc
c00140ff:	53                   	push   ebx
c0014100:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014103:	83 c4 10             	add    esp,0x10
c0014106:	b8 03 00 00 00       	mov    eax,0x3
c001410b:	eb 36                	jmp    c0014143 <SysLoadDLL(regs*)+0xa2>
c001410d:	83 ec 0c             	sub    esp,0xc
c0014110:	53                   	push   ebx
c0014111:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014114:	58                   	pop    eax
c0014115:	5a                   	pop    edx
c0014116:	6a 00                	push   0x0
c0014118:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001411b:	e8 3b 15 00 00       	call   c001565b <Thr::loadDLL(char const*, bool)>
c0014120:	83 c4 10             	add    esp,0x10
c0014123:	89 c1                	mov    ecx,eax
c0014125:	31 d2                	xor    edx,edx
c0014127:	b8 04 00 00 00       	mov    eax,0x4
c001412c:	85 c9                	test   ecx,ecx
c001412e:	74 15                	je     c0014145 <SysLoadDLL(regs*)+0xa4>
c0014130:	53                   	push   ebx
c0014131:	53                   	push   ebx
c0014132:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0014138:	51                   	push   ecx
c0014139:	e8 4e 17 00 00       	call   c001588c <Thr::executeDLL(unsigned long, void*)>
c001413e:	83 c4 10             	add    esp,0x10
c0014141:	31 c0                	xor    eax,eax
c0014143:	31 d2                	xor    edx,edx
c0014145:	59                   	pop    ecx
c0014146:	5b                   	pop    ebx
c0014147:	5e                   	pop    esi
c0014148:	c3                   	ret    

c0014149 <SysRead(regs*)>:
c0014149:	57                   	push   edi
c001414a:	56                   	push   esi
c001414b:	53                   	push   ebx
c001414c:	83 ec 10             	sub    esp,0x10
c001414f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014153:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014156:	83 f8 02             	cmp    eax,0x2
c0014159:	77 10                	ja     c001416b <SysRead(regs*)+0x22>
c001415b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014160:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014163:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014169:	eb 0e                	jmp    c0014179 <SysRead(regs*)+0x30>
c001416b:	83 ec 0c             	sub    esp,0xc
c001416e:	50                   	push   eax
c001416f:	e8 3f 53 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014174:	83 c4 10             	add    esp,0x10
c0014177:	89 c1                	mov    ecx,eax
c0014179:	83 c8 ff             	or     eax,0xffffffff
c001417c:	85 c9                	test   ecx,ecx
c001417e:	89 c2                	mov    edx,eax
c0014180:	74 28                	je     c00141aa <SysRead(regs*)+0x61>
c0014182:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001418a:	31 ff                	xor    edi,edi
c001418c:	83 ec 0c             	sub    esp,0xc
c001418f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014191:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014195:	52                   	push   edx
c0014196:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014199:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001419c:	57                   	push   edi
c001419d:	56                   	push   esi
c001419e:	51                   	push   ecx
c001419f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00141a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00141a6:	83 c4 20             	add    esp,0x20
c00141a9:	99                   	cdq    
c00141aa:	83 c4 10             	add    esp,0x10
c00141ad:	5b                   	pop    ebx
c00141ae:	5e                   	pop    esi
c00141af:	5f                   	pop    edi
c00141b0:	c3                   	ret    

c00141b1 <SysRegisterSignal(regs*)>:
c00141b1:	83 ec 18             	sub    esp,0x18
c00141b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141b8:	6a 00                	push   0x0
c00141ba:	6a 00                	push   0x0
c00141bc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00141bf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00141c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141c7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141ca:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00141d0:	e8 b3 d8 ff ff       	call   c0011a88 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00141d5:	83 c4 2c             	add    esp,0x2c
c00141d8:	99                   	cdq    
c00141d9:	c3                   	ret    

c00141da <SysRegistryGetTypeFromPath(regs*)>:
c00141da:	57                   	push   edi
c00141db:	56                   	push   esi
c00141dc:	53                   	push   ebx
c00141dd:	81 ec 38 01 00 00    	sub    esp,0x138
c00141e3:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00141ea:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141ed:	68 1b 26 02 c0       	push   0xc002261b
c00141f2:	e8 4e 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00141f7:	5a                   	pop    edx
c00141f8:	59                   	pop    ecx
c00141f9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141fc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00141ff:	e8 4d f6 ff ff       	call   c0013851 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014204:	5f                   	pop    edi
c0014205:	89 c6                	mov    esi,eax
c0014207:	5a                   	pop    edx
c0014208:	50                   	push   eax
c0014209:	68 3b 26 02 c0       	push   0xc002263b
c001420e:	e8 32 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014213:	83 c4 10             	add    esp,0x10
c0014216:	85 f6                	test   esi,esi
c0014218:	74 28                	je     c0014242 <SysRegistryGetTypeFromPath(regs*)+0x68>
c001421a:	50                   	push   eax
c001421b:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001421f:	57                   	push   edi
c0014220:	56                   	push   esi
c0014221:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014224:	e8 0c f2 ff ff       	call   c0013435 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014229:	83 c4 0c             	add    esp,0xc
c001422c:	89 c3                	mov    ebx,eax
c001422e:	57                   	push   edi
c001422f:	50                   	push   eax
c0014230:	68 43 26 02 c0       	push   0xc0022643
c0014235:	e8 0b 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001423a:	89 d8                	mov    eax,ebx
c001423c:	83 c4 10             	add    esp,0x10
c001423f:	99                   	cdq    
c0014240:	eb 05                	jmp    c0014247 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0014242:	83 c8 ff             	or     eax,0xffffffff
c0014245:	89 c2                	mov    edx,eax
c0014247:	81 c4 30 01 00 00    	add    esp,0x130
c001424d:	5b                   	pop    ebx
c001424e:	5e                   	pop    esi
c001424f:	5f                   	pop    edi
c0014250:	c3                   	ret    

c0014251 <SysRegistryReadExtent(regs*)>:
c0014251:	83 ec 1c             	sub    esp,0x1c
c0014254:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014258:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001425b:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001425e:	85 c0                	test   eax,eax
c0014260:	79 1f                	jns    c0014281 <SysRegistryReadExtent(regs*)+0x30>
c0014262:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014267:	52                   	push   edx
c0014268:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001426c:	52                   	push   edx
c001426d:	50                   	push   eax
c001426e:	51                   	push   ecx
c001426f:	e8 b3 f0 ff ff       	call   c0013327 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014274:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014278:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001427c:	83 c4 10             	add    esp,0x10
c001427f:	eb 14                	jmp    c0014295 <SysRegistryReadExtent(regs*)+0x44>
c0014281:	83 ec 04             	sub    esp,0x4
c0014284:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014287:	50                   	push   eax
c0014288:	51                   	push   ecx
c0014289:	e8 33 eb ff ff       	call   c0012dc1 <CmGetString(Reghive_Tag*, int, char*)>
c001428e:	83 c4 10             	add    esp,0x10
c0014291:	31 c0                	xor    eax,eax
c0014293:	31 d2                	xor    edx,edx
c0014295:	83 c4 1c             	add    esp,0x1c
c0014298:	c3                   	ret    

c0014299 <SysRegistryPathToExtentLookup(regs*)>:
c0014299:	53                   	push   ebx
c001429a:	83 ec 10             	sub    esp,0x10
c001429d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142a1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142a4:	68 59 26 02 c0       	push   0xc0022659
c00142a9:	e8 97 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00142ae:	58                   	pop    eax
c00142af:	5a                   	pop    edx
c00142b0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142b3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142b6:	e8 96 f5 ff ff       	call   c0013851 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00142bb:	83 c4 18             	add    esp,0x18
c00142be:	99                   	cdq    
c00142bf:	5b                   	pop    ebx
c00142c0:	c3                   	ret    

c00142c1 <SysRegistryEnterDirectory(regs*)>:
c00142c1:	53                   	push   ebx
c00142c2:	83 ec 10             	sub    esp,0x10
c00142c5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142c9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142cc:	68 7c 26 02 c0       	push   0xc002267c
c00142d1:	e8 6f 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00142d6:	58                   	pop    eax
c00142d7:	5a                   	pop    edx
c00142d8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142db:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142de:	e8 55 eb ff ff       	call   c0012e38 <CmEnterDirectory(Reghive_Tag*, int)>
c00142e3:	83 c4 18             	add    esp,0x18
c00142e6:	99                   	cdq    
c00142e7:	5b                   	pop    ebx
c00142e8:	c3                   	ret    

c00142e9 <SysRegistryGetNext(regs*)>:
c00142e9:	53                   	push   ebx
c00142ea:	83 ec 10             	sub    esp,0x10
c00142ed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142f1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142f4:	68 9a 26 02 c0       	push   0xc002269a
c00142f9:	e8 47 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00142fe:	58                   	pop    eax
c00142ff:	5a                   	pop    edx
c0014300:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014303:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014306:	e8 6c eb ff ff       	call   c0012e77 <CmGetNext(Reghive_Tag*, int)>
c001430b:	83 c4 18             	add    esp,0x18
c001430e:	99                   	cdq    
c001430f:	5b                   	pop    ebx
c0014310:	c3                   	ret    

c0014311 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014311:	57                   	push   edi
c0014312:	56                   	push   esi
c0014313:	53                   	push   ebx
c0014314:	81 ec 34 01 00 00    	sub    esp,0x134
c001431a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014321:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014325:	57                   	push   edi
c0014326:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014329:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001432c:	e8 04 f1 ff ff       	call   c0013435 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014331:	89 c3                	mov    ebx,eax
c0014333:	58                   	pop    eax
c0014334:	5a                   	pop    edx
c0014335:	57                   	push   edi
c0014336:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014339:	e8 02 c3 fe ff       	call   c0000640 <strcpy>
c001433e:	89 d8                	mov    eax,ebx
c0014340:	81 c4 40 01 00 00    	add    esp,0x140
c0014346:	99                   	cdq    
c0014347:	5b                   	pop    ebx
c0014348:	5e                   	pop    esi
c0014349:	5f                   	pop    edi
c001434a:	c3                   	ret    

c001434b <SysRegistryOpen(regs*)>:
c001434b:	83 ec 18             	sub    esp,0x18
c001434e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014352:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014355:	e8 f7 e8 ff ff       	call   c0012c51 <CmOpen(char const*)>
c001435a:	83 c4 1c             	add    esp,0x1c
c001435d:	99                   	cdq    
c001435e:	c3                   	ret    

c001435f <SysRegistryClose(regs*)>:
c001435f:	83 ec 18             	sub    esp,0x18
c0014362:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014366:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014369:	e8 01 ea ff ff       	call   c0012d6f <CmClose(Reghive_Tag*)>
c001436e:	31 c0                	xor    eax,eax
c0014370:	31 d2                	xor    edx,edx
c0014372:	83 c4 1c             	add    esp,0x1c
c0014375:	c3                   	ret    

c0014376 <SysSbrk(regs*)>:
c0014376:	56                   	push   esi
c0014377:	53                   	push   ebx
c0014378:	50                   	push   eax
c0014379:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001437e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014382:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014385:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014388:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001438e:	85 db                	test   ebx,ebx
c0014390:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014393:	74 02                	je     c0014397 <SysSbrk(regs*)+0x21>
c0014395:	79 06                	jns    c001439d <SysSbrk(regs*)+0x27>
c0014397:	89 f0                	mov    eax,esi
c0014399:	31 d2                	xor    edx,edx
c001439b:	eb 2a                	jmp    c00143c7 <SysSbrk(regs*)+0x51>
c001439d:	83 c8 ff             	or     eax,0xffffffff
c00143a0:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00143a6:	89 c2                	mov    edx,eax
c00143a8:	77 1d                	ja     c00143c7 <SysSbrk(regs*)+0x51>
c00143aa:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00143b0:	50                   	push   eax
c00143b1:	c1 ea 0c             	shr    edx,0xc
c00143b4:	68 07 0c 00 00       	push   0xc07
c00143b9:	52                   	push   edx
c00143ba:	51                   	push   ecx
c00143bb:	e8 64 5a ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c00143c0:	89 f0                	mov    eax,esi
c00143c2:	31 d2                	xor    edx,edx
c00143c4:	83 c4 10             	add    esp,0x10
c00143c7:	59                   	pop    ecx
c00143c8:	5b                   	pop    ebx
c00143c9:	5e                   	pop    esi
c00143ca:	c3                   	ret    

c00143cb <SysSetCwd(regs*)>:
c00143cb:	83 ec 14             	sub    esp,0x14
c00143ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143d2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00143d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143da:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00143dd:	e8 e7 7a ff ff       	call   c000bec9 <Fs::setcwd(Process*, char*)>
c00143e2:	83 c4 1c             	add    esp,0x1c
c00143e5:	99                   	cdq    
c00143e6:	c3                   	ret    

c00143e7 <SysSetTime(regs*)>:
c00143e7:	55                   	push   ebp
c00143e8:	31 c9                	xor    ecx,ecx
c00143ea:	57                   	push   edi
c00143eb:	bd 0c 00 00 00       	mov    ebp,0xc
c00143f0:	56                   	push   esi
c00143f1:	53                   	push   ebx
c00143f2:	31 db                	xor    ebx,ebx
c00143f4:	83 ec 10             	sub    esp,0x10
c00143f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00143fb:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00143fe:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014401:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0014404:	89 c2                	mov    edx,eax
c0014406:	81 ef 6c 07 00 00    	sub    edi,0x76c
c001440c:	83 e2 1f             	and    edx,0x1f
c001440f:	c1 e7 10             	shl    edi,0x10
c0014412:	42                   	inc    edx
c0014413:	c1 e8 05             	shr    eax,0x5
c0014416:	88 d1                	mov    cl,dl
c0014418:	31 d2                	xor    edx,edx
c001441a:	f7 f5                	div    ebp
c001441c:	89 dd                	mov    ebp,ebx
c001441e:	88 d5                	mov    ch,dl
c0014420:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0014426:	0f b7 c1             	movzx  eax,cx
c0014429:	31 d2                	xor    edx,edx
c001442b:	09 f8                	or     eax,edi
c001442d:	bf 3c 00 00 00       	mov    edi,0x3c
c0014432:	89 c1                	mov    ecx,eax
c0014434:	89 f0                	mov    eax,esi
c0014436:	f7 f7                	div    edi
c0014438:	c1 e2 10             	shl    edx,0x10
c001443b:	09 d5                	or     ebp,edx
c001443d:	31 d2                	xor    edx,edx
c001443f:	89 eb                	mov    ebx,ebp
c0014441:	f7 f7                	div    edi
c0014443:	bf 10 0e 00 00       	mov    edi,0xe10
c0014448:	88 d7                	mov    bh,dl
c001444a:	89 f0                	mov    eax,esi
c001444c:	31 d2                	xor    edx,edx
c001444e:	f7 f7                	div    edi
c0014450:	bf 18 00 00 00       	mov    edi,0x18
c0014455:	31 d2                	xor    edx,edx
c0014457:	f7 f7                	div    edi
c0014459:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001445e:	88 d3                	mov    bl,dl
c0014460:	53                   	push   ebx
c0014461:	51                   	push   ecx
c0014462:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0014468:	e8 69 82 ff ff       	call   c000c6d6 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001446d:	83 c4 1c             	add    esp,0x1c
c0014470:	83 f0 01             	xor    eax,0x1
c0014473:	5b                   	pop    ebx
c0014474:	0f b6 c0             	movzx  eax,al
c0014477:	5e                   	pop    esi
c0014478:	31 d2                	xor    edx,edx
c001447a:	5f                   	pop    edi
c001447b:	5d                   	pop    ebp
c001447c:	c3                   	ret    

c001447d <SysSymlink(regs*)>:
c001447d:	53                   	push   ebx
c001447e:	83 c8 ff             	or     eax,0xffffffff
c0014481:	83 ec 08             	sub    esp,0x8
c0014484:	89 c2                	mov    edx,eax
c0014486:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001448a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001448d:	85 c9                	test   ecx,ecx
c001448f:	74 14                	je     c00144a5 <SysSymlink(regs*)+0x28>
c0014491:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0014494:	85 db                	test   ebx,ebx
c0014496:	74 0d                	je     c00144a5 <SysSymlink(regs*)+0x28>
c0014498:	50                   	push   eax
c0014499:	50                   	push   eax
c001449a:	53                   	push   ebx
c001449b:	51                   	push   ecx
c001449c:	e8 c2 6f ff ff       	call   c000b463 <KeCreateSymlink(char const*, char const*)>
c00144a1:	83 c4 10             	add    esp,0x10
c00144a4:	99                   	cdq    
c00144a5:	83 c4 08             	add    esp,0x8
c00144a8:	5b                   	pop    ebx
c00144a9:	c3                   	ret    

c00144aa <SysTimezone(regs*)>:
c00144aa:	53                   	push   ebx
c00144ab:	83 ec 08             	sub    esp,0x8
c00144ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144b2:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00144b6:	75 17                	jne    c00144cf <SysTimezone(regs*)+0x25>
c00144b8:	83 ec 0c             	sub    esp,0xc
c00144bb:	68 b1 26 02 c0       	push   0xc00226b1
c00144c0:	e8 80 64 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00144c5:	83 c8 ff             	or     eax,0xffffffff
c00144c8:	83 c4 10             	add    esp,0x10
c00144cb:	89 c2                	mov    edx,eax
c00144cd:	eb 20                	jmp    c00144ef <SysTimezone(regs*)+0x45>
c00144cf:	83 ec 0c             	sub    esp,0xc
c00144d2:	68 c6 26 02 c0       	push   0xc00226c6
c00144d7:	e8 69 64 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00144dc:	58                   	pop    eax
c00144dd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00144e0:	e8 5b 7f ff ff       	call   c000c440 <User::loadClockSettings(int)>
c00144e5:	83 c4 10             	add    esp,0x10
c00144e8:	b8 01 00 00 00       	mov    eax,0x1
c00144ed:	31 d2                	xor    edx,edx
c00144ef:	83 c4 08             	add    esp,0x8
c00144f2:	5b                   	pop    ebx
c00144f3:	c3                   	ret    

c00144f4 <SysTruncate(regs*)>:
c00144f4:	55                   	push   ebp
c00144f5:	57                   	push   edi
c00144f6:	31 ff                	xor    edi,edi
c00144f8:	56                   	push   esi
c00144f9:	53                   	push   ebx
c00144fa:	83 ec 0c             	sub    esp,0xc
c00144fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014501:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014504:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014507:	89 ce                	mov    esi,ecx
c0014509:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001450d:	0f 84 9a 00 00 00    	je     c00145ad <SysTruncate(regs*)+0xb9>
c0014513:	83 ec 0c             	sub    esp,0xc
c0014516:	68 14 01 00 00       	push   0x114
c001451b:	e8 96 35 ff ff       	call   c0007ab6 <malloc>
c0014520:	83 c4 0c             	add    esp,0xc
c0014523:	89 c3                	mov    ebx,eax
c0014525:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001452a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001452d:	55                   	push   ebp
c001452e:	53                   	push   ebx
c001452f:	e8 14 76 ff ff       	call   c000bb48 <File::File(char const*, Process*)>
c0014534:	83 c4 10             	add    esp,0x10
c0014537:	31 d2                	xor    edx,edx
c0014539:	b8 03 00 00 00       	mov    eax,0x3
c001453e:	85 db                	test   ebx,ebx
c0014540:	0f 84 a2 00 00 00    	je     c00145e8 <SysTruncate(regs*)+0xf4>
c0014546:	51                   	push   ecx
c0014547:	51                   	push   ecx
c0014548:	6a 02                	push   0x2
c001454a:	53                   	push   ebx
c001454b:	e8 16 76 ff ff       	call   c000bb66 <File::open(FileOpenMode)>
c0014550:	83 c4 10             	add    esp,0x10
c0014553:	85 c0                	test   eax,eax
c0014555:	74 13                	je     c001456a <SysTruncate(regs*)+0x76>
c0014557:	83 ec 0c             	sub    esp,0xc
c001455a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001455c:	53                   	push   ebx
c001455d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014560:	83 c4 10             	add    esp,0x10
c0014563:	b8 04 00 00 00       	mov    eax,0x4
c0014568:	eb 7c                	jmp    c00145e6 <SysTruncate(regs*)+0xf2>
c001456a:	52                   	push   edx
c001456b:	57                   	push   edi
c001456c:	56                   	push   esi
c001456d:	53                   	push   ebx
c001456e:	e8 07 77 ff ff       	call   c000bc7a <File::truncate(unsigned long long)>
c0014573:	83 c4 10             	add    esp,0x10
c0014576:	85 c0                	test   eax,eax
c0014578:	74 1b                	je     c0014595 <SysTruncate(regs*)+0xa1>
c001457a:	83 ec 0c             	sub    esp,0xc
c001457d:	53                   	push   ebx
c001457e:	e8 41 76 ff ff       	call   c000bbc4 <File::close()>
c0014583:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014585:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014588:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001458b:	83 c4 10             	add    esp,0x10
c001458e:	b8 05 00 00 00       	mov    eax,0x5
c0014593:	eb 51                	jmp    c00145e6 <SysTruncate(regs*)+0xf2>
c0014595:	83 ec 0c             	sub    esp,0xc
c0014598:	53                   	push   ebx
c0014599:	e8 26 76 ff ff       	call   c000bbc4 <File::close()>
c001459e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145a6:	83 c4 10             	add    esp,0x10
c00145a9:	31 c0                	xor    eax,eax
c00145ab:	eb 39                	jmp    c00145e6 <SysTruncate(regs*)+0xf2>
c00145ad:	31 d2                	xor    edx,edx
c00145af:	b8 01 00 00 00       	mov    eax,0x1
c00145b4:	83 fd 02             	cmp    ebp,0x2
c00145b7:	7e 2f                	jle    c00145e8 <SysTruncate(regs*)+0xf4>
c00145b9:	83 ec 0c             	sub    esp,0xc
c00145bc:	51                   	push   ecx
c00145bd:	e8 f1 4e ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00145c2:	83 c4 10             	add    esp,0x10
c00145c5:	89 c1                	mov    ecx,eax
c00145c7:	31 d2                	xor    edx,edx
c00145c9:	b8 02 00 00 00       	mov    eax,0x2
c00145ce:	85 c9                	test   ecx,ecx
c00145d0:	74 16                	je     c00145e8 <SysTruncate(regs*)+0xf4>
c00145d2:	50                   	push   eax
c00145d3:	57                   	push   edi
c00145d4:	56                   	push   esi
c00145d5:	51                   	push   ecx
c00145d6:	e8 9f 76 ff ff       	call   c000bc7a <File::truncate(unsigned long long)>
c00145db:	83 c4 10             	add    esp,0x10
c00145de:	85 c0                	test   eax,eax
c00145e0:	0f 95 c0             	setne  al
c00145e3:	0f b6 c0             	movzx  eax,al
c00145e6:	31 d2                	xor    edx,edx
c00145e8:	83 c4 0c             	add    esp,0xc
c00145eb:	5b                   	pop    ebx
c00145ec:	5e                   	pop    esi
c00145ed:	5f                   	pop    edi
c00145ee:	5d                   	pop    ebp
c00145ef:	c3                   	ret    

c00145f0 <SysWrite(regs*)>:
c00145f0:	57                   	push   edi
c00145f1:	56                   	push   esi
c00145f2:	53                   	push   ebx
c00145f3:	83 ec 10             	sub    esp,0x10
c00145f6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00145fa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00145fd:	83 f8 02             	cmp    eax,0x2
c0014600:	77 10                	ja     c0014612 <SysWrite(regs*)+0x22>
c0014602:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014607:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001460a:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014610:	eb 0e                	jmp    c0014620 <SysWrite(regs*)+0x30>
c0014612:	83 ec 0c             	sub    esp,0xc
c0014615:	50                   	push   eax
c0014616:	e8 98 4e ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001461b:	83 c4 10             	add    esp,0x10
c001461e:	89 c1                	mov    ecx,eax
c0014620:	83 c8 ff             	or     eax,0xffffffff
c0014623:	85 c9                	test   ecx,ecx
c0014625:	89 c2                	mov    edx,eax
c0014627:	74 28                	je     c0014651 <SysWrite(regs*)+0x61>
c0014629:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014631:	31 ff                	xor    edi,edi
c0014633:	83 ec 0c             	sub    esp,0xc
c0014636:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014638:	8d 54 24 18          	lea    edx,[esp+0x18]
c001463c:	52                   	push   edx
c001463d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014640:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014643:	57                   	push   edi
c0014644:	56                   	push   esi
c0014645:	51                   	push   ecx
c0014646:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014649:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001464d:	83 c4 20             	add    esp,0x20
c0014650:	99                   	cdq    
c0014651:	83 c4 10             	add    esp,0x10
c0014654:	5b                   	pop    ebx
c0014655:	5e                   	pop    esi
c0014656:	5f                   	pop    edi
c0014657:	c3                   	ret    

c0014658 <SysWsbe(regs*)>:
c0014658:	57                   	push   edi
c0014659:	b9 0b 00 00 00       	mov    ecx,0xb
c001465e:	56                   	push   esi
c001465f:	be 05 27 02 c0       	mov    esi,0xc0022705
c0014664:	53                   	push   ebx
c0014665:	83 ec 30             	sub    esp,0x30
c0014668:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001466c:	fc                   	cld    
c001466d:	83 ec 0c             	sub    esp,0xc
c0014670:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014672:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014676:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001467b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001467e:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014684:	8b 06                	mov    eax,DWORD PTR [esi]
c0014686:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014689:	57                   	push   edi
c001468a:	e8 e1 be fe ff       	call   c0000570 <strlen>
c001468f:	5a                   	pop    edx
c0014690:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014694:	52                   	push   edx
c0014695:	31 d2                	xor    edx,edx
c0014697:	57                   	push   edi
c0014698:	52                   	push   edx
c0014699:	50                   	push   eax
c001469a:	56                   	push   esi
c001469b:	ff d3                	call   ebx
c001469d:	83 c4 14             	add    esp,0x14
c00146a0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00146a4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00146a7:	e8 b0 23 00 00       	call   c0016a5c <terminateTask(int)>
c00146ac:	83 c4 40             	add    esp,0x40
c00146af:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00146b4:	5b                   	pop    ebx
c00146b5:	31 d2                	xor    edx,edx
c00146b7:	5e                   	pop    esi
c00146b8:	5f                   	pop    edi
c00146b9:	c3                   	ret    

c00146ba <SysYield(regs*)>:
c00146ba:	83 ec 0c             	sub    esp,0xc
c00146bd:	fa                   	cli    
c00146be:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00146c4:	e8 f3 19 00 00       	call   c00160bc <schedule()>
c00146c9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00146ce:	48                   	dec    eax
c00146cf:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00146d4:	75 01                	jne    c00146d7 <SysYield(regs*)+0x1d>
c00146d6:	fb                   	sti    
c00146d7:	31 c0                	xor    eax,eax
c00146d9:	31 d2                	xor    edx,edx
c00146db:	83 c4 0c             	add    esp,0xc
c00146de:	c3                   	ret    

c00146df <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00146df:	55                   	push   ebp
c00146e0:	57                   	push   edi
c00146e1:	56                   	push   esi
c00146e2:	53                   	push   ebx
c00146e3:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00146e9:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00146f1:	0f 95 c0             	setne  al
c00146f4:	31 d2                	xor    edx,edx
c00146f6:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00146fe:	0f 94 c2             	sete   dl
c0014701:	85 c2                	test   edx,eax
c0014703:	74 34                	je     c0014739 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014705:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014710:	74 27                	je     c0014739 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014712:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014719:	05 00 10 00 00       	add    eax,0x1000
c001471e:	89 c1                	mov    ecx,eax
c0014720:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014725:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c001472b:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014732:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0014739:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014740:	83 ec 0c             	sub    esp,0xc
c0014743:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014749:	6a 01                	push   0x1
c001474b:	e8 bd 4e ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0014750:	83 c4 10             	add    esp,0x10
c0014753:	89 c3                	mov    ebx,eax
c0014755:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001475b:	0f 86 25 01 00 00    	jbe    c0014886 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014761:	c1 ee 0c             	shr    esi,0xc
c0014764:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001476b:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001476f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014777:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001477e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014782:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014789:	29 ef                	sub    edi,ebp
c001478b:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001478f:	0f 83 f8 00 00 00    	jae    c001488d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0014795:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001479b:	76 05                	jbe    c00147a2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c001479d:	bf 00 10 00 00       	mov    edi,0x1000
c00147a2:	83 ec 0c             	sub    esp,0xc
c00147a5:	31 d2                	xor    edx,edx
c00147a7:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00147ae:	8b 08                	mov    ecx,DWORD PTR [eax]
c00147b0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00147b4:	50                   	push   eax
c00147b5:	8d 74 24 30          	lea    esi,[esp+0x30]
c00147b9:	56                   	push   esi
c00147ba:	52                   	push   edx
c00147bb:	57                   	push   edi
c00147bc:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00147c3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00147c6:	83 c4 20             	add    esp,0x20
c00147c9:	85 c0                	test   eax,eax
c00147cb:	75 06                	jne    c00147d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c00147cd:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00147d1:	74 13                	je     c00147e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c00147d3:	83 ec 0c             	sub    esp,0xc
c00147d6:	53                   	push   ebx
c00147d7:	e8 4f 51 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c00147dc:	83 c4 10             	add    esp,0x10
c00147df:	31 c0                	xor    eax,eax
c00147e1:	e9 7c 01 00 00       	jmp    c0014962 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00147e6:	fa                   	cli    
c00147e7:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00147ed:	e8 cd 35 ff ff       	call   c0007dbf <Phys::allocatePage()>
c00147f2:	6a 07                	push   0x7
c00147f4:	89 c7                	mov    edi,eax
c00147f6:	53                   	push   ebx
c00147f7:	50                   	push   eax
c00147f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147fd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014800:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014806:	e8 15 55 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001480b:	83 c4 0c             	add    esp,0xc
c001480e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014815:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001481b:	6a 00                	push   0x0
c001481d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014822:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014825:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001482b:	e8 56 53 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0014830:	58                   	pop    eax
c0014831:	5a                   	pop    edx
c0014832:	68 07 0c 00 00       	push   0xc07
c0014837:	55                   	push   ebp
c0014838:	57                   	push   edi
c0014839:	89 df                	mov    edi,ebx
c001483b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014842:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014848:	6a 00                	push   0x0
c001484a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001484f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014852:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014858:	e8 15 57 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001485d:	b9 00 10 00 00       	mov    ecx,0x1000
c0014862:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014864:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014869:	83 c4 20             	add    esp,0x20
c001486c:	48                   	dec    eax
c001486d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014872:	85 c0                	test   eax,eax
c0014874:	75 01                	jne    c0014877 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0014876:	fb                   	sti    
c0014877:	81 c5 00 10 00 00    	add    ebp,0x1000
c001487d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014881:	e9 f1 fe ff ff       	jmp    c0014777 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0014886:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001488d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014894:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001489a:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00148a0:	0f 86 ae 00 00 00    	jbe    c0014954 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00148a6:	fa                   	cli    
c00148a7:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00148ad:	c1 ee 0c             	shr    esi,0xc
c00148b0:	51                   	push   ecx
c00148b1:	31 ff                	xor    edi,edi
c00148b3:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00148ba:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148c0:	6a 00                	push   0x0
c00148c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148c7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148ca:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148d0:	e8 b1 52 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c00148d5:	83 c4 10             	add    esp,0x10
c00148d8:	e8 e2 34 ff ff       	call   c0007dbf <Phys::allocatePage()>
c00148dd:	47                   	inc    edi
c00148de:	6a 07                	push   0x7
c00148e0:	53                   	push   ebx
c00148e1:	50                   	push   eax
c00148e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00148e6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00148ec:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00148ef:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00148f5:	e8 26 54 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00148fa:	58                   	pop    eax
c00148fb:	5a                   	pop    edx
c00148fc:	68 07 0c 00 00       	push   0xc07
c0014901:	55                   	push   ebp
c0014902:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014908:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001490c:	50                   	push   eax
c001490d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014914:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001491a:	6a 00                	push   0x0
c001491c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014921:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014924:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001492a:	e8 43 56 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001492f:	83 c4 1c             	add    esp,0x1c
c0014932:	68 00 10 00 00       	push   0x1000
c0014937:	6a 00                	push   0x0
c0014939:	53                   	push   ebx
c001493a:	e8 b1 bb fe ff       	call   c00004f0 <memset>
c001493f:	83 c4 10             	add    esp,0x10
c0014942:	39 fe                	cmp    esi,edi
c0014944:	77 92                	ja     c00148d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0014946:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001494b:	48                   	dec    eax
c001494c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014951:	75 01                	jne    c0014954 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0014953:	fb                   	sti    
c0014954:	83 ec 0c             	sub    esp,0xc
c0014957:	53                   	push   ebx
c0014958:	e8 ce 4f ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c001495d:	83 c4 10             	add    esp,0x10
c0014960:	b0 01                	mov    al,0x1
c0014962:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014968:	5b                   	pop    ebx
c0014969:	5e                   	pop    esi
c001496a:	5f                   	pop    edi
c001496b:	5d                   	pop    ebp
c001496c:	c3                   	ret    

c001496d <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001496d:	55                   	push   ebp
c001496e:	57                   	push   edi
c001496f:	56                   	push   esi
c0014970:	53                   	push   ebx
c0014971:	83 ec 48             	sub    esp,0x48
c0014974:	68 14 01 00 00       	push   0x114
c0014979:	e8 38 31 ff ff       	call   c0007ab6 <malloc>
c001497e:	83 c4 0c             	add    esp,0xc
c0014981:	89 c6                	mov    esi,eax
c0014983:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014987:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001498b:	50                   	push   eax
c001498c:	e8 b7 71 ff ff       	call   c000bb48 <File::File(char const*, Process*)>
c0014991:	58                   	pop    eax
c0014992:	5a                   	pop    edx
c0014993:	6a 01                	push   0x1
c0014995:	56                   	push   esi
c0014996:	e8 cb 71 ff ff       	call   c000bb66 <File::open(FileOpenMode)>
c001499b:	83 c4 10             	add    esp,0x10
c001499e:	85 c0                	test   eax,eax
c00149a0:	0f 85 43 01 00 00    	jne    c0014ae9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00149a6:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00149ae:	83 ec 0c             	sub    esp,0xc
c00149b1:	6a 34                	push   0x34
c00149b3:	e8 fe 30 ff ff       	call   c0007ab6 <malloc>
c00149b8:	89 c3                	mov    ebx,eax
c00149ba:	58                   	pop    eax
c00149bb:	8b 06                	mov    eax,DWORD PTR [esi]
c00149bd:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00149c1:	57                   	push   edi
c00149c2:	53                   	push   ebx
c00149c3:	6a 00                	push   0x0
c00149c5:	6a 34                	push   0x34
c00149c7:	56                   	push   esi
c00149c8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00149cb:	83 c4 20             	add    esp,0x20
c00149ce:	85 c0                	test   eax,eax
c00149d0:	0f 85 13 01 00 00    	jne    c0014ae9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00149d6:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00149dc:	0f 85 07 01 00 00    	jne    c0014ae9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00149e2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00149e5:	85 c0                	test   eax,eax
c00149e7:	0f 84 fc 00 00 00    	je     c0014ae9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00149ed:	31 d2                	xor    edx,edx
c00149ef:	55                   	push   ebp
c00149f0:	52                   	push   edx
c00149f1:	50                   	push   eax
c00149f2:	56                   	push   esi
c00149f3:	e8 2c 72 ff ff       	call   c000bc24 <File::seek(unsigned long long)>
c00149f8:	83 c4 10             	add    esp,0x10
c00149fb:	85 c0                	test   eax,eax
c00149fd:	0f 85 e6 00 00 00    	jne    c0014ae9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a03:	83 ec 0c             	sub    esp,0xc
c0014a06:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014a09:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014a0d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014a11:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014a15:	0f af c2             	imul   eax,edx
c0014a18:	50                   	push   eax
c0014a19:	e8 98 30 ff ff       	call   c0007ab6 <malloc>
c0014a1e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014a20:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014a24:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014a27:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014a2b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014a2f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014a33:	0f af c2             	imul   eax,edx
c0014a36:	99                   	cdq    
c0014a37:	52                   	push   edx
c0014a38:	50                   	push   eax
c0014a39:	56                   	push   esi
c0014a3a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a3d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014a40:	83 c4 20             	add    esp,0x20
c0014a43:	85 c0                	test   eax,eax
c0014a45:	0f 84 9e 00 00 00    	je     c0014ae9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a4b:	31 d2                	xor    edx,edx
c0014a4d:	51                   	push   ecx
c0014a4e:	52                   	push   edx
c0014a4f:	50                   	push   eax
c0014a50:	56                   	push   esi
c0014a51:	e8 ce 71 ff ff       	call   c000bc24 <File::seek(unsigned long long)>
c0014a56:	83 c4 10             	add    esp,0x10
c0014a59:	85 c0                	test   eax,eax
c0014a5b:	0f 85 88 00 00 00    	jne    c0014ae9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a61:	83 ec 0c             	sub    esp,0xc
c0014a64:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014a68:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014a6c:	31 ed                	xor    ebp,ebp
c0014a6e:	0f af c2             	imul   eax,edx
c0014a71:	50                   	push   eax
c0014a72:	e8 3f 30 ff ff       	call   c0007ab6 <malloc>
c0014a77:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014a79:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a7d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014a80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a84:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014a88:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014a8c:	0f af c2             	imul   eax,edx
c0014a8f:	99                   	cdq    
c0014a90:	52                   	push   edx
c0014a91:	50                   	push   eax
c0014a92:	56                   	push   esi
c0014a93:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a96:	83 c4 20             	add    esp,0x20
c0014a99:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014aa1:	0f b7 fd             	movzx  edi,bp
c0014aa4:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0014aa8:	73 7d                	jae    c0014b27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0014aaa:	c1 e7 05             	shl    edi,0x5
c0014aad:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014ab1:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014ab4:	75 6b                	jne    c0014b21 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014ab6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014ab9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014abd:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014ac0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ac4:	52                   	push   edx
c0014ac5:	31 d2                	xor    edx,edx
c0014ac7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014aca:	52                   	push   edx
c0014acb:	50                   	push   eax
c0014acc:	56                   	push   esi
c0014acd:	e8 52 71 ff ff       	call   c000bc24 <File::seek(unsigned long long)>
c0014ad2:	83 c4 10             	add    esp,0x10
c0014ad5:	85 c0                	test   eax,eax
c0014ad7:	74 17                	je     c0014af0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014ad9:	83 ec 0c             	sub    esp,0xc
c0014adc:	68 31 27 02 c0       	push   0xc0022731
c0014ae1:	e8 5f 5e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014ae6:	83 c4 10             	add    esp,0x10
c0014ae9:	31 c0                	xor    eax,eax
c0014aeb:	e9 87 00 00 00       	jmp    c0014b77 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0014af0:	83 ec 0c             	sub    esp,0xc
c0014af3:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014af6:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014af9:	50                   	push   eax
c0014afa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014afe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b02:	56                   	push   esi
c0014b03:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014b07:	e8 d3 fb ff ff       	call   c00146df <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014b0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014b10:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014b14:	83 c4 20             	add    esp,0x20
c0014b17:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014b1b:	73 04                	jae    c0014b21 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014b1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014b21:	45                   	inc    ebp
c0014b22:	e9 7a ff ff ff       	jmp    c0014aa1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014b27:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014b2b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014b2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014b33:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014b39:	83 ec 0c             	sub    esp,0xc
c0014b3c:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014b42:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014b47:	05 00 10 00 00       	add    eax,0x1000
c0014b4c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014b4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b53:	e8 6e 2f ff ff       	call   c0007ac6 <free>
c0014b58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b5b:	e8 66 2f ff ff       	call   c0007ac6 <free>
c0014b60:	58                   	pop    eax
c0014b61:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b65:	e8 5c 2f ff ff       	call   c0007ac6 <free>
c0014b6a:	89 34 24             	mov    DWORD PTR [esp],esi
c0014b6d:	e8 52 70 ff ff       	call   c000bbc4 <File::close()>
c0014b72:	83 c4 10             	add    esp,0x10
c0014b75:	b0 01                	mov    al,0x1
c0014b77:	83 c4 3c             	add    esp,0x3c
c0014b7a:	5b                   	pop    ebx
c0014b7b:	5e                   	pop    esi
c0014b7c:	5f                   	pop    edi
c0014b7d:	5d                   	pop    ebp
c0014b7e:	c3                   	ret    

c0014b7f <Thr::runtimeReferenceHelper()>:
c0014b7f:	83 ec 18             	sub    esp,0x18
c0014b82:	68 39 27 02 c0       	push   0xc0022739
c0014b87:	e8 b9 5d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014b8c:	fa                   	cli    
c0014b8d:	83 c4 10             	add    esp,0x10
c0014b90:	eb fe                	jmp    c0014b90 <Thr::runtimeReferenceHelper()+0x11>

c0014b92 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014b92:	57                   	push   edi
c0014b93:	56                   	push   esi
c0014b94:	53                   	push   ebx
c0014b95:	31 db                	xor    ebx,ebx
c0014b97:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014b9d:	7e 3c                	jle    c0014bdb <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014b9f:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014ba6:	31 ff                	xor    edi,edi
c0014ba8:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014baf:	7e 27                	jle    c0014bd8 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014bb1:	50                   	push   eax
c0014bb2:	50                   	push   eax
c0014bb3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014bb7:	8b 06                	mov    eax,DWORD PTR [esi]
c0014bb9:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014bc0:	50                   	push   eax
c0014bc1:	e8 8a bb fe ff       	call   c0000750 <strcmp>
c0014bc6:	83 c4 10             	add    esp,0x10
c0014bc9:	85 c0                	test   eax,eax
c0014bcb:	75 05                	jne    c0014bd2 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014bcd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014bd0:	eb 0b                	jmp    c0014bdd <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014bd2:	83 c6 10             	add    esi,0x10
c0014bd5:	47                   	inc    edi
c0014bd6:	eb d0                	jmp    c0014ba8 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014bd8:	43                   	inc    ebx
c0014bd9:	eb bc                	jmp    c0014b97 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014bdb:	31 c0                	xor    eax,eax
c0014bdd:	5b                   	pop    ebx
c0014bde:	5e                   	pop    esi
c0014bdf:	5f                   	pop    edi
c0014be0:	c3                   	ret    

c0014be1 <Thr::loadKernelSymbolTable(char const*)>:
c0014be1:	55                   	push   ebp
c0014be2:	57                   	push   edi
c0014be3:	56                   	push   esi
c0014be4:	53                   	push   ebx
c0014be5:	83 ec 68             	sub    esp,0x68
c0014be8:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014bee:	68 14 01 00 00       	push   0x114
c0014bf3:	e8 be 2e ff ff       	call   c0007ab6 <malloc>
c0014bf8:	83 c4 0c             	add    esp,0xc
c0014bfb:	89 c3                	mov    ebx,eax
c0014bfd:	56                   	push   esi
c0014bfe:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014c02:	50                   	push   eax
c0014c03:	e8 40 6f ff ff       	call   c000bb48 <File::File(char const*, Process*)>
c0014c08:	5e                   	pop    esi
c0014c09:	5f                   	pop    edi
c0014c0a:	6a 01                	push   0x1
c0014c0c:	53                   	push   ebx
c0014c0d:	e8 54 6f ff ff       	call   c000bb66 <File::open(FileOpenMode)>
c0014c12:	83 c4 10             	add    esp,0x10
c0014c15:	85 c0                	test   eax,eax
c0014c17:	74 0a                	je     c0014c23 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014c19:	83 ec 0c             	sub    esp,0xc
c0014c1c:	68 5b 27 02 c0       	push   0xc002275b
c0014c21:	eb 34                	jmp    c0014c57 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014c23:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014c2b:	83 ec 0c             	sub    esp,0xc
c0014c2e:	6a 34                	push   0x34
c0014c30:	e8 81 2e ff ff       	call   c0007ab6 <malloc>
c0014c35:	59                   	pop    ecx
c0014c36:	89 c7                	mov    edi,eax
c0014c38:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014c3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c3e:	56                   	push   esi
c0014c3f:	57                   	push   edi
c0014c40:	6a 00                	push   0x0
c0014c42:	6a 34                	push   0x34
c0014c44:	53                   	push   ebx
c0014c45:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c48:	83 c4 20             	add    esp,0x20
c0014c4b:	85 c0                	test   eax,eax
c0014c4d:	74 17                	je     c0014c66 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014c4f:	83 ec 0c             	sub    esp,0xc
c0014c52:	68 72 27 02 c0       	push   0xc0022772
c0014c57:	e8 bf c9 ff ff       	call   c001161b <KePanic(char const*)>
c0014c5c:	83 c4 10             	add    esp,0x10
c0014c5f:	31 c0                	xor    eax,eax
c0014c61:	e9 31 02 00 00       	jmp    c0014e97 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014c66:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014c6c:	75 e1                	jne    c0014c4f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c6e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014c71:	85 c0                	test   eax,eax
c0014c73:	74 da                	je     c0014c4f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c75:	52                   	push   edx
c0014c76:	31 d2                	xor    edx,edx
c0014c78:	52                   	push   edx
c0014c79:	50                   	push   eax
c0014c7a:	53                   	push   ebx
c0014c7b:	e8 a4 6f ff ff       	call   c000bc24 <File::seek(unsigned long long)>
c0014c80:	83 c4 10             	add    esp,0x10
c0014c83:	85 c0                	test   eax,eax
c0014c85:	75 c8                	jne    c0014c4f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c87:	83 ec 0c             	sub    esp,0xc
c0014c8a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014c8e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014c92:	31 ed                	xor    ebp,ebp
c0014c94:	0f af c2             	imul   eax,edx
c0014c97:	50                   	push   eax
c0014c98:	e8 19 2e ff ff       	call   c0007ab6 <malloc>
c0014c9d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c9f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ca3:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014caa:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014cae:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014cb2:	0f af c2             	imul   eax,edx
c0014cb5:	99                   	cdq    
c0014cb6:	52                   	push   edx
c0014cb7:	50                   	push   eax
c0014cb8:	53                   	push   ebx
c0014cb9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014cbc:	83 c4 20             	add    esp,0x20
c0014cbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014cc7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014ccf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014cd7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014cdf:	0f b7 f5             	movzx  esi,bp
c0014ce2:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014ce6:	0f 83 a7 00 00 00    	jae    c0014d93 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014cec:	6b f6 28             	imul   esi,esi,0x28
c0014cef:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014cf3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014cf6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014cfa:	50                   	push   eax
c0014cfb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014cff:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014d03:	8b 16                	mov    edx,DWORD PTR [esi]
c0014d05:	6b c0 28             	imul   eax,eax,0x28
c0014d08:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014d0c:	89 d0                	mov    eax,edx
c0014d0e:	31 d2                	xor    edx,edx
c0014d10:	52                   	push   edx
c0014d11:	50                   	push   eax
c0014d12:	53                   	push   ebx
c0014d13:	e8 0c 6f ff ff       	call   c000bc24 <File::seek(unsigned long long)>
c0014d18:	83 c4 0c             	add    esp,0xc
c0014d1b:	6a 20                	push   0x20
c0014d1d:	6a 00                	push   0x0
c0014d1f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014d23:	52                   	push   edx
c0014d24:	e8 c7 b7 fe ff       	call   c00004f0 <memset>
c0014d29:	58                   	pop    eax
c0014d2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d2c:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014d30:	51                   	push   ecx
c0014d31:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014d35:	52                   	push   edx
c0014d36:	6a 00                	push   0x0
c0014d38:	6a 1f                	push   0x1f
c0014d3a:	53                   	push   ebx
c0014d3b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d3e:	83 c4 18             	add    esp,0x18
c0014d41:	68 89 27 02 c0       	push   0xc0022789
c0014d46:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014d4a:	52                   	push   edx
c0014d4b:	e8 00 ba fe ff       	call   c0000750 <strcmp>
c0014d50:	83 c4 10             	add    esp,0x10
c0014d53:	85 c0                	test   eax,eax
c0014d55:	75 0f                	jne    c0014d66 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014d57:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d5e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014d66:	50                   	push   eax
c0014d67:	50                   	push   eax
c0014d68:	68 91 27 02 c0       	push   0xc0022791
c0014d6d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014d71:	50                   	push   eax
c0014d72:	e8 d9 b9 fe ff       	call   c0000750 <strcmp>
c0014d77:	83 c4 10             	add    esp,0x10
c0014d7a:	85 c0                	test   eax,eax
c0014d7c:	75 0f                	jne    c0014d8d <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014d7e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d89:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d8d:	45                   	inc    ebp
c0014d8e:	e9 4c ff ff ff       	jmp    c0014cdf <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014d93:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014d98:	75 10                	jne    c0014daa <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014d9a:	83 ec 0c             	sub    esp,0xc
c0014d9d:	68 99 27 02 c0       	push   0xc0022799
c0014da2:	e8 74 c8 ff ff       	call   c001161b <KePanic(char const*)>
c0014da7:	83 c4 10             	add    esp,0x10
c0014daa:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014daf:	75 10                	jne    c0014dc1 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014db1:	83 ec 0c             	sub    esp,0xc
c0014db4:	68 99 27 02 c0       	push   0xc0022799
c0014db9:	e8 5d c8 ff ff       	call   c001161b <KePanic(char const*)>
c0014dbe:	83 c4 10             	add    esp,0x10
c0014dc1:	31 d2                	xor    edx,edx
c0014dc3:	50                   	push   eax
c0014dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dc8:	52                   	push   edx
c0014dc9:	50                   	push   eax
c0014dca:	53                   	push   ebx
c0014dcb:	e8 54 6e ff ff       	call   c000bc24 <File::seek(unsigned long long)>
c0014dd0:	5a                   	pop    edx
c0014dd1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014dd5:	e8 dc 2c ff ff       	call   c0007ab6 <malloc>
c0014dda:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014dde:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014de2:	31 c9                	xor    ecx,ecx
c0014de4:	5e                   	pop    esi
c0014de5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014de7:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014deb:	55                   	push   ebp
c0014dec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014df0:	51                   	push   ecx
c0014df1:	52                   	push   edx
c0014df2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014df6:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014dfa:	53                   	push   ebx
c0014dfb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014dfe:	83 c4 14             	add    esp,0x14
c0014e01:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014e05:	e8 ac 2c ff ff       	call   c0007ab6 <malloc>
c0014e0a:	89 c6                	mov    esi,eax
c0014e0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e0e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014e11:	56                   	push   esi
c0014e12:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014e16:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014e1a:	51                   	push   ecx
c0014e1b:	52                   	push   edx
c0014e1c:	53                   	push   ebx
c0014e1d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e20:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e24:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014e2a:	83 c4 1c             	add    esp,0x1c
c0014e2d:	c1 e8 04             	shr    eax,0x4
c0014e30:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014e37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014e3b:	31 d2                	xor    edx,edx
c0014e3d:	52                   	push   edx
c0014e3e:	50                   	push   eax
c0014e3f:	53                   	push   ebx
c0014e40:	e8 df 6d ff ff       	call   c000bc24 <File::seek(unsigned long long)>
c0014e45:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014e47:	31 d2                	xor    edx,edx
c0014e49:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014e4c:	56                   	push   esi
c0014e4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e51:	52                   	push   edx
c0014e52:	50                   	push   eax
c0014e53:	53                   	push   ebx
c0014e54:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e57:	83 c4 14             	add    esp,0x14
c0014e5a:	53                   	push   ebx
c0014e5b:	e8 64 6d ff ff       	call   c000bbc4 <File::close()>
c0014e60:	5d                   	pop    ebp
c0014e61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014e65:	e8 5c 2c ff ff       	call   c0007ac6 <free>
c0014e6a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014e6d:	e8 54 2c ff ff       	call   c0007ac6 <free>
c0014e72:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014e77:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014e7b:	8d 50 01             	lea    edx,[eax+0x1]
c0014e7e:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014e85:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014e8c:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014e92:	83 c4 10             	add    esp,0x10
c0014e95:	b0 01                	mov    al,0x1
c0014e97:	83 c4 5c             	add    esp,0x5c
c0014e9a:	5b                   	pop    ebx
c0014e9b:	5e                   	pop    esi
c0014e9c:	5f                   	pop    edi
c0014e9d:	5d                   	pop    ebp
c0014e9e:	c3                   	ret    

c0014e9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014e9f:	55                   	push   ebp
c0014ea0:	57                   	push   edi
c0014ea1:	56                   	push   esi
c0014ea2:	53                   	push   ebx
c0014ea3:	81 ec 68 03 00 00    	sub    esp,0x368
c0014ea9:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014eb0:	8b 1d f0 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6f0
c0014eb6:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014eba:	68 14 01 00 00       	push   0x114
c0014ebf:	e8 f2 2b ff ff       	call   c0007ab6 <malloc>
c0014ec4:	83 c4 0c             	add    esp,0xc
c0014ec7:	89 c5                	mov    ebp,eax
c0014ec9:	53                   	push   ebx
c0014eca:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014ed1:	50                   	push   eax
c0014ed2:	e8 71 6c ff ff       	call   c000bb48 <File::File(char const*, Process*)>
c0014ed7:	5e                   	pop    esi
c0014ed8:	5f                   	pop    edi
c0014ed9:	6a 01                	push   0x1
c0014edb:	55                   	push   ebp
c0014edc:	e8 85 6c ff ff       	call   c000bb66 <File::open(FileOpenMode)>
c0014ee1:	83 c4 10             	add    esp,0x10
c0014ee4:	85 c0                	test   eax,eax
c0014ee6:	0f 85 aa 06 00 00    	jne    c0015596 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014eec:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014ef4:	83 ec 0c             	sub    esp,0xc
c0014ef7:	6a 34                	push   0x34
c0014ef9:	e8 b8 2b ff ff       	call   c0007ab6 <malloc>
c0014efe:	5b                   	pop    ebx
c0014eff:	89 c7                	mov    edi,eax
c0014f01:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014f05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014f08:	53                   	push   ebx
c0014f09:	57                   	push   edi
c0014f0a:	6a 00                	push   0x0
c0014f0c:	6a 34                	push   0x34
c0014f0e:	55                   	push   ebp
c0014f0f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f12:	83 c4 20             	add    esp,0x20
c0014f15:	85 c0                	test   eax,eax
c0014f17:	0f 85 79 06 00 00    	jne    c0015596 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f1d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014f23:	0f 85 6d 06 00 00    	jne    c0015596 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f29:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014f2c:	85 c0                	test   eax,eax
c0014f2e:	0f 84 62 06 00 00    	je     c0015596 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f34:	31 d2                	xor    edx,edx
c0014f36:	51                   	push   ecx
c0014f37:	52                   	push   edx
c0014f38:	50                   	push   eax
c0014f39:	55                   	push   ebp
c0014f3a:	e8 e5 6c ff ff       	call   c000bc24 <File::seek(unsigned long long)>
c0014f3f:	83 c4 10             	add    esp,0x10
c0014f42:	85 c0                	test   eax,eax
c0014f44:	0f 85 4c 06 00 00    	jne    c0015596 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f4a:	83 ec 0c             	sub    esp,0xc
c0014f4d:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014f50:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014f54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014f58:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014f5c:	0f af c2             	imul   eax,edx
c0014f5f:	50                   	push   eax
c0014f60:	e8 51 2b ff ff       	call   c0007ab6 <malloc>
c0014f65:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014f68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014f6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f6f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f73:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014f77:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014f7b:	0f af c2             	imul   eax,edx
c0014f7e:	99                   	cdq    
c0014f7f:	52                   	push   edx
c0014f80:	50                   	push   eax
c0014f81:	55                   	push   ebp
c0014f82:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f85:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0014f88:	83 c4 20             	add    esp,0x20
c0014f8b:	85 c0                	test   eax,eax
c0014f8d:	0f 84 03 06 00 00    	je     c0015596 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f93:	52                   	push   edx
c0014f94:	31 d2                	xor    edx,edx
c0014f96:	52                   	push   edx
c0014f97:	50                   	push   eax
c0014f98:	55                   	push   ebp
c0014f99:	e8 86 6c ff ff       	call   c000bc24 <File::seek(unsigned long long)>
c0014f9e:	83 c4 10             	add    esp,0x10
c0014fa1:	85 c0                	test   eax,eax
c0014fa3:	0f 85 ed 05 00 00    	jne    c0015596 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014fa9:	83 ec 0c             	sub    esp,0xc
c0014fac:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014fb0:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014fb4:	31 f6                	xor    esi,esi
c0014fb6:	0f af c2             	imul   eax,edx
c0014fb9:	50                   	push   eax
c0014fba:	e8 f7 2a ff ff       	call   c0007ab6 <malloc>
c0014fbf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014fc2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014fc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014fc9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014fcd:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014fd1:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014fd5:	0f af c2             	imul   eax,edx
c0014fd8:	99                   	cdq    
c0014fd9:	52                   	push   edx
c0014fda:	50                   	push   eax
c0014fdb:	55                   	push   ebp
c0014fdc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014fdf:	83 c4 20             	add    esp,0x20
c0014fe2:	0f b7 de             	movzx  ebx,si
c0014fe5:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0014fe9:	0f 83 87 00 00 00    	jae    c0015076 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014fef:	c1 e3 05             	shl    ebx,0x5
c0014ff2:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014ff6:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014ff9:	75 75                	jne    c0015070 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014ffb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014ffe:	31 d2                	xor    edx,edx
c0015000:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015004:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015007:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001500b:	50                   	push   eax
c001500c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001500f:	52                   	push   edx
c0015010:	50                   	push   eax
c0015011:	55                   	push   ebp
c0015012:	e8 0d 6c ff ff       	call   c000bc24 <File::seek(unsigned long long)>
c0015017:	83 c4 10             	add    esp,0x10
c001501a:	85 c0                	test   eax,eax
c001501c:	0f 85 74 05 00 00    	jne    c0015596 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015022:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015029:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001502c:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0015030:	31 d2                	xor    edx,edx
c0015032:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0015036:	83 ec 0c             	sub    esp,0xc
c0015039:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001503d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015044:	50                   	push   eax
c0015045:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015049:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001504d:	52                   	push   edx
c001504e:	50                   	push   eax
c001504f:	55                   	push   ebp
c0015050:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015053:	83 c4 1c             	add    esp,0x1c
c0015056:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015059:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001505c:	50                   	push   eax
c001505d:	6a 00                	push   0x0
c001505f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015063:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0015067:	50                   	push   eax
c0015068:	e8 83 b4 fe ff       	call   c00004f0 <memset>
c001506d:	83 c4 10             	add    esp,0x10
c0015070:	46                   	inc    esi
c0015071:	e9 6c ff ff ff       	jmp    c0014fe2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0015076:	53                   	push   ebx
c0015077:	31 db                	xor    ebx,ebx
c0015079:	68 00 01 00 00       	push   0x100
c001507e:	6a 00                	push   0x0
c0015080:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015084:	50                   	push   eax
c0015085:	e8 66 b4 fe ff       	call   c00004f0 <memset>
c001508a:	83 c4 0c             	add    esp,0xc
c001508d:	68 00 01 00 00       	push   0x100
c0015092:	6a 00                	push   0x0
c0015094:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001509b:	50                   	push   eax
c001509c:	e8 4f b4 fe ff       	call   c00004f0 <memset>
c00150a1:	83 c4 10             	add    esp,0x10
c00150a4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00150ac:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00150b4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00150bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00150c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00150cc:	0f b7 f3             	movzx  esi,bx
c00150cf:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c00150d3:	0f 83 2d 01 00 00    	jae    c0015206 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00150d9:	6b f6 28             	imul   esi,esi,0x28
c00150dc:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00150e0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00150e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00150e7:	52                   	push   edx
c00150e8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00150ec:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00150f0:	8b 06                	mov    eax,DWORD PTR [esi]
c00150f2:	6b d2 28             	imul   edx,edx,0x28
c00150f5:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00150f9:	31 d2                	xor    edx,edx
c00150fb:	52                   	push   edx
c00150fc:	50                   	push   eax
c00150fd:	55                   	push   ebp
c00150fe:	e8 21 6b ff ff       	call   c000bc24 <File::seek(unsigned long long)>
c0015103:	83 c4 0c             	add    esp,0xc
c0015106:	6a 20                	push   0x20
c0015108:	6a 00                	push   0x0
c001510a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015111:	51                   	push   ecx
c0015112:	e8 d9 b3 fe ff       	call   c00004f0 <memset>
c0015117:	59                   	pop    ecx
c0015118:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001511b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001511f:	52                   	push   edx
c0015120:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015127:	51                   	push   ecx
c0015128:	6a 00                	push   0x0
c001512a:	6a 1f                	push   0x1f
c001512c:	55                   	push   ebp
c001512d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015130:	83 c4 1c             	add    esp,0x1c
c0015133:	6a 09                	push   0x9
c0015135:	68 b3 27 02 c0       	push   0xc00227b3
c001513a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015141:	51                   	push   ecx
c0015142:	e8 39 b2 fe ff       	call   c0000380 <memcmp>
c0015147:	83 c4 10             	add    esp,0x10
c001514a:	85 c0                	test   eax,eax
c001514c:	75 21                	jne    c001516f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001514e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015152:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015156:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001515a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001515e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015161:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015168:	89 d0                	mov    eax,edx
c001516a:	40                   	inc    eax
c001516b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001516f:	50                   	push   eax
c0015170:	6a 09                	push   0x9
c0015172:	68 bd 27 02 c0       	push   0xc00227bd
c0015177:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001517e:	50                   	push   eax
c001517f:	e8 fc b1 fe ff       	call   c0000380 <memcmp>
c0015184:	83 c4 10             	add    esp,0x10
c0015187:	85 c0                	test   eax,eax
c0015189:	75 21                	jne    c00151ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001518b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001518f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015193:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015197:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c001519b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001519e:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00151a5:	89 d0                	mov    eax,edx
c00151a7:	40                   	inc    eax
c00151a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00151ac:	50                   	push   eax
c00151ad:	50                   	push   eax
c00151ae:	68 89 27 02 c0       	push   0xc0022789
c00151b3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00151ba:	50                   	push   eax
c00151bb:	e8 90 b5 fe ff       	call   c0000750 <strcmp>
c00151c0:	83 c4 10             	add    esp,0x10
c00151c3:	85 c0                	test   eax,eax
c00151c5:	75 0f                	jne    c00151d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00151c7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00151ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00151ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00151d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00151d6:	50                   	push   eax
c00151d7:	50                   	push   eax
c00151d8:	68 91 27 02 c0       	push   0xc0022791
c00151dd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00151e4:	50                   	push   eax
c00151e5:	e8 66 b5 fe ff       	call   c0000750 <strcmp>
c00151ea:	83 c4 10             	add    esp,0x10
c00151ed:	85 c0                	test   eax,eax
c00151ef:	75 0f                	jne    c0015200 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00151f1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00151f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00151f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00151fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015200:	43                   	inc    ebx
c0015201:	e9 c6 fe ff ff       	jmp    c00150cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0015206:	31 d2                	xor    edx,edx
c0015208:	50                   	push   eax
c0015209:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001520d:	52                   	push   edx
c001520e:	50                   	push   eax
c001520f:	55                   	push   ebp
c0015210:	e8 0f 6a ff ff       	call   c000bc24 <File::seek(unsigned long long)>
c0015215:	58                   	pop    eax
c0015216:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001521a:	e8 97 28 ff ff       	call   c0007ab6 <malloc>
c001521f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015222:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015226:	31 d2                	xor    edx,edx
c0015228:	58                   	pop    eax
c0015229:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001522d:	53                   	push   ebx
c001522e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0015232:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015236:	52                   	push   edx
c0015237:	50                   	push   eax
c0015238:	55                   	push   ebp
c0015239:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001523c:	83 c4 14             	add    esp,0x14
c001523f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015243:	e8 6e 28 ff ff       	call   c0007ab6 <malloc>
c0015248:	31 d2                	xor    edx,edx
c001524a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001524e:	83 c4 0c             	add    esp,0xc
c0015251:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015255:	52                   	push   edx
c0015256:	50                   	push   eax
c0015257:	55                   	push   ebp
c0015258:	e8 c7 69 ff ff       	call   c000bc24 <File::seek(unsigned long long)>
c001525d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015260:	31 d2                	xor    edx,edx
c0015262:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015265:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015269:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001526d:	52                   	push   edx
c001526e:	50                   	push   eax
c001526f:	55                   	push   ebp
c0015270:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015273:	83 c4 20             	add    esp,0x20
c0015276:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c001527b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015283:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015287:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001528b:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001528f:	0f 84 05 03 00 00    	je     c001559a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0015295:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001529c:	31 d2                	xor    edx,edx
c001529e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00152a2:	c1 e8 03             	shr    eax,0x3
c00152a5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00152a9:	51                   	push   ecx
c00152aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00152ae:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00152b2:	52                   	push   edx
c00152b3:	50                   	push   eax
c00152b4:	55                   	push   ebp
c00152b5:	e8 6a 69 ff ff       	call   c000bc24 <File::seek(unsigned long long)>
c00152ba:	5b                   	pop    ebx
c00152bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152bf:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00152c6:	e8 eb 27 ff ff       	call   c0007ab6 <malloc>
c00152cb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00152ce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00152d2:	31 d2                	xor    edx,edx
c00152d4:	5e                   	pop    esi
c00152d5:	8d 44 24 58          	lea    eax,[esp+0x58]
c00152d9:	50                   	push   eax
c00152da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00152e2:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00152e9:	52                   	push   edx
c00152ea:	50                   	push   eax
c00152eb:	55                   	push   ebp
c00152ec:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00152ef:	83 c4 20             	add    esp,0x20
c00152f2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00152fa:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00152fe:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0015302:	0f 8d 76 02 00 00    	jge    c001557e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0015308:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001530c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015310:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0015315:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0015318:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001531c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015320:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0015324:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015328:	c1 e8 08             	shr    eax,0x8
c001532b:	89 c6                	mov    esi,eax
c001532d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015331:	c1 e6 04             	shl    esi,0x4
c0015334:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0015338:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c001533b:	85 db                	test   ebx,ebx
c001533d:	0f 85 b3 00 00 00    	jne    c00153f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015343:	83 ec 0c             	sub    esp,0xc
c0015346:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001534a:	03 06                	add    eax,DWORD PTR [esi]
c001534c:	50                   	push   eax
c001534d:	e8 40 f8 ff ff       	call   c0014b92 <Thr::getAddressOfKernelSymbol(char const*)>
c0015352:	83 c4 10             	add    esp,0x10
c0015355:	89 c3                	mov    ebx,eax
c0015357:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c001535c:	85 c0                	test   eax,eax
c001535e:	0f 85 92 00 00 00    	jne    c00153f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015364:	83 ec 0c             	sub    esp,0xc
c0015367:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001536b:	03 06                	add    eax,DWORD PTR [esi]
c001536d:	50                   	push   eax
c001536e:	e8 95 c4 ff ff       	call   c0011808 <KeResolveCompatibilitySymbol(char*)>
c0015373:	83 c4 10             	add    esp,0x10
c0015376:	89 c3                	mov    ebx,eax
c0015378:	85 c0                	test   eax,eax
c001537a:	75 7a                	jne    c00153f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001537c:	51                   	push   ecx
c001537d:	51                   	push   ecx
c001537e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015382:	03 06                	add    eax,DWORD PTR [esi]
c0015384:	50                   	push   eax
c0015385:	68 c7 27 02 c0       	push   0xc00227c7
c001538a:	e8 b6 55 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001538f:	58                   	pop    eax
c0015390:	5a                   	pop    edx
c0015391:	68 e1 27 02 c0       	push   0xc00227e1
c0015396:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001539d:	50                   	push   eax
c001539e:	e8 9d b2 fe ff       	call   c0000640 <strcpy>
c00153a3:	59                   	pop    ecx
c00153a4:	58                   	pop    eax
c00153a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00153a9:	03 06                	add    eax,DWORD PTR [esi]
c00153ab:	50                   	push   eax
c00153ac:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00153b3:	50                   	push   eax
c00153b4:	e8 87 b4 fe ff       	call   c0000840 <strcat>
c00153b9:	58                   	pop    eax
c00153ba:	5a                   	pop    edx
c00153bb:	68 77 28 02 c0       	push   0xc0022877
c00153c0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00153c7:	50                   	push   eax
c00153c8:	e8 73 b4 fe ff       	call   c0000840 <strcat>
c00153cd:	83 c4 10             	add    esp,0x10
c00153d0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00153d5:	0f 84 5d 01 00 00    	je     c0015538 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00153db:	83 ec 0c             	sub    esp,0xc
c00153de:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00153e5:	50                   	push   eax
c00153e6:	e8 30 c2 ff ff       	call   c001161b <KePanic(char const*)>
c00153eb:	83 c4 10             	add    esp,0x10
c00153ee:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00153f2:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c00153f6:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00153fb:	83 f8 01             	cmp    eax,0x1
c00153fe:	0f 85 8f 00 00 00    	jne    c0015493 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0015404:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001540b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001540f:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0015413:	01 ce                	add    esi,ecx
c0015415:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001541d:	0f 94 c0             	sete   al
c0015420:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0015428:	0f 94 c2             	sete   dl
c001542b:	09 c2                	or     edx,eax
c001542d:	8b 06                	mov    eax,DWORD PTR [esi]
c001542f:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0015434:	0f b6 d2             	movzx  edx,dl
c0015437:	74 41                	je     c001547a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0015439:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c001543c:	85 d2                	test   edx,edx
c001543e:	75 15                	jne    c0015455 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0015440:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015444:	66 83 f8 0c          	cmp    ax,0xc
c0015448:	76 05                	jbe    c001544f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c001544a:	b8 0c 00 00 00       	mov    eax,0xc
c001544f:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015453:	76 37                	jbe    c001548c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015455:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015459:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001545e:	0f 84 d4 00 00 00    	je     c0015538 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015464:	83 ec 0c             	sub    esp,0xc
c0015467:	68 f8 27 02 c0       	push   0xc00227f8
c001546c:	e8 aa c1 ff ff       	call   c001161b <KePanic(char const*)>
c0015471:	83 c4 10             	add    esp,0x10
c0015474:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015478:	eb 12                	jmp    c001548c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001547a:	01 c1                	add    ecx,eax
c001547c:	85 d2                	test   edx,edx
c001547e:	75 0c                	jne    c001548c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015480:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015484:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015488:	77 02                	ja     c001548c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001548a:	01 d9                	add    ecx,ebx
c001548c:	89 0e                	mov    DWORD PTR [esi],ecx
c001548e:	e9 e2 00 00 00       	jmp    c0015575 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015493:	83 f8 02             	cmp    eax,0x2
c0015496:	75 77                	jne    c001550f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0015498:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001549f:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c00154a3:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c00154a7:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00154af:	74 21                	je     c00154d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00154b1:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00154b9:	74 17                	je     c00154d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00154bb:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c00154bf:	b8 0a 00 00 00       	mov    eax,0xa
c00154c4:	83 fa 0e             	cmp    edx,0xe
c00154c7:	77 03                	ja     c00154cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c00154c9:	8d 42 fc             	lea    eax,[edx-0x4]
c00154cc:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00154d0:	76 17                	jbe    c00154e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c00154d2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00154d7:	74 5f                	je     c0015538 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00154d9:	83 ec 0c             	sub    esp,0xc
c00154dc:	68 14 28 02 c0       	push   0xc0022814
c00154e1:	e8 35 c1 ff ff       	call   c001161b <KePanic(char const*)>
c00154e6:	83 c4 10             	add    esp,0x10
c00154e9:	8b 06                	mov    eax,DWORD PTR [esi]
c00154eb:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00154f0:	74 13                	je     c0015505 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c00154f2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00154f6:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c00154fd:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0015501:	01 d0                	add    eax,edx
c0015503:	eb 04                	jmp    c0015509 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0015505:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0015509:	01 c3                	add    ebx,eax
c001550b:	89 1e                	mov    DWORD PTR [esi],ebx
c001550d:	eb 66                	jmp    c0015575 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001550f:	52                   	push   edx
c0015510:	52                   	push   edx
c0015511:	50                   	push   eax
c0015512:	68 30 28 02 c0       	push   0xc0022830
c0015517:	e8 29 54 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001551c:	83 c4 10             	add    esp,0x10
c001551f:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015524:	74 12                	je     c0015538 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015526:	83 ec 0c             	sub    esp,0xc
c0015529:	68 3b 28 02 c0       	push   0xc002283b
c001552e:	e8 e8 c0 ff ff       	call   c001161b <KePanic(char const*)>
c0015533:	83 c4 10             	add    esp,0x10
c0015536:	eb 3d                	jmp    c0015575 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015538:	83 ec 0c             	sub    esp,0xc
c001553b:	55                   	push   ebp
c001553c:	e8 83 66 ff ff       	call   c000bbc4 <File::close()>
c0015541:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015544:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015547:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001554a:	59                   	pop    ecx
c001554b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001554f:	e8 72 25 ff ff       	call   c0007ac6 <free>
c0015554:	5b                   	pop    ebx
c0015555:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015559:	e8 68 25 ff ff       	call   c0007ac6 <free>
c001555e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015561:	e8 60 25 ff ff       	call   c0007ac6 <free>
c0015566:	5e                   	pop    esi
c0015567:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001556b:	e8 56 25 ff ff       	call   c0007ac6 <free>
c0015570:	83 c4 10             	add    esp,0x10
c0015573:	eb 21                	jmp    c0015596 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015575:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0015579:	e9 7c fd ff ff       	jmp    c00152fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c001557e:	83 ec 0c             	sub    esp,0xc
c0015581:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015585:	e8 3c 25 ff ff       	call   c0007ac6 <free>
c001558a:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001558e:	83 c4 10             	add    esp,0x10
c0015591:	e9 f1 fc ff ff       	jmp    c0015287 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0015596:	31 c0                	xor    eax,eax
c0015598:	eb 33                	jmp    c00155cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c001559a:	83 ec 0c             	sub    esp,0xc
c001559d:	55                   	push   ebp
c001559e:	e8 21 66 ff ff       	call   c000bbc4 <File::close()>
c00155a3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00155a6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00155a9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00155ac:	58                   	pop    eax
c00155ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00155b1:	e8 10 25 ff ff       	call   c0007ac6 <free>
c00155b6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00155b9:	e8 08 25 ff ff       	call   c0007ac6 <free>
c00155be:	5a                   	pop    edx
c00155bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155c3:	e8 fe 24 ff ff       	call   c0007ac6 <free>
c00155c8:	83 c4 10             	add    esp,0x10
c00155cb:	b0 01                	mov    al,0x1
c00155cd:	81 c4 5c 03 00 00    	add    esp,0x35c
c00155d3:	5b                   	pop    ebx
c00155d4:	5e                   	pop    esi
c00155d5:	5f                   	pop    edi
c00155d6:	5d                   	pop    ebp
c00155d7:	c3                   	ret    

c00155d8 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00155d8:	56                   	push   esi
c00155d9:	31 d2                	xor    edx,edx
c00155db:	53                   	push   ebx
c00155dc:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c00155e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00155e6:	39 d3                	cmp    ebx,edx
c00155e8:	7e 1b                	jle    c0015605 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00155ea:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c00155f1:	39 c8                	cmp    eax,ecx
c00155f3:	77 0d                	ja     c0015602 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00155f5:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c00155fc:	01 c6                	add    esi,eax
c00155fe:	39 ce                	cmp    esi,ecx
c0015600:	77 05                	ja     c0015607 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0015602:	42                   	inc    edx
c0015603:	eb e1                	jmp    c00155e6 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015605:	31 c0                	xor    eax,eax
c0015607:	5b                   	pop    ebx
c0015608:	5e                   	pop    esi
c0015609:	c3                   	ret    

c001560a <Thr::getDriverNameFromAddress(unsigned long)>:
c001560a:	53                   	push   ebx
c001560b:	31 c0                	xor    eax,eax
c001560d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015611:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c0015617:	39 c3                	cmp    ebx,eax
c0015619:	7e 22                	jle    c001563d <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001561b:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c0015622:	39 ca                	cmp    edx,ecx
c0015624:	77 14                	ja     c001563a <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015626:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c001562d:	39 ca                	cmp    edx,ecx
c001562f:	76 09                	jbe    c001563a <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015631:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c0015638:	eb 05                	jmp    c001563f <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001563a:	40                   	inc    eax
c001563b:	eb da                	jmp    c0015617 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001563d:	31 c0                	xor    eax,eax
c001563f:	5b                   	pop    ebx
c0015640:	c3                   	ret    

c0015641 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015641:	53                   	push   ebx
c0015642:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015646:	53                   	push   ebx
c0015647:	e8 8c ff ff ff       	call   c00155d8 <Thr::getDriverBaseFromAddress(unsigned long)>
c001564c:	5a                   	pop    edx
c001564d:	31 d2                	xor    edx,edx
c001564f:	85 c0                	test   eax,eax
c0015651:	74 04                	je     c0015657 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015653:	89 da                	mov    edx,ebx
c0015655:	29 c2                	sub    edx,eax
c0015657:	89 d0                	mov    eax,edx
c0015659:	5b                   	pop    ebx
c001565a:	c3                   	ret    

c001565b <Thr::loadDLL(char const*, bool)>:
c001565b:	55                   	push   ebp
c001565c:	57                   	push   edi
c001565d:	56                   	push   esi
c001565e:	53                   	push   ebx
c001565f:	81 ec 34 01 00 00    	sub    esp,0x134
c0015665:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001566c:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015673:	56                   	push   esi
c0015674:	68 53 28 02 c0       	push   0xc0022853
c0015679:	e8 c7 52 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001567e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015685:	e8 2c 24 ff ff       	call   c0007ab6 <malloc>
c001568a:	83 c4 0c             	add    esp,0xc
c001568d:	89 c3                	mov    ebx,eax
c001568f:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0015695:	56                   	push   esi
c0015696:	50                   	push   eax
c0015697:	e8 ac 64 ff ff       	call   c000bb48 <File::File(char const*, Process*)>
c001569c:	83 c4 10             	add    esp,0x10
c001569f:	85 db                	test   ebx,ebx
c00156a1:	75 3c                	jne    c00156df <Thr::loadDLL(char const*, bool)+0x84>
c00156a3:	89 f8                	mov    eax,edi
c00156a5:	84 c0                	test   al,al
c00156a7:	0f 84 d2 01 00 00    	je     c001587f <Thr::loadDLL(char const*, bool)+0x224>
c00156ad:	55                   	push   ebp
c00156ae:	55                   	push   ebp
c00156af:	68 64 28 02 c0       	push   0xc0022864
c00156b4:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00156b8:	55                   	push   ebp
c00156b9:	e8 82 af fe ff       	call   c0000640 <strcpy>
c00156be:	58                   	pop    eax
c00156bf:	5a                   	pop    edx
c00156c0:	56                   	push   esi
c00156c1:	55                   	push   ebp
c00156c2:	e8 79 b1 fe ff       	call   c0000840 <strcat>
c00156c7:	59                   	pop    ecx
c00156c8:	58                   	pop    eax
c00156c9:	68 77 28 02 c0       	push   0xc0022877
c00156ce:	55                   	push   ebp
c00156cf:	e8 6c b1 fe ff       	call   c0000840 <strcat>
c00156d4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00156d7:	e8 3f bf ff ff       	call   c001161b <KePanic(char const*)>
c00156dc:	83 c4 10             	add    esp,0x10
c00156df:	51                   	push   ecx
c00156e0:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00156e4:	50                   	push   eax
c00156e5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00156e9:	50                   	push   eax
c00156ea:	53                   	push   ebx
c00156eb:	e8 78 67 ff ff       	call   c000be68 <File::stat(unsigned long long*, bool*)>
c00156f0:	83 c4 10             	add    esp,0x10
c00156f3:	85 db                	test   ebx,ebx
c00156f5:	74 0c                	je     c0015703 <Thr::loadDLL(char const*, bool)+0xa8>
c00156f7:	83 ec 0c             	sub    esp,0xc
c00156fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00156fc:	53                   	push   ebx
c00156fd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015700:	83 c4 10             	add    esp,0x10
c0015703:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015708:	75 0a                	jne    c0015714 <Thr::loadDLL(char const*, bool)+0xb9>
c001570a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001570e:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015712:	75 3c                	jne    c0015750 <Thr::loadDLL(char const*, bool)+0xf5>
c0015714:	89 f8                	mov    eax,edi
c0015716:	84 c0                	test   al,al
c0015718:	0f 84 49 01 00 00    	je     c0015867 <Thr::loadDLL(char const*, bool)+0x20c>
c001571e:	51                   	push   ecx
c001571f:	51                   	push   ecx
c0015720:	68 64 28 02 c0       	push   0xc0022864
c0015725:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015729:	53                   	push   ebx
c001572a:	e8 11 af fe ff       	call   c0000640 <strcpy>
c001572f:	5d                   	pop    ebp
c0015730:	58                   	pop    eax
c0015731:	56                   	push   esi
c0015732:	53                   	push   ebx
c0015733:	e8 08 b1 fe ff       	call   c0000840 <strcat>
c0015738:	58                   	pop    eax
c0015739:	5a                   	pop    edx
c001573a:	68 77 28 02 c0       	push   0xc0022877
c001573f:	53                   	push   ebx
c0015740:	e8 fb b0 fe ff       	call   c0000840 <strcat>
c0015745:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015748:	e8 ce be ff ff       	call   c001161b <KePanic(char const*)>
c001574d:	83 c4 10             	add    esp,0x10
c0015750:	52                   	push   edx
c0015751:	6a 03                	push   0x3
c0015753:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015757:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001575b:	05 ff 0f 00 00       	add    eax,0xfff
c0015760:	83 d2 00             	adc    edx,0x0
c0015763:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015767:	50                   	push   eax
c0015768:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001576e:	e8 b1 46 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0015773:	59                   	pop    ecx
c0015774:	89 c3                	mov    ebx,eax
c0015776:	5d                   	pop    ebp
c0015777:	50                   	push   eax
c0015778:	68 b2 0d 02 c0       	push   0xc0020db2
c001577d:	e8 c3 51 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015782:	89 34 24             	mov    DWORD PTR [esp],esi
c0015785:	e8 e6 ad fe ff       	call   c0000570 <strlen>
c001578a:	8b 2d 00 bf 02 c0    	mov    ebp,DWORD PTR ds:0xc002bf00
c0015790:	40                   	inc    eax
c0015791:	89 04 24             	mov    DWORD PTR [esp],eax
c0015794:	e8 1d 23 ff ff       	call   c0007ab6 <malloc>
c0015799:	89 04 ad 20 c3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd3ce0],eax
c00157a0:	58                   	pop    eax
c00157a1:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c00157a6:	5a                   	pop    edx
c00157a7:	56                   	push   esi
c00157a8:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c00157af:	e8 8c ae fe ff       	call   c0000640 <strcpy>
c00157b4:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c00157b9:	8d 50 01             	lea    edx,[eax+0x1]
c00157bc:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c00157c3:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c00157c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00157cd:	83 c4 0c             	add    esp,0xc
c00157d0:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c00157d7:	6a 01                	push   0x1
c00157d9:	53                   	push   ebx
c00157da:	56                   	push   esi
c00157db:	e8 bf f6 ff ff       	call   c0014e9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00157e0:	83 c4 10             	add    esp,0x10
c00157e3:	0f b6 c0             	movzx  eax,al
c00157e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00157ea:	85 c0                	test   eax,eax
c00157ec:	0f 85 89 00 00 00    	jne    c001587b <Thr::loadDLL(char const*, bool)+0x220>
c00157f2:	89 f8                	mov    eax,edi
c00157f4:	84 c0                	test   al,al
c00157f6:	74 73                	je     c001586b <Thr::loadDLL(char const*, bool)+0x210>
c00157f8:	83 ec 0c             	sub    esp,0xc
c00157fb:	68 79 28 02 c0       	push   0xc0022879
c0015800:	e8 16 be ff ff       	call   c001161b <KePanic(char const*)>
c0015805:	83 c4 10             	add    esp,0x10
c0015808:	eb 61                	jmp    c001586b <Thr::loadDLL(char const*, bool)+0x210>
c001580a:	50                   	push   eax
c001580b:	50                   	push   eax
c001580c:	89 e8                	mov    eax,ebp
c001580e:	c1 e0 0c             	shl    eax,0xc
c0015811:	01 d8                	add    eax,ebx
c0015813:	50                   	push   eax
c0015814:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001581a:	e8 ed 40 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c001581f:	83 c4 10             	add    esp,0x10
c0015822:	8b 00                	mov    eax,DWORD PTR [eax]
c0015824:	a8 60                	test   al,0x60
c0015826:	75 11                	jne    c0015839 <Thr::loadDLL(char const*, bool)+0x1de>
c0015828:	83 ec 0c             	sub    esp,0xc
c001582b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015830:	50                   	push   eax
c0015831:	e8 20 25 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0015836:	83 c4 10             	add    esp,0x10
c0015839:	45                   	inc    ebp
c001583a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001583e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015842:	05 ff 0f 00 00       	add    eax,0xfff
c0015847:	bf 00 00 00 00       	mov    edi,0x0
c001584c:	83 d2 00             	adc    edx,0x0
c001584f:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015853:	c1 ea 0c             	shr    edx,0xc
c0015856:	39 c5                	cmp    ebp,eax
c0015858:	89 d1                	mov    ecx,edx
c001585a:	89 f8                	mov    eax,edi
c001585c:	19 c8                	sbb    eax,ecx
c001585e:	72 aa                	jb     c001580a <Thr::loadDLL(char const*, bool)+0x1af>
c0015860:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015865:	75 18                	jne    c001587f <Thr::loadDLL(char const*, bool)+0x224>
c0015867:	31 db                	xor    ebx,ebx
c0015869:	eb 14                	jmp    c001587f <Thr::loadDLL(char const*, bool)+0x224>
c001586b:	83 ec 0c             	sub    esp,0xc
c001586e:	68 98 28 02 c0       	push   0xc0022898
c0015873:	e8 a3 bd ff ff       	call   c001161b <KePanic(char const*)>
c0015878:	83 c4 10             	add    esp,0x10
c001587b:	31 ed                	xor    ebp,ebp
c001587d:	eb bb                	jmp    c001583a <Thr::loadDLL(char const*, bool)+0x1df>
c001587f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015885:	89 d8                	mov    eax,ebx
c0015887:	5b                   	pop    ebx
c0015888:	5e                   	pop    esi
c0015889:	5f                   	pop    edi
c001588a:	5d                   	pop    ebp
c001588b:	c3                   	ret    

c001588c <Thr::executeDLL(unsigned long, void*)>:
c001588c:	56                   	push   esi
c001588d:	53                   	push   ebx
c001588e:	52                   	push   edx
c001588f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015893:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015897:	85 db                	test   ebx,ebx
c0015899:	75 10                	jne    c00158ab <Thr::executeDLL(unsigned long, void*)+0x1f>
c001589b:	83 ec 0c             	sub    esp,0xc
c001589e:	68 b4 28 02 c0       	push   0xc00228b4
c00158a3:	e8 73 bd ff ff       	call   c001161b <KePanic(char const*)>
c00158a8:	83 c4 10             	add    esp,0x10
c00158ab:	50                   	push   eax
c00158ac:	50                   	push   eax
c00158ad:	53                   	push   ebx
c00158ae:	68 de 28 02 c0       	push   0xc00228de
c00158b3:	e8 8d 50 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00158b8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00158bc:	89 d8                	mov    eax,ebx
c00158be:	83 c4 14             	add    esp,0x14
c00158c1:	5b                   	pop    ebx
c00158c2:	5e                   	pop    esi
c00158c3:	ff e0                	jmp    eax
c00158c5:	66 90                	xchg   ax,ax
c00158c7:	90                   	nop

c00158c8 <userModeEntryPoint(void*)>:
c00158c8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00158cd:	83 e8 01             	sub    eax,0x1
c00158d0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00158d5:	75 01                	jne    c00158d8 <userModeEntryPoint(void*)+0x10>
c00158d7:	fb                   	sti    
c00158d8:	fb                   	sti    
c00158d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158de:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158e1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00158e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00158eb:	e9 4f a9 fe ff       	jmp    c000023f <goToUsermode>

c00158f0 <changeTSS>:
c00158f0:	83 ec 14             	sub    esp,0x14
c00158f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158f8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158fb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015900:	c1 e2 15             	shl    edx,0x15
c0015903:	29 d0                	sub    eax,edx
c0015905:	50                   	push   eax
c0015906:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001590b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015911:	05 7c 11 00 00       	add    eax,0x117c
c0015916:	50                   	push   eax
c0015917:	e8 38 36 ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c001591c:	83 c4 1c             	add    esp,0x1c
c001591f:	c3                   	ret    

c0015920 <switchToThread(ThreadControlBlock*)>:
c0015920:	57                   	push   edi
c0015921:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0015927:	56                   	push   esi
c0015928:	85 c9                	test   ecx,ecx
c001592a:	53                   	push   ebx
c001592b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001592f:	0f 85 8b 00 00 00    	jne    c00159c0 <switchToThread(ThreadControlBlock*)+0xa0>
c0015935:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015939:	81 fa ff 00 00 00    	cmp    edx,0xff
c001593f:	74 7b                	je     c00159bc <switchToThread(ThreadControlBlock*)+0x9c>
c0015941:	b8 00 04 00 00       	mov    eax,0x400
c0015946:	29 d0                	sub    eax,edx
c0015948:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001594b:	d1 f8                	sar    eax,1
c001594d:	01 d0                	add    eax,edx
c001594f:	90                   	nop
c0015950:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015953:	e8 1e 28 00 00       	call   c0018176 <HalQueryPerformanceCounter()>
c0015958:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c001595d:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c0015963:	89 c6                	mov    esi,eax
c0015965:	89 d7                	mov    edi,edx
c0015967:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c001596d:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c0015972:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c0015978:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c001597e:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c0015984:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001598a:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c0015990:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015993:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015996:	01 c6                	add    esi,eax
c0015998:	11 d7                	adc    edi,edx
c001599a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001599d:	83 ec 0c             	sub    esp,0xc
c00159a0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00159a3:	53                   	push   ebx
c00159a4:	e8 ce a8 fe ff       	call   c0000277 <switchToThreadASM>
c00159a9:	0f 20 c0             	mov    eax,cr0
c00159ac:	83 c8 08             	or     eax,0x8
c00159af:	0f 22 c0             	mov    cr0,eax
c00159b2:	83 c4 10             	add    esp,0x10
c00159b5:	5b                   	pop    ebx
c00159b6:	5e                   	pop    esi
c00159b7:	5f                   	pop    edi
c00159b8:	c3                   	ret    
c00159b9:	8d 76 00             	lea    esi,[esi+0x0]
c00159bc:	31 c0                	xor    eax,eax
c00159be:	eb 90                	jmp    c0015950 <switchToThread(ThreadControlBlock*)+0x30>
c00159c0:	5b                   	pop    ebx
c00159c1:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c00159cb:	5e                   	pop    esi
c00159cc:	5f                   	pop    edi
c00159cd:	c3                   	ret    
c00159ce:	66 90                	xchg   ax,ax

c00159d0 <Process::addArgs(char**)>:
c00159d0:	57                   	push   edi
c00159d1:	56                   	push   esi
c00159d2:	53                   	push   ebx
c00159d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00159d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00159db:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00159e5:	85 ff                	test   edi,edi
c00159e7:	74 4f                	je     c0015a38 <Process::addArgs(char**)+0x68>
c00159e9:	8b 07                	mov    eax,DWORD PTR [edi]
c00159eb:	85 c0                	test   eax,eax
c00159ed:	74 49                	je     c0015a38 <Process::addArgs(char**)+0x68>
c00159ef:	31 db                	xor    ebx,ebx
c00159f1:	8d 76 00             	lea    esi,[esi+0x0]
c00159f4:	83 ec 0c             	sub    esp,0xc
c00159f7:	50                   	push   eax
c00159f8:	e8 73 ab fe ff       	call   c0000570 <strlen>
c00159fd:	83 c0 01             	add    eax,0x1
c0015a00:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a03:	e8 ae 20 ff ff       	call   c0007ab6 <malloc>
c0015a08:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0015a0f:	5a                   	pop    edx
c0015a10:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0015a13:	59                   	pop    ecx
c0015a14:	83 c3 01             	add    ebx,0x1
c0015a17:	52                   	push   edx
c0015a18:	50                   	push   eax
c0015a19:	e8 22 ac fe ff       	call   c0000640 <strcpy>
c0015a1e:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0015a24:	83 c4 10             	add    esp,0x10
c0015a27:	83 c1 01             	add    ecx,0x1
c0015a2a:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0015a30:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015a33:	85 c0                	test   eax,eax
c0015a35:	75 bd                	jne    c00159f4 <Process::addArgs(char**)+0x24>
c0015a37:	90                   	nop
c0015a38:	5b                   	pop    ebx
c0015a39:	5e                   	pop    esi
c0015a3a:	5f                   	pop    edi
c0015a3b:	c3                   	ret    

c0015a3c <Process::Process(char const*, Process*, char**)>:
c0015a3c:	56                   	push   esi
c0015a3d:	53                   	push   ebx
c0015a3e:	83 ec 14             	sub    esp,0x14
c0015a41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a45:	05 0c 02 00 00       	add    eax,0x20c
c0015a4a:	bb 07 00 00 00       	mov    ebx,0x7
c0015a4f:	89 c6                	mov    esi,eax
c0015a51:	8d 76 00             	lea    esi,[esi+0x0]
c0015a54:	85 db                	test   ebx,ebx
c0015a56:	78 14                	js     c0015a6c <Process::Process(char const*, Process*, char**)+0x30>
c0015a58:	83 ec 0c             	sub    esp,0xc
c0015a5b:	56                   	push   esi
c0015a5c:	e8 e7 a5 00 00       	call   c0020048 <ThreadControlBlock::ThreadControlBlock()>
c0015a61:	83 c4 10             	add    esp,0x10
c0015a64:	83 c6 5f             	add    esi,0x5f
c0015a67:	83 eb 01             	sub    ebx,0x1
c0015a6a:	eb e8                	jmp    c0015a54 <Process::Process(char const*, Process*, char**)+0x18>
c0015a6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a70:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015a77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a7b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015a82:	83 ec 0c             	sub    esp,0xc
c0015a85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a89:	e8 82 b9 ff ff       	call   c0011410 <KeNewProcessEnv(Process*)>
c0015a8e:	83 c4 10             	add    esp,0x10
c0015a91:	89 c2                	mov    edx,eax
c0015a93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a97:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015a9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aa1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015aaa:	a1 00 3f 02 c0       	mov    eax,ds:0xc0023f00
c0015aaf:	8d 50 01             	lea    edx,[eax+0x1]
c0015ab2:	89 15 00 3f 02 c0    	mov    DWORD PTR ds:0xc0023f00,edx
c0015ab8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015abc:	89 02                	mov    DWORD PTR [edx],eax
c0015abe:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015ac6:	83 ec 0c             	sub    esp,0xc
c0015ac9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015acd:	e8 e4 1f ff ff       	call   c0007ab6 <malloc>
c0015ad2:	83 c4 10             	add    esp,0x10
c0015ad5:	89 c3                	mov    ebx,eax
c0015ad7:	83 ec 08             	sub    esp,0x8
c0015ada:	6a 00                	push   0x0
c0015adc:	53                   	push   ebx
c0015add:	e8 86 45 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015ae2:	83 c4 10             	add    esp,0x10
c0015ae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ae9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015aef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015af3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015afd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b01:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015b05:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015b0b:	e8 26 bf ff ff       	call   c0011a36 <KeInitSignals()>
c0015b10:	89 c2                	mov    edx,eax
c0015b12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b16:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015b1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b20:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b26:	85 c0                	test   eax,eax
c0015b28:	74 42                	je     c0015b6c <Process::Process(char const*, Process*, char**)+0x130>
c0015b2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b2e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b34:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015b3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b3e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015b44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b48:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b4e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015b54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b58:	05 0c 01 00 00       	add    eax,0x10c
c0015b5d:	83 ec 08             	sub    esp,0x8
c0015b60:	52                   	push   edx
c0015b61:	50                   	push   eax
c0015b62:	e8 d9 aa fe ff       	call   c0000640 <strcpy>
c0015b67:	83 c4 10             	add    esp,0x10
c0015b6a:	eb 64                	jmp    c0015bd0 <Process::Process(char const*, Process*, char**)+0x194>
c0015b6c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015b74:	83 ec 0c             	sub    esp,0xc
c0015b77:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015b7b:	e8 36 1f ff ff       	call   c0007ab6 <malloc>
c0015b80:	83 c4 10             	add    esp,0x10
c0015b83:	89 c3                	mov    ebx,eax
c0015b85:	83 ec 08             	sub    esp,0x8
c0015b88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b8c:	53                   	push   ebx
c0015b8d:	e8 d4 30 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015b92:	83 c4 10             	add    esp,0x10
c0015b95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b99:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015b9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ba3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015ba9:	83 ec 0c             	sub    esp,0xc
c0015bac:	50                   	push   eax
c0015bad:	e8 52 29 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015bb2:	83 c4 10             	add    esp,0x10
c0015bb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bb9:	05 0c 01 00 00       	add    eax,0x10c
c0015bbe:	83 ec 08             	sub    esp,0x8
c0015bc1:	68 fd 28 02 c0       	push   0xc00228fd
c0015bc6:	50                   	push   eax
c0015bc7:	e8 74 aa fe ff       	call   c0000640 <strcpy>
c0015bcc:	83 c4 10             	add    esp,0x10
c0015bcf:	90                   	nop
c0015bd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bd4:	83 c0 0c             	add    eax,0xc
c0015bd7:	83 ec 08             	sub    esp,0x8
c0015bda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bde:	50                   	push   eax
c0015bdf:	e8 5c aa fe ff       	call   c0000640 <strcpy>
c0015be4:	83 c4 10             	add    esp,0x10
c0015be7:	83 ec 08             	sub    esp,0x8
c0015bea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015bee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bf2:	e8 d9 fd ff ff       	call   c00159d0 <Process::addArgs(char**)>
c0015bf7:	83 c4 10             	add    esp,0x10
c0015bfa:	83 ec 08             	sub    esp,0x8
c0015bfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c05:	e8 63 ed ff ff       	call   c001496d <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015c0a:	83 c4 10             	add    esp,0x10
c0015c0d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015c11:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015c15:	83 f0 01             	xor    eax,0x1
c0015c18:	88 c2                	mov    dl,al
c0015c1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c1e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015c24:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015c29:	83 ec 04             	sub    esp,0x4
c0015c2c:	50                   	push   eax
c0015c2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c31:	68 54 29 02 c0       	push   0xc0022954
c0015c36:	e8 0a 4d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015c3b:	83 c4 10             	add    esp,0x10
c0015c3e:	90                   	nop
c0015c3f:	83 c4 14             	add    esp,0x14
c0015c42:	5b                   	pop    ebx
c0015c43:	5e                   	pop    esi
c0015c44:	c3                   	ret    
c0015c45:	90                   	nop
c0015c46:	66 90                	xchg   ax,ax

c0015c48 <Process::Process(bool, char const*, Process*, char**)>:
c0015c48:	56                   	push   esi
c0015c49:	53                   	push   ebx
c0015c4a:	83 ec 24             	sub    esp,0x24
c0015c4d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015c51:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015c55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c59:	05 0c 02 00 00       	add    eax,0x20c
c0015c5e:	bb 07 00 00 00       	mov    ebx,0x7
c0015c63:	89 c6                	mov    esi,eax
c0015c65:	8d 76 00             	lea    esi,[esi+0x0]
c0015c68:	85 db                	test   ebx,ebx
c0015c6a:	78 14                	js     c0015c80 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015c6c:	83 ec 0c             	sub    esp,0xc
c0015c6f:	56                   	push   esi
c0015c70:	e8 d3 a3 00 00       	call   c0020048 <ThreadControlBlock::ThreadControlBlock()>
c0015c75:	83 c4 10             	add    esp,0x10
c0015c78:	83 c6 5f             	add    esi,0x5f
c0015c7b:	83 eb 01             	sub    ebx,0x1
c0015c7e:	eb e8                	jmp    c0015c68 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015c80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c84:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015c8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c8f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015c96:	83 ec 0c             	sub    esp,0xc
c0015c99:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015c9d:	e8 6e b7 ff ff       	call   c0011410 <KeNewProcessEnv(Process*)>
c0015ca2:	83 c4 10             	add    esp,0x10
c0015ca5:	89 c2                	mov    edx,eax
c0015ca7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cab:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015cb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cb5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015cbe:	a1 00 3f 02 c0       	mov    eax,ds:0xc0023f00
c0015cc3:	8d 50 01             	lea    edx,[eax+0x1]
c0015cc6:	89 15 00 3f 02 c0    	mov    DWORD PTR ds:0xc0023f00,edx
c0015ccc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015cd0:	89 02                	mov    DWORD PTR [edx],eax
c0015cd2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015cda:	83 ec 0c             	sub    esp,0xc
c0015cdd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015ce1:	e8 d0 1d ff ff       	call   c0007ab6 <malloc>
c0015ce6:	83 c4 10             	add    esp,0x10
c0015ce9:	89 c3                	mov    ebx,eax
c0015ceb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015cf0:	83 ec 08             	sub    esp,0x8
c0015cf3:	50                   	push   eax
c0015cf4:	53                   	push   ebx
c0015cf5:	e8 6e 43 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015cfa:	83 c4 10             	add    esp,0x10
c0015cfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d01:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015d07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d0b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015d15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d19:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015d1d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015d23:	e8 0e bd ff ff       	call   c0011a36 <KeInitSignals()>
c0015d28:	89 c2                	mov    edx,eax
c0015d2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d2e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015d34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d38:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d3e:	85 c0                	test   eax,eax
c0015d40:	74 42                	je     c0015d84 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015d42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d46:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d4c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015d52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d56:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015d5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d60:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d66:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015d6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d70:	05 0c 01 00 00       	add    eax,0x10c
c0015d75:	83 ec 08             	sub    esp,0x8
c0015d78:	52                   	push   edx
c0015d79:	50                   	push   eax
c0015d7a:	e8 c1 a8 fe ff       	call   c0000640 <strcpy>
c0015d7f:	83 c4 10             	add    esp,0x10
c0015d82:	eb 64                	jmp    c0015de8 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015d84:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015d8c:	83 ec 0c             	sub    esp,0xc
c0015d8f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015d93:	e8 1e 1d ff ff       	call   c0007ab6 <malloc>
c0015d98:	83 c4 10             	add    esp,0x10
c0015d9b:	89 c3                	mov    ebx,eax
c0015d9d:	83 ec 08             	sub    esp,0x8
c0015da0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015da4:	53                   	push   ebx
c0015da5:	e8 bc 2e ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015daa:	83 c4 10             	add    esp,0x10
c0015dad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015db1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015db7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dbb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015dc1:	83 ec 0c             	sub    esp,0xc
c0015dc4:	50                   	push   eax
c0015dc5:	e8 3a 27 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015dca:	83 c4 10             	add    esp,0x10
c0015dcd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dd1:	05 0c 01 00 00       	add    eax,0x10c
c0015dd6:	83 ec 08             	sub    esp,0x8
c0015dd9:	68 fd 28 02 c0       	push   0xc00228fd
c0015dde:	50                   	push   eax
c0015ddf:	e8 5c a8 fe ff       	call   c0000640 <strcpy>
c0015de4:	83 c4 10             	add    esp,0x10
c0015de7:	90                   	nop
c0015de8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dec:	83 c0 0c             	add    eax,0xc
c0015def:	83 ec 08             	sub    esp,0x8
c0015df2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015df6:	50                   	push   eax
c0015df7:	e8 44 a8 fe ff       	call   c0000640 <strcpy>
c0015dfc:	83 c4 10             	add    esp,0x10
c0015dff:	83 ec 08             	sub    esp,0x8
c0015e02:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015e06:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015e0a:	e8 c1 fb ff ff       	call   c00159d0 <Process::addArgs(char**)>
c0015e0f:	83 c4 10             	add    esp,0x10
c0015e12:	90                   	nop
c0015e13:	83 c4 24             	add    esp,0x24
c0015e16:	5b                   	pop    ebx
c0015e17:	5e                   	pop    esi
c0015e18:	c3                   	ret    
c0015e19:	8d 76 00             	lea    esi,[esi+0x0]

c0015e1c <taskStartupFunction>:
c0015e1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e21:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015e24:	c3                   	ret    
c0015e25:	90                   	nop
c0015e26:	66 90                	xchg   ax,ax

c0015e28 <Semaphore::Semaphore(int)>:
c0015e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015e30:	89 10                	mov    DWORD PTR [eax],edx
c0015e32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e36:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015e3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e41:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e4c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015e53:	90                   	nop
c0015e54:	c3                   	ret    
c0015e55:	90                   	nop
c0015e56:	66 90                	xchg   ax,ax

c0015e58 <Mutex::Mutex()>:
c0015e58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e5c:	6a 01                	push   0x1
c0015e5e:	50                   	push   eax
c0015e5f:	e8 c4 ff ff ff       	call   c0015e28 <Semaphore::Semaphore(int)>
c0015e64:	83 c4 08             	add    esp,0x8
c0015e67:	90                   	nop
c0015e68:	c3                   	ret    
c0015e69:	90                   	nop
c0015e6a:	66 90                	xchg   ax,ax

c0015e6c <Process::createThread(void (*)(void*), void*, int)>:
c0015e6c:	57                   	push   edi
c0015e6d:	31 c9                	xor    ecx,ecx
c0015e6f:	56                   	push   esi
c0015e70:	53                   	push   ebx
c0015e71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e75:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015e7c:	89 f2                	mov    edx,esi
c0015e7e:	66 90                	xchg   ax,ax
c0015e80:	0f b7 c2             	movzx  eax,dx
c0015e83:	80 e2 01             	and    dl,0x1
c0015e86:	74 14                	je     c0015e9c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015e88:	d1 f8                	sar    eax,1
c0015e8a:	83 c1 01             	add    ecx,0x1
c0015e8d:	89 c2                	mov    edx,eax
c0015e8f:	83 f9 10             	cmp    ecx,0x10
c0015e92:	75 ec                	jne    c0015e80 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015e94:	31 db                	xor    ebx,ebx
c0015e96:	89 d8                	mov    eax,ebx
c0015e98:	5b                   	pop    ebx
c0015e99:	5e                   	pop    esi
c0015e9a:	5f                   	pop    edi
c0015e9b:	c3                   	ret    
c0015e9c:	b8 01 00 00 00       	mov    eax,0x1
c0015ea1:	d3 e0                	shl    eax,cl
c0015ea3:	09 c6                	or     esi,eax
c0015ea5:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015ea8:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015eaf:	01 c0                	add    eax,eax
c0015eb1:	01 c8                	add    eax,ecx
c0015eb3:	8d 04 80             	lea    eax,[eax+eax*4]
c0015eb6:	01 d8                	add    eax,ebx
c0015eb8:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015ebf:	75 0b                	jne    c0015ecc <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015ec1:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015ecb:	90                   	nop
c0015ecc:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015ed2:	83 ec 0c             	sub    esp,0xc
c0015ed5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015ed8:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015edb:	01 c0                	add    eax,eax
c0015edd:	01 c8                	add    eax,ecx
c0015edf:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015ee2:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015ee5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015eeb:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015ef1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015ef5:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015efb:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015f01:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015f07:	89 ca                	mov    edx,ecx
c0015f09:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015f10:	f7 da                	neg    edx
c0015f12:	c1 e2 15             	shl    edx,0x15
c0015f15:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015f1b:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015f21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015f25:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015f2f:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015f35:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f39:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015f3f:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015f49:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015f53:	68 00 01 00 00       	push   0x100
c0015f58:	e8 59 1b ff ff       	call   c0007ab6 <malloc>
c0015f5d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015f60:	58                   	pop    eax
c0015f61:	5a                   	pop    edx
c0015f62:	53                   	push   ebx
c0015f63:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f68:	e8 73 9e 00 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015f6d:	83 c4 10             	add    esp,0x10
c0015f70:	89 d8                	mov    eax,ebx
c0015f72:	5b                   	pop    ebx
c0015f73:	5e                   	pop    esi
c0015f74:	5f                   	pop    edi
c0015f75:	c3                   	ret    
c0015f76:	66 90                	xchg   ax,ax

c0015f78 <Process::createUserThread()>:
c0015f78:	83 ec 0c             	sub    esp,0xc
c0015f7b:	68 80 00 00 00       	push   0x80
c0015f80:	6a 00                	push   0x0
c0015f82:	68 c8 58 01 c0       	push   0xc00158c8
c0015f87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f8b:	50                   	push   eax
c0015f8c:	e8 db fe ff ff       	call   c0015e6c <Process::createThread(void (*)(void*), void*, int)>
c0015f91:	83 c4 1c             	add    esp,0x1c
c0015f94:	c3                   	ret    
c0015f95:	8d 76 00             	lea    esi,[esi+0x0]

c0015f98 <setupMultitasking(void (*)())>:
c0015f98:	56                   	push   esi
c0015f99:	53                   	push   ebx
c0015f9a:	83 ec 04             	sub    esp,0x4
c0015f9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015fa1:	eb 11                	jmp    c0015fb4 <setupMultitasking(void (*)())+0x1c>
c0015fa3:	90                   	nop
c0015fa4:	83 ec 0c             	sub    esp,0xc
c0015fa7:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015fac:	e8 73 9d 00 00       	call   c001fd24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015fb1:	83 c4 10             	add    esp,0x10
c0015fb4:	83 ec 0c             	sub    esp,0xc
c0015fb7:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015fbc:	e8 3f 9d 00 00       	call   c001fd00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015fc1:	83 c4 10             	add    esp,0x10
c0015fc4:	84 c0                	test   al,al
c0015fc6:	74 dc                	je     c0015fa4 <setupMultitasking(void (*)())+0xc>
c0015fc8:	83 ec 0c             	sub    esp,0xc
c0015fcb:	68 24 07 00 00       	push   0x724
c0015fd0:	e8 e1 1a ff ff       	call   c0007ab6 <malloc>
c0015fd5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015fdc:	89 c3                	mov    ebx,eax
c0015fde:	6a 00                	push   0x0
c0015fe0:	68 01 29 02 c0       	push   0xc0022901
c0015fe5:	6a 01                	push   0x1
c0015fe7:	50                   	push   eax
c0015fe8:	e8 5b fc ff ff       	call   c0015c48 <Process::Process(bool, char const*, Process*, char**)>
c0015fed:	83 c4 14             	add    esp,0x14
c0015ff0:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015ff6:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c0015ffc:	50                   	push   eax
c0015ffd:	e8 57 27 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0016002:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0016009:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0016013:	83 c8 01             	or     eax,0x1
c0016016:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c001601d:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0016023:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016026:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0016030:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016036:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001603c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016046:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0016050:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001605a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016060:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001606a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016070:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001607a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016081:	e8 30 1a ff ff       	call   c0007ab6 <malloc>
c0016086:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c001608c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016092:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016098:	5a                   	pop    edx
c0016099:	59                   	pop    ecx
c001609a:	68 fd 28 02 c0       	push   0xc00228fd
c001609f:	50                   	push   eax
c00160a0:	e8 9b a5 fe ff       	call   c0000640 <strcpy>
c00160a5:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00160ac:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00160b0:	83 c4 14             	add    esp,0x14
c00160b3:	5b                   	pop    ebx
c00160b4:	5e                   	pop    esi
c00160b5:	e9 af a1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00160ba:	66 90                	xchg   ax,ax

c00160bc <schedule()>:
c00160bc:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c00160c2:	85 d2                	test   edx,edx
c00160c4:	74 0e                	je     c00160d4 <schedule()+0x18>
c00160c6:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c00160d0:	c3                   	ret    
c00160d1:	8d 76 00             	lea    esi,[esi+0x0]
c00160d4:	53                   	push   ebx
c00160d5:	83 ec 14             	sub    esp,0x14
c00160d8:	68 e4 c6 02 c0       	push   0xc002c6e4
c00160dd:	e8 1e 9c 00 00       	call   c001fd00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00160e2:	83 c4 10             	add    esp,0x10
c00160e5:	84 c0                	test   al,al
c00160e7:	75 3f                	jne    c0016128 <schedule()+0x6c>
c00160e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160ee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00160f1:	83 fa 01             	cmp    edx,0x1
c00160f4:	74 3a                	je     c0016130 <schedule()+0x74>
c00160f6:	66 90                	xchg   ax,ax
c00160f8:	83 ec 0c             	sub    esp,0xc
c00160fb:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016100:	e8 17 9c 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016105:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c001610c:	89 c3                	mov    ebx,eax
c001610e:	e8 11 9c 00 00       	call   c001fd24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016113:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001611a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001611d:	e8 fe f7 ff ff       	call   c0015920 <switchToThread(ThreadControlBlock*)>
c0016122:	83 c4 10             	add    esp,0x10
c0016125:	8d 76 00             	lea    esi,[esi+0x0]
c0016128:	83 c4 08             	add    esp,0x8
c001612b:	5b                   	pop    ebx
c001612c:	c3                   	ret    
c001612d:	8d 76 00             	lea    esi,[esi+0x0]
c0016130:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016137:	83 ec 08             	sub    esp,0x8
c001613a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001613f:	50                   	push   eax
c0016140:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016145:	e8 96 9c 00 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001614a:	83 c4 10             	add    esp,0x10
c001614d:	eb a9                	jmp    c00160f8 <schedule()+0x3c>
c001614f:	90                   	nop

c0016150 <Semaphore::tryAcquire()>:
c0016150:	53                   	push   ebx
c0016151:	83 ec 08             	sub    esp,0x8
c0016154:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016158:	fa                   	cli    
c0016159:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001615e:	8d 50 01             	lea    edx,[eax+0x1]
c0016161:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016167:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c001616d:	8d 5a 01             	lea    ebx,[edx+0x1]
c0016170:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c0016176:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0016179:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001617b:	7c 33                	jl     c00161b0 <Semaphore::tryAcquire()+0x60>
c001617d:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c0016183:	85 d2                	test   edx,edx
c0016185:	75 0d                	jne    c0016194 <Semaphore::tryAcquire()+0x44>
c0016187:	8b 15 c0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c0
c001618d:	85 d2                	test   edx,edx
c001618f:	75 6f                	jne    c0016200 <Semaphore::tryAcquire()+0xb0>
c0016191:	8d 76 00             	lea    esi,[esi+0x0]
c0016194:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016199:	85 c0                	test   eax,eax
c001619b:	74 0b                	je     c00161a8 <Semaphore::tryAcquire()+0x58>
c001619d:	8d 76 00             	lea    esi,[esi+0x0]
c00161a0:	31 c0                	xor    eax,eax
c00161a2:	83 c4 08             	add    esp,0x8
c00161a5:	5b                   	pop    ebx
c00161a6:	c3                   	ret    
c00161a7:	90                   	nop
c00161a8:	fb                   	sti    
c00161a9:	83 c4 08             	add    esp,0x8
c00161ac:	5b                   	pop    ebx
c00161ad:	c3                   	ret    
c00161ae:	66 90                	xchg   ax,ax
c00161b0:	83 c3 01             	add    ebx,0x1
c00161b3:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c00161b9:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00161bc:	85 d2                	test   edx,edx
c00161be:	75 24                	jne    c00161e4 <Semaphore::tryAcquire()+0x94>
c00161c0:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c00161c6:	85 c9                	test   ecx,ecx
c00161c8:	74 1a                	je     c00161e4 <Semaphore::tryAcquire()+0x94>
c00161ca:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00161d4:	e8 e3 fe ff ff       	call   c00160bc <schedule()>
c00161d9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00161de:	83 e8 01             	sub    eax,0x1
c00161e1:	8d 76 00             	lea    esi,[esi+0x0]
c00161e4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00161e9:	85 c0                	test   eax,eax
c00161eb:	75 0b                	jne    c00161f8 <Semaphore::tryAcquire()+0xa8>
c00161ed:	fb                   	sti    
c00161ee:	b0 01                	mov    al,0x1
c00161f0:	83 c4 08             	add    esp,0x8
c00161f3:	5b                   	pop    ebx
c00161f4:	c3                   	ret    
c00161f5:	8d 76 00             	lea    esi,[esi+0x0]
c00161f8:	b0 01                	mov    al,0x1
c00161fa:	83 c4 08             	add    esp,0x8
c00161fd:	5b                   	pop    ebx
c00161fe:	c3                   	ret    
c00161ff:	90                   	nop
c0016200:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001620a:	e8 ad fe ff ff       	call   c00160bc <schedule()>
c001620f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016214:	83 e8 01             	sub    eax,0x1
c0016217:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001621c:	85 c0                	test   eax,eax
c001621e:	75 80                	jne    c00161a0 <Semaphore::tryAcquire()+0x50>
c0016220:	eb 86                	jmp    c00161a8 <Semaphore::tryAcquire()+0x58>
c0016222:	66 90                	xchg   ax,ax

c0016224 <Semaphore::assertLocked(char const*)>:
c0016224:	83 ec 0c             	sub    esp,0xc
c0016227:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001622b:	fa                   	cli    
c001622c:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0016232:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016237:	83 c1 01             	add    ecx,0x1
c001623a:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0016240:	8d 48 01             	lea    ecx,[eax+0x1]
c0016243:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016249:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001624b:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001624e:	7c 28                	jl     c0016278 <Semaphore::assertLocked(char const*)+0x54>
c0016250:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016255:	85 c0                	test   eax,eax
c0016257:	75 0b                	jne    c0016264 <Semaphore::assertLocked(char const*)+0x40>
c0016259:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001625e:	85 c0                	test   eax,eax
c0016260:	75 32                	jne    c0016294 <Semaphore::assertLocked(char const*)+0x70>
c0016262:	66 90                	xchg   ax,ax
c0016264:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016269:	83 e8 01             	sub    eax,0x1
c001626c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016271:	75 01                	jne    c0016274 <Semaphore::assertLocked(char const*)+0x50>
c0016273:	fb                   	sti    
c0016274:	83 c4 0c             	add    esp,0xc
c0016277:	c3                   	ret    
c0016278:	83 ec 0c             	sub    esp,0xc
c001627b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001627f:	52                   	push   edx
c0016280:	e8 96 b3 ff ff       	call   c001161b <KePanic(char const*)>
c0016285:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001628a:	83 c4 10             	add    esp,0x10
c001628d:	83 e8 01             	sub    eax,0x1
c0016290:	eb be                	jmp    c0016250 <Semaphore::assertLocked(char const*)+0x2c>
c0016292:	66 90                	xchg   ax,ax
c0016294:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001629e:	e8 19 fe ff ff       	call   c00160bc <schedule()>
c00162a3:	eb bf                	jmp    c0016264 <Semaphore::assertLocked(char const*)+0x40>
c00162a5:	8d 76 00             	lea    esi,[esi+0x0]

c00162a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00162a8:	83 ec 0c             	sub    esp,0xc
c00162ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162b4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00162b7:	e8 00 fe ff ff       	call   c00160bc <schedule()>
c00162bc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162c1:	83 e8 01             	sub    eax,0x1
c00162c4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162c9:	75 01                	jne    c00162cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00162cb:	fb                   	sti    
c00162cc:	83 c4 0c             	add    esp,0xc
c00162cf:	c3                   	ret    

c00162d0 <blockTask(TaskState)>:
c00162d0:	83 ec 0c             	sub    esp,0xc
c00162d3:	fa                   	cli    
c00162d4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162dd:	83 c0 01             	add    eax,0x1
c00162e0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162ea:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00162ed:	e8 ca fd ff ff       	call   c00160bc <schedule()>
c00162f2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162f7:	83 e8 01             	sub    eax,0x1
c00162fa:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162ff:	75 03                	jne    c0016304 <blockTask(TaskState)+0x34>
c0016301:	fb                   	sti    
c0016302:	66 90                	xchg   ax,ax
c0016304:	83 c4 0c             	add    esp,0xc
c0016307:	c3                   	ret    

c0016308 <waitTask(int, int*, int)>:
c0016308:	83 ec 18             	sub    esp,0x18
c001630b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016310:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016314:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0016317:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001631b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016320:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016323:	6a 07                	push   0x7
c0016325:	e8 a6 ff ff ff       	call   c00162d0 <blockTask(TaskState)>
c001632a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001632f:	83 c4 10             	add    esp,0x10
c0016332:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016335:	85 d2                	test   edx,edx
c0016337:	74 0b                	je     c0016344 <waitTask(int, int*, int)+0x3c>
c0016339:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001633c:	89 02                	mov    DWORD PTR [edx],eax
c001633e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016343:	90                   	nop
c0016344:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016347:	83 c4 0c             	add    esp,0xc
c001634a:	c3                   	ret    
c001634b:	90                   	nop

c001634c <milliTenthSleepUntil(unsigned int)>:
c001634c:	83 ec 0c             	sub    esp,0xc
c001634f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016353:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c0016359:	76 05                	jbe    c0016360 <milliTenthSleepUntil(unsigned int)+0x14>
c001635b:	90                   	nop
c001635c:	83 c4 0c             	add    esp,0xc
c001635f:	c3                   	ret    
c0016360:	fa                   	cli    
c0016361:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016367:	83 ec 08             	sub    esp,0x8
c001636a:	83 c2 01             	add    edx,0x1
c001636d:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016373:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016379:	83 c1 01             	add    ecx,0x1
c001637c:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016382:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016388:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001638b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016390:	50                   	push   eax
c0016391:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016396:	e8 45 9a 00 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001639b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00163a2:	e8 29 ff ff ff       	call   c00162d0 <blockTask(TaskState)>
c00163a7:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00163ac:	83 c4 10             	add    esp,0x10
c00163af:	83 e8 01             	sub    eax,0x1
c00163b2:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00163b7:	85 c0                	test   eax,eax
c00163b9:	75 09                	jne    c00163c4 <milliTenthSleepUntil(unsigned int)+0x78>
c00163bb:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00163c0:	85 c0                	test   eax,eax
c00163c2:	75 14                	jne    c00163d8 <milliTenthSleepUntil(unsigned int)+0x8c>
c00163c4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163c9:	83 e8 01             	sub    eax,0x1
c00163cc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163d1:	75 89                	jne    c001635c <milliTenthSleepUntil(unsigned int)+0x10>
c00163d3:	fb                   	sti    
c00163d4:	83 c4 0c             	add    esp,0xc
c00163d7:	c3                   	ret    
c00163d8:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00163e2:	e8 d5 fc ff ff       	call   c00160bc <schedule()>
c00163e7:	eb db                	jmp    c00163c4 <milliTenthSleepUntil(unsigned int)+0x78>
c00163e9:	8d 76 00             	lea    esi,[esi+0x0]

c00163ec <milliTenthSleep(unsigned int)>:
c00163ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00163f0:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c00163f5:	01 c2                	add    edx,eax
c00163f7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00163fb:	e9 4c ff ff ff       	jmp    c001634c <milliTenthSleepUntil(unsigned int)>

c0016400 <sleep(unsigned int)>:
c0016400:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016404:	8d 04 80             	lea    eax,[eax+eax*4]
c0016407:	8d 04 80             	lea    eax,[eax+eax*4]
c001640a:	8d 04 80             	lea    eax,[eax+eax*4]
c001640d:	8d 04 80             	lea    eax,[eax+eax*4]
c0016410:	c1 e0 04             	shl    eax,0x4
c0016413:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016417:	eb d3                	jmp    c00163ec <milliTenthSleep(unsigned int)>
c0016419:	90                   	nop
c001641a:	66 90                	xchg   ax,ax

c001641c <Semaphore::acquire()>:
c001641c:	83 ec 0c             	sub    esp,0xc
c001641f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016423:	fa                   	cli    
c0016424:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016429:	83 c0 01             	add    eax,0x1
c001642c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016431:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016436:	8d 48 01             	lea    ecx,[eax+0x1]
c0016439:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001643f:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016442:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016444:	7d 2e                	jge    c0016474 <Semaphore::acquire()+0x58>
c0016446:	83 c1 01             	add    ecx,0x1
c0016449:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001644c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016451:	85 c0                	test   eax,eax
c0016453:	75 0b                	jne    c0016460 <Semaphore::acquire()+0x44>
c0016455:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001645a:	85 c0                	test   eax,eax
c001645c:	75 66                	jne    c00164c4 <Semaphore::acquire()+0xa8>
c001645e:	66 90                	xchg   ax,ax
c0016460:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016465:	83 e8 01             	sub    eax,0x1
c0016468:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001646d:	75 01                	jne    c0016470 <Semaphore::acquire()+0x54>
c001646f:	fb                   	sti    
c0016470:	83 c4 0c             	add    esp,0xc
c0016473:	c3                   	ret    
c0016474:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016479:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016480:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016483:	85 c9                	test   ecx,ecx
c0016485:	74 51                	je     c00164d8 <Semaphore::acquire()+0xbc>
c0016487:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001648a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016490:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0016493:	90                   	nop
c0016494:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016499:	83 ec 0c             	sub    esp,0xc
c001649c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001649f:	68 80 29 02 c0       	push   0xc0022980
c00164a4:	e8 9c 44 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00164a9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00164b0:	e8 1b fe ff ff       	call   c00162d0 <blockTask(TaskState)>
c00164b5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00164ba:	83 c4 10             	add    esp,0x10
c00164bd:	83 e8 01             	sub    eax,0x1
c00164c0:	eb 8a                	jmp    c001644c <Semaphore::acquire()+0x30>
c00164c2:	66 90                	xchg   ax,ax
c00164c4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00164ce:	e8 e9 fb ff ff       	call   c00160bc <schedule()>
c00164d3:	eb 8b                	jmp    c0016460 <Semaphore::acquire()+0x44>
c00164d5:	8d 76 00             	lea    esi,[esi+0x0]
c00164d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164dd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00164e0:	eb b2                	jmp    c0016494 <Semaphore::acquire()+0x78>
c00164e2:	66 90                	xchg   ax,ax

c00164e4 <taskReturned>:
c00164e4:	83 ec 18             	sub    esp,0x18
c00164e7:	68 a0 29 02 c0       	push   0xc00229a0
c00164ec:	e8 2a b1 ff ff       	call   c001161b <KePanic(char const*)>
c00164f1:	83 c4 10             	add    esp,0x10
c00164f4:	83 ec 0c             	sub    esp,0xc
c00164f7:	6a 02                	push   0x2
c00164f9:	e8 d2 fd ff ff       	call   c00162d0 <blockTask(TaskState)>
c00164fe:	fa                   	cli    
c00164ff:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016504:	83 c0 01             	add    eax,0x1
c0016507:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001650c:	e8 ab fb ff ff       	call   c00160bc <schedule()>
c0016511:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016516:	83 c4 10             	add    esp,0x10
c0016519:	83 e8 01             	sub    eax,0x1
c001651c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016521:	85 c0                	test   eax,eax
c0016523:	75 cf                	jne    c00164f4 <taskReturned+0x10>
c0016525:	fb                   	sti    
c0016526:	eb cc                	jmp    c00164f4 <taskReturned+0x10>

c0016528 <Thr::processFromPID(int)>:
c0016528:	57                   	push   edi
c0016529:	56                   	push   esi
c001652a:	53                   	push   ebx
c001652b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001652f:	fa                   	cli    
c0016530:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0016536:	83 ec 0c             	sub    esp,0xc
c0016539:	83 c1 01             	add    ecx,0x1
c001653c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016541:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0016547:	e8 d0 97 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001654c:	83 c4 10             	add    esp,0x10
c001654f:	89 c7                	mov    edi,eax
c0016551:	eb 15                	jmp    c0016568 <Thr::processFromPID(int)+0x40>
c0016553:	90                   	nop
c0016554:	83 ec 0c             	sub    esp,0xc
c0016557:	68 e4 c6 02 c0       	push   0xc002c6e4
c001655c:	e8 bb 97 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016561:	83 c4 10             	add    esp,0x10
c0016564:	39 f8                	cmp    eax,edi
c0016566:	74 50                	je     c00165b8 <Thr::processFromPID(int)+0x90>
c0016568:	83 ec 0c             	sub    esp,0xc
c001656b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016570:	e8 a7 97 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016575:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c001657c:	89 c3                	mov    ebx,eax
c001657e:	e8 a1 97 00 00       	call   c001fd24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016583:	58                   	pop    eax
c0016584:	5a                   	pop    edx
c0016585:	53                   	push   ebx
c0016586:	68 e4 c6 02 c0       	push   0xc002c6e4
c001658b:	e8 50 98 00 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016590:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016593:	83 c4 10             	add    esp,0x10
c0016596:	39 30                	cmp    DWORD PTR [eax],esi
c0016598:	75 ba                	jne    c0016554 <Thr::processFromPID(int)+0x2c>
c001659a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001659f:	83 e8 01             	sub    eax,0x1
c00165a2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165a7:	74 0b                	je     c00165b4 <Thr::processFromPID(int)+0x8c>
c00165a9:	8d 76 00             	lea    esi,[esi+0x0]
c00165ac:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165af:	5b                   	pop    ebx
c00165b0:	5e                   	pop    esi
c00165b1:	5f                   	pop    edi
c00165b2:	c3                   	ret    
c00165b3:	90                   	nop
c00165b4:	fb                   	sti    
c00165b5:	eb f5                	jmp    c00165ac <Thr::processFromPID(int)+0x84>
c00165b7:	90                   	nop
c00165b8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165bd:	83 e8 01             	sub    eax,0x1
c00165c0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165c5:	75 05                	jne    c00165cc <Thr::processFromPID(int)+0xa4>
c00165c7:	fb                   	sti    
c00165c8:	5b                   	pop    ebx
c00165c9:	5e                   	pop    esi
c00165ca:	5f                   	pop    edi
c00165cb:	c3                   	ret    
c00165cc:	5b                   	pop    ebx
c00165cd:	31 c0                	xor    eax,eax
c00165cf:	5e                   	pop    esi
c00165d0:	5f                   	pop    edi
c00165d1:	c3                   	ret    
c00165d2:	66 90                	xchg   ax,ax

c00165d4 <unblockTask(ThreadControlBlock*)>:
c00165d4:	53                   	push   ebx
c00165d5:	83 ec 08             	sub    esp,0x8
c00165d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165dc:	fa                   	cli    
c00165dd:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165e2:	83 c0 01             	add    eax,0x1
c00165e5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165ea:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00165ed:	85 c0                	test   eax,eax
c00165ef:	74 67                	je     c0016658 <unblockTask(ThreadControlBlock*)+0x84>
c00165f1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00165f4:	83 f8 01             	cmp    eax,0x1
c00165f7:	74 37                	je     c0016630 <unblockTask(ThreadControlBlock*)+0x5c>
c00165f9:	83 ec 0c             	sub    esp,0xc
c00165fc:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016601:	e8 16 97 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016606:	83 c4 10             	add    esp,0x10
c0016609:	85 c0                	test   eax,eax
c001660b:	75 1b                	jne    c0016628 <unblockTask(ThreadControlBlock*)+0x54>
c001660d:	eb 5d                	jmp    c001666c <unblockTask(ThreadControlBlock*)+0x98>
c001660f:	90                   	nop
c0016610:	83 ec 08             	sub    esp,0x8
c0016613:	50                   	push   eax
c0016614:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016619:	e8 1e 9a 00 00       	call   c002003c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001661e:	83 c4 10             	add    esp,0x10
c0016621:	85 c0                	test   eax,eax
c0016623:	74 47                	je     c001666c <unblockTask(ThreadControlBlock*)+0x98>
c0016625:	8d 76 00             	lea    esi,[esi+0x0]
c0016628:	39 c3                	cmp    ebx,eax
c001662a:	75 e4                	jne    c0016610 <unblockTask(ThreadControlBlock*)+0x3c>
c001662c:	eb 12                	jmp    c0016640 <unblockTask(ThreadControlBlock*)+0x6c>
c001662e:	66 90                	xchg   ax,ax
c0016630:	83 ec 0c             	sub    esp,0xc
c0016633:	68 1f 29 02 c0       	push   0xc002291f
c0016638:	e8 08 43 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001663d:	83 c4 10             	add    esp,0x10
c0016640:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016645:	83 e8 01             	sub    eax,0x1
c0016648:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001664d:	75 01                	jne    c0016650 <unblockTask(ThreadControlBlock*)+0x7c>
c001664f:	fb                   	sti    
c0016650:	83 c4 08             	add    esp,0x8
c0016653:	5b                   	pop    ebx
c0016654:	c3                   	ret    
c0016655:	8d 76 00             	lea    esi,[esi+0x0]
c0016658:	83 ec 0c             	sub    esp,0xc
c001665b:	68 08 29 02 c0       	push   0xc0022908
c0016660:	e8 e0 42 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016665:	83 c4 10             	add    esp,0x10
c0016668:	eb d6                	jmp    c0016640 <unblockTask(ThreadControlBlock*)+0x6c>
c001666a:	66 90                	xchg   ax,ax
c001666c:	83 ec 08             	sub    esp,0x8
c001666f:	53                   	push   ebx
c0016670:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016675:	e8 66 97 00 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001667a:	83 c4 10             	add    esp,0x10
c001667d:	eb c1                	jmp    c0016640 <unblockTask(ThreadControlBlock*)+0x6c>
c001667f:	90                   	nop

c0016680 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016680:	55                   	push   ebp
c0016681:	57                   	push   edi
c0016682:	56                   	push   esi
c0016683:	53                   	push   ebx
c0016684:	83 ec 1c             	sub    esp,0x1c
c0016687:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001668b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001668e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016694:	85 ed                	test   ebp,ebp
c0016696:	7e 28                	jle    c00166c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016698:	31 f6                	xor    esi,esi
c001669a:	66 90                	xchg   ax,ax
c001669c:	83 ec 0c             	sub    esp,0xc
c001669f:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00166a6:	83 c6 01             	add    esi,0x1
c00166a9:	57                   	push   edi
c00166aa:	e8 17 14 ff ff       	call   c0007ac6 <free>
c00166af:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166b2:	83 c4 10             	add    esp,0x10
c00166b5:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00166bb:	7f df                	jg     c001669c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00166bd:	8d 76 00             	lea    esi,[esi+0x0]
c00166c0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00166ca:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00166cf:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00166d2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00166d5:	d3 c0                	rol    eax,cl
c00166d7:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00166de:	21 c8                	and    eax,ecx
c00166e0:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00166e7:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00166ea:	89 f7                	mov    edi,esi
c00166ec:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00166f4:	0f 85 72 01 00 00    	jne    c001686c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00166fa:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016700:	85 ed                	test   ebp,ebp
c0016702:	74 1c                	je     c0016720 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016704:	83 ec 0c             	sub    esp,0xc
c0016707:	55                   	push   ebp
c0016708:	e8 1f ac ff ff       	call   c001132c <EnvVarContainer::~EnvVarContainer()>
c001670d:	59                   	pop    ecx
c001670e:	5e                   	pop    esi
c001670f:	6a 0c                	push   0xc
c0016711:	55                   	push   ebp
c0016712:	e8 01 41 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0016717:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001671a:	83 c4 10             	add    esp,0x10
c001671d:	89 f7                	mov    edi,esi
c001671f:	90                   	nop
c0016720:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016726:	85 c0                	test   eax,eax
c0016728:	0f 84 b2 00 00 00    	je     c00167e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001672e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016731:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016735:	31 c9                	xor    ecx,ecx
c0016737:	eb 17                	jmp    c0016750 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016739:	8d 76 00             	lea    esi,[esi+0x0]
c001673c:	83 c1 01             	add    ecx,0x1
c001673f:	83 f9 10             	cmp    ecx,0x10
c0016742:	0f 84 98 00 00 00    	je     c00167e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016748:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001674e:	66 90                	xchg   ax,ax
c0016750:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0016757:	d3 fa                	sar    edx,cl
c0016759:	80 e2 01             	and    dl,0x1
c001675c:	74 de                	je     c001673c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001675e:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0016761:	01 d2                	add    edx,edx
c0016763:	01 ca                	add    edx,ecx
c0016765:	8d 14 92             	lea    edx,[edx+edx*4]
c0016768:	01 d0                	add    eax,edx
c001676a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016770:	83 fd 07             	cmp    ebp,0x7
c0016773:	75 c7                	jne    c001673c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016775:	05 40 02 00 00       	add    eax,0x240
c001677a:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001677d:	83 fd ff             	cmp    ebp,0xffffffff
c0016780:	0f 8c ee 00 00 00    	jl     c0016874 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016786:	0f 84 ac 01 00 00    	je     c0016938 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c001678c:	85 ed                	test   ebp,ebp
c001678e:	0f 84 90 01 00 00    	je     c0016924 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016794:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016796:	75 a4                	jne    c001673c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016798:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001679e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00167a2:	01 d0                	add    eax,edx
c00167a4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00167a8:	83 ec 0c             	sub    esp,0xc
c00167ab:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00167b1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167b4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00167ba:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00167c1:	50                   	push   eax
c00167c2:	e8 0d fe ff ff       	call   c00165d4 <unblockTask(ThreadControlBlock*)>
c00167c7:	83 c4 10             	add    esp,0x10
c00167ca:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00167cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00167d1:	89 f7                	mov    edi,esi
c00167d3:	83 c1 01             	add    ecx,0x1
c00167d6:	83 f9 10             	cmp    ecx,0x10
c00167d9:	0f 85 69 ff ff ff    	jne    c0016748 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00167df:	90                   	nop
c00167e0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00167e6:	85 c0                	test   eax,eax
c00167e8:	74 62                	je     c001684c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00167ea:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00167f0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00167f6:	74 54                	je     c001684c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00167f8:	83 ec 0c             	sub    esp,0xc
c00167fb:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016800:	e8 17 95 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016805:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c001680c:	89 c7                	mov    edi,eax
c001680e:	e8 ed 94 00 00       	call   c001fd00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016813:	83 c4 10             	add    esp,0x10
c0016816:	84 c0                	test   al,al
c0016818:	0f 84 ce 00 00 00    	je     c00168ec <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001681e:	66 90                	xchg   ax,ax
c0016820:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016823:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016829:	85 d2                	test   edx,edx
c001682b:	74 0f                	je     c001683c <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c001682d:	83 ec 0c             	sub    esp,0xc
c0016830:	8b 02                	mov    eax,DWORD PTR [edx]
c0016832:	52                   	push   edx
c0016833:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016836:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016839:	83 c4 10             	add    esp,0x10
c001683c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0016846:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016849:	8d 76 00             	lea    esi,[esi+0x0]
c001684c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016852:	85 db                	test   ebx,ebx
c0016854:	74 16                	je     c001686c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016856:	83 ec 0c             	sub    esp,0xc
c0016859:	53                   	push   ebx
c001685a:	e8 53 33 ff ff       	call   c0009bb2 <VAS::~VAS()>
c001685f:	58                   	pop    eax
c0016860:	5a                   	pop    edx
c0016861:	6a 14                	push   0x14
c0016863:	53                   	push   ebx
c0016864:	e8 af 3f ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0016869:	83 c4 10             	add    esp,0x10
c001686c:	83 c4 1c             	add    esp,0x1c
c001686f:	5b                   	pop    ebx
c0016870:	5e                   	pop    esi
c0016871:	5f                   	pop    edi
c0016872:	5d                   	pop    ebp
c0016873:	c3                   	ret    
c0016874:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016878:	83 ec 0c             	sub    esp,0xc
c001687b:	68 d4 29 02 c0       	push   0xc00229d4
c0016880:	e8 96 ad ff ff       	call   c001161b <KePanic(char const*)>
c0016885:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016888:	83 c4 10             	add    esp,0x10
c001688b:	89 f7                	mov    edi,esi
c001688d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016891:	e9 a6 fe ff ff       	jmp    c001673c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016896:	66 90                	xchg   ax,ax
c0016898:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001689e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00168a4:	75 1e                	jne    c00168c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00168a6:	83 ec 0c             	sub    esp,0xc
c00168a9:	68 3c 2a 02 c0       	push   0xc0022a3c
c00168ae:	e8 92 40 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00168b3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00168ba:	e8 11 fa ff ff       	call   c00162d0 <blockTask(TaskState)>
c00168bf:	83 c4 10             	add    esp,0x10
c00168c2:	66 90                	xchg   ax,ax
c00168c4:	83 ec 08             	sub    esp,0x8
c00168c7:	56                   	push   esi
c00168c8:	68 e4 c6 02 c0       	push   0xc002c6e4
c00168cd:	e8 0e 95 00 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00168d2:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00168d9:	e8 3e 94 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168de:	83 c4 10             	add    esp,0x10
c00168e1:	39 f8                	cmp    eax,edi
c00168e3:	0f 84 37 ff ff ff    	je     c0016820 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00168e9:	8d 76 00             	lea    esi,[esi+0x0]
c00168ec:	83 ec 0c             	sub    esp,0xc
c00168ef:	68 e4 c6 02 c0       	push   0xc002c6e4
c00168f4:	e8 23 94 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168f9:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016900:	89 c6                	mov    esi,eax
c0016902:	e8 1d 94 00 00       	call   c001fd24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016907:	83 c4 10             	add    esp,0x10
c001690a:	39 f3                	cmp    ebx,esi
c001690c:	74 b6                	je     c00168c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001690e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016911:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016914:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001691a:	75 a8                	jne    c00168c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001691c:	e9 77 ff ff ff       	jmp    c0016898 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016921:	8d 76 00             	lea    esi,[esi+0x0]
c0016924:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016928:	83 ec 0c             	sub    esp,0xc
c001692b:	68 08 2a 02 c0       	push   0xc0022a08
c0016930:	e9 4b ff ff ff       	jmp    c0016880 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016935:	8d 76 00             	lea    esi,[esi+0x0]
c0016938:	8b 36                	mov    esi,DWORD PTR [esi]
c001693a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001693e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016941:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016944:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001694a:	01 d7                	add    edi,edx
c001694c:	89 f8                	mov    eax,edi
c001694e:	e9 51 fe ff ff       	jmp    c00167a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016953:	90                   	nop

c0016954 <cleanerTaskFunction(void*)>:
c0016954:	53                   	push   ebx
c0016955:	83 ec 08             	sub    esp,0x8
c0016958:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001695d:	83 e8 01             	sub    eax,0x1
c0016960:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016965:	75 01                	jne    c0016968 <cleanerTaskFunction(void*)+0x14>
c0016967:	fb                   	sti    
c0016968:	fa                   	cli    
c0016969:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001696e:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c0016975:	8d 50 01             	lea    edx,[eax+0x1]
c0016978:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001697e:	0f 84 c4 00 00 00    	je     c0016a48 <cleanerTaskFunction(void*)+0xf4>
c0016984:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016989:	85 c0                	test   eax,eax
c001698b:	75 03                	jne    c0016990 <cleanerTaskFunction(void*)+0x3c>
c001698d:	fb                   	sti    
c001698e:	66 90                	xchg   ax,ax
c0016990:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c0016997:	fa                   	cli    
c0016998:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c001699e:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00169a4:	83 c2 01             	add    edx,0x1
c00169a7:	83 c1 01             	add    ecx,0x1
c00169aa:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00169b0:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00169b6:	fa                   	cli    
c00169b7:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c00169bd:	83 c3 01             	add    ebx,0x1
c00169c0:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c00169c6:	eb 28                	jmp    c00169f0 <cleanerTaskFunction(void*)+0x9c>
c00169c8:	83 ec 0c             	sub    esp,0xc
c00169cb:	68 cc c6 02 c0       	push   0xc002c6cc
c00169d0:	e8 47 93 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169d5:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c00169dc:	89 c3                	mov    ebx,eax
c00169de:	e8 41 93 00 00       	call   c001fd24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00169e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169e6:	e8 95 fc ff ff       	call   c0016680 <cleanupTerminatedTask(ThreadControlBlock*)>
c00169eb:	83 c4 10             	add    esp,0x10
c00169ee:	66 90                	xchg   ax,ax
c00169f0:	83 ec 0c             	sub    esp,0xc
c00169f3:	68 cc c6 02 c0       	push   0xc002c6cc
c00169f8:	e8 03 93 00 00       	call   c001fd00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00169fd:	83 c4 10             	add    esp,0x10
c0016a00:	84 c0                	test   al,al
c0016a02:	74 c4                	je     c00169c8 <cleanerTaskFunction(void*)+0x74>
c0016a04:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a09:	83 e8 01             	sub    eax,0x1
c0016a0c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a11:	75 01                	jne    c0016a14 <cleanerTaskFunction(void*)+0xc0>
c0016a13:	fb                   	sti    
c0016a14:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016a19:	83 e8 01             	sub    eax,0x1
c0016a1c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016a21:	0f 85 31 ff ff ff    	jne    c0016958 <cleanerTaskFunction(void*)+0x4>
c0016a27:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016a2c:	85 c0                	test   eax,eax
c0016a2e:	0f 84 24 ff ff ff    	je     c0016958 <cleanerTaskFunction(void*)+0x4>
c0016a34:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016a3e:	e8 79 f6 ff ff       	call   c00160bc <schedule()>
c0016a43:	e9 10 ff ff ff       	jmp    c0016958 <cleanerTaskFunction(void*)+0x4>
c0016a48:	83 ec 0c             	sub    esp,0xc
c0016a4b:	6a 02                	push   0x2
c0016a4d:	e8 56 f8 ff ff       	call   c00162a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016a52:	83 c4 10             	add    esp,0x10
c0016a55:	e9 36 ff ff ff       	jmp    c0016990 <cleanerTaskFunction(void*)+0x3c>
c0016a5a:	66 90                	xchg   ax,ax

c0016a5c <terminateTask(int)>:
c0016a5c:	83 ec 14             	sub    esp,0x14
c0016a5f:	fa                   	cli    
c0016a60:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016a66:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016a6c:	83 c2 01             	add    edx,0x1
c0016a6f:	83 c1 01             	add    ecx,0x1
c0016a72:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a78:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016a7e:	fa                   	cli    
c0016a7f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a84:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016a88:	83 c0 01             	add    eax,0x1
c0016a8b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a95:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016a98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a9d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016aa0:	50                   	push   eax
c0016aa1:	68 cc c6 02 c0       	push   0xc002c6cc
c0016aa6:	e8 35 93 00 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016aab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ab0:	83 c4 10             	add    esp,0x10
c0016ab3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016aba:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016abf:	85 c0                	test   eax,eax
c0016ac1:	74 65                	je     c0016b28 <terminateTask(int)+0xcc>
c0016ac3:	83 ec 0c             	sub    esp,0xc
c0016ac6:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016acd:	50                   	push   eax
c0016ace:	e8 01 fb ff ff       	call   c00165d4 <unblockTask(ThreadControlBlock*)>
c0016ad3:	83 c4 10             	add    esp,0x10
c0016ad6:	66 90                	xchg   ax,ax
c0016ad8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016add:	83 e8 01             	sub    eax,0x1
c0016ae0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ae5:	75 01                	jne    c0016ae8 <terminateTask(int)+0x8c>
c0016ae7:	fb                   	sti    
c0016ae8:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016aed:	83 e8 01             	sub    eax,0x1
c0016af0:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016af5:	75 09                	jne    c0016b00 <terminateTask(int)+0xa4>
c0016af7:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016afe:	75 3c                	jne    c0016b3c <terminateTask(int)+0xe0>
c0016b00:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b05:	83 e8 01             	sub    eax,0x1
c0016b08:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b0d:	75 01                	jne    c0016b10 <terminateTask(int)+0xb4>
c0016b0f:	fb                   	sti    
c0016b10:	fa                   	cli    
c0016b11:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b16:	83 c0 01             	add    eax,0x1
c0016b19:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b1e:	66 90                	xchg   ax,ax
c0016b20:	e8 97 f5 ff ff       	call   c00160bc <schedule()>
c0016b25:	eb d9                	jmp    c0016b00 <terminateTask(int)+0xa4>
c0016b27:	90                   	nop
c0016b28:	83 ec 0c             	sub    esp,0xc
c0016b2b:	68 36 29 02 c0       	push   0xc0022936
c0016b30:	e8 10 3e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016b35:	83 c4 10             	add    esp,0x10
c0016b38:	eb 9e                	jmp    c0016ad8 <terminateTask(int)+0x7c>
c0016b3a:	66 90                	xchg   ax,ax
c0016b3c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016b46:	eb d8                	jmp    c0016b20 <terminateTask(int)+0xc4>

c0016b48 <Thr::terminateFromIRQ(int)>:
c0016b48:	83 ec 18             	sub    esp,0x18
c0016b4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b4f:	50                   	push   eax
c0016b50:	e8 07 ff ff ff       	call   c0016a5c <terminateTask(int)>
c0016b55:	90                   	nop
c0016b56:	66 90                	xchg   ax,ax

c0016b58 <Semaphore::release()>:
c0016b58:	83 ec 0c             	sub    esp,0xc
c0016b5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016b5f:	fa                   	cli    
c0016b60:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b65:	83 c0 01             	add    eax,0x1
c0016b68:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b6d:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b72:	8d 48 01             	lea    ecx,[eax+0x1]
c0016b75:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016b7b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016b7e:	85 c9                	test   ecx,ecx
c0016b80:	74 42                	je     c0016bc4 <Semaphore::release()+0x6c>
c0016b82:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016b85:	83 ec 0c             	sub    esp,0xc
c0016b88:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016b8b:	51                   	push   ecx
c0016b8c:	e8 43 fa ff ff       	call   c00165d4 <unblockTask(ThreadControlBlock*)>
c0016b91:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b96:	83 c4 10             	add    esp,0x10
c0016b99:	83 e8 01             	sub    eax,0x1
c0016b9c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016ba1:	85 c0                	test   eax,eax
c0016ba3:	75 0b                	jne    c0016bb0 <Semaphore::release()+0x58>
c0016ba5:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016baa:	85 c0                	test   eax,eax
c0016bac:	75 22                	jne    c0016bd0 <Semaphore::release()+0x78>
c0016bae:	66 90                	xchg   ax,ax
c0016bb0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016bb5:	83 e8 01             	sub    eax,0x1
c0016bb8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bbd:	75 01                	jne    c0016bc0 <Semaphore::release()+0x68>
c0016bbf:	fb                   	sti    
c0016bc0:	83 c4 0c             	add    esp,0xc
c0016bc3:	c3                   	ret    
c0016bc4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016bc7:	83 e9 01             	sub    ecx,0x1
c0016bca:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016bcd:	eb cd                	jmp    c0016b9c <Semaphore::release()+0x44>
c0016bcf:	90                   	nop
c0016bd0:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016bda:	e8 dd f4 ff ff       	call   c00160bc <schedule()>
c0016bdf:	eb cf                	jmp    c0016bb0 <Semaphore::release()+0x58>
c0016be1:	8d 76 00             	lea    esi,[esi+0x0]

c0016be4 <__static_initialization_and_destruction_0(int, int)>:
c0016be4:	83 ec 0c             	sub    esp,0xc
c0016be7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016bec:	0f 85 8e 00 00 00    	jne    c0016c80 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016bf2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016bfa:	0f 85 80 00 00 00    	jne    c0016c80 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016c00:	83 ec 0c             	sub    esp,0xc
c0016c03:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016c08:	e8 87 94 00 00       	call   c0020094 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c0d:	83 c4 10             	add    esp,0x10
c0016c10:	83 ec 04             	sub    esp,0x4
c0016c13:	68 0c 36 02 c0       	push   0xc002360c
c0016c18:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016c1d:	68 44 00 02 c0       	push   0xc0020044
c0016c22:	e8 a1 3b ff ff       	call   c000a7c8 <__cxa_atexit>
c0016c27:	83 c4 10             	add    esp,0x10
c0016c2a:	83 ec 0c             	sub    esp,0xc
c0016c2d:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016c32:	e8 5d 94 00 00       	call   c0020094 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c37:	83 c4 10             	add    esp,0x10
c0016c3a:	83 ec 04             	sub    esp,0x4
c0016c3d:	68 0c 36 02 c0       	push   0xc002360c
c0016c42:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016c47:	68 44 00 02 c0       	push   0xc0020044
c0016c4c:	e8 77 3b ff ff       	call   c000a7c8 <__cxa_atexit>
c0016c51:	83 c4 10             	add    esp,0x10
c0016c54:	83 ec 0c             	sub    esp,0xc
c0016c57:	68 cc c6 02 c0       	push   0xc002c6cc
c0016c5c:	e8 33 94 00 00       	call   c0020094 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c61:	83 c4 10             	add    esp,0x10
c0016c64:	83 ec 04             	sub    esp,0x4
c0016c67:	68 0c 36 02 c0       	push   0xc002360c
c0016c6c:	68 cc c6 02 c0       	push   0xc002c6cc
c0016c71:	68 44 00 02 c0       	push   0xc0020044
c0016c76:	e8 4d 3b ff ff       	call   c000a7c8 <__cxa_atexit>
c0016c7b:	83 c4 10             	add    esp,0x10
c0016c7e:	66 90                	xchg   ax,ax
c0016c80:	90                   	nop
c0016c81:	83 c4 0c             	add    esp,0xc
c0016c84:	c3                   	ret    
c0016c85:	8d 76 00             	lea    esi,[esi+0x0]

c0016c88 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016c88:	83 ec 0c             	sub    esp,0xc
c0016c8b:	83 ec 08             	sub    esp,0x8
c0016c8e:	68 ff ff 00 00       	push   0xffff
c0016c93:	6a 01                	push   0x1
c0016c95:	e8 4a ff ff ff       	call   c0016be4 <__static_initialization_and_destruction_0(int, int)>
c0016c9a:	83 c4 10             	add    esp,0x10
c0016c9d:	83 c4 0c             	add    esp,0xc
c0016ca0:	c3                   	ret    

c0016ca1 <Vm::inbv(unsigned short)>:
c0016ca1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016ca5:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016caa:	75 06                	jne    c0016cb2 <Vm::inbv(unsigned short)+0x11>
c0016cac:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016cb1:	c3                   	ret    
c0016cb2:	ec                   	in     al,dx
c0016cb3:	c3                   	ret    

c0016cb4 <Vm::outbv(unsigned short, unsigned char)>:
c0016cb4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016cb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cbc:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016cc1:	75 25                	jne    c0016ce8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016cc3:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016cc9:	8d 51 01             	lea    edx,[ecx+0x1]
c0016ccc:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016cd2:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016cd8:	83 fa 20             	cmp    edx,0x20
c0016cdb:	75 0c                	jne    c0016ce9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016cdd:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016ce7:	c3                   	ret    
c0016ce8:	ee                   	out    dx,al
c0016ce9:	c3                   	ret    

c0016cea <Vm::realToLinear(unsigned short, unsigned short)>:
c0016cea:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016cef:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016cf4:	c1 e0 04             	shl    eax,0x4
c0016cf7:	01 d0                	add    eax,edx
c0016cf9:	c3                   	ret    

c0016cfa <Vm::getSegment(unsigned int)>:
c0016cfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cfe:	c1 e8 10             	shr    eax,0x10
c0016d01:	c3                   	ret    

c0016d02 <Vm::getOffset(unsigned int)>:
c0016d02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d06:	c3                   	ret    

c0016d07 <Vm::mainloop2()>:
c0016d07:	83 ec 18             	sub    esp,0x18
c0016d0a:	fa                   	cli    
c0016d0b:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d11:	6a 02                	push   0x2
c0016d13:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016d1a:	e8 89 f5 ff ff       	call   c00162a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016d1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d24:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016d28:	52                   	push   edx
c0016d29:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016d2d:	52                   	push   edx
c0016d2e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016d32:	52                   	push   edx
c0016d33:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016d37:	50                   	push   eax
c0016d38:	e8 d2 94 fe ff       	call   c000020f <goToVM86>
c0016d3d:	83 c4 2c             	add    esp,0x2c
c0016d40:	c3                   	ret    

c0016d41 <Vm::mainVm8086Loop(void*)>:
c0016d41:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d46:	48                   	dec    eax
c0016d47:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016d4c:	75 01                	jne    c0016d4f <Vm::mainVm8086Loop(void*)+0xe>
c0016d4e:	fb                   	sti    
c0016d4f:	eb b6                	jmp    c0016d07 <Vm::mainloop2()>

c0016d51 <Vm::mainloop3(unsigned long)>:
c0016d51:	83 ec 18             	sub    esp,0x18
c0016d54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d58:	fa                   	cli    
c0016d59:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d5f:	6a 02                	push   0x2
c0016d61:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016d68:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016d6d:	e8 36 f5 ff ff       	call   c00162a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016d72:	83 c4 1c             	add    esp,0x1c
c0016d75:	eb 90                	jmp    c0016d07 <Vm::mainloop2()>

c0016d77 <Vm::initialise8086()>:
c0016d77:	83 ec 0c             	sub    esp,0xc
c0016d7a:	68 80 00 00 00       	push   0x80
c0016d7f:	6a 00                	push   0x0
c0016d81:	68 41 6d 01 c0       	push   0xc0016d41
c0016d86:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016d8c:	e8 db f0 ff ff       	call   c0015e6c <Process::createThread(void (*)(void*), void*, int)>
c0016d91:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016d98:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016d9d:	68 00 01 00 00       	push   0x100
c0016da2:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016da7:	6a 00                	push   0x0
c0016da9:	6a 00                	push   0x0
c0016dab:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016db1:	e8 64 31 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016db6:	83 c4 2c             	add    esp,0x2c
c0016db9:	c3                   	ret    

c0016dba <Vm::finish8086()>:
c0016dba:	53                   	push   ebx
c0016dbb:	83 ec 08             	sub    esp,0x8
c0016dbe:	fa                   	cli    
c0016dbf:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016dc5:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016dcc:	75 15                	jne    c0016de3 <Vm::finish8086()+0x29>
c0016dce:	e8 e9 f2 ff ff       	call   c00160bc <schedule()>
c0016dd3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016dd8:	48                   	dec    eax
c0016dd9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016dde:	75 de                	jne    c0016dbe <Vm::finish8086()+0x4>
c0016de0:	fb                   	sti    
c0016de1:	eb db                	jmp    c0016dbe <Vm::finish8086()+0x4>
c0016de3:	83 ec 0c             	sub    esp,0xc
c0016de6:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016dec:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016df2:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016df9:	e8 d6 f7 ff ff       	call   c00165d4 <unblockTask(ThreadControlBlock*)>
c0016dfe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e03:	83 c4 10             	add    esp,0x10
c0016e06:	8d 50 ff             	lea    edx,[eax-0x1]
c0016e09:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016e0f:	85 d2                	test   edx,edx
c0016e11:	75 01                	jne    c0016e14 <Vm::finish8086()+0x5a>
c0016e13:	fb                   	sti    
c0016e14:	89 d8                	mov    eax,ebx
c0016e16:	83 c4 08             	add    esp,0x8
c0016e19:	5b                   	pop    ebx
c0016e1a:	c3                   	ret    

c0016e1b <Vm::getOutput8086(unsigned char*)>:
c0016e1b:	57                   	push   edi
c0016e1c:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016e22:	56                   	push   esi
c0016e23:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016e28:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016e2c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e2e:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016e33:	5e                   	pop    esi
c0016e34:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e3e:	5f                   	pop    edi
c0016e3f:	c3                   	ret    

c0016e40 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016e40:	55                   	push   ebp
c0016e41:	57                   	push   edi
c0016e42:	56                   	push   esi
c0016e43:	53                   	push   ebx
c0016e44:	83 ec 0c             	sub    esp,0xc
c0016e47:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016e4b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016e4f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016e53:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016e57:	fa                   	cli    
c0016e58:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e5e:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016e65:	75 15                	jne    c0016e7c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016e67:	e8 50 f2 ff ff       	call   c00160bc <schedule()>
c0016e6c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e71:	48                   	dec    eax
c0016e72:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e77:	75 de                	jne    c0016e57 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016e79:	fb                   	sti    
c0016e7a:	eb db                	jmp    c0016e57 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016e7c:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016e81:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e8b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016e8f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016e93:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016e97:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016e9b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016e9f:	0f b7 ff             	movzx  edi,di
c0016ea2:	0f b7 f6             	movzx  esi,si
c0016ea5:	50                   	push   eax
c0016ea6:	6a 20                	push   0x20
c0016ea8:	6a 00                	push   0x0
c0016eaa:	68 40 c7 02 c0       	push   0xc002c740
c0016eaf:	e8 3c 96 fe ff       	call   c00004f0 <memset>
c0016eb4:	5a                   	pop    edx
c0016eb5:	59                   	pop    ecx
c0016eb6:	57                   	push   edi
c0016eb7:	56                   	push   esi
c0016eb8:	e8 2d fe ff ff       	call   c0016cea <Vm::realToLinear(unsigned short, unsigned short)>
c0016ebd:	83 c4 10             	add    esp,0x10
c0016ec0:	89 c7                	mov    edi,eax
c0016ec2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016ec6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016eca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ecc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ed1:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016ed8:	48                   	dec    eax
c0016ed9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ede:	75 01                	jne    c0016ee1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016ee0:	fb                   	sti    
c0016ee1:	83 ec 0c             	sub    esp,0xc
c0016ee4:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016eea:	e8 e5 f6 ff ff       	call   c00165d4 <unblockTask(ThreadControlBlock*)>
c0016eef:	83 c4 1c             	add    esp,0x1c
c0016ef2:	b0 01                	mov    al,0x1
c0016ef4:	5b                   	pop    ebx
c0016ef5:	5e                   	pop    esi
c0016ef6:	5f                   	pop    edi
c0016ef7:	5d                   	pop    ebp
c0016ef8:	c3                   	ret    

c0016ef9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016ef9:	55                   	push   ebp
c0016efa:	57                   	push   edi
c0016efb:	56                   	push   esi
c0016efc:	53                   	push   ebx
c0016efd:	83 ec 34             	sub    esp,0x34
c0016f00:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016f04:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016f08:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016f0c:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016f10:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016f14:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016f18:	68 64 2a 02 c0       	push   0xc0022a64
c0016f1d:	e8 23 3a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016f22:	83 c4 10             	add    esp,0x10
c0016f25:	fa                   	cli    
c0016f26:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016f2c:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016f32:	84 db                	test   bl,bl
c0016f34:	75 15                	jne    c0016f4b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016f36:	e8 81 f1 ff ff       	call   c00160bc <schedule()>
c0016f3b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f40:	48                   	dec    eax
c0016f41:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f46:	75 dd                	jne    c0016f25 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016f48:	fb                   	sti    
c0016f49:	eb da                	jmp    c0016f25 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016f4b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f4f:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016f54:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016f5e:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016f62:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016f66:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016f6a:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016f6e:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016f72:	50                   	push   eax
c0016f73:	6a 20                	push   0x20
c0016f75:	6a 00                	push   0x0
c0016f77:	68 40 c7 02 c0       	push   0xc002c740
c0016f7c:	e8 6f 95 fe ff       	call   c00004f0 <memset>
c0016f81:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016f88:	e8 29 0b ff ff       	call   c0007ab6 <malloc>
c0016f8d:	83 c4 0c             	add    esp,0xc
c0016f90:	89 c5                	mov    ebp,eax
c0016f92:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016f98:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016f9c:	50                   	push   eax
c0016f9d:	e8 a6 4b ff ff       	call   c000bb48 <File::File(char const*, Process*)>
c0016fa2:	83 c4 10             	add    esp,0x10
c0016fa5:	85 ed                	test   ebp,ebp
c0016fa7:	75 0a                	jne    c0016fb3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016fa9:	83 ec 0c             	sub    esp,0xc
c0016fac:	68 86 2a 02 c0       	push   0xc0022a86
c0016fb1:	eb 2b                	jmp    c0016fde <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016fb3:	50                   	push   eax
c0016fb4:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016fb8:	50                   	push   eax
c0016fb9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016fbd:	50                   	push   eax
c0016fbe:	55                   	push   ebp
c0016fbf:	e8 a4 4e ff ff       	call   c000be68 <File::stat(unsigned long long*, bool*)>
c0016fc4:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016fc8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016fcc:	83 c4 10             	add    esp,0x10
c0016fcf:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016fd4:	74 27                	je     c0016ffd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016fd6:	83 ec 0c             	sub    esp,0xc
c0016fd9:	68 9a 2a 02 c0       	push   0xc0022a9a
c0016fde:	e8 38 a6 ff ff       	call   c001161b <KePanic(char const*)>
c0016fe3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016fe8:	83 c4 10             	add    esp,0x10
c0016feb:	48                   	dec    eax
c0016fec:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ff1:	85 c0                	test   eax,eax
c0016ff3:	75 01                	jne    c0016ff6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016ff5:	fb                   	sti    
c0016ff6:	31 db                	xor    ebx,ebx
c0016ff8:	e9 90 00 00 00       	jmp    c001708d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016ffd:	51                   	push   ecx
c0016ffe:	51                   	push   ecx
c0016fff:	6a 01                	push   0x1
c0017001:	55                   	push   ebp
c0017002:	e8 5f 4b ff ff       	call   c000bb66 <File::open(FileOpenMode)>
c0017007:	83 c4 10             	add    esp,0x10
c001700a:	85 c0                	test   eax,eax
c001700c:	74 26                	je     c0017034 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c001700e:	83 ec 0c             	sub    esp,0xc
c0017011:	68 b3 2a 02 c0       	push   0xc0022ab3
c0017016:	e8 00 a6 ff ff       	call   c001161b <KePanic(char const*)>
c001701b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017020:	83 c4 10             	add    esp,0x10
c0017023:	48                   	dec    eax
c0017024:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017029:	85 c0                	test   eax,eax
c001702b:	75 c9                	jne    c0016ff6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c001702d:	fb                   	sti    
c001702e:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0017032:	eb 59                	jmp    c001708d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0017034:	0f b7 ff             	movzx  edi,di
c0017037:	50                   	push   eax
c0017038:	0f b7 f6             	movzx  esi,si
c001703b:	50                   	push   eax
c001703c:	57                   	push   edi
c001703d:	56                   	push   esi
c001703e:	e8 a7 fc ff ff       	call   c0016cea <Vm::realToLinear(unsigned short, unsigned short)>
c0017043:	5a                   	pop    edx
c0017044:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0017047:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001704b:	51                   	push   ecx
c001704c:	50                   	push   eax
c001704d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017051:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017055:	55                   	push   ebp
c0017056:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0017059:	83 c4 14             	add    esp,0x14
c001705c:	55                   	push   ebp
c001705d:	e8 62 4b ff ff       	call   c000bbc4 <File::close()>
c0017062:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017067:	83 c4 10             	add    esp,0x10
c001706a:	48                   	dec    eax
c001706b:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0017072:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017077:	85 c0                	test   eax,eax
c0017079:	75 01                	jne    c001707c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c001707b:	fb                   	sti    
c001707c:	83 ec 0c             	sub    esp,0xc
c001707f:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0017085:	e8 4a f5 ff ff       	call   c00165d4 <unblockTask(ThreadControlBlock*)>
c001708a:	83 c4 10             	add    esp,0x10
c001708d:	83 c4 2c             	add    esp,0x2c
c0017090:	88 d8                	mov    al,bl
c0017092:	5b                   	pop    ebx
c0017093:	5e                   	pop    esi
c0017094:	5f                   	pop    edi
c0017095:	5d                   	pop    ebp
c0017096:	c3                   	ret    

c0017097 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017097:	57                   	push   edi
c0017098:	56                   	push   esi
c0017099:	53                   	push   ebx
c001709a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001709e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00170a6:	83 e8 06             	sub    eax,0x6
c00170a9:	0f b7 c0             	movzx  eax,ax
c00170ac:	50                   	push   eax
c00170ad:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00170b2:	50                   	push   eax
c00170b3:	e8 32 fc ff ff       	call   c0016cea <Vm::realToLinear(unsigned short, unsigned short)>
c00170b8:	5a                   	pop    edx
c00170b9:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c00170bc:	59                   	pop    ecx
c00170bd:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00170c0:	8d 51 fa             	lea    edx,[ecx-0x6]
c00170c3:	81 e2 ff ff 00 00    	and    edx,0xffff
c00170c9:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00170cc:	8d 56 02             	lea    edx,[esi+0x2]
c00170cf:	66 89 10             	mov    WORD PTR [eax],dx
c00170d2:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c00170d6:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00170da:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00170dd:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c00170e1:	0f b6 f1             	movzx  esi,cl
c00170e4:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00170e8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00170ee:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c00170f2:	0f b6 d5             	movzx  edx,ch
c00170f5:	74 0a                	je     c0017101 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c00170f7:	c1 e2 08             	shl    edx,0x8
c00170fa:	09 f2                	or     edx,esi
c00170fc:	80 ce 02             	or     dh,0x2
c00170ff:	eb 08                	jmp    c0017109 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0017101:	c1 e2 08             	shl    edx,0x8
c0017104:	09 f2                	or     edx,esi
c0017106:	80 e6 fd             	and    dh,0xfd
c0017109:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001710d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017112:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017116:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c001711e:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0017121:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017129:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001712c:	5b                   	pop    ebx
c001712d:	5e                   	pop    esi
c001712e:	5f                   	pop    edi
c001712f:	c3                   	ret    

c0017130 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017130:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017135:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001713a:	c1 e0 04             	shl    eax,0x4
c001713d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017140:	c3                   	ret    

c0017141 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017141:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017146:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001714b:	c1 e0 04             	shl    eax,0x4
c001714e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0017152:	c3                   	ret    

c0017153 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017153:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017158:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001715d:	c1 e0 04             	shl    eax,0x4
c0017160:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0017163:	c3                   	ret    

c0017164 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017164:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017169:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001716e:	c1 e0 04             	shl    eax,0x4
c0017171:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017175:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017178:	c3                   	ret    

c0017179 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017179:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001717e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017183:	c1 e0 04             	shl    eax,0x4
c0017186:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001718a:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001718e:	c3                   	ret    

c001718f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001718f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017194:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017199:	c1 e0 04             	shl    eax,0x4
c001719c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00171a0:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00171a3:	c3                   	ret    

c00171a4 <Vm::faultHandler(regs*)>:
c00171a4:	55                   	push   ebp
c00171a5:	57                   	push   edi
c00171a6:	56                   	push   esi
c00171a7:	53                   	push   ebx
c00171a8:	83 ec 2c             	sub    esp,0x2c
c00171ab:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00171af:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00171b2:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00171b6:	0f b7 f8             	movzx  edi,ax
c00171b9:	52                   	push   edx
c00171ba:	0f b7 c0             	movzx  eax,ax
c00171bd:	50                   	push   eax
c00171be:	e8 27 fb ff ff       	call   c0016cea <Vm::realToLinear(unsigned short, unsigned short)>
c00171c3:	5a                   	pop    edx
c00171c4:	59                   	pop    ecx
c00171c5:	89 c1                	mov    ecx,eax
c00171c7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00171ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00171ce:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00171d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00171d7:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00171da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171de:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00171e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00171e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171eb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00171ef:	e8 f6 fa ff ff       	call   c0016cea <Vm::realToLinear(unsigned short, unsigned short)>
c00171f4:	5e                   	pop    esi
c00171f5:	be 06 00 00 00       	mov    esi,0x6
c00171fa:	5d                   	pop    ebp
c00171fb:	31 ed                	xor    ebp,ebp
c00171fd:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017202:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017205:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c001720b:	0f 84 74 02 00 00    	je     c0017485 <Vm::faultHandler(regs*)+0x2e1>
c0017211:	0f 87 94 00 00 00    	ja     c00172ab <Vm::faultHandler(regs*)+0x107>
c0017217:	83 fa 66             	cmp    edx,0x66
c001721a:	0f 84 e2 01 00 00    	je     c0017402 <Vm::faultHandler(regs*)+0x25e>
c0017220:	77 47                	ja     c0017269 <Vm::faultHandler(regs*)+0xc5>
c0017222:	83 fa 36             	cmp    edx,0x36
c0017225:	0f 84 ca 01 00 00    	je     c00173f5 <Vm::faultHandler(regs*)+0x251>
c001722b:	77 1a                	ja     c0017247 <Vm::faultHandler(regs*)+0xa3>
c001722d:	83 fa 26             	cmp    edx,0x26
c0017230:	0f 84 98 01 00 00    	je     c00173ce <Vm::faultHandler(regs*)+0x22a>
c0017236:	83 fa 2e             	cmp    edx,0x2e
c0017239:	0f 85 21 06 00 00    	jne    c0017860 <Vm::faultHandler(regs*)+0x6bc>
c001723f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017242:	31 f6                	xor    esi,esi
c0017244:	41                   	inc    ecx
c0017245:	eb bb                	jmp    c0017202 <Vm::faultHandler(regs*)+0x5e>
c0017247:	83 fa 64             	cmp    edx,0x64
c001724a:	0f 84 8b 01 00 00    	je     c00173db <Vm::faultHandler(regs*)+0x237>
c0017250:	0f 87 92 01 00 00    	ja     c00173e8 <Vm::faultHandler(regs*)+0x244>
c0017256:	83 fa 3e             	cmp    edx,0x3e
c0017259:	0f 85 01 06 00 00    	jne    c0017860 <Vm::faultHandler(regs*)+0x6bc>
c001725f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017262:	be 01 00 00 00       	mov    esi,0x1
c0017267:	eb db                	jmp    c0017244 <Vm::faultHandler(regs*)+0xa0>
c0017269:	83 fa 6d             	cmp    edx,0x6d
c001726c:	0f 84 34 03 00 00    	je     c00175a6 <Vm::faultHandler(regs*)+0x402>
c0017272:	77 17                	ja     c001728b <Vm::faultHandler(regs*)+0xe7>
c0017274:	83 fa 67             	cmp    edx,0x67
c0017277:	0f 84 92 01 00 00    	je     c001740f <Vm::faultHandler(regs*)+0x26b>
c001727d:	83 fa 6c             	cmp    edx,0x6c
c0017280:	0f 84 b1 02 00 00    	je     c0017537 <Vm::faultHandler(regs*)+0x393>
c0017286:	e9 d5 05 00 00       	jmp    c0017860 <Vm::faultHandler(regs*)+0x6bc>
c001728b:	83 fa 6f             	cmp    edx,0x6f
c001728e:	0f 84 3d 04 00 00    	je     c00176d1 <Vm::faultHandler(regs*)+0x52d>
c0017294:	0f 82 9f 03 00 00    	jb     c0017639 <Vm::faultHandler(regs*)+0x495>
c001729a:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00172a0:	0f 84 76 01 00 00    	je     c001741c <Vm::faultHandler(regs*)+0x278>
c00172a6:	e9 b5 05 00 00       	jmp    c0017860 <Vm::faultHandler(regs*)+0x6bc>
c00172ab:	81 fa ec 00 00 00    	cmp    edx,0xec
c00172b1:	0f 84 51 05 00 00    	je     c0017808 <Vm::faultHandler(regs*)+0x664>
c00172b7:	0f 87 a9 00 00 00    	ja     c0017366 <Vm::faultHandler(regs*)+0x1c2>
c00172bd:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00172c3:	0f 84 d0 04 00 00    	je     c0017799 <Vm::faultHandler(regs*)+0x5f5>
c00172c9:	77 78                	ja     c0017343 <Vm::faultHandler(regs*)+0x19f>
c00172cb:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00172d1:	0f 84 0e 02 00 00    	je     c00174e5 <Vm::faultHandler(regs*)+0x341>
c00172d7:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00172dd:	0f 85 7d 05 00 00    	jne    c0017860 <Vm::faultHandler(regs*)+0x6bc>
c00172e3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00172e7:	89 d1                	mov    ecx,edx
c00172e9:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00172ec:	c1 e1 08             	shl    ecx,0x8
c00172ef:	09 ca                	or     edx,ecx
c00172f1:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00172f4:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00172f8:	89 d1                	mov    ecx,edx
c00172fa:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00172fe:	c1 e1 08             	shl    ecx,0x8
c0017301:	09 ca                	or     edx,ecx
c0017303:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0017306:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c001730a:	89 d1                	mov    ecx,edx
c001730c:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0017310:	c1 e1 08             	shl    ecx,0x8
c0017313:	09 ca                	or     edx,ecx
c0017315:	81 ca 00 02 02 00    	or     edx,0x20200
c001731b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001731e:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0017322:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017328:	d1 e8                	shr    eax,1
c001732a:	83 e0 01             	and    eax,0x1
c001732d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017330:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017333:	83 c0 06             	add    eax,0x6
c0017336:	25 ff ff 00 00       	and    eax,0xffff
c001733b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001733e:	e9 19 05 00 00       	jmp    c001785c <Vm::faultHandler(regs*)+0x6b8>
c0017343:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0017349:	0f 84 8f 04 00 00    	je     c00177de <Vm::faultHandler(regs*)+0x63a>
c001734f:	0f 82 60 04 00 00    	jb     c00177b5 <Vm::faultHandler(regs*)+0x611>
c0017355:	81 fa e7 00 00 00    	cmp    edx,0xe7
c001735b:	0f 84 94 04 00 00    	je     c00177f5 <Vm::faultHandler(regs*)+0x651>
c0017361:	e9 fa 04 00 00       	jmp    c0017860 <Vm::faultHandler(regs*)+0x6bc>
c0017366:	81 fa ef 00 00 00    	cmp    edx,0xef
c001736c:	0f 84 d7 04 00 00    	je     c0017849 <Vm::faultHandler(regs*)+0x6a5>
c0017372:	77 2e                	ja     c00173a2 <Vm::faultHandler(regs*)+0x1fe>
c0017374:	81 fa ed 00 00 00    	cmp    edx,0xed
c001737a:	0f 84 a4 04 00 00    	je     c0017824 <Vm::faultHandler(regs*)+0x680>
c0017380:	81 fa ee 00 00 00    	cmp    edx,0xee
c0017386:	0f 85 d4 04 00 00    	jne    c0017860 <Vm::faultHandler(regs*)+0x6bc>
c001738c:	50                   	push   eax
c001738d:	50                   	push   eax
c001738e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017392:	50                   	push   eax
c0017393:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017397:	50                   	push   eax
c0017398:	e8 17 f9 ff ff       	call   c0016cb4 <Vm::outbv(unsigned short, unsigned char)>
c001739d:	e9 9f 04 00 00       	jmp    c0017841 <Vm::faultHandler(regs*)+0x69d>
c00173a2:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00173a8:	0f 84 6d 01 00 00    	je     c001751b <Vm::faultHandler(regs*)+0x377>
c00173ae:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00173b4:	0f 84 6f 01 00 00    	je     c0017529 <Vm::faultHandler(regs*)+0x385>
c00173ba:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00173c0:	0f 85 9a 04 00 00    	jne    c0017860 <Vm::faultHandler(regs*)+0x6bc>
c00173c6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173c9:	e9 76 fe ff ff       	jmp    c0017244 <Vm::faultHandler(regs*)+0xa0>
c00173ce:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173d1:	be 02 00 00 00       	mov    esi,0x2
c00173d6:	e9 69 fe ff ff       	jmp    c0017244 <Vm::faultHandler(regs*)+0xa0>
c00173db:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173de:	be 03 00 00 00       	mov    esi,0x3
c00173e3:	e9 5c fe ff ff       	jmp    c0017244 <Vm::faultHandler(regs*)+0xa0>
c00173e8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173eb:	be 04 00 00 00       	mov    esi,0x4
c00173f0:	e9 4f fe ff ff       	jmp    c0017244 <Vm::faultHandler(regs*)+0xa0>
c00173f5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173f8:	be 05 00 00 00       	mov    esi,0x5
c00173fd:	e9 42 fe ff ff       	jmp    c0017244 <Vm::faultHandler(regs*)+0xa0>
c0017402:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017405:	bd 01 00 00 00       	mov    ebp,0x1
c001740a:	e9 35 fe ff ff       	jmp    c0017244 <Vm::faultHandler(regs*)+0xa0>
c001740f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017412:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0017417:	e9 28 fe ff ff       	jmp    c0017244 <Vm::faultHandler(regs*)+0xa0>
c001741c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001741f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017423:	83 e5 01             	and    ebp,0x1
c0017426:	74 30                	je     c0017458 <Vm::faultHandler(regs*)+0x2b4>
c0017428:	83 e9 04             	sub    ecx,0x4
c001742b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017431:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017437:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001743a:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001743d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017443:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017447:	0f 84 0c 04 00 00    	je     c0017859 <Vm::faultHandler(regs*)+0x6b5>
c001744d:	80 ce 02             	or     dh,0x2
c0017450:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017453:	e9 01 04 00 00       	jmp    c0017859 <Vm::faultHandler(regs*)+0x6b5>
c0017458:	83 e9 02             	sub    ecx,0x2
c001745b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017461:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017464:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017468:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001746e:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017472:	74 05                	je     c0017479 <Vm::faultHandler(regs*)+0x2d5>
c0017474:	80 ce 02             	or     dh,0x2
c0017477:	eb 03                	jmp    c001747c <Vm::faultHandler(regs*)+0x2d8>
c0017479:	80 e6 fd             	and    dh,0xfd
c001747c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017480:	e9 d4 03 00 00       	jmp    c0017859 <Vm::faultHandler(regs*)+0x6b5>
c0017485:	83 e5 01             	and    ebp,0x1
c0017488:	74 2a                	je     c00174b4 <Vm::faultHandler(regs*)+0x310>
c001748a:	8b 10                	mov    edx,DWORD PTR [eax]
c001748c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017492:	81 ca 00 02 02 00    	or     edx,0x20200
c0017498:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001749b:	8b 00                	mov    eax,DWORD PTR [eax]
c001749d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00174a3:	c1 e8 09             	shr    eax,0x9
c00174a6:	83 e0 01             	and    eax,0x1
c00174a9:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00174ac:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00174af:	83 c0 04             	add    eax,0x4
c00174b2:	eb 24                	jmp    c00174d8 <Vm::faultHandler(regs*)+0x334>
c00174b4:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00174b7:	81 ca 00 02 02 00    	or     edx,0x20200
c00174bd:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00174c0:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00174c3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00174c9:	c1 e8 09             	shr    eax,0x9
c00174cc:	83 e0 01             	and    eax,0x1
c00174cf:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00174d2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00174d5:	83 c0 02             	add    eax,0x2
c00174d8:	25 ff ff 00 00       	and    eax,0xffff
c00174dd:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00174e0:	e9 74 03 00 00       	jmp    c0017859 <Vm::faultHandler(regs*)+0x6b5>
c00174e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00174e9:	3d ee 00 00 00       	cmp    eax,0xee
c00174ee:	75 10                	jne    c0017500 <Vm::faultHandler(regs*)+0x35c>
c00174f0:	83 ec 0c             	sub    esp,0xc
c00174f3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00174f6:	e8 56 f8 ff ff       	call   c0016d51 <Vm::mainloop3(unsigned long)>
c00174fb:	e9 44 03 00 00       	jmp    c0017844 <Vm::faultHandler(regs*)+0x6a0>
c0017500:	83 ec 0c             	sub    esp,0xc
c0017503:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017507:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001750b:	51                   	push   ecx
c001750c:	50                   	push   eax
c001750d:	53                   	push   ebx
c001750e:	e8 84 fb ff ff       	call   c0017097 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0017513:	83 c4 20             	add    esp,0x20
c0017516:	e9 41 03 00 00       	jmp    c001785c <Vm::faultHandler(regs*)+0x6b8>
c001751b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017520:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017524:	e9 30 03 00 00       	jmp    c0017859 <Vm::faultHandler(regs*)+0x6b5>
c0017529:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001752e:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0017532:	e9 22 03 00 00       	jmp    c0017859 <Vm::faultHandler(regs*)+0x6b5>
c0017537:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001753a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001753f:	74 2b                	je     c001756c <Vm::faultHandler(regs*)+0x3c8>
c0017541:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017548:	76 22                	jbe    c001756c <Vm::faultHandler(regs*)+0x3c8>
c001754a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001754e:	50                   	push   eax
c001754f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017553:	50                   	push   eax
c0017554:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017558:	50                   	push   eax
c0017559:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001755d:	50                   	push   eax
c001755e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017562:	50                   	push   eax
c0017563:	6a 6c                	push   0x6c
c0017565:	6a 6c                	push   0x6c
c0017567:	e9 bd 01 00 00       	jmp    c0017729 <Vm::faultHandler(regs*)+0x585>
c001756c:	83 ec 0c             	sub    esp,0xc
c001756f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017573:	0f b7 f6             	movzx  esi,si
c0017576:	50                   	push   eax
c0017577:	e8 25 f7 ff ff       	call   c0016ca1 <Vm::inbv(unsigned short)>
c001757c:	83 c4 0c             	add    esp,0xc
c001757f:	0f b6 c0             	movzx  eax,al
c0017582:	50                   	push   eax
c0017583:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017587:	50                   	push   eax
c0017588:	56                   	push   esi
c0017589:	e8 d6 fb ff ff       	call   c0017164 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001758e:	83 c4 10             	add    esp,0x10
c0017591:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017594:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017598:	74 03                	je     c001759d <Vm::faultHandler(regs*)+0x3f9>
c001759a:	48                   	dec    eax
c001759b:	eb 01                	jmp    c001759e <Vm::faultHandler(regs*)+0x3fa>
c001759d:	40                   	inc    eax
c001759e:	0f b7 c0             	movzx  eax,ax
c00175a1:	e9 8b 00 00 00       	jmp    c0017631 <Vm::faultHandler(regs*)+0x48d>
c00175a6:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00175a9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175ac:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00175b1:	74 29                	je     c00175dc <Vm::faultHandler(regs*)+0x438>
c00175b3:	3d ff ff 00 00       	cmp    eax,0xffff
c00175b8:	76 22                	jbe    c00175dc <Vm::faultHandler(regs*)+0x438>
c00175ba:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00175be:	50                   	push   eax
c00175bf:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00175c3:	50                   	push   eax
c00175c4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00175c8:	50                   	push   eax
c00175c9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00175cd:	50                   	push   eax
c00175ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00175d2:	50                   	push   eax
c00175d3:	6a 6d                	push   0x6d
c00175d5:	6a 6d                	push   0x6d
c00175d7:	e9 4d 01 00 00       	jmp    c0017729 <Vm::faultHandler(regs*)+0x585>
c00175dc:	0f b7 c8             	movzx  ecx,ax
c00175df:	0f b7 f6             	movzx  esi,si
c00175e2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00175e5:	83 e5 01             	and    ebp,0x1
c00175e8:	74 20                	je     c001760a <Vm::faultHandler(regs*)+0x466>
c00175ea:	ed                   	in     eax,dx
c00175eb:	55                   	push   ebp
c00175ec:	50                   	push   eax
c00175ed:	51                   	push   ecx
c00175ee:	56                   	push   esi
c00175ef:	e8 9b fb ff ff       	call   c001718f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00175f4:	83 c4 10             	add    esp,0x10
c00175f7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175fa:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00175fe:	74 05                	je     c0017605 <Vm::faultHandler(regs*)+0x461>
c0017600:	83 e8 04             	sub    eax,0x4
c0017603:	eb 27                	jmp    c001762c <Vm::faultHandler(regs*)+0x488>
c0017605:	83 c0 04             	add    eax,0x4
c0017608:	eb 22                	jmp    c001762c <Vm::faultHandler(regs*)+0x488>
c001760a:	66 ed                	in     ax,dx
c001760c:	0f b7 c0             	movzx  eax,ax
c001760f:	57                   	push   edi
c0017610:	50                   	push   eax
c0017611:	51                   	push   ecx
c0017612:	56                   	push   esi
c0017613:	e8 61 fb ff ff       	call   c0017179 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017618:	83 c4 10             	add    esp,0x10
c001761b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001761e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017622:	74 05                	je     c0017629 <Vm::faultHandler(regs*)+0x485>
c0017624:	83 e8 02             	sub    eax,0x2
c0017627:	eb 03                	jmp    c001762c <Vm::faultHandler(regs*)+0x488>
c0017629:	83 c0 02             	add    eax,0x2
c001762c:	25 ff ff 00 00       	and    eax,0xffff
c0017631:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017634:	e9 20 02 00 00       	jmp    c0017859 <Vm::faultHandler(regs*)+0x6b5>
c0017639:	8d 46 ff             	lea    eax,[esi-0x1]
c001763c:	0f b6 f0             	movzx  esi,al
c001763f:	83 fe 05             	cmp    esi,0x5
c0017642:	77 23                	ja     c0017667 <Vm::faultHandler(regs*)+0x4c3>
c0017644:	ff 24 b5 28 2b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd4d8]
c001764b:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0017650:	eb 15                	jmp    c0017667 <Vm::faultHandler(regs*)+0x4c3>
c0017652:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017656:	eb 0f                	jmp    c0017667 <Vm::faultHandler(regs*)+0x4c3>
c0017658:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001765c:	eb 09                	jmp    c0017667 <Vm::faultHandler(regs*)+0x4c3>
c001765e:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017662:	eb 03                	jmp    c0017667 <Vm::faultHandler(regs*)+0x4c3>
c0017664:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017667:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001766a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001766f:	74 29                	je     c001769a <Vm::faultHandler(regs*)+0x4f6>
c0017671:	3d ff ff 00 00       	cmp    eax,0xffff
c0017676:	76 22                	jbe    c001769a <Vm::faultHandler(regs*)+0x4f6>
c0017678:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001767c:	50                   	push   eax
c001767d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017681:	50                   	push   eax
c0017682:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017686:	50                   	push   eax
c0017687:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001768b:	50                   	push   eax
c001768c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017690:	50                   	push   eax
c0017691:	6a 6e                	push   0x6e
c0017693:	6a 6e                	push   0x6e
c0017695:	e9 8f 00 00 00       	jmp    c0017729 <Vm::faultHandler(regs*)+0x585>
c001769a:	0f b7 c0             	movzx  eax,ax
c001769d:	52                   	push   edx
c001769e:	52                   	push   edx
c001769f:	50                   	push   eax
c00176a0:	57                   	push   edi
c00176a1:	e8 8a fa ff ff       	call   c0017130 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00176a6:	59                   	pop    ecx
c00176a7:	0f b6 c0             	movzx  eax,al
c00176aa:	5e                   	pop    esi
c00176ab:	50                   	push   eax
c00176ac:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00176b0:	50                   	push   eax
c00176b1:	e8 fe f5 ff ff       	call   c0016cb4 <Vm::outbv(unsigned short, unsigned char)>
c00176b6:	83 c4 10             	add    esp,0x10
c00176b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00176bc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00176c0:	74 03                	je     c00176c5 <Vm::faultHandler(regs*)+0x521>
c00176c2:	48                   	dec    eax
c00176c3:	eb 01                	jmp    c00176c6 <Vm::faultHandler(regs*)+0x522>
c00176c5:	40                   	inc    eax
c00176c6:	0f b7 c0             	movzx  eax,ax
c00176c9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00176cc:	e9 88 01 00 00       	jmp    c0017859 <Vm::faultHandler(regs*)+0x6b5>
c00176d1:	8d 46 ff             	lea    eax,[esi-0x1]
c00176d4:	0f b6 f0             	movzx  esi,al
c00176d7:	83 fe 05             	cmp    esi,0x5
c00176da:	77 1e                	ja     c00176fa <Vm::faultHandler(regs*)+0x556>
c00176dc:	ff 24 b5 40 2b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd4c0]
c00176e3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00176e7:	eb 11                	jmp    c00176fa <Vm::faultHandler(regs*)+0x556>
c00176e9:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00176ec:	eb 0c                	jmp    c00176fa <Vm::faultHandler(regs*)+0x556>
c00176ee:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00176f1:	eb 07                	jmp    c00176fa <Vm::faultHandler(regs*)+0x556>
c00176f3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00176f6:	eb 02                	jmp    c00176fa <Vm::faultHandler(regs*)+0x556>
c00176f8:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00176fa:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00176fd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017702:	74 37                	je     c001773b <Vm::faultHandler(regs*)+0x597>
c0017704:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001770a:	76 2f                	jbe    c001773b <Vm::faultHandler(regs*)+0x597>
c001770c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017710:	50                   	push   eax
c0017711:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017715:	50                   	push   eax
c0017716:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001771a:	50                   	push   eax
c001771b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001771f:	50                   	push   eax
c0017720:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017724:	50                   	push   eax
c0017725:	6a 6f                	push   0x6f
c0017727:	6a 6f                	push   0x6f
c0017729:	68 cc 2a 02 c0       	push   0xc0022acc
c001772e:	e8 12 32 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017733:	83 c4 20             	add    esp,0x20
c0017736:	e9 83 01 00 00       	jmp    c00178be <Vm::faultHandler(regs*)+0x71a>
c001773b:	0f b7 d7             	movzx  edx,di
c001773e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017741:	0f b7 c6             	movzx  eax,si
c0017744:	81 e1 00 04 00 00    	and    ecx,0x400
c001774a:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001774d:	83 e5 01             	and    ebp,0x1
c0017750:	74 1d                	je     c001776f <Vm::faultHandler(regs*)+0x5cb>
c0017752:	55                   	push   ebp
c0017753:	55                   	push   ebp
c0017754:	50                   	push   eax
c0017755:	52                   	push   edx
c0017756:	e8 f8 f9 ff ff       	call   c0017153 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001775b:	83 c4 10             	add    esp,0x10
c001775e:	89 fa                	mov    edx,edi
c0017760:	ef                   	out    dx,eax
c0017761:	85 c9                	test   ecx,ecx
c0017763:	74 05                	je     c001776a <Vm::faultHandler(regs*)+0x5c6>
c0017765:	83 ee 04             	sub    esi,0x4
c0017768:	eb 21                	jmp    c001778b <Vm::faultHandler(regs*)+0x5e7>
c001776a:	83 c6 04             	add    esi,0x4
c001776d:	eb 1c                	jmp    c001778b <Vm::faultHandler(regs*)+0x5e7>
c001776f:	55                   	push   ebp
c0017770:	55                   	push   ebp
c0017771:	50                   	push   eax
c0017772:	52                   	push   edx
c0017773:	e8 c9 f9 ff ff       	call   c0017141 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017778:	83 c4 10             	add    esp,0x10
c001777b:	89 fa                	mov    edx,edi
c001777d:	66 ef                	out    dx,ax
c001777f:	85 c9                	test   ecx,ecx
c0017781:	74 05                	je     c0017788 <Vm::faultHandler(regs*)+0x5e4>
c0017783:	83 ee 02             	sub    esi,0x2
c0017786:	eb 03                	jmp    c001778b <Vm::faultHandler(regs*)+0x5e7>
c0017788:	83 c6 02             	add    esi,0x2
c001778b:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017791:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017794:	e9 c0 00 00 00       	jmp    c0017859 <Vm::faultHandler(regs*)+0x6b5>
c0017799:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00177a0:	83 ec 0c             	sub    esp,0xc
c00177a3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177a7:	50                   	push   eax
c00177a8:	e8 f4 f4 ff ff       	call   c0016ca1 <Vm::inbv(unsigned short)>
c00177ad:	0f b6 c0             	movzx  eax,al
c00177b0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00177b3:	eb 3a                	jmp    c00177ef <Vm::faultHandler(regs*)+0x64b>
c00177b5:	83 e5 01             	and    ebp,0x1
c00177b8:	74 07                	je     c00177c1 <Vm::faultHandler(regs*)+0x61d>
c00177ba:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00177be:	ed                   	in     eax,dx
c00177bf:	eb 14                	jmp    c00177d5 <Vm::faultHandler(regs*)+0x631>
c00177c1:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00177c4:	66 31 f6             	xor    si,si
c00177c7:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00177ca:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00177ce:	66 ed                	in     ax,dx
c00177d0:	0f b7 c0             	movzx  eax,ax
c00177d3:	09 f0                	or     eax,esi
c00177d5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00177d8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00177dc:	eb 7e                	jmp    c001785c <Vm::faultHandler(regs*)+0x6b8>
c00177de:	52                   	push   edx
c00177df:	52                   	push   edx
c00177e0:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00177e4:	50                   	push   eax
c00177e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177e9:	50                   	push   eax
c00177ea:	e8 c5 f4 ff ff       	call   c0016cb4 <Vm::outbv(unsigned short, unsigned char)>
c00177ef:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00177f3:	eb 4f                	jmp    c0017844 <Vm::faultHandler(regs*)+0x6a0>
c00177f5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00177f8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00177fc:	83 e5 01             	and    ebp,0x1
c00177ff:	74 03                	je     c0017804 <Vm::faultHandler(regs*)+0x660>
c0017801:	ef                   	out    dx,eax
c0017802:	eb d4                	jmp    c00177d8 <Vm::faultHandler(regs*)+0x634>
c0017804:	66 ef                	out    dx,ax
c0017806:	eb d0                	jmp    c00177d8 <Vm::faultHandler(regs*)+0x634>
c0017808:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001780f:	83 ec 0c             	sub    esp,0xc
c0017812:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017816:	50                   	push   eax
c0017817:	e8 85 f4 ff ff       	call   c0016ca1 <Vm::inbv(unsigned short)>
c001781c:	0f b6 c0             	movzx  eax,al
c001781f:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017822:	eb 1d                	jmp    c0017841 <Vm::faultHandler(regs*)+0x69d>
c0017824:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017827:	83 e5 01             	and    ebp,0x1
c001782a:	74 03                	je     c001782f <Vm::faultHandler(regs*)+0x68b>
c001782c:	ed                   	in     eax,dx
c001782d:	eb 0d                	jmp    c001783c <Vm::faultHandler(regs*)+0x698>
c001782f:	66 ed                	in     ax,dx
c0017831:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017834:	0f b7 c0             	movzx  eax,ax
c0017837:	66 31 d2             	xor    dx,dx
c001783a:	09 d0                	or     eax,edx
c001783c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001783f:	eb 18                	jmp    c0017859 <Vm::faultHandler(regs*)+0x6b5>
c0017841:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017844:	83 c4 10             	add    esp,0x10
c0017847:	eb 13                	jmp    c001785c <Vm::faultHandler(regs*)+0x6b8>
c0017849:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001784c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001784f:	83 e5 01             	and    ebp,0x1
c0017852:	74 03                	je     c0017857 <Vm::faultHandler(regs*)+0x6b3>
c0017854:	ef                   	out    dx,eax
c0017855:	eb 02                	jmp    c0017859 <Vm::faultHandler(regs*)+0x6b5>
c0017857:	66 ef                	out    dx,ax
c0017859:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001785c:	b0 01                	mov    al,0x1
c001785e:	eb 60                	jmp    c00178c0 <Vm::faultHandler(regs*)+0x71c>
c0017860:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017864:	50                   	push   eax
c0017865:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017869:	50                   	push   eax
c001786a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001786e:	50                   	push   eax
c001786f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017873:	50                   	push   eax
c0017874:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017878:	50                   	push   eax
c0017879:	52                   	push   edx
c001787a:	52                   	push   edx
c001787b:	68 f9 2a 02 c0       	push   0xc0022af9
c0017880:	e8 c0 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017885:	83 c4 20             	add    esp,0x20
c0017888:	83 ec 0c             	sub    esp,0xc
c001788b:	6a 60                	push   0x60
c001788d:	e8 0f f4 ff ff       	call   c0016ca1 <Vm::inbv(unsigned short)>
c0017892:	83 c4 10             	add    esp,0x10
c0017895:	0f b6 d0             	movzx  edx,al
c0017898:	83 fa 1c             	cmp    edx,0x1c
c001789b:	74 05                	je     c00178a2 <Vm::faultHandler(regs*)+0x6fe>
c001789d:	83 fa 5a             	cmp    edx,0x5a
c00178a0:	75 e6                	jne    c0017888 <Vm::faultHandler(regs*)+0x6e4>
c00178a2:	0f b6 c0             	movzx  eax,al
c00178a5:	83 f8 1c             	cmp    eax,0x1c
c00178a8:	74 05                	je     c00178af <Vm::faultHandler(regs*)+0x70b>
c00178aa:	83 f8 5a             	cmp    eax,0x5a
c00178ad:	75 0f                	jne    c00178be <Vm::faultHandler(regs*)+0x71a>
c00178af:	83 ec 0c             	sub    esp,0xc
c00178b2:	6a 60                	push   0x60
c00178b4:	e8 e8 f3 ff ff       	call   c0016ca1 <Vm::inbv(unsigned short)>
c00178b9:	83 c4 10             	add    esp,0x10
c00178bc:	eb e4                	jmp    c00178a2 <Vm::faultHandler(regs*)+0x6fe>
c00178be:	31 c0                	xor    eax,eax
c00178c0:	83 c4 2c             	add    esp,0x2c
c00178c3:	5b                   	pop    ebx
c00178c4:	5e                   	pop    esi
c00178c5:	5f                   	pop    edi
c00178c6:	5d                   	pop    ebp
c00178c7:	c3                   	ret    

c00178c8 <noCopro(unsigned long)>:
c00178c8:	c3                   	ret    

c00178c9 <nmiHandler(regs*, void*)>:
c00178c9:	83 ec 0c             	sub    esp,0xc
c00178cc:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00178d1:	83 ec 0c             	sub    esp,0xc
c00178d4:	50                   	push   eax
c00178d5:	e8 dc f9 fe ff       	call   c00072b6 <Computer::handleNMI()>
c00178da:	83 c4 10             	add    esp,0x10
c00178dd:	90                   	nop
c00178de:	83 c4 0c             	add    esp,0xc
c00178e1:	c3                   	ret    

c00178e2 <doubleFault(regs*, void*)>:
c00178e2:	55                   	push   ebp
c00178e3:	89 e5                	mov    ebp,esp
c00178e5:	83 ec 08             	sub    esp,0x8
c00178e8:	83 ec 0c             	sub    esp,0xc
c00178eb:	68 58 2b 02 c0       	push   0xc0022b58
c00178f0:	e8 26 9d ff ff       	call   c001161b <KePanic(char const*)>
c00178f5:	83 c4 10             	add    esp,0x10
c00178f8:	90                   	nop
c00178f9:	c9                   	leave  
c00178fa:	c3                   	ret    

c00178fb <displayDebugInfo(regs*)>:
c00178fb:	83 ec 1c             	sub    esp,0x1c
c00178fe:	0f 20 c0             	mov    eax,cr0
c0017901:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017905:	0f 20 d0             	mov    eax,cr2
c0017908:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001790c:	0f 20 d8             	mov    eax,cr3
c001790f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017913:	0f 20 e0             	mov    eax,cr4
c0017916:	89 04 24             	mov    DWORD PTR [esp],eax
c0017919:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001791d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017920:	83 ec 08             	sub    esp,0x8
c0017923:	50                   	push   eax
c0017924:	68 74 2b 02 c0       	push   0xc0022b74
c0017929:	e8 17 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001792e:	83 c4 10             	add    esp,0x10
c0017931:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017935:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017938:	83 ec 08             	sub    esp,0x8
c001793b:	50                   	push   eax
c001793c:	68 65 2b 02 c0       	push   0xc0022b65
c0017941:	e8 ff 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017946:	83 c4 10             	add    esp,0x10
c0017949:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001794d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017950:	83 ec 08             	sub    esp,0x8
c0017953:	50                   	push   eax
c0017954:	68 70 2b 02 c0       	push   0xc0022b70
c0017959:	e8 e7 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001795e:	83 c4 10             	add    esp,0x10
c0017961:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017965:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017968:	83 ec 08             	sub    esp,0x8
c001796b:	50                   	push   eax
c001796c:	68 7f 2b 02 c0       	push   0xc0022b7f
c0017971:	e8 cf 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017976:	83 c4 10             	add    esp,0x10
c0017979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001797d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017980:	83 ec 08             	sub    esp,0x8
c0017983:	50                   	push   eax
c0017984:	68 8a 2b 02 c0       	push   0xc0022b8a
c0017989:	e8 b7 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001798e:	83 c4 10             	add    esp,0x10
c0017991:	83 ec 08             	sub    esp,0x8
c0017994:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017998:	68 95 2b 02 c0       	push   0xc0022b95
c001799d:	e8 a3 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179a2:	83 c4 10             	add    esp,0x10
c00179a5:	83 ec 08             	sub    esp,0x8
c00179a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00179ac:	68 a0 2b 02 c0       	push   0xc0022ba0
c00179b1:	e8 8f 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179b6:	83 c4 10             	add    esp,0x10
c00179b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179bd:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00179c0:	c1 e0 05             	shl    eax,0x5
c00179c3:	8d 90 20 3f 02 c0    	lea    edx,[eax-0x3ffdc0e0]
c00179c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179cd:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00179d0:	83 ec 04             	sub    esp,0x4
c00179d3:	52                   	push   edx
c00179d4:	50                   	push   eax
c00179d5:	68 ab 2b 02 c0       	push   0xc0022bab
c00179da:	e8 66 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179df:	83 c4 10             	add    esp,0x10
c00179e2:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179e7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179ed:	83 ec 0c             	sub    esp,0xc
c00179f0:	50                   	push   eax
c00179f1:	e8 63 0d ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c00179f6:	83 c4 10             	add    esp,0x10
c00179f9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179fe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a04:	83 ec 08             	sub    esp,0x8
c0017a07:	68 ba 2b 02 c0       	push   0xc0022bba
c0017a0c:	50                   	push   eax
c0017a0d:	e8 94 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a12:	83 c4 10             	add    esp,0x10
c0017a15:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a1a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a20:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a24:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017a27:	83 ec 08             	sub    esp,0x8
c0017a2a:	52                   	push   edx
c0017a2b:	50                   	push   eax
c0017a2c:	e8 2f 10 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017a31:	83 c4 10             	add    esp,0x10
c0017a34:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a39:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a3f:	83 ec 08             	sub    esp,0x8
c0017a42:	68 c8 2b 02 c0       	push   0xc0022bc8
c0017a47:	50                   	push   eax
c0017a48:	e8 59 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a4d:	83 c4 10             	add    esp,0x10
c0017a50:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a55:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a5b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017a60:	8b 12                	mov    edx,DWORD PTR [edx]
c0017a62:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017a65:	83 c2 0c             	add    edx,0xc
c0017a68:	83 ec 08             	sub    esp,0x8
c0017a6b:	52                   	push   edx
c0017a6c:	50                   	push   eax
c0017a6d:	e8 34 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a72:	83 c4 10             	add    esp,0x10
c0017a75:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a7a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a80:	83 ec 08             	sub    esp,0x8
c0017a83:	68 d1 2b 02 c0       	push   0xc0022bd1
c0017a88:	50                   	push   eax
c0017a89:	e8 18 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a8e:	83 c4 10             	add    esp,0x10
c0017a91:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a96:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a9c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017aa0:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017aa3:	83 ec 08             	sub    esp,0x8
c0017aa6:	52                   	push   edx
c0017aa7:	50                   	push   eax
c0017aa8:	e8 b3 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017aad:	83 c4 10             	add    esp,0x10
c0017ab0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ab5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017abb:	83 ec 08             	sub    esp,0x8
c0017abe:	68 d9 2b 02 c0       	push   0xc0022bd9
c0017ac3:	50                   	push   eax
c0017ac4:	e8 dd 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ac9:	83 c4 10             	add    esp,0x10
c0017acc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ad1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ad7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017adb:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017ade:	83 ec 08             	sub    esp,0x8
c0017ae1:	52                   	push   edx
c0017ae2:	50                   	push   eax
c0017ae3:	e8 78 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017ae8:	83 c4 10             	add    esp,0x10
c0017aeb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017af0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017af6:	83 ec 08             	sub    esp,0x8
c0017af9:	68 e1 2b 02 c0       	push   0xc0022be1
c0017afe:	50                   	push   eax
c0017aff:	e8 a2 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b04:	83 c4 10             	add    esp,0x10
c0017b07:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b0c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b12:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b16:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017b19:	83 ec 08             	sub    esp,0x8
c0017b1c:	52                   	push   edx
c0017b1d:	50                   	push   eax
c0017b1e:	e8 3d 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b23:	83 c4 10             	add    esp,0x10
c0017b26:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b2b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b31:	83 ec 08             	sub    esp,0x8
c0017b34:	68 e9 2b 02 c0       	push   0xc0022be9
c0017b39:	50                   	push   eax
c0017b3a:	e8 67 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b3f:	83 c4 10             	add    esp,0x10
c0017b42:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b47:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b4d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b51:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017b54:	83 ec 08             	sub    esp,0x8
c0017b57:	52                   	push   edx
c0017b58:	50                   	push   eax
c0017b59:	e8 02 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b5e:	83 c4 10             	add    esp,0x10
c0017b61:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b66:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b6c:	83 ec 08             	sub    esp,0x8
c0017b6f:	68 f1 2b 02 c0       	push   0xc0022bf1
c0017b74:	50                   	push   eax
c0017b75:	e8 2c 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b7a:	83 c4 10             	add    esp,0x10
c0017b7d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b82:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b88:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b8c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017b8f:	83 ec 08             	sub    esp,0x8
c0017b92:	52                   	push   edx
c0017b93:	50                   	push   eax
c0017b94:	e8 c7 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b99:	83 c4 10             	add    esp,0x10
c0017b9c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ba1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ba7:	83 ec 08             	sub    esp,0x8
c0017baa:	68 f9 2b 02 c0       	push   0xc0022bf9
c0017baf:	50                   	push   eax
c0017bb0:	e8 f1 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bb5:	83 c4 10             	add    esp,0x10
c0017bb8:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bbd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bc3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bc7:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017bca:	83 ec 08             	sub    esp,0x8
c0017bcd:	52                   	push   edx
c0017bce:	50                   	push   eax
c0017bcf:	e8 8c 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017bd4:	83 c4 10             	add    esp,0x10
c0017bd7:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bdc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017be2:	83 ec 08             	sub    esp,0x8
c0017be5:	68 01 2c 02 c0       	push   0xc0022c01
c0017bea:	50                   	push   eax
c0017beb:	e8 b6 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bf0:	83 c4 10             	add    esp,0x10
c0017bf3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bf8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bfe:	83 ec 08             	sub    esp,0x8
c0017c01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c05:	50                   	push   eax
c0017c06:	e8 55 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017c0b:	83 c4 10             	add    esp,0x10
c0017c0e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c13:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c19:	83 ec 08             	sub    esp,0x8
c0017c1c:	68 0a 2c 02 c0       	push   0xc0022c0a
c0017c21:	50                   	push   eax
c0017c22:	e8 7f 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c27:	83 c4 10             	add    esp,0x10
c0017c2a:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c2f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c35:	83 ec 08             	sub    esp,0x8
c0017c38:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c3c:	50                   	push   eax
c0017c3d:	e8 1e 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017c42:	83 c4 10             	add    esp,0x10
c0017c45:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c4a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c50:	83 ec 08             	sub    esp,0x8
c0017c53:	68 12 2c 02 c0       	push   0xc0022c12
c0017c58:	50                   	push   eax
c0017c59:	e8 48 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c5e:	83 c4 10             	add    esp,0x10
c0017c61:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c66:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c6c:	83 ec 08             	sub    esp,0x8
c0017c6f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017c73:	50                   	push   eax
c0017c74:	e8 e7 0d ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017c79:	83 c4 10             	add    esp,0x10
c0017c7c:	fa                   	cli    
c0017c7d:	f4                   	hlt    
c0017c7e:	eb fe                	jmp    c0017c7e <displayDebugInfo(regs*)+0x383>

c0017c80 <HalSystemIdle()>:
c0017c80:	56                   	push   esi
c0017c81:	53                   	push   ebx
c0017c82:	83 ec 14             	sub    esp,0x14
c0017c85:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c8a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017c90:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017c96:	83 e0 04             	and    eax,0x4
c0017c99:	0f b6 c0             	movzx  eax,al
c0017c9c:	85 c0                	test   eax,eax
c0017c9e:	0f 95 c0             	setne  al
c0017ca1:	0f b6 c0             	movzx  eax,al
c0017ca4:	85 c0                	test   eax,eax
c0017ca6:	74 4c                	je     c0017cf4 <HalSystemIdle()+0x74>
c0017ca8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017cad:	83 ec 08             	sub    esp,0x8
c0017cb0:	68 e1 00 00 00       	push   0xe1
c0017cb5:	50                   	push   eax
c0017cb6:	e8 05 f4 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017cbb:	83 c4 10             	add    esp,0x10
c0017cbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017cc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017cc6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017ccb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017ccf:	83 e2 02             	and    edx,0x2
c0017cd2:	89 d3                	mov    ebx,edx
c0017cd4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017cd8:	83 e2 00             	and    edx,0x0
c0017cdb:	89 d6                	mov    esi,edx
c0017cdd:	56                   	push   esi
c0017cde:	53                   	push   ebx
c0017cdf:	68 e1 00 00 00       	push   0xe1
c0017ce4:	50                   	push   eax
c0017ce5:	e8 02 f4 fe ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0017cea:	83 c4 10             	add    esp,0x10
c0017ced:	e8 a2 84 fe ff       	call   c0000194 <doTPAUSE>
c0017cf2:	eb 01                	jmp    c0017cf5 <HalSystemIdle()+0x75>
c0017cf4:	f4                   	hlt    
c0017cf5:	90                   	nop
c0017cf6:	83 c4 14             	add    esp,0x14
c0017cf9:	5b                   	pop    ebx
c0017cfa:	5e                   	pop    esi
c0017cfb:	c3                   	ret    

c0017cfc <displayProgramFault(char const*)>:
c0017cfc:	83 ec 0c             	sub    esp,0xc
c0017cff:	83 ec 0c             	sub    esp,0xc
c0017d02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d06:	e8 3a 2c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017d0b:	83 c4 10             	add    esp,0x10
c0017d0e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d13:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d15:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d18:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d1e:	85 c0                	test   eax,eax
c0017d20:	74 21                	je     c0017d43 <displayProgramFault(char const*)+0x47>
c0017d22:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d27:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d29:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d2c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d32:	6a 04                	push   0x4
c0017d34:	6a 0f                	push   0xf
c0017d36:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d3a:	50                   	push   eax
c0017d3b:	e8 d8 0d ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017d40:	83 c4 10             	add    esp,0x10
c0017d43:	90                   	nop
c0017d44:	83 c4 0c             	add    esp,0xc
c0017d47:	c3                   	ret    

c0017d48 <gpFault(regs*, void*)>:
c0017d48:	83 ec 1c             	sub    esp,0x1c
c0017d4b:	c7 05 74 c7 02 c0 a4 71 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc00171a4
c0017d55:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017d5a:	85 c0                	test   eax,eax
c0017d5c:	74 1e                	je     c0017d7c <gpFault(regs*, void*)+0x34>
c0017d5e:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017d63:	83 ec 0c             	sub    esp,0xc
c0017d66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d6a:	ff d0                	call   eax
c0017d6c:	83 c4 10             	add    esp,0x10
c0017d6f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017d73:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017d78:	85 c0                	test   eax,eax
c0017d7a:	75 2e                	jne    c0017daa <gpFault(regs*, void*)+0x62>
c0017d7c:	83 ec 0c             	sub    esp,0xc
c0017d7f:	68 1a 2c 02 c0       	push   0xc0022c1a
c0017d84:	e8 73 ff ff ff       	call   c0017cfc <displayProgramFault(char const*)>
c0017d89:	83 c4 10             	add    esp,0x10
c0017d8c:	83 ec 0c             	sub    esp,0xc
c0017d8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d93:	e8 63 fb ff ff       	call   c00178fb <displayDebugInfo(regs*)>
c0017d98:	83 c4 10             	add    esp,0x10
c0017d9b:	83 ec 0c             	sub    esp,0xc
c0017d9e:	6a 00                	push   0x0
c0017da0:	e8 a3 ed ff ff       	call   c0016b48 <Thr::terminateFromIRQ(int)>
c0017da5:	83 c4 10             	add    esp,0x10
c0017da8:	eb 01                	jmp    c0017dab <gpFault(regs*, void*)+0x63>
c0017daa:	90                   	nop
c0017dab:	83 c4 1c             	add    esp,0x1c
c0017dae:	c3                   	ret    

c0017daf <pgFault(regs*, void*)>:
c0017daf:	83 ec 1c             	sub    esp,0x1c
c0017db2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017db6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017db9:	0f 20 d0             	mov    eax,cr2
c0017dbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017dc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017dc4:	83 ec 04             	sub    esp,0x4
c0017dc7:	52                   	push   edx
c0017dc8:	50                   	push   eax
c0017dc9:	68 f8 2c 02 c0       	push   0xc0022cf8
c0017dce:	e8 72 2b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017dd3:	83 c4 10             	add    esp,0x10
c0017dd6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017ddb:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ddd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017de0:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017de6:	0f 20 d2             	mov    edx,cr2
c0017de9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017ded:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017df1:	83 ec 08             	sub    esp,0x8
c0017df4:	52                   	push   edx
c0017df5:	50                   	push   eax
c0017df6:	e8 95 25 ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017dfb:	83 c4 10             	add    esp,0x10
c0017dfe:	0f b6 c0             	movzx  eax,al
c0017e01:	85 c0                	test   eax,eax
c0017e03:	75 2e                	jne    c0017e33 <pgFault(regs*, void*)+0x84>
c0017e05:	83 ec 0c             	sub    esp,0xc
c0017e08:	68 33 2c 02 c0       	push   0xc0022c33
c0017e0d:	e8 ea fe ff ff       	call   c0017cfc <displayProgramFault(char const*)>
c0017e12:	83 c4 10             	add    esp,0x10
c0017e15:	83 ec 0c             	sub    esp,0xc
c0017e18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e1c:	e8 da fa ff ff       	call   c00178fb <displayDebugInfo(regs*)>
c0017e21:	83 c4 10             	add    esp,0x10
c0017e24:	83 ec 0c             	sub    esp,0xc
c0017e27:	6a 00                	push   0x0
c0017e29:	e8 1a ed ff ff       	call   c0016b48 <Thr::terminateFromIRQ(int)>
c0017e2e:	83 c4 10             	add    esp,0x10
c0017e31:	eb 01                	jmp    c0017e34 <pgFault(regs*, void*)+0x85>
c0017e33:	90                   	nop
c0017e34:	83 c4 1c             	add    esp,0x1c
c0017e37:	c3                   	ret    

c0017e38 <otherISRHandler(regs*, void*)>:
c0017e38:	83 ec 0c             	sub    esp,0xc
c0017e3b:	83 ec 0c             	sub    esp,0xc
c0017e3e:	68 20 2d 02 c0       	push   0xc0022d20
c0017e43:	e8 b4 fe ff ff       	call   c0017cfc <displayProgramFault(char const*)>
c0017e48:	83 c4 10             	add    esp,0x10
c0017e4b:	83 ec 0c             	sub    esp,0xc
c0017e4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e52:	e8 a4 fa ff ff       	call   c00178fb <displayDebugInfo(regs*)>
c0017e57:	83 c4 10             	add    esp,0x10
c0017e5a:	83 ec 0c             	sub    esp,0xc
c0017e5d:	6a 00                	push   0x0
c0017e5f:	e8 e4 ec ff ff       	call   c0016b48 <Thr::terminateFromIRQ(int)>
c0017e64:	83 c4 10             	add    esp,0x10
c0017e67:	90                   	nop
c0017e68:	83 c4 0c             	add    esp,0xc
c0017e6b:	c3                   	ret    

c0017e6c <opcodeFault(regs*, void*)>:
c0017e6c:	55                   	push   ebp
c0017e6d:	89 e5                	mov    ebp,esp
c0017e6f:	83 ec 08             	sub    esp,0x8
c0017e72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e75:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e78:	83 ec 08             	sub    esp,0x8
c0017e7b:	50                   	push   eax
c0017e7c:	68 3e 2c 02 c0       	push   0xc0022c3e
c0017e81:	e8 bf 2a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017e86:	83 c4 10             	add    esp,0x10
c0017e89:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017e8e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017e94:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017e9a:	0f b6 c0             	movzx  eax,al
c0017e9d:	85 c0                	test   eax,eax
c0017e9f:	74 21                	je     c0017ec2 <opcodeFault(regs*, void*)+0x56>
c0017ea1:	83 ec 0c             	sub    esp,0xc
c0017ea4:	68 48 2d 02 c0       	push   0xc0022d48
c0017ea9:	e8 97 2a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017eae:	83 c4 10             	add    esp,0x10
c0017eb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017eb4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017eb7:	8d 50 19             	lea    edx,[eax+0x19]
c0017eba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ebd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017ec0:	eb 2b                	jmp    c0017eed <opcodeFault(regs*, void*)+0x81>
c0017ec2:	83 ec 0c             	sub    esp,0xc
c0017ec5:	68 4c 2c 02 c0       	push   0xc0022c4c
c0017eca:	e8 2d fe ff ff       	call   c0017cfc <displayProgramFault(char const*)>
c0017ecf:	83 c4 10             	add    esp,0x10
c0017ed2:	83 ec 0c             	sub    esp,0xc
c0017ed5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017ed8:	e8 1e fa ff ff       	call   c00178fb <displayDebugInfo(regs*)>
c0017edd:	83 c4 10             	add    esp,0x10
c0017ee0:	83 ec 0c             	sub    esp,0xc
c0017ee3:	6a 00                	push   0x0
c0017ee5:	e8 5e ec ff ff       	call   c0016b48 <Thr::terminateFromIRQ(int)>
c0017eea:	83 c4 10             	add    esp,0x10
c0017eed:	c9                   	leave  
c0017eee:	c3                   	ret    

c0017eef <i386SaveCoprocessor(void*)>:
c0017eef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ef3:	83 c0 3f             	add    eax,0x3f
c0017ef6:	83 e0 c0             	and    eax,0xffffffc0
c0017ef9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017efd:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017f03 <i386LoadCoprocessor(void*)>:
c0017f03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f07:	83 c0 3f             	add    eax,0x3f
c0017f0a:	83 e0 c0             	and    eax,0xffffffc0
c0017f0d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f11:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017f17 <x87EmulHandler(regs*, void*)>:
c0017f17:	53                   	push   ebx
c0017f18:	83 ec 08             	sub    esp,0x8
c0017f1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f20:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017f24:	74 10                	je     c0017f36 <x87EmulHandler(regs*, void*)+0x1f>
c0017f26:	83 ec 0c             	sub    esp,0xc
c0017f29:	68 59 2c 02 c0       	push   0xc0022c59
c0017f2e:	e8 e8 96 ff ff       	call   c001161b <KePanic(char const*)>
c0017f33:	83 c4 10             	add    esp,0x10
c0017f36:	0f 20 c0             	mov    eax,cr0
c0017f39:	a8 08                	test   al,0x8
c0017f3b:	74 59                	je     c0017f96 <x87EmulHandler(regs*, void*)+0x7f>
c0017f3d:	0f 06                	clts   
c0017f3f:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017f44:	85 c0                	test   eax,eax
c0017f46:	74 0e                	je     c0017f56 <x87EmulHandler(regs*, void*)+0x3f>
c0017f48:	83 ec 0c             	sub    esp,0xc
c0017f4b:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017f4e:	e8 9c ff ff ff       	call   c0017eef <i386SaveCoprocessor(void*)>
c0017f53:	83 c4 10             	add    esp,0x10
c0017f56:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017f5c:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017f60:	75 12                	jne    c0017f74 <x87EmulHandler(regs*, void*)+0x5d>
c0017f62:	83 ec 0c             	sub    esp,0xc
c0017f65:	68 40 02 00 00       	push   0x240
c0017f6a:	e8 47 fb fe ff       	call   c0007ab6 <malloc>
c0017f6f:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017f72:	eb 10                	jmp    c0017f84 <x87EmulHandler(regs*, void*)+0x6d>
c0017f74:	83 ec 0c             	sub    esp,0xc
c0017f77:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017f7c:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017f7f:	e8 7f ff ff ff       	call   c0017f03 <i386LoadCoprocessor(void*)>
c0017f84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f89:	83 c4 10             	add    esp,0x10
c0017f8c:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0017f91:	83 c4 08             	add    esp,0x8
c0017f94:	5b                   	pop    ebx
c0017f95:	c3                   	ret    
c0017f96:	83 ec 0c             	sub    esp,0xc
c0017f99:	68 6d 2c 02 c0       	push   0xc0022c6d
c0017f9e:	e8 a2 29 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017fa3:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017fab:	83 c4 18             	add    esp,0x18
c0017fae:	5b                   	pop    ebx
c0017faf:	e9 94 eb ff ff       	jmp    c0016b48 <Thr::terminateFromIRQ(int)>

c0017fb4 <HalInitialiseCoprocessor()>:
c0017fb4:	83 ec 10             	sub    esp,0x10
c0017fb7:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c0017fc1:	6a 00                	push   0x0
c0017fc3:	68 17 7f 01 c0       	push   0xc0017f17
c0017fc8:	6a 07                	push   0x7
c0017fca:	e8 27 4f ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017fcf:	e8 4c 70 00 00       	call   c001f020 <avxDetect>
c0017fd4:	83 c4 10             	add    esp,0x10
c0017fd7:	85 c0                	test   eax,eax
c0017fd9:	74 1c                	je     c0017ff7 <HalInitialiseCoprocessor()+0x43>
c0017fdb:	c7 05 70 c7 02 c0 4a f0 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f04a
c0017fe5:	c7 05 6c c7 02 c0 5b f0 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f05b
c0017fef:	83 c4 0c             	add    esp,0xc
c0017ff2:	e9 75 70 00 00       	jmp    c001f06c <avxInit>
c0017ff7:	e8 b4 73 00 00       	call   c001f3b0 <absolutelyNoChanceInHell>
c0017ffc:	85 c0                	test   eax,eax
c0017ffe:	74 1c                	je     c001801c <HalInitialiseCoprocessor()+0x68>
c0018000:	c7 05 70 c7 02 c0 c8 f3 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f3c8
c001800a:	c7 05 6c c7 02 c0 d0 f3 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f3d0
c0018014:	83 c4 0c             	add    esp,0xc
c0018017:	e9 bc 73 00 00       	jmp    c001f3d8 <sseInit>
c001801c:	e8 d5 73 00 00       	call   c001f3f6 <x87Detect>
c0018021:	85 c0                	test   eax,eax
c0018023:	74 1c                	je     c0018041 <HalInitialiseCoprocessor()+0x8d>
c0018025:	c7 05 70 c7 02 c0 11 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f411
c001802f:	c7 05 6c c7 02 c0 18 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f418
c0018039:	83 c4 0c             	add    esp,0xc
c001803c:	e9 de 73 00 00       	jmp    c001f41f <x87Init>
c0018041:	c7 05 70 c7 02 c0 c8 78 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc00178c8
c001804b:	c7 05 6c c7 02 c0 c8 78 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc00178c8
c0018055:	0f 20 c0             	mov    eax,cr0
c0018058:	83 c8 04             	or     eax,0x4
c001805b:	0f 22 c0             	mov    cr0,eax
c001805e:	83 c4 0c             	add    esp,0xc
c0018061:	c3                   	ret    

c0018062 <HalPanic(char const*)>:
c0018062:	53                   	push   ebx
c0018063:	83 ec 10             	sub    esp,0x10
c0018066:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001806a:	fa                   	cli    
c001806b:	53                   	push   ebx
c001806c:	68 83 2c 02 c0       	push   0xc0022c83
c0018071:	e8 cf 28 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0018076:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c001807b:	83 c4 10             	add    esp,0x10
c001807e:	85 c0                	test   eax,eax
c0018080:	74 09                	je     c001808b <HalPanic(char const*)+0x29>
c0018082:	83 ec 0c             	sub    esp,0xc
c0018085:	53                   	push   ebx
c0018086:	ff d0                	call   eax
c0018088:	83 c4 10             	add    esp,0x10
c001808b:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0018090:	85 c0                	test   eax,eax
c0018092:	0f 84 dc 00 00 00    	je     c0018174 <HalPanic(char const*)+0x112>
c0018098:	52                   	push   edx
c0018099:	6a 01                	push   0x1
c001809b:	6a 0f                	push   0xf
c001809d:	50                   	push   eax
c001809e:	e8 11 05 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00180a3:	59                   	pop    ecx
c00180a4:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180aa:	e8 f5 06 ff ff       	call   c00087a4 <VgaText::clearScreen()>
c00180af:	58                   	pop    eax
c00180b0:	5a                   	pop    edx
c00180b1:	68 64 0e 02 c0       	push   0xc0020e64
c00180b6:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180bc:	e8 2b 05 ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c00180c1:	83 c4 0c             	add    esp,0xc
c00180c4:	6a 01                	push   0x1
c00180c6:	6a 0f                	push   0xf
c00180c8:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180ce:	e8 e1 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00180d3:	59                   	pop    ecx
c00180d4:	58                   	pop    eax
c00180d5:	68 9c 2c 02 c0       	push   0xc0022c9c
c00180da:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180e0:	e8 c1 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00180e5:	83 c4 0c             	add    esp,0xc
c00180e8:	6a 0f                	push   0xf
c00180ea:	6a 01                	push   0x1
c00180ec:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180f2:	e8 bd 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00180f7:	58                   	pop    eax
c00180f8:	5a                   	pop    edx
c00180f9:	68 a5 2c 02 c0       	push   0xc0022ca5
c00180fe:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018104:	e8 9d 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018109:	83 c4 0c             	add    esp,0xc
c001810c:	6a 01                	push   0x1
c001810e:	6a 0f                	push   0xf
c0018110:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018116:	e8 99 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001811b:	59                   	pop    ecx
c001811c:	58                   	pop    eax
c001811d:	68 e9 2c 02 c0       	push   0xc0022ce9
c0018122:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018128:	e8 79 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001812d:	58                   	pop    eax
c001812e:	5a                   	pop    edx
c001812f:	68 b2 2c 02 c0       	push   0xc0022cb2
c0018134:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001813a:	e8 67 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001813f:	59                   	pop    ecx
c0018140:	58                   	pop    eax
c0018141:	68 ec 2c 02 c0       	push   0xc0022cec
c0018146:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001814c:	e8 55 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018151:	58                   	pop    eax
c0018152:	5a                   	pop    edx
c0018153:	53                   	push   ebx
c0018154:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001815a:	e8 47 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001815f:	59                   	pop    ecx
c0018160:	5b                   	pop    ebx
c0018161:	68 e9 2c 02 c0       	push   0xc0022ce9
c0018166:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001816c:	e8 35 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018171:	83 c4 10             	add    esp,0x10
c0018174:	eb fe                	jmp    c0018174 <HalPanic(char const*)+0x112>

c0018176 <HalQueryPerformanceCounter()>:
c0018176:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001817b:	31 d2                	xor    edx,edx
c001817d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018183:	31 c0                	xor    eax,eax
c0018185:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001818c:	74 02                	je     c0018190 <HalQueryPerformanceCounter()+0x1a>
c001818e:	0f 31                	rdtsc  
c0018190:	c3                   	ret    

c0018191 <HalInitialise()>:
c0018191:	53                   	push   ebx
c0018192:	83 ec 08             	sub    esp,0x8
c0018195:	e8 8c 4f ff ff       	call   c000d126 <setupINTS()>
c001819a:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c00181a1:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00181a6:	75 0f                	jne    c00181b7 <HalInitialise()+0x26>
c00181a8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00181ae:	83 e2 fe             	and    edx,0xfffffffe
c00181b1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00181b7:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00181bd:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c00181c4:	83 e2 fe             	and    edx,0xfffffffe
c00181c7:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00181cd:	e8 9e 02 00 00       	call   c0018470 <picOpen()>
c00181d2:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c00181d9:	74 0a                	je     c00181e5 <HalInitialise()+0x54>
c00181db:	e8 e0 01 00 00       	call   c00183c0 <picDisable()>
c00181e0:	e8 ad 67 00 00       	call   c001e992 <apicOpen()>
c00181e5:	bb 0f 00 00 00       	mov    ebx,0xf
c00181ea:	50                   	push   eax
c00181eb:	6a 00                	push   0x0
c00181ed:	68 38 7e 01 c0       	push   0xc0017e38
c00181f2:	6a 00                	push   0x0
c00181f4:	e8 fd 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181f9:	83 c4 0c             	add    esp,0xc
c00181fc:	6a 00                	push   0x0
c00181fe:	68 38 7e 01 c0       	push   0xc0017e38
c0018203:	6a 01                	push   0x1
c0018205:	e8 ec 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001820a:	83 c4 0c             	add    esp,0xc
c001820d:	6a 00                	push   0x0
c001820f:	68 c9 78 01 c0       	push   0xc00178c9
c0018214:	6a 02                	push   0x2
c0018216:	e8 db 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001821b:	83 c4 0c             	add    esp,0xc
c001821e:	6a 00                	push   0x0
c0018220:	68 38 7e 01 c0       	push   0xc0017e38
c0018225:	6a 03                	push   0x3
c0018227:	e8 ca 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001822c:	83 c4 0c             	add    esp,0xc
c001822f:	6a 00                	push   0x0
c0018231:	68 38 7e 01 c0       	push   0xc0017e38
c0018236:	6a 04                	push   0x4
c0018238:	e8 b9 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001823d:	83 c4 0c             	add    esp,0xc
c0018240:	6a 00                	push   0x0
c0018242:	68 38 7e 01 c0       	push   0xc0017e38
c0018247:	6a 05                	push   0x5
c0018249:	e8 a8 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001824e:	83 c4 0c             	add    esp,0xc
c0018251:	6a 00                	push   0x0
c0018253:	68 6c 7e 01 c0       	push   0xc0017e6c
c0018258:	6a 06                	push   0x6
c001825a:	e8 97 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001825f:	83 c4 0c             	add    esp,0xc
c0018262:	6a 00                	push   0x0
c0018264:	68 e2 78 01 c0       	push   0xc00178e2
c0018269:	6a 08                	push   0x8
c001826b:	e8 86 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018270:	83 c4 0c             	add    esp,0xc
c0018273:	6a 00                	push   0x0
c0018275:	68 38 7e 01 c0       	push   0xc0017e38
c001827a:	6a 09                	push   0x9
c001827c:	e8 75 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018281:	83 c4 0c             	add    esp,0xc
c0018284:	6a 00                	push   0x0
c0018286:	68 38 7e 01 c0       	push   0xc0017e38
c001828b:	6a 0a                	push   0xa
c001828d:	e8 64 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018292:	83 c4 0c             	add    esp,0xc
c0018295:	6a 00                	push   0x0
c0018297:	68 38 7e 01 c0       	push   0xc0017e38
c001829c:	6a 0b                	push   0xb
c001829e:	e8 53 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182a3:	83 c4 0c             	add    esp,0xc
c00182a6:	6a 00                	push   0x0
c00182a8:	68 48 7d 01 c0       	push   0xc0017d48
c00182ad:	6a 0d                	push   0xd
c00182af:	e8 42 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182b4:	83 c4 0c             	add    esp,0xc
c00182b7:	6a 00                	push   0x0
c00182b9:	68 af 7d 01 c0       	push   0xc0017daf
c00182be:	6a 0e                	push   0xe
c00182c0:	e8 31 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182c5:	83 c4 10             	add    esp,0x10
c00182c8:	50                   	push   eax
c00182c9:	6a 00                	push   0x0
c00182cb:	68 38 7e 01 c0       	push   0xc0017e38
c00182d0:	53                   	push   ebx
c00182d1:	43                   	inc    ebx
c00182d2:	e8 1f 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182d7:	83 c4 10             	add    esp,0x10
c00182da:	83 fb 1e             	cmp    ebx,0x1e
c00182dd:	75 e9                	jne    c00182c8 <HalInitialise()+0x137>
c00182df:	50                   	push   eax
c00182e0:	6a 00                	push   0x0
c00182e2:	68 b4 2a 01 c0       	push   0xc0012ab4
c00182e7:	6a 60                	push   0x60
c00182e9:	e8 08 4c ff ff       	call   c000cef6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182ee:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00182f3:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00182fd:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018304:	e8 ad f7 fe ff       	call   c0007ab6 <malloc>
c0018309:	89 04 24             	mov    DWORD PTR [esp],eax
c001830c:	89 c3                	mov    ebx,eax
c001830e:	e8 3b 09 00 00       	call   c0018c4e <RTC::RTC()>
c0018313:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001831d:	5a                   	pop    edx
c001831e:	59                   	pop    ecx
c001831f:	53                   	push   ebx
c0018320:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018326:	e8 97 46 ff ff       	call   c000c9c2 <Device::addChild(Device*)>
c001832b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001832d:	6a 00                	push   0x0
c001832f:	6a 00                	push   0x0
c0018331:	6a 00                	push   0x0
c0018333:	53                   	push   ebx
c0018334:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018337:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001833c:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018342:	83 c4 28             	add    esp,0x28
c0018345:	5b                   	pop    ebx
c0018346:	c3                   	ret    

c0018347 <HalMakeBeep(int)>:
c0018347:	53                   	push   ebx
c0018348:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001834c:	85 db                	test   ebx,ebx
c001834e:	75 07                	jne    c0018357 <HalMakeBeep(int)+0x10>
c0018350:	e4 61                	in     al,0x61
c0018352:	83 e0 fc             	and    eax,0xfffffffc
c0018355:	eb 26                	jmp    c001837d <HalMakeBeep(int)+0x36>
c0018357:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001835c:	99                   	cdq    
c001835d:	f7 fb                	idiv   ebx
c001835f:	89 c1                	mov    ecx,eax
c0018361:	b0 b6                	mov    al,0xb6
c0018363:	e6 43                	out    0x43,al
c0018365:	88 c8                	mov    al,cl
c0018367:	e6 42                	out    0x42,al
c0018369:	89 c8                	mov    eax,ecx
c001836b:	c1 e8 08             	shr    eax,0x8
c001836e:	e6 42                	out    0x42,al
c0018370:	e4 61                	in     al,0x61
c0018372:	89 c2                	mov    edx,eax
c0018374:	83 ca 03             	or     edx,0x3
c0018377:	38 d0                	cmp    al,dl
c0018379:	74 04                	je     c001837f <HalMakeBeep(int)+0x38>
c001837b:	88 d0                	mov    al,dl
c001837d:	e6 61                	out    0x61,al
c001837f:	5b                   	pop    ebx
c0018380:	c3                   	ret    

c0018381 <HalGetRand()>:
c0018381:	31 c0                	xor    eax,eax
c0018383:	c3                   	ret    

c0018384 <HalEndOfInterrupt(int)>:
c0018384:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c001838b:	74 23                	je     c00183b0 <HalEndOfInterrupt(int)+0x2c>
c001838d:	83 ec 14             	sub    esp,0x14
c0018390:	6a 1b                	push   0x1b
c0018392:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018398:	e8 23 ed fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001839d:	25 00 f0 ff ff       	and    eax,0xfffff000
c00183a2:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00183ac:	83 c4 1c             	add    esp,0x1c
c00183af:	c3                   	ret    
c00183b0:	e9 3f 02 00 00       	jmp    c00185f4 <picEOI(int)>

c00183b5 <HalRestart()>:
c00183b5:	c3                   	ret    

c00183b6 <HalShutdown()>:
c00183b6:	c3                   	ret    

c00183b7 <HalSleep()>:
c00183b7:	c3                   	ret    

c00183b8 <picIoWait()>:
c00183b8:	eb 00                	jmp    c00183ba <picIoWait()+0x2>
c00183ba:	eb 00                	jmp    c00183bc <picIoWait()+0x4>
c00183bc:	90                   	nop
c00183bd:	c3                   	ret    
c00183be:	66 90                	xchg   ax,ax

c00183c0 <picDisable()>:
c00183c0:	83 ec 10             	sub    esp,0x10
c00183c3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00183ca:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00183cf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00183d3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00183d8:	ee                   	out    dx,al
c00183d9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00183e0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00183e5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00183e9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00183ee:	ee                   	out    dx,al
c00183ef:	90                   	nop
c00183f0:	83 c4 10             	add    esp,0x10
c00183f3:	c3                   	ret    

c00183f4 <picGetIRQReg(int)>:
c00183f4:	83 ec 10             	sub    esp,0x10
c00183f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00183fb:	0f b6 c0             	movzx  eax,al
c00183fe:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018405:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018409:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001840d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018412:	ee                   	out    dx,al
c0018413:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018417:	0f b6 c0             	movzx  eax,al
c001841a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018421:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018425:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018429:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001842e:	ee                   	out    dx,al
c001842f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018436:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001843b:	89 c2                	mov    edx,eax
c001843d:	ec                   	in     al,dx
c001843e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018442:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018446:	0f b6 c0             	movzx  eax,al
c0018449:	c1 e0 08             	shl    eax,0x8
c001844c:	89 c1                	mov    ecx,eax
c001844e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018455:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001845a:	89 c2                	mov    edx,eax
c001845c:	ec                   	in     al,dx
c001845d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018461:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018465:	0f b6 c0             	movzx  eax,al
c0018468:	09 c8                	or     eax,ecx
c001846a:	83 c4 10             	add    esp,0x10
c001846d:	c3                   	ret    
c001846e:	66 90                	xchg   ax,ax

c0018470 <picOpen()>:
c0018470:	83 ec 50             	sub    esp,0x50
c0018473:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001847a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001847f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018483:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018487:	ee                   	out    dx,al
c0018488:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001848f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018494:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018498:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001849c:	ee                   	out    dx,al
c001849d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00184a5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00184ad:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00184b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184b8:	89 c2                	mov    edx,eax
c00184ba:	ec                   	in     al,dx
c00184bb:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00184bf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00184c3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00184c7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00184ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184d2:	89 c2                	mov    edx,eax
c00184d4:	ec                   	in     al,dx
c00184d5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00184d9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00184dd:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00184e1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00184e8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00184ed:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00184f1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00184f5:	ee                   	out    dx,al
c00184f6:	e8 bd fe ff ff       	call   c00183b8 <picIoWait()>
c00184fb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018502:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018507:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001850b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001850f:	ee                   	out    dx,al
c0018510:	e8 a3 fe ff ff       	call   c00183b8 <picIoWait()>
c0018515:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018519:	0f b6 c0             	movzx  eax,al
c001851c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018523:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018527:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001852b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001852f:	ee                   	out    dx,al
c0018530:	e8 83 fe ff ff       	call   c00183b8 <picIoWait()>
c0018535:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018539:	0f b6 c0             	movzx  eax,al
c001853c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018543:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018547:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001854b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001854f:	ee                   	out    dx,al
c0018550:	e8 63 fe ff ff       	call   c00183b8 <picIoWait()>
c0018555:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001855c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018561:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018565:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018569:	ee                   	out    dx,al
c001856a:	e8 49 fe ff ff       	call   c00183b8 <picIoWait()>
c001856f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0018576:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001857b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001857f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018583:	ee                   	out    dx,al
c0018584:	e8 2f fe ff ff       	call   c00183b8 <picIoWait()>
c0018589:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018590:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018595:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018599:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001859d:	ee                   	out    dx,al
c001859e:	e8 15 fe ff ff       	call   c00183b8 <picIoWait()>
c00185a3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00185aa:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00185af:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00185b3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00185b7:	ee                   	out    dx,al
c00185b8:	e8 fb fd ff ff       	call   c00183b8 <picIoWait()>
c00185bd:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00185c2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00185c9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00185cd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00185d1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00185d5:	ee                   	out    dx,al
c00185d6:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00185db:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00185e2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00185e6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00185ea:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00185ee:	ee                   	out    dx,al
c00185ef:	90                   	nop
c00185f0:	83 c4 50             	add    esp,0x50
c00185f3:	c3                   	ret    

c00185f4 <picEOI(int)>:
c00185f4:	83 ec 10             	sub    esp,0x10
c00185f7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00185fc:	75 1e                	jne    c001861c <picEOI(int)+0x28>
c00185fe:	6a 0b                	push   0xb
c0018600:	e8 ef fd ff ff       	call   c00183f4 <picGetIRQReg(int)>
c0018605:	83 c4 04             	add    esp,0x4
c0018608:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001860d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018612:	25 80 00 00 00       	and    eax,0x80
c0018617:	74 73                	je     c001868c <picEOI(int)+0x98>
c0018619:	8d 76 00             	lea    esi,[esi+0x0]
c001861c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018621:	75 31                	jne    c0018654 <picEOI(int)+0x60>
c0018623:	6a 0b                	push   0xb
c0018625:	e8 ca fd ff ff       	call   c00183f4 <picGetIRQReg(int)>
c001862a:	83 c4 04             	add    esp,0x4
c001862d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018632:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018636:	98                   	cwde   
c0018637:	85 c0                	test   eax,eax
c0018639:	78 19                	js     c0018654 <picEOI(int)+0x60>
c001863b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018642:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018647:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001864b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018650:	ee                   	out    dx,al
c0018651:	eb 3d                	jmp    c0018690 <picEOI(int)+0x9c>
c0018653:	90                   	nop
c0018654:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018659:	7e 19                	jle    c0018674 <picEOI(int)+0x80>
c001865b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018662:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018667:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001866b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018670:	ee                   	out    dx,al
c0018671:	8d 76 00             	lea    esi,[esi+0x0]
c0018674:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001867b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018680:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018684:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018689:	ee                   	out    dx,al
c001868a:	eb 04                	jmp    c0018690 <picEOI(int)+0x9c>
c001868c:	90                   	nop
c001868d:	8d 76 00             	lea    esi,[esi+0x0]
c0018690:	83 c4 10             	add    esp,0x10
c0018693:	c3                   	ret    

c0018694 <RTC::open(int, int, void*)>:
c0018694:	31 c0                	xor    eax,eax
c0018696:	c3                   	ret    
c0018697:	90                   	nop

c0018698 <RTC::close(int, int, void*)>:
c0018698:	31 c0                	xor    eax,eax
c001869a:	c3                   	ret    
c001869b:	90                   	nop

c001869c <RTC::timeInSecondsUTC()>:
c001869c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186a0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00186a6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00186ac:	c3                   	ret    
c00186ad:	90                   	nop

c00186ae <RTC::timeInDatetimeUTC()>:
c00186ae:	53                   	push   ebx
c00186af:	83 ec 14             	sub    esp,0x14
c00186b2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00186b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00186bc:	50                   	push   eax
c00186bd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00186c0:	83 c4 0c             	add    esp,0xc
c00186c3:	52                   	push   edx
c00186c4:	50                   	push   eax
c00186c5:	53                   	push   ebx
c00186c6:	e8 6b 40 ff ff       	call   c000c736 <secondsToDatetime(unsigned long long)>
c00186cb:	89 d8                	mov    eax,ebx
c00186cd:	83 c4 14             	add    esp,0x14
c00186d0:	5b                   	pop    ebx
c00186d1:	c2 04 00             	ret    0x4

c00186d4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00186d4:	56                   	push   esi
c00186d5:	53                   	push   ebx
c00186d6:	83 ec 14             	sub    esp,0x14
c00186d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00186dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00186df:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00186e2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00186e6:	52                   	push   edx
c00186e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186ef:	50                   	push   eax
c00186f0:	e8 41 40 ff ff       	call   c000c736 <secondsToDatetime(unsigned long long)>
c00186f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186f9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00186fd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018701:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018705:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018709:	89 f0                	mov    eax,esi
c001870b:	83 c4 20             	add    esp,0x20
c001870e:	5b                   	pop    ebx
c001870f:	5e                   	pop    esi
c0018710:	ff e0                	jmp    eax

c0018712 <RTC::~RTC()>:
c0018712:	83 ec 0c             	sub    esp,0xc
c0018715:	ba 88 2d 02 c0       	mov    edx,0xc0022d88
c001871a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001871e:	89 10                	mov    DWORD PTR [eax],edx
c0018720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018724:	83 ec 0c             	sub    esp,0xc
c0018727:	50                   	push   eax
c0018728:	e8 9b 3d ff ff       	call   c000c4c8 <Clock::~Clock()>
c001872d:	83 c4 10             	add    esp,0x10
c0018730:	90                   	nop
c0018731:	83 c4 0c             	add    esp,0xc
c0018734:	c3                   	ret    
c0018735:	90                   	nop

c0018736 <RTC::~RTC()>:
c0018736:	83 ec 0c             	sub    esp,0xc
c0018739:	83 ec 0c             	sub    esp,0xc
c001873c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018740:	e8 cd ff ff ff       	call   c0018712 <RTC::~RTC()>
c0018745:	83 c4 10             	add    esp,0x10
c0018748:	83 ec 08             	sub    esp,0x8
c001874b:	68 60 01 00 00       	push   0x160
c0018750:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018754:	e8 bf 20 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0018759:	83 c4 10             	add    esp,0x10
c001875c:	83 c4 0c             	add    esp,0xc
c001875f:	c3                   	ret    

c0018760 <RTC::get_update_in_progress_flag()>:
c0018760:	83 ec 14             	sub    esp,0x14
c0018763:	6a 0a                	push   0xa
c0018765:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001876b:	e8 08 ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018770:	83 c4 1c             	add    esp,0x1c
c0018773:	0f b6 c0             	movzx  eax,al
c0018776:	c1 e8 07             	shr    eax,0x7
c0018779:	c3                   	ret    

c001877a <RTC::completeRTCRefresh()>:
c001877a:	55                   	push   ebp
c001877b:	57                   	push   edi
c001877c:	56                   	push   esi
c001877d:	53                   	push   ebx
c001877e:	83 ec 3c             	sub    esp,0x3c
c0018781:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018787:	83 ec 0c             	sub    esp,0xc
c001878a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001878e:	e8 cd ff ff ff       	call   c0018760 <RTC::get_update_in_progress_flag()>
c0018793:	83 c4 10             	add    esp,0x10
c0018796:	84 c0                	test   al,al
c0018798:	74 0e                	je     c00187a8 <RTC::completeRTCRefresh()+0x2e>
c001879a:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00187a0:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c00187a6:	73 df                	jae    c0018787 <RTC::completeRTCRefresh()+0xd>
c00187a8:	51                   	push   ecx
c00187a9:	51                   	push   ecx
c00187aa:	6a 00                	push   0x0
c00187ac:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187b2:	e8 c1 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187b7:	5b                   	pop    ebx
c00187b8:	89 c7                	mov    edi,eax
c00187ba:	5e                   	pop    esi
c00187bb:	6a 02                	push   0x2
c00187bd:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187c3:	e8 b0 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187c8:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00187cc:	5d                   	pop    ebp
c00187cd:	58                   	pop    eax
c00187ce:	6a 04                	push   0x4
c00187d0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187d6:	e8 9d e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187db:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00187df:	58                   	pop    eax
c00187e0:	5a                   	pop    edx
c00187e1:	6a 07                	push   0x7
c00187e3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187e9:	e8 8a e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187ee:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00187f2:	59                   	pop    ecx
c00187f3:	5b                   	pop    ebx
c00187f4:	6a 08                	push   0x8
c00187f6:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187fc:	e8 77 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018801:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018805:	5e                   	pop    esi
c0018806:	5d                   	pop    ebp
c0018807:	6a 09                	push   0x9
c0018809:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001880f:	e8 64 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018814:	0f b6 c0             	movzx  eax,al
c0018817:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001881b:	83 c4 10             	add    esp,0x10
c001881e:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018824:	83 ec 0c             	sub    esp,0xc
c0018827:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001882b:	e8 30 ff ff ff       	call   c0018760 <RTC::get_update_in_progress_flag()>
c0018830:	83 c4 10             	add    esp,0x10
c0018833:	84 c0                	test   al,al
c0018835:	74 0e                	je     c0018845 <RTC::completeRTCRefresh()+0xcb>
c0018837:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001883d:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c0018843:	73 df                	jae    c0018824 <RTC::completeRTCRefresh()+0xaa>
c0018845:	51                   	push   ecx
c0018846:	51                   	push   ecx
c0018847:	6a 00                	push   0x0
c0018849:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001884f:	e8 24 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018854:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018858:	5b                   	pop    ebx
c0018859:	5e                   	pop    esi
c001885a:	6a 02                	push   0x2
c001885c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018862:	e8 11 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018867:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001886b:	5d                   	pop    ebp
c001886c:	58                   	pop    eax
c001886d:	6a 04                	push   0x4
c001886f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018875:	e8 fe e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001887a:	88 c3                	mov    bl,al
c001887c:	58                   	pop    eax
c001887d:	5a                   	pop    edx
c001887e:	6a 07                	push   0x7
c0018880:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018886:	e8 ed e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001888b:	59                   	pop    ecx
c001888c:	89 c6                	mov    esi,eax
c001888e:	5d                   	pop    ebp
c001888f:	6a 08                	push   0x8
c0018891:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018897:	e8 dc e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001889c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00188a0:	58                   	pop    eax
c00188a1:	5a                   	pop    edx
c00188a2:	6a 09                	push   0x9
c00188a4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188aa:	e8 c9 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00188af:	89 f9                	mov    ecx,edi
c00188b1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00188b5:	0f b6 e8             	movzx  ebp,al
c00188b8:	83 c4 10             	add    esp,0x10
c00188bb:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00188bf:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00188c4:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c00188c9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00188cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00188d1:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00188d5:	0f 94 c0             	sete   al
c00188d8:	0f b6 fb             	movzx  edi,bl
c00188db:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c00188df:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00188e4:	0f 94 c2             	sete   dl
c00188e7:	21 d0                	and    eax,edx
c00188e9:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00188ed:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00188f1:	0f 94 c2             	sete   dl
c00188f4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00188f8:	21 c2                	and    edx,eax
c00188fa:	89 f0                	mov    eax,esi
c00188fc:	0f b6 c0             	movzx  eax,al
c00188ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018903:	89 f0                	mov    eax,esi
c0018905:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0018909:	0f 94 c0             	sete   al
c001890c:	21 d0                	and    eax,edx
c001890e:	31 d2                	xor    edx,edx
c0018910:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018914:	0f 94 c2             	sete   dl
c0018917:	85 c2                	test   edx,eax
c0018919:	75 27                	jne    c0018942 <RTC::completeRTCRefresh()+0x1c8>
c001891b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001891f:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0018923:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018927:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001892b:	89 f0                	mov    eax,esi
c001892d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018931:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018935:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018939:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001893d:	e9 dc fe ff ff       	jmp    c001881e <RTC::completeRTCRefresh()+0xa4>
c0018942:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018946:	75 d3                	jne    c001891b <RTC::completeRTCRefresh()+0x1a1>
c0018948:	52                   	push   edx
c0018949:	52                   	push   edx
c001894a:	6a 0b                	push   0xb
c001894c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018952:	e8 21 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018957:	83 c4 10             	add    esp,0x10
c001895a:	a8 04                	test   al,0x4
c001895c:	75 7a                	jne    c00189d8 <RTC::completeRTCRefresh()+0x25e>
c001895e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018962:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018966:	83 e1 0f             	and    ecx,0xf
c0018969:	c1 ea 04             	shr    edx,0x4
c001896c:	c1 ef 04             	shr    edi,0x4
c001896f:	6b d2 0a             	imul   edx,edx,0xa
c0018972:	83 e6 0f             	and    esi,0xf
c0018975:	01 d1                	add    ecx,edx
c0018977:	c1 ed 04             	shr    ebp,0x4
c001897a:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001897e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018982:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018986:	c1 ea 04             	shr    edx,0x4
c0018989:	83 e1 0f             	and    ecx,0xf
c001898c:	6b d2 0a             	imul   edx,edx,0xa
c001898f:	6b ed 0a             	imul   ebp,ebp,0xa
c0018992:	01 d1                	add    ecx,edx
c0018994:	89 fa                	mov    edx,edi
c0018996:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001899a:	83 e2 07             	and    edx,0x7
c001899d:	89 d9                	mov    ecx,ebx
c001899f:	6b d2 0a             	imul   edx,edx,0xa
c00189a2:	83 e1 0f             	and    ecx,0xf
c00189a5:	83 e3 80             	and    ebx,0xffffff80
c00189a8:	01 d1                	add    ecx,edx
c00189aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00189ae:	09 cb                	or     ebx,ecx
c00189b0:	c1 ea 04             	shr    edx,0x4
c00189b3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00189b7:	6b d2 0a             	imul   edx,edx,0xa
c00189ba:	83 e1 0f             	and    ecx,0xf
c00189bd:	01 d6                	add    esi,edx
c00189bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00189c3:	c1 ea 04             	shr    edx,0x4
c00189c6:	6b d2 0a             	imul   edx,edx,0xa
c00189c9:	01 d1                	add    ecx,edx
c00189cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00189cf:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00189d3:	83 e2 0f             	and    edx,0xf
c00189d6:	01 d5                	add    ebp,edx
c00189d8:	a8 02                	test   al,0x2
c00189da:	75 15                	jne    c00189f1 <RTC::completeRTCRefresh()+0x277>
c00189dc:	f6 c3 80             	test   bl,0x80
c00189df:	74 10                	je     c00189f1 <RTC::completeRTCRefresh()+0x277>
c00189e1:	83 e3 7f             	and    ebx,0x7f
c00189e4:	b9 18 00 00 00       	mov    ecx,0x18
c00189e9:	8d 43 0c             	lea    eax,[ebx+0xc]
c00189ec:	99                   	cdq    
c00189ed:	f7 f9                	idiv   ecx
c00189ef:	88 d3                	mov    bl,dl
c00189f1:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00189f7:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00189fd:	77 06                	ja     c0018a05 <RTC::completeRTCRefresh()+0x28b>
c00189ff:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018a05:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a0a:	31 c9                	xor    ecx,ecx
c0018a0c:	c1 e0 10             	shl    eax,0x10
c0018a0f:	89 cd                	mov    ebp,ecx
c0018a11:	c1 e7 10             	shl    edi,0x10
c0018a14:	31 d2                	xor    edx,edx
c0018a16:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018a1c:	09 c5                	or     ebp,eax
c0018a1e:	89 f0                	mov    eax,esi
c0018a20:	89 e9                	mov    ecx,ebp
c0018a22:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018a26:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018a2a:	88 c2                	mov    dl,al
c0018a2c:	88 d9                	mov    cl,bl
c0018a2e:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0018a32:	0f b7 c2             	movzx  eax,dx
c0018a35:	09 f8                	or     eax,edi
c0018a37:	89 c2                	mov    edx,eax
c0018a39:	50                   	push   eax
c0018a3a:	50                   	push   eax
c0018a3b:	51                   	push   ecx
c0018a3c:	52                   	push   edx
c0018a3d:	e8 75 3b ff ff       	call   c000c5b7 <datetimeToSeconds(datetime_t)>
c0018a42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018a46:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018a4c:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018a52:	83 c4 4c             	add    esp,0x4c
c0018a55:	5b                   	pop    ebx
c0018a56:	5e                   	pop    esi
c0018a57:	5f                   	pop    edi
c0018a58:	5d                   	pop    ebp
c0018a59:	c3                   	ret    

c0018a5a <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018a5a:	55                   	push   ebp
c0018a5b:	57                   	push   edi
c0018a5c:	56                   	push   esi
c0018a5d:	53                   	push   ebx
c0018a5e:	83 ec 30             	sub    esp,0x30
c0018a61:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018a65:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018a69:	6a 00                	push   0x0
c0018a6b:	6a 00                	push   0x0
c0018a6d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a73:	e8 1a e8 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018a78:	83 c4 0c             	add    esp,0xc
c0018a7b:	6a 00                	push   0x0
c0018a7d:	6a 02                	push   0x2
c0018a7f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a85:	e8 08 e8 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018a8a:	31 d2                	xor    edx,edx
c0018a8c:	89 f9                	mov    ecx,edi
c0018a8e:	89 f8                	mov    eax,edi
c0018a90:	c1 e9 10             	shr    ecx,0x10
c0018a93:	0f b6 c4             	movzx  eax,ah
c0018a96:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018a9a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018a9e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018aa2:	b9 64 00 00 00       	mov    ecx,0x64
c0018aa7:	89 f0                	mov    eax,esi
c0018aa9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018aad:	89 f0                	mov    eax,esi
c0018aaf:	0f b6 c4             	movzx  eax,ah
c0018ab2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018ab6:	89 f0                	mov    eax,esi
c0018ab8:	c1 e8 10             	shr    eax,0x10
c0018abb:	f7 f1                	div    ecx
c0018abd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018ac1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018ac5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018ac9:	59                   	pop    ecx
c0018aca:	5b                   	pop    ebx
c0018acb:	89 fb                	mov    ebx,edi
c0018acd:	6a 0b                	push   0xb
c0018acf:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ad5:	e8 9e e6 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018ada:	83 c4 10             	add    esp,0x10
c0018add:	89 c5                	mov    ebp,eax
c0018adf:	a8 04                	test   al,0x4
c0018ae1:	75 6e                	jne    c0018b51 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018ae3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018ae7:	31 d2                	xor    edx,edx
c0018ae9:	0f b6 c1             	movzx  eax,cl
c0018aec:	b9 0a 00 00 00       	mov    ecx,0xa
c0018af1:	f7 f1                	div    ecx
c0018af3:	c1 e0 04             	shl    eax,0x4
c0018af6:	09 d0                	or     eax,edx
c0018af8:	31 d2                	xor    edx,edx
c0018afa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018afe:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018b03:	f7 f1                	div    ecx
c0018b05:	c1 e0 04             	shl    eax,0x4
c0018b08:	09 d0                	or     eax,edx
c0018b0a:	31 d2                	xor    edx,edx
c0018b0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018b10:	0f b6 c3             	movzx  eax,bl
c0018b13:	f7 f1                	div    ecx
c0018b15:	c1 e0 04             	shl    eax,0x4
c0018b18:	09 d0                	or     eax,edx
c0018b1a:	31 d2                	xor    edx,edx
c0018b1c:	89 c3                	mov    ebx,eax
c0018b1e:	89 f0                	mov    eax,esi
c0018b20:	0f b6 c0             	movzx  eax,al
c0018b23:	f7 f1                	div    ecx
c0018b25:	c1 e0 04             	shl    eax,0x4
c0018b28:	09 d0                	or     eax,edx
c0018b2a:	31 d2                	xor    edx,edx
c0018b2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018b30:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b35:	f7 f1                	div    ecx
c0018b37:	c1 e0 04             	shl    eax,0x4
c0018b3a:	09 d0                	or     eax,edx
c0018b3c:	31 d2                	xor    edx,edx
c0018b3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018b42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018b46:	f7 f1                	div    ecx
c0018b48:	c1 e0 04             	shl    eax,0x4
c0018b4b:	09 d0                	or     eax,edx
c0018b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018b51:	83 e5 02             	and    ebp,0x2
c0018b54:	75 1e                	jne    c0018b74 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b56:	0f b6 c3             	movzx  eax,bl
c0018b59:	83 f8 0b             	cmp    eax,0xb
c0018b5c:	76 10                	jbe    c0018b6e <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018b5e:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018b61:	88 d3                	mov    bl,dl
c0018b63:	84 d2                	test   dl,dl
c0018b65:	75 02                	jne    c0018b69 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018b67:	b3 0c                	mov    bl,0xc
c0018b69:	83 cb 80             	or     ebx,0xffffff80
c0018b6c:	eb 06                	jmp    c0018b74 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b6e:	85 c0                	test   eax,eax
c0018b70:	75 02                	jne    c0018b74 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b72:	b3 0c                	mov    bl,0xc
c0018b74:	0f b6 db             	movzx  ebx,bl
c0018b77:	50                   	push   eax
c0018b78:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018b7d:	52                   	push   edx
c0018b7e:	6a 00                	push   0x0
c0018b80:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b86:	e8 07 e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b8b:	83 c4 0c             	add    esp,0xc
c0018b8e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b93:	50                   	push   eax
c0018b94:	6a 02                	push   0x2
c0018b96:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b9c:	e8 f1 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ba1:	83 c4 0c             	add    esp,0xc
c0018ba4:	53                   	push   ebx
c0018ba5:	6a 04                	push   0x4
c0018ba7:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bad:	e8 e0 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bb2:	83 c4 0c             	add    esp,0xc
c0018bb5:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018bba:	52                   	push   edx
c0018bbb:	6a 07                	push   0x7
c0018bbd:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bc3:	e8 ca e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bc8:	83 c4 0c             	add    esp,0xc
c0018bcb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018bd0:	50                   	push   eax
c0018bd1:	6a 08                	push   0x8
c0018bd3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bd9:	e8 b4 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bde:	83 c4 0c             	add    esp,0xc
c0018be1:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018be6:	55                   	push   ebp
c0018be7:	6a 09                	push   0x9
c0018be9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bef:	e8 9e e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bf4:	5a                   	pop    edx
c0018bf5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018bf9:	e8 7c fb ff ff       	call   c001877a <RTC::completeRTCRefresh()>
c0018bfe:	83 c4 3c             	add    esp,0x3c
c0018c01:	b0 01                	mov    al,0x1
c0018c03:	5b                   	pop    ebx
c0018c04:	5e                   	pop    esi
c0018c05:	5f                   	pop    edi
c0018c06:	5d                   	pop    ebp
c0018c07:	c3                   	ret    

c0018c08 <rtcIRQHandler(regs*, void*)>:
c0018c08:	53                   	push   ebx
c0018c09:	83 ec 10             	sub    esp,0x10
c0018c0c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018c10:	6a 0c                	push   0xc
c0018c12:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c18:	e8 5b e5 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018c1d:	83 c4 10             	add    esp,0x10
c0018c20:	a8 80                	test   al,0x80
c0018c22:	74 24                	je     c0018c48 <rtcIRQHandler(regs*, void*)+0x40>
c0018c24:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018c2b:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018c32:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018c39:	75 0d                	jne    c0018c48 <rtcIRQHandler(regs*, void*)+0x40>
c0018c3b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018c3f:	83 c4 08             	add    esp,0x8
c0018c42:	5b                   	pop    ebx
c0018c43:	e9 32 fb ff ff       	jmp    c001877a <RTC::completeRTCRefresh()>
c0018c48:	83 c4 08             	add    esp,0x8
c0018c4b:	5b                   	pop    ebx
c0018c4c:	c3                   	ret    
c0018c4d:	90                   	nop

c0018c4e <RTC::RTC()>:
c0018c4e:	83 ec 1c             	sub    esp,0x1c
c0018c51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c55:	83 ec 08             	sub    esp,0x8
c0018c58:	68 6b 2d 02 c0       	push   0xc0022d6b
c0018c5d:	50                   	push   eax
c0018c5e:	e8 2f 38 ff ff       	call   c000c492 <Clock::Clock(char const*)>
c0018c63:	83 c4 10             	add    esp,0x10
c0018c66:	ba 88 2d 02 c0       	mov    edx,0xc0022d88
c0018c6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c6f:	89 10                	mov    DWORD PTR [eax],edx
c0018c71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c75:	83 ec 0c             	sub    esp,0xc
c0018c78:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018c7c:	6a 01                	push   0x1
c0018c7e:	68 08 8c 01 c0       	push   0xc0018c08
c0018c83:	6a 08                	push   0x8
c0018c85:	50                   	push   eax
c0018c86:	e8 e3 3c ff ff       	call   c000c96e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018c8b:	83 c4 20             	add    esp,0x20
c0018c8e:	89 c2                	mov    edx,eax
c0018c90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c94:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018c9a:	fa                   	cli    
c0018c9b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018ca0:	83 c0 01             	add    eax,0x1
c0018ca3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018ca8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018cad:	83 ec 08             	sub    esp,0x8
c0018cb0:	6a 0b                	push   0xb
c0018cb2:	50                   	push   eax
c0018cb3:	e8 c0 e4 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018cb8:	83 c4 10             	add    esp,0x10
c0018cbb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018cbf:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018cc4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018cc8:	83 ca 10             	or     edx,0x10
c0018ccb:	0f b6 d2             	movzx  edx,dl
c0018cce:	83 ec 04             	sub    esp,0x4
c0018cd1:	52                   	push   edx
c0018cd2:	6a 0b                	push   0xb
c0018cd4:	50                   	push   eax
c0018cd5:	e8 b8 e5 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018cda:	83 c4 10             	add    esp,0x10
c0018cdd:	83 ec 0c             	sub    esp,0xc
c0018ce0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018ce4:	e8 91 fa ff ff       	call   c001877a <RTC::completeRTCRefresh()>
c0018ce9:	83 c4 10             	add    esp,0x10
c0018cec:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018cf1:	83 e8 01             	sub    eax,0x1
c0018cf4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018cf9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018cfe:	85 c0                	test   eax,eax
c0018d00:	75 01                	jne    c0018d03 <RTC::RTC()+0xb5>
c0018d02:	fb                   	sti    
c0018d03:	90                   	nop
c0018d04:	83 c4 1c             	add    esp,0x1c
c0018d07:	c3                   	ret    

c0018d08 <HalConsoleScroll(int, int)>:
c0018d08:	83 ec 10             	sub    esp,0x10
c0018d0b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018d13:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018d1b:	90                   	nop
c0018d1c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018d21:	0f 8f e1 00 00 00    	jg     c0018e08 <HalConsoleScroll(int, int)+0x100>
c0018d27:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018d2f:	90                   	nop
c0018d30:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018d38:	0f 8f be 00 00 00    	jg     c0018dfc <HalConsoleScroll(int, int)+0xf4>
c0018d3e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d42:	89 d0                	mov    eax,edx
c0018d44:	c1 e0 02             	shl    eax,0x2
c0018d47:	01 d0                	add    eax,edx
c0018d49:	c1 e0 05             	shl    eax,0x5
c0018d4c:	89 c2                	mov    edx,eax
c0018d4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d52:	01 d0                	add    eax,edx
c0018d54:	89 c2                	mov    edx,eax
c0018d56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d5a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018d5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d61:	89 d0                	mov    eax,edx
c0018d63:	c1 e0 02             	shl    eax,0x2
c0018d66:	01 d0                	add    eax,edx
c0018d68:	c1 e0 05             	shl    eax,0x5
c0018d6b:	89 c2                	mov    edx,eax
c0018d6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d71:	01 d0                	add    eax,edx
c0018d73:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018d79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d7d:	01 c2                	add    edx,eax
c0018d7f:	8a 01                	mov    al,BYTE PTR [ecx]
c0018d81:	88 02                	mov    BYTE PTR [edx],al
c0018d83:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018d88:	75 66                	jne    c0018df0 <HalConsoleScroll(int, int)+0xe8>
c0018d8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d8e:	83 e0 01             	and    eax,0x1
c0018d91:	74 39                	je     c0018dcc <HalConsoleScroll(int, int)+0xc4>
c0018d93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d97:	83 e0 0f             	and    eax,0xf
c0018d9a:	88 c2                	mov    dl,al
c0018d9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018da0:	c1 e0 04             	shl    eax,0x4
c0018da3:	09 d0                	or     eax,edx
c0018da5:	88 c1                	mov    cl,al
c0018da7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018dab:	89 d0                	mov    eax,edx
c0018dad:	c1 e0 02             	shl    eax,0x2
c0018db0:	01 d0                	add    eax,edx
c0018db2:	c1 e0 05             	shl    eax,0x5
c0018db5:	89 c2                	mov    edx,eax
c0018db7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018dbb:	01 d0                	add    eax,edx
c0018dbd:	89 c2                	mov    edx,eax
c0018dbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018dc3:	01 d0                	add    eax,edx
c0018dc5:	88 ca                	mov    dl,cl
c0018dc7:	88 10                	mov    BYTE PTR [eax],dl
c0018dc9:	eb 25                	jmp    c0018df0 <HalConsoleScroll(int, int)+0xe8>
c0018dcb:	90                   	nop
c0018dcc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018dd0:	89 d0                	mov    eax,edx
c0018dd2:	c1 e0 02             	shl    eax,0x2
c0018dd5:	01 d0                	add    eax,edx
c0018dd7:	c1 e0 05             	shl    eax,0x5
c0018dda:	89 c2                	mov    edx,eax
c0018ddc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018de0:	01 d0                	add    eax,edx
c0018de2:	89 c2                	mov    edx,eax
c0018de4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018de8:	01 d0                	add    eax,edx
c0018dea:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018ded:	8d 76 00             	lea    esi,[esi+0x0]
c0018df0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018df5:	e9 36 ff ff ff       	jmp    c0018d30 <HalConsoleScroll(int, int)+0x28>
c0018dfa:	66 90                	xchg   ax,ax
c0018dfc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018e01:	e9 16 ff ff ff       	jmp    c0018d1c <HalConsoleScroll(int, int)+0x14>
c0018e06:	66 90                	xchg   ax,ax
c0018e08:	90                   	nop
c0018e09:	83 c4 10             	add    esp,0x10
c0018e0c:	c3                   	ret    
c0018e0d:	8d 76 00             	lea    esi,[esi+0x0]

c0018e10 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018e10:	83 ec 14             	sub    esp,0x14
c0018e13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e17:	88 04 24             	mov    BYTE PTR [esp],al
c0018e1a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018e1d:	0f b6 c0             	movzx  eax,al
c0018e20:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e24:	89 d1                	mov    ecx,edx
c0018e26:	83 e1 0f             	and    ecx,0xf
c0018e29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018e2d:	c1 e2 04             	shl    edx,0x4
c0018e30:	0f b6 d2             	movzx  edx,dl
c0018e33:	09 ca                	or     edx,ecx
c0018e35:	c1 e2 08             	shl    edx,0x8
c0018e38:	09 d0                	or     eax,edx
c0018e3a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018e3f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018e47:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e4b:	89 d0                	mov    eax,edx
c0018e4d:	c1 e0 02             	shl    eax,0x2
c0018e50:	01 d0                	add    eax,edx
c0018e52:	c1 e0 04             	shl    eax,0x4
c0018e55:	89 c2                	mov    edx,eax
c0018e57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e5b:	01 d0                	add    eax,edx
c0018e5d:	01 c0                	add    eax,eax
c0018e5f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018e63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e67:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018e6c:	66 89 02             	mov    WORD PTR [edx],ax
c0018e6f:	90                   	nop
c0018e70:	83 c4 14             	add    esp,0x14
c0018e73:	c3                   	ret    

c0018e74 <HalConsoleCursorUpdate(int, int)>:
c0018e74:	83 ec 20             	sub    esp,0x20
c0018e77:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e7b:	89 c2                	mov    edx,eax
c0018e7d:	c1 e2 02             	shl    edx,0x2
c0018e80:	01 d0                	add    eax,edx
c0018e82:	c1 e0 04             	shl    eax,0x4
c0018e85:	89 c2                	mov    edx,eax
c0018e87:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e8b:	01 d0                	add    eax,edx
c0018e8d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018e92:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018e99:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018e9e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018ea2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ea6:	ee                   	out    dx,al
c0018ea7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018eac:	0f b6 c0             	movzx  eax,al
c0018eaf:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018eb6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018eba:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018ebe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018ec2:	ee                   	out    dx,al
c0018ec3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018eca:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018ecf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018ed3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018ed7:	ee                   	out    dx,al
c0018ed8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018edd:	c1 e8 08             	shr    eax,0x8
c0018ee0:	0f b6 c0             	movzx  eax,al
c0018ee3:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018eea:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018eee:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018ef2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018ef6:	ee                   	out    dx,al
c0018ef7:	90                   	nop
c0018ef8:	83 c4 20             	add    esp,0x20
c0018efb:	c3                   	ret    

c0018efc <FAT::getName()>:
c0018efc:	b8 bc 2d 02 c0       	mov    eax,0xc0022dbc
c0018f01:	c3                   	ret    
c0018f02:	66 90                	xchg   ax,ax

c0018f04 <FAT::tell(void*, unsigned long long*)>:
c0018f04:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f09:	75 09                	jne    c0018f14 <FAT::tell(void*, unsigned long long*)+0x10>
c0018f0b:	b8 04 00 00 00       	mov    eax,0x4
c0018f10:	c3                   	ret    
c0018f11:	8d 76 00             	lea    esi,[esi+0x0]
c0018f14:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f19:	75 09                	jne    c0018f24 <FAT::tell(void*, unsigned long long*)+0x20>
c0018f1b:	b8 04 00 00 00       	mov    eax,0x4
c0018f20:	c3                   	ret    
c0018f21:	8d 76 00             	lea    esi,[esi+0x0]
c0018f24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f28:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018f2b:	ba 00 00 00 00       	mov    edx,0x0
c0018f30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018f34:	89 01                	mov    DWORD PTR [ecx],eax
c0018f36:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018f39:	b8 00 00 00 00       	mov    eax,0x0
c0018f3e:	c3                   	ret    
c0018f3f:	90                   	nop

c0018f40 <FAT::stat(void*, unsigned long long*)>:
c0018f40:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f45:	75 09                	jne    c0018f50 <FAT::stat(void*, unsigned long long*)+0x10>
c0018f47:	b8 04 00 00 00       	mov    eax,0x4
c0018f4c:	c3                   	ret    
c0018f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f50:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f55:	75 09                	jne    c0018f60 <FAT::stat(void*, unsigned long long*)+0x20>
c0018f57:	b8 04 00 00 00       	mov    eax,0x4
c0018f5c:	c3                   	ret    
c0018f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f64:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018f67:	ba 00 00 00 00       	mov    edx,0x0
c0018f6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018f70:	89 01                	mov    DWORD PTR [ecx],eax
c0018f72:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018f75:	b8 00 00 00 00       	mov    eax,0x0
c0018f7a:	c3                   	ret    
c0018f7b:	90                   	nop

c0018f7c <FAT::~FAT()>:
c0018f7c:	83 ec 0c             	sub    esp,0xc
c0018f7f:	ba 08 2e 02 c0       	mov    edx,0xc0022e08
c0018f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f88:	89 10                	mov    DWORD PTR [eax],edx
c0018f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f8e:	83 ec 0c             	sub    esp,0xc
c0018f91:	50                   	push   eax
c0018f92:	e8 33 28 ff ff       	call   c000b7ca <Filesystem::~Filesystem()>
c0018f97:	83 c4 10             	add    esp,0x10
c0018f9a:	90                   	nop
c0018f9b:	83 c4 0c             	add    esp,0xc
c0018f9e:	c3                   	ret    
c0018f9f:	90                   	nop

c0018fa0 <FAT::~FAT()>:
c0018fa0:	83 ec 0c             	sub    esp,0xc
c0018fa3:	83 ec 0c             	sub    esp,0xc
c0018fa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018faa:	e8 cd ff ff ff       	call   c0018f7c <FAT::~FAT()>
c0018faf:	83 c4 10             	add    esp,0x10
c0018fb2:	83 ec 08             	sub    esp,0x8
c0018fb5:	6a 08                	push   0x8
c0018fb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018fbb:	e8 58 18 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0018fc0:	83 c4 10             	add    esp,0x10
c0018fc3:	83 c4 0c             	add    esp,0xc
c0018fc6:	c3                   	ret    
c0018fc7:	90                   	nop

c0018fc8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018fc8:	83 ec 1c             	sub    esp,0x1c
c0018fcb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018fd2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018fd7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fdb:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018fe2:	83 f8 ff             	cmp    eax,0xffffffff
c0018fe5:	75 35                	jne    c001901c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018fe7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018feb:	88 c2                	mov    dl,al
c0018fed:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018ff2:	01 d0                	add    eax,edx
c0018ff4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018ff8:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0018ffe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019002:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019009:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001900e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019012:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019019:	eb 19                	jmp    c0019034 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001901b:	90                   	nop
c001901c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019020:	88 c2                	mov    dl,al
c0019022:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019026:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001902d:	01 d0                	add    eax,edx
c001902f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019033:	90                   	nop
c0019034:	83 ec 04             	sub    esp,0x4
c0019037:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001903b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001903f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019043:	50                   	push   eax
c0019044:	e8 86 bf fe ff       	call   c0004fcf <f_getlabel>
c0019049:	83 c4 10             	add    esp,0x10
c001904c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019050:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019055:	75 09                	jne    c0019060 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019057:	b8 00 00 00 00       	mov    eax,0x0
c001905c:	eb 0a                	jmp    c0019068 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001905e:	66 90                	xchg   ax,ax
c0019060:	b8 01 00 00 00       	mov    eax,0x1
c0019065:	8d 76 00             	lea    esi,[esi+0x0]
c0019068:	83 c4 1c             	add    esp,0x1c
c001906b:	c3                   	ret    

c001906c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001906c:	57                   	push   edi
c001906d:	83 ec 58             	sub    esp,0x58
c0019070:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019078:	8d 54 24 10          	lea    edx,[esp+0x10]
c001907c:	b8 00 00 00 00       	mov    eax,0x0
c0019081:	b9 0f 00 00 00       	mov    ecx,0xf
c0019086:	fc                   	cld    
c0019087:	89 d7                	mov    edi,edx
c0019089:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001908b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001908f:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019096:	83 f8 ff             	cmp    eax,0xffffffff
c0019099:	75 35                	jne    c00190d0 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001909b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001909f:	88 c2                	mov    dl,al
c00190a1:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00190a6:	01 d0                	add    eax,edx
c00190a8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00190ac:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00190b2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00190b6:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00190bd:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00190c2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00190c6:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00190cd:	eb 19                	jmp    c00190e8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00190cf:	90                   	nop
c00190d0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00190d4:	88 c2                	mov    dl,al
c00190d6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00190da:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00190e1:	01 d0                	add    eax,edx
c00190e3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00190e7:	90                   	nop
c00190e8:	83 ec 08             	sub    esp,0x8
c00190eb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00190ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190f3:	50                   	push   eax
c00190f4:	e8 47 77 fe ff       	call   c0000840 <strcat>
c00190f9:	83 c4 10             	add    esp,0x10
c00190fc:	83 ec 0c             	sub    esp,0xc
c00190ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019103:	50                   	push   eax
c0019104:	e8 17 c0 fe ff       	call   c0005120 <f_setlabel>
c0019109:	83 c4 10             	add    esp,0x10
c001910c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019110:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019115:	75 09                	jne    c0019120 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0019117:	b8 00 00 00 00       	mov    eax,0x0
c001911c:	eb 0a                	jmp    c0019128 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001911e:	66 90                	xchg   ax,ax
c0019120:	b8 01 00 00 00       	mov    eax,0x1
c0019125:	8d 76 00             	lea    esi,[esi+0x0]
c0019128:	83 c4 58             	add    esp,0x58
c001912b:	5f                   	pop    edi
c001912c:	c3                   	ret    
c001912d:	90                   	nop
c001912e:	66 90                	xchg   ax,ax

c0019130 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019130:	83 ec 2c             	sub    esp,0x2c
c0019133:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001913b:	83 ec 08             	sub    esp,0x8
c001913e:	68 e0 2d 02 c0       	push   0xc0022de0
c0019143:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019147:	e8 04 76 fe ff       	call   c0000750 <strcmp>
c001914c:	83 c4 10             	add    esp,0x10
c001914f:	85 c0                	test   eax,eax
c0019151:	0f 94 c0             	sete   al
c0019154:	0f b6 c0             	movzx  eax,al
c0019157:	85 c0                	test   eax,eax
c0019159:	74 0d                	je     c0019168 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001915b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019163:	e9 c0 00 00 00       	jmp    c0019228 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019168:	83 ec 08             	sub    esp,0x8
c001916b:	68 d2 2d 02 c0       	push   0xc0022dd2
c0019170:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019174:	e8 d7 75 fe ff       	call   c0000750 <strcmp>
c0019179:	83 c4 10             	add    esp,0x10
c001917c:	85 c0                	test   eax,eax
c001917e:	0f 94 c0             	sete   al
c0019181:	0f b6 c0             	movzx  eax,al
c0019184:	85 c0                	test   eax,eax
c0019186:	74 10                	je     c0019198 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0019188:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019190:	e9 93 00 00 00       	jmp    c0019228 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019195:	8d 76 00             	lea    esi,[esi+0x0]
c0019198:	83 ec 08             	sub    esp,0x8
c001919b:	68 d8 2d 02 c0       	push   0xc0022dd8
c00191a0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191a4:	e8 a7 75 fe ff       	call   c0000750 <strcmp>
c00191a9:	83 c4 10             	add    esp,0x10
c00191ac:	85 c0                	test   eax,eax
c00191ae:	0f 94 c0             	sete   al
c00191b1:	0f b6 c0             	movzx  eax,al
c00191b4:	85 c0                	test   eax,eax
c00191b6:	74 0c                	je     c00191c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00191b8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00191c0:	eb 66                	jmp    c0019228 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191c2:	66 90                	xchg   ax,ax
c00191c4:	83 ec 08             	sub    esp,0x8
c00191c7:	68 1c 05 02 c0       	push   0xc002051c
c00191cc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191d0:	e8 7b 75 fe ff       	call   c0000750 <strcmp>
c00191d5:	83 c4 10             	add    esp,0x10
c00191d8:	85 c0                	test   eax,eax
c00191da:	0f 94 c0             	sete   al
c00191dd:	0f b6 c0             	movzx  eax,al
c00191e0:	85 c0                	test   eax,eax
c00191e2:	74 0c                	je     c00191f0 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00191e4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00191ec:	eb 3a                	jmp    c0019228 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191ee:	66 90                	xchg   ax,ax
c00191f0:	83 ec 08             	sub    esp,0x8
c00191f3:	68 de 2d 02 c0       	push   0xc0022dde
c00191f8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191fc:	e8 4f 75 fe ff       	call   c0000750 <strcmp>
c0019201:	83 c4 10             	add    esp,0x10
c0019204:	85 c0                	test   eax,eax
c0019206:	0f 94 c0             	sete   al
c0019209:	0f b6 c0             	movzx  eax,al
c001920c:	85 c0                	test   eax,eax
c001920e:	74 0c                	je     c001921c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0019210:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019218:	eb 0e                	jmp    c0019228 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001921a:	66 90                	xchg   ax,ax
c001921c:	b8 08 00 00 00       	mov    eax,0x8
c0019221:	e9 ea 00 00 00       	jmp    c0019310 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019226:	66 90                	xchg   ax,ax
c0019228:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001922f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019234:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019238:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001923f:	83 f8 ff             	cmp    eax,0xffffffff
c0019242:	75 34                	jne    c0019278 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019244:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019248:	88 c2                	mov    dl,al
c001924a:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001924f:	01 d0                	add    eax,edx
c0019251:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019255:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001925b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001925f:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019266:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001926b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001926f:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019276:	eb 18                	jmp    c0019290 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0019278:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001927c:	88 c2                	mov    dl,al
c001927e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019282:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019289:	01 d0                	add    eax,edx
c001928b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001928f:	90                   	nop
c0019290:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019294:	88 04 24             	mov    BYTE PTR [esp],al
c0019297:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001929b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001929f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00192a7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00192ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00192b4:	83 ec 0c             	sub    esp,0xc
c00192b7:	68 00 20 00 00       	push   0x2000
c00192bc:	e8 f5 e7 fe ff       	call   c0007ab6 <malloc>
c00192c1:	83 c4 10             	add    esp,0x10
c00192c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00192c8:	68 00 20 00 00       	push   0x2000
c00192cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192d1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192d5:	50                   	push   eax
c00192d6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00192da:	50                   	push   eax
c00192db:	e8 3d c1 fe ff       	call   c000541d <f_mkfs>
c00192e0:	83 c4 10             	add    esp,0x10
c00192e3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00192e7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00192ec:	75 0a                	jne    c00192f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00192ee:	b8 00 00 00 00       	mov    eax,0x0
c00192f3:	eb 1b                	jmp    c0019310 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00192f5:	8d 76 00             	lea    esi,[esi+0x0]
c00192f8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00192fd:	75 09                	jne    c0019308 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00192ff:	b8 09 00 00 00       	mov    eax,0x9
c0019304:	eb 0a                	jmp    c0019310 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019306:	66 90                	xchg   ax,ax
c0019308:	b8 01 00 00 00       	mov    eax,0x1
c001930d:	8d 76 00             	lea    esi,[esi+0x0]
c0019310:	83 c4 2c             	add    esp,0x2c
c0019313:	c3                   	ret    

c0019314 <FAT::tryMount(LogicalDisk*, int)>:
c0019314:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001931a:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001931f:	83 f8 14             	cmp    eax,0x14
c0019322:	75 18                	jne    c001933c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019324:	83 ec 0c             	sub    esp,0xc
c0019327:	68 e4 2d 02 c0       	push   0xc0022de4
c001932c:	e8 ea 82 ff ff       	call   c001161b <KePanic(char const*)>
c0019331:	83 c4 10             	add    esp,0x10
c0019334:	b0 00                	mov    al,0x0
c0019336:	e9 ed 01 00 00       	jmp    c0019528 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001933b:	90                   	nop
c001933c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019343:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019349:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001934f:	3d 00 02 00 00       	cmp    eax,0x200
c0019354:	74 0a                	je     c0019360 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019356:	b0 00                	mov    al,0x0
c0019358:	e9 cb 01 00 00       	jmp    c0019528 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001935d:	8d 76 00             	lea    esi,[esi+0x0]
c0019360:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019368:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001936f:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019376:	83 f8 ff             	cmp    eax,0xffffffff
c0019379:	74 09                	je     c0019384 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001937b:	b0 01                	mov    al,0x1
c001937d:	e9 a6 01 00 00       	jmp    c0019528 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019382:	66 90                	xchg   ax,ax
c0019384:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001938e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019396:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001939d:	88 c2                	mov    dl,al
c001939f:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00193a4:	01 d0                	add    eax,edx
c00193a6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00193ad:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00193b3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00193ba:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00193c1:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00193c6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00193cd:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00193d4:	83 ec 0c             	sub    esp,0xc
c00193d7:	68 34 02 00 00       	push   0x234
c00193dc:	e8 d5 e6 fe ff       	call   c0007ab6 <malloc>
c00193e1:	83 c4 10             	add    esp,0x10
c00193e4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00193eb:	83 ec 04             	sub    esp,0x4
c00193ee:	6a 00                	push   0x0
c00193f0:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00193f7:	50                   	push   eax
c00193f8:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00193ff:	e8 f4 a7 fe ff       	call   c0003bf8 <f_mount>
c0019404:	83 c4 10             	add    esp,0x10
c0019407:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001940e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019416:	74 1c                	je     c0019434 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019418:	83 ec 0c             	sub    esp,0xc
c001941b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019422:	e8 af e6 fe ff       	call   c0007ad6 <rfree>
c0019427:	83 c4 10             	add    esp,0x10
c001942a:	b0 00                	mov    al,0x0
c001942c:	e9 f7 00 00 00       	jmp    c0019528 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019431:	8d 76 00             	lea    esi,[esi+0x0]
c0019434:	83 ec 04             	sub    esp,0x4
c0019437:	68 00 01 00 00       	push   0x100
c001943c:	6a 00                	push   0x0
c001943e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019445:	50                   	push   eax
c0019446:	e8 a5 70 fe ff       	call   c00004f0 <memset>
c001944b:	83 c4 10             	add    esp,0x10
c001944e:	83 ec 08             	sub    esp,0x8
c0019451:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019458:	50                   	push   eax
c0019459:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019460:	50                   	push   eax
c0019461:	e8 da 73 fe ff       	call   c0000840 <strcat>
c0019466:	83 c4 10             	add    esp,0x10
c0019469:	83 ec 08             	sub    esp,0x8
c001946c:	68 f2 2d 02 c0       	push   0xc0022df2
c0019471:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019478:	50                   	push   eax
c0019479:	e8 c2 73 fe ff       	call   c0000840 <strcat>
c001947e:	83 c4 10             	add    esp,0x10
c0019481:	83 ec 04             	sub    esp,0x4
c0019484:	6a 01                	push   0x1
c0019486:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001948d:	50                   	push   eax
c001948e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019492:	50                   	push   eax
c0019493:	e8 c2 a7 fe ff       	call   c0003c5a <f_open>
c0019498:	83 c4 10             	add    esp,0x10
c001949b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00194a2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00194a9:	85 c0                	test   eax,eax
c00194ab:	74 0b                	je     c00194b8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00194ad:	78 31                	js     c00194e0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00194af:	83 e8 04             	sub    eax,0x4
c00194b2:	83 f8 01             	cmp    eax,0x1
c00194b5:	77 29                	ja     c00194e0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00194b7:	90                   	nop
c00194b8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00194c0:	83 ec 0c             	sub    esp,0xc
c00194c3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00194c7:	50                   	push   eax
c00194c8:	e8 5c af fe ff       	call   c0004429 <f_close>
c00194cd:	83 c4 10             	add    esp,0x10
c00194d0:	90                   	nop
c00194d1:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00194d9:	85 c0                	test   eax,eax
c00194db:	74 43                	je     c0019520 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00194dd:	eb 31                	jmp    c0019510 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00194df:	90                   	nop
c00194e0:	83 ec 0c             	sub    esp,0xc
c00194e3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00194ea:	e8 e7 e5 fe ff       	call   c0007ad6 <rfree>
c00194ef:	83 c4 10             	add    esp,0x10
c00194f2:	83 ec 04             	sub    esp,0x4
c00194f5:	6a 00                	push   0x0
c00194f7:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00194fe:	50                   	push   eax
c00194ff:	6a 00                	push   0x0
c0019501:	e8 f2 a6 fe ff       	call   c0003bf8 <f_mount>
c0019506:	83 c4 10             	add    esp,0x10
c0019509:	b0 00                	mov    al,0x0
c001950b:	eb 1b                	jmp    c0019528 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001950d:	8d 76 00             	lea    esi,[esi+0x0]
c0019510:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019515:	83 c0 01             	add    eax,0x1
c0019518:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c001951d:	8d 76 00             	lea    esi,[esi+0x0]
c0019520:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0019527:	90                   	nop
c0019528:	81 c4 4c 03 00 00    	add    esp,0x34c
c001952e:	c3                   	ret    
c001952f:	90                   	nop

c0019530 <FAT::allocateSwapfile(char const*, int)>:
c0019530:	55                   	push   ebp
c0019531:	57                   	push   edi
c0019532:	56                   	push   esi
c0019533:	53                   	push   ebx
c0019534:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001953a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019545:	83 ec 0c             	sub    esp,0xc
c0019548:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001954f:	e8 62 e5 fe ff       	call   c0007ab6 <malloc>
c0019554:	83 c4 10             	add    esp,0x10
c0019557:	89 c7                	mov    edi,eax
c0019559:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001955e:	83 ec 04             	sub    esp,0x4
c0019561:	50                   	push   eax
c0019562:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019569:	57                   	push   edi
c001956a:	e8 d9 25 ff ff       	call   c000bb48 <File::File(char const*, Process*)>
c001956f:	83 c4 10             	add    esp,0x10
c0019572:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019579:	83 ec 04             	sub    esp,0x4
c001957c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019580:	50                   	push   eax
c0019581:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019585:	50                   	push   eax
c0019586:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001958d:	e8 d6 28 ff ff       	call   c000be68 <File::stat(unsigned long long*, bool*)>
c0019592:	83 c4 10             	add    esp,0x10
c0019595:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001959c:	c1 e0 14             	shl    eax,0x14
c001959f:	89 c7                	mov    edi,eax
c00195a1:	89 c5                	mov    ebp,eax
c00195a3:	c1 fd 1f             	sar    ebp,0x1f
c00195a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195aa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00195ae:	89 f9                	mov    ecx,edi
c00195b0:	31 c1                	xor    ecx,eax
c00195b2:	89 cb                	mov    ebx,ecx
c00195b4:	89 e9                	mov    ecx,ebp
c00195b6:	31 d1                	xor    ecx,edx
c00195b8:	89 ce                	mov    esi,ecx
c00195ba:	89 f0                	mov    eax,esi
c00195bc:	09 d8                	or     eax,ebx
c00195be:	0f 84 9c 00 00 00    	je     c0019660 <FAT::allocateSwapfile(char const*, int)+0x130>
c00195c4:	83 ec 0c             	sub    esp,0xc
c00195c7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195ce:	e8 61 27 ff ff       	call   c000bd34 <File::unlink()>
c00195d3:	83 c4 10             	add    esp,0x10
c00195d6:	83 ec 08             	sub    esp,0x8
c00195d9:	6a 12                	push   0x12
c00195db:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195e2:	e8 7f 25 ff ff       	call   c000bb66 <File::open(FileOpenMode)>
c00195e7:	83 c4 10             	add    esp,0x10
c00195ea:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00195f1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00195f7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00195fe:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019605:	c1 e0 14             	shl    eax,0x14
c0019608:	83 ec 04             	sub    esp,0x4
c001960b:	6a 01                	push   0x1
c001960d:	50                   	push   eax
c001960e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019615:	e8 96 bc fe ff       	call   c00052b0 <f_expand>
c001961a:	83 c4 10             	add    esp,0x10
c001961d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019624:	8b 00                	mov    eax,DWORD PTR [eax]
c0019626:	83 c0 10             	add    eax,0x10
c0019629:	8b 00                	mov    eax,DWORD PTR [eax]
c001962b:	83 ec 0c             	sub    esp,0xc
c001962e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019632:	52                   	push   edx
c0019633:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019637:	52                   	push   edx
c0019638:	6a 00                	push   0x0
c001963a:	68 00 04 00 00       	push   0x400
c001963f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019646:	ff d0                	call   eax
c0019648:	83 c4 20             	add    esp,0x20
c001964b:	83 ec 0c             	sub    esp,0xc
c001964e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019655:	e8 6a 25 ff ff       	call   c000bbc4 <File::close()>
c001965a:	83 c4 10             	add    esp,0x10
c001965d:	8d 76 00             	lea    esi,[esi+0x0]
c0019660:	83 ec 08             	sub    esp,0x8
c0019663:	6a 01                	push   0x1
c0019665:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001966c:	e8 f5 24 ff ff       	call   c000bb66 <File::open(FileOpenMode)>
c0019671:	83 c4 10             	add    esp,0x10
c0019674:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001967b:	8b 00                	mov    eax,DWORD PTR [eax]
c001967d:	83 c0 0c             	add    eax,0xc
c0019680:	8b 00                	mov    eax,DWORD PTR [eax]
c0019682:	83 ec 0c             	sub    esp,0xc
c0019685:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019689:	52                   	push   edx
c001968a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001968e:	52                   	push   edx
c001968f:	6a 00                	push   0x0
c0019691:	6a 04                	push   0x4
c0019693:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001969a:	ff d0                	call   eax
c001969c:	83 c4 20             	add    esp,0x20
c001969f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196a6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00196ac:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00196b3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00196ba:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00196bd:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00196c4:	83 ec 0c             	sub    esp,0xc
c00196c7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196ce:	e8 f1 24 ff ff       	call   c000bbc4 <File::close()>
c00196d3:	83 c4 10             	add    esp,0x10
c00196d6:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00196dd:	ba 00 00 00 00       	mov    edx,0x0
c00196e2:	81 c4 3c 04 00 00    	add    esp,0x43c
c00196e8:	5b                   	pop    ebx
c00196e9:	5e                   	pop    esi
c00196ea:	5f                   	pop    edi
c00196eb:	5d                   	pop    ebp
c00196ec:	c3                   	ret    
c00196ed:	90                   	nop
c00196ee:	66 90                	xchg   ax,ax

c00196f0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00196f0:	57                   	push   edi
c00196f1:	56                   	push   esi
c00196f2:	53                   	push   ebx
c00196f3:	81 ec 50 02 00 00    	sub    esp,0x250
c00196f9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019701:	74 0d                	je     c0019710 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019703:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001970b:	75 0f                	jne    c001971c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001970d:	8d 76 00             	lea    esi,[esi+0x0]
c0019710:	b8 04 00 00 00       	mov    eax,0x4
c0019715:	e9 3a 01 00 00       	jmp    c0019854 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001971a:	66 90                	xchg   ax,ax
c001971c:	83 ec 08             	sub    esp,0x8
c001971f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019726:	50                   	push   eax
c0019727:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001972e:	e8 c3 af fe ff       	call   c00046f6 <f_readdir>
c0019733:	83 c4 10             	add    esp,0x10
c0019736:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001973d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019744:	83 ec 0c             	sub    esp,0xc
c0019747:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001974e:	83 c0 16             	add    eax,0x16
c0019751:	50                   	push   eax
c0019752:	e8 19 6e fe ff       	call   c0000570 <strlen>
c0019757:	83 c4 10             	add    esp,0x10
c001975a:	ba 00 00 00 00       	mov    edx,0x0
c001975f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019763:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019767:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001976e:	0f b6 c0             	movzx  eax,al
c0019771:	83 e0 10             	and    eax,0x10
c0019774:	74 0a                	je     c0019780 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019776:	b8 02 00 00 00       	mov    eax,0x2
c001977b:	eb 0b                	jmp    c0019788 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001977d:	8d 76 00             	lea    esi,[esi+0x0]
c0019780:	b8 01 00 00 00       	mov    eax,0x1
c0019785:	8d 76 00             	lea    esi,[esi+0x0]
c0019788:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001978c:	83 ec 08             	sub    esp,0x8
c001978f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019796:	83 c0 16             	add    eax,0x16
c0019799:	50                   	push   eax
c001979a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001979e:	83 c0 10             	add    eax,0x10
c00197a1:	50                   	push   eax
c00197a2:	e8 99 6e fe ff       	call   c0000640 <strcpy>
c00197a7:	83 c4 10             	add    esp,0x10
c00197aa:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00197b1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00197b8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00197bc:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00197c3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00197ca:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00197d1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00197d8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00197df:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00197e6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00197ed:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00197f4:	89 c6                	mov    esi,eax
c00197f6:	89 d7                	mov    edi,edx
c00197f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00197fa:	89 c8                	mov    eax,ecx
c00197fc:	89 fa                	mov    edx,edi
c00197fe:	89 f3                	mov    ebx,esi
c0019800:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019807:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001980e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019815:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001981c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019822:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019829:	0f be c0             	movsx  eax,al
c001982c:	85 c0                	test   eax,eax
c001982e:	75 08                	jne    c0019838 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019830:	b8 07 00 00 00       	mov    eax,0x7
c0019835:	eb 1d                	jmp    c0019854 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019837:	90                   	nop
c0019838:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001983f:	85 c0                	test   eax,eax
c0019841:	75 09                	jne    c001984c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019843:	b8 00 00 00 00       	mov    eax,0x0
c0019848:	eb 0a                	jmp    c0019854 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001984a:	66 90                	xchg   ax,ax
c001984c:	b8 01 00 00 00       	mov    eax,0x1
c0019851:	8d 76 00             	lea    esi,[esi+0x0]
c0019854:	81 c4 50 02 00 00    	add    esp,0x250
c001985a:	5b                   	pop    ebx
c001985b:	5e                   	pop    esi
c001985c:	5f                   	pop    edi
c001985d:	c3                   	ret    
c001985e:	66 90                	xchg   ax,ax

c0019860 <FAT::read(void*, unsigned long, void*, int*)>:
c0019860:	83 ec 1c             	sub    esp,0x1c
c0019863:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019868:	74 0a                	je     c0019874 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001986a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001986f:	75 0b                	jne    c001987c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019871:	8d 76 00             	lea    esi,[esi+0x0]
c0019874:	b8 04 00 00 00       	mov    eax,0x4
c0019879:	eb 41                	jmp    c00198bc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001987b:	90                   	nop
c001987c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019880:	50                   	push   eax
c0019881:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019885:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019889:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001988d:	e8 8b a6 fe ff       	call   c0003f1d <f_read>
c0019892:	83 c4 10             	add    esp,0x10
c0019895:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019899:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001989d:	89 c2                	mov    edx,eax
c001989f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00198a3:	89 10                	mov    DWORD PTR [eax],edx
c00198a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198a9:	85 c0                	test   eax,eax
c00198ab:	75 07                	jne    c00198b4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00198ad:	b8 00 00 00 00       	mov    eax,0x0
c00198b2:	eb 08                	jmp    c00198bc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00198b4:	b8 01 00 00 00       	mov    eax,0x1
c00198b9:	8d 76 00             	lea    esi,[esi+0x0]
c00198bc:	83 c4 1c             	add    esp,0x1c
c00198bf:	c3                   	ret    

c00198c0 <FAT::write(void*, unsigned long, void*, int*)>:
c00198c0:	83 ec 1c             	sub    esp,0x1c
c00198c3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00198c8:	74 0a                	je     c00198d4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00198ca:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00198cf:	75 0b                	jne    c00198dc <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00198d1:	8d 76 00             	lea    esi,[esi+0x0]
c00198d4:	b8 04 00 00 00       	mov    eax,0x4
c00198d9:	eb 41                	jmp    c001991c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00198db:	90                   	nop
c00198dc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00198e0:	50                   	push   eax
c00198e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00198e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00198e9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198ed:	e8 2a a8 fe ff       	call   c000411c <f_write>
c00198f2:	83 c4 10             	add    esp,0x10
c00198f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198fd:	89 c2                	mov    edx,eax
c00198ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019903:	89 10                	mov    DWORD PTR [eax],edx
c0019905:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019909:	85 c0                	test   eax,eax
c001990b:	75 07                	jne    c0019914 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001990d:	b8 00 00 00 00       	mov    eax,0x0
c0019912:	eb 08                	jmp    c001991c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019914:	b8 01 00 00 00       	mov    eax,0x1
c0019919:	8d 76 00             	lea    esi,[esi+0x0]
c001991c:	83 c4 1c             	add    esp,0x1c
c001991f:	c3                   	ret    

c0019920 <FAT::close(void*)>:
c0019920:	83 ec 1c             	sub    esp,0x1c
c0019923:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019928:	75 0a                	jne    c0019934 <FAT::close(void*)+0x14>
c001992a:	b8 04 00 00 00       	mov    eax,0x4
c001992f:	eb 3f                	jmp    c0019970 <FAT::close(void*)+0x50>
c0019931:	8d 76 00             	lea    esi,[esi+0x0]
c0019934:	83 ec 0c             	sub    esp,0xc
c0019937:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001993b:	e8 e9 aa fe ff       	call   c0004429 <f_close>
c0019940:	83 c4 10             	add    esp,0x10
c0019943:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019947:	83 ec 0c             	sub    esp,0xc
c001994a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001994e:	e8 73 e1 fe ff       	call   c0007ac6 <free>
c0019953:	83 c4 10             	add    esp,0x10
c0019956:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001995a:	85 c0                	test   eax,eax
c001995c:	75 0a                	jne    c0019968 <FAT::close(void*)+0x48>
c001995e:	b8 00 00 00 00       	mov    eax,0x0
c0019963:	eb 0b                	jmp    c0019970 <FAT::close(void*)+0x50>
c0019965:	8d 76 00             	lea    esi,[esi+0x0]
c0019968:	b8 01 00 00 00       	mov    eax,0x1
c001996d:	8d 76 00             	lea    esi,[esi+0x0]
c0019970:	83 c4 1c             	add    esp,0x1c
c0019973:	c3                   	ret    

c0019974 <FAT::closeDir(void*)>:
c0019974:	83 ec 1c             	sub    esp,0x1c
c0019977:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001997c:	75 0a                	jne    c0019988 <FAT::closeDir(void*)+0x14>
c001997e:	b8 04 00 00 00       	mov    eax,0x4
c0019983:	eb 3f                	jmp    c00199c4 <FAT::closeDir(void*)+0x50>
c0019985:	8d 76 00             	lea    esi,[esi+0x0]
c0019988:	83 ec 0c             	sub    esp,0xc
c001998b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001998f:	e8 40 ad fe ff       	call   c00046d4 <f_closedir>
c0019994:	83 c4 10             	add    esp,0x10
c0019997:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001999b:	83 ec 0c             	sub    esp,0xc
c001999e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199a2:	e8 1f e1 fe ff       	call   c0007ac6 <free>
c00199a7:	83 c4 10             	add    esp,0x10
c00199aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199ae:	85 c0                	test   eax,eax
c00199b0:	75 0a                	jne    c00199bc <FAT::closeDir(void*)+0x48>
c00199b2:	b8 00 00 00 00       	mov    eax,0x0
c00199b7:	eb 0b                	jmp    c00199c4 <FAT::closeDir(void*)+0x50>
c00199b9:	8d 76 00             	lea    esi,[esi+0x0]
c00199bc:	b8 01 00 00 00       	mov    eax,0x1
c00199c1:	8d 76 00             	lea    esi,[esi+0x0]
c00199c4:	83 c4 1c             	add    esp,0x1c
c00199c7:	c3                   	ret    

c00199c8 <FAT::truncate(void*, unsigned long long)>:
c00199c8:	83 ec 2c             	sub    esp,0x2c
c00199cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00199cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00199d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00199d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199db:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00199e0:	75 0a                	jne    c00199ec <FAT::truncate(void*, unsigned long long)+0x24>
c00199e2:	b8 04 00 00 00       	mov    eax,0x4
c00199e7:	eb 47                	jmp    c0019a30 <FAT::truncate(void*, unsigned long long)+0x68>
c00199e9:	8d 76 00             	lea    esi,[esi+0x0]
c00199ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00199f0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00199f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00199f7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00199ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a03:	83 ec 08             	sub    esp,0x8
c0019a06:	50                   	push   eax
c0019a07:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019a0b:	e8 48 aa fe ff       	call   c0004458 <f_lseek>
c0019a10:	83 c4 10             	add    esp,0x10
c0019a13:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019a17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a1b:	85 c0                	test   eax,eax
c0019a1d:	75 09                	jne    c0019a28 <FAT::truncate(void*, unsigned long long)+0x60>
c0019a1f:	b8 00 00 00 00       	mov    eax,0x0
c0019a24:	eb 0a                	jmp    c0019a30 <FAT::truncate(void*, unsigned long long)+0x68>
c0019a26:	66 90                	xchg   ax,ax
c0019a28:	b8 01 00 00 00       	mov    eax,0x1
c0019a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a30:	83 c4 2c             	add    esp,0x2c
c0019a33:	c3                   	ret    

c0019a34 <FAT::seek(void*, unsigned long long)>:
c0019a34:	83 ec 2c             	sub    esp,0x2c
c0019a37:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a3f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a47:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019a4c:	75 0a                	jne    c0019a58 <FAT::seek(void*, unsigned long long)+0x24>
c0019a4e:	b8 04 00 00 00       	mov    eax,0x4
c0019a53:	eb 33                	jmp    c0019a88 <FAT::seek(void*, unsigned long long)+0x54>
c0019a55:	8d 76 00             	lea    esi,[esi+0x0]
c0019a58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a5c:	83 ec 08             	sub    esp,0x8
c0019a5f:	50                   	push   eax
c0019a60:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019a64:	e8 ef a9 fe ff       	call   c0004458 <f_lseek>
c0019a69:	83 c4 10             	add    esp,0x10
c0019a6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019a70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a74:	85 c0                	test   eax,eax
c0019a76:	75 08                	jne    c0019a80 <FAT::seek(void*, unsigned long long)+0x4c>
c0019a78:	b8 00 00 00 00       	mov    eax,0x0
c0019a7d:	eb 09                	jmp    c0019a88 <FAT::seek(void*, unsigned long long)+0x54>
c0019a7f:	90                   	nop
c0019a80:	b8 01 00 00 00       	mov    eax,0x1
c0019a85:	8d 76 00             	lea    esi,[esi+0x0]
c0019a88:	83 c4 2c             	add    esp,0x2c
c0019a8b:	c3                   	ret    

c0019a8c <fatWrapperReadDisk>:
c0019a8c:	53                   	push   ebx
c0019a8d:	83 ec 18             	sub    esp,0x18
c0019a90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a94:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a98:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019a9d:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019aa4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019aa8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019aac:	ba 00 00 00 00       	mov    edx,0x0
c0019ab1:	83 ec 0c             	sub    esp,0xc
c0019ab4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019ab8:	53                   	push   ebx
c0019ab9:	52                   	push   edx
c0019aba:	50                   	push   eax
c0019abb:	51                   	push   ecx
c0019abc:	e8 e3 42 ff ff       	call   c000dda4 <LogicalDisk::read(unsigned long long, int, void*)>
c0019ac1:	83 c4 20             	add    esp,0x20
c0019ac4:	83 c4 18             	add    esp,0x18
c0019ac7:	5b                   	pop    ebx
c0019ac8:	c3                   	ret    
c0019ac9:	8d 76 00             	lea    esi,[esi+0x0]

c0019acc <fatWrapperWriteDisk>:
c0019acc:	53                   	push   ebx
c0019acd:	83 ec 18             	sub    esp,0x18
c0019ad0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ad4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019ad8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019add:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019ae4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019ae8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019aec:	ba 00 00 00 00       	mov    edx,0x0
c0019af1:	83 ec 0c             	sub    esp,0xc
c0019af4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019af8:	53                   	push   ebx
c0019af9:	52                   	push   edx
c0019afa:	50                   	push   eax
c0019afb:	51                   	push   ecx
c0019afc:	e8 0f 43 ff ff       	call   c000de10 <LogicalDisk::write(unsigned long long, int, void*)>
c0019b01:	83 c4 20             	add    esp,0x20
c0019b04:	83 c4 18             	add    esp,0x18
c0019b07:	5b                   	pop    ebx
c0019b08:	c3                   	ret    
c0019b09:	8d 76 00             	lea    esi,[esi+0x0]

c0019b0c <fatWrapperIoctl>:
c0019b0c:	53                   	push   ebx
c0019b0d:	83 ec 28             	sub    esp,0x28
c0019b10:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019b14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019b18:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019b1c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019b20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b25:	83 f8 02             	cmp    eax,0x2
c0019b28:	75 32                	jne    c0019b5c <fatWrapperIoctl+0x50>
c0019b2a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b2e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b32:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b37:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019b3e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b44:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019b4a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019b4e:	66 89 02             	mov    WORD PTR [edx],ax
c0019b51:	b8 00 00 00 00       	mov    eax,0x0
c0019b56:	e9 c5 00 00 00       	jmp    c0019c20 <fatWrapperIoctl+0x114>
c0019b5b:	90                   	nop
c0019b5c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b61:	83 f8 01             	cmp    eax,0x1
c0019b64:	75 6a                	jne    c0019bd0 <fatWrapperIoctl+0xc4>
c0019b66:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b6a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019b6e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b73:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019b7a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b80:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019b86:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019b8c:	89 c8                	mov    eax,ecx
c0019b8e:	89 da                	mov    edx,ebx
c0019b90:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019b94:	c1 e0 0a             	shl    eax,0xa
c0019b97:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019b9c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019ba3:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019ba9:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019baf:	89 cb                	mov    ebx,ecx
c0019bb1:	c1 fb 1f             	sar    ebx,0x1f
c0019bb4:	53                   	push   ebx
c0019bb5:	51                   	push   ecx
c0019bb6:	52                   	push   edx
c0019bb7:	50                   	push   eax
c0019bb8:	e8 73 5b 00 00       	call   c001f730 <__udivdi3>
c0019bbd:	83 c4 10             	add    esp,0x10
c0019bc0:	89 c2                	mov    edx,eax
c0019bc2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019bc6:	89 10                	mov    DWORD PTR [eax],edx
c0019bc8:	b8 00 00 00 00       	mov    eax,0x0
c0019bcd:	eb 51                	jmp    c0019c20 <fatWrapperIoctl+0x114>
c0019bcf:	90                   	nop
c0019bd0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bd5:	85 c0                	test   eax,eax
c0019bd7:	75 07                	jne    c0019be0 <fatWrapperIoctl+0xd4>
c0019bd9:	b8 00 00 00 00       	mov    eax,0x0
c0019bde:	eb 40                	jmp    c0019c20 <fatWrapperIoctl+0x114>
c0019be0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019be5:	83 f8 03             	cmp    eax,0x3
c0019be8:	75 1a                	jne    c0019c04 <fatWrapperIoctl+0xf8>
c0019bea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019bf2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019bf6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019bfc:	b8 00 00 00 00       	mov    eax,0x0
c0019c01:	eb 1d                	jmp    c0019c20 <fatWrapperIoctl+0x114>
c0019c03:	90                   	nop
c0019c04:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c09:	83 f8 04             	cmp    eax,0x4
c0019c0c:	75 0a                	jne    c0019c18 <fatWrapperIoctl+0x10c>
c0019c0e:	b8 00 00 00 00       	mov    eax,0x0
c0019c13:	eb 0b                	jmp    c0019c20 <fatWrapperIoctl+0x114>
c0019c15:	8d 76 00             	lea    esi,[esi+0x0]
c0019c18:	b8 04 00 00 00       	mov    eax,0x4
c0019c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c20:	83 c4 28             	add    esp,0x28
c0019c23:	5b                   	pop    ebx
c0019c24:	c3                   	ret    
c0019c25:	90                   	nop
c0019c26:	66 90                	xchg   ax,ax

c0019c28 <FAT::FAT()>:
c0019c28:	83 ec 1c             	sub    esp,0x1c
c0019c2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c2f:	83 ec 0c             	sub    esp,0xc
c0019c32:	50                   	push   eax
c0019c33:	e8 6e 1b ff ff       	call   c000b7a6 <Filesystem::Filesystem()>
c0019c38:	83 c4 10             	add    esp,0x10
c0019c3b:	ba 08 2e 02 c0       	mov    edx,0xc0022e08
c0019c40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c44:	89 10                	mov    DWORD PTR [eax],edx
c0019c46:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019c50:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019c58:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019c5d:	7f 19                	jg     c0019c78 <FAT::FAT()+0x50>
c0019c5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c63:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019c6e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019c73:	eb e3                	jmp    c0019c58 <FAT::FAT()+0x30>
c0019c75:	8d 76 00             	lea    esi,[esi+0x0]
c0019c78:	90                   	nop
c0019c79:	83 c4 1c             	add    esp,0x1c
c0019c7c:	c3                   	ret    
c0019c7d:	90                   	nop
c0019c7e:	66 90                	xchg   ax,ax

c0019c80 <FAT::fixFilepath(char*)>:
c0019c80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c84:	8a 00                	mov    al,BYTE PTR [eax]
c0019c86:	0f be c0             	movsx  eax,al
c0019c89:	83 f8 40             	cmp    eax,0x40
c0019c8c:	7e 2e                	jle    c0019cbc <FAT::fixFilepath(char*)+0x3c>
c0019c8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c92:	8a 00                	mov    al,BYTE PTR [eax]
c0019c94:	83 e8 41             	sub    eax,0x41
c0019c97:	88 c2                	mov    dl,al
c0019c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c9d:	88 10                	mov    BYTE PTR [eax],dl
c0019c9f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ca3:	8a 00                	mov    al,BYTE PTR [eax]
c0019ca5:	0f be c0             	movsx  eax,al
c0019ca8:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019caf:	83 c0 30             	add    eax,0x30
c0019cb2:	88 c2                	mov    dl,al
c0019cb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cb8:	88 10                	mov    BYTE PTR [eax],dl
c0019cba:	66 90                	xchg   ax,ax
c0019cbc:	90                   	nop
c0019cbd:	c3                   	ret    
c0019cbe:	66 90                	xchg   ax,ax

c0019cc0 <FAT::open(char const*, void**, FileOpenMode)>:
c0019cc0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019cc6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019cce:	74 0c                	je     c0019cdc <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019cd0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019cd8:	75 0e                	jne    c0019ce8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019cda:	66 90                	xchg   ax,ax
c0019cdc:	b8 04 00 00 00       	mov    eax,0x4
c0019ce1:	e9 46 01 00 00       	jmp    c0019e2c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019ce6:	66 90                	xchg   ax,ax
c0019ce8:	83 ec 08             	sub    esp,0x8
c0019ceb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cf6:	50                   	push   eax
c0019cf7:	e8 44 69 fe ff       	call   c0000640 <strcpy>
c0019cfc:	83 c4 10             	add    esp,0x10
c0019cff:	83 ec 08             	sub    esp,0x8
c0019d02:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d06:	50                   	push   eax
c0019d07:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d0e:	e8 6d ff ff ff       	call   c0019c80 <FAT::fixFilepath(char*)>
c0019d13:	83 c4 10             	add    esp,0x10
c0019d16:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019d1e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d25:	83 e0 01             	and    eax,0x1
c0019d28:	74 12                	je     c0019d3c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019d2a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d31:	83 c8 01             	or     eax,0x1
c0019d34:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d3b:	90                   	nop
c0019d3c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d43:	83 e0 04             	and    eax,0x4
c0019d46:	74 24                	je     c0019d6c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019d48:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d4f:	83 c8 30             	or     eax,0x30
c0019d52:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d59:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d60:	83 c8 02             	or     eax,0x2
c0019d63:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d6a:	66 90                	xchg   ax,ax
c0019d6c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d73:	83 e0 02             	and    eax,0x2
c0019d76:	74 14                	je     c0019d8c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019d78:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d7f:	83 c8 02             	or     eax,0x2
c0019d82:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d89:	8d 76 00             	lea    esi,[esi+0x0]
c0019d8c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d93:	83 e0 08             	and    eax,0x8
c0019d96:	74 14                	je     c0019dac <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019d98:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d9f:	83 c8 04             	or     eax,0x4
c0019da2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019da9:	8d 76 00             	lea    esi,[esi+0x0]
c0019dac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019db3:	83 e0 10             	and    eax,0x10
c0019db6:	74 14                	je     c0019dcc <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019db8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019dbf:	83 c8 08             	or     eax,0x8
c0019dc2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0019dcc:	83 ec 0c             	sub    esp,0xc
c0019dcf:	68 28 02 00 00       	push   0x228
c0019dd4:	e8 dd dc fe ff       	call   c0007ab6 <malloc>
c0019dd9:	83 c4 10             	add    esp,0x10
c0019ddc:	89 c2                	mov    edx,eax
c0019dde:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019de5:	89 10                	mov    DWORD PTR [eax],edx
c0019de7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019def:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019df6:	8b 00                	mov    eax,DWORD PTR [eax]
c0019df8:	83 ec 04             	sub    esp,0x4
c0019dfb:	52                   	push   edx
c0019dfc:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019e00:	52                   	push   edx
c0019e01:	50                   	push   eax
c0019e02:	e8 53 9e fe ff       	call   c0003c5a <f_open>
c0019e07:	83 c4 10             	add    esp,0x10
c0019e0a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019e11:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019e19:	74 09                	je     c0019e24 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019e1b:	b8 01 00 00 00       	mov    eax,0x1
c0019e20:	eb 0a                	jmp    c0019e2c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019e22:	66 90                	xchg   ax,ax
c0019e24:	b8 00 00 00 00       	mov    eax,0x0
c0019e29:	8d 76 00             	lea    esi,[esi+0x0]
c0019e2c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e32:	c3                   	ret    
c0019e33:	90                   	nop

c0019e34 <FAT::openDir(char const*, void**)>:
c0019e34:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e3a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e42:	74 0c                	je     c0019e50 <FAT::openDir(char const*, void**)+0x1c>
c0019e44:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019e4c:	75 0e                	jne    c0019e5c <FAT::openDir(char const*, void**)+0x28>
c0019e4e:	66 90                	xchg   ax,ax
c0019e50:	b8 04 00 00 00       	mov    eax,0x4
c0019e55:	e9 82 00 00 00       	jmp    c0019edc <FAT::openDir(char const*, void**)+0xa8>
c0019e5a:	66 90                	xchg   ax,ax
c0019e5c:	83 ec 08             	sub    esp,0x8
c0019e5f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e66:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e6a:	50                   	push   eax
c0019e6b:	e8 d0 67 fe ff       	call   c0000640 <strcpy>
c0019e70:	83 c4 10             	add    esp,0x10
c0019e73:	83 ec 08             	sub    esp,0x8
c0019e76:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e7a:	50                   	push   eax
c0019e7b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e82:	e8 f9 fd ff ff       	call   c0019c80 <FAT::fixFilepath(char*)>
c0019e87:	83 c4 10             	add    esp,0x10
c0019e8a:	83 ec 0c             	sub    esp,0xc
c0019e8d:	6a 30                	push   0x30
c0019e8f:	e8 22 dc fe ff       	call   c0007ab6 <malloc>
c0019e94:	83 c4 10             	add    esp,0x10
c0019e97:	89 c2                	mov    edx,eax
c0019e99:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019ea0:	89 10                	mov    DWORD PTR [eax],edx
c0019ea2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019ea9:	8b 00                	mov    eax,DWORD PTR [eax]
c0019eab:	83 ec 08             	sub    esp,0x8
c0019eae:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019eb2:	52                   	push   edx
c0019eb3:	50                   	push   eax
c0019eb4:	e8 50 a7 fe ff       	call   c0004609 <f_opendir>
c0019eb9:	83 c4 10             	add    esp,0x10
c0019ebc:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019ec3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019ecb:	74 07                	je     c0019ed4 <FAT::openDir(char const*, void**)+0xa0>
c0019ecd:	b8 01 00 00 00       	mov    eax,0x1
c0019ed2:	eb 08                	jmp    c0019edc <FAT::openDir(char const*, void**)+0xa8>
c0019ed4:	b8 00 00 00 00       	mov    eax,0x0
c0019ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0019edc:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019ee2:	c3                   	ret    
c0019ee3:	90                   	nop

c0019ee4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019ee4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019eea:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019ef2:	75 0c                	jne    c0019f00 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019ef4:	b8 04 00 00 00       	mov    eax,0x4
c0019ef9:	e9 d6 00 00 00       	jmp    c0019fd4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019efe:	66 90                	xchg   ax,ax
c0019f00:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019f08:	75 0a                	jne    c0019f14 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019f0a:	b8 04 00 00 00       	mov    eax,0x4
c0019f0f:	e9 c0 00 00 00       	jmp    c0019fd4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f14:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019f1c:	75 0a                	jne    c0019f28 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019f1e:	b8 04 00 00 00       	mov    eax,0x4
c0019f23:	e9 ac 00 00 00       	jmp    c0019fd4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f28:	83 ec 08             	sub    esp,0x8
c0019f2b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f32:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f39:	50                   	push   eax
c0019f3a:	e8 01 67 fe ff       	call   c0000640 <strcpy>
c0019f3f:	83 c4 10             	add    esp,0x10
c0019f42:	83 ec 08             	sub    esp,0x8
c0019f45:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019f4c:	50                   	push   eax
c0019f4d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f54:	e8 27 fd ff ff       	call   c0019c80 <FAT::fixFilepath(char*)>
c0019f59:	83 c4 10             	add    esp,0x10
c0019f5c:	83 ec 08             	sub    esp,0x8
c0019f5f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019f63:	50                   	push   eax
c0019f64:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f6b:	50                   	push   eax
c0019f6c:	e8 17 a8 fe ff       	call   c0004788 <f_stat>
c0019f71:	83 c4 10             	add    esp,0x10
c0019f74:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019f7b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019f82:	85 c0                	test   eax,eax
c0019f84:	74 0a                	je     c0019f90 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019f86:	83 f8 04             	cmp    eax,0x4
c0019f89:	74 39                	je     c0019fc4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019f8b:	eb 3f                	jmp    c0019fcc <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019f8d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f90:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019f94:	0f b6 c0             	movzx  eax,al
c0019f97:	83 e0 10             	and    eax,0x10
c0019f9a:	0f 95 c2             	setne  dl
c0019f9d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019fa4:	88 10                	mov    BYTE PTR [eax],dl
c0019fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019faa:	ba 00 00 00 00       	mov    edx,0x0
c0019faf:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019fb6:	89 01                	mov    DWORD PTR [ecx],eax
c0019fb8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019fbb:	b8 00 00 00 00       	mov    eax,0x0
c0019fc0:	eb 12                	jmp    c0019fd4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019fc2:	66 90                	xchg   ax,ax
c0019fc4:	b8 02 00 00 00       	mov    eax,0x2
c0019fc9:	eb 09                	jmp    c0019fd4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019fcb:	90                   	nop
c0019fcc:	b8 01 00 00 00       	mov    eax,0x1
c0019fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0019fd4:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019fda:	c3                   	ret    
c0019fdb:	90                   	nop

c0019fdc <FAT::unlink(char const*)>:
c0019fdc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019fe2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019fea:	75 08                	jne    c0019ff4 <FAT::unlink(char const*)+0x18>
c0019fec:	b8 04 00 00 00       	mov    eax,0x4
c0019ff1:	eb 61                	jmp    c001a054 <FAT::unlink(char const*)+0x78>
c0019ff3:	90                   	nop
c0019ff4:	83 ec 08             	sub    esp,0x8
c0019ff7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ffe:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a002:	50                   	push   eax
c001a003:	e8 38 66 fe ff       	call   c0000640 <strcpy>
c001a008:	83 c4 10             	add    esp,0x10
c001a00b:	83 ec 08             	sub    esp,0x8
c001a00e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a012:	50                   	push   eax
c001a013:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a01a:	e8 61 fc ff ff       	call   c0019c80 <FAT::fixFilepath(char*)>
c001a01f:	83 c4 10             	add    esp,0x10
c001a022:	83 ec 0c             	sub    esp,0xc
c001a025:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a029:	50                   	push   eax
c001a02a:	e8 cb a9 fe ff       	call   c00049fa <f_unlink>
c001a02f:	83 c4 10             	add    esp,0x10
c001a032:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a039:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a040:	85 c0                	test   eax,eax
c001a042:	75 08                	jne    c001a04c <FAT::unlink(char const*)+0x70>
c001a044:	b8 00 00 00 00       	mov    eax,0x0
c001a049:	eb 09                	jmp    c001a054 <FAT::unlink(char const*)+0x78>
c001a04b:	90                   	nop
c001a04c:	b8 01 00 00 00       	mov    eax,0x1
c001a051:	8d 76 00             	lea    esi,[esi+0x0]
c001a054:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a05a:	c3                   	ret    
c001a05b:	90                   	nop

c001a05c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a05c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a062:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a069:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a070:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a074:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a078:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a080:	75 0a                	jne    c001a08c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a082:	b8 04 00 00 00       	mov    eax,0x4
c001a087:	e9 7c 01 00 00       	jmp    c001a208 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a08c:	83 ec 08             	sub    esp,0x8
c001a08f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a096:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a09a:	50                   	push   eax
c001a09b:	e8 a0 65 fe ff       	call   c0000640 <strcpy>
c001a0a0:	83 c4 10             	add    esp,0x10
c001a0a3:	83 ec 08             	sub    esp,0x8
c001a0a6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a0aa:	50                   	push   eax
c001a0ab:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a0b2:	e8 c9 fb ff ff       	call   c0019c80 <FAT::fixFilepath(char*)>
c001a0b7:	83 c4 10             	add    esp,0x10
c001a0ba:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a0c2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a0ca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0cf:	83 e0 01             	and    eax,0x1
c001a0d2:	74 14                	je     c001a0e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001a0d4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0db:	83 c8 01             	or     eax,0x1
c001a0de:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a0e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a0e8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0ed:	83 e0 02             	and    eax,0x2
c001a0f0:	74 12                	je     c001a104 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001a0f2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0f9:	83 c8 20             	or     eax,0x20
c001a0fc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a103:	90                   	nop
c001a104:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a109:	83 e0 04             	and    eax,0x4
c001a10c:	74 12                	je     c001a120 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001a10e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a115:	83 c8 04             	or     eax,0x4
c001a118:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a11f:	90                   	nop
c001a120:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a125:	83 e0 08             	and    eax,0x8
c001a128:	74 12                	je     c001a13c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001a12a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a131:	83 c8 02             	or     eax,0x2
c001a134:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a13b:	90                   	nop
c001a13c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a141:	83 e0 01             	and    eax,0x1
c001a144:	74 12                	je     c001a158 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001a146:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a14d:	83 c8 01             	or     eax,0x1
c001a150:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a157:	90                   	nop
c001a158:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a15d:	83 e0 02             	and    eax,0x2
c001a160:	74 12                	je     c001a174 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001a162:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a169:	83 c8 20             	or     eax,0x20
c001a16c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a173:	90                   	nop
c001a174:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a179:	83 e0 04             	and    eax,0x4
c001a17c:	74 12                	je     c001a190 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001a17e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a185:	83 c8 04             	or     eax,0x4
c001a188:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a18f:	90                   	nop
c001a190:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a195:	83 e0 08             	and    eax,0x8
c001a198:	74 12                	je     c001a1ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001a19a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a1a1:	83 c8 02             	or     eax,0x2
c001a1a4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1ab:	90                   	nop
c001a1ac:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a1b3:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1ba:	09 d0                	or     eax,edx
c001a1bc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1c3:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a1cb:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a1d3:	83 ec 04             	sub    esp,0x4
c001a1d6:	52                   	push   edx
c001a1d7:	50                   	push   eax
c001a1d8:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a1dc:	50                   	push   eax
c001a1dd:	e8 8d ac fe ff       	call   c0004e6f <f_chmod>
c001a1e2:	83 c4 10             	add    esp,0x10
c001a1e5:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a1ec:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a1f3:	85 c0                	test   eax,eax
c001a1f5:	75 09                	jne    c001a200 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001a1f7:	b8 00 00 00 00       	mov    eax,0x0
c001a1fc:	eb 0a                	jmp    c001a208 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a1fe:	66 90                	xchg   ax,ax
c001a200:	b8 01 00 00 00       	mov    eax,0x1
c001a205:	8d 76 00             	lea    esi,[esi+0x0]
c001a208:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a20e:	c3                   	ret    
c001a20f:	90                   	nop

c001a210 <FAT::rename(char const*, char const*)>:
c001a210:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a216:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a21e:	74 0c                	je     c001a22c <FAT::rename(char const*, char const*)+0x1c>
c001a220:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a228:	75 0e                	jne    c001a238 <FAT::rename(char const*, char const*)+0x28>
c001a22a:	66 90                	xchg   ax,ax
c001a22c:	b8 04 00 00 00       	mov    eax,0x4
c001a231:	e9 9e 00 00 00       	jmp    c001a2d4 <FAT::rename(char const*, char const*)+0xc4>
c001a236:	66 90                	xchg   ax,ax
c001a238:	83 ec 08             	sub    esp,0x8
c001a23b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a242:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a249:	50                   	push   eax
c001a24a:	e8 f1 63 fe ff       	call   c0000640 <strcpy>
c001a24f:	83 c4 10             	add    esp,0x10
c001a252:	83 ec 08             	sub    esp,0x8
c001a255:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a25c:	50                   	push   eax
c001a25d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a264:	e8 17 fa ff ff       	call   c0019c80 <FAT::fixFilepath(char*)>
c001a269:	83 c4 10             	add    esp,0x10
c001a26c:	83 ec 08             	sub    esp,0x8
c001a26f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a276:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a27a:	50                   	push   eax
c001a27b:	e8 c0 63 fe ff       	call   c0000640 <strcpy>
c001a280:	83 c4 10             	add    esp,0x10
c001a283:	83 ec 08             	sub    esp,0x8
c001a286:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a28a:	50                   	push   eax
c001a28b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a292:	e8 e9 f9 ff ff       	call   c0019c80 <FAT::fixFilepath(char*)>
c001a297:	83 c4 10             	add    esp,0x10
c001a29a:	83 ec 08             	sub    esp,0x8
c001a29d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a2a1:	50                   	push   eax
c001a2a2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a2a9:	50                   	push   eax
c001a2aa:	e8 08 aa fe ff       	call   c0004cb7 <f_rename>
c001a2af:	83 c4 10             	add    esp,0x10
c001a2b2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a2b9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a2c0:	85 c0                	test   eax,eax
c001a2c2:	75 08                	jne    c001a2cc <FAT::rename(char const*, char const*)+0xbc>
c001a2c4:	b8 00 00 00 00       	mov    eax,0x0
c001a2c9:	eb 09                	jmp    c001a2d4 <FAT::rename(char const*, char const*)+0xc4>
c001a2cb:	90                   	nop
c001a2cc:	b8 01 00 00 00       	mov    eax,0x1
c001a2d1:	8d 76 00             	lea    esi,[esi+0x0]
c001a2d4:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a2da:	c3                   	ret    
c001a2db:	90                   	nop

c001a2dc <FAT::mkdir(char const*)>:
c001a2dc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a2e2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a2ea:	75 08                	jne    c001a2f4 <FAT::mkdir(char const*)+0x18>
c001a2ec:	b8 04 00 00 00       	mov    eax,0x4
c001a2f1:	eb 61                	jmp    c001a354 <FAT::mkdir(char const*)+0x78>
c001a2f3:	90                   	nop
c001a2f4:	83 ec 08             	sub    esp,0x8
c001a2f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a2fe:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a302:	50                   	push   eax
c001a303:	e8 38 63 fe ff       	call   c0000640 <strcpy>
c001a308:	83 c4 10             	add    esp,0x10
c001a30b:	83 ec 08             	sub    esp,0x8
c001a30e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a312:	50                   	push   eax
c001a313:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a31a:	e8 61 f9 ff ff       	call   c0019c80 <FAT::fixFilepath(char*)>
c001a31f:	83 c4 10             	add    esp,0x10
c001a322:	83 ec 0c             	sub    esp,0xc
c001a325:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a329:	50                   	push   eax
c001a32a:	e8 ed a7 fe ff       	call   c0004b1c <f_mkdir>
c001a32f:	83 c4 10             	add    esp,0x10
c001a332:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a339:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a340:	85 c0                	test   eax,eax
c001a342:	75 08                	jne    c001a34c <FAT::mkdir(char const*)+0x70>
c001a344:	b8 00 00 00 00       	mov    eax,0x0
c001a349:	eb 09                	jmp    c001a354 <FAT::mkdir(char const*)+0x78>
c001a34b:	90                   	nop
c001a34c:	b8 01 00 00 00       	mov    eax,0x1
c001a351:	8d 76 00             	lea    esi,[esi+0x0]
c001a354:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a35a:	c3                   	ret    
c001a35b:	90                   	nop

c001a35c <FAT::exists(char const*)>:
c001a35c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a362:	83 ec 08             	sub    esp,0x8
c001a365:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a36c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a370:	50                   	push   eax
c001a371:	e8 ca 62 fe ff       	call   c0000640 <strcpy>
c001a376:	83 c4 10             	add    esp,0x10
c001a379:	83 ec 08             	sub    esp,0x8
c001a37c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a380:	50                   	push   eax
c001a381:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a388:	e8 f3 f8 ff ff       	call   c0019c80 <FAT::fixFilepath(char*)>
c001a38d:	83 c4 10             	add    esp,0x10
c001a390:	83 ec 08             	sub    esp,0x8
c001a393:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a39a:	50                   	push   eax
c001a39b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a39f:	50                   	push   eax
c001a3a0:	e8 e3 a3 fe ff       	call   c0004788 <f_stat>
c001a3a5:	83 c4 10             	add    esp,0x10
c001a3a8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a3af:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a3b6:	85 c0                	test   eax,eax
c001a3b8:	75 06                	jne    c001a3c0 <FAT::exists(char const*)+0x64>
c001a3ba:	b0 01                	mov    al,0x1
c001a3bc:	eb 06                	jmp    c001a3c4 <FAT::exists(char const*)+0x68>
c001a3be:	66 90                	xchg   ax,ax
c001a3c0:	b0 00                	mov    al,0x0
c001a3c2:	66 90                	xchg   ax,ax
c001a3c4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a3ca:	c3                   	ret    
c001a3cb:	90                   	nop

c001a3cc <isoReadDiscSectorHelper>:
c001a3cc:	83 ec 2c             	sub    esp,0x2c
c001a3cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a3d3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a3d7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a3dc:	83 e8 41             	sub    eax,0x41
c001a3df:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a3e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a3ea:	ba 00 00 00 00       	mov    edx,0x0
c001a3ef:	83 ec 0c             	sub    esp,0xc
c001a3f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a3f6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a3fa:	52                   	push   edx
c001a3fb:	50                   	push   eax
c001a3fc:	51                   	push   ecx
c001a3fd:	e8 a2 39 ff ff       	call   c000dda4 <LogicalDisk::read(unsigned long long, int, void*)>
c001a402:	83 c4 20             	add    esp,0x20
c001a405:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a409:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a40e:	74 0c                	je     c001a41c <isoReadDiscSectorHelper+0x50>
c001a410:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a414:	c1 e0 0b             	shl    eax,0xb
c001a417:	eb 0b                	jmp    c001a424 <isoReadDiscSectorHelper+0x58>
c001a419:	8d 76 00             	lea    esi,[esi+0x0]
c001a41c:	b8 00 00 00 00       	mov    eax,0x0
c001a421:	8d 76 00             	lea    esi,[esi+0x0]
c001a424:	83 c4 2c             	add    esp,0x2c
c001a427:	c3                   	ret    

c001a428 <iso_kprintf>:
c001a428:	83 ec 0c             	sub    esp,0xc
c001a42b:	83 ec 08             	sub    esp,0x8
c001a42e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a432:	68 b6 2b 02 c0       	push   0xc0022bb6
c001a437:	e8 09 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a43c:	83 c4 10             	add    esp,0x10
c001a43f:	90                   	nop
c001a440:	83 c4 0c             	add    esp,0xc
c001a443:	c3                   	ret    

c001a444 <iso_kprintfd>:
c001a444:	83 ec 0c             	sub    esp,0xc
c001a447:	83 ec 08             	sub    esp,0x8
c001a44a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a44e:	68 fa 12 02 c0       	push   0xc00212fa
c001a453:	e8 ed 04 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a458:	83 c4 10             	add    esp,0x10
c001a45b:	90                   	nop
c001a45c:	83 c4 0c             	add    esp,0xc
c001a45f:	c3                   	ret    

c001a460 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a460:	b8 08 00 00 00       	mov    eax,0x8
c001a465:	c3                   	ret    

c001a466 <ISO9660::truncate(void*, unsigned long long)>:
c001a466:	b8 01 00 00 00       	mov    eax,0x1
c001a46b:	c3                   	ret    

c001a46c <ISO9660::getName()>:
c001a46c:	b8 6c 2e 02 c0       	mov    eax,0xc0022e6c
c001a471:	c3                   	ret    

c001a472 <ISO9660::closeDir(void*)>:
c001a472:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a476:	8b 00                	mov    eax,DWORD PTR [eax]
c001a478:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a47b:	90                   	nop

c001a47c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a47c:	b8 01 00 00 00       	mov    eax,0x1
c001a481:	c3                   	ret    

c001a482 <ISO9660::unlink(char const*)>:
c001a482:	b8 01 00 00 00       	mov    eax,0x1
c001a487:	c3                   	ret    

c001a488 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a488:	b8 03 00 00 00       	mov    eax,0x3
c001a48d:	c3                   	ret    

c001a48e <ISO9660::rename(char const*, char const*)>:
c001a48e:	b8 01 00 00 00       	mov    eax,0x1
c001a493:	c3                   	ret    

c001a494 <ISO9660::mkdir(char const*)>:
c001a494:	b8 01 00 00 00       	mov    eax,0x1
c001a499:	c3                   	ret    

c001a49a <ISO9660::~ISO9660()>:
c001a49a:	83 ec 0c             	sub    esp,0xc
c001a49d:	ba ac 2f 02 c0       	mov    edx,0xc0022fac
c001a4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4a6:	89 10                	mov    DWORD PTR [eax],edx
c001a4a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4ac:	83 ec 0c             	sub    esp,0xc
c001a4af:	50                   	push   eax
c001a4b0:	e8 15 13 ff ff       	call   c000b7ca <Filesystem::~Filesystem()>
c001a4b5:	83 c4 10             	add    esp,0x10
c001a4b8:	90                   	nop
c001a4b9:	83 c4 0c             	add    esp,0xc
c001a4bc:	c3                   	ret    
c001a4bd:	90                   	nop

c001a4be <ISO9660::~ISO9660()>:
c001a4be:	83 ec 0c             	sub    esp,0xc
c001a4c1:	83 ec 0c             	sub    esp,0xc
c001a4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4c8:	e8 cd ff ff ff       	call   c001a49a <ISO9660::~ISO9660()>
c001a4cd:	83 c4 10             	add    esp,0x10
c001a4d0:	83 ec 08             	sub    esp,0x8
c001a4d3:	6a 08                	push   0x8
c001a4d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4d9:	e8 3a 03 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a4de:	83 c4 10             	add    esp,0x10
c001a4e1:	83 c4 0c             	add    esp,0xc
c001a4e4:	c3                   	ret    
c001a4e5:	90                   	nop

c001a4e6 <ISO9660::exists(char const*)>:
c001a4e6:	83 ec 18             	sub    esp,0x18
c001a4e9:	68 87 2e 02 c0       	push   0xc0022e87
c001a4ee:	e8 28 71 ff ff       	call   c001161b <KePanic(char const*)>
c001a4f3:	31 c0                	xor    eax,eax
c001a4f5:	83 c4 1c             	add    esp,0x1c
c001a4f8:	c3                   	ret    
c001a4f9:	90                   	nop

c001a4fa <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a4fa:	56                   	push   esi
c001a4fb:	53                   	push   ebx
c001a4fc:	53                   	push   ebx
c001a4fd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a501:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a505:	85 db                	test   ebx,ebx
c001a507:	0f 84 ca 00 00 00    	je     c001a5d7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a50d:	85 f6                	test   esi,esi
c001a50f:	0f 84 c2 00 00 00    	je     c001a5d7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a515:	b8 03 00 00 00       	mov    eax,0x3
c001a51a:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a51f:	0f 85 b7 00 00 00    	jne    c001a5dc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a525:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a527:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a52e:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a534:	74 1b                	je     c001a551 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a536:	85 c0                	test   eax,eax
c001a538:	74 10                	je     c001a54a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a53a:	83 ec 0c             	sub    esp,0xc
c001a53d:	68 a5 2e 02 c0       	push   0xc0022ea5
c001a542:	e8 d4 70 ff ff       	call   c001161b <KePanic(char const*)>
c001a547:	83 c4 10             	add    esp,0x10
c001a54a:	8a 03                	mov    al,BYTE PTR [ebx]
c001a54c:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a551:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a554:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a55b:	85 c0                	test   eax,eax
c001a55d:	74 09                	je     c001a568 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a55f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a566:	74 48                	je     c001a5b0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a568:	83 ec 0c             	sub    esp,0xc
c001a56b:	68 b5 2e 02 c0       	push   0xc0022eb5
c001a570:	e8 d0 03 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a575:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a578:	83 c4 10             	add    esp,0x10
c001a57b:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a582:	85 c0                	test   eax,eax
c001a584:	74 17                	je     c001a59d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a586:	83 ec 0c             	sub    esp,0xc
c001a589:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a590:	68 d5 2e 02 c0       	push   0xc0022ed5
c001a595:	e8 ab 03 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a59a:	83 c4 10             	add    esp,0x10
c001a59d:	83 ec 0c             	sub    esp,0xc
c001a5a0:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a5a7:	50                   	push   eax
c001a5a8:	e8 99 c4 fe ff       	call   c0006a46 <init_percd>
c001a5ad:	83 c4 10             	add    esp,0x10
c001a5b0:	83 c3 03             	add    ebx,0x3
c001a5b3:	51                   	push   ecx
c001a5b4:	51                   	push   ecx
c001a5b5:	6a 00                	push   0x0
c001a5b7:	53                   	push   ebx
c001a5b8:	e8 50 bf fe ff       	call   c000650d <iso_open>
c001a5bd:	83 c4 10             	add    esp,0x10
c001a5c0:	89 c2                	mov    edx,eax
c001a5c2:	b8 01 00 00 00       	mov    eax,0x1
c001a5c7:	83 fa ff             	cmp    edx,0xffffffff
c001a5ca:	74 10                	je     c001a5dc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a5cc:	83 c2 32             	add    edx,0x32
c001a5cf:	31 c0                	xor    eax,eax
c001a5d1:	01 d2                	add    edx,edx
c001a5d3:	89 16                	mov    DWORD PTR [esi],edx
c001a5d5:	eb 05                	jmp    c001a5dc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a5d7:	b8 04 00 00 00       	mov    eax,0x4
c001a5dc:	5a                   	pop    edx
c001a5dd:	5b                   	pop    ebx
c001a5de:	5e                   	pop    esi
c001a5df:	c3                   	ret    

c001a5e0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a5e0:	53                   	push   ebx
c001a5e1:	83 ec 08             	sub    esp,0x8
c001a5e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a5ec:	85 c0                	test   eax,eax
c001a5ee:	74 2d                	je     c001a61d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a5f0:	85 db                	test   ebx,ebx
c001a5f2:	74 29                	je     c001a61d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a5f4:	b9 02 00 00 00       	mov    ecx,0x2
c001a5f9:	52                   	push   edx
c001a5fa:	99                   	cdq    
c001a5fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5ff:	f7 f9                	idiv   ecx
c001a601:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a605:	83 e8 32             	sub    eax,0x32
c001a608:	50                   	push   eax
c001a609:	e8 a7 bf fe ff       	call   c00065b5 <iso_read>
c001a60e:	83 c4 10             	add    esp,0x10
c001a611:	89 03                	mov    DWORD PTR [ebx],eax
c001a613:	09 d0                	or     eax,edx
c001a615:	0f 94 c0             	sete   al
c001a618:	0f b6 c0             	movzx  eax,al
c001a61b:	eb 05                	jmp    c001a622 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a61d:	b8 04 00 00 00       	mov    eax,0x4
c001a622:	83 c4 08             	add    esp,0x8
c001a625:	5b                   	pop    ebx
c001a626:	c3                   	ret    
c001a627:	90                   	nop

c001a628 <ISO9660::seek(void*, unsigned long long)>:
c001a628:	57                   	push   edi
c001a629:	56                   	push   esi
c001a62a:	b8 04 00 00 00       	mov    eax,0x4
c001a62f:	51                   	push   ecx
c001a630:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a634:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a638:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a63c:	85 d2                	test   edx,edx
c001a63e:	74 26                	je     c001a666 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a640:	6a 00                	push   0x0
c001a642:	b9 02 00 00 00       	mov    ecx,0x2
c001a647:	57                   	push   edi
c001a648:	89 d0                	mov    eax,edx
c001a64a:	56                   	push   esi
c001a64b:	99                   	cdq    
c001a64c:	f7 f9                	idiv   ecx
c001a64e:	83 e8 32             	sub    eax,0x32
c001a651:	50                   	push   eax
c001a652:	e8 74 c0 fe ff       	call   c00066cb <iso_seek>
c001a657:	83 c4 10             	add    esp,0x10
c001a65a:	31 f0                	xor    eax,esi
c001a65c:	31 fa                	xor    edx,edi
c001a65e:	09 d0                	or     eax,edx
c001a660:	0f 95 c0             	setne  al
c001a663:	0f b6 c0             	movzx  eax,al
c001a666:	5a                   	pop    edx
c001a667:	5e                   	pop    esi
c001a668:	5f                   	pop    edi
c001a669:	c3                   	ret    

c001a66a <ISO9660::tell(void*, unsigned long long*)>:
c001a66a:	53                   	push   ebx
c001a66b:	83 ec 08             	sub    esp,0x8
c001a66e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a672:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a676:	85 c0                	test   eax,eax
c001a678:	74 24                	je     c001a69e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a67a:	85 db                	test   ebx,ebx
c001a67c:	74 20                	je     c001a69e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a67e:	83 ec 0c             	sub    esp,0xc
c001a681:	b9 02 00 00 00       	mov    ecx,0x2
c001a686:	99                   	cdq    
c001a687:	f7 f9                	idiv   ecx
c001a689:	83 e8 32             	sub    eax,0x32
c001a68c:	50                   	push   eax
c001a68d:	e8 bd c0 fe ff       	call   c000674f <iso_tell>
c001a692:	83 c4 10             	add    esp,0x10
c001a695:	89 03                	mov    DWORD PTR [ebx],eax
c001a697:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a69a:	31 c0                	xor    eax,eax
c001a69c:	eb 05                	jmp    c001a6a3 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a69e:	b8 04 00 00 00       	mov    eax,0x4
c001a6a3:	83 c4 08             	add    esp,0x8
c001a6a6:	5b                   	pop    ebx
c001a6a7:	c3                   	ret    

c001a6a8 <ISO9660::stat(void*, unsigned long long*)>:
c001a6a8:	53                   	push   ebx
c001a6a9:	83 ec 14             	sub    esp,0x14
c001a6ac:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a6b0:	68 f9 2e 02 c0       	push   0xc0022ef9
c001a6b5:	e8 8b 02 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a6ba:	83 c4 10             	add    esp,0x10
c001a6bd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a6c2:	74 2c                	je     c001a6f0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a6c4:	85 db                	test   ebx,ebx
c001a6c6:	74 28                	je     c001a6f0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a6c8:	83 ec 0c             	sub    esp,0xc
c001a6cb:	b9 02 00 00 00       	mov    ecx,0x2
c001a6d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6d4:	99                   	cdq    
c001a6d5:	f7 f9                	idiv   ecx
c001a6d7:	83 e8 32             	sub    eax,0x32
c001a6da:	50                   	push   eax
c001a6db:	e8 a0 c0 fe ff       	call   c0006780 <iso_total>
c001a6e0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a6e7:	89 03                	mov    DWORD PTR [ebx],eax
c001a6e9:	83 c4 10             	add    esp,0x10
c001a6ec:	31 c0                	xor    eax,eax
c001a6ee:	eb 05                	jmp    c001a6f5 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a6f0:	b8 04 00 00 00       	mov    eax,0x4
c001a6f5:	83 c4 08             	add    esp,0x8
c001a6f8:	5b                   	pop    ebx
c001a6f9:	c3                   	ret    

c001a6fa <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a6fa:	55                   	push   ebp
c001a6fb:	57                   	push   edi
c001a6fc:	56                   	push   esi
c001a6fd:	53                   	push   ebx
c001a6fe:	83 ec 18             	sub    esp,0x18
c001a701:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a705:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a709:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a70d:	68 01 2f 02 c0       	push   0xc0022f01
c001a712:	e8 2e 02 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a717:	83 c4 10             	add    esp,0x10
c001a71a:	85 ff                	test   edi,edi
c001a71c:	0f 94 c0             	sete   al
c001a71f:	85 f6                	test   esi,esi
c001a721:	0f 94 c2             	sete   dl
c001a724:	09 d0                	or     eax,edx
c001a726:	a8 01                	test   al,0x1
c001a728:	0f 85 dd 00 00 00    	jne    c001a80b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a72e:	85 db                	test   ebx,ebx
c001a730:	0f 84 d5 00 00 00    	je     c001a80b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a736:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a739:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a73f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a746:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a74d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a74f:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a755:	74 1b                	je     c001a772 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a757:	85 c0                	test   eax,eax
c001a759:	74 10                	je     c001a76b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a75b:	83 ec 0c             	sub    esp,0xc
c001a75e:	68 a5 2e 02 c0       	push   0xc0022ea5
c001a763:	e8 b3 6e ff ff       	call   c001161b <KePanic(char const*)>
c001a768:	83 c4 10             	add    esp,0x10
c001a76b:	8a 03                	mov    al,BYTE PTR [ebx]
c001a76d:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a772:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a775:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a77c:	85 c0                	test   eax,eax
c001a77e:	74 09                	je     c001a789 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a780:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a787:	74 51                	je     c001a7da <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a789:	83 ec 0c             	sub    esp,0xc
c001a78c:	68 09 2f 02 c0       	push   0xc0022f09
c001a791:	e8 af 01 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a796:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a799:	83 c4 10             	add    esp,0x10
c001a79c:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a7a4:	74 21                	je     c001a7c7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a7a6:	83 ec 0c             	sub    esp,0xc
c001a7a9:	68 29 2f 02 c0       	push   0xc0022f29
c001a7ae:	e8 92 01 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a7b3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a7b6:	83 c4 10             	add    esp,0x10
c001a7b9:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a7c0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a7c7:	83 ec 0c             	sub    esp,0xc
c001a7ca:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a7d1:	50                   	push   eax
c001a7d2:	e8 6f c2 fe ff       	call   c0006a46 <init_percd>
c001a7d7:	83 c4 10             	add    esp,0x10
c001a7da:	83 c3 03             	add    ebx,0x3
c001a7dd:	52                   	push   edx
c001a7de:	52                   	push   edx
c001a7df:	6a 00                	push   0x0
c001a7e1:	53                   	push   ebx
c001a7e2:	e8 26 bd fe ff       	call   c000650d <iso_open>
c001a7e7:	83 c4 10             	add    esp,0x10
c001a7ea:	89 c5                	mov    ebp,eax
c001a7ec:	83 f8 ff             	cmp    eax,0xffffffff
c001a7ef:	75 21                	jne    c001a812 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a7f1:	50                   	push   eax
c001a7f2:	50                   	push   eax
c001a7f3:	6a 01                	push   0x1
c001a7f5:	53                   	push   ebx
c001a7f6:	e8 12 bd fe ff       	call   c000650d <iso_open>
c001a7fb:	83 c4 10             	add    esp,0x10
c001a7fe:	ba 02 00 00 00       	mov    edx,0x2
c001a803:	40                   	inc    eax
c001a804:	74 2b                	je     c001a831 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a806:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a809:	eb 24                	jmp    c001a82f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a80b:	ba 04 00 00 00       	mov    edx,0x4
c001a810:	eb 1f                	jmp    c001a831 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a812:	83 ec 0c             	sub    esp,0xc
c001a815:	50                   	push   eax
c001a816:	e8 65 bf fe ff       	call   c0006780 <iso_total>
c001a81b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a822:	89 07                	mov    DWORD PTR [edi],eax
c001a824:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a827:	e8 6b bd fe ff       	call   c0006597 <iso_close>
c001a82c:	83 c4 10             	add    esp,0x10
c001a82f:	31 d2                	xor    edx,edx
c001a831:	83 c4 0c             	add    esp,0xc
c001a834:	89 d0                	mov    eax,edx
c001a836:	5b                   	pop    ebx
c001a837:	5e                   	pop    esi
c001a838:	5f                   	pop    edi
c001a839:	5d                   	pop    ebp
c001a83a:	c3                   	ret    
c001a83b:	90                   	nop

c001a83c <ISO9660::close(void*)>:
c001a83c:	83 ec 0c             	sub    esp,0xc
c001a83f:	b8 04 00 00 00       	mov    eax,0x4
c001a844:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a848:	85 d2                	test   edx,edx
c001a84a:	74 1b                	je     c001a867 <ISO9660::close(void*)+0x2b>
c001a84c:	83 ec 0c             	sub    esp,0xc
c001a84f:	b9 02 00 00 00       	mov    ecx,0x2
c001a854:	89 d0                	mov    eax,edx
c001a856:	99                   	cdq    
c001a857:	f7 f9                	idiv   ecx
c001a859:	83 e8 32             	sub    eax,0x32
c001a85c:	50                   	push   eax
c001a85d:	e8 35 bd fe ff       	call   c0006597 <iso_close>
c001a862:	83 c4 10             	add    esp,0x10
c001a865:	31 c0                	xor    eax,eax
c001a867:	83 c4 0c             	add    esp,0xc
c001a86a:	c3                   	ret    
c001a86b:	90                   	nop

c001a86c <ISO9660::openDir(char const*, void**)>:
c001a86c:	56                   	push   esi
c001a86d:	53                   	push   ebx
c001a86e:	50                   	push   eax
c001a86f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a873:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a877:	85 db                	test   ebx,ebx
c001a879:	0f 84 bd 00 00 00    	je     c001a93c <ISO9660::openDir(char const*, void**)+0xd0>
c001a87f:	85 f6                	test   esi,esi
c001a881:	0f 84 b5 00 00 00    	je     c001a93c <ISO9660::openDir(char const*, void**)+0xd0>
c001a887:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a889:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a890:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a896:	74 1b                	je     c001a8b3 <ISO9660::openDir(char const*, void**)+0x47>
c001a898:	85 c0                	test   eax,eax
c001a89a:	74 10                	je     c001a8ac <ISO9660::openDir(char const*, void**)+0x40>
c001a89c:	83 ec 0c             	sub    esp,0xc
c001a89f:	68 a5 2e 02 c0       	push   0xc0022ea5
c001a8a4:	e8 72 6d ff ff       	call   c001161b <KePanic(char const*)>
c001a8a9:	83 c4 10             	add    esp,0x10
c001a8ac:	8a 03                	mov    al,BYTE PTR [ebx]
c001a8ae:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a8b3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a8b6:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a8bd:	85 c0                	test   eax,eax
c001a8bf:	74 10                	je     c001a8d1 <ISO9660::openDir(char const*, void**)+0x65>
c001a8c1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a8c8:	74 1a                	je     c001a8e4 <ISO9660::openDir(char const*, void**)+0x78>
c001a8ca:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a8d1:	83 ec 0c             	sub    esp,0xc
c001a8d4:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a8db:	50                   	push   eax
c001a8dc:	e8 65 c1 fe ff       	call   c0006a46 <init_percd>
c001a8e1:	83 c4 10             	add    esp,0x10
c001a8e4:	83 c3 03             	add    ebx,0x3
c001a8e7:	50                   	push   eax
c001a8e8:	50                   	push   eax
c001a8e9:	6a 01                	push   0x1
c001a8eb:	53                   	push   ebx
c001a8ec:	e8 1c bc fe ff       	call   c000650d <iso_open>
c001a8f1:	83 c4 10             	add    esp,0x10
c001a8f4:	89 c3                	mov    ebx,eax
c001a8f6:	83 f8 ff             	cmp    eax,0xffffffff
c001a8f9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a8fe:	75 1c                	jne    c001a91c <ISO9660::openDir(char const*, void**)+0xb0>
c001a900:	53                   	push   ebx
c001a901:	53                   	push   ebx
c001a902:	68 4d 2f 02 c0       	push   0xc0022f4d
c001a907:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a90d:	e8 94 e1 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a912:	83 c4 10             	add    esp,0x10
c001a915:	b8 01 00 00 00       	mov    eax,0x1
c001a91a:	eb 25                	jmp    c001a941 <ISO9660::openDir(char const*, void**)+0xd5>
c001a91c:	01 db                	add    ebx,ebx
c001a91e:	51                   	push   ecx
c001a91f:	83 c3 65             	add    ebx,0x65
c001a922:	51                   	push   ecx
c001a923:	68 60 2f 02 c0       	push   0xc0022f60
c001a928:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a92e:	e8 73 e1 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a933:	89 1e                	mov    DWORD PTR [esi],ebx
c001a935:	83 c4 10             	add    esp,0x10
c001a938:	31 c0                	xor    eax,eax
c001a93a:	eb 05                	jmp    c001a941 <ISO9660::openDir(char const*, void**)+0xd5>
c001a93c:	b8 04 00 00 00       	mov    eax,0x4
c001a941:	5a                   	pop    edx
c001a942:	5b                   	pop    ebx
c001a943:	5e                   	pop    esi
c001a944:	c3                   	ret    
c001a945:	90                   	nop

c001a946 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a946:	55                   	push   ebp
c001a947:	57                   	push   edi
c001a948:	56                   	push   esi
c001a949:	53                   	push   ebx
c001a94a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a950:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a957:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a95e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a966:	0f 84 e7 00 00 00    	je     c001aa53 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a96c:	85 db                	test   ebx,ebx
c001a96e:	0f 84 df 00 00 00    	je     c001aa53 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a974:	83 ec 0c             	sub    esp,0xc
c001a977:	68 73 2f 02 c0       	push   0xc0022f73
c001a97c:	e8 c4 ff fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a981:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a988:	b9 02 00 00 00       	mov    ecx,0x2
c001a98d:	99                   	cdq    
c001a98e:	f7 f9                	idiv   ecx
c001a990:	83 e8 32             	sub    eax,0x32
c001a993:	89 04 24             	mov    DWORD PTR [esp],eax
c001a996:	e8 37 be fe ff       	call   c00067d2 <iso_readdir>
c001a99b:	83 c4 10             	add    esp,0x10
c001a99e:	89 c6                	mov    esi,eax
c001a9a0:	85 c0                	test   eax,eax
c001a9a2:	75 37                	jne    c001a9db <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001a9a4:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a9a9:	56                   	push   esi
c001a9aa:	56                   	push   esi
c001a9ab:	68 7e 2f 02 c0       	push   0xc0022f7e
c001a9b0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a9b6:	e8 eb e0 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a9bb:	83 c4 0c             	add    esp,0xc
c001a9be:	68 10 01 00 00       	push   0x110
c001a9c3:	6a 00                	push   0x0
c001a9c5:	57                   	push   edi
c001a9c6:	e8 25 5b fe ff       	call   c00004f0 <memset>
c001a9cb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a9d1:	83 c4 10             	add    esp,0x10
c001a9d4:	b8 01 00 00 00       	mov    eax,0x1
c001a9d9:	eb 7d                	jmp    c001aa58 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a9db:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a9e1:	8d 68 08             	lea    ebp,[eax+0x8]
c001a9e4:	83 ec 0c             	sub    esp,0xc
c001a9e7:	55                   	push   ebp
c001a9e8:	e8 83 5b fe ff       	call   c0000570 <strlen>
c001a9ed:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a9f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a9f9:	83 c4 10             	add    esp,0x10
c001a9fc:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001aa00:	75 0a                	jne    c001aa0c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001aa02:	b8 02 00 00 00       	mov    eax,0x2
c001aa07:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001aa0a:	74 05                	je     c001aa11 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001aa0c:	b8 01 00 00 00       	mov    eax,0x1
c001aa11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aa15:	50                   	push   eax
c001aa16:	50                   	push   eax
c001aa17:	55                   	push   ebp
c001aa18:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa1c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001aa20:	50                   	push   eax
c001aa21:	e8 1a 5c fe ff       	call   c0000640 <strcpy>
c001aa26:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001aa2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa2f:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001aa35:	5a                   	pop    edx
c001aa36:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aa3b:	59                   	pop    ecx
c001aa3c:	68 91 2f 02 c0       	push   0xc0022f91
c001aa41:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa47:	e8 5a e0 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001aa4c:	83 c4 10             	add    esp,0x10
c001aa4f:	31 c0                	xor    eax,eax
c001aa51:	eb 05                	jmp    c001aa58 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001aa53:	b8 04 00 00 00       	mov    eax,0x4
c001aa58:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aa5e:	5b                   	pop    ebx
c001aa5f:	5e                   	pop    esi
c001aa60:	5f                   	pop    edi
c001aa61:	5d                   	pop    ebp
c001aa62:	c3                   	ret    

c001aa63 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001aa63:	57                   	push   edi
c001aa64:	56                   	push   esi
c001aa65:	53                   	push   ebx
c001aa66:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aa6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aa6e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001aa72:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001aa78:	0f be cb             	movsx  ecx,bl
c001aa7b:	75 0b                	jne    c001aa88 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001aa7d:	0f be 05 c0 41 02 c0 	movsx  eax,BYTE PTR ds:0xc00241c0
c001aa84:	39 c8                	cmp    eax,ecx
c001aa86:	74 47                	je     c001aacf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aa88:	83 ec 0c             	sub    esp,0xc
c001aa8b:	31 d2                	xor    edx,edx
c001aa8d:	68 a0 c8 02 c0       	push   0xc002c8a0
c001aa92:	6a 01                	push   0x1
c001aa94:	52                   	push   edx
c001aa95:	56                   	push   esi
c001aa96:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001aa9d:	e8 02 33 ff ff       	call   c000dda4 <LogicalDisk::read(unsigned long long, int, void*)>
c001aaa2:	83 c4 20             	add    esp,0x20
c001aaa5:	85 c0                	test   eax,eax
c001aaa7:	75 0e                	jne    c001aab7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001aaa9:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001aaaf:	88 1d c0 41 02 c0    	mov    BYTE PTR ds:0xc00241c0,bl
c001aab5:	eb 18                	jmp    c001aacf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aab7:	50                   	push   eax
c001aab8:	68 00 08 00 00       	push   0x800
c001aabd:	6a 00                	push   0x0
c001aabf:	57                   	push   edi
c001aac0:	e8 2b 5a fe ff       	call   c00004f0 <memset>
c001aac5:	83 c4 10             	add    esp,0x10
c001aac8:	b8 01 00 00 00       	mov    eax,0x1
c001aacd:	eb 0e                	jmp    c001aadd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001aacf:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001aad4:	b9 00 08 00 00       	mov    ecx,0x800
c001aad9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aadb:	31 c0                	xor    eax,eax
c001aadd:	5b                   	pop    ebx
c001aade:	5e                   	pop    esi
c001aadf:	5f                   	pop    edi
c001aae0:	c3                   	ret    
c001aae1:	90                   	nop

c001aae2 <ISO9660::tryMount(LogicalDisk*, int)>:
c001aae2:	53                   	push   ebx
c001aae3:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001aae9:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001aaf3:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001aafa:	8d 58 41             	lea    ebx,[eax+0x41]
c001aafd:	0f be db             	movsx  ebx,bl
c001ab00:	53                   	push   ebx
c001ab01:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ab05:	50                   	push   eax
c001ab06:	6a 10                	push   0x10
c001ab08:	e8 56 ff ff ff       	call   c001aa63 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ab0d:	83 c4 10             	add    esp,0x10
c001ab10:	31 d2                	xor    edx,edx
c001ab12:	85 c0                	test   eax,eax
c001ab14:	75 33                	jne    c001ab49 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab16:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001ab1b:	75 2c                	jne    c001ab49 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab1d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ab22:	75 25                	jne    c001ab49 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab24:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ab29:	75 1e                	jne    c001ab49 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab2b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ab30:	75 17                	jne    c001ab49 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab32:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ab37:	75 10                	jne    c001ab49 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab39:	83 ec 0c             	sub    esp,0xc
c001ab3c:	53                   	push   ebx
c001ab3d:	e8 04 bf fe ff       	call   c0006a46 <init_percd>
c001ab42:	83 c4 10             	add    esp,0x10
c001ab45:	40                   	inc    eax
c001ab46:	0f 95 c2             	setne  dl
c001ab49:	88 d0                	mov    al,dl
c001ab4b:	81 c4 08 08 00 00    	add    esp,0x808
c001ab51:	5b                   	pop    ebx
c001ab52:	c3                   	ret    
c001ab53:	90                   	nop

c001ab54 <ISO9660::ISO9660()>:
c001ab54:	83 ec 0c             	sub    esp,0xc
c001ab57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab5b:	83 ec 0c             	sub    esp,0xc
c001ab5e:	50                   	push   eax
c001ab5f:	e8 42 0c ff ff       	call   c000b7a6 <Filesystem::Filesystem()>
c001ab64:	83 c4 10             	add    esp,0x10
c001ab67:	ba ac 2f 02 c0       	mov    edx,0xc0022fac
c001ab6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab70:	89 10                	mov    DWORD PTR [eax],edx
c001ab72:	e8 e1 bf fe ff       	call   c0006b58 <fs_iso9660_init>
c001ab77:	90                   	nop
c001ab78:	83 c4 0c             	add    esp,0xc
c001ab7b:	c3                   	ret    

c001ab7c <SoundCard::beginPlayback()>:
c001ab7c:	c7 44 24 04 10 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023010
c001ab84:	e9 92 6a ff ff       	jmp    c001161b <KePanic(char const*)>
c001ab89:	90                   	nop

c001ab8a <SoundCard::stopPlayback()>:
c001ab8a:	c7 44 24 04 10 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023010
c001ab92:	e9 84 6a ff ff       	jmp    c001161b <KePanic(char const*)>
c001ab97:	90                   	nop

c001ab98 <SoundCard::SoundCard(char const*)>:
c001ab98:	83 ec 1c             	sub    esp,0x1c
c001ab9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab9f:	83 ec 08             	sub    esp,0x8
c001aba2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aba6:	50                   	push   eax
c001aba7:	e8 ae 1f ff ff       	call   c000cb5a <Device::Device(char const*)>
c001abac:	83 c4 10             	add    esp,0x10
c001abaf:	ba 5c 30 02 c0       	mov    edx,0xc002305c
c001abb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abb8:	89 10                	mov    DWORD PTR [eax],edx
c001abba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abbe:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001abc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abc9:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001abd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abd7:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001abe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abe5:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001abef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abf3:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001abfd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac05:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ac0a:	7f 1a                	jg     c001ac26 <SoundCard::SoundCard(char const*)+0x8e>
c001ac0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac14:	83 c2 54             	add    edx,0x54
c001ac17:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001ac1f:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ac24:	eb df                	jmp    c001ac05 <SoundCard::SoundCard(char const*)+0x6d>
c001ac26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac2a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ac31:	90                   	nop
c001ac32:	83 c4 1c             	add    esp,0x1c
c001ac35:	c3                   	ret    

c001ac36 <SoundCard::~SoundCard()>:
c001ac36:	83 ec 0c             	sub    esp,0xc
c001ac39:	ba 5c 30 02 c0       	mov    edx,0xc002305c
c001ac3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac42:	89 10                	mov    DWORD PTR [eax],edx
c001ac44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac48:	83 ec 0c             	sub    esp,0xc
c001ac4b:	50                   	push   eax
c001ac4c:	e8 73 1c ff ff       	call   c000c8c4 <Device::~Device()>
c001ac51:	83 c4 10             	add    esp,0x10
c001ac54:	90                   	nop
c001ac55:	83 c4 0c             	add    esp,0xc
c001ac58:	c3                   	ret    
c001ac59:	90                   	nop

c001ac5a <SoundCard::~SoundCard()>:
c001ac5a:	83 ec 0c             	sub    esp,0xc
c001ac5d:	83 ec 0c             	sub    esp,0xc
c001ac60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac64:	e8 cd ff ff ff       	call   c001ac36 <SoundCard::~SoundCard()>
c001ac69:	83 c4 10             	add    esp,0x10
c001ac6c:	83 ec 08             	sub    esp,0x8
c001ac6f:	68 e8 01 00 00       	push   0x1e8
c001ac74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac78:	e8 9b fb fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ac7d:	83 c4 10             	add    esp,0x10
c001ac80:	83 c4 0c             	add    esp,0xc
c001ac83:	c3                   	ret    

c001ac84 <SoundCard::configureRates(int, int, int)>:
c001ac84:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac88:	31 c0                	xor    eax,eax
c001ac8a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ac91:	75 20                	jne    c001acb3 <SoundCard::configureRates(int, int, int)+0x2f>
c001ac93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac97:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ac9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aca1:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001aca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acab:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001acb1:	b0 01                	mov    al,0x1
c001acb3:	c3                   	ret    

c001acb4 <SoundCard::getSamples16(int, short*)>:
c001acb4:	55                   	push   ebp
c001acb5:	57                   	push   edi
c001acb6:	31 ff                	xor    edi,edi
c001acb8:	56                   	push   esi
c001acb9:	53                   	push   ebx
c001acba:	31 db                	xor    ebx,ebx
c001acbc:	83 ec 10             	sub    esp,0x10
c001acbf:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001acc3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001acc7:	8d 04 36             	lea    eax,[esi+esi*1]
c001acca:	50                   	push   eax
c001accb:	6a 00                	push   0x0
c001accd:	55                   	push   ebp
c001acce:	e8 1d 58 fe ff       	call   c00004f0 <memset>
c001acd3:	83 c4 10             	add    esp,0x10
c001acd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acda:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001ace1:	85 c0                	test   eax,eax
c001ace3:	74 1b                	je     c001ad00 <SoundCard::getSamples16(int, short*)+0x4c>
c001ace5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ace9:	75 15                	jne    c001ad00 <SoundCard::getSamples16(int, short*)+0x4c>
c001aceb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001acef:	55                   	push   ebp
c001acf0:	56                   	push   esi
c001acf1:	50                   	push   eax
c001acf2:	e8 f1 02 00 00       	call   c001afe8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001acf7:	83 c4 10             	add    esp,0x10
c001acfa:	39 c7                	cmp    edi,eax
c001acfc:	7d 02                	jge    c001ad00 <SoundCard::getSamples16(int, short*)+0x4c>
c001acfe:	89 c7                	mov    edi,eax
c001ad00:	43                   	inc    ebx
c001ad01:	83 fb 20             	cmp    ebx,0x20
c001ad04:	75 d0                	jne    c001acd6 <SoundCard::getSamples16(int, short*)+0x22>
c001ad06:	83 c4 0c             	add    esp,0xc
c001ad09:	89 f8                	mov    eax,edi
c001ad0b:	5b                   	pop    ebx
c001ad0c:	5e                   	pop    esi
c001ad0d:	5f                   	pop    edi
c001ad0e:	5d                   	pop    ebp
c001ad0f:	c3                   	ret    

c001ad10 <SoundCard::getSamples32(int, int*)>:
c001ad10:	55                   	push   ebp
c001ad11:	57                   	push   edi
c001ad12:	31 ff                	xor    edi,edi
c001ad14:	56                   	push   esi
c001ad15:	31 f6                	xor    esi,esi
c001ad17:	53                   	push   ebx
c001ad18:	83 ec 10             	sub    esp,0x10
c001ad1b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ad1f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ad23:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad27:	c1 e0 02             	shl    eax,0x2
c001ad2a:	50                   	push   eax
c001ad2b:	6a 00                	push   0x0
c001ad2d:	55                   	push   ebp
c001ad2e:	e8 bd 57 fe ff       	call   c00004f0 <memset>
c001ad33:	83 c4 10             	add    esp,0x10
c001ad36:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ad3d:	85 c0                	test   eax,eax
c001ad3f:	74 1b                	je     c001ad5c <SoundCard::getSamples32(int, int*)+0x4c>
c001ad41:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ad45:	75 15                	jne    c001ad5c <SoundCard::getSamples32(int, int*)+0x4c>
c001ad47:	53                   	push   ebx
c001ad48:	55                   	push   ebp
c001ad49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad4d:	50                   	push   eax
c001ad4e:	e8 61 03 00 00       	call   c001b0b4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ad53:	83 c4 10             	add    esp,0x10
c001ad56:	39 c6                	cmp    esi,eax
c001ad58:	7d 02                	jge    c001ad5c <SoundCard::getSamples32(int, int*)+0x4c>
c001ad5a:	89 c6                	mov    esi,eax
c001ad5c:	47                   	inc    edi
c001ad5d:	83 ff 20             	cmp    edi,0x20
c001ad60:	75 d4                	jne    c001ad36 <SoundCard::getSamples32(int, int*)+0x26>
c001ad62:	85 f6                	test   esi,esi
c001ad64:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001ad6b:	75 0f                	jne    c001ad7c <SoundCard::getSamples32(int, int*)+0x6c>
c001ad6d:	85 c0                	test   eax,eax
c001ad6f:	74 1b                	je     c001ad8c <SoundCard::getSamples32(int, int*)+0x7c>
c001ad71:	83 ec 0c             	sub    esp,0xc
c001ad74:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad76:	53                   	push   ebx
c001ad77:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ad7a:	eb 0d                	jmp    c001ad89 <SoundCard::getSamples32(int, int*)+0x79>
c001ad7c:	85 c0                	test   eax,eax
c001ad7e:	75 0c                	jne    c001ad8c <SoundCard::getSamples32(int, int*)+0x7c>
c001ad80:	83 ec 0c             	sub    esp,0xc
c001ad83:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad85:	53                   	push   ebx
c001ad86:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ad89:	83 c4 10             	add    esp,0x10
c001ad8c:	83 c4 0c             	add    esp,0xc
c001ad8f:	89 f0                	mov    eax,esi
c001ad91:	5b                   	pop    ebx
c001ad92:	5e                   	pop    esi
c001ad93:	5f                   	pop    edi
c001ad94:	5d                   	pop    ebp
c001ad95:	c3                   	ret    

c001ad96 <SoundCard::addChannel(SoundPort*)>:
c001ad96:	83 ec 0c             	sub    esp,0xc
c001ad99:	31 c0                	xor    eax,eax
c001ad9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad9f:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ada7:	74 1b                	je     c001adc4 <SoundCard::addChannel(SoundPort*)+0x2e>
c001ada9:	40                   	inc    eax
c001adaa:	83 f8 20             	cmp    eax,0x20
c001adad:	75 f0                	jne    c001ad9f <SoundCard::addChannel(SoundPort*)+0x9>
c001adaf:	83 ec 0c             	sub    esp,0xc
c001adb2:	68 35 30 02 c0       	push   0xc0023035
c001adb7:	e8 5f 68 ff ff       	call   c001161b <KePanic(char const*)>
c001adbc:	83 c4 10             	add    esp,0x10
c001adbf:	83 c8 ff             	or     eax,0xffffffff
c001adc2:	eb 0b                	jmp    c001adcf <SoundCard::addChannel(SoundPort*)+0x39>
c001adc4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001adc8:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001adcf:	83 c4 0c             	add    esp,0xc
c001add2:	c3                   	ret    
c001add3:	90                   	nop

c001add4 <SoundCard::removeChannel(int)>:
c001add4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001add8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001addc:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001ade7:	c3                   	ret    

c001ade8 <SoundPort::SoundPort(int, int, int, int)>:
c001ade8:	83 ec 0c             	sub    esp,0xc
c001adeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adef:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001adf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adfa:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001adfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae02:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae06:	89 10                	mov    DWORD PTR [eax],edx
c001ae08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae0c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ae10:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ae13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae17:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae1b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ae1e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001ae23:	75 13                	jne    c001ae38 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001ae25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae29:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae2b:	05 a0 0f 00 00       	add    eax,0xfa0
c001ae30:	01 c0                	add    eax,eax
c001ae32:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ae36:	66 90                	xchg   ax,ax
c001ae38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae3c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae40:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ae43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae47:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001ae4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae52:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ae55:	c1 e0 02             	shl    eax,0x2
c001ae58:	83 ec 0c             	sub    esp,0xc
c001ae5b:	50                   	push   eax
c001ae5c:	e8 55 cc fe ff       	call   c0007ab6 <malloc>
c001ae61:	83 c4 10             	add    esp,0x10
c001ae64:	89 c2                	mov    edx,eax
c001ae66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae6a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ae6d:	90                   	nop
c001ae6e:	83 c4 0c             	add    esp,0xc
c001ae71:	c3                   	ret    
c001ae72:	66 90                	xchg   ax,ax

c001ae74 <SoundPort::~SoundPort()>:
c001ae74:	83 ec 0c             	sub    esp,0xc
c001ae77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae7b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ae7e:	85 c0                	test   eax,eax
c001ae80:	74 1e                	je     c001aea0 <SoundPort::~SoundPort()+0x2c>
c001ae82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae86:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ae89:	83 ec 0c             	sub    esp,0xc
c001ae8c:	50                   	push   eax
c001ae8d:	e8 34 cc fe ff       	call   c0007ac6 <free>
c001ae92:	83 c4 10             	add    esp,0x10
c001ae95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae99:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001aea0:	90                   	nop
c001aea1:	83 c4 0c             	add    esp,0xc
c001aea4:	c3                   	ret    
c001aea5:	90                   	nop
c001aea6:	66 90                	xchg   ax,ax

c001aea8 <SoundPort::unpause()>:
c001aea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aeac:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001aeb0:	c3                   	ret    
c001aeb1:	90                   	nop
c001aeb2:	66 90                	xchg   ax,ax

c001aeb4 <SoundPort::pause()>:
c001aeb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aeb8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001aebc:	c3                   	ret    
c001aebd:	90                   	nop
c001aebe:	66 90                	xchg   ax,ax

c001aec0 <SoundPort::getBufferUsed()>:
c001aec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aec4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aec7:	c3                   	ret    

c001aec8 <SoundPort::getBufferSize()>:
c001aec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aecc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aecf:	c3                   	ret    

c001aed0 <SoundPort::buffer16(short*, int)>:
c001aed0:	55                   	push   ebp
c001aed1:	57                   	push   edi
c001aed2:	56                   	push   esi
c001aed3:	53                   	push   ebx
c001aed4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aed8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001aedc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001aedf:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001aee2:	74 68                	je     c001af4c <SoundPort::buffer16(short*, int)+0x7c>
c001aee4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aee8:	85 c9                	test   ecx,ecx
c001aeea:	7e 60                	jle    c001af4c <SoundPort::buffer16(short*, int)+0x7c>
c001aeec:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001aef0:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aef3:	c1 e1 0f             	shl    ecx,0xf
c001aef6:	8d 70 01             	lea    esi,[eax+0x1]
c001aef9:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aefc:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001aeff:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af02:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af05:	74 4d                	je     c001af54 <SoundPort::buffer16(short*, int)+0x84>
c001af07:	31 f6                	xor    esi,esi
c001af09:	eb 21                	jmp    c001af2c <SoundPort::buffer16(short*, int)+0x5c>
c001af0b:	90                   	nop
c001af0c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001af11:	8d 79 01             	lea    edi,[ecx+0x1]
c001af14:	c1 e3 0f             	shl    ebx,0xf
c001af17:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001af1a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001af1d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001af20:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af23:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af26:	74 1c                	je     c001af44 <SoundPort::buffer16(short*, int)+0x74>
c001af28:	89 c6                	mov    esi,eax
c001af2a:	66 90                	xchg   ax,ax
c001af2c:	8d 46 01             	lea    eax,[esi+0x1]
c001af2f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001af33:	75 d7                	jne    c001af0c <SoundPort::buffer16(short*, int)+0x3c>
c001af35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af39:	8d 76 00             	lea    esi,[esi+0x0]
c001af3c:	5b                   	pop    ebx
c001af3d:	5e                   	pop    esi
c001af3e:	5f                   	pop    edi
c001af3f:	5d                   	pop    ebp
c001af40:	c3                   	ret    
c001af41:	8d 76 00             	lea    esi,[esi+0x0]
c001af44:	5b                   	pop    ebx
c001af45:	8d 46 02             	lea    eax,[esi+0x2]
c001af48:	5e                   	pop    esi
c001af49:	5f                   	pop    edi
c001af4a:	5d                   	pop    ebp
c001af4b:	c3                   	ret    
c001af4c:	5b                   	pop    ebx
c001af4d:	31 c0                	xor    eax,eax
c001af4f:	5e                   	pop    esi
c001af50:	5f                   	pop    edi
c001af51:	5d                   	pop    ebp
c001af52:	c3                   	ret    
c001af53:	90                   	nop
c001af54:	b8 01 00 00 00       	mov    eax,0x1
c001af59:	eb e1                	jmp    c001af3c <SoundPort::buffer16(short*, int)+0x6c>
c001af5b:	90                   	nop

c001af5c <SoundPort::buffer32(int*, int)>:
c001af5c:	55                   	push   ebp
c001af5d:	57                   	push   edi
c001af5e:	56                   	push   esi
c001af5f:	53                   	push   ebx
c001af60:	83 ec 04             	sub    esp,0x4
c001af63:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af6b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af6e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001af72:	89 04 24             	mov    DWORD PTR [esp],eax
c001af75:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af78:	74 5a                	je     c001afd4 <SoundPort::buffer32(int*, int)+0x78>
c001af7a:	85 c0                	test   eax,eax
c001af7c:	7e 56                	jle    c001afd4 <SoundPort::buffer32(int*, int)+0x78>
c001af7e:	8d 71 01             	lea    esi,[ecx+0x1]
c001af81:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001af84:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001af87:	8b 37                	mov    esi,DWORD PTR [edi]
c001af89:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001af8c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af8f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af92:	74 4c                	je     c001afe0 <SoundPort::buffer32(int*, int)+0x84>
c001af94:	31 f6                	xor    esi,esi
c001af96:	eb 1c                	jmp    c001afb4 <SoundPort::buffer32(int*, int)+0x58>
c001af98:	8d 69 01             	lea    ebp,[ecx+0x1]
c001af9b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001af9e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001afa1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001afa4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001afa8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afab:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001afae:	74 18                	je     c001afc8 <SoundPort::buffer32(int*, int)+0x6c>
c001afb0:	89 de                	mov    esi,ebx
c001afb2:	66 90                	xchg   ax,ax
c001afb4:	8d 5e 01             	lea    ebx,[esi+0x1]
c001afb7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001afba:	75 dc                	jne    c001af98 <SoundPort::buffer32(int*, int)+0x3c>
c001afbc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001afbf:	90                   	nop
c001afc0:	83 c4 04             	add    esp,0x4
c001afc3:	5b                   	pop    ebx
c001afc4:	5e                   	pop    esi
c001afc5:	5f                   	pop    edi
c001afc6:	5d                   	pop    ebp
c001afc7:	c3                   	ret    
c001afc8:	83 c4 04             	add    esp,0x4
c001afcb:	8d 46 02             	lea    eax,[esi+0x2]
c001afce:	5b                   	pop    ebx
c001afcf:	5e                   	pop    esi
c001afd0:	5f                   	pop    edi
c001afd1:	5d                   	pop    ebp
c001afd2:	c3                   	ret    
c001afd3:	90                   	nop
c001afd4:	83 c4 04             	add    esp,0x4
c001afd7:	31 c0                	xor    eax,eax
c001afd9:	5b                   	pop    ebx
c001afda:	5e                   	pop    esi
c001afdb:	5f                   	pop    edi
c001afdc:	5d                   	pop    ebp
c001afdd:	c3                   	ret    
c001afde:	66 90                	xchg   ax,ax
c001afe0:	b8 01 00 00 00       	mov    eax,0x1
c001afe5:	eb d9                	jmp    c001afc0 <SoundPort::buffer32(int*, int)+0x64>
c001afe7:	90                   	nop

c001afe8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001afe8:	57                   	push   edi
c001afe9:	56                   	push   esi
c001afea:	53                   	push   ebx
c001afeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afef:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001aff3:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001aff9:	39 03                	cmp    DWORD PTR [ebx],eax
c001affb:	74 13                	je     c001b010 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001affd:	83 ec 0c             	sub    esp,0xc
c001b000:	68 88 30 02 c0       	push   0xc0023088
c001b005:	e8 11 66 ff ff       	call   c001161b <KePanic(char const*)>
c001b00a:	83 c4 10             	add    esp,0x10
c001b00d:	8d 76 00             	lea    esi,[esi+0x0]
c001b010:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001b016:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b019:	74 11                	je     c001b02c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001b01b:	83 ec 0c             	sub    esp,0xc
c001b01e:	68 c7 30 02 c0       	push   0xc00230c7
c001b023:	e8 f3 65 ff ff       	call   c001161b <KePanic(char const*)>
c001b028:	83 c4 10             	add    esp,0x10
c001b02b:	90                   	nop
c001b02c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001b032:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b035:	74 11                	je     c001b048 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001b037:	83 ec 0c             	sub    esp,0xc
c001b03a:	68 c7 30 02 c0       	push   0xc00230c7
c001b03f:	e8 d7 65 ff ff       	call   c001161b <KePanic(char const*)>
c001b044:	83 c4 10             	add    esp,0x10
c001b047:	90                   	nop
c001b048:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001b04b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001b04f:	7e 07                	jle    c001b058 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001b051:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b055:	8d 76 00             	lea    esi,[esi+0x0]
c001b058:	85 f6                	test   esi,esi
c001b05a:	7e 2c                	jle    c001b088 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001b05c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b060:	8d 3c 36             	lea    edi,[esi+esi*1]
c001b063:	31 c9                	xor    ecx,ecx
c001b065:	01 d7                	add    edi,edx
c001b067:	90                   	nop
c001b068:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001b06b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001b06e:	85 c0                	test   eax,eax
c001b070:	79 06                	jns    c001b078 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001b072:	05 ff 7f 00 00       	add    eax,0x7fff
c001b077:	90                   	nop
c001b078:	c1 f8 0f             	sar    eax,0xf
c001b07b:	83 c1 04             	add    ecx,0x4
c001b07e:	66 01 02             	add    WORD PTR [edx],ax
c001b081:	83 c2 02             	add    edx,0x2
c001b084:	39 d7                	cmp    edi,edx
c001b086:	75 e0                	jne    c001b068 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001b088:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b08b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b08e:	83 ec 04             	sub    esp,0x4
c001b091:	29 f0                	sub    eax,esi
c001b093:	c1 e0 02             	shl    eax,0x2
c001b096:	50                   	push   eax
c001b097:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b09a:	50                   	push   eax
c001b09b:	52                   	push   edx
c001b09c:	e8 2f 53 fe ff       	call   c00003d0 <memmove>
c001b0a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b0a4:	83 c4 10             	add    esp,0x10
c001b0a7:	29 f0                	sub    eax,esi
c001b0a9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b0ac:	89 f0                	mov    eax,esi
c001b0ae:	5b                   	pop    ebx
c001b0af:	5e                   	pop    esi
c001b0b0:	5f                   	pop    edi
c001b0b1:	c3                   	ret    
c001b0b2:	66 90                	xchg   ax,ax

c001b0b4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b0b4:	57                   	push   edi
c001b0b5:	56                   	push   esi
c001b0b6:	53                   	push   ebx
c001b0b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b0bb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b0bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b0c3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001b0c9:	39 06                	cmp    DWORD PTR [esi],eax
c001b0cb:	74 13                	je     c001b0e0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001b0cd:	83 ec 0c             	sub    esp,0xc
c001b0d0:	68 a8 30 02 c0       	push   0xc00230a8
c001b0d5:	e8 41 65 ff ff       	call   c001161b <KePanic(char const*)>
c001b0da:	83 c4 10             	add    esp,0x10
c001b0dd:	8d 76 00             	lea    esi,[esi+0x0]
c001b0e0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001b0e6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001b0e9:	74 11                	je     c001b0fc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001b0eb:	83 ec 0c             	sub    esp,0xc
c001b0ee:	68 e3 30 02 c0       	push   0xc00230e3
c001b0f3:	e8 23 65 ff ff       	call   c001161b <KePanic(char const*)>
c001b0f8:	83 c4 10             	add    esp,0x10
c001b0fb:	90                   	nop
c001b0fc:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001b102:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001b105:	74 11                	je     c001b118 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001b107:	83 ec 0c             	sub    esp,0xc
c001b10a:	68 e3 30 02 c0       	push   0xc00230e3
c001b10f:	e8 07 65 ff ff       	call   c001161b <KePanic(char const*)>
c001b114:	83 c4 10             	add    esp,0x10
c001b117:	90                   	nop
c001b118:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001b11b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001b11f:	7e 07                	jle    c001b128 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001b121:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b125:	8d 76 00             	lea    esi,[esi+0x0]
c001b128:	85 ff                	test   edi,edi
c001b12a:	7e 1c                	jle    c001b148 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001b12c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b133:	31 c0                	xor    eax,eax
c001b135:	8d 76 00             	lea    esi,[esi+0x0]
c001b138:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b13b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b13e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001b141:	83 c0 04             	add    eax,0x4
c001b144:	39 c1                	cmp    ecx,eax
c001b146:	75 f0                	jne    c001b138 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001b148:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b14b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b14e:	83 ec 04             	sub    esp,0x4
c001b151:	29 f8                	sub    eax,edi
c001b153:	c1 e0 02             	shl    eax,0x2
c001b156:	50                   	push   eax
c001b157:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b15a:	50                   	push   eax
c001b15b:	52                   	push   edx
c001b15c:	e8 6f 52 fe ff       	call   c00003d0 <memmove>
c001b161:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b164:	83 c4 10             	add    esp,0x10
c001b167:	29 f8                	sub    eax,edi
c001b169:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001b16c:	89 f8                	mov    eax,edi
c001b16e:	5b                   	pop    ebx
c001b16f:	5e                   	pop    esi
c001b170:	5f                   	pop    edi
c001b171:	c3                   	ret    

c001b172 <PCI::open(int, int, void*)>:
c001b172:	83 ec 18             	sub    esp,0x18
c001b175:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b179:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b17d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b183:	8b 10                	mov    edx,DWORD PTR [eax]
c001b185:	50                   	push   eax
c001b186:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b189:	31 c0                	xor    eax,eax
c001b18b:	83 c4 1c             	add    esp,0x1c
c001b18e:	c3                   	ret    
c001b18f:	90                   	nop

c001b190 <PCI::close(int, int, void*)>:
c001b190:	31 c0                	xor    eax,eax
c001b192:	c3                   	ret    
c001b193:	90                   	nop

c001b194 <PCI::PCI()>:
c001b194:	83 ec 0c             	sub    esp,0xc
c001b197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b19b:	83 ec 08             	sub    esp,0x8
c001b19e:	68 ff 30 02 c0       	push   0xc00230ff
c001b1a3:	50                   	push   eax
c001b1a4:	e8 7b 11 ff ff       	call   c000c324 <Bus::Bus(char const*)>
c001b1a9:	83 c4 10             	add    esp,0x10
c001b1ac:	ba a8 31 02 c0       	mov    edx,0xc00231a8
c001b1b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1b5:	89 10                	mov    DWORD PTR [eax],edx
c001b1b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1bb:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b1c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1c9:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b1ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1d2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b1d8:	0f b6 d0             	movzx  edx,al
c001b1db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1df:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b1e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1ea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b1f0:	0f b6 d0             	movzx  edx,al
c001b1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1f7:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b1fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b200:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b206:	8d 50 01             	lea    edx,[eax+0x1]
c001b209:	88 d1                	mov    cl,dl
c001b20b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b20f:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b215:	0f b6 d0             	movzx  edx,al
c001b218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b21c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b220:	83 c9 c0             	or     ecx,0xffffffc0
c001b223:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b227:	90                   	nop
c001b228:	83 c4 0c             	add    esp,0xc
c001b22b:	c3                   	ret    

c001b22c <PCI::readBAR8(unsigned int, int)>:
c001b22c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b230:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b234:	f6 c2 01             	test   dl,0x1
c001b237:	74 07                	je     c001b240 <PCI::readBAR8(unsigned int, int)+0x14>
c001b239:	83 e2 fc             	and    edx,0xfffffffc
c001b23c:	01 c2                	add    edx,eax
c001b23e:	ec                   	in     al,dx
c001b23f:	c3                   	ret    
c001b240:	83 e2 f0             	and    edx,0xfffffff0
c001b243:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b246:	c3                   	ret    
c001b247:	90                   	nop

c001b248 <PCI::readBAR16(unsigned int, int)>:
c001b248:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b24c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b250:	f6 c2 01             	test   dl,0x1
c001b253:	74 08                	je     c001b25d <PCI::readBAR16(unsigned int, int)+0x15>
c001b255:	83 e2 fc             	and    edx,0xfffffffc
c001b258:	01 c2                	add    edx,eax
c001b25a:	66 ed                	in     ax,dx
c001b25c:	c3                   	ret    
c001b25d:	83 e2 f0             	and    edx,0xfffffff0
c001b260:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b264:	c3                   	ret    
c001b265:	90                   	nop

c001b266 <PCI::readBAR32(unsigned int, int)>:
c001b266:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b26a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b26e:	f6 c2 01             	test   dl,0x1
c001b271:	74 07                	je     c001b27a <PCI::readBAR32(unsigned int, int)+0x14>
c001b273:	83 e2 fc             	and    edx,0xfffffffc
c001b276:	01 c2                	add    edx,eax
c001b278:	ed                   	in     eax,dx
c001b279:	c3                   	ret    
c001b27a:	83 e2 f0             	and    edx,0xfffffff0
c001b27d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b280:	c3                   	ret    
c001b281:	90                   	nop

c001b282 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b282:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b286:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b28a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b28e:	f6 c2 01             	test   dl,0x1
c001b291:	74 07                	je     c001b29a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b293:	83 e2 fc             	and    edx,0xfffffffc
c001b296:	01 ca                	add    edx,ecx
c001b298:	ee                   	out    dx,al
c001b299:	c3                   	ret    
c001b29a:	83 e2 f0             	and    edx,0xfffffff0
c001b29d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b2a0:	c3                   	ret    
c001b2a1:	90                   	nop

c001b2a2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b2a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b2ae:	f6 c2 01             	test   dl,0x1
c001b2b1:	74 08                	je     c001b2bb <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b2b3:	83 e2 fc             	and    edx,0xfffffffc
c001b2b6:	01 ca                	add    edx,ecx
c001b2b8:	66 ef                	out    dx,ax
c001b2ba:	c3                   	ret    
c001b2bb:	83 e2 f0             	and    edx,0xfffffff0
c001b2be:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b2c2:	c3                   	ret    
c001b2c3:	90                   	nop

c001b2c4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b2c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b2d0:	f6 c2 01             	test   dl,0x1
c001b2d3:	74 07                	je     c001b2dc <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b2d5:	83 e2 fc             	and    edx,0xfffffffc
c001b2d8:	01 ca                	add    edx,ecx
c001b2da:	ef                   	out    dx,eax
c001b2db:	c3                   	ret    
c001b2dc:	83 e2 f0             	and    edx,0xfffffff0
c001b2df:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b2e2:	c3                   	ret    
c001b2e3:	90                   	nop

c001b2e4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b2e4:	55                   	push   ebp
c001b2e5:	57                   	push   edi
c001b2e6:	56                   	push   esi
c001b2e7:	53                   	push   ebx
c001b2e8:	83 ec 0c             	sub    esp,0xc
c001b2eb:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b2f0:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b2f4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b2f8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b2fc:	83 fe 07             	cmp    esi,0x7
c001b2ff:	76 10                	jbe    c001b311 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b301:	83 ec 0c             	sub    esp,0xc
c001b304:	68 07 31 02 c0       	push   0xc0023107
c001b309:	e8 0d 63 ff ff       	call   c001161b <KePanic(char const*)>
c001b30e:	83 c4 10             	add    esp,0x10
c001b311:	0f b6 db             	movzx  ebx,bl
c001b314:	83 fb 0f             	cmp    ebx,0xf
c001b317:	76 10                	jbe    c001b329 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b319:	83 ec 0c             	sub    esp,0xc
c001b31c:	68 37 31 02 c0       	push   0xc0023137
c001b321:	e8 f5 62 ff ff       	call   c001161b <KePanic(char const*)>
c001b326:	83 c4 10             	add    esp,0x10
c001b329:	8d 04 36             	lea    eax,[esi+esi*1]
c001b32c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b331:	83 c8 f0             	or     eax,0xfffffff0
c001b334:	ee                   	out    dx,al
c001b335:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b33a:	89 e8                	mov    eax,ebp
c001b33c:	ee                   	out    dx,al
c001b33d:	83 c4 0c             	add    esp,0xc
c001b340:	89 d8                	mov    eax,ebx
c001b342:	89 f9                	mov    ecx,edi
c001b344:	c1 e0 08             	shl    eax,0x8
c001b347:	0f b6 d9             	movzx  ebx,cl
c001b34a:	83 e3 fc             	and    ebx,0xfffffffc
c001b34d:	09 d8                	or     eax,ebx
c001b34f:	5b                   	pop    ebx
c001b350:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b355:	5e                   	pop    esi
c001b356:	5f                   	pop    edi
c001b357:	5d                   	pop    ebp
c001b358:	c3                   	ret    
c001b359:	90                   	nop

c001b35a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b35a:	57                   	push   edi
c001b35b:	56                   	push   esi
c001b35c:	53                   	push   ebx
c001b35d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b361:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b365:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b36b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b36f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b373:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b377:	83 ff 01             	cmp    edi,0x1
c001b37a:	75 3f                	jne    c001b3bb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b37c:	89 de                	mov    esi,ebx
c001b37e:	0f b6 c0             	movzx  eax,al
c001b381:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b387:	c1 e0 10             	shl    eax,0x10
c001b38a:	0f b6 c9             	movzx  ecx,cl
c001b38d:	09 f0                	or     eax,esi
c001b38f:	c1 e1 08             	shl    ecx,0x8
c001b392:	0f b6 d2             	movzx  edx,dl
c001b395:	09 c8                	or     eax,ecx
c001b397:	c1 e2 0b             	shl    edx,0xb
c001b39a:	09 d0                	or     eax,edx
c001b39c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b3a1:	0d 00 00 00 80       	or     eax,0x80000000
c001b3a6:	ef                   	out    dx,eax
c001b3a7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b3ac:	ed                   	in     eax,dx
c001b3ad:	83 e3 02             	and    ebx,0x2
c001b3b0:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b3b7:	d3 e8                	shr    eax,cl
c001b3b9:	eb 44                	jmp    c001b3ff <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b3bb:	83 ff 02             	cmp    edi,0x2
c001b3be:	75 2d                	jne    c001b3ed <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b3c0:	83 ec 0c             	sub    esp,0xc
c001b3c3:	0f b6 c9             	movzx  ecx,cl
c001b3c6:	0f b6 d2             	movzx  edx,dl
c001b3c9:	0f b6 fb             	movzx  edi,bl
c001b3cc:	0f b6 c0             	movzx  eax,al
c001b3cf:	57                   	push   edi
c001b3d0:	51                   	push   ecx
c001b3d1:	52                   	push   edx
c001b3d2:	50                   	push   eax
c001b3d3:	56                   	push   esi
c001b3d4:	e8 0b ff ff ff       	call   c001b2e4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3d9:	89 c2                	mov    edx,eax
c001b3db:	ed                   	in     eax,dx
c001b3dc:	83 e3 02             	and    ebx,0x2
c001b3df:	83 c4 20             	add    esp,0x20
c001b3e2:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b3e9:	d3 e8                	shr    eax,cl
c001b3eb:	eb 12                	jmp    c001b3ff <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b3ed:	83 ec 0c             	sub    esp,0xc
c001b3f0:	68 67 31 02 c0       	push   0xc0023167
c001b3f5:	e8 21 62 ff ff       	call   c001161b <KePanic(char const*)>
c001b3fa:	83 c4 10             	add    esp,0x10
c001b3fd:	31 c0                	xor    eax,eax
c001b3ff:	5b                   	pop    ebx
c001b400:	5e                   	pop    esi
c001b401:	5f                   	pop    edi
c001b402:	c3                   	ret    
c001b403:	90                   	nop

c001b404 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b404:	83 ec 18             	sub    esp,0x18
c001b407:	6a 00                	push   0x0
c001b409:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b40e:	50                   	push   eax
c001b40f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b414:	50                   	push   eax
c001b415:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b41a:	50                   	push   eax
c001b41b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b41f:	e8 36 ff ff ff       	call   c001b35a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b424:	83 c4 2c             	add    esp,0x2c
c001b427:	c3                   	ret    

c001b428 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b428:	83 ec 18             	sub    esp,0x18
c001b42b:	6a 0e                	push   0xe
c001b42d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b432:	50                   	push   eax
c001b433:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b438:	50                   	push   eax
c001b439:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b43e:	50                   	push   eax
c001b43f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b443:	e8 12 ff ff ff       	call   c001b35a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b448:	83 c4 2c             	add    esp,0x2c
c001b44b:	0f b6 c0             	movzx  eax,al
c001b44e:	c3                   	ret    
c001b44f:	90                   	nop

c001b450 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b450:	55                   	push   ebp
c001b451:	57                   	push   edi
c001b452:	56                   	push   esi
c001b453:	53                   	push   ebx
c001b454:	83 ec 18             	sub    esp,0x18
c001b457:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b45c:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b461:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b466:	6a 0a                	push   0xa
c001b468:	56                   	push   esi
c001b469:	55                   	push   ebp
c001b46a:	57                   	push   edi
c001b46b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b46f:	e8 e6 fe ff ff       	call   c001b35a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b474:	83 c4 14             	add    esp,0x14
c001b477:	89 c3                	mov    ebx,eax
c001b479:	6a 0a                	push   0xa
c001b47b:	0f b6 db             	movzx  ebx,bl
c001b47e:	56                   	push   esi
c001b47f:	55                   	push   ebp
c001b480:	57                   	push   edi
c001b481:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b485:	e8 d0 fe ff ff       	call   c001b35a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b48a:	83 c4 2c             	add    esp,0x2c
c001b48d:	25 00 ff 00 00       	and    eax,0xff00
c001b492:	09 d8                	or     eax,ebx
c001b494:	5b                   	pop    ebx
c001b495:	5e                   	pop    esi
c001b496:	5f                   	pop    edi
c001b497:	5d                   	pop    ebp
c001b498:	c3                   	ret    
c001b499:	90                   	nop

c001b49a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b49a:	83 ec 18             	sub    esp,0x18
c001b49d:	6a 08                	push   0x8
c001b49f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4a4:	50                   	push   eax
c001b4a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4aa:	50                   	push   eax
c001b4ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4b0:	50                   	push   eax
c001b4b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4b5:	e8 a0 fe ff ff       	call   c001b35a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4ba:	83 c4 2c             	add    esp,0x2c
c001b4bd:	0f b6 c4             	movzx  eax,ah
c001b4c0:	c3                   	ret    
c001b4c1:	90                   	nop

c001b4c2 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b4c2:	83 ec 18             	sub    esp,0x18
c001b4c5:	6a 08                	push   0x8
c001b4c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4cc:	50                   	push   eax
c001b4cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4d2:	50                   	push   eax
c001b4d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4d8:	50                   	push   eax
c001b4d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4dd:	e8 78 fe ff ff       	call   c001b35a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4e2:	83 c4 2c             	add    esp,0x2c
c001b4e5:	c3                   	ret    

c001b4e6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b4e6:	83 ec 18             	sub    esp,0x18
c001b4e9:	6a 3c                	push   0x3c
c001b4eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4f0:	50                   	push   eax
c001b4f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4f6:	50                   	push   eax
c001b4f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4fc:	50                   	push   eax
c001b4fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b501:	e8 54 fe ff ff       	call   c001b35a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b506:	83 c4 2c             	add    esp,0x2c
c001b509:	c3                   	ret    

c001b50a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b50a:	83 ec 18             	sub    esp,0x18
c001b50d:	6a 18                	push   0x18
c001b50f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b514:	50                   	push   eax
c001b515:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b51a:	50                   	push   eax
c001b51b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b520:	50                   	push   eax
c001b521:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b525:	e8 30 fe ff ff       	call   c001b35a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b52a:	83 c4 2c             	add    esp,0x2c
c001b52d:	0f b6 c4             	movzx  eax,ah
c001b530:	c3                   	ret    
c001b531:	90                   	nop

c001b532 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b532:	55                   	push   ebp
c001b533:	57                   	push   edi
c001b534:	56                   	push   esi
c001b535:	53                   	push   ebx
c001b536:	83 ec 28             	sub    esp,0x28
c001b539:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b53d:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b542:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b547:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b54c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b553:	8d 43 12             	lea    eax,[ebx+0x12]
c001b556:	83 c3 10             	add    ebx,0x10
c001b559:	0f b6 c0             	movzx  eax,al
c001b55c:	0f b6 db             	movzx  ebx,bl
c001b55f:	50                   	push   eax
c001b560:	51                   	push   ecx
c001b561:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b565:	57                   	push   edi
c001b566:	55                   	push   ebp
c001b567:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b56b:	e8 ea fd ff ff       	call   c001b35a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b570:	83 c4 14             	add    esp,0x14
c001b573:	89 c6                	mov    esi,eax
c001b575:	53                   	push   ebx
c001b576:	c1 e6 10             	shl    esi,0x10
c001b579:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b57d:	51                   	push   ecx
c001b57e:	57                   	push   edi
c001b57f:	55                   	push   ebp
c001b580:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b584:	e8 d1 fd ff ff       	call   c001b35a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b589:	83 c4 3c             	add    esp,0x3c
c001b58c:	0f b7 c0             	movzx  eax,ax
c001b58f:	5b                   	pop    ebx
c001b590:	09 f0                	or     eax,esi
c001b592:	5e                   	pop    esi
c001b593:	5f                   	pop    edi
c001b594:	5d                   	pop    ebp
c001b595:	c3                   	ret    

c001b596 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b596:	55                   	push   ebp
c001b597:	57                   	push   edi
c001b598:	56                   	push   esi
c001b599:	53                   	push   ebx
c001b59a:	83 ec 0c             	sub    esp,0xc
c001b59d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b5a1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b5a5:	89 f5                	mov    ebp,esi
c001b5a7:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b5ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b5b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b5b5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b5b9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b5bd:	83 f9 01             	cmp    ecx,0x1
c001b5c0:	75 5d                	jne    c001b61f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b5c2:	0f b6 c8             	movzx  ecx,al
c001b5c5:	0f b6 d2             	movzx  edx,dl
c001b5c8:	c1 e1 10             	shl    ecx,0x10
c001b5cb:	c1 e2 0b             	shl    edx,0xb
c001b5ce:	89 f0                	mov    eax,esi
c001b5d0:	25 fc 00 00 00       	and    eax,0xfc
c001b5d5:	09 c1                	or     ecx,eax
c001b5d7:	89 e8                	mov    eax,ebp
c001b5d9:	0f b6 c0             	movzx  eax,al
c001b5dc:	c1 e0 08             	shl    eax,0x8
c001b5df:	09 c1                	or     ecx,eax
c001b5e1:	09 d1                	or     ecx,edx
c001b5e3:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b5e8:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b5ee:	89 c8                	mov    eax,ecx
c001b5f0:	ef                   	out    dx,eax
c001b5f1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b5f6:	ed                   	in     eax,dx
c001b5f7:	0f b7 db             	movzx  ebx,bx
c001b5fa:	83 e6 02             	and    esi,0x2
c001b5fd:	74 0a                	je     c001b609 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b5ff:	0f b7 d0             	movzx  edx,ax
c001b602:	c1 e3 10             	shl    ebx,0x10
c001b605:	09 d3                	or     ebx,edx
c001b607:	eb 05                	jmp    c001b60e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b609:	66 31 c0             	xor    ax,ax
c001b60c:	09 c3                	or     ebx,eax
c001b60e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b613:	89 c8                	mov    eax,ecx
c001b615:	ef                   	out    dx,eax
c001b616:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b61b:	89 d8                	mov    eax,ebx
c001b61d:	eb 41                	jmp    c001b660 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b61f:	83 f9 02             	cmp    ecx,0x2
c001b622:	75 45                	jne    c001b669 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b624:	83 ec 0c             	sub    esp,0xc
c001b627:	0f b6 d2             	movzx  edx,dl
c001b62a:	89 f1                	mov    ecx,esi
c001b62c:	0f b6 c0             	movzx  eax,al
c001b62f:	0f b6 f1             	movzx  esi,cl
c001b632:	89 e9                	mov    ecx,ebp
c001b634:	56                   	push   esi
c001b635:	0f b6 c9             	movzx  ecx,cl
c001b638:	51                   	push   ecx
c001b639:	52                   	push   edx
c001b63a:	50                   	push   eax
c001b63b:	57                   	push   edi
c001b63c:	e8 a3 fc ff ff       	call   c001b2e4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b641:	89 c2                	mov    edx,eax
c001b643:	ed                   	in     eax,dx
c001b644:	83 c4 20             	add    esp,0x20
c001b647:	0f b7 db             	movzx  ebx,bx
c001b64a:	f6 c2 02             	test   dl,0x2
c001b64d:	74 0c                	je     c001b65b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b64f:	0f b7 c8             	movzx  ecx,ax
c001b652:	89 d8                	mov    eax,ebx
c001b654:	c1 e0 10             	shl    eax,0x10
c001b657:	09 c8                	or     eax,ecx
c001b659:	eb 05                	jmp    c001b660 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b65b:	66 31 c0             	xor    ax,ax
c001b65e:	09 d8                	or     eax,ebx
c001b660:	ef                   	out    dx,eax
c001b661:	83 c4 0c             	add    esp,0xc
c001b664:	5b                   	pop    ebx
c001b665:	5e                   	pop    esi
c001b666:	5f                   	pop    edi
c001b667:	5d                   	pop    ebp
c001b668:	c3                   	ret    
c001b669:	c7 44 24 20 67 31 02 c0 	mov    DWORD PTR [esp+0x20],0xc0023167
c001b671:	83 c4 0c             	add    esp,0xc
c001b674:	5b                   	pop    ebx
c001b675:	5e                   	pop    esi
c001b676:	5f                   	pop    edi
c001b677:	5d                   	pop    ebp
c001b678:	e9 9e 5f ff ff       	jmp    c001161b <KePanic(char const*)>
c001b67d:	90                   	nop

c001b67e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b67e:	55                   	push   ebp
c001b67f:	57                   	push   edi
c001b680:	56                   	push   esi
c001b681:	53                   	push   ebx
c001b682:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b688:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b68f:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b696:	0f 85 bd 00 00 00    	jne    c001b759 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b69c:	83 ec 0c             	sub    esp,0xc
c001b69f:	68 14 01 00 00       	push   0x114
c001b6a4:	e8 0d c4 fe ff       	call   c0007ab6 <malloc>
c001b6a9:	83 c4 0c             	add    esp,0xc
c001b6ac:	89 c3                	mov    ebx,eax
c001b6ae:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b6b4:	68 6d 31 02 c0       	push   0xc002316d
c001b6b9:	50                   	push   eax
c001b6ba:	e8 89 04 ff ff       	call   c000bb48 <File::File(char const*, Process*)>
c001b6bf:	83 c4 10             	add    esp,0x10
c001b6c2:	85 db                	test   ebx,ebx
c001b6c4:	0f 84 67 02 00 00    	je     c001b931 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b6ca:	56                   	push   esi
c001b6cb:	56                   	push   esi
c001b6cc:	6a 01                	push   0x1
c001b6ce:	53                   	push   ebx
c001b6cf:	e8 92 04 ff ff       	call   c000bb66 <File::open(FileOpenMode)>
c001b6d4:	83 c4 10             	add    esp,0x10
c001b6d7:	85 c0                	test   eax,eax
c001b6d9:	0f 85 52 02 00 00    	jne    c001b931 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b6df:	52                   	push   edx
c001b6e0:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b6e4:	50                   	push   eax
c001b6e5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b6e9:	50                   	push   eax
c001b6ea:	53                   	push   ebx
c001b6eb:	e8 78 07 ff ff       	call   c000be68 <File::stat(unsigned long long*, bool*)>
c001b6f0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b6f4:	40                   	inc    eax
c001b6f5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b6f8:	e8 b9 c3 fe ff       	call   c0007ab6 <malloc>
c001b6fd:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b701:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b706:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b70a:	59                   	pop    ecx
c001b70b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b70d:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b711:	51                   	push   ecx
c001b712:	50                   	push   eax
c001b713:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b717:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b71b:	53                   	push   ebx
c001b71c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b71f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b723:	83 c4 20             	add    esp,0x20
c001b726:	89 c8                	mov    eax,ecx
c001b728:	99                   	cdq    
c001b729:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b72d:	0f 85 fe 01 00 00    	jne    c001b931 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b733:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b737:	0f 85 f4 01 00 00    	jne    c001b931 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b73d:	83 ec 0c             	sub    esp,0xc
c001b740:	53                   	push   ebx
c001b741:	e8 7e 04 ff ff       	call   c000bbc4 <File::close()>
c001b746:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b74a:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b751:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b756:	83 c4 10             	add    esp,0x10
c001b759:	a1 a4 d0 02 c0       	mov    eax,ds:0xc002d0a4
c001b75e:	8b 1d a8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0a8
c001b764:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b768:	31 f6                	xor    esi,esi
c001b76a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b772:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b779:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b77e:	31 c9                	xor    ecx,ecx
c001b780:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b788:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b78d:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b795:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b799:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b7a1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b7a5:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b7a9:	0f 8e 82 01 00 00    	jle    c001b931 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b7af:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b7b2:	d4 40                	aam    0x40
c001b7b4:	d5 39                	aad    0x39
c001b7b6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b7ba:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b7be:	d4 40                	aam    0x40
c001b7c0:	d5 39                	aad    0x39
c001b7c2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b7c6:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b7ca:	d4 40                	aam    0x40
c001b7cc:	d5 39                	aad    0x39
c001b7ce:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b7d2:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b7d6:	d4 40                	aam    0x40
c001b7d8:	d5 39                	aad    0x39
c001b7da:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b7de:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b7e2:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b7e6:	3c 56                	cmp    al,0x56
c001b7e8:	74 43                	je     c001b82d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b7ea:	d4 40                	aam    0x40
c001b7ec:	d5 39                	aad    0x39
c001b7ee:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b7f1:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b7f5:	0f b6 c9             	movzx  ecx,cl
c001b7f8:	c1 e1 04             	shl    ecx,0x4
c001b7fb:	d4 40                	aam    0x40
c001b7fd:	d5 39                	aad    0x39
c001b7ff:	83 e8 30             	sub    eax,0x30
c001b802:	0f b6 c0             	movzx  eax,al
c001b805:	09 c1                	or     ecx,eax
c001b807:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b80b:	c1 e1 04             	shl    ecx,0x4
c001b80e:	d4 40                	aam    0x40
c001b810:	d5 39                	aad    0x39
c001b812:	83 e8 30             	sub    eax,0x30
c001b815:	0f b6 c0             	movzx  eax,al
c001b818:	09 c1                	or     ecx,eax
c001b81a:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b81e:	c1 e1 04             	shl    ecx,0x4
c001b821:	d4 40                	aam    0x40
c001b823:	d5 39                	aad    0x39
c001b825:	83 e8 30             	sub    eax,0x30
c001b828:	0f b6 c0             	movzx  eax,al
c001b82b:	09 c1                	or     ecx,eax
c001b82d:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b831:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b835:	3c 58                	cmp    al,0x58
c001b837:	74 47                	je     c001b880 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b839:	d4 40                	aam    0x40
c001b83b:	d5 39                	aad    0x39
c001b83d:	8d 50 d0             	lea    edx,[eax-0x30]
c001b840:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b844:	0f b6 d2             	movzx  edx,dl
c001b847:	c1 e2 04             	shl    edx,0x4
c001b84a:	d4 40                	aam    0x40
c001b84c:	d5 39                	aad    0x39
c001b84e:	83 e8 30             	sub    eax,0x30
c001b851:	0f b6 c0             	movzx  eax,al
c001b854:	09 c2                	or     edx,eax
c001b856:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b85a:	c1 e2 04             	shl    edx,0x4
c001b85d:	d4 40                	aam    0x40
c001b85f:	d5 39                	aad    0x39
c001b861:	83 e8 30             	sub    eax,0x30
c001b864:	0f b6 c0             	movzx  eax,al
c001b867:	09 c2                	or     edx,eax
c001b869:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b86d:	c1 e2 04             	shl    edx,0x4
c001b870:	d4 40                	aam    0x40
c001b872:	d5 39                	aad    0x39
c001b874:	83 e8 30             	sub    eax,0x30
c001b877:	0f b6 c0             	movzx  eax,al
c001b87a:	09 c2                	or     edx,eax
c001b87c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b880:	83 c6 10             	add    esi,0x10
c001b883:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b887:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b88b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b88f:	83 fa 0a             	cmp    edx,0xa
c001b892:	74 0b                	je     c001b89f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b894:	47                   	inc    edi
c001b895:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b899:	75 19                	jne    c001b8b4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b89b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b89f:	31 c0                	xor    eax,eax
c001b8a1:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b8a6:	0f 94 c0             	sete   al
c001b8a9:	01 c6                	add    esi,eax
c001b8ab:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b8b0:	75 0b                	jne    c001b8bd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b8b2:	eb 14                	jmp    c001b8c8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b8b4:	46                   	inc    esi
c001b8b5:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b8b8:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b8bb:	eb ca                	jmp    c001b887 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b8bd:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b8c2:	0f 85 dd fe ff ff    	jne    c001b7a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b8c8:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b8cd:	74 10                	je     c001b8df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b8cf:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b8d4:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b8d9:	0f 85 c6 fe ff ff    	jne    c001b7a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b8df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b8e3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b8e7:	83 e8 30             	sub    eax,0x30
c001b8ea:	83 ef 30             	sub    edi,0x30
c001b8ed:	c1 e0 04             	shl    eax,0x4
c001b8f0:	09 f8                	or     eax,edi
c001b8f2:	0f b6 c0             	movzx  eax,al
c001b8f5:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b8f9:	0f 85 a6 fe ff ff    	jne    c001b7a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b8ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b903:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b907:	83 e8 30             	sub    eax,0x30
c001b90a:	83 ef 30             	sub    edi,0x30
c001b90d:	c1 e0 04             	shl    eax,0x4
c001b910:	09 f8                	or     eax,edi
c001b912:	0f b6 c0             	movzx  eax,al
c001b915:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b919:	0f 85 86 fe ff ff    	jne    c001b7a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b91f:	50                   	push   eax
c001b920:	50                   	push   eax
c001b921:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b925:	50                   	push   eax
c001b926:	55                   	push   ebp
c001b927:	e8 14 4d fe ff       	call   c0000640 <strcpy>
c001b92c:	83 c4 10             	add    esp,0x10
c001b92f:	eb 06                	jmp    c001b937 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b931:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b935:	31 ed                	xor    ebp,ebp
c001b937:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b93d:	89 e8                	mov    eax,ebp
c001b93f:	5b                   	pop    ebx
c001b940:	5e                   	pop    esi
c001b941:	5f                   	pop    edi
c001b942:	5d                   	pop    ebp
c001b943:	c3                   	ret    

c001b944 <PCI::checkBus(unsigned char)>:
c001b944:	56                   	push   esi
c001b945:	53                   	push   ebx
c001b946:	31 db                	xor    ebx,ebx
c001b948:	51                   	push   ecx
c001b949:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b94e:	52                   	push   edx
c001b94f:	53                   	push   ebx
c001b950:	43                   	inc    ebx
c001b951:	56                   	push   esi
c001b952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b956:	e8 03 03 00 00       	call   c001bc5e <PCI::checkDevice(unsigned char, unsigned char)>
c001b95b:	83 c4 10             	add    esp,0x10
c001b95e:	83 fb 20             	cmp    ebx,0x20
c001b961:	75 eb                	jne    c001b94e <PCI::checkBus(unsigned char)+0xa>
c001b963:	58                   	pop    eax
c001b964:	5b                   	pop    ebx
c001b965:	5e                   	pop    esi
c001b966:	c3                   	ret    
c001b967:	90                   	nop

c001b968 <PCI::foundDevice(PCIDeviceInfo)>:
c001b968:	55                   	push   ebp
c001b969:	57                   	push   edi
c001b96a:	56                   	push   esi
c001b96b:	53                   	push   ebx
c001b96c:	83 ec 1c             	sub    esp,0x1c
c001b96f:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b974:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b978:	3d ff ff 00 00       	cmp    eax,0xffff
c001b97d:	0f 84 57 01 00 00    	je     c001bada <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b983:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b988:	66 3d 06 04          	cmp    ax,0x406
c001b98c:	75 2c                	jne    c001b9ba <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b98e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b993:	50                   	push   eax
c001b994:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b999:	50                   	push   eax
c001b99a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b99f:	50                   	push   eax
c001b9a0:	53                   	push   ebx
c001b9a1:	e8 64 fb ff ff       	call   c001b50a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b9a6:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b9aa:	0f b6 c0             	movzx  eax,al
c001b9ad:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b9b1:	83 c4 2c             	add    esp,0x2c
c001b9b4:	5b                   	pop    ebx
c001b9b5:	5e                   	pop    esi
c001b9b6:	5f                   	pop    edi
c001b9b7:	5d                   	pop    ebp
c001b9b8:	eb 8a                	jmp    c001b944 <PCI::checkBus(unsigned char)>
c001b9ba:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b9be:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b9c4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b9c8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b9cc:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001b9d1:	85 d2                	test   edx,edx
c001b9d3:	74 36                	je     c001ba0b <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001b9d5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b9d8:	85 c9                	test   ecx,ecx
c001b9da:	74 2b                	je     c001ba07 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b9dc:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001b9e2:	31 ee                	xor    esi,ebp
c001b9e4:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001b9ea:	75 1b                	jne    c001ba07 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b9ec:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001b9f0:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001b9f6:	75 0f                	jne    c001ba07 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b9f8:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b9ff:	39 f9                	cmp    ecx,edi
c001ba01:	0f 84 d3 00 00 00    	je     c001bada <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001ba07:	8b 12                	mov    edx,DWORD PTR [edx]
c001ba09:	eb c6                	jmp    c001b9d1 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001ba0b:	3d 01 06 00 00       	cmp    eax,0x601
c001ba10:	75 19                	jne    c001ba2b <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001ba12:	83 ec 0c             	sub    esp,0xc
c001ba15:	68 64 01 00 00       	push   0x164
c001ba1a:	e8 97 c0 fe ff       	call   c0007ab6 <malloc>
c001ba1f:	89 c5                	mov    ebp,eax
c001ba21:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba24:	e8 a1 0e 00 00       	call   c001c8ca <SATABus::SATABus()>
c001ba29:	eb 1e                	jmp    c001ba49 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001ba2b:	3d 01 01 00 00       	cmp    eax,0x101
c001ba30:	75 62                	jne    c001ba94 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001ba32:	83 ec 0c             	sub    esp,0xc
c001ba35:	68 70 02 00 00       	push   0x270
c001ba3a:	e8 77 c0 fe ff       	call   c0007ab6 <malloc>
c001ba3f:	89 c5                	mov    ebp,eax
c001ba41:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba44:	e8 e5 02 00 00       	call   c001bd2e <IDE::IDE()>
c001ba49:	5f                   	pop    edi
c001ba4a:	58                   	pop    eax
c001ba4b:	55                   	push   ebp
c001ba4c:	53                   	push   ebx
c001ba4d:	e8 70 0f ff ff       	call   c000c9c2 <Device::addChild(Device*)>
c001ba52:	83 ec 1c             	sub    esp,0x1c
c001ba55:	b9 09 00 00 00       	mov    ecx,0x9
c001ba5a:	fc                   	cld    
c001ba5b:	89 e7                	mov    edi,esp
c001ba5d:	8d 74 24 60          	lea    esi,[esp+0x60]
c001ba61:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ba63:	55                   	push   ebp
c001ba64:	e8 9f 0e ff ff       	call   c000c908 <Device::preOpenPCI(PCIDeviceInfo)>
c001ba69:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ba6c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001ba70:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001ba78:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001ba80:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001ba88:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001ba8b:	83 c4 4c             	add    esp,0x4c
c001ba8e:	5b                   	pop    ebx
c001ba8f:	5e                   	pop    esi
c001ba90:	5f                   	pop    edi
c001ba91:	5d                   	pop    ebp
c001ba92:	ff e0                	jmp    eax
c001ba94:	83 ec 0c             	sub    esp,0xc
c001ba97:	68 58 01 00 00       	push   0x158
c001ba9c:	e8 15 c0 fe ff       	call   c0007ab6 <malloc>
c001baa1:	89 c5                	mov    ebp,eax
c001baa3:	58                   	pop    eax
c001baa4:	5a                   	pop    edx
c001baa5:	68 86 31 02 c0       	push   0xc0023186
c001baaa:	55                   	push   ebp
c001baab:	e8 b0 11 ff ff       	call   c000cc60 <DriverlessDevice::DriverlessDevice(char const*)>
c001bab0:	59                   	pop    ecx
c001bab1:	5e                   	pop    esi
c001bab2:	55                   	push   ebp
c001bab3:	53                   	push   ebx
c001bab4:	e8 09 0f ff ff       	call   c000c9c2 <Device::addChild(Device*)>
c001bab9:	83 c4 10             	add    esp,0x10
c001babc:	b9 09 00 00 00       	mov    ecx,0x9
c001bac1:	fc                   	cld    
c001bac2:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001bac6:	89 fe                	mov    esi,edi
c001bac8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001baca:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001bace:	83 c4 1c             	add    esp,0x1c
c001bad1:	5b                   	pop    ebx
c001bad2:	5e                   	pop    esi
c001bad3:	5f                   	pop    edi
c001bad4:	5d                   	pop    ebp
c001bad5:	e9 2e 0e ff ff       	jmp    c000c908 <Device::preOpenPCI(PCIDeviceInfo)>
c001bada:	83 c4 1c             	add    esp,0x1c
c001badd:	5b                   	pop    ebx
c001bade:	5e                   	pop    esi
c001badf:	5f                   	pop    edi
c001bae0:	5d                   	pop    ebp
c001bae1:	c3                   	ret    

c001bae2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001bae2:	55                   	push   ebp
c001bae3:	57                   	push   edi
c001bae4:	56                   	push   esi
c001bae5:	53                   	push   ebx
c001bae6:	83 ec 68             	sub    esp,0x68
c001bae9:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001baed:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001baf4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001baf8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001baff:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bb04:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bb08:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001bb0f:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001bb14:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bb18:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001bb1d:	6a 0c                	push   0xc
c001bb1f:	57                   	push   edi
c001bb20:	53                   	push   ebx
c001bb21:	56                   	push   esi
c001bb22:	55                   	push   ebp
c001bb23:	e8 32 f8 ff ff       	call   c001b35a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb28:	83 c4 20             	add    esp,0x20
c001bb2b:	57                   	push   edi
c001bb2c:	53                   	push   ebx
c001bb2d:	56                   	push   esi
c001bb2e:	55                   	push   ebp
c001bb2f:	e8 1c f9 ff ff       	call   c001b450 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bb34:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bb39:	57                   	push   edi
c001bb3a:	53                   	push   ebx
c001bb3b:	56                   	push   esi
c001bb3c:	55                   	push   ebp
c001bb3d:	e8 a4 f9 ff ff       	call   c001b4e6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bb42:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bb46:	83 c4 14             	add    esp,0x14
c001bb49:	6a 3c                	push   0x3c
c001bb4b:	57                   	push   edi
c001bb4c:	53                   	push   ebx
c001bb4d:	56                   	push   esi
c001bb4e:	55                   	push   ebp
c001bb4f:	e8 06 f8 ff ff       	call   c001b35a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb54:	0f b6 c4             	movzx  eax,ah
c001bb57:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bb5b:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bb5f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bb63:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bb68:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bb6e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bb74:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bb78:	83 c4 20             	add    esp,0x20
c001bb7b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bb80:	74 30                	je     c001bbb2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bb82:	31 c0                	xor    eax,eax
c001bb84:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bb88:	7e 28                	jle    c001bbb2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bb8a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bb92:	39 cb                	cmp    ebx,ecx
c001bb94:	75 19                	jne    c001bbaf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bb96:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bb9e:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bba2:	75 0b                	jne    c001bbaf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bba4:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bbab:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bbaf:	40                   	inc    eax
c001bbb0:	eb d2                	jmp    c001bb84 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bbb2:	31 d2                	xor    edx,edx
c001bbb4:	83 ec 0c             	sub    esp,0xc
c001bbb7:	57                   	push   edi
c001bbb8:	53                   	push   ebx
c001bbb9:	56                   	push   esi
c001bbba:	52                   	push   edx
c001bbbb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bbbf:	55                   	push   ebp
c001bbc0:	e8 6d f9 ff ff       	call   c001b532 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbc5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bbc9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bbcd:	42                   	inc    edx
c001bbce:	83 c4 20             	add    esp,0x20
c001bbd1:	83 fa 06             	cmp    edx,0x6
c001bbd4:	75 de                	jne    c001bbb4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bbd6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bbda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbde:	c1 e2 08             	shl    edx,0x8
c001bbe1:	83 ec 0c             	sub    esp,0xc
c001bbe4:	0f b6 c4             	movzx  eax,ah
c001bbe7:	09 d0                	or     eax,edx
c001bbe9:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bbee:	6a 02                	push   0x2
c001bbf0:	57                   	push   edi
c001bbf1:	53                   	push   ebx
c001bbf2:	56                   	push   esi
c001bbf3:	55                   	push   ebp
c001bbf4:	e8 61 f7 ff ff       	call   c001b35a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbf9:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bbfe:	83 c4 20             	add    esp,0x20
c001bc01:	57                   	push   edi
c001bc02:	53                   	push   ebx
c001bc03:	56                   	push   esi
c001bc04:	55                   	push   ebp
c001bc05:	e8 90 f8 ff ff       	call   c001b49a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bc0a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bc0e:	57                   	push   edi
c001bc0f:	53                   	push   ebx
c001bc10:	56                   	push   esi
c001bc11:	55                   	push   ebp
c001bc12:	e8 ed f7 ff ff       	call   c001b404 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc17:	b9 09 00 00 00       	mov    ecx,0x9
c001bc1c:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bc21:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bc25:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bc29:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bc2d:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bc31:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bc35:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bc39:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bc3d:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bc41:	83 ec 0c             	sub    esp,0xc
c001bc44:	fc                   	cld    
c001bc45:	89 e7                	mov    edi,esp
c001bc47:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bc4b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bc4d:	55                   	push   ebp
c001bc4e:	e8 15 fd ff ff       	call   c001b968 <PCI::foundDevice(PCIDeviceInfo)>
c001bc53:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bc59:	5b                   	pop    ebx
c001bc5a:	5e                   	pop    esi
c001bc5b:	5f                   	pop    edi
c001bc5c:	5d                   	pop    ebp
c001bc5d:	c3                   	ret    

c001bc5e <PCI::checkDevice(unsigned char, unsigned char)>:
c001bc5e:	55                   	push   ebp
c001bc5f:	57                   	push   edi
c001bc60:	56                   	push   esi
c001bc61:	53                   	push   ebx
c001bc62:	83 ec 0c             	sub    esp,0xc
c001bc65:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bc69:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bc6e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bc73:	6a 00                	push   0x0
c001bc75:	56                   	push   esi
c001bc76:	57                   	push   edi
c001bc77:	55                   	push   ebp
c001bc78:	e8 87 f7 ff ff       	call   c001b404 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc7d:	6a 00                	push   0x0
c001bc7f:	56                   	push   esi
c001bc80:	57                   	push   edi
c001bc81:	55                   	push   ebp
c001bc82:	e8 5b fe ff ff       	call   c001bae2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bc87:	83 c4 20             	add    esp,0x20
c001bc8a:	6a 00                	push   0x0
c001bc8c:	56                   	push   esi
c001bc8d:	57                   	push   edi
c001bc8e:	55                   	push   ebp
c001bc8f:	e8 94 f7 ff ff       	call   c001b428 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bc94:	83 c4 10             	add    esp,0x10
c001bc97:	a8 80                	test   al,0x80
c001bc99:	74 2d                	je     c001bcc8 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bc9b:	bb 01 00 00 00       	mov    ebx,0x1
c001bca0:	53                   	push   ebx
c001bca1:	56                   	push   esi
c001bca2:	57                   	push   edi
c001bca3:	55                   	push   ebp
c001bca4:	e8 5b f7 ff ff       	call   c001b404 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bca9:	83 c4 10             	add    esp,0x10
c001bcac:	0f b7 c0             	movzx  eax,ax
c001bcaf:	3d ff ff 00 00       	cmp    eax,0xffff
c001bcb4:	74 0c                	je     c001bcc2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bcb6:	53                   	push   ebx
c001bcb7:	56                   	push   esi
c001bcb8:	57                   	push   edi
c001bcb9:	55                   	push   ebp
c001bcba:	e8 23 fe ff ff       	call   c001bae2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bcbf:	83 c4 10             	add    esp,0x10
c001bcc2:	43                   	inc    ebx
c001bcc3:	83 fb 08             	cmp    ebx,0x8
c001bcc6:	75 d8                	jne    c001bca0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bcc8:	83 c4 0c             	add    esp,0xc
c001bccb:	5b                   	pop    ebx
c001bccc:	5e                   	pop    esi
c001bccd:	5f                   	pop    edi
c001bcce:	5d                   	pop    ebp
c001bccf:	c3                   	ret    

c001bcd0 <PCI::detect()>:
c001bcd0:	56                   	push   esi
c001bcd1:	53                   	push   ebx
c001bcd2:	53                   	push   ebx
c001bcd3:	31 db                	xor    ebx,ebx
c001bcd5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bcd9:	6a 00                	push   0x0
c001bcdb:	6a 00                	push   0x0
c001bcdd:	6a 00                	push   0x0
c001bcdf:	56                   	push   esi
c001bce0:	e8 43 f7 ff ff       	call   c001b428 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bce5:	83 c4 10             	add    esp,0x10
c001bce8:	a8 80                	test   al,0x80
c001bcea:	75 21                	jne    c001bd0d <PCI::detect()+0x3d>
c001bcec:	51                   	push   ecx
c001bced:	51                   	push   ecx
c001bcee:	6a 00                	push   0x0
c001bcf0:	56                   	push   esi
c001bcf1:	e8 4e fc ff ff       	call   c001b944 <PCI::checkBus(unsigned char)>
c001bcf6:	83 c4 10             	add    esp,0x10
c001bcf9:	eb 2a                	jmp    c001bd25 <PCI::detect()+0x55>
c001bcfb:	52                   	push   edx
c001bcfc:	52                   	push   edx
c001bcfd:	53                   	push   ebx
c001bcfe:	43                   	inc    ebx
c001bcff:	56                   	push   esi
c001bd00:	e8 3f fc ff ff       	call   c001b944 <PCI::checkBus(unsigned char)>
c001bd05:	83 c4 10             	add    esp,0x10
c001bd08:	83 fb 08             	cmp    ebx,0x8
c001bd0b:	74 18                	je     c001bd25 <PCI::detect()+0x55>
c001bd0d:	53                   	push   ebx
c001bd0e:	6a 00                	push   0x0
c001bd10:	6a 00                	push   0x0
c001bd12:	56                   	push   esi
c001bd13:	e8 ec f6 ff ff       	call   c001b404 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd18:	83 c4 10             	add    esp,0x10
c001bd1b:	0f b7 c0             	movzx  eax,ax
c001bd1e:	3d ff ff 00 00       	cmp    eax,0xffff
c001bd23:	74 d6                	je     c001bcfb <PCI::detect()+0x2b>
c001bd25:	58                   	pop    eax
c001bd26:	5b                   	pop    ebx
c001bd27:	5e                   	pop    esi
c001bd28:	c3                   	ret    
c001bd29:	90                   	nop

c001bd2a <IDE::close(int, int, void*)>:
c001bd2a:	83 c8 ff             	or     eax,0xffffffff
c001bd2d:	c3                   	ret    

c001bd2e <IDE::IDE()>:
c001bd2e:	83 ec 0c             	sub    esp,0xc
c001bd31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd35:	83 ec 08             	sub    esp,0x8
c001bd38:	68 cc 31 02 c0       	push   0xc00231cc
c001bd3d:	50                   	push   eax
c001bd3e:	e8 c1 0f ff ff       	call   c000cd04 <HardDiskController::HardDiskController(char const*)>
c001bd43:	83 c4 10             	add    esp,0x10
c001bd46:	ba 5c 32 02 c0       	mov    edx,0xc002325c
c001bd4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd4f:	89 10                	mov    DWORD PTR [eax],edx
c001bd51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd55:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bd5c:	90                   	nop
c001bd5d:	83 c4 0c             	add    esp,0xc
c001bd60:	c3                   	ret    
c001bd61:	90                   	nop

c001bd62 <IDE::prepareInterrupt(unsigned char)>:
c001bd62:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd67:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bd6b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bd73:	c3                   	ret    

c001bd74 <selectDrive(unsigned char, unsigned char)>:
c001bd74:	c3                   	ret    
c001bd75:	90                   	nop

c001bd76 <IDE::getBase(unsigned char)>:
c001bd76:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bd7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd7f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bd87:	c3                   	ret    

c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bd88:	55                   	push   ebp
c001bd89:	57                   	push   edi
c001bd8a:	56                   	push   esi
c001bd8b:	53                   	push   ebx
c001bd8c:	83 ec 1c             	sub    esp,0x1c
c001bd8f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bd93:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bd97:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bd9a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bd9e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bda2:	80 f9 03             	cmp    cl,0x3
c001bda5:	77 4f                	ja     c001bdf6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001bda7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bdab:	0f b6 fa             	movzx  edi,dl
c001bdae:	0f b6 db             	movzx  ebx,bl
c001bdb1:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bdb4:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001bdb9:	80 ca 80             	or     dl,0x80
c001bdbc:	52                   	push   edx
c001bdbd:	6a 0c                	push   0xc
c001bdbf:	57                   	push   edi
c001bdc0:	56                   	push   esi
c001bdc1:	e8 c2 ff ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdc6:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001bdcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bdcf:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bdd3:	ee                   	out    dx,al
c001bdd4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bdd9:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001bddd:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bde1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bde5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bded:	83 c4 2c             	add    esp,0x2c
c001bdf0:	5b                   	pop    ebx
c001bdf1:	5e                   	pop    esi
c001bdf2:	5f                   	pop    edi
c001bdf3:	5d                   	pop    ebp
c001bdf4:	eb 92                	jmp    c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdf6:	0f b6 cb             	movzx  ecx,bl
c001bdf9:	83 f9 07             	cmp    ecx,0x7
c001bdfc:	77 12                	ja     c001be10 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001bdfe:	0f b6 d2             	movzx  edx,dl
c001be01:	0f b6 db             	movzx  ebx,bl
c001be04:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001be0c:	01 da                	add    edx,ebx
c001be0e:	eb 2f                	jmp    c001be3f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001be10:	83 f9 0d             	cmp    ecx,0xd
c001be13:	77 13                	ja     c001be28 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001be15:	0f b6 d2             	movzx  edx,dl
c001be18:	0f b6 db             	movzx  ebx,bl
c001be1b:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001be22:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001be26:	eb 17                	jmp    c001be3f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001be28:	83 f9 15             	cmp    ecx,0x15
c001be2b:	77 13                	ja     c001be40 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001be2d:	0f b6 d2             	movzx  edx,dl
c001be30:	0f b6 db             	movzx  ebx,bl
c001be33:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001be3b:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001be3f:	ee                   	out    dx,al
c001be40:	83 c4 1c             	add    esp,0x1c
c001be43:	5b                   	pop    ebx
c001be44:	5e                   	pop    esi
c001be45:	5f                   	pop    edi
c001be46:	5d                   	pop    ebp
c001be47:	c3                   	ret    

c001be48 <IDE::read(unsigned char, unsigned char)>:
c001be48:	55                   	push   ebp
c001be49:	57                   	push   edi
c001be4a:	56                   	push   esi
c001be4b:	53                   	push   ebx
c001be4c:	83 ec 1c             	sub    esp,0x1c
c001be4f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001be53:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be57:	8d 43 f8             	lea    eax,[ebx-0x8]
c001be5a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001be5e:	3c 03                	cmp    al,0x3
c001be60:	77 40                	ja     c001bea2 <IDE::read(unsigned char, unsigned char)+0x5a>
c001be62:	0f b6 f9             	movzx  edi,cl
c001be65:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001be68:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be6d:	0c 80                	or     al,0x80
c001be6f:	50                   	push   eax
c001be70:	6a 0c                	push   0xc
c001be72:	57                   	push   edi
c001be73:	56                   	push   esi
c001be74:	e8 0f ff ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be79:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001be7e:	0f b6 d3             	movzx  edx,bl
c001be81:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001be85:	ec                   	in     al,dx
c001be86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001be8a:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001be8f:	52                   	push   edx
c001be90:	6a 0c                	push   0xc
c001be92:	57                   	push   edi
c001be93:	56                   	push   esi
c001be94:	e8 ef fe ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be99:	83 c4 20             	add    esp,0x20
c001be9c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bea0:	eb 4c                	jmp    c001beee <IDE::read(unsigned char, unsigned char)+0xa6>
c001bea2:	0f b6 d3             	movzx  edx,bl
c001bea5:	83 fa 07             	cmp    edx,0x7
c001bea8:	77 12                	ja     c001bebc <IDE::read(unsigned char, unsigned char)+0x74>
c001beaa:	0f b6 c9             	movzx  ecx,cl
c001bead:	0f b6 d3             	movzx  edx,bl
c001beb0:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001beb8:	01 c2                	add    edx,eax
c001beba:	eb 31                	jmp    c001beed <IDE::read(unsigned char, unsigned char)+0xa5>
c001bebc:	83 fa 0d             	cmp    edx,0xd
c001bebf:	77 13                	ja     c001bed4 <IDE::read(unsigned char, unsigned char)+0x8c>
c001bec1:	0f b6 c9             	movzx  ecx,cl
c001bec4:	0f b6 d3             	movzx  edx,bl
c001bec7:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001bece:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bed2:	eb 19                	jmp    c001beed <IDE::read(unsigned char, unsigned char)+0xa5>
c001bed4:	31 c0                	xor    eax,eax
c001bed6:	83 fa 15             	cmp    edx,0x15
c001bed9:	77 13                	ja     c001beee <IDE::read(unsigned char, unsigned char)+0xa6>
c001bedb:	0f b6 c9             	movzx  ecx,cl
c001bede:	0f b6 d3             	movzx  edx,bl
c001bee1:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001bee9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001beed:	ec                   	in     al,dx
c001beee:	83 c4 1c             	add    esp,0x1c
c001bef1:	5b                   	pop    ebx
c001bef2:	5e                   	pop    esi
c001bef3:	5f                   	pop    edi
c001bef4:	5d                   	pop    ebp
c001bef5:	c3                   	ret    

c001bef6 <IDE::waitInterrupt(unsigned char)>:
c001bef6:	55                   	push   ebp
c001bef7:	57                   	push   edi
c001bef8:	56                   	push   esi
c001bef9:	53                   	push   ebx
c001befa:	31 db                	xor    ebx,ebx
c001befc:	83 ec 0c             	sub    esp,0xc
c001beff:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bf03:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bf08:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bf10:	89 e8                	mov    eax,ebp
c001bf12:	84 c0                	test   al,al
c001bf14:	75 30                	jne    c001bf46 <IDE::waitInterrupt(unsigned char)+0x50>
c001bf16:	50                   	push   eax
c001bf17:	6a 0c                	push   0xc
c001bf19:	56                   	push   esi
c001bf1a:	57                   	push   edi
c001bf1b:	e8 28 ff ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001bf20:	83 c4 10             	add    esp,0x10
c001bf23:	a8 01                	test   al,0x1
c001bf25:	75 27                	jne    c001bf4e <IDE::waitInterrupt(unsigned char)+0x58>
c001bf27:	f6 c3 04             	test   bl,0x4
c001bf2a:	75 12                	jne    c001bf3e <IDE::waitInterrupt(unsigned char)+0x48>
c001bf2c:	83 fb 32             	cmp    ebx,0x32
c001bf2f:	7e 0d                	jle    c001bf3e <IDE::waitInterrupt(unsigned char)+0x48>
c001bf31:	83 ec 0c             	sub    esp,0xc
c001bf34:	6a 64                	push   0x64
c001bf36:	e8 b1 a4 ff ff       	call   c00163ec <milliTenthSleep(unsigned int)>
c001bf3b:	83 c4 10             	add    esp,0x10
c001bf3e:	83 fb 3c             	cmp    ebx,0x3c
c001bf41:	74 0b                	je     c001bf4e <IDE::waitInterrupt(unsigned char)+0x58>
c001bf43:	43                   	inc    ebx
c001bf44:	eb c2                	jmp    c001bf08 <IDE::waitInterrupt(unsigned char)+0x12>
c001bf46:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bf4e:	83 c4 0c             	add    esp,0xc
c001bf51:	89 e8                	mov    eax,ebp
c001bf53:	5b                   	pop    ebx
c001bf54:	5e                   	pop    esi
c001bf55:	5f                   	pop    edi
c001bf56:	5d                   	pop    ebp
c001bf57:	c3                   	ret    

c001bf58 <ideChannel0IRQHandler(regs*, void*)>:
c001bf58:	83 ec 10             	sub    esp,0x10
c001bf5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf5f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bf66:	6a 07                	push   0x7
c001bf68:	6a 00                	push   0x0
c001bf6a:	50                   	push   eax
c001bf6b:	e8 d8 fe ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001bf70:	83 c4 1c             	add    esp,0x1c
c001bf73:	c3                   	ret    

c001bf74 <ideChannel1IRQHandler(regs*, void*)>:
c001bf74:	83 ec 10             	sub    esp,0x10
c001bf77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf7b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bf82:	6a 07                	push   0x7
c001bf84:	6a 01                	push   0x1
c001bf86:	50                   	push   eax
c001bf87:	e8 bc fe ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001bf8c:	83 c4 1c             	add    esp,0x1c
c001bf8f:	c3                   	ret    

c001bf90 <IDE::enableIRQs(unsigned char, bool)>:
c001bf90:	57                   	push   edi
c001bf91:	b8 02 00 00 00       	mov    eax,0x2
c001bf96:	56                   	push   esi
c001bf97:	53                   	push   ebx
c001bf98:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf9c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bfa0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bfa5:	74 02                	je     c001bfa9 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bfa7:	31 c0                	xor    eax,eax
c001bfa9:	0f b6 db             	movzx  ebx,bl
c001bfac:	bf 04 00 00 00       	mov    edi,0x4
c001bfb1:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bfb8:	50                   	push   eax
c001bfb9:	6a 0c                	push   0xc
c001bfbb:	53                   	push   ebx
c001bfbc:	56                   	push   esi
c001bfbd:	e8 c6 fd ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfc2:	83 c4 10             	add    esp,0x10
c001bfc5:	50                   	push   eax
c001bfc6:	6a 0c                	push   0xc
c001bfc8:	53                   	push   ebx
c001bfc9:	56                   	push   esi
c001bfca:	e8 79 fe ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001bfcf:	83 c4 10             	add    esp,0x10
c001bfd2:	4f                   	dec    edi
c001bfd3:	75 f0                	jne    c001bfc5 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bfd5:	5b                   	pop    ebx
c001bfd6:	5e                   	pop    esi
c001bfd7:	5f                   	pop    edi
c001bfd8:	c3                   	ret    
c001bfd9:	90                   	nop

c001bfda <IDE::open(int, int, void*)>:
c001bfda:	55                   	push   ebp
c001bfdb:	57                   	push   edi
c001bfdc:	56                   	push   esi
c001bfdd:	53                   	push   ebx
c001bfde:	83 ec 1c             	sub    esp,0x1c
c001bfe1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bfe5:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bfee:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bff7:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bffe:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c005:	0f 85 de 02 00 00    	jne    c001c2e9 <IDE::open(int, int, void*)+0x30f>
c001c00b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c011:	88 04 24             	mov    BYTE PTR [esp],al
c001c014:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c017:	83 e0 7f             	and    eax,0x7f
c001c01a:	83 f8 05             	cmp    eax,0x5
c001c01d:	74 05                	je     c001c024 <IDE::open(int, int, void*)+0x4a>
c001c01f:	83 f8 0f             	cmp    eax,0xf
c001c022:	75 32                	jne    c001c056 <IDE::open(int, int, void*)+0x7c>
c001c024:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c02a:	83 e0 fc             	and    eax,0xfffffffc
c001c02d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c034:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c03a:	83 e0 fc             	and    eax,0xfffffffc
c001c03d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c044:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c04a:	83 e0 fc             	and    eax,0xfffffffc
c001c04d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c054:	eb 14                	jmp    c001c06a <IDE::open(int, int, void*)+0x90>
c001c056:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c060:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c06a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001c071:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c078:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c07c:	89 c6                	mov    esi,eax
c001c07e:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c083:	c1 e6 10             	shl    esi,0x10
c001c086:	89 e8                	mov    eax,ebp
c001c088:	89 fa                	mov    edx,edi
c001c08a:	c1 e0 0b             	shl    eax,0xb
c001c08d:	09 f0                	or     eax,esi
c001c08f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001c096:	c1 e6 08             	shl    esi,0x8
c001c099:	09 c6                	or     esi,eax
c001c09b:	89 f0                	mov    eax,esi
c001c09d:	0d 08 00 00 80       	or     eax,0x80000008
c001c0a2:	ef                   	out    dx,eax
c001c0a3:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001c0a8:	89 ca                	mov    edx,ecx
c001c0aa:	ed                   	in     eax,dx
c001c0ab:	c1 e8 10             	shr    eax,0x10
c001c0ae:	3d ff ff 00 00       	cmp    eax,0xffff
c001c0b3:	0f 84 f9 00 00 00    	je     c001c1b2 <IDE::open(int, int, void*)+0x1d8>
c001c0b9:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001c0bf:	89 fa                	mov    edx,edi
c001c0c1:	89 f0                	mov    eax,esi
c001c0c3:	ef                   	out    dx,eax
c001c0c4:	b0 fe                	mov    al,0xfe
c001c0c6:	89 ca                	mov    edx,ecx
c001c0c8:	ee                   	out    dx,al
c001c0c9:	89 f0                	mov    eax,esi
c001c0cb:	89 fa                	mov    edx,edi
c001c0cd:	ef                   	out    dx,eax
c001c0ce:	89 ca                	mov    edx,ecx
c001c0d0:	ed                   	in     eax,dx
c001c0d1:	3c fe                	cmp    al,0xfe
c001c0d3:	0f 85 a9 00 00 00    	jne    c001c182 <IDE::open(int, int, void*)+0x1a8>
c001c0d9:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c0df:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c0e6:	74 33                	je     c001c11b <IDE::open(int, int, void*)+0x141>
c001c0e8:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c0ee:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c0f2:	40                   	inc    eax
c001c0f3:	83 ec 0c             	sub    esp,0xc
c001c0f6:	0f b6 c0             	movzx  eax,al
c001c0f9:	50                   	push   eax
c001c0fa:	55                   	push   ebp
c001c0fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c0ff:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c105:	51                   	push   ecx
c001c106:	e8 29 38 ff ff       	call   c000f934 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c10b:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c110:	83 c4 1c             	add    esp,0x1c
c001c113:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c119:	eb 0a                	jmp    c001c125 <IDE::open(int, int, void*)+0x14b>
c001c11b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c125:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c12c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c133:	c1 e1 10             	shl    ecx,0x10
c001c136:	c1 e0 08             	shl    eax,0x8
c001c139:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c13e:	09 c1                	or     ecx,eax
c001c140:	89 fa                	mov    edx,edi
c001c142:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c149:	c1 e0 0b             	shl    eax,0xb
c001c14c:	09 c1                	or     ecx,eax
c001c14e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c154:	89 c8                	mov    eax,ecx
c001c156:	ef                   	out    dx,eax
c001c157:	be fc 0c 00 00       	mov    esi,0xcfc
c001c15c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001c162:	89 f2                	mov    edx,esi
c001c164:	ee                   	out    dx,al
c001c165:	89 c8                	mov    eax,ecx
c001c167:	89 fa                	mov    edx,edi
c001c169:	ef                   	out    dx,eax
c001c16a:	89 f2                	mov    edx,esi
c001c16c:	ed                   	in     eax,dx
c001c16d:	0f b6 c0             	movzx  eax,al
c001c170:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c176:	74 4a                	je     c001c1c2 <IDE::open(int, int, void*)+0x1e8>
c001c178:	83 ec 0c             	sub    esp,0xc
c001c17b:	68 e4 31 02 c0       	push   0xc00231e4
c001c180:	eb 38                	jmp    c001c1ba <IDE::open(int, int, void*)+0x1e0>
c001c182:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c18b:	75 1b                	jne    c001c1a8 <IDE::open(int, int, void*)+0x1ce>
c001c18d:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001c191:	3d 80 00 00 00       	cmp    eax,0x80
c001c196:	74 07                	je     c001c19f <IDE::open(int, int, void*)+0x1c5>
c001c198:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c19d:	75 09                	jne    c001c1a8 <IDE::open(int, int, void*)+0x1ce>
c001c19f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c1a6:	eb 1a                	jmp    c001c1c2 <IDE::open(int, int, void*)+0x1e8>
c001c1a8:	83 ec 0c             	sub    esp,0xc
c001c1ab:	68 ec 31 02 c0       	push   0xc00231ec
c001c1b0:	eb 08                	jmp    c001c1ba <IDE::open(int, int, void*)+0x1e0>
c001c1b2:	83 ec 0c             	sub    esp,0xc
c001c1b5:	68 1d 32 02 c0       	push   0xc002321d
c001c1ba:	e8 5c 54 ff ff       	call   c001161b <KePanic(char const*)>
c001c1bf:	83 c4 10             	add    esp,0x10
c001c1c2:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c1c9:	74 1a                	je     c001c1e5 <IDE::open(int, int, void*)+0x20b>
c001c1cb:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c1d1:	83 e0 fc             	and    eax,0xfffffffc
c001c1d4:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c1db:	83 c0 08             	add    eax,0x8
c001c1de:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c1e5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c1eb:	89 c2                	mov    edx,eax
c001c1ed:	83 e2 0f             	and    edx,0xf
c001c1f0:	83 fa 08             	cmp    edx,0x8
c001c1f3:	75 0a                	jne    c001c1ff <IDE::open(int, int, void*)+0x225>
c001c1f5:	83 e8 02             	sub    eax,0x2
c001c1f8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c1ff:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c205:	89 c2                	mov    edx,eax
c001c207:	83 e2 0f             	and    edx,0xf
c001c20a:	83 fa 08             	cmp    edx,0x8
c001c20d:	75 0a                	jne    c001c219 <IDE::open(int, int, void*)+0x23f>
c001c20f:	83 e8 02             	sub    eax,0x2
c001c212:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c219:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c220:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c227:	89 d0                	mov    eax,edx
c001c229:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c22c:	8d 7a 01             	lea    edi,[edx+0x1]
c001c22f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c233:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c237:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c23b:	83 e1 3f             	and    ecx,0x3f
c001c23e:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c242:	89 f9                	mov    ecx,edi
c001c244:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c24b:	0f b6 c9             	movzx  ecx,cl
c001c24e:	8d 78 02             	lea    edi,[eax+0x2]
c001c251:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c254:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c258:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c25c:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c260:	83 e2 3f             	and    edx,0x3f
c001c263:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c267:	89 f9                	mov    ecx,edi
c001c269:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c26f:	0f b6 d1             	movzx  edx,cl
c001c272:	8d 78 03             	lea    edi,[eax+0x3]
c001c275:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c278:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c27c:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c280:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c284:	83 e1 3f             	and    ecx,0x3f
c001c287:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c28b:	89 f9                	mov    ecx,edi
c001c28d:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c293:	0f b6 c9             	movzx  ecx,cl
c001c296:	8d 78 04             	lea    edi,[eax+0x4]
c001c299:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c29c:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c2a0:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c2a4:	89 fa                	mov    edx,edi
c001c2a6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c2ac:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c2b0:	83 e2 3f             	and    edx,0x3f
c001c2b3:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c2b7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c2be:	66 85 f6             	test   si,si
c001c2c1:	74 65                	je     c001c328 <IDE::open(int, int, void*)+0x34e>
c001c2c3:	89 f9                	mov    ecx,edi
c001c2c5:	83 c0 05             	add    eax,0x5
c001c2c8:	0f b6 d1             	movzx  edx,cl
c001c2cb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c2ce:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c2d2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c2d6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c2dc:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c2e0:	83 e0 3f             	and    eax,0x3f
c001c2e3:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c2e7:	eb 3f                	jmp    c001c328 <IDE::open(int, int, void*)+0x34e>
c001c2e9:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c2ef:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c2f6:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c2fd:	05 06 02 00 00       	add    eax,0x206
c001c302:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c309:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c310:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c317:	05 06 02 00 00       	add    eax,0x206
c001c31c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c323:	e9 bd fe ff ff       	jmp    c001c1e5 <IDE::open(int, int, void*)+0x20b>
c001c328:	50                   	push   eax
c001c329:	50                   	push   eax
c001c32a:	6a 00                	push   0x0
c001c32c:	53                   	push   ebx
c001c32d:	e8 30 fa ff ff       	call   c001bd62 <IDE::prepareInterrupt(unsigned char)>
c001c332:	5a                   	pop    edx
c001c333:	59                   	pop    ecx
c001c334:	6a 01                	push   0x1
c001c336:	53                   	push   ebx
c001c337:	e8 26 fa ff ff       	call   c001bd62 <IDE::prepareInterrupt(unsigned char)>
c001c33c:	83 c4 0c             	add    esp,0xc
c001c33f:	6a 00                	push   0x0
c001c341:	6a 00                	push   0x0
c001c343:	53                   	push   ebx
c001c344:	e8 47 fc ff ff       	call   c001bf90 <IDE::enableIRQs(unsigned char, bool)>
c001c349:	83 c4 0c             	add    esp,0xc
c001c34c:	6a 00                	push   0x0
c001c34e:	6a 01                	push   0x1
c001c350:	53                   	push   ebx
c001c351:	e8 3a fc ff ff       	call   c001bf90 <IDE::enableIRQs(unsigned char, bool)>
c001c356:	83 c4 10             	add    esp,0x10
c001c359:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c360:	74 34                	je     c001c396 <IDE::open(int, int, void*)+0x3bc>
c001c362:	83 ec 0c             	sub    esp,0xc
c001c365:	53                   	push   ebx
c001c366:	6a 01                	push   0x1
c001c368:	68 58 bf 01 c0       	push   0xc001bf58
c001c36d:	6a 0e                	push   0xe
c001c36f:	53                   	push   ebx
c001c370:	e8 f9 05 ff ff       	call   c000c96e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c375:	83 c4 14             	add    esp,0x14
c001c378:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c37e:	53                   	push   ebx
c001c37f:	6a 01                	push   0x1
c001c381:	68 74 bf 01 c0       	push   0xc001bf74
c001c386:	6a 0f                	push   0xf
c001c388:	53                   	push   ebx
c001c389:	e8 e0 05 ff ff       	call   c000c96e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c38e:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c394:	eb 38                	jmp    c001c3ce <IDE::open(int, int, void*)+0x3f4>
c001c396:	83 ec 0c             	sub    esp,0xc
c001c399:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c3a3:	53                   	push   ebx
c001c3a4:	6a 00                	push   0x0
c001c3a6:	68 58 bf 01 c0       	push   0xc001bf58
c001c3ab:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c3b1:	53                   	push   ebx
c001c3b2:	e8 b7 05 ff ff       	call   c000c96e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c3b7:	83 c4 14             	add    esp,0x14
c001c3ba:	53                   	push   ebx
c001c3bb:	6a 00                	push   0x0
c001c3bd:	68 74 bf 01 c0       	push   0xc001bf74
c001c3c2:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c3c8:	53                   	push   ebx
c001c3c9:	e8 a0 05 ff ff       	call   c000c96e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c3ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c3d0:	83 c4 20             	add    esp,0x20
c001c3d3:	83 ec 0c             	sub    esp,0xc
c001c3d6:	53                   	push   ebx
c001c3d7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c3da:	83 c4 0c             	add    esp,0xc
c001c3dd:	6a 07                	push   0x7
c001c3df:	6a 00                	push   0x0
c001c3e1:	53                   	push   ebx
c001c3e2:	e8 61 fa ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001c3e7:	83 c4 0c             	add    esp,0xc
c001c3ea:	6a 07                	push   0x7
c001c3ec:	6a 01                	push   0x1
c001c3ee:	53                   	push   ebx
c001c3ef:	e8 54 fa ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001c3f4:	83 c4 0c             	add    esp,0xc
c001c3f7:	6a 01                	push   0x1
c001c3f9:	6a 00                	push   0x0
c001c3fb:	53                   	push   ebx
c001c3fc:	e8 8f fb ff ff       	call   c001bf90 <IDE::enableIRQs(unsigned char, bool)>
c001c401:	83 c4 0c             	add    esp,0xc
c001c404:	6a 01                	push   0x1
c001c406:	6a 01                	push   0x1
c001c408:	53                   	push   ebx
c001c409:	e8 82 fb ff ff       	call   c001bf90 <IDE::enableIRQs(unsigned char, bool)>
c001c40e:	83 c4 2c             	add    esp,0x2c
c001c411:	31 c0                	xor    eax,eax
c001c413:	5b                   	pop    ebx
c001c414:	5e                   	pop    esi
c001c415:	5f                   	pop    edi
c001c416:	5d                   	pop    ebp
c001c417:	c3                   	ret    

c001c418 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c418:	55                   	push   ebp
c001c419:	57                   	push   edi
c001c41a:	56                   	push   esi
c001c41b:	53                   	push   ebx
c001c41c:	83 ec 1c             	sub    esp,0x1c
c001c41f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c423:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c427:	8d 42 f8             	lea    eax,[edx-0x8]
c001c42a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c42e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c432:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c436:	3c 03                	cmp    al,0x3
c001c438:	77 5a                	ja     c001c494 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c43a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c43e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c442:	0f b6 db             	movzx  ebx,bl
c001c445:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c448:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c44d:	0c 80                	or     al,0x80
c001c44f:	50                   	push   eax
c001c450:	6a 0c                	push   0xc
c001c452:	53                   	push   ebx
c001c453:	56                   	push   esi
c001c454:	e8 2f f9 ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c459:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c45e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c462:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c466:	0f b6 d2             	movzx  edx,dl
c001c469:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c46d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c46f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c474:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c478:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c47c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c480:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c488:	83 c4 2c             	add    esp,0x2c
c001c48b:	5b                   	pop    ebx
c001c48c:	5e                   	pop    esi
c001c48d:	5f                   	pop    edi
c001c48e:	5d                   	pop    ebp
c001c48f:	e9 f4 f8 ff ff       	jmp    c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c494:	0f b6 c2             	movzx  eax,dl
c001c497:	83 f8 07             	cmp    eax,0x7
c001c49a:	77 12                	ja     c001c4ae <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c49c:	0f b6 c2             	movzx  eax,dl
c001c49f:	0f b6 db             	movzx  ebx,bl
c001c4a2:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c4aa:	01 c2                	add    edx,eax
c001c4ac:	eb 2f                	jmp    c001c4dd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c4ae:	83 f8 0d             	cmp    eax,0xd
c001c4b1:	77 13                	ja     c001c4c6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c4b3:	0f b6 db             	movzx  ebx,bl
c001c4b6:	0f b6 d2             	movzx  edx,dl
c001c4b9:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c4c0:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c4c4:	eb 17                	jmp    c001c4dd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c4c6:	83 f8 15             	cmp    eax,0x15
c001c4c9:	77 14                	ja     c001c4df <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c4cb:	0f b6 db             	movzx  ebx,bl
c001c4ce:	0f b6 d2             	movzx  edx,dl
c001c4d1:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c4d9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c4dd:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c4df:	83 c4 1c             	add    esp,0x1c
c001c4e2:	5b                   	pop    ebx
c001c4e3:	5e                   	pop    esi
c001c4e4:	5f                   	pop    edi
c001c4e5:	5d                   	pop    ebp
c001c4e6:	c3                   	ret    
c001c4e7:	90                   	nop

c001c4e8 <IDE::detect()>:
c001c4e8:	55                   	push   ebp
c001c4e9:	57                   	push   edi
c001c4ea:	56                   	push   esi
c001c4eb:	53                   	push   ebx
c001c4ec:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c4f2:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c4f9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c500:	0f 85 a4 02 00 00    	jne    c001c7aa <IDE::detect()+0x2c2>
c001c506:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c50d:	31 f6                	xor    esi,esi
c001c50f:	31 ed                	xor    ebp,ebp
c001c511:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c519:	89 e8                	mov    eax,ebp
c001c51b:	c1 e0 06             	shl    eax,0x6
c001c51e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c526:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c52a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c52e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c532:	c1 e0 04             	shl    eax,0x4
c001c535:	83 c8 a0             	or     eax,0xffffffa0
c001c538:	0f b6 c0             	movzx  eax,al
c001c53b:	50                   	push   eax
c001c53c:	6a 06                	push   0x6
c001c53e:	56                   	push   esi
c001c53f:	53                   	push   ebx
c001c540:	e8 43 f8 ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c545:	83 c4 0c             	add    esp,0xc
c001c548:	6a 0c                	push   0xc
c001c54a:	56                   	push   esi
c001c54b:	53                   	push   ebx
c001c54c:	e8 f7 f8 ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001c551:	83 c4 0c             	add    esp,0xc
c001c554:	6a 0c                	push   0xc
c001c556:	56                   	push   esi
c001c557:	53                   	push   ebx
c001c558:	e8 eb f8 ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001c55d:	83 c4 0c             	add    esp,0xc
c001c560:	6a 0c                	push   0xc
c001c562:	56                   	push   esi
c001c563:	53                   	push   ebx
c001c564:	e8 df f8 ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001c569:	83 c4 0c             	add    esp,0xc
c001c56c:	6a 0c                	push   0xc
c001c56e:	56                   	push   esi
c001c56f:	53                   	push   ebx
c001c570:	e8 d3 f8 ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001c575:	68 ec 00 00 00       	push   0xec
c001c57a:	6a 07                	push   0x7
c001c57c:	56                   	push   esi
c001c57d:	53                   	push   ebx
c001c57e:	e8 05 f8 ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c583:	83 c4 1c             	add    esp,0x1c
c001c586:	6a 0c                	push   0xc
c001c588:	56                   	push   esi
c001c589:	53                   	push   ebx
c001c58a:	e8 b9 f8 ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001c58f:	83 c4 0c             	add    esp,0xc
c001c592:	6a 0c                	push   0xc
c001c594:	56                   	push   esi
c001c595:	53                   	push   ebx
c001c596:	e8 ad f8 ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001c59b:	83 c4 0c             	add    esp,0xc
c001c59e:	6a 0c                	push   0xc
c001c5a0:	56                   	push   esi
c001c5a1:	53                   	push   ebx
c001c5a2:	e8 a1 f8 ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001c5a7:	83 c4 0c             	add    esp,0xc
c001c5aa:	6a 0c                	push   0xc
c001c5ac:	56                   	push   esi
c001c5ad:	53                   	push   ebx
c001c5ae:	e8 95 f8 ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001c5b3:	83 c4 0c             	add    esp,0xc
c001c5b6:	6a 0c                	push   0xc
c001c5b8:	56                   	push   esi
c001c5b9:	53                   	push   ebx
c001c5ba:	e8 89 f8 ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001c5bf:	83 c4 10             	add    esp,0x10
c001c5c2:	84 c0                	test   al,al
c001c5c4:	0f 84 60 01 00 00    	je     c001c72a <IDE::detect()+0x242>
c001c5ca:	31 ff                	xor    edi,edi
c001c5cc:	50                   	push   eax
c001c5cd:	6a 0c                	push   0xc
c001c5cf:	56                   	push   esi
c001c5d0:	53                   	push   ebx
c001c5d1:	e8 72 f8 ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001c5d6:	83 c4 10             	add    esp,0x10
c001c5d9:	a8 01                	test   al,0x1
c001c5db:	0f 85 6a 01 00 00    	jne    c001c74b <IDE::detect()+0x263>
c001c5e1:	a8 80                	test   al,0x80
c001c5e3:	75 04                	jne    c001c5e9 <IDE::detect()+0x101>
c001c5e5:	a8 08                	test   al,0x8
c001c5e7:	75 23                	jne    c001c60c <IDE::detect()+0x124>
c001c5e9:	47                   	inc    edi
c001c5ea:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c5f0:	7e da                	jle    c001c5cc <IDE::detect()+0xe4>
c001c5f2:	83 ec 0c             	sub    esp,0xc
c001c5f5:	6a 32                	push   0x32
c001c5f7:	e8 f0 9d ff ff       	call   c00163ec <milliTenthSleep(unsigned int)>
c001c5fc:	83 c4 10             	add    esp,0x10
c001c5ff:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c605:	75 c5                	jne    c001c5cc <IDE::detect()+0xe4>
c001c607:	e9 3f 01 00 00       	jmp    c001c74b <IDE::detect()+0x263>
c001c60c:	31 c9                	xor    ecx,ecx
c001c60e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c612:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c616:	83 ec 0c             	sub    esp,0xc
c001c619:	68 80 00 00 00       	push   0x80
c001c61e:	57                   	push   edi
c001c61f:	6a 00                	push   0x0
c001c621:	56                   	push   esi
c001c622:	53                   	push   ebx
c001c623:	e8 f0 fd ff ff       	call   c001c418 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c628:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c62d:	89 e8                	mov    eax,ebp
c001c62f:	89 d1                	mov    ecx,edx
c001c631:	c1 e0 06             	shl    eax,0x6
c001c634:	01 d8                	add    eax,ebx
c001c636:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c63d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c644:	89 f2                	mov    edx,esi
c001c646:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c64c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c650:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c656:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c65a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c661:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c669:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c670:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c678:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c67e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c685:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c68b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c68f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c693:	83 c4 20             	add    esp,0x20
c001c696:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c699:	83 c0 02             	add    eax,0x2
c001c69c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c6a2:	83 c7 02             	add    edi,0x2
c001c6a5:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c6a8:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c6ae:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c6b2:	75 e2                	jne    c001c696 <IDE::detect()+0x1ae>
c001c6b4:	89 e8                	mov    eax,ebp
c001c6b6:	c1 e0 06             	shl    eax,0x6
c001c6b9:	01 d8                	add    eax,ebx
c001c6bb:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c6c2:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c6c9:	c1 ea 09             	shr    edx,0x9
c001c6cc:	83 e2 01             	and    edx,0x1
c001c6cf:	80 e1 01             	and    cl,0x1
c001c6d2:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c6d8:	75 22                	jne    c001c6fc <IDE::detect()+0x214>
c001c6da:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c6e1:	74 46                	je     c001c729 <IDE::detect()+0x241>
c001c6e3:	83 ec 0c             	sub    esp,0xc
c001c6e6:	68 7c 01 00 00       	push   0x17c
c001c6eb:	e8 c6 b3 fe ff       	call   c0007ab6 <malloc>
c001c6f0:	89 c7                	mov    edi,eax
c001c6f2:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6f5:	e8 1a 05 00 00       	call   c001cc14 <ATA::ATA()>
c001c6fa:	eb 17                	jmp    c001c713 <IDE::detect()+0x22b>
c001c6fc:	83 ec 0c             	sub    esp,0xc
c001c6ff:	68 84 01 00 00       	push   0x184
c001c704:	e8 ad b3 fe ff       	call   c0007ab6 <malloc>
c001c709:	89 c7                	mov    edi,eax
c001c70b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c70e:	e8 45 0e 00 00       	call   c001d558 <ATAPI::ATAPI()>
c001c713:	5a                   	pop    edx
c001c714:	59                   	pop    ecx
c001c715:	57                   	push   edi
c001c716:	53                   	push   ebx
c001c717:	e8 a6 02 ff ff       	call   c000c9c2 <Device::addChild(Device*)>
c001c71c:	8b 07                	mov    eax,DWORD PTR [edi]
c001c71e:	53                   	push   ebx
c001c71f:	55                   	push   ebp
c001c720:	6a 00                	push   0x0
c001c722:	57                   	push   edi
c001c723:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c726:	83 c4 20             	add    esp,0x20
c001c729:	45                   	inc    ebp
c001c72a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c72f:	74 0d                	je     c001c73e <IDE::detect()+0x256>
c001c731:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c739:	e9 db fd ff ff       	jmp    c001c519 <IDE::detect()+0x31>
c001c73e:	4e                   	dec    esi
c001c73f:	74 69                	je     c001c7aa <IDE::detect()+0x2c2>
c001c741:	be 01 00 00 00       	mov    esi,0x1
c001c746:	e9 c6 fd ff ff       	jmp    c001c511 <IDE::detect()+0x29>
c001c74b:	50                   	push   eax
c001c74c:	6a 04                	push   0x4
c001c74e:	56                   	push   esi
c001c74f:	53                   	push   ebx
c001c750:	e8 f3 f6 ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001c755:	83 c4 0c             	add    esp,0xc
c001c758:	89 c7                	mov    edi,eax
c001c75a:	6a 05                	push   0x5
c001c75c:	56                   	push   esi
c001c75d:	53                   	push   ebx
c001c75e:	e8 e5 f6 ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001c763:	83 c4 10             	add    esp,0x10
c001c766:	89 f9                	mov    ecx,edi
c001c768:	0f b6 c0             	movzx  eax,al
c001c76b:	0f b6 f9             	movzx  edi,cl
c001c76e:	83 ff 14             	cmp    edi,0x14
c001c771:	75 07                	jne    c001c77a <IDE::detect()+0x292>
c001c773:	3d eb 00 00 00       	cmp    eax,0xeb
c001c778:	eb 0a                	jmp    c001c784 <IDE::detect()+0x29c>
c001c77a:	3d 96 00 00 00       	cmp    eax,0x96
c001c77f:	75 a9                	jne    c001c72a <IDE::detect()+0x242>
c001c781:	83 ff 69             	cmp    edi,0x69
c001c784:	75 a4                	jne    c001c72a <IDE::detect()+0x242>
c001c786:	68 a1 00 00 00       	push   0xa1
c001c78b:	6a 07                	push   0x7
c001c78d:	56                   	push   esi
c001c78e:	53                   	push   ebx
c001c78f:	e8 f4 f5 ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c794:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c79b:	e8 4c 9c ff ff       	call   c00163ec <milliTenthSleep(unsigned int)>
c001c7a0:	83 c4 10             	add    esp,0x10
c001c7a3:	b1 01                	mov    cl,0x1
c001c7a5:	e9 64 fe ff ff       	jmp    c001c60e <IDE::detect()+0x126>
c001c7aa:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c7b0:	5b                   	pop    ebx
c001c7b1:	5e                   	pop    esi
c001c7b2:	5f                   	pop    edi
c001c7b3:	5d                   	pop    ebp
c001c7b4:	c3                   	ret    
c001c7b5:	90                   	nop

c001c7b6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c7b6:	55                   	push   ebp
c001c7b7:	57                   	push   edi
c001c7b8:	56                   	push   esi
c001c7b9:	53                   	push   ebx
c001c7ba:	83 ec 1c             	sub    esp,0x1c
c001c7bd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c7c1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c7c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7c9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c7cd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c7d1:	88 c3                	mov    bl,al
c001c7d3:	25 ff 00 00 00       	and    eax,0xff
c001c7d8:	0f 84 88 00 00 00    	je     c001c866 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7de:	83 ec 0c             	sub    esp,0xc
c001c7e1:	89 c7                	mov    edi,eax
c001c7e3:	68 47 32 02 c0       	push   0xc0023247
c001c7e8:	e8 58 e1 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c7ed:	83 c4 10             	add    esp,0x10
c001c7f0:	83 ff 01             	cmp    edi,0x1
c001c7f3:	74 6b                	je     c001c860 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c7f5:	83 ff 02             	cmp    edi,0x2
c001c7f8:	75 58                	jne    c001c852 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c7fa:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c7ff:	01 ff                	add    edi,edi
c001c801:	50                   	push   eax
c001c802:	09 fe                	or     esi,edi
c001c804:	6a 01                	push   0x1
c001c806:	89 f0                	mov    eax,esi
c001c808:	0f b6 f0             	movzx  esi,al
c001c80b:	c1 e6 06             	shl    esi,0x6
c001c80e:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c816:	50                   	push   eax
c001c817:	55                   	push   ebp
c001c818:	e8 2b f6 ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001c81d:	83 c4 10             	add    esp,0x10
c001c820:	a8 01                	test   al,0x1
c001c822:	74 02                	je     c001c826 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c824:	b3 07                	mov    bl,0x7
c001c826:	a8 02                	test   al,0x2
c001c828:	74 02                	je     c001c82c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c82a:	b3 03                	mov    bl,0x3
c001c82c:	a8 04                	test   al,0x4
c001c82e:	74 02                	je     c001c832 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c830:	b3 14                	mov    bl,0x14
c001c832:	a8 08                	test   al,0x8
c001c834:	74 02                	je     c001c838 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c836:	b3 03                	mov    bl,0x3
c001c838:	a8 10                	test   al,0x10
c001c83a:	74 02                	je     c001c83e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c83c:	b3 15                	mov    bl,0x15
c001c83e:	a8 20                	test   al,0x20
c001c840:	74 02                	je     c001c844 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c842:	b3 03                	mov    bl,0x3
c001c844:	a8 40                	test   al,0x40
c001c846:	74 02                	je     c001c84a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c848:	b3 16                	mov    bl,0x16
c001c84a:	a8 80                	test   al,0x80
c001c84c:	74 18                	je     c001c866 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c84e:	b3 0d                	mov    bl,0xd
c001c850:	eb 14                	jmp    c001c866 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c852:	83 ff 03             	cmp    edi,0x3
c001c855:	74 0d                	je     c001c864 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c857:	83 ff 04             	cmp    edi,0x4
c001c85a:	75 0a                	jne    c001c866 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c85c:	b3 08                	mov    bl,0x8
c001c85e:	eb 06                	jmp    c001c866 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c860:	b3 13                	mov    bl,0x13
c001c862:	eb 02                	jmp    c001c866 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c864:	b3 17                	mov    bl,0x17
c001c866:	83 c4 1c             	add    esp,0x1c
c001c869:	88 d8                	mov    al,bl
c001c86b:	5b                   	pop    ebx
c001c86c:	5e                   	pop    esi
c001c86d:	5f                   	pop    edi
c001c86e:	5d                   	pop    ebp
c001c86f:	c3                   	ret    

c001c870 <IDE::polling(unsigned char, unsigned int)>:
c001c870:	57                   	push   edi
c001c871:	56                   	push   esi
c001c872:	53                   	push   ebx
c001c873:	bb 04 00 00 00       	mov    ebx,0x4
c001c878:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c87c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c881:	52                   	push   edx
c001c882:	6a 0c                	push   0xc
c001c884:	56                   	push   esi
c001c885:	57                   	push   edi
c001c886:	e8 bd f5 ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001c88b:	83 c4 10             	add    esp,0x10
c001c88e:	4b                   	dec    ebx
c001c88f:	75 f0                	jne    c001c881 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c891:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c896:	50                   	push   eax
c001c897:	6a 0c                	push   0xc
c001c899:	56                   	push   esi
c001c89a:	57                   	push   edi
c001c89b:	e8 a8 f5 ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001c8a0:	83 c4 10             	add    esp,0x10
c001c8a3:	a8 01                	test   al,0x1
c001c8a5:	75 17                	jne    c001c8be <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c8a7:	a8 20                	test   al,0x20
c001c8a9:	75 0f                	jne    c001c8ba <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c8ab:	4b                   	dec    ebx
c001c8ac:	74 10                	je     c001c8be <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c8ae:	a8 80                	test   al,0x80
c001c8b0:	75 e4                	jne    c001c896 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c8b2:	a8 08                	test   al,0x8
c001c8b4:	74 e0                	je     c001c896 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c8b6:	31 c0                	xor    eax,eax
c001c8b8:	eb 06                	jmp    c001c8c0 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c8ba:	b0 01                	mov    al,0x1
c001c8bc:	eb 02                	jmp    c001c8c0 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c8be:	b0 02                	mov    al,0x2
c001c8c0:	5b                   	pop    ebx
c001c8c1:	5e                   	pop    esi
c001c8c2:	5f                   	pop    edi
c001c8c3:	c3                   	ret    

c001c8c4 <SATABus::close(int, int, void*)>:
c001c8c4:	31 c0                	xor    eax,eax
c001c8c6:	c3                   	ret    
c001c8c7:	90                   	nop

c001c8c8 <SATABus::detect()>:
c001c8c8:	c3                   	ret    
c001c8c9:	90                   	nop

c001c8ca <SATABus::SATABus()>:
c001c8ca:	83 ec 0c             	sub    esp,0xc
c001c8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d1:	83 ec 08             	sub    esp,0x8
c001c8d4:	68 80 32 02 c0       	push   0xc0023280
c001c8d9:	50                   	push   eax
c001c8da:	e8 25 04 ff ff       	call   c000cd04 <HardDiskController::HardDiskController(char const*)>
c001c8df:	83 c4 10             	add    esp,0x10
c001c8e2:	ba ac 32 02 c0       	mov    edx,0xc00232ac
c001c8e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8eb:	89 10                	mov    DWORD PTR [eax],edx
c001c8ed:	83 ec 0c             	sub    esp,0xc
c001c8f0:	6a 50                	push   0x50
c001c8f2:	e8 97 b5 fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c8f7:	83 c4 10             	add    esp,0x10
c001c8fa:	89 c2                	mov    edx,eax
c001c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c900:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c906:	83 ec 0c             	sub    esp,0xc
c001c909:	6a 50                	push   0x50
c001c90b:	e8 fd cc fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c910:	83 c4 10             	add    esp,0x10
c001c913:	89 c2                	mov    edx,eax
c001c915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c919:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c91f:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c924:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c928:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c92e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c932:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c938:	83 ec 0c             	sub    esp,0xc
c001c93b:	6a 03                	push   0x3
c001c93d:	6a 50                	push   0x50
c001c93f:	51                   	push   ecx
c001c940:	52                   	push   edx
c001c941:	50                   	push   eax
c001c942:	e8 d3 d5 fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c947:	83 c4 20             	add    esp,0x20
c001c94a:	90                   	nop
c001c94b:	83 c4 0c             	add    esp,0xc
c001c94e:	c3                   	ret    
c001c94f:	90                   	nop

c001c950 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c950:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c954:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c957:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c95a:	09 c2                	or     edx,eax
c001c95c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c960:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c966:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c968:	31 c0                	xor    eax,eax
c001c96a:	c1 e9 08             	shr    ecx,0x8
c001c96d:	83 e1 0f             	and    ecx,0xf
c001c970:	39 c8                	cmp    eax,ecx
c001c972:	74 0a                	je     c001c97e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c974:	f6 c2 01             	test   dl,0x1
c001c977:	74 08                	je     c001c981 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c979:	d1 ea                	shr    edx,1
c001c97b:	40                   	inc    eax
c001c97c:	eb f2                	jmp    c001c970 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c97e:	83 c8 ff             	or     eax,0xffffffff
c001c981:	c3                   	ret    

c001c982 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c982:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c986:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c989:	89 c2                	mov    edx,eax
c001c98b:	c1 ea 08             	shr    edx,0x8
c001c98e:	83 e2 0f             	and    edx,0xf
c001c991:	4a                   	dec    edx
c001c992:	75 32                	jne    c001c9c6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c994:	83 e0 0f             	and    eax,0xf
c001c997:	83 f8 03             	cmp    eax,0x3
c001c99a:	75 2a                	jne    c001c9c6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c99c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c99f:	b8 02 00 00 00       	mov    eax,0x2
c001c9a4:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c9aa:	74 1c                	je     c001c9c8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c9ac:	b8 04 00 00 00       	mov    eax,0x4
c001c9b1:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c9b7:	74 0f                	je     c001c9c8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c9b9:	31 c0                	xor    eax,eax
c001c9bb:	83 fa 03             	cmp    edx,0x3
c001c9be:	0f 94 c0             	sete   al
c001c9c1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c9c5:	c3                   	ret    
c001c9c6:	31 c0                	xor    eax,eax
c001c9c8:	c3                   	ret    
c001c9c9:	90                   	nop

c001c9ca <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c9ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9ce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9d1:	0f ba e2 0f          	bt     edx,0xf
c001c9d5:	72 f7                	jb     c001c9ce <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c9d7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9da:	83 ca 10             	or     edx,0x10
c001c9dd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9e0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9e3:	83 ca 01             	or     edx,0x1
c001c9e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9e9:	c3                   	ret    

c001c9ea <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c9ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9ee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9f1:	83 e2 fe             	and    edx,0xfffffffe
c001c9f4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9f7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9fa:	83 e2 ef             	and    edx,0xffffffef
c001c9fd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca00:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca03:	0f ba e2 0e          	bt     edx,0xe
c001ca07:	72 f7                	jb     c001ca00 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ca09:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca0c:	0f ba e2 0f          	bt     edx,0xf
c001ca10:	72 ee                	jb     c001ca00 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ca12:	c3                   	ret    
c001ca13:	90                   	nop

c001ca14 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001ca14:	55                   	push   ebp
c001ca15:	57                   	push   edi
c001ca16:	56                   	push   esi
c001ca17:	53                   	push   ebx
c001ca18:	83 ec 1c             	sub    esp,0x1c
c001ca1b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ca1f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ca23:	53                   	push   ebx
c001ca24:	56                   	push   esi
c001ca25:	e8 c0 ff ff ff       	call   c001c9ea <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ca2a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ca2e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001ca34:	83 ec 0c             	sub    esp,0xc
c001ca37:	c1 e5 0a             	shl    ebp,0xa
c001ca3a:	01 e8                	add    eax,ebp
c001ca3c:	89 03                	mov    DWORD PTR [ebx],eax
c001ca3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ca40:	68 00 04 00 00       	push   0x400
c001ca45:	6a 00                	push   0x0
c001ca47:	50                   	push   eax
c001ca48:	e8 a3 3a fe ff       	call   c00004f0 <memset>
c001ca4d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001ca53:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001ca57:	01 e8                	add    eax,ebp
c001ca59:	83 c4 1c             	add    esp,0x1c
c001ca5c:	89 03                	mov    DWORD PTR [ebx],eax
c001ca5e:	c1 e2 08             	shl    edx,0x8
c001ca61:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ca68:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001ca6e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001ca74:	01 f8                	add    eax,edi
c001ca76:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ca79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ca7c:	68 00 01 00 00       	push   0x100
c001ca81:	6a 00                	push   0x0
c001ca83:	50                   	push   eax
c001ca84:	e8 67 3a fe ff       	call   c00004f0 <memset>
c001ca89:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001ca8f:	01 fa                	add    edx,edi
c001ca91:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ca95:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001ca98:	c1 e7 0d             	shl    edi,0xd
c001ca9b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001caa2:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001caa8:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001caae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cab2:	31 ff                	xor    edi,edi
c001cab4:	83 c4 10             	add    esp,0x10
c001cab7:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001cabd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cac1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001cac7:	83 c5 20             	add    ebp,0x20
c001caca:	01 f8                	add    eax,edi
c001cacc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cacf:	52                   	push   edx
c001cad0:	68 00 01 00 00       	push   0x100
c001cad5:	6a 00                	push   0x0
c001cad7:	50                   	push   eax
c001cad8:	e8 13 3a fe ff       	call   c00004f0 <memset>
c001cadd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cae1:	83 c4 10             	add    esp,0x10
c001cae4:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001caea:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001caf1:	01 f8                	add    eax,edi
c001caf3:	81 c7 00 01 00 00    	add    edi,0x100
c001caf9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cafc:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001cb02:	75 b3                	jne    c001cab7 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001cb04:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cb0b:	50                   	push   eax
c001cb0c:	50                   	push   eax
c001cb0d:	53                   	push   ebx
c001cb0e:	56                   	push   esi
c001cb0f:	e8 b6 fe ff ff       	call   c001c9ca <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cb14:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cb1b:	83 c4 2c             	add    esp,0x2c
c001cb1e:	5b                   	pop    ebx
c001cb1f:	5e                   	pop    esi
c001cb20:	5f                   	pop    edi
c001cb21:	5d                   	pop    ebp
c001cb22:	c3                   	ret    
c001cb23:	90                   	nop

c001cb24 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001cb24:	55                   	push   ebp
c001cb25:	57                   	push   edi
c001cb26:	56                   	push   esi
c001cb27:	53                   	push   ebx
c001cb28:	31 db                	xor    ebx,ebx
c001cb2a:	83 ec 0c             	sub    esp,0xc
c001cb2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb31:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cb35:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cb38:	f7 c7 01 00 00 00    	test   edi,0x1
c001cb3e:	74 7a                	je     c001cbba <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cb40:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cb44:	89 d8                	mov    eax,ebx
c001cb46:	c1 e0 07             	shl    eax,0x7
c001cb49:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cb50:	55                   	push   ebp
c001cb51:	56                   	push   esi
c001cb52:	e8 2b fe ff ff       	call   c001c982 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cb57:	5a                   	pop    edx
c001cb58:	83 f8 01             	cmp    eax,0x1
c001cb5b:	59                   	pop    ecx
c001cb5c:	75 21                	jne    c001cb7f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cb5e:	50                   	push   eax
c001cb5f:	53                   	push   ebx
c001cb60:	55                   	push   ebp
c001cb61:	56                   	push   esi
c001cb62:	e8 ad fe ff ff       	call   c001ca14 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cb67:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cb6e:	e8 43 af fe ff       	call   c0007ab6 <malloc>
c001cb73:	89 c5                	mov    ebp,eax
c001cb75:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb78:	e8 99 10 00 00       	call   c001dc16 <SATA::SATA()>
c001cb7d:	eb 24                	jmp    c001cba3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cb7f:	83 f8 04             	cmp    eax,0x4
c001cb82:	75 36                	jne    c001cbba <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cb84:	51                   	push   ecx
c001cb85:	53                   	push   ebx
c001cb86:	55                   	push   ebp
c001cb87:	56                   	push   esi
c001cb88:	e8 87 fe ff ff       	call   c001ca14 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cb8d:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cb94:	e8 1d af fe ff       	call   c0007ab6 <malloc>
c001cb99:	89 c5                	mov    ebp,eax
c001cb9b:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb9e:	e8 d5 17 00 00       	call   c001e378 <SATAPI::SATAPI()>
c001cba3:	58                   	pop    eax
c001cba4:	5a                   	pop    edx
c001cba5:	55                   	push   ebp
c001cba6:	56                   	push   esi
c001cba7:	e8 16 fe fe ff       	call   c000c9c2 <Device::addChild(Device*)>
c001cbac:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cbaf:	56                   	push   esi
c001cbb0:	6a 00                	push   0x0
c001cbb2:	53                   	push   ebx
c001cbb3:	55                   	push   ebp
c001cbb4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cbb7:	83 c4 20             	add    esp,0x20
c001cbba:	d1 ef                	shr    edi,1
c001cbbc:	43                   	inc    ebx
c001cbbd:	83 fb 20             	cmp    ebx,0x20
c001cbc0:	0f 85 72 ff ff ff    	jne    c001cb38 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cbc6:	83 c4 0c             	add    esp,0xc
c001cbc9:	5b                   	pop    ebx
c001cbca:	5e                   	pop    esi
c001cbcb:	5f                   	pop    edi
c001cbcc:	5d                   	pop    ebp
c001cbcd:	c3                   	ret    

c001cbce <SATABus::open(int, int, void*)>:
c001cbce:	83 ec 14             	sub    esp,0x14
c001cbd1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cbd5:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cbdb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cbe1:	52                   	push   edx
c001cbe2:	50                   	push   eax
c001cbe3:	e8 3c ff ff ff       	call   c001cb24 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cbe8:	31 c0                	xor    eax,eax
c001cbea:	83 c4 1c             	add    esp,0x1c
c001cbed:	c3                   	ret    

c001cbee <ATA::close(int, int, void*)>:
c001cbee:	83 ec 0c             	sub    esp,0xc
c001cbf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cbfb:	85 c0                	test   eax,eax
c001cbfd:	74 0c                	je     c001cc0b <ATA::close(int, int, void*)+0x1d>
c001cbff:	83 ec 0c             	sub    esp,0xc
c001cc02:	8b 10                	mov    edx,DWORD PTR [eax]
c001cc04:	50                   	push   eax
c001cc05:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cc08:	83 c4 10             	add    esp,0x10
c001cc0b:	31 c0                	xor    eax,eax
c001cc0d:	83 c4 0c             	add    esp,0xc
c001cc10:	c3                   	ret    
c001cc11:	90                   	nop

c001cc12 <ATA::powerSaving(PowerSavingLevel)>:
c001cc12:	c3                   	ret    
c001cc13:	90                   	nop

c001cc14 <ATA::ATA()>:
c001cc14:	83 ec 0c             	sub    esp,0xc
c001cc17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc1b:	83 ec 04             	sub    esp,0x4
c001cc1e:	68 00 02 00 00       	push   0x200
c001cc23:	68 79 33 02 c0       	push   0xc0023379
c001cc28:	50                   	push   eax
c001cc29:	e8 60 01 ff ff       	call   c000cd8e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cc2e:	83 c4 10             	add    esp,0x10
c001cc31:	ba ec 32 02 c0       	mov    edx,0xc00232ec
c001cc36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc3a:	89 10                	mov    DWORD PTR [eax],edx
c001cc3c:	90                   	nop
c001cc3d:	83 c4 0c             	add    esp,0xc
c001cc40:	c3                   	ret    
c001cc41:	90                   	nop

c001cc42 <ATA::flush(bool)>:
c001cc42:	53                   	push   ebx
c001cc43:	83 ec 08             	sub    esp,0x8
c001cc46:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc4a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cc4f:	83 f8 01             	cmp    eax,0x1
c001cc52:	19 c0                	sbb    eax,eax
c001cc54:	83 e0 fd             	and    eax,0xfffffffd
c001cc57:	05 ea 00 00 00       	add    eax,0xea
c001cc5c:	50                   	push   eax
c001cc5d:	6a 07                	push   0x7
c001cc5f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc66:	50                   	push   eax
c001cc67:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc6d:	e8 16 f1 ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc72:	83 c4 0c             	add    esp,0xc
c001cc75:	6a 00                	push   0x0
c001cc77:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc7e:	50                   	push   eax
c001cc7f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc85:	e8 e6 fb ff ff       	call   c001c870 <IDE::polling(unsigned char, unsigned int)>
c001cc8a:	83 c4 18             	add    esp,0x18
c001cc8d:	5b                   	pop    ebx
c001cc8e:	c3                   	ret    
c001cc8f:	90                   	nop

c001cc90 <ATA::readyForCommand()>:
c001cc90:	56                   	push   esi
c001cc91:	53                   	push   ebx
c001cc92:	53                   	push   ebx
c001cc93:	31 db                	xor    ebx,ebx
c001cc95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cc99:	51                   	push   ecx
c001cc9a:	6a 0c                	push   0xc
c001cc9c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cca3:	50                   	push   eax
c001cca4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ccaa:	e8 99 f1 ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001ccaf:	83 c4 10             	add    esp,0x10
c001ccb2:	a8 88                	test   al,0x88
c001ccb4:	74 1f                	je     c001ccd5 <ATA::readyForCommand()+0x45>
c001ccb6:	43                   	inc    ebx
c001ccb7:	83 fb 63             	cmp    ebx,0x63
c001ccba:	7e dd                	jle    c001cc99 <ATA::readyForCommand()+0x9>
c001ccbc:	83 ec 0c             	sub    esp,0xc
c001ccbf:	6a 0a                	push   0xa
c001ccc1:	e8 26 97 ff ff       	call   c00163ec <milliTenthSleep(unsigned int)>
c001ccc6:	83 c4 10             	add    esp,0x10
c001ccc9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cccf:	75 c8                	jne    c001cc99 <ATA::readyForCommand()+0x9>
c001ccd1:	31 c0                	xor    eax,eax
c001ccd3:	eb 02                	jmp    c001ccd7 <ATA::readyForCommand()+0x47>
c001ccd5:	b0 01                	mov    al,0x1
c001ccd7:	5a                   	pop    edx
c001ccd8:	5b                   	pop    ebx
c001ccd9:	5e                   	pop    esi
c001ccda:	c3                   	ret    
c001ccdb:	90                   	nop

c001ccdc <ATA::access(unsigned long long, int, void*, bool)>:
c001ccdc:	55                   	push   ebp
c001ccdd:	57                   	push   edi
c001ccde:	56                   	push   esi
c001ccdf:	53                   	push   ebx
c001cce0:	83 ec 2c             	sub    esp,0x2c
c001cce3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cce7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cceb:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ccef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ccf3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ccf7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ccfb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ccff:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cd05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cd09:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cd0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cd13:	c1 e0 06             	shl    eax,0x6
c001cd16:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001cd1e:	74 5d                	je     c001cd7d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001cd20:	89 fa                	mov    edx,edi
c001cd22:	89 f0                	mov    eax,esi
c001cd24:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001cd28:	c1 ea 1c             	shr    edx,0x1c
c001cd2b:	89 d1                	mov    ecx,edx
c001cd2d:	09 c1                	or     ecx,eax
c001cd2f:	74 25                	je     c001cd56 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001cd31:	31 ed                	xor    ebp,ebp
c001cd33:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001cd3a:	89 fa                	mov    edx,edi
c001cd3c:	89 f0                	mov    eax,esi
c001cd3e:	0f ad d0             	shrd   eax,edx,cl
c001cd41:	d3 ea                	shr    edx,cl
c001cd43:	f6 c1 20             	test   cl,0x20
c001cd46:	74 02                	je     c001cd4a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001cd48:	89 d0                	mov    eax,edx
c001cd4a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001cd4e:	45                   	inc    ebp
c001cd4f:	83 fd 06             	cmp    ebp,0x6
c001cd52:	75 df                	jne    c001cd33 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001cd54:	eb 76                	jmp    c001cdcc <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001cd56:	89 f0                	mov    eax,esi
c001cd58:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001cd5d:	89 fa                	mov    edx,edi
c001cd5f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cd66:	0f ac d0 10          	shrd   eax,edx,0x10
c001cd6a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cd6f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001cd73:	c1 ee 18             	shr    esi,0x18
c001cd76:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001cd7b:	eb 56                	jmp    c001cdd3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001cd7d:	6a 00                	push   0x0
c001cd7f:	6a 3f                	push   0x3f
c001cd81:	57                   	push   edi
c001cd82:	56                   	push   esi
c001cd83:	e8 a8 2a 00 00       	call   c001f830 <__umoddi3>
c001cd88:	83 c4 10             	add    esp,0x10
c001cd8b:	40                   	inc    eax
c001cd8c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001cd90:	6a 00                	push   0x0
c001cd92:	68 f0 03 00 00       	push   0x3f0
c001cd97:	57                   	push   edi
c001cd98:	56                   	push   esi
c001cd99:	e8 92 29 00 00       	call   c001f730 <__udivdi3>
c001cd9e:	83 c4 10             	add    esp,0x10
c001cda1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001cda6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cdad:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cdb2:	6a 00                	push   0x0
c001cdb4:	6a 3f                	push   0x3f
c001cdb6:	57                   	push   edi
c001cdb7:	56                   	push   esi
c001cdb8:	e8 73 29 00 00       	call   c001f730 <__udivdi3>
c001cdbd:	83 c4 10             	add    esp,0x10
c001cdc0:	83 e0 0f             	and    eax,0xf
c001cdc3:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001cdc8:	89 c6                	mov    esi,eax
c001cdca:	eb 07                	jmp    c001cdd3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001cdcc:	31 f6                	xor    esi,esi
c001cdce:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001cdd3:	bf 01 00 00 00       	mov    edi,0x1
c001cdd8:	50                   	push   eax
c001cdd9:	6a 00                	push   0x0
c001cddb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cde2:	50                   	push   eax
c001cde3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cde7:	e8 a4 f1 ff ff       	call   c001bf90 <IDE::enableIRQs(unsigned char, bool)>
c001cdec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cdef:	e8 9c fe ff ff       	call   c001cc90 <ATA::readyForCommand()>
c001cdf4:	83 c4 10             	add    esp,0x10
c001cdf7:	84 c0                	test   al,al
c001cdf9:	0f 84 69 02 00 00    	je     c001d068 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001cdff:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ce05:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ce0b:	c1 e0 04             	shl    eax,0x4
c001ce0e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ce15:	09 c6                	or     esi,eax
c001ce17:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001ce1c:	75 05                	jne    c001ce23 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001ce1e:	83 ce a0             	or     esi,0xffffffa0
c001ce21:	eb 03                	jmp    c001ce26 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001ce23:	83 ce e0             	or     esi,0xffffffe0
c001ce26:	89 f0                	mov    eax,esi
c001ce28:	0f b6 f0             	movzx  esi,al
c001ce2b:	56                   	push   esi
c001ce2c:	6a 06                	push   0x6
c001ce2e:	51                   	push   ecx
c001ce2f:	52                   	push   edx
c001ce30:	e8 53 ef ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce35:	83 c4 10             	add    esp,0x10
c001ce38:	6a 00                	push   0x0
c001ce3a:	6a 01                	push   0x1
c001ce3c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce43:	50                   	push   eax
c001ce44:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce4a:	e8 39 ef ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce4f:	83 c4 10             	add    esp,0x10
c001ce52:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001ce57:	83 f8 02             	cmp    eax,0x2
c001ce5a:	75 6e                	jne    c001ceca <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001ce5c:	6a 00                	push   0x0
c001ce5e:	6a 08                	push   0x8
c001ce60:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce67:	50                   	push   eax
c001ce68:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce6e:	e8 15 ef ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce73:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ce78:	50                   	push   eax
c001ce79:	6a 09                	push   0x9
c001ce7b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce82:	50                   	push   eax
c001ce83:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce89:	e8 fa ee ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce8e:	83 c4 20             	add    esp,0x20
c001ce91:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ce96:	50                   	push   eax
c001ce97:	6a 0a                	push   0xa
c001ce99:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cea0:	50                   	push   eax
c001cea1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cea7:	e8 dc ee ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ceac:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ceb1:	50                   	push   eax
c001ceb2:	6a 0b                	push   0xb
c001ceb4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cebb:	50                   	push   eax
c001cebc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cec2:	e8 c1 ee ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cec7:	83 c4 20             	add    esp,0x20
c001ceca:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cecf:	50                   	push   eax
c001ced0:	6a 02                	push   0x2
c001ced2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ced9:	50                   	push   eax
c001ceda:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cee0:	e8 a3 ee ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cee5:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ceea:	50                   	push   eax
c001ceeb:	6a 03                	push   0x3
c001ceed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cef4:	50                   	push   eax
c001cef5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cefb:	e8 88 ee ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf00:	83 c4 20             	add    esp,0x20
c001cf03:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cf08:	50                   	push   eax
c001cf09:	6a 04                	push   0x4
c001cf0b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf12:	50                   	push   eax
c001cf13:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf19:	e8 6a ee ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf1e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cf23:	50                   	push   eax
c001cf24:	6a 05                	push   0x5
c001cf26:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf2d:	50                   	push   eax
c001cf2e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf34:	e8 4f ee ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf39:	83 c4 20             	add    esp,0x20
c001cf3c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cf41:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001cf46:	74 11                	je     c001cf59 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001cf48:	b8 30 00 00 00       	mov    eax,0x30
c001cf4d:	83 fa 02             	cmp    edx,0x2
c001cf50:	75 16                	jne    c001cf68 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cf52:	b8 34 00 00 00       	mov    eax,0x34
c001cf57:	eb 0f                	jmp    c001cf68 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cf59:	b8 20 00 00 00       	mov    eax,0x20
c001cf5e:	83 fa 02             	cmp    edx,0x2
c001cf61:	75 05                	jne    c001cf68 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cf63:	b8 24 00 00 00       	mov    eax,0x24
c001cf68:	50                   	push   eax
c001cf69:	6a 07                	push   0x7
c001cf6b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf72:	50                   	push   eax
c001cf73:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf79:	e8 0a ee ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf7e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cf82:	83 c4 10             	add    esp,0x10
c001cf85:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001cf8a:	85 f6                	test   esi,esi
c001cf8c:	0f 84 b3 00 00 00    	je     c001d045 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001cf92:	50                   	push   eax
c001cf93:	6a 01                	push   0x1
c001cf95:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf9c:	50                   	push   eax
c001cf9d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfa3:	e8 c8 f8 ff ff       	call   c001c870 <IDE::polling(unsigned char, unsigned int)>
c001cfa8:	83 c4 10             	add    esp,0x10
c001cfab:	0f b6 f8             	movzx  edi,al
c001cfae:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cfb4:	85 ff                	test   edi,edi
c001cfb6:	74 1d                	je     c001cfd5 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001cfb8:	57                   	push   edi
c001cfb9:	0f b6 d2             	movzx  edx,dl
c001cfbc:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cfc3:	50                   	push   eax
c001cfc4:	52                   	push   edx
c001cfc5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfcb:	e8 e6 f7 ff ff       	call   c001c7b6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cfd0:	e9 90 00 00 00       	jmp    c001d065 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001cfd5:	85 ed                	test   ebp,ebp
c001cfd7:	74 3b                	je     c001d014 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001cfd9:	31 c9                	xor    ecx,ecx
c001cfdb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cfdf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cfe3:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001cfe7:	50                   	push   eax
c001cfe8:	50                   	push   eax
c001cfe9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cff0:	50                   	push   eax
c001cff1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cff7:	e8 7a ed ff ff       	call   c001bd76 <IDE::getBase(unsigned char)>
c001cffc:	89 c2                	mov    edx,eax
c001cffe:	89 f8                	mov    eax,edi
c001d000:	66 ef                	out    dx,ax
c001d002:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d006:	83 c4 10             	add    esp,0x10
c001d009:	41                   	inc    ecx
c001d00a:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d010:	75 c9                	jne    c001cfdb <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001d012:	eb 23                	jmp    c001d037 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001d014:	0f b6 d2             	movzx  edx,dl
c001d017:	51                   	push   ecx
c001d018:	51                   	push   ecx
c001d019:	52                   	push   edx
c001d01a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d020:	e8 51 ed ff ff       	call   c001bd76 <IDE::getBase(unsigned char)>
c001d025:	b9 00 01 00 00       	mov    ecx,0x100
c001d02a:	89 c2                	mov    edx,eax
c001d02c:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d030:	fc                   	cld    
c001d031:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d034:	83 c4 10             	add    esp,0x10
c001d037:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d03f:	4e                   	dec    esi
c001d040:	e9 45 ff ff ff       	jmp    c001cf8a <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001d045:	31 ff                	xor    edi,edi
c001d047:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d04c:	74 1a                	je     c001d068 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001d04e:	50                   	push   eax
c001d04f:	50                   	push   eax
c001d050:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001d055:	83 f8 02             	cmp    eax,0x2
c001d058:	0f 94 c0             	sete   al
c001d05b:	0f b6 c0             	movzx  eax,al
c001d05e:	50                   	push   eax
c001d05f:	53                   	push   ebx
c001d060:	e8 dd fb ff ff       	call   c001cc42 <ATA::flush(bool)>
c001d065:	83 c4 10             	add    esp,0x10
c001d068:	83 c4 2c             	add    esp,0x2c
c001d06b:	89 f8                	mov    eax,edi
c001d06d:	5b                   	pop    ebx
c001d06e:	5e                   	pop    esi
c001d06f:	5f                   	pop    edi
c001d070:	5d                   	pop    ebp
c001d071:	c3                   	ret    

c001d072 <ATA::detectCHS()>:
c001d072:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d076:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d07c:	c1 e0 06             	shl    eax,0x6
c001d07f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d085:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d08f:	c7 44 24 04 d0 32 02 c0 	mov    DWORD PTR [esp+0x4],0xc00232d0
c001d097:	e9 7f 45 ff ff       	jmp    c001161b <KePanic(char const*)>

c001d09c <ATA::open(int, int, void*)>:
c001d09c:	53                   	push   ebx
c001d09d:	83 ec 08             	sub    esp,0x8
c001d0a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d0a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d0a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d0ac:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d0b2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d0b8:	c1 e0 06             	shl    eax,0x6
c001d0bb:	01 d0                	add    eax,edx
c001d0bd:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d0c4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d0ca:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d0d1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d0db:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d0e1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d0e8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d0ef:	75 0c                	jne    c001d0fd <ATA::open(int, int, void*)+0x61>
c001d0f1:	83 ec 0c             	sub    esp,0xc
c001d0f4:	53                   	push   ebx
c001d0f5:	e8 78 ff ff ff       	call   c001d072 <ATA::detectCHS()>
c001d0fa:	83 c4 10             	add    esp,0x10
c001d0fd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d103:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d109:	c1 e0 06             	shl    eax,0x6
c001d10c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d113:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d11d:	d1 e8                	shr    eax,1
c001d11f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d125:	6a 04                	push   0x4
c001d127:	6a 0c                	push   0xc
c001d129:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d130:	50                   	push   eax
c001d131:	52                   	push   edx
c001d132:	e8 51 ec ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d137:	90                   	nop
c001d138:	90                   	nop
c001d139:	6a 00                	push   0x0
c001d13b:	6a 0c                	push   0xc
c001d13d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d144:	50                   	push   eax
c001d145:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d14b:	e8 38 ec ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d150:	83 c4 14             	add    esp,0x14
c001d153:	53                   	push   ebx
c001d154:	e8 9d fc fe ff       	call   c000cdf6 <PhysicalDisk::startCache()>
c001d159:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d15c:	e8 d9 0e ff ff       	call   c000e03a <createPartitionsForDisk(PhysicalDisk*)>
c001d161:	31 c0                	xor    eax,eax
c001d163:	83 c4 18             	add    esp,0x18
c001d166:	5b                   	pop    ebx
c001d167:	c3                   	ret    

c001d168 <combineCharAndColour(char, unsigned char)>:
c001d168:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d16d:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d173:	c1 e0 08             	shl    eax,0x8
c001d176:	09 d0                	or     eax,edx
c001d178:	c3                   	ret    

c001d179 <combineColours(unsigned char, unsigned char)>:
c001d179:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d17e:	c1 e0 04             	shl    eax,0x4
c001d181:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d185:	c3                   	ret    

c001d186 <ATA::read(unsigned long long, int, void*)>:
c001d186:	55                   	push   ebp
c001d187:	57                   	push   edi
c001d188:	56                   	push   esi
c001d189:	be 04 00 00 00       	mov    esi,0x4
c001d18e:	53                   	push   ebx
c001d18f:	83 ec 0c             	sub    esp,0xc
c001d192:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d196:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d19a:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d19d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d1a1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d1a5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d1ab:	0f 87 a1 01 00 00    	ja     c001d352 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d1b1:	be 06 00 00 00       	mov    esi,0x6
c001d1b6:	85 c9                	test   ecx,ecx
c001d1b8:	0f 84 94 01 00 00    	je     c001d352 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d1be:	55                   	push   ebp
c001d1bf:	55                   	push   ebp
c001d1c0:	6a 00                	push   0x0
c001d1c2:	51                   	push   ecx
c001d1c3:	53                   	push   ebx
c001d1c4:	52                   	push   edx
c001d1c5:	50                   	push   eax
c001d1c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d1ca:	e8 0d fb ff ff       	call   c001ccdc <ATA::access(unsigned long long, int, void*, bool)>
c001d1cf:	83 c4 20             	add    esp,0x20
c001d1d2:	89 c6                	mov    esi,eax
c001d1d4:	85 c0                	test   eax,eax
c001d1d6:	0f 85 71 01 00 00    	jne    c001d34d <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d1dc:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d1e2:	89 da                	mov    edx,ebx
c001d1e4:	50                   	push   eax
c001d1e5:	bd 10 27 00 00       	mov    ebp,0x2710
c001d1ea:	50                   	push   eax
c001d1eb:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d1f1:	6a 0f                	push   0xf
c001d1f3:	6a 00                	push   0x0
c001d1f5:	e8 7f ff ff ff       	call   c001d179 <combineColours(unsigned char, unsigned char)>
c001d1fa:	59                   	pop    ecx
c001d1fb:	b9 0a 00 00 00       	mov    ecx,0xa
c001d200:	5b                   	pop    ebx
c001d201:	0f b6 d8             	movzx  ebx,al
c001d204:	89 d0                	mov    eax,edx
c001d206:	53                   	push   ebx
c001d207:	99                   	cdq    
c001d208:	f7 fd                	idiv   ebp
c001d20a:	99                   	cdq    
c001d20b:	f7 f9                	idiv   ecx
c001d20d:	83 c2 30             	add    edx,0x30
c001d210:	0f b6 d2             	movzx  edx,dl
c001d213:	52                   	push   edx
c001d214:	e8 4f ff ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001d219:	5f                   	pop    edi
c001d21a:	bf e8 03 00 00       	mov    edi,0x3e8
c001d21f:	5a                   	pop    edx
c001d220:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d226:	53                   	push   ebx
c001d227:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d22c:	99                   	cdq    
c001d22d:	f7 ff                	idiv   edi
c001d22f:	99                   	cdq    
c001d230:	f7 f9                	idiv   ecx
c001d232:	8d 42 30             	lea    eax,[edx+0x30]
c001d235:	0f b6 c0             	movzx  eax,al
c001d238:	50                   	push   eax
c001d239:	e8 2a ff ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001d23e:	5f                   	pop    edi
c001d23f:	bf 64 00 00 00       	mov    edi,0x64
c001d244:	5a                   	pop    edx
c001d245:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d24b:	53                   	push   ebx
c001d24c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d251:	99                   	cdq    
c001d252:	f7 ff                	idiv   edi
c001d254:	99                   	cdq    
c001d255:	f7 f9                	idiv   ecx
c001d257:	8d 42 30             	lea    eax,[edx+0x30]
c001d25a:	0f b6 c0             	movzx  eax,al
c001d25d:	50                   	push   eax
c001d25e:	e8 05 ff ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001d263:	5a                   	pop    edx
c001d264:	5a                   	pop    edx
c001d265:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d26b:	53                   	push   ebx
c001d26c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d271:	99                   	cdq    
c001d272:	f7 f9                	idiv   ecx
c001d274:	99                   	cdq    
c001d275:	f7 f9                	idiv   ecx
c001d277:	8d 42 30             	lea    eax,[edx+0x30]
c001d27a:	0f b6 c0             	movzx  eax,al
c001d27d:	50                   	push   eax
c001d27e:	e8 e5 fe ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001d283:	5a                   	pop    edx
c001d284:	5a                   	pop    edx
c001d285:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d28b:	53                   	push   ebx
c001d28c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d291:	99                   	cdq    
c001d292:	f7 f9                	idiv   ecx
c001d294:	83 c2 30             	add    edx,0x30
c001d297:	0f b6 d2             	movzx  edx,dl
c001d29a:	52                   	push   edx
c001d29b:	e8 c8 fe ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001d2a0:	5a                   	pop    edx
c001d2a1:	5a                   	pop    edx
c001d2a2:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d2a8:	53                   	push   ebx
c001d2a9:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2ae:	99                   	cdq    
c001d2af:	f7 fd                	idiv   ebp
c001d2b1:	99                   	cdq    
c001d2b2:	f7 f9                	idiv   ecx
c001d2b4:	8d 42 30             	lea    eax,[edx+0x30]
c001d2b7:	0f b6 c0             	movzx  eax,al
c001d2ba:	50                   	push   eax
c001d2bb:	e8 a8 fe ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001d2c0:	5d                   	pop    ebp
c001d2c1:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d2c6:	5a                   	pop    edx
c001d2c7:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d2cd:	53                   	push   ebx
c001d2ce:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2d3:	99                   	cdq    
c001d2d4:	f7 fd                	idiv   ebp
c001d2d6:	99                   	cdq    
c001d2d7:	f7 f9                	idiv   ecx
c001d2d9:	8d 42 30             	lea    eax,[edx+0x30]
c001d2dc:	0f b6 c0             	movzx  eax,al
c001d2df:	50                   	push   eax
c001d2e0:	e8 83 fe ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001d2e5:	5d                   	pop    ebp
c001d2e6:	5a                   	pop    edx
c001d2e7:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d2ed:	53                   	push   ebx
c001d2ee:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2f3:	99                   	cdq    
c001d2f4:	f7 ff                	idiv   edi
c001d2f6:	99                   	cdq    
c001d2f7:	f7 f9                	idiv   ecx
c001d2f9:	8d 42 30             	lea    eax,[edx+0x30]
c001d2fc:	0f b6 c0             	movzx  eax,al
c001d2ff:	50                   	push   eax
c001d300:	e8 63 fe ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001d305:	5f                   	pop    edi
c001d306:	5d                   	pop    ebp
c001d307:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d30d:	53                   	push   ebx
c001d30e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d313:	99                   	cdq    
c001d314:	f7 f9                	idiv   ecx
c001d316:	99                   	cdq    
c001d317:	f7 f9                	idiv   ecx
c001d319:	8d 42 30             	lea    eax,[edx+0x30]
c001d31c:	0f b6 c0             	movzx  eax,al
c001d31f:	50                   	push   eax
c001d320:	e8 43 fe ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001d325:	5a                   	pop    edx
c001d326:	5f                   	pop    edi
c001d327:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d32d:	53                   	push   ebx
c001d32e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d333:	99                   	cdq    
c001d334:	f7 f9                	idiv   ecx
c001d336:	83 c2 30             	add    edx,0x30
c001d339:	0f b6 d2             	movzx  edx,dl
c001d33c:	52                   	push   edx
c001d33d:	e8 26 fe ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001d342:	83 c4 10             	add    esp,0x10
c001d345:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d34b:	eb 05                	jmp    c001d352 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d34d:	be 01 00 00 00       	mov    esi,0x1
c001d352:	83 c4 0c             	add    esp,0xc
c001d355:	89 f0                	mov    eax,esi
c001d357:	5b                   	pop    ebx
c001d358:	5e                   	pop    esi
c001d359:	5f                   	pop    edi
c001d35a:	5d                   	pop    ebp
c001d35b:	c3                   	ret    

c001d35c <ATA::write(unsigned long long, int, void*)>:
c001d35c:	55                   	push   ebp
c001d35d:	57                   	push   edi
c001d35e:	56                   	push   esi
c001d35f:	be 04 00 00 00       	mov    esi,0x4
c001d364:	53                   	push   ebx
c001d365:	83 ec 0c             	sub    esp,0xc
c001d368:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d36c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d370:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d373:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d377:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d37b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d381:	0f 87 9c 01 00 00    	ja     c001d523 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d387:	be 06 00 00 00       	mov    esi,0x6
c001d38c:	85 c9                	test   ecx,ecx
c001d38e:	0f 84 8f 01 00 00    	je     c001d523 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d394:	55                   	push   ebp
c001d395:	55                   	push   ebp
c001d396:	6a 01                	push   0x1
c001d398:	51                   	push   ecx
c001d399:	53                   	push   ebx
c001d39a:	52                   	push   edx
c001d39b:	50                   	push   eax
c001d39c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d3a0:	e8 37 f9 ff ff       	call   c001ccdc <ATA::access(unsigned long long, int, void*, bool)>
c001d3a5:	83 c4 20             	add    esp,0x20
c001d3a8:	89 c6                	mov    esi,eax
c001d3aa:	85 c0                	test   eax,eax
c001d3ac:	0f 85 6c 01 00 00    	jne    c001d51e <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d3b2:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d3b8:	bd 10 27 00 00       	mov    ebp,0x2710
c001d3bd:	50                   	push   eax
c001d3be:	50                   	push   eax
c001d3bf:	6a 0f                	push   0xf
c001d3c1:	6a 00                	push   0x0
c001d3c3:	e8 b1 fd ff ff       	call   c001d179 <combineColours(unsigned char, unsigned char)>
c001d3c8:	5a                   	pop    edx
c001d3c9:	0f b6 d8             	movzx  ebx,al
c001d3cc:	59                   	pop    ecx
c001d3cd:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3d2:	53                   	push   ebx
c001d3d3:	b9 0a 00 00 00       	mov    ecx,0xa
c001d3d8:	99                   	cdq    
c001d3d9:	f7 fd                	idiv   ebp
c001d3db:	99                   	cdq    
c001d3dc:	f7 f9                	idiv   ecx
c001d3de:	8d 42 30             	lea    eax,[edx+0x30]
c001d3e1:	0f b6 c0             	movzx  eax,al
c001d3e4:	50                   	push   eax
c001d3e5:	e8 7e fd ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001d3ea:	5f                   	pop    edi
c001d3eb:	bf e8 03 00 00       	mov    edi,0x3e8
c001d3f0:	5a                   	pop    edx
c001d3f1:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d3f7:	53                   	push   ebx
c001d3f8:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3fd:	99                   	cdq    
c001d3fe:	f7 ff                	idiv   edi
c001d400:	99                   	cdq    
c001d401:	f7 f9                	idiv   ecx
c001d403:	8d 42 30             	lea    eax,[edx+0x30]
c001d406:	0f b6 c0             	movzx  eax,al
c001d409:	50                   	push   eax
c001d40a:	e8 59 fd ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001d40f:	5f                   	pop    edi
c001d410:	bf 64 00 00 00       	mov    edi,0x64
c001d415:	5a                   	pop    edx
c001d416:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d41c:	53                   	push   ebx
c001d41d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d422:	99                   	cdq    
c001d423:	f7 ff                	idiv   edi
c001d425:	99                   	cdq    
c001d426:	f7 f9                	idiv   ecx
c001d428:	8d 42 30             	lea    eax,[edx+0x30]
c001d42b:	0f b6 c0             	movzx  eax,al
c001d42e:	50                   	push   eax
c001d42f:	e8 34 fd ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001d434:	5a                   	pop    edx
c001d435:	5a                   	pop    edx
c001d436:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d43c:	53                   	push   ebx
c001d43d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d442:	99                   	cdq    
c001d443:	f7 f9                	idiv   ecx
c001d445:	99                   	cdq    
c001d446:	f7 f9                	idiv   ecx
c001d448:	8d 42 30             	lea    eax,[edx+0x30]
c001d44b:	0f b6 c0             	movzx  eax,al
c001d44e:	50                   	push   eax
c001d44f:	e8 14 fd ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001d454:	5a                   	pop    edx
c001d455:	5a                   	pop    edx
c001d456:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d45c:	53                   	push   ebx
c001d45d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d462:	99                   	cdq    
c001d463:	f7 f9                	idiv   ecx
c001d465:	8d 42 30             	lea    eax,[edx+0x30]
c001d468:	0f b6 c0             	movzx  eax,al
c001d46b:	50                   	push   eax
c001d46c:	e8 f7 fc ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001d471:	5a                   	pop    edx
c001d472:	5a                   	pop    edx
c001d473:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d479:	53                   	push   ebx
c001d47a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d47f:	99                   	cdq    
c001d480:	f7 fd                	idiv   ebp
c001d482:	99                   	cdq    
c001d483:	f7 f9                	idiv   ecx
c001d485:	8d 42 30             	lea    eax,[edx+0x30]
c001d488:	0f b6 c0             	movzx  eax,al
c001d48b:	50                   	push   eax
c001d48c:	e8 d7 fc ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001d491:	5d                   	pop    ebp
c001d492:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d497:	5a                   	pop    edx
c001d498:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d49e:	53                   	push   ebx
c001d49f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4a4:	99                   	cdq    
c001d4a5:	f7 fd                	idiv   ebp
c001d4a7:	99                   	cdq    
c001d4a8:	f7 f9                	idiv   ecx
c001d4aa:	8d 42 30             	lea    eax,[edx+0x30]
c001d4ad:	0f b6 c0             	movzx  eax,al
c001d4b0:	50                   	push   eax
c001d4b1:	e8 b2 fc ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001d4b6:	5d                   	pop    ebp
c001d4b7:	5a                   	pop    edx
c001d4b8:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d4be:	53                   	push   ebx
c001d4bf:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4c4:	99                   	cdq    
c001d4c5:	f7 ff                	idiv   edi
c001d4c7:	99                   	cdq    
c001d4c8:	f7 f9                	idiv   ecx
c001d4ca:	8d 42 30             	lea    eax,[edx+0x30]
c001d4cd:	0f b6 c0             	movzx  eax,al
c001d4d0:	50                   	push   eax
c001d4d1:	e8 92 fc ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001d4d6:	5f                   	pop    edi
c001d4d7:	5d                   	pop    ebp
c001d4d8:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d4de:	53                   	push   ebx
c001d4df:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4e4:	99                   	cdq    
c001d4e5:	f7 f9                	idiv   ecx
c001d4e7:	99                   	cdq    
c001d4e8:	f7 f9                	idiv   ecx
c001d4ea:	8d 42 30             	lea    eax,[edx+0x30]
c001d4ed:	0f b6 c0             	movzx  eax,al
c001d4f0:	50                   	push   eax
c001d4f1:	e8 72 fc ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001d4f6:	5a                   	pop    edx
c001d4f7:	5f                   	pop    edi
c001d4f8:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d4fe:	53                   	push   ebx
c001d4ff:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d504:	99                   	cdq    
c001d505:	f7 f9                	idiv   ecx
c001d507:	83 c2 30             	add    edx,0x30
c001d50a:	0f b6 d2             	movzx  edx,dl
c001d50d:	52                   	push   edx
c001d50e:	e8 55 fc ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001d513:	83 c4 10             	add    esp,0x10
c001d516:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d51c:	eb 05                	jmp    c001d523 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d51e:	be 01 00 00 00       	mov    esi,0x1
c001d523:	83 c4 0c             	add    esp,0xc
c001d526:	89 f0                	mov    eax,esi
c001d528:	5b                   	pop    ebx
c001d529:	5e                   	pop    esi
c001d52a:	5f                   	pop    edi
c001d52b:	5d                   	pop    ebp
c001d52c:	c3                   	ret    
c001d52d:	90                   	nop

c001d52e <ATAPI::write(unsigned long long, int, void*)>:
c001d52e:	b8 03 00 00 00       	mov    eax,0x3
c001d533:	c3                   	ret    

c001d534 <ATAPI::close(int, int, void*)>:
c001d534:	83 ec 0c             	sub    esp,0xc
c001d537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d53b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d541:	85 c0                	test   eax,eax
c001d543:	74 0c                	je     c001d551 <ATAPI::close(int, int, void*)+0x1d>
c001d545:	83 ec 0c             	sub    esp,0xc
c001d548:	8b 10                	mov    edx,DWORD PTR [eax]
c001d54a:	50                   	push   eax
c001d54b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d54e:	83 c4 10             	add    esp,0x10
c001d551:	31 c0                	xor    eax,eax
c001d553:	83 c4 0c             	add    esp,0xc
c001d556:	c3                   	ret    
c001d557:	90                   	nop

c001d558 <ATAPI::ATAPI()>:
c001d558:	83 ec 0c             	sub    esp,0xc
c001d55b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d55f:	83 ec 04             	sub    esp,0x4
c001d562:	68 00 08 00 00       	push   0x800
c001d567:	68 19 34 02 c0       	push   0xc0023419
c001d56c:	50                   	push   eax
c001d56d:	e8 1c f8 fe ff       	call   c000cd8e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d572:	83 c4 10             	add    esp,0x10
c001d575:	ba 34 33 02 c0       	mov    edx,0xc0023334
c001d57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d57e:	89 10                	mov    DWORD PTR [eax],edx
c001d580:	90                   	nop
c001d581:	83 c4 0c             	add    esp,0xc
c001d584:	c3                   	ret    
c001d585:	90                   	nop

c001d586 <ATAPI::readyForCommand()>:
c001d586:	56                   	push   esi
c001d587:	53                   	push   ebx
c001d588:	53                   	push   ebx
c001d589:	31 db                	xor    ebx,ebx
c001d58b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d58f:	51                   	push   ecx
c001d590:	6a 0c                	push   0xc
c001d592:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d599:	50                   	push   eax
c001d59a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d5a0:	e8 a3 e8 ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001d5a5:	83 c4 10             	add    esp,0x10
c001d5a8:	a8 88                	test   al,0x88
c001d5aa:	74 25                	je     c001d5d1 <ATAPI::readyForCommand()+0x4b>
c001d5ac:	43                   	inc    ebx
c001d5ad:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d5b3:	7e da                	jle    c001d58f <ATAPI::readyForCommand()+0x9>
c001d5b5:	83 ec 0c             	sub    esp,0xc
c001d5b8:	68 5e 01 00 00       	push   0x15e
c001d5bd:	e8 2a 8e ff ff       	call   c00163ec <milliTenthSleep(unsigned int)>
c001d5c2:	83 c4 10             	add    esp,0x10
c001d5c5:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d5cb:	75 c2                	jne    c001d58f <ATAPI::readyForCommand()+0x9>
c001d5cd:	31 c0                	xor    eax,eax
c001d5cf:	eb 02                	jmp    c001d5d3 <ATAPI::readyForCommand()+0x4d>
c001d5d1:	b0 01                	mov    al,0x1
c001d5d3:	5a                   	pop    edx
c001d5d4:	5b                   	pop    ebx
c001d5d5:	5e                   	pop    esi
c001d5d6:	c3                   	ret    
c001d5d7:	90                   	nop

c001d5d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d5d8:	55                   	push   ebp
c001d5d9:	57                   	push   edi
c001d5da:	56                   	push   esi
c001d5db:	53                   	push   ebx
c001d5dc:	83 ec 20             	sub    esp,0x20
c001d5df:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d5e3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d5e7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d5eb:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d5ef:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d5f3:	6a 01                	push   0x1
c001d5f5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5fc:	50                   	push   eax
c001d5fd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d603:	e8 88 e9 ff ff       	call   c001bf90 <IDE::enableIRQs(unsigned char, bool)>
c001d608:	5e                   	pop    esi
c001d609:	58                   	pop    eax
c001d60a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d611:	50                   	push   eax
c001d612:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d618:	e8 45 e7 ff ff       	call   c001bd62 <IDE::prepareInterrupt(unsigned char)>
c001d61d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d620:	e8 61 ff ff ff       	call   c001d586 <ATAPI::readyForCommand()>
c001d625:	83 c4 10             	add    esp,0x10
c001d628:	84 c0                	test   al,al
c001d62a:	75 0a                	jne    c001d636 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d62c:	bb 01 00 00 00       	mov    ebx,0x1
c001d631:	e9 60 02 00 00       	jmp    c001d896 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d636:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d63c:	c1 e0 04             	shl    eax,0x4
c001d63f:	0f b6 c0             	movzx  eax,al
c001d642:	50                   	push   eax
c001d643:	6a 06                	push   0x6
c001d645:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d64c:	50                   	push   eax
c001d64d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d653:	e8 30 e7 ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d658:	6a 00                	push   0x0
c001d65a:	6a 01                	push   0x1
c001d65c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d663:	50                   	push   eax
c001d664:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d66a:	e8 19 e7 ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d66f:	83 c4 20             	add    esp,0x20
c001d672:	0f b6 c3             	movzx  eax,bl
c001d675:	0f b6 df             	movzx  ebx,bh
c001d678:	50                   	push   eax
c001d679:	6a 04                	push   0x4
c001d67b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d682:	50                   	push   eax
c001d683:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d689:	e8 fa e6 ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d68e:	53                   	push   ebx
c001d68f:	6a 05                	push   0x5
c001d691:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d698:	50                   	push   eax
c001d699:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d69f:	e8 e4 e6 ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6a4:	83 c4 20             	add    esp,0x20
c001d6a7:	68 a0 00 00 00       	push   0xa0
c001d6ac:	6a 07                	push   0x7
c001d6ae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6b5:	50                   	push   eax
c001d6b6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6bc:	e8 c7 e6 ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6c1:	83 c4 0c             	add    esp,0xc
c001d6c4:	6a 01                	push   0x1
c001d6c6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6cd:	50                   	push   eax
c001d6ce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6d4:	e8 97 f1 ff ff       	call   c001c870 <IDE::polling(unsigned char, unsigned int)>
c001d6d9:	83 c4 10             	add    esp,0x10
c001d6dc:	0f b6 d8             	movzx  ebx,al
c001d6df:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d6e5:	85 db                	test   ebx,ebx
c001d6e7:	74 20                	je     c001d709 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d6e9:	53                   	push   ebx
c001d6ea:	0f b6 c0             	movzx  eax,al
c001d6ed:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d6f4:	52                   	push   edx
c001d6f5:	50                   	push   eax
c001d6f6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6fc:	e8 b5 f0 ff ff       	call   c001c7b6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d701:	83 c4 10             	add    esp,0x10
c001d704:	e9 8d 01 00 00       	jmp    c001d896 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d709:	0f b6 c0             	movzx  eax,al
c001d70c:	53                   	push   ebx
c001d70d:	53                   	push   ebx
c001d70e:	50                   	push   eax
c001d70f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d715:	e8 5c e6 ff ff       	call   c001bd76 <IDE::getBase(unsigned char)>
c001d71a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d71e:	b9 06 00 00 00       	mov    ecx,0x6
c001d723:	89 c2                	mov    edx,eax
c001d725:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d728:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d72c:	83 c4 10             	add    esp,0x10
c001d72f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d734:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d738:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d73e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d745:	85 db                	test   ebx,ebx
c001d747:	0f 84 ec 00 00 00    	je     c001d839 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d74d:	51                   	push   ecx
c001d74e:	51                   	push   ecx
c001d74f:	52                   	push   edx
c001d750:	50                   	push   eax
c001d751:	e8 a0 e7 ff ff       	call   c001bef6 <IDE::waitInterrupt(unsigned char)>
c001d756:	83 c4 10             	add    esp,0x10
c001d759:	84 c0                	test   al,al
c001d75b:	0f 84 cb fe ff ff    	je     c001d62c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d761:	56                   	push   esi
c001d762:	56                   	push   esi
c001d763:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d76a:	50                   	push   eax
c001d76b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d771:	e8 ec e5 ff ff       	call   c001bd62 <IDE::prepareInterrupt(unsigned char)>
c001d776:	83 c4 0c             	add    esp,0xc
c001d779:	6a 04                	push   0x4
c001d77b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d782:	50                   	push   eax
c001d783:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d789:	e8 ba e6 ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001d78e:	83 c4 0c             	add    esp,0xc
c001d791:	89 c6                	mov    esi,eax
c001d793:	6a 05                	push   0x5
c001d795:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d79c:	50                   	push   eax
c001d79d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7a3:	e8 a0 e6 ff ff       	call   c001be48 <IDE::read(unsigned char, unsigned char)>
c001d7a8:	89 f1                	mov    ecx,esi
c001d7aa:	0f b6 c0             	movzx  eax,al
c001d7ad:	0f b6 f1             	movzx  esi,cl
c001d7b0:	c1 e0 08             	shl    eax,0x8
c001d7b3:	09 c6                	or     esi,eax
c001d7b5:	d1 fe                	sar    esi,1
c001d7b7:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d7bb:	83 c4 10             	add    esp,0x10
c001d7be:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d7c3:	74 41                	je     c001d806 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d7c5:	31 c9                	xor    ecx,ecx
c001d7c7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d7cd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d7d4:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d7d8:	75 0a                	jne    c001d7e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d7da:	01 c9                	add    ecx,ecx
c001d7dc:	01 cd                	add    ebp,ecx
c001d7de:	4b                   	dec    ebx
c001d7df:	e9 54 ff ff ff       	jmp    c001d738 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d7e4:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d7e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d7ed:	51                   	push   ecx
c001d7ee:	51                   	push   ecx
c001d7ef:	52                   	push   edx
c001d7f0:	50                   	push   eax
c001d7f1:	e8 80 e5 ff ff       	call   c001bd76 <IDE::getBase(unsigned char)>
c001d7f6:	89 c2                	mov    edx,eax
c001d7f8:	89 f0                	mov    eax,esi
c001d7fa:	66 ef                	out    dx,ax
c001d7fc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d800:	83 c4 10             	add    esp,0x10
c001d803:	41                   	inc    ecx
c001d804:	eb c1                	jmp    c001d7c7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d806:	31 f6                	xor    esi,esi
c001d808:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d80e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d815:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d819:	75 06                	jne    c001d821 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d81b:	01 f6                	add    esi,esi
c001d81d:	01 f5                	add    ebp,esi
c001d81f:	eb bd                	jmp    c001d7de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d821:	51                   	push   ecx
c001d822:	51                   	push   ecx
c001d823:	52                   	push   edx
c001d824:	50                   	push   eax
c001d825:	e8 4c e5 ff ff       	call   c001bd76 <IDE::getBase(unsigned char)>
c001d82a:	89 c2                	mov    edx,eax
c001d82c:	66 ed                	in     ax,dx
c001d82e:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d833:	83 c4 10             	add    esp,0x10
c001d836:	46                   	inc    esi
c001d837:	eb cf                	jmp    c001d808 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d839:	51                   	push   ecx
c001d83a:	51                   	push   ecx
c001d83b:	52                   	push   edx
c001d83c:	50                   	push   eax
c001d83d:	e8 b4 e6 ff ff       	call   c001bef6 <IDE::waitInterrupt(unsigned char)>
c001d842:	83 c4 10             	add    esp,0x10
c001d845:	84 c0                	test   al,al
c001d847:	0f 84 df fd ff ff    	je     c001d62c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d84d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d852:	52                   	push   edx
c001d853:	52                   	push   edx
c001d854:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d85b:	50                   	push   eax
c001d85c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d862:	e8 fb e4 ff ff       	call   c001bd62 <IDE::prepareInterrupt(unsigned char)>
c001d867:	83 c4 10             	add    esp,0x10
c001d86a:	50                   	push   eax
c001d86b:	50                   	push   eax
c001d86c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d873:	50                   	push   eax
c001d874:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d87a:	e8 f7 e4 ff ff       	call   c001bd76 <IDE::getBase(unsigned char)>
c001d87f:	8d 50 07             	lea    edx,[eax+0x7]
c001d882:	ec                   	in     al,dx
c001d883:	83 c4 10             	add    esp,0x10
c001d886:	a8 88                	test   al,0x88
c001d888:	74 0a                	je     c001d894 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d88a:	4b                   	dec    ebx
c001d88b:	75 dd                	jne    c001d86a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d88d:	bb 02 00 00 00       	mov    ebx,0x2
c001d892:	eb 02                	jmp    c001d896 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d894:	31 db                	xor    ebx,ebx
c001d896:	83 c4 1c             	add    esp,0x1c
c001d899:	89 d8                	mov    eax,ebx
c001d89b:	5b                   	pop    ebx
c001d89c:	5e                   	pop    esi
c001d89d:	5f                   	pop    edi
c001d89e:	5d                   	pop    ebp
c001d89f:	c3                   	ret    

c001d8a0 <ATAPI::diskRemoved()>:
c001d8a0:	53                   	push   ebx
c001d8a1:	83 ec 14             	sub    esp,0x14
c001d8a4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d8a8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d8af:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d8b5:	e8 70 04 ff ff       	call   c000dd2a <LogicalDisk::unmount()>
c001d8ba:	58                   	pop    eax
c001d8bb:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d8c1:	e8 46 0e ff ff       	call   c000e70c <VCache::writeWriteBuffer()>
c001d8c6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d8cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d8d0:	83 c4 18             	add    esp,0x18
c001d8d3:	5b                   	pop    ebx
c001d8d4:	e9 23 0e ff ff       	jmp    c000e6fc <VCache::invalidateReadBuffer()>
c001d8d9:	90                   	nop

c001d8da <ATAPI::eject()>:
c001d8da:	57                   	push   edi
c001d8db:	b9 03 00 00 00       	mov    ecx,0x3
c001d8e0:	53                   	push   ebx
c001d8e1:	83 ec 14             	sub    esp,0x14
c001d8e4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d8e8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d8ec:	fc                   	cld    
c001d8ed:	31 c0                	xor    eax,eax
c001d8ef:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d8f1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d8f6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d8fb:	50                   	push   eax
c001d8fc:	50                   	push   eax
c001d8fd:	6a 00                	push   0x0
c001d8ff:	6a 00                	push   0x0
c001d901:	6a 00                	push   0x0
c001d903:	6a 02                	push   0x2
c001d905:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d909:	50                   	push   eax
c001d90a:	53                   	push   ebx
c001d90b:	e8 c8 fc ff ff       	call   c001d5d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d910:	83 c4 14             	add    esp,0x14
c001d913:	53                   	push   ebx
c001d914:	e8 87 ff ff ff       	call   c001d8a0 <ATAPI::diskRemoved()>
c001d919:	83 c4 24             	add    esp,0x24
c001d91c:	31 c0                	xor    eax,eax
c001d91e:	5b                   	pop    ebx
c001d91f:	5f                   	pop    edi
c001d920:	c3                   	ret    
c001d921:	90                   	nop

c001d922 <ATAPI::diskInserted()>:
c001d922:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d926:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d92d:	c3                   	ret    

c001d92e <ATAPI::detectMedia()>:
c001d92e:	56                   	push   esi
c001d92f:	53                   	push   ebx
c001d930:	83 ec 28             	sub    esp,0x28
c001d933:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d937:	6a 0c                	push   0xc
c001d939:	6a 00                	push   0x0
c001d93b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d93f:	56                   	push   esi
c001d940:	e8 ab 2b fe ff       	call   c00004f0 <memset>
c001d945:	58                   	pop    eax
c001d946:	5a                   	pop    edx
c001d947:	6a 00                	push   0x0
c001d949:	6a 00                	push   0x0
c001d94b:	6a 00                	push   0x0
c001d94d:	6a 00                	push   0x0
c001d94f:	56                   	push   esi
c001d950:	53                   	push   ebx
c001d951:	e8 82 fc ff ff       	call   c001d5d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d956:	83 c4 1c             	add    esp,0x1c
c001d959:	6a 0c                	push   0xc
c001d95b:	6a 00                	push   0x0
c001d95d:	56                   	push   esi
c001d95e:	e8 8d 2b fe ff       	call   c00004f0 <memset>
c001d963:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d968:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d96d:	59                   	pop    ecx
c001d96e:	58                   	pop    eax
c001d96f:	6a 01                	push   0x1
c001d971:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d975:	50                   	push   eax
c001d976:	6a 00                	push   0x0
c001d978:	6a 12                	push   0x12
c001d97a:	56                   	push   esi
c001d97b:	53                   	push   ebx
c001d97c:	e8 57 fc ff ff       	call   c001d5d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d981:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d985:	83 c4 20             	add    esp,0x20
c001d988:	83 e0 7f             	and    eax,0x7f
c001d98b:	83 f8 70             	cmp    eax,0x70
c001d98e:	74 15                	je     c001d9a5 <ATAPI::detectMedia()+0x77>
c001d990:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d997:	75 0c                	jne    c001d9a5 <ATAPI::detectMedia()+0x77>
c001d999:	83 ec 0c             	sub    esp,0xc
c001d99c:	53                   	push   ebx
c001d99d:	e8 80 ff ff ff       	call   c001d922 <ATAPI::diskInserted()>
c001d9a2:	83 c4 10             	add    esp,0x10
c001d9a5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d9a9:	83 e0 0f             	and    eax,0xf
c001d9ac:	83 f8 02             	cmp    eax,0x2
c001d9af:	75 1b                	jne    c001d9cc <ATAPI::detectMedia()+0x9e>
c001d9b1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d9b6:	75 2d                	jne    c001d9e5 <ATAPI::detectMedia()+0xb7>
c001d9b8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d9bf:	74 24                	je     c001d9e5 <ATAPI::detectMedia()+0xb7>
c001d9c1:	83 ec 0c             	sub    esp,0xc
c001d9c4:	53                   	push   ebx
c001d9c5:	e8 d6 fe ff ff       	call   c001d8a0 <ATAPI::diskRemoved()>
c001d9ca:	eb 16                	jmp    c001d9e2 <ATAPI::detectMedia()+0xb4>
c001d9cc:	85 c0                	test   eax,eax
c001d9ce:	75 15                	jne    c001d9e5 <ATAPI::detectMedia()+0xb7>
c001d9d0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d9d7:	75 0c                	jne    c001d9e5 <ATAPI::detectMedia()+0xb7>
c001d9d9:	83 ec 0c             	sub    esp,0xc
c001d9dc:	53                   	push   ebx
c001d9dd:	e8 40 ff ff ff       	call   c001d922 <ATAPI::diskInserted()>
c001d9e2:	83 c4 10             	add    esp,0x10
c001d9e5:	83 c4 24             	add    esp,0x24
c001d9e8:	5b                   	pop    ebx
c001d9e9:	5e                   	pop    esi
c001d9ea:	c3                   	ret    
c001d9eb:	90                   	nop

c001d9ec <ATAPI::open(int, int, void*)>:
c001d9ec:	56                   	push   esi
c001d9ed:	53                   	push   ebx
c001d9ee:	50                   	push   eax
c001d9ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d9f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9fb:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001da01:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001da07:	c1 e0 06             	shl    eax,0x6
c001da0a:	01 d0                	add    eax,edx
c001da0c:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001da13:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001da19:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001da20:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001da2a:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001da30:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001da37:	6a 04                	push   0x4
c001da39:	6a 0c                	push   0xc
c001da3b:	51                   	push   ecx
c001da3c:	52                   	push   edx
c001da3d:	e8 46 e3 ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da42:	90                   	nop
c001da43:	90                   	nop
c001da44:	6a 00                	push   0x0
c001da46:	6a 0c                	push   0xc
c001da48:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da4f:	50                   	push   eax
c001da50:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da56:	e8 2d e3 ff ff       	call   c001bd88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da5b:	83 c4 14             	add    esp,0x14
c001da5e:	68 78 01 00 00       	push   0x178
c001da63:	e8 4e a0 fe ff       	call   c0007ab6 <malloc>
c001da68:	83 c4 0c             	add    esp,0xc
c001da6b:	89 c6                	mov    esi,eax
c001da6d:	6a 00                	push   0x0
c001da6f:	68 ff ff ff 7f       	push   0x7fffffff
c001da74:	6a 00                	push   0x0
c001da76:	6a 00                	push   0x0
c001da78:	53                   	push   ebx
c001da79:	68 cb 34 02 c0       	push   0xc00234cb
c001da7e:	50                   	push   eax
c001da7f:	e8 e4 00 ff ff       	call   c000db68 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001da84:	83 c4 14             	add    esp,0x14
c001da87:	56                   	push   esi
c001da88:	e8 9b 01 ff ff       	call   c000dc28 <LogicalDisk::assignDriveLetter()>
c001da8d:	5a                   	pop    edx
c001da8e:	0f be c0             	movsx  eax,al
c001da91:	59                   	pop    ecx
c001da92:	50                   	push   eax
c001da93:	68 1c 33 02 c0       	push   0xc002331c
c001da98:	e8 a8 ce fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001da9d:	58                   	pop    eax
c001da9e:	5a                   	pop    edx
c001da9f:	56                   	push   esi
c001daa0:	53                   	push   ebx
c001daa1:	e8 1c ef fe ff       	call   c000c9c2 <Device::addChild(Device*)>
c001daa6:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001daac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001daaf:	e8 42 f3 fe ff       	call   c000cdf6 <PhysicalDisk::startCache()>
c001dab4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001dabb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dabe:	e8 6b fe ff ff       	call   c001d92e <ATAPI::detectMedia()>
c001dac3:	83 c4 14             	add    esp,0x14
c001dac6:	31 c0                	xor    eax,eax
c001dac8:	5b                   	pop    ebx
c001dac9:	5e                   	pop    esi
c001daca:	c3                   	ret    
c001dacb:	90                   	nop

c001dacc <ATAPI::read(unsigned long long, int, void*)>:
c001dacc:	55                   	push   ebp
c001dacd:	57                   	push   edi
c001dace:	56                   	push   esi
c001dacf:	53                   	push   ebx
c001dad0:	83 ec 1c             	sub    esp,0x1c
c001dad3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dad7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001dadb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dadf:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dae6:	74 3c                	je     c001db24 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001dae8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001daec:	b9 03 00 00 00       	mov    ecx,0x3
c001daf1:	fc                   	cld    
c001daf2:	31 c0                	xor    eax,eax
c001daf4:	0f ce                	bswap  esi
c001daf6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001daf8:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001dafd:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001db01:	89 e8                	mov    eax,ebp
c001db03:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001db07:	50                   	push   eax
c001db08:	50                   	push   eax
c001db09:	55                   	push   ebp
c001db0a:	c1 e5 0b             	shl    ebp,0xb
c001db0d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001db11:	6a 00                	push   0x0
c001db13:	55                   	push   ebp
c001db14:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001db18:	50                   	push   eax
c001db19:	53                   	push   ebx
c001db1a:	e8 b9 fa ff ff       	call   c001d5d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001db1f:	83 c4 20             	add    esp,0x20
c001db22:	eb 1a                	jmp    c001db3e <ATAPI::read(unsigned long long, int, void*)+0x72>
c001db24:	83 ec 0c             	sub    esp,0xc
c001db27:	53                   	push   ebx
c001db28:	e8 01 fe ff ff       	call   c001d92e <ATAPI::detectMedia()>
c001db2d:	83 c4 10             	add    esp,0x10
c001db30:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001db37:	75 af                	jne    c001dae8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001db39:	b8 02 00 00 00       	mov    eax,0x2
c001db3e:	83 c4 1c             	add    esp,0x1c
c001db41:	5b                   	pop    ebx
c001db42:	5e                   	pop    esi
c001db43:	5f                   	pop    edi
c001db44:	5d                   	pop    ebp
c001db45:	c3                   	ret    

c001db46 <SATA::close(int, int, void*)>:
c001db46:	83 ec 0c             	sub    esp,0xc
c001db49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db4d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001db53:	85 c0                	test   eax,eax
c001db55:	74 0c                	je     c001db63 <SATA::close(int, int, void*)+0x1d>
c001db57:	83 ec 0c             	sub    esp,0xc
c001db5a:	8b 10                	mov    edx,DWORD PTR [eax]
c001db5c:	50                   	push   eax
c001db5d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001db60:	83 c4 10             	add    esp,0x10
c001db63:	31 c0                	xor    eax,eax
c001db65:	83 c4 0c             	add    esp,0xc
c001db68:	c3                   	ret    
c001db69:	90                   	nop

c001db6a <SATA::powerSaving(PowerSavingLevel)>:
c001db6a:	c3                   	ret    
c001db6b:	90                   	nop

c001db6c <SATA::open(int, int, void*)>:
c001db6c:	56                   	push   esi
c001db6d:	53                   	push   ebx
c001db6e:	50                   	push   eax
c001db6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db77:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001db81:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001db87:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001db91:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db95:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001db9f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001dba5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dbac:	e8 0e a2 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001dbb1:	89 c6                	mov    esi,eax
c001dbb3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dbb9:	81 c6 00 10 00 00    	add    esi,0x1000
c001dbbf:	e8 fb a1 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001dbc4:	39 c6                	cmp    esi,eax
c001dbc6:	74 10                	je     c001dbd8 <SATA::open(int, int, void*)+0x6c>
c001dbc8:	83 ec 0c             	sub    esp,0xc
c001dbcb:	68 64 33 02 c0       	push   0xc0023364
c001dbd0:	e8 46 3a ff ff       	call   c001161b <KePanic(char const*)>
c001dbd5:	83 c4 10             	add    esp,0x10
c001dbd8:	83 ec 0c             	sub    esp,0xc
c001dbdb:	6a 02                	push   0x2
c001dbdd:	e8 2b ba fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001dbe2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dbe8:	6a 03                	push   0x3
c001dbea:	50                   	push   eax
c001dbeb:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dbf1:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dbf7:	e8 24 c1 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001dbfc:	83 c4 14             	add    esp,0x14
c001dbff:	53                   	push   ebx
c001dc00:	e8 f1 f1 fe ff       	call   c000cdf6 <PhysicalDisk::startCache()>
c001dc05:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc08:	e8 2d 04 ff ff       	call   c000e03a <createPartitionsForDisk(PhysicalDisk*)>
c001dc0d:	83 c4 14             	add    esp,0x14
c001dc10:	31 c0                	xor    eax,eax
c001dc12:	5b                   	pop    ebx
c001dc13:	5e                   	pop    esi
c001dc14:	c3                   	ret    
c001dc15:	90                   	nop

c001dc16 <SATA::SATA()>:
c001dc16:	83 ec 0c             	sub    esp,0xc
c001dc19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc1d:	83 ec 04             	sub    esp,0x4
c001dc20:	68 00 02 00 00       	push   0x200
c001dc25:	68 78 33 02 c0       	push   0xc0023378
c001dc2a:	50                   	push   eax
c001dc2b:	e8 5e f1 fe ff       	call   c000cd8e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dc30:	83 c4 10             	add    esp,0x10
c001dc33:	ba e8 33 02 c0       	mov    edx,0xc00233e8
c001dc38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc3c:	89 10                	mov    DWORD PTR [eax],edx
c001dc3e:	90                   	nop
c001dc3f:	83 c4 0c             	add    esp,0xc
c001dc42:	c3                   	ret    
c001dc43:	90                   	nop

c001dc44 <SATA::access(unsigned long long, int, void*, bool)>:
c001dc44:	55                   	push   ebp
c001dc45:	57                   	push   edi
c001dc46:	56                   	push   esi
c001dc47:	53                   	push   ebx
c001dc48:	83 ec 2c             	sub    esp,0x2c
c001dc4b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dc4f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dc53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dc57:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dc5b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dc5f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dc64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dc68:	7e 10                	jle    c001dc7a <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001dc6a:	83 ec 0c             	sub    esp,0xc
c001dc6d:	68 88 33 02 c0       	push   0xc0023388
c001dc72:	e8 a4 39 ff ff       	call   c001161b <KePanic(char const*)>
c001dc77:	83 c4 10             	add    esp,0x10
c001dc7a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dc80:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dc86:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dc8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dc90:	89 d0                	mov    eax,edx
c001dc92:	c1 e0 07             	shl    eax,0x7
c001dc95:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dc99:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dca3:	51                   	push   ecx
c001dca4:	8d 42 02             	lea    eax,[edx+0x2]
c001dca7:	51                   	push   ecx
c001dca8:	c1 e0 07             	shl    eax,0x7
c001dcab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dcaf:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dcb3:	50                   	push   eax
c001dcb4:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dcba:	e8 91 ec ff ff       	call   c001c950 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dcbf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dcc3:	83 c4 10             	add    esp,0x10
c001dcc6:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001dccb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dccf:	0f 84 57 01 00 00    	je     c001de2c <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dcd5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dcd9:	c1 e0 09             	shl    eax,0x9
c001dcdc:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dce1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dce5:	74 0e                	je     c001dcf5 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001dce7:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001dced:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001dcf1:	89 c1                	mov    ecx,eax
c001dcf3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dcf5:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dcfb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dcff:	8d 42 02             	lea    eax,[edx+0x2]
c001dd02:	c1 e0 07             	shl    eax,0x7
c001dd05:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dd09:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd0b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dd11:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001dd17:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd1b:	c1 e1 05             	shl    ecx,0x5
c001dd1e:	01 c8                	add    eax,ecx
c001dd20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd24:	83 e1 01             	and    ecx,0x1
c001dd27:	89 ce                	mov    esi,ecx
c001dd29:	8a 08                	mov    cl,BYTE PTR [eax]
c001dd2b:	c1 e6 06             	shl    esi,0x6
c001dd2e:	83 e1 bf             	and    ecx,0xffffffbf
c001dd31:	09 f1                	or     ecx,esi
c001dd33:	88 08                	mov    BYTE PTR [eax],cl
c001dd35:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dd37:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001dd3d:	81 c9 05 00 01 00    	or     ecx,0x10005
c001dd43:	89 08                	mov    DWORD PTR [eax],ecx
c001dd45:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dd4b:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001dd51:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001dd57:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001dd5a:	50                   	push   eax
c001dd5b:	68 90 00 00 00       	push   0x90
c001dd60:	6a 00                	push   0x0
c001dd62:	56                   	push   esi
c001dd63:	e8 88 27 fe ff       	call   c00004f0 <memset>
c001dd68:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001dd6e:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001dd74:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dd78:	83 c4 10             	add    esp,0x10
c001dd7b:	48                   	dec    eax
c001dd7c:	25 ff ff 3f 00       	and    eax,0x3fffff
c001dd81:	89 c1                	mov    ecx,eax
c001dd83:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001dd89:	25 00 00 c0 ff       	and    eax,0xffc00000
c001dd8e:	09 c8                	or     eax,ecx
c001dd90:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001dd96:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001dd9c:	83 c8 80             	or     eax,0xffffff80
c001dd9f:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001dda5:	66 8b 06             	mov    ax,WORD PTR [esi]
c001dda8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ddac:	25 00 7f 00 00       	and    eax,0x7f00
c001ddb1:	0d 27 80 ff ff       	or     eax,0xffff8027
c001ddb6:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ddbb:	66 89 06             	mov    WORD PTR [esi],ax
c001ddbe:	b0 35                	mov    al,0x35
c001ddc0:	75 02                	jne    c001ddc4 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001ddc2:	b0 25                	mov    al,0x25
c001ddc4:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ddc7:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ddcb:	89 e8                	mov    eax,ebp
c001ddcd:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ddd1:	c1 e8 10             	shr    eax,0x10
c001ddd4:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ddd7:	89 e8                	mov    eax,ebp
c001ddd9:	c1 e8 18             	shr    eax,0x18
c001dddc:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001dddf:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001dde3:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001dde6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ddea:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001dded:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ddf1:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ddf5:	89 d6                	mov    esi,edx
c001ddf7:	31 c0                	xor    eax,eax
c001ddf9:	c1 e6 07             	shl    esi,0x7
c001ddfc:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001de00:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001de06:	80 e1 88             	and    cl,0x88
c001de09:	74 0a                	je     c001de15 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001de0b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001de10:	74 0a                	je     c001de1c <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001de12:	40                   	inc    eax
c001de13:	eb eb                	jmp    c001de00 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001de15:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001de1a:	75 17                	jne    c001de33 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001de1c:	83 ec 0c             	sub    esp,0xc
c001de1f:	68 c1 33 02 c0       	push   0xc00233c1
c001de24:	e8 1c cb fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001de29:	83 c4 10             	add    esp,0x10
c001de2c:	b8 01 00 00 00       	mov    eax,0x1
c001de31:	eb 5d                	jmp    c001de90 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001de33:	b8 01 00 00 00       	mov    eax,0x1
c001de38:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001de3c:	c1 e2 07             	shl    edx,0x7
c001de3f:	d3 e0                	shl    eax,cl
c001de41:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001de45:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001de4b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001de51:	85 c8                	test   eax,ecx
c001de53:	74 16                	je     c001de6b <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001de55:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001de5b:	0f ba e1 1e          	bt     ecx,0x1e
c001de5f:	73 ea                	jae    c001de4b <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001de61:	83 ec 0c             	sub    esp,0xc
c001de64:	68 cf 33 02 c0       	push   0xc00233cf
c001de69:	eb b9                	jmp    c001de24 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001de6b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001de71:	0f ba e0 1e          	bt     eax,0x1e
c001de75:	72 b5                	jb     c001de2c <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001de77:	31 c0                	xor    eax,eax
c001de79:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001de7e:	75 10                	jne    c001de90 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001de80:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001de86:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001de8a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001de8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001de90:	83 c4 2c             	add    esp,0x2c
c001de93:	5b                   	pop    ebx
c001de94:	5e                   	pop    esi
c001de95:	5f                   	pop    edi
c001de96:	5d                   	pop    ebp
c001de97:	c3                   	ret    

c001de98 <SATA::read(unsigned long long, int, void*)>:
c001de98:	55                   	push   ebp
c001de99:	57                   	push   edi
c001de9a:	56                   	push   esi
c001de9b:	be 04 00 00 00       	mov    esi,0x4
c001dea0:	53                   	push   ebx
c001dea1:	83 ec 0c             	sub    esp,0xc
c001dea4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001dea8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001deac:	8d 7b ff             	lea    edi,[ebx-0x1]
c001deaf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001deb3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001deb7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001debd:	0f 87 1a 02 00 00    	ja     c001e0dd <SATA::read(unsigned long long, int, void*)+0x245>
c001dec3:	be 06 00 00 00       	mov    esi,0x6
c001dec8:	85 c9                	test   ecx,ecx
c001deca:	0f 84 0d 02 00 00    	je     c001e0dd <SATA::read(unsigned long long, int, void*)+0x245>
c001ded0:	56                   	push   esi
c001ded1:	56                   	push   esi
c001ded2:	6a 00                	push   0x0
c001ded4:	51                   	push   ecx
c001ded5:	53                   	push   ebx
c001ded6:	52                   	push   edx
c001ded7:	50                   	push   eax
c001ded8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dedc:	e8 63 fd ff ff       	call   c001dc44 <SATA::access(unsigned long long, int, void*, bool)>
c001dee1:	83 c4 20             	add    esp,0x20
c001dee4:	89 c6                	mov    esi,eax
c001dee6:	85 c0                	test   eax,eax
c001dee8:	0f 85 ea 01 00 00    	jne    c001e0d8 <SATA::read(unsigned long long, int, void*)+0x240>
c001deee:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001def4:	bb 0a 00 00 00       	mov    ebx,0xa
c001def9:	50                   	push   eax
c001defa:	50                   	push   eax
c001defb:	6a 0f                	push   0xf
c001defd:	6a 00                	push   0x0
c001deff:	e8 75 f2 ff ff       	call   c001d179 <combineColours(unsigned char, unsigned char)>
c001df04:	5a                   	pop    edx
c001df05:	0f b6 c0             	movzx  eax,al
c001df08:	59                   	pop    ecx
c001df09:	b9 10 27 00 00       	mov    ecx,0x2710
c001df0e:	50                   	push   eax
c001df0f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df14:	99                   	cdq    
c001df15:	f7 f9                	idiv   ecx
c001df17:	99                   	cdq    
c001df18:	f7 fb                	idiv   ebx
c001df1a:	8d 42 30             	lea    eax,[edx+0x30]
c001df1d:	0f b6 c0             	movzx  eax,al
c001df20:	50                   	push   eax
c001df21:	e8 42 f2 ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001df26:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001df2c:	5f                   	pop    edi
c001df2d:	5d                   	pop    ebp
c001df2e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001df33:	6a 0f                	push   0xf
c001df35:	6a 00                	push   0x0
c001df37:	e8 3d f2 ff ff       	call   c001d179 <combineColours(unsigned char, unsigned char)>
c001df3c:	5a                   	pop    edx
c001df3d:	0f b6 c0             	movzx  eax,al
c001df40:	59                   	pop    ecx
c001df41:	50                   	push   eax
c001df42:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df47:	99                   	cdq    
c001df48:	f7 fd                	idiv   ebp
c001df4a:	99                   	cdq    
c001df4b:	f7 fb                	idiv   ebx
c001df4d:	8d 42 30             	lea    eax,[edx+0x30]
c001df50:	0f b6 c0             	movzx  eax,al
c001df53:	50                   	push   eax
c001df54:	e8 0f f2 ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001df59:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001df5f:	5f                   	pop    edi
c001df60:	bf 64 00 00 00       	mov    edi,0x64
c001df65:	58                   	pop    eax
c001df66:	6a 0f                	push   0xf
c001df68:	6a 00                	push   0x0
c001df6a:	e8 0a f2 ff ff       	call   c001d179 <combineColours(unsigned char, unsigned char)>
c001df6f:	5a                   	pop    edx
c001df70:	0f b6 c0             	movzx  eax,al
c001df73:	59                   	pop    ecx
c001df74:	50                   	push   eax
c001df75:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df7a:	99                   	cdq    
c001df7b:	f7 ff                	idiv   edi
c001df7d:	99                   	cdq    
c001df7e:	f7 fb                	idiv   ebx
c001df80:	8d 42 30             	lea    eax,[edx+0x30]
c001df83:	0f b6 c0             	movzx  eax,al
c001df86:	50                   	push   eax
c001df87:	e8 dc f1 ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001df8c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001df92:	58                   	pop    eax
c001df93:	5a                   	pop    edx
c001df94:	6a 0f                	push   0xf
c001df96:	6a 00                	push   0x0
c001df98:	e8 dc f1 ff ff       	call   c001d179 <combineColours(unsigned char, unsigned char)>
c001df9d:	59                   	pop    ecx
c001df9e:	0f b6 c0             	movzx  eax,al
c001dfa1:	5a                   	pop    edx
c001dfa2:	50                   	push   eax
c001dfa3:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfa8:	99                   	cdq    
c001dfa9:	f7 fb                	idiv   ebx
c001dfab:	99                   	cdq    
c001dfac:	f7 fb                	idiv   ebx
c001dfae:	8d 42 30             	lea    eax,[edx+0x30]
c001dfb1:	0f b6 c0             	movzx  eax,al
c001dfb4:	50                   	push   eax
c001dfb5:	e8 ae f1 ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001dfba:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dfc0:	59                   	pop    ecx
c001dfc1:	58                   	pop    eax
c001dfc2:	6a 0f                	push   0xf
c001dfc4:	6a 00                	push   0x0
c001dfc6:	e8 ae f1 ff ff       	call   c001d179 <combineColours(unsigned char, unsigned char)>
c001dfcb:	5a                   	pop    edx
c001dfcc:	0f b6 c0             	movzx  eax,al
c001dfcf:	59                   	pop    ecx
c001dfd0:	50                   	push   eax
c001dfd1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfd6:	99                   	cdq    
c001dfd7:	f7 fb                	idiv   ebx
c001dfd9:	8d 42 30             	lea    eax,[edx+0x30]
c001dfdc:	0f b6 c0             	movzx  eax,al
c001dfdf:	50                   	push   eax
c001dfe0:	e8 83 f1 ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001dfe5:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dfeb:	58                   	pop    eax
c001dfec:	5a                   	pop    edx
c001dfed:	6a 0f                	push   0xf
c001dfef:	6a 00                	push   0x0
c001dff1:	e8 83 f1 ff ff       	call   c001d179 <combineColours(unsigned char, unsigned char)>
c001dff6:	59                   	pop    ecx
c001dff7:	0f b6 c0             	movzx  eax,al
c001dffa:	5a                   	pop    edx
c001dffb:	b9 10 27 00 00       	mov    ecx,0x2710
c001e000:	50                   	push   eax
c001e001:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e006:	99                   	cdq    
c001e007:	f7 f9                	idiv   ecx
c001e009:	99                   	cdq    
c001e00a:	f7 fb                	idiv   ebx
c001e00c:	8d 42 30             	lea    eax,[edx+0x30]
c001e00f:	0f b6 c0             	movzx  eax,al
c001e012:	50                   	push   eax
c001e013:	e8 50 f1 ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001e018:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e01e:	59                   	pop    ecx
c001e01f:	58                   	pop    eax
c001e020:	6a 0f                	push   0xf
c001e022:	6a 00                	push   0x0
c001e024:	e8 50 f1 ff ff       	call   c001d179 <combineColours(unsigned char, unsigned char)>
c001e029:	5a                   	pop    edx
c001e02a:	0f b6 c0             	movzx  eax,al
c001e02d:	59                   	pop    ecx
c001e02e:	50                   	push   eax
c001e02f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e034:	99                   	cdq    
c001e035:	f7 fd                	idiv   ebp
c001e037:	99                   	cdq    
c001e038:	f7 fb                	idiv   ebx
c001e03a:	8d 42 30             	lea    eax,[edx+0x30]
c001e03d:	0f b6 c0             	movzx  eax,al
c001e040:	50                   	push   eax
c001e041:	e8 22 f1 ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001e046:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e04c:	5d                   	pop    ebp
c001e04d:	58                   	pop    eax
c001e04e:	6a 0f                	push   0xf
c001e050:	6a 00                	push   0x0
c001e052:	e8 22 f1 ff ff       	call   c001d179 <combineColours(unsigned char, unsigned char)>
c001e057:	5a                   	pop    edx
c001e058:	0f b6 c0             	movzx  eax,al
c001e05b:	59                   	pop    ecx
c001e05c:	50                   	push   eax
c001e05d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e062:	99                   	cdq    
c001e063:	f7 ff                	idiv   edi
c001e065:	99                   	cdq    
c001e066:	f7 fb                	idiv   ebx
c001e068:	8d 42 30             	lea    eax,[edx+0x30]
c001e06b:	0f b6 c0             	movzx  eax,al
c001e06e:	50                   	push   eax
c001e06f:	e8 f4 f0 ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001e074:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e07a:	5f                   	pop    edi
c001e07b:	5d                   	pop    ebp
c001e07c:	6a 0f                	push   0xf
c001e07e:	6a 00                	push   0x0
c001e080:	e8 f4 f0 ff ff       	call   c001d179 <combineColours(unsigned char, unsigned char)>
c001e085:	5a                   	pop    edx
c001e086:	0f b6 c0             	movzx  eax,al
c001e089:	59                   	pop    ecx
c001e08a:	50                   	push   eax
c001e08b:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e090:	99                   	cdq    
c001e091:	f7 fb                	idiv   ebx
c001e093:	99                   	cdq    
c001e094:	f7 fb                	idiv   ebx
c001e096:	8d 42 30             	lea    eax,[edx+0x30]
c001e099:	0f b6 c0             	movzx  eax,al
c001e09c:	50                   	push   eax
c001e09d:	e8 c6 f0 ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001e0a2:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e0a8:	5f                   	pop    edi
c001e0a9:	5d                   	pop    ebp
c001e0aa:	6a 0f                	push   0xf
c001e0ac:	6a 00                	push   0x0
c001e0ae:	e8 c6 f0 ff ff       	call   c001d179 <combineColours(unsigned char, unsigned char)>
c001e0b3:	5a                   	pop    edx
c001e0b4:	0f b6 c0             	movzx  eax,al
c001e0b7:	59                   	pop    ecx
c001e0b8:	50                   	push   eax
c001e0b9:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0be:	99                   	cdq    
c001e0bf:	f7 fb                	idiv   ebx
c001e0c1:	83 c2 30             	add    edx,0x30
c001e0c4:	0f b6 d2             	movzx  edx,dl
c001e0c7:	52                   	push   edx
c001e0c8:	e8 9b f0 ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001e0cd:	83 c4 10             	add    esp,0x10
c001e0d0:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e0d6:	eb 05                	jmp    c001e0dd <SATA::read(unsigned long long, int, void*)+0x245>
c001e0d8:	be 01 00 00 00       	mov    esi,0x1
c001e0dd:	83 c4 0c             	add    esp,0xc
c001e0e0:	89 f0                	mov    eax,esi
c001e0e2:	5b                   	pop    ebx
c001e0e3:	5e                   	pop    esi
c001e0e4:	5f                   	pop    edi
c001e0e5:	5d                   	pop    ebp
c001e0e6:	c3                   	ret    
c001e0e7:	90                   	nop

c001e0e8 <SATA::write(unsigned long long, int, void*)>:
c001e0e8:	55                   	push   ebp
c001e0e9:	b8 04 00 00 00       	mov    eax,0x4
c001e0ee:	57                   	push   edi
c001e0ef:	56                   	push   esi
c001e0f0:	53                   	push   ebx
c001e0f1:	83 ec 1c             	sub    esp,0x1c
c001e0f4:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e0f8:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e0fc:	8d 75 ff             	lea    esi,[ebp-0x1]
c001e0ff:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e103:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001e107:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e10d:	0f 87 32 02 00 00    	ja     c001e345 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e113:	b8 06 00 00 00       	mov    eax,0x6
c001e118:	85 ff                	test   edi,edi
c001e11a:	0f 84 25 02 00 00    	je     c001e345 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e120:	89 ee                	mov    esi,ebp
c001e122:	c1 e6 09             	shl    esi,0x9
c001e125:	01 fe                	add    esi,edi
c001e127:	89 c8                	mov    eax,ecx
c001e129:	89 da                	mov    edx,ebx
c001e12b:	83 c0 01             	add    eax,0x1
c001e12e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e132:	83 d2 00             	adc    edx,0x0
c001e135:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e139:	50                   	push   eax
c001e13a:	50                   	push   eax
c001e13b:	6a 01                	push   0x1
c001e13d:	57                   	push   edi
c001e13e:	81 c7 00 02 00 00    	add    edi,0x200
c001e144:	6a 01                	push   0x1
c001e146:	53                   	push   ebx
c001e147:	51                   	push   ecx
c001e148:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e14c:	e8 f3 fa ff ff       	call   c001dc44 <SATA::access(unsigned long long, int, void*, bool)>
c001e151:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e155:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e159:	83 c4 20             	add    esp,0x20
c001e15c:	39 f7                	cmp    edi,esi
c001e15e:	75 c7                	jne    c001e127 <SATA::write(unsigned long long, int, void*)+0x3f>
c001e160:	bb 0a 00 00 00       	mov    ebx,0xa
c001e165:	01 2d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebp
c001e16b:	bd 10 27 00 00       	mov    ebp,0x2710
c001e170:	50                   	push   eax
c001e171:	50                   	push   eax
c001e172:	6a 0f                	push   0xf
c001e174:	6a 00                	push   0x0
c001e176:	e8 fe ef ff ff       	call   c001d179 <combineColours(unsigned char, unsigned char)>
c001e17b:	5a                   	pop    edx
c001e17c:	0f b6 c0             	movzx  eax,al
c001e17f:	59                   	pop    ecx
c001e180:	50                   	push   eax
c001e181:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e186:	99                   	cdq    
c001e187:	f7 fd                	idiv   ebp
c001e189:	99                   	cdq    
c001e18a:	f7 fb                	idiv   ebx
c001e18c:	8d 42 30             	lea    eax,[edx+0x30]
c001e18f:	0f b6 c0             	movzx  eax,al
c001e192:	50                   	push   eax
c001e193:	e8 d0 ef ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001e198:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e19e:	5e                   	pop    esi
c001e19f:	5f                   	pop    edi
c001e1a0:	bf e8 03 00 00       	mov    edi,0x3e8
c001e1a5:	6a 0f                	push   0xf
c001e1a7:	6a 00                	push   0x0
c001e1a9:	e8 cb ef ff ff       	call   c001d179 <combineColours(unsigned char, unsigned char)>
c001e1ae:	5a                   	pop    edx
c001e1af:	0f b6 c0             	movzx  eax,al
c001e1b2:	59                   	pop    ecx
c001e1b3:	50                   	push   eax
c001e1b4:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1b9:	99                   	cdq    
c001e1ba:	f7 ff                	idiv   edi
c001e1bc:	99                   	cdq    
c001e1bd:	f7 fb                	idiv   ebx
c001e1bf:	8d 42 30             	lea    eax,[edx+0x30]
c001e1c2:	0f b6 c0             	movzx  eax,al
c001e1c5:	50                   	push   eax
c001e1c6:	e8 9d ef ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001e1cb:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e1d1:	5e                   	pop    esi
c001e1d2:	be 64 00 00 00       	mov    esi,0x64
c001e1d7:	58                   	pop    eax
c001e1d8:	6a 0f                	push   0xf
c001e1da:	6a 00                	push   0x0
c001e1dc:	e8 98 ef ff ff       	call   c001d179 <combineColours(unsigned char, unsigned char)>
c001e1e1:	5a                   	pop    edx
c001e1e2:	0f b6 c0             	movzx  eax,al
c001e1e5:	59                   	pop    ecx
c001e1e6:	50                   	push   eax
c001e1e7:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1ec:	99                   	cdq    
c001e1ed:	f7 fe                	idiv   esi
c001e1ef:	99                   	cdq    
c001e1f0:	f7 fb                	idiv   ebx
c001e1f2:	8d 42 30             	lea    eax,[edx+0x30]
c001e1f5:	0f b6 c0             	movzx  eax,al
c001e1f8:	50                   	push   eax
c001e1f9:	e8 6a ef ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001e1fe:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e204:	58                   	pop    eax
c001e205:	5a                   	pop    edx
c001e206:	6a 0f                	push   0xf
c001e208:	6a 00                	push   0x0
c001e20a:	e8 6a ef ff ff       	call   c001d179 <combineColours(unsigned char, unsigned char)>
c001e20f:	59                   	pop    ecx
c001e210:	0f b6 c0             	movzx  eax,al
c001e213:	5a                   	pop    edx
c001e214:	50                   	push   eax
c001e215:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e21a:	99                   	cdq    
c001e21b:	f7 fb                	idiv   ebx
c001e21d:	99                   	cdq    
c001e21e:	f7 fb                	idiv   ebx
c001e220:	8d 42 30             	lea    eax,[edx+0x30]
c001e223:	0f b6 c0             	movzx  eax,al
c001e226:	50                   	push   eax
c001e227:	e8 3c ef ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001e22c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e232:	59                   	pop    ecx
c001e233:	58                   	pop    eax
c001e234:	6a 0f                	push   0xf
c001e236:	6a 00                	push   0x0
c001e238:	e8 3c ef ff ff       	call   c001d179 <combineColours(unsigned char, unsigned char)>
c001e23d:	5a                   	pop    edx
c001e23e:	0f b6 c0             	movzx  eax,al
c001e241:	59                   	pop    ecx
c001e242:	50                   	push   eax
c001e243:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e248:	99                   	cdq    
c001e249:	f7 fb                	idiv   ebx
c001e24b:	83 c2 30             	add    edx,0x30
c001e24e:	0f b6 d2             	movzx  edx,dl
c001e251:	52                   	push   edx
c001e252:	e8 11 ef ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001e257:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e25d:	58                   	pop    eax
c001e25e:	5a                   	pop    edx
c001e25f:	6a 0f                	push   0xf
c001e261:	6a 00                	push   0x0
c001e263:	e8 11 ef ff ff       	call   c001d179 <combineColours(unsigned char, unsigned char)>
c001e268:	59                   	pop    ecx
c001e269:	0f b6 c0             	movzx  eax,al
c001e26c:	5a                   	pop    edx
c001e26d:	50                   	push   eax
c001e26e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e273:	99                   	cdq    
c001e274:	f7 fd                	idiv   ebp
c001e276:	99                   	cdq    
c001e277:	f7 fb                	idiv   ebx
c001e279:	8d 42 30             	lea    eax,[edx+0x30]
c001e27c:	0f b6 c0             	movzx  eax,al
c001e27f:	50                   	push   eax
c001e280:	e8 e3 ee ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001e285:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e28b:	59                   	pop    ecx
c001e28c:	5d                   	pop    ebp
c001e28d:	6a 0f                	push   0xf
c001e28f:	6a 00                	push   0x0
c001e291:	e8 e3 ee ff ff       	call   c001d179 <combineColours(unsigned char, unsigned char)>
c001e296:	5a                   	pop    edx
c001e297:	0f b6 c0             	movzx  eax,al
c001e29a:	59                   	pop    ecx
c001e29b:	50                   	push   eax
c001e29c:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2a1:	99                   	cdq    
c001e2a2:	f7 ff                	idiv   edi
c001e2a4:	99                   	cdq    
c001e2a5:	f7 fb                	idiv   ebx
c001e2a7:	8d 42 30             	lea    eax,[edx+0x30]
c001e2aa:	0f b6 c0             	movzx  eax,al
c001e2ad:	50                   	push   eax
c001e2ae:	e8 b5 ee ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001e2b3:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e2b9:	5f                   	pop    edi
c001e2ba:	5d                   	pop    ebp
c001e2bb:	6a 0f                	push   0xf
c001e2bd:	6a 00                	push   0x0
c001e2bf:	e8 b5 ee ff ff       	call   c001d179 <combineColours(unsigned char, unsigned char)>
c001e2c4:	5a                   	pop    edx
c001e2c5:	0f b6 c0             	movzx  eax,al
c001e2c8:	59                   	pop    ecx
c001e2c9:	50                   	push   eax
c001e2ca:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2cf:	99                   	cdq    
c001e2d0:	f7 fe                	idiv   esi
c001e2d2:	99                   	cdq    
c001e2d3:	f7 fb                	idiv   ebx
c001e2d5:	8d 42 30             	lea    eax,[edx+0x30]
c001e2d8:	0f b6 c0             	movzx  eax,al
c001e2db:	50                   	push   eax
c001e2dc:	e8 87 ee ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001e2e1:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e2e7:	5e                   	pop    esi
c001e2e8:	5f                   	pop    edi
c001e2e9:	6a 0f                	push   0xf
c001e2eb:	6a 00                	push   0x0
c001e2ed:	e8 87 ee ff ff       	call   c001d179 <combineColours(unsigned char, unsigned char)>
c001e2f2:	5d                   	pop    ebp
c001e2f3:	0f b6 c0             	movzx  eax,al
c001e2f6:	5a                   	pop    edx
c001e2f7:	50                   	push   eax
c001e2f8:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2fd:	99                   	cdq    
c001e2fe:	f7 fb                	idiv   ebx
c001e300:	99                   	cdq    
c001e301:	f7 fb                	idiv   ebx
c001e303:	8d 42 30             	lea    eax,[edx+0x30]
c001e306:	0f b6 c0             	movzx  eax,al
c001e309:	50                   	push   eax
c001e30a:	e8 59 ee ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001e30f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e315:	59                   	pop    ecx
c001e316:	5e                   	pop    esi
c001e317:	6a 0f                	push   0xf
c001e319:	6a 00                	push   0x0
c001e31b:	e8 59 ee ff ff       	call   c001d179 <combineColours(unsigned char, unsigned char)>
c001e320:	5f                   	pop    edi
c001e321:	0f b6 c0             	movzx  eax,al
c001e324:	5d                   	pop    ebp
c001e325:	50                   	push   eax
c001e326:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e32b:	99                   	cdq    
c001e32c:	f7 fb                	idiv   ebx
c001e32e:	83 c2 30             	add    edx,0x30
c001e331:	0f b6 d2             	movzx  edx,dl
c001e334:	52                   	push   edx
c001e335:	e8 2e ee ff ff       	call   c001d168 <combineCharAndColour(char, unsigned char)>
c001e33a:	83 c4 10             	add    esp,0x10
c001e33d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e343:	31 c0                	xor    eax,eax
c001e345:	83 c4 1c             	add    esp,0x1c
c001e348:	5b                   	pop    ebx
c001e349:	5e                   	pop    esi
c001e34a:	5f                   	pop    edi
c001e34b:	5d                   	pop    ebp
c001e34c:	c3                   	ret    
c001e34d:	90                   	nop

c001e34e <SATAPI::write(unsigned long long, int, void*)>:
c001e34e:	b8 03 00 00 00       	mov    eax,0x3
c001e353:	c3                   	ret    

c001e354 <SATAPI::close(int, int, void*)>:
c001e354:	83 ec 0c             	sub    esp,0xc
c001e357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e35b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e361:	85 c0                	test   eax,eax
c001e363:	74 0c                	je     c001e371 <SATAPI::close(int, int, void*)+0x1d>
c001e365:	83 ec 0c             	sub    esp,0xc
c001e368:	8b 10                	mov    edx,DWORD PTR [eax]
c001e36a:	50                   	push   eax
c001e36b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e36e:	83 c4 10             	add    esp,0x10
c001e371:	31 c0                	xor    eax,eax
c001e373:	83 c4 0c             	add    esp,0xc
c001e376:	c3                   	ret    
c001e377:	90                   	nop

c001e378 <SATAPI::SATAPI()>:
c001e378:	83 ec 0c             	sub    esp,0xc
c001e37b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e37f:	83 ec 04             	sub    esp,0x4
c001e382:	68 00 08 00 00       	push   0x800
c001e387:	68 18 34 02 c0       	push   0xc0023418
c001e38c:	50                   	push   eax
c001e38d:	e8 fc e9 fe ff       	call   c000cd8e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e392:	83 c4 10             	add    esp,0x10
c001e395:	ba 0c 35 02 c0       	mov    edx,0xc002350c
c001e39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e39e:	89 10                	mov    DWORD PTR [eax],edx
c001e3a0:	90                   	nop
c001e3a1:	83 c4 0c             	add    esp,0xc
c001e3a4:	c3                   	ret    
c001e3a5:	90                   	nop

c001e3a6 <SATAPI::diskRemoved()>:
c001e3a6:	c3                   	ret    
c001e3a7:	90                   	nop

c001e3a8 <SATAPI::diskInserted()>:
c001e3a8:	83 ec 18             	sub    esp,0x18
c001e3ab:	68 24 34 02 c0       	push   0xc0023424
c001e3b0:	e8 90 c5 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e3b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e3b9:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e3c0:	83 c4 1c             	add    esp,0x1c
c001e3c3:	c3                   	ret    

c001e3c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e3c4:	55                   	push   ebp
c001e3c5:	57                   	push   edi
c001e3c6:	56                   	push   esi
c001e3c7:	53                   	push   ebx
c001e3c8:	83 ec 34             	sub    esp,0x34
c001e3cb:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e3cf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e3d3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001e3d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e3db:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001e3df:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e3e5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e3eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e3ef:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e3f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e3f9:	83 c0 02             	add    eax,0x2
c001e3fc:	c1 e0 07             	shl    eax,0x7
c001e3ff:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e403:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e407:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e40b:	c1 e0 07             	shl    eax,0x7
c001e40e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e412:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e416:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e420:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e424:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e42a:	e8 21 e5 ff ff       	call   c001c950 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e42f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e433:	83 c4 10             	add    esp,0x10
c001e436:	b8 01 00 00 00       	mov    eax,0x1
c001e43b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e440:	0f 84 53 02 00 00    	je     c001e699 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e446:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e44c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e450:	8b 00                	mov    eax,DWORD PTR [eax]
c001e452:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e458:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e45e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e462:	c1 e1 05             	shl    ecx,0x5
c001e465:	01 c8                	add    eax,ecx
c001e467:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e469:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e46f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e475:	89 08                	mov    DWORD PTR [eax],ecx
c001e477:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e47d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e483:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e489:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e48c:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e48f:	50                   	push   eax
c001e490:	68 90 00 00 00       	push   0x90
c001e495:	6a 00                	push   0x0
c001e497:	53                   	push   ebx
c001e498:	e8 53 20 fe ff       	call   c00004f0 <memset>
c001e49d:	b9 0c 00 00 00       	mov    ecx,0xc
c001e4a2:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e4a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e4a8:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e4ae:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e4b2:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e4b8:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e4bc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e4c0:	48                   	dec    eax
c001e4c1:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e4c6:	89 c1                	mov    ecx,eax
c001e4c8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e4ce:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e4d3:	09 c8                	or     eax,ecx
c001e4d5:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e4db:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e4e1:	83 c8 80             	or     eax,0xffffff80
c001e4e4:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e4ea:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e4ed:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e4f1:	25 00 7f 00 00       	and    eax,0x7f00
c001e4f6:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e4fa:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e4ff:	66 89 03             	mov    WORD PTR [ebx],ax
c001e502:	89 d0                	mov    eax,edx
c001e504:	c1 ea 18             	shr    edx,0x18
c001e507:	c1 e8 10             	shr    eax,0x10
c001e50a:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e50d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e510:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e514:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e517:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e51b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e51e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e522:	83 c4 10             	add    esp,0x10
c001e525:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e529:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e52d:	31 c0                	xor    eax,eax
c001e52f:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e535:	80 e1 88             	and    cl,0x88
c001e538:	74 0a                	je     c001e544 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e53a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e53f:	74 0a                	je     c001e54b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e541:	40                   	inc    eax
c001e542:	eb eb                	jmp    c001e52f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e544:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e549:	75 43                	jne    c001e58e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e54b:	83 ec 0c             	sub    esp,0xc
c001e54e:	68 3c 34 02 c0       	push   0xc002343c
c001e553:	e8 ed c3 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e558:	58                   	pop    eax
c001e559:	5a                   	pop    edx
c001e55a:	68 51 34 02 c0       	push   0xc0023451
c001e55f:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e565:	e8 3c a5 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001e56a:	59                   	pop    ecx
c001e56b:	5b                   	pop    ebx
c001e56c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e570:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e576:	e8 6f e4 ff ff       	call   c001c9ea <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e57b:	5e                   	pop    esi
c001e57c:	5f                   	pop    edi
c001e57d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e581:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e587:	e8 3e e4 ff ff       	call   c001c9ca <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e58c:	eb 48                	jmp    c001e5d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e58e:	be 01 00 00 00       	mov    esi,0x1
c001e593:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e597:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e59b:	d3 e6                	shl    esi,cl
c001e59d:	c1 e7 07             	shl    edi,0x7
c001e5a0:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e5a6:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e5ab:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e5af:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e5b5:	85 c6                	test   esi,eax
c001e5b7:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e5bd:	0f 84 a3 00 00 00    	je     c001e666 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e5c3:	0f ba e0 1e          	bt     eax,0x1e
c001e5c7:	73 1a                	jae    c001e5e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e5c9:	83 ec 0c             	sub    esp,0xc
c001e5cc:	68 63 34 02 c0       	push   0xc0023463
c001e5d1:	e8 6f c3 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e5d6:	83 c4 10             	add    esp,0x10
c001e5d9:	b8 01 00 00 00       	mov    eax,0x1
c001e5de:	e9 b6 00 00 00       	jmp    c001e699 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e5e3:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e5e9:	83 f8 0d             	cmp    eax,0xd
c001e5ec:	77 0a                	ja     c001e5f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e5ee:	83 ec 0c             	sub    esp,0xc
c001e5f1:	68 c8 00 00 00       	push   0xc8
c001e5f6:	eb 28                	jmp    c001e620 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e5f8:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e5fe:	83 f8 0d             	cmp    eax,0xd
c001e601:	77 0a                	ja     c001e60d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e603:	83 ec 0c             	sub    esp,0xc
c001e606:	68 58 02 00 00       	push   0x258
c001e60b:	eb 13                	jmp    c001e620 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e60d:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e613:	83 f8 06             	cmp    eax,0x6
c001e616:	77 10                	ja     c001e628 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e618:	83 ec 0c             	sub    esp,0xc
c001e61b:	68 dc 05 00 00       	push   0x5dc
c001e620:	e8 c7 7d ff ff       	call   c00163ec <milliTenthSleep(unsigned int)>
c001e625:	83 c4 10             	add    esp,0x10
c001e628:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e62c:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e62f:	75 06                	jne    c001e637 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e631:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e635:	74 15                	je     c001e64c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e637:	83 fb 06             	cmp    ebx,0x6
c001e63a:	77 10                	ja     c001e64c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e63c:	83 ec 0c             	sub    esp,0xc
c001e63f:	68 c4 09 00 00       	push   0x9c4
c001e644:	e8 a3 7d ff ff       	call   c00163ec <milliTenthSleep(unsigned int)>
c001e649:	83 c4 10             	add    esp,0x10
c001e64c:	43                   	inc    ebx
c001e64d:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e653:	0f 85 56 ff ff ff    	jne    c001e5af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e659:	83 ec 0c             	sub    esp,0xc
c001e65c:	68 76 34 02 c0       	push   0xc0023476
c001e661:	e9 6b ff ff ff       	jmp    c001e5d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e666:	0f ba e0 1e          	bt     eax,0x1e
c001e66a:	73 0d                	jae    c001e679 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e66c:	83 ec 0c             	sub    esp,0xc
c001e66f:	68 8a 34 02 c0       	push   0xc002348a
c001e674:	e9 58 ff ff ff       	jmp    c001e5d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e679:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e67e:	74 17                	je     c001e697 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e680:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e685:	74 10                	je     c001e697 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e687:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e68d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e691:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e695:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e697:	31 c0                	xor    eax,eax
c001e699:	83 c4 2c             	add    esp,0x2c
c001e69c:	5b                   	pop    ebx
c001e69d:	5e                   	pop    esi
c001e69e:	5f                   	pop    edi
c001e69f:	5d                   	pop    ebp
c001e6a0:	c3                   	ret    
c001e6a1:	90                   	nop

c001e6a2 <SATAPI::eject()>:
c001e6a2:	57                   	push   edi
c001e6a3:	b9 03 00 00 00       	mov    ecx,0x3
c001e6a8:	83 ec 18             	sub    esp,0x18
c001e6ab:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e6af:	fc                   	cld    
c001e6b0:	31 c0                	xor    eax,eax
c001e6b2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e6b4:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e6b9:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e6be:	50                   	push   eax
c001e6bf:	6a 00                	push   0x0
c001e6c1:	6a 00                	push   0x0
c001e6c3:	6a 00                	push   0x0
c001e6c5:	6a 00                	push   0x0
c001e6c7:	6a 02                	push   0x2
c001e6c9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e6cd:	50                   	push   eax
c001e6ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e6d2:	e8 ed fc ff ff       	call   c001e3c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e6d7:	31 c0                	xor    eax,eax
c001e6d9:	83 c4 38             	add    esp,0x38
c001e6dc:	5f                   	pop    edi
c001e6dd:	c3                   	ret    

c001e6de <SATAPI::detectMedia()>:
c001e6de:	53                   	push   ebx
c001e6df:	83 ec 14             	sub    esp,0x14
c001e6e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e6e6:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e6ec:	e8 1b 00 ff ff       	call   c000e70c <VCache::writeWriteBuffer()>
c001e6f1:	59                   	pop    ecx
c001e6f2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e6f8:	e8 ff ff fe ff       	call   c000e6fc <VCache::invalidateReadBuffer()>
c001e6fd:	c7 04 24 9f 34 02 c0 	mov    DWORD PTR [esp],0xc002349f
c001e704:	e8 3c c2 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e709:	83 c4 10             	add    esp,0x10
c001e70c:	31 c0                	xor    eax,eax
c001e70e:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e715:	85 d2                	test   edx,edx
c001e717:	74 0f                	je     c001e728 <SATAPI::detectMedia()+0x4a>
c001e719:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e71f:	75 07                	jne    c001e728 <SATAPI::detectMedia()+0x4a>
c001e721:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e728:	40                   	inc    eax
c001e729:	83 f8 1a             	cmp    eax,0x1a
c001e72c:	75 e0                	jne    c001e70e <SATAPI::detectMedia()+0x30>
c001e72e:	83 c4 08             	add    esp,0x8
c001e731:	5b                   	pop    ebx
c001e732:	c3                   	ret    
c001e733:	90                   	nop

c001e734 <SATAPI::open(int, int, void*)>:
c001e734:	56                   	push   esi
c001e735:	53                   	push   ebx
c001e736:	51                   	push   ecx
c001e737:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e73b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e73f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e749:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e74f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e759:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e75d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e767:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e76d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e774:	e8 46 96 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e779:	89 c6                	mov    esi,eax
c001e77b:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e781:	81 c6 00 10 00 00    	add    esi,0x1000
c001e787:	e8 33 96 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e78c:	39 c6                	cmp    esi,eax
c001e78e:	74 10                	je     c001e7a0 <SATAPI::open(int, int, void*)+0x6c>
c001e790:	83 ec 0c             	sub    esp,0xc
c001e793:	68 b4 34 02 c0       	push   0xc00234b4
c001e798:	e8 7e 2e ff ff       	call   c001161b <KePanic(char const*)>
c001e79d:	83 c4 10             	add    esp,0x10
c001e7a0:	83 ec 0c             	sub    esp,0xc
c001e7a3:	6a 02                	push   0x2
c001e7a5:	e8 63 ae fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e7aa:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e7b0:	6a 03                	push   0x3
c001e7b2:	50                   	push   eax
c001e7b3:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e7b9:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e7bf:	e8 5c b5 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e7c4:	83 c4 14             	add    esp,0x14
c001e7c7:	68 78 01 00 00       	push   0x178
c001e7cc:	e8 e5 92 fe ff       	call   c0007ab6 <malloc>
c001e7d1:	83 c4 0c             	add    esp,0xc
c001e7d4:	89 c6                	mov    esi,eax
c001e7d6:	6a 00                	push   0x0
c001e7d8:	68 ff ff ff 7f       	push   0x7fffffff
c001e7dd:	6a 00                	push   0x0
c001e7df:	6a 00                	push   0x0
c001e7e1:	53                   	push   ebx
c001e7e2:	68 ca 34 02 c0       	push   0xc00234ca
c001e7e7:	50                   	push   eax
c001e7e8:	e8 7b f3 fe ff       	call   c000db68 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e7ed:	83 c4 14             	add    esp,0x14
c001e7f0:	56                   	push   esi
c001e7f1:	e8 32 f4 fe ff       	call   c000dc28 <LogicalDisk::assignDriveLetter()>
c001e7f6:	5a                   	pop    edx
c001e7f7:	0f be c0             	movsx  eax,al
c001e7fa:	59                   	pop    ecx
c001e7fb:	50                   	push   eax
c001e7fc:	68 1c 33 02 c0       	push   0xc002331c
c001e801:	e8 3f c1 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e806:	58                   	pop    eax
c001e807:	5a                   	pop    edx
c001e808:	56                   	push   esi
c001e809:	53                   	push   ebx
c001e80a:	e8 b3 e1 fe ff       	call   c000c9c2 <Device::addChild(Device*)>
c001e80f:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e815:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e818:	e8 d9 e5 fe ff       	call   c000cdf6 <PhysicalDisk::startCache()>
c001e81d:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e824:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e827:	e8 b2 fe ff ff       	call   c001e6de <SATAPI::detectMedia()>
c001e82c:	83 c4 14             	add    esp,0x14
c001e82f:	31 c0                	xor    eax,eax
c001e831:	5b                   	pop    ebx
c001e832:	5e                   	pop    esi
c001e833:	c3                   	ret    

c001e834 <SATAPI::read(unsigned long long, int, void*)>:
c001e834:	57                   	push   edi
c001e835:	56                   	push   esi
c001e836:	53                   	push   ebx
c001e837:	83 ec 30             	sub    esp,0x30
c001e83a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e83e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e842:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e846:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e84a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e84e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e852:	83 fe 04             	cmp    esi,0x4
c001e855:	7e 10                	jle    c001e867 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e857:	83 ec 0c             	sub    esp,0xc
c001e85a:	68 d8 34 02 c0       	push   0xc00234d8
c001e85f:	e8 b7 2d ff ff       	call   c001161b <KePanic(char const*)>
c001e864:	83 c4 10             	add    esp,0x10
c001e867:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e86d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e873:	51                   	push   ecx
c001e874:	50                   	push   eax
c001e875:	83 c0 02             	add    eax,0x2
c001e878:	c1 e0 07             	shl    eax,0x7
c001e87b:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e881:	50                   	push   eax
c001e882:	52                   	push   edx
c001e883:	e8 8c e1 ff ff       	call   c001ca14 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e888:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e88c:	b9 03 00 00 00       	mov    ecx,0x3
c001e891:	fc                   	cld    
c001e892:	31 c0                	xor    eax,eax
c001e894:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e896:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e89b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e8a0:	83 c4 0c             	add    esp,0xc
c001e8a3:	6a 00                	push   0x0
c001e8a5:	6a 00                	push   0x0
c001e8a7:	6a 00                	push   0x0
c001e8a9:	6a 00                	push   0x0
c001e8ab:	6a 02                	push   0x2
c001e8ad:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e8b1:	50                   	push   eax
c001e8b2:	53                   	push   ebx
c001e8b3:	e8 0c fb ff ff       	call   c001e3c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e8b8:	83 c4 20             	add    esp,0x20
c001e8bb:	85 c0                	test   eax,eax
c001e8bd:	75 44                	jne    c001e903 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e8bf:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e8c3:	b9 03 00 00 00       	mov    ecx,0x3
c001e8c8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e8ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8ce:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e8d3:	0f c8                	bswap  eax
c001e8d5:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e8d9:	89 f0                	mov    eax,esi
c001e8db:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e8df:	50                   	push   eax
c001e8e0:	56                   	push   esi
c001e8e1:	c1 e6 0b             	shl    esi,0xb
c001e8e4:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e8e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e8ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e8f0:	56                   	push   esi
c001e8f1:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e8f5:	50                   	push   eax
c001e8f6:	53                   	push   ebx
c001e8f7:	e8 c8 fa ff ff       	call   c001e3c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e8fc:	83 c4 20             	add    esp,0x20
c001e8ff:	85 c0                	test   eax,eax
c001e901:	74 14                	je     c001e917 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e903:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e907:	83 ec 0c             	sub    esp,0xc
c001e90a:	53                   	push   ebx
c001e90b:	e8 ce fd ff ff       	call   c001e6de <SATAPI::detectMedia()>
c001e910:	83 c4 10             	add    esp,0x10
c001e913:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e917:	83 c4 30             	add    esp,0x30
c001e91a:	5b                   	pop    ebx
c001e91b:	5e                   	pop    esi
c001e91c:	5f                   	pop    edi
c001e91d:	c3                   	ret    

c001e91e <IOAPIC::close(int, int, void*)>:
c001e91e:	b8 00 00 00 00       	mov    eax,0x0
c001e923:	c3                   	ret    

c001e924 <apicGetBase()>:
c001e924:	55                   	push   ebp
c001e925:	89 e5                	mov    ebp,esp
c001e927:	83 ec 18             	sub    esp,0x18
c001e92a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e92f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e935:	83 e0 08             	and    eax,0x8
c001e938:	0f b6 c0             	movzx  eax,al
c001e93b:	85 c0                	test   eax,eax
c001e93d:	75 07                	jne    c001e946 <apicGetBase()+0x22>
c001e93f:	b8 00 00 00 00       	mov    eax,0x0
c001e944:	eb 21                	jmp    c001e967 <apicGetBase()+0x43>
c001e946:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e94b:	83 ec 08             	sub    esp,0x8
c001e94e:	6a 1b                	push   0x1b
c001e950:	50                   	push   eax
c001e951:	e8 6a 87 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001e956:	83 c4 10             	add    esp,0x10
c001e959:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e95c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e95f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e962:	25 00 00 ff ff       	and    eax,0xffff0000
c001e967:	c9                   	leave  
c001e968:	c3                   	ret    
c001e969:	90                   	nop

c001e96a <IOAPIC::IOAPIC()>:
c001e96a:	83 ec 0c             	sub    esp,0xc
c001e96d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e971:	83 ec 08             	sub    esp,0x8
c001e974:	68 3c 35 02 c0       	push   0xc002353c
c001e979:	50                   	push   eax
c001e97a:	e8 db e1 fe ff       	call   c000cb5a <Device::Device(char const*)>
c001e97f:	83 c4 10             	add    esp,0x10
c001e982:	ba 4c 35 02 c0       	mov    edx,0xc002354c
c001e987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e98b:	89 10                	mov    DWORD PTR [eax],edx
c001e98d:	90                   	nop
c001e98e:	83 c4 0c             	add    esp,0xc
c001e991:	c3                   	ret    

c001e992 <apicOpen()>:
c001e992:	55                   	push   ebp
c001e993:	89 e5                	mov    ebp,esp
c001e995:	53                   	push   ebx
c001e996:	83 ec 34             	sub    esp,0x34
c001e999:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001e99e:	83 f0 01             	xor    eax,0x1
c001e9a1:	0f b6 c0             	movzx  eax,al
c001e9a4:	85 c0                	test   eax,eax
c001e9a6:	0f 84 a3 00 00 00    	je     c001ea4f <apicOpen()+0xbd>
c001e9ac:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e9b0:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001e9b5:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e9b9:	0f b6 c0             	movzx  eax,al
c001e9bc:	39 c2                	cmp    edx,eax
c001e9be:	0f 83 84 00 00 00    	jae    c001ea48 <apicOpen()+0xb6>
c001e9c4:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e9cb:	83 ec 0c             	sub    esp,0xc
c001e9ce:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e9d1:	e8 e0 90 fe ff       	call   c0007ab6 <malloc>
c001e9d6:	83 c4 10             	add    esp,0x10
c001e9d9:	89 c3                	mov    ebx,eax
c001e9db:	83 ec 0c             	sub    esp,0xc
c001e9de:	53                   	push   ebx
c001e9df:	e8 86 ff ff ff       	call   c001e96a <IOAPIC::IOAPIC()>
c001e9e4:	83 c4 10             	add    esp,0x10
c001e9e7:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e9ea:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e9ee:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e9f1:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001e9f8:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001e9fd:	83 c0 01             	add    eax,0x1
c001ea00:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001ea05:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ea0a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001ea10:	83 ec 08             	sub    esp,0x8
c001ea13:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ea16:	50                   	push   eax
c001ea17:	e8 a6 df fe ff       	call   c000c9c2 <Device::addChild(Device*)>
c001ea1c:	83 c4 10             	add    esp,0x10
c001ea1f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ea22:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea24:	83 c0 08             	add    eax,0x8
c001ea27:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea29:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ea2d:	6a 00                	push   0x0
c001ea2f:	6a 00                	push   0x0
c001ea31:	52                   	push   edx
c001ea32:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ea35:	ff d0                	call   eax
c001ea37:	83 c4 10             	add    esp,0x10
c001ea3a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001ea3d:	83 c0 01             	add    eax,0x1
c001ea40:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001ea43:	e9 68 ff ff ff       	jmp    c001e9b0 <apicOpen()+0x1e>
c001ea48:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001ea4f:	e8 d0 fe ff ff       	call   c001e924 <apicGetBase()>
c001ea54:	05 f0 00 00 00       	add    eax,0xf0
c001ea59:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ea5c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ea5f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea61:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ea64:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001ea6b:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001ea72:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ea75:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ea78:	89 10                	mov    DWORD PTR [eax],edx
c001ea7a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001ea81:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001ea86:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ea89:	7d 7c                	jge    c001eb07 <apicOpen()+0x175>
c001ea8b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea8e:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea95:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ea98:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea9b:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eaa2:	c1 e8 08             	shr    eax,0x8
c001eaa5:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001eaa9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eaac:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eab3:	c1 e8 18             	shr    eax,0x18
c001eab6:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001eab9:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001eabd:	3d ff 00 00 00       	cmp    eax,0xff
c001eac2:	75 3a                	jne    c001eafe <apicOpen()+0x16c>
c001eac4:	e8 5b fe ff ff       	call   c001e924 <apicGetBase()>
c001eac9:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001eacd:	83 fa 01             	cmp    edx,0x1
c001ead0:	75 07                	jne    c001ead9 <apicOpen()+0x147>
c001ead2:	ba 60 03 00 00       	mov    edx,0x360
c001ead7:	eb 05                	jmp    c001eade <apicOpen()+0x14c>
c001ead9:	ba 50 03 00 00       	mov    edx,0x350
c001eade:	01 d0                	add    eax,edx
c001eae0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001eae3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eae6:	8b 00                	mov    eax,DWORD PTR [eax]
c001eae8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001eaeb:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001eaf2:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001eaf6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eaf9:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001eafc:	89 10                	mov    DWORD PTR [eax],edx
c001eafe:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001eb02:	e9 7a ff ff ff       	jmp    c001ea81 <apicOpen()+0xef>
c001eb07:	90                   	nop
c001eb08:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001eb0b:	c9                   	leave  
c001eb0c:	c3                   	ret    
c001eb0d:	90                   	nop

c001eb0e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001eb0e:	55                   	push   ebp
c001eb0f:	89 e5                	mov    ebp,esp
c001eb11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb14:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001eb1a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eb1d:	72 1d                	jb     c001eb3c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eb1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb22:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001eb28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb2b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001eb31:	01 d0                	add    eax,edx
c001eb33:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eb36:	73 04                	jae    c001eb3c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eb38:	b0 01                	mov    al,0x1
c001eb3a:	eb 02                	jmp    c001eb3e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001eb3c:	b0 00                	mov    al,0x0
c001eb3e:	5d                   	pop    ebp
c001eb3f:	c3                   	ret    

c001eb40 <IOAPIC::read(int)>:
c001eb40:	55                   	push   ebp
c001eb41:	89 e5                	mov    ebp,esp
c001eb43:	83 ec 10             	sub    esp,0x10
c001eb46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb49:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eb4f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001eb52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eb55:	0f b6 d0             	movzx  edx,al
c001eb58:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb5b:	89 10                	mov    DWORD PTR [eax],edx
c001eb5d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb60:	83 c0 10             	add    eax,0x10
c001eb63:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb65:	c9                   	leave  
c001eb66:	c3                   	ret    
c001eb67:	90                   	nop

c001eb68 <IOAPIC::open(int, int, void*)>:
c001eb68:	55                   	push   ebp
c001eb69:	89 e5                	mov    ebp,esp
c001eb6b:	57                   	push   edi
c001eb6c:	56                   	push   esi
c001eb6d:	53                   	push   ebx
c001eb6e:	83 ec 04             	sub    esp,0x4
c001eb71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb74:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001eb77:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eb7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb80:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb86:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001eb8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb90:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eb96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb99:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb9f:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001eba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eba9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ebaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebb2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ebb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebbb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ebc1:	0f b6 f0             	movzx  esi,al
c001ebc4:	89 d0                	mov    eax,edx
c001ebc6:	ba 00 00 00 00       	mov    edx,0x0
c001ebcb:	89 c7                	mov    edi,eax
c001ebcd:	83 e7 ff             	and    edi,0xffffffff
c001ebd0:	89 f9                	mov    ecx,edi
c001ebd2:	0f b6 da             	movzx  ebx,dl
c001ebd5:	89 c8                	mov    eax,ecx
c001ebd7:	89 da                	mov    edx,ebx
c001ebd9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ebdc:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ebdf:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ebe3:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ebe7:	83 e0 00             	and    eax,0x0
c001ebea:	09 d0                	or     eax,edx
c001ebec:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ebf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebf3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ebf9:	8d 50 01             	lea    edx,[eax+0x1]
c001ebfc:	88 d1                	mov    cl,dl
c001ebfe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ec01:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ec07:	0f b6 d0             	movzx  edx,al
c001ec0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec0d:	83 c2 08             	add    edx,0x8
c001ec10:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ec14:	0f b6 c9             	movzx  ecx,cl
c001ec17:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ec1d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ec21:	6a 01                	push   0x1
c001ec23:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec26:	e8 15 ff ff ff       	call   c001eb40 <IOAPIC::read(int)>
c001ec2b:	83 c4 08             	add    esp,0x8
c001ec2e:	c1 f8 10             	sar    eax,0x10
c001ec31:	0f b6 c0             	movzx  eax,al
c001ec34:	8d 50 01             	lea    edx,[eax+0x1]
c001ec37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec3a:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ec40:	b8 00 00 00 00       	mov    eax,0x0
c001ec45:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ec48:	5b                   	pop    ebx
c001ec49:	5e                   	pop    esi
c001ec4a:	5f                   	pop    edi
c001ec4b:	5d                   	pop    ebp
c001ec4c:	c3                   	ret    
c001ec4d:	90                   	nop

c001ec4e <IOAPIC::write(int, int)>:
c001ec4e:	55                   	push   ebp
c001ec4f:	89 e5                	mov    ebp,esp
c001ec51:	83 ec 10             	sub    esp,0x10
c001ec54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec57:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ec5d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ec60:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec63:	0f b6 d0             	movzx  edx,al
c001ec66:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec69:	89 10                	mov    DWORD PTR [eax],edx
c001ec6b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec6e:	8d 50 10             	lea    edx,[eax+0x10]
c001ec71:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ec74:	89 02                	mov    DWORD PTR [edx],eax
c001ec76:	90                   	nop
c001ec77:	c9                   	leave  
c001ec78:	c3                   	ret    
c001ec79:	90                   	nop

c001ec7a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ec7a:	55                   	push   ebp
c001ec7b:	89 e5                	mov    ebp,esp
c001ec7d:	53                   	push   ebx
c001ec7e:	83 ec 2c             	sub    esp,0x2c
c001ec81:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec84:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ec87:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ec8a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ec8d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ec90:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ec93:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ec96:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ec99:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ec9c:	88 d8                	mov    al,bl
c001ec9e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001eca1:	88 c8                	mov    al,cl
c001eca3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001eca6:	88 d0                	mov    al,dl
c001eca8:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ecab:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ecaf:	83 c0 08             	add    eax,0x8
c001ecb2:	01 c0                	add    eax,eax
c001ecb4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ecb7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ecbb:	83 c0 08             	add    eax,0x8
c001ecbe:	01 c0                	add    eax,eax
c001ecc0:	83 c0 01             	add    eax,0x1
c001ecc3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ecc6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ecc9:	50                   	push   eax
c001ecca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eccd:	e8 6e fe ff ff       	call   c001eb40 <IOAPIC::read(int)>
c001ecd2:	83 c4 08             	add    esp,0x8
c001ecd5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ecd8:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ecdf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ece2:	c1 e0 18             	shl    eax,0x18
c001ece5:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ece8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001eceb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ecee:	52                   	push   edx
c001ecef:	50                   	push   eax
c001ecf0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecf3:	e8 56 ff ff ff       	call   c001ec4e <IOAPIC::write(int, int)>
c001ecf8:	83 c4 0c             	add    esp,0xc
c001ecfb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ecfe:	50                   	push   eax
c001ecff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed02:	e8 39 fe ff ff       	call   c001eb40 <IOAPIC::read(int)>
c001ed07:	83 c4 08             	add    esp,0x8
c001ed0a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ed0d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ed14:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ed1b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ed22:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ed26:	85 c0                	test   eax,eax
c001ed28:	74 09                	je     c001ed33 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001ed2a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ed31:	eb 07                	jmp    c001ed3a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001ed33:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ed3a:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ed3e:	85 c0                	test   eax,eax
c001ed40:	74 09                	je     c001ed4b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ed42:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ed49:	eb 07                	jmp    c001ed52 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001ed4b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ed52:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ed59:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ed5d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ed60:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ed63:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ed66:	52                   	push   edx
c001ed67:	50                   	push   eax
c001ed68:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed6b:	e8 de fe ff ff       	call   c001ec4e <IOAPIC::write(int, int)>
c001ed70:	83 c4 0c             	add    esp,0xc
c001ed73:	90                   	nop
c001ed74:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ed77:	c9                   	leave  
c001ed78:	c3                   	ret    
c001ed79:	66 90                	xchg   ax,ax
c001ed7b:	90                   	nop

c001ed7c <APICTimer::close(int, int, void*)>:
c001ed7c:	b8 00 00 00 00       	mov    eax,0x0
c001ed81:	c3                   	ret    
c001ed82:	66 90                	xchg   ax,ax

c001ed84 <apicTimerHandler(regs*, void*)>:
c001ed84:	83 ec 0c             	sub    esp,0xc
c001ed87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed8b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ed8d:	b8 10 27 00 00       	mov    eax,0x2710
c001ed92:	ba 00 00 00 00       	mov    edx,0x0
c001ed97:	f7 f1                	div    ecx
c001ed99:	83 ec 0c             	sub    esp,0xc
c001ed9c:	50                   	push   eax
c001ed9d:	e8 82 f6 fe ff       	call   c000e424 <timerHandler(unsigned int)>
c001eda2:	83 c4 10             	add    esp,0x10
c001eda5:	90                   	nop
c001eda6:	83 c4 0c             	add    esp,0xc
c001eda9:	c3                   	ret    
c001edaa:	66 90                	xchg   ax,ax

c001edac <APICTimer::open(int, int, void*)>:
c001edac:	83 ec 0c             	sub    esp,0xc
c001edaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb3:	8b 00                	mov    eax,DWORD PTR [eax]
c001edb5:	83 c0 24             	add    eax,0x24
c001edb8:	8b 00                	mov    eax,DWORD PTR [eax]
c001edba:	83 ec 08             	sub    esp,0x8
c001edbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edc5:	ff d0                	call   eax
c001edc7:	83 c4 10             	add    esp,0x10
c001edca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001edd2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001edd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eddc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ede0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ede6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001edea:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001edf0:	83 ec 0c             	sub    esp,0xc
c001edf3:	51                   	push   ecx
c001edf4:	6a 01                	push   0x1
c001edf6:	68 84 ed 01 c0       	push   0xc001ed84
c001edfb:	52                   	push   edx
c001edfc:	50                   	push   eax
c001edfd:	e8 6c db fe ff       	call   c000c96e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ee02:	83 c4 20             	add    esp,0x20
c001ee05:	89 c2                	mov    edx,eax
c001ee07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee0b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ee11:	b8 00 00 00 00       	mov    eax,0x0
c001ee16:	83 c4 0c             	add    esp,0xc
c001ee19:	c3                   	ret    
c001ee1a:	66 90                	xchg   ax,ax

c001ee1c <APICTimer::write(int)>:
c001ee1c:	83 ec 0c             	sub    esp,0xc
c001ee1f:	83 ec 0c             	sub    esp,0xc
c001ee22:	68 70 35 02 c0       	push   0xc0023570
c001ee27:	e8 ef 27 ff ff       	call   c001161b <KePanic(char const*)>
c001ee2c:	83 c4 10             	add    esp,0x10
c001ee2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee37:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee3d:	90                   	nop
c001ee3e:	83 c4 0c             	add    esp,0xc
c001ee41:	c3                   	ret    
c001ee42:	66 90                	xchg   ax,ax

c001ee44 <APICTimer::APICTimer()>:
c001ee44:	83 ec 0c             	sub    esp,0xc
c001ee47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee4b:	83 ec 08             	sub    esp,0x8
c001ee4e:	68 80 35 02 c0       	push   0xc0023580
c001ee53:	50                   	push   eax
c001ee54:	e8 ff f4 fe ff       	call   c000e358 <Timer::Timer(char const*)>
c001ee59:	83 c4 10             	add    esp,0x10
c001ee5c:	ba 94 35 02 c0       	mov    edx,0xc0023594
c001ee61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee65:	89 10                	mov    DWORD PTR [eax],edx
c001ee67:	90                   	nop
c001ee68:	83 c4 0c             	add    esp,0xc
c001ee6b:	c3                   	ret    

c001ee6c <PIT::write(int)>:
c001ee6c:	83 ec 10             	sub    esp,0x10
c001ee6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee73:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee77:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ee81:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001ee86:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ee8b:	89 c2                	mov    edx,eax
c001ee8d:	c1 fa 1f             	sar    edx,0x1f
c001ee90:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ee94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee98:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ee9f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001eea4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001eea8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001eead:	ee                   	out    dx,al
c001eeae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eeb2:	0f b6 c0             	movzx  eax,al
c001eeb5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001eebc:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001eec0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001eec4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001eec9:	ee                   	out    dx,al
c001eeca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eece:	c1 f8 08             	sar    eax,0x8
c001eed1:	0f b6 c0             	movzx  eax,al
c001eed4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001eedb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001eedf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001eee3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001eee8:	ee                   	out    dx,al
c001eee9:	90                   	nop
c001eeea:	83 c4 10             	add    esp,0x10
c001eeed:	c3                   	ret    
c001eeee:	66 90                	xchg   ax,ax

c001eef0 <pitHandler(regs*, void*)>:
c001eef0:	83 ec 0c             	sub    esp,0xc
c001eef3:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001eef9:	b8 10 27 00 00       	mov    eax,0x2710
c001eefe:	89 c2                	mov    edx,eax
c001ef00:	c1 fa 1f             	sar    edx,0x1f
c001ef03:	f7 f9                	idiv   ecx
c001ef05:	83 ec 0c             	sub    esp,0xc
c001ef08:	50                   	push   eax
c001ef09:	e8 16 f5 fe ff       	call   c000e424 <timerHandler(unsigned int)>
c001ef0e:	83 c4 10             	add    esp,0x10
c001ef11:	90                   	nop
c001ef12:	83 c4 0c             	add    esp,0xc
c001ef15:	c3                   	ret    
c001ef16:	66 90                	xchg   ax,ax

c001ef18 <PIT::open(int, int, void*)>:
c001ef18:	83 ec 0c             	sub    esp,0xc
c001ef1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef1f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef21:	83 c0 24             	add    eax,0x24
c001ef24:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef26:	83 ec 08             	sub    esp,0x8
c001ef29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef31:	ff d0                	call   eax
c001ef33:	83 c4 10             	add    esp,0x10
c001ef36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef3a:	83 ec 0c             	sub    esp,0xc
c001ef3d:	6a 00                	push   0x0
c001ef3f:	6a 01                	push   0x1
c001ef41:	68 f0 ee 01 c0       	push   0xc001eef0
c001ef46:	6a 00                	push   0x0
c001ef48:	50                   	push   eax
c001ef49:	e8 20 da fe ff       	call   c000c96e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef4e:	83 c4 20             	add    esp,0x20
c001ef51:	89 c2                	mov    edx,eax
c001ef53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef57:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef5d:	b8 00 00 00 00       	mov    eax,0x0
c001ef62:	83 c4 0c             	add    esp,0xc
c001ef65:	c3                   	ret    
c001ef66:	66 90                	xchg   ax,ax

c001ef68 <PIT::close(int, int, void*)>:
c001ef68:	83 ec 0c             	sub    esp,0xc
c001ef6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef6f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ef79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef7d:	6a 01                	push   0x1
c001ef7f:	68 f0 ee 01 c0       	push   0xc001eef0
c001ef84:	6a 00                	push   0x0
c001ef86:	50                   	push   eax
c001ef87:	e8 18 da fe ff       	call   c000c9a4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ef8c:	83 c4 10             	add    esp,0x10
c001ef8f:	b8 00 00 00 00       	mov    eax,0x0
c001ef94:	83 c4 0c             	add    esp,0xc
c001ef97:	c3                   	ret    

c001ef98 <PIT::PIT()>:
c001ef98:	83 ec 0c             	sub    esp,0xc
c001ef9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef9f:	83 ec 08             	sub    esp,0x8
c001efa2:	68 bc 35 02 c0       	push   0xc00235bc
c001efa7:	50                   	push   eax
c001efa8:	e8 ab f3 fe ff       	call   c000e358 <Timer::Timer(char const*)>
c001efad:	83 c4 10             	add    esp,0x10
c001efb0:	ba e4 35 02 c0       	mov    edx,0xc00235e4
c001efb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb9:	89 10                	mov    DWORD PTR [eax],edx
c001efbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efbf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001efc5:	0f b6 d0             	movzx  edx,al
c001efc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efcc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001efd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001efdd:	0f b6 d0             	movzx  edx,al
c001efe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001efe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eff3:	8d 50 01             	lea    edx,[eax+0x1]
c001eff6:	88 d1                	mov    cl,dl
c001eff8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001effc:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f002:	0f b6 d0             	movzx  edx,al
c001f005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f009:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f00d:	83 e1 3f             	and    ecx,0x3f
c001f010:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f014:	90                   	nop
c001f015:	83 c4 0c             	add    esp,0xc
c001f018:	c3                   	ret    
c001f019:	66 90                	xchg   ax,ax
c001f01b:	66 90                	xchg   ax,ax
c001f01d:	66 90                	xchg   ax,ax
c001f01f:	90                   	nop

c001f020 <avxDetect>:
c001f020:	b8 01 00 00 00       	mov    eax,0x1
c001f025:	0f a2                	cpuid  
c001f027:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f02d:	74 15                	je     c001f044 <avxDetect.noAVX>
c001f02f:	b8 01 00 00 00       	mov    eax,0x1
c001f034:	0f a2                	cpuid  
c001f036:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f03c:	74 06                	je     c001f044 <avxDetect.noAVX>
c001f03e:	b8 01 00 00 00       	mov    eax,0x1
c001f043:	c3                   	ret    

c001f044 <avxDetect.noAVX>:
c001f044:	b8 00 00 00 00       	mov    eax,0x0
c001f049:	c3                   	ret    

c001f04a <avxSave>:
c001f04a:	53                   	push   ebx
c001f04b:	52                   	push   edx
c001f04c:	31 c0                	xor    eax,eax
c001f04e:	48                   	dec    eax
c001f04f:	89 c2                	mov    edx,eax
c001f051:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f055:	0f ae 23             	xsave  [ebx]
c001f058:	5a                   	pop    edx
c001f059:	5b                   	pop    ebx
c001f05a:	c3                   	ret    

c001f05b <avxLoad>:
c001f05b:	53                   	push   ebx
c001f05c:	52                   	push   edx
c001f05d:	31 c0                	xor    eax,eax
c001f05f:	48                   	dec    eax
c001f060:	89 c2                	mov    edx,eax
c001f062:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f066:	0f ae 2b             	xrstor [ebx]
c001f069:	5a                   	pop    edx
c001f06a:	5b                   	pop    ebx
c001f06b:	c3                   	ret    

c001f06c <avxInit>:
c001f06c:	e8 67 03 00 00       	call   c001f3d8 <sseInit>
c001f071:	50                   	push   eax
c001f072:	51                   	push   ecx
c001f073:	0f 20 e0             	mov    eax,cr4
c001f076:	0d 00 00 04 00       	or     eax,0x40000
c001f07b:	0f 22 e0             	mov    cr4,eax
c001f07e:	31 c9                	xor    ecx,ecx
c001f080:	0f 01 d0             	xgetbv 
c001f083:	0d 07 00 00 00       	or     eax,0x7
c001f088:	0f 01 d1             	xsetbv 
c001f08b:	59                   	pop    ecx
c001f08c:	58                   	pop    eax
c001f08d:	c3                   	ret    

c001f08e <avxClose>:
c001f08e:	c3                   	ret    

c001f08f <wouldSheSayYes>:
c001f08f:	c3                   	ret    
c001f090:	49                   	dec    ecx
c001f091:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f095:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f099:	75 20                	jne    c001f0bb <isr0+0xb>
c001f09b:	4e                   	dec    esi
c001f09c:	79 61                	jns    c001f0ff <isr7+0x3>
c001f09e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f0a3:	66 90                	xchg   ax,ax
c001f0a5:	66 90                	xchg   ax,ax
c001f0a7:	66 90                	xchg   ax,ax
c001f0a9:	66 90                	xchg   ax,ax
c001f0ab:	66 90                	xchg   ax,ax
c001f0ad:	66 90                	xchg   ax,ax
c001f0af:	90                   	nop

c001f0b0 <isr0>:
c001f0b0:	fa                   	cli    
c001f0b1:	68 00 00 00 00       	push   0x0
c001f0b6:	68 00 00 00 00       	push   0x0
c001f0bb:	e9 56 01 00 00       	jmp    c001f216 <int_common_stub>

c001f0c0 <isr1>:
c001f0c0:	fa                   	cli    
c001f0c1:	6a 00                	push   0x0
c001f0c3:	6a 01                	push   0x1
c001f0c5:	e9 4c 01 00 00       	jmp    c001f216 <int_common_stub>

c001f0ca <isr2>:
c001f0ca:	fa                   	cli    
c001f0cb:	6a 00                	push   0x0
c001f0cd:	6a 02                	push   0x2
c001f0cf:	e9 42 01 00 00       	jmp    c001f216 <int_common_stub>

c001f0d4 <isr3>:
c001f0d4:	fa                   	cli    
c001f0d5:	6a 00                	push   0x0
c001f0d7:	6a 03                	push   0x3
c001f0d9:	e9 38 01 00 00       	jmp    c001f216 <int_common_stub>

c001f0de <isr4>:
c001f0de:	fa                   	cli    
c001f0df:	6a 00                	push   0x0
c001f0e1:	6a 04                	push   0x4
c001f0e3:	e9 2e 01 00 00       	jmp    c001f216 <int_common_stub>

c001f0e8 <isr5>:
c001f0e8:	fa                   	cli    
c001f0e9:	6a 00                	push   0x0
c001f0eb:	6a 05                	push   0x5
c001f0ed:	e9 24 01 00 00       	jmp    c001f216 <int_common_stub>

c001f0f2 <isr6>:
c001f0f2:	fa                   	cli    
c001f0f3:	6a 00                	push   0x0
c001f0f5:	6a 06                	push   0x6
c001f0f7:	e9 1a 01 00 00       	jmp    c001f216 <int_common_stub>

c001f0fc <isr7>:
c001f0fc:	fa                   	cli    
c001f0fd:	6a 00                	push   0x0
c001f0ff:	6a 07                	push   0x7
c001f101:	e9 10 01 00 00       	jmp    c001f216 <int_common_stub>

c001f106 <isr8>:
c001f106:	fa                   	cli    
c001f107:	6a 08                	push   0x8
c001f109:	e9 08 01 00 00       	jmp    c001f216 <int_common_stub>

c001f10e <isr9>:
c001f10e:	fa                   	cli    
c001f10f:	6a 00                	push   0x0
c001f111:	6a 09                	push   0x9
c001f113:	e9 fe 00 00 00       	jmp    c001f216 <int_common_stub>

c001f118 <isr10>:
c001f118:	fa                   	cli    
c001f119:	6a 0a                	push   0xa
c001f11b:	e9 f6 00 00 00       	jmp    c001f216 <int_common_stub>

c001f120 <isr11>:
c001f120:	fa                   	cli    
c001f121:	6a 0b                	push   0xb
c001f123:	e9 ee 00 00 00       	jmp    c001f216 <int_common_stub>

c001f128 <isr12>:
c001f128:	fa                   	cli    
c001f129:	6a 0c                	push   0xc
c001f12b:	e9 e6 00 00 00       	jmp    c001f216 <int_common_stub>

c001f130 <isr13>:
c001f130:	fa                   	cli    
c001f131:	6a 0d                	push   0xd
c001f133:	53                   	push   ebx
c001f134:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f138:	81 fb 06 f3 01 c0    	cmp    ebx,0xc001f306
c001f13e:	5b                   	pop    ebx
c001f13f:	0f 84 c3 01 00 00    	je     c001f308 <finishSignal2>
c001f145:	e9 cc 00 00 00       	jmp    c001f216 <int_common_stub>

c001f14a <isr14>:
c001f14a:	fa                   	cli    
c001f14b:	6a 0e                	push   0xe
c001f14d:	e9 c4 00 00 00       	jmp    c001f216 <int_common_stub>

c001f152 <isr15>:
c001f152:	fa                   	cli    
c001f153:	6a 00                	push   0x0
c001f155:	6a 0f                	push   0xf
c001f157:	e9 ba 00 00 00       	jmp    c001f216 <int_common_stub>

c001f15c <isr16>:
c001f15c:	fa                   	cli    
c001f15d:	6a 00                	push   0x0
c001f15f:	6a 10                	push   0x10
c001f161:	e9 b0 00 00 00       	jmp    c001f216 <int_common_stub>

c001f166 <isr17>:
c001f166:	fa                   	cli    
c001f167:	6a 00                	push   0x0
c001f169:	6a 11                	push   0x11
c001f16b:	e9 a6 00 00 00       	jmp    c001f216 <int_common_stub>

c001f170 <isr18>:
c001f170:	fa                   	cli    
c001f171:	6a 00                	push   0x0
c001f173:	6a 12                	push   0x12
c001f175:	e9 9c 00 00 00       	jmp    c001f216 <int_common_stub>

c001f17a <irq3>:
c001f17a:	fa                   	cli    
c001f17b:	6a 00                	push   0x0
c001f17d:	6a 23                	push   0x23
c001f17f:	e9 92 00 00 00       	jmp    c001f216 <int_common_stub>

c001f184 <irq4>:
c001f184:	fa                   	cli    
c001f185:	6a 00                	push   0x0
c001f187:	6a 24                	push   0x24
c001f189:	e9 88 00 00 00       	jmp    c001f216 <int_common_stub>

c001f18e <irq5>:
c001f18e:	fa                   	cli    
c001f18f:	6a 00                	push   0x0
c001f191:	6a 25                	push   0x25
c001f193:	e9 7e 00 00 00       	jmp    c001f216 <int_common_stub>

c001f198 <irq6>:
c001f198:	fa                   	cli    
c001f199:	6a 00                	push   0x0
c001f19b:	6a 26                	push   0x26
c001f19d:	e9 74 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1a2 <irq7>:
c001f1a2:	fa                   	cli    
c001f1a3:	6a 00                	push   0x0
c001f1a5:	6a 27                	push   0x27
c001f1a7:	e9 6a 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1ac <irq8>:
c001f1ac:	fa                   	cli    
c001f1ad:	6a 00                	push   0x0
c001f1af:	6a 28                	push   0x28
c001f1b1:	e9 60 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1b6 <irq9>:
c001f1b6:	fa                   	cli    
c001f1b7:	6a 00                	push   0x0
c001f1b9:	6a 29                	push   0x29
c001f1bb:	e9 56 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1c0 <irq10>:
c001f1c0:	fa                   	cli    
c001f1c1:	6a 00                	push   0x0
c001f1c3:	6a 2a                	push   0x2a
c001f1c5:	e9 4c 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1ca <irq11>:
c001f1ca:	fa                   	cli    
c001f1cb:	6a 00                	push   0x0
c001f1cd:	6a 2b                	push   0x2b
c001f1cf:	e9 42 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1d4 <irq12>:
c001f1d4:	fa                   	cli    
c001f1d5:	6a 00                	push   0x0
c001f1d7:	6a 2c                	push   0x2c
c001f1d9:	e9 38 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1de <irq13>:
c001f1de:	fa                   	cli    
c001f1df:	6a 00                	push   0x0
c001f1e1:	6a 2d                	push   0x2d
c001f1e3:	e9 2e 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1e8 <irq14>:
c001f1e8:	fa                   	cli    
c001f1e9:	6a 00                	push   0x0
c001f1eb:	6a 2e                	push   0x2e
c001f1ed:	e9 24 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1f2 <irq15>:
c001f1f2:	fa                   	cli    
c001f1f3:	6a 00                	push   0x0
c001f1f5:	6a 2f                	push   0x2f
c001f1f7:	e9 1a 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1fc <irq1>:
c001f1fc:	fa                   	cli    
c001f1fd:	6a 00                	push   0x0
c001f1ff:	6a 21                	push   0x21
c001f201:	eb 13                	jmp    c001f216 <int_common_stub>

c001f203 <irq2>:
c001f203:	fa                   	cli    
c001f204:	6a 00                	push   0x0
c001f206:	6a 22                	push   0x22
c001f208:	eb 0c                	jmp    c001f216 <int_common_stub>

c001f20a <isr96>:
c001f20a:	6a 00                	push   0x0
c001f20c:	6a 60                	push   0x60
c001f20e:	fb                   	sti    
c001f20f:	eb 37                	jmp    c001f248 <syscall_common_stub>

c001f211 <irq0>:
c001f211:	fa                   	cli    
c001f212:	6a 00                	push   0x0
c001f214:	6a 20                	push   0x20

c001f216 <int_common_stub>:
c001f216:	60                   	pusha  
c001f217:	1e                   	push   ds
c001f218:	06                   	push   es
c001f219:	0f a0                	push   fs
c001f21b:	0f a8                	push   gs
c001f21d:	66 b8 10 00          	mov    ax,0x10
c001f221:	66 8e d8             	mov    ds,ax
c001f224:	66 8e c0             	mov    es,ax
c001f227:	66 8e e0             	mov    fs,ax
c001f22a:	66 8e e8             	mov    gs,ax
c001f22d:	54                   	push   esp
c001f22e:	fc                   	cld    
c001f22f:	e8 38 dc fe ff       	call   c000ce6c <int_handler>
c001f234:	81 c4 04 00 00 00    	add    esp,0x4
c001f23a:	0f a9                	pop    gs
c001f23c:	0f a1                	pop    fs
c001f23e:	07                   	pop    es
c001f23f:	1f                   	pop    ds
c001f240:	61                   	popa   
c001f241:	81 c4 08 00 00 00    	add    esp,0x8
c001f247:	cf                   	iret   

c001f248 <syscall_common_stub>:
c001f248:	60                   	pusha  
c001f249:	1e                   	push   ds
c001f24a:	06                   	push   es
c001f24b:	0f a0                	push   fs
c001f24d:	0f a8                	push   gs
c001f24f:	66 b8 10 00          	mov    ax,0x10
c001f253:	66 8e d8             	mov    ds,ax
c001f256:	66 8e c0             	mov    es,ax
c001f259:	66 8e e0             	mov    fs,ax
c001f25c:	66 8e e8             	mov    gs,ax
c001f25f:	54                   	push   esp
c001f260:	fc                   	cld    
c001f261:	e8 06 dc fe ff       	call   c000ce6c <int_handler>
c001f266:	81 c4 04 00 00 00    	add    esp,0x4
c001f26c:	0f a9                	pop    gs
c001f26e:	0f a1                	pop    fs
c001f270:	07                   	pop    es
c001f271:	1f                   	pop    ds
c001f272:	e8 bb 29 ff ff       	call   c0011c32 <KiCheckSignalZ>
c001f277:	3d 00 00 00 00       	cmp    eax,0x0
c001f27c:	0f 84 c0 00 00 00    	je     c001f342 <skipSignals>
c001f282:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f287:	61                   	popa   
c001f288:	53                   	push   ebx
c001f289:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f28f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f292:	5b                   	pop    ebx
c001f293:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f298:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f29b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f29e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f2a1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f2a4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f2a7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f2aa:	81 c4 08 00 00 00    	add    esp,0x8
c001f2b0:	5e                   	pop    esi
c001f2b1:	5b                   	pop    ebx
c001f2b2:	59                   	pop    ecx
c001f2b3:	5a                   	pop    edx
c001f2b4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f2b7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f2ba:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f2bd:	52                   	push   edx
c001f2be:	51                   	push   ecx
c001f2bf:	53                   	push   ebx
c001f2c0:	56                   	push   esi
c001f2c1:	81 ec 08 00 00 00    	sub    esp,0x8
c001f2c7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f2ca:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f2cd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f2d0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f2d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f2d6:	60                   	pusha  
c001f2d7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f2dd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f2e0:	89 e3                	mov    ebx,esp
c001f2e2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f2e5:	52                   	push   edx
c001f2e6:	68 06 f3 01 c0       	push   0xc001f306
c001f2eb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f2ee:	89 dc                	mov    esp,ebx
c001f2f0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f2f3:	68 23 00 00 00       	push   0x23
c001f2f8:	51                   	push   ecx
c001f2f9:	68 02 02 00 00       	push   0x202
c001f2fe:	68 1b 00 00 00       	push   0x1b
c001f303:	ff 36                	push   DWORD PTR [esi]
c001f305:	cf                   	iret   

c001f306 <finishSignal>:
c001f306:	cd 0f                	int    0xf

c001f308 <finishSignal2>:
c001f308:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f30e:	e8 9c 29 ff ff       	call   c0011caf <KiFinishSignalZ>
c001f313:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f319:	68 23 00 00 00       	push   0x23
c001f31e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f321:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f324:	68 1b 00 00 00       	push   0x1b
c001f329:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f32c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f32f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f332:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f335:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f338:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f33b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f33e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f341:	cf                   	iret   

c001f342 <skipSignals>:
c001f342:	61                   	popa   
c001f343:	81 c4 08 00 00 00    	add    esp,0x8
c001f349:	cf                   	iret   
c001f34a:	90                   	nop
c001f34b:	90                   	nop

c001f34c <irq16>:
c001f34c:	fa                   	cli    
c001f34d:	6a 00                	push   0x0
c001f34f:	6a 30                	push   0x30
c001f351:	e9 c0 fe ff ff       	jmp    c001f216 <int_common_stub>

c001f356 <irq17>:
c001f356:	fa                   	cli    
c001f357:	6a 00                	push   0x0
c001f359:	6a 31                	push   0x31
c001f35b:	e9 b6 fe ff ff       	jmp    c001f216 <int_common_stub>

c001f360 <irq18>:
c001f360:	fa                   	cli    
c001f361:	6a 00                	push   0x0
c001f363:	6a 32                	push   0x32
c001f365:	e9 ac fe ff ff       	jmp    c001f216 <int_common_stub>

c001f36a <irq19>:
c001f36a:	fa                   	cli    
c001f36b:	6a 00                	push   0x0
c001f36d:	6a 33                	push   0x33
c001f36f:	e9 a2 fe ff ff       	jmp    c001f216 <int_common_stub>

c001f374 <irq20>:
c001f374:	fa                   	cli    
c001f375:	6a 00                	push   0x0
c001f377:	6a 34                	push   0x34
c001f379:	e9 98 fe ff ff       	jmp    c001f216 <int_common_stub>

c001f37e <irq21>:
c001f37e:	fa                   	cli    
c001f37f:	6a 00                	push   0x0
c001f381:	6a 35                	push   0x35
c001f383:	e9 8e fe ff ff       	jmp    c001f216 <int_common_stub>

c001f388 <irq22>:
c001f388:	fa                   	cli    
c001f389:	6a 00                	push   0x0
c001f38b:	6a 36                	push   0x36
c001f38d:	e9 84 fe ff ff       	jmp    c001f216 <int_common_stub>

c001f392 <irq23>:
c001f392:	fa                   	cli    
c001f393:	6a 00                	push   0x0
c001f395:	6a 37                	push   0x37
c001f397:	e9 7a fe ff ff       	jmp    c001f216 <int_common_stub>
c001f39c:	66 90                	xchg   ax,ax
c001f39e:	66 90                	xchg   ax,ax

c001f3a0 <i386GetRDRAND>:
c001f3a0:	b9 64 00 00 00       	mov    ecx,0x64

c001f3a5 <retry>:
c001f3a5:	0f c7 f0             	rdrand eax
c001f3a8:	72 05                	jb     c001f3af <retry.done>
c001f3aa:	e2 f9                	loop   c001f3a5 <retry>

c001f3ac <retry.fail>:
c001f3ac:	31 c0                	xor    eax,eax
c001f3ae:	c3                   	ret    

c001f3af <retry.done>:
c001f3af:	c3                   	ret    

c001f3b0 <absolutelyNoChanceInHell>:
c001f3b0:	b8 01 00 00 00       	mov    eax,0x1
c001f3b5:	0f a2                	cpuid  
c001f3b7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f3bd:	74 06                	je     c001f3c5 <sseDetect.noSSE>
c001f3bf:	b8 01 00 00 00       	mov    eax,0x1
c001f3c4:	c3                   	ret    

c001f3c5 <sseDetect.noSSE>:
c001f3c5:	31 c0                	xor    eax,eax
c001f3c7:	c3                   	ret    

c001f3c8 <sseSave>:
c001f3c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3cc:	0f ae 00             	fxsave [eax]
c001f3cf:	c3                   	ret    

c001f3d0 <sseLoad>:
c001f3d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3d4:	0f ae 08             	fxrstor [eax]
c001f3d7:	c3                   	ret    

c001f3d8 <sseInit>:
c001f3d8:	e8 42 00 00 00       	call   c001f41f <x87Init>
c001f3dd:	0f 20 e0             	mov    eax,cr4
c001f3e0:	66 0d 00 06          	or     ax,0x600
c001f3e4:	0f 22 e0             	mov    cr4,eax
c001f3e7:	c3                   	ret    

c001f3e8 <sseClose>:
c001f3e8:	c3                   	ret    
c001f3e9:	66 90                	xchg   ax,ax
c001f3eb:	66 90                	xchg   ax,ax
c001f3ed:	66 90                	xchg   ax,ax
c001f3ef:	90                   	nop

c001f3f0 <value_37F>:
c001f3f0:	7f 03                	jg     c001f3f5 <value_37A+0x1>

c001f3f2 <value_37E>:
c001f3f2:	7e 03                	jle    c001f3f7 <x87Detect+0x1>

c001f3f4 <value_37A>:
c001f3f4:	7a 03                	jp     c001f3f9 <x87Detect+0x3>

c001f3f6 <x87Detect>:
c001f3f6:	b8 01 00 00 00       	mov    eax,0x1
c001f3fb:	0f a2                	cpuid  
c001f3fd:	f7 c2 01 00 00 00    	test   edx,0x1
c001f403:	74 06                	je     c001f40b <x87Detect.nox87>
c001f405:	b8 01 00 00 00       	mov    eax,0x1
c001f40a:	c3                   	ret    

c001f40b <x87Detect.nox87>:
c001f40b:	b8 00 00 00 00       	mov    eax,0x0
c001f410:	c3                   	ret    

c001f411 <x87Save>:
c001f411:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f415:	dd 30                	fnsave [eax]
c001f417:	c3                   	ret    

c001f418 <x87Load>:
c001f418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f41c:	dd 20                	frstor [eax]
c001f41e:	c3                   	ret    

c001f41f <x87Init>:
c001f41f:	0f 20 c0             	mov    eax,cr0
c001f422:	66 25 fb ff          	and    ax,0xfffb
c001f426:	66 0d 22 00          	or     ax,0x22
c001f42a:	0f 22 c0             	mov    cr0,eax
c001f42d:	db e3                	fninit 
c001f42f:	0f 06                	clts   
c001f431:	d9 2d f4 f3 01 c0    	fldcw  WORD PTR ds:0xc001f3f4
c001f437:	c3                   	ret    

c001f438 <x87Close>:
c001f438:	c3                   	ret    
c001f439:	66 90                	xchg   ax,ax
c001f43b:	90                   	nop

c001f43c <__do_global_ctors_aux>:
c001f43c:	a1 f0 03 02 c0       	mov    eax,ds:0xc00203f0
c001f441:	83 f8 ff             	cmp    eax,0xffffffff
c001f444:	74 1a                	je     c001f460 <__do_global_ctors_aux+0x24>
c001f446:	55                   	push   ebp
c001f447:	89 e5                	mov    ebp,esp
c001f449:	53                   	push   ebx
c001f44a:	52                   	push   edx
c001f44b:	bb f0 03 02 c0       	mov    ebx,0xc00203f0
c001f450:	ff d0                	call   eax
c001f452:	83 eb 04             	sub    ebx,0x4
c001f455:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f457:	83 f8 ff             	cmp    eax,0xffffffff
c001f45a:	75 f4                	jne    c001f450 <__do_global_ctors_aux+0x14>
c001f45c:	58                   	pop    eax
c001f45d:	5b                   	pop    ebx
c001f45e:	5d                   	pop    ebp
c001f45f:	c3                   	ret    
c001f460:	c3                   	ret    
c001f461:	66 90                	xchg   ax,ax
c001f463:	90                   	nop

c001f464 <__divdi3>:
c001f464:	55                   	push   ebp
c001f465:	57                   	push   edi
c001f466:	56                   	push   esi
c001f467:	53                   	push   ebx
c001f468:	83 ec 1c             	sub    esp,0x1c
c001f46b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f46f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f473:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f476:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f47a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f47e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f482:	85 db                	test   ebx,ebx
c001f484:	0f 88 8e 00 00 00    	js     c001f518 <__divdi3+0xb4>
c001f48a:	89 dd                	mov    ebp,ebx
c001f48c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f494:	89 d3                	mov    ebx,edx
c001f496:	85 d2                	test   edx,edx
c001f498:	79 0d                	jns    c001f4a7 <__divdi3+0x43>
c001f49a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f49e:	f7 d8                	neg    eax
c001f4a0:	83 d2 00             	adc    edx,0x0
c001f4a3:	f7 da                	neg    edx
c001f4a5:	89 d3                	mov    ebx,edx
c001f4a7:	89 c7                	mov    edi,eax
c001f4a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f4ac:	85 db                	test   ebx,ebx
c001f4ae:	75 48                	jne    c001f4f8 <__divdi3+0x94>
c001f4b0:	39 ef                	cmp    edi,ebp
c001f4b2:	76 24                	jbe    c001f4d8 <__divdi3+0x74>
c001f4b4:	89 ea                	mov    edx,ebp
c001f4b6:	f7 f7                	div    edi
c001f4b8:	89 c1                	mov    ecx,eax
c001f4ba:	31 f6                	xor    esi,esi
c001f4bc:	89 c8                	mov    eax,ecx
c001f4be:	89 f2                	mov    edx,esi
c001f4c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f4c4:	85 c9                	test   ecx,ecx
c001f4c6:	74 07                	je     c001f4cf <__divdi3+0x6b>
c001f4c8:	f7 d8                	neg    eax
c001f4ca:	83 d2 00             	adc    edx,0x0
c001f4cd:	f7 da                	neg    edx
c001f4cf:	83 c4 1c             	add    esp,0x1c
c001f4d2:	5b                   	pop    ebx
c001f4d3:	5e                   	pop    esi
c001f4d4:	5f                   	pop    edi
c001f4d5:	5d                   	pop    ebp
c001f4d6:	c3                   	ret    
c001f4d7:	90                   	nop
c001f4d8:	85 ff                	test   edi,edi
c001f4da:	75 0b                	jne    c001f4e7 <__divdi3+0x83>
c001f4dc:	b8 01 00 00 00       	mov    eax,0x1
c001f4e1:	31 d2                	xor    edx,edx
c001f4e3:	f7 f3                	div    ebx
c001f4e5:	89 c7                	mov    edi,eax
c001f4e7:	31 d2                	xor    edx,edx
c001f4e9:	89 e8                	mov    eax,ebp
c001f4eb:	f7 f7                	div    edi
c001f4ed:	89 c6                	mov    esi,eax
c001f4ef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f4f2:	f7 f7                	div    edi
c001f4f4:	89 c1                	mov    ecx,eax
c001f4f6:	eb c4                	jmp    c001f4bc <__divdi3+0x58>
c001f4f8:	39 eb                	cmp    ebx,ebp
c001f4fa:	77 3c                	ja     c001f538 <__divdi3+0xd4>
c001f4fc:	0f bd f3             	bsr    esi,ebx
c001f4ff:	83 f6 1f             	xor    esi,0x1f
c001f502:	75 40                	jne    c001f544 <__divdi3+0xe0>
c001f504:	39 eb                	cmp    ebx,ebp
c001f506:	72 09                	jb     c001f511 <__divdi3+0xad>
c001f508:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f50b:	0f 87 97 00 00 00    	ja     c001f5a8 <__divdi3+0x144>
c001f511:	b9 01 00 00 00       	mov    ecx,0x1
c001f516:	eb a4                	jmp    c001f4bc <__divdi3+0x58>
c001f518:	f7 d9                	neg    ecx
c001f51a:	83 d3 00             	adc    ebx,0x0
c001f51d:	f7 db                	neg    ebx
c001f51f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f522:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f526:	89 dd                	mov    ebp,ebx
c001f528:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f530:	e9 5f ff ff ff       	jmp    c001f494 <__divdi3+0x30>
c001f535:	8d 76 00             	lea    esi,[esi+0x0]
c001f538:	31 f6                	xor    esi,esi
c001f53a:	31 c9                	xor    ecx,ecx
c001f53c:	e9 7b ff ff ff       	jmp    c001f4bc <__divdi3+0x58>
c001f541:	8d 76 00             	lea    esi,[esi+0x0]
c001f544:	b8 20 00 00 00       	mov    eax,0x20
c001f549:	29 f0                	sub    eax,esi
c001f54b:	89 f1                	mov    ecx,esi
c001f54d:	d3 e3                	shl    ebx,cl
c001f54f:	89 fa                	mov    edx,edi
c001f551:	88 c1                	mov    cl,al
c001f553:	d3 ea                	shr    edx,cl
c001f555:	09 da                	or     edx,ebx
c001f557:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f55b:	89 f1                	mov    ecx,esi
c001f55d:	d3 e7                	shl    edi,cl
c001f55f:	89 eb                	mov    ebx,ebp
c001f561:	88 c1                	mov    cl,al
c001f563:	d3 eb                	shr    ebx,cl
c001f565:	89 f1                	mov    ecx,esi
c001f567:	d3 e5                	shl    ebp,cl
c001f569:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f56c:	88 c1                	mov    cl,al
c001f56e:	d3 ea                	shr    edx,cl
c001f570:	09 d5                	or     ebp,edx
c001f572:	89 e8                	mov    eax,ebp
c001f574:	89 da                	mov    edx,ebx
c001f576:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f57a:	89 d3                	mov    ebx,edx
c001f57c:	89 c5                	mov    ebp,eax
c001f57e:	f7 e7                	mul    edi
c001f580:	39 d3                	cmp    ebx,edx
c001f582:	72 18                	jb     c001f59c <__divdi3+0x138>
c001f584:	74 0a                	je     c001f590 <__divdi3+0x12c>
c001f586:	89 e9                	mov    ecx,ebp
c001f588:	31 f6                	xor    esi,esi
c001f58a:	e9 2d ff ff ff       	jmp    c001f4bc <__divdi3+0x58>
c001f58f:	90                   	nop
c001f590:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f593:	89 f1                	mov    ecx,esi
c001f595:	d3 e7                	shl    edi,cl
c001f597:	39 c7                	cmp    edi,eax
c001f599:	73 eb                	jae    c001f586 <__divdi3+0x122>
c001f59b:	90                   	nop
c001f59c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f59f:	31 f6                	xor    esi,esi
c001f5a1:	e9 16 ff ff ff       	jmp    c001f4bc <__divdi3+0x58>
c001f5a6:	66 90                	xchg   ax,ax
c001f5a8:	31 c9                	xor    ecx,ecx
c001f5aa:	e9 0d ff ff ff       	jmp    c001f4bc <__divdi3+0x58>
c001f5af:	90                   	nop

c001f5b0 <__moddi3>:
c001f5b0:	55                   	push   ebp
c001f5b1:	57                   	push   edi
c001f5b2:	56                   	push   esi
c001f5b3:	53                   	push   ebx
c001f5b4:	83 ec 2c             	sub    esp,0x2c
c001f5b7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f5bb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f5bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f5c3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f5c7:	85 db                	test   ebx,ebx
c001f5c9:	0f 88 85 00 00 00    	js     c001f654 <__moddi3+0xa4>
c001f5cf:	89 de                	mov    esi,ebx
c001f5d1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f5d9:	89 d7                	mov    edi,edx
c001f5db:	85 d2                	test   edx,edx
c001f5dd:	79 09                	jns    c001f5e8 <__moddi3+0x38>
c001f5df:	f7 d8                	neg    eax
c001f5e1:	83 d2 00             	adc    edx,0x0
c001f5e4:	f7 da                	neg    edx
c001f5e6:	89 d7                	mov    edi,edx
c001f5e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f5ec:	89 cd                	mov    ebp,ecx
c001f5ee:	85 ff                	test   edi,edi
c001f5f0:	75 52                	jne    c001f644 <__moddi3+0x94>
c001f5f2:	89 c3                	mov    ebx,eax
c001f5f4:	39 f0                	cmp    eax,esi
c001f5f6:	76 24                	jbe    c001f61c <__moddi3+0x6c>
c001f5f8:	89 c8                	mov    eax,ecx
c001f5fa:	89 f2                	mov    edx,esi
c001f5fc:	f7 f3                	div    ebx
c001f5fe:	89 d6                	mov    esi,edx
c001f600:	89 f0                	mov    eax,esi
c001f602:	31 d2                	xor    edx,edx
c001f604:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f608:	85 c9                	test   ecx,ecx
c001f60a:	74 07                	je     c001f613 <__moddi3+0x63>
c001f60c:	f7 d8                	neg    eax
c001f60e:	83 d2 00             	adc    edx,0x0
c001f611:	f7 da                	neg    edx
c001f613:	83 c4 2c             	add    esp,0x2c
c001f616:	5b                   	pop    ebx
c001f617:	5e                   	pop    esi
c001f618:	5f                   	pop    edi
c001f619:	5d                   	pop    ebp
c001f61a:	c3                   	ret    
c001f61b:	90                   	nop
c001f61c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f620:	85 db                	test   ebx,ebx
c001f622:	75 0d                	jne    c001f631 <__moddi3+0x81>
c001f624:	b8 01 00 00 00       	mov    eax,0x1
c001f629:	31 d2                	xor    edx,edx
c001f62b:	f7 f7                	div    edi
c001f62d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f631:	89 f0                	mov    eax,esi
c001f633:	31 d2                	xor    edx,edx
c001f635:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f639:	f7 f7                	div    edi
c001f63b:	89 e8                	mov    eax,ebp
c001f63d:	f7 f7                	div    edi
c001f63f:	89 d6                	mov    esi,edx
c001f641:	eb bd                	jmp    c001f600 <__moddi3+0x50>
c001f643:	90                   	nop
c001f644:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f648:	39 f7                	cmp    edi,esi
c001f64a:	76 20                	jbe    c001f66c <__moddi3+0xbc>
c001f64c:	89 c8                	mov    eax,ecx
c001f64e:	89 f2                	mov    edx,esi
c001f650:	eb b2                	jmp    c001f604 <__moddi3+0x54>
c001f652:	66 90                	xchg   ax,ax
c001f654:	f7 d9                	neg    ecx
c001f656:	83 d3 00             	adc    ebx,0x0
c001f659:	f7 db                	neg    ebx
c001f65b:	89 de                	mov    esi,ebx
c001f65d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f665:	e9 6f ff ff ff       	jmp    c001f5d9 <__moddi3+0x29>
c001f66a:	66 90                	xchg   ax,ax
c001f66c:	0f bd c7             	bsr    eax,edi
c001f66f:	83 f0 1f             	xor    eax,0x1f
c001f672:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f676:	75 24                	jne    c001f69c <__moddi3+0xec>
c001f678:	39 f7                	cmp    edi,esi
c001f67a:	72 06                	jb     c001f682 <__moddi3+0xd2>
c001f67c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f680:	77 0c                	ja     c001f68e <__moddi3+0xde>
c001f682:	89 e9                	mov    ecx,ebp
c001f684:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f688:	19 fe                	sbb    esi,edi
c001f68a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f68e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f692:	89 f2                	mov    edx,esi
c001f694:	e9 6b ff ff ff       	jmp    c001f604 <__moddi3+0x54>
c001f699:	8d 76 00             	lea    esi,[esi+0x0]
c001f69c:	b8 20 00 00 00       	mov    eax,0x20
c001f6a1:	89 c2                	mov    edx,eax
c001f6a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f6a7:	29 da                	sub    edx,ebx
c001f6a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f6ad:	88 d9                	mov    cl,bl
c001f6af:	d3 e7                	shl    edi,cl
c001f6b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6b5:	88 d1                	mov    cl,dl
c001f6b7:	d3 e8                	shr    eax,cl
c001f6b9:	09 c7                	or     edi,eax
c001f6bb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f6bf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f6c3:	89 d8                	mov    eax,ebx
c001f6c5:	88 d9                	mov    cl,bl
c001f6c7:	d3 e7                	shl    edi,cl
c001f6c9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f6cd:	89 f3                	mov    ebx,esi
c001f6cf:	88 d1                	mov    cl,dl
c001f6d1:	d3 eb                	shr    ebx,cl
c001f6d3:	89 c7                	mov    edi,eax
c001f6d5:	88 c1                	mov    cl,al
c001f6d7:	d3 e6                	shl    esi,cl
c001f6d9:	89 e8                	mov    eax,ebp
c001f6db:	88 d1                	mov    cl,dl
c001f6dd:	d3 e8                	shr    eax,cl
c001f6df:	09 f0                	or     eax,esi
c001f6e1:	89 f9                	mov    ecx,edi
c001f6e3:	d3 e5                	shl    ebp,cl
c001f6e5:	89 da                	mov    edx,ebx
c001f6e7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f6eb:	89 d3                	mov    ebx,edx
c001f6ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f6f1:	89 c6                	mov    esi,eax
c001f6f3:	89 d1                	mov    ecx,edx
c001f6f5:	39 d3                	cmp    ebx,edx
c001f6f7:	72 27                	jb     c001f720 <__moddi3+0x170>
c001f6f9:	74 21                	je     c001f71c <__moddi3+0x16c>
c001f6fb:	29 f5                	sub    ebp,esi
c001f6fd:	19 cb                	sbb    ebx,ecx
c001f6ff:	89 de                	mov    esi,ebx
c001f701:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f705:	d3 e6                	shl    esi,cl
c001f707:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f70b:	89 f9                	mov    ecx,edi
c001f70d:	d3 ed                	shr    ebp,cl
c001f70f:	09 ee                	or     esi,ebp
c001f711:	89 f0                	mov    eax,esi
c001f713:	d3 eb                	shr    ebx,cl
c001f715:	89 da                	mov    edx,ebx
c001f717:	e9 e8 fe ff ff       	jmp    c001f604 <__moddi3+0x54>
c001f71c:	39 c5                	cmp    ebp,eax
c001f71e:	73 db                	jae    c001f6fb <__moddi3+0x14b>
c001f720:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f724:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f728:	89 d1                	mov    ecx,edx
c001f72a:	89 c6                	mov    esi,eax
c001f72c:	eb cd                	jmp    c001f6fb <__moddi3+0x14b>
c001f72e:	66 90                	xchg   ax,ax

c001f730 <__udivdi3>:
c001f730:	55                   	push   ebp
c001f731:	57                   	push   edi
c001f732:	56                   	push   esi
c001f733:	53                   	push   ebx
c001f734:	83 ec 1c             	sub    esp,0x1c
c001f737:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f73b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f73f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f743:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f747:	85 d2                	test   edx,edx
c001f749:	75 41                	jne    c001f78c <__udivdi3+0x5c>
c001f74b:	39 f7                	cmp    edi,esi
c001f74d:	76 15                	jbe    c001f764 <__udivdi3+0x34>
c001f74f:	89 e8                	mov    eax,ebp
c001f751:	89 f2                	mov    edx,esi
c001f753:	f7 f7                	div    edi
c001f755:	31 db                	xor    ebx,ebx
c001f757:	89 da                	mov    edx,ebx
c001f759:	83 c4 1c             	add    esp,0x1c
c001f75c:	5b                   	pop    ebx
c001f75d:	5e                   	pop    esi
c001f75e:	5f                   	pop    edi
c001f75f:	5d                   	pop    ebp
c001f760:	c3                   	ret    
c001f761:	8d 76 00             	lea    esi,[esi+0x0]
c001f764:	89 f9                	mov    ecx,edi
c001f766:	85 ff                	test   edi,edi
c001f768:	75 0b                	jne    c001f775 <__udivdi3+0x45>
c001f76a:	b8 01 00 00 00       	mov    eax,0x1
c001f76f:	31 d2                	xor    edx,edx
c001f771:	f7 f7                	div    edi
c001f773:	89 c1                	mov    ecx,eax
c001f775:	31 d2                	xor    edx,edx
c001f777:	89 f0                	mov    eax,esi
c001f779:	f7 f1                	div    ecx
c001f77b:	89 c3                	mov    ebx,eax
c001f77d:	89 e8                	mov    eax,ebp
c001f77f:	f7 f1                	div    ecx
c001f781:	89 da                	mov    edx,ebx
c001f783:	83 c4 1c             	add    esp,0x1c
c001f786:	5b                   	pop    ebx
c001f787:	5e                   	pop    esi
c001f788:	5f                   	pop    edi
c001f789:	5d                   	pop    ebp
c001f78a:	c3                   	ret    
c001f78b:	90                   	nop
c001f78c:	39 f2                	cmp    edx,esi
c001f78e:	77 1c                	ja     c001f7ac <__udivdi3+0x7c>
c001f790:	0f bd da             	bsr    ebx,edx
c001f793:	83 f3 1f             	xor    ebx,0x1f
c001f796:	75 24                	jne    c001f7bc <__udivdi3+0x8c>
c001f798:	39 f2                	cmp    edx,esi
c001f79a:	72 08                	jb     c001f7a4 <__udivdi3+0x74>
c001f79c:	39 ef                	cmp    edi,ebp
c001f79e:	0f 87 84 00 00 00    	ja     c001f828 <__udivdi3+0xf8>
c001f7a4:	b8 01 00 00 00       	mov    eax,0x1
c001f7a9:	eb ac                	jmp    c001f757 <__udivdi3+0x27>
c001f7ab:	90                   	nop
c001f7ac:	31 db                	xor    ebx,ebx
c001f7ae:	31 c0                	xor    eax,eax
c001f7b0:	89 da                	mov    edx,ebx
c001f7b2:	83 c4 1c             	add    esp,0x1c
c001f7b5:	5b                   	pop    ebx
c001f7b6:	5e                   	pop    esi
c001f7b7:	5f                   	pop    edi
c001f7b8:	5d                   	pop    ebp
c001f7b9:	c3                   	ret    
c001f7ba:	66 90                	xchg   ax,ax
c001f7bc:	b8 20 00 00 00       	mov    eax,0x20
c001f7c1:	29 d8                	sub    eax,ebx
c001f7c3:	88 d9                	mov    cl,bl
c001f7c5:	d3 e2                	shl    edx,cl
c001f7c7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f7cb:	89 fa                	mov    edx,edi
c001f7cd:	88 c1                	mov    cl,al
c001f7cf:	d3 ea                	shr    edx,cl
c001f7d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f7d5:	09 d1                	or     ecx,edx
c001f7d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f7db:	88 d9                	mov    cl,bl
c001f7dd:	d3 e7                	shl    edi,cl
c001f7df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f7e3:	89 f7                	mov    edi,esi
c001f7e5:	88 c1                	mov    cl,al
c001f7e7:	d3 ef                	shr    edi,cl
c001f7e9:	88 d9                	mov    cl,bl
c001f7eb:	d3 e6                	shl    esi,cl
c001f7ed:	89 ea                	mov    edx,ebp
c001f7ef:	88 c1                	mov    cl,al
c001f7f1:	d3 ea                	shr    edx,cl
c001f7f3:	09 d6                	or     esi,edx
c001f7f5:	89 f0                	mov    eax,esi
c001f7f7:	89 fa                	mov    edx,edi
c001f7f9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f7fd:	89 d7                	mov    edi,edx
c001f7ff:	89 c6                	mov    esi,eax
c001f801:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f805:	39 d7                	cmp    edi,edx
c001f807:	72 13                	jb     c001f81c <__udivdi3+0xec>
c001f809:	74 09                	je     c001f814 <__udivdi3+0xe4>
c001f80b:	89 f0                	mov    eax,esi
c001f80d:	31 db                	xor    ebx,ebx
c001f80f:	e9 43 ff ff ff       	jmp    c001f757 <__udivdi3+0x27>
c001f814:	88 d9                	mov    cl,bl
c001f816:	d3 e5                	shl    ebp,cl
c001f818:	39 c5                	cmp    ebp,eax
c001f81a:	73 ef                	jae    c001f80b <__udivdi3+0xdb>
c001f81c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f81f:	31 db                	xor    ebx,ebx
c001f821:	e9 31 ff ff ff       	jmp    c001f757 <__udivdi3+0x27>
c001f826:	66 90                	xchg   ax,ax
c001f828:	31 c0                	xor    eax,eax
c001f82a:	e9 28 ff ff ff       	jmp    c001f757 <__udivdi3+0x27>
c001f82f:	90                   	nop

c001f830 <__umoddi3>:
c001f830:	55                   	push   ebp
c001f831:	57                   	push   edi
c001f832:	56                   	push   esi
c001f833:	53                   	push   ebx
c001f834:	83 ec 1c             	sub    esp,0x1c
c001f837:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f83b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f83f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f843:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f847:	89 da                	mov    edx,ebx
c001f849:	85 c0                	test   eax,eax
c001f84b:	75 37                	jne    c001f884 <__umoddi3+0x54>
c001f84d:	39 df                	cmp    edi,ebx
c001f84f:	76 13                	jbe    c001f864 <__umoddi3+0x34>
c001f851:	89 f0                	mov    eax,esi
c001f853:	f7 f7                	div    edi
c001f855:	89 d0                	mov    eax,edx
c001f857:	31 d2                	xor    edx,edx
c001f859:	83 c4 1c             	add    esp,0x1c
c001f85c:	5b                   	pop    ebx
c001f85d:	5e                   	pop    esi
c001f85e:	5f                   	pop    edi
c001f85f:	5d                   	pop    ebp
c001f860:	c3                   	ret    
c001f861:	8d 76 00             	lea    esi,[esi+0x0]
c001f864:	89 fd                	mov    ebp,edi
c001f866:	85 ff                	test   edi,edi
c001f868:	75 0b                	jne    c001f875 <__umoddi3+0x45>
c001f86a:	b8 01 00 00 00       	mov    eax,0x1
c001f86f:	31 d2                	xor    edx,edx
c001f871:	f7 f7                	div    edi
c001f873:	89 c5                	mov    ebp,eax
c001f875:	89 d8                	mov    eax,ebx
c001f877:	31 d2                	xor    edx,edx
c001f879:	f7 f5                	div    ebp
c001f87b:	89 f0                	mov    eax,esi
c001f87d:	f7 f5                	div    ebp
c001f87f:	89 d0                	mov    eax,edx
c001f881:	eb d4                	jmp    c001f857 <__umoddi3+0x27>
c001f883:	90                   	nop
c001f884:	89 f1                	mov    ecx,esi
c001f886:	39 d8                	cmp    eax,ebx
c001f888:	76 0a                	jbe    c001f894 <__umoddi3+0x64>
c001f88a:	89 f0                	mov    eax,esi
c001f88c:	83 c4 1c             	add    esp,0x1c
c001f88f:	5b                   	pop    ebx
c001f890:	5e                   	pop    esi
c001f891:	5f                   	pop    edi
c001f892:	5d                   	pop    ebp
c001f893:	c3                   	ret    
c001f894:	0f bd e8             	bsr    ebp,eax
c001f897:	83 f5 1f             	xor    ebp,0x1f
c001f89a:	75 1c                	jne    c001f8b8 <__umoddi3+0x88>
c001f89c:	39 d8                	cmp    eax,ebx
c001f89e:	72 04                	jb     c001f8a4 <__umoddi3+0x74>
c001f8a0:	39 f7                	cmp    edi,esi
c001f8a2:	77 08                	ja     c001f8ac <__umoddi3+0x7c>
c001f8a4:	89 da                	mov    edx,ebx
c001f8a6:	29 fe                	sub    esi,edi
c001f8a8:	19 c2                	sbb    edx,eax
c001f8aa:	89 f1                	mov    ecx,esi
c001f8ac:	89 c8                	mov    eax,ecx
c001f8ae:	83 c4 1c             	add    esp,0x1c
c001f8b1:	5b                   	pop    ebx
c001f8b2:	5e                   	pop    esi
c001f8b3:	5f                   	pop    edi
c001f8b4:	5d                   	pop    ebp
c001f8b5:	c3                   	ret    
c001f8b6:	66 90                	xchg   ax,ax
c001f8b8:	ba 20 00 00 00       	mov    edx,0x20
c001f8bd:	29 ea                	sub    edx,ebp
c001f8bf:	89 e9                	mov    ecx,ebp
c001f8c1:	d3 e0                	shl    eax,cl
c001f8c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f8c7:	89 f8                	mov    eax,edi
c001f8c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f8cd:	88 d1                	mov    cl,dl
c001f8cf:	d3 e8                	shr    eax,cl
c001f8d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f8d5:	09 c1                	or     ecx,eax
c001f8d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f8db:	89 e9                	mov    ecx,ebp
c001f8dd:	d3 e7                	shl    edi,cl
c001f8df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f8e3:	89 d8                	mov    eax,ebx
c001f8e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f8e9:	88 d1                	mov    cl,dl
c001f8eb:	d3 e8                	shr    eax,cl
c001f8ed:	89 c7                	mov    edi,eax
c001f8ef:	89 e9                	mov    ecx,ebp
c001f8f1:	d3 e3                	shl    ebx,cl
c001f8f3:	89 f0                	mov    eax,esi
c001f8f5:	88 d1                	mov    cl,dl
c001f8f7:	d3 e8                	shr    eax,cl
c001f8f9:	09 d8                	or     eax,ebx
c001f8fb:	89 e9                	mov    ecx,ebp
c001f8fd:	d3 e6                	shl    esi,cl
c001f8ff:	89 f3                	mov    ebx,esi
c001f901:	89 fa                	mov    edx,edi
c001f903:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f907:	89 d1                	mov    ecx,edx
c001f909:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f90d:	89 c6                	mov    esi,eax
c001f90f:	89 d7                	mov    edi,edx
c001f911:	39 d1                	cmp    ecx,edx
c001f913:	72 27                	jb     c001f93c <__umoddi3+0x10c>
c001f915:	74 21                	je     c001f938 <__umoddi3+0x108>
c001f917:	89 ca                	mov    edx,ecx
c001f919:	29 f3                	sub    ebx,esi
c001f91b:	19 fa                	sbb    edx,edi
c001f91d:	89 d0                	mov    eax,edx
c001f91f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f923:	d3 e0                	shl    eax,cl
c001f925:	89 e9                	mov    ecx,ebp
c001f927:	d3 eb                	shr    ebx,cl
c001f929:	09 d8                	or     eax,ebx
c001f92b:	d3 ea                	shr    edx,cl
c001f92d:	83 c4 1c             	add    esp,0x1c
c001f930:	5b                   	pop    ebx
c001f931:	5e                   	pop    esi
c001f932:	5f                   	pop    edi
c001f933:	5d                   	pop    ebp
c001f934:	c3                   	ret    
c001f935:	8d 76 00             	lea    esi,[esi+0x0]
c001f938:	39 c3                	cmp    ebx,eax
c001f93a:	73 db                	jae    c001f917 <__umoddi3+0xe7>
c001f93c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f940:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f944:	89 d7                	mov    edi,edx
c001f946:	89 c6                	mov    esi,eax
c001f948:	eb cd                	jmp    c001f917 <__umoddi3+0xe7>

Disassembly of section .init:

c001f94a <_init>:
c001f94a:	55                   	push   ebp
c001f94b:	89 e5                	mov    ebp,esp
c001f94d:	e8 a2 07 fe ff       	call   c00000f4 <frame_dummy>
c001f952:	e8 e5 fa ff ff       	call   c001f43c <__do_global_ctors_aux>
c001f957:	5d                   	pop    ebp
c001f958:	c3                   	ret    

Disassembly of section .fini:

c001f959 <_fini>:
c001f959:	55                   	push   ebp
c001f95a:	89 e5                	mov    ebp,esp
c001f95c:	e8 23 07 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f961:	5d                   	pop    ebp
c001f962:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f964 <Computer::~Computer()>:
c001f964:	83 ec 0c             	sub    esp,0xc
c001f967:	ba 74 0c 02 c0       	mov    edx,0xc0020c74
c001f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f970:	89 10                	mov    DWORD PTR [eax],edx
c001f972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f976:	83 ec 0c             	sub    esp,0xc
c001f979:	50                   	push   eax
c001f97a:	e8 45 cf fe ff       	call   c000c8c4 <Device::~Device()>
c001f97f:	83 c4 10             	add    esp,0x10
c001f982:	90                   	nop
c001f983:	83 c4 0c             	add    esp,0xc
c001f986:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f988 <Computer::~Computer()>:
c001f988:	83 ec 0c             	sub    esp,0xc
c001f98b:	83 ec 0c             	sub    esp,0xc
c001f98e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f992:	e8 cd ff ff ff       	call   c001f964 <Computer::~Computer()>
c001f997:	83 c4 10             	add    esp,0x10
c001f99a:	83 ec 08             	sub    esp,0x8
c001f99d:	68 70 01 00 00       	push   0x170
c001f9a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9a6:	e8 6d ae fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f9ab:	83 c4 10             	add    esp,0x10
c001f9ae:	83 c4 0c             	add    esp,0xc
c001f9b1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f9b2 <idleCommon()>:
c001f9b2:	83 ec 0c             	sub    esp,0xc
c001f9b5:	fa                   	cli    
c001f9b6:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001f9bc:	e8 fb 66 ff ff       	call   c00160bc <schedule()>
c001f9c1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001f9c6:	48                   	dec    eax
c001f9c7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001f9cc:	75 01                	jne    c001f9cf <idleCommon()+0x1d>
c001f9ce:	fb                   	sti    
c001f9cf:	83 c4 0c             	add    esp,0xc
c001f9d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f9d4 <LinkedList<UnixFile>::~LinkedList()>:
c001f9d4:	90                   	nop
c001f9d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f9d6 <LinkedList<UnixFile>::LinkedList()>:
c001f9d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa0f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa16:	90                   	nop
c001fa17:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001fa18 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001fa18:	83 ec 0c             	sub    esp,0xc
c001fa1b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fa20:	75 10                	jne    c001fa32 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001fa22:	83 ec 0c             	sub    esp,0xc
c001fa25:	68 88 0e 02 c0       	push   0xc0020e88
c001fa2a:	e8 ec 1b ff ff       	call   c001161b <KePanic(char const*)>
c001fa2f:	83 c4 10             	add    esp,0x10
c001fa32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa36:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa38:	85 c0                	test   eax,eax
c001fa3a:	74 34                	je     c001fa70 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fa3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa43:	85 c0                	test   eax,eax
c001fa45:	74 29                	je     c001fa70 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fa47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa4e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa5d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa67:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa6e:	eb 65                	jmp    c001fad5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa74:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa76:	85 c0                	test   eax,eax
c001fa78:	75 4b                	jne    c001fac5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fa7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa81:	85 c0                	test   eax,eax
c001fa83:	75 40                	jne    c001fac5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fa85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa8d:	89 10                	mov    DWORD PTR [eax],edx
c001fa8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faa1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001faa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001faaf:	85 c0                	test   eax,eax
c001fab1:	74 22                	je     c001fad5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fab3:	83 ec 0c             	sub    esp,0xc
c001fab6:	68 aa 0e 02 c0       	push   0xc0020eaa
c001fabb:	e8 5b 1b ff ff       	call   c001161b <KePanic(char const*)>
c001fac0:	83 c4 10             	add    esp,0x10
c001fac3:	eb 10                	jmp    c001fad5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fac5:	83 ec 0c             	sub    esp,0xc
c001fac8:	68 b4 0e 02 c0       	push   0xc0020eb4
c001facd:	e8 49 1b ff ff       	call   c001161b <KePanic(char const*)>
c001fad2:	83 c4 10             	add    esp,0x10
c001fad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fadc:	8d 50 01             	lea    edx,[eax+0x1]
c001fadf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fae6:	90                   	nop
c001fae7:	83 c4 0c             	add    esp,0xc
c001faea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001faec <LinkedList<UnixFile>::getFirstElement()>:
c001faec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001faf2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001faf4 <LinkedList<UnixFile>::removeFirst()>:
c001faf4:	83 ec 0c             	sub    esp,0xc
c001faf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fafb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fafd:	85 c0                	test   eax,eax
c001faff:	75 12                	jne    c001fb13 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fb01:	83 ec 0c             	sub    esp,0xc
c001fb04:	68 c0 0e 02 c0       	push   0xc0020ec0
c001fb09:	e8 0d 1b ff ff       	call   c001161b <KePanic(char const*)>
c001fb0e:	83 c4 10             	add    esp,0x10
c001fb11:	eb 7e                	jmp    c001fb91 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fb13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb1a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb1d:	85 c0                	test   eax,eax
c001fb1f:	74 10                	je     c001fb31 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fb21:	83 ec 0c             	sub    esp,0xc
c001fb24:	68 0b 0f 02 c0       	push   0xc0020f0b
c001fb29:	e8 ed 1a ff ff       	call   c001161b <KePanic(char const*)>
c001fb2e:	83 c4 10             	add    esp,0x10
c001fb31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb35:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb37:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb3a:	85 c0                	test   eax,eax
c001fb3c:	75 33                	jne    c001fb71 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fb3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb5a:	83 f8 01             	cmp    eax,0x1
c001fb5d:	74 21                	je     c001fb80 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fb5f:	83 ec 0c             	sub    esp,0xc
c001fb62:	68 e4 0e 02 c0       	push   0xc0020ee4
c001fb67:	e8 af 1a ff ff       	call   c001161b <KePanic(char const*)>
c001fb6c:	83 c4 10             	add    esp,0x10
c001fb6f:	eb 0f                	jmp    c001fb80 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb75:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb77:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fb7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb7e:	89 10                	mov    DWORD PTR [eax],edx
c001fb80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb87:	8d 50 ff             	lea    edx,[eax-0x1]
c001fb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb8e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb91:	83 c4 0c             	add    esp,0xc
c001fb94:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fb96 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fb96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb9d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fb9e <DriverlessDevice::~DriverlessDevice()>:
c001fb9e:	ba 1c 1b 02 c0       	mov    edx,0xc0021b1c
c001fba3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fba7:	89 10                	mov    DWORD PTR [eax],edx
c001fba9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbad:	50                   	push   eax
c001fbae:	e8 11 cd fe ff       	call   c000c8c4 <Device::~Device()>
c001fbb3:	83 c4 04             	add    esp,0x4
c001fbb6:	90                   	nop
c001fbb7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fbb8 <DriverlessDevice::~DriverlessDevice()>:
c001fbb8:	83 ec 0c             	sub    esp,0xc
c001fbbb:	83 ec 0c             	sub    esp,0xc
c001fbbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbc2:	e8 d7 ff ff ff       	call   c001fb9e <DriverlessDevice::~DriverlessDevice()>
c001fbc7:	83 c4 10             	add    esp,0x10
c001fbca:	83 ec 08             	sub    esp,0x8
c001fbcd:	68 58 01 00 00       	push   0x158
c001fbd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbd6:	e8 3d ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fbdb:	83 c4 10             	add    esp,0x10
c001fbde:	83 c4 0c             	add    esp,0xc
c001fbe1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fbe2 <LinkedList<Device>::addElement(Device*)>:
c001fbe2:	83 ec 0c             	sub    esp,0xc
c001fbe5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fbea:	75 10                	jne    c001fbfc <LinkedList<Device>::addElement(Device*)+0x1a>
c001fbec:	83 ec 0c             	sub    esp,0xc
c001fbef:	68 88 0e 02 c0       	push   0xc0020e88
c001fbf4:	e8 22 1a ff ff       	call   c001161b <KePanic(char const*)>
c001fbf9:	83 c4 10             	add    esp,0x10
c001fbfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc00:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc02:	85 c0                	test   eax,eax
c001fc04:	74 3a                	je     c001fc40 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fc06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc0d:	85 c0                	test   eax,eax
c001fc0f:	74 2f                	je     c001fc40 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fc11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc1c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fc22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc2a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fc2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc34:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fc3e:	eb 68                	jmp    c001fca8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc44:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc46:	85 c0                	test   eax,eax
c001fc48:	75 4e                	jne    c001fc98 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc51:	85 c0                	test   eax,eax
c001fc53:	75 43                	jne    c001fc98 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fc55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc5d:	89 10                	mov    DWORD PTR [eax],edx
c001fc5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc67:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fc6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc71:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fc7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc7f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc82:	85 c0                	test   eax,eax
c001fc84:	74 22                	je     c001fca8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc86:	83 ec 0c             	sub    esp,0xc
c001fc89:	68 aa 0e 02 c0       	push   0xc0020eaa
c001fc8e:	e8 88 19 ff ff       	call   c001161b <KePanic(char const*)>
c001fc93:	83 c4 10             	add    esp,0x10
c001fc96:	eb 10                	jmp    c001fca8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc98:	83 ec 0c             	sub    esp,0xc
c001fc9b:	68 b4 0e 02 c0       	push   0xc0020eb4
c001fca0:	e8 76 19 ff ff       	call   c001161b <KePanic(char const*)>
c001fca5:	83 c4 10             	add    esp,0x10
c001fca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fcaf:	8d 50 01             	lea    edx,[eax+0x1]
c001fcb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fcb9:	90                   	nop
c001fcba:	83 c4 0c             	add    esp,0xc
c001fcbd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fcbe <LinkedList<Device>::LinkedList()>:
c001fcbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcc2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fcc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fccc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fcd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcd7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fcde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fce2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fce8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fcf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcf7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fcfe:	90                   	nop
c001fcff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fd00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fd00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd04:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd06:	85 c0                	test   eax,eax
c001fd08:	75 0e                	jne    c001fd18 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fd0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd11:	85 c0                	test   eax,eax
c001fd13:	75 03                	jne    c001fd18 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fd15:	b0 01                	mov    al,0x1
c001fd17:	c3                   	ret    
c001fd18:	b0 00                	mov    al,0x0
c001fd1a:	90                   	nop
c001fd1b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fd1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd20:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd22:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fd24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fd24:	83 ec 0c             	sub    esp,0xc
c001fd27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd2b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd2d:	85 c0                	test   eax,eax
c001fd2f:	75 17                	jne    c001fd48 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fd31:	83 ec 0c             	sub    esp,0xc
c001fd34:	68 c0 0e 02 c0       	push   0xc0020ec0
c001fd39:	e8 dd 18 ff ff       	call   c001161b <KePanic(char const*)>
c001fd3e:	83 c4 10             	add    esp,0x10
c001fd41:	e9 96 00 00 00       	jmp    c001fddc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fd46:	66 90                	xchg   ax,ax
c001fd48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd4f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fd52:	85 c0                	test   eax,eax
c001fd54:	0f 95 c0             	setne  al
c001fd57:	0f b6 c0             	movzx  eax,al
c001fd5a:	85 c0                	test   eax,eax
c001fd5c:	74 12                	je     c001fd70 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fd5e:	83 ec 0c             	sub    esp,0xc
c001fd61:	68 0b 0f 02 c0       	push   0xc0020f0b
c001fd66:	e8 b0 18 ff ff       	call   c001161b <KePanic(char const*)>
c001fd6b:	83 c4 10             	add    esp,0x10
c001fd6e:	66 90                	xchg   ax,ax
c001fd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd74:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd76:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fd79:	85 c0                	test   eax,eax
c001fd7b:	0f 94 c0             	sete   al
c001fd7e:	0f b6 c0             	movzx  eax,al
c001fd81:	85 c0                	test   eax,eax
c001fd83:	74 33                	je     c001fdb8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fd85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd89:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd9e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fda1:	83 f8 01             	cmp    eax,0x1
c001fda4:	74 22                	je     c001fdc8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fda6:	83 ec 0c             	sub    esp,0xc
c001fda9:	68 e4 0e 02 c0       	push   0xc0020ee4
c001fdae:	e8 68 18 ff ff       	call   c001161b <KePanic(char const*)>
c001fdb3:	83 c4 10             	add    esp,0x10
c001fdb6:	eb 10                	jmp    c001fdc8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fdb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdbc:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdbe:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fdc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc5:	89 10                	mov    DWORD PTR [eax],edx
c001fdc7:	90                   	nop
c001fdc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdcc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fdcf:	8d 50 ff             	lea    edx,[eax-0x1]
c001fdd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fdd9:	8d 76 00             	lea    esi,[esi+0x0]
c001fddc:	83 c4 0c             	add    esp,0xc
c001fddf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fde0:	83 ec 0c             	sub    esp,0xc
c001fde3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fde8:	75 12                	jne    c001fdfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fdea:	83 ec 0c             	sub    esp,0xc
c001fded:	68 88 0e 02 c0       	push   0xc0020e88
c001fdf2:	e8 24 18 ff ff       	call   c001161b <KePanic(char const*)>
c001fdf7:	83 c4 10             	add    esp,0x10
c001fdfa:	66 90                	xchg   ax,ax
c001fdfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe00:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe02:	85 c0                	test   eax,eax
c001fe04:	74 36                	je     c001fe3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fe06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe0d:	85 c0                	test   eax,eax
c001fe0f:	74 2b                	je     c001fe3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fe11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe1c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fe1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fe2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe31:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe38:	eb 6a                	jmp    c001fea4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe3a:	66 90                	xchg   ax,ax
c001fe3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe40:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe42:	85 c0                	test   eax,eax
c001fe44:	75 4e                	jne    c001fe94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fe46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe4d:	85 c0                	test   eax,eax
c001fe4f:	75 43                	jne    c001fe94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fe51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe55:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe59:	89 10                	mov    DWORD PTR [eax],edx
c001fe5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe5f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe63:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fe66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe6d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe7b:	85 c0                	test   eax,eax
c001fe7d:	74 25                	je     c001fea4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe7f:	83 ec 0c             	sub    esp,0xc
c001fe82:	68 aa 0e 02 c0       	push   0xc0020eaa
c001fe87:	e8 8f 17 ff ff       	call   c001161b <KePanic(char const*)>
c001fe8c:	83 c4 10             	add    esp,0x10
c001fe8f:	eb 13                	jmp    c001fea4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe91:	8d 76 00             	lea    esi,[esi+0x0]
c001fe94:	83 ec 0c             	sub    esp,0xc
c001fe97:	68 b4 0e 02 c0       	push   0xc0020eb4
c001fe9c:	e8 7a 17 ff ff       	call   c001161b <KePanic(char const*)>
c001fea1:	83 c4 10             	add    esp,0x10
c001fea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001feab:	8d 50 01             	lea    edx,[eax+0x1]
c001feae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001feb5:	90                   	nop
c001feb6:	83 c4 0c             	add    esp,0xc
c001feb9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001febc <ACPI::~ACPI()>:
c001febc:	83 ec 0c             	sub    esp,0xc
c001febf:	ba 20 21 02 c0       	mov    edx,0xc0022120
c001fec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec8:	89 10                	mov    DWORD PTR [eax],edx
c001feca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fece:	83 ec 0c             	sub    esp,0xc
c001fed1:	50                   	push   eax
c001fed2:	e8 ed c9 fe ff       	call   c000c8c4 <Device::~Device()>
c001fed7:	83 c4 10             	add    esp,0x10
c001feda:	90                   	nop
c001fedb:	83 c4 0c             	add    esp,0xc
c001fede:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fee0 <ACPI::~ACPI()>:
c001fee0:	83 ec 0c             	sub    esp,0xc
c001fee3:	83 ec 0c             	sub    esp,0xc
c001fee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feea:	e8 cd ff ff ff       	call   c001febc <ACPI::~ACPI()>
c001feef:	83 c4 10             	add    esp,0x10
c001fef2:	83 ec 08             	sub    esp,0x8
c001fef5:	68 64 12 00 00       	push   0x1264
c001fefa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fefe:	e8 15 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ff03:	83 c4 10             	add    esp,0x10
c001ff06:	83 c4 0c             	add    esp,0xc
c001ff09:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ff0c <LinkedList<Device>::~LinkedList()>:
c001ff0c:	90                   	nop
c001ff0d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ff10 <LinkedList<Device>::isEmpty()>:
c001ff10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff14:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff16:	85 c0                	test   eax,eax
c001ff18:	75 0e                	jne    c001ff28 <LinkedList<Device>::isEmpty()+0x18>
c001ff1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff21:	85 c0                	test   eax,eax
c001ff23:	75 03                	jne    c001ff28 <LinkedList<Device>::isEmpty()+0x18>
c001ff25:	b0 01                	mov    al,0x1
c001ff27:	c3                   	ret    
c001ff28:	b0 00                	mov    al,0x0
c001ff2a:	90                   	nop
c001ff2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ff2c <LinkedList<Device>::getFirstElement()>:
c001ff2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff30:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff32:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ff34 <LinkedList<Device>::removeFirst()>:
c001ff34:	83 ec 0c             	sub    esp,0xc
c001ff37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff3d:	85 c0                	test   eax,eax
c001ff3f:	75 17                	jne    c001ff58 <LinkedList<Device>::removeFirst()+0x24>
c001ff41:	83 ec 0c             	sub    esp,0xc
c001ff44:	68 c0 0e 02 c0       	push   0xc0020ec0
c001ff49:	e8 cd 16 ff ff       	call   c001161b <KePanic(char const*)>
c001ff4e:	83 c4 10             	add    esp,0x10
c001ff51:	e9 92 00 00 00       	jmp    c001ffe8 <LinkedList<Device>::removeFirst()+0xb4>
c001ff56:	66 90                	xchg   ax,ax
c001ff58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff5f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ff65:	85 c0                	test   eax,eax
c001ff67:	74 13                	je     c001ff7c <LinkedList<Device>::removeFirst()+0x48>
c001ff69:	83 ec 0c             	sub    esp,0xc
c001ff6c:	68 0b 0f 02 c0       	push   0xc0020f0b
c001ff71:	e8 a5 16 ff ff       	call   c001161b <KePanic(char const*)>
c001ff76:	83 c4 10             	add    esp,0x10
c001ff79:	8d 76 00             	lea    esi,[esi+0x0]
c001ff7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff80:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff82:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ff88:	85 c0                	test   eax,eax
c001ff8a:	75 34                	jne    c001ffc0 <LinkedList<Device>::removeFirst()+0x8c>
c001ff8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff90:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ff96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff9a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ffa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ffa8:	83 f8 01             	cmp    eax,0x1
c001ffab:	74 27                	je     c001ffd4 <LinkedList<Device>::removeFirst()+0xa0>
c001ffad:	83 ec 0c             	sub    esp,0xc
c001ffb0:	68 e4 0e 02 c0       	push   0xc0020ee4
c001ffb5:	e8 61 16 ff ff       	call   c001161b <KePanic(char const*)>
c001ffba:	83 c4 10             	add    esp,0x10
c001ffbd:	eb 15                	jmp    c001ffd4 <LinkedList<Device>::removeFirst()+0xa0>
c001ffbf:	90                   	nop
c001ffc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffc4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffc6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ffcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffd0:	89 10                	mov    DWORD PTR [eax],edx
c001ffd2:	66 90                	xchg   ax,ax
c001ffd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffd8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ffdb:	8d 50 ff             	lea    edx,[eax-0x1]
c001ffde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffe2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ffe5:	8d 76 00             	lea    esi,[esi+0x0]
c001ffe8:	83 c4 0c             	add    esp,0xc
c001ffeb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ffec <CPU::~CPU()>:
c001ffec:	83 ec 0c             	sub    esp,0xc
c001ffef:	ba c8 22 02 c0       	mov    edx,0xc00222c8
c001fff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fff8:	89 10                	mov    DWORD PTR [eax],edx
c001fffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fffe:	83 ec 0c             	sub    esp,0xc
c0020001:	50                   	push   eax
c0020002:	e8 bd c8 fe ff       	call   c000c8c4 <Device::~Device()>
c0020007:	83 c4 10             	add    esp,0x10
c002000a:	90                   	nop
c002000b:	83 c4 0c             	add    esp,0xc
c002000e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0020010 <CPU::~CPU()>:
c0020010:	83 ec 0c             	sub    esp,0xc
c0020013:	83 ec 0c             	sub    esp,0xc
c0020016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002001a:	e8 cd ff ff ff       	call   c001ffec <CPU::~CPU()>
c002001f:	83 c4 10             	add    esp,0x10
c0020022:	83 ec 08             	sub    esp,0x8
c0020025:	68 94 11 00 00       	push   0x1194
c002002a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002002e:	e8 e5 a7 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020033:	83 c4 10             	add    esp,0x10
c0020036:	83 c4 0c             	add    esp,0xc
c0020039:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002003c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002003c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020040:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020043:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0020044 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0020044:	90                   	nop
c0020045:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020048 <ThreadControlBlock::ThreadControlBlock()>:
c0020048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002004c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020053:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020057:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002005e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020062:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020069:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002006d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0020074:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020078:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002007f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020083:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020087:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002008b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002008f:	90                   	nop
c0020090:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020094 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020098:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002009e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00200a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200ad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00200b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00200be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200c2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00200c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200cd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00200d4:	90                   	nop
c00200d5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00200d6 <PCI::~PCI()>:
c00200d6:	83 ec 0c             	sub    esp,0xc
c00200d9:	ba a8 31 02 c0       	mov    edx,0xc00231a8
c00200de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e2:	89 10                	mov    DWORD PTR [eax],edx
c00200e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e8:	83 ec 0c             	sub    esp,0xc
c00200eb:	50                   	push   eax
c00200ec:	e8 6b c2 fe ff       	call   c000c35c <Bus::~Bus()>
c00200f1:	83 c4 10             	add    esp,0x10
c00200f4:	90                   	nop
c00200f5:	83 c4 0c             	add    esp,0xc
c00200f8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00200fa <PCI::~PCI()>:
c00200fa:	83 ec 0c             	sub    esp,0xc
c00200fd:	83 ec 0c             	sub    esp,0xc
c0020100:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020104:	e8 cd ff ff ff       	call   c00200d6 <PCI::~PCI()>
c0020109:	83 c4 10             	add    esp,0x10
c002010c:	83 ec 08             	sub    esp,0x8
c002010f:	68 5c 01 00 00       	push   0x15c
c0020114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020118:	e8 fb a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002011d:	83 c4 10             	add    esp,0x10
c0020120:	83 c4 0c             	add    esp,0xc
c0020123:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0020124 <IDE::~IDE()>:
c0020124:	83 ec 0c             	sub    esp,0xc
c0020127:	ba 5c 32 02 c0       	mov    edx,0xc002325c
c002012c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020130:	89 10                	mov    DWORD PTR [eax],edx
c0020132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020136:	83 ec 0c             	sub    esp,0xc
c0020139:	50                   	push   eax
c002013a:	e8 fd cb fe ff       	call   c000cd3c <HardDiskController::~HardDiskController()>
c002013f:	83 c4 10             	add    esp,0x10
c0020142:	90                   	nop
c0020143:	83 c4 0c             	add    esp,0xc
c0020146:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0020148 <IDE::~IDE()>:
c0020148:	83 ec 0c             	sub    esp,0xc
c002014b:	83 ec 0c             	sub    esp,0xc
c002014e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020152:	e8 cd ff ff ff       	call   c0020124 <IDE::~IDE()>
c0020157:	83 c4 10             	add    esp,0x10
c002015a:	83 ec 08             	sub    esp,0x8
c002015d:	68 70 02 00 00       	push   0x270
c0020162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020166:	e8 ad a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002016b:	83 c4 10             	add    esp,0x10
c002016e:	83 c4 0c             	add    esp,0xc
c0020171:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020172 <SATABus::~SATABus()>:
c0020172:	83 ec 0c             	sub    esp,0xc
c0020175:	ba ac 32 02 c0       	mov    edx,0xc00232ac
c002017a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002017e:	89 10                	mov    DWORD PTR [eax],edx
c0020180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020184:	83 ec 0c             	sub    esp,0xc
c0020187:	50                   	push   eax
c0020188:	e8 af cb fe ff       	call   c000cd3c <HardDiskController::~HardDiskController()>
c002018d:	83 c4 10             	add    esp,0x10
c0020190:	90                   	nop
c0020191:	83 c4 0c             	add    esp,0xc
c0020194:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020196 <SATABus::~SATABus()>:
c0020196:	83 ec 0c             	sub    esp,0xc
c0020199:	83 ec 0c             	sub    esp,0xc
c002019c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201a0:	e8 cd ff ff ff       	call   c0020172 <SATABus::~SATABus()>
c00201a5:	83 c4 10             	add    esp,0x10
c00201a8:	83 ec 08             	sub    esp,0x8
c00201ab:	68 64 01 00 00       	push   0x164
c00201b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201b4:	e8 5f a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00201b9:	83 c4 10             	add    esp,0x10
c00201bc:	83 c4 0c             	add    esp,0xc
c00201bf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00201c0 <ATA::~ATA()>:
c00201c0:	83 ec 0c             	sub    esp,0xc
c00201c3:	ba ec 32 02 c0       	mov    edx,0xc00232ec
c00201c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201cc:	89 10                	mov    DWORD PTR [eax],edx
c00201ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d2:	83 ec 0c             	sub    esp,0xc
c00201d5:	50                   	push   eax
c00201d6:	e8 43 cc fe ff       	call   c000ce1e <PhysicalDisk::~PhysicalDisk()>
c00201db:	83 c4 10             	add    esp,0x10
c00201de:	90                   	nop
c00201df:	83 c4 0c             	add    esp,0xc
c00201e2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00201e4 <ATA::~ATA()>:
c00201e4:	83 ec 0c             	sub    esp,0xc
c00201e7:	83 ec 0c             	sub    esp,0xc
c00201ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201ee:	e8 cd ff ff ff       	call   c00201c0 <ATA::~ATA()>
c00201f3:	83 c4 10             	add    esp,0x10
c00201f6:	83 ec 08             	sub    esp,0x8
c00201f9:	68 7c 01 00 00       	push   0x17c
c00201fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020202:	e8 11 a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020207:	83 c4 10             	add    esp,0x10
c002020a:	83 c4 0c             	add    esp,0xc
c002020d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002020e <ATAPI::~ATAPI()>:
c002020e:	83 ec 0c             	sub    esp,0xc
c0020211:	ba 34 33 02 c0       	mov    edx,0xc0023334
c0020216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002021a:	89 10                	mov    DWORD PTR [eax],edx
c002021c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020220:	83 ec 0c             	sub    esp,0xc
c0020223:	50                   	push   eax
c0020224:	e8 f5 cb fe ff       	call   c000ce1e <PhysicalDisk::~PhysicalDisk()>
c0020229:	83 c4 10             	add    esp,0x10
c002022c:	90                   	nop
c002022d:	83 c4 0c             	add    esp,0xc
c0020230:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020232 <ATAPI::~ATAPI()>:
c0020232:	83 ec 0c             	sub    esp,0xc
c0020235:	83 ec 0c             	sub    esp,0xc
c0020238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002023c:	e8 cd ff ff ff       	call   c002020e <ATAPI::~ATAPI()>
c0020241:	83 c4 10             	add    esp,0x10
c0020244:	83 ec 08             	sub    esp,0x8
c0020247:	68 84 01 00 00       	push   0x184
c002024c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020250:	e8 c3 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020255:	83 c4 10             	add    esp,0x10
c0020258:	83 c4 0c             	add    esp,0xc
c002025b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002025c <SATA::~SATA()>:
c002025c:	83 ec 0c             	sub    esp,0xc
c002025f:	ba e8 33 02 c0       	mov    edx,0xc00233e8
c0020264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020268:	89 10                	mov    DWORD PTR [eax],edx
c002026a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002026e:	83 ec 0c             	sub    esp,0xc
c0020271:	50                   	push   eax
c0020272:	e8 a7 cb fe ff       	call   c000ce1e <PhysicalDisk::~PhysicalDisk()>
c0020277:	83 c4 10             	add    esp,0x10
c002027a:	90                   	nop
c002027b:	83 c4 0c             	add    esp,0xc
c002027e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020280 <SATA::~SATA()>:
c0020280:	83 ec 0c             	sub    esp,0xc
c0020283:	83 ec 0c             	sub    esp,0xc
c0020286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002028a:	e8 cd ff ff ff       	call   c002025c <SATA::~SATA()>
c002028f:	83 c4 10             	add    esp,0x10
c0020292:	83 ec 08             	sub    esp,0x8
c0020295:	68 7c 01 00 00       	push   0x17c
c002029a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002029e:	e8 75 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00202a3:	83 c4 10             	add    esp,0x10
c00202a6:	83 c4 0c             	add    esp,0xc
c00202a9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00202aa <SATAPI::~SATAPI()>:
c00202aa:	83 ec 0c             	sub    esp,0xc
c00202ad:	ba 0c 35 02 c0       	mov    edx,0xc002350c
c00202b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202b6:	89 10                	mov    DWORD PTR [eax],edx
c00202b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202bc:	83 ec 0c             	sub    esp,0xc
c00202bf:	50                   	push   eax
c00202c0:	e8 59 cb fe ff       	call   c000ce1e <PhysicalDisk::~PhysicalDisk()>
c00202c5:	83 c4 10             	add    esp,0x10
c00202c8:	90                   	nop
c00202c9:	83 c4 0c             	add    esp,0xc
c00202cc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00202ce <SATAPI::~SATAPI()>:
c00202ce:	83 ec 0c             	sub    esp,0xc
c00202d1:	83 ec 0c             	sub    esp,0xc
c00202d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202d8:	e8 cd ff ff ff       	call   c00202aa <SATAPI::~SATAPI()>
c00202dd:	83 c4 10             	add    esp,0x10
c00202e0:	83 ec 08             	sub    esp,0x8
c00202e3:	68 84 01 00 00       	push   0x184
c00202e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202ec:	e8 27 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00202f1:	83 c4 10             	add    esp,0x10
c00202f4:	83 c4 0c             	add    esp,0xc
c00202f7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00202f8 <IOAPIC::~IOAPIC()>:
c00202f8:	83 ec 0c             	sub    esp,0xc
c00202fb:	ba 4c 35 02 c0       	mov    edx,0xc002354c
c0020300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020304:	89 10                	mov    DWORD PTR [eax],edx
c0020306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002030a:	83 ec 0c             	sub    esp,0xc
c002030d:	50                   	push   eax
c002030e:	e8 b1 c5 fe ff       	call   c000c8c4 <Device::~Device()>
c0020313:	83 c4 10             	add    esp,0x10
c0020316:	90                   	nop
c0020317:	83 c4 0c             	add    esp,0xc
c002031a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002031c <IOAPIC::~IOAPIC()>:
c002031c:	83 ec 0c             	sub    esp,0xc
c002031f:	83 ec 0c             	sub    esp,0xc
c0020322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020326:	e8 cd ff ff ff       	call   c00202f8 <IOAPIC::~IOAPIC()>
c002032b:	83 c4 10             	add    esp,0x10
c002032e:	83 ec 08             	sub    esp,0x8
c0020331:	68 68 01 00 00       	push   0x168
c0020336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002033a:	e8 d9 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002033f:	83 c4 10             	add    esp,0x10
c0020342:	83 c4 0c             	add    esp,0xc
c0020345:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020348 <APICTimer::~APICTimer()>:
c0020348:	83 ec 0c             	sub    esp,0xc
c002034b:	ba 94 35 02 c0       	mov    edx,0xc0023594
c0020350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020354:	89 10                	mov    DWORD PTR [eax],edx
c0020356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002035a:	83 ec 0c             	sub    esp,0xc
c002035d:	50                   	push   eax
c002035e:	e8 2d e0 fe ff       	call   c000e390 <Timer::~Timer()>
c0020363:	83 c4 10             	add    esp,0x10
c0020366:	90                   	nop
c0020367:	83 c4 0c             	add    esp,0xc
c002036a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002036c <APICTimer::~APICTimer()>:
c002036c:	83 ec 0c             	sub    esp,0xc
c002036f:	83 ec 0c             	sub    esp,0xc
c0020372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020376:	e8 cd ff ff ff       	call   c0020348 <APICTimer::~APICTimer()>
c002037b:	83 c4 10             	add    esp,0x10
c002037e:	83 ec 08             	sub    esp,0x8
c0020381:	68 60 01 00 00       	push   0x160
c0020386:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002038a:	e8 89 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002038f:	83 c4 10             	add    esp,0x10
c0020392:	83 c4 0c             	add    esp,0xc
c0020395:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020398 <PIT::~PIT()>:
c0020398:	83 ec 0c             	sub    esp,0xc
c002039b:	ba e4 35 02 c0       	mov    edx,0xc00235e4
c00203a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203a4:	89 10                	mov    DWORD PTR [eax],edx
c00203a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203aa:	83 ec 0c             	sub    esp,0xc
c00203ad:	50                   	push   eax
c00203ae:	e8 dd df fe ff       	call   c000e390 <Timer::~Timer()>
c00203b3:	83 c4 10             	add    esp,0x10
c00203b6:	90                   	nop
c00203b7:	83 c4 0c             	add    esp,0xc
c00203ba:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00203bc <PIT::~PIT()>:
c00203bc:	83 ec 0c             	sub    esp,0xc
c00203bf:	83 ec 0c             	sub    esp,0xc
c00203c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203c6:	e8 cd ff ff ff       	call   c0020398 <PIT::~PIT()>
c00203cb:	83 c4 10             	add    esp,0x10
c00203ce:	83 ec 08             	sub    esp,0x8
c00203d1:	68 5c 01 00 00       	push   0x15c
c00203d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203da:	e8 39 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00203df:	83 c4 10             	add    esp,0x10
c00203e2:	83 c4 0c             	add    esp,0xc
c00203e5:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be f9 23 02 c0       	mov    esi,0xc00223f9
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be 15 24 02 c0       	mov    esi,0xc0022415
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
