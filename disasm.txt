
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 7d 66 01 00       	call   c001669d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 64 4a 03 c0       	mov    eax,0xc0034a64
c0000025:	3d 64 4a 03 c0       	cmp    eax,0xc0034a64
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 64 4a 03 c0       	push   0xc0034a64
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 64 4a 03 c0       	mov    eax,0xc0034a64
c0000051:	2d 64 4a 03 c0       	sub    eax,0xc0034a64
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 64 4a 03 c0       	push   0xc0034a64
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d a0 68 03 c0 00 	cmp    BYTE PTR ds:0xc00368a0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb cc f5 02 c0       	mov    ebx,0xc002f5cc
c0000097:	81 eb c8 f5 02 c0    	sub    ebx,0xc002f5c8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be c8 f5 02 c0       	mov    esi,0xc002f5c8
c00000a6:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 a4 68 03 c0       	mov    ds:0xc00368a4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 64 4a 03 c0       	push   0xc0034a64
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 a0 68 03 c0 01 	mov    BYTE PTR ds:0xc00368a0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 a8 68 03 c0       	push   0xc00368a8
c0000108:	68 64 4a 03 c0       	push   0xc0034a64
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 83 4a 02 00       	call   c0024d30 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 94 8f 01 00       	call   c0019259 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 61 4a 02 00       	call   c0024d30 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 6e 4f 02 00       	call   c002525c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 11 54 02 00       	call   c0025708 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c4 a9 03 c0 	lgdtd  ds:0xc003a9c4
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 3b 01 02 00       	jmp    c00204ba <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 c0 68 03 c0       	mov    ds:0xc00368c0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 c0 68 03 c0    	mov    DWORD PTR ds:0xc00368c0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d c0 68 03 c0    	mov    ebx,DWORD PTR ds:0xc00368c0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 e0 f5 02 c0 02 	test   BYTE PTR [edx-0x3ffd0a20],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 e0 f5 02 c0 01 	test   BYTE PTR [edx-0x3ffd0a20],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 e0 f5 02 c0 08 	test   BYTE PTR [edx-0x3ffd0a20],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 e0 f5 02 c0 04 	test   BYTE PTR [ecx-0x3ffd0a20],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 e0 f5 02 c0 01 	test   BYTE PTR [edx-0x3ffd0a20],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <LWIP_PLATFORM_HTONS>:
c0000be8:	83 ec 04             	sub    esp,0x4
c0000beb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000bef:	66 89 04 24          	mov    WORD PTR [esp],ax
c0000bf3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000bf7:	c1 e8 08             	shr    eax,0x8
c0000bfa:	89 c2                	mov    edx,eax
c0000bfc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c00:	c1 e0 08             	shl    eax,0x8
c0000c03:	09 d0                	or     eax,edx
c0000c05:	83 c4 04             	add    esp,0x4
c0000c08:	c3                   	ret    
c0000c09:	8d 76 00             	lea    esi,[esi+0x0]

c0000c0c <LWIP_PLATFORM_HTONL>:
c0000c0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c10:	c1 e8 18             	shr    eax,0x18
c0000c13:	89 c2                	mov    edx,eax
c0000c15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c19:	c1 e8 08             	shr    eax,0x8
c0000c1c:	25 00 ff 00 00       	and    eax,0xff00
c0000c21:	09 c2                	or     edx,eax
c0000c23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c27:	c1 e0 08             	shl    eax,0x8
c0000c2a:	25 00 00 ff 00       	and    eax,0xff0000
c0000c2f:	09 c2                	or     edx,eax
c0000c31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c35:	c1 e0 18             	shl    eax,0x18
c0000c38:	09 d0                	or     eax,edx
c0000c3a:	c3                   	ret    
c0000c3b:	90                   	nop

c0000c3c <lwip_socket_init>:
c0000c3c:	83 ec 0c             	sub    esp,0xc
c0000c3f:	83 ec 0c             	sub    esp,0xc
c0000c42:	68 e4 f6 02 c0       	push   0xc002f6e4
c0000c47:	e8 c4 13 02 00       	call   c0022010 <KeCPuts>
c0000c4c:	83 c4 10             	add    esp,0x10
c0000c4f:	90                   	nop
c0000c50:	83 c4 0c             	add    esp,0xc
c0000c53:	c3                   	ret    

c0000c54 <tcpip_callback_with_block>:
c0000c54:	83 ec 0c             	sub    esp,0xc
c0000c57:	83 ec 0c             	sub    esp,0xc
c0000c5a:	68 1f f7 02 c0       	push   0xc002f71f
c0000c5f:	e8 94 13 02 00       	call   c0021ff8 <KeCPanic>
c0000c64:	83 c4 10             	add    esp,0x10
c0000c67:	90                   	nop
c0000c68:	83 c4 0c             	add    esp,0xc
c0000c6b:	c3                   	ret    

c0000c6c <sys_sem_new>:
c0000c6c:	83 ec 1c             	sub    esp,0x1c
c0000c6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000c73:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0000c77:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0000c7c:	83 ec 08             	sub    esp,0x8
c0000c7f:	50                   	push   eax
c0000c80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0000c84:	e8 af 12 02 00       	call   c0021f38 <KeNetCreateSemaphore>
c0000c89:	83 c4 10             	add    esp,0x10
c0000c8c:	b0 00                	mov    al,0x0
c0000c8e:	83 c4 1c             	add    esp,0x1c
c0000c91:	c3                   	ret    
c0000c92:	66 90                	xchg   ax,ax

c0000c94 <sys_sem_free>:
c0000c94:	83 ec 0c             	sub    esp,0xc
c0000c97:	83 ec 0c             	sub    esp,0xc
c0000c9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000c9e:	e8 d9 12 02 00       	call   c0021f7c <KeNetFreeSemaphore>
c0000ca3:	83 c4 10             	add    esp,0x10
c0000ca6:	90                   	nop
c0000ca7:	83 c4 0c             	add    esp,0xc
c0000caa:	c3                   	ret    
c0000cab:	90                   	nop

c0000cac <sys_sem_signal>:
c0000cac:	83 ec 0c             	sub    esp,0xc
c0000caf:	83 ec 0c             	sub    esp,0xc
c0000cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cb6:	e8 dd 12 02 00       	call   c0021f98 <KeNetSignalSemaphore>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	90                   	nop
c0000cbf:	83 c4 0c             	add    esp,0xc
c0000cc2:	c3                   	ret    
c0000cc3:	90                   	nop

c0000cc4 <sys_arch_sem_wait>:
c0000cc4:	83 ec 0c             	sub    esp,0xc
c0000cc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ccb:	83 ec 08             	sub    esp,0x8
c0000cce:	50                   	push   eax
c0000ccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cd3:	e8 dc 12 02 00       	call   c0021fb4 <KeNetWaitSemaphore>
c0000cd8:	83 c4 10             	add    esp,0x10
c0000cdb:	83 c4 0c             	add    esp,0xc
c0000cde:	c3                   	ret    
c0000cdf:	90                   	nop

c0000ce0 <sys_mbox_new>:
c0000ce0:	83 ec 0c             	sub    esp,0xc
c0000ce3:	83 ec 0c             	sub    esp,0xc
c0000ce6:	68 39 f7 02 c0       	push   0xc002f739
c0000ceb:	e8 08 13 02 00       	call   c0021ff8 <KeCPanic>
c0000cf0:	83 c4 10             	add    esp,0x10
c0000cf3:	b0 00                	mov    al,0x0
c0000cf5:	83 c4 0c             	add    esp,0xc
c0000cf8:	c3                   	ret    
c0000cf9:	8d 76 00             	lea    esi,[esi+0x0]

c0000cfc <sys_mbox_free>:
c0000cfc:	83 ec 0c             	sub    esp,0xc
c0000cff:	83 ec 0c             	sub    esp,0xc
c0000d02:	68 46 f7 02 c0       	push   0xc002f746
c0000d07:	e8 ec 12 02 00       	call   c0021ff8 <KeCPanic>
c0000d0c:	83 c4 10             	add    esp,0x10
c0000d0f:	90                   	nop
c0000d10:	83 c4 0c             	add    esp,0xc
c0000d13:	c3                   	ret    

c0000d14 <sys_mbox_post>:
c0000d14:	83 ec 0c             	sub    esp,0xc
c0000d17:	83 ec 0c             	sub    esp,0xc
c0000d1a:	68 54 f7 02 c0       	push   0xc002f754
c0000d1f:	e8 d4 12 02 00       	call   c0021ff8 <KeCPanic>
c0000d24:	83 c4 10             	add    esp,0x10
c0000d27:	90                   	nop
c0000d28:	83 c4 0c             	add    esp,0xc
c0000d2b:	c3                   	ret    

c0000d2c <sys_arch_mbox_fetch>:
c0000d2c:	83 ec 0c             	sub    esp,0xc
c0000d2f:	83 ec 0c             	sub    esp,0xc
c0000d32:	68 62 f7 02 c0       	push   0xc002f762
c0000d37:	e8 bc 12 02 00       	call   c0021ff8 <KeCPanic>
c0000d3c:	83 c4 10             	add    esp,0x10
c0000d3f:	b8 00 00 00 00       	mov    eax,0x0
c0000d44:	83 c4 0c             	add    esp,0xc
c0000d47:	c3                   	ret    

c0000d48 <sys_arch_mbox_tryfetch>:
c0000d48:	83 ec 0c             	sub    esp,0xc
c0000d4b:	83 ec 0c             	sub    esp,0xc
c0000d4e:	68 76 f7 02 c0       	push   0xc002f776
c0000d53:	e8 a0 12 02 00       	call   c0021ff8 <KeCPanic>
c0000d58:	83 c4 10             	add    esp,0x10
c0000d5b:	b8 00 00 00 00       	mov    eax,0x0
c0000d60:	83 c4 0c             	add    esp,0xc
c0000d63:	c3                   	ret    

c0000d64 <sys_mbox_trypost>:
c0000d64:	83 ec 0c             	sub    esp,0xc
c0000d67:	83 ec 0c             	sub    esp,0xc
c0000d6a:	68 8d f7 02 c0       	push   0xc002f78d
c0000d6f:	e8 84 12 02 00       	call   c0021ff8 <KeCPanic>
c0000d74:	83 c4 10             	add    esp,0x10
c0000d77:	90                   	nop
c0000d78:	83 c4 0c             	add    esp,0xc
c0000d7b:	c3                   	ret    

c0000d7c <sys_thread_new>:
c0000d7c:	83 ec 0c             	sub    esp,0xc
c0000d7f:	83 ec 08             	sub    esp,0x8
c0000d82:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000d86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000d8a:	e8 45 12 02 00       	call   c0021fd4 <KeNetCreateThread>
c0000d8f:	83 c4 10             	add    esp,0x10
c0000d92:	b8 00 00 00 00       	mov    eax,0x0
c0000d97:	83 c4 0c             	add    esp,0xc
c0000d9a:	c3                   	ret    
c0000d9b:	90                   	nop

c0000d9c <sys_init>:
c0000d9c:	90                   	nop
c0000d9d:	c3                   	ret    

c0000d9e <largebin_index>:
c0000d9e:	89 c2                	mov    edx,eax
c0000da0:	c1 ea 08             	shr    edx,0x8
c0000da3:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000da9:	77 10                	ja     c0000dbb <largebin_index+0x1d>
c0000dab:	0f bd d2             	bsr    edx,edx
c0000dae:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000db1:	d3 e8                	shr    eax,cl
c0000db3:	83 e0 03             	and    eax,0x3
c0000db6:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000dba:	c3                   	ret    
c0000dbb:	b8 5f 00 00 00       	mov    eax,0x5f
c0000dc0:	c3                   	ret    

c0000dc1 <malloc_init_state>:
c0000dc1:	53                   	push   ebx
c0000dc2:	8d 50 34             	lea    edx,[eax+0x34]
c0000dc5:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000dcb:	89 d1                	mov    ecx,edx
c0000dcd:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000dd0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000dd3:	83 c2 08             	add    edx,0x8
c0000dd6:	39 da                	cmp    edx,ebx
c0000dd8:	75 f3                	jne    c0000dcd <malloc_init_state+0xc>
c0000dda:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ddc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000de6:	83 e2 03             	and    edx,0x3
c0000de9:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000df3:	83 ca 48             	or     edx,0x48
c0000df6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000e00:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000e0a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000e11:	89 10                	mov    DWORD PTR [eax],edx
c0000e13:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000e16:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000e20:	5b                   	pop    ebx
c0000e21:	c3                   	ret    

c0000e22 <malloc_consolidate>:
c0000e22:	8b 10                	mov    edx,DWORD PTR [eax]
c0000e24:	85 d2                	test   edx,edx
c0000e26:	0f 84 d8 00 00 00    	je     c0000f04 <malloc_consolidate+0xe2>
c0000e2c:	55                   	push   ebp
c0000e2d:	83 e2 fd             	and    edx,0xfffffffd
c0000e30:	57                   	push   edi
c0000e31:	89 c5                	mov    ebp,eax
c0000e33:	56                   	push   esi
c0000e34:	8d 78 34             	lea    edi,[eax+0x34]
c0000e37:	53                   	push   ebx
c0000e38:	83 ec 10             	sub    esp,0x10
c0000e3b:	89 10                	mov    DWORD PTR [eax],edx
c0000e3d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000e41:	c1 ea 03             	shr    edx,0x3
c0000e44:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000e48:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000e4c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000e4f:	85 d2                	test   edx,edx
c0000e51:	0f 84 98 00 00 00    	je     c0000eef <malloc_consolidate+0xcd>
c0000e57:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000e5e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000e61:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000e64:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000e68:	89 f9                	mov    ecx,edi
c0000e6a:	83 e1 fe             	and    ecx,0xfffffffe
c0000e6d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000e70:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000e73:	83 e3 fc             	and    ebx,0xfffffffc
c0000e76:	83 e7 01             	and    edi,0x1
c0000e79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000e7c:	75 14                	jne    c0000e92 <malloc_consolidate+0x70>
c0000e7e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000e80:	29 fa                	sub    edx,edi
c0000e82:	01 f9                	add    ecx,edi
c0000e84:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e87:	89 fb                	mov    ebx,edi
c0000e89:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000e8c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000e8f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000e92:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000e95:	74 40                	je     c0000ed7 <malloc_consolidate+0xb5>
c0000e97:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000e9a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000e9d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ea1:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000ea4:	83 e7 01             	and    edi,0x1
c0000ea7:	75 0e                	jne    c0000eb7 <malloc_consolidate+0x95>
c0000ea9:	01 d9                	add    ecx,ebx
c0000eab:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000eae:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000eb1:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000eb4:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000eb7:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000eba:	89 ce                	mov    esi,ecx
c0000ebc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000ebf:	83 ce 01             	or     esi,0x1
c0000ec2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000ec5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000ec8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000ecb:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000ecf:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ed2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ed5:	eb 0c                	jmp    c0000ee3 <malloc_consolidate+0xc1>
c0000ed7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000eda:	83 c9 01             	or     ecx,0x1
c0000edd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ee0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ee3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ee7:	85 d2                	test   edx,edx
c0000ee9:	0f 85 6f ff ff ff    	jne    c0000e5e <malloc_consolidate+0x3c>
c0000eef:	83 c5 04             	add    ebp,0x4
c0000ef2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ef6:	0f 85 50 ff ff ff    	jne    c0000e4c <malloc_consolidate+0x2a>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	5b                   	pop    ebx
c0000f00:	5e                   	pop    esi
c0000f01:	5f                   	pop    edi
c0000f02:	5d                   	pop    ebp
c0000f03:	c3                   	ret    
c0000f04:	e9 b8 fe ff ff       	jmp    c0000dc1 <malloc_init_state>

c0000f09 <dlfree>:
c0000f09:	57                   	push   edi
c0000f0a:	56                   	push   esi
c0000f0b:	53                   	push   ebx
c0000f0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000f10:	85 c9                	test   ecx,ecx
c0000f12:	0f 84 01 01 00 00    	je     c0001019 <dlfree+0x110>
c0000f18:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000f1b:	8b 1d e0 68 03 c0    	mov    ebx,DWORD PTR ds:0xc00368e0
c0000f21:	89 f0                	mov    eax,esi
c0000f23:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000f26:	83 e0 fc             	and    eax,0xfffffffc
c0000f29:	39 c3                	cmp    ebx,eax
c0000f2b:	72 24                	jb     c0000f51 <dlfree+0x48>
c0000f2d:	83 cb 03             	or     ebx,0x3
c0000f30:	c1 e8 03             	shr    eax,0x3
c0000f33:	89 1d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ebx
c0000f39:	83 e8 02             	sub    eax,0x2
c0000f3c:	8b 1c 85 e4 68 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffc971c]
c0000f43:	89 19                	mov    DWORD PTR [ecx],ebx
c0000f45:	89 14 85 e4 68 03 c0 	mov    DWORD PTR [eax*4-0x3ffc971c],edx
c0000f4c:	e9 c8 00 00 00       	jmp    c0001019 <dlfree+0x110>
c0000f51:	83 e6 02             	and    esi,0x2
c0000f54:	0f 85 a0 00 00 00    	jne    c0000ffa <dlfree+0xf1>
c0000f5a:	83 cb 01             	or     ebx,0x1
c0000f5d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000f60:	89 1d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ebx
c0000f66:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000f69:	83 e3 fc             	and    ebx,0xfffffffc
c0000f6c:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000f70:	75 13                	jne    c0000f85 <dlfree+0x7c>
c0000f72:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000f75:	29 ca                	sub    edx,ecx
c0000f77:	01 c8                	add    eax,ecx
c0000f79:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000f7c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000f7f:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000f82:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000f85:	39 35 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,esi
c0000f8b:	74 40                	je     c0000fcd <dlfree+0xc4>
c0000f8d:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000f91:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000f94:	80 e1 01             	and    cl,0x1
c0000f97:	75 0e                	jne    c0000fa7 <dlfree+0x9e>
c0000f99:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000f9c:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000f9f:	01 d8                	add    eax,ebx
c0000fa1:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000fa4:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000fa7:	8b 0d 1c 69 03 c0    	mov    ecx,DWORD PTR ds:0xc003691c
c0000fad:	c7 42 0c 14 69 03 c0 	mov    DWORD PTR [edx+0xc],0xc0036914
c0000fb4:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000fb7:	89 15 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edx
c0000fbd:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000fc0:	89 c1                	mov    ecx,eax
c0000fc2:	83 c9 01             	or     ecx,0x1
c0000fc5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fc8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000fcb:	eb 10                	jmp    c0000fdd <dlfree+0xd4>
c0000fcd:	01 d8                	add    eax,ebx
c0000fcf:	89 c1                	mov    ecx,eax
c0000fd1:	83 c9 01             	or     ecx,0x1
c0000fd4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fd7:	89 15 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edx
c0000fdd:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000fe2:	76 35                	jbe    c0001019 <dlfree+0x110>
c0000fe4:	f6 05 e0 68 03 c0 02 	test   BYTE PTR ds:0xc00368e0,0x2
c0000feb:	74 2c                	je     c0001019 <dlfree+0x110>
c0000fed:	5b                   	pop    ebx
c0000fee:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0000ff3:	5e                   	pop    esi
c0000ff4:	5f                   	pop    edi
c0000ff5:	e9 28 fe ff ff       	jmp    c0000e22 <malloc_consolidate>
c0000ffa:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000ffd:	01 c8                	add    eax,ecx
c0000fff:	53                   	push   ebx
c0001000:	29 ca                	sub    edx,ecx
c0001002:	53                   	push   ebx
c0001003:	ff 0d 30 6c 03 c0    	dec    DWORD PTR ds:0xc0036c30
c0001009:	50                   	push   eax
c000100a:	29 05 44 6c 03 c0    	sub    DWORD PTR ds:0xc0036c44,eax
c0001010:	52                   	push   edx
c0001011:	e8 5d 55 01 00       	call   c0016573 <munmap>
c0001016:	83 c4 10             	add    esp,0x10
c0001019:	5b                   	pop    ebx
c000101a:	5e                   	pop    esi
c000101b:	5f                   	pop    edi
c000101c:	c3                   	ret    

c000101d <sYSMALLOc>:
c000101d:	55                   	push   ebp
c000101e:	57                   	push   edi
c000101f:	56                   	push   esi
c0001020:	53                   	push   ebx
c0001021:	89 d3                	mov    ebx,edx
c0001023:	83 ec 2c             	sub    esp,0x2c
c0001026:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000102a:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0001030:	f6 02 02             	test   BYTE PTR [edx],0x2
c0001033:	8d 45 ff             	lea    eax,[ebp-0x1]
c0001036:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000103a:	74 1f                	je     c000105b <sYSMALLOc+0x3e>
c000103c:	89 d0                	mov    eax,edx
c000103e:	e8 df fd ff ff       	call   c0000e22 <malloc_consolidate>
c0001043:	83 ec 0c             	sub    esp,0xc
c0001046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000104a:	83 e8 07             	sub    eax,0x7
c000104d:	50                   	push   eax
c000104e:	e8 7d 03 00 00       	call   c00013d0 <dlmalloc>
c0001053:	83 c4 10             	add    esp,0x10
c0001056:	e9 6d 03 00 00       	jmp    c00013c8 <sYSMALLOc+0x3ab>
c000105b:	f7 dd                	neg    ebp
c000105d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001061:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0001065:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c000106b:	0f 87 be 00 00 00    	ja     c000112f <sYSMALLOc+0x112>
c0001071:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0001077:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c000107d:	0f 8d ac 00 00 00    	jge    c000112f <sYSMALLOc+0x112>
c0001083:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0001087:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000108b:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c000108f:	21 ee                	and    esi,ebp
c0001091:	39 fe                	cmp    esi,edi
c0001093:	0f 86 96 00 00 00    	jbe    c000112f <sYSMALLOc+0x112>
c0001099:	52                   	push   edx
c000109a:	52                   	push   edx
c000109b:	6a 00                	push   0x0
c000109d:	6a ff                	push   0xffffffff
c000109f:	6a 0c                	push   0xc
c00010a1:	6a 03                	push   0x3
c00010a3:	56                   	push   esi
c00010a4:	6a 00                	push   0x0
c00010a6:	e8 4a 54 01 00       	call   c00164f5 <mmap>
c00010ab:	83 c4 20             	add    esp,0x20
c00010ae:	83 f8 ff             	cmp    eax,0xffffffff
c00010b1:	74 7c                	je     c000112f <sYSMALLOc+0x112>
c00010b3:	89 c1                	mov    ecx,eax
c00010b5:	83 e1 07             	and    ecx,0x7
c00010b8:	74 13                	je     c00010cd <sYSMALLOc+0xb0>
c00010ba:	ba 08 00 00 00       	mov    edx,0x8
c00010bf:	29 ca                	sub    edx,ecx
c00010c1:	89 f1                	mov    ecx,esi
c00010c3:	01 d0                	add    eax,edx
c00010c5:	29 d1                	sub    ecx,edx
c00010c7:	89 10                	mov    DWORD PTR [eax],edx
c00010c9:	89 ca                	mov    edx,ecx
c00010cb:	eb 08                	jmp    c00010d5 <sYSMALLOc+0xb8>
c00010cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00010d3:	89 f2                	mov    edx,esi
c00010d5:	83 ca 02             	or     edx,0x2
c00010d8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00010db:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c00010e1:	8d 57 01             	lea    edx,[edi+0x1]
c00010e4:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c00010ea:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c00010f0:	7e 06                	jle    c00010f8 <sYSMALLOc+0xdb>
c00010f2:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c00010f8:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c00010fe:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0001104:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c000110a:	76 06                	jbe    c0001112 <sYSMALLOc+0xf5>
c000110c:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0001112:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0001118:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c000111e:	0f 83 3f 01 00 00    	jae    c0001263 <sYSMALLOc+0x246>
c0001124:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c000112a:	e9 34 01 00 00       	jmp    c0001263 <sYSMALLOc+0x246>
c000112f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001132:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0001138:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000113c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000113f:	83 e0 fc             	and    eax,0xfffffffc
c0001142:	89 04 24             	mov    DWORD PTR [esp],eax
c0001145:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001149:	03 04 24             	add    eax,DWORD PTR [esp]
c000114c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001154:	83 c0 10             	add    eax,0x10
c0001157:	01 c5                	add    ebp,eax
c0001159:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000115d:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0001164:	74 03                	je     c0001169 <sYSMALLOc+0x14c>
c0001166:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0001169:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c000116d:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0001171:	89 ee                	mov    esi,ebp
c0001173:	7f 18                	jg     c000118d <sYSMALLOc+0x170>
c0001175:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c000117c:	74 27                	je     c00011a5 <sYSMALLOc+0x188>
c000117e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001182:	03 34 24             	add    esi,DWORD PTR [esp]
c0001185:	01 ee                	add    esi,ebp
c0001187:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c000118b:	eb 18                	jmp    c00011a5 <sYSMALLOc+0x188>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	55                   	push   ebp
c0001191:	e8 29 53 01 00       	call   c00164bf <sbrk_thunk>
c0001196:	83 c4 10             	add    esp,0x10
c0001199:	89 c7                	mov    edi,eax
c000119b:	83 c8 ff             	or     eax,0xffffffff
c000119e:	83 ff ff             	cmp    edi,0xffffffff
c00011a1:	75 42                	jne    c00011e5 <sYSMALLOc+0x1c8>
c00011a3:	eb d0                	jmp    c0001175 <sYSMALLOc+0x158>
c00011a5:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c00011ab:	77 05                	ja     c00011b2 <sYSMALLOc+0x195>
c00011ad:	be 00 c0 00 00       	mov    esi,0xc000
c00011b2:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00011b6:	77 07                	ja     c00011bf <sYSMALLOc+0x1a2>
c00011b8:	31 c0                	xor    eax,eax
c00011ba:	e9 09 02 00 00       	jmp    c00013c8 <sYSMALLOc+0x3ab>
c00011bf:	50                   	push   eax
c00011c0:	50                   	push   eax
c00011c1:	6a 00                	push   0x0
c00011c3:	6a ff                	push   0xffffffff
c00011c5:	6a 0c                	push   0xc
c00011c7:	6a 03                	push   0x3
c00011c9:	56                   	push   esi
c00011ca:	6a 00                	push   0x0
c00011cc:	e8 24 53 01 00       	call   c00164f5 <mmap>
c00011d1:	83 c4 20             	add    esp,0x20
c00011d4:	89 c7                	mov    edi,eax
c00011d6:	83 f8 ff             	cmp    eax,0xffffffff
c00011d9:	74 dd                	je     c00011b8 <sYSMALLOc+0x19b>
c00011db:	8d 04 30             	lea    eax,[eax+esi*1]
c00011de:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c00011e5:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c00011eb:	01 f5                	add    ebp,esi
c00011ed:	83 f8 ff             	cmp    eax,0xffffffff
c00011f0:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00011f6:	75 73                	jne    c000126b <sYSMALLOc+0x24e>
c00011f8:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00011fc:	75 6d                	jne    c000126b <sYSMALLOc+0x24e>
c00011fe:	03 34 24             	add    esi,DWORD PTR [esp]
c0001201:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001205:	83 ce 01             	or     esi,0x1
c0001208:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000120b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001211:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001217:	73 06                	jae    c000121f <sYSMALLOc+0x202>
c0001219:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000121f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001225:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000122b:	73 06                	jae    c0001233 <sYSMALLOc+0x216>
c000122d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001233:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001236:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001239:	83 e2 fc             	and    edx,0xfffffffc
c000123c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0001240:	0f 82 72 ff ff ff    	jb     c00011b8 <sYSMALLOc+0x19b>
c0001246:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000124a:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c000124e:	01 c1                	add    ecx,eax
c0001250:	83 ca 01             	or     edx,0x1
c0001253:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001256:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000125a:	83 cb 01             	or     ebx,0x1
c000125d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001260:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001263:	83 c0 08             	add    eax,0x8
c0001266:	e9 5d 01 00 00       	jmp    c00013c8 <sYSMALLOc+0x3ab>
c000126b:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0001271:	89 d1                	mov    ecx,edx
c0001273:	83 e1 01             	and    ecx,0x1
c0001276:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000127a:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c000127f:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c0001283:	74 14                	je     c0001299 <sYSMALLOc+0x27c>
c0001285:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001289:	76 0e                	jbe    c0001299 <sYSMALLOc+0x27c>
c000128b:	83 e2 fe             	and    edx,0xfffffffe
c000128e:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001294:	e9 89 00 00 00       	jmp    c0001322 <sYSMALLOc+0x305>
c0001299:	85 c9                	test   ecx,ecx
c000129b:	0f 84 81 00 00 00    	je     c0001322 <sYSMALLOc+0x305>
c00012a1:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00012a5:	74 0e                	je     c00012b5 <sYSMALLOc+0x298>
c00012a7:	89 f8                	mov    eax,edi
c00012a9:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00012ad:	01 c5                	add    ebp,eax
c00012af:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00012b5:	89 fa                	mov    edx,edi
c00012b7:	83 e2 07             	and    edx,0x7
c00012ba:	74 0c                	je     c00012c8 <sYSMALLOc+0x2ab>
c00012bc:	b8 08 00 00 00       	mov    eax,0x8
c00012c1:	29 d0                	sub    eax,edx
c00012c3:	8d 14 07             	lea    edx,[edi+eax*1]
c00012c6:	eb 04                	jmp    c00012cc <sYSMALLOc+0x2af>
c00012c8:	89 fa                	mov    edx,edi
c00012ca:	31 c0                	xor    eax,eax
c00012cc:	03 04 24             	add    eax,DWORD PTR [esp]
c00012cf:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00012d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00012d7:	8d 0c 06             	lea    ecx,[esi+eax*1]
c00012da:	83 ec 0c             	sub    esp,0xc
c00012dd:	01 f9                	add    ecx,edi
c00012df:	01 cd                	add    ebp,ecx
c00012e1:	29 c8                	sub    eax,ecx
c00012e3:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c00012e7:	01 c5                	add    ebp,eax
c00012e9:	55                   	push   ebp
c00012ea:	e8 d0 51 01 00       	call   c00164bf <sbrk_thunk>
c00012ef:	83 c4 10             	add    esp,0x10
c00012f2:	83 f8 ff             	cmp    eax,0xffffffff
c00012f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00012f9:	75 17                	jne    c0001312 <sYSMALLOc+0x2f5>
c00012fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00012ff:	83 ec 0c             	sub    esp,0xc
c0001302:	6a 00                	push   0x0
c0001304:	e8 b6 51 01 00       	call   c00164bf <sbrk_thunk>
c0001309:	83 c4 10             	add    esp,0x10
c000130c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001310:	eb 32                	jmp    c0001344 <sYSMALLOc+0x327>
c0001312:	39 f8                	cmp    eax,edi
c0001314:	73 39                	jae    c000134f <sYSMALLOc+0x332>
c0001316:	8d 04 37             	lea    eax,[edi+esi*1]
c0001319:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001320:	eb 22                	jmp    c0001344 <sYSMALLOc+0x327>
c0001322:	89 fa                	mov    edx,edi
c0001324:	83 f8 ff             	cmp    eax,0xffffffff
c0001327:	75 24                	jne    c000134d <sYSMALLOc+0x330>
c0001329:	83 ec 0c             	sub    esp,0xc
c000132c:	6a 00                	push   0x0
c000132e:	e8 8c 51 01 00       	call   c00164bf <sbrk_thunk>
c0001333:	83 c4 10             	add    esp,0x10
c0001336:	89 c2                	mov    edx,eax
c0001338:	29 fa                	sub    edx,edi
c000133a:	29 f2                	sub    edx,esi
c000133c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001342:	89 fa                	mov    edx,edi
c0001344:	83 f8 ff             	cmp    eax,0xffffffff
c0001347:	0f 84 be fe ff ff    	je     c000120b <sYSMALLOc+0x1ee>
c000134d:	31 ed                	xor    ebp,ebp
c000134f:	29 d0                	sub    eax,edx
c0001351:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0001354:	01 e8                	add    eax,ebp
c0001356:	83 c8 01             	or     eax,0x1
c0001359:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000135c:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c0001362:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0001366:	0f 84 9f fe ff ff    	je     c000120b <sYSMALLOc+0x1ee>
c000136c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001370:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0001373:	83 ee 0c             	sub    esi,0xc
c0001376:	83 e6 f8             	and    esi,0xfffffff8
c0001379:	89 f0                	mov    eax,esi
c000137b:	83 c8 01             	or     eax,0x1
c000137e:	83 fe 0f             	cmp    esi,0xf
c0001381:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001384:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000138c:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001394:	0f 86 71 fe ff ff    	jbe    c000120b <sYSMALLOc+0x1ee>
c000139a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00013a0:	83 ec 0c             	sub    esp,0xc
c00013a3:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00013ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00013b1:	83 c0 08             	add    eax,0x8
c00013b4:	50                   	push   eax
c00013b5:	e8 4f fb ff ff       	call   c0000f09 <dlfree>
c00013ba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00013c0:	83 c4 10             	add    esp,0x10
c00013c3:	e9 43 fe ff ff       	jmp    c000120b <sYSMALLOc+0x1ee>
c00013c8:	83 c4 2c             	add    esp,0x2c
c00013cb:	5b                   	pop    ebx
c00013cc:	5e                   	pop    esi
c00013cd:	5f                   	pop    edi
c00013ce:	5d                   	pop    ebp
c00013cf:	c3                   	ret    

c00013d0 <dlmalloc>:
c00013d0:	55                   	push   ebp
c00013d1:	57                   	push   edi
c00013d2:	56                   	push   esi
c00013d3:	53                   	push   ebx
c00013d4:	83 ec 1c             	sub    esp,0x1c
c00013d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00013db:	83 f8 df             	cmp    eax,0xffffffdf
c00013de:	0f 87 70 03 00 00    	ja     c0001754 <dlmalloc+0x384>
c00013e4:	83 c0 0b             	add    eax,0xb
c00013e7:	be 10 00 00 00       	mov    esi,0x10
c00013ec:	83 f8 0f             	cmp    eax,0xf
c00013ef:	76 05                	jbe    c00013f6 <dlmalloc+0x26>
c00013f1:	83 e0 f8             	and    eax,0xfffffff8
c00013f4:	89 c6                	mov    esi,eax
c00013f6:	8b 3d e0 68 03 c0    	mov    edi,DWORD PTR ds:0xc00368e0
c00013fc:	f7 c7 01 00 00 00    	test   edi,0x1
c0001402:	75 17                	jne    c000141b <dlmalloc+0x4b>
c0001404:	85 ff                	test   edi,edi
c0001406:	0f 85 05 03 00 00    	jne    c0001711 <dlmalloc+0x341>
c000140c:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001411:	e8 0c fa ff ff       	call   c0000e22 <malloc_consolidate>
c0001416:	e9 f6 02 00 00       	jmp    c0001711 <dlmalloc+0x341>
c000141b:	39 f7                	cmp    edi,esi
c000141d:	72 1f                	jb     c000143e <dlmalloc+0x6e>
c000141f:	89 f2                	mov    edx,esi
c0001421:	c1 ea 03             	shr    edx,0x3
c0001424:	83 ea 02             	sub    edx,0x2
c0001427:	8b 04 95 e4 68 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc971c]
c000142e:	85 c0                	test   eax,eax
c0001430:	74 0c                	je     c000143e <dlmalloc+0x6e>
c0001432:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001435:	89 0c 95 e4 68 03 c0 	mov    DWORD PTR [edx*4-0x3ffc971c],ecx
c000143c:	eb 30                	jmp    c000146e <dlmalloc+0x9e>
c000143e:	89 f0                	mov    eax,esi
c0001440:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001446:	77 2e                	ja     c0001476 <dlmalloc+0xa6>
c0001448:	c1 e8 03             	shr    eax,0x3
c000144b:	8d 14 c5 14 69 03 c0 	lea    edx,[eax*8-0x3ffc96ec]
c0001452:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001456:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001459:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000145c:	39 c3                	cmp    ebx,eax
c000145e:	74 2e                	je     c000148e <dlmalloc+0xbe>
c0001460:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001463:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001468:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000146b:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000146e:	83 c0 08             	add    eax,0x8
c0001471:	e9 e0 02 00 00       	jmp    c0001756 <dlmalloc+0x386>
c0001476:	e8 23 f9 ff ff       	call   c0000d9e <largebin_index>
c000147b:	83 e7 02             	and    edi,0x2
c000147e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001482:	74 0a                	je     c000148e <dlmalloc+0xbe>
c0001484:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001489:	e8 94 f9 ff ff       	call   c0000e22 <malloc_consolidate>
c000148e:	8d 46 10             	lea    eax,[esi+0x10]
c0001491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001495:	8b 1d 20 69 03 c0    	mov    ebx,DWORD PTR ds:0xc0036920
c000149b:	81 fb 14 69 03 c0    	cmp    ebx,0xc0036914
c00014a1:	0f 84 13 01 00 00    	je     c00015ba <dlmalloc+0x1ea>
c00014a7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00014aa:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014ad:	83 e7 fc             	and    edi,0xfffffffc
c00014b0:	81 fe ff 00 00 00    	cmp    esi,0xff
c00014b6:	77 4c                	ja     c0001504 <dlmalloc+0x134>
c00014b8:	3d 14 69 03 c0       	cmp    eax,0xc0036914
c00014bd:	75 45                	jne    c0001504 <dlmalloc+0x134>
c00014bf:	39 1d 10 69 03 c0    	cmp    DWORD PTR ds:0xc0036910,ebx
c00014c5:	75 3d                	jne    c0001504 <dlmalloc+0x134>
c00014c7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00014cb:	73 37                	jae    c0001504 <dlmalloc+0x134>
c00014cd:	8d 04 33             	lea    eax,[ebx+esi*1]
c00014d0:	89 fa                	mov    edx,edi
c00014d2:	a3 1c 69 03 c0       	mov    ds:0xc003691c,eax
c00014d7:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c00014dc:	a3 10 69 03 c0       	mov    ds:0xc0036910,eax
c00014e1:	29 f2                	sub    edx,esi
c00014e3:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c00014ea:	c7 40 0c 14 69 03 c0 	mov    DWORD PTR [eax+0xc],0xc0036914
c00014f1:	83 ce 01             	or     esi,0x1
c00014f4:	89 d1                	mov    ecx,edx
c00014f6:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00014f9:	83 c9 01             	or     ecx,0x1
c00014fc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00014ff:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001502:	eb 15                	jmp    c0001519 <dlmalloc+0x149>
c0001504:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c0001509:	39 fe                	cmp    esi,edi
c000150b:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c0001512:	75 0d                	jne    c0001521 <dlmalloc+0x151>
c0001514:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001519:	8d 43 08             	lea    eax,[ebx+0x8]
c000151c:	e9 35 02 00 00       	jmp    c0001756 <dlmalloc+0x386>
c0001521:	89 f8                	mov    eax,edi
c0001523:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001529:	77 19                	ja     c0001544 <dlmalloc+0x174>
c000152b:	c1 e8 03             	shr    eax,0x3
c000152e:	8d 14 00             	lea    edx,[eax+eax*1]
c0001531:	83 c2 0d             	add    edx,0xd
c0001534:	8d 2c 95 d8 68 03 c0 	lea    ebp,[edx*4-0x3ffc9728]
c000153b:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c0001542:	eb 46                	jmp    c000158a <dlmalloc+0x1ba>
c0001544:	e8 55 f8 ff ff       	call   c0000d9e <largebin_index>
c0001549:	8d 14 00             	lea    edx,[eax+eax*1]
c000154c:	83 c2 0d             	add    edx,0xd
c000154f:	8d 0c 95 e0 68 03 c0 	lea    ecx,[edx*4-0x3ffc9720]
c0001556:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c000155d:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001560:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001564:	89 d5                	mov    ebp,edx
c0001566:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000156a:	74 1e                	je     c000158a <dlmalloc+0x1ba>
c000156c:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000156f:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001572:	77 12                	ja     c0001586 <dlmalloc+0x1b6>
c0001574:	83 cf 01             	or     edi,0x1
c0001577:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000157a:	76 05                	jbe    c0001581 <dlmalloc+0x1b1>
c000157c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000157f:	eb f6                	jmp    c0001577 <dlmalloc+0x1a7>
c0001581:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001584:	eb 04                	jmp    c000158a <dlmalloc+0x1ba>
c0001586:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000158a:	89 c7                	mov    edi,eax
c000158c:	88 c1                	mov    cl,al
c000158e:	c1 ff 05             	sar    edi,0x5
c0001591:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001595:	bf 01 00 00 00       	mov    edi,0x1
c000159a:	d3 e7                	shl    edi,cl
c000159c:	89 f8                	mov    eax,edi
c000159e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00015a2:	09 04 bd 14 6c 03 c0 	or     DWORD PTR [edi*4-0x3ffc93ec],eax
c00015a9:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00015ac:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00015af:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00015b2:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00015b5:	e9 db fe ff ff       	jmp    c0001495 <dlmalloc+0xc5>
c00015ba:	81 fe ff 00 00 00    	cmp    esi,0xff
c00015c0:	76 78                	jbe    c000163a <dlmalloc+0x26a>
c00015c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00015c6:	8d 04 c5 14 69 03 c0 	lea    eax,[eax*8-0x3ffc96ec]
c00015cd:	8d 48 f8             	lea    ecx,[eax-0x8]
c00015d0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00015d3:	39 ca                	cmp    edx,ecx
c00015d5:	74 63                	je     c000163a <dlmalloc+0x26a>
c00015d7:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00015da:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015dd:	83 e3 fc             	and    ebx,0xfffffffc
c00015e0:	39 de                	cmp    esi,ebx
c00015e2:	77 52                	ja     c0001636 <dlmalloc+0x266>
c00015e4:	89 df                	mov    edi,ebx
c00015e6:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00015e9:	29 f7                	sub    edi,esi
c00015eb:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00015ee:	01 d3                	add    ebx,edx
c00015f0:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00015f3:	83 ff 0f             	cmp    edi,0xf
c00015f6:	8d 42 08             	lea    eax,[edx+0x8]
c00015f9:	77 09                	ja     c0001604 <dlmalloc+0x234>
c00015fb:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00015ff:	e9 52 01 00 00       	jmp    c0001756 <dlmalloc+0x386>
c0001604:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001607:	83 ce 01             	or     esi,0x1
c000160a:	89 0d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,ecx
c0001610:	89 0d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,ecx
c0001616:	c7 41 08 14 69 03 c0 	mov    DWORD PTR [ecx+0x8],0xc0036914
c000161d:	c7 41 0c 14 69 03 c0 	mov    DWORD PTR [ecx+0xc],0xc0036914
c0001624:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001627:	89 fa                	mov    edx,edi
c0001629:	83 ca 01             	or     edx,0x1
c000162c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000162f:	89 3b                	mov    DWORD PTR [ebx],edi
c0001631:	e9 20 01 00 00       	jmp    c0001756 <dlmalloc+0x386>
c0001636:	89 c2                	mov    edx,eax
c0001638:	eb 99                	jmp    c00015d3 <dlmalloc+0x203>
c000163a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000163e:	b8 01 00 00 00       	mov    eax,0x1
c0001643:	41                   	inc    ecx
c0001644:	89 cb                	mov    ebx,ecx
c0001646:	8d 14 cd 0c 69 03 c0 	lea    edx,[ecx*8-0x3ffc96f4]
c000164d:	c1 eb 05             	shr    ebx,0x5
c0001650:	d3 e0                	shl    eax,cl
c0001652:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c0001659:	39 f8                	cmp    eax,edi
c000165b:	77 04                	ja     c0001661 <dlmalloc+0x291>
c000165d:	85 c0                	test   eax,eax
c000165f:	75 26                	jne    c0001687 <dlmalloc+0x2b7>
c0001661:	43                   	inc    ebx
c0001662:	83 fb 02             	cmp    ebx,0x2
c0001665:	0f 87 a6 00 00 00    	ja     c0001711 <dlmalloc+0x341>
c000166b:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c0001672:	85 ff                	test   edi,edi
c0001674:	74 eb                	je     c0001661 <dlmalloc+0x291>
c0001676:	89 d8                	mov    eax,ebx
c0001678:	c1 e0 06             	shl    eax,0x6
c000167b:	8d 14 85 0c 69 03 c0 	lea    edx,[eax*4-0x3ffc96f4]
c0001682:	b8 01 00 00 00       	mov    eax,0x1
c0001687:	85 f8                	test   eax,edi
c0001689:	75 07                	jne    c0001692 <dlmalloc+0x2c2>
c000168b:	83 c2 08             	add    edx,0x8
c000168e:	01 c0                	add    eax,eax
c0001690:	eb f5                	jmp    c0001687 <dlmalloc+0x2b7>
c0001692:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001695:	39 ca                	cmp    edx,ecx
c0001697:	75 14                	jne    c00016ad <dlmalloc+0x2dd>
c0001699:	89 c1                	mov    ecx,eax
c000169b:	83 c2 08             	add    edx,0x8
c000169e:	f7 d1                	not    ecx
c00016a0:	01 c0                	add    eax,eax
c00016a2:	21 cf                	and    edi,ecx
c00016a4:	89 3c 9d 14 6c 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc93ec],edi
c00016ab:	eb ac                	jmp    c0001659 <dlmalloc+0x289>
c00016ad:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00016b0:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00016b3:	83 e0 fc             	and    eax,0xfffffffc
c00016b6:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00016b9:	89 c3                	mov    ebx,eax
c00016bb:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00016be:	29 f3                	sub    ebx,esi
c00016c0:	8d 14 01             	lea    edx,[ecx+eax*1]
c00016c3:	83 fb 0f             	cmp    ebx,0xf
c00016c6:	8d 41 08             	lea    eax,[ecx+0x8]
c00016c9:	77 09                	ja     c00016d4 <dlmalloc+0x304>
c00016cb:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00016cf:	e9 82 00 00 00       	jmp    c0001756 <dlmalloc+0x386>
c00016d4:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00016d7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00016dd:	89 3d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edi
c00016e3:	89 3d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,edi
c00016e9:	c7 47 08 14 69 03 c0 	mov    DWORD PTR [edi+0x8],0xc0036914
c00016f0:	c7 47 0c 14 69 03 c0 	mov    DWORD PTR [edi+0xc],0xc0036914
c00016f7:	77 06                	ja     c00016ff <dlmalloc+0x32f>
c00016f9:	89 3d 10 69 03 c0    	mov    DWORD PTR ds:0xc0036910,edi
c00016ff:	83 ce 01             	or     esi,0x1
c0001702:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001705:	89 d9                	mov    ecx,ebx
c0001707:	83 c9 01             	or     ecx,0x1
c000170a:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000170d:	89 1a                	mov    DWORD PTR [edx],ebx
c000170f:	eb 45                	jmp    c0001756 <dlmalloc+0x386>
c0001711:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c0001716:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001719:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000171c:	83 e2 fc             	and    edx,0xfffffffc
c000171f:	39 d1                	cmp    ecx,edx
c0001721:	77 1e                	ja     c0001741 <dlmalloc+0x371>
c0001723:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 0d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,ecx
c000172e:	83 cb 01             	or     ebx,0x1
c0001731:	29 f2                	sub    edx,esi
c0001733:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001736:	83 ca 01             	or     edx,0x1
c0001739:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000173c:	e9 2d fd ff ff       	jmp    c000146e <dlmalloc+0x9e>
c0001741:	83 c4 1c             	add    esp,0x1c
c0001744:	89 f0                	mov    eax,esi
c0001746:	5b                   	pop    ebx
c0001747:	ba e0 68 03 c0       	mov    edx,0xc00368e0
c000174c:	5e                   	pop    esi
c000174d:	5f                   	pop    edi
c000174e:	5d                   	pop    ebp
c000174f:	e9 c9 f8 ff ff       	jmp    c000101d <sYSMALLOc>
c0001754:	31 c0                	xor    eax,eax
c0001756:	83 c4 1c             	add    esp,0x1c
c0001759:	5b                   	pop    ebx
c000175a:	5e                   	pop    esi
c000175b:	5f                   	pop    edi
c000175c:	5d                   	pop    ebp
c000175d:	c3                   	ret    

c000175e <iALLOc>:
c000175e:	55                   	push   ebp
c000175f:	89 c5                	mov    ebp,eax
c0001761:	57                   	push   edi
c0001762:	56                   	push   esi
c0001763:	53                   	push   ebx
c0001764:	83 ec 2c             	sub    esp,0x2c
c0001767:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000176b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000176f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001773:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c000177a:	75 12                	jne    c000178e <iALLOc+0x30>
c000177c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001780:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001785:	e8 98 f6 ff ff       	call   c0000e22 <malloc_consolidate>
c000178a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000178e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001793:	74 12                	je     c00017a7 <iALLOc+0x49>
c0001795:	85 ed                	test   ebp,ebp
c0001797:	0f 84 64 01 00 00    	je     c0001901 <iALLOc+0x1a3>
c000179d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00017a5:	eb 33                	jmp    c00017da <iALLOc+0x7c>
c00017a7:	85 ed                	test   ebp,ebp
c00017a9:	75 14                	jne    c00017bf <iALLOc+0x61>
c00017ab:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00017b3:	83 c4 2c             	add    esp,0x2c
c00017b6:	5b                   	pop    ebx
c00017b7:	5e                   	pop    esi
c00017b8:	5f                   	pop    edi
c00017b9:	5d                   	pop    ebp
c00017ba:	e9 11 fc ff ff       	jmp    c00013d0 <dlmalloc>
c00017bf:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00017c6:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00017ce:	83 f8 0f             	cmp    eax,0xf
c00017d1:	76 07                	jbe    c00017da <iALLOc+0x7c>
c00017d3:	83 e0 f8             	and    eax,0xfffffff8
c00017d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00017da:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00017df:	75 09                	jne    c00017ea <iALLOc+0x8c>
c00017e1:	89 d0                	mov    eax,edx
c00017e3:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00017e6:	31 f6                	xor    esi,esi
c00017e8:	eb 3b                	jmp    c0001825 <iALLOc+0xc7>
c00017ea:	8b 02                	mov    eax,DWORD PTR [edx]
c00017ec:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00017f4:	83 c0 0b             	add    eax,0xb
c00017f7:	83 f8 0f             	cmp    eax,0xf
c00017fa:	76 07                	jbe    c0001803 <iALLOc+0xa5>
c00017fc:	83 e0 f8             	and    eax,0xfffffff8
c00017ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001803:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001807:	0f af f5             	imul   esi,ebp
c000180a:	eb 25                	jmp    c0001831 <iALLOc+0xd3>
c000180c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000180e:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001811:	bb 10 00 00 00       	mov    ebx,0x10
c0001816:	83 f9 0f             	cmp    ecx,0xf
c0001819:	76 05                	jbe    c0001820 <iALLOc+0xc2>
c000181b:	83 e1 f8             	and    ecx,0xfffffff8
c000181e:	89 cb                	mov    ebx,ecx
c0001820:	01 de                	add    esi,ebx
c0001822:	83 c0 04             	add    eax,0x4
c0001825:	39 c7                	cmp    edi,eax
c0001827:	75 e3                	jne    c000180c <iALLOc+0xae>
c0001829:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001831:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001835:	8b 1d 34 6c 03 c0    	mov    ebx,DWORD PTR ds:0xc0036c34
c000183b:	83 ec 0c             	sub    esp,0xc
c000183e:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c0001848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000184c:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001850:	50                   	push   eax
c0001851:	e8 7a fb ff ff       	call   c00013d0 <dlmalloc>
c0001856:	83 c4 10             	add    esp,0x10
c0001859:	89 1d 34 6c 03 c0    	mov    DWORD PTR ds:0xc0036c34,ebx
c000185f:	85 c0                	test   eax,eax
c0001861:	0f 84 92 00 00 00    	je     c00018f9 <iALLOc+0x19b>
c0001867:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000186a:	8d 78 f8             	lea    edi,[eax-0x8]
c000186d:	83 e3 fc             	and    ebx,0xfffffffc
c0001870:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001874:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001879:	74 1e                	je     c0001899 <iALLOc+0x13b>
c000187b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000187f:	89 d9                	mov    ecx,ebx
c0001881:	52                   	push   edx
c0001882:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001886:	83 e9 04             	sub    ecx,0x4
c0001889:	51                   	push   ecx
c000188a:	6a 00                	push   0x0
c000188c:	50                   	push   eax
c000188d:	e8 5e ec ff ff       	call   c00004f0 <memset>
c0001892:	83 c4 10             	add    esp,0x10
c0001895:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001899:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000189e:	75 14                	jne    c00018b4 <iALLOc+0x156>
c00018a0:	8d 04 37             	lea    eax,[edi+esi*1]
c00018a3:	29 f3                	sub    ebx,esi
c00018a5:	8d 48 08             	lea    ecx,[eax+0x8]
c00018a8:	83 cb 01             	or     ebx,0x1
c00018ab:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00018af:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00018b2:	89 f3                	mov    ebx,esi
c00018b4:	31 c0                	xor    eax,eax
c00018b6:	4d                   	dec    ebp
c00018b7:	8d 4f 08             	lea    ecx,[edi+0x8]
c00018ba:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018be:	39 c5                	cmp    ebp,eax
c00018c0:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00018c3:	74 2c                	je     c00018f1 <iALLOc+0x193>
c00018c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00018c9:	85 c9                	test   ecx,ecx
c00018cb:	75 15                	jne    c00018e2 <iALLOc+0x184>
c00018cd:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00018d0:	8d 71 0b             	lea    esi,[ecx+0xb]
c00018d3:	b9 10 00 00 00       	mov    ecx,0x10
c00018d8:	83 fe 0f             	cmp    esi,0xf
c00018db:	76 05                	jbe    c00018e2 <iALLOc+0x184>
c00018dd:	83 e6 f8             	and    esi,0xfffffff8
c00018e0:	89 f1                	mov    ecx,esi
c00018e2:	89 ce                	mov    esi,ecx
c00018e4:	29 cb                	sub    ebx,ecx
c00018e6:	83 ce 01             	or     esi,0x1
c00018e9:	40                   	inc    eax
c00018ea:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00018ed:	01 cf                	add    edi,ecx
c00018ef:	eb c6                	jmp    c00018b7 <iALLOc+0x159>
c00018f1:	83 cb 01             	or     ebx,0x1
c00018f4:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00018f7:	eb 08                	jmp    c0001901 <iALLOc+0x1a3>
c00018f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001905:	83 c4 2c             	add    esp,0x2c
c0001908:	5b                   	pop    ebx
c0001909:	5e                   	pop    esi
c000190a:	5f                   	pop    edi
c000190b:	5d                   	pop    ebp
c000190c:	c3                   	ret    

c000190d <dlrealloc>:
c000190d:	55                   	push   ebp
c000190e:	57                   	push   edi
c000190f:	56                   	push   esi
c0001910:	53                   	push   ebx
c0001911:	83 ec 1c             	sub    esp,0x1c
c0001914:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001918:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000191c:	85 db                	test   ebx,ebx
c000191e:	75 10                	jne    c0001930 <dlrealloc+0x23>
c0001920:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001924:	83 c4 1c             	add    esp,0x1c
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	e9 a0 fa ff ff       	jmp    c00013d0 <dlmalloc>
c0001930:	83 f8 df             	cmp    eax,0xffffffdf
c0001933:	0f 87 a5 01 00 00    	ja     c0001ade <dlrealloc+0x1d1>
c0001939:	83 c0 0b             	add    eax,0xb
c000193c:	bd 10 00 00 00       	mov    ebp,0x10
c0001941:	83 f8 0f             	cmp    eax,0xf
c0001944:	76 05                	jbe    c000194b <dlrealloc+0x3e>
c0001946:	83 e0 f8             	and    eax,0xfffffff8
c0001949:	89 c5                	mov    ebp,eax
c000194b:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000194e:	89 c6                	mov    esi,eax
c0001950:	83 e6 fc             	and    esi,0xfffffffc
c0001953:	a8 02                	test   al,0x2
c0001955:	0f 85 4e 01 00 00    	jne    c0001aa9 <dlrealloc+0x19c>
c000195b:	8d 7b f8             	lea    edi,[ebx-0x8]
c000195e:	39 f5                	cmp    ebp,esi
c0001960:	0f 86 04 01 00 00    	jbe    c0001a6a <dlrealloc+0x15d>
c0001966:	8d 14 37             	lea    edx,[edi+esi*1]
c0001969:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000196c:	39 15 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,edx
c0001972:	75 33                	jne    c00019a7 <dlrealloc+0x9a>
c0001974:	83 e1 fc             	and    ecx,0xfffffffc
c0001977:	01 f1                	add    ecx,esi
c0001979:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000197d:	8d 4d 10             	lea    ecx,[ebp+0x10]
c0001980:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001984:	77 49                	ja     c00019cf <dlrealloc+0xc2>
c0001986:	01 ef                	add    edi,ebp
c0001988:	83 e0 01             	and    eax,0x1
c000198b:	09 e8                	or     eax,ebp
c000198d:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001990:	89 3d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edi
c0001996:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000199a:	29 e8                	sub    eax,ebp
c000199c:	83 c8 01             	or     eax,0x1
c000199f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00019a2:	e9 39 01 00 00       	jmp    c0001ae0 <dlrealloc+0x1d3>
c00019a7:	89 c8                	mov    eax,ecx
c00019a9:	83 e0 fe             	and    eax,0xfffffffe
c00019ac:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00019b1:	75 1c                	jne    c00019cf <dlrealloc+0xc2>
c00019b3:	83 e1 fc             	and    ecx,0xfffffffc
c00019b6:	01 f1                	add    ecx,esi
c00019b8:	39 cd                	cmp    ebp,ecx
c00019ba:	77 13                	ja     c00019cf <dlrealloc+0xc2>
c00019bc:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00019bf:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00019c2:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00019c5:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00019c8:	89 ce                	mov    esi,ecx
c00019ca:	e9 9b 00 00 00       	jmp    c0001a6a <dlrealloc+0x15d>
c00019cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00019d3:	8d 45 f9             	lea    eax,[ebp-0x7]
c00019d6:	83 ec 0c             	sub    esp,0xc
c00019d9:	50                   	push   eax
c00019da:	e8 f1 f9 ff ff       	call   c00013d0 <dlmalloc>
c00019df:	83 c4 10             	add    esp,0x10
c00019e2:	85 c0                	test   eax,eax
c00019e4:	0f 84 f4 00 00 00    	je     c0001ade <dlrealloc+0x1d1>
c00019ea:	8d 48 f8             	lea    ecx,[eax-0x8]
c00019ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f1:	39 ca                	cmp    edx,ecx
c00019f3:	75 0a                	jne    c00019ff <dlrealloc+0xf2>
c00019f5:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00019f8:	83 e0 fc             	and    eax,0xfffffffc
c00019fb:	01 c6                	add    esi,eax
c00019fd:	eb 6b                	jmp    c0001a6a <dlrealloc+0x15d>
c00019ff:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001a02:	83 f9 27             	cmp    ecx,0x27
c0001a05:	76 08                	jbe    c0001a0f <dlrealloc+0x102>
c0001a07:	89 de                	mov    esi,ebx
c0001a09:	89 c7                	mov    edi,eax
c0001a0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a0d:	eb 43                	jmp    c0001a52 <dlrealloc+0x145>
c0001a0f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001a11:	83 f9 13             	cmp    ecx,0x13
c0001a14:	89 10                	mov    DWORD PTR [eax],edx
c0001a16:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001a19:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001a1c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001a1f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001a22:	76 2e                	jbe    c0001a52 <dlrealloc+0x145>
c0001a24:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001a27:	83 f9 1b             	cmp    ecx,0x1b
c0001a2a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001a2d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001a30:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001a33:	76 1d                	jbe    c0001a52 <dlrealloc+0x145>
c0001a35:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001a38:	83 f9 23             	cmp    ecx,0x23
c0001a3b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001a3e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001a41:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001a44:	76 0c                	jbe    c0001a52 <dlrealloc+0x145>
c0001a46:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001a49:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001a4c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001a4f:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001a52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001a56:	83 ec 0c             	sub    esp,0xc
c0001a59:	53                   	push   ebx
c0001a5a:	e8 aa f4 ff ff       	call   c0000f09 <dlfree>
c0001a5f:	83 c4 10             	add    esp,0x10
c0001a62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001a66:	89 c3                	mov    ebx,eax
c0001a68:	eb 76                	jmp    c0001ae0 <dlrealloc+0x1d3>
c0001a6a:	89 f2                	mov    edx,esi
c0001a6c:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001a6f:	29 ea                	sub    edx,ebp
c0001a71:	83 e1 01             	and    ecx,0x1
c0001a74:	8d 04 37             	lea    eax,[edi+esi*1]
c0001a77:	83 fa 0f             	cmp    edx,0xf
c0001a7a:	77 0b                	ja     c0001a87 <dlrealloc+0x17a>
c0001a7c:	09 f1                	or     ecx,esi
c0001a7e:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c0001a81:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001a85:	eb 59                	jmp    c0001ae0 <dlrealloc+0x1d3>
c0001a87:	01 ef                	add    edi,ebp
c0001a89:	83 ec 0c             	sub    esp,0xc
c0001a8c:	09 cd                	or     ebp,ecx
c0001a8e:	83 ca 01             	or     edx,0x1
c0001a91:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c0001a94:	83 c7 08             	add    edi,0x8
c0001a97:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001a9a:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001a9e:	57                   	push   edi
c0001a9f:	e8 65 f4 ff ff       	call   c0000f09 <dlfree>
c0001aa4:	83 c4 10             	add    esp,0x10
c0001aa7:	eb 37                	jmp    c0001ae0 <dlrealloc+0x1d3>
c0001aa9:	8d 45 04             	lea    eax,[ebp+0x4]
c0001aac:	39 f0                	cmp    eax,esi
c0001aae:	76 30                	jbe    c0001ae0 <dlrealloc+0x1d3>
c0001ab0:	83 ec 0c             	sub    esp,0xc
c0001ab3:	83 ed 07             	sub    ebp,0x7
c0001ab6:	55                   	push   ebp
c0001ab7:	e8 14 f9 ff ff       	call   c00013d0 <dlmalloc>
c0001abc:	83 c4 10             	add    esp,0x10
c0001abf:	89 c5                	mov    ebp,eax
c0001ac1:	85 c0                	test   eax,eax
c0001ac3:	74 19                	je     c0001ade <dlrealloc+0x1d1>
c0001ac5:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001ac8:	89 c7                	mov    edi,eax
c0001aca:	89 de                	mov    esi,ebx
c0001acc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ace:	83 ec 0c             	sub    esp,0xc
c0001ad1:	53                   	push   ebx
c0001ad2:	89 eb                	mov    ebx,ebp
c0001ad4:	e8 30 f4 ff ff       	call   c0000f09 <dlfree>
c0001ad9:	83 c4 10             	add    esp,0x10
c0001adc:	eb 02                	jmp    c0001ae0 <dlrealloc+0x1d3>
c0001ade:	31 db                	xor    ebx,ebx
c0001ae0:	83 c4 1c             	add    esp,0x1c
c0001ae3:	89 d8                	mov    eax,ebx
c0001ae5:	5b                   	pop    ebx
c0001ae6:	5e                   	pop    esi
c0001ae7:	5f                   	pop    edi
c0001ae8:	5d                   	pop    ebp
c0001ae9:	c3                   	ret    

c0001aea <dlmemalign>:
c0001aea:	55                   	push   ebp
c0001aeb:	57                   	push   edi
c0001aec:	56                   	push   esi
c0001aed:	53                   	push   ebx
c0001aee:	83 ec 0c             	sub    esp,0xc
c0001af1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001af5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001af9:	83 fa 08             	cmp    edx,0x8
c0001afc:	77 10                	ja     c0001b0e <dlmemalign+0x24>
c0001afe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001b02:	83 c4 0c             	add    esp,0xc
c0001b05:	5b                   	pop    ebx
c0001b06:	5e                   	pop    esi
c0001b07:	5f                   	pop    edi
c0001b08:	5d                   	pop    ebp
c0001b09:	e9 c2 f8 ff ff       	jmp    c00013d0 <dlmalloc>
c0001b0e:	bf 10 00 00 00       	mov    edi,0x10
c0001b13:	83 fa 0f             	cmp    edx,0xf
c0001b16:	76 13                	jbe    c0001b2b <dlmemalign+0x41>
c0001b18:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001b1b:	85 d1                	test   ecx,edx
c0001b1d:	75 04                	jne    c0001b23 <dlmemalign+0x39>
c0001b1f:	89 d7                	mov    edi,edx
c0001b21:	eb 08                	jmp    c0001b2b <dlmemalign+0x41>
c0001b23:	39 d7                	cmp    edi,edx
c0001b25:	73 04                	jae    c0001b2b <dlmemalign+0x41>
c0001b27:	01 ff                	add    edi,edi
c0001b29:	eb f8                	jmp    c0001b23 <dlmemalign+0x39>
c0001b2b:	83 f8 df             	cmp    eax,0xffffffdf
c0001b2e:	76 07                	jbe    c0001b37 <dlmemalign+0x4d>
c0001b30:	31 c0                	xor    eax,eax
c0001b32:	e9 ce 00 00 00       	jmp    c0001c05 <dlmemalign+0x11b>
c0001b37:	83 c0 0b             	add    eax,0xb
c0001b3a:	bd 10 00 00 00       	mov    ebp,0x10
c0001b3f:	83 f8 0f             	cmp    eax,0xf
c0001b42:	76 05                	jbe    c0001b49 <dlmemalign+0x5f>
c0001b44:	83 e0 f8             	and    eax,0xfffffff8
c0001b47:	89 c5                	mov    ebp,eax
c0001b49:	83 ec 0c             	sub    esp,0xc
c0001b4c:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001b50:	50                   	push   eax
c0001b51:	e8 7a f8 ff ff       	call   c00013d0 <dlmalloc>
c0001b56:	83 c4 10             	add    esp,0x10
c0001b59:	89 c1                	mov    ecx,eax
c0001b5b:	85 c0                	test   eax,eax
c0001b5d:	74 d1                	je     c0001b30 <dlmemalign+0x46>
c0001b5f:	31 d2                	xor    edx,edx
c0001b61:	8d 70 f8             	lea    esi,[eax-0x8]
c0001b64:	f7 f7                	div    edi
c0001b66:	85 d2                	test   edx,edx
c0001b68:	74 62                	je     c0001bcc <dlmemalign+0xe2>
c0001b6a:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001b6e:	89 f8                	mov    eax,edi
c0001b70:	f7 d8                	neg    eax
c0001b72:	21 c3                	and    ebx,eax
c0001b74:	83 eb 08             	sub    ebx,0x8
c0001b77:	89 d8                	mov    eax,ebx
c0001b79:	29 f0                	sub    eax,esi
c0001b7b:	83 f8 0f             	cmp    eax,0xf
c0001b7e:	77 02                	ja     c0001b82 <dlmemalign+0x98>
c0001b80:	01 fb                	add    ebx,edi
c0001b82:	89 d8                	mov    eax,ebx
c0001b84:	29 f0                	sub    eax,esi
c0001b86:	89 c6                	mov    esi,eax
c0001b88:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001b8b:	89 c2                	mov    edx,eax
c0001b8d:	83 e2 fc             	and    edx,0xfffffffc
c0001b90:	29 f2                	sub    edx,esi
c0001b92:	a8 02                	test   al,0x2
c0001b94:	74 10                	je     c0001ba6 <dlmemalign+0xbc>
c0001b96:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001b99:	83 ca 02             	or     edx,0x2
c0001b9c:	8d 43 08             	lea    eax,[ebx+0x8]
c0001b9f:	89 33                	mov    DWORD PTR [ebx],esi
c0001ba1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001ba4:	eb 5f                	jmp    c0001c05 <dlmemalign+0x11b>
c0001ba6:	83 ec 0c             	sub    esp,0xc
c0001ba9:	89 d0                	mov    eax,edx
c0001bab:	83 c8 01             	or     eax,0x1
c0001bae:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001bb1:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001bb6:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001bb9:	83 e0 01             	and    eax,0x1
c0001bbc:	09 f0                	or     eax,esi
c0001bbe:	89 de                	mov    esi,ebx
c0001bc0:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001bc3:	51                   	push   ecx
c0001bc4:	e8 40 f3 ff ff       	call   c0000f09 <dlfree>
c0001bc9:	83 c4 10             	add    esp,0x10
c0001bcc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001bcf:	a8 02                	test   al,0x2
c0001bd1:	75 2f                	jne    c0001c02 <dlmemalign+0x118>
c0001bd3:	83 e0 fc             	and    eax,0xfffffffc
c0001bd6:	8d 55 10             	lea    edx,[ebp+0x10]
c0001bd9:	39 c2                	cmp    edx,eax
c0001bdb:	73 25                	jae    c0001c02 <dlmemalign+0x118>
c0001bdd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001be0:	83 ec 0c             	sub    esp,0xc
c0001be3:	29 e8                	sub    eax,ebp
c0001be5:	83 c2 08             	add    edx,0x8
c0001be8:	83 c8 01             	or     eax,0x1
c0001beb:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001bee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001bf1:	83 e0 01             	and    eax,0x1
c0001bf4:	09 c5                	or     ebp,eax
c0001bf6:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001bf9:	52                   	push   edx
c0001bfa:	e8 0a f3 ff ff       	call   c0000f09 <dlfree>
c0001bff:	83 c4 10             	add    esp,0x10
c0001c02:	8d 46 08             	lea    eax,[esi+0x8]
c0001c05:	83 c4 0c             	add    esp,0xc
c0001c08:	5b                   	pop    ebx
c0001c09:	5e                   	pop    esi
c0001c0a:	5f                   	pop    edi
c0001c0b:	5d                   	pop    ebp
c0001c0c:	c3                   	ret    

c0001c0d <dlcalloc>:
c0001c0d:	53                   	push   ebx
c0001c0e:	83 ec 14             	sub    esp,0x14
c0001c11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001c15:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001c1a:	50                   	push   eax
c0001c1b:	e8 b0 f7 ff ff       	call   c00013d0 <dlmalloc>
c0001c20:	83 c4 10             	add    esp,0x10
c0001c23:	89 c3                	mov    ebx,eax
c0001c25:	85 c0                	test   eax,eax
c0001c27:	74 6e                	je     c0001c97 <dlcalloc+0x8a>
c0001c29:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001c2c:	a8 02                	test   al,0x2
c0001c2e:	75 67                	jne    c0001c97 <dlcalloc+0x8a>
c0001c30:	83 e0 fc             	and    eax,0xfffffffc
c0001c33:	83 e8 04             	sub    eax,0x4
c0001c36:	83 f8 27             	cmp    eax,0x27
c0001c39:	76 0f                	jbe    c0001c4a <dlcalloc+0x3d>
c0001c3b:	52                   	push   edx
c0001c3c:	50                   	push   eax
c0001c3d:	6a 00                	push   0x0
c0001c3f:	53                   	push   ebx
c0001c40:	e8 ab e8 ff ff       	call   c00004f0 <memset>
c0001c45:	83 c4 10             	add    esp,0x10
c0001c48:	eb 4d                	jmp    c0001c97 <dlcalloc+0x8a>
c0001c4a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001c50:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001c57:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001c5e:	83 f8 13             	cmp    eax,0x13
c0001c61:	76 34                	jbe    c0001c97 <dlcalloc+0x8a>
c0001c63:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001c6a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001c71:	83 f8 1b             	cmp    eax,0x1b
c0001c74:	76 21                	jbe    c0001c97 <dlcalloc+0x8a>
c0001c76:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001c7d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001c84:	83 f8 23             	cmp    eax,0x23
c0001c87:	76 0e                	jbe    c0001c97 <dlcalloc+0x8a>
c0001c89:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001c90:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001c97:	89 d8                	mov    eax,ebx
c0001c99:	83 c4 08             	add    esp,0x8
c0001c9c:	5b                   	pop    ebx
c0001c9d:	c3                   	ret    

c0001c9e <dlcfree>:
c0001c9e:	e9 66 f2 ff ff       	jmp    c0000f09 <dlfree>

c0001ca3 <dlindependent_calloc>:
c0001ca3:	83 ec 28             	sub    esp,0x28
c0001ca6:	b9 03 00 00 00       	mov    ecx,0x3
c0001cab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001caf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001cb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001cb7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001cbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001cbf:	e8 9a fa ff ff       	call   c000175e <iALLOc>
c0001cc4:	83 c4 2c             	add    esp,0x2c
c0001cc7:	c3                   	ret    

c0001cc8 <dlindependent_comalloc>:
c0001cc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001cd0:	31 c9                	xor    ecx,ecx
c0001cd2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001cd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001cda:	e9 7f fa ff ff       	jmp    c000175e <iALLOc>

c0001cdf <dlvalloc>:
c0001cdf:	83 ec 0c             	sub    esp,0xc
c0001ce2:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001ce9:	75 0a                	jne    c0001cf5 <dlvalloc+0x16>
c0001ceb:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001cf0:	e8 2d f1 ff ff       	call   c0000e22 <malloc_consolidate>
c0001cf5:	50                   	push   eax
c0001cf6:	50                   	push   eax
c0001cf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001cfb:	ff 35 3c 6c 03 c0    	push   DWORD PTR ds:0xc0036c3c
c0001d01:	e8 e4 fd ff ff       	call   c0001aea <dlmemalign>
c0001d06:	83 c4 1c             	add    esp,0x1c
c0001d09:	c3                   	ret    

c0001d0a <dlpvalloc>:
c0001d0a:	83 ec 0c             	sub    esp,0xc
c0001d0d:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001d14:	75 0a                	jne    c0001d20 <dlpvalloc+0x16>
c0001d16:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001d1b:	e8 02 f1 ff ff       	call   c0000e22 <malloc_consolidate>
c0001d20:	a1 3c 6c 03 c0       	mov    eax,ds:0xc0036c3c
c0001d25:	89 c1                	mov    ecx,eax
c0001d27:	52                   	push   edx
c0001d28:	f7 d9                	neg    ecx
c0001d2a:	52                   	push   edx
c0001d2b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001d2f:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001d33:	21 ca                	and    edx,ecx
c0001d35:	52                   	push   edx
c0001d36:	50                   	push   eax
c0001d37:	e8 ae fd ff ff       	call   c0001aea <dlmemalign>
c0001d3c:	83 c4 1c             	add    esp,0x1c
c0001d3f:	c3                   	ret    

c0001d40 <dlmalloc_trim>:
c0001d40:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001d45:	e8 d8 f0 ff ff       	call   c0000e22 <malloc_consolidate>
c0001d4a:	31 c0                	xor    eax,eax
c0001d4c:	c3                   	ret    

c0001d4d <dlmalloc_usable_size>:
c0001d4d:	53                   	push   ebx
c0001d4e:	31 c0                	xor    eax,eax
c0001d50:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001d54:	85 c9                	test   ecx,ecx
c0001d56:	74 24                	je     c0001d7c <dlmalloc_usable_size+0x2f>
c0001d58:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001d5b:	f6 c2 02             	test   dl,0x2
c0001d5e:	74 08                	je     c0001d68 <dlmalloc_usable_size+0x1b>
c0001d60:	83 e2 fc             	and    edx,0xfffffffc
c0001d63:	8d 42 f8             	lea    eax,[edx-0x8]
c0001d66:	eb 14                	jmp    c0001d7c <dlmalloc_usable_size+0x2f>
c0001d68:	89 d3                	mov    ebx,edx
c0001d6a:	31 c0                	xor    eax,eax
c0001d6c:	83 e3 fe             	and    ebx,0xfffffffe
c0001d6f:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001d74:	74 06                	je     c0001d7c <dlmalloc_usable_size+0x2f>
c0001d76:	83 e2 fc             	and    edx,0xfffffffc
c0001d79:	8d 42 fc             	lea    eax,[edx-0x4]
c0001d7c:	5b                   	pop    ebx
c0001d7d:	c3                   	ret    

c0001d7e <dlmallinfo>:
c0001d7e:	55                   	push   ebp
c0001d7f:	57                   	push   edi
c0001d80:	56                   	push   esi
c0001d81:	53                   	push   ebx
c0001d82:	83 ec 08             	sub    esp,0x8
c0001d85:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001d89:	83 3d 0c 69 03 c0 00 	cmp    DWORD PTR ds:0xc003690c,0x0
c0001d90:	75 0a                	jne    c0001d9c <dlmallinfo+0x1e>
c0001d92:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001d97:	e8 86 f0 ff ff       	call   c0000e22 <malloc_consolidate>
c0001d9c:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c0001da1:	31 ed                	xor    ebp,ebp
c0001da3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001da6:	31 c9                	xor    ecx,ecx
c0001da8:	83 e0 fc             	and    eax,0xfffffffc
c0001dab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001daf:	31 c0                	xor    eax,eax
c0001db1:	8b 14 85 e4 68 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc971c]
c0001db8:	85 d2                	test   edx,edx
c0001dba:	74 0e                	je     c0001dca <dlmallinfo+0x4c>
c0001dbc:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001dbf:	45                   	inc    ebp
c0001dc0:	83 e6 fc             	and    esi,0xfffffffc
c0001dc3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001dc6:	01 f1                	add    ecx,esi
c0001dc8:	eb ee                	jmp    c0001db8 <dlmallinfo+0x3a>
c0001dca:	40                   	inc    eax
c0001dcb:	83 f8 0a             	cmp    eax,0xa
c0001dce:	75 e1                	jne    c0001db1 <dlmallinfo+0x33>
c0001dd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001dd4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ddb:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001dde:	b8 14 69 03 c0       	mov    eax,0xc0036914
c0001de3:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001de6:	39 f0                	cmp    eax,esi
c0001de8:	74 10                	je     c0001dfa <dlmallinfo+0x7c>
c0001dea:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ded:	ff 04 24             	inc    DWORD PTR [esp]
c0001df0:	83 e7 fc             	and    edi,0xfffffffc
c0001df3:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001df6:	01 fa                	add    edx,edi
c0001df8:	eb ec                	jmp    c0001de6 <dlmallinfo+0x68>
c0001dfa:	83 c0 08             	add    eax,0x8
c0001dfd:	3d 0c 6c 03 c0       	cmp    eax,0xc0036c0c
c0001e02:	75 df                	jne    c0001de3 <dlmallinfo+0x65>
c0001e04:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001e07:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001e0a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001e0d:	a1 48 6c 03 c0       	mov    eax,ds:0xc0036c48
c0001e12:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001e15:	89 03                	mov    DWORD PTR [ebx],eax
c0001e17:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001e1a:	8b 35 30 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c30
c0001e20:	29 d0                	sub    eax,edx
c0001e22:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001e25:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001e28:	8b 35 44 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c44
c0001e2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001e32:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001e35:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001e38:	8b 35 54 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c54
c0001e3e:	89 d8                	mov    eax,ebx
c0001e40:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001e43:	83 c4 08             	add    esp,0x8
c0001e46:	5b                   	pop    ebx
c0001e47:	5e                   	pop    esi
c0001e48:	5f                   	pop    edi
c0001e49:	5d                   	pop    ebp
c0001e4a:	c2 04 00             	ret    0x4

c0001e4d <dlmalloc_stats>:
c0001e4d:	83 ec 30             	sub    esp,0x30
c0001e50:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001e54:	50                   	push   eax
c0001e55:	e8 24 ff ff ff       	call   c0001d7e <dlmallinfo>
c0001e5a:	83 c4 30             	add    esp,0x30
c0001e5d:	c3                   	ret    

c0001e5e <dlmallopt>:
c0001e5e:	56                   	push   esi
c0001e5f:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001e64:	53                   	push   ebx
c0001e65:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001e69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001e6d:	e8 b0 ef ff ff       	call   c0000e22 <malloc_consolidate>
c0001e72:	8d 46 04             	lea    eax,[esi+0x4]
c0001e75:	83 f8 05             	cmp    eax,0x5
c0001e78:	77 5d                	ja     c0001ed7 <dlmallopt+0x79>
c0001e7a:	ff 24 85 a0 f7 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd0860]
c0001e81:	83 fb 50             	cmp    ebx,0x50
c0001e84:	77 51                	ja     c0001ed7 <dlmallopt+0x79>
c0001e86:	ba 08 00 00 00       	mov    edx,0x8
c0001e8b:	85 db                	test   ebx,ebx
c0001e8d:	74 12                	je     c0001ea1 <dlmallopt+0x43>
c0001e8f:	83 c3 0b             	add    ebx,0xb
c0001e92:	ba 10 00 00 00       	mov    edx,0x10
c0001e97:	83 fb 0f             	cmp    ebx,0xf
c0001e9a:	76 05                	jbe    c0001ea1 <dlmallopt+0x43>
c0001e9c:	89 da                	mov    edx,ebx
c0001e9e:	83 e2 f8             	and    edx,0xfffffff8
c0001ea1:	a1 e0 68 03 c0       	mov    eax,ds:0xc00368e0
c0001ea6:	83 e0 03             	and    eax,0x3
c0001ea9:	09 d0                	or     eax,edx
c0001eab:	a3 e0 68 03 c0       	mov    ds:0xc00368e0,eax
c0001eb0:	eb 27                	jmp    c0001ed9 <dlmallopt+0x7b>
c0001eb2:	89 1d 24 6c 03 c0    	mov    DWORD PTR ds:0xc0036c24,ebx
c0001eb8:	eb 16                	jmp    c0001ed0 <dlmallopt+0x72>
c0001eba:	89 1d 28 6c 03 c0    	mov    DWORD PTR ds:0xc0036c28,ebx
c0001ec0:	eb 0e                	jmp    c0001ed0 <dlmallopt+0x72>
c0001ec2:	89 1d 2c 6c 03 c0    	mov    DWORD PTR ds:0xc0036c2c,ebx
c0001ec8:	eb 06                	jmp    c0001ed0 <dlmallopt+0x72>
c0001eca:	89 1d 34 6c 03 c0    	mov    DWORD PTR ds:0xc0036c34,ebx
c0001ed0:	be 01 00 00 00       	mov    esi,0x1
c0001ed5:	eb 02                	jmp    c0001ed9 <dlmallopt+0x7b>
c0001ed7:	31 f6                	xor    esi,esi
c0001ed9:	89 f0                	mov    eax,esi
c0001edb:	5b                   	pop    ebx
c0001edc:	5e                   	pop    esi
c0001edd:	c3                   	ret    
c0001ede:	66 90                	xchg   ax,ax

c0001ee0 <isblank>:
c0001ee0:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ee5:	74 09                	je     c0001ef0 <isblank+0x10>
c0001ee7:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001eec:	75 0a                	jne    c0001ef8 <isblank+0x18>
c0001eee:	66 90                	xchg   ax,ax
c0001ef0:	b8 01 00 00 00       	mov    eax,0x1
c0001ef5:	c3                   	ret    
c0001ef6:	66 90                	xchg   ax,ax
c0001ef8:	b8 00 00 00 00       	mov    eax,0x0
c0001efd:	c3                   	ret    
c0001efe:	66 90                	xchg   ax,ax

c0001f00 <iscntrl>:
c0001f00:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001f05:	7e 09                	jle    c0001f10 <iscntrl+0x10>
c0001f07:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001f0c:	75 0a                	jne    c0001f18 <iscntrl+0x18>
c0001f0e:	66 90                	xchg   ax,ax
c0001f10:	b8 01 00 00 00       	mov    eax,0x1
c0001f15:	c3                   	ret    
c0001f16:	66 90                	xchg   ax,ax
c0001f18:	b8 00 00 00 00       	mov    eax,0x0
c0001f1d:	c3                   	ret    
c0001f1e:	66 90                	xchg   ax,ax

c0001f20 <isdigit>:
c0001f20:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001f25:	7e 0d                	jle    c0001f34 <isdigit+0x14>
c0001f27:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001f2c:	7f 06                	jg     c0001f34 <isdigit+0x14>
c0001f2e:	b8 01 00 00 00       	mov    eax,0x1
c0001f33:	c3                   	ret    
c0001f34:	b8 00 00 00 00       	mov    eax,0x0
c0001f39:	c3                   	ret    
c0001f3a:	66 90                	xchg   ax,ax

c0001f3c <islower>:
c0001f3c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f41:	7e 0d                	jle    c0001f50 <islower+0x14>
c0001f43:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001f48:	7f 06                	jg     c0001f50 <islower+0x14>
c0001f4a:	b8 01 00 00 00       	mov    eax,0x1
c0001f4f:	c3                   	ret    
c0001f50:	b8 00 00 00 00       	mov    eax,0x0
c0001f55:	c3                   	ret    
c0001f56:	66 90                	xchg   ax,ax

c0001f58 <isspace>:
c0001f58:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001f5d:	7c 19                	jl     c0001f78 <isspace+0x20>
c0001f5f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001f64:	7e 0a                	jle    c0001f70 <isspace+0x18>
c0001f66:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001f6b:	75 0b                	jne    c0001f78 <isspace+0x20>
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0001f70:	b8 01 00 00 00       	mov    eax,0x1
c0001f75:	c3                   	ret    
c0001f76:	66 90                	xchg   ax,ax
c0001f78:	b8 00 00 00 00       	mov    eax,0x0
c0001f7d:	c3                   	ret    
c0001f7e:	66 90                	xchg   ax,ax

c0001f80 <isupper>:
c0001f80:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f85:	7e 0d                	jle    c0001f94 <isupper+0x14>
c0001f87:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001f8c:	7f 06                	jg     c0001f94 <isupper+0x14>
c0001f8e:	b8 01 00 00 00       	mov    eax,0x1
c0001f93:	c3                   	ret    
c0001f94:	b8 00 00 00 00       	mov    eax,0x0
c0001f99:	c3                   	ret    
c0001f9a:	66 90                	xchg   ax,ax

c0001f9c <isalpha>:
c0001f9c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fa0:	e8 db ff ff ff       	call   c0001f80 <isupper>
c0001fa5:	83 c4 04             	add    esp,0x4
c0001fa8:	85 c0                	test   eax,eax
c0001faa:	75 10                	jne    c0001fbc <isalpha+0x20>
c0001fac:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fb0:	e8 87 ff ff ff       	call   c0001f3c <islower>
c0001fb5:	83 c4 04             	add    esp,0x4
c0001fb8:	85 c0                	test   eax,eax
c0001fba:	74 08                	je     c0001fc4 <isalpha+0x28>
c0001fbc:	b8 01 00 00 00       	mov    eax,0x1
c0001fc1:	c3                   	ret    
c0001fc2:	66 90                	xchg   ax,ax
c0001fc4:	b8 00 00 00 00       	mov    eax,0x0
c0001fc9:	c3                   	ret    
c0001fca:	66 90                	xchg   ax,ax

c0001fcc <isalnum>:
c0001fcc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fd0:	e8 c7 ff ff ff       	call   c0001f9c <isalpha>
c0001fd5:	83 c4 04             	add    esp,0x4
c0001fd8:	85 c0                	test   eax,eax
c0001fda:	75 10                	jne    c0001fec <isalnum+0x20>
c0001fdc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fe0:	e8 3b ff ff ff       	call   c0001f20 <isdigit>
c0001fe5:	83 c4 04             	add    esp,0x4
c0001fe8:	85 c0                	test   eax,eax
c0001fea:	74 08                	je     c0001ff4 <isalnum+0x28>
c0001fec:	b8 01 00 00 00       	mov    eax,0x1
c0001ff1:	c3                   	ret    
c0001ff2:	66 90                	xchg   ax,ax
c0001ff4:	b8 00 00 00 00       	mov    eax,0x0
c0001ff9:	c3                   	ret    
c0001ffa:	66 90                	xchg   ax,ax

c0001ffc <ispunct>:
c0001ffc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002000:	e8 c7 ff ff ff       	call   c0001fcc <isalnum>
c0002005:	83 c4 04             	add    esp,0x4
c0002008:	85 c0                	test   eax,eax
c000200a:	75 28                	jne    c0002034 <ispunct+0x38>
c000200c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002010:	e8 43 ff ff ff       	call   c0001f58 <isspace>
c0002015:	83 c4 04             	add    esp,0x4
c0002018:	85 c0                	test   eax,eax
c000201a:	75 18                	jne    c0002034 <ispunct+0x38>
c000201c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002020:	e8 db fe ff ff       	call   c0001f00 <iscntrl>
c0002025:	83 c4 04             	add    esp,0x4
c0002028:	85 c0                	test   eax,eax
c000202a:	75 08                	jne    c0002034 <ispunct+0x38>
c000202c:	b8 01 00 00 00       	mov    eax,0x1
c0002031:	c3                   	ret    
c0002032:	66 90                	xchg   ax,ax
c0002034:	b8 00 00 00 00       	mov    eax,0x0
c0002039:	c3                   	ret    
c000203a:	66 90                	xchg   ax,ax

c000203c <isgraph>:
c000203c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002040:	e8 87 ff ff ff       	call   c0001fcc <isalnum>
c0002045:	83 c4 04             	add    esp,0x4
c0002048:	85 c0                	test   eax,eax
c000204a:	75 10                	jne    c000205c <isgraph+0x20>
c000204c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002050:	e8 a7 ff ff ff       	call   c0001ffc <ispunct>
c0002055:	83 c4 04             	add    esp,0x4
c0002058:	85 c0                	test   eax,eax
c000205a:	74 08                	je     c0002064 <isgraph+0x28>
c000205c:	b8 01 00 00 00       	mov    eax,0x1
c0002061:	c3                   	ret    
c0002062:	66 90                	xchg   ax,ax
c0002064:	b8 00 00 00 00       	mov    eax,0x0
c0002069:	c3                   	ret    
c000206a:	66 90                	xchg   ax,ax

c000206c <isprint>:
c000206c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002070:	e8 c7 ff ff ff       	call   c000203c <isgraph>
c0002075:	83 c4 04             	add    esp,0x4
c0002078:	85 c0                	test   eax,eax
c000207a:	75 08                	jne    c0002084 <isprint+0x18>
c000207c:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0002081:	75 09                	jne    c000208c <isprint+0x20>
c0002083:	90                   	nop
c0002084:	b8 01 00 00 00       	mov    eax,0x1
c0002089:	c3                   	ret    
c000208a:	66 90                	xchg   ax,ax
c000208c:	b8 00 00 00 00       	mov    eax,0x0
c0002091:	c3                   	ret    
c0002092:	66 90                	xchg   ax,ax

c0002094 <isxdigit>:
c0002094:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002098:	e8 83 fe ff ff       	call   c0001f20 <isdigit>
c000209d:	83 c4 04             	add    esp,0x4
c00020a0:	85 c0                	test   eax,eax
c00020a2:	75 20                	jne    c00020c4 <isxdigit+0x30>
c00020a4:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c00020a9:	7e 09                	jle    c00020b4 <isxdigit+0x20>
c00020ab:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c00020b0:	7e 12                	jle    c00020c4 <isxdigit+0x30>
c00020b2:	66 90                	xchg   ax,ax
c00020b4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c00020b9:	7e 11                	jle    c00020cc <isxdigit+0x38>
c00020bb:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c00020c0:	7f 0a                	jg     c00020cc <isxdigit+0x38>
c00020c2:	66 90                	xchg   ax,ax
c00020c4:	b8 01 00 00 00       	mov    eax,0x1
c00020c9:	c3                   	ret    
c00020ca:	66 90                	xchg   ax,ax
c00020cc:	b8 00 00 00 00       	mov    eax,0x0
c00020d1:	c3                   	ret    

c00020d2 <disk_status>:
c00020d2:	31 c0                	xor    eax,eax
c00020d4:	c3                   	ret    

c00020d5 <disk_initialize>:
c00020d5:	31 c0                	xor    eax,eax
c00020d7:	c3                   	ret    

c00020d8 <disk_read>:
c00020d8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00020dd:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c00020e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020e9:	e9 36 6b 02 00       	jmp    c0028c24 <fatWrapperReadDisk>

c00020ee <disk_write>:
c00020ee:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00020f3:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c00020fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020ff:	e9 60 6b 02 00       	jmp    c0028c64 <fatWrapperWriteDisk>

c0002104 <disk_ioctl>:
c0002104:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002109:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000210d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0002112:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c000211a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000211e:	e9 81 6b 02 00       	jmp    c0028ca4 <fatWrapperIoctl>

c0002123 <ld_word>:
c0002123:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002127:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000212a:	c1 e2 08             	shl    edx,0x8
c000212d:	09 d0                	or     eax,edx
c000212f:	c3                   	ret    

c0002130 <ld_dword>:
c0002130:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002134:	89 d1                	mov    ecx,edx
c0002136:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c000213a:	c1 e1 08             	shl    ecx,0x8
c000213d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002140:	09 ca                	or     edx,ecx
c0002142:	c1 e2 08             	shl    edx,0x8
c0002145:	09 d0                	or     eax,edx
c0002147:	c3                   	ret    

c0002148 <st_word>:
c0002148:	66 89 10             	mov    WORD PTR [eax],dx
c000214b:	c3                   	ret    

c000214c <st_dword>:
c000214c:	89 10                	mov    DWORD PTR [eax],edx
c000214e:	c3                   	ret    

c000214f <mem_cpy>:
c000214f:	85 c9                	test   ecx,ecx
c0002151:	74 10                	je     c0002163 <mem_cpy+0x14>
c0002153:	57                   	push   edi
c0002154:	01 c1                	add    ecx,eax
c0002156:	56                   	push   esi
c0002157:	89 c7                	mov    edi,eax
c0002159:	89 d6                	mov    esi,edx
c000215b:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000215c:	39 f9                	cmp    ecx,edi
c000215e:	75 fb                	jne    c000215b <mem_cpy+0xc>
c0002160:	5e                   	pop    esi
c0002161:	5f                   	pop    edi
c0002162:	c3                   	ret    
c0002163:	c3                   	ret    

c0002164 <mem_set>:
c0002164:	01 c1                	add    ecx,eax
c0002166:	40                   	inc    eax
c0002167:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c000216a:	39 c8                	cmp    eax,ecx
c000216c:	75 f8                	jne    c0002166 <mem_set+0x2>
c000216e:	c3                   	ret    

c000216f <mem_cmp>:
c000216f:	57                   	push   edi
c0002170:	56                   	push   esi
c0002171:	89 c6                	mov    esi,eax
c0002173:	53                   	push   ebx
c0002174:	46                   	inc    esi
c0002175:	42                   	inc    edx
c0002176:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000217a:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000217e:	29 fb                	sub    ebx,edi
c0002180:	89 cf                	mov    edi,ecx
c0002182:	29 f7                	sub    edi,esi
c0002184:	01 c7                	add    edi,eax
c0002186:	74 04                	je     c000218c <mem_cmp+0x1d>
c0002188:	85 db                	test   ebx,ebx
c000218a:	74 e8                	je     c0002174 <mem_cmp+0x5>
c000218c:	89 d8                	mov    eax,ebx
c000218e:	5b                   	pop    ebx
c000218f:	5e                   	pop    esi
c0002190:	5f                   	pop    edi
c0002191:	c3                   	ret    

c0002192 <chk_chr>:
c0002192:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002195:	85 c9                	test   ecx,ecx
c0002197:	74 07                	je     c00021a0 <chk_chr+0xe>
c0002199:	39 d1                	cmp    ecx,edx
c000219b:	74 03                	je     c00021a0 <chk_chr+0xe>
c000219d:	40                   	inc    eax
c000219e:	eb f2                	jmp    c0002192 <chk_chr>
c00021a0:	89 c8                	mov    eax,ecx
c00021a2:	c3                   	ret    

c00021a3 <dbc_1st>:
c00021a3:	31 c0                	xor    eax,eax
c00021a5:	c3                   	ret    

c00021a6 <dbc_2nd>:
c00021a6:	31 c0                	xor    eax,eax
c00021a8:	c3                   	ret    

c00021a9 <tchar2uni>:
c00021a9:	57                   	push   edi
c00021aa:	56                   	push   esi
c00021ab:	53                   	push   ebx
c00021ac:	8b 18                	mov    ebx,DWORD PTR [eax]
c00021ae:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00021b0:	8d 73 01             	lea    esi,[ebx+0x1]
c00021b3:	f6 c1 80             	test   cl,0x80
c00021b6:	75 0a                	jne    c00021c2 <tchar2uni+0x19>
c00021b8:	0f b6 d1             	movzx  edx,cl
c00021bb:	89 f3                	mov    ebx,esi
c00021bd:	e9 b2 00 00 00       	jmp    c0002274 <tchar2uni+0xcb>
c00021c2:	89 ca                	mov    edx,ecx
c00021c4:	81 e2 e0 00 00 00    	and    edx,0xe0
c00021ca:	81 fa c0 00 00 00    	cmp    edx,0xc0
c00021d0:	89 ca                	mov    edx,ecx
c00021d2:	75 0a                	jne    c00021de <tchar2uni+0x35>
c00021d4:	83 e2 1f             	and    edx,0x1f
c00021d7:	b9 01 00 00 00       	mov    ecx,0x1
c00021dc:	eb 37                	jmp    c0002215 <tchar2uni+0x6c>
c00021de:	81 e2 f0 00 00 00    	and    edx,0xf0
c00021e4:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00021ea:	75 0c                	jne    c00021f8 <tchar2uni+0x4f>
c00021ec:	89 ca                	mov    edx,ecx
c00021ee:	b9 02 00 00 00       	mov    ecx,0x2
c00021f3:	83 e2 0f             	and    edx,0xf
c00021f6:	eb 1d                	jmp    c0002215 <tchar2uni+0x6c>
c00021f8:	89 cf                	mov    edi,ecx
c00021fa:	83 ca ff             	or     edx,0xffffffff
c00021fd:	81 e7 f8 00 00 00    	and    edi,0xf8
c0002203:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0002209:	75 70                	jne    c000227b <tchar2uni+0xd2>
c000220b:	89 ca                	mov    edx,ecx
c000220d:	b9 03 00 00 00       	mov    ecx,0x3
c0002212:	83 e2 07             	and    edx,0x7
c0002215:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0002219:	46                   	inc    esi
c000221a:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c000221d:	89 cf                	mov    edi,ecx
c000221f:	81 e7 c0 00 00 00    	and    edi,0xc0
c0002225:	83 c7 80             	add    edi,0xffffff80
c0002228:	75 4e                	jne    c0002278 <tchar2uni+0xcf>
c000222a:	c1 e2 06             	shl    edx,0x6
c000222d:	83 e1 3f             	and    ecx,0x3f
c0002230:	09 ca                	or     edx,ecx
c0002232:	39 de                	cmp    esi,ebx
c0002234:	75 e3                	jne    c0002219 <tchar2uni+0x70>
c0002236:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002239:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c000223f:	77 37                	ja     c0002278 <tchar2uni+0xcf>
c0002241:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002247:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000224d:	76 29                	jbe    c0002278 <tchar2uni+0xcf>
c000224f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002255:	76 1d                	jbe    c0002274 <tchar2uni+0xcb>
c0002257:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c000225d:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002263:	c1 e1 06             	shl    ecx,0x6
c0002266:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c000226c:	09 ca                	or     edx,ecx
c000226e:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002274:	89 18                	mov    DWORD PTR [eax],ebx
c0002276:	eb 03                	jmp    c000227b <tchar2uni+0xd2>
c0002278:	83 ca ff             	or     edx,0xffffffff
c000227b:	5b                   	pop    ebx
c000227c:	89 d0                	mov    eax,edx
c000227e:	5e                   	pop    esi
c000227f:	5f                   	pop    edi
c0002280:	c3                   	ret    

c0002281 <put_utf>:
c0002281:	53                   	push   ebx
c0002282:	83 f8 7f             	cmp    eax,0x7f
c0002285:	89 c3                	mov    ebx,eax
c0002287:	b0 00                	mov    al,0x0
c0002289:	77 11                	ja     c000229c <put_utf+0x1b>
c000228b:	85 c9                	test   ecx,ecx
c000228d:	0f 84 e5 00 00 00    	je     c0002378 <put_utf+0xf7>
c0002293:	88 1a                	mov    BYTE PTR [edx],bl
c0002295:	b0 01                	mov    al,0x1
c0002297:	e9 dc 00 00 00       	jmp    c0002378 <put_utf+0xf7>
c000229c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00022a2:	77 23                	ja     c00022c7 <put_utf+0x46>
c00022a4:	83 f9 01             	cmp    ecx,0x1
c00022a7:	0f 86 cb 00 00 00    	jbe    c0002378 <put_utf+0xf7>
c00022ad:	89 d8                	mov    eax,ebx
c00022af:	83 e3 3f             	and    ebx,0x3f
c00022b2:	c1 e8 06             	shr    eax,0x6
c00022b5:	83 cb 80             	or     ebx,0xffffff80
c00022b8:	83 c8 c0             	or     eax,0xffffffc0
c00022bb:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00022be:	88 02                	mov    BYTE PTR [edx],al
c00022c0:	b0 02                	mov    al,0x2
c00022c2:	e9 b1 00 00 00       	jmp    c0002378 <put_utf+0xf7>
c00022c7:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c00022cd:	77 40                	ja     c000230f <put_utf+0x8e>
c00022cf:	83 f9 02             	cmp    ecx,0x2
c00022d2:	0f 86 a0 00 00 00    	jbe    c0002378 <put_utf+0xf7>
c00022d8:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00022de:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00022e4:	0f 86 8e 00 00 00    	jbe    c0002378 <put_utf+0xf7>
c00022ea:	89 d8                	mov    eax,ebx
c00022ec:	c1 e8 0c             	shr    eax,0xc
c00022ef:	83 c8 e0             	or     eax,0xffffffe0
c00022f2:	88 02                	mov    BYTE PTR [edx],al
c00022f4:	89 d8                	mov    eax,ebx
c00022f6:	83 e3 3f             	and    ebx,0x3f
c00022f9:	c1 e8 06             	shr    eax,0x6
c00022fc:	83 cb 80             	or     ebx,0xffffff80
c00022ff:	83 e0 3f             	and    eax,0x3f
c0002302:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0002305:	83 c8 80             	or     eax,0xffffff80
c0002308:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000230b:	b0 03                	mov    al,0x3
c000230d:	eb 69                	jmp    c0002378 <put_utf+0xf7>
c000230f:	83 f9 03             	cmp    ecx,0x3
c0002312:	76 64                	jbe    c0002378 <put_utf+0xf7>
c0002314:	89 d9                	mov    ecx,ebx
c0002316:	0f b7 c3             	movzx  eax,bx
c0002319:	66 31 c9             	xor    cx,cx
c000231c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0002322:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002328:	c1 e9 06             	shr    ecx,0x6
c000232b:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002331:	77 43                	ja     c0002376 <put_utf+0xf5>
c0002333:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0002339:	77 3b                	ja     c0002376 <put_utf+0xf5>
c000233b:	09 cb                	or     ebx,ecx
c000233d:	81 c3 00 00 01 00    	add    ebx,0x10000
c0002343:	89 d8                	mov    eax,ebx
c0002345:	c1 e8 12             	shr    eax,0x12
c0002348:	83 c8 f0             	or     eax,0xfffffff0
c000234b:	88 02                	mov    BYTE PTR [edx],al
c000234d:	89 d8                	mov    eax,ebx
c000234f:	c1 e8 0c             	shr    eax,0xc
c0002352:	83 e0 3f             	and    eax,0x3f
c0002355:	83 c8 80             	or     eax,0xffffff80
c0002358:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000235b:	89 d8                	mov    eax,ebx
c000235d:	83 e3 3f             	and    ebx,0x3f
c0002360:	c1 e8 06             	shr    eax,0x6
c0002363:	83 cb 80             	or     ebx,0xffffff80
c0002366:	83 e0 3f             	and    eax,0x3f
c0002369:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c000236c:	83 c8 80             	or     eax,0xffffff80
c000236f:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002372:	b0 04                	mov    al,0x4
c0002374:	eb 02                	jmp    c0002378 <put_utf+0xf7>
c0002376:	31 c0                	xor    eax,eax
c0002378:	5b                   	pop    ebx
c0002379:	c3                   	ret    

c000237a <clst2sect>:
c000237a:	8d 4a fe             	lea    ecx,[edx-0x2]
c000237d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002380:	83 ea 02             	sub    edx,0x2
c0002383:	39 ca                	cmp    edx,ecx
c0002385:	76 0d                	jbe    c0002394 <clst2sect+0x1a>
c0002387:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000238b:	0f af d1             	imul   edx,ecx
c000238e:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002391:	89 d0                	mov    eax,edx
c0002393:	c3                   	ret    
c0002394:	31 c0                	xor    eax,eax
c0002396:	c3                   	ret    

c0002397 <pick_lfn>:
c0002397:	55                   	push   ebp
c0002398:	57                   	push   edi
c0002399:	89 c7                	mov    edi,eax
c000239b:	56                   	push   esi
c000239c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000239f:	53                   	push   ebx
c00023a0:	89 d3                	mov    ebx,edx
c00023a2:	e8 7c fd ff ff       	call   c0002123 <ld_word>
c00023a7:	66 85 c0             	test   ax,ax
c00023aa:	74 04                	je     c00023b0 <pick_lfn+0x19>
c00023ac:	31 c0                	xor    eax,eax
c00023ae:	eb 62                	jmp    c0002412 <pick_lfn+0x7b>
c00023b0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00023b3:	bd 01 00 00 00       	mov    ebp,0x1
c00023b8:	83 e1 bf             	and    ecx,0xffffffbf
c00023bb:	31 f6                	xor    esi,esi
c00023bd:	49                   	dec    ecx
c00023be:	6b c9 0d             	imul   ecx,ecx,0xd
c00023c1:	0f b6 86 00 f9 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd0700]
c00023c8:	01 d8                	add    eax,ebx
c00023ca:	e8 54 fd ff ff       	call   c0002123 <ld_word>
c00023cf:	66 85 ed             	test   bp,bp
c00023d2:	74 11                	je     c00023e5 <pick_lfn+0x4e>
c00023d4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00023da:	77 d0                	ja     c00023ac <pick_lfn+0x15>
c00023dc:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00023e0:	89 c5                	mov    ebp,eax
c00023e2:	41                   	inc    ecx
c00023e3:	eb 0a                	jmp    c00023ef <pick_lfn+0x58>
c00023e5:	0f b7 c0             	movzx  eax,ax
c00023e8:	3d ff ff 00 00       	cmp    eax,0xffff
c00023ed:	75 bd                	jne    c00023ac <pick_lfn+0x15>
c00023ef:	46                   	inc    esi
c00023f0:	83 fe 0d             	cmp    esi,0xd
c00023f3:	75 cc                	jne    c00023c1 <pick_lfn+0x2a>
c00023f5:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00023f8:	74 13                	je     c000240d <pick_lfn+0x76>
c00023fa:	66 85 ed             	test   bp,bp
c00023fd:	74 0e                	je     c000240d <pick_lfn+0x76>
c00023ff:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002405:	77 a5                	ja     c00023ac <pick_lfn+0x15>
c0002407:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c000240d:	b8 01 00 00 00       	mov    eax,0x1
c0002412:	5b                   	pop    ebx
c0002413:	5e                   	pop    esi
c0002414:	5f                   	pop    edi
c0002415:	5d                   	pop    ebp
c0002416:	c3                   	ret    

c0002417 <put_lfn>:
c0002417:	55                   	push   ebp
c0002418:	57                   	push   edi
c0002419:	89 d7                	mov    edi,edx
c000241b:	56                   	push   esi
c000241c:	31 f6                	xor    esi,esi
c000241e:	53                   	push   ebx
c000241f:	83 ec 0c             	sub    esp,0xc
c0002422:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002426:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000242a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000242e:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002434:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002437:	8d 42 1a             	lea    eax,[edx+0x1a]
c000243a:	31 d2                	xor    edx,edx
c000243c:	e8 07 fd ff ff       	call   c0002148 <st_word>
c0002441:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002448:	0f b6 d9             	movzx  ebx,cl
c000244b:	4b                   	dec    ebx
c000244c:	6b db 0d             	imul   ebx,ebx,0xd
c000244f:	0f b7 c6             	movzx  eax,si
c0002452:	3d ff ff 00 00       	cmp    eax,0xffff
c0002457:	74 09                	je     c0002462 <put_lfn+0x4b>
c0002459:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000245d:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002461:	43                   	inc    ebx
c0002462:	0f b7 ee             	movzx  ebp,si
c0002465:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002468:	89 ea                	mov    edx,ebp
c000246a:	0f b6 80 00 f9 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0700]
c0002471:	01 f8                	add    eax,edi
c0002473:	e8 d0 fc ff ff       	call   c0002148 <st_word>
c0002478:	85 ed                	test   ebp,ebp
c000247a:	75 05                	jne    c0002481 <put_lfn+0x6a>
c000247c:	be ff ff 00 00       	mov    esi,0xffff
c0002481:	ff 04 24             	inc    DWORD PTR [esp]
c0002484:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002488:	75 c5                	jne    c000244f <put_lfn+0x38>
c000248a:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002490:	74 0b                	je     c000249d <put_lfn+0x86>
c0002492:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002496:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000249b:	75 07                	jne    c00024a4 <put_lfn+0x8d>
c000249d:	83 c9 40             	or     ecx,0x40
c00024a0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00024a4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00024a8:	88 07                	mov    BYTE PTR [edi],al
c00024aa:	83 c4 0c             	add    esp,0xc
c00024ad:	5b                   	pop    ebx
c00024ae:	5e                   	pop    esi
c00024af:	5f                   	pop    edi
c00024b0:	5d                   	pop    ebp
c00024b1:	c3                   	ret    

c00024b2 <gen_numname>:
c00024b2:	57                   	push   edi
c00024b3:	89 cf                	mov    edi,ecx
c00024b5:	56                   	push   esi
c00024b6:	b9 0b 00 00 00       	mov    ecx,0xb
c00024bb:	53                   	push   ebx
c00024bc:	89 c6                	mov    esi,eax
c00024be:	83 ec 10             	sub    esp,0x10
c00024c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00024c5:	e8 85 fc ff ff       	call   c000214f <mem_cpy>
c00024ca:	83 fb 05             	cmp    ebx,0x5
c00024cd:	76 30                	jbe    c00024ff <gen_numname+0x4d>
c00024cf:	66 8b 07             	mov    ax,WORD PTR [edi]
c00024d2:	66 85 c0             	test   ax,ax
c00024d5:	74 28                	je     c00024ff <gen_numname+0x4d>
c00024d7:	83 c7 02             	add    edi,0x2
c00024da:	ba 10 00 00 00       	mov    edx,0x10
c00024df:	01 db                	add    ebx,ebx
c00024e1:	89 c1                	mov    ecx,eax
c00024e3:	c1 e0 10             	shl    eax,0x10
c00024e6:	83 e1 01             	and    ecx,0x1
c00024e9:	c1 e8 11             	shr    eax,0x11
c00024ec:	01 cb                	add    ebx,ecx
c00024ee:	0f ba e3 10          	bt     ebx,0x10
c00024f2:	73 06                	jae    c00024fa <gen_numname+0x48>
c00024f4:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00024fa:	4a                   	dec    edx
c00024fb:	75 e2                	jne    c00024df <gen_numname+0x2d>
c00024fd:	eb d0                	jmp    c00024cf <gen_numname+0x1d>
c00024ff:	b8 07 00 00 00       	mov    eax,0x7
c0002504:	89 d9                	mov    ecx,ebx
c0002506:	83 e1 0f             	and    ecx,0xf
c0002509:	8d 79 30             	lea    edi,[ecx+0x30]
c000250c:	89 fa                	mov    edx,edi
c000250e:	83 ff 39             	cmp    edi,0x39
c0002511:	76 03                	jbe    c0002516 <gen_numname+0x64>
c0002513:	8d 51 37             	lea    edx,[ecx+0x37]
c0002516:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002519:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000251d:	89 da                	mov    edx,ebx
c000251f:	c1 ea 04             	shr    edx,0x4
c0002522:	83 fb 0f             	cmp    ebx,0xf
c0002525:	76 06                	jbe    c000252d <gen_numname+0x7b>
c0002527:	89 c8                	mov    eax,ecx
c0002529:	89 d3                	mov    ebx,edx
c000252b:	eb d7                	jmp    c0002504 <gen_numname+0x52>
c000252d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0002532:	31 d2                	xor    edx,edx
c0002534:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002537:	8d 04 16             	lea    eax,[esi+edx*1]
c000253a:	39 ca                	cmp    edx,ecx
c000253c:	73 19                	jae    c0002557 <gen_numname+0xa5>
c000253e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002541:	83 f8 20             	cmp    eax,0x20
c0002544:	74 11                	je     c0002557 <gen_numname+0xa5>
c0002546:	e8 58 fc ff ff       	call   c00021a3 <dbc_1st>
c000254b:	85 c0                	test   eax,eax
c000254d:	74 05                	je     c0002554 <gen_numname+0xa2>
c000254f:	39 d3                	cmp    ebx,edx
c0002551:	74 04                	je     c0002557 <gen_numname+0xa5>
c0002553:	42                   	inc    edx
c0002554:	42                   	inc    edx
c0002555:	eb e0                	jmp    c0002537 <gen_numname+0x85>
c0002557:	b0 20                	mov    al,0x20
c0002559:	83 f9 07             	cmp    ecx,0x7
c000255c:	77 05                	ja     c0002563 <gen_numname+0xb1>
c000255e:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002562:	41                   	inc    ecx
c0002563:	42                   	inc    edx
c0002564:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002568:	83 fa 07             	cmp    edx,0x7
c000256b:	76 ea                	jbe    c0002557 <gen_numname+0xa5>
c000256d:	83 c4 10             	add    esp,0x10
c0002570:	5b                   	pop    ebx
c0002571:	5e                   	pop    esi
c0002572:	5f                   	pop    edi
c0002573:	c3                   	ret    

c0002574 <sum_sfn>:
c0002574:	53                   	push   ebx
c0002575:	31 c9                	xor    ecx,ecx
c0002577:	31 db                	xor    ebx,ebx
c0002579:	0f b6 d1             	movzx  edx,cl
c000257c:	c1 e1 07             	shl    ecx,0x7
c000257f:	d1 ea                	shr    edx,1
c0002581:	09 ca                	or     edx,ecx
c0002583:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002586:	43                   	inc    ebx
c0002587:	01 ca                	add    edx,ecx
c0002589:	83 fb 0b             	cmp    ebx,0xb
c000258c:	88 d1                	mov    cl,dl
c000258e:	75 e9                	jne    c0002579 <sum_sfn+0x5>
c0002590:	88 d0                	mov    al,dl
c0002592:	5b                   	pop    ebx
c0002593:	c3                   	ret    

c0002594 <get_ldnumber>:
c0002594:	8b 10                	mov    edx,DWORD PTR [eax]
c0002596:	85 d2                	test   edx,edx
c0002598:	74 14                	je     c00025ae <get_ldnumber+0x1a>
c000259a:	56                   	push   esi
c000259b:	53                   	push   ebx
c000259c:	89 d3                	mov    ebx,edx
c000259e:	43                   	inc    ebx
c000259f:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c00025a2:	80 f9 1f             	cmp    cl,0x1f
c00025a5:	76 0d                	jbe    c00025b4 <get_ldnumber+0x20>
c00025a7:	80 f9 3a             	cmp    cl,0x3a
c00025aa:	75 f2                	jne    c000259e <get_ldnumber+0xa>
c00025ac:	eb 0a                	jmp    c00025b8 <get_ldnumber+0x24>
c00025ae:	83 c9 ff             	or     ecx,0xffffffff
c00025b1:	89 c8                	mov    eax,ecx
c00025b3:	c3                   	ret    
c00025b4:	31 c9                	xor    ecx,ecx
c00025b6:	eb 24                	jmp    c00025dc <get_ldnumber+0x48>
c00025b8:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c00025bb:	8d 4e d0             	lea    ecx,[esi-0x30]
c00025be:	80 f9 09             	cmp    cl,0x9
c00025c1:	77 16                	ja     c00025d9 <get_ldnumber+0x45>
c00025c3:	83 c2 02             	add    edx,0x2
c00025c6:	83 c9 ff             	or     ecx,0xffffffff
c00025c9:	39 d3                	cmp    ebx,edx
c00025cb:	75 0f                	jne    c00025dc <get_ldnumber+0x48>
c00025cd:	89 f2                	mov    edx,esi
c00025cf:	89 18                	mov    DWORD PTR [eax],ebx
c00025d1:	0f be ca             	movsx  ecx,dl
c00025d4:	83 e9 30             	sub    ecx,0x30
c00025d7:	eb 03                	jmp    c00025dc <get_ldnumber+0x48>
c00025d9:	83 c9 ff             	or     ecx,0xffffffff
c00025dc:	89 c8                	mov    eax,ecx
c00025de:	5b                   	pop    ebx
c00025df:	5e                   	pop    esi
c00025e0:	c3                   	ret    

c00025e1 <validate>:
c00025e1:	56                   	push   esi
c00025e2:	53                   	push   ebx
c00025e3:	89 d6                	mov    esi,edx
c00025e5:	51                   	push   ecx
c00025e6:	85 c0                	test   eax,eax
c00025e8:	75 09                	jne    c00025f3 <validate+0x12>
c00025ea:	b8 09 00 00 00       	mov    eax,0x9
c00025ef:	31 c9                	xor    ecx,ecx
c00025f1:	eb 2e                	jmp    c0002621 <validate+0x40>
c00025f3:	89 c3                	mov    ebx,eax
c00025f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00025f7:	85 c0                	test   eax,eax
c00025f9:	74 ef                	je     c00025ea <validate+0x9>
c00025fb:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00025fe:	74 ea                	je     c00025ea <validate+0x9>
c0002600:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0002603:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c0002607:	75 e1                	jne    c00025ea <validate+0x9>
c0002609:	83 ec 0c             	sub    esp,0xc
c000260c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002610:	50                   	push   eax
c0002611:	e8 bc fa ff ff       	call   c00020d2 <disk_status>
c0002616:	83 c4 10             	add    esp,0x10
c0002619:	a8 01                	test   al,0x1
c000261b:	75 cd                	jne    c00025ea <validate+0x9>
c000261d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000261f:	31 c0                	xor    eax,eax
c0002621:	89 0e                	mov    DWORD PTR [esi],ecx
c0002623:	5a                   	pop    edx
c0002624:	5b                   	pop    ebx
c0002625:	5e                   	pop    esi
c0002626:	c3                   	ret    

c0002627 <sync_window>:
c0002627:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000262b:	74 58                	je     c0002685 <sync_window+0x5e>
c000262d:	56                   	push   esi
c000262e:	53                   	push   ebx
c000262f:	8d 70 34             	lea    esi,[eax+0x34]
c0002632:	51                   	push   ecx
c0002633:	89 c3                	mov    ebx,eax
c0002635:	6a 01                	push   0x1
c0002637:	ff 70 30             	push   DWORD PTR [eax+0x30]
c000263a:	56                   	push   esi
c000263b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000263f:	50                   	push   eax
c0002640:	e8 a9 fa ff ff       	call   c00020ee <disk_write>
c0002645:	83 c4 10             	add    esp,0x10
c0002648:	ba 01 00 00 00       	mov    edx,0x1
c000264d:	85 c0                	test   eax,eax
c000264f:	75 2e                	jne    c000267f <sync_window+0x58>
c0002651:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002654:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002657:	89 c1                	mov    ecx,eax
c0002659:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000265d:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002660:	39 d1                	cmp    ecx,edx
c0002662:	73 19                	jae    c000267d <sync_window+0x56>
c0002664:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002668:	75 13                	jne    c000267d <sync_window+0x56>
c000266a:	6a 01                	push   0x1
c000266c:	01 d0                	add    eax,edx
c000266e:	50                   	push   eax
c000266f:	56                   	push   esi
c0002670:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002674:	50                   	push   eax
c0002675:	e8 74 fa ff ff       	call   c00020ee <disk_write>
c000267a:	83 c4 10             	add    esp,0x10
c000267d:	31 d2                	xor    edx,edx
c000267f:	89 d0                	mov    eax,edx
c0002681:	5a                   	pop    edx
c0002682:	5b                   	pop    ebx
c0002683:	5e                   	pop    esi
c0002684:	c3                   	ret    
c0002685:	31 d2                	xor    edx,edx
c0002687:	89 d0                	mov    eax,edx
c0002689:	c3                   	ret    

c000268a <move_window>:
c000268a:	57                   	push   edi
c000268b:	56                   	push   esi
c000268c:	31 f6                	xor    esi,esi
c000268e:	53                   	push   ebx
c000268f:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002692:	74 32                	je     c00026c6 <move_window+0x3c>
c0002694:	89 c3                	mov    ebx,eax
c0002696:	89 d7                	mov    edi,edx
c0002698:	e8 8a ff ff ff       	call   c0002627 <sync_window>
c000269d:	89 c6                	mov    esi,eax
c000269f:	85 c0                	test   eax,eax
c00026a1:	75 23                	jne    c00026c6 <move_window+0x3c>
c00026a3:	6a 01                	push   0x1
c00026a5:	8d 43 34             	lea    eax,[ebx+0x34]
c00026a8:	57                   	push   edi
c00026a9:	50                   	push   eax
c00026aa:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00026ae:	50                   	push   eax
c00026af:	e8 24 fa ff ff       	call   c00020d8 <disk_read>
c00026b4:	83 c4 10             	add    esp,0x10
c00026b7:	85 c0                	test   eax,eax
c00026b9:	74 08                	je     c00026c3 <move_window+0x39>
c00026bb:	be 01 00 00 00       	mov    esi,0x1
c00026c0:	83 cf ff             	or     edi,0xffffffff
c00026c3:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00026c6:	89 f0                	mov    eax,esi
c00026c8:	5b                   	pop    ebx
c00026c9:	5e                   	pop    esi
c00026ca:	5f                   	pop    edi
c00026cb:	c3                   	ret    

c00026cc <check_fs>:
c00026cc:	53                   	push   ebx
c00026cd:	89 c3                	mov    ebx,eax
c00026cf:	83 ec 08             	sub    esp,0x8
c00026d2:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00026d6:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00026dd:	e8 a8 ff ff ff       	call   c000268a <move_window>
c00026e2:	ba 04 00 00 00       	mov    edx,0x4
c00026e7:	85 c0                	test   eax,eax
c00026e9:	75 68                	jne    c0002753 <check_fs+0x87>
c00026eb:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00026f1:	e8 2d fa ff ff       	call   c0002123 <ld_word>
c00026f6:	ba 03 00 00 00       	mov    edx,0x3
c00026fb:	66 3d 55 aa          	cmp    ax,0xaa55
c00026ff:	75 52                	jne    c0002753 <check_fs+0x87>
c0002701:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c0002704:	8d 50 18             	lea    edx,[eax+0x18]
c0002707:	80 fa 01             	cmp    dl,0x1
c000270a:	76 09                	jbe    c0002715 <check_fs+0x49>
c000270c:	ba 02 00 00 00       	mov    edx,0x2
c0002711:	3c eb                	cmp    al,0xeb
c0002713:	75 3e                	jne    c0002753 <check_fs+0x87>
c0002715:	ba 60 36 03 c0       	mov    edx,0xc0033660
c000271a:	8d 43 6a             	lea    eax,[ebx+0x6a]
c000271d:	b9 03 00 00 00       	mov    ecx,0x3
c0002722:	e8 48 fa ff ff       	call   c000216f <mem_cmp>
c0002727:	31 d2                	xor    edx,edx
c0002729:	85 c0                	test   eax,eax
c000272b:	74 26                	je     c0002753 <check_fs+0x87>
c000272d:	ba b8 f7 02 c0       	mov    edx,0xc002f7b8
c0002732:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002738:	b9 05 00 00 00       	mov    ecx,0x5
c000273d:	e8 2d fa ff ff       	call   c000216f <mem_cmp>
c0002742:	31 d2                	xor    edx,edx
c0002744:	85 c0                	test   eax,eax
c0002746:	74 0b                	je     c0002753 <check_fs+0x87>
c0002748:	31 d2                	xor    edx,edx
c000274a:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000274e:	0f 95 c2             	setne  dl
c0002751:	01 d2                	add    edx,edx
c0002753:	89 d0                	mov    eax,edx
c0002755:	83 c4 08             	add    esp,0x8
c0002758:	5b                   	pop    ebx
c0002759:	c3                   	ret    

c000275a <find_volume>:
c000275a:	55                   	push   ebp
c000275b:	57                   	push   edi
c000275c:	56                   	push   esi
c000275d:	89 c6                	mov    esi,eax
c000275f:	53                   	push   ebx
c0002760:	89 d3                	mov    ebx,edx
c0002762:	83 ec 2c             	sub    esp,0x2c
c0002765:	31 d2                	xor    edx,edx
c0002767:	e8 60 ff ff ff       	call   c00026cc <check_fs>
c000276c:	83 f8 02             	cmp    eax,0x2
c000276f:	74 06                	je     c0002777 <find_volume+0x1d>
c0002771:	77 62                	ja     c00027d5 <find_volume+0x7b>
c0002773:	85 db                	test   ebx,ebx
c0002775:	74 5e                	je     c00027d5 <find_volume+0x7b>
c0002777:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000277b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002781:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002787:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000278b:	89 cf                	mov    edi,ecx
c000278d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002791:	89 e8                	mov    eax,ebp
c0002793:	83 c5 10             	add    ebp,0x10
c0002796:	e8 95 f9 ff ff       	call   c0002130 <ld_dword>
c000279b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000279f:	89 01                	mov    DWORD PTR [ecx],eax
c00027a1:	83 c1 04             	add    ecx,0x4
c00027a4:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00027a8:	75 e3                	jne    c000278d <find_volume+0x33>
c00027aa:	31 ed                	xor    ebp,ebp
c00027ac:	85 db                	test   ebx,ebx
c00027ae:	74 03                	je     c00027b3 <find_volume+0x59>
c00027b0:	8d 6b ff             	lea    ebp,[ebx-0x1]
c00027b3:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c00027b6:	b8 03 00 00 00       	mov    eax,0x3
c00027bb:	85 d2                	test   edx,edx
c00027bd:	74 0c                	je     c00027cb <find_volume+0x71>
c00027bf:	89 f0                	mov    eax,esi
c00027c1:	e8 06 ff ff ff       	call   c00026cc <check_fs>
c00027c6:	83 f8 01             	cmp    eax,0x1
c00027c9:	76 0a                	jbe    c00027d5 <find_volume+0x7b>
c00027cb:	85 db                	test   ebx,ebx
c00027cd:	75 06                	jne    c00027d5 <find_volume+0x7b>
c00027cf:	45                   	inc    ebp
c00027d0:	83 fd 03             	cmp    ebp,0x3
c00027d3:	76 de                	jbe    c00027b3 <find_volume+0x59>
c00027d5:	83 c4 2c             	add    esp,0x2c
c00027d8:	5b                   	pop    ebx
c00027d9:	5e                   	pop    esi
c00027da:	5f                   	pop    edi
c00027db:	5d                   	pop    ebp
c00027dc:	c3                   	ret    

c00027dd <mount_volume>:
c00027dd:	55                   	push   ebp
c00027de:	89 d5                	mov    ebp,edx
c00027e0:	57                   	push   edi
c00027e1:	89 cf                	mov    edi,ecx
c00027e3:	56                   	push   esi
c00027e4:	53                   	push   ebx
c00027e5:	bb 0b 00 00 00       	mov    ebx,0xb
c00027ea:	83 ec 1c             	sub    esp,0x1c
c00027ed:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00027f3:	e8 9c fd ff ff       	call   c0002594 <get_ldnumber>
c00027f8:	85 c0                	test   eax,eax
c00027fa:	0f 88 c4 02 00 00    	js     c0002ac4 <mount_volume+0x2e7>
c0002800:	8b 34 85 80 6c 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9380]
c0002807:	89 c2                	mov    edx,eax
c0002809:	bb 0c 00 00 00       	mov    ebx,0xc
c000280e:	85 f6                	test   esi,esi
c0002810:	0f 84 ae 02 00 00    	je     c0002ac4 <mount_volume+0x2e7>
c0002816:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002819:	83 e7 fe             	and    edi,0xfffffffe
c000281c:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000281f:	74 3a                	je     c000285b <mount_volume+0x7e>
c0002821:	89 04 24             	mov    DWORD PTR [esp],eax
c0002824:	83 ec 0c             	sub    esp,0xc
c0002827:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000282b:	50                   	push   eax
c000282c:	e8 a1 f8 ff ff       	call   c00020d2 <disk_status>
c0002831:	83 c4 10             	add    esp,0x10
c0002834:	a8 01                	test   al,0x1
c0002836:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0002839:	75 20                	jne    c000285b <mount_volume+0x7e>
c000283b:	31 db                	xor    ebx,ebx
c000283d:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002843:	0f 84 7b 02 00 00    	je     c0002ac4 <mount_volume+0x2e7>
c0002849:	a8 04                	test   al,0x4
c000284b:	0f 84 73 02 00 00    	je     c0002ac4 <mount_volume+0x2e7>
c0002851:	bb 0a 00 00 00       	mov    ebx,0xa
c0002856:	e9 69 02 00 00       	jmp    c0002ac4 <mount_volume+0x2e7>
c000285b:	83 ec 0c             	sub    esp,0xc
c000285e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002861:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002864:	0f b6 c2             	movzx  eax,dl
c0002867:	bb 03 00 00 00       	mov    ebx,0x3
c000286c:	50                   	push   eax
c000286d:	e8 63 f8 ff ff       	call   c00020d5 <disk_initialize>
c0002872:	83 c4 10             	add    esp,0x10
c0002875:	a8 01                	test   al,0x1
c0002877:	0f 85 47 02 00 00    	jne    c0002ac4 <mount_volume+0x2e7>
c000287d:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002883:	74 04                	je     c0002889 <mount_volume+0xac>
c0002885:	a8 04                	test   al,0x4
c0002887:	75 c8                	jne    c0002851 <mount_volume+0x74>
c0002889:	31 d2                	xor    edx,edx
c000288b:	89 f0                	mov    eax,esi
c000288d:	bb 01 00 00 00       	mov    ebx,0x1
c0002892:	e8 c3 fe ff ff       	call   c000275a <find_volume>
c0002897:	83 f8 04             	cmp    eax,0x4
c000289a:	0f 84 24 02 00 00    	je     c0002ac4 <mount_volume+0x2e7>
c00028a0:	83 f8 01             	cmp    eax,0x1
c00028a3:	76 0a                	jbe    c00028af <mount_volume+0xd2>
c00028a5:	bb 0d 00 00 00       	mov    ebx,0xd
c00028aa:	e9 15 02 00 00       	jmp    c0002ac4 <mount_volume+0x2e7>
c00028af:	8d 46 3f             	lea    eax,[esi+0x3f]
c00028b2:	e8 6c f8 ff ff       	call   c0002123 <ld_word>
c00028b7:	66 3d 00 02          	cmp    ax,0x200
c00028bb:	75 e8                	jne    c00028a5 <mount_volume+0xc8>
c00028bd:	8d 46 4a             	lea    eax,[esi+0x4a]
c00028c0:	e8 5e f8 ff ff       	call   c0002123 <ld_word>
c00028c5:	0f b7 c0             	movzx  eax,ax
c00028c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00028cb:	85 c0                	test   eax,eax
c00028cd:	75 0b                	jne    c00028da <mount_volume+0xfd>
c00028cf:	8d 46 58             	lea    eax,[esi+0x58]
c00028d2:	e8 59 f8 ff ff       	call   c0002130 <ld_dword>
c00028d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00028da:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00028dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00028e1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00028e4:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00028e7:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c00028ea:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00028ee:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00028f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028f5:	48                   	dec    eax
c00028f6:	3c 01                	cmp    al,0x1
c00028f8:	77 ab                	ja     c00028a5 <mount_volume+0xc8>
c00028fa:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00028fe:	89 c3                	mov    ebx,eax
c0002900:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c0002904:	66 85 c0             	test   ax,ax
c0002907:	74 9c                	je     c00028a5 <mount_volume+0xc8>
c0002909:	8d 40 ff             	lea    eax,[eax-0x1]
c000290c:	85 d8                	test   eax,ebx
c000290e:	75 95                	jne    c00028a5 <mount_volume+0xc8>
c0002910:	8d 46 45             	lea    eax,[esi+0x45]
c0002913:	e8 0b f8 ff ff       	call   c0002123 <ld_word>
c0002918:	89 c7                	mov    edi,eax
c000291a:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c000291e:	a8 0f                	test   al,0xf
c0002920:	75 83                	jne    c00028a5 <mount_volume+0xc8>
c0002922:	8d 46 47             	lea    eax,[esi+0x47]
c0002925:	e8 f9 f7 ff ff       	call   c0002123 <ld_word>
c000292a:	0f b7 e8             	movzx  ebp,ax
c000292d:	85 ed                	test   ebp,ebp
c000292f:	75 0a                	jne    c000293b <mount_volume+0x15e>
c0002931:	8d 46 54             	lea    eax,[esi+0x54]
c0002934:	e8 f7 f7 ff ff       	call   c0002130 <ld_dword>
c0002939:	89 c5                	mov    ebp,eax
c000293b:	8d 46 42             	lea    eax,[esi+0x42]
c000293e:	e8 e0 f7 ff ff       	call   c0002123 <ld_word>
c0002943:	0f b7 c8             	movzx  ecx,ax
c0002946:	85 c9                	test   ecx,ecx
c0002948:	0f 84 57 ff ff ff    	je     c00028a5 <mount_volume+0xc8>
c000294e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002953:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c0002957:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295b:	0f b7 c7             	movzx  eax,di
c000295e:	c1 e8 04             	shr    eax,0x4
c0002961:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002965:	01 c8                	add    eax,ecx
c0002967:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000296b:	39 c5                	cmp    ebp,eax
c000296d:	0f 82 32 ff ff ff    	jb     c00028a5 <mount_volume+0xc8>
c0002973:	29 c5                	sub    ebp,eax
c0002975:	31 d2                	xor    edx,edx
c0002977:	89 e8                	mov    eax,ebp
c0002979:	f7 f3                	div    ebx
c000297b:	39 dd                	cmp    ebp,ebx
c000297d:	0f 82 22 ff ff ff    	jb     c00028a5 <mount_volume+0xc8>
c0002983:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002988:	0f 87 17 ff ff ff    	ja     c00028a5 <mount_volume+0xc8>
c000298e:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002993:	0f 86 1c 01 00 00    	jbe    c0002ab5 <mount_volume+0x2d8>
c0002999:	bb 03 00 00 00       	mov    ebx,0x3
c000299e:	8d 68 02             	lea    ebp,[eax+0x2]
c00029a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00029a9:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c00029ad:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00029b0:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00029b3:	01 c8                	add    eax,ecx
c00029b5:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00029b8:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00029bb:	83 fb 03             	cmp    ebx,0x3
c00029be:	75 23                	jne    c00029e3 <mount_volume+0x206>
c00029c0:	8d 46 5e             	lea    eax,[esi+0x5e]
c00029c3:	e8 5b f7 ff ff       	call   c0002123 <ld_word>
c00029c8:	09 c7                	or     edi,eax
c00029ca:	66 85 ff             	test   di,di
c00029cd:	0f 85 d2 fe ff ff    	jne    c00028a5 <mount_volume+0xc8>
c00029d3:	8d 46 60             	lea    eax,[esi+0x60]
c00029d6:	c1 e5 02             	shl    ebp,0x2
c00029d9:	e8 52 f7 ff ff       	call   c0002130 <ld_dword>
c00029de:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00029e1:	eb 24                	jmp    c0002a07 <mount_volume+0x22a>
c00029e3:	66 85 ff             	test   di,di
c00029e6:	0f 84 b9 fe ff ff    	je     c00028a5 <mount_volume+0xc8>
c00029ec:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00029f0:	83 fb 02             	cmp    ebx,0x2
c00029f3:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00029f6:	75 04                	jne    c00029fc <mount_volume+0x21f>
c00029f8:	01 ed                	add    ebp,ebp
c00029fa:	eb 0b                	jmp    c0002a07 <mount_volume+0x22a>
c00029fc:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c0002a00:	83 e5 01             	and    ebp,0x1
c0002a03:	d1 e8                	shr    eax,1
c0002a05:	01 c5                	add    ebp,eax
c0002a07:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c0002a0d:	c1 ed 09             	shr    ebp,0x9
c0002a10:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0002a13:	0f 87 8c fe ff ff    	ja     c00028a5 <mount_volume+0xc8>
c0002a19:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002a20:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002a27:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002a2b:	83 fb 03             	cmp    ebx,0x3
c0002a2e:	75 6e                	jne    c0002a9e <mount_volume+0x2c1>
c0002a30:	8d 46 64             	lea    eax,[esi+0x64]
c0002a33:	e8 eb f6 ff ff       	call   c0002123 <ld_word>
c0002a38:	66 48                	dec    ax
c0002a3a:	75 62                	jne    c0002a9e <mount_volume+0x2c1>
c0002a3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0002a40:	89 f0                	mov    eax,esi
c0002a42:	42                   	inc    edx
c0002a43:	e8 42 fc ff ff       	call   c000268a <move_window>
c0002a48:	85 c0                	test   eax,eax
c0002a4a:	75 52                	jne    c0002a9e <mount_volume+0x2c1>
c0002a4c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002a50:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002a56:	e8 c8 f6 ff ff       	call   c0002123 <ld_word>
c0002a5b:	66 3d 55 aa          	cmp    ax,0xaa55
c0002a5f:	75 3d                	jne    c0002a9e <mount_volume+0x2c1>
c0002a61:	8d 46 34             	lea    eax,[esi+0x34]
c0002a64:	e8 c7 f6 ff ff       	call   c0002130 <ld_dword>
c0002a69:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a6e:	75 2e                	jne    c0002a9e <mount_volume+0x2c1>
c0002a70:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002a76:	e8 b5 f6 ff ff       	call   c0002130 <ld_dword>
c0002a7b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a80:	75 1c                	jne    c0002a9e <mount_volume+0x2c1>
c0002a82:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002a88:	e8 a3 f6 ff ff       	call   c0002130 <ld_dword>
c0002a8d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002a90:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002a96:	e8 95 f6 ff ff       	call   c0002130 <ld_dword>
c0002a9b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002a9e:	66 a1 60 6c 03 c0    	mov    ax,ds:0xc0036c60
c0002aa4:	88 1e                	mov    BYTE PTR [esi],bl
c0002aa6:	40                   	inc    eax
c0002aa7:	31 db                	xor    ebx,ebx
c0002aa9:	66 a3 60 6c 03 c0    	mov    ds:0xc0036c60,ax
c0002aaf:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002ab3:	eb 0f                	jmp    c0002ac4 <mount_volume+0x2e7>
c0002ab5:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002aba:	19 db                	sbb    ebx,ebx
c0002abc:	83 c3 02             	add    ebx,0x2
c0002abf:	e9 da fe ff ff       	jmp    c000299e <mount_volume+0x1c1>
c0002ac4:	83 c4 1c             	add    esp,0x1c
c0002ac7:	89 d8                	mov    eax,ebx
c0002ac9:	5b                   	pop    ebx
c0002aca:	5e                   	pop    esi
c0002acb:	5f                   	pop    edi
c0002acc:	5d                   	pop    ebp
c0002acd:	c3                   	ret    

c0002ace <put_fat>:
c0002ace:	55                   	push   ebp
c0002acf:	bd 02 00 00 00       	mov    ebp,0x2
c0002ad4:	57                   	push   edi
c0002ad5:	56                   	push   esi
c0002ad6:	53                   	push   ebx
c0002ad7:	83 ec 1c             	sub    esp,0x1c
c0002ada:	83 fa 01             	cmp    edx,0x1
c0002add:	0f 86 38 01 00 00    	jbe    c0002c1b <put_fat+0x14d>
c0002ae3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002ae6:	0f 86 2f 01 00 00    	jbe    c0002c1b <put_fat+0x14d>
c0002aec:	89 c6                	mov    esi,eax
c0002aee:	89 cf                	mov    edi,ecx
c0002af0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002af3:	89 d3                	mov    ebx,edx
c0002af5:	83 f8 02             	cmp    eax,0x2
c0002af8:	0f 84 b1 00 00 00    	je     c0002baf <put_fat+0xe1>
c0002afe:	83 f8 03             	cmp    eax,0x3
c0002b01:	0f 84 d5 00 00 00    	je     c0002bdc <put_fat+0x10e>
c0002b07:	48                   	dec    eax
c0002b08:	0f 85 0d 01 00 00    	jne    c0002c1b <put_fat+0x14d>
c0002b0e:	89 d1                	mov    ecx,edx
c0002b10:	89 f0                	mov    eax,esi
c0002b12:	d1 e9                	shr    ecx,1
c0002b14:	01 d1                	add    ecx,edx
c0002b16:	89 ca                	mov    edx,ecx
c0002b18:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b1c:	c1 ea 09             	shr    edx,0x9
c0002b1f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002b22:	e8 63 fb ff ff       	call   c000268a <move_window>
c0002b27:	89 c5                	mov    ebp,eax
c0002b29:	85 c0                	test   eax,eax
c0002b2b:	0f 85 ea 00 00 00    	jne    c0002c1b <put_fat+0x14d>
c0002b31:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002b35:	8d 46 34             	lea    eax,[esi+0x34]
c0002b38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b3c:	8d 41 01             	lea    eax,[ecx+0x1]
c0002b3f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002b45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b49:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b4d:	89 f8                	mov    eax,edi
c0002b4f:	83 e3 01             	and    ebx,0x1
c0002b52:	74 11                	je     c0002b65 <put_fat+0x97>
c0002b54:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002b56:	89 f8                	mov    eax,edi
c0002b58:	83 e2 0f             	and    edx,0xf
c0002b5b:	c1 e0 04             	shl    eax,0x4
c0002b5e:	25 f0 0f 00 00       	and    eax,0xff0
c0002b63:	09 d0                	or     eax,edx
c0002b65:	88 01                	mov    BYTE PTR [ecx],al
c0002b67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b6b:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b6f:	c1 ea 09             	shr    edx,0x9
c0002b72:	89 f0                	mov    eax,esi
c0002b74:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002b77:	e8 0e fb ff ff       	call   c000268a <move_window>
c0002b7c:	89 c5                	mov    ebp,eax
c0002b7e:	85 c0                	test   eax,eax
c0002b80:	0f 85 95 00 00 00    	jne    c0002c1b <put_fat+0x14d>
c0002b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b8a:	25 ff 01 00 00       	and    eax,0x1ff
c0002b8f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b93:	85 db                	test   ebx,ebx
c0002b95:	74 07                	je     c0002b9e <put_fat+0xd0>
c0002b97:	c1 ef 04             	shr    edi,0x4
c0002b9a:	89 f9                	mov    ecx,edi
c0002b9c:	eb 0d                	jmp    c0002bab <put_fat+0xdd>
c0002b9e:	8a 08                	mov    cl,BYTE PTR [eax]
c0002ba0:	c1 ef 08             	shr    edi,0x8
c0002ba3:	83 e1 f0             	and    ecx,0xfffffff0
c0002ba6:	83 e7 0f             	and    edi,0xf
c0002ba9:	09 f9                	or     ecx,edi
c0002bab:	88 08                	mov    BYTE PTR [eax],cl
c0002bad:	eb 27                	jmp    c0002bd6 <put_fat+0x108>
c0002baf:	c1 ea 08             	shr    edx,0x8
c0002bb2:	89 f0                	mov    eax,esi
c0002bb4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002bb7:	e8 ce fa ff ff       	call   c000268a <move_window>
c0002bbc:	89 c5                	mov    ebp,eax
c0002bbe:	85 c0                	test   eax,eax
c0002bc0:	75 59                	jne    c0002c1b <put_fat+0x14d>
c0002bc2:	01 db                	add    ebx,ebx
c0002bc4:	0f b7 d7             	movzx  edx,di
c0002bc7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002bcd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002bd1:	e8 72 f5 ff ff       	call   c0002148 <st_word>
c0002bd6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bda:	eb 3f                	jmp    c0002c1b <put_fat+0x14d>
c0002bdc:	c1 ea 07             	shr    edx,0x7
c0002bdf:	89 f0                	mov    eax,esi
c0002be1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002be4:	e8 a1 fa ff ff       	call   c000268a <move_window>
c0002be9:	89 c5                	mov    ebp,eax
c0002beb:	85 c0                	test   eax,eax
c0002bed:	75 2c                	jne    c0002c1b <put_fat+0x14d>
c0002bef:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002bf5:	c1 e3 02             	shl    ebx,0x2
c0002bf8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002bfe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002c02:	89 d8                	mov    eax,ebx
c0002c04:	e8 27 f5 ff ff       	call   c0002130 <ld_dword>
c0002c09:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c0e:	09 f8                	or     eax,edi
c0002c10:	89 c2                	mov    edx,eax
c0002c12:	89 d8                	mov    eax,ebx
c0002c14:	e8 33 f5 ff ff       	call   c000214c <st_dword>
c0002c19:	eb bb                	jmp    c0002bd6 <put_fat+0x108>
c0002c1b:	83 c4 1c             	add    esp,0x1c
c0002c1e:	89 e8                	mov    eax,ebp
c0002c20:	5b                   	pop    ebx
c0002c21:	5e                   	pop    esi
c0002c22:	5f                   	pop    edi
c0002c23:	5d                   	pop    ebp
c0002c24:	c3                   	ret    

c0002c25 <dir_clear>:
c0002c25:	55                   	push   ebp
c0002c26:	57                   	push   edi
c0002c27:	56                   	push   esi
c0002c28:	89 c6                	mov    esi,eax
c0002c2a:	53                   	push   ebx
c0002c2b:	83 ec 1c             	sub    esp,0x1c
c0002c2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002c32:	e8 f0 f9 ff ff       	call   c0002627 <sync_window>
c0002c37:	85 c0                	test   eax,eax
c0002c39:	0f 85 c0 00 00 00    	jne    c0002cff <dir_clear+0xda>
c0002c3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c43:	89 f0                	mov    eax,esi
c0002c45:	e8 30 f7 ff ff       	call   c000237a <clst2sect>
c0002c4a:	31 d2                	xor    edx,edx
c0002c4c:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002c4f:	89 c5                	mov    ebp,eax
c0002c51:	b9 00 02 00 00       	mov    ecx,0x200
c0002c56:	8d 46 34             	lea    eax,[esi+0x34]
c0002c59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c5d:	e8 02 f5 ff ff       	call   c0002164 <mem_set>
c0002c62:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002c66:	c1 e3 09             	shl    ebx,0x9
c0002c69:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002c6f:	76 1b                	jbe    c0002c8c <dir_clear+0x67>
c0002c71:	bb 00 80 00 00       	mov    ebx,0x8000
c0002c76:	eb 14                	jmp    c0002c8c <dir_clear+0x67>
c0002c78:	83 ec 0c             	sub    esp,0xc
c0002c7b:	53                   	push   ebx
c0002c7c:	e8 eb 32 00 00       	call   c0005f6c <ff_memalloc>
c0002c81:	83 c4 10             	add    esp,0x10
c0002c84:	89 c7                	mov    edi,eax
c0002c86:	85 c0                	test   eax,eax
c0002c88:	75 7c                	jne    c0002d06 <dir_clear+0xe1>
c0002c8a:	d1 eb                	shr    ebx,1
c0002c8c:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002c92:	77 e4                	ja     c0002c78 <dir_clear+0x53>
c0002c94:	31 db                	xor    ebx,ebx
c0002c96:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002c9a:	39 d8                	cmp    eax,ebx
c0002c9c:	76 53                	jbe    c0002cf1 <dir_clear+0xcc>
c0002c9e:	6a 01                	push   0x1
c0002ca0:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ca3:	50                   	push   eax
c0002ca4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002ca8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002cac:	50                   	push   eax
c0002cad:	e8 3c f4 ff ff       	call   c00020ee <disk_write>
c0002cb2:	83 c4 10             	add    esp,0x10
c0002cb5:	85 c0                	test   eax,eax
c0002cb7:	75 38                	jne    c0002cf1 <dir_clear+0xcc>
c0002cb9:	43                   	inc    ebx
c0002cba:	eb da                	jmp    c0002c96 <dir_clear+0x71>
c0002cbc:	52                   	push   edx
c0002cbd:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002cc0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002cc4:	50                   	push   eax
c0002cc5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002cc9:	57                   	push   edi
c0002cca:	50                   	push   eax
c0002ccb:	e8 1e f4 ff ff       	call   c00020ee <disk_write>
c0002cd0:	83 c4 10             	add    esp,0x10
c0002cd3:	85 c0                	test   eax,eax
c0002cd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002cd9:	75 0a                	jne    c0002ce5 <dir_clear+0xc0>
c0002cdb:	01 d3                	add    ebx,edx
c0002cdd:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002ce1:	39 d8                	cmp    eax,ebx
c0002ce3:	77 d7                	ja     c0002cbc <dir_clear+0x97>
c0002ce5:	83 ec 0c             	sub    esp,0xc
c0002ce8:	57                   	push   edi
c0002ce9:	e8 96 32 00 00       	call   c0005f84 <ff_memfree>
c0002cee:	83 c4 10             	add    esp,0x10
c0002cf1:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002cf5:	39 d8                	cmp    eax,ebx
c0002cf7:	0f 95 c0             	setne  al
c0002cfa:	0f b6 c0             	movzx  eax,al
c0002cfd:	eb 19                	jmp    c0002d18 <dir_clear+0xf3>
c0002cff:	b8 01 00 00 00       	mov    eax,0x1
c0002d04:	eb 12                	jmp    c0002d18 <dir_clear+0xf3>
c0002d06:	89 d9                	mov    ecx,ebx
c0002d08:	31 d2                	xor    edx,edx
c0002d0a:	e8 55 f4 ff ff       	call   c0002164 <mem_set>
c0002d0f:	89 da                	mov    edx,ebx
c0002d11:	31 db                	xor    ebx,ebx
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	eb c5                	jmp    c0002cdd <dir_clear+0xb8>
c0002d18:	83 c4 1c             	add    esp,0x1c
c0002d1b:	5b                   	pop    ebx
c0002d1c:	5e                   	pop    esi
c0002d1d:	5f                   	pop    edi
c0002d1e:	5d                   	pop    ebp
c0002d1f:	c3                   	ret    

c0002d20 <create_name>:
c0002d20:	55                   	push   ebp
c0002d21:	57                   	push   edi
c0002d22:	89 d7                	mov    edi,edx
c0002d24:	56                   	push   esi
c0002d25:	31 f6                	xor    esi,esi
c0002d27:	53                   	push   ebx
c0002d28:	83 ec 3c             	sub    esp,0x3c
c0002d2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d2f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002d31:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002d39:	8b 00                	mov    eax,DWORD PTR [eax]
c0002d3b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002d3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d42:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002d46:	e8 5e f4 ff ff       	call   c00021a9 <tchar2uni>
c0002d4b:	89 c3                	mov    ebx,eax
c0002d4d:	83 f8 ff             	cmp    eax,0xffffffff
c0002d50:	75 0a                	jne    c0002d5c <create_name+0x3c>
c0002d52:	b8 06 00 00 00       	mov    eax,0x6
c0002d57:	e9 93 02 00 00       	jmp    c0002fef <create_name+0x2cf>
c0002d5c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002d61:	76 0c                	jbe    c0002d6f <create_name+0x4f>
c0002d63:	c1 e8 10             	shr    eax,0x10
c0002d66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d6a:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002d6e:	46                   	inc    esi
c0002d6f:	0f b7 d3             	movzx  edx,bx
c0002d72:	83 fa 1f             	cmp    edx,0x1f
c0002d75:	76 4a                	jbe    c0002dc1 <create_name+0xa1>
c0002d77:	83 fa 5c             	cmp    edx,0x5c
c0002d7a:	74 30                	je     c0002dac <create_name+0x8c>
c0002d7c:	83 fa 2f             	cmp    edx,0x2f
c0002d7f:	74 2b                	je     c0002dac <create_name+0x8c>
c0002d81:	83 fa 7f             	cmp    edx,0x7f
c0002d84:	77 0e                	ja     c0002d94 <create_name+0x74>
c0002d86:	b8 be f7 02 c0       	mov    eax,0xc002f7be
c0002d8b:	e8 02 f4 ff ff       	call   c0002192 <chk_chr>
c0002d90:	85 c0                	test   eax,eax
c0002d92:	75 be                	jne    c0002d52 <create_name+0x32>
c0002d94:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002d9a:	77 b6                	ja     c0002d52 <create_name+0x32>
c0002d9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002da0:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002da4:	46                   	inc    esi
c0002da5:	eb 9b                	jmp    c0002d42 <create_name+0x22>
c0002da7:	40                   	inc    eax
c0002da8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002dac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002db0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002db3:	83 fa 2f             	cmp    edx,0x2f
c0002db6:	74 ef                	je     c0002da7 <create_name+0x87>
c0002db8:	83 fa 5c             	cmp    edx,0x5c
c0002dbb:	74 ea                	je     c0002da7 <create_name+0x87>
c0002dbd:	31 db                	xor    ebx,ebx
c0002dbf:	eb 02                	jmp    c0002dc3 <create_name+0xa3>
c0002dc1:	b3 04                	mov    bl,0x4
c0002dc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002dc7:	89 07                	mov    DWORD PTR [edi],eax
c0002dc9:	85 f6                	test   esi,esi
c0002dcb:	74 16                	je     c0002de3 <create_name+0xc3>
c0002dcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002dd1:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002dd6:	83 f8 20             	cmp    eax,0x20
c0002dd9:	74 05                	je     c0002de0 <create_name+0xc0>
c0002ddb:	83 f8 2e             	cmp    eax,0x2e
c0002dde:	75 03                	jne    c0002de3 <create_name+0xc3>
c0002de0:	4e                   	dec    esi
c0002de1:	eb e6                	jmp    c0002dc9 <create_name+0xa9>
c0002de3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002de7:	31 ff                	xor    edi,edi
c0002de9:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002def:	85 f6                	test   esi,esi
c0002df1:	0f 84 5b ff ff ff    	je     c0002d52 <create_name+0x32>
c0002df7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002dfb:	8d 57 01             	lea    edx,[edi+0x1]
c0002dfe:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002e02:	83 f8 20             	cmp    eax,0x20
c0002e05:	75 04                	jne    c0002e0b <create_name+0xeb>
c0002e07:	89 d7                	mov    edi,edx
c0002e09:	eb ec                	jmp    c0002df7 <create_name+0xd7>
c0002e0b:	85 ff                	test   edi,edi
c0002e0d:	75 05                	jne    c0002e14 <create_name+0xf4>
c0002e0f:	83 f8 2e             	cmp    eax,0x2e
c0002e12:	75 08                	jne    c0002e1c <create_name+0xfc>
c0002e14:	83 cb 03             	or     ebx,0x3
c0002e17:	eb 03                	jmp    c0002e1c <create_name+0xfc>
c0002e19:	4e                   	dec    esi
c0002e1a:	74 0c                	je     c0002e28 <create_name+0x108>
c0002e1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e20:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002e26:	75 f1                	jne    c0002e19 <create_name+0xf9>
c0002e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002e31:	83 c0 20             	add    eax,0x20
c0002e34:	ba 20 00 00 00       	mov    edx,0x20
c0002e39:	31 ed                	xor    ebp,ebp
c0002e3b:	e8 24 f3 ff ff       	call   c0002164 <mem_set>
c0002e40:	b9 08 00 00 00       	mov    ecx,0x8
c0002e45:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002e4a:	8d 47 01             	lea    eax,[edi+0x1]
c0002e4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002e51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e55:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002e59:	89 c7                	mov    edi,eax
c0002e5b:	85 c0                	test   eax,eax
c0002e5d:	0f 84 25 01 00 00    	je     c0002f88 <create_name+0x268>
c0002e63:	83 f8 20             	cmp    eax,0x20
c0002e66:	74 0f                	je     c0002e77 <create_name+0x157>
c0002e68:	83 f8 2e             	cmp    eax,0x2e
c0002e6b:	75 13                	jne    c0002e80 <create_name+0x160>
c0002e6d:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002e71:	0f 84 6a 01 00 00    	je     c0002fe1 <create_name+0x2c1>
c0002e77:	83 cb 03             	or     ebx,0x3
c0002e7a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002e7e:	eb ca                	jmp    c0002e4a <create_name+0x12a>
c0002e80:	39 cd                	cmp    ebp,ecx
c0002e82:	73 0b                	jae    c0002e8f <create_name+0x16f>
c0002e84:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002e88:	75 3f                	jne    c0002ec9 <create_name+0x1a9>
c0002e8a:	e9 52 01 00 00       	jmp    c0002fe1 <create_name+0x2c1>
c0002e8f:	83 f9 0b             	cmp    ecx,0xb
c0002e92:	75 0d                	jne    c0002ea1 <create_name+0x181>
c0002e94:	83 cb 03             	or     ebx,0x3
c0002e97:	b9 0b 00 00 00       	mov    ecx,0xb
c0002e9c:	e9 e7 00 00 00       	jmp    c0002f88 <create_name+0x268>
c0002ea1:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002ea5:	74 0d                	je     c0002eb4 <create_name+0x194>
c0002ea7:	83 cb 03             	or     ebx,0x3
c0002eaa:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002eae:	0f 87 d4 00 00 00    	ja     c0002f88 <create_name+0x268>
c0002eb4:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002eb9:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002ebd:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ec2:	bd 08 00 00 00       	mov    ebp,0x8
c0002ec7:	eb b1                	jmp    c0002e7a <create_name+0x15a>
c0002ec9:	83 f8 7f             	cmp    eax,0x7f
c0002ecc:	76 66                	jbe    c0002f34 <create_name+0x214>
c0002ece:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002ed2:	89 d9                	mov    ecx,ebx
c0002ed4:	83 c9 02             	or     ecx,0x2
c0002ed7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002edb:	52                   	push   edx
c0002edc:	52                   	push   edx
c0002edd:	68 b5 01 00 00       	push   0x1b5
c0002ee2:	50                   	push   eax
c0002ee3:	e8 b4 30 00 00       	call   c0005f9c <ff_uni2oem>
c0002ee8:	83 c4 10             	add    esp,0x10
c0002eeb:	89 c7                	mov    edi,eax
c0002eed:	a8 80                	test   al,0x80
c0002eef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ef3:	74 0c                	je     c0002f01 <create_name+0x1e1>
c0002ef5:	83 e7 7f             	and    edi,0x7f
c0002ef8:	0f b6 bf 80 f8 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd0780]
c0002eff:	eb 2a                	jmp    c0002f2b <create_name+0x20b>
c0002f01:	0f b7 c0             	movzx  eax,ax
c0002f04:	3d ff 00 00 00       	cmp    eax,0xff
c0002f09:	76 20                	jbe    c0002f2b <create_name+0x20b>
c0002f0b:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002f0e:	39 ea                	cmp    edx,ebp
c0002f10:	77 0a                	ja     c0002f1c <create_name+0x1fc>
c0002f12:	83 cb 03             	or     ebx,0x3
c0002f15:	89 cd                	mov    ebp,ecx
c0002f17:	e9 5e ff ff ff       	jmp    c0002e7a <create_name+0x15a>
c0002f1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002f20:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002f24:	45                   	inc    ebp
c0002f25:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002f29:	eb 4d                	jmp    c0002f78 <create_name+0x258>
c0002f2b:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002f2f:	66 85 ff             	test   di,di
c0002f32:	74 19                	je     c0002f4d <create_name+0x22d>
c0002f34:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002f38:	0f b7 d7             	movzx  edx,di
c0002f3b:	b8 c7 f7 02 c0       	mov    eax,0xc002f7c7
c0002f40:	e8 4d f2 ff ff       	call   c0002192 <chk_chr>
c0002f45:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002f49:	85 c0                	test   eax,eax
c0002f4b:	74 0a                	je     c0002f57 <create_name+0x237>
c0002f4d:	83 cb 03             	or     ebx,0x3
c0002f50:	bf 5f 00 00 00       	mov    edi,0x5f
c0002f55:	eb 21                	jmp    c0002f78 <create_name+0x258>
c0002f57:	8d 47 bf             	lea    eax,[edi-0x41]
c0002f5a:	66 83 f8 19          	cmp    ax,0x19
c0002f5e:	77 07                	ja     c0002f67 <create_name+0x247>
c0002f60:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002f65:	eb 11                	jmp    c0002f78 <create_name+0x258>
c0002f67:	8d 47 9f             	lea    eax,[edi-0x61]
c0002f6a:	66 83 f8 19          	cmp    ax,0x19
c0002f6e:	77 08                	ja     c0002f78 <create_name+0x258>
c0002f70:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002f75:	83 ef 20             	sub    edi,0x20
c0002f78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002f7c:	89 f8                	mov    eax,edi
c0002f7e:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002f82:	45                   	inc    ebp
c0002f83:	e9 f2 fe ff ff       	jmp    c0002e7a <create_name+0x15a>
c0002f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002f8c:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002f90:	75 04                	jne    c0002f96 <create_name+0x276>
c0002f92:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002f96:	83 f9 08             	cmp    ecx,0x8
c0002f99:	75 05                	jne    c0002fa0 <create_name+0x280>
c0002f9b:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002fa0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002fa4:	83 e0 0c             	and    eax,0xc
c0002fa7:	83 f8 0c             	cmp    eax,0xc
c0002faa:	74 0c                	je     c0002fb8 <create_name+0x298>
c0002fac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002fb0:	83 e0 03             	and    eax,0x3
c0002fb3:	83 f8 03             	cmp    eax,0x3
c0002fb6:	75 05                	jne    c0002fbd <create_name+0x29d>
c0002fb8:	83 cb 02             	or     ebx,0x2
c0002fbb:	eb 19                	jmp    c0002fd6 <create_name+0x2b6>
c0002fbd:	f6 c3 02             	test   bl,0x2
c0002fc0:	75 14                	jne    c0002fd6 <create_name+0x2b6>
c0002fc2:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002fc7:	74 03                	je     c0002fcc <create_name+0x2ac>
c0002fc9:	83 cb 10             	or     ebx,0x10
c0002fcc:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002fd1:	74 03                	je     c0002fd6 <create_name+0x2b6>
c0002fd3:	83 cb 08             	or     ebx,0x8
c0002fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002fda:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002fdd:	31 c0                	xor    eax,eax
c0002fdf:	eb 0e                	jmp    c0002fef <create_name+0x2cf>
c0002fe1:	83 f9 0b             	cmp    ecx,0xb
c0002fe4:	0f 85 ca fe ff ff    	jne    c0002eb4 <create_name+0x194>
c0002fea:	e9 a5 fe ff ff       	jmp    c0002e94 <create_name+0x174>
c0002fef:	83 c4 3c             	add    esp,0x3c
c0002ff2:	5b                   	pop    ebx
c0002ff3:	5e                   	pop    esi
c0002ff4:	5f                   	pop    edi
c0002ff5:	5d                   	pop    ebp
c0002ff6:	c3                   	ret    

c0002ff7 <cmp_lfn>:
c0002ff7:	55                   	push   ebp
c0002ff8:	57                   	push   edi
c0002ff9:	89 d7                	mov    edi,edx
c0002ffb:	56                   	push   esi
c0002ffc:	53                   	push   ebx
c0002ffd:	83 ec 1c             	sub    esp,0x1c
c0003000:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003004:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003007:	e8 17 f1 ff ff       	call   c0002123 <ld_word>
c000300c:	66 85 c0             	test   ax,ax
c000300f:	74 07                	je     c0003018 <cmp_lfn+0x21>
c0003011:	31 c0                	xor    eax,eax
c0003013:	e9 a1 00 00 00       	jmp    c00030b9 <cmp_lfn+0xc2>
c0003018:	8a 1f                	mov    bl,BYTE PTR [edi]
c000301a:	bd 01 00 00 00       	mov    ebp,0x1
c000301f:	83 e3 3f             	and    ebx,0x3f
c0003022:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000302a:	4b                   	dec    ebx
c000302b:	6b db 0d             	imul   ebx,ebx,0xd
c000302e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003032:	0f b6 80 00 f9 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0700]
c0003039:	01 f8                	add    eax,edi
c000303b:	e8 e3 f0 ff ff       	call   c0002123 <ld_word>
c0003040:	66 85 ed             	test   bp,bp
c0003043:	89 c6                	mov    esi,eax
c0003045:	74 3c                	je     c0003083 <cmp_lfn+0x8c>
c0003047:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000304d:	77 c2                	ja     c0003011 <cmp_lfn+0x1a>
c000304f:	83 ec 0c             	sub    esp,0xc
c0003052:	0f b7 c0             	movzx  eax,ax
c0003055:	50                   	push   eax
c0003056:	e8 59 30 00 00       	call   c00060b4 <ff_wtoupper>
c000305b:	89 c5                	mov    ebp,eax
c000305d:	8d 43 01             	lea    eax,[ebx+0x1]
c0003060:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003064:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003068:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000306c:	89 04 24             	mov    DWORD PTR [esp],eax
c000306f:	e8 40 30 00 00       	call   c00060b4 <ff_wtoupper>
c0003074:	83 c4 10             	add    esp,0x10
c0003077:	39 c5                	cmp    ebp,eax
c0003079:	75 96                	jne    c0003011 <cmp_lfn+0x1a>
c000307b:	89 f5                	mov    ebp,esi
c000307d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003081:	eb 0b                	jmp    c000308e <cmp_lfn+0x97>
c0003083:	0f b7 c8             	movzx  ecx,ax
c0003086:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c000308c:	75 83                	jne    c0003011 <cmp_lfn+0x1a>
c000308e:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003092:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003097:	75 95                	jne    c000302e <cmp_lfn+0x37>
c0003099:	f6 07 40             	test   BYTE PTR [edi],0x40
c000309c:	74 16                	je     c00030b4 <cmp_lfn+0xbd>
c000309e:	66 85 ed             	test   bp,bp
c00030a1:	74 11                	je     c00030b4 <cmp_lfn+0xbd>
c00030a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030a7:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00030ac:	0f 94 c0             	sete   al
c00030af:	0f b6 c0             	movzx  eax,al
c00030b2:	eb 05                	jmp    c00030b9 <cmp_lfn+0xc2>
c00030b4:	b8 01 00 00 00       	mov    eax,0x1
c00030b9:	83 c4 1c             	add    esp,0x1c
c00030bc:	5b                   	pop    ebx
c00030bd:	5e                   	pop    esi
c00030be:	5f                   	pop    edi
c00030bf:	5d                   	pop    ebp
c00030c0:	c3                   	ret    

c00030c1 <sync_fs>:
c00030c1:	56                   	push   esi
c00030c2:	53                   	push   ebx
c00030c3:	53                   	push   ebx
c00030c4:	89 c3                	mov    ebx,eax
c00030c6:	e8 5c f5 ff ff       	call   c0002627 <sync_window>
c00030cb:	85 c0                	test   eax,eax
c00030cd:	0f 85 9a 00 00 00    	jne    c000316d <sync_fs+0xac>
c00030d3:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00030d6:	75 7b                	jne    c0003153 <sync_fs+0x92>
c00030d8:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00030dc:	75 75                	jne    c0003153 <sync_fs+0x92>
c00030de:	b9 00 02 00 00       	mov    ecx,0x200
c00030e3:	8d 73 34             	lea    esi,[ebx+0x34]
c00030e6:	31 d2                	xor    edx,edx
c00030e8:	89 f0                	mov    eax,esi
c00030ea:	e8 75 f0 ff ff       	call   c0002164 <mem_set>
c00030ef:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00030f5:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030fa:	e8 49 f0 ff ff       	call   c0002148 <st_word>
c00030ff:	ba 52 52 61 41       	mov    edx,0x41615252
c0003104:	89 f0                	mov    eax,esi
c0003106:	e8 41 f0 ff ff       	call   c000214c <st_dword>
c000310b:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0003111:	ba 72 72 41 61       	mov    edx,0x61417272
c0003116:	e8 31 f0 ff ff       	call   c000214c <st_dword>
c000311b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000311e:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0003124:	e8 23 f0 ff ff       	call   c000214c <st_dword>
c0003129:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000312c:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0003132:	e8 15 f0 ff ff       	call   c000214c <st_dword>
c0003137:	6a 01                	push   0x1
c0003139:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000313c:	40                   	inc    eax
c000313d:	50                   	push   eax
c000313e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003141:	56                   	push   esi
c0003142:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003146:	50                   	push   eax
c0003147:	e8 a2 ef ff ff       	call   c00020ee <disk_write>
c000314c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0003150:	83 c4 10             	add    esp,0x10
c0003153:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003157:	51                   	push   ecx
c0003158:	6a 00                	push   0x0
c000315a:	6a 00                	push   0x0
c000315c:	50                   	push   eax
c000315d:	e8 a2 ef ff ff       	call   c0002104 <disk_ioctl>
c0003162:	83 c4 10             	add    esp,0x10
c0003165:	85 c0                	test   eax,eax
c0003167:	0f 95 c0             	setne  al
c000316a:	0f b6 c0             	movzx  eax,al
c000316d:	5a                   	pop    edx
c000316e:	5b                   	pop    ebx
c000316f:	5e                   	pop    esi
c0003170:	c3                   	ret    

c0003171 <create_partition>:
c0003171:	55                   	push   ebp
c0003172:	0f b6 c0             	movzx  eax,al
c0003175:	57                   	push   edi
c0003176:	56                   	push   esi
c0003177:	53                   	push   ebx
c0003178:	83 ec 40             	sub    esp,0x40
c000317b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000317f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003183:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003187:	8d 44 24 30          	lea    eax,[esp+0x30]
c000318b:	50                   	push   eax
c000318c:	6a 01                	push   0x1
c000318e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003192:	e8 6d ef ff ff       	call   c0002104 <disk_ioctl>
c0003197:	83 c4 10             	add    esp,0x10
c000319a:	85 c0                	test   eax,eax
c000319c:	0f 85 6a 01 00 00    	jne    c000330c <create_partition+0x19b>
c00031a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00031a6:	b9 05 00 00 00       	mov    ecx,0x5
c00031ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00031af:	be 08 00 00 00       	mov    esi,0x8
c00031b4:	89 f0                	mov    eax,esi
c00031b6:	31 d2                	xor    edx,edx
c00031b8:	0f b6 d8             	movzx  ebx,al
c00031bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00031bf:	f7 f3                	div    ebx
c00031c1:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00031c6:	76 0a                	jbe    c00031d2 <create_partition+0x61>
c00031c8:	d1 e6                	shl    esi,1
c00031ca:	49                   	dec    ecx
c00031cb:	75 e7                	jne    c00031b4 <create_partition+0x43>
c00031cd:	be ff ff ff ff       	mov    esi,0xffffffff
c00031d2:	b9 00 02 00 00       	mov    ecx,0x200
c00031d7:	31 d2                	xor    edx,edx
c00031d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031dd:	e8 82 ef ff ff       	call   c0002164 <mem_set>
c00031e2:	b9 64 00 00 00       	mov    ecx,0x64
c00031e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00031eb:	31 d2                	xor    edx,edx
c00031ed:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00031f5:	f7 f1                	div    ecx
c00031f7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00031fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003200:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003204:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c000320a:	89 f0                	mov    eax,esi
c000320c:	0f b6 c0             	movzx  eax,al
c000320f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003213:	85 c9                	test   ecx,ecx
c0003215:	75 34                	jne    c000324b <create_partition+0xda>
c0003217:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000321b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0003220:	05 fe 01 00 00       	add    eax,0x1fe
c0003225:	e8 1e ef ff ff       	call   c0002148 <st_word>
c000322a:	6a 01                	push   0x1
c000322c:	6a 00                	push   0x0
c000322e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0003232:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003236:	e8 b3 ee ff ff       	call   c00020ee <disk_write>
c000323b:	83 c4 10             	add    esp,0x10
c000323e:	85 c0                	test   eax,eax
c0003240:	0f 95 c0             	setne  al
c0003243:	0f b6 c0             	movzx  eax,al
c0003246:	e9 c6 00 00 00       	jmp    c0003311 <create_partition+0x1a0>
c000324b:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000324f:	76 c6                	jbe    c0003217 <create_partition+0xa6>
c0003251:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003255:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0003259:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c000325c:	83 fe 64             	cmp    esi,0x64
c000325f:	77 0d                	ja     c000326e <create_partition+0xfd>
c0003261:	74 07                	je     c000326a <create_partition+0xf9>
c0003263:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003268:	eb 04                	jmp    c000326e <create_partition+0xfd>
c000326a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000326e:	31 c0                	xor    eax,eax
c0003270:	89 f2                	mov    edx,esi
c0003272:	01 ca                	add    edx,ecx
c0003274:	0f 92 c0             	setb   al
c0003277:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c000327b:	77 04                	ja     c0003281 <create_partition+0x110>
c000327d:	85 c0                	test   eax,eax
c000327f:	74 08                	je     c0003289 <create_partition+0x118>
c0003281:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003285:	29 ce                	sub    esi,ecx
c0003287:	eb 04                	jmp    c000328d <create_partition+0x11c>
c0003289:	85 f6                	test   esi,esi
c000328b:	74 8a                	je     c0003217 <create_partition+0xa6>
c000328d:	89 ca                	mov    edx,ecx
c000328f:	89 d8                	mov    eax,ebx
c0003291:	bf 3f 00 00 00       	mov    edi,0x3f
c0003296:	e8 b1 ee ff ff       	call   c000214c <st_dword>
c000329b:	8d 43 04             	lea    eax,[ebx+0x4]
c000329e:	89 f2                	mov    edx,esi
c00032a0:	83 c3 10             	add    ebx,0x10
c00032a3:	e8 a4 ee ff ff       	call   c000214c <st_dword>
c00032a8:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00032ac:	31 d2                	xor    edx,edx
c00032ae:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c00032b1:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00032b5:	89 c8                	mov    eax,ecx
c00032b7:	01 f1                	add    ecx,esi
c00032b9:	f7 f7                	div    edi
c00032bb:	89 d5                	mov    ebp,edx
c00032bd:	31 d2                	xor    edx,edx
c00032bf:	45                   	inc    ebp
c00032c0:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c00032c4:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c00032c7:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c00032ca:	89 c2                	mov    edx,eax
c00032cc:	8d 41 ff             	lea    eax,[ecx-0x1]
c00032cf:	c1 ea 02             	shr    edx,0x2
c00032d2:	83 e2 c0             	and    edx,0xffffffc0
c00032d5:	09 ea                	or     edx,ebp
c00032d7:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c00032da:	31 d2                	xor    edx,edx
c00032dc:	f7 f7                	div    edi
c00032de:	89 d6                	mov    esi,edx
c00032e0:	31 d2                	xor    edx,edx
c00032e2:	46                   	inc    esi
c00032e3:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c00032e7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c00032ea:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c00032ed:	89 c7                	mov    edi,eax
c00032ef:	c1 ef 02             	shr    edi,0x2
c00032f2:	83 e7 c0             	and    edi,0xffffffc0
c00032f5:	09 fe                	or     esi,edi
c00032f7:	89 f2                	mov    edx,esi
c00032f9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c00032fc:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0003301:	0f 85 0c ff ff ff    	jne    c0003213 <create_partition+0xa2>
c0003307:	e9 0b ff ff ff       	jmp    c0003217 <create_partition+0xa6>
c000330c:	b8 01 00 00 00       	mov    eax,0x1
c0003311:	83 c4 3c             	add    esp,0x3c
c0003314:	5b                   	pop    ebx
c0003315:	5e                   	pop    esi
c0003316:	5f                   	pop    edi
c0003317:	5d                   	pop    ebp
c0003318:	c3                   	ret    

c0003319 <get_fileinfo>:
c0003319:	55                   	push   ebp
c000331a:	57                   	push   edi
c000331b:	56                   	push   esi
c000331c:	53                   	push   ebx
c000331d:	83 ec 1c             	sub    esp,0x1c
c0003320:	8b 30                	mov    esi,DWORD PTR [eax]
c0003322:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0003326:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000332a:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c000332e:	0f 84 d3 01 00 00    	je     c0003507 <get_fileinfo+0x1ee>
c0003334:	89 d3                	mov    ebx,edx
c0003336:	89 c6                	mov    esi,eax
c0003338:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000333c:	74 72                	je     c00033b0 <get_fileinfo+0x97>
c000333e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003346:	31 ed                	xor    ebp,ebp
c0003348:	31 ff                	xor    edi,edi
c000334a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000334e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003352:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003355:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003359:	89 c2                	mov    edx,eax
c000335b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000335f:	85 c0                	test   eax,eax
c0003361:	74 41                	je     c00033a4 <get_fileinfo+0x8b>
c0003363:	0f b7 c5             	movzx  eax,bp
c0003366:	85 c0                	test   eax,eax
c0003368:	75 0d                	jne    c0003377 <get_fileinfo+0x5e>
c000336a:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003370:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003375:	76 22                	jbe    c0003399 <get_fileinfo+0x80>
c0003377:	c1 e0 10             	shl    eax,0x10
c000337a:	b9 ff 00 00 00       	mov    ecx,0xff
c000337f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003383:	29 f9                	sub    ecx,edi
c0003385:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003389:	e8 f3 ee ff ff       	call   c0002281 <put_utf>
c000338e:	0f b6 c0             	movzx  eax,al
c0003391:	85 c0                	test   eax,eax
c0003393:	74 0d                	je     c00033a2 <get_fileinfo+0x89>
c0003395:	01 c7                	add    edi,eax
c0003397:	31 d2                	xor    edx,edx
c0003399:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000339e:	89 d5                	mov    ebp,edx
c00033a0:	eb a8                	jmp    c000334a <get_fileinfo+0x31>
c00033a2:	31 ff                	xor    edi,edi
c00033a4:	66 85 ed             	test   bp,bp
c00033a7:	74 02                	je     c00033ab <get_fileinfo+0x92>
c00033a9:	31 ff                	xor    edi,edi
c00033ab:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00033b0:	31 ff                	xor    edi,edi
c00033b2:	31 c9                	xor    ecx,ecx
c00033b4:	83 f9 0a             	cmp    ecx,0xa
c00033b7:	0f 87 ac 00 00 00    	ja     c0003469 <get_fileinfo+0x150>
c00033bd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033c0:	8d 69 01             	lea    ebp,[ecx+0x1]
c00033c3:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00033c7:	89 c2                	mov    edx,eax
c00033c9:	83 f8 20             	cmp    eax,0x20
c00033cc:	0f 84 90 00 00 00    	je     c0003462 <get_fileinfo+0x149>
c00033d2:	83 f8 05             	cmp    eax,0x5
c00033d5:	75 05                	jne    c00033dc <get_fileinfo+0xc3>
c00033d7:	ba e5 00 00 00       	mov    edx,0xe5
c00033dc:	83 ff 0b             	cmp    edi,0xb
c00033df:	77 0b                	ja     c00033ec <get_fileinfo+0xd3>
c00033e1:	83 fd 09             	cmp    ebp,0x9
c00033e4:	75 06                	jne    c00033ec <get_fileinfo+0xd3>
c00033e6:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00033eb:	47                   	inc    edi
c00033ec:	0f b7 c2             	movzx  eax,dx
c00033ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033f3:	e8 ab ed ff ff       	call   c00021a3 <dbc_1st>
c00033f8:	85 c0                	test   eax,eax
c00033fa:	74 2f                	je     c000342b <get_fileinfo+0x112>
c00033fc:	83 fd 08             	cmp    ebp,0x8
c00033ff:	74 2a                	je     c000342b <get_fileinfo+0x112>
c0003401:	83 fd 0b             	cmp    ebp,0xb
c0003404:	74 25                	je     c000342b <get_fileinfo+0x112>
c0003406:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003409:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000340d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003411:	e8 90 ed ff ff       	call   c00021a6 <dbc_2nd>
c0003416:	85 c0                	test   eax,eax
c0003418:	74 11                	je     c000342b <get_fileinfo+0x112>
c000341a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000341e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0003423:	c1 e0 08             	shl    eax,0x8
c0003426:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003429:	09 c2                	or     edx,eax
c000342b:	0f b7 d2             	movzx  edx,dx
c000342e:	50                   	push   eax
c000342f:	50                   	push   eax
c0003430:	68 b5 01 00 00       	push   0x1b5
c0003435:	52                   	push   edx
c0003436:	e8 01 2c 00 00       	call   c000603c <ff_oem2uni>
c000343b:	83 c4 10             	add    esp,0x10
c000343e:	0f b7 c0             	movzx  eax,ax
c0003441:	85 c0                	test   eax,eax
c0003443:	75 04                	jne    c0003449 <get_fileinfo+0x130>
c0003445:	31 ff                	xor    edi,edi
c0003447:	eb 20                	jmp    c0003469 <get_fileinfo+0x150>
c0003449:	b9 0c 00 00 00       	mov    ecx,0xc
c000344e:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003452:	29 f9                	sub    ecx,edi
c0003454:	e8 28 ee ff ff       	call   c0002281 <put_utf>
c0003459:	0f b6 c0             	movzx  eax,al
c000345c:	85 c0                	test   eax,eax
c000345e:	74 e5                	je     c0003445 <get_fileinfo+0x12c>
c0003460:	01 c7                	add    edi,eax
c0003462:	89 e9                	mov    ecx,ebp
c0003464:	e9 4b ff ff ff       	jmp    c00033b4 <get_fileinfo+0x9b>
c0003469:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000346e:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003472:	75 5f                	jne    c00034d3 <get_fileinfo+0x1ba>
c0003474:	85 ff                	test   edi,edi
c0003476:	75 0b                	jne    c0003483 <get_fileinfo+0x16a>
c0003478:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000347c:	ba 01 00 00 00       	mov    edx,0x1
c0003481:	eb 3e                	jmp    c00034c1 <get_fileinfo+0x1a8>
c0003483:	bf 08 00 00 00       	mov    edi,0x8
c0003488:	31 d2                	xor    edx,edx
c000348a:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003490:	84 c0                	test   al,al
c0003492:	74 2d                	je     c00034c1 <get_fileinfo+0x1a8>
c0003494:	66 83 f8 2e          	cmp    ax,0x2e
c0003498:	74 1b                	je     c00034b5 <get_fileinfo+0x19c>
c000349a:	8d 48 bf             	lea    ecx,[eax-0x41]
c000349d:	66 83 f9 19          	cmp    cx,0x19
c00034a1:	77 17                	ja     c00034ba <get_fileinfo+0x1a1>
c00034a3:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00034a6:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c00034a9:	21 f9                	and    ecx,edi
c00034ab:	80 e1 18             	and    cl,0x18
c00034ae:	74 0a                	je     c00034ba <get_fileinfo+0x1a1>
c00034b0:	83 c0 20             	add    eax,0x20
c00034b3:	eb 05                	jmp    c00034ba <get_fileinfo+0x1a1>
c00034b5:	bf 10 00 00 00       	mov    edi,0x10
c00034ba:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00034be:	42                   	inc    edx
c00034bf:	eb c9                	jmp    c000348a <get_fileinfo+0x171>
c00034c1:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00034c6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034c9:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00034cd:	75 04                	jne    c00034d3 <get_fileinfo+0x1ba>
c00034cf:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00034d3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034d6:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00034d9:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00034dc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034df:	83 c0 1c             	add    eax,0x1c
c00034e2:	e8 49 ec ff ff       	call   c0002130 <ld_dword>
c00034e7:	89 03                	mov    DWORD PTR [ebx],eax
c00034e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034ec:	83 c0 16             	add    eax,0x16
c00034ef:	e8 2f ec ff ff       	call   c0002123 <ld_word>
c00034f4:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00034f8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034fb:	83 c0 18             	add    eax,0x18
c00034fe:	e8 20 ec ff ff       	call   c0002123 <ld_word>
c0003503:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003507:	83 c4 1c             	add    esp,0x1c
c000350a:	5b                   	pop    ebx
c000350b:	5e                   	pop    esi
c000350c:	5f                   	pop    edi
c000350d:	5d                   	pop    ebp
c000350e:	c3                   	ret    

c000350f <ld_clust.isra.0>:
c000350f:	56                   	push   esi
c0003510:	89 c6                	mov    esi,eax
c0003512:	53                   	push   ebx
c0003513:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003516:	89 d3                	mov    ebx,edx
c0003518:	e8 06 ec ff ff       	call   c0002123 <ld_word>
c000351d:	0f b7 c8             	movzx  ecx,ax
c0003520:	89 f0                	mov    eax,esi
c0003522:	3c 03                	cmp    al,0x3
c0003524:	75 0d                	jne    c0003533 <ld_clust.isra.0+0x24>
c0003526:	8d 43 14             	lea    eax,[ebx+0x14]
c0003529:	e8 f5 eb ff ff       	call   c0002123 <ld_word>
c000352e:	c1 e0 10             	shl    eax,0x10
c0003531:	09 c1                	or     ecx,eax
c0003533:	89 c8                	mov    eax,ecx
c0003535:	5b                   	pop    ebx
c0003536:	5e                   	pop    esi
c0003537:	c3                   	ret    

c0003538 <st_clust.isra.1>:
c0003538:	56                   	push   esi
c0003539:	89 c6                	mov    esi,eax
c000353b:	53                   	push   ebx
c000353c:	89 d3                	mov    ebx,edx
c000353e:	0f b7 d1             	movzx  edx,cx
c0003541:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003544:	e8 ff eb ff ff       	call   c0002148 <st_word>
c0003549:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000354c:	75 0f                	jne    c000355d <st_clust.isra.1+0x25>
c000354e:	c1 e9 10             	shr    ecx,0x10
c0003551:	8d 43 14             	lea    eax,[ebx+0x14]
c0003554:	89 ca                	mov    edx,ecx
c0003556:	5b                   	pop    ebx
c0003557:	5e                   	pop    esi
c0003558:	e9 eb eb ff ff       	jmp    c0002148 <st_word>
c000355d:	5b                   	pop    ebx
c000355e:	5e                   	pop    esi
c000355f:	c3                   	ret    

c0003560 <get_fat.isra.2>:
c0003560:	b9 01 00 00 00       	mov    ecx,0x1
c0003565:	83 fa 01             	cmp    edx,0x1
c0003568:	0f 86 f3 00 00 00    	jbe    c0003661 <get_fat.isra.2+0x101>
c000356e:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003571:	0f 83 ea 00 00 00    	jae    c0003661 <get_fat.isra.2+0x101>
c0003577:	55                   	push   ebp
c0003578:	57                   	push   edi
c0003579:	89 c7                	mov    edi,eax
c000357b:	56                   	push   esi
c000357c:	89 d6                	mov    esi,edx
c000357e:	53                   	push   ebx
c000357f:	83 ec 0c             	sub    esp,0xc
c0003582:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003585:	83 f8 02             	cmp    eax,0x2
c0003588:	74 78                	je     c0003602 <get_fat.isra.2+0xa2>
c000358a:	83 f8 03             	cmp    eax,0x3
c000358d:	0f 84 96 00 00 00    	je     c0003629 <get_fat.isra.2+0xc9>
c0003593:	48                   	dec    eax
c0003594:	0f 85 bd 00 00 00    	jne    c0003657 <get_fat.isra.2+0xf7>
c000359a:	89 d3                	mov    ebx,edx
c000359c:	89 f8                	mov    eax,edi
c000359e:	d1 eb                	shr    ebx,1
c00035a0:	01 d3                	add    ebx,edx
c00035a2:	89 da                	mov    edx,ebx
c00035a4:	c1 ea 09             	shr    edx,0x9
c00035a7:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00035aa:	e8 db f0 ff ff       	call   c000268a <move_window>
c00035af:	85 c0                	test   eax,eax
c00035b1:	74 08                	je     c00035bb <get_fat.isra.2+0x5b>
c00035b3:	83 c9 ff             	or     ecx,0xffffffff
c00035b6:	e9 9c 00 00 00       	jmp    c0003657 <get_fat.isra.2+0xf7>
c00035bb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00035be:	89 f8                	mov    eax,edi
c00035c0:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035c6:	89 ea                	mov    edx,ebp
c00035c8:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c00035cc:	c1 ea 09             	shr    edx,0x9
c00035cf:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00035d2:	e8 b3 f0 ff ff       	call   c000268a <move_window>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	75 d8                	jne    c00035b3 <get_fat.isra.2+0x53>
c00035db:	0f b6 c3             	movzx  eax,bl
c00035de:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00035e4:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c00035e9:	c1 e3 08             	shl    ebx,0x8
c00035ec:	09 c3                	or     ebx,eax
c00035ee:	89 d9                	mov    ecx,ebx
c00035f0:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00035f6:	83 e6 01             	and    esi,0x1
c00035f9:	74 5c                	je     c0003657 <get_fat.isra.2+0xf7>
c00035fb:	89 d9                	mov    ecx,ebx
c00035fd:	c1 e9 04             	shr    ecx,0x4
c0003600:	eb 55                	jmp    c0003657 <get_fat.isra.2+0xf7>
c0003602:	c1 ea 08             	shr    edx,0x8
c0003605:	89 f8                	mov    eax,edi
c0003607:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000360a:	e8 7b f0 ff ff       	call   c000268a <move_window>
c000360f:	85 c0                	test   eax,eax
c0003611:	75 a0                	jne    c00035b3 <get_fat.isra.2+0x53>
c0003613:	01 f6                	add    esi,esi
c0003615:	81 e6 fe 01 00 00    	and    esi,0x1fe
c000361b:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000361f:	e8 ff ea ff ff       	call   c0002123 <ld_word>
c0003624:	0f b7 c8             	movzx  ecx,ax
c0003627:	eb 2e                	jmp    c0003657 <get_fat.isra.2+0xf7>
c0003629:	c1 ea 07             	shr    edx,0x7
c000362c:	89 f8                	mov    eax,edi
c000362e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003631:	e8 54 f0 ff ff       	call   c000268a <move_window>
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 75 ff ff ff    	jne    c00035b3 <get_fat.isra.2+0x53>
c000363e:	c1 e6 02             	shl    esi,0x2
c0003641:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003647:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000364b:	e8 e0 ea ff ff       	call   c0002130 <ld_dword>
c0003650:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003655:	89 c1                	mov    ecx,eax
c0003657:	83 c4 0c             	add    esp,0xc
c000365a:	89 c8                	mov    eax,ecx
c000365c:	5b                   	pop    ebx
c000365d:	5e                   	pop    esi
c000365e:	5f                   	pop    edi
c000365f:	5d                   	pop    ebp
c0003660:	c3                   	ret    
c0003661:	89 c8                	mov    eax,ecx
c0003663:	c3                   	ret    

c0003664 <dir_sdi>:
c0003664:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000366a:	0f 87 b6 00 00 00    	ja     c0003726 <dir_sdi+0xc2>
c0003670:	55                   	push   ebp
c0003671:	57                   	push   edi
c0003672:	56                   	push   esi
c0003673:	53                   	push   ebx
c0003674:	89 d3                	mov    ebx,edx
c0003676:	83 ec 1c             	sub    esp,0x1c
c0003679:	f6 c2 1f             	test   dl,0x1f
c000367c:	74 0a                	je     c0003688 <dir_sdi+0x24>
c000367e:	b8 02 00 00 00       	mov    eax,0x2
c0003683:	e9 96 00 00 00       	jmp    c000371e <dir_sdi+0xba>
c0003688:	89 c6                	mov    esi,eax
c000368a:	8b 38                	mov    edi,DWORD PTR [eax]
c000368c:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000368f:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003692:	85 c9                	test   ecx,ecx
c0003694:	75 23                	jne    c00036b9 <dir_sdi+0x55>
c0003696:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003699:	76 07                	jbe    c00036a2 <dir_sdi+0x3e>
c000369b:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000369e:	85 c0                	test   eax,eax
c00036a0:	75 15                	jne    c00036b7 <dir_sdi+0x53>
c00036a2:	89 da                	mov    edx,ebx
c00036a4:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00036a8:	c1 ea 05             	shr    edx,0x5
c00036ab:	39 c2                	cmp    edx,eax
c00036ad:	73 cf                	jae    c000367e <dir_sdi+0x1a>
c00036af:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c00036b2:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00036b5:	eb 3d                	jmp    c00036f4 <dir_sdi+0x90>
c00036b7:	89 c1                	mov    ecx,eax
c00036b9:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00036bd:	c1 e5 09             	shl    ebp,0x9
c00036c0:	89 ca                	mov    edx,ecx
c00036c2:	39 eb                	cmp    ebx,ebp
c00036c4:	72 1c                	jb     c00036e2 <dir_sdi+0x7e>
c00036c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00036c8:	e8 93 fe ff ff       	call   c0003560 <get_fat.isra.2>
c00036cd:	89 c1                	mov    ecx,eax
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	74 45                	je     c0003719 <dir_sdi+0xb5>
c00036d4:	83 f8 01             	cmp    eax,0x1
c00036d7:	76 a5                	jbe    c000367e <dir_sdi+0x1a>
c00036d9:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00036dc:	76 a0                	jbe    c000367e <dir_sdi+0x1a>
c00036de:	29 eb                	sub    ebx,ebp
c00036e0:	eb de                	jmp    c00036c0 <dir_sdi+0x5c>
c00036e2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036e6:	89 f8                	mov    eax,edi
c00036e8:	e8 8d ec ff ff       	call   c000237a <clst2sect>
c00036ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036f1:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00036f4:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00036f7:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00036fa:	85 d2                	test   edx,edx
c00036fc:	74 80                	je     c000367e <dir_sdi+0x1a>
c00036fe:	89 d8                	mov    eax,ebx
c0003700:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003706:	c1 e8 09             	shr    eax,0x9
c0003709:	01 d0                	add    eax,edx
c000370b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000370e:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c0003712:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003715:	31 c0                	xor    eax,eax
c0003717:	eb 05                	jmp    c000371e <dir_sdi+0xba>
c0003719:	b8 01 00 00 00       	mov    eax,0x1
c000371e:	83 c4 1c             	add    esp,0x1c
c0003721:	5b                   	pop    ebx
c0003722:	5e                   	pop    esi
c0003723:	5f                   	pop    edi
c0003724:	5d                   	pop    ebp
c0003725:	c3                   	ret    
c0003726:	b8 02 00 00 00       	mov    eax,0x2
c000372b:	c3                   	ret    

c000372c <create_chain>:
c000372c:	55                   	push   ebp
c000372d:	89 c5                	mov    ebp,eax
c000372f:	57                   	push   edi
c0003730:	89 d7                	mov    edi,edx
c0003732:	56                   	push   esi
c0003733:	53                   	push   ebx
c0003734:	83 ec 1c             	sub    esp,0x1c
c0003737:	85 d2                	test   edx,edx
c0003739:	8b 30                	mov    esi,DWORD PTR [eax]
c000373b:	75 0e                	jne    c000374b <create_chain+0x1f>
c000373d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003740:	85 c9                	test   ecx,ecx
c0003742:	74 34                	je     c0003778 <create_chain+0x4c>
c0003744:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003747:	77 34                	ja     c000377d <create_chain+0x51>
c0003749:	eb 2d                	jmp    c0003778 <create_chain+0x4c>
c000374b:	89 f0                	mov    eax,esi
c000374d:	e8 0e fe ff ff       	call   c0003560 <get_fat.isra.2>
c0003752:	89 c3                	mov    ebx,eax
c0003754:	83 f8 01             	cmp    eax,0x1
c0003757:	77 0a                	ja     c0003763 <create_chain+0x37>
c0003759:	bb 01 00 00 00       	mov    ebx,0x1
c000375e:	e9 fe 00 00 00       	jmp    c0003861 <create_chain+0x135>
c0003763:	83 f8 ff             	cmp    eax,0xffffffff
c0003766:	0f 84 f2 00 00 00    	je     c000385e <create_chain+0x132>
c000376c:	89 f9                	mov    ecx,edi
c000376e:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003771:	76 0a                	jbe    c000377d <create_chain+0x51>
c0003773:	e9 e9 00 00 00       	jmp    c0003861 <create_chain+0x135>
c0003778:	b9 01 00 00 00       	mov    ecx,0x1
c000377d:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003781:	75 07                	jne    c000378a <create_chain+0x5e>
c0003783:	31 db                	xor    ebx,ebx
c0003785:	e9 d7 00 00 00       	jmp    c0003861 <create_chain+0x135>
c000378a:	39 f9                	cmp    ecx,edi
c000378c:	75 46                	jne    c00037d4 <create_chain+0xa8>
c000378e:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003791:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003794:	77 05                	ja     c000379b <create_chain+0x6f>
c0003796:	bb 02 00 00 00       	mov    ebx,0x2
c000379b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000379f:	89 da                	mov    edx,ebx
c00037a1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00037a4:	e8 b7 fd ff ff       	call   c0003560 <get_fat.isra.2>
c00037a9:	83 f8 01             	cmp    eax,0x1
c00037ac:	74 ab                	je     c0003759 <create_chain+0x2d>
c00037ae:	83 f8 ff             	cmp    eax,0xffffffff
c00037b1:	0f 84 a7 00 00 00    	je     c000385e <create_chain+0x132>
c00037b7:	85 c0                	test   eax,eax
c00037b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00037bd:	74 11                	je     c00037d0 <create_chain+0xa4>
c00037bf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00037c2:	83 f8 01             	cmp    eax,0x1
c00037c5:	76 0d                	jbe    c00037d4 <create_chain+0xa8>
c00037c7:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c00037ca:	73 08                	jae    c00037d4 <create_chain+0xa8>
c00037cc:	89 c1                	mov    ecx,eax
c00037ce:	eb 04                	jmp    c00037d4 <create_chain+0xa8>
c00037d0:	85 db                	test   ebx,ebx
c00037d2:	75 3d                	jne    c0003811 <create_chain+0xe5>
c00037d4:	89 cb                	mov    ebx,ecx
c00037d6:	43                   	inc    ebx
c00037d7:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00037da:	77 0a                	ja     c00037e6 <create_chain+0xba>
c00037dc:	83 f9 01             	cmp    ecx,0x1
c00037df:	76 a2                	jbe    c0003783 <create_chain+0x57>
c00037e1:	bb 02 00 00 00       	mov    ebx,0x2
c00037e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00037ea:	89 da                	mov    edx,ebx
c00037ec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00037ef:	e8 6c fd ff ff       	call   c0003560 <get_fat.isra.2>
c00037f4:	85 c0                	test   eax,eax
c00037f6:	74 19                	je     c0003811 <create_chain+0xe5>
c00037f8:	83 f8 01             	cmp    eax,0x1
c00037fb:	0f 84 58 ff ff ff    	je     c0003759 <create_chain+0x2d>
c0003801:	40                   	inc    eax
c0003802:	74 5a                	je     c000385e <create_chain+0x132>
c0003804:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003808:	39 cb                	cmp    ebx,ecx
c000380a:	75 ca                	jne    c00037d6 <create_chain+0xaa>
c000380c:	e9 72 ff ff ff       	jmp    c0003783 <create_chain+0x57>
c0003811:	83 c9 ff             	or     ecx,0xffffffff
c0003814:	89 da                	mov    edx,ebx
c0003816:	89 f0                	mov    eax,esi
c0003818:	e8 b1 f2 ff ff       	call   c0002ace <put_fat>
c000381d:	85 c0                	test   eax,eax
c000381f:	75 36                	jne    c0003857 <create_chain+0x12b>
c0003821:	85 ff                	test   edi,edi
c0003823:	75 16                	jne    c000383b <create_chain+0x10f>
c0003825:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003828:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c000382b:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c000382e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003831:	39 d0                	cmp    eax,edx
c0003833:	77 17                	ja     c000384c <create_chain+0x120>
c0003835:	48                   	dec    eax
c0003836:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003839:	eb 11                	jmp    c000384c <create_chain+0x120>
c000383b:	89 d9                	mov    ecx,ebx
c000383d:	89 fa                	mov    edx,edi
c000383f:	89 f0                	mov    eax,esi
c0003841:	e8 88 f2 ff ff       	call   c0002ace <put_fat>
c0003846:	85 c0                	test   eax,eax
c0003848:	74 db                	je     c0003825 <create_chain+0xf9>
c000384a:	eb 0b                	jmp    c0003857 <create_chain+0x12b>
c000384c:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c000384f:	83 c8 01             	or     eax,0x1
c0003852:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003855:	eb 0a                	jmp    c0003861 <create_chain+0x135>
c0003857:	48                   	dec    eax
c0003858:	0f 85 fb fe ff ff    	jne    c0003759 <create_chain+0x2d>
c000385e:	83 cb ff             	or     ebx,0xffffffff
c0003861:	83 c4 1c             	add    esp,0x1c
c0003864:	89 d8                	mov    eax,ebx
c0003866:	5b                   	pop    ebx
c0003867:	5e                   	pop    esi
c0003868:	5f                   	pop    edi
c0003869:	5d                   	pop    ebp
c000386a:	c3                   	ret    

c000386b <remove_chain>:
c000386b:	55                   	push   ebp
c000386c:	57                   	push   edi
c000386d:	56                   	push   esi
c000386e:	89 d6                	mov    esi,edx
c0003870:	53                   	push   ebx
c0003871:	83 ec 0c             	sub    esp,0xc
c0003874:	83 fa 01             	cmp    edx,0x1
c0003877:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003879:	76 6a                	jbe    c00038e5 <remove_chain+0x7a>
c000387b:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000387e:	76 65                	jbe    c00038e5 <remove_chain+0x7a>
c0003880:	89 c5                	mov    ebp,eax
c0003882:	89 ca                	mov    edx,ecx
c0003884:	85 c9                	test   ecx,ecx
c0003886:	74 0e                	je     c0003896 <remove_chain+0x2b>
c0003888:	83 c9 ff             	or     ecx,0xffffffff
c000388b:	89 d8                	mov    eax,ebx
c000388d:	e8 3c f2 ff ff       	call   c0002ace <put_fat>
c0003892:	85 c0                	test   eax,eax
c0003894:	75 5b                	jne    c00038f1 <remove_chain+0x86>
c0003896:	89 f2                	mov    edx,esi
c0003898:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000389b:	e8 c0 fc ff ff       	call   c0003560 <get_fat.isra.2>
c00038a0:	89 c7                	mov    edi,eax
c00038a2:	85 c0                	test   eax,eax
c00038a4:	75 04                	jne    c00038aa <remove_chain+0x3f>
c00038a6:	31 c0                	xor    eax,eax
c00038a8:	eb 47                	jmp    c00038f1 <remove_chain+0x86>
c00038aa:	83 f8 01             	cmp    eax,0x1
c00038ad:	74 36                	je     c00038e5 <remove_chain+0x7a>
c00038af:	83 f8 ff             	cmp    eax,0xffffffff
c00038b2:	74 38                	je     c00038ec <remove_chain+0x81>
c00038b4:	31 c9                	xor    ecx,ecx
c00038b6:	89 f2                	mov    edx,esi
c00038b8:	89 d8                	mov    eax,ebx
c00038ba:	e8 0f f2 ff ff       	call   c0002ace <put_fat>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2e                	jne    c00038f1 <remove_chain+0x86>
c00038c3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00038c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c9:	8d 4a fe             	lea    ecx,[edx-0x2]
c00038cc:	39 c8                	cmp    eax,ecx
c00038ce:	73 0d                	jae    c00038dd <remove_chain+0x72>
c00038d0:	40                   	inc    eax
c00038d1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00038d4:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00038d7:	83 c8 01             	or     eax,0x1
c00038da:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00038dd:	89 fe                	mov    esi,edi
c00038df:	39 fa                	cmp    edx,edi
c00038e1:	77 b3                	ja     c0003896 <remove_chain+0x2b>
c00038e3:	eb c1                	jmp    c00038a6 <remove_chain+0x3b>
c00038e5:	b8 02 00 00 00       	mov    eax,0x2
c00038ea:	eb 05                	jmp    c00038f1 <remove_chain+0x86>
c00038ec:	b8 01 00 00 00       	mov    eax,0x1
c00038f1:	83 c4 0c             	add    esp,0xc
c00038f4:	5b                   	pop    ebx
c00038f5:	5e                   	pop    esi
c00038f6:	5f                   	pop    edi
c00038f7:	5d                   	pop    ebp
c00038f8:	c3                   	ret    

c00038f9 <dir_next>:
c00038f9:	55                   	push   ebp
c00038fa:	57                   	push   edi
c00038fb:	56                   	push   esi
c00038fc:	53                   	push   ebx
c00038fd:	83 ec 1c             	sub    esp,0x1c
c0003900:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003903:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003905:	83 c7 20             	add    edi,0x20
c0003908:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c000390e:	76 07                	jbe    c0003917 <dir_next+0x1e>
c0003910:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003917:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c000391a:	b9 04 00 00 00       	mov    ecx,0x4
c000391f:	85 f6                	test   esi,esi
c0003921:	0f 84 cd 00 00 00    	je     c00039f4 <dir_next+0xfb>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	89 d1                	mov    ecx,edx
c000392b:	89 f8                	mov    eax,edi
c000392d:	25 ff 01 00 00       	and    eax,0x1ff
c0003932:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003936:	0f 85 a8 00 00 00    	jne    c00039e4 <dir_next+0xeb>
c000393c:	46                   	inc    esi
c000393d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003940:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003943:	85 d2                	test   edx,edx
c0003945:	75 22                	jne    c0003969 <dir_next+0x70>
c0003947:	89 fa                	mov    edx,edi
c0003949:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000394d:	c1 ea 05             	shr    edx,0x5
c0003950:	39 c2                	cmp    edx,eax
c0003952:	0f 82 8c 00 00 00    	jb     c00039e4 <dir_next+0xeb>
c0003958:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000395f:	b9 04 00 00 00       	mov    ecx,0x4
c0003964:	e9 8b 00 00 00       	jmp    c00039f4 <dir_next+0xfb>
c0003969:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000396d:	89 fe                	mov    esi,edi
c000396f:	48                   	dec    eax
c0003970:	c1 ee 09             	shr    esi,0x9
c0003973:	85 f0                	test   eax,esi
c0003975:	75 6d                	jne    c00039e4 <dir_next+0xeb>
c0003977:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000397b:	89 e8                	mov    eax,ebp
c000397d:	e8 de fb ff ff       	call   c0003560 <get_fat.isra.2>
c0003982:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003986:	89 c6                	mov    esi,eax
c0003988:	83 f8 01             	cmp    eax,0x1
c000398b:	77 07                	ja     c0003994 <dir_next+0x9b>
c000398d:	b9 02 00 00 00       	mov    ecx,0x2
c0003992:	eb 60                	jmp    c00039f4 <dir_next+0xfb>
c0003994:	83 f8 ff             	cmp    eax,0xffffffff
c0003997:	75 07                	jne    c00039a0 <dir_next+0xa7>
c0003999:	b9 01 00 00 00       	mov    ecx,0x1
c000399e:	eb 54                	jmp    c00039f4 <dir_next+0xfb>
c00039a0:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00039a3:	77 30                	ja     c00039d5 <dir_next+0xdc>
c00039a5:	85 c9                	test   ecx,ecx
c00039a7:	74 af                	je     c0003958 <dir_next+0x5f>
c00039a9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	e8 79 fd ff ff       	call   c000372c <create_chain>
c00039b3:	b9 07 00 00 00       	mov    ecx,0x7
c00039b8:	89 c6                	mov    esi,eax
c00039ba:	85 c0                	test   eax,eax
c00039bc:	74 36                	je     c00039f4 <dir_next+0xfb>
c00039be:	83 f8 01             	cmp    eax,0x1
c00039c1:	74 ca                	je     c000398d <dir_next+0x94>
c00039c3:	83 f8 ff             	cmp    eax,0xffffffff
c00039c6:	74 d1                	je     c0003999 <dir_next+0xa0>
c00039c8:	89 c2                	mov    edx,eax
c00039ca:	89 e8                	mov    eax,ebp
c00039cc:	e8 54 f2 ff ff       	call   c0002c25 <dir_clear>
c00039d1:	85 c0                	test   eax,eax
c00039d3:	75 c4                	jne    c0003999 <dir_next+0xa0>
c00039d5:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00039d8:	89 f2                	mov    edx,esi
c00039da:	89 e8                	mov    eax,ebp
c00039dc:	e8 99 e9 ff ff       	call   c000237a <clst2sect>
c00039e1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00039e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00039e8:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00039eb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00039ef:	31 c9                	xor    ecx,ecx
c00039f1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00039f4:	83 c4 1c             	add    esp,0x1c
c00039f7:	89 c8                	mov    eax,ecx
c00039f9:	5b                   	pop    ebx
c00039fa:	5e                   	pop    esi
c00039fb:	5f                   	pop    edi
c00039fc:	5d                   	pop    ebp
c00039fd:	c3                   	ret    

c00039fe <dir_alloc>:
c00039fe:	55                   	push   ebp
c00039ff:	89 c5                	mov    ebp,eax
c0003a01:	57                   	push   edi
c0003a02:	89 d7                	mov    edi,edx
c0003a04:	56                   	push   esi
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	53                   	push   ebx
c0003a08:	83 ec 0c             	sub    esp,0xc
c0003a0b:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a0d:	e8 52 fc ff ff       	call   c0003664 <dir_sdi>
c0003a12:	85 c0                	test   eax,eax
c0003a14:	75 3b                	jne    c0003a51 <dir_alloc+0x53>
c0003a16:	31 db                	xor    ebx,ebx
c0003a18:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003a1b:	89 f0                	mov    eax,esi
c0003a1d:	e8 68 ec ff ff       	call   c000268a <move_window>
c0003a22:	85 c0                	test   eax,eax
c0003a24:	75 2b                	jne    c0003a51 <dir_alloc+0x53>
c0003a26:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003a29:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003a2c:	85 d2                	test   edx,edx
c0003a2e:	74 08                	je     c0003a38 <dir_alloc+0x3a>
c0003a30:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003a36:	75 07                	jne    c0003a3f <dir_alloc+0x41>
c0003a38:	43                   	inc    ebx
c0003a39:	39 fb                	cmp    ebx,edi
c0003a3b:	75 04                	jne    c0003a41 <dir_alloc+0x43>
c0003a3d:	eb 1c                	jmp    c0003a5b <dir_alloc+0x5d>
c0003a3f:	31 db                	xor    ebx,ebx
c0003a41:	ba 01 00 00 00       	mov    edx,0x1
c0003a46:	89 e8                	mov    eax,ebp
c0003a48:	e8 ac fe ff ff       	call   c00038f9 <dir_next>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	74 c7                	je     c0003a18 <dir_alloc+0x1a>
c0003a51:	83 f8 04             	cmp    eax,0x4
c0003a54:	75 05                	jne    c0003a5b <dir_alloc+0x5d>
c0003a56:	b8 07 00 00 00       	mov    eax,0x7
c0003a5b:	83 c4 0c             	add    esp,0xc
c0003a5e:	5b                   	pop    ebx
c0003a5f:	5e                   	pop    esi
c0003a60:	5f                   	pop    edi
c0003a61:	5d                   	pop    ebp
c0003a62:	c3                   	ret    

c0003a63 <dir_read>:
c0003a63:	55                   	push   ebp
c0003a64:	57                   	push   edi
c0003a65:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a6a:	56                   	push   esi
c0003a6b:	be 04 00 00 00       	mov    esi,0x4
c0003a70:	53                   	push   ebx
c0003a71:	89 c3                	mov    ebx,eax
c0003a73:	83 ec 1c             	sub    esp,0x1c
c0003a76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a7a:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003a7c:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003a81:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a84:	85 d2                	test   edx,edx
c0003a86:	0f 84 e3 00 00 00    	je     c0003b6f <dir_read+0x10c>
c0003a8c:	89 e8                	mov    eax,ebp
c0003a8e:	e8 f7 eb ff ff       	call   c000268a <move_window>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 dd 00 00 00    	jne    c0003b7a <dir_read+0x117>
c0003a9d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa0:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003aa3:	88 04 24             	mov    BYTE PTR [esp],al
c0003aa6:	85 c0                	test   eax,eax
c0003aa8:	0f 84 c7 00 00 00    	je     c0003b75 <dir_read+0x112>
c0003aae:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003ab1:	83 e1 3f             	and    ecx,0x3f
c0003ab4:	83 f8 2e             	cmp    eax,0x2e
c0003ab7:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003aba:	0f 84 95 00 00 00    	je     c0003b55 <dir_read+0xf2>
c0003ac0:	3d e5 00 00 00       	cmp    eax,0xe5
c0003ac5:	0f 84 8a 00 00 00    	je     c0003b55 <dir_read+0xf2>
c0003acb:	0f b6 c9             	movzx  ecx,cl
c0003ace:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003ad2:	83 e1 df             	and    ecx,0xffffffdf
c0003ad5:	83 f9 08             	cmp    ecx,0x8
c0003ad8:	0f 94 c1             	sete   cl
c0003adb:	0f b6 c9             	movzx  ecx,cl
c0003ade:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003ae2:	75 71                	jne    c0003b55 <dir_read+0xf2>
c0003ae4:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003ae9:	75 4a                	jne    c0003b35 <dir_read+0xd2>
c0003aeb:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c0003aef:	74 16                	je     c0003b07 <dir_read+0xa4>
c0003af1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003af4:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003afb:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003aff:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b02:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b05:	eb 0e                	jmp    c0003b15 <dir_read+0xb2>
c0003b07:	89 f9                	mov    ecx,edi
c0003b09:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b0e:	0f b6 c9             	movzx  ecx,cl
c0003b11:	39 c1                	cmp    ecx,eax
c0003b13:	75 45                	jne    c0003b5a <dir_read+0xf7>
c0003b15:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b19:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b1e:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c0003b21:	75 37                	jne    c0003b5a <dir_read+0xf7>
c0003b23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003b26:	e8 6c e8 ff ff       	call   c0002397 <pick_lfn>
c0003b2b:	85 c0                	test   eax,eax
c0003b2d:	74 2b                	je     c0003b5a <dir_read+0xf7>
c0003b2f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003b32:	4f                   	dec    edi
c0003b33:	eb 25                	jmp    c0003b5a <dir_read+0xf7>
c0003b35:	89 f8                	mov    eax,edi
c0003b37:	84 c0                	test   al,al
c0003b39:	75 11                	jne    c0003b4c <dir_read+0xe9>
c0003b3b:	89 d0                	mov    eax,edx
c0003b3d:	e8 32 ea ff ff       	call   c0002574 <sum_sfn>
c0003b42:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003b46:	75 04                	jne    c0003b4c <dir_read+0xe9>
c0003b48:	31 f6                	xor    esi,esi
c0003b4a:	eb 35                	jmp    c0003b81 <dir_read+0x11e>
c0003b4c:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b53:	eb 2c                	jmp    c0003b81 <dir_read+0x11e>
c0003b55:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b5a:	31 d2                	xor    edx,edx
c0003b5c:	89 d8                	mov    eax,ebx
c0003b5e:	e8 96 fd ff ff       	call   c00038f9 <dir_next>
c0003b63:	89 c6                	mov    esi,eax
c0003b65:	85 c0                	test   eax,eax
c0003b67:	0f 84 14 ff ff ff    	je     c0003a81 <dir_read+0x1e>
c0003b6d:	eb 0b                	jmp    c0003b7a <dir_read+0x117>
c0003b6f:	85 f6                	test   esi,esi
c0003b71:	74 d5                	je     c0003b48 <dir_read+0xe5>
c0003b73:	eb 05                	jmp    c0003b7a <dir_read+0x117>
c0003b75:	be 04 00 00 00       	mov    esi,0x4
c0003b7a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003b81:	83 c4 1c             	add    esp,0x1c
c0003b84:	89 f0                	mov    eax,esi
c0003b86:	5b                   	pop    ebx
c0003b87:	5e                   	pop    esi
c0003b88:	5f                   	pop    edi
c0003b89:	5d                   	pop    ebp
c0003b8a:	c3                   	ret    

c0003b8b <dir_remove>:
c0003b8b:	57                   	push   edi
c0003b8c:	56                   	push   esi
c0003b8d:	53                   	push   ebx
c0003b8e:	89 c3                	mov    ebx,eax
c0003b90:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003b93:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b95:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003b98:	83 fa ff             	cmp    edx,0xffffffff
c0003b9b:	74 09                	je     c0003ba6 <dir_remove+0x1b>
c0003b9d:	e8 c2 fa ff ff       	call   c0003664 <dir_sdi>
c0003ba2:	85 c0                	test   eax,eax
c0003ba4:	75 34                	jne    c0003bda <dir_remove+0x4f>
c0003ba6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ba9:	89 f0                	mov    eax,esi
c0003bab:	e8 da ea ff ff       	call   c000268a <move_window>
c0003bb0:	85 c0                	test   eax,eax
c0003bb2:	75 1c                	jne    c0003bd0 <dir_remove+0x45>
c0003bb4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bb7:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003bba:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003bbe:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003bc1:	73 17                	jae    c0003bda <dir_remove+0x4f>
c0003bc3:	31 d2                	xor    edx,edx
c0003bc5:	89 d8                	mov    eax,ebx
c0003bc7:	e8 2d fd ff ff       	call   c00038f9 <dir_next>
c0003bcc:	85 c0                	test   eax,eax
c0003bce:	74 d6                	je     c0003ba6 <dir_remove+0x1b>
c0003bd0:	83 f8 04             	cmp    eax,0x4
c0003bd3:	75 05                	jne    c0003bda <dir_remove+0x4f>
c0003bd5:	b8 02 00 00 00       	mov    eax,0x2
c0003bda:	5b                   	pop    ebx
c0003bdb:	5e                   	pop    esi
c0003bdc:	5f                   	pop    edi
c0003bdd:	c3                   	ret    

c0003bde <dir_find>:
c0003bde:	55                   	push   ebp
c0003bdf:	31 d2                	xor    edx,edx
c0003be1:	57                   	push   edi
c0003be2:	56                   	push   esi
c0003be3:	53                   	push   ebx
c0003be4:	89 c3                	mov    ebx,eax
c0003be6:	83 ec 1c             	sub    esp,0x1c
c0003be9:	8b 00                	mov    eax,DWORD PTR [eax]
c0003beb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bef:	89 d8                	mov    eax,ebx
c0003bf1:	e8 6e fa ff ff       	call   c0003664 <dir_sdi>
c0003bf6:	89 c6                	mov    esi,eax
c0003bf8:	85 c0                	test   eax,eax
c0003bfa:	0f 85 1d 01 00 00    	jne    c0003d1d <dir_find+0x13f>
c0003c00:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003c07:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003c0c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003c11:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003c14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c18:	e8 6d ea ff ff       	call   c000268a <move_window>
c0003c1d:	89 c6                	mov    esi,eax
c0003c1f:	85 c0                	test   eax,eax
c0003c21:	0f 85 f6 00 00 00    	jne    c0003d1d <dir_find+0x13f>
c0003c27:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003c2a:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003c2e:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003c32:	85 c9                	test   ecx,ecx
c0003c34:	0f 84 de 00 00 00    	je     c0003d18 <dir_find+0x13a>
c0003c3a:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003c3d:	89 d0                	mov    eax,edx
c0003c3f:	83 e0 3f             	and    eax,0x3f
c0003c42:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003c48:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003c4b:	0f 84 a6 00 00 00    	je     c0003cf7 <dir_find+0x119>
c0003c51:	80 e2 08             	and    dl,0x8
c0003c54:	0f b6 c0             	movzx  eax,al
c0003c57:	74 0b                	je     c0003c64 <dir_find+0x86>
c0003c59:	83 f8 0f             	cmp    eax,0xf
c0003c5c:	0f 85 95 00 00 00    	jne    c0003cf7 <dir_find+0x119>
c0003c62:	eb 05                	jmp    c0003c69 <dir_find+0x8b>
c0003c64:	83 f8 0f             	cmp    eax,0xf
c0003c67:	75 62                	jne    c0003ccb <dir_find+0xed>
c0003c69:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003c6d:	0f 85 90 00 00 00    	jne    c0003d03 <dir_find+0x125>
c0003c73:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003c78:	74 17                	je     c0003c91 <dir_find+0xb3>
c0003c7a:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003c7d:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003c85:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003c89:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c8c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003c8f:	eb 13                	jmp    c0003ca4 <dir_find+0xc6>
c0003c91:	89 f8                	mov    eax,edi
c0003c93:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003c98:	0f b6 d0             	movzx  edx,al
c0003c9b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003ca0:	39 c2                	cmp    edx,eax
c0003ca2:	75 5f                	jne    c0003d03 <dir_find+0x125>
c0003ca4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003ca8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003cad:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003cb0:	75 51                	jne    c0003d03 <dir_find+0x125>
c0003cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cb6:	89 ea                	mov    edx,ebp
c0003cb8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbb:	e8 37 f3 ff ff       	call   c0002ff7 <cmp_lfn>
c0003cc0:	85 c0                	test   eax,eax
c0003cc2:	74 3f                	je     c0003d03 <dir_find+0x125>
c0003cc4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003cc8:	4f                   	dec    edi
c0003cc9:	eb 38                	jmp    c0003d03 <dir_find+0x125>
c0003ccb:	89 f8                	mov    eax,edi
c0003ccd:	84 c0                	test   al,al
c0003ccf:	75 0d                	jne    c0003cde <dir_find+0x100>
c0003cd1:	89 e8                	mov    eax,ebp
c0003cd3:	e8 9c e8 ff ff       	call   c0002574 <sum_sfn>
c0003cd8:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003cdc:	74 3f                	je     c0003d1d <dir_find+0x13f>
c0003cde:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003ce2:	75 13                	jne    c0003cf7 <dir_find+0x119>
c0003ce4:	8d 53 20             	lea    edx,[ebx+0x20]
c0003ce7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cec:	89 e8                	mov    eax,ebp
c0003cee:	e8 7c e4 ff ff       	call   c000216f <mem_cmp>
c0003cf3:	85 c0                	test   eax,eax
c0003cf5:	74 26                	je     c0003d1d <dir_find+0x13f>
c0003cf7:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003cfe:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003d03:	31 d2                	xor    edx,edx
c0003d05:	89 d8                	mov    eax,ebx
c0003d07:	e8 ed fb ff ff       	call   c00038f9 <dir_next>
c0003d0c:	89 c6                	mov    esi,eax
c0003d0e:	85 c0                	test   eax,eax
c0003d10:	0f 84 fb fe ff ff    	je     c0003c11 <dir_find+0x33>
c0003d16:	eb 05                	jmp    c0003d1d <dir_find+0x13f>
c0003d18:	be 04 00 00 00       	mov    esi,0x4
c0003d1d:	83 c4 1c             	add    esp,0x1c
c0003d20:	89 f0                	mov    eax,esi
c0003d22:	5b                   	pop    ebx
c0003d23:	5e                   	pop    esi
c0003d24:	5f                   	pop    edi
c0003d25:	5d                   	pop    ebp
c0003d26:	c3                   	ret    

c0003d27 <follow_path>:
c0003d27:	56                   	push   esi
c0003d28:	53                   	push   ebx
c0003d29:	89 c3                	mov    ebx,eax
c0003d2b:	83 ec 14             	sub    esp,0x14
c0003d2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003d32:	8b 30                	mov    esi,DWORD PTR [eax]
c0003d34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d38:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003d3b:	83 fa 5c             	cmp    edx,0x5c
c0003d3e:	75 07                	jne    c0003d47 <follow_path+0x20>
c0003d40:	40                   	inc    eax
c0003d41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d45:	eb ed                	jmp    c0003d34 <follow_path+0xd>
c0003d47:	83 fa 2f             	cmp    edx,0x2f
c0003d4a:	74 f4                	je     c0003d40 <follow_path+0x19>
c0003d4c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003d53:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003d56:	77 3e                	ja     c0003d96 <follow_path+0x6f>
c0003d58:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003d5c:	31 d2                	xor    edx,edx
c0003d5e:	89 d8                	mov    eax,ebx
c0003d60:	e8 ff f8 ff ff       	call   c0003664 <dir_sdi>
c0003d65:	eb 4f                	jmp    c0003db6 <follow_path+0x8f>
c0003d67:	89 d8                	mov    eax,ebx
c0003d69:	e8 70 fe ff ff       	call   c0003bde <dir_find>
c0003d6e:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003d71:	85 c0                	test   eax,eax
c0003d73:	75 32                	jne    c0003da7 <follow_path+0x80>
c0003d75:	80 e2 04             	and    dl,0x4
c0003d78:	75 3c                	jne    c0003db6 <follow_path+0x8f>
c0003d7a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003d7e:	74 31                	je     c0003db1 <follow_path+0x8a>
c0003d80:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003d83:	25 ff 01 00 00       	and    eax,0x1ff
c0003d88:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003d8c:	8a 06                	mov    al,BYTE PTR [esi]
c0003d8e:	e8 7c f7 ff ff       	call   c000350f <ld_clust.isra.0>
c0003d93:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003d96:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003d9a:	89 d8                	mov    eax,ebx
c0003d9c:	e8 7f ef ff ff       	call   c0002d20 <create_name>
c0003da1:	85 c0                	test   eax,eax
c0003da3:	74 c2                	je     c0003d67 <follow_path+0x40>
c0003da5:	eb 0f                	jmp    c0003db6 <follow_path+0x8f>
c0003da7:	83 f8 04             	cmp    eax,0x4
c0003daa:	75 0a                	jne    c0003db6 <follow_path+0x8f>
c0003dac:	80 e2 04             	and    dl,0x4
c0003daf:	75 05                	jne    c0003db6 <follow_path+0x8f>
c0003db1:	b8 05 00 00 00       	mov    eax,0x5
c0003db6:	83 c4 14             	add    esp,0x14
c0003db9:	5b                   	pop    ebx
c0003dba:	5e                   	pop    esi
c0003dbb:	c3                   	ret    

c0003dbc <dir_register>:
c0003dbc:	55                   	push   ebp
c0003dbd:	57                   	push   edi
c0003dbe:	56                   	push   esi
c0003dbf:	be 06 00 00 00       	mov    esi,0x6
c0003dc4:	53                   	push   ebx
c0003dc5:	83 ec 2c             	sub    esp,0x2c
c0003dc8:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003dcb:	80 e2 a0             	and    dl,0xa0
c0003dce:	0f 85 66 01 00 00    	jne    c0003f3a <dir_register+0x17e>
c0003dd4:	8b 38                	mov    edi,DWORD PTR [eax]
c0003dd6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003dde:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003de1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003de5:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003dea:	74 06                	je     c0003df2 <dir_register+0x36>
c0003dec:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003df0:	eb ef                	jmp    c0003de1 <dir_register+0x25>
c0003df2:	89 c3                	mov    ebx,eax
c0003df4:	b9 0c 00 00 00       	mov    ecx,0xc
c0003df9:	8d 40 20             	lea    eax,[eax+0x20]
c0003dfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e00:	89 c2                	mov    edx,eax
c0003e02:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003e06:	e8 44 e3 ff ff       	call   c000214f <mem_cpy>
c0003e0b:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003e10:	74 48                	je     c0003e5a <dir_register+0x9e>
c0003e12:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003e16:	bd 01 00 00 00       	mov    ebp,0x1
c0003e1b:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003e1e:	55                   	push   ebp
c0003e1f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003e23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003e27:	e8 86 e6 ff ff       	call   c00024b2 <gen_numname>
c0003e2c:	58                   	pop    eax
c0003e2d:	89 d8                	mov    eax,ebx
c0003e2f:	e8 aa fd ff ff       	call   c0003bde <dir_find>
c0003e34:	89 c6                	mov    esi,eax
c0003e36:	85 c0                	test   eax,eax
c0003e38:	75 10                	jne    c0003e4a <dir_register+0x8e>
c0003e3a:	45                   	inc    ebp
c0003e3b:	83 fd 64             	cmp    ebp,0x64
c0003e3e:	75 db                	jne    c0003e1b <dir_register+0x5f>
c0003e40:	be 07 00 00 00       	mov    esi,0x7
c0003e45:	e9 f0 00 00 00       	jmp    c0003f3a <dir_register+0x17e>
c0003e4a:	83 f8 04             	cmp    eax,0x4
c0003e4d:	0f 85 e7 00 00 00    	jne    c0003f3a <dir_register+0x17e>
c0003e53:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003e57:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003e5a:	bd 01 00 00 00       	mov    ebp,0x1
c0003e5f:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003e64:	74 13                	je     c0003e79 <dir_register+0xbd>
c0003e66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003e6a:	b9 0d 00 00 00       	mov    ecx,0xd
c0003e6f:	83 c0 0c             	add    eax,0xc
c0003e72:	31 d2                	xor    edx,edx
c0003e74:	f7 f1                	div    ecx
c0003e76:	8d 68 01             	lea    ebp,[eax+0x1]
c0003e79:	89 ea                	mov    edx,ebp
c0003e7b:	89 d8                	mov    eax,ebx
c0003e7d:	e8 7c fb ff ff       	call   c00039fe <dir_alloc>
c0003e82:	89 c6                	mov    esi,eax
c0003e84:	85 c0                	test   eax,eax
c0003e86:	0f 85 ae 00 00 00    	jne    c0003f3a <dir_register+0x17e>
c0003e8c:	4d                   	dec    ebp
c0003e8d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003e91:	74 67                	je     c0003efa <dir_register+0x13e>
c0003e93:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003e96:	89 e8                	mov    eax,ebp
c0003e98:	c1 e0 05             	shl    eax,0x5
c0003e9b:	29 c2                	sub    edx,eax
c0003e9d:	89 d8                	mov    eax,ebx
c0003e9f:	e8 c0 f7 ff ff       	call   c0003664 <dir_sdi>
c0003ea4:	89 c6                	mov    esi,eax
c0003ea6:	85 c0                	test   eax,eax
c0003ea8:	0f 85 8c 00 00 00    	jne    c0003f3a <dir_register+0x17e>
c0003eae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eb2:	e8 bd e6 ff ff       	call   c0002574 <sum_sfn>
c0003eb7:	0f b6 e8             	movzx  ebp,al
c0003eba:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ebd:	89 f8                	mov    eax,edi
c0003ebf:	e8 c6 e7 ff ff       	call   c000268a <move_window>
c0003ec4:	89 c6                	mov    esi,eax
c0003ec6:	85 c0                	test   eax,eax
c0003ec8:	75 70                	jne    c0003f3a <dir_register+0x17e>
c0003eca:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003ecf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ed2:	83 ec 0c             	sub    esp,0xc
c0003ed5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ed8:	55                   	push   ebp
c0003ed9:	e8 39 e5 ff ff       	call   c0002417 <put_lfn>
c0003ede:	31 d2                	xor    edx,edx
c0003ee0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ee4:	89 d8                	mov    eax,ebx
c0003ee6:	e8 0e fa ff ff       	call   c00038f9 <dir_next>
c0003eeb:	83 c4 10             	add    esp,0x10
c0003eee:	89 c6                	mov    esi,eax
c0003ef0:	85 c0                	test   eax,eax
c0003ef2:	75 46                	jne    c0003f3a <dir_register+0x17e>
c0003ef4:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003ef8:	75 c0                	jne    c0003eba <dir_register+0xfe>
c0003efa:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003efd:	89 f8                	mov    eax,edi
c0003eff:	e8 86 e7 ff ff       	call   c000268a <move_window>
c0003f04:	89 c6                	mov    esi,eax
c0003f06:	85 c0                	test   eax,eax
c0003f08:	75 30                	jne    c0003f3a <dir_register+0x17e>
c0003f0a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f0d:	b9 20 00 00 00       	mov    ecx,0x20
c0003f12:	31 d2                	xor    edx,edx
c0003f14:	e8 4b e2 ff ff       	call   c0002164 <mem_set>
c0003f19:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f20:	b9 0b 00 00 00       	mov    ecx,0xb
c0003f25:	e8 25 e2 ff ff       	call   c000214f <mem_cpy>
c0003f2a:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003f2d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003f30:	83 e0 18             	and    eax,0x18
c0003f33:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003f36:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003f3a:	83 c4 2c             	add    esp,0x2c
c0003f3d:	89 f0                	mov    eax,esi
c0003f3f:	5b                   	pop    ebx
c0003f40:	5e                   	pop    esi
c0003f41:	5f                   	pop    edi
c0003f42:	5d                   	pop    ebp
c0003f43:	c3                   	ret    

c0003f44 <f_mount>:
c0003f44:	53                   	push   ebx
c0003f45:	83 ec 18             	sub    esp,0x18
c0003f48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003f4c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003f50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f54:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003f58:	e8 37 e6 ff ff       	call   c0002594 <get_ldnumber>
c0003f5d:	89 c2                	mov    edx,eax
c0003f5f:	b8 0b 00 00 00       	mov    eax,0xb
c0003f64:	85 d2                	test   edx,edx
c0003f66:	78 39                	js     c0003fa1 <f_mount+0x5d>
c0003f68:	8b 04 95 80 6c 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc9380]
c0003f6f:	85 c0                	test   eax,eax
c0003f71:	74 03                	je     c0003f76 <f_mount+0x32>
c0003f73:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003f76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003f7a:	85 c0                	test   eax,eax
c0003f7c:	74 03                	je     c0003f81 <f_mount+0x3d>
c0003f7e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003f81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003f85:	89 04 95 80 6c 03 c0 	mov    DWORD PTR [edx*4-0x3ffc9380],eax
c0003f8c:	31 c0                	xor    eax,eax
c0003f8e:	84 db                	test   bl,bl
c0003f90:	74 0f                	je     c0003fa1 <f_mount+0x5d>
c0003f92:	31 c9                	xor    ecx,ecx
c0003f94:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003f98:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003f9c:	e8 3c e8 ff ff       	call   c00027dd <mount_volume>
c0003fa1:	83 c4 18             	add    esp,0x18
c0003fa4:	5b                   	pop    ebx
c0003fa5:	c3                   	ret    

c0003fa6 <f_open>:
c0003fa6:	55                   	push   ebp
c0003fa7:	b8 09 00 00 00       	mov    eax,0x9
c0003fac:	57                   	push   edi
c0003fad:	56                   	push   esi
c0003fae:	53                   	push   ebx
c0003faf:	83 ec 5c             	sub    esp,0x5c
c0003fb2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003fb6:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003fba:	85 db                	test   ebx,ebx
c0003fbc:	0f 84 9f 02 00 00    	je     c0004261 <f_open+0x2bb>
c0003fc2:	89 fd                	mov    ebp,edi
c0003fc4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003fc8:	83 e5 3f             	and    ebp,0x3f
c0003fcb:	89 e8                	mov    eax,ebp
c0003fcd:	89 ee                	mov    esi,ebp
c0003fcf:	0f b6 c8             	movzx  ecx,al
c0003fd2:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003fd6:	e8 02 e8 ff ff       	call   c00027dd <mount_volume>
c0003fdb:	85 c0                	test   eax,eax
c0003fdd:	0f 85 78 02 00 00    	jne    c000425b <f_open+0x2b5>
c0003fe3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe7:	83 ec 0c             	sub    esp,0xc
c0003fea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003fee:	68 00 02 00 00       	push   0x200
c0003ff3:	e8 74 1f 00 00       	call   c0005f6c <ff_memalloc>
c0003ff8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ffc:	83 c4 10             	add    esp,0x10
c0003fff:	b8 11 00 00 00       	mov    eax,0x11
c0004004:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0004009:	0f 84 52 02 00 00    	je     c0004261 <f_open+0x2bb>
c000400f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004013:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004017:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000401b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c000401e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004022:	e8 00 fd ff ff       	call   c0003d27 <follow_path>
c0004027:	85 c0                	test   eax,eax
c0004029:	75 0c                	jne    c0004037 <f_open+0x91>
c000402b:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004030:	74 05                	je     c0004037 <f_open+0x91>
c0004032:	b8 06 00 00 00       	mov    eax,0x6
c0004037:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000403d:	0f 84 d5 00 00 00    	je     c0004118 <f_open+0x172>
c0004043:	85 c0                	test   eax,eax
c0004045:	74 21                	je     c0004068 <f_open+0xc2>
c0004047:	83 f8 04             	cmp    eax,0x4
c000404a:	0f 85 f0 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004050:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004054:	e8 63 fd ff ff       	call   c0003dbc <dir_register>
c0004059:	85 c0                	test   eax,eax
c000405b:	0f 85 df 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004061:	83 cd 08             	or     ebp,0x8
c0004064:	89 ee                	mov    esi,ebp
c0004066:	eb 2c                	jmp    c0004094 <f_open+0xee>
c0004068:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c000406c:	b8 07 00 00 00       	mov    eax,0x7
c0004071:	80 e2 11             	and    dl,0x11
c0004074:	0f 85 c6 01 00 00    	jne    c0004240 <f_open+0x29a>
c000407a:	b8 08 00 00 00       	mov    eax,0x8
c000407f:	f7 c7 04 00 00 00    	test   edi,0x4
c0004085:	0f 85 b5 01 00 00    	jne    c0004240 <f_open+0x29a>
c000408b:	83 e7 08             	and    edi,0x8
c000408e:	0f 84 b1 00 00 00    	je     c0004145 <f_open+0x19f>
c0004094:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004098:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000409c:	89 ea                	mov    edx,ebp
c000409e:	8a 00                	mov    al,BYTE PTR [eax]
c00040a0:	e8 6a f4 ff ff       	call   c000350f <ld_clust.isra.0>
c00040a5:	ba 00 00 21 50       	mov    edx,0x50210000
c00040aa:	89 c7                	mov    edi,eax
c00040ac:	8d 45 0e             	lea    eax,[ebp+0xe]
c00040af:	e8 98 e0 ff ff       	call   c000214c <st_dword>
c00040b4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00040b8:	31 c9                	xor    ecx,ecx
c00040ba:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c00040be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040c2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00040c6:	e8 6d f4 ff ff       	call   c0003538 <st_clust.isra.1>
c00040cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00040cf:	31 d2                	xor    edx,edx
c00040d1:	83 c0 1c             	add    eax,0x1c
c00040d4:	e8 73 e0 ff ff       	call   c000214c <st_dword>
c00040d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040dd:	85 ff                	test   edi,edi
c00040df:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00040e3:	74 60                	je     c0004145 <f_open+0x19f>
c00040e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040e9:	31 c9                	xor    ecx,ecx
c00040eb:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c00040ee:	89 fa                	mov    edx,edi
c00040f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00040f4:	e8 72 f7 ff ff       	call   c000386b <remove_chain>
c00040f9:	85 c0                	test   eax,eax
c00040fb:	0f 85 3f 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004101:	89 ea                	mov    edx,ebp
c0004103:	4f                   	dec    edi
c0004104:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004108:	e8 7d e5 ff ff       	call   c000268a <move_window>
c000410d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004111:	85 c0                	test   eax,eax
c0004113:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0004116:	eb 27                	jmp    c000413f <f_open+0x199>
c0004118:	85 c0                	test   eax,eax
c000411a:	0f 85 20 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004120:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004124:	b8 04 00 00 00       	mov    eax,0x4
c0004129:	f6 c2 10             	test   dl,0x10
c000412c:	0f 85 0e 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004132:	83 e7 02             	and    edi,0x2
c0004135:	74 0e                	je     c0004145 <f_open+0x19f>
c0004137:	b8 07 00 00 00       	mov    eax,0x7
c000413c:	80 e2 01             	and    dl,0x1
c000413f:	0f 85 fb 00 00 00    	jne    c0004240 <f_open+0x29a>
c0004145:	f7 c6 08 00 00 00    	test   esi,0x8
c000414b:	74 03                	je     c0004150 <f_open+0x1aa>
c000414d:	83 ce 40             	or     esi,0x40
c0004150:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004154:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004158:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c000415b:	89 fa                	mov    edx,edi
c000415d:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0004160:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004163:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004166:	e8 a4 f3 ff ff       	call   c000350f <ld_clust.isra.0>
c000416b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000416e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004171:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004174:	e8 b7 df ff ff       	call   c0002130 <ld_dword>
c0004179:	89 2b                	mov    DWORD PTR [ebx],ebp
c000417b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000417e:	31 d2                	xor    edx,edx
c0004180:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004184:	b9 00 02 00 00       	mov    ecx,0x200
c0004189:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000418d:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004191:	89 f0                	mov    eax,esi
c0004193:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000419a:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000419d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00041a4:	89 f8                	mov    eax,edi
c00041a6:	e8 b9 df ff ff       	call   c0002164 <mem_set>
c00041ab:	83 e6 20             	and    esi,0x20
c00041ae:	75 07                	jne    c00041b7 <f_open+0x211>
c00041b0:	31 c0                	xor    eax,eax
c00041b2:	e9 89 00 00 00       	jmp    c0004240 <f_open+0x29a>
c00041b7:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00041ba:	85 ed                	test   ebp,ebp
c00041bc:	74 f2                	je     c00041b0 <f_open+0x20a>
c00041be:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c00041c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00041c5:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00041c8:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c00041cc:	c1 e6 09             	shl    esi,0x9
c00041cf:	39 ee                	cmp    esi,ebp
c00041d1:	73 1c                	jae    c00041ef <f_open+0x249>
c00041d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d5:	29 f5                	sub    ebp,esi
c00041d7:	e8 84 f3 ff ff       	call   c0003560 <get_fat.isra.2>
c00041dc:	89 c2                	mov    edx,eax
c00041de:	83 f8 01             	cmp    eax,0x1
c00041e1:	76 10                	jbe    c00041f3 <f_open+0x24d>
c00041e3:	83 f8 ff             	cmp    eax,0xffffffff
c00041e6:	75 e7                	jne    c00041cf <f_open+0x229>
c00041e8:	b8 01 00 00 00       	mov    eax,0x1
c00041ed:	eb 09                	jmp    c00041f8 <f_open+0x252>
c00041ef:	31 c0                	xor    eax,eax
c00041f1:	eb 05                	jmp    c00041f8 <f_open+0x252>
c00041f3:	b8 02 00 00 00       	mov    eax,0x2
c00041f8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00041fb:	85 c0                	test   eax,eax
c00041fd:	75 41                	jne    c0004240 <f_open+0x29a>
c00041ff:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0004205:	74 a9                	je     c00041b0 <f_open+0x20a>
c0004207:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000420b:	89 f0                	mov    eax,esi
c000420d:	e8 68 e1 ff ff       	call   c000237a <clst2sect>
c0004212:	89 c2                	mov    edx,eax
c0004214:	b8 02 00 00 00       	mov    eax,0x2
c0004219:	85 d2                	test   edx,edx
c000421b:	74 23                	je     c0004240 <f_open+0x29a>
c000421d:	c1 ed 09             	shr    ebp,0x9
c0004220:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0004224:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004227:	6a 01                	push   0x1
c0004229:	50                   	push   eax
c000422a:	57                   	push   edi
c000422b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000422f:	50                   	push   eax
c0004230:	e8 a3 de ff ff       	call   c00020d8 <disk_read>
c0004235:	83 c4 10             	add    esp,0x10
c0004238:	85 c0                	test   eax,eax
c000423a:	0f 95 c0             	setne  al
c000423d:	0f b6 c0             	movzx  eax,al
c0004240:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004244:	83 ec 0c             	sub    esp,0xc
c0004247:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000424b:	e8 34 1d 00 00       	call   c0005f84 <ff_memfree>
c0004250:	83 c4 10             	add    esp,0x10
c0004253:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004257:	85 c0                	test   eax,eax
c0004259:	74 06                	je     c0004261 <f_open+0x2bb>
c000425b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004261:	83 c4 5c             	add    esp,0x5c
c0004264:	5b                   	pop    ebx
c0004265:	5e                   	pop    esi
c0004266:	5f                   	pop    edi
c0004267:	5d                   	pop    ebp
c0004268:	c3                   	ret    

c0004269 <f_read>:
c0004269:	55                   	push   ebp
c000426a:	57                   	push   edi
c000426b:	56                   	push   esi
c000426c:	53                   	push   ebx
c000426d:	83 ec 2c             	sub    esp,0x2c
c0004270:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004274:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004278:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000427e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004282:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004286:	89 d8                	mov    eax,ebx
c0004288:	e8 54 e3 ff ff       	call   c00025e1 <validate>
c000428d:	89 c5                	mov    ebp,eax
c000428f:	85 c0                	test   eax,eax
c0004291:	0f 85 c7 01 00 00    	jne    c000445e <f_read+0x1f5>
c0004297:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000429b:	85 ed                	test   ebp,ebp
c000429d:	0f 85 bb 01 00 00    	jne    c000445e <f_read+0x1f5>
c00042a3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c00042a7:	0f 84 ac 01 00 00    	je     c0004459 <f_read+0x1f0>
c00042ad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00042b0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c00042b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00042b7:	39 f0                	cmp    eax,esi
c00042b9:	0f 86 b0 00 00 00    	jbe    c000436f <f_read+0x106>
c00042bf:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00042c3:	e9 a7 00 00 00       	jmp    c000436f <f_read+0x106>
c00042c8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cb:	a9 ff 01 00 00       	test   eax,0x1ff
c00042d0:	0f 85 56 01 00 00    	jne    c000442c <f_read+0x1c3>
c00042d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00042da:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c00042de:	89 c2                	mov    edx,eax
c00042e0:	4f                   	dec    edi
c00042e1:	c1 ea 09             	shr    edx,0x9
c00042e4:	21 d7                	and    edi,edx
c00042e6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00042ea:	0f 84 8f 00 00 00    	je     c000437f <f_read+0x116>
c00042f0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00042f4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042f7:	89 c8                	mov    eax,ecx
c00042f9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00042fd:	e8 78 e0 ff ff       	call   c000237a <clst2sect>
c0004302:	85 c0                	test   eax,eax
c0004304:	0f 84 8d 00 00 00    	je     c0004397 <f_read+0x12e>
c000430a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000430e:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0004316:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0004319:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000431d:	0f 86 bf 00 00 00    	jbe    c00043e2 <f_read+0x179>
c0004323:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0004327:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000432b:	c1 ee 09             	shr    esi,0x9
c000432e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004332:	01 f2                	add    edx,esi
c0004334:	39 c2                	cmp    edx,eax
c0004336:	76 06                	jbe    c000433e <f_read+0xd5>
c0004338:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000433c:	89 c6                	mov    esi,eax
c000433e:	56                   	push   esi
c000433f:	57                   	push   edi
c0004340:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004344:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004348:	50                   	push   eax
c0004349:	e8 8a dd ff ff       	call   c00020d8 <disk_read>
c000434e:	83 c4 10             	add    esp,0x10
c0004351:	85 c0                	test   eax,eax
c0004353:	75 55                	jne    c00043aa <f_read+0x141>
c0004355:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004359:	75 65                	jne    c00043c0 <f_read+0x157>
c000435b:	c1 e6 09             	shl    esi,0x9
c000435e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004362:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004366:	01 30                	add    DWORD PTR [eax],esi
c0004368:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000436c:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000436f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004374:	0f 85 4e ff ff ff    	jne    c00042c8 <f_read+0x5f>
c000437a:	e9 df 00 00 00       	jmp    c000445e <f_read+0x1f5>
c000437f:	85 c0                	test   eax,eax
c0004381:	75 05                	jne    c0004388 <f_read+0x11f>
c0004383:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004386:	eb 0a                	jmp    c0004392 <f_read+0x129>
c0004388:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000438b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000438d:	e8 ce f1 ff ff       	call   c0003560 <get_fat.isra.2>
c0004392:	83 f8 01             	cmp    eax,0x1
c0004395:	77 0e                	ja     c00043a5 <f_read+0x13c>
c0004397:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000439b:	bd 02 00 00 00       	mov    ebp,0x2
c00043a0:	e9 b9 00 00 00       	jmp    c000445e <f_read+0x1f5>
c00043a5:	83 f8 ff             	cmp    eax,0xffffffff
c00043a8:	75 0e                	jne    c00043b8 <f_read+0x14f>
c00043aa:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043ae:	bd 01 00 00 00       	mov    ebp,0x1
c00043b3:	e9 a6 00 00 00       	jmp    c000445e <f_read+0x1f5>
c00043b8:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043bb:	e9 30 ff ff ff       	jmp    c00042f0 <f_read+0x87>
c00043c0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00043c3:	29 f8                	sub    eax,edi
c00043c5:	39 f0                	cmp    eax,esi
c00043c7:	73 92                	jae    c000435b <f_read+0xf2>
c00043c9:	c1 e0 09             	shl    eax,0x9
c00043cc:	8d 53 28             	lea    edx,[ebx+0x28]
c00043cf:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00043d3:	b9 00 02 00 00       	mov    ecx,0x200
c00043d8:	e8 72 dd ff ff       	call   c000214f <mem_cpy>
c00043dd:	e9 79 ff ff ff       	jmp    c000435b <f_read+0xf2>
c00043e2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00043e5:	39 f8                	cmp    eax,edi
c00043e7:	74 40                	je     c0004429 <f_read+0x1c0>
c00043e9:	8d 73 28             	lea    esi,[ebx+0x28]
c00043ec:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043f0:	74 1e                	je     c0004410 <f_read+0x1a7>
c00043f2:	6a 01                	push   0x1
c00043f4:	50                   	push   eax
c00043f5:	56                   	push   esi
c00043f6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043fa:	50                   	push   eax
c00043fb:	e8 ee dc ff ff       	call   c00020ee <disk_write>
c0004400:	83 c4 10             	add    esp,0x10
c0004403:	85 c0                	test   eax,eax
c0004405:	75 a3                	jne    c00043aa <f_read+0x141>
c0004407:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000440a:	83 e0 7f             	and    eax,0x7f
c000440d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004410:	6a 01                	push   0x1
c0004412:	57                   	push   edi
c0004413:	56                   	push   esi
c0004414:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004418:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000441c:	50                   	push   eax
c000441d:	e8 b6 dc ff ff       	call   c00020d8 <disk_read>
c0004422:	83 c4 10             	add    esp,0x10
c0004425:	85 c0                	test   eax,eax
c0004427:	75 81                	jne    c00043aa <f_read+0x141>
c0004429:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000442c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000442f:	ba 00 02 00 00       	mov    edx,0x200
c0004434:	25 ff 01 00 00       	and    eax,0x1ff
c0004439:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000443d:	29 c2                	sub    edx,eax
c000443f:	39 d6                	cmp    esi,edx
c0004441:	76 02                	jbe    c0004445 <f_read+0x1dc>
c0004443:	89 d6                	mov    esi,edx
c0004445:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0004449:	89 f1                	mov    ecx,esi
c000444b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000444f:	e8 fb dc ff ff       	call   c000214f <mem_cpy>
c0004454:	e9 05 ff ff ff       	jmp    c000435e <f_read+0xf5>
c0004459:	bd 07 00 00 00       	mov    ebp,0x7
c000445e:	83 c4 2c             	add    esp,0x2c
c0004461:	89 e8                	mov    eax,ebp
c0004463:	5b                   	pop    ebx
c0004464:	5e                   	pop    esi
c0004465:	5f                   	pop    edi
c0004466:	5d                   	pop    ebp
c0004467:	c3                   	ret    

c0004468 <f_write>:
c0004468:	55                   	push   ebp
c0004469:	57                   	push   edi
c000446a:	56                   	push   esi
c000446b:	53                   	push   ebx
c000446c:	83 ec 2c             	sub    esp,0x2c
c000446f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004473:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004477:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000447d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004481:	89 d8                	mov    eax,ebx
c0004483:	e8 59 e1 ff ff       	call   c00025e1 <validate>
c0004488:	89 c5                	mov    ebp,eax
c000448a:	85 c0                	test   eax,eax
c000448c:	0f 85 14 02 00 00    	jne    c00046a6 <f_write+0x23e>
c0004492:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004496:	85 ed                	test   ebp,ebp
c0004498:	0f 85 08 02 00 00    	jne    c00046a6 <f_write+0x23e>
c000449e:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044a2:	0f 84 f9 01 00 00    	je     c00046a1 <f_write+0x239>
c00044a8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044ab:	89 c7                	mov    edi,eax
c00044ad:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c00044b1:	0f 83 ef 00 00 00    	jae    c00045a6 <f_write+0x13e>
c00044b7:	f7 d0                	not    eax
c00044b9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00044bd:	e9 e4 00 00 00       	jmp    c00045a6 <f_write+0x13e>
c00044c2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044c5:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c00044cb:	0f 85 9a 01 00 00    	jne    c000466b <f_write+0x203>
c00044d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d5:	89 d1                	mov    ecx,edx
c00044d7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00044db:	c1 e9 09             	shr    ecx,0x9
c00044de:	48                   	dec    eax
c00044df:	21 c8                	and    eax,ecx
c00044e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00044e5:	0f 84 c8 00 00 00    	je     c00045b3 <f_write+0x14b>
c00044eb:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00044ef:	0f 85 22 01 00 00    	jne    c0004617 <f_write+0x1af>
c00044f5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00044f9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044fc:	89 c8                	mov    eax,ecx
c00044fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004502:	e8 73 de ff ff       	call   c000237a <clst2sect>
c0004507:	85 c0                	test   eax,eax
c0004509:	0f 84 d2 00 00 00    	je     c00045e1 <f_write+0x179>
c000450f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004513:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004517:	01 c7                	add    edi,eax
c0004519:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0004521:	0f 86 1c 01 00 00    	jbe    c0004643 <f_write+0x1db>
c0004527:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000452b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000452f:	c1 ee 09             	shr    esi,0x9
c0004532:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004536:	01 f2                	add    edx,esi
c0004538:	39 c2                	cmp    edx,eax
c000453a:	76 06                	jbe    c0004542 <f_write+0xda>
c000453c:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004540:	89 c6                	mov    esi,eax
c0004542:	56                   	push   esi
c0004543:	57                   	push   edi
c0004544:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004548:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000454c:	50                   	push   eax
c000454d:	e8 9c db ff ff       	call   c00020ee <disk_write>
c0004552:	83 c4 10             	add    esp,0x10
c0004555:	85 c0                	test   eax,eax
c0004557:	0f 85 97 00 00 00    	jne    c00045f4 <f_write+0x18c>
c000455d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004560:	29 fa                	sub    edx,edi
c0004562:	39 f2                	cmp    edx,esi
c0004564:	73 1d                	jae    c0004583 <f_write+0x11b>
c0004566:	8d 43 28             	lea    eax,[ebx+0x28]
c0004569:	c1 e2 09             	shl    edx,0x9
c000456c:	b9 00 02 00 00       	mov    ecx,0x200
c0004571:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004575:	e8 d5 db ff ff       	call   c000214f <mem_cpy>
c000457a:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000457d:	83 e0 7f             	and    eax,0x7f
c0004580:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004583:	c1 e6 09             	shl    esi,0x9
c0004586:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000458a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000458e:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004592:	01 30                	add    DWORD PTR [eax],esi
c0004594:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004597:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000459a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000459d:	39 f0                	cmp    eax,esi
c000459f:	73 02                	jae    c00045a3 <f_write+0x13b>
c00045a1:	89 f0                	mov    eax,esi
c00045a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045a6:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00045ab:	0f 85 11 ff ff ff    	jne    c00044c2 <f_write+0x5a>
c00045b1:	eb 1b                	jmp    c00045ce <f_write+0x166>
c00045b3:	85 d2                	test   edx,edx
c00045b5:	75 09                	jne    c00045c0 <f_write+0x158>
c00045b7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00045ba:	85 c0                	test   eax,eax
c00045bc:	75 1e                	jne    c00045dc <f_write+0x174>
c00045be:	eb 03                	jmp    c00045c3 <f_write+0x15b>
c00045c0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045c3:	89 d8                	mov    eax,ebx
c00045c5:	e8 62 f1 ff ff       	call   c000372c <create_chain>
c00045ca:	85 c0                	test   eax,eax
c00045cc:	75 0e                	jne    c00045dc <f_write+0x174>
c00045ce:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d1:	83 c8 40             	or     eax,0x40
c00045d4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045d7:	e9 ca 00 00 00       	jmp    c00046a6 <f_write+0x23e>
c00045dc:	83 f8 01             	cmp    eax,0x1
c00045df:	75 0e                	jne    c00045ef <f_write+0x187>
c00045e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00045e5:	bd 02 00 00 00       	mov    ebp,0x2
c00045ea:	e9 b7 00 00 00       	jmp    c00046a6 <f_write+0x23e>
c00045ef:	83 f8 ff             	cmp    eax,0xffffffff
c00045f2:	75 0e                	jne    c0004602 <f_write+0x19a>
c00045f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00045f8:	bd 01 00 00 00       	mov    ebp,0x1
c00045fd:	e9 a4 00 00 00       	jmp    c00046a6 <f_write+0x23e>
c0004602:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004605:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004609:	0f 85 dc fe ff ff    	jne    c00044eb <f_write+0x83>
c000460f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004612:	e9 d4 fe ff ff       	jmp    c00044eb <f_write+0x83>
c0004617:	6a 01                	push   0x1
c0004619:	8d 43 28             	lea    eax,[ebx+0x28]
c000461c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000461f:	50                   	push   eax
c0004620:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004624:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004628:	50                   	push   eax
c0004629:	e8 c0 da ff ff       	call   c00020ee <disk_write>
c000462e:	83 c4 10             	add    esp,0x10
c0004631:	85 c0                	test   eax,eax
c0004633:	75 bf                	jne    c00045f4 <f_write+0x18c>
c0004635:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004638:	83 e0 7f             	and    eax,0x7f
c000463b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000463e:	e9 b2 fe ff ff       	jmp    c00044f5 <f_write+0x8d>
c0004643:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c0004646:	74 20                	je     c0004668 <f_write+0x200>
c0004648:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000464b:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000464e:	76 18                	jbe    c0004668 <f_write+0x200>
c0004650:	6a 01                	push   0x1
c0004652:	8d 43 28             	lea    eax,[ebx+0x28]
c0004655:	57                   	push   edi
c0004656:	50                   	push   eax
c0004657:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000465b:	50                   	push   eax
c000465c:	e8 77 da ff ff       	call   c00020d8 <disk_read>
c0004661:	83 c4 10             	add    esp,0x10
c0004664:	85 c0                	test   eax,eax
c0004666:	75 8c                	jne    c00045f4 <f_write+0x18c>
c0004668:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000466b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000466e:	ba 00 02 00 00       	mov    edx,0x200
c0004673:	25 ff 01 00 00       	and    eax,0x1ff
c0004678:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000467c:	29 c2                	sub    edx,eax
c000467e:	39 d6                	cmp    esi,edx
c0004680:	76 02                	jbe    c0004684 <f_write+0x21c>
c0004682:	89 d6                	mov    esi,edx
c0004684:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004688:	89 f1                	mov    ecx,esi
c000468a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000468e:	e8 bc da ff ff       	call   c000214f <mem_cpy>
c0004693:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004696:	83 c8 80             	or     eax,0xffffff80
c0004699:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000469c:	e9 e5 fe ff ff       	jmp    c0004586 <f_write+0x11e>
c00046a1:	bd 07 00 00 00       	mov    ebp,0x7
c00046a6:	83 c4 2c             	add    esp,0x2c
c00046a9:	89 e8                	mov    eax,ebp
c00046ab:	5b                   	pop    ebx
c00046ac:	5e                   	pop    esi
c00046ad:	5f                   	pop    edi
c00046ae:	5d                   	pop    ebp
c00046af:	c3                   	ret    

c00046b0 <f_sync>:
c00046b0:	56                   	push   esi
c00046b1:	53                   	push   ebx
c00046b2:	83 ec 14             	sub    esp,0x14
c00046b5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046b9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046bd:	89 d8                	mov    eax,ebx
c00046bf:	e8 1d df ff ff       	call   c00025e1 <validate>
c00046c4:	85 c0                	test   eax,eax
c00046c6:	0f 85 a3 00 00 00    	jne    c000476f <f_sync+0xbf>
c00046cc:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00046cf:	f6 c2 40             	test   dl,0x40
c00046d2:	0f 84 97 00 00 00    	je     c000476f <f_sync+0xbf>
c00046d8:	80 e2 80             	and    dl,0x80
c00046db:	74 2e                	je     c000470b <f_sync+0x5b>
c00046dd:	6a 01                	push   0x1
c00046df:	8d 43 28             	lea    eax,[ebx+0x28]
c00046e2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00046e5:	50                   	push   eax
c00046e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046ea:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00046ee:	50                   	push   eax
c00046ef:	e8 fa d9 ff ff       	call   c00020ee <disk_write>
c00046f4:	83 c4 10             	add    esp,0x10
c00046f7:	89 c2                	mov    edx,eax
c00046f9:	b8 01 00 00 00       	mov    eax,0x1
c00046fe:	85 d2                	test   edx,edx
c0004700:	75 6d                	jne    c000476f <f_sync+0xbf>
c0004702:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004705:	83 e0 7f             	and    eax,0x7f
c0004708:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000470b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000470e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004712:	e8 73 df ff ff       	call   c000268a <move_window>
c0004717:	85 c0                	test   eax,eax
c0004719:	75 54                	jne    c000476f <f_sync+0xbf>
c000471b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c000471e:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c0004721:	89 f2                	mov    edx,esi
c0004723:	83 c8 20             	or     eax,0x20
c0004726:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004729:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000472c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000472e:	e8 05 ee ff ff       	call   c0003538 <st_clust.isra.1>
c0004733:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004736:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004739:	e8 0e da ff ff       	call   c000214c <st_dword>
c000473e:	8d 46 16             	lea    eax,[esi+0x16]
c0004741:	ba 00 00 21 50       	mov    edx,0x50210000
c0004746:	e8 01 da ff ff       	call   c000214c <st_dword>
c000474b:	31 d2                	xor    edx,edx
c000474d:	8d 46 12             	lea    eax,[esi+0x12]
c0004750:	e8 f3 d9 ff ff       	call   c0002148 <st_word>
c0004755:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004759:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000475d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004761:	e8 5b e9 ff ff       	call   c00030c1 <sync_fs>
c0004766:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004769:	83 e2 bf             	and    edx,0xffffffbf
c000476c:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000476f:	83 c4 14             	add    esp,0x14
c0004772:	5b                   	pop    ebx
c0004773:	5e                   	pop    esi
c0004774:	c3                   	ret    

c0004775 <f_close>:
c0004775:	53                   	push   ebx
c0004776:	83 ec 24             	sub    esp,0x24
c0004779:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000477d:	53                   	push   ebx
c000477e:	e8 2d ff ff ff       	call   c00046b0 <f_sync>
c0004783:	83 c4 10             	add    esp,0x10
c0004786:	85 c0                	test   eax,eax
c0004788:	75 15                	jne    c000479f <f_close+0x2a>
c000478a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000478e:	89 d8                	mov    eax,ebx
c0004790:	e8 4c de ff ff       	call   c00025e1 <validate>
c0004795:	85 c0                	test   eax,eax
c0004797:	75 06                	jne    c000479f <f_close+0x2a>
c0004799:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000479f:	83 c4 18             	add    esp,0x18
c00047a2:	5b                   	pop    ebx
c00047a3:	c3                   	ret    

c00047a4 <f_lseek>:
c00047a4:	55                   	push   ebp
c00047a5:	57                   	push   edi
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 2c             	sub    esp,0x2c
c00047ab:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00047af:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00047b3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00047b7:	89 d8                	mov    eax,ebx
c00047b9:	e8 23 de ff ff       	call   c00025e1 <validate>
c00047be:	89 c5                	mov    ebp,eax
c00047c0:	85 c0                	test   eax,eax
c00047c2:	0f 85 83 01 00 00    	jne    c000494b <f_lseek+0x1a7>
c00047c8:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00047cc:	85 ed                	test   ebp,ebp
c00047ce:	0f 85 77 01 00 00    	jne    c000494b <f_lseek+0x1a7>
c00047d4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00047d7:	39 f0                	cmp    eax,esi
c00047d9:	73 08                	jae    c00047e3 <f_lseek+0x3f>
c00047db:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047df:	75 02                	jne    c00047e3 <f_lseek+0x3f>
c00047e1:	89 c6                	mov    esi,eax
c00047e3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00047e6:	85 f6                	test   esi,esi
c00047e8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00047ef:	75 07                	jne    c00047f8 <f_lseek+0x54>
c00047f1:	31 f6                	xor    esi,esi
c00047f3:	e9 e2 00 00 00       	jmp    c00048da <f_lseek+0x136>
c00047f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047fc:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c0004800:	c1 e7 09             	shl    edi,0x9
c0004803:	85 c9                	test   ecx,ecx
c0004805:	74 28                	je     c000482f <f_lseek+0x8b>
c0004807:	49                   	dec    ecx
c0004808:	31 d2                	xor    edx,edx
c000480a:	8d 46 ff             	lea    eax,[esi-0x1]
c000480d:	f7 f7                	div    edi
c000480f:	31 d2                	xor    edx,edx
c0004811:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004815:	89 c8                	mov    eax,ecx
c0004817:	f7 f7                	div    edi
c0004819:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000481d:	72 10                	jb     c000482f <f_lseek+0x8b>
c000481f:	89 f8                	mov    eax,edi
c0004821:	f7 d8                	neg    eax
c0004823:	21 c1                	and    ecx,eax
c0004825:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004828:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c000482b:	29 ce                	sub    esi,ecx
c000482d:	eb 3c                	jmp    c000486b <f_lseek+0xc7>
c000482f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004832:	85 c0                	test   eax,eax
c0004834:	75 32                	jne    c0004868 <f_lseek+0xc4>
c0004836:	31 d2                	xor    edx,edx
c0004838:	89 d8                	mov    eax,ebx
c000483a:	e8 ed ee ff ff       	call   c000372c <create_chain>
c000483f:	83 f8 01             	cmp    eax,0x1
c0004842:	75 0e                	jne    c0004852 <f_lseek+0xae>
c0004844:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004848:	bd 02 00 00 00       	mov    ebp,0x2
c000484d:	e9 f9 00 00 00       	jmp    c000494b <f_lseek+0x1a7>
c0004852:	83 f8 ff             	cmp    eax,0xffffffff
c0004855:	75 0e                	jne    c0004865 <f_lseek+0xc1>
c0004857:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000485b:	bd 01 00 00 00       	mov    ebp,0x1
c0004860:	e9 e6 00 00 00       	jmp    c000494b <f_lseek+0x1a7>
c0004865:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004868:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000486b:	85 c0                	test   eax,eax
c000486d:	74 82                	je     c00047f1 <f_lseek+0x4d>
c000486f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004872:	39 fe                	cmp    esi,edi
c0004874:	76 3d                	jbe    c00048b3 <f_lseek+0x10f>
c0004876:	01 fa                	add    edx,edi
c0004878:	29 fe                	sub    esi,edi
c000487a:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000487d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004881:	89 c2                	mov    edx,eax
c0004883:	74 0d                	je     c0004892 <f_lseek+0xee>
c0004885:	89 d8                	mov    eax,ebx
c0004887:	e8 a0 ee ff ff       	call   c000372c <create_chain>
c000488c:	85 c0                	test   eax,eax
c000488e:	75 09                	jne    c0004899 <f_lseek+0xf5>
c0004890:	eb 1f                	jmp    c00048b1 <f_lseek+0x10d>
c0004892:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004894:	e8 c7 ec ff ff       	call   c0003560 <get_fat.isra.2>
c0004899:	83 f8 ff             	cmp    eax,0xffffffff
c000489c:	74 b9                	je     c0004857 <f_lseek+0xb3>
c000489e:	83 f8 01             	cmp    eax,0x1
c00048a1:	76 a1                	jbe    c0004844 <f_lseek+0xa0>
c00048a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00048a7:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c00048aa:	76 98                	jbe    c0004844 <f_lseek+0xa0>
c00048ac:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00048af:	eb be                	jmp    c000486f <f_lseek+0xcb>
c00048b1:	31 f6                	xor    esi,esi
c00048b3:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c00048b6:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00048bc:	0f 84 2f ff ff ff    	je     c00047f1 <f_lseek+0x4d>
c00048c2:	89 c2                	mov    edx,eax
c00048c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048c8:	e8 ad da ff ff       	call   c000237a <clst2sect>
c00048cd:	85 c0                	test   eax,eax
c00048cf:	0f 84 6f ff ff ff    	je     c0004844 <f_lseek+0xa0>
c00048d5:	c1 ee 09             	shr    esi,0x9
c00048d8:	01 c6                	add    esi,eax
c00048da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00048dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00048e0:	76 0c                	jbe    c00048ee <f_lseek+0x14a>
c00048e2:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00048e5:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00048e8:	83 ca 40             	or     edx,0x40
c00048eb:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00048ee:	a9 ff 01 00 00       	test   eax,0x1ff
c00048f3:	74 56                	je     c000494b <f_lseek+0x1a7>
c00048f5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00048f8:	39 f0                	cmp    eax,esi
c00048fa:	74 4f                	je     c000494b <f_lseek+0x1a7>
c00048fc:	8d 7b 28             	lea    edi,[ebx+0x28]
c00048ff:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004903:	74 26                	je     c000492b <f_lseek+0x187>
c0004905:	6a 01                	push   0x1
c0004907:	50                   	push   eax
c0004908:	57                   	push   edi
c0004909:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000490d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004911:	50                   	push   eax
c0004912:	e8 d7 d7 ff ff       	call   c00020ee <disk_write>
c0004917:	83 c4 10             	add    esp,0x10
c000491a:	85 c0                	test   eax,eax
c000491c:	0f 85 35 ff ff ff    	jne    c0004857 <f_lseek+0xb3>
c0004922:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004925:	83 e0 7f             	and    eax,0x7f
c0004928:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000492b:	6a 01                	push   0x1
c000492d:	56                   	push   esi
c000492e:	57                   	push   edi
c000492f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004933:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004937:	50                   	push   eax
c0004938:	e8 9b d7 ff ff       	call   c00020d8 <disk_read>
c000493d:	83 c4 10             	add    esp,0x10
c0004940:	85 c0                	test   eax,eax
c0004942:	0f 85 0f ff ff ff    	jne    c0004857 <f_lseek+0xb3>
c0004948:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000494b:	83 c4 2c             	add    esp,0x2c
c000494e:	89 e8                	mov    eax,ebp
c0004950:	5b                   	pop    ebx
c0004951:	5e                   	pop    esi
c0004952:	5f                   	pop    edi
c0004953:	5d                   	pop    ebp
c0004954:	c3                   	ret    

c0004955 <f_opendir>:
c0004955:	56                   	push   esi
c0004956:	b8 09 00 00 00       	mov    eax,0x9
c000495b:	53                   	push   ebx
c000495c:	83 ec 24             	sub    esp,0x24
c000495f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004963:	85 db                	test   ebx,ebx
c0004965:	0f 84 af 00 00 00    	je     c0004a1a <f_opendir+0xc5>
c000496b:	31 c9                	xor    ecx,ecx
c000496d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004971:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004975:	e8 63 de ff ff       	call   c00027dd <mount_volume>
c000497a:	85 c0                	test   eax,eax
c000497c:	0f 85 92 00 00 00    	jne    c0004a14 <f_opendir+0xbf>
c0004982:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004986:	83 ec 0c             	sub    esp,0xc
c0004989:	89 03                	mov    DWORD PTR [ebx],eax
c000498b:	68 00 02 00 00       	push   0x200
c0004990:	e8 d7 15 00 00       	call   c0005f6c <ff_memalloc>
c0004995:	83 c4 10             	add    esp,0x10
c0004998:	89 c6                	mov    esi,eax
c000499a:	b8 11 00 00 00       	mov    eax,0x11
c000499f:	85 f6                	test   esi,esi
c00049a1:	74 77                	je     c0004a1a <f_opendir+0xc5>
c00049a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049a7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00049ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049ae:	89 d8                	mov    eax,ebx
c00049b0:	e8 72 f3 ff ff       	call   c0003d27 <follow_path>
c00049b5:	85 c0                	test   eax,eax
c00049b7:	75 37                	jne    c00049f0 <f_opendir+0x9b>
c00049b9:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c00049bd:	75 1c                	jne    c00049db <f_opendir+0x86>
c00049bf:	b8 05 00 00 00       	mov    eax,0x5
c00049c4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00049c8:	74 26                	je     c00049f0 <f_opendir+0x9b>
c00049ca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00049cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049d1:	8a 00                	mov    al,BYTE PTR [eax]
c00049d3:	e8 37 eb ff ff       	call   c000350f <ld_clust.isra.0>
c00049d8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00049db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049df:	31 d2                	xor    edx,edx
c00049e1:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00049e5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00049e9:	89 d8                	mov    eax,ebx
c00049eb:	e8 74 ec ff ff       	call   c0003664 <dir_sdi>
c00049f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049f4:	83 ec 0c             	sub    esp,0xc
c00049f7:	56                   	push   esi
c00049f8:	e8 87 15 00 00       	call   c0005f84 <ff_memfree>
c00049fd:	83 c4 10             	add    esp,0x10
c0004a00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a04:	83 f8 04             	cmp    eax,0x4
c0004a07:	74 06                	je     c0004a0f <f_opendir+0xba>
c0004a09:	85 c0                	test   eax,eax
c0004a0b:	74 0d                	je     c0004a1a <f_opendir+0xc5>
c0004a0d:	eb 05                	jmp    c0004a14 <f_opendir+0xbf>
c0004a0f:	b8 05 00 00 00       	mov    eax,0x5
c0004a14:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004a1a:	83 c4 24             	add    esp,0x24
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_closedir>:
c0004a20:	53                   	push   ebx
c0004a21:	83 ec 18             	sub    esp,0x18
c0004a24:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004a28:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004a2c:	89 d8                	mov    eax,ebx
c0004a2e:	e8 ae db ff ff       	call   c00025e1 <validate>
c0004a33:	85 c0                	test   eax,eax
c0004a35:	75 06                	jne    c0004a3d <f_closedir+0x1d>
c0004a37:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004a3d:	83 c4 18             	add    esp,0x18
c0004a40:	5b                   	pop    ebx
c0004a41:	c3                   	ret    

c0004a42 <f_readdir>:
c0004a42:	57                   	push   edi
c0004a43:	56                   	push   esi
c0004a44:	53                   	push   ebx
c0004a45:	83 ec 20             	sub    esp,0x20
c0004a48:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004a4c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004a50:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a54:	89 d8                	mov    eax,ebx
c0004a56:	e8 86 db ff ff       	call   c00025e1 <validate>
c0004a5b:	85 c0                	test   eax,eax
c0004a5d:	75 6e                	jne    c0004acd <f_readdir+0x8b>
c0004a5f:	85 ff                	test   edi,edi
c0004a61:	75 0b                	jne    c0004a6e <f_readdir+0x2c>
c0004a63:	31 d2                	xor    edx,edx
c0004a65:	89 d8                	mov    eax,ebx
c0004a67:	e8 f8 eb ff ff       	call   c0003664 <dir_sdi>
c0004a6c:	eb 5f                	jmp    c0004acd <f_readdir+0x8b>
c0004a6e:	83 ec 0c             	sub    esp,0xc
c0004a71:	68 00 02 00 00       	push   0x200
c0004a76:	e8 f1 14 00 00       	call   c0005f6c <ff_memalloc>
c0004a7b:	83 c4 10             	add    esp,0x10
c0004a7e:	89 c6                	mov    esi,eax
c0004a80:	b8 11 00 00 00       	mov    eax,0x11
c0004a85:	85 f6                	test   esi,esi
c0004a87:	74 44                	je     c0004acd <f_readdir+0x8b>
c0004a89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a8d:	31 d2                	xor    edx,edx
c0004a8f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004a92:	89 d8                	mov    eax,ebx
c0004a94:	e8 ca ef ff ff       	call   c0003a63 <dir_read>
c0004a99:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004a9e:	75 19                	jne    c0004ab9 <f_readdir+0x77>
c0004aa0:	89 fa                	mov    edx,edi
c0004aa2:	89 d8                	mov    eax,ebx
c0004aa4:	e8 70 e8 ff ff       	call   c0003319 <get_fileinfo>
c0004aa9:	31 d2                	xor    edx,edx
c0004aab:	89 d8                	mov    eax,ebx
c0004aad:	e8 47 ee ff ff       	call   c00038f9 <dir_next>
c0004ab2:	83 f8 04             	cmp    eax,0x4
c0004ab5:	75 02                	jne    c0004ab9 <f_readdir+0x77>
c0004ab7:	31 c0                	xor    eax,eax
c0004ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004abd:	83 ec 0c             	sub    esp,0xc
c0004ac0:	56                   	push   esi
c0004ac1:	e8 be 14 00 00       	call   c0005f84 <ff_memfree>
c0004ac6:	83 c4 10             	add    esp,0x10
c0004ac9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004acd:	83 c4 20             	add    esp,0x20
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	c3                   	ret    

c0004ad4 <f_stat>:
c0004ad4:	57                   	push   edi
c0004ad5:	31 c9                	xor    ecx,ecx
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 30             	sub    esp,0x30
c0004adc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004ae0:	89 e2                	mov    edx,esp
c0004ae2:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ae6:	e8 f2 dc ff ff       	call   c00027dd <mount_volume>
c0004aeb:	89 c3                	mov    ebx,eax
c0004aed:	85 c0                	test   eax,eax
c0004aef:	75 59                	jne    c0004b4a <f_stat+0x76>
c0004af1:	83 ec 0c             	sub    esp,0xc
c0004af4:	bb 11 00 00 00       	mov    ebx,0x11
c0004af9:	68 00 02 00 00       	push   0x200
c0004afe:	e8 69 14 00 00       	call   c0005f6c <ff_memalloc>
c0004b03:	83 c4 10             	add    esp,0x10
c0004b06:	89 c6                	mov    esi,eax
c0004b08:	85 c0                	test   eax,eax
c0004b0a:	74 3e                	je     c0004b4a <f_stat+0x76>
c0004b0c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004b0f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004b13:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004b16:	89 e0                	mov    eax,esp
c0004b18:	e8 0a f2 ff ff       	call   c0003d27 <follow_path>
c0004b1d:	89 c3                	mov    ebx,eax
c0004b1f:	85 c0                	test   eax,eax
c0004b21:	75 1b                	jne    c0004b3e <f_stat+0x6a>
c0004b23:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004b28:	75 0f                	jne    c0004b39 <f_stat+0x65>
c0004b2a:	85 ff                	test   edi,edi
c0004b2c:	74 10                	je     c0004b3e <f_stat+0x6a>
c0004b2e:	89 fa                	mov    edx,edi
c0004b30:	89 e0                	mov    eax,esp
c0004b32:	e8 e2 e7 ff ff       	call   c0003319 <get_fileinfo>
c0004b37:	eb 05                	jmp    c0004b3e <f_stat+0x6a>
c0004b39:	bb 06 00 00 00       	mov    ebx,0x6
c0004b3e:	83 ec 0c             	sub    esp,0xc
c0004b41:	56                   	push   esi
c0004b42:	e8 3d 14 00 00       	call   c0005f84 <ff_memfree>
c0004b47:	83 c4 10             	add    esp,0x10
c0004b4a:	83 c4 30             	add    esp,0x30
c0004b4d:	89 d8                	mov    eax,ebx
c0004b4f:	5b                   	pop    ebx
c0004b50:	5e                   	pop    esi
c0004b51:	5f                   	pop    edi
c0004b52:	c3                   	ret    

c0004b53 <f_getfree>:
c0004b53:	55                   	push   ebp
c0004b54:	31 c9                	xor    ecx,ecx
c0004b56:	57                   	push   edi
c0004b57:	56                   	push   esi
c0004b58:	53                   	push   ebx
c0004b59:	83 ec 2c             	sub    esp,0x2c
c0004b5c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b60:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004b64:	e8 74 dc ff ff       	call   c00027dd <mount_volume>
c0004b69:	89 c7                	mov    edi,eax
c0004b6b:	85 c0                	test   eax,eax
c0004b6d:	0f 85 df 00 00 00    	jne    c0004c52 <f_getfree+0xff>
c0004b73:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004b77:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004b7b:	89 30                	mov    DWORD PTR [eax],esi
c0004b7d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004b80:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004b83:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004b86:	39 d0                	cmp    eax,edx
c0004b88:	77 0b                	ja     c0004b95 <f_getfree+0x42>
c0004b8a:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004b8e:	89 01                	mov    DWORD PTR [ecx],eax
c0004b90:	e9 bd 00 00 00       	jmp    c0004c52 <f_getfree+0xff>
c0004b95:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004b98:	75 29                	jne    c0004bc3 <f_getfree+0x70>
c0004b9a:	bd 02 00 00 00       	mov    ebp,0x2
c0004b9f:	31 db                	xor    ebx,ebx
c0004ba1:	89 ea                	mov    edx,ebp
c0004ba3:	89 f0                	mov    eax,esi
c0004ba5:	e8 b6 e9 ff ff       	call   c0003560 <get_fat.isra.2>
c0004baa:	83 f8 ff             	cmp    eax,0xffffffff
c0004bad:	74 7d                	je     c0004c2c <f_getfree+0xd9>
c0004baf:	83 f8 01             	cmp    eax,0x1
c0004bb2:	74 7f                	je     c0004c33 <f_getfree+0xe0>
c0004bb4:	83 d3 00             	adc    ebx,0x0
c0004bb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bbb:	45                   	inc    ebp
c0004bbc:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004bbf:	77 e0                	ja     c0004ba1 <f_getfree+0x4e>
c0004bc1:	eb 79                	jmp    c0004c3c <f_getfree+0xe9>
c0004bc3:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004bc6:	31 db                	xor    ebx,ebx
c0004bc8:	31 f6                	xor    esi,esi
c0004bca:	85 f6                	test   esi,esi
c0004bcc:	75 18                	jne    c0004be6 <f_getfree+0x93>
c0004bce:	8d 42 01             	lea    eax,[edx+0x1]
c0004bd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bd9:	e8 ac da ff ff       	call   c000268a <move_window>
c0004bde:	85 c0                	test   eax,eax
c0004be0:	75 58                	jne    c0004c3a <f_getfree+0xe7>
c0004be2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004bea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004bee:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004bf2:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004bf5:	75 13                	jne    c0004c0a <f_getfree+0xb7>
c0004bf7:	e8 27 d5 ff ff       	call   c0002123 <ld_word>
c0004bfc:	0f b7 c0             	movzx  eax,ax
c0004bff:	83 f8 01             	cmp    eax,0x1
c0004c02:	83 d3 00             	adc    ebx,0x0
c0004c05:	83 c6 02             	add    esi,0x2
c0004c08:	eb 13                	jmp    c0004c1d <f_getfree+0xca>
c0004c0a:	e8 21 d5 ff ff       	call   c0002130 <ld_dword>
c0004c0f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004c14:	83 f8 01             	cmp    eax,0x1
c0004c17:	83 d3 00             	adc    ebx,0x0
c0004c1a:	83 c6 04             	add    esi,0x4
c0004c1d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004c23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004c27:	4d                   	dec    ebp
c0004c28:	75 a0                	jne    c0004bca <f_getfree+0x77>
c0004c2a:	eb 10                	jmp    c0004c3c <f_getfree+0xe9>
c0004c2c:	bf 01 00 00 00       	mov    edi,0x1
c0004c31:	eb 09                	jmp    c0004c3c <f_getfree+0xe9>
c0004c33:	bf 02 00 00 00       	mov    edi,0x2
c0004c38:	eb 02                	jmp    c0004c3c <f_getfree+0xe9>
c0004c3a:	89 c7                	mov    edi,eax
c0004c3c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004c40:	89 18                	mov    DWORD PTR [eax],ebx
c0004c42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c46:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004c49:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004c4c:	83 ca 01             	or     edx,0x1
c0004c4f:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004c52:	83 c4 2c             	add    esp,0x2c
c0004c55:	89 f8                	mov    eax,edi
c0004c57:	5b                   	pop    ebx
c0004c58:	5e                   	pop    esi
c0004c59:	5f                   	pop    edi
c0004c5a:	5d                   	pop    ebp
c0004c5b:	c3                   	ret    

c0004c5c <f_truncate>:
c0004c5c:	56                   	push   esi
c0004c5d:	53                   	push   ebx
c0004c5e:	83 ec 14             	sub    esp,0x14
c0004c61:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004c65:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c69:	89 d8                	mov    eax,ebx
c0004c6b:	e8 71 d9 ff ff       	call   c00025e1 <validate>
c0004c70:	89 c6                	mov    esi,eax
c0004c72:	85 c0                	test   eax,eax
c0004c74:	0f 85 c4 00 00 00    	jne    c0004d3e <f_truncate+0xe2>
c0004c7a:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004c7e:	85 f6                	test   esi,esi
c0004c80:	0f 85 b8 00 00 00    	jne    c0004d3e <f_truncate+0xe2>
c0004c86:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004c8a:	0f 84 a9 00 00 00    	je     c0004d39 <f_truncate+0xdd>
c0004c90:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004c93:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004c96:	0f 83 a2 00 00 00    	jae    c0004d3e <f_truncate+0xe2>
c0004c9c:	85 c0                	test   eax,eax
c0004c9e:	75 15                	jne    c0004cb5 <f_truncate+0x59>
c0004ca0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ca3:	31 c9                	xor    ecx,ecx
c0004ca5:	89 d8                	mov    eax,ebx
c0004ca7:	e8 bf eb ff ff       	call   c000386b <remove_chain>
c0004cac:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004cb3:	eb 35                	jmp    c0004cea <f_truncate+0x8e>
c0004cb5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004cb8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004cba:	e8 a1 e8 ff ff       	call   c0003560 <get_fat.isra.2>
c0004cbf:	89 c2                	mov    edx,eax
c0004cc1:	b8 01 00 00 00       	mov    eax,0x1
c0004cc6:	83 fa ff             	cmp    edx,0xffffffff
c0004cc9:	74 1f                	je     c0004cea <f_truncate+0x8e>
c0004ccb:	b8 02 00 00 00       	mov    eax,0x2
c0004cd0:	83 fa 01             	cmp    edx,0x1
c0004cd3:	74 15                	je     c0004cea <f_truncate+0x8e>
c0004cd5:	31 c0                	xor    eax,eax
c0004cd7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004cdb:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004cde:	76 0a                	jbe    c0004cea <f_truncate+0x8e>
c0004ce0:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004ce3:	89 d8                	mov    eax,ebx
c0004ce5:	e8 81 eb ff ff       	call   c000386b <remove_chain>
c0004cea:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ced:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004cf0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004cf3:	83 ca 40             	or     edx,0x40
c0004cf6:	85 c0                	test   eax,eax
c0004cf8:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004cfb:	75 35                	jne    c0004d32 <f_truncate+0xd6>
c0004cfd:	80 e2 80             	and    dl,0x80
c0004d00:	74 3c                	je     c0004d3e <f_truncate+0xe2>
c0004d02:	6a 01                	push   0x1
c0004d04:	8d 43 28             	lea    eax,[ebx+0x28]
c0004d07:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004d0a:	50                   	push   eax
c0004d0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004d0f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004d13:	50                   	push   eax
c0004d14:	e8 d5 d3 ff ff       	call   c00020ee <disk_write>
c0004d19:	83 c4 10             	add    esp,0x10
c0004d1c:	85 c0                	test   eax,eax
c0004d1e:	75 0d                	jne    c0004d2d <f_truncate+0xd1>
c0004d20:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004d23:	31 f6                	xor    esi,esi
c0004d25:	83 e0 7f             	and    eax,0x7f
c0004d28:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004d2b:	eb 11                	jmp    c0004d3e <f_truncate+0xe2>
c0004d2d:	b8 01 00 00 00       	mov    eax,0x1
c0004d32:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004d35:	89 c6                	mov    esi,eax
c0004d37:	eb 05                	jmp    c0004d3e <f_truncate+0xe2>
c0004d39:	be 07 00 00 00       	mov    esi,0x7
c0004d3e:	89 f0                	mov    eax,esi
c0004d40:	83 c4 14             	add    esp,0x14
c0004d43:	5b                   	pop    ebx
c0004d44:	5e                   	pop    esi
c0004d45:	c3                   	ret    

c0004d46 <f_unlink>:
c0004d46:	55                   	push   ebp
c0004d47:	b9 02 00 00 00       	mov    ecx,0x2
c0004d4c:	57                   	push   edi
c0004d4d:	56                   	push   esi
c0004d4e:	53                   	push   ebx
c0004d4f:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004d55:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d59:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004d60:	e8 78 da ff ff       	call   c00027dd <mount_volume>
c0004d65:	85 c0                	test   eax,eax
c0004d67:	0f 85 f0 00 00 00    	jne    c0004e5d <f_unlink+0x117>
c0004d6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d71:	83 ec 0c             	sub    esp,0xc
c0004d74:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d78:	68 00 02 00 00       	push   0x200
c0004d7d:	e8 ea 11 00 00       	call   c0005f6c <ff_memalloc>
c0004d82:	83 c4 10             	add    esp,0x10
c0004d85:	89 c3                	mov    ebx,eax
c0004d87:	b8 11 00 00 00       	mov    eax,0x11
c0004d8c:	85 db                	test   ebx,ebx
c0004d8e:	0f 84 c9 00 00 00    	je     c0004e5d <f_unlink+0x117>
c0004d94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d98:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004d9f:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004da2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004da6:	e8 7c ef ff ff       	call   c0003d27 <follow_path>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 96 00 00 00    	jne    c0004e49 <f_unlink+0x103>
c0004db3:	b8 06 00 00 00       	mov    eax,0x6
c0004db8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004dbd:	0f 85 86 00 00 00    	jne    c0004e49 <f_unlink+0x103>
c0004dc3:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004dc8:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004dce:	74 07                	je     c0004dd7 <f_unlink+0x91>
c0004dd0:	b8 07 00 00 00       	mov    eax,0x7
c0004dd5:	eb 72                	jmp    c0004e49 <f_unlink+0x103>
c0004dd7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ddb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ddf:	8a 07                	mov    al,BYTE PTR [edi]
c0004de1:	e8 29 e7 ff ff       	call   c000350f <ld_clust.isra.0>
c0004de6:	83 e5 10             	and    ebp,0x10
c0004de9:	89 c6                	mov    esi,eax
c0004deb:	75 0f                	jne    c0004dfc <f_unlink+0xb6>
c0004ded:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004df1:	e8 95 ed ff ff       	call   c0003b8b <dir_remove>
c0004df6:	85 c0                	test   eax,eax
c0004df8:	74 2f                	je     c0004e29 <f_unlink+0xe3>
c0004dfa:	eb 4d                	jmp    c0004e49 <f_unlink+0x103>
c0004dfc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004e00:	31 d2                	xor    edx,edx
c0004e02:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004e06:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004e0a:	e8 55 e8 ff ff       	call   c0003664 <dir_sdi>
c0004e0f:	85 c0                	test   eax,eax
c0004e11:	75 36                	jne    c0004e49 <f_unlink+0x103>
c0004e13:	31 d2                	xor    edx,edx
c0004e15:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004e19:	e8 45 ec ff ff       	call   c0003a63 <dir_read>
c0004e1e:	85 c0                	test   eax,eax
c0004e20:	74 ae                	je     c0004dd0 <f_unlink+0x8a>
c0004e22:	83 f8 04             	cmp    eax,0x4
c0004e25:	75 22                	jne    c0004e49 <f_unlink+0x103>
c0004e27:	eb c4                	jmp    c0004ded <f_unlink+0xa7>
c0004e29:	85 f6                	test   esi,esi
c0004e2b:	75 0b                	jne    c0004e38 <f_unlink+0xf2>
c0004e2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e31:	e8 8b e2 ff ff       	call   c00030c1 <sync_fs>
c0004e36:	eb 11                	jmp    c0004e49 <f_unlink+0x103>
c0004e38:	31 c9                	xor    ecx,ecx
c0004e3a:	89 f2                	mov    edx,esi
c0004e3c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e40:	e8 26 ea ff ff       	call   c000386b <remove_chain>
c0004e45:	85 c0                	test   eax,eax
c0004e47:	74 e4                	je     c0004e2d <f_unlink+0xe7>
c0004e49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4d:	83 ec 0c             	sub    esp,0xc
c0004e50:	53                   	push   ebx
c0004e51:	e8 2e 11 00 00       	call   c0005f84 <ff_memfree>
c0004e56:	83 c4 10             	add    esp,0x10
c0004e59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5d:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004e63:	5b                   	pop    ebx
c0004e64:	5e                   	pop    esi
c0004e65:	5f                   	pop    edi
c0004e66:	5d                   	pop    ebp
c0004e67:	c3                   	ret    

c0004e68 <f_mkdir>:
c0004e68:	57                   	push   edi
c0004e69:	b9 02 00 00 00       	mov    ecx,0x2
c0004e6e:	56                   	push   esi
c0004e6f:	53                   	push   ebx
c0004e70:	83 ec 50             	sub    esp,0x50
c0004e73:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004e77:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e7b:	e8 5d d9 ff ff       	call   c00027dd <mount_volume>
c0004e80:	89 c3                	mov    ebx,eax
c0004e82:	85 c0                	test   eax,eax
c0004e84:	0f 85 70 01 00 00    	jne    c0004ffa <f_mkdir+0x192>
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	bb 11 00 00 00       	mov    ebx,0x11
c0004e93:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e97:	83 ec 0c             	sub    esp,0xc
c0004e9a:	68 00 02 00 00       	push   0x200
c0004e9f:	e8 c8 10 00 00       	call   c0005f6c <ff_memalloc>
c0004ea4:	83 c4 10             	add    esp,0x10
c0004ea7:	89 c7                	mov    edi,eax
c0004ea9:	85 c0                	test   eax,eax
c0004eab:	0f 84 49 01 00 00    	je     c0004ffa <f_mkdir+0x192>
c0004eb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004eb5:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004eb9:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004ebc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec0:	e8 62 ee ff ff       	call   c0003d27 <follow_path>
c0004ec5:	89 c3                	mov    ebx,eax
c0004ec7:	85 c0                	test   eax,eax
c0004ec9:	74 3e                	je     c0004f09 <f_mkdir+0xa1>
c0004ecb:	83 f8 04             	cmp    eax,0x4
c0004ece:	75 3e                	jne    c0004f0e <f_mkdir+0xa6>
c0004ed0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ed4:	31 d2                	xor    edx,edx
c0004ed6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004eda:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004ede:	e8 49 e8 ff ff       	call   c000372c <create_chain>
c0004ee3:	89 c6                	mov    esi,eax
c0004ee5:	85 c0                	test   eax,eax
c0004ee7:	74 0c                	je     c0004ef5 <f_mkdir+0x8d>
c0004ee9:	bb 02 00 00 00       	mov    ebx,0x2
c0004eee:	83 f8 01             	cmp    eax,0x1
c0004ef1:	74 07                	je     c0004efa <f_mkdir+0x92>
c0004ef3:	eb 2a                	jmp    c0004f1f <f_mkdir+0xb7>
c0004ef5:	bb 07 00 00 00       	mov    ebx,0x7
c0004efa:	31 c9                	xor    ecx,ecx
c0004efc:	89 f2                	mov    edx,esi
c0004efe:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004f02:	e8 64 e9 ff ff       	call   c000386b <remove_chain>
c0004f07:	eb 05                	jmp    c0004f0e <f_mkdir+0xa6>
c0004f09:	bb 08 00 00 00       	mov    ebx,0x8
c0004f0e:	83 ec 0c             	sub    esp,0xc
c0004f11:	57                   	push   edi
c0004f12:	e8 6d 10 00 00       	call   c0005f84 <ff_memfree>
c0004f17:	83 c4 10             	add    esp,0x10
c0004f1a:	e9 db 00 00 00       	jmp    c0004ffa <f_mkdir+0x192>
c0004f1f:	bb 01 00 00 00       	mov    ebx,0x1
c0004f24:	83 f8 ff             	cmp    eax,0xffffffff
c0004f27:	74 d1                	je     c0004efa <f_mkdir+0x92>
c0004f29:	89 f2                	mov    edx,esi
c0004f2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f2f:	e8 f1 dc ff ff       	call   c0002c25 <dir_clear>
c0004f34:	89 c3                	mov    ebx,eax
c0004f36:	85 c0                	test   eax,eax
c0004f38:	75 c0                	jne    c0004efa <f_mkdir+0x92>
c0004f3a:	b9 0b 00 00 00       	mov    ecx,0xb
c0004f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f43:	ba 20 00 00 00       	mov    edx,0x20
c0004f48:	83 c0 34             	add    eax,0x34
c0004f4b:	e8 14 d2 ff ff       	call   c0002164 <mem_set>
c0004f50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f54:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f59:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004f5d:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004f61:	83 c0 4a             	add    eax,0x4a
c0004f64:	e8 e3 d1 ff ff       	call   c000214c <st_dword>
c0004f69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f6d:	89 f1                	mov    ecx,esi
c0004f6f:	8d 50 34             	lea    edx,[eax+0x34]
c0004f72:	e8 c1 e5 ff ff       	call   c0003538 <st_clust.isra.1>
c0004f77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f7b:	b9 20 00 00 00       	mov    ecx,0x20
c0004f80:	8d 50 34             	lea    edx,[eax+0x34]
c0004f83:	83 c0 54             	add    eax,0x54
c0004f86:	e8 c4 d1 ff ff       	call   c000214f <mem_cpy>
c0004f8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f8f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004f93:	8d 50 54             	lea    edx,[eax+0x54]
c0004f96:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004f9a:	e8 99 e5 ff ff       	call   c0003538 <st_clust.isra.1>
c0004f9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fa3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fa7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004fab:	e8 0c ee ff ff       	call   c0003dbc <dir_register>
c0004fb0:	89 c3                	mov    ebx,eax
c0004fb2:	85 c0                	test   eax,eax
c0004fb4:	0f 85 40 ff ff ff    	jne    c0004efa <f_mkdir+0x92>
c0004fba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fbe:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fc3:	83 c0 16             	add    eax,0x16
c0004fc6:	e8 81 d1 ff ff       	call   c000214c <st_dword>
c0004fcb:	89 f1                	mov    ecx,esi
c0004fcd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004fd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fd5:	e8 5e e5 ff ff       	call   c0003538 <st_clust.isra.1>
c0004fda:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fde:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004fe2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fe6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fee:	e8 ce e0 ff ff       	call   c00030c1 <sync_fs>
c0004ff3:	89 c3                	mov    ebx,eax
c0004ff5:	e9 14 ff ff ff       	jmp    c0004f0e <f_mkdir+0xa6>
c0004ffa:	83 c4 50             	add    esp,0x50
c0004ffd:	89 d8                	mov    eax,ebx
c0004fff:	5b                   	pop    ebx
c0005000:	5e                   	pop    esi
c0005001:	5f                   	pop    edi
c0005002:	c3                   	ret    

c0005003 <f_rename>:
c0005003:	57                   	push   edi
c0005004:	56                   	push   esi
c0005005:	53                   	push   ebx
c0005006:	81 ec a0 00 00 00    	sub    esp,0xa0
c000500c:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0005013:	e8 7c d5 ff ff       	call   c0002594 <get_ldnumber>
c0005018:	b9 02 00 00 00       	mov    ecx,0x2
c000501d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005021:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0005028:	e8 b0 d7 ff ff       	call   c00027dd <mount_volume>
c000502d:	85 c0                	test   eax,eax
c000502f:	0f 85 7c 01 00 00    	jne    c00051b1 <f_rename+0x1ae>
c0005035:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005039:	83 ec 0c             	sub    esp,0xc
c000503c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0005040:	68 00 02 00 00       	push   0x200
c0005045:	e8 22 0f 00 00       	call   c0005f6c <ff_memalloc>
c000504a:	83 c4 10             	add    esp,0x10
c000504d:	89 c6                	mov    esi,eax
c000504f:	b8 11 00 00 00       	mov    eax,0x11
c0005054:	85 f6                	test   esi,esi
c0005056:	0f 84 55 01 00 00    	je     c00051b1 <f_rename+0x1ae>
c000505c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005060:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0005067:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000506a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000506e:	e8 b4 ec ff ff       	call   c0003d27 <follow_path>
c0005073:	85 c0                	test   eax,eax
c0005075:	0f 85 22 01 00 00    	jne    c000519d <f_rename+0x19a>
c000507b:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c000507f:	b8 06 00 00 00       	mov    eax,0x6
c0005084:	80 e2 a0             	and    dl,0xa0
c0005087:	0f 85 10 01 00 00    	jne    c000519d <f_rename+0x19a>
c000508d:	b9 20 00 00 00       	mov    ecx,0x20
c0005092:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005096:	8d 44 24 20          	lea    eax,[esp+0x20]
c000509a:	e8 b0 d0 ff ff       	call   c000214f <mem_cpy>
c000509f:	b9 30 00 00 00       	mov    ecx,0x30
c00050a4:	8d 54 24 40          	lea    edx,[esp+0x40]
c00050a8:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050ac:	e8 9e d0 ff ff       	call   c000214f <mem_cpy>
c00050b1:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c00050b8:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050bc:	e8 66 ec ff ff       	call   c0003d27 <follow_path>
c00050c1:	85 c0                	test   eax,eax
c00050c3:	75 20                	jne    c00050e5 <f_rename+0xe2>
c00050c5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00050c9:	b8 08 00 00 00       	mov    eax,0x8
c00050ce:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c00050d2:	0f 85 c5 00 00 00    	jne    c000519d <f_rename+0x19a>
c00050d8:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00050dc:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c00050e3:	eb 03                	jmp    c00050e8 <f_rename+0xe5>
c00050e5:	83 f8 04             	cmp    eax,0x4
c00050e8:	0f 85 af 00 00 00    	jne    c000519d <f_rename+0x19a>
c00050ee:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050f2:	e8 c5 ec ff ff       	call   c0003dbc <dir_register>
c00050f7:	85 c0                	test   eax,eax
c00050f9:	0f 85 9e 00 00 00    	jne    c000519d <f_rename+0x19a>
c00050ff:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0005106:	b9 13 00 00 00       	mov    ecx,0x13
c000510b:	8d 43 0d             	lea    eax,[ebx+0xd]
c000510e:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0005112:	e8 38 d0 ff ff       	call   c000214f <mem_cpy>
c0005117:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c000511b:	a8 10                	test   al,0x10
c000511d:	75 03                	jne    c0005122 <f_rename+0x11f>
c000511f:	83 c8 20             	or     eax,0x20
c0005122:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0005125:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005129:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000512d:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0005131:	74 54                	je     c0005187 <f_rename+0x184>
c0005133:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0005137:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c000513b:	74 4a                	je     c0005187 <f_rename+0x184>
c000513d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0005141:	89 da                	mov    edx,ebx
c0005143:	8a 07                	mov    al,BYTE PTR [edi]
c0005145:	e8 c5 e3 ff ff       	call   c000350f <ld_clust.isra.0>
c000514a:	89 c2                	mov    edx,eax
c000514c:	89 f8                	mov    eax,edi
c000514e:	e8 27 d2 ff ff       	call   c000237a <clst2sect>
c0005153:	89 c2                	mov    edx,eax
c0005155:	b8 02 00 00 00       	mov    eax,0x2
c000515a:	85 d2                	test   edx,edx
c000515c:	74 3f                	je     c000519d <f_rename+0x19a>
c000515e:	89 f8                	mov    eax,edi
c0005160:	e8 25 d5 ff ff       	call   c000268a <move_window>
c0005165:	85 c0                	test   eax,eax
c0005167:	75 34                	jne    c000519d <f_rename+0x19a>
c0005169:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516d:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0005171:	75 14                	jne    c0005187 <f_rename+0x184>
c0005173:	8d 50 54             	lea    edx,[eax+0x54]
c0005176:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000517a:	e8 b9 e3 ff ff       	call   c0003538 <st_clust.isra.1>
c000517f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005183:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005187:	8d 44 24 40          	lea    eax,[esp+0x40]
c000518b:	e8 fb e9 ff ff       	call   c0003b8b <dir_remove>
c0005190:	85 c0                	test   eax,eax
c0005192:	75 09                	jne    c000519d <f_rename+0x19a>
c0005194:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005198:	e8 24 df ff ff       	call   c00030c1 <sync_fs>
c000519d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	56                   	push   esi
c00051a5:	e8 da 0d 00 00       	call   c0005f84 <ff_memfree>
c00051aa:	83 c4 10             	add    esp,0x10
c00051ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b1:	81 c4 a0 00 00 00    	add    esp,0xa0
c00051b7:	5b                   	pop    ebx
c00051b8:	5e                   	pop    esi
c00051b9:	5f                   	pop    edi
c00051ba:	c3                   	ret    

c00051bb <f_chmod>:
c00051bb:	57                   	push   edi
c00051bc:	b9 02 00 00 00       	mov    ecx,0x2
c00051c1:	56                   	push   esi
c00051c2:	53                   	push   ebx
c00051c3:	83 ec 50             	sub    esp,0x50
c00051c6:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c00051ca:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c00051ce:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051d2:	8d 44 24 60          	lea    eax,[esp+0x60]
c00051d6:	e8 02 d6 ff ff       	call   c00027dd <mount_volume>
c00051db:	85 c0                	test   eax,eax
c00051dd:	0f 85 81 00 00 00    	jne    c0005264 <f_chmod+0xa9>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	83 ec 0c             	sub    esp,0xc
c00051ea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00051ee:	68 00 02 00 00       	push   0x200
c00051f3:	e8 74 0d 00 00       	call   c0005f6c <ff_memalloc>
c00051f8:	83 c4 10             	add    esp,0x10
c00051fb:	89 c6                	mov    esi,eax
c00051fd:	b8 11 00 00 00       	mov    eax,0x11
c0005202:	85 f6                	test   esi,esi
c0005204:	74 5e                	je     c0005264 <f_chmod+0xa9>
c0005206:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000520e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005211:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005215:	e8 0d eb ff ff       	call   c0003d27 <follow_path>
c000521a:	85 c0                	test   eax,eax
c000521c:	75 32                	jne    c0005250 <f_chmod+0x95>
c000521e:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005222:	b8 06 00 00 00       	mov    eax,0x6
c0005227:	80 e2 a0             	and    dl,0xa0
c000522a:	75 24                	jne    c0005250 <f_chmod+0x95>
c000522c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005230:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0005233:	31 d7                	xor    edi,edx
c0005235:	21 fb                	and    ebx,edi
c0005237:	83 e3 27             	and    ebx,0x27
c000523a:	31 d3                	xor    ebx,edx
c000523c:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c000523f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005243:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005247:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000524b:	e8 71 de ff ff       	call   c00030c1 <sync_fs>
c0005250:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005254:	83 ec 0c             	sub    esp,0xc
c0005257:	56                   	push   esi
c0005258:	e8 27 0d 00 00       	call   c0005f84 <ff_memfree>
c000525d:	83 c4 10             	add    esp,0x10
c0005260:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005264:	83 c4 50             	add    esp,0x50
c0005267:	5b                   	pop    ebx
c0005268:	5e                   	pop    esi
c0005269:	5f                   	pop    edi
c000526a:	c3                   	ret    

c000526b <f_utime>:
c000526b:	56                   	push   esi
c000526c:	b9 02 00 00 00       	mov    ecx,0x2
c0005271:	53                   	push   ebx
c0005272:	83 ec 54             	sub    esp,0x54
c0005275:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005279:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000527d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005281:	e8 57 d5 ff ff       	call   c00027dd <mount_volume>
c0005286:	85 c0                	test   eax,eax
c0005288:	0f 85 87 00 00 00    	jne    c0005315 <f_utime+0xaa>
c000528e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005292:	83 ec 0c             	sub    esp,0xc
c0005295:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005299:	68 00 02 00 00       	push   0x200
c000529e:	e8 c9 0c 00 00       	call   c0005f6c <ff_memalloc>
c00052a3:	83 c4 10             	add    esp,0x10
c00052a6:	89 c3                	mov    ebx,eax
c00052a8:	b8 11 00 00 00       	mov    eax,0x11
c00052ad:	85 db                	test   ebx,ebx
c00052af:	74 64                	je     c0005315 <f_utime+0xaa>
c00052b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052b5:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00052b9:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00052bc:	8d 44 24 20          	lea    eax,[esp+0x20]
c00052c0:	e8 62 ea ff ff       	call   c0003d27 <follow_path>
c00052c5:	85 c0                	test   eax,eax
c00052c7:	75 38                	jne    c0005301 <f_utime+0x96>
c00052c9:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00052cd:	b8 06 00 00 00       	mov    eax,0x6
c00052d2:	80 e2 a0             	and    dl,0xa0
c00052d5:	75 2a                	jne    c0005301 <f_utime+0x96>
c00052d7:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c00052db:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c00052df:	c1 e2 10             	shl    edx,0x10
c00052e2:	09 c2                	or     edx,eax
c00052e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00052e8:	83 c0 16             	add    eax,0x16
c00052eb:	e8 5c ce ff ff       	call   c000214c <st_dword>
c00052f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052f4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00052f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052fc:	e8 c0 dd ff ff       	call   c00030c1 <sync_fs>
c0005301:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005305:	83 ec 0c             	sub    esp,0xc
c0005308:	53                   	push   ebx
c0005309:	e8 76 0c 00 00       	call   c0005f84 <ff_memfree>
c000530e:	83 c4 10             	add    esp,0x10
c0005311:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005315:	83 c4 54             	add    esp,0x54
c0005318:	5b                   	pop    ebx
c0005319:	5e                   	pop    esi
c000531a:	c3                   	ret    

c000531b <f_getlabel>:
c000531b:	55                   	push   ebp
c000531c:	31 c9                	xor    ecx,ecx
c000531e:	57                   	push   edi
c000531f:	56                   	push   esi
c0005320:	53                   	push   ebx
c0005321:	83 ec 5c             	sub    esp,0x5c
c0005324:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005328:	8d 44 24 70          	lea    eax,[esp+0x70]
c000532c:	e8 ac d4 ff ff       	call   c00027dd <mount_volume>
c0005331:	89 c6                	mov    esi,eax
c0005333:	85 c0                	test   eax,eax
c0005335:	0f 85 27 01 00 00    	jne    c0005462 <f_getlabel+0x147>
c000533b:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0005340:	0f 84 d0 00 00 00    	je     c0005416 <f_getlabel+0xfb>
c0005346:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000534a:	31 d2                	xor    edx,edx
c000534c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005350:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005358:	8d 44 24 20          	lea    eax,[esp+0x20]
c000535c:	e8 03 e3 ff ff       	call   c0003664 <dir_sdi>
c0005361:	85 c0                	test   eax,eax
c0005363:	0f 85 a1 00 00 00    	jne    c000540a <f_getlabel+0xef>
c0005369:	ba 01 00 00 00       	mov    edx,0x1
c000536e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005372:	e8 ec e6 ff ff       	call   c0003a63 <dir_read>
c0005377:	85 c0                	test   eax,eax
c0005379:	0f 85 8b 00 00 00    	jne    c000540a <f_getlabel+0xef>
c000537f:	31 db                	xor    ebx,ebx
c0005381:	31 c9                	xor    ecx,ecx
c0005383:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005387:	8d 79 01             	lea    edi,[ecx+0x1]
c000538a:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000538f:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005394:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005398:	e8 06 ce ff ff       	call   c00021a3 <dbc_1st>
c000539d:	85 c0                	test   eax,eax
c000539f:	74 16                	je     c00053b7 <f_getlabel+0x9c>
c00053a1:	83 ff 0b             	cmp    edi,0xb
c00053a4:	74 11                	je     c00053b7 <f_getlabel+0x9c>
c00053a6:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c00053ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00053af:	8d 79 02             	lea    edi,[ecx+0x2]
c00053b2:	c1 e0 08             	shl    eax,0x8
c00053b5:	09 c2                	or     edx,eax
c00053b7:	0f b7 d2             	movzx  edx,dx
c00053ba:	50                   	push   eax
c00053bb:	50                   	push   eax
c00053bc:	68 b5 01 00 00       	push   0x1b5
c00053c1:	52                   	push   edx
c00053c2:	e8 75 0c 00 00       	call   c000603c <ff_oem2uni>
c00053c7:	83 c4 10             	add    esp,0x10
c00053ca:	0f b7 c0             	movzx  eax,ax
c00053cd:	85 c0                	test   eax,eax
c00053cf:	74 22                	je     c00053f3 <f_getlabel+0xd8>
c00053d1:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00053d5:	b9 04 00 00 00       	mov    ecx,0x4
c00053da:	01 da                	add    edx,ebx
c00053dc:	e8 a0 ce ff ff       	call   c0002281 <put_utf>
c00053e1:	0f b6 c0             	movzx  eax,al
c00053e4:	85 c0                	test   eax,eax
c00053e6:	74 0b                	je     c00053f3 <f_getlabel+0xd8>
c00053e8:	01 c3                	add    ebx,eax
c00053ea:	83 ff 0b             	cmp    edi,0xb
c00053ed:	74 06                	je     c00053f5 <f_getlabel+0xda>
c00053ef:	89 f9                	mov    ecx,edi
c00053f1:	eb 90                	jmp    c0005383 <f_getlabel+0x68>
c00053f3:	31 db                	xor    ebx,ebx
c00053f5:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00053f9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00053fc:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0005400:	74 14                	je     c0005416 <f_getlabel+0xfb>
c0005402:	4b                   	dec    ebx
c0005403:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0005406:	74 f1                	je     c00053f9 <f_getlabel+0xde>
c0005408:	eb 0c                	jmp    c0005416 <f_getlabel+0xfb>
c000540a:	83 f8 04             	cmp    eax,0x4
c000540d:	75 51                	jne    c0005460 <f_getlabel+0x145>
c000540f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005413:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005416:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c000541b:	74 45                	je     c0005462 <f_getlabel+0x147>
c000541d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005421:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005424:	e8 61 d2 ff ff       	call   c000268a <move_window>
c0005429:	89 c6                	mov    esi,eax
c000542b:	85 c0                	test   eax,eax
c000542d:	75 33                	jne    c0005462 <f_getlabel+0x147>
c000542f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005433:	b8 43 00 00 00       	mov    eax,0x43
c0005438:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c000543b:	83 f9 03             	cmp    ecx,0x3
c000543e:	74 0f                	je     c000544f <f_getlabel+0x134>
c0005440:	31 c0                	xor    eax,eax
c0005442:	83 f9 04             	cmp    ecx,0x4
c0005445:	0f 94 c0             	sete   al
c0005448:	48                   	dec    eax
c0005449:	83 e0 c3             	and    eax,0xffffffc3
c000544c:	83 c0 64             	add    eax,0x64
c000544f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005453:	e8 d8 cc ff ff       	call   c0002130 <ld_dword>
c0005458:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000545c:	89 07                	mov    DWORD PTR [edi],eax
c000545e:	eb 02                	jmp    c0005462 <f_getlabel+0x147>
c0005460:	89 c6                	mov    esi,eax
c0005462:	83 c4 5c             	add    esp,0x5c
c0005465:	89 f0                	mov    eax,esi
c0005467:	5b                   	pop    ebx
c0005468:	5e                   	pop    esi
c0005469:	5f                   	pop    edi
c000546a:	5d                   	pop    ebp
c000546b:	c3                   	ret    

c000546c <f_setlabel>:
c000546c:	57                   	push   edi
c000546d:	b9 02 00 00 00       	mov    ecx,0x2
c0005472:	56                   	push   esi
c0005473:	53                   	push   ebx
c0005474:	83 ec 50             	sub    esp,0x50
c0005477:	8d 54 24 04          	lea    edx,[esp+0x4]
c000547b:	8d 44 24 60          	lea    eax,[esp+0x60]
c000547f:	e8 59 d3 ff ff       	call   c00027dd <mount_volume>
c0005484:	89 c6                	mov    esi,eax
c0005486:	85 c0                	test   eax,eax
c0005488:	0f 85 65 01 00 00    	jne    c00055f3 <f_setlabel+0x187>
c000548e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005493:	ba 20 00 00 00       	mov    edx,0x20
c0005498:	8d 44 24 0a          	lea    eax,[esp+0xa]
c000549c:	31 db                	xor    ebx,ebx
c000549e:	e8 c1 cc ff ff       	call   c0002164 <mem_set>
c00054a3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00054a7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00054aa:	76 5d                	jbe    c0005509 <f_setlabel+0x9d>
c00054ac:	8d 44 24 60          	lea    eax,[esp+0x60]
c00054b0:	e8 f4 cc ff ff       	call   c00021a9 <tchar2uni>
c00054b5:	3d ff ff 00 00       	cmp    eax,0xffff
c00054ba:	76 0a                	jbe    c00054c6 <f_setlabel+0x5a>
c00054bc:	be 06 00 00 00       	mov    esi,0x6
c00054c1:	e9 2d 01 00 00       	jmp    c00055f3 <f_setlabel+0x187>
c00054c6:	83 ec 0c             	sub    esp,0xc
c00054c9:	50                   	push   eax
c00054ca:	e8 e5 0b 00 00       	call   c00060b4 <ff_wtoupper>
c00054cf:	5a                   	pop    edx
c00054d0:	59                   	pop    ecx
c00054d1:	68 b5 01 00 00       	push   0x1b5
c00054d6:	50                   	push   eax
c00054d7:	e8 c0 0a 00 00       	call   c0005f9c <ff_uni2oem>
c00054dc:	83 c4 10             	add    esp,0x10
c00054df:	0f b7 f0             	movzx  esi,ax
c00054e2:	89 f7                	mov    edi,esi
c00054e4:	85 f6                	test   esi,esi
c00054e6:	74 d4                	je     c00054bc <f_setlabel+0x50>
c00054e8:	89 f2                	mov    edx,esi
c00054ea:	b8 50 f8 02 c0       	mov    eax,0xc002f850
c00054ef:	e8 9e cc ff ff       	call   c0002192 <chk_chr>
c00054f4:	85 c0                	test   eax,eax
c00054f6:	75 c4                	jne    c00054bc <f_setlabel+0x50>
c00054f8:	81 fe ff 00 00 00    	cmp    esi,0xff
c00054fe:	0f 87 c9 00 00 00    	ja     c00055cd <f_setlabel+0x161>
c0005504:	e9 e0 00 00 00       	jmp    c00055e9 <f_setlabel+0x17d>
c0005509:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c000550e:	74 ac                	je     c00054bc <f_setlabel+0x50>
c0005510:	85 db                	test   ebx,ebx
c0005512:	74 0e                	je     c0005522 <f_setlabel+0xb6>
c0005514:	8d 43 ff             	lea    eax,[ebx-0x1]
c0005517:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c000551c:	75 04                	jne    c0005522 <f_setlabel+0xb6>
c000551e:	89 c3                	mov    ebx,eax
c0005520:	eb ee                	jmp    c0005510 <f_setlabel+0xa4>
c0005522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005526:	31 d2                	xor    edx,edx
c0005528:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000552c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005534:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005538:	e8 27 e1 ff ff       	call   c0003664 <dir_sdi>
c000553d:	89 c6                	mov    esi,eax
c000553f:	85 c0                	test   eax,eax
c0005541:	0f 85 ac 00 00 00    	jne    c00055f3 <f_setlabel+0x187>
c0005547:	ba 01 00 00 00       	mov    edx,0x1
c000554c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005550:	e8 0e e5 ff ff       	call   c0003a63 <dir_read>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 18                	jne    c0005571 <f_setlabel+0x105>
c0005559:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000555d:	85 db                	test   ebx,ebx
c000555f:	74 0b                	je     c000556c <f_setlabel+0x100>
c0005561:	b9 0b 00 00 00       	mov    ecx,0xb
c0005566:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000556a:	eb 47                	jmp    c00055b3 <f_setlabel+0x147>
c000556c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000556f:	eb 47                	jmp    c00055b8 <f_setlabel+0x14c>
c0005571:	83 f8 04             	cmp    eax,0x4
c0005574:	75 53                	jne    c00055c9 <f_setlabel+0x15d>
c0005576:	85 db                	test   ebx,ebx
c0005578:	74 79                	je     c00055f3 <f_setlabel+0x187>
c000557a:	ba 01 00 00 00       	mov    edx,0x1
c000557f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005583:	e8 76 e4 ff ff       	call   c00039fe <dir_alloc>
c0005588:	89 c6                	mov    esi,eax
c000558a:	85 c0                	test   eax,eax
c000558c:	75 65                	jne    c00055f3 <f_setlabel+0x187>
c000558e:	b9 20 00 00 00       	mov    ecx,0x20
c0005593:	31 d2                	xor    edx,edx
c0005595:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005599:	e8 c6 cb ff ff       	call   c0002164 <mem_set>
c000559e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00055a2:	b9 0b 00 00 00       	mov    ecx,0xb
c00055a7:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00055ab:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00055af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00055b3:	e8 97 cb ff ff       	call   c000214f <mem_cpy>
c00055b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00055bc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00055c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00055c4:	e8 f8 da ff ff       	call   c00030c1 <sync_fs>
c00055c9:	89 c6                	mov    esi,eax
c00055cb:	eb 26                	jmp    c00055f3 <f_setlabel+0x187>
c00055cd:	83 fb 09             	cmp    ebx,0x9
c00055d0:	0f 87 e6 fe ff ff    	ja     c00054bc <f_setlabel+0x50>
c00055d6:	89 f0                	mov    eax,esi
c00055d8:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00055dc:	43                   	inc    ebx
c00055dd:	89 f8                	mov    eax,edi
c00055df:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00055e3:	43                   	inc    ebx
c00055e4:	e9 ba fe ff ff       	jmp    c00054a3 <f_setlabel+0x37>
c00055e9:	83 fb 0a             	cmp    ebx,0xa
c00055ec:	76 ef                	jbe    c00055dd <f_setlabel+0x171>
c00055ee:	e9 c9 fe ff ff       	jmp    c00054bc <f_setlabel+0x50>
c00055f3:	83 c4 50             	add    esp,0x50
c00055f6:	89 f0                	mov    eax,esi
c00055f8:	5b                   	pop    ebx
c00055f9:	5e                   	pop    esi
c00055fa:	5f                   	pop    edi
c00055fb:	c3                   	ret    

c00055fc <f_expand>:
c00055fc:	55                   	push   ebp
c00055fd:	57                   	push   edi
c00055fe:	56                   	push   esi
c00055ff:	53                   	push   ebx
c0005600:	83 ec 2c             	sub    esp,0x2c
c0005603:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005607:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000560b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000560f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005613:	89 d8                	mov    eax,ebx
c0005615:	e8 c7 cf ff ff       	call   c00025e1 <validate>
c000561a:	89 c6                	mov    esi,eax
c000561c:	85 c0                	test   eax,eax
c000561e:	0f 85 3b 01 00 00    	jne    c000575f <f_expand+0x163>
c0005624:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005628:	85 f6                	test   esi,esi
c000562a:	0f 85 2f 01 00 00    	jne    c000575f <f_expand+0x163>
c0005630:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005635:	75 0a                	jne    c0005641 <f_expand+0x45>
c0005637:	be 07 00 00 00       	mov    esi,0x7
c000563c:	e9 1e 01 00 00       	jmp    c000575f <f_expand+0x163>
c0005641:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005645:	75 f0                	jne    c0005637 <f_expand+0x3b>
c0005647:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000564b:	74 ea                	je     c0005637 <f_expand+0x3b>
c000564d:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005651:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005655:	c1 e1 09             	shl    ecx,0x9
c0005658:	8d 41 ff             	lea    eax,[ecx-0x1]
c000565b:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000565f:	0f 95 c0             	setne  al
c0005662:	31 d2                	xor    edx,edx
c0005664:	0f b6 c0             	movzx  eax,al
c0005667:	89 c7                	mov    edi,eax
c0005669:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000566d:	f7 f1                	div    ecx
c000566f:	01 f8                	add    eax,edi
c0005671:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005674:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005678:	83 ff 01             	cmp    edi,0x1
c000567b:	76 05                	jbe    c0005682 <f_expand+0x86>
c000567d:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005680:	77 05                	ja     c0005687 <f_expand+0x8b>
c0005682:	bf 02 00 00 00       	mov    edi,0x2
c0005687:	89 3c 24             	mov    DWORD PTR [esp],edi
c000568a:	89 fd                	mov    ebp,edi
c000568c:	31 c9                	xor    ecx,ecx
c000568e:	89 ea                	mov    edx,ebp
c0005690:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005694:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005696:	45                   	inc    ebp
c0005697:	e8 c4 de ff ff       	call   c0003560 <get_fat.isra.2>
c000569c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00056a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00056a4:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00056a7:	77 05                	ja     c00056ae <f_expand+0xb2>
c00056a9:	bd 02 00 00 00       	mov    ebp,0x2
c00056ae:	83 f8 01             	cmp    eax,0x1
c00056b1:	74 20                	je     c00056d3 <f_expand+0xd7>
c00056b3:	83 f8 ff             	cmp    eax,0xffffffff
c00056b6:	74 25                	je     c00056dd <f_expand+0xe1>
c00056b8:	85 c0                	test   eax,eax
c00056ba:	75 09                	jne    c00056c5 <f_expand+0xc9>
c00056bc:	41                   	inc    ecx
c00056bd:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00056c1:	75 07                	jne    c00056ca <f_expand+0xce>
c00056c3:	eb 1f                	jmp    c00056e4 <f_expand+0xe8>
c00056c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00056c8:	31 c9                	xor    ecx,ecx
c00056ca:	39 fd                	cmp    ebp,edi
c00056cc:	75 c0                	jne    c000568e <f_expand+0x92>
c00056ce:	e9 64 ff ff ff       	jmp    c0005637 <f_expand+0x3b>
c00056d3:	be 02 00 00 00       	mov    esi,0x2
c00056d8:	e9 82 00 00 00       	jmp    c000575f <f_expand+0x163>
c00056dd:	be 01 00 00 00       	mov    esi,0x1
c00056e2:	eb 7b                	jmp    c000575f <f_expand+0x163>
c00056e4:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00056e9:	74 2b                	je     c0005716 <f_expand+0x11a>
c00056eb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00056ee:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00056f2:	85 ed                	test   ebp,ebp
c00056f4:	74 24                	je     c000571a <f_expand+0x11e>
c00056f6:	83 c9 ff             	or     ecx,0xffffffff
c00056f9:	83 fd 01             	cmp    ebp,0x1
c00056fc:	74 03                	je     c0005701 <f_expand+0x105>
c00056fe:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005701:	89 fa                	mov    edx,edi
c0005703:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005707:	e8 c2 d3 ff ff       	call   c0002ace <put_fat>
c000570c:	85 c0                	test   eax,eax
c000570e:	75 4d                	jne    c000575d <f_expand+0x161>
c0005710:	89 f8                	mov    eax,edi
c0005712:	4d                   	dec    ebp
c0005713:	47                   	inc    edi
c0005714:	eb dc                	jmp    c00056f2 <f_expand+0xf6>
c0005716:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005719:	48                   	dec    eax
c000571a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000571e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005723:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005726:	74 37                	je     c000575f <f_expand+0x163>
c0005728:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000572b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000572e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005732:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005735:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005738:	83 c8 40             	or     eax,0x40
c000573b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000573e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005741:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005744:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005747:	39 c8                	cmp    eax,ecx
c0005749:	77 14                	ja     c000575f <f_expand+0x163>
c000574b:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000574f:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005752:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005755:	83 c8 01             	or     eax,0x1
c0005758:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000575b:	eb 02                	jmp    c000575f <f_expand+0x163>
c000575d:	89 c6                	mov    esi,eax
c000575f:	83 c4 2c             	add    esp,0x2c
c0005762:	89 f0                	mov    eax,esi
c0005764:	5b                   	pop    ebx
c0005765:	5e                   	pop    esi
c0005766:	5f                   	pop    edi
c0005767:	5d                   	pop    ebp
c0005768:	c3                   	ret    

c0005769 <f_mkfs>:
c0005769:	55                   	push   ebp
c000576a:	57                   	push   edi
c000576b:	56                   	push   esi
c000576c:	be 0b 00 00 00       	mov    esi,0xb
c0005771:	53                   	push   ebx
c0005772:	83 ec 5c             	sub    esp,0x5c
c0005775:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005779:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000577d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005781:	e8 0e ce ff ff       	call   c0002594 <get_ldnumber>
c0005786:	85 c0                	test   eax,eax
c0005788:	0f 88 d1 07 00 00    	js     c0005f5f <f_mkfs+0x7f6>
c000578e:	8b 14 85 80 6c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9380]
c0005795:	85 d2                	test   edx,edx
c0005797:	74 03                	je     c000579c <f_mkfs+0x33>
c0005799:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000579c:	85 db                	test   ebx,ebx
c000579e:	75 05                	jne    c00057a5 <f_mkfs+0x3c>
c00057a0:	bb 40 f8 02 c0       	mov    ebx,0xc002f840
c00057a5:	83 ec 0c             	sub    esp,0xc
c00057a8:	0f b6 c0             	movzx  eax,al
c00057ab:	be 03 00 00 00       	mov    esi,0x3
c00057b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00057b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00057b8:	e8 18 c9 ff ff       	call   c00020d5 <disk_initialize>
c00057bd:	83 c4 10             	add    esp,0x10
c00057c0:	a8 01                	test   al,0x1
c00057c2:	0f 85 97 07 00 00    	jne    c0005f5f <f_mkfs+0x7f6>
c00057c8:	be 0a 00 00 00       	mov    esi,0xa
c00057cd:	a8 04                	test   al,0x4
c00057cf:	0f 85 8a 07 00 00    	jne    c0005f5f <f_mkfs+0x7f6>
c00057d5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00057d8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00057dc:	85 c0                	test   eax,eax
c00057de:	75 20                	jne    c0005800 <f_mkfs+0x97>
c00057e0:	51                   	push   ecx
c00057e1:	8d 44 24 44          	lea    eax,[esp+0x44]
c00057e5:	50                   	push   eax
c00057e6:	6a 03                	push   0x3
c00057e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00057ec:	e8 13 c9 ff ff       	call   c0002104 <disk_ioctl>
c00057f1:	83 c4 10             	add    esp,0x10
c00057f4:	85 c0                	test   eax,eax
c00057f6:	74 08                	je     c0005800 <f_mkfs+0x97>
c00057f8:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c0005800:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0005804:	8d 42 ff             	lea    eax,[edx-0x1]
c0005807:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000580c:	77 04                	ja     c0005812 <f_mkfs+0xa9>
c000580e:	85 c2                	test   edx,eax
c0005810:	74 08                	je     c000581a <f_mkfs+0xb1>
c0005812:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000581a:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000581d:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0005821:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005825:	48                   	dec    eax
c0005826:	3c 01                	cmp    al,0x1
c0005828:	76 05                	jbe    c000582f <f_mkfs+0xc6>
c000582a:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000582f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005832:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005836:	48                   	dec    eax
c0005837:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000583c:	77 07                	ja     c0005845 <f_mkfs+0xdc>
c000583e:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c0005843:	74 08                	je     c000584d <f_mkfs+0xe4>
c0005845:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c000584d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005850:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005856:	77 07                	ja     c000585f <f_mkfs+0xf6>
c0005858:	8d 47 ff             	lea    eax,[edi-0x1]
c000585b:	85 f8                	test   eax,edi
c000585d:	74 02                	je     c0005861 <f_mkfs+0xf8>
c000585f:	31 ff                	xor    edi,edi
c0005861:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005869:	77 0a                	ja     c0005875 <f_mkfs+0x10c>
c000586b:	be 11 00 00 00       	mov    esi,0x11
c0005870:	e9 ea 06 00 00       	jmp    c0005f5f <f_mkfs+0x7f6>
c0005875:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005877:	85 ed                	test   ebp,ebp
c0005879:	89 eb                	mov    ebx,ebp
c000587b:	75 1e                	jne    c000589b <f_mkfs+0x132>
c000587d:	83 ec 0c             	sub    esp,0xc
c0005880:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005887:	25 00 fe ff ff       	and    eax,0xfffffe00
c000588c:	50                   	push   eax
c000588d:	e8 da 06 00 00       	call   c0005f6c <ff_memalloc>
c0005892:	83 c4 10             	add    esp,0x10
c0005895:	89 c3                	mov    ebx,eax
c0005897:	85 c0                	test   eax,eax
c0005899:	74 d0                	je     c000586b <f_mkfs+0x102>
c000589b:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c00058a3:	52                   	push   edx
c00058a4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00058a8:	50                   	push   eax
c00058a9:	6a 01                	push   0x1
c00058ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00058af:	e8 50 c8 ff ff       	call   c0002104 <disk_ioctl>
c00058b4:	83 c4 10             	add    esp,0x10
c00058b7:	85 c0                	test   eax,eax
c00058b9:	0f 85 49 06 00 00    	jne    c0005f08 <f_mkfs+0x79f>
c00058bf:	89 f0                	mov    eax,esi
c00058c1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00058c9:	83 e0 08             	and    eax,0x8
c00058cc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00058d0:	75 18                	jne    c00058ea <f_mkfs+0x181>
c00058d2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00058d6:	83 f8 3f             	cmp    eax,0x3f
c00058d9:	76 0f                	jbe    c00058ea <f_mkfs+0x181>
c00058db:	83 e8 3f             	sub    eax,0x3f
c00058de:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00058e6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00058ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00058ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00058f2:	83 f8 7f             	cmp    eax,0x7f
c00058f5:	0f 86 5b 02 00 00    	jbe    c0005b56 <f_mkfs+0x3ed>
c00058fb:	b9 80 00 00 00       	mov    ecx,0x80
c0005900:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c0005906:	77 05                	ja     c000590d <f_mkfs+0x1a4>
c0005908:	c1 ef 09             	shr    edi,0x9
c000590b:	89 f9                	mov    ecx,edi
c000590d:	89 f0                	mov    eax,esi
c000590f:	89 f7                	mov    edi,esi
c0005911:	83 e0 01             	and    eax,0x1
c0005914:	83 e7 02             	and    edi,0x2
c0005917:	0f b6 c0             	movzx  eax,al
c000591a:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000591e:	74 0a                	je     c000592a <f_mkfs+0x1c1>
c0005920:	85 c0                	test   eax,eax
c0005922:	0f 84 4f 01 00 00    	je     c0005a77 <f_mkfs+0x30e>
c0005928:	eb 37                	jmp    c0005961 <f_mkfs+0x1f8>
c000592a:	be 13 00 00 00       	mov    esi,0x13
c000592f:	85 c0                	test   eax,eax
c0005931:	75 2e                	jne    c0005961 <f_mkfs+0x1f8>
c0005933:	e9 e7 05 00 00       	jmp    c0005f1f <f_mkfs+0x7b6>
c0005938:	83 f8 02             	cmp    eax,0x2
c000593b:	0f 85 0d 02 00 00    	jne    c0005b4e <f_mkfs+0x3e5>
c0005941:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005947:	0f 86 e4 01 00 00    	jbe    c0005b31 <f_mkfs+0x3c8>
c000594d:	85 c9                	test   ecx,ecx
c000594f:	0f 85 dc 05 00 00    	jne    c0005f31 <f_mkfs+0x7c8>
c0005955:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005958:	83 f9 40             	cmp    ecx,0x40
c000595b:	0f 87 e0 05 00 00    	ja     c0005f41 <f_mkfs+0x7d8>
c0005961:	89 cf                	mov    edi,ecx
c0005963:	85 c9                	test   ecx,ecx
c0005965:	75 1c                	jne    c0005983 <f_mkfs+0x21a>
c0005967:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000596b:	b8 20 f8 02 c0       	mov    eax,0xc002f820
c0005970:	c1 ee 0c             	shr    esi,0xc
c0005973:	bf 01 00 00 00       	mov    edi,0x1
c0005978:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000597b:	85 d2                	test   edx,edx
c000597d:	0f 85 63 01 00 00    	jne    c0005ae6 <f_mkfs+0x37d>
c0005983:	31 d2                	xor    edx,edx
c0005985:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005989:	f7 f7                	div    edi
c000598b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005990:	0f 86 62 01 00 00    	jbe    c0005af8 <f_mkfs+0x38f>
c0005996:	83 c0 02             	add    eax,0x2
c0005999:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000599e:	01 c0                	add    eax,eax
c00059a0:	05 ff 01 00 00       	add    eax,0x1ff
c00059a5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00059ad:	c1 e8 09             	shr    eax,0x9
c00059b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00059b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059b8:	c1 e0 05             	shl    eax,0x5
c00059bb:	c1 e8 09             	shr    eax,0x9
c00059be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00059c2:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00059c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00059cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059cf:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00059d3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00059d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059db:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00059e0:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00059e4:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00059e8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00059ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00059f0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00059f4:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00059f8:	f7 d8                	neg    eax
c00059fa:	21 c6                	and    esi,eax
c00059fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a01:	29 d6                	sub    esi,edx
c0005a03:	83 f8 03             	cmp    eax,0x3
c0005a06:	0f 85 ff 00 00 00    	jne    c0005b0b <f_mkfs+0x3a2>
c0005a0c:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005a10:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005a14:	89 f8                	mov    eax,edi
c0005a16:	c1 e0 04             	shl    eax,0x4
c0005a19:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0005a1d:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005a21:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005a25:	0f 82 2b 01 00 00    	jb     c0005b56 <f_mkfs+0x3ed>
c0005a2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005a2f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005a33:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005a37:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c0005a3c:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005a40:	29 d0                	sub    eax,edx
c0005a42:	31 d2                	xor    edx,edx
c0005a44:	f7 f7                	div    edi
c0005a46:	89 c6                	mov    esi,eax
c0005a48:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4d:	83 f8 03             	cmp    eax,0x3
c0005a50:	0f 85 e2 fe ff ff    	jne    c0005938 <f_mkfs+0x1cf>
c0005a56:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005a5c:	0f 87 03 01 00 00    	ja     c0005b65 <f_mkfs+0x3fc>
c0005a62:	85 c9                	test   ecx,ecx
c0005a64:	0f 85 ec 00 00 00    	jne    c0005b56 <f_mkfs+0x3ed>
c0005a6a:	83 ff 01             	cmp    edi,0x1
c0005a6d:	0f 86 e3 00 00 00    	jbe    c0005b56 <f_mkfs+0x3ed>
c0005a73:	d1 ef                	shr    edi,1
c0005a75:	89 f9                	mov    ecx,edi
c0005a77:	89 ce                	mov    esi,ecx
c0005a79:	85 c9                	test   ecx,ecx
c0005a7b:	75 25                	jne    c0005aa2 <f_mkfs+0x339>
c0005a7d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005a81:	b8 30 f8 02 c0       	mov    eax,0xc002f830
c0005a86:	c1 ee 11             	shr    esi,0x11
c0005a89:	b9 01 00 00 00       	mov    ecx,0x1
c0005a8e:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005a91:	85 d2                	test   edx,edx
c0005a93:	74 0b                	je     c0005aa0 <f_mkfs+0x337>
c0005a95:	83 c0 02             	add    eax,0x2
c0005a98:	39 f2                	cmp    edx,esi
c0005a9a:	77 04                	ja     c0005aa0 <f_mkfs+0x337>
c0005a9c:	01 c9                	add    ecx,ecx
c0005a9e:	eb ee                	jmp    c0005a8e <f_mkfs+0x325>
c0005aa0:	31 f6                	xor    esi,esi
c0005aa2:	31 d2                	xor    edx,edx
c0005aa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa8:	f7 f1                	div    ecx
c0005aaa:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005ab1:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005ab6:	c1 ea 09             	shr    edx,0x9
c0005ab9:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005abe:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005ac2:	0f 87 8e 00 00 00    	ja     c0005b56 <f_mkfs+0x3ed>
c0005ac8:	89 cf                	mov    edi,ecx
c0005aca:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005ad2:	89 f1                	mov    ecx,esi
c0005ad4:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005adc:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005ae1:	e9 dc fe ff ff       	jmp    c00059c2 <f_mkfs+0x259>
c0005ae6:	83 c0 02             	add    eax,0x2
c0005ae9:	39 f2                	cmp    edx,esi
c0005aeb:	0f 87 92 fe ff ff    	ja     c0005983 <f_mkfs+0x21a>
c0005af1:	01 ff                	add    edi,edi
c0005af3:	e9 80 fe ff ff       	jmp    c0005978 <f_mkfs+0x20f>
c0005af8:	8d 04 40             	lea    eax,[eax+eax*2]
c0005afb:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005b00:	40                   	inc    eax
c0005b01:	d1 e8                	shr    eax,1
c0005b03:	83 c0 03             	add    eax,0x3
c0005b06:	e9 95 fe ff ff       	jmp    c00059a0 <f_mkfs+0x237>
c0005b0b:	31 d2                	xor    edx,edx
c0005b0d:	89 f0                	mov    eax,esi
c0005b0f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005b13:	85 d2                	test   edx,edx
c0005b15:	74 09                	je     c0005b20 <f_mkfs+0x3b7>
c0005b17:	4e                   	dec    esi
c0005b18:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005b1c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005b20:	89 f0                	mov    eax,esi
c0005b22:	31 d2                	xor    edx,edx
c0005b24:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005b28:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005b2c:	e9 e3 fe ff ff       	jmp    c0005a14 <f_mkfs+0x2ab>
c0005b31:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005b37:	77 2c                	ja     c0005b65 <f_mkfs+0x3fc>
c0005b39:	85 c9                	test   ecx,ecx
c0005b3b:	75 19                	jne    c0005b56 <f_mkfs+0x3ed>
c0005b3d:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005b40:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005b46:	0f 86 15 fe ff ff    	jbe    c0005961 <f_mkfs+0x1f8>
c0005b4c:	eb 08                	jmp    c0005b56 <f_mkfs+0x3ed>
c0005b4e:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005b54:	76 0a                	jbe    c0005b60 <f_mkfs+0x3f7>
c0005b56:	be 0e 00 00 00       	mov    esi,0xe
c0005b5b:	e9 bf 03 00 00       	jmp    c0005f1f <f_mkfs+0x7b6>
c0005b60:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005b65:	31 d2                	xor    edx,edx
c0005b67:	b9 00 02 00 00       	mov    ecx,0x200
c0005b6c:	89 d8                	mov    eax,ebx
c0005b6e:	e8 f1 c5 ff ff       	call   c0002164 <mem_set>
c0005b73:	b9 0b 00 00 00       	mov    ecx,0xb
c0005b78:	ba ce f7 02 c0       	mov    edx,0xc002f7ce
c0005b7d:	89 d8                	mov    eax,ebx
c0005b7f:	e8 cb c5 ff ff       	call   c000214f <mem_cpy>
c0005b84:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005b87:	ba 00 02 00 00       	mov    edx,0x200
c0005b8c:	e8 b7 c5 ff ff       	call   c0002148 <st_word>
c0005b91:	89 f8                	mov    eax,edi
c0005b93:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005b98:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005b9b:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005b9e:	e8 a5 c5 ff ff       	call   c0002148 <st_word>
c0005ba3:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005ba7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005baa:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005baf:	83 f8 03             	cmp    eax,0x3
c0005bb2:	75 08                	jne    c0005bbc <f_mkfs+0x453>
c0005bb4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005bbc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005bc0:	8d 43 11             	lea    eax,[ebx+0x11]
c0005bc3:	e8 80 c5 ff ff       	call   c0002148 <st_word>
c0005bc8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005bcc:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005bd2:	77 0a                	ja     c0005bde <f_mkfs+0x475>
c0005bd4:	8d 43 13             	lea    eax,[ebx+0x13]
c0005bd7:	e8 6c c5 ff ff       	call   c0002148 <st_word>
c0005bdc:	eb 08                	jmp    c0005be6 <f_mkfs+0x47d>
c0005bde:	8d 43 20             	lea    eax,[ebx+0x20]
c0005be1:	e8 66 c5 ff ff       	call   c000214c <st_dword>
c0005be6:	8d 43 18             	lea    eax,[ebx+0x18]
c0005be9:	ba 3f 00 00 00       	mov    edx,0x3f
c0005bee:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005bf2:	e8 51 c5 ff ff       	call   c0002148 <st_word>
c0005bf7:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005bfa:	ba ff 00 00 00       	mov    edx,0xff
c0005bff:	e8 44 c5 ff ff       	call   c0002148 <st_word>
c0005c04:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005c07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005c0b:	e8 3c c5 ff ff       	call   c000214c <st_dword>
c0005c10:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c15:	83 f8 03             	cmp    eax,0x3
c0005c18:	75 57                	jne    c0005c71 <f_mkfs+0x508>
c0005c1a:	8d 43 43             	lea    eax,[ebx+0x43]
c0005c1d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005c22:	e8 25 c5 ff ff       	call   c000214c <st_dword>
c0005c27:	8d 43 24             	lea    eax,[ebx+0x24]
c0005c2a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005c2e:	e8 19 c5 ff ff       	call   c000214c <st_dword>
c0005c33:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005c36:	ba 02 00 00 00       	mov    edx,0x2
c0005c3b:	e8 0c c5 ff ff       	call   c000214c <st_dword>
c0005c40:	8d 43 30             	lea    eax,[ebx+0x30]
c0005c43:	ba 01 00 00 00       	mov    edx,0x1
c0005c48:	e8 fb c4 ff ff       	call   c0002148 <st_word>
c0005c4d:	8d 43 32             	lea    eax,[ebx+0x32]
c0005c50:	ba 06 00 00 00       	mov    edx,0x6
c0005c55:	e8 ee c4 ff ff       	call   c0002148 <st_word>
c0005c5a:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005c5e:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005c62:	8d 43 47             	lea    eax,[ebx+0x47]
c0005c65:	b9 13 00 00 00       	mov    ecx,0x13
c0005c6a:	ba da f7 02 c0       	mov    edx,0xc002f7da
c0005c6f:	eb 2f                	jmp    c0005ca0 <f_mkfs+0x537>
c0005c71:	8d 43 27             	lea    eax,[ebx+0x27]
c0005c74:	ba 00 00 21 50       	mov    edx,0x50210000
c0005c79:	e8 ce c4 ff ff       	call   c000214c <st_dword>
c0005c7e:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005c83:	8d 43 16             	lea    eax,[ebx+0x16]
c0005c86:	e8 bd c4 ff ff       	call   c0002148 <st_word>
c0005c8b:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005c8f:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005c93:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005c96:	b9 13 00 00 00       	mov    ecx,0x13
c0005c9b:	ba ee f7 02 c0       	mov    edx,0xc002f7ee
c0005ca0:	e8 aa c4 ff ff       	call   c000214f <mem_cpy>
c0005ca5:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005cab:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005cb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cb4:	e8 8f c4 ff ff       	call   c0002148 <st_word>
c0005cb9:	6a 01                	push   0x1
c0005cbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cbf:	53                   	push   ebx
c0005cc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cc4:	e8 25 c4 ff ff       	call   c00020ee <disk_write>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	85 c0                	test   eax,eax
c0005cce:	0f 85 34 02 00 00    	jne    c0005f08 <f_mkfs+0x79f>
c0005cd4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cd9:	83 f8 03             	cmp    eax,0x3
c0005cdc:	0f 85 98 00 00 00    	jne    c0005d7a <f_mkfs+0x611>
c0005ce2:	6a 01                	push   0x1
c0005ce4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005ce8:	83 c0 06             	add    eax,0x6
c0005ceb:	50                   	push   eax
c0005cec:	53                   	push   ebx
c0005ced:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cf1:	e8 f8 c3 ff ff       	call   c00020ee <disk_write>
c0005cf6:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfb:	31 d2                	xor    edx,edx
c0005cfd:	89 d8                	mov    eax,ebx
c0005cff:	e8 60 c4 ff ff       	call   c0002164 <mem_set>
c0005d04:	ba 52 52 61 41       	mov    edx,0x41615252
c0005d09:	89 d8                	mov    eax,ebx
c0005d0b:	e8 3c c4 ff ff       	call   c000214c <st_dword>
c0005d10:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005d16:	ba 72 72 41 61       	mov    edx,0x61417272
c0005d1b:	e8 2c c4 ff ff       	call   c000214c <st_dword>
c0005d20:	8d 56 ff             	lea    edx,[esi-0x1]
c0005d23:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005d29:	e8 1e c4 ff ff       	call   c000214c <st_dword>
c0005d2e:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005d34:	ba 02 00 00 00       	mov    edx,0x2
c0005d39:	e8 0e c4 ff ff       	call   c000214c <st_dword>
c0005d3e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005d43:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005d49:	e8 fa c3 ff ff       	call   c0002148 <st_word>
c0005d4e:	6a 01                	push   0x1
c0005d50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005d54:	83 c0 07             	add    eax,0x7
c0005d57:	50                   	push   eax
c0005d58:	53                   	push   ebx
c0005d59:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005d5d:	e8 8c c3 ff ff       	call   c00020ee <disk_write>
c0005d62:	83 c4 20             	add    esp,0x20
c0005d65:	6a 01                	push   0x1
c0005d67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d6b:	40                   	inc    eax
c0005d6c:	50                   	push   eax
c0005d6d:	53                   	push   ebx
c0005d6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d72:	e8 77 c3 ff ff       	call   c00020ee <disk_write>
c0005d77:	83 c4 10             	add    esp,0x10
c0005d7a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005d7e:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005d82:	c1 e8 09             	shr    eax,0x9
c0005d85:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005d8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d8f:	31 d2                	xor    edx,edx
c0005d91:	89 d8                	mov    eax,ebx
c0005d93:	e8 cc c3 ff ff       	call   c0002164 <mem_set>
c0005d98:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d9d:	31 c9                	xor    ecx,ecx
c0005d9f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005da7:	83 f8 01             	cmp    eax,0x1
c0005daa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005dae:	0f 94 c1             	sete   cl
c0005db1:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005db5:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005db9:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005dc1:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005dc9:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005dce:	75 21                	jne    c0005df1 <f_mkfs+0x688>
c0005dd0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005dd5:	89 d8                	mov    eax,ebx
c0005dd7:	e8 70 c3 ff ff       	call   c000214c <st_dword>
c0005ddc:	8d 43 04             	lea    eax,[ebx+0x4]
c0005ddf:	83 ca ff             	or     edx,0xffffffff
c0005de2:	e8 65 c3 ff ff       	call   c000214c <st_dword>
c0005de7:	8d 43 08             	lea    eax,[ebx+0x8]
c0005dea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005def:	eb 06                	jmp    c0005df7 <f_mkfs+0x68e>
c0005df1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005df5:	89 d8                	mov    eax,ebx
c0005df7:	e8 50 c3 ff ff       	call   c000214c <st_dword>
c0005dfc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e00:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005e04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005e08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005e0c:	39 ce                	cmp    esi,ecx
c0005e0e:	76 02                	jbe    c0005e12 <f_mkfs+0x6a9>
c0005e10:	89 ce                	mov    esi,ecx
c0005e12:	56                   	push   esi
c0005e13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005e17:	53                   	push   ebx
c0005e18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005e1c:	e8 cd c2 ff ff       	call   c00020ee <disk_write>
c0005e21:	83 c4 10             	add    esp,0x10
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 85 dc 00 00 00    	jne    c0005f08 <f_mkfs+0x79f>
c0005e2c:	31 d2                	xor    edx,edx
c0005e2e:	b9 00 02 00 00       	mov    ecx,0x200
c0005e33:	89 d8                	mov    eax,ebx
c0005e35:	e8 2a c3 ff ff       	call   c0002164 <mem_set>
c0005e3a:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005e3e:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005e42:	75 c0                	jne    c0005e04 <f_mkfs+0x69b>
c0005e44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005e48:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005e50:	40                   	inc    eax
c0005e51:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005e55:	0f 87 6e ff ff ff    	ja     c0005dc9 <f_mkfs+0x660>
c0005e5b:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005e60:	83 f8 03             	cmp    eax,0x3
c0005e63:	74 04                	je     c0005e69 <f_mkfs+0x700>
c0005e65:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005e69:	89 fe                	mov    esi,edi
c0005e6b:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005e6f:	76 04                	jbe    c0005e75 <f_mkfs+0x70c>
c0005e71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e75:	56                   	push   esi
c0005e76:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005e7a:	53                   	push   ebx
c0005e7b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005e7f:	e8 6a c2 ff ff       	call   c00020ee <disk_write>
c0005e84:	83 c4 10             	add    esp,0x10
c0005e87:	85 c0                	test   eax,eax
c0005e89:	75 7d                	jne    c0005f08 <f_mkfs+0x79f>
c0005e8b:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005e8f:	29 f7                	sub    edi,esi
c0005e91:	75 d6                	jne    c0005e69 <f_mkfs+0x700>
c0005e93:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005e98:	b9 0c 00 00 00       	mov    ecx,0xc
c0005e9d:	83 f8 03             	cmp    eax,0x3
c0005ea0:	74 1e                	je     c0005ec0 <f_mkfs+0x757>
c0005ea2:	b9 06 00 00 00       	mov    ecx,0x6
c0005ea7:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005eaf:	77 0f                	ja     c0005ec0 <f_mkfs+0x757>
c0005eb1:	b9 04 00 00 00       	mov    ecx,0x4
c0005eb6:	83 f8 02             	cmp    eax,0x2
c0005eb9:	74 05                	je     c0005ec0 <f_mkfs+0x757>
c0005ebb:	b9 01 00 00 00       	mov    ecx,0x1
c0005ec0:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005ec5:	75 2a                	jne    c0005ef1 <f_mkfs+0x788>
c0005ec7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005ecb:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005ed3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005ed7:	83 ec 0c             	sub    esp,0xc
c0005eda:	53                   	push   ebx
c0005edb:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005edf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ee3:	e8 89 d2 ff ff       	call   c0003171 <create_partition>
c0005ee8:	83 c4 10             	add    esp,0x10
c0005eeb:	89 c6                	mov    esi,eax
c0005eed:	85 c0                	test   eax,eax
c0005eef:	75 2e                	jne    c0005f1f <f_mkfs+0x7b6>
c0005ef1:	31 f6                	xor    esi,esi
c0005ef3:	50                   	push   eax
c0005ef4:	6a 00                	push   0x0
c0005ef6:	6a 00                	push   0x0
c0005ef8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005efc:	e8 03 c2 ff ff       	call   c0002104 <disk_ioctl>
c0005f01:	83 c4 10             	add    esp,0x10
c0005f04:	85 c0                	test   eax,eax
c0005f06:	74 17                	je     c0005f1f <f_mkfs+0x7b6>
c0005f08:	85 ed                	test   ebp,ebp
c0005f0a:	75 0c                	jne    c0005f18 <f_mkfs+0x7af>
c0005f0c:	83 ec 0c             	sub    esp,0xc
c0005f0f:	53                   	push   ebx
c0005f10:	e8 6f 00 00 00       	call   c0005f84 <ff_memfree>
c0005f15:	83 c4 10             	add    esp,0x10
c0005f18:	be 01 00 00 00       	mov    esi,0x1
c0005f1d:	eb 40                	jmp    c0005f5f <f_mkfs+0x7f6>
c0005f1f:	85 ed                	test   ebp,ebp
c0005f21:	75 3c                	jne    c0005f5f <f_mkfs+0x7f6>
c0005f23:	83 ec 0c             	sub    esp,0xc
c0005f26:	53                   	push   ebx
c0005f27:	e8 58 00 00 00       	call   c0005f84 <ff_memfree>
c0005f2c:	83 c4 10             	add    esp,0x10
c0005f2f:	eb 2e                	jmp    c0005f5f <f_mkfs+0x7f6>
c0005f31:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005f36:	0f 85 3b fb ff ff    	jne    c0005a77 <f_mkfs+0x30e>
c0005f3c:	e9 15 fc ff ff       	jmp    c0005b56 <f_mkfs+0x3ed>
c0005f41:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005f46:	0f 85 31 fb ff ff    	jne    c0005a7d <f_mkfs+0x314>
c0005f4c:	89 cf                	mov    edi,ecx
c0005f4e:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005f54:	0f 86 29 fa ff ff    	jbe    c0005983 <f_mkfs+0x21a>
c0005f5a:	e9 f7 fb ff ff       	jmp    c0005b56 <f_mkfs+0x3ed>
c0005f5f:	83 c4 5c             	add    esp,0x5c
c0005f62:	89 f0                	mov    eax,esi
c0005f64:	5b                   	pop    ebx
c0005f65:	5e                   	pop    esi
c0005f66:	5f                   	pop    edi
c0005f67:	5d                   	pop    ebp
c0005f68:	c3                   	ret    
c0005f69:	66 90                	xchg   ax,ax
c0005f6b:	90                   	nop

c0005f6c <ff_memalloc>:
c0005f6c:	83 ec 0c             	sub    esp,0xc
c0005f6f:	83 ec 0c             	sub    esp,0xc
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	e8 c8 06 01 00       	call   c0016643 <malloc>
c0005f7b:	83 c4 10             	add    esp,0x10
c0005f7e:	83 c4 0c             	add    esp,0xc
c0005f81:	c3                   	ret    
c0005f82:	66 90                	xchg   ax,ax

c0005f84 <ff_memfree>:
c0005f84:	83 ec 0c             	sub    esp,0xc
c0005f87:	83 ec 0c             	sub    esp,0xc
c0005f8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f8e:	e8 c0 06 01 00       	call   c0016653 <free>
c0005f93:	83 c4 10             	add    esp,0x10
c0005f96:	90                   	nop
c0005f97:	83 c4 0c             	add    esp,0xc
c0005f9a:	c3                   	ret    
c0005f9b:	90                   	nop

c0005f9c <ff_uni2oem>:
c0005f9c:	83 ec 14             	sub    esp,0x14
c0005f9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005fa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005fae:	c7 44 24 0c 20 fc 02 c0 	mov    DWORD PTR [esp+0xc],0xc002fc20
c0005fb6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005fbb:	77 0b                	ja     c0005fc8 <ff_uni2oem+0x2c>
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005fc6:	eb 68                	jmp    c0006030 <ff_uni2oem+0x94>
c0005fc8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005fd0:	77 5e                	ja     c0006030 <ff_uni2oem+0x94>
c0005fd2:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005fd6:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005fdb:	75 53                	jne    c0006030 <ff_uni2oem+0x94>
c0005fdd:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005fe4:	eb 12                	jmp    c0005ff8 <ff_uni2oem+0x5c>
c0005fe6:	66 90                	xchg   ax,ax
c0005fe8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005fed:	83 c0 01             	add    eax,0x1
c0005ff0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ff8:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ffd:	83 f8 7f             	cmp    eax,0x7f
c0006000:	77 1e                	ja     c0006020 <ff_uni2oem+0x84>
c0006002:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0006007:	01 c0                	add    eax,eax
c0006009:	89 c2                	mov    edx,eax
c000600b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000600f:	01 d0                	add    eax,edx
c0006011:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006014:	0f b7 c0             	movzx  eax,ax
c0006017:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000601b:	75 cb                	jne    c0005fe8 <ff_uni2oem+0x4c>
c000601d:	8d 76 00             	lea    esi,[esi+0x0]
c0006020:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0006025:	83 e8 80             	sub    eax,0xffffff80
c0006028:	0f b6 c0             	movzx  eax,al
c000602b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0006030:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0006035:	83 c4 14             	add    esp,0x14
c0006038:	c3                   	ret    
c0006039:	8d 76 00             	lea    esi,[esi+0x0]

c000603c <ff_oem2uni>:
c000603c:	83 ec 18             	sub    esp,0x18
c000603f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006043:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006047:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000604c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0006050:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0006057:	c7 44 24 10 20 fc 02 c0 	mov    DWORD PTR [esp+0x10],0xc002fc20
c000605f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006064:	83 f8 7f             	cmp    eax,0x7f
c0006067:	77 0b                	ja     c0006074 <ff_oem2uni+0x38>
c0006069:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000606d:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0006072:	eb 34                	jmp    c00060a8 <ff_oem2uni+0x6c>
c0006074:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0006078:	3d b5 01 00 00       	cmp    eax,0x1b5
c000607d:	75 29                	jne    c00060a8 <ff_oem2uni+0x6c>
c000607f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006084:	3d ff 00 00 00       	cmp    eax,0xff
c0006089:	77 1d                	ja     c00060a8 <ff_oem2uni+0x6c>
c000608b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006090:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0006095:	01 c0                	add    eax,eax
c0006097:	89 c2                	mov    edx,eax
c0006099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000609d:	01 d0                	add    eax,edx
c000609f:	66 8b 00             	mov    ax,WORD PTR [eax]
c00060a2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00060ad:	83 c4 18             	add    esp,0x18
c00060b0:	c3                   	ret    
c00060b1:	8d 76 00             	lea    esi,[esi+0x0]

c00060b4 <ff_wtoupper>:
c00060b4:	83 ec 10             	sub    esp,0x10
c00060b7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00060bf:	0f 87 ab 01 00 00    	ja     c0006270 <ff_wtoupper+0x1bc>
c00060c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00060c9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060ce:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00060d3:	3d ff 0f 00 00       	cmp    eax,0xfff
c00060d8:	77 0a                	ja     c00060e4 <ff_wtoupper+0x30>
c00060da:	b8 20 fa 02 c0       	mov    eax,0xc002fa20
c00060df:	eb 0b                	jmp    c00060ec <ff_wtoupper+0x38>
c00060e1:	8d 76 00             	lea    esi,[esi+0x0]
c00060e4:	b8 60 f9 02 c0       	mov    eax,0xc002f960
c00060e9:	8d 76 00             	lea    esi,[esi+0x0]
c00060ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060f4:	8d 50 02             	lea    edx,[eax+0x2]
c00060f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00060fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0006103:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006108:	85 c0                	test   eax,eax
c000610a:	0f 84 54 01 00 00    	je     c0006264 <ff_wtoupper+0x1b0>
c0006110:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006115:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000611a:	39 c2                	cmp    edx,eax
c000611c:	0f 82 42 01 00 00    	jb     c0006264 <ff_wtoupper+0x1b0>
c0006122:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006126:	8d 50 02             	lea    edx,[eax+0x2]
c0006129:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000612d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006130:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006135:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000613a:	c1 e8 08             	shr    eax,0x8
c000613d:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006142:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0006147:	0f b6 c0             	movzx  eax,al
c000614a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000614f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006154:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0006159:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000615e:	01 ca                	add    edx,ecx
c0006160:	39 d0                	cmp    eax,edx
c0006162:	0f 8d d8 00 00 00    	jge    c0006240 <ff_wtoupper+0x18c>
c0006168:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000616d:	83 f8 08             	cmp    eax,0x8
c0006170:	0f 87 ea 00 00 00    	ja     c0006260 <ff_wtoupper+0x1ac>
c0006176:	8b 04 85 20 f9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd06e0]
c000617d:	ff e0                	jmp    eax
c000617f:	90                   	nop
c0006180:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006185:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000618a:	29 c2                	sub    edx,eax
c000618c:	89 d0                	mov    eax,edx
c000618e:	01 c0                	add    eax,eax
c0006190:	89 c2                	mov    edx,eax
c0006192:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006196:	01 d0                	add    eax,edx
c0006198:	66 8b 00             	mov    ax,WORD PTR [eax]
c000619b:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061a0:	e9 97 00 00 00       	jmp    c000623c <ff_wtoupper+0x188>
c00061a5:	8d 76 00             	lea    esi,[esi+0x0]
c00061a8:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00061ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00061b1:	89 d1                	mov    ecx,edx
c00061b3:	29 c1                	sub    ecx,eax
c00061b5:	89 c8                	mov    eax,ecx
c00061b7:	83 e0 01             	and    eax,0x1
c00061ba:	89 c2                	mov    edx,eax
c00061bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061c1:	29 d0                	sub    eax,edx
c00061c3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061c8:	eb 72                	jmp    c000623c <ff_wtoupper+0x188>
c00061ca:	66 90                	xchg   ax,ax
c00061cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061d1:	83 e8 10             	sub    eax,0x10
c00061d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061d9:	eb 61                	jmp    c000623c <ff_wtoupper+0x188>
c00061db:	90                   	nop
c00061dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061e1:	83 e8 20             	sub    eax,0x20
c00061e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061e9:	eb 51                	jmp    c000623c <ff_wtoupper+0x188>
c00061eb:	90                   	nop
c00061ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061f1:	83 e8 30             	sub    eax,0x30
c00061f4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061f9:	eb 41                	jmp    c000623c <ff_wtoupper+0x188>
c00061fb:	90                   	nop
c00061fc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006201:	83 e8 1a             	sub    eax,0x1a
c0006204:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006209:	eb 31                	jmp    c000623c <ff_wtoupper+0x188>
c000620b:	90                   	nop
c000620c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006211:	83 c0 08             	add    eax,0x8
c0006214:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006219:	eb 21                	jmp    c000623c <ff_wtoupper+0x188>
c000621b:	90                   	nop
c000621c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006221:	83 e8 50             	sub    eax,0x50
c0006224:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006229:	eb 11                	jmp    c000623c <ff_wtoupper+0x188>
c000622b:	90                   	nop
c000622c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006231:	2d 60 1c 00 00       	sub    eax,0x1c60
c0006236:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000623b:	90                   	nop
c000623c:	eb 22                	jmp    c0006260 <ff_wtoupper+0x1ac>
c000623e:	66 90                	xchg   ax,ax
c0006240:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006245:	85 c0                	test   eax,eax
c0006247:	0f 85 a3 fe ff ff    	jne    c00060f0 <ff_wtoupper+0x3c>
c000624d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006252:	01 c0                	add    eax,eax
c0006254:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006258:	e9 93 fe ff ff       	jmp    c00060f0 <ff_wtoupper+0x3c>
c000625d:	8d 76 00             	lea    esi,[esi+0x0]
c0006260:	90                   	nop
c0006261:	8d 76 00             	lea    esi,[esi+0x0]
c0006264:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006269:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000626d:	8d 76 00             	lea    esi,[esi+0x0]
c0006270:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006274:	83 c4 10             	add    esp,0x10
c0006277:	c3                   	ret    

c0006278 <utf2ucs>:
c0006278:	57                   	push   edi
c0006279:	31 c9                	xor    ecx,ecx
c000627b:	56                   	push   esi
c000627c:	89 d7                	mov    edi,edx
c000627e:	53                   	push   ebx
c000627f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006283:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006287:	89 de                	mov    esi,ebx
c0006289:	c1 fe 08             	sar    esi,0x8
c000628c:	89 f2                	mov    edx,esi
c000628e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006291:	41                   	inc    ecx
c0006292:	85 db                	test   ebx,ebx
c0006294:	75 e9                	jne    c000627f <utf2ucs+0x7>
c0006296:	5b                   	pop    ebx
c0006297:	5e                   	pop    esi
c0006298:	5f                   	pop    edi
c0006299:	c3                   	ret    

c000629a <ucs2utfn>:
c000629a:	83 e1 fe             	and    ecx,0xfffffffe
c000629d:	01 d1                	add    ecx,edx
c000629f:	39 d1                	cmp    ecx,edx
c00062a1:	75 04                	jne    c00062a7 <ucs2utfn+0xd>
c00062a3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00062a6:	c3                   	ret    
c00062a7:	57                   	push   edi
c00062a8:	56                   	push   esi
c00062a9:	53                   	push   ebx
c00062aa:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c00062ad:	83 c2 02             	add    edx,0x2
c00062b0:	89 de                	mov    esi,ebx
c00062b2:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c00062b6:	c1 e6 08             	shl    esi,0x8
c00062b9:	09 f3                	or     ebx,esi
c00062bb:	83 fb 3b             	cmp    ebx,0x3b
c00062be:	74 50                	je     c0006310 <ucs2utfn+0x76>
c00062c0:	83 fb 7f             	cmp    ebx,0x7f
c00062c3:	7f 05                	jg     c00062ca <ucs2utfn+0x30>
c00062c5:	88 18                	mov    BYTE PTR [eax],bl
c00062c7:	40                   	inc    eax
c00062c8:	eb 42                	jmp    c000630c <ucs2utfn+0x72>
c00062ca:	89 de                	mov    esi,ebx
c00062cc:	89 df                	mov    edi,ebx
c00062ce:	c1 fe 06             	sar    esi,0x6
c00062d1:	83 e7 3f             	and    edi,0x3f
c00062d4:	83 cf 80             	or     edi,0xffffff80
c00062d7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00062dd:	7f 12                	jg     c00062f1 <ucs2utfn+0x57>
c00062df:	83 ce c0             	or     esi,0xffffffc0
c00062e2:	83 c0 02             	add    eax,0x2
c00062e5:	89 f3                	mov    ebx,esi
c00062e7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00062ea:	89 fb                	mov    ebx,edi
c00062ec:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00062ef:	eb 1b                	jmp    c000630c <ucs2utfn+0x72>
c00062f1:	c1 fb 0c             	sar    ebx,0xc
c00062f4:	83 e6 3f             	and    esi,0x3f
c00062f7:	83 cb e0             	or     ebx,0xffffffe0
c00062fa:	83 ce 80             	or     esi,0xffffff80
c00062fd:	88 18                	mov    BYTE PTR [eax],bl
c00062ff:	89 f3                	mov    ebx,esi
c0006301:	83 c0 03             	add    eax,0x3
c0006304:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006307:	89 fb                	mov    ebx,edi
c0006309:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000630c:	39 d1                	cmp    ecx,edx
c000630e:	75 9a                	jne    c00062aa <ucs2utfn+0x10>
c0006310:	5b                   	pop    ebx
c0006311:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006314:	5e                   	pop    esi
c0006315:	5f                   	pop    edi
c0006316:	c3                   	ret    

c0006317 <isjoliet>:
c0006317:	31 d2                	xor    edx,edx
c0006319:	80 38 25             	cmp    BYTE PTR [eax],0x25
c000631c:	75 26                	jne    c0006344 <isjoliet+0x2d>
c000631e:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006322:	75 20                	jne    c0006344 <isjoliet+0x2d>
c0006324:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006328:	ba 02 00 00 00       	mov    edx,0x2
c000632d:	83 f8 43             	cmp    eax,0x43
c0006330:	74 12                	je     c0006344 <isjoliet+0x2d>
c0006332:	ba 03 00 00 00       	mov    edx,0x3
c0006337:	83 f8 45             	cmp    eax,0x45
c000633a:	74 08                	je     c0006344 <isjoliet+0x2d>
c000633c:	31 d2                	xor    edx,edx
c000633e:	83 f8 40             	cmp    eax,0x40
c0006341:	0f 94 c2             	sete   dl
c0006344:	89 d0                	mov    eax,edx
c0006346:	c3                   	ret    

c0006347 <htohl_32>:
c0006347:	8b 00                	mov    eax,DWORD PTR [eax]
c0006349:	c3                   	ret    

c000634a <iso_733>:
c000634a:	eb fb                	jmp    c0006347 <htohl_32>

c000634c <bgrad_cache>:
c000634c:	83 fa 0e             	cmp    edx,0xe
c000634f:	77 16                	ja     c0006367 <bgrad_cache+0x1b>
c0006351:	53                   	push   ebx
c0006352:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006355:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006359:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000635c:	42                   	inc    edx
c000635d:	83 fa 0f             	cmp    edx,0xf
c0006360:	75 f3                	jne    c0006355 <bgrad_cache+0x9>
c0006362:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006365:	5b                   	pop    ebx
c0006366:	c3                   	ret    
c0006367:	c3                   	ret    

c0006368 <ucscompare>:
c0006368:	55                   	push   ebp
c0006369:	57                   	push   edi
c000636a:	89 c7                	mov    edi,eax
c000636c:	56                   	push   esi
c000636d:	89 d6                	mov    esi,edx
c000636f:	53                   	push   ebx
c0006370:	31 d2                	xor    edx,edx
c0006372:	83 ec 1c             	sub    esp,0x1c
c0006375:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006379:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000637e:	c1 e3 08             	shl    ebx,0x8
c0006381:	09 c3                	or     ebx,eax
c0006383:	39 ca                	cmp    edx,ecx
c0006385:	7d 42                	jge    c00063c9 <ucscompare+0x61>
c0006387:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000638b:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006390:	c1 e0 08             	shl    eax,0x8
c0006393:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006397:	09 e8                	or     eax,ebp
c0006399:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000639d:	83 f8 3b             	cmp    eax,0x3b
c00063a0:	74 27                	je     c00063c9 <ucscompare+0x61>
c00063a2:	83 ec 0c             	sub    esp,0xc
c00063a5:	50                   	push   eax
c00063a6:	e8 a5 a5 ff ff       	call   c0000950 <tolower>
c00063ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00063ae:	89 c5                	mov    ebp,eax
c00063b0:	e8 9b a5 ff ff       	call   c0000950 <tolower>
c00063b5:	83 c4 10             	add    esp,0x10
c00063b8:	39 c5                	cmp    ebp,eax
c00063ba:	75 20                	jne    c00063dc <ucscompare+0x74>
c00063bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00063c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00063c4:	83 c2 02             	add    edx,0x2
c00063c7:	eb ac                	jmp    c0006375 <ucscompare+0xd>
c00063c9:	85 db                	test   ebx,ebx
c00063cb:	0f 95 c2             	setne  dl
c00063ce:	31 c0                	xor    eax,eax
c00063d0:	83 fb 2f             	cmp    ebx,0x2f
c00063d3:	0f 95 c0             	setne  al
c00063d6:	21 d0                	and    eax,edx
c00063d8:	f7 d8                	neg    eax
c00063da:	eb 03                	jmp    c00063df <ucscompare+0x77>
c00063dc:	83 c8 ff             	or     eax,0xffffffff
c00063df:	83 c4 1c             	add    esp,0x1c
c00063e2:	5b                   	pop    ebx
c00063e3:	5e                   	pop    esi
c00063e4:	5f                   	pop    edi
c00063e5:	5d                   	pop    ebp
c00063e6:	c3                   	ret    

c00063e7 <fncompare>:
c00063e7:	55                   	push   ebp
c00063e8:	57                   	push   edi
c00063e9:	89 c7                	mov    edi,eax
c00063eb:	56                   	push   esi
c00063ec:	89 ce                	mov    esi,ecx
c00063ee:	53                   	push   ebx
c00063ef:	31 db                	xor    ebx,ebx
c00063f1:	83 ec 1c             	sub    esp,0x1c
c00063f4:	39 d3                	cmp    ebx,edx
c00063f6:	7d 45                	jge    c000643d <fncompare+0x56>
c00063f8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00063fc:	83 f8 3b             	cmp    eax,0x3b
c00063ff:	74 3c                	je     c000643d <fncompare+0x56>
c0006401:	83 f8 2e             	cmp    eax,0x2e
c0006404:	75 0e                	jne    c0006414 <fncompare+0x2d>
c0006406:	8d 4a ff             	lea    ecx,[edx-0x1]
c0006409:	39 d9                	cmp    ecx,ebx
c000640b:	74 30                	je     c000643d <fncompare+0x56>
c000640d:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0006412:	74 29                	je     c000643d <fncompare+0x56>
c0006414:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006418:	83 ec 0c             	sub    esp,0xc
c000641b:	50                   	push   eax
c000641c:	e8 2f a5 ff ff       	call   c0000950 <tolower>
c0006421:	89 c5                	mov    ebp,eax
c0006423:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006427:	89 04 24             	mov    DWORD PTR [esp],eax
c000642a:	e8 21 a5 ff ff       	call   c0000950 <tolower>
c000642f:	83 c4 10             	add    esp,0x10
c0006432:	39 c5                	cmp    ebp,eax
c0006434:	75 1e                	jne    c0006454 <fncompare+0x6d>
c0006436:	43                   	inc    ebx
c0006437:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000643b:	eb b7                	jmp    c00063f4 <fncompare+0xd>
c000643d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	0f 95 c1             	setne  cl
c0006446:	31 c0                	xor    eax,eax
c0006448:	83 fa 2f             	cmp    edx,0x2f
c000644b:	0f 95 c0             	setne  al
c000644e:	21 c8                	and    eax,ecx
c0006450:	f7 d8                	neg    eax
c0006452:	eb 03                	jmp    c0006457 <fncompare+0x70>
c0006454:	83 c8 ff             	or     eax,0xffffffff
c0006457:	83 c4 1c             	add    esp,0x1c
c000645a:	5b                   	pop    ebx
c000645b:	5e                   	pop    esi
c000645c:	5f                   	pop    edi
c000645d:	5d                   	pop    ebp
c000645e:	c3                   	ret    

c000645f <bclear_cache>:
c000645f:	83 ec 18             	sub    esp,0x18
c0006462:	68 20 fd 02 c0       	push   0xc002fd20
c0006467:	e8 54 31 02 00       	call   c00295c0 <iso_kprintf>
c000646c:	83 c4 10             	add    esp,0x10
c000646f:	31 c0                	xor    eax,eax
c0006471:	8b 14 85 20 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9fe0]
c0006478:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000647e:	8b 14 85 80 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9f80]
c0006485:	40                   	inc    eax
c0006486:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000648c:	83 f8 10             	cmp    eax,0x10
c000648f:	75 e0                	jne    c0006471 <bclear_cache+0x12>
c0006491:	83 c4 0c             	add    esp,0xc
c0006494:	c3                   	ret    

c0006495 <bclear>:
c0006495:	eb c8                	jmp    c000645f <bclear_cache>

c0006497 <iso_break_all>:
c0006497:	83 ec 18             	sub    esp,0x18
c000649a:	68 2e fd 02 c0       	push   0xc002fd2e
c000649f:	e8 1c 31 02 00       	call   c00295c0 <iso_kprintf>
c00064a4:	83 c4 10             	add    esp,0x10
c00064a7:	31 c0                	xor    eax,eax
c00064a9:	c7 80 b0 6d 03 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffc9250],0x1
c00064b3:	05 94 00 00 00       	add    eax,0x94
c00064b8:	3d 40 09 00 00       	cmp    eax,0x940
c00064bd:	75 ea                	jne    c00064a9 <iso_break_all+0x12>
c00064bf:	83 c4 0c             	add    esp,0xc
c00064c2:	c3                   	ret    

c00064c3 <isoReadDiscSector>:
c00064c3:	83 ec 0c             	sub    esp,0xc
c00064c6:	0f be 05 60 60 03 c0 	movsx  eax,BYTE PTR ds:0xc0036060
c00064cd:	50                   	push   eax
c00064ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00064d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00064d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00064da:	e8 85 30 02 00       	call   c0029564 <isoReadDiscSectorHelper>
c00064df:	83 c4 1c             	add    esp,0x1c
c00064e2:	c3                   	ret    

c00064e3 <bread_cache>:
c00064e3:	55                   	push   ebp
c00064e4:	57                   	push   edi
c00064e5:	89 d7                	mov    edi,edx
c00064e7:	56                   	push   esi
c00064e8:	ba 0f 00 00 00       	mov    edx,0xf
c00064ed:	53                   	push   ebx
c00064ee:	89 c6                	mov    esi,eax
c00064f0:	83 ec 0c             	sub    esp,0xc
c00064f3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00064f6:	39 38                	cmp    DWORD PTR [eax],edi
c00064f8:	74 3c                	je     c0006536 <bread_cache+0x53>
c00064fa:	4a                   	dec    edx
c00064fb:	83 fa ff             	cmp    edx,0xffffffff
c00064fe:	75 f3                	jne    c00064f3 <bread_cache+0x10>
c0006500:	31 db                	xor    ebx,ebx
c0006502:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0006505:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0006508:	74 08                	je     c0006512 <bread_cache+0x2f>
c000650a:	43                   	inc    ebx
c000650b:	83 fb 10             	cmp    ebx,0x10
c000650e:	75 f2                	jne    c0006502 <bread_cache+0x1f>
c0006510:	31 db                	xor    ebx,ebx
c0006512:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0006515:	50                   	push   eax
c0006516:	6a 01                	push   0x1
c0006518:	57                   	push   edi
c0006519:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000651c:	83 c0 04             	add    eax,0x4
c000651f:	50                   	push   eax
c0006520:	e8 9e ff ff ff       	call   c00064c3 <isoReadDiscSector>
c0006525:	83 c4 10             	add    esp,0x10
c0006528:	83 c9 ff             	or     ecx,0xffffffff
c000652b:	85 c0                	test   eax,eax
c000652d:	78 13                	js     c0006542 <bread_cache+0x5f>
c000652f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006532:	89 da                	mov    edx,ebx
c0006534:	89 38                	mov    DWORD PTR [eax],edi
c0006536:	89 f0                	mov    eax,esi
c0006538:	e8 0f fe ff ff       	call   c000634c <bgrad_cache>
c000653d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006542:	83 c4 0c             	add    esp,0xc
c0006545:	89 c8                	mov    eax,ecx
c0006547:	5b                   	pop    ebx
c0006548:	5e                   	pop    esi
c0006549:	5f                   	pop    edi
c000654a:	5d                   	pop    ebp
c000654b:	c3                   	ret    

c000654c <biread>:
c000654c:	89 c2                	mov    edx,eax
c000654e:	b8 80 60 03 c0       	mov    eax,0xc0036080
c0006553:	eb 8e                	jmp    c00064e3 <bread_cache>

c0006555 <bdread>:
c0006555:	89 c2                	mov    edx,eax
c0006557:	b8 20 60 03 c0       	mov    eax,0xc0036020
c000655c:	eb 85                	jmp    c00064e3 <bread_cache>

c000655e <strnicmp>:
c000655e:	55                   	push   ebp
c000655f:	57                   	push   edi
c0006560:	31 ff                	xor    edi,edi
c0006562:	56                   	push   esi
c0006563:	53                   	push   ebx
c0006564:	83 ec 0c             	sub    esp,0xc
c0006567:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000656b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000656f:	74 43                	je     c00065b4 <strnicmp+0x56>
c0006571:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006575:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006579:	85 c0                	test   eax,eax
c000657b:	74 37                	je     c00065b4 <strnicmp+0x56>
c000657d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006581:	85 d2                	test   edx,edx
c0006583:	74 2f                	je     c00065b4 <strnicmp+0x56>
c0006585:	39 d0                	cmp    eax,edx
c0006587:	8d 6f 01             	lea    ebp,[edi+0x1]
c000658a:	75 04                	jne    c0006590 <strnicmp+0x32>
c000658c:	89 ef                	mov    edi,ebp
c000658e:	eb db                	jmp    c000656b <strnicmp+0xd>
c0006590:	83 ec 0c             	sub    esp,0xc
c0006593:	50                   	push   eax
c0006594:	e8 b7 a3 ff ff       	call   c0000950 <tolower>
c0006599:	89 c3                	mov    ebx,eax
c000659b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000659f:	89 ef                	mov    edi,ebp
c00065a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00065a4:	e8 a7 a3 ff ff       	call   c0000950 <tolower>
c00065a9:	83 c4 10             	add    esp,0x10
c00065ac:	29 c3                	sub    ebx,eax
c00065ae:	89 d8                	mov    eax,ebx
c00065b0:	74 b9                	je     c000656b <strnicmp+0xd>
c00065b2:	eb 02                	jmp    c00065b6 <strnicmp+0x58>
c00065b4:	31 c0                	xor    eax,eax
c00065b6:	83 c4 0c             	add    esp,0xc
c00065b9:	5b                   	pop    ebx
c00065ba:	5e                   	pop    esi
c00065bb:	5f                   	pop    edi
c00065bc:	5d                   	pop    ebp
c00065bd:	c3                   	ret    

c00065be <find_object>:
c00065be:	55                   	push   ebp
c00065bf:	57                   	push   edi
c00065c0:	89 c7                	mov    edi,eax
c00065c2:	56                   	push   esi
c00065c3:	53                   	push   ebx
c00065c4:	89 d3                	mov    ebx,edx
c00065c6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00065cc:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00065d3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00065d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065db:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c00065e2:	74 0b                	je     c00065ef <find_object+0x31>
c00065e4:	89 fa                	mov    edx,edi
c00065e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065ea:	e8 89 fc ff ff       	call   c0006278 <utf2ucs>
c00065ef:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00065f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00065f6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00065fb:	7e 11                	jle    c000660e <find_object+0x50>
c00065fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006601:	e8 46 ff ff ff       	call   c000654c <biread>
c0006606:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000660a:	85 c0                	test   eax,eax
c000660c:	79 07                	jns    c0006615 <find_object+0x57>
c000660e:	31 db                	xor    ebx,ebx
c0006610:	e9 56 01 00 00       	jmp    c000676b <find_object+0x1ad>
c0006615:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000661d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006621:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006625:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c000662c:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c0006630:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006633:	85 f6                	test   esi,esi
c0006635:	75 0e                	jne    c0006645 <find_object+0x87>
c0006637:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000663b:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c0006643:	eb b1                	jmp    c00065f6 <find_object+0x38>
c0006645:	8b 2d 94 76 03 c0    	mov    ebp,DWORD PTR ds:0xc0037694
c000664b:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c000664f:	85 ed                	test   ebp,ebp
c0006651:	89 c8                	mov    eax,ecx
c0006653:	74 2b                	je     c0006680 <find_object+0xc2>
c0006655:	8d 43 21             	lea    eax,[ebx+0x21]
c0006658:	8d 54 24 20          	lea    edx,[esp+0x20]
c000665c:	e8 07 fd ff ff       	call   c0006368 <ucscompare>
c0006661:	85 c0                	test   eax,eax
c0006663:	0f 84 bf 00 00 00    	je     c0006728 <find_object+0x16a>
c0006669:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000666c:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006670:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006678:	0f 8e da 00 00 00    	jle    c0006758 <find_object+0x19a>
c000667e:	eb b7                	jmp    c0006637 <find_object+0x79>
c0006680:	29 ce                	sub    esi,ecx
c0006682:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006686:	a8 01                	test   al,0x1
c0006688:	74 05                	je     c000668f <find_object+0xd1>
c000668a:	83 ee 21             	sub    esi,0x21
c000668d:	eb 5a                	jmp    c00066e9 <find_object+0x12b>
c000668f:	42                   	inc    edx
c0006690:	83 ee 22             	sub    esi,0x22
c0006693:	eb 54                	jmp    c00066e9 <find_object+0x12b>
c0006695:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006698:	48                   	dec    eax
c0006699:	3c 01                	cmp    al,0x1
c000669b:	77 51                	ja     c00066ee <find_object+0x130>
c000669d:	50                   	push   eax
c000669e:	6a 02                	push   0x2
c00066a0:	68 3d fd 02 c0       	push   0xc002fd3d
c00066a5:	52                   	push   edx
c00066a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00066aa:	e8 31 a1 ff ff       	call   c00007e0 <strncmp>
c00066af:	83 c4 10             	add    esp,0x10
c00066b2:	85 c0                	test   eax,eax
c00066b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00066b8:	75 27                	jne    c00066e1 <find_object+0x123>
c00066ba:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00066be:	8d 68 fb             	lea    ebp,[eax-0x5]
c00066c1:	50                   	push   eax
c00066c2:	8d 42 05             	lea    eax,[edx+0x5]
c00066c5:	55                   	push   ebp
c00066c6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00066ca:	50                   	push   eax
c00066cb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00066cf:	50                   	push   eax
c00066d0:	e8 ab 9f ff ff       	call   c0000680 <strncpy>
c00066d5:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c00066da:	83 c4 10             	add    esp,0x10
c00066dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00066e1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00066e5:	29 c6                	sub    esi,eax
c00066e7:	01 c2                	add    edx,eax
c00066e9:	83 fe 03             	cmp    esi,0x3
c00066ec:	7f a7                	jg     c0006695 <find_object+0xd7>
c00066ee:	85 ed                	test   ebp,ebp
c00066f0:	7e 40                	jle    c0006732 <find_object+0x174>
c00066f2:	51                   	push   ecx
c00066f3:	51                   	push   ecx
c00066f4:	6a 2f                	push   0x2f
c00066f6:	57                   	push   edi
c00066f7:	e8 a4 a0 ff ff       	call   c00007a0 <strchr>
c00066fc:	83 c4 10             	add    esp,0x10
c00066ff:	85 c0                	test   eax,eax
c0006701:	74 04                	je     c0006707 <find_object+0x149>
c0006703:	29 f8                	sub    eax,edi
c0006705:	eb 0c                	jmp    c0006713 <find_object+0x155>
c0006707:	83 ec 0c             	sub    esp,0xc
c000670a:	57                   	push   edi
c000670b:	e8 60 9e ff ff       	call   c0000570 <strlen>
c0006710:	83 c4 10             	add    esp,0x10
c0006713:	52                   	push   edx
c0006714:	50                   	push   eax
c0006715:	57                   	push   edi
c0006716:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000671a:	50                   	push   eax
c000671b:	e8 3e fe ff ff       	call   c000655e <strnicmp>
c0006720:	83 c4 10             	add    esp,0x10
c0006723:	e9 39 ff ff ff       	jmp    c0006661 <find_object+0xa3>
c0006728:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c000672c:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c0006730:	eb 1e                	jmp    c0006750 <find_object+0x192>
c0006732:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006736:	8d 43 21             	lea    eax,[ebx+0x21]
c0006739:	89 f9                	mov    ecx,edi
c000673b:	e8 a7 fc ff ff       	call   c00063e7 <fncompare>
c0006740:	85 c0                	test   eax,eax
c0006742:	0f 85 21 ff ff ff    	jne    c0006669 <find_object+0xab>
c0006748:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c000674c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006750:	0f 85 13 ff ff ff    	jne    c0006669 <find_object+0xab>
c0006756:	eb 13                	jmp    c000676b <find_object+0x1ad>
c0006758:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000675c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006760:	0f 8f b7 fe ff ff    	jg     c000661d <find_object+0x5f>
c0006766:	e9 cc fe ff ff       	jmp    c0006637 <find_object+0x79>
c000676b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006771:	89 d8                	mov    eax,ebx
c0006773:	5b                   	pop    ebx
c0006774:	5e                   	pop    esi
c0006775:	5f                   	pop    edi
c0006776:	5d                   	pop    ebp
c0006777:	c3                   	ret    

c0006778 <find_object_path>:
c0006778:	55                   	push   ebp
c0006779:	57                   	push   edi
c000677a:	89 d7                	mov    edi,edx
c000677c:	56                   	push   esi
c000677d:	89 c6                	mov    esi,eax
c000677f:	53                   	push   ebx
c0006780:	89 cb                	mov    ebx,ecx
c0006782:	83 ec 0c             	sub    esp,0xc
c0006785:	50                   	push   eax
c0006786:	50                   	push   eax
c0006787:	6a 2f                	push   0x2f
c0006789:	56                   	push   esi
c000678a:	e8 11 a0 ff ff       	call   c00007a0 <strchr>
c000678f:	83 c4 10             	add    esp,0x10
c0006792:	89 c5                	mov    ebp,eax
c0006794:	85 c0                	test   eax,eax
c0006796:	74 3a                	je     c00067d2 <find_object_path+0x5a>
c0006798:	39 ee                	cmp    esi,ebp
c000679a:	74 31                	je     c00067cd <find_object_path+0x55>
c000679c:	8d 43 0a             	lea    eax,[ebx+0xa]
c000679f:	e8 a6 fb ff ff       	call   c000634a <iso_733>
c00067a4:	89 c2                	mov    edx,eax
c00067a6:	8d 43 02             	lea    eax,[ebx+0x2]
c00067a9:	e8 9c fb ff ff       	call   c000634a <iso_733>
c00067ae:	83 ec 0c             	sub    esp,0xc
c00067b1:	89 c1                	mov    ecx,eax
c00067b3:	52                   	push   edx
c00067b4:	89 f0                	mov    eax,esi
c00067b6:	ba 01 00 00 00       	mov    edx,0x1
c00067bb:	e8 fe fd ff ff       	call   c00065be <find_object>
c00067c0:	83 c4 10             	add    esp,0x10
c00067c3:	89 c3                	mov    ebx,eax
c00067c5:	85 c0                	test   eax,eax
c00067c7:	75 04                	jne    c00067cd <find_object_path+0x55>
c00067c9:	31 db                	xor    ebx,ebx
c00067cb:	eb 36                	jmp    c0006803 <find_object_path+0x8b>
c00067cd:	8d 75 01             	lea    esi,[ebp+0x1]
c00067d0:	eb b3                	jmp    c0006785 <find_object_path+0xd>
c00067d2:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00067d5:	74 28                	je     c00067ff <find_object_path+0x87>
c00067d7:	8d 43 0a             	lea    eax,[ebx+0xa]
c00067da:	e8 6b fb ff ff       	call   c000634a <iso_733>
c00067df:	89 c2                	mov    edx,eax
c00067e1:	8d 43 02             	lea    eax,[ebx+0x2]
c00067e4:	e8 61 fb ff ff       	call   c000634a <iso_733>
c00067e9:	83 ec 0c             	sub    esp,0xc
c00067ec:	89 c1                	mov    ecx,eax
c00067ee:	52                   	push   edx
c00067ef:	89 f0                	mov    eax,esi
c00067f1:	89 fa                	mov    edx,edi
c00067f3:	e8 c6 fd ff ff       	call   c00065be <find_object>
c00067f8:	83 c4 10             	add    esp,0x10
c00067fb:	89 c3                	mov    ebx,eax
c00067fd:	eb 04                	jmp    c0006803 <find_object_path+0x8b>
c00067ff:	85 ff                	test   edi,edi
c0006801:	74 c6                	je     c00067c9 <find_object_path+0x51>
c0006803:	83 c4 0c             	add    esp,0xc
c0006806:	89 d8                	mov    eax,ebx
c0006808:	5b                   	pop    ebx
c0006809:	5e                   	pop    esi
c000680a:	5f                   	pop    edi
c000680b:	5d                   	pop    ebp
c000680c:	c3                   	ret    

c000680d <stricmp>:
c000680d:	57                   	push   edi
c000680e:	56                   	push   esi
c000680f:	31 f6                	xor    esi,esi
c0006811:	53                   	push   ebx
c0006812:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006816:	83 ec 0c             	sub    esp,0xc
c0006819:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c000681d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006821:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c0006825:	50                   	push   eax
c0006826:	e8 05 a1 ff ff       	call   c0000930 <toupper>
c000682b:	89 04 24             	mov    DWORD PTR [esp],eax
c000682e:	e8 1d a1 ff ff       	call   c0000950 <tolower>
c0006833:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006836:	89 c3                	mov    ebx,eax
c0006838:	e8 f3 a0 ff ff       	call   c0000930 <toupper>
c000683d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006840:	e8 0b a1 ff ff       	call   c0000950 <tolower>
c0006845:	83 c4 10             	add    esp,0x10
c0006848:	39 c3                	cmp    ebx,eax
c000684a:	75 05                	jne    c0006851 <stricmp+0x44>
c000684c:	46                   	inc    esi
c000684d:	85 db                	test   ebx,ebx
c000684f:	75 c1                	jne    c0006812 <stricmp+0x5>
c0006851:	29 c3                	sub    ebx,eax
c0006853:	89 d8                	mov    eax,ebx
c0006855:	5b                   	pop    ebx
c0006856:	5e                   	pop    esi
c0006857:	5f                   	pop    edi
c0006858:	c3                   	ret    

c0006859 <iso_open>:
c0006859:	57                   	push   edi
c000685a:	31 c0                	xor    eax,eax
c000685c:	56                   	push   esi
c000685d:	b9 60 76 03 c0       	mov    ecx,0xc0037660
c0006862:	53                   	push   ebx
c0006863:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006868:	0f 95 c0             	setne  al
c000686b:	89 c2                	mov    edx,eax
c000686d:	89 c6                	mov    esi,eax
c000686f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006873:	e8 00 ff ff ff       	call   c0006778 <find_object_path>
c0006878:	83 ca ff             	or     edx,0xffffffff
c000687b:	85 c0                	test   eax,eax
c000687d:	74 5e                	je     c00068dd <iso_open+0x84>
c000687f:	89 c1                	mov    ecx,eax
c0006881:	31 d2                	xor    edx,edx
c0006883:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006889:	83 bf 20 6d 03 c0 00 	cmp    DWORD PTR [edi-0x3ffc92e0],0x0
c0006890:	75 42                	jne    c00068d4 <iso_open+0x7b>
c0006892:	8d 41 02             	lea    eax,[ecx+0x2]
c0006895:	c7 87 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffc92e0],0xffffffff
c000689f:	e8 a6 fa ff ff       	call   c000634a <iso_733>
c00068a4:	89 b7 24 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92dc],esi
c00068aa:	89 87 20 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92e0],eax
c00068b0:	c7 87 28 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc92d8],0x0
c00068ba:	8d 41 0a             	lea    eax,[ecx+0xa]
c00068bd:	e8 88 fa ff ff       	call   c000634a <iso_733>
c00068c2:	c7 87 b0 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc9250],0x0
c00068cc:	89 87 2c 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92d4],eax
c00068d2:	eb 09                	jmp    c00068dd <iso_open+0x84>
c00068d4:	42                   	inc    edx
c00068d5:	83 fa 10             	cmp    edx,0x10
c00068d8:	75 a9                	jne    c0006883 <iso_open+0x2a>
c00068da:	83 ca ff             	or     edx,0xffffffff
c00068dd:	5b                   	pop    ebx
c00068de:	89 d0                	mov    eax,edx
c00068e0:	5e                   	pop    esi
c00068e1:	5f                   	pop    edi
c00068e2:	c3                   	ret    

c00068e3 <iso_close>:
c00068e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00068e7:	83 f8 0f             	cmp    eax,0xf
c00068ea:	7f 10                	jg     c00068fc <iso_close+0x19>
c00068ec:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00068f2:	c7 80 20 6d 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc92e0],0x0
c00068fc:	e9 5e fb ff ff       	jmp    c000645f <bclear_cache>

c0006901 <iso_read>:
c0006901:	55                   	push   ebp
c0006902:	57                   	push   edi
c0006903:	56                   	push   esi
c0006904:	53                   	push   ebx
c0006905:	83 ec 1c             	sub    esp,0x1c
c0006908:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000690c:	83 fd 0f             	cmp    ebp,0xf
c000690f:	7e 0a                	jle    c000691b <iso_read+0x1a>
c0006911:	83 c8 ff             	or     eax,0xffffffff
c0006914:	89 c2                	mov    edx,eax
c0006916:	e9 f4 00 00 00       	jmp    c0006a0f <iso_read+0x10e>
c000691b:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c0006921:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c0006928:	74 e7                	je     c0006911 <iso_read+0x10>
c000692a:	8b 95 b0 6d 03 c0    	mov    edx,DWORD PTR [ebp-0x3ffc9250]
c0006930:	85 d2                	test   edx,edx
c0006932:	75 dd                	jne    c0006911 <iso_read+0x10>
c0006934:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0006939:	0f 84 cd 00 00 00    	je     c0006a0c <iso_read+0x10b>
c000693f:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c0006945:	8b 8d 2c 6d 03 c0    	mov    ecx,DWORD PTR [ebp-0x3ffc92d4]
c000694b:	29 c1                	sub    ecx,eax
c000694d:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006951:	76 04                	jbe    c0006957 <iso_read+0x56>
c0006953:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006957:	85 c9                	test   ecx,ecx
c0006959:	0f 84 ad 00 00 00    	je     c0006a0c <iso_read+0x10b>
c000695f:	89 c6                	mov    esi,eax
c0006961:	bb 00 08 00 00       	mov    ebx,0x800
c0006966:	81 e6 ff 07 00 00    	and    esi,0x7ff
c000696c:	c1 e8 0b             	shr    eax,0xb
c000696f:	29 f3                	sub    ebx,esi
c0006971:	03 85 20 6d 03 c0    	add    eax,DWORD PTR [ebp-0x3ffc92e0]
c0006977:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000697d:	7e 3f                	jle    c00069be <iso_read+0xbd>
c000697f:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006985:	75 37                	jne    c00069be <iso_read+0xbd>
c0006987:	be 20 00 00 00       	mov    esi,0x20
c000698c:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006992:	7f 05                	jg     c0006999 <iso_read+0x98>
c0006994:	89 ce                	mov    esi,ecx
c0006996:	c1 fe 0b             	sar    esi,0xb
c0006999:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000699d:	89 f3                	mov    ebx,esi
c000699f:	c1 e3 0b             	shl    ebx,0xb
c00069a2:	52                   	push   edx
c00069a3:	56                   	push   esi
c00069a4:	50                   	push   eax
c00069a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00069a9:	e8 15 fb ff ff       	call   c00064c3 <isoReadDiscSector>
c00069ae:	83 c4 10             	add    esp,0x10
c00069b1:	85 c0                	test   eax,eax
c00069b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069b7:	7f 3e                	jg     c00069f7 <iso_read+0xf6>
c00069b9:	e9 53 ff ff ff       	jmp    c0006911 <iso_read+0x10>
c00069be:	39 cb                	cmp    ebx,ecx
c00069c0:	7e 02                	jle    c00069c4 <iso_read+0xc3>
c00069c2:	89 cb                	mov    ebx,ecx
c00069c4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00069c8:	e8 88 fb ff ff       	call   c0006555 <bdread>
c00069cd:	85 c0                	test   eax,eax
c00069cf:	0f 88 3c ff ff ff    	js     c0006911 <iso_read+0x10>
c00069d5:	8b 0c 85 20 60 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc9fe0]
c00069dc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00069e0:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c00069e6:	25 ff 07 00 00       	and    eax,0x7ff
c00069eb:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00069ef:	89 d9                	mov    ecx,ebx
c00069f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00069f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069f7:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00069fb:	01 9d 28 6d 03 c0    	add    DWORD PTR [ebp-0x3ffc92d8],ebx
c0006a01:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c0006a05:	01 da                	add    edx,ebx
c0006a07:	e9 28 ff ff ff       	jmp    c0006934 <iso_read+0x33>
c0006a0c:	89 d0                	mov    eax,edx
c0006a0e:	99                   	cdq    
c0006a0f:	83 c4 1c             	add    esp,0x1c
c0006a12:	5b                   	pop    ebx
c0006a13:	5e                   	pop    esi
c0006a14:	5f                   	pop    edi
c0006a15:	5d                   	pop    ebp
c0006a16:	c3                   	ret    

c0006a17 <iso_seek>:
c0006a17:	55                   	push   ebp
c0006a18:	83 c8 ff             	or     eax,0xffffffff
c0006a1b:	57                   	push   edi
c0006a1c:	89 c2                	mov    edx,eax
c0006a1e:	56                   	push   esi
c0006a1f:	53                   	push   ebx
c0006a20:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006a24:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0006a28:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006a2c:	83 fe 0f             	cmp    esi,0xf
c0006a2f:	7f 65                	jg     c0006a96 <iso_seek+0x7f>
c0006a31:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006a37:	8d 8d 20 6d 03 c0    	lea    ecx,[ebp-0x3ffc92e0]
c0006a3d:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c0006a44:	74 50                	je     c0006a96 <iso_seek+0x7f>
c0006a46:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006a4d:	75 47                	jne    c0006a96 <iso_seek+0x7f>
c0006a4f:	83 fb 01             	cmp    ebx,0x1
c0006a52:	74 0e                	je     c0006a62 <iso_seek+0x4b>
c0006a54:	83 fb 02             	cmp    ebx,0x2
c0006a57:	74 0e                	je     c0006a67 <iso_seek+0x50>
c0006a59:	85 db                	test   ebx,ebx
c0006a5b:	75 39                	jne    c0006a96 <iso_seek+0x7f>
c0006a5d:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006a60:	eb 0d                	jmp    c0006a6f <iso_seek+0x58>
c0006a62:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006a65:	eb 08                	jmp    c0006a6f <iso_seek+0x58>
c0006a67:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006a6a:	01 f8                	add    eax,edi
c0006a6c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006a6f:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006a75:	8b 88 2c 6d 03 c0    	mov    ecx,DWORD PTR [eax-0x3ffc92d4]
c0006a7b:	05 20 6d 03 c0       	add    eax,0xc0036d20
c0006a80:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006a83:	76 03                	jbe    c0006a88 <iso_seek+0x71>
c0006a85:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006a88:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006a8e:	8b 82 28 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d8]
c0006a94:	31 d2                	xor    edx,edx
c0006a96:	5b                   	pop    ebx
c0006a97:	5e                   	pop    esi
c0006a98:	5f                   	pop    edi
c0006a99:	5d                   	pop    ebp
c0006a9a:	c3                   	ret    

c0006a9b <iso_tell>:
c0006a9b:	83 c8 ff             	or     eax,0xffffffff
c0006a9e:	53                   	push   ebx
c0006a9f:	89 c2                	mov    edx,eax
c0006aa1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006aa5:	83 f9 0f             	cmp    ecx,0xf
c0006aa8:	7f 20                	jg     c0006aca <iso_tell+0x2f>
c0006aaa:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006ab0:	83 bb 20 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc92e0],0x0
c0006ab7:	74 11                	je     c0006aca <iso_tell+0x2f>
c0006ab9:	83 bb b0 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc9250],0x0
c0006ac0:	75 08                	jne    c0006aca <iso_tell+0x2f>
c0006ac2:	8b 83 28 6d 03 c0    	mov    eax,DWORD PTR [ebx-0x3ffc92d8]
c0006ac8:	31 d2                	xor    edx,edx
c0006aca:	5b                   	pop    ebx
c0006acb:	c3                   	ret    

c0006acc <iso_total>:
c0006acc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006ad0:	83 c8 ff             	or     eax,0xffffffff
c0006ad3:	83 fa 0f             	cmp    edx,0xf
c0006ad6:	7f 1e                	jg     c0006af6 <iso_total+0x2a>
c0006ad8:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006ade:	83 ba 20 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc92e0],0x0
c0006ae5:	74 0f                	je     c0006af6 <iso_total+0x2a>
c0006ae7:	83 ba b0 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc9250],0x0
c0006aee:	75 06                	jne    c0006af6 <iso_total+0x2a>
c0006af0:	8b 82 2c 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d4]
c0006af6:	c3                   	ret    

c0006af7 <fn_postprocess>:
c0006af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006afb:	89 d0                	mov    eax,edx
c0006afd:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0006b00:	83 f9 3b             	cmp    ecx,0x3b
c0006b03:	74 07                	je     c0006b0c <fn_postprocess+0x15>
c0006b05:	85 c9                	test   ecx,ecx
c0006b07:	74 03                	je     c0006b0c <fn_postprocess+0x15>
c0006b09:	40                   	inc    eax
c0006b0a:	eb f1                	jmp    c0006afd <fn_postprocess+0x6>
c0006b0c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006b0f:	39 d0                	cmp    eax,edx
c0006b11:	76 0a                	jbe    c0006b1d <fn_postprocess+0x26>
c0006b13:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c0006b17:	75 04                	jne    c0006b1d <fn_postprocess+0x26>
c0006b19:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c0006b1d:	c3                   	ret    

c0006b1e <iso_readdir>:
c0006b1e:	55                   	push   ebp
c0006b1f:	57                   	push   edi
c0006b20:	56                   	push   esi
c0006b21:	53                   	push   ebx
c0006b22:	83 ec 1c             	sub    esp,0x1c
c0006b25:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006b29:	83 fb 0f             	cmp    ebx,0xf
c0006b2c:	7f 28                	jg     c0006b56 <iso_readdir+0x38>
c0006b2e:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b34:	8d b8 20 6d 03 c0    	lea    edi,[eax-0x3ffc92e0]
c0006b3a:	83 b8 20 6d 03 c0 00 	cmp    DWORD PTR [eax-0x3ffc92e0],0x0
c0006b41:	74 13                	je     c0006b56 <iso_readdir+0x38>
c0006b43:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006b47:	74 0d                	je     c0006b56 <iso_readdir+0x38>
c0006b49:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006b50:	0f 84 b1 00 00 00    	je     c0006c07 <iso_readdir+0xe9>
c0006b56:	83 ec 0c             	sub    esp,0xc
c0006b59:	68 40 fd 02 c0       	push   0xc002fd40
c0006b5e:	e8 5d 2a 02 00       	call   c00295c0 <iso_kprintf>
c0006b63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006b66:	e8 71 2a 02 00       	call   c00295dc <iso_kprintfd>
c0006b6b:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006b71:	c7 04 24 45 fd 02 c0 	mov    DWORD PTR [esp],0xc002fd45
c0006b78:	e8 43 2a 02 00       	call   c00295c0 <iso_kprintf>
c0006b7d:	5d                   	pop    ebp
c0006b7e:	ff b3 20 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92e0]
c0006b84:	e8 53 2a 02 00       	call   c00295dc <iso_kprintfd>
c0006b89:	c7 04 24 4b fd 02 c0 	mov    DWORD PTR [esp],0xc002fd4b
c0006b90:	e8 2b 2a 02 00       	call   c00295c0 <iso_kprintf>
c0006b95:	58                   	pop    eax
c0006b96:	ff b3 24 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92dc]
c0006b9c:	e8 3b 2a 02 00       	call   c00295dc <iso_kprintfd>
c0006ba1:	c7 04 24 51 fd 02 c0 	mov    DWORD PTR [esp],0xc002fd51
c0006ba8:	e8 13 2a 02 00       	call   c00295c0 <iso_kprintf>
c0006bad:	58                   	pop    eax
c0006bae:	ff b3 b0 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc9250]
c0006bb4:	e8 23 2a 02 00       	call   c00295dc <iso_kprintfd>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	eb 42                	jmp    c0006c00 <iso_readdir+0xe2>
c0006bbe:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006bc1:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006bc8:	89 d1                	mov    ecx,edx
c0006bca:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006bd0:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006bd4:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006bd7:	75 35                	jne    c0006c0e <iso_readdir+0xf0>
c0006bd9:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006bdf:	81 c2 00 08 00 00    	add    edx,0x800
c0006be5:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006be8:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006beb:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006bee:	73 1e                	jae    c0006c0e <iso_readdir+0xf0>
c0006bf0:	c1 ea 0b             	shr    edx,0xb
c0006bf3:	8b 07                	mov    eax,DWORD PTR [edi]
c0006bf5:	01 d0                	add    eax,edx
c0006bf7:	e8 50 f9 ff ff       	call   c000654c <biread>
c0006bfc:	85 c0                	test   eax,eax
c0006bfe:	79 be                	jns    c0006bbe <iso_readdir+0xa0>
c0006c00:	31 c0                	xor    eax,eax
c0006c02:	e9 66 01 00 00       	jmp    c0006d6d <iso_readdir+0x24f>
c0006c07:	31 f6                	xor    esi,esi
c0006c09:	83 c8 ff             	or     eax,0xffffffff
c0006c0c:	eb da                	jmp    c0006be8 <iso_readdir+0xca>
c0006c0e:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006c14:	8b ba 28 6d 03 c0    	mov    edi,DWORD PTR [edx-0x3ffc92d8]
c0006c1a:	81 c2 20 6d 03 c0    	add    edx,0xc0036d20
c0006c20:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006c23:	73 db                	jae    c0006c00 <iso_readdir+0xe2>
c0006c25:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006c29:	75 34                	jne    c0006c5f <iso_readdir+0x141>
c0006c2b:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006c2f:	75 2e                	jne    c0006c5f <iso_readdir+0x141>
c0006c31:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006c34:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006c3b:	01 f9                	add    ecx,edi
c0006c3d:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006c40:	89 c8                	mov    eax,ecx
c0006c42:	25 ff 07 00 00       	and    eax,0x7ff
c0006c47:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006c4c:	01 c8                	add    eax,ecx
c0006c4e:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006c51:	25 ff 07 00 00       	and    eax,0x7ff
c0006c56:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006c5a:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006c5d:	74 a1                	je     c0006c00 <iso_readdir+0xe2>
c0006c5f:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006c65:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006c69:	8d 56 21             	lea    edx,[esi+0x21]
c0006c6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006c70:	8d a8 38 6d 03 c0    	lea    ebp,[eax-0x3ffc92c8]
c0006c76:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006c7d:	74 0c                	je     c0006c8b <iso_readdir+0x16d>
c0006c7f:	89 e8                	mov    eax,ebp
c0006c81:	e8 14 f6 ff ff       	call   c000629a <ucs2utfn>
c0006c86:	e9 a6 00 00 00       	jmp    c0006d31 <iso_readdir+0x213>
c0006c8b:	57                   	push   edi
c0006c8c:	51                   	push   ecx
c0006c8d:	52                   	push   edx
c0006c8e:	55                   	push   ebp
c0006c8f:	e8 ec 99 ff ff       	call   c0000680 <strncpy>
c0006c94:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006c98:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006c9e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006ca1:	c6 84 01 38 6d 03 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffc92c8],0x0
c0006ca9:	e8 49 fe ff ff       	call   c0006af7 <fn_postprocess>
c0006cae:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006cb2:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006cb5:	83 c4 10             	add    esp,0x10
c0006cb8:	29 d0                	sub    eax,edx
c0006cba:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006cbe:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006cc2:	74 05                	je     c0006cc9 <iso_readdir+0x1ab>
c0006cc4:	83 e8 21             	sub    eax,0x21
c0006cc7:	eb 04                	jmp    c0006ccd <iso_readdir+0x1af>
c0006cc9:	47                   	inc    edi
c0006cca:	83 e8 22             	sub    eax,0x22
c0006ccd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006cd1:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006cd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006cdb:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006ce0:	7e 4f                	jle    c0006d31 <iso_readdir+0x213>
c0006ce2:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006ce5:	48                   	dec    eax
c0006ce6:	3c 01                	cmp    al,0x1
c0006ce8:	77 47                	ja     c0006d31 <iso_readdir+0x213>
c0006cea:	52                   	push   edx
c0006ceb:	6a 02                	push   0x2
c0006ced:	68 3d fd 02 c0       	push   0xc002fd3d
c0006cf2:	57                   	push   edi
c0006cf3:	e8 e8 9a ff ff       	call   c00007e0 <strncmp>
c0006cf8:	83 c4 10             	add    esp,0x10
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 26                	jne    c0006d25 <iso_readdir+0x207>
c0006cff:	50                   	push   eax
c0006d00:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006d04:	83 e8 05             	sub    eax,0x5
c0006d07:	50                   	push   eax
c0006d08:	8d 47 05             	lea    eax,[edi+0x5]
c0006d0b:	50                   	push   eax
c0006d0c:	55                   	push   ebp
c0006d0d:	e8 6e 99 ff ff       	call   c0000680 <strncpy>
c0006d12:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006d16:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006d1a:	83 c4 10             	add    esp,0x10
c0006d1d:	c6 84 08 33 6d 03 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffc92cd],0x0
c0006d25:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006d29:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006d2d:	01 c7                	add    edi,eax
c0006d2f:	eb aa                	jmp    c0006cdb <iso_readdir+0x1bd>
c0006d31:	83 c8 ff             	or     eax,0xffffffff
c0006d34:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006d38:	89 c2                	mov    edx,eax
c0006d3a:	75 0a                	jne    c0006d46 <iso_readdir+0x228>
c0006d3c:	8d 46 0a             	lea    eax,[esi+0xa]
c0006d3f:	e8 06 f6 ff ff       	call   c000634a <iso_733>
c0006d44:	31 d2                	xor    edx,edx
c0006d46:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006d4c:	89 83 30 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92d0],eax
c0006d52:	89 93 34 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92cc],edx
c0006d58:	81 c3 20 6d 03 c0    	add    ebx,0xc0036d20
c0006d5e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006d61:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006d64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d68:	05 30 6d 03 c0       	add    eax,0xc0036d30
c0006d6d:	83 c4 1c             	add    esp,0x1c
c0006d70:	5b                   	pop    ebx
c0006d71:	5e                   	pop    esi
c0006d72:	5f                   	pop    edi
c0006d73:	5d                   	pop    ebp
c0006d74:	c3                   	ret    

c0006d75 <iso_reset>:
c0006d75:	83 ec 18             	sub    esp,0x18
c0006d78:	68 5a fd 02 c0       	push   0xc002fd5a
c0006d7d:	e8 3e 28 02 00       	call   c00295c0 <iso_kprintf>
c0006d82:	e8 10 f7 ff ff       	call   c0006497 <iso_break_all>
c0006d87:	e8 09 f7 ff ff       	call   c0006495 <bclear>
c0006d8c:	31 c0                	xor    eax,eax
c0006d8e:	83 c4 1c             	add    esp,0x1c
c0006d91:	c3                   	ret    

c0006d92 <init_percd>:
c0006d92:	57                   	push   edi
c0006d93:	56                   	push   esi
c0006d94:	53                   	push   ebx
c0006d95:	bb 01 00 00 00       	mov    ebx,0x1
c0006d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d9e:	a2 60 60 03 c0       	mov    ds:0xc0036060,al
c0006da3:	e8 cd ff ff ff       	call   c0006d75 <iso_reset>
c0006da8:	c7 05 94 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037694,0x0
c0006db2:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006db7:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006dbb:	e8 8c f7 ff ff       	call   c000654c <biread>
c0006dc0:	89 c6                	mov    esi,eax
c0006dc2:	85 c0                	test   eax,eax
c0006dc4:	0f 88 ba 00 00 00    	js     c0006e84 <init_percd+0xf2>
c0006dca:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c0006dd1:	83 c0 04             	add    eax,0x4
c0006dd4:	52                   	push   edx
c0006dd5:	6a 06                	push   0x6
c0006dd7:	68 65 fd 02 c0       	push   0xc002fd65
c0006ddc:	50                   	push   eax
c0006ddd:	e8 9e 95 ff ff       	call   c0000380 <memcmp>
c0006de2:	83 c4 10             	add    esp,0x10
c0006de5:	85 c0                	test   eax,eax
c0006de7:	74 08                	je     c0006df1 <init_percd+0x5f>
c0006de9:	43                   	inc    ebx
c0006dea:	83 fb 04             	cmp    ebx,0x4
c0006ded:	75 c3                	jne    c0006db2 <init_percd+0x20>
c0006def:	eb 1a                	jmp    c0006e0b <init_percd+0x79>
c0006df1:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006df8:	83 c0 5c             	add    eax,0x5c
c0006dfb:	e8 17 f5 ff ff       	call   c0006317 <isjoliet>
c0006e00:	a3 94 76 03 c0       	mov    ds:0xc0037694,eax
c0006e05:	85 c0                	test   eax,eax
c0006e07:	74 e0                	je     c0006de9 <init_percd+0x57>
c0006e09:	eb 3e                	jmp    c0006e49 <init_percd+0xb7>
c0006e0b:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006e12:	75 35                	jne    c0006e49 <init_percd+0xb7>
c0006e14:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006e19:	83 c0 10             	add    eax,0x10
c0006e1c:	e8 2b f7 ff ff       	call   c000654c <biread>
c0006e21:	89 c6                	mov    esi,eax
c0006e23:	85 c0                	test   eax,eax
c0006e25:	78 5f                	js     c0006e86 <init_percd+0xf4>
c0006e27:	83 cb ff             	or     ebx,0xffffffff
c0006e2a:	50                   	push   eax
c0006e2b:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006e32:	6a 06                	push   0x6
c0006e34:	83 c0 04             	add    eax,0x4
c0006e37:	68 6c fd 02 c0       	push   0xc002fd6c
c0006e3c:	50                   	push   eax
c0006e3d:	e8 3e 95 ff ff       	call   c0000380 <memcmp>
c0006e42:	83 c4 10             	add    esp,0x10
c0006e45:	85 c0                	test   eax,eax
c0006e47:	75 3d                	jne    c0006e86 <init_percd+0xf4>
c0006e49:	8b 34 b5 80 60 03 c0 	mov    esi,DWORD PTR [esi*4-0x3ffc9f80]
c0006e50:	bf 60 76 03 c0       	mov    edi,0xc0037660
c0006e55:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006e5b:	b9 22 00 00 00       	mov    ecx,0x22
c0006e60:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006e62:	b8 62 76 03 c0       	mov    eax,0xc0037662
c0006e67:	31 db                	xor    ebx,ebx
c0006e69:	e8 dc f4 ff ff       	call   c000634a <iso_733>
c0006e6e:	a3 88 76 03 c0       	mov    ds:0xc0037688,eax
c0006e73:	b8 6a 76 03 c0       	mov    eax,0xc003766a
c0006e78:	e8 cd f4 ff ff       	call   c000634a <iso_733>
c0006e7d:	a3 84 76 03 c0       	mov    ds:0xc0037684,eax
c0006e82:	eb 02                	jmp    c0006e86 <init_percd+0xf4>
c0006e84:	89 c3                	mov    ebx,eax
c0006e86:	89 d8                	mov    eax,ebx
c0006e88:	5b                   	pop    ebx
c0006e89:	5e                   	pop    esi
c0006e8a:	5f                   	pop    edi
c0006e8b:	c3                   	ret    

c0006e8c <iso_ioctl>:
c0006e8c:	83 ec 18             	sub    esp,0x18
c0006e8f:	68 73 fd 02 c0       	push   0xc002fd73
c0006e94:	e8 27 27 02 00       	call   c00295c0 <iso_kprintf>
c0006e99:	e8 d7 fe ff ff       	call   c0006d75 <iso_reset>
c0006e9e:	31 c0                	xor    eax,eax
c0006ea0:	83 c4 1c             	add    esp,0x1c
c0006ea3:	c3                   	ret    

c0006ea4 <fs_iso9660_init>:
c0006ea4:	53                   	push   ebx
c0006ea5:	31 db                	xor    ebx,ebx
c0006ea7:	83 ec 14             	sub    esp,0x14
c0006eaa:	68 7e fd 02 c0       	push   0xc002fd7e
c0006eaf:	e8 0c 27 02 00       	call   c00295c0 <iso_kprintf>
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	68 40 09 00 00       	push   0x940
c0006ebc:	6a 00                	push   0x0
c0006ebe:	68 20 6d 03 c0       	push   0xc0036d20
c0006ec3:	e8 28 96 ff ff       	call   c00004f0 <memset>
c0006ec8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006ecf:	c7 05 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0036d20,0xffffffff
c0006ed9:	e8 65 f7 00 00       	call   c0016643 <malloc>
c0006ede:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006ee5:	a3 90 76 03 c0       	mov    ds:0xc0037690,eax
c0006eea:	e8 54 f7 00 00       	call   c0016643 <malloc>
c0006eef:	83 c4 10             	add    esp,0x10
c0006ef2:	a3 00 6d 03 c0       	mov    ds:0xc0036d00,eax
c0006ef7:	83 ec 0c             	sub    esp,0xc
c0006efa:	68 04 08 00 00       	push   0x804
c0006eff:	e8 3f f7 00 00       	call   c0016643 <malloc>
c0006f04:	89 04 9d 80 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9f80],eax
c0006f0b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006f11:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006f18:	e8 26 f7 00 00       	call   c0016643 <malloc>
c0006f1d:	83 c4 10             	add    esp,0x10
c0006f20:	89 04 9d 20 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9fe0],eax
c0006f27:	43                   	inc    ebx
c0006f28:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006f2e:	83 fb 10             	cmp    ebx,0x10
c0006f31:	75 c4                	jne    c0006ef7 <fs_iso9660_init+0x53>
c0006f33:	31 c0                	xor    eax,eax
c0006f35:	83 c4 08             	add    esp,0x8
c0006f38:	5b                   	pop    ebx
c0006f39:	c3                   	ret    

c0006f3a <fs_iso9660_shutdown>:
c0006f3a:	53                   	push   ebx
c0006f3b:	31 db                	xor    ebx,ebx
c0006f3d:	83 ec 08             	sub    esp,0x8
c0006f40:	83 ec 0c             	sub    esp,0xc
c0006f43:	ff 34 9d 80 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9f80]
c0006f4a:	e8 04 f7 00 00       	call   c0016653 <free>
c0006f4f:	58                   	pop    eax
c0006f50:	ff 34 9d 20 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9fe0]
c0006f57:	43                   	inc    ebx
c0006f58:	e8 f6 f6 00 00       	call   c0016653 <free>
c0006f5d:	83 c4 10             	add    esp,0x10
c0006f60:	83 fb 10             	cmp    ebx,0x10
c0006f63:	75 db                	jne    c0006f40 <fs_iso9660_shutdown+0x6>
c0006f65:	a1 90 76 03 c0       	mov    eax,ds:0xc0037690
c0006f6a:	85 c0                	test   eax,eax
c0006f6c:	74 0c                	je     c0006f7a <fs_iso9660_shutdown+0x40>
c0006f6e:	83 ec 0c             	sub    esp,0xc
c0006f71:	50                   	push   eax
c0006f72:	e8 dc f6 00 00       	call   c0016653 <free>
c0006f77:	83 c4 10             	add    esp,0x10
c0006f7a:	a1 00 6d 03 c0       	mov    eax,ds:0xc0036d00
c0006f7f:	85 c0                	test   eax,eax
c0006f81:	74 0c                	je     c0006f8f <fs_iso9660_shutdown+0x55>
c0006f83:	83 ec 0c             	sub    esp,0xc
c0006f86:	50                   	push   eax
c0006f87:	e8 c7 f6 00 00       	call   c0016653 <free>
c0006f8c:	83 c4 10             	add    esp,0x10
c0006f8f:	c7 05 00 6d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036d00,0x0
c0006f99:	c7 05 90 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037690,0x0
c0006fa3:	31 c0                	xor    eax,eax
c0006fa5:	83 c4 08             	add    esp,0x8
c0006fa8:	5b                   	pop    ebx
c0006fa9:	c3                   	ret    
c0006faa:	66 90                	xchg   ax,ax

c0006fac <lwip_init>:
c0006fac:	83 ec 0c             	sub    esp,0xc
c0006faf:	e8 48 2c 00 00       	call   c0009bfc <stats_init>
c0006fb4:	e8 e3 9d ff ff       	call   c0000d9c <sys_init>
c0006fb9:	e8 ae 01 00 00       	call   c000716c <mem_init>
c0006fbe:	e8 05 0a 00 00       	call   c00079c8 <memp_init>
c0006fc3:	e8 e8 0c 00 00       	call   c0007cb0 <netif_init>
c0006fc8:	e8 6f 9c ff ff       	call   c0000c3c <lwip_socket_init>
c0006fcd:	e8 76 9d 00 00       	call   c0010d48 <sys_timeouts_init>
c0006fd2:	90                   	nop
c0006fd3:	83 c4 0c             	add    esp,0xc
c0006fd6:	c3                   	ret    
c0006fd7:	90                   	nop

c0006fd8 <plug_holes>:
c0006fd8:	83 ec 1c             	sub    esp,0x1c
c0006fdb:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006fe0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006fe4:	73 16                	jae    c0006ffc <plug_holes+0x24>
c0006fe6:	83 ec 08             	sub    esp,0x8
c0006fe9:	68 8f fd 02 c0       	push   0xc002fd8f
c0006fee:	68 a6 fd 02 c0       	push   0xc002fda6
c0006ff3:	e8 20 8e 01 00       	call   c001fe18 <CPrintf>
c0006ff8:	83 c4 10             	add    esp,0x10
c0006ffb:	90                   	nop
c0006ffc:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007001:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007005:	72 15                	jb     c000701c <plug_holes+0x44>
c0007007:	83 ec 08             	sub    esp,0x8
c000700a:	68 b3 fd 02 c0       	push   0xc002fdb3
c000700f:	68 a6 fd 02 c0       	push   0xc002fda6
c0007014:	e8 ff 8d 01 00       	call   c001fe18 <CPrintf>
c0007019:	83 c4 10             	add    esp,0x10
c000701c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007020:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007023:	0f b6 c0             	movzx  eax,al
c0007026:	85 c0                	test   eax,eax
c0007028:	74 16                	je     c0007040 <plug_holes+0x68>
c000702a:	83 ec 08             	sub    esp,0x8
c000702d:	68 cd fd 02 c0       	push   0xc002fdcd
c0007032:	68 a6 fd 02 c0       	push   0xc002fda6
c0007037:	e8 dc 8d 01 00       	call   c001fe18 <CPrintf>
c000703c:	83 c4 10             	add    esp,0x10
c000703f:	90                   	nop
c0007040:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007044:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007047:	0f b7 c0             	movzx  eax,ax
c000704a:	3d 40 06 00 00       	cmp    eax,0x640
c000704f:	76 17                	jbe    c0007068 <plug_holes+0x90>
c0007051:	83 ec 08             	sub    esp,0x8
c0007054:	68 60 fe 02 c0       	push   0xc002fe60
c0007059:	68 a6 fd 02 c0       	push   0xc002fda6
c000705e:	e8 b5 8d 01 00       	call   c001fe18 <CPrintf>
c0007063:	83 c4 10             	add    esp,0x10
c0007066:	66 90                	xchg   ax,ax
c0007068:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000706e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007072:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007075:	0f b7 c0             	movzx  eax,ax
c0007078:	01 d0                	add    eax,edx
c000707a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000707e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007082:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007086:	74 64                	je     c00070ec <plug_holes+0x114>
c0007088:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000708c:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000708f:	0f b6 c0             	movzx  eax,al
c0007092:	85 c0                	test   eax,eax
c0007094:	75 56                	jne    c00070ec <plug_holes+0x114>
c0007096:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000709b:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000709f:	74 4b                	je     c00070ec <plug_holes+0x114>
c00070a1:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00070a6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00070aa:	75 0c                	jne    c00070b8 <plug_holes+0xe0>
c00070ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070b0:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00070b5:	8d 76 00             	lea    esi,[esi+0x0]
c00070b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00070bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00070c3:	66 89 02             	mov    WORD PTR [edx],ax
c00070c6:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00070cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00070cf:	29 c2                	sub    edx,eax
c00070d1:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c00070d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070db:	66 8b 00             	mov    ax,WORD PTR [eax]
c00070de:	0f b7 c0             	movzx  eax,ax
c00070e1:	01 c1                	add    ecx,eax
c00070e3:	89 d0                	mov    eax,edx
c00070e5:	66 89 41 02          	mov    WORD PTR [ecx+0x2],ax
c00070e9:	8d 76 00             	lea    esi,[esi+0x0]
c00070ec:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00070f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070f6:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00070fa:	0f b7 c0             	movzx  eax,ax
c00070fd:	01 d0                	add    eax,edx
c00070ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007103:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007107:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000710b:	74 57                	je     c0007164 <plug_holes+0x18c>
c000710d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007111:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007114:	0f b6 c0             	movzx  eax,al
c0007117:	85 c0                	test   eax,eax
c0007119:	75 49                	jne    c0007164 <plug_holes+0x18c>
c000711b:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007120:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007124:	75 0a                	jne    c0007130 <plug_holes+0x158>
c0007126:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000712a:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c000712f:	90                   	nop
c0007130:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007134:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007137:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000713b:	66 89 02             	mov    WORD PTR [edx],ax
c000713e:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007143:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007147:	29 c2                	sub    edx,eax
c0007149:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c000714f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007153:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007156:	0f b7 c0             	movzx  eax,ax
c0007159:	01 c1                	add    ecx,eax
c000715b:	89 d0                	mov    eax,edx
c000715d:	66 89 41 02          	mov    WORD PTR [ecx+0x2],ax
c0007161:	8d 76 00             	lea    esi,[esi+0x0]
c0007164:	90                   	nop
c0007165:	83 c4 1c             	add    esp,0x1c
c0007168:	c3                   	ret    
c0007169:	8d 76 00             	lea    esi,[esi+0x0]

c000716c <mem_init>:
c000716c:	83 ec 1c             	sub    esp,0x1c
c000716f:	c7 05 a4 76 03 c0 c0 60 03 c0 	mov    DWORD PTR ds:0xc00376a4,0xc00360c0
c0007179:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000717e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007182:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007186:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c000718b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000718f:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0007195:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007199:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000719d:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00071a2:	05 40 06 00 00       	add    eax,0x640
c00071a7:	a3 a0 76 03 c0       	mov    ds:0xc00376a0,eax
c00071ac:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00071b1:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c00071b5:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00071ba:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c00071bf:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00071c4:	66 c7 40 02 40 06    	mov    WORD PTR [eax+0x2],0x640
c00071ca:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00071cf:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00071d4:	66 c7 05 c8 67 03 c0 40 06 	mov    WORD PTR ds:0xc00367c8,0x640
c00071dd:	83 ec 08             	sub    esp,0x8
c00071e0:	6a 01                	push   0x1
c00071e2:	68 98 76 03 c0       	push   0xc0037698
c00071e7:	e8 80 9a ff ff       	call   c0000c6c <sys_sem_new>
c00071ec:	83 c4 10             	add    esp,0x10
c00071ef:	0f be c0             	movsx  eax,al
c00071f2:	85 c0                	test   eax,eax
c00071f4:	74 16                	je     c000720c <mem_init+0xa0>
c00071f6:	83 ec 08             	sub    esp,0x8
c00071f9:	68 e8 fd 02 c0       	push   0xc002fde8
c00071fe:	68 a6 fd 02 c0       	push   0xc002fda6
c0007203:	e8 10 8c 01 00       	call   c001fe18 <CPrintf>
c0007208:	83 c4 10             	add    esp,0x10
c000720b:	90                   	nop
c000720c:	90                   	nop
c000720d:	83 c4 1c             	add    esp,0x1c
c0007210:	c3                   	ret    
c0007211:	8d 76 00             	lea    esi,[esi+0x0]

c0007214 <mem_free>:
c0007214:	83 ec 1c             	sub    esp,0x1c
c0007217:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000721c:	0f 84 0e 01 00 00    	je     c0007330 <mem_free+0x11c>
c0007222:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007227:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000722b:	72 0b                	jb     c0007238 <mem_free+0x24>
c000722d:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007232:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007236:	72 18                	jb     c0007250 <mem_free+0x3c>
c0007238:	83 ec 08             	sub    esp,0x8
c000723b:	68 03 fe 02 c0       	push   0xc002fe03
c0007240:	68 a6 fd 02 c0       	push   0xc002fda6
c0007245:	e8 ce 8b 01 00       	call   c001fe18 <CPrintf>
c000724a:	83 c4 10             	add    esp,0x10
c000724d:	8d 76 00             	lea    esi,[esi+0x0]
c0007250:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007255:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007259:	72 0d                	jb     c0007268 <mem_free+0x54>
c000725b:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007260:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007264:	72 22                	jb     c0007288 <mem_free+0x74>
c0007266:	66 90                	xchg   ax,ax
c0007268:	e8 9b 8b 01 00       	call   c001fe08 <CLockScheduler>
c000726d:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c0007273:	83 c0 01             	add    eax,0x1
c0007276:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c000727c:	e8 6b 8b 01 00       	call   c001fdec <CUnlockScheduler>
c0007281:	e9 ae 00 00 00       	jmp    c0007334 <mem_free+0x120>
c0007286:	66 90                	xchg   ax,ax
c0007288:	83 ec 08             	sub    esp,0x8
c000728b:	6a 00                	push   0x0
c000728d:	68 98 76 03 c0       	push   0xc0037698
c0007292:	e8 2d 9a ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c0007297:	83 c4 10             	add    esp,0x10
c000729a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000729e:	83 e8 06             	sub    eax,0x6
c00072a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00072a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072a9:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00072ac:	0f b6 c0             	movzx  eax,al
c00072af:	85 c0                	test   eax,eax
c00072b1:	75 15                	jne    c00072c8 <mem_free+0xb4>
c00072b3:	83 ec 08             	sub    esp,0x8
c00072b6:	68 1a fe 02 c0       	push   0xc002fe1a
c00072bb:	68 a6 fd 02 c0       	push   0xc002fda6
c00072c0:	e8 53 8b 01 00       	call   c001fe18 <CPrintf>
c00072c5:	83 c4 10             	add    esp,0x10
c00072c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072cc:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00072d0:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00072d5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00072d9:	73 09                	jae    c00072e4 <mem_free+0xd0>
c00072db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072df:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00072e4:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00072ea:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00072f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072f4:	29 d1                	sub    ecx,edx
c00072f6:	89 ca                	mov    edx,ecx
c00072f8:	89 d1                	mov    ecx,edx
c00072fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00072fe:	66 8b 12             	mov    dx,WORD PTR [edx]
c0007301:	29 d1                	sub    ecx,edx
c0007303:	89 ca                	mov    edx,ecx
c0007305:	01 d0                	add    eax,edx
c0007307:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c000730d:	83 ec 0c             	sub    esp,0xc
c0007310:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007314:	e8 bf fc ff ff       	call   c0006fd8 <plug_holes>
c0007319:	83 c4 10             	add    esp,0x10
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	68 98 76 03 c0       	push   0xc0037698
c0007324:	e8 83 99 ff ff       	call   c0000cac <sys_sem_signal>
c0007329:	83 c4 10             	add    esp,0x10
c000732c:	eb 06                	jmp    c0007334 <mem_free+0x120>
c000732e:	66 90                	xchg   ax,ax
c0007330:	90                   	nop
c0007331:	8d 76 00             	lea    esi,[esi+0x0]
c0007334:	83 c4 1c             	add    esp,0x1c
c0007337:	c3                   	ret    

c0007338 <mem_trim>:
c0007338:	83 ec 2c             	sub    esp,0x2c
c000733b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000733f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0007344:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007349:	83 f8 0b             	cmp    eax,0xb
c000734c:	77 0a                	ja     c0007358 <mem_trim+0x20>
c000734e:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c0007355:	8d 76 00             	lea    esi,[esi+0x0]
c0007358:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000735d:	3d 40 06 00 00       	cmp    eax,0x640
c0007362:	76 0c                	jbe    c0007370 <mem_trim+0x38>
c0007364:	b8 00 00 00 00       	mov    eax,0x0
c0007369:	e9 d6 02 00 00       	jmp    c0007644 <mem_trim+0x30c>
c000736e:	66 90                	xchg   ax,ax
c0007370:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007375:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007379:	72 0d                	jb     c0007388 <mem_trim+0x50>
c000737b:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007380:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007384:	72 1a                	jb     c00073a0 <mem_trim+0x68>
c0007386:	66 90                	xchg   ax,ax
c0007388:	83 ec 08             	sub    esp,0x8
c000738b:	68 2e fe 02 c0       	push   0xc002fe2e
c0007390:	68 a6 fd 02 c0       	push   0xc002fda6
c0007395:	e8 7e 8a 01 00       	call   c001fe18 <CPrintf>
c000739a:	83 c4 10             	add    esp,0x10
c000739d:	8d 76 00             	lea    esi,[esi+0x0]
c00073a0:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00073a5:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00073a9:	72 0d                	jb     c00073b8 <mem_trim+0x80>
c00073ab:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00073b0:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00073b4:	72 26                	jb     c00073dc <mem_trim+0xa4>
c00073b6:	66 90                	xchg   ax,ax
c00073b8:	e8 4b 8a 01 00       	call   c001fe08 <CLockScheduler>
c00073bd:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c00073c3:	83 c0 01             	add    eax,0x1
c00073c6:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c00073cc:	e8 1b 8a 01 00       	call   c001fdec <CUnlockScheduler>
c00073d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00073d5:	e9 6a 02 00 00       	jmp    c0007644 <mem_trim+0x30c>
c00073da:	66 90                	xchg   ax,ax
c00073dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00073e0:	83 e8 06             	sub    eax,0x6
c00073e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00073e7:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00073ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00073f0:	29 c2                	sub    edx,eax
c00073f2:	89 d0                	mov    eax,edx
c00073f4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00073f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00073fd:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007400:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0007405:	89 d1                	mov    ecx,edx
c0007407:	29 c1                	sub    ecx,eax
c0007409:	89 c8                	mov    eax,ecx
c000740b:	83 e8 06             	sub    eax,0x6
c000740e:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0007413:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007418:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000741d:	39 c2                	cmp    edx,eax
c000741f:	76 17                	jbe    c0007438 <mem_trim+0x100>
c0007421:	83 ec 08             	sub    esp,0x8
c0007424:	68 8c fe 02 c0       	push   0xc002fe8c
c0007429:	68 a6 fd 02 c0       	push   0xc002fda6
c000742e:	e8 e5 89 01 00       	call   c001fe18 <CPrintf>
c0007433:	83 c4 10             	add    esp,0x10
c0007436:	66 90                	xchg   ax,ax
c0007438:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000743d:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007442:	39 c2                	cmp    edx,eax
c0007444:	76 0a                	jbe    c0007450 <mem_trim+0x118>
c0007446:	b8 00 00 00 00       	mov    eax,0x0
c000744b:	e9 f4 01 00 00       	jmp    c0007644 <mem_trim+0x30c>
c0007450:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007455:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000745a:	39 c2                	cmp    edx,eax
c000745c:	75 0a                	jne    c0007468 <mem_trim+0x130>
c000745e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007462:	e9 dd 01 00 00       	jmp    c0007644 <mem_trim+0x30c>
c0007467:	90                   	nop
c0007468:	83 ec 08             	sub    esp,0x8
c000746b:	6a 00                	push   0x0
c000746d:	68 98 76 03 c0       	push   0xc0037698
c0007472:	e8 4d 98 ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c0007477:	83 c4 10             	add    esp,0x10
c000747a:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007480:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007484:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007487:	0f b7 c0             	movzx  eax,ax
c000748a:	01 d0                	add    eax,edx
c000748c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007490:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007494:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007497:	0f b6 c0             	movzx  eax,al
c000749a:	85 c0                	test   eax,eax
c000749c:	0f 85 c6 00 00 00    	jne    c0007568 <mem_trim+0x230>
c00074a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00074a6:	66 8b 00             	mov    ax,WORD PTR [eax]
c00074a9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00074ae:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00074b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074b7:	01 d0                	add    eax,edx
c00074b9:	83 c0 06             	add    eax,0x6
c00074bc:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c00074c1:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00074c6:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00074ca:	75 14                	jne    c00074e0 <mem_trim+0x1a8>
c00074cc:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00074d2:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00074d7:	01 d0                	add    eax,edx
c00074d9:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00074de:	66 90                	xchg   ax,ax
c00074e0:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00074e6:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00074eb:	01 d0                	add    eax,edx
c00074ed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00074f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00074f5:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00074f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00074fd:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0007502:	66 89 02             	mov    WORD PTR [edx],ax
c0007505:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007509:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000750e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007512:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000751a:	66 89 02             	mov    WORD PTR [edx],ax
c000751d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007521:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007524:	0f b7 c0             	movzx  eax,ax
c0007527:	3d 40 06 00 00       	cmp    eax,0x640
c000752c:	74 1a                	je     c0007548 <mem_trim+0x210>
c000752e:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007534:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007538:	66 8b 00             	mov    ax,WORD PTR [eax]
c000753b:	0f b7 c0             	movzx  eax,ax
c000753e:	01 c2                	add    edx,eax
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007548:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000754e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007552:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007556:	29 d1                	sub    ecx,edx
c0007558:	89 ca                	mov    edx,ecx
c000755a:	01 d0                	add    eax,edx
c000755c:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007562:	e9 c9 00 00 00       	jmp    c0007630 <mem_trim+0x2f8>
c0007567:	90                   	nop
c0007568:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000756d:	8d 50 12             	lea    edx,[eax+0x12]
c0007570:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007575:	39 c2                	cmp    edx,eax
c0007577:	0f 87 b3 00 00 00    	ja     c0007630 <mem_trim+0x2f8>
c000757d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0007582:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007586:	01 d0                	add    eax,edx
c0007588:	83 c0 06             	add    eax,0x6
c000758b:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0007590:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007596:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c000759b:	01 d0                	add    eax,edx
c000759d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00075a1:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00075a6:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00075aa:	73 0c                	jae    c00075b8 <mem_trim+0x280>
c00075ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075b0:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00075b5:	8d 76 00             	lea    esi,[esi+0x0]
c00075b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075bc:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00075c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00075c4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00075c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075cb:	66 89 02             	mov    WORD PTR [edx],ax
c00075ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075d2:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00075d7:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00075db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00075df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075e3:	66 89 02             	mov    WORD PTR [edx],ax
c00075e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075ea:	66 8b 00             	mov    ax,WORD PTR [eax]
c00075ed:	0f b7 c0             	movzx  eax,ax
c00075f0:	3d 40 06 00 00       	cmp    eax,0x640
c00075f5:	74 1d                	je     c0007614 <mem_trim+0x2dc>
c00075f7:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00075fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007601:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007604:	0f b7 c0             	movzx  eax,ax
c0007607:	01 c2                	add    edx,eax
c0007609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000760d:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007611:	8d 76 00             	lea    esi,[esi+0x0]
c0007614:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000761a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000761e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007622:	29 d1                	sub    ecx,edx
c0007624:	89 ca                	mov    edx,ecx
c0007626:	01 d0                	add    eax,edx
c0007628:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c000762e:	66 90                	xchg   ax,ax
c0007630:	83 ec 0c             	sub    esp,0xc
c0007633:	68 98 76 03 c0       	push   0xc0037698
c0007638:	e8 6f 96 ff ff       	call   c0000cac <sys_sem_signal>
c000763d:	83 c4 10             	add    esp,0x10
c0007640:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007644:	83 c4 2c             	add    esp,0x2c
c0007647:	c3                   	ret    

c0007648 <mem_malloc>:
c0007648:	53                   	push   ebx
c0007649:	83 ec 28             	sub    esp,0x28
c000764c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007650:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0007655:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000765a:	85 c0                	test   eax,eax
c000765c:	75 0a                	jne    c0007668 <mem_malloc+0x20>
c000765e:	b8 00 00 00 00       	mov    eax,0x0
c0007663:	e9 f4 02 00 00       	jmp    c000795c <mem_malloc+0x314>
c0007668:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000766d:	83 f8 0b             	cmp    eax,0xb
c0007670:	77 0a                	ja     c000767c <mem_malloc+0x34>
c0007672:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c0007679:	8d 76 00             	lea    esi,[esi+0x0]
c000767c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007681:	3d 40 06 00 00       	cmp    eax,0x640
c0007686:	76 0c                	jbe    c0007694 <mem_malloc+0x4c>
c0007688:	b8 00 00 00 00       	mov    eax,0x0
c000768d:	e9 ca 02 00 00       	jmp    c000795c <mem_malloc+0x314>
c0007692:	66 90                	xchg   ax,ax
c0007694:	83 ec 08             	sub    esp,0x8
c0007697:	6a 00                	push   0x0
c0007699:	68 98 76 03 c0       	push   0xc0037698
c000769e:	e8 21 96 ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c00076a3:	83 c4 10             	add    esp,0x10
c00076a6:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c00076ac:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00076b1:	29 c2                	sub    edx,eax
c00076b3:	89 d0                	mov    eax,edx
c00076b5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00076ba:	e9 5d 02 00 00       	jmp    c000791c <mem_malloc+0x2d4>
c00076bf:	90                   	nop
c00076c0:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00076c6:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00076cb:	01 d0                	add    eax,edx
c00076cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00076d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076d5:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00076d8:	0f b6 c0             	movzx  eax,al
c00076db:	85 c0                	test   eax,eax
c00076dd:	0f 85 21 02 00 00    	jne    c0007904 <mem_malloc+0x2bc>
c00076e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076e7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00076ea:	0f b7 d0             	movzx  edx,ax
c00076ed:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00076f2:	29 c2                	sub    edx,eax
c00076f4:	89 d0                	mov    eax,edx
c00076f6:	8d 50 fa             	lea    edx,[eax-0x6]
c00076f9:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00076fe:	39 c2                	cmp    edx,eax
c0007700:	0f 82 fe 01 00 00    	jb     c0007904 <mem_malloc+0x2bc>
c0007706:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000770a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000770d:	0f b7 d0             	movzx  edx,ax
c0007710:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007715:	29 c2                	sub    edx,eax
c0007717:	89 d0                	mov    eax,edx
c0007719:	8d 50 fa             	lea    edx,[eax-0x6]
c000771c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007721:	83 c0 12             	add    eax,0x12
c0007724:	39 c2                	cmp    edx,eax
c0007726:	0f 82 c4 00 00 00    	jb     c00077f0 <mem_malloc+0x1a8>
c000772c:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c0007731:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007735:	01 d0                	add    eax,edx
c0007737:	83 c0 06             	add    eax,0x6
c000773a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000773f:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007745:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000774a:	01 d0                	add    eax,edx
c000774c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007754:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007758:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000775c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000775f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007763:	66 89 02             	mov    WORD PTR [edx],ax
c0007766:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000776a:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000776f:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007773:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007777:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000777c:	66 89 02             	mov    WORD PTR [edx],ax
c000777f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007783:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0007787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000778b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000778e:	0f b7 c0             	movzx  eax,ax
c0007791:	3d 40 06 00 00       	cmp    eax,0x640
c0007796:	74 1c                	je     c00077b4 <mem_malloc+0x16c>
c0007798:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000779e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00077a2:	66 8b 00             	mov    ax,WORD PTR [eax]
c00077a5:	0f b7 c0             	movzx  eax,ax
c00077a8:	01 c2                	add    edx,eax
c00077aa:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00077af:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00077b3:	90                   	nop
c00077b4:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00077ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00077be:	01 d0                	add    eax,edx
c00077c0:	83 c0 06             	add    eax,0x6
c00077c3:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00077c9:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c00077d0:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00077d6:	0f b7 d2             	movzx  edx,dx
c00077d9:	0f b7 c0             	movzx  eax,ax
c00077dc:	39 c2                	cmp    edx,eax
c00077de:	73 60                	jae    c0007840 <mem_malloc+0x1f8>
c00077e0:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00077e6:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c00077ec:	eb 52                	jmp    c0007840 <mem_malloc+0x1f8>
c00077ee:	66 90                	xchg   ax,ax
c00077f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00077f4:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c00077f8:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00077fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007802:	66 8b 12             	mov    dx,WORD PTR [edx]
c0007805:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c000780b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000780f:	29 cb                	sub    ebx,ecx
c0007811:	89 d9                	mov    ecx,ebx
c0007813:	29 ca                	sub    edx,ecx
c0007815:	01 d0                	add    eax,edx
c0007817:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c000781d:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c0007824:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000782a:	0f b7 d2             	movzx  edx,dx
c000782d:	0f b7 c0             	movzx  eax,ax
c0007830:	39 c2                	cmp    edx,eax
c0007832:	73 0c                	jae    c0007840 <mem_malloc+0x1f8>
c0007834:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000783a:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c0007840:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007845:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0007849:	75 71                	jne    c00078bc <mem_malloc+0x274>
c000784b:	eb 1b                	jmp    c0007868 <mem_malloc+0x220>
c000784d:	8d 76 00             	lea    esi,[esi+0x0]
c0007850:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007856:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000785b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000785e:	0f b7 c0             	movzx  eax,ax
c0007861:	01 d0                	add    eax,edx
c0007863:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007868:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000786d:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007870:	0f b6 c0             	movzx  eax,al
c0007873:	85 c0                	test   eax,eax
c0007875:	74 11                	je     c0007888 <mem_malloc+0x240>
c0007877:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c000787d:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007882:	39 c2                	cmp    edx,eax
c0007884:	75 ca                	jne    c0007850 <mem_malloc+0x208>
c0007886:	66 90                	xchg   ax,ax
c0007888:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c000788e:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007893:	39 c2                	cmp    edx,eax
c0007895:	74 25                	je     c00078bc <mem_malloc+0x274>
c0007897:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000789c:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000789f:	0f b6 c0             	movzx  eax,al
c00078a2:	85 c0                	test   eax,eax
c00078a4:	74 16                	je     c00078bc <mem_malloc+0x274>
c00078a6:	83 ec 08             	sub    esp,0x8
c00078a9:	68 45 fe 02 c0       	push   0xc002fe45
c00078ae:	68 a6 fd 02 c0       	push   0xc002fda6
c00078b3:	e8 60 85 01 00       	call   c001fe18 <CPrintf>
c00078b8:	83 c4 10             	add    esp,0x10
c00078bb:	90                   	nop
c00078bc:	83 ec 0c             	sub    esp,0xc
c00078bf:	68 98 76 03 c0       	push   0xc0037698
c00078c4:	e8 e3 93 ff ff       	call   c0000cac <sys_sem_signal>
c00078c9:	83 c4 10             	add    esp,0x10
c00078cc:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00078d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078d5:	01 d0                	add    eax,edx
c00078d7:	8d 50 06             	lea    edx,[eax+0x6]
c00078da:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00078df:	39 c2                	cmp    edx,eax
c00078e1:	76 15                	jbe    c00078f8 <mem_malloc+0x2b0>
c00078e3:	83 ec 08             	sub    esp,0x8
c00078e6:	68 ac fe 02 c0       	push   0xc002feac
c00078eb:	68 a6 fd 02 c0       	push   0xc002fda6
c00078f0:	e8 23 85 01 00       	call   c001fe18 <CPrintf>
c00078f5:	83 c4 10             	add    esp,0x10
c00078f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078fc:	83 c0 06             	add    eax,0x6
c00078ff:	eb 5b                	jmp    c000795c <mem_malloc+0x314>
c0007901:	8d 76 00             	lea    esi,[esi+0x0]
c0007904:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000790a:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000790f:	01 d0                	add    eax,edx
c0007911:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007914:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0007919:	8d 76 00             	lea    esi,[esi+0x0]
c000791c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007921:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007926:	b9 40 06 00 00       	mov    ecx,0x640
c000792b:	29 d1                	sub    ecx,edx
c000792d:	89 ca                	mov    edx,ecx
c000792f:	39 d0                	cmp    eax,edx
c0007931:	0f 8c 89 fd ff ff    	jl     c00076c0 <mem_malloc+0x78>
c0007937:	66 a1 ce 67 03 c0    	mov    ax,ds:0xc00367ce
c000793d:	83 c0 01             	add    eax,0x1
c0007940:	66 a3 ce 67 03 c0    	mov    ds:0xc00367ce,ax
c0007946:	83 ec 0c             	sub    esp,0xc
c0007949:	68 98 76 03 c0       	push   0xc0037698
c000794e:	e8 59 93 ff ff       	call   c0000cac <sys_sem_signal>
c0007953:	83 c4 10             	add    esp,0x10
c0007956:	b8 00 00 00 00       	mov    eax,0x0
c000795b:	90                   	nop
c000795c:	83 c4 28             	add    esp,0x28
c000795f:	5b                   	pop    ebx
c0007960:	c3                   	ret    
c0007961:	8d 76 00             	lea    esi,[esi+0x0]

c0007964 <mem_calloc>:
c0007964:	83 ec 2c             	sub    esp,0x2c
c0007967:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000796b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000796f:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0007974:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007979:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000797d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007981:	0f af c2             	imul   eax,edx
c0007984:	0f b7 c0             	movzx  eax,ax
c0007987:	83 ec 0c             	sub    esp,0xc
c000798a:	50                   	push   eax
c000798b:	e8 b8 fc ff ff       	call   c0007648 <mem_malloc>
c0007990:	83 c4 10             	add    esp,0x10
c0007993:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007997:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000799c:	74 22                	je     c00079c0 <mem_calloc+0x5c>
c000799e:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00079a3:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00079a8:	0f af c2             	imul   eax,edx
c00079ab:	83 ec 04             	sub    esp,0x4
c00079ae:	50                   	push   eax
c00079af:	6a 00                	push   0x0
c00079b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b5:	e8 36 8b ff ff       	call   c00004f0 <memset>
c00079ba:	83 c4 10             	add    esp,0x10
c00079bd:	8d 76 00             	lea    esi,[esi+0x0]
c00079c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00079c4:	83 c4 2c             	add    esp,0x2c
c00079c7:	c3                   	ret    

c00079c8 <memp_init>:
c00079c8:	83 ec 10             	sub    esp,0x10
c00079cb:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c00079d2:	eb 78                	jmp    c0007a4c <memp_init+0x84>
c00079d4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00079d9:	89 d0                	mov    eax,edx
c00079db:	c1 e0 02             	shl    eax,0x2
c00079de:	01 d0                	add    eax,edx
c00079e0:	01 c0                	add    eax,eax
c00079e2:	05 d4 67 03 c0       	add    eax,0xc00367d4
c00079e7:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c00079ec:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00079f1:	89 d0                	mov    eax,edx
c00079f3:	c1 e0 02             	shl    eax,0x2
c00079f6:	01 d0                	add    eax,edx
c00079f8:	01 c0                	add    eax,eax
c00079fa:	05 d6 67 03 c0       	add    eax,0xc00367d6
c00079ff:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007a04:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007a09:	89 d0                	mov    eax,edx
c0007a0b:	c1 e0 02             	shl    eax,0x2
c0007a0e:	01 d0                	add    eax,edx
c0007a10:	01 c0                	add    eax,eax
c0007a12:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007a17:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007a1c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a21:	0f b7 4c 24 0a       	movzx  ecx,WORD PTR [esp+0xa]
c0007a26:	66 8b 94 00 fc fe 02 c0 	mov    dx,WORD PTR [eax+eax*1-0x3ffd0104]
c0007a2e:	89 c8                	mov    eax,ecx
c0007a30:	c1 e0 02             	shl    eax,0x2
c0007a33:	01 c8                	add    eax,ecx
c0007a35:	01 c0                	add    eax,eax
c0007a37:	05 d2 67 03 c0       	add    eax,0xc00367d2
c0007a3c:	66 89 10             	mov    WORD PTR [eax],dx
c0007a3f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0007a44:	83 c0 01             	add    eax,0x1
c0007a47:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0007a4c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a51:	83 f8 0d             	cmp    eax,0xd
c0007a54:	0f 86 7a ff ff ff    	jbe    c00079d4 <memp_init+0xc>
c0007a5a:	c7 44 24 0c c0 76 03 c0 	mov    DWORD PTR [esp+0xc],0xc00376c0
c0007a62:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c0007a69:	e9 8a 00 00 00       	jmp    c0007af8 <memp_init+0x130>
c0007a6e:	66 90                	xchg   ax,ax
c0007a70:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a75:	c7 04 85 60 a8 03 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffc57a0],0x0
c0007a80:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0007a87:	eb 47                	jmp    c0007ad0 <memp_init+0x108>
c0007a89:	8d 76 00             	lea    esi,[esi+0x0]
c0007a8c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a91:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007a98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a9c:	89 10                	mov    DWORD PTR [eax],edx
c0007a9e:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007aa3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007aa7:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007aae:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007ab3:	66 8b 84 00 18 ff 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd00e8]
c0007abb:	0f b7 c0             	movzx  eax,ax
c0007abe:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0007ac2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ac6:	83 c0 01             	add    eax,0x1
c0007ac9:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007ace:	66 90                	xchg   ax,ax
c0007ad0:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007ad5:	66 8b 84 00 fc fe 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0104]
c0007add:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0007ae2:	0f b7 c0             	movzx  eax,ax
c0007ae5:	39 c2                	cmp    edx,eax
c0007ae7:	72 a3                	jb     c0007a8c <memp_init+0xc4>
c0007ae9:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0007aee:	83 c0 01             	add    eax,0x1
c0007af1:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0007af6:	66 90                	xchg   ax,ax
c0007af8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007afd:	83 f8 0d             	cmp    eax,0xd
c0007b00:	0f 86 6a ff ff ff    	jbe    c0007a70 <memp_init+0xa8>
c0007b06:	90                   	nop
c0007b07:	83 c4 10             	add    esp,0x10
c0007b0a:	c3                   	ret    
c0007b0b:	90                   	nop

c0007b0c <memp_malloc>:
c0007b0c:	83 ec 1c             	sub    esp,0x1c
c0007b0f:	83 7c 24 20 0d       	cmp    DWORD PTR [esp+0x20],0xd
c0007b14:	76 22                	jbe    c0007b38 <memp_malloc+0x2c>
c0007b16:	83 ec 08             	sub    esp,0x8
c0007b19:	68 dc fe 02 c0       	push   0xc002fedc
c0007b1e:	68 a6 fd 02 c0       	push   0xc002fda6
c0007b23:	e8 f0 82 01 00       	call   c001fe18 <CPrintf>
c0007b28:	83 c4 10             	add    esp,0x10
c0007b2b:	b8 00 00 00 00       	mov    eax,0x0
c0007b30:	e9 ff 00 00 00       	jmp    c0007c34 <memp_malloc+0x128>
c0007b35:	8d 76 00             	lea    esi,[esi+0x0]
c0007b38:	e8 cb 82 01 00       	call   c001fe08 <CLockScheduler>
c0007b3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b41:	8b 04 85 60 a8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc57a0]
c0007b48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b4c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007b51:	0f 84 a1 00 00 00    	je     c0007bf8 <memp_malloc+0xec>
c0007b57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b5b:	8b 10                	mov    edx,DWORD PTR [eax]
c0007b5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b61:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007b68:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007b6c:	89 d0                	mov    eax,edx
c0007b6e:	c1 e0 02             	shl    eax,0x2
c0007b71:	01 d0                	add    eax,edx
c0007b73:	01 c0                	add    eax,eax
c0007b75:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007b7a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007b7d:	83 c0 01             	add    eax,0x1
c0007b80:	89 c2                	mov    edx,eax
c0007b82:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b86:	89 c8                	mov    eax,ecx
c0007b88:	c1 e0 02             	shl    eax,0x2
c0007b8b:	01 c8                	add    eax,ecx
c0007b8d:	01 c0                	add    eax,eax
c0007b8f:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007b94:	66 89 10             	mov    WORD PTR [eax],dx
c0007b97:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007b9b:	89 d0                	mov    eax,edx
c0007b9d:	c1 e0 02             	shl    eax,0x2
c0007ba0:	01 d0                	add    eax,edx
c0007ba2:	01 c0                	add    eax,eax
c0007ba4:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007ba9:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007bac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bb0:	89 c8                	mov    eax,ecx
c0007bb2:	c1 e0 02             	shl    eax,0x2
c0007bb5:	01 c8                	add    eax,ecx
c0007bb7:	01 c0                	add    eax,eax
c0007bb9:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007bbe:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007bc1:	0f b7 d2             	movzx  edx,dx
c0007bc4:	0f b7 c0             	movzx  eax,ax
c0007bc7:	39 c2                	cmp    edx,eax
c0007bc9:	73 5d                	jae    c0007c28 <memp_malloc+0x11c>
c0007bcb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007bcf:	89 d0                	mov    eax,edx
c0007bd1:	c1 e0 02             	shl    eax,0x2
c0007bd4:	01 d0                	add    eax,edx
c0007bd6:	01 c0                	add    eax,eax
c0007bd8:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007bdd:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007be0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007be4:	89 c8                	mov    eax,ecx
c0007be6:	c1 e0 02             	shl    eax,0x2
c0007be9:	01 c8                	add    eax,ecx
c0007beb:	01 c0                	add    eax,eax
c0007bed:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007bf2:	66 89 10             	mov    WORD PTR [eax],dx
c0007bf5:	eb 31                	jmp    c0007c28 <memp_malloc+0x11c>
c0007bf7:	90                   	nop
c0007bf8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007bfc:	89 d0                	mov    eax,edx
c0007bfe:	c1 e0 02             	shl    eax,0x2
c0007c01:	01 d0                	add    eax,edx
c0007c03:	01 c0                	add    eax,eax
c0007c05:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007c0a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007c0d:	83 c0 01             	add    eax,0x1
c0007c10:	89 c2                	mov    edx,eax
c0007c12:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c16:	89 c8                	mov    eax,ecx
c0007c18:	c1 e0 02             	shl    eax,0x2
c0007c1b:	01 c8                	add    eax,ecx
c0007c1d:	01 c0                	add    eax,eax
c0007c1f:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007c24:	66 89 10             	mov    WORD PTR [eax],dx
c0007c27:	90                   	nop
c0007c28:	e8 bf 81 01 00       	call   c001fdec <CUnlockScheduler>
c0007c2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c31:	8d 76 00             	lea    esi,[esi+0x0]
c0007c34:	83 c4 1c             	add    esp,0x1c
c0007c37:	c3                   	ret    

c0007c38 <memp_free>:
c0007c38:	83 ec 1c             	sub    esp,0x1c
c0007c3b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007c40:	74 66                	je     c0007ca8 <memp_free+0x70>
c0007c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007c46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c4a:	e8 b9 81 01 00       	call   c001fe08 <CLockScheduler>
c0007c4f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007c53:	89 d0                	mov    eax,edx
c0007c55:	c1 e0 02             	shl    eax,0x2
c0007c58:	01 d0                	add    eax,edx
c0007c5a:	01 c0                	add    eax,eax
c0007c5c:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007c61:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007c64:	83 e8 01             	sub    eax,0x1
c0007c67:	89 c2                	mov    edx,eax
c0007c69:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c6d:	89 c8                	mov    eax,ecx
c0007c6f:	c1 e0 02             	shl    eax,0x2
c0007c72:	01 c8                	add    eax,ecx
c0007c74:	01 c0                	add    eax,eax
c0007c76:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007c7b:	66 89 10             	mov    WORD PTR [eax],dx
c0007c7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c82:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007c89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c8d:	89 10                	mov    DWORD PTR [eax],edx
c0007c8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c97:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007c9e:	e8 49 81 01 00       	call   c001fdec <CUnlockScheduler>
c0007ca3:	eb 07                	jmp    c0007cac <memp_free+0x74>
c0007ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0007ca8:	90                   	nop
c0007ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0007cac:	83 c4 1c             	add    esp,0x1c
c0007caf:	c3                   	ret    

c0007cb0 <netif_init>:
c0007cb0:	90                   	nop
c0007cb1:	c3                   	ret    
c0007cb2:	66 90                	xchg   ax,ax

c0007cb4 <netif_find>:
c0007cb4:	83 ec 10             	sub    esp,0x10
c0007cb7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007cbc:	75 0a                	jne    c0007cc8 <netif_find+0x14>
c0007cbe:	b8 00 00 00 00       	mov    eax,0x0
c0007cc3:	e9 80 00 00 00       	jmp    c0007d48 <netif_find+0x94>
c0007cc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007ccc:	83 c0 02             	add    eax,0x2
c0007ccf:	8a 00                	mov    al,BYTE PTR [eax]
c0007cd1:	83 e8 30             	sub    eax,0x30
c0007cd4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0007cd8:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007cdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ce1:	eb 59                	jmp    c0007d3c <netif_find+0x88>
c0007ce3:	90                   	nop
c0007ce4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ce8:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0007ceb:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0007cf0:	0f b6 c0             	movzx  eax,al
c0007cf3:	39 c2                	cmp    edx,eax
c0007cf5:	75 39                	jne    c0007d30 <netif_find+0x7c>
c0007cf7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007cfb:	8a 10                	mov    dl,BYTE PTR [eax]
c0007cfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d01:	8a 40 2a             	mov    al,BYTE PTR [eax+0x2a]
c0007d04:	0f be d2             	movsx  edx,dl
c0007d07:	0f be c0             	movsx  eax,al
c0007d0a:	39 c2                	cmp    edx,eax
c0007d0c:	75 22                	jne    c0007d30 <netif_find+0x7c>
c0007d0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d12:	83 c0 01             	add    eax,0x1
c0007d15:	8a 10                	mov    dl,BYTE PTR [eax]
c0007d17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d1b:	8a 40 2b             	mov    al,BYTE PTR [eax+0x2b]
c0007d1e:	0f be d2             	movsx  edx,dl
c0007d21:	0f be c0             	movsx  eax,al
c0007d24:	39 c2                	cmp    edx,eax
c0007d26:	75 08                	jne    c0007d30 <netif_find+0x7c>
c0007d28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d2c:	eb 1a                	jmp    c0007d48 <netif_find+0x94>
c0007d2e:	66 90                	xchg   ax,ax
c0007d30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d34:	8b 00                	mov    eax,DWORD PTR [eax]
c0007d36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d3a:	66 90                	xchg   ax,ax
c0007d3c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007d41:	75 a1                	jne    c0007ce4 <netif_find+0x30>
c0007d43:	b8 00 00 00 00       	mov    eax,0x0
c0007d48:	83 c4 10             	add    esp,0x10
c0007d4b:	c3                   	ret    

c0007d4c <netif_set_ipaddr>:
c0007d4c:	83 ec 1c             	sub    esp,0x1c
c0007d4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007d53:	8b 10                	mov    edx,DWORD PTR [eax]
c0007d55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d59:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007d5c:	39 c2                	cmp    edx,eax
c0007d5e:	0f 84 bc 00 00 00    	je     c0007e20 <netif_set_ipaddr+0xd4>
c0007d64:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007d69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d6d:	eb 45                	jmp    c0007db4 <netif_set_ipaddr+0x68>
c0007d6f:	90                   	nop
c0007d70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d74:	8b 10                	mov    edx,DWORD PTR [eax]
c0007d76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007d7d:	39 c2                	cmp    edx,eax
c0007d7f:	75 27                	jne    c0007da8 <netif_set_ipaddr+0x5c>
c0007d81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d85:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007d88:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007d8c:	83 ec 0c             	sub    esp,0xc
c0007d8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007d93:	e8 7c 36 00 00       	call   c000b414 <tcp_abort>
c0007d98:	83 c4 10             	add    esp,0x10
c0007d9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007da3:	eb 0f                	jmp    c0007db4 <netif_set_ipaddr+0x68>
c0007da5:	8d 76 00             	lea    esi,[esi+0x0]
c0007da8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007dac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007daf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007db3:	90                   	nop
c0007db4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007db9:	75 b5                	jne    c0007d70 <netif_set_ipaddr+0x24>
c0007dbb:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c0007dc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc4:	eb 52                	jmp    c0007e18 <netif_set_ipaddr+0xcc>
c0007dc6:	66 90                	xchg   ax,ax
c0007dc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dcc:	85 c0                	test   eax,eax
c0007dce:	74 3c                	je     c0007e0c <netif_set_ipaddr+0xc0>
c0007dd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0007dd6:	85 c0                	test   eax,eax
c0007dd8:	74 32                	je     c0007e0c <netif_set_ipaddr+0xc0>
c0007dda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dde:	8b 10                	mov    edx,DWORD PTR [eax]
c0007de0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007de4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007de7:	39 c2                	cmp    edx,eax
c0007de9:	75 21                	jne    c0007e0c <netif_set_ipaddr+0xc0>
c0007deb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007df0:	74 0a                	je     c0007dfc <netif_set_ipaddr+0xb0>
c0007df2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007df6:	8b 00                	mov    eax,DWORD PTR [eax]
c0007df8:	eb 0a                	jmp    c0007e04 <netif_set_ipaddr+0xb8>
c0007dfa:	66 90                	xchg   ax,ax
c0007dfc:	b8 00 00 00 00       	mov    eax,0x0
c0007e01:	8d 76 00             	lea    esi,[esi+0x0]
c0007e04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e08:	89 02                	mov    DWORD PTR [edx],eax
c0007e0a:	66 90                	xchg   ax,ax
c0007e0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e10:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007e13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e17:	90                   	nop
c0007e18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e1d:	75 a9                	jne    c0007dc8 <netif_set_ipaddr+0x7c>
c0007e1f:	90                   	nop
c0007e20:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007e25:	74 09                	je     c0007e30 <netif_set_ipaddr+0xe4>
c0007e27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007e2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e2d:	eb 09                	jmp    c0007e38 <netif_set_ipaddr+0xec>
c0007e2f:	90                   	nop
c0007e30:	b8 00 00 00 00       	mov    eax,0x0
c0007e35:	8d 76 00             	lea    esi,[esi+0x0]
c0007e38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007e3c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0007e3f:	90                   	nop
c0007e40:	83 c4 1c             	add    esp,0x1c
c0007e43:	c3                   	ret    

c0007e44 <netif_set_gw>:
c0007e44:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e49:	74 09                	je     c0007e54 <netif_set_gw+0x10>
c0007e4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e51:	eb 09                	jmp    c0007e5c <netif_set_gw+0x18>
c0007e53:	90                   	nop
c0007e54:	b8 00 00 00 00       	mov    eax,0x0
c0007e59:	8d 76 00             	lea    esi,[esi+0x0]
c0007e5c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007e60:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0007e63:	90                   	nop
c0007e64:	c3                   	ret    
c0007e65:	8d 76 00             	lea    esi,[esi+0x0]

c0007e68 <netif_set_netmask>:
c0007e68:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e6d:	74 09                	je     c0007e78 <netif_set_netmask+0x10>
c0007e6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e73:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e75:	eb 09                	jmp    c0007e80 <netif_set_netmask+0x18>
c0007e77:	90                   	nop
c0007e78:	b8 00 00 00 00       	mov    eax,0x0
c0007e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0007e80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007e84:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0007e87:	90                   	nop
c0007e88:	c3                   	ret    
c0007e89:	8d 76 00             	lea    esi,[esi+0x0]

c0007e8c <netif_set_addr>:
c0007e8c:	83 ec 0c             	sub    esp,0xc
c0007e8f:	83 ec 08             	sub    esp,0x8
c0007e92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e9a:	e8 ad fe ff ff       	call   c0007d4c <netif_set_ipaddr>
c0007e9f:	83 c4 10             	add    esp,0x10
c0007ea2:	83 ec 08             	sub    esp,0x8
c0007ea5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007ea9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ead:	e8 b6 ff ff ff       	call   c0007e68 <netif_set_netmask>
c0007eb2:	83 c4 10             	add    esp,0x10
c0007eb5:	83 ec 08             	sub    esp,0x8
c0007eb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ec0:	e8 7f ff ff ff       	call   c0007e44 <netif_set_gw>
c0007ec5:	83 c4 10             	add    esp,0x10
c0007ec8:	90                   	nop
c0007ec9:	83 c4 0c             	add    esp,0xc
c0007ecc:	c3                   	ret    
c0007ecd:	8d 76 00             	lea    esi,[esi+0x0]

c0007ed0 <netif_add>:
c0007ed0:	83 ec 0c             	sub    esp,0xc
c0007ed3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007ed8:	75 16                	jne    c0007ef0 <netif_add+0x20>
c0007eda:	83 ec 08             	sub    esp,0x8
c0007edd:	68 34 ff 02 c0       	push   0xc002ff34
c0007ee2:	68 a6 fd 02 c0       	push   0xc002fda6
c0007ee7:	e8 2c 7f 01 00       	call   c001fe18 <CPrintf>
c0007eec:	83 c4 10             	add    esp,0x10
c0007eef:	90                   	nop
c0007ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ef4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007eff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0007f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f0a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0007f11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f15:	c6 40 29 00          	mov    BYTE PTR [eax+0x29],0x0
c0007f19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007f21:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0007f24:	a0 98 a8 03 c0       	mov    al,ds:0xc003a898
c0007f29:	8d 50 01             	lea    edx,[eax+0x1]
c0007f2c:	88 15 98 a8 03 c0    	mov    BYTE PTR ds:0xc003a898,dl
c0007f32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007f36:	88 42 2c             	mov    BYTE PTR [edx+0x2c],al
c0007f39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f3d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007f41:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0007f44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f54:	e8 33 ff ff ff       	call   c0007e8c <netif_set_addr>
c0007f59:	83 c4 10             	add    esp,0x10
c0007f5c:	83 ec 0c             	sub    esp,0xc
c0007f5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f67:	ff d0                	call   eax
c0007f69:	83 c4 10             	add    esp,0x10
c0007f6c:	0f be c0             	movsx  eax,al
c0007f6f:	85 c0                	test   eax,eax
c0007f71:	74 09                	je     c0007f7c <netif_add+0xac>
c0007f73:	b8 00 00 00 00       	mov    eax,0x0
c0007f78:	eb 1e                	jmp    c0007f98 <netif_add+0xc8>
c0007f7a:	66 90                	xchg   ax,ax
c0007f7c:	8b 15 10 67 03 c0    	mov    edx,DWORD PTR ds:0xc0036710
c0007f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f86:	89 10                	mov    DWORD PTR [eax],edx
c0007f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f8c:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f95:	8d 76 00             	lea    esi,[esi+0x0]
c0007f98:	83 c4 0c             	add    esp,0xc
c0007f9b:	c3                   	ret    

c0007f9c <netif_set_default>:
c0007f9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fa0:	a3 14 67 03 c0       	mov    ds:0xc0036714,eax
c0007fa5:	90                   	nop
c0007fa6:	c3                   	ret    
c0007fa7:	90                   	nop

c0007fa8 <netif_set_up>:
c0007fa8:	83 ec 0c             	sub    esp,0xc
c0007fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007faf:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fb2:	0f b6 c0             	movzx  eax,al
c0007fb5:	83 e0 01             	and    eax,0x1
c0007fb8:	75 4a                	jne    c0008004 <netif_set_up+0x5c>
c0007fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fbe:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fc1:	83 c8 01             	or     eax,0x1
c0007fc4:	88 c2                	mov    dl,al
c0007fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fca:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fd1:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fd4:	0f b6 c0             	movzx  eax,al
c0007fd7:	83 e0 10             	and    eax,0x10
c0007fda:	74 28                	je     c0008004 <netif_set_up+0x5c>
c0007fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fe0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fe3:	0f b6 c0             	movzx  eax,al
c0007fe6:	83 e0 20             	and    eax,0x20
c0007fe9:	74 19                	je     c0008004 <netif_set_up+0x5c>
c0007feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fef:	83 c0 04             	add    eax,0x4
c0007ff2:	83 ec 08             	sub    esp,0x8
c0007ff5:	50                   	push   eax
c0007ff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ffa:	e8 bd a5 00 00       	call   c00125bc <etharp_request>
c0007fff:	83 c4 10             	add    esp,0x10
c0008002:	66 90                	xchg   ax,ax
c0008004:	90                   	nop
c0008005:	83 c4 0c             	add    esp,0xc
c0008008:	c3                   	ret    
c0008009:	8d 76 00             	lea    esi,[esi+0x0]

c000800c <netif_set_down>:
c000800c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008010:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008013:	0f b6 c0             	movzx  eax,al
c0008016:	83 e0 01             	and    eax,0x1
c0008019:	74 15                	je     c0008030 <netif_set_down+0x24>
c000801b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000801f:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008022:	83 e0 fe             	and    eax,0xfffffffe
c0008025:	88 c2                	mov    dl,al
c0008027:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000802b:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c000802e:	66 90                	xchg   ax,ax
c0008030:	90                   	nop
c0008031:	c3                   	ret    
c0008032:	66 90                	xchg   ax,ax

c0008034 <netif_remove>:
c0008034:	83 ec 10             	sub    esp,0x10
c0008037:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000803c:	0f 84 92 00 00 00    	je     c00080d4 <netif_remove+0xa0>
c0008042:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008046:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008049:	83 e0 01             	and    eax,0x1
c000804c:	0f b6 c0             	movzx  eax,al
c000804f:	85 c0                	test   eax,eax
c0008051:	74 0d                	je     c0008060 <netif_remove+0x2c>
c0008053:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008057:	e8 b0 ff ff ff       	call   c000800c <netif_set_down>
c000805c:	83 c4 04             	add    esp,0x4
c000805f:	90                   	nop
c0008060:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0008065:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0008069:	75 0d                	jne    c0008078 <netif_remove+0x44>
c000806b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000806f:	8b 00                	mov    eax,DWORD PTR [eax]
c0008071:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0008076:	eb 44                	jmp    c00080bc <netif_remove+0x88>
c0008078:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c000807d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008081:	eb 29                	jmp    c00080ac <netif_remove+0x78>
c0008083:	90                   	nop
c0008084:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008088:	8b 00                	mov    eax,DWORD PTR [eax]
c000808a:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000808e:	75 10                	jne    c00080a0 <netif_remove+0x6c>
c0008090:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008094:	8b 10                	mov    edx,DWORD PTR [eax]
c0008096:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000809a:	89 10                	mov    DWORD PTR [eax],edx
c000809c:	eb 16                	jmp    c00080b4 <netif_remove+0x80>
c000809e:	66 90                	xchg   ax,ax
c00080a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00080a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00080a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00080aa:	66 90                	xchg   ax,ax
c00080ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00080b1:	75 d1                	jne    c0008084 <netif_remove+0x50>
c00080b3:	90                   	nop
c00080b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00080b9:	74 1d                	je     c00080d8 <netif_remove+0xa4>
c00080bb:	90                   	nop
c00080bc:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c00080c1:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00080c5:	75 15                	jne    c00080dc <netif_remove+0xa8>
c00080c7:	6a 00                	push   0x0
c00080c9:	e8 ce fe ff ff       	call   c0007f9c <netif_set_default>
c00080ce:	83 c4 04             	add    esp,0x4
c00080d1:	eb 09                	jmp    c00080dc <netif_remove+0xa8>
c00080d3:	90                   	nop
c00080d4:	90                   	nop
c00080d5:	eb 05                	jmp    c00080dc <netif_remove+0xa8>
c00080d7:	90                   	nop
c00080d8:	90                   	nop
c00080d9:	8d 76 00             	lea    esi,[esi+0x0]
c00080dc:	83 c4 10             	add    esp,0x10
c00080df:	c3                   	ret    

c00080e0 <netif_set_link_up>:
c00080e0:	83 ec 0c             	sub    esp,0xc
c00080e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e7:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00080ea:	0f b6 c0             	movzx  eax,al
c00080ed:	83 e0 10             	and    eax,0x10
c00080f0:	75 4a                	jne    c000813c <netif_set_link_up+0x5c>
c00080f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f6:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00080f9:	83 c8 10             	or     eax,0x10
c00080fc:	88 c2                	mov    dl,al
c00080fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008102:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0008105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008109:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000810c:	0f b6 c0             	movzx  eax,al
c000810f:	83 e0 01             	and    eax,0x1
c0008112:	74 28                	je     c000813c <netif_set_link_up+0x5c>
c0008114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008118:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000811b:	0f b6 c0             	movzx  eax,al
c000811e:	83 e0 20             	and    eax,0x20
c0008121:	74 19                	je     c000813c <netif_set_link_up+0x5c>
c0008123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008127:	83 c0 04             	add    eax,0x4
c000812a:	83 ec 08             	sub    esp,0x8
c000812d:	50                   	push   eax
c000812e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008132:	e8 85 a4 00 00       	call   c00125bc <etharp_request>
c0008137:	83 c4 10             	add    esp,0x10
c000813a:	66 90                	xchg   ax,ax
c000813c:	90                   	nop
c000813d:	83 c4 0c             	add    esp,0xc
c0008140:	c3                   	ret    
c0008141:	8d 76 00             	lea    esi,[esi+0x0]

c0008144 <netif_set_link_down>:
c0008144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008148:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000814b:	0f b6 c0             	movzx  eax,al
c000814e:	83 e0 10             	and    eax,0x10
c0008151:	74 15                	je     c0008168 <netif_set_link_down+0x24>
c0008153:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008157:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000815a:	83 e0 ef             	and    eax,0xffffffef
c000815d:	88 c2                	mov    dl,al
c000815f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008163:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0008166:	66 90                	xchg   ax,ax
c0008168:	90                   	nop
c0008169:	c3                   	ret    
c000816a:	66 90                	xchg   ax,ax

c000816c <pbuf_free_ooseq>:
c000816c:	83 ec 1c             	sub    esp,0x1c
c000816f:	e8 94 7c 01 00       	call   c001fe08 <CLockScheduler>
c0008174:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c000817b:	e8 6c 7c 01 00       	call   c001fdec <CUnlockScheduler>
c0008180:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0008185:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008189:	eb 41                	jmp    c00081cc <pbuf_free_ooseq+0x60>
c000818b:	90                   	nop
c000818c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008190:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c0008196:	85 c0                	test   eax,eax
c0008198:	74 26                	je     c00081c0 <pbuf_free_ooseq+0x54>
c000819a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000819e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c00081a4:	83 ec 0c             	sub    esp,0xc
c00081a7:	50                   	push   eax
c00081a8:	e8 03 20 00 00       	call   c000a1b0 <tcp_segs_free>
c00081ad:	83 c4 10             	add    esp,0x10
c00081b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081b4:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c00081be:	eb 14                	jmp    c00081d4 <pbuf_free_ooseq+0x68>
c00081c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00081c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00081cb:	90                   	nop
c00081cc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00081d1:	75 b9                	jne    c000818c <pbuf_free_ooseq+0x20>
c00081d3:	90                   	nop
c00081d4:	83 c4 1c             	add    esp,0x1c
c00081d7:	c3                   	ret    

c00081d8 <pbuf_pool_is_empty>:
c00081d8:	83 ec 1c             	sub    esp,0x1c
c00081db:	e8 28 7c 01 00       	call   c001fe08 <CLockScheduler>
c00081e0:	a0 99 a8 03 c0       	mov    al,ds:0xc003a899
c00081e5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00081e9:	c6 05 99 a8 03 c0 01 	mov    BYTE PTR ds:0xc003a899,0x1
c00081f0:	e8 f7 7b 01 00       	call   c001fdec <CUnlockScheduler>
c00081f5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00081fa:	85 c0                	test   eax,eax
c00081fc:	75 2e                	jne    c000822c <pbuf_pool_is_empty+0x54>
c00081fe:	83 ec 04             	sub    esp,0x4
c0008201:	6a 00                	push   0x0
c0008203:	6a 00                	push   0x0
c0008205:	68 6c 81 00 c0       	push   0xc000816c
c000820a:	e8 45 8a ff ff       	call   c0000c54 <tcpip_callback_with_block>
c000820f:	83 c4 10             	add    esp,0x10
c0008212:	0f be c0             	movsx  eax,al
c0008215:	85 c0                	test   eax,eax
c0008217:	74 13                	je     c000822c <pbuf_pool_is_empty+0x54>
c0008219:	e8 ea 7b 01 00       	call   c001fe08 <CLockScheduler>
c000821e:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c0008225:	e8 c2 7b 01 00       	call   c001fdec <CUnlockScheduler>
c000822a:	66 90                	xchg   ax,ax
c000822c:	90                   	nop
c000822d:	83 c4 1c             	add    esp,0x1c
c0008230:	c3                   	ret    
c0008231:	8d 76 00             	lea    esi,[esi+0x0]

c0008234 <pbuf_alloced_custom>:
c0008234:	83 ec 2c             	sub    esp,0x2c
c0008237:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000823b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000823f:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0008244:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008249:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c0008250:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0008255:	74 29                	je     c0008280 <pbuf_alloced_custom+0x4c>
c0008257:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000825c:	74 12                	je     c0008270 <pbuf_alloced_custom+0x3c>
c000825e:	83 7c 24 30 02       	cmp    DWORD PTR [esp+0x30],0x2
c0008263:	74 2b                	je     c0008290 <pbuf_alloced_custom+0x5c>
c0008265:	83 7c 24 30 03       	cmp    DWORD PTR [esp+0x30],0x3
c000826a:	74 54                	je     c00082c0 <pbuf_alloced_custom+0x8c>
c000826c:	eb 32                	jmp    c00082a0 <pbuf_alloced_custom+0x6c>
c000826e:	66 90                	xchg   ax,ax
c0008270:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008275:	83 c0 14             	add    eax,0x14
c0008278:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000827d:	8d 76 00             	lea    esi,[esi+0x0]
c0008280:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008285:	83 c0 14             	add    eax,0x14
c0008288:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000828d:	8d 76 00             	lea    esi,[esi+0x0]
c0008290:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008295:	83 c0 0e             	add    eax,0xe
c0008298:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000829d:	eb 25                	jmp    c00082c4 <pbuf_alloced_custom+0x90>
c000829f:	90                   	nop
c00082a0:	83 ec 08             	sub    esp,0x8
c00082a3:	68 4c ff 02 c0       	push   0xc002ff4c
c00082a8:	68 a6 fd 02 c0       	push   0xc002fda6
c00082ad:	e8 66 7b 01 00       	call   c001fe18 <CPrintf>
c00082b2:	83 c4 10             	add    esp,0x10
c00082b5:	b8 00 00 00 00       	mov    eax,0x0
c00082ba:	e9 95 00 00 00       	jmp    c0008354 <pbuf_alloced_custom+0x120>
c00082bf:	90                   	nop
c00082c0:	90                   	nop
c00082c1:	8d 76 00             	lea    esi,[esi+0x0]
c00082c4:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00082c9:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00082ce:	01 c2                	add    edx,eax
c00082d0:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00082d5:	39 c2                	cmp    edx,eax
c00082d7:	7d 07                	jge    c00082e0 <pbuf_alloced_custom+0xac>
c00082d9:	b8 00 00 00 00       	mov    eax,0x0
c00082de:	eb 74                	jmp    c0008354 <pbuf_alloced_custom+0x120>
c00082e0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00082e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00082ea:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00082ef:	74 17                	je     c0008308 <pbuf_alloced_custom+0xd4>
c00082f1:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00082f6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00082fa:	01 c2                	add    edx,eax
c00082fc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008300:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008303:	eb 0f                	jmp    c0008314 <pbuf_alloced_custom+0xe0>
c0008305:	8d 76 00             	lea    esi,[esi+0x0]
c0008308:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000830c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008313:	90                   	nop
c0008314:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008318:	c6 40 0d 02          	mov    BYTE PTR [eax+0xd],0x2
c000831c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0008320:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008324:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008328:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000832c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000832f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0008333:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008337:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000833b:	88 c2                	mov    dl,al
c000833d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008341:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008344:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008348:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c000834e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008352:	66 90                	xchg   ax,ax
c0008354:	83 c4 2c             	add    esp,0x2c
c0008357:	c3                   	ret    

c0008358 <pbuf_header>:
c0008358:	83 ec 2c             	sub    esp,0x2c
c000835b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000835f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008364:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008369:	75 15                	jne    c0008380 <pbuf_header+0x28>
c000836b:	83 ec 08             	sub    esp,0x8
c000836e:	68 d6 01 03 c0       	push   0xc00301d6
c0008373:	68 a6 fd 02 c0       	push   0xc002fda6
c0008378:	e8 9b 7a 01 00       	call   c001fe18 <CPrintf>
c000837d:	83 c4 10             	add    esp,0x10
c0008380:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008385:	85 c0                	test   eax,eax
c0008387:	74 07                	je     c0008390 <pbuf_header+0x38>
c0008389:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000838e:	75 08                	jne    c0008398 <pbuf_header+0x40>
c0008390:	b0 00                	mov    al,0x0
c0008392:	e9 59 01 00 00       	jmp    c00084f0 <pbuf_header+0x198>
c0008397:	90                   	nop
c0008398:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c000839d:	85 c0                	test   eax,eax
c000839f:	79 3b                	jns    c00083dc <pbuf_header+0x84>
c00083a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a5:	f7 d8                	neg    eax
c00083a7:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00083ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00083b0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00083b4:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00083b9:	0f b7 c0             	movzx  eax,ax
c00083bc:	39 c2                	cmp    edx,eax
c00083be:	76 28                	jbe    c00083e8 <pbuf_header+0x90>
c00083c0:	83 ec 08             	sub    esp,0x8
c00083c3:	68 27 01 03 c0       	push   0xc0030127
c00083c8:	68 a6 fd 02 c0       	push   0xc002fda6
c00083cd:	e8 46 7a 01 00       	call   c001fe18 <CPrintf>
c00083d2:	83 c4 10             	add    esp,0x10
c00083d5:	b0 01                	mov    al,0x1
c00083d7:	e9 14 01 00 00       	jmp    c00084f0 <pbuf_header+0x198>
c00083dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083e0:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00083e5:	8d 76 00             	lea    esi,[esi+0x0]
c00083e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00083ec:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083ef:	0f b6 c0             	movzx  eax,al
c00083f2:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c00083f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00083fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00083fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008402:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008407:	85 c0                	test   eax,eax
c0008409:	74 0d                	je     c0008418 <pbuf_header+0xc0>
c000840b:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008410:	83 f8 03             	cmp    eax,0x3
c0008413:	75 3f                	jne    c0008454 <pbuf_header+0xfc>
c0008415:	8d 76 00             	lea    esi,[esi+0x0]
c0008418:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000841c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000841f:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c0008424:	f7 da                	neg    edx
c0008426:	01 c2                	add    edx,eax
c0008428:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000842c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000842f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008433:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008436:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000843a:	83 c2 10             	add    edx,0x10
c000843d:	39 d0                	cmp    eax,edx
c000843f:	73 7f                	jae    c00084c0 <pbuf_header+0x168>
c0008441:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008445:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008449:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000844c:	b0 01                	mov    al,0x1
c000844e:	e9 9d 00 00 00       	jmp    c00084f0 <pbuf_header+0x198>
c0008453:	90                   	nop
c0008454:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008459:	83 f8 02             	cmp    eax,0x2
c000845c:	74 0a                	je     c0008468 <pbuf_header+0x110>
c000845e:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008463:	83 f8 01             	cmp    eax,0x1
c0008466:	75 3c                	jne    c00084a4 <pbuf_header+0x14c>
c0008468:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c000846d:	85 c0                	test   eax,eax
c000846f:	79 2f                	jns    c00084a0 <pbuf_header+0x148>
c0008471:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008475:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008479:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000847e:	0f b7 c0             	movzx  eax,ax
c0008481:	39 c2                	cmp    edx,eax
c0008483:	77 1b                	ja     c00084a0 <pbuf_header+0x148>
c0008485:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008489:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000848c:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c0008491:	f7 da                	neg    edx
c0008493:	01 c2                	add    edx,eax
c0008495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008499:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000849c:	eb 22                	jmp    c00084c0 <pbuf_header+0x168>
c000849e:	66 90                	xchg   ax,ax
c00084a0:	b0 01                	mov    al,0x1
c00084a2:	eb 4c                	jmp    c00084f0 <pbuf_header+0x198>
c00084a4:	83 ec 08             	sub    esp,0x8
c00084a7:	68 45 01 03 c0       	push   0xc0030145
c00084ac:	68 a6 fd 02 c0       	push   0xc002fda6
c00084b1:	e8 62 79 01 00       	call   c001fe18 <CPrintf>
c00084b6:	83 c4 10             	add    esp,0x10
c00084b9:	b0 01                	mov    al,0x1
c00084bb:	eb 33                	jmp    c00084f0 <pbuf_header+0x198>
c00084bd:	8d 76 00             	lea    esi,[esi+0x0]
c00084c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084c4:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00084c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084cc:	01 d0                	add    eax,edx
c00084ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084d2:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00084d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084da:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00084dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084e1:	01 d0                	add    eax,edx
c00084e3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084e7:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c00084eb:	b0 00                	mov    al,0x0
c00084ed:	8d 76 00             	lea    esi,[esi+0x0]
c00084f0:	83 c4 2c             	add    esp,0x2c
c00084f3:	c3                   	ret    

c00084f4 <pbuf_free>:
c00084f4:	83 ec 1c             	sub    esp,0x1c
c00084f7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00084fc:	75 26                	jne    c0008524 <pbuf_free+0x30>
c00084fe:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008503:	75 17                	jne    c000851c <pbuf_free+0x28>
c0008505:	83 ec 08             	sub    esp,0x8
c0008508:	68 d6 01 03 c0       	push   0xc00301d6
c000850d:	68 a6 fd 02 c0       	push   0xc002fda6
c0008512:	e8 01 79 01 00       	call   c001fe18 <CPrintf>
c0008517:	83 c4 10             	add    esp,0x10
c000851a:	66 90                	xchg   ax,ax
c000851c:	b0 00                	mov    al,0x0
c000851e:	e9 a5 01 00 00       	jmp    c00086c8 <pbuf_free+0x1d4>
c0008523:	90                   	nop
c0008524:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008528:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000852b:	0f b6 c0             	movzx  eax,al
c000852e:	85 c0                	test   eax,eax
c0008530:	74 42                	je     c0008574 <pbuf_free+0x80>
c0008532:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008536:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008539:	0f b6 c0             	movzx  eax,al
c000853c:	83 f8 01             	cmp    eax,0x1
c000853f:	74 33                	je     c0008574 <pbuf_free+0x80>
c0008541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008545:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008548:	0f b6 c0             	movzx  eax,al
c000854b:	83 f8 02             	cmp    eax,0x2
c000854e:	74 24                	je     c0008574 <pbuf_free+0x80>
c0008550:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008554:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008557:	0f b6 c0             	movzx  eax,al
c000855a:	83 f8 03             	cmp    eax,0x3
c000855d:	74 15                	je     c0008574 <pbuf_free+0x80>
c000855f:	83 ec 08             	sub    esp,0x8
c0008562:	68 53 01 03 c0       	push   0xc0030153
c0008567:	68 a6 fd 02 c0       	push   0xc002fda6
c000856c:	e8 a7 78 01 00       	call   c001fe18 <CPrintf>
c0008571:	83 c4 10             	add    esp,0x10
c0008574:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008579:	e9 3a 01 00 00       	jmp    c00086b8 <pbuf_free+0x1c4>
c000857e:	66 90                	xchg   ax,ax
c0008580:	e8 83 78 01 00       	call   c001fe08 <CLockScheduler>
c0008585:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008589:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000858d:	0f b7 c0             	movzx  eax,ax
c0008590:	85 c0                	test   eax,eax
c0008592:	75 18                	jne    c00085ac <pbuf_free+0xb8>
c0008594:	83 ec 08             	sub    esp,0x8
c0008597:	68 68 01 03 c0       	push   0xc0030168
c000859c:	68 a6 fd 02 c0       	push   0xc002fda6
c00085a1:	e8 72 78 01 00       	call   c001fe18 <CPrintf>
c00085a6:	83 c4 10             	add    esp,0x10
c00085a9:	8d 76 00             	lea    esi,[esi+0x0]
c00085ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085b0:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00085b4:	83 e8 01             	sub    eax,0x1
c00085b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00085bb:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c00085bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085c3:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00085c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00085cc:	e8 1b 78 01 00       	call   c001fdec <CUnlockScheduler>
c00085d1:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00085d6:	85 c0                	test   eax,eax
c00085d8:	0f 85 d2 00 00 00    	jne    c00086b0 <pbuf_free+0x1bc>
c00085de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00085e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085ec:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00085ef:	0f b6 c0             	movzx  eax,al
c00085f2:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085fb:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00085fe:	0f b6 c0             	movzx  eax,al
c0008601:	83 e0 02             	and    eax,0x2
c0008604:	74 3a                	je     c0008640 <pbuf_free+0x14c>
c0008606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000860a:	89 04 24             	mov    DWORD PTR [esp],eax
c000860d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008610:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008613:	85 c0                	test   eax,eax
c0008615:	75 15                	jne    c000862c <pbuf_free+0x138>
c0008617:	83 ec 08             	sub    esp,0x8
c000861a:	68 70 ff 02 c0       	push   0xc002ff70
c000861f:	68 a6 fd 02 c0       	push   0xc002fda6
c0008624:	e8 ef 77 01 00       	call   c001fe18 <CPrintf>
c0008629:	83 c4 10             	add    esp,0x10
c000862c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000862f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008632:	83 ec 0c             	sub    esp,0xc
c0008635:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008639:	ff d0                	call   eax
c000863b:	83 c4 10             	add    esp,0x10
c000863e:	eb 58                	jmp    c0008698 <pbuf_free+0x1a4>
c0008640:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008645:	83 f8 03             	cmp    eax,0x3
c0008648:	75 16                	jne    c0008660 <pbuf_free+0x16c>
c000864a:	83 ec 08             	sub    esp,0x8
c000864d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008651:	6a 0d                	push   0xd
c0008653:	e8 e0 f5 ff ff       	call   c0007c38 <memp_free>
c0008658:	83 c4 10             	add    esp,0x10
c000865b:	eb 3b                	jmp    c0008698 <pbuf_free+0x1a4>
c000865d:	8d 76 00             	lea    esi,[esi+0x0]
c0008660:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008665:	83 f8 01             	cmp    eax,0x1
c0008668:	74 0a                	je     c0008674 <pbuf_free+0x180>
c000866a:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000866f:	83 f8 02             	cmp    eax,0x2
c0008672:	75 14                	jne    c0008688 <pbuf_free+0x194>
c0008674:	83 ec 08             	sub    esp,0x8
c0008677:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000867b:	6a 0c                	push   0xc
c000867d:	e8 b6 f5 ff ff       	call   c0007c38 <memp_free>
c0008682:	83 c4 10             	add    esp,0x10
c0008685:	eb 11                	jmp    c0008698 <pbuf_free+0x1a4>
c0008687:	90                   	nop
c0008688:	83 ec 0c             	sub    esp,0xc
c000868b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000868f:	e8 80 eb ff ff       	call   c0007214 <mem_free>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	90                   	nop
c0008698:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000869c:	83 c0 01             	add    eax,0x1
c000869f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00086a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00086a7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086ab:	eb 0b                	jmp    c00086b8 <pbuf_free+0x1c4>
c00086ad:	8d 76 00             	lea    esi,[esi+0x0]
c00086b0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00086b8:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00086bd:	0f 85 bd fe ff ff    	jne    c0008580 <pbuf_free+0x8c>
c00086c3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00086c7:	90                   	nop
c00086c8:	83 c4 1c             	add    esp,0x1c
c00086cb:	c3                   	ret    

c00086cc <pbuf_alloc>:
c00086cc:	83 ec 3c             	sub    esp,0x3c
c00086cf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00086d3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00086d8:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c00086df:	83 7c 24 40 01       	cmp    DWORD PTR [esp+0x40],0x1
c00086e4:	74 2a                	je     c0008710 <pbuf_alloc+0x44>
c00086e6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00086eb:	74 13                	je     c0008700 <pbuf_alloc+0x34>
c00086ed:	83 7c 24 40 02       	cmp    DWORD PTR [esp+0x40],0x2
c00086f2:	74 2c                	je     c0008720 <pbuf_alloc+0x54>
c00086f4:	83 7c 24 40 03       	cmp    DWORD PTR [esp+0x40],0x3
c00086f9:	74 55                	je     c0008750 <pbuf_alloc+0x84>
c00086fb:	eb 33                	jmp    c0008730 <pbuf_alloc+0x64>
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]
c0008700:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008705:	83 c0 14             	add    eax,0x14
c0008708:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000870d:	8d 76 00             	lea    esi,[esi+0x0]
c0008710:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008715:	83 c0 14             	add    eax,0x14
c0008718:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000871d:	8d 76 00             	lea    esi,[esi+0x0]
c0008720:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008725:	83 c0 0e             	add    eax,0xe
c0008728:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000872d:	eb 25                	jmp    c0008754 <pbuf_alloc+0x88>
c000872f:	90                   	nop
c0008730:	83 ec 08             	sub    esp,0x8
c0008733:	68 7e 01 03 c0       	push   0xc003017e
c0008738:	68 a6 fd 02 c0       	push   0xc002fda6
c000873d:	e8 d6 76 01 00       	call   c001fe18 <CPrintf>
c0008742:	83 c4 10             	add    esp,0x10
c0008745:	b8 00 00 00 00       	mov    eax,0x0
c000874a:	e9 71 03 00 00       	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c000874f:	90                   	nop
c0008750:	90                   	nop
c0008751:	8d 76 00             	lea    esi,[esi+0x0]
c0008754:	83 7c 24 48 02       	cmp    DWORD PTR [esp+0x48],0x2
c0008759:	77 11                	ja     c000876c <pbuf_alloc+0xa0>
c000875b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0008760:	0f 85 c6 02 00 00    	jne    c0008a2c <pbuf_alloc+0x360>
c0008766:	e9 41 02 00 00       	jmp    c00089ac <pbuf_alloc+0x2e0>
c000876b:	90                   	nop
c000876c:	83 7c 24 48 03       	cmp    DWORD PTR [esp+0x48],0x3
c0008771:	0f 85 15 03 00 00    	jne    c0008a8c <pbuf_alloc+0x3c0>
c0008777:	83 ec 0c             	sub    esp,0xc
c000877a:	6a 0d                	push   0xd
c000877c:	e8 8b f3 ff ff       	call   c0007b0c <memp_malloc>
c0008781:	83 c4 10             	add    esp,0x10
c0008784:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008788:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000878d:	75 11                	jne    c00087a0 <pbuf_alloc+0xd4>
c000878f:	e8 44 fa ff ff       	call   c00081d8 <pbuf_pool_is_empty>
c0008794:	b8 00 00 00 00       	mov    eax,0x0
c0008799:	e9 22 03 00 00       	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c000879e:	66 90                	xchg   ax,ax
c00087a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00087a4:	88 c2                	mov    dl,al
c00087a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087aa:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00087ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00087b7:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00087bc:	8d 50 10             	lea    edx,[eax+0x10]
c00087bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087c3:	01 c2                	add    edx,eax
c00087c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087c9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00087cc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00087d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d4:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c00087d8:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00087dd:	ba 4e 02 00 00       	mov    edx,0x24e
c00087e2:	29 c2                	sub    edx,eax
c00087e4:	89 d0                	mov    eax,edx
c00087e6:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00087eb:	39 d0                	cmp    eax,edx
c00087ed:	7e 05                	jle    c00087f4 <pbuf_alloc+0x128>
c00087ef:	89 d0                	mov    eax,edx
c00087f1:	8d 76 00             	lea    esi,[esi+0x0]
c00087f4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00087f8:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00087fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008800:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008803:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008807:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000880b:	0f b7 c0             	movzx  eax,ax
c000880e:	01 c2                	add    edx,eax
c0008810:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008814:	05 5e 02 00 00       	add    eax,0x25e
c0008819:	39 c2                	cmp    edx,eax
c000881b:	76 17                	jbe    c0008834 <pbuf_alloc+0x168>
c000881d:	83 ec 08             	sub    esp,0x8
c0008820:	68 94 ff 02 c0       	push   0xc002ff94
c0008825:	68 a6 fd 02 c0       	push   0xc002fda6
c000882a:	e8 e9 75 01 00       	call   c001fe18 <CPrintf>
c000882f:	83 c4 10             	add    esp,0x10
c0008832:	66 90                	xchg   ax,ax
c0008834:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008839:	ba 4e 02 00 00       	mov    edx,0x24e
c000883e:	29 c2                	sub    edx,eax
c0008840:	89 d0                	mov    eax,edx
c0008842:	85 c0                	test   eax,eax
c0008844:	7f 16                	jg     c000885c <pbuf_alloc+0x190>
c0008846:	83 ec 08             	sub    esp,0x8
c0008849:	68 c8 ff 02 c0       	push   0xc002ffc8
c000884e:	68 a6 fd 02 c0       	push   0xc002fda6
c0008853:	e8 c0 75 01 00       	call   c001fe18 <CPrintf>
c0008858:	83 c4 10             	add    esp,0x10
c000885b:	90                   	nop
c000885c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008860:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008866:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000886a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000886e:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008873:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008877:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000887b:	0f b7 c0             	movzx  eax,ax
c000887e:	29 c2                	sub    edx,eax
c0008880:	89 d0                	mov    eax,edx
c0008882:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008886:	e9 11 01 00 00       	jmp    c000899c <pbuf_alloc+0x2d0>
c000888b:	90                   	nop
c000888c:	83 ec 0c             	sub    esp,0xc
c000888f:	6a 0d                	push   0xd
c0008891:	e8 76 f2 ff ff       	call   c0007b0c <memp_malloc>
c0008896:	83 c4 10             	add    esp,0x10
c0008899:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000889d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00088a2:	75 20                	jne    c00088c4 <pbuf_alloc+0x1f8>
c00088a4:	e8 2f f9 ff ff       	call   c00081d8 <pbuf_pool_is_empty>
c00088a9:	83 ec 0c             	sub    esp,0xc
c00088ac:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00088b0:	e8 3f fc ff ff       	call   c00084f4 <pbuf_free>
c00088b5:	83 c4 10             	add    esp,0x10
c00088b8:	b8 00 00 00 00       	mov    eax,0x0
c00088bd:	e9 fe 01 00 00       	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c00088c2:	66 90                	xchg   ax,ax
c00088c4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00088c8:	88 c2                	mov    dl,al
c00088ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088ce:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00088d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088d5:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c00088d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00088e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00088e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00088eb:	89 10                	mov    DWORD PTR [eax],edx
c00088ed:	81 7c 24 20 fe ff 00 00 	cmp    DWORD PTR [esp+0x20],0xfffe
c00088f5:	7e 15                	jle    c000890c <pbuf_alloc+0x240>
c00088f7:	83 ec 08             	sub    esp,0x8
c00088fa:	68 99 01 03 c0       	push   0xc0030199
c00088ff:	68 a6 fd 02 c0       	push   0xc002fda6
c0008904:	e8 0f 75 01 00       	call   c001fe18 <CPrintf>
c0008909:	83 c4 10             	add    esp,0x10
c000890c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008910:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008914:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000891c:	0f b7 d0             	movzx  edx,ax
c000891f:	81 fa 4e 02 00 00    	cmp    edx,0x24e
c0008925:	76 05                	jbe    c000892c <pbuf_alloc+0x260>
c0008927:	b8 4e 02 00 00       	mov    eax,0x24e
c000892c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008930:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008934:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008938:	8d 50 10             	lea    edx,[eax+0x10]
c000893b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000893f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008946:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008949:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000894d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008951:	0f b7 c0             	movzx  eax,ax
c0008954:	01 c2                	add    edx,eax
c0008956:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000895a:	05 5e 02 00 00       	add    eax,0x25e
c000895f:	39 c2                	cmp    edx,eax
c0008961:	76 15                	jbe    c0008978 <pbuf_alloc+0x2ac>
c0008963:	83 ec 08             	sub    esp,0x8
c0008966:	68 94 ff 02 c0       	push   0xc002ff94
c000896b:	68 a6 fd 02 c0       	push   0xc002fda6
c0008970:	e8 a3 74 01 00       	call   c001fe18 <CPrintf>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000897c:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008982:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008986:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000898a:	0f b7 c0             	movzx  eax,ax
c000898d:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c0008991:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008995:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0008999:	8d 76 00             	lea    esi,[esi+0x0]
c000899c:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00089a1:	0f 8f e5 fe ff ff    	jg     c000888c <pbuf_alloc+0x1c0>
c00089a7:	e9 fc 00 00 00       	jmp    c0008aa8 <pbuf_alloc+0x3dc>
c00089ac:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c00089b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00089b5:	01 d0                	add    eax,edx
c00089b7:	83 c0 10             	add    eax,0x10
c00089ba:	0f b7 c0             	movzx  eax,ax
c00089bd:	83 ec 0c             	sub    esp,0xc
c00089c0:	50                   	push   eax
c00089c1:	e8 82 ec ff ff       	call   c0007648 <mem_malloc>
c00089c6:	83 c4 10             	add    esp,0x10
c00089c9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00089cd:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00089d2:	75 0c                	jne    c00089e0 <pbuf_alloc+0x314>
c00089d4:	b8 00 00 00 00       	mov    eax,0x0
c00089d9:	e9 e2 00 00 00       	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c00089de:	66 90                	xchg   ax,ax
c00089e0:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00089e5:	8d 50 10             	lea    edx,[eax+0x10]
c00089e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00089ec:	01 c2                	add    edx,eax
c00089ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00089f2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00089f5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00089f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00089fd:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008a01:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a05:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008a08:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008a0c:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008a10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a1a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008a1e:	88 c2                	mov    dl,al
c0008a20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a24:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008a27:	eb 7f                	jmp    c0008aa8 <pbuf_alloc+0x3dc>
c0008a29:	8d 76 00             	lea    esi,[esi+0x0]
c0008a2c:	83 ec 0c             	sub    esp,0xc
c0008a2f:	6a 0c                	push   0xc
c0008a31:	e8 d6 f0 ff ff       	call   c0007b0c <memp_malloc>
c0008a36:	83 c4 10             	add    esp,0x10
c0008a39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008a3d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0008a42:	75 08                	jne    c0008a4c <pbuf_alloc+0x380>
c0008a44:	b8 00 00 00 00       	mov    eax,0x0
c0008a49:	eb 75                	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c0008a4b:	90                   	nop
c0008a4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008a57:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008a5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a5f:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008a63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008a6a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008a6e:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008a72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a76:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a7c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008a80:	88 c2                	mov    dl,al
c0008a82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a86:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008a89:	eb 1d                	jmp    c0008aa8 <pbuf_alloc+0x3dc>
c0008a8b:	90                   	nop
c0008a8c:	83 ec 08             	sub    esp,0x8
c0008a8f:	68 ad 01 03 c0       	push   0xc00301ad
c0008a94:	68 a6 fd 02 c0       	push   0xc002fda6
c0008a99:	e8 7a 73 01 00       	call   c001fe18 <CPrintf>
c0008a9e:	83 c4 10             	add    esp,0x10
c0008aa1:	b8 00 00 00 00       	mov    eax,0x0
c0008aa6:	eb 18                	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c0008aa8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008aac:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008ab2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ab6:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c0008aba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008abe:	66 90                	xchg   ax,ax
c0008ac0:	83 c4 3c             	add    esp,0x3c
c0008ac3:	c3                   	ret    

c0008ac4 <pbuf_realloc>:
c0008ac4:	83 ec 2c             	sub    esp,0x2c
c0008ac7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008acb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008ad0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008ad5:	75 15                	jne    c0008aec <pbuf_realloc+0x28>
c0008ad7:	83 ec 08             	sub    esp,0x8
c0008ada:	68 c8 01 03 c0       	push   0xc00301c8
c0008adf:	68 a6 fd 02 c0       	push   0xc002fda6
c0008ae4:	e8 2f 73 01 00       	call   c001fe18 <CPrintf>
c0008ae9:	83 c4 10             	add    esp,0x10
c0008aec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008af0:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008af3:	0f b6 c0             	movzx  eax,al
c0008af6:	83 f8 03             	cmp    eax,0x3
c0008af9:	74 41                	je     c0008b3c <pbuf_realloc+0x78>
c0008afb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008aff:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b02:	0f b6 c0             	movzx  eax,al
c0008b05:	83 f8 01             	cmp    eax,0x1
c0008b08:	74 32                	je     c0008b3c <pbuf_realloc+0x78>
c0008b0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0e:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b11:	0f b6 c0             	movzx  eax,al
c0008b14:	85 c0                	test   eax,eax
c0008b16:	74 24                	je     c0008b3c <pbuf_realloc+0x78>
c0008b18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b1c:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b1f:	0f b6 c0             	movzx  eax,al
c0008b22:	83 f8 02             	cmp    eax,0x2
c0008b25:	74 15                	je     c0008b3c <pbuf_realloc+0x78>
c0008b27:	83 ec 08             	sub    esp,0x8
c0008b2a:	68 e0 01 03 c0       	push   0xc00301e0
c0008b2f:	68 a6 fd 02 c0       	push   0xc002fda6
c0008b34:	e8 df 72 01 00       	call   c001fe18 <CPrintf>
c0008b39:	83 c4 10             	add    esp,0x10
c0008b3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b40:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008b43:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008b48:	0f b7 c0             	movzx  eax,ax
c0008b4b:	39 c2                	cmp    edx,eax
c0008b4d:	0f 83 6d 01 00 00    	jae    c0008cc0 <pbuf_realloc+0x1fc>
c0008b53:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008b58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008b5f:	0f b7 c0             	movzx  eax,ax
c0008b62:	29 c2                	sub    edx,eax
c0008b64:	89 d0                	mov    eax,edx
c0008b66:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008b6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b6e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008b73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b77:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b7b:	eb 77                	jmp    c0008bf4 <pbuf_realloc+0x130>
c0008b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0008b80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b84:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008b88:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0008b8d:	89 d1                	mov    ecx,edx
c0008b8f:	29 c1                	sub    ecx,eax
c0008b91:	89 c8                	mov    eax,ecx
c0008b93:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008b98:	81 7c 24 14 fe ff 00 00 	cmp    DWORD PTR [esp+0x14],0xfffe
c0008ba0:	7e 16                	jle    c0008bb8 <pbuf_realloc+0xf4>
c0008ba2:	83 ec 08             	sub    esp,0x8
c0008ba5:	68 fb 01 03 c0       	push   0xc00301fb
c0008baa:	68 a6 fd 02 c0       	push   0xc002fda6
c0008baf:	e8 64 72 01 00       	call   c001fe18 <CPrintf>
c0008bb4:	83 c4 10             	add    esp,0x10
c0008bb7:	90                   	nop
c0008bb8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008bbf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008bc3:	01 d0                	add    eax,edx
c0008bc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008bc9:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008bcd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bd3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bd7:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008bdc:	75 16                	jne    c0008bf4 <pbuf_realloc+0x130>
c0008bde:	83 ec 08             	sub    esp,0x8
c0008be1:	68 0c 02 03 c0       	push   0xc003020c
c0008be6:	68 a6 fd 02 c0       	push   0xc002fda6
c0008beb:	e8 28 72 01 00       	call   c001fe18 <CPrintf>
c0008bf0:	83 c4 10             	add    esp,0x10
c0008bf3:	90                   	nop
c0008bf4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bf8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008bfc:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008c01:	0f b7 c0             	movzx  eax,ax
c0008c04:	39 c2                	cmp    edx,eax
c0008c06:	0f 87 74 ff ff ff    	ja     c0008b80 <pbuf_realloc+0xbc>
c0008c0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c10:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008c13:	0f b6 c0             	movzx  eax,al
c0008c16:	85 c0                	test   eax,eax
c0008c18:	75 5e                	jne    c0008c78 <pbuf_realloc+0x1b4>
c0008c1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c1e:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c22:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008c27:	0f b7 c0             	movzx  eax,ax
c0008c2a:	39 c2                	cmp    edx,eax
c0008c2c:	74 4a                	je     c0008c78 <pbuf_realloc+0x1b4>
c0008c2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c35:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0008c39:	89 c2                	mov    edx,eax
c0008c3b:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008c40:	01 d0                	add    eax,edx
c0008c42:	0f b7 c0             	movzx  eax,ax
c0008c45:	83 ec 08             	sub    esp,0x8
c0008c48:	50                   	push   eax
c0008c49:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008c4d:	e8 e6 e6 ff ff       	call   c0007338 <mem_trim>
c0008c52:	83 c4 10             	add    esp,0x10
c0008c55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008c59:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008c5e:	75 18                	jne    c0008c78 <pbuf_realloc+0x1b4>
c0008c60:	83 ec 08             	sub    esp,0x8
c0008c63:	68 24 02 03 c0       	push   0xc0030224
c0008c68:	68 a6 fd 02 c0       	push   0xc002fda6
c0008c6d:	e8 a6 71 01 00       	call   c001fe18 <CPrintf>
c0008c72:	83 c4 10             	add    esp,0x10
c0008c75:	8d 76 00             	lea    esi,[esi+0x0]
c0008c78:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008c7c:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008c81:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008c85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c89:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c8d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008c91:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008c95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c99:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c9b:	85 c0                	test   eax,eax
c0008c9d:	74 15                	je     c0008cb4 <pbuf_realloc+0x1f0>
c0008c9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ca3:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ca5:	83 ec 0c             	sub    esp,0xc
c0008ca8:	50                   	push   eax
c0008ca9:	e8 46 f8 ff ff       	call   c00084f4 <pbuf_free>
c0008cae:	83 c4 10             	add    esp,0x10
c0008cb1:	8d 76 00             	lea    esi,[esi+0x0]
c0008cb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008cb8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008cbe:	eb 04                	jmp    c0008cc4 <pbuf_realloc+0x200>
c0008cc0:	90                   	nop
c0008cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0008cc4:	83 c4 2c             	add    esp,0x2c
c0008cc7:	c3                   	ret    

c0008cc8 <pbuf_clen>:
c0008cc8:	83 ec 10             	sub    esp,0x10
c0008ccb:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008cd0:	eb 1a                	jmp    c0008cec <pbuf_clen+0x24>
c0008cd2:	66 90                	xchg   ax,ax
c0008cd4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008cd8:	83 c0 01             	add    eax,0x1
c0008cdb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008cdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008ce3:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ce5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0008cec:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008cf1:	75 e1                	jne    c0008cd4 <pbuf_clen+0xc>
c0008cf3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008cf7:	83 c4 10             	add    esp,0x10
c0008cfa:	c3                   	ret    
c0008cfb:	90                   	nop

c0008cfc <pbuf_ref>:
c0008cfc:	83 ec 0c             	sub    esp,0xc
c0008cff:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0008d04:	74 1e                	je     c0008d24 <pbuf_ref+0x28>
c0008d06:	e8 fd 70 01 00       	call   c001fe08 <CLockScheduler>
c0008d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0f:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008d13:	83 c0 01             	add    eax,0x1
c0008d16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008d1a:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c0008d1e:	e8 c9 70 01 00       	call   c001fdec <CUnlockScheduler>
c0008d23:	90                   	nop
c0008d24:	90                   	nop
c0008d25:	83 c4 0c             	add    esp,0xc
c0008d28:	c3                   	ret    
c0008d29:	8d 76 00             	lea    esi,[esi+0x0]

c0008d2c <pbuf_cat>:
c0008d2c:	83 ec 1c             	sub    esp,0x1c
c0008d2f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008d34:	74 0a                	je     c0008d40 <pbuf_cat+0x14>
c0008d36:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008d3b:	75 1f                	jne    c0008d5c <pbuf_cat+0x30>
c0008d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0008d40:	83 ec 08             	sub    esp,0x8
c0008d43:	68 fc ff 02 c0       	push   0xc002fffc
c0008d48:	68 a6 fd 02 c0       	push   0xc002fda6
c0008d4d:	e8 c6 70 01 00       	call   c001fe18 <CPrintf>
c0008d52:	83 c4 10             	add    esp,0x10
c0008d55:	e9 ae 00 00 00       	jmp    c0008e08 <pbuf_cat+0xdc>
c0008d5a:	66 90                	xchg   ax,ax
c0008d5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008d64:	eb 26                	jmp    c0008d8c <pbuf_cat+0x60>
c0008d66:	66 90                	xchg   ax,ax
c0008d68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d6c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d73:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008d76:	01 d0                	add    eax,edx
c0008d78:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008d7c:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008d80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d84:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008d8a:	66 90                	xchg   ax,ax
c0008d8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d90:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d92:	85 c0                	test   eax,eax
c0008d94:	75 d2                	jne    c0008d68 <pbuf_cat+0x3c>
c0008d96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008da1:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008da5:	0f b7 d2             	movzx  edx,dx
c0008da8:	0f b7 c0             	movzx  eax,ax
c0008dab:	39 c2                	cmp    edx,eax
c0008dad:	74 15                	je     c0008dc4 <pbuf_cat+0x98>
c0008daf:	83 ec 08             	sub    esp,0x8
c0008db2:	68 34 00 03 c0       	push   0xc0030034
c0008db7:	68 a6 fd 02 c0       	push   0xc002fda6
c0008dbc:	e8 57 70 01 00       	call   c001fe18 <CPrintf>
c0008dc1:	83 c4 10             	add    esp,0x10
c0008dc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008dc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0008dca:	85 c0                	test   eax,eax
c0008dcc:	74 16                	je     c0008de4 <pbuf_cat+0xb8>
c0008dce:	83 ec 08             	sub    esp,0x8
c0008dd1:	68 40 02 03 c0       	push   0xc0030240
c0008dd6:	68 a6 fd 02 c0       	push   0xc002fda6
c0008ddb:	e8 38 70 01 00       	call   c001fe18 <CPrintf>
c0008de0:	83 c4 10             	add    esp,0x10
c0008de3:	90                   	nop
c0008de4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008de8:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008deb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008def:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008df2:	01 d0                	add    eax,edx
c0008df4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008df8:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008dfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008e00:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e04:	89 10                	mov    DWORD PTR [eax],edx
c0008e06:	66 90                	xchg   ax,ax
c0008e08:	83 c4 1c             	add    esp,0x1c
c0008e0b:	c3                   	ret    

c0008e0c <pbuf_chain>:
c0008e0c:	83 ec 0c             	sub    esp,0xc
c0008e0f:	83 ec 08             	sub    esp,0x8
c0008e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e1a:	e8 0d ff ff ff       	call   c0008d2c <pbuf_cat>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	83 ec 0c             	sub    esp,0xc
c0008e25:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e29:	e8 ce fe ff ff       	call   c0008cfc <pbuf_ref>
c0008e2e:	83 c4 10             	add    esp,0x10
c0008e31:	90                   	nop
c0008e32:	83 c4 0c             	add    esp,0xc
c0008e35:	c3                   	ret    
c0008e36:	66 90                	xchg   ax,ax

c0008e38 <pbuf_dechain>:
c0008e38:	83 ec 1c             	sub    esp,0x1c
c0008e3b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0008e40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e44:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e4a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008e4f:	0f 84 8b 00 00 00    	je     c0008ee0 <pbuf_dechain+0xa8>
c0008e55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008e59:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e5c:	0f b7 d0             	movzx  edx,ax
c0008e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e63:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e66:	0f b7 c8             	movzx  ecx,ax
c0008e69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e6d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e71:	0f b7 c0             	movzx  eax,ax
c0008e74:	29 c1                	sub    ecx,eax
c0008e76:	89 c8                	mov    eax,ecx
c0008e78:	39 c2                	cmp    edx,eax
c0008e7a:	74 18                	je     c0008e94 <pbuf_dechain+0x5c>
c0008e7c:	83 ec 08             	sub    esp,0x8
c0008e7f:	68 64 00 03 c0       	push   0xc0030064
c0008e84:	68 a6 fd 02 c0       	push   0xc002fda6
c0008e89:	e8 8a 6f 01 00       	call   c001fe18 <CPrintf>
c0008e8e:	83 c4 10             	add    esp,0x10
c0008e91:	8d 76 00             	lea    esi,[esi+0x0]
c0008e94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008e9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e9f:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ea3:	89 d1                	mov    ecx,edx
c0008ea5:	29 c1                	sub    ecx,eax
c0008ea7:	89 c8                	mov    eax,ecx
c0008ea9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008ead:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008eb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008eb5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008ebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ebf:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ec3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008ec7:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008ecb:	83 ec 0c             	sub    esp,0xc
c0008ece:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed2:	e8 1d f6 ff ff       	call   c00084f4 <pbuf_free>
c0008ed7:	83 c4 10             	add    esp,0x10
c0008eda:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008ede:	66 90                	xchg   ax,ax
c0008ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ee4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008ee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008eeb:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008eef:	0f b7 d2             	movzx  edx,dx
c0008ef2:	0f b7 c0             	movzx  eax,ax
c0008ef5:	39 c2                	cmp    edx,eax
c0008ef7:	74 17                	je     c0008f10 <pbuf_dechain+0xd8>
c0008ef9:	83 ec 08             	sub    esp,0x8
c0008efc:	68 50 02 03 c0       	push   0xc0030250
c0008f01:	68 a6 fd 02 c0       	push   0xc002fda6
c0008f06:	e8 0d 6f 01 00       	call   c001fe18 <CPrintf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	66 90                	xchg   ax,ax
c0008f10:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008f15:	85 c0                	test   eax,eax
c0008f17:	75 07                	jne    c0008f20 <pbuf_dechain+0xe8>
c0008f19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008f1d:	eb 09                	jmp    c0008f28 <pbuf_dechain+0xf0>
c0008f1f:	90                   	nop
c0008f20:	b8 00 00 00 00       	mov    eax,0x0
c0008f25:	8d 76 00             	lea    esi,[esi+0x0]
c0008f28:	83 c4 1c             	add    esp,0x1c
c0008f2b:	c3                   	ret    

c0008f2c <pbuf_copy>:
c0008f2c:	53                   	push   ebx
c0008f2d:	83 ec 18             	sub    esp,0x18
c0008f30:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008f37:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008f3e:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008f43:	74 1f                	je     c0008f64 <pbuf_copy+0x38>
c0008f45:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008f4a:	74 18                	je     c0008f64 <pbuf_copy+0x38>
c0008f4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f50:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008f53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f5a:	0f b7 d2             	movzx  edx,dx
c0008f5d:	0f b7 c0             	movzx  eax,ax
c0008f60:	39 c2                	cmp    edx,eax
c0008f62:	73 1c                	jae    c0008f80 <pbuf_copy+0x54>
c0008f64:	83 ec 08             	sub    esp,0x8
c0008f67:	68 88 00 03 c0       	push   0xc0030088
c0008f6c:	68 a6 fd 02 c0       	push   0xc002fda6
c0008f71:	e8 a2 6e 01 00       	call   c001fe18 <CPrintf>
c0008f76:	83 c4 10             	add    esp,0x10
c0008f79:	b0 f2                	mov    al,0xf2
c0008f7b:	e9 0c 02 00 00       	jmp    c000918c <pbuf_copy+0x260>
c0008f80:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008f85:	75 15                	jne    c0008f9c <pbuf_copy+0x70>
c0008f87:	83 ec 08             	sub    esp,0x8
c0008f8a:	68 65 02 03 c0       	push   0xc0030265
c0008f8f:	68 a6 fd 02 c0       	push   0xc002fda6
c0008f94:	e8 7f 6e 01 00       	call   c001fe18 <CPrintf>
c0008f99:	83 c4 10             	add    esp,0x10
c0008f9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fa0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008fa4:	0f b7 d0             	movzx  edx,ax
c0008fa7:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0008fac:	89 d1                	mov    ecx,edx
c0008fae:	29 c1                	sub    ecx,eax
c0008fb0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008fb4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008fb8:	0f b7 d0             	movzx  edx,ax
c0008fbb:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008fc0:	29 c2                	sub    edx,eax
c0008fc2:	89 d0                	mov    eax,edx
c0008fc4:	39 c1                	cmp    ecx,eax
c0008fc6:	7c 1c                	jl     c0008fe4 <pbuf_copy+0xb8>
c0008fc8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008fcc:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008fd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008fd4:	89 d3                	mov    ebx,edx
c0008fd6:	29 c3                	sub    ebx,eax
c0008fd8:	89 d8                	mov    eax,ebx
c0008fda:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008fdf:	eb 1b                	jmp    c0008ffc <pbuf_copy+0xd0>
c0008fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0008fe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fe8:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008fec:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0008ff1:	89 d3                	mov    ebx,edx
c0008ff3:	29 c3                	sub    ebx,eax
c0008ff5:	89 d8                	mov    eax,ebx
c0008ff7:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008ffc:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0009001:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009005:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0009008:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000900d:	01 d1                	add    ecx,edx
c000900f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009013:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0009016:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000901b:	01 da                	add    edx,ebx
c000901d:	83 ec 04             	sub    esp,0x4
c0009020:	50                   	push   eax
c0009021:	51                   	push   ecx
c0009022:	52                   	push   edx
c0009023:	e8 52 73 ff ff       	call   c000037a <memcpy>
c0009028:	83 c4 10             	add    esp,0x10
c000902b:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0009030:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0009035:	01 d0                	add    eax,edx
c0009037:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000903c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009040:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0009045:	01 d0                	add    eax,edx
c0009047:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000904c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009050:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009054:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009059:	0f b7 c0             	movzx  eax,ax
c000905c:	39 c2                	cmp    edx,eax
c000905e:	76 18                	jbe    c0009078 <pbuf_copy+0x14c>
c0009060:	83 ec 08             	sub    esp,0x8
c0009063:	68 72 02 03 c0       	push   0xc0030272
c0009068:	68 a6 fd 02 c0       	push   0xc002fda6
c000906d:	e8 a6 6d 01 00       	call   c001fe18 <CPrintf>
c0009072:	83 c4 10             	add    esp,0x10
c0009075:	8d 76 00             	lea    esi,[esi+0x0]
c0009078:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000907c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009080:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009085:	0f b7 c0             	movzx  eax,ax
c0009088:	39 c2                	cmp    edx,eax
c000908a:	75 14                	jne    c00090a0 <pbuf_copy+0x174>
c000908c:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0009093:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009097:	8b 00                	mov    eax,DWORD PTR [eax]
c0009099:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000909d:	8d 76 00             	lea    esi,[esi+0x0]
c00090a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090a4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090a8:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00090ad:	0f b7 c0             	movzx  eax,ax
c00090b0:	39 c2                	cmp    edx,eax
c00090b2:	76 18                	jbe    c00090cc <pbuf_copy+0x1a0>
c00090b4:	83 ec 08             	sub    esp,0x8
c00090b7:	68 89 02 03 c0       	push   0xc0030289
c00090bc:	68 a6 fd 02 c0       	push   0xc002fda6
c00090c1:	e8 52 6d 01 00       	call   c001fe18 <CPrintf>
c00090c6:	83 c4 10             	add    esp,0x10
c00090c9:	8d 76 00             	lea    esi,[esi+0x0]
c00090cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090d0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090d4:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00090d9:	0f b7 c0             	movzx  eax,ax
c00090dc:	39 c2                	cmp    edx,eax
c00090de:	72 14                	jb     c00090f4 <pbuf_copy+0x1c8>
c00090e0:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c00090e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00090ed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00090f1:	8d 76 00             	lea    esi,[esi+0x0]
c00090f4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00090f9:	74 3d                	je     c0009138 <pbuf_copy+0x20c>
c00090fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090ff:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009103:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009107:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000910a:	0f b7 d2             	movzx  edx,dx
c000910d:	0f b7 c0             	movzx  eax,ax
c0009110:	39 c2                	cmp    edx,eax
c0009112:	75 24                	jne    c0009138 <pbuf_copy+0x20c>
c0009114:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009118:	8b 00                	mov    eax,DWORD PTR [eax]
c000911a:	85 c0                	test   eax,eax
c000911c:	74 1a                	je     c0009138 <pbuf_copy+0x20c>
c000911e:	83 ec 08             	sub    esp,0x8
c0009121:	68 b8 00 03 c0       	push   0xc00300b8
c0009126:	68 a6 fd 02 c0       	push   0xc002fda6
c000912b:	e8 e8 6c 01 00       	call   c001fe18 <CPrintf>
c0009130:	83 c4 10             	add    esp,0x10
c0009133:	b0 fa                	mov    al,0xfa
c0009135:	eb 55                	jmp    c000918c <pbuf_copy+0x260>
c0009137:	90                   	nop
c0009138:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000913d:	74 3d                	je     c000917c <pbuf_copy+0x250>
c000913f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009143:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009147:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000914b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000914e:	0f b7 d2             	movzx  edx,dx
c0009151:	0f b7 c0             	movzx  eax,ax
c0009154:	39 c2                	cmp    edx,eax
c0009156:	75 24                	jne    c000917c <pbuf_copy+0x250>
c0009158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000915c:	8b 00                	mov    eax,DWORD PTR [eax]
c000915e:	85 c0                	test   eax,eax
c0009160:	74 1a                	je     c000917c <pbuf_copy+0x250>
c0009162:	83 ec 08             	sub    esp,0x8
c0009165:	68 b8 00 03 c0       	push   0xc00300b8
c000916a:	68 a6 fd 02 c0       	push   0xc002fda6
c000916f:	e8 a4 6c 01 00       	call   c001fe18 <CPrintf>
c0009174:	83 c4 10             	add    esp,0x10
c0009177:	b0 fa                	mov    al,0xfa
c0009179:	eb 11                	jmp    c000918c <pbuf_copy+0x260>
c000917b:	90                   	nop
c000917c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0009181:	0f 85 f9 fd ff ff    	jne    c0008f80 <pbuf_copy+0x54>
c0009187:	b0 00                	mov    al,0x0
c0009189:	8d 76 00             	lea    esi,[esi+0x0]
c000918c:	83 c4 18             	add    esp,0x18
c000918f:	5b                   	pop    ebx
c0009190:	c3                   	ret    
c0009191:	8d 76 00             	lea    esi,[esi+0x0]

c0009194 <pbuf_copy_partial>:
c0009194:	53                   	push   ebx
c0009195:	83 ec 28             	sub    esp,0x28
c0009198:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000919c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00091a0:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00091a5:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00091aa:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00091b1:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00091b6:	75 20                	jne    c00091d8 <pbuf_copy_partial+0x44>
c00091b8:	83 ec 08             	sub    esp,0x8
c00091bb:	68 e4 00 03 c0       	push   0xc00300e4
c00091c0:	68 a6 fd 02 c0       	push   0xc002fda6
c00091c5:	e8 4e 6c 01 00       	call   c001fe18 <CPrintf>
c00091ca:	83 c4 10             	add    esp,0x10
c00091cd:	b8 00 00 00 00       	mov    eax,0x0
c00091d2:	e9 59 01 00 00       	jmp    c0009330 <pbuf_copy_partial+0x19c>
c00091d7:	90                   	nop
c00091d8:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00091dd:	75 21                	jne    c0009200 <pbuf_copy_partial+0x6c>
c00091df:	83 ec 08             	sub    esp,0x8
c00091e2:	68 04 01 03 c0       	push   0xc0030104
c00091e7:	68 a6 fd 02 c0       	push   0xc002fda6
c00091ec:	e8 27 6c 01 00       	call   c001fe18 <CPrintf>
c00091f1:	83 c4 10             	add    esp,0x10
c00091f4:	b8 00 00 00 00       	mov    eax,0x0
c00091f9:	e9 32 01 00 00       	jmp    c0009330 <pbuf_copy_partial+0x19c>
c00091fe:	66 90                	xchg   ax,ax
c0009200:	66 c7 44 24 1a 00 00 	mov    WORD PTR [esp+0x1a],0x0
c0009207:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000920c:	74 0a                	je     c0009218 <pbuf_copy_partial+0x84>
c000920e:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009213:	75 0f                	jne    c0009224 <pbuf_copy_partial+0x90>
c0009215:	8d 76 00             	lea    esi,[esi+0x0]
c0009218:	b8 00 00 00 00       	mov    eax,0x0
c000921d:	e9 0e 01 00 00       	jmp    c0009330 <pbuf_copy_partial+0x19c>
c0009222:	66 90                	xchg   ax,ax
c0009224:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009228:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000922c:	e9 e3 00 00 00       	jmp    c0009314 <pbuf_copy_partial+0x180>
c0009231:	8d 76 00             	lea    esi,[esi+0x0]
c0009234:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0009239:	85 c0                	test   eax,eax
c000923b:	74 33                	je     c0009270 <pbuf_copy_partial+0xdc>
c000923d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009241:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009245:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000924a:	0f b7 c0             	movzx  eax,ax
c000924d:	39 c2                	cmp    edx,eax
c000924f:	72 1f                	jb     c0009270 <pbuf_copy_partial+0xdc>
c0009251:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009255:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009259:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000925d:	89 d3                	mov    ebx,edx
c000925f:	29 c3                	sub    ebx,eax
c0009261:	89 d8                	mov    eax,ebx
c0009263:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0009268:	e9 9b 00 00 00       	jmp    c0009308 <pbuf_copy_partial+0x174>
c000926d:	8d 76 00             	lea    esi,[esi+0x0]
c0009270:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009274:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009278:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000927c:	89 d1                	mov    ecx,edx
c000927e:	29 c1                	sub    ecx,eax
c0009280:	89 c8                	mov    eax,ecx
c0009282:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009287:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000928c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009291:	39 c2                	cmp    edx,eax
c0009293:	76 0b                	jbe    c00092a0 <pbuf_copy_partial+0x10c>
c0009295:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009299:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000929e:	66 90                	xchg   ax,ax
c00092a0:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00092a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00092a9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00092ac:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00092b1:	01 d1                	add    ecx,edx
c00092b3:	0f b7 5c 24 1a       	movzx  ebx,WORD PTR [esp+0x1a]
c00092b8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00092bc:	01 da                	add    edx,ebx
c00092be:	83 ec 04             	sub    esp,0x4
c00092c1:	50                   	push   eax
c00092c2:	51                   	push   ecx
c00092c3:	52                   	push   edx
c00092c4:	e8 b1 70 ff ff       	call   c000037a <memcpy>
c00092c9:	83 c4 10             	add    esp,0x10
c00092cc:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00092d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00092d5:	01 d0                	add    eax,edx
c00092d7:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00092dc:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00092e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00092e5:	01 d0                	add    eax,edx
c00092e7:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00092ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00092f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00092f4:	89 d3                	mov    ebx,edx
c00092f6:	29 c3                	sub    ebx,eax
c00092f8:	89 d8                	mov    eax,ebx
c00092fa:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00092ff:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0009306:	66 90                	xchg   ax,ax
c0009308:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930c:	8b 00                	mov    eax,DWORD PTR [eax]
c000930e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009312:	66 90                	xchg   ax,ax
c0009314:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009319:	85 c0                	test   eax,eax
c000931b:	74 0b                	je     c0009328 <pbuf_copy_partial+0x194>
c000931d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009322:	0f 85 0c ff ff ff    	jne    c0009234 <pbuf_copy_partial+0xa0>
c0009328:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000932d:	8d 76 00             	lea    esi,[esi+0x0]
c0009330:	83 c4 28             	add    esp,0x28
c0009333:	5b                   	pop    ebx
c0009334:	c3                   	ret    
c0009335:	8d 76 00             	lea    esi,[esi+0x0]

c0009338 <pbuf_take>:
c0009338:	83 ec 2c             	sub    esp,0x2c
c000933b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000933f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009344:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009348:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000934d:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0009354:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009359:	75 1d                	jne    c0009378 <pbuf_take+0x40>
c000935b:	83 ec 08             	sub    esp,0x8
c000935e:	68 a4 02 03 c0       	push   0xc00302a4
c0009363:	68 a6 fd 02 c0       	push   0xc002fda6
c0009368:	e8 ab 6a 01 00       	call   c001fe18 <CPrintf>
c000936d:	83 c4 10             	add    esp,0x10
c0009370:	b0 00                	mov    al,0x0
c0009372:	e9 3d 01 00 00       	jmp    c00094b4 <pbuf_take+0x17c>
c0009377:	90                   	nop
c0009378:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000937d:	75 1d                	jne    c000939c <pbuf_take+0x64>
c000937f:	83 ec 08             	sub    esp,0x8
c0009382:	68 bb 02 03 c0       	push   0xc00302bb
c0009387:	68 a6 fd 02 c0       	push   0xc002fda6
c000938c:	e8 87 6a 01 00       	call   c001fe18 <CPrintf>
c0009391:	83 c4 10             	add    esp,0x10
c0009394:	b0 00                	mov    al,0x0
c0009396:	e9 19 01 00 00       	jmp    c00094b4 <pbuf_take+0x17c>
c000939b:	90                   	nop
c000939c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00093a1:	74 1d                	je     c00093c0 <pbuf_take+0x88>
c00093a3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00093a8:	74 16                	je     c00093c0 <pbuf_take+0x88>
c00093aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00093b1:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00093b6:	0f b7 c0             	movzx  eax,ax
c00093b9:	39 c2                	cmp    edx,eax
c00093bb:	76 0b                	jbe    c00093c8 <pbuf_take+0x90>
c00093bd:	8d 76 00             	lea    esi,[esi+0x0]
c00093c0:	b0 f2                	mov    al,0xf2
c00093c2:	e9 ed 00 00 00       	jmp    c00094b4 <pbuf_take+0x17c>
c00093c7:	90                   	nop
c00093c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00093d0:	e9 9f 00 00 00       	jmp    c0009474 <pbuf_take+0x13c>
c00093d5:	8d 76 00             	lea    esi,[esi+0x0]
c00093d8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00093dd:	75 15                	jne    c00093f4 <pbuf_take+0xbc>
c00093df:	83 ec 08             	sub    esp,0x8
c00093e2:	68 d6 02 03 c0       	push   0xc00302d6
c00093e7:	68 a6 fd 02 c0       	push   0xc002fda6
c00093ec:	e8 27 6a 01 00       	call   c001fe18 <CPrintf>
c00093f1:	83 c4 10             	add    esp,0x10
c00093f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00093f8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00093fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009401:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009405:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c000940a:	0f b7 c0             	movzx  eax,ax
c000940d:	39 c2                	cmp    edx,eax
c000940f:	76 0f                	jbe    c0009420 <pbuf_take+0xe8>
c0009411:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009415:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009419:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000941e:	66 90                	xchg   ax,ax
c0009420:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0009425:	0f b7 4c 24 16       	movzx  ecx,WORD PTR [esp+0x16]
c000942a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000942e:	01 c1                	add    ecx,eax
c0009430:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009434:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009437:	83 ec 04             	sub    esp,0x4
c000943a:	52                   	push   edx
c000943b:	51                   	push   ecx
c000943c:	50                   	push   eax
c000943d:	e8 38 6f ff ff       	call   c000037a <memcpy>
c0009442:	83 c4 10             	add    esp,0x10
c0009445:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009449:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000944e:	89 d1                	mov    ecx,edx
c0009450:	29 c1                	sub    ecx,eax
c0009452:	89 c8                	mov    eax,ecx
c0009454:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009459:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000945e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0009463:	01 d0                	add    eax,edx
c0009465:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000946a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000946e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009470:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009474:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009479:	85 c0                	test   eax,eax
c000947b:	0f 85 57 ff ff ff    	jne    c00093d8 <pbuf_take+0xa0>
c0009481:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009486:	85 c0                	test   eax,eax
c0009488:	75 0e                	jne    c0009498 <pbuf_take+0x160>
c000948a:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c000948f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009494:	39 c2                	cmp    edx,eax
c0009496:	74 18                	je     c00094b0 <pbuf_take+0x178>
c0009498:	83 ec 08             	sub    esp,0x8
c000949b:	68 ee 02 03 c0       	push   0xc00302ee
c00094a0:	68 a6 fd 02 c0       	push   0xc002fda6
c00094a5:	e8 6e 69 01 00       	call   c001fe18 <CPrintf>
c00094aa:	83 c4 10             	add    esp,0x10
c00094ad:	8d 76 00             	lea    esi,[esi+0x0]
c00094b0:	b0 00                	mov    al,0x0
c00094b2:	66 90                	xchg   ax,ax
c00094b4:	83 c4 2c             	add    esp,0x2c
c00094b7:	c3                   	ret    

c00094b8 <pbuf_coalesce>:
c00094b8:	83 ec 1c             	sub    esp,0x1c
c00094bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 07                	jne    c00094cc <pbuf_coalesce+0x14>
c00094c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094c9:	eb 7d                	jmp    c0009548 <pbuf_coalesce+0x90>
c00094cb:	90                   	nop
c00094cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00094d3:	0f b7 c0             	movzx  eax,ax
c00094d6:	83 ec 04             	sub    esp,0x4
c00094d9:	6a 00                	push   0x0
c00094db:	50                   	push   eax
c00094dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00094e0:	e8 e7 f1 ff ff       	call   c00086cc <pbuf_alloc>
c00094e5:	83 c4 10             	add    esp,0x10
c00094e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00094ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00094f1:	75 09                	jne    c00094fc <pbuf_coalesce+0x44>
c00094f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094f7:	eb 4f                	jmp    c0009548 <pbuf_coalesce+0x90>
c00094f9:	8d 76 00             	lea    esi,[esi+0x0]
c00094fc:	83 ec 08             	sub    esp,0x8
c00094ff:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009503:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009507:	e8 20 fa ff ff       	call   c0008f2c <pbuf_copy>
c000950c:	83 c4 10             	add    esp,0x10
c000950f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009513:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c0009518:	85 c0                	test   eax,eax
c000951a:	74 18                	je     c0009534 <pbuf_coalesce+0x7c>
c000951c:	83 ec 08             	sub    esp,0x8
c000951f:	68 04 03 03 c0       	push   0xc0030304
c0009524:	68 a6 fd 02 c0       	push   0xc002fda6
c0009529:	e8 ea 68 01 00       	call   c001fe18 <CPrintf>
c000952e:	83 c4 10             	add    esp,0x10
c0009531:	8d 76 00             	lea    esi,[esi+0x0]
c0009534:	83 ec 0c             	sub    esp,0xc
c0009537:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000953b:	e8 b4 ef ff ff       	call   c00084f4 <pbuf_free>
c0009540:	83 c4 10             	add    esp,0x10
c0009543:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009547:	90                   	nop
c0009548:	83 c4 1c             	add    esp,0x1c
c000954b:	c3                   	ret    

c000954c <pbuf_get_at>:
c000954c:	83 ec 14             	sub    esp,0x14
c000954f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009553:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009557:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000955a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000955f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009563:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009567:	eb 27                	jmp    c0009590 <pbuf_get_at+0x44>
c0009569:	8d 76 00             	lea    esi,[esi+0x0]
c000956c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009570:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009574:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0009579:	89 d1                	mov    ecx,edx
c000957b:	29 c1                	sub    ecx,eax
c000957d:	89 c8                	mov    eax,ecx
c000957f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0009584:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009588:	8b 00                	mov    eax,DWORD PTR [eax]
c000958a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000958e:	66 90                	xchg   ax,ax
c0009590:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009595:	74 15                	je     c00095ac <pbuf_get_at+0x60>
c0009597:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000959b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000959f:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c00095a4:	0f b7 c0             	movzx  eax,ax
c00095a7:	39 c2                	cmp    edx,eax
c00095a9:	73 c1                	jae    c000956c <pbuf_get_at+0x20>
c00095ab:	90                   	nop
c00095ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00095b1:	74 29                	je     c00095dc <pbuf_get_at+0x90>
c00095b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095b7:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00095bb:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c00095c0:	0f b7 c0             	movzx  eax,ax
c00095c3:	39 c2                	cmp    edx,eax
c00095c5:	73 15                	jae    c00095dc <pbuf_get_at+0x90>
c00095c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095cb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00095ce:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00095d3:	01 d0                	add    eax,edx
c00095d5:	8a 00                	mov    al,BYTE PTR [eax]
c00095d7:	eb 07                	jmp    c00095e0 <pbuf_get_at+0x94>
c00095d9:	8d 76 00             	lea    esi,[esi+0x0]
c00095dc:	b0 00                	mov    al,0x0
c00095de:	66 90                	xchg   ax,ax
c00095e0:	83 c4 14             	add    esp,0x14
c00095e3:	c3                   	ret    

c00095e4 <pbuf_memcmp>:
c00095e4:	83 ec 18             	sub    esp,0x18
c00095e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00095eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00095ef:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00095f4:	66 89 04 24          	mov    WORD PTR [esp],ax
c00095f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095fc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009601:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009605:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009609:	eb 25                	jmp    c0009630 <pbuf_memcmp+0x4c>
c000960b:	90                   	nop
c000960c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009610:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009614:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009619:	89 d1                	mov    ecx,edx
c000961b:	29 c1                	sub    ecx,eax
c000961d:	89 c8                	mov    eax,ecx
c000961f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009628:	8b 00                	mov    eax,DWORD PTR [eax]
c000962a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000962e:	66 90                	xchg   ax,ax
c0009630:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009635:	74 15                	je     c000964c <pbuf_memcmp+0x68>
c0009637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000963b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000963f:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009644:	0f b7 c0             	movzx  eax,ax
c0009647:	39 c2                	cmp    edx,eax
c0009649:	73 c1                	jae    c000960c <pbuf_memcmp+0x28>
c000964b:	90                   	nop
c000964c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009651:	0f 84 8d 00 00 00    	je     c00096e4 <pbuf_memcmp+0x100>
c0009657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000965b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000965f:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009664:	0f b7 c0             	movzx  eax,ax
c0009667:	39 c2                	cmp    edx,eax
c0009669:	73 79                	jae    c00096e4 <pbuf_memcmp+0x100>
c000966b:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0009672:	eb 5c                	jmp    c00096d0 <pbuf_memcmp+0xec>
c0009674:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009679:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000967e:	01 d0                	add    eax,edx
c0009680:	0f b7 c0             	movzx  eax,ax
c0009683:	50                   	push   eax
c0009684:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009688:	e8 bf fe ff ff       	call   c000954c <pbuf_get_at>
c000968d:	83 c4 08             	add    esp,0x8
c0009690:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0009694:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009699:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000969d:	01 d0                	add    eax,edx
c000969f:	8a 00                	mov    al,BYTE PTR [eax]
c00096a1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00096a5:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
c00096aa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00096af:	39 c2                	cmp    edx,eax
c00096b1:	74 0d                	je     c00096c0 <pbuf_memcmp+0xdc>
c00096b3:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00096b8:	83 c0 01             	add    eax,0x1
c00096bb:	eb 2f                	jmp    c00096ec <pbuf_memcmp+0x108>
c00096bd:	8d 76 00             	lea    esi,[esi+0x0]
c00096c0:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00096c5:	83 c0 01             	add    eax,0x1
c00096c8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00096cd:	8d 76 00             	lea    esi,[esi+0x0]
c00096d0:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c00096d5:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00096d9:	39 c2                	cmp    edx,eax
c00096db:	72 97                	jb     c0009674 <pbuf_memcmp+0x90>
c00096dd:	b8 00 00 00 00       	mov    eax,0x0
c00096e2:	eb 08                	jmp    c00096ec <pbuf_memcmp+0x108>
c00096e4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00096e9:	8d 76 00             	lea    esi,[esi+0x0]
c00096ec:	83 c4 18             	add    esp,0x18
c00096ef:	c3                   	ret    

c00096f0 <pbuf_memfind>:
c00096f0:	83 ec 18             	sub    esp,0x18
c00096f3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00096f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00096fb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0009700:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009704:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009708:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000970b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000970f:	89 d1                	mov    ecx,edx
c0009711:	29 c1                	sub    ecx,eax
c0009713:	89 c8                	mov    eax,ecx
c0009715:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000971a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000971e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009721:	0f b7 c0             	movzx  eax,ax
c0009724:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c0009729:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c000972d:	01 ca                	add    edx,ecx
c000972f:	39 d0                	cmp    eax,edx
c0009731:	7c 65                	jl     c0009798 <pbuf_memfind+0xa8>
c0009733:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009736:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000973b:	eb 4b                	jmp    c0009788 <pbuf_memfind+0x98>
c000973d:	8d 76 00             	lea    esi,[esi+0x0]
c0009740:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0009745:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000974a:	52                   	push   edx
c000974b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000974f:	50                   	push   eax
c0009750:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009754:	e8 8b fe ff ff       	call   c00095e4 <pbuf_memcmp>
c0009759:	83 c4 10             	add    esp,0x10
c000975c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0009761:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0009766:	85 c0                	test   eax,eax
c0009768:	75 0a                	jne    c0009774 <pbuf_memfind+0x84>
c000976a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000976f:	eb 2f                	jmp    c00097a0 <pbuf_memfind+0xb0>
c0009771:	8d 76 00             	lea    esi,[esi+0x0]
c0009774:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009779:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000977e:	01 d0                	add    eax,edx
c0009780:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009785:	8d 76 00             	lea    esi,[esi+0x0]
c0009788:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c000978d:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0009792:	39 c2                	cmp    edx,eax
c0009794:	76 aa                	jbe    c0009740 <pbuf_memfind+0x50>
c0009796:	66 90                	xchg   ax,ax
c0009798:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000979d:	8d 76 00             	lea    esi,[esi+0x0]
c00097a0:	83 c4 18             	add    esp,0x18
c00097a3:	c3                   	ret    

c00097a4 <pbuf_strstr>:
c00097a4:	83 ec 1c             	sub    esp,0x1c
c00097a7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00097ac:	74 1e                	je     c00097cc <pbuf_strstr+0x28>
c00097ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00097b2:	8a 00                	mov    al,BYTE PTR [eax]
c00097b4:	0f be c0             	movsx  eax,al
c00097b7:	85 c0                	test   eax,eax
c00097b9:	74 11                	je     c00097cc <pbuf_strstr+0x28>
c00097bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00097bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00097c2:	0f b7 c0             	movzx  eax,ax
c00097c5:	3d ff ff 00 00       	cmp    eax,0xffff
c00097ca:	75 08                	jne    c00097d4 <pbuf_strstr+0x30>
c00097cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00097d1:	eb 41                	jmp    c0009814 <pbuf_strstr+0x70>
c00097d3:	90                   	nop
c00097d4:	83 ec 0c             	sub    esp,0xc
c00097d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097db:	e8 90 6d ff ff       	call   c0000570 <strlen>
c00097e0:	83 c4 10             	add    esp,0x10
c00097e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00097e7:	81 7c 24 0c fe ff 00 00 	cmp    DWORD PTR [esp+0xc],0xfffe
c00097ef:	76 07                	jbe    c00097f8 <pbuf_strstr+0x54>
c00097f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00097f6:	eb 1c                	jmp    c0009814 <pbuf_strstr+0x70>
c00097f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097fc:	0f b7 c0             	movzx  eax,ax
c00097ff:	6a 00                	push   0x0
c0009801:	50                   	push   eax
c0009802:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009806:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000980a:	e8 e1 fe ff ff       	call   c00096f0 <pbuf_memfind>
c000980f:	83 c4 10             	add    esp,0x10
c0009812:	66 90                	xchg   ax,ax
c0009814:	83 c4 1c             	add    esp,0x1c
c0009817:	c3                   	ret    

c0009818 <raw_input>:
c0009818:	83 ec 2c             	sub    esp,0x2c
c000981b:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0009820:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009824:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009827:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000982b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000982f:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0009832:	0f b6 c0             	movzx  eax,al
c0009835:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000983a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009842:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009847:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000984b:	e9 b8 00 00 00       	jmp    c0009908 <raw_input+0xf0>
c0009850:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009854:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0009857:	0f b6 d0             	movzx  edx,al
c000985a:	0f bf 44 24 0e       	movsx  eax,WORD PTR [esp+0xe]
c000985f:	39 c2                	cmp    edx,eax
c0009861:	0f 85 8d 00 00 00    	jne    c00098f4 <raw_input+0xdc>
c0009867:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000986b:	85 c0                	test   eax,eax
c000986d:	74 19                	je     c0009888 <raw_input+0x70>
c000986f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009873:	8b 00                	mov    eax,DWORD PTR [eax]
c0009875:	85 c0                	test   eax,eax
c0009877:	74 0f                	je     c0009888 <raw_input+0x70>
c0009879:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000987d:	8b 10                	mov    edx,DWORD PTR [eax]
c000987f:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0009884:	39 c2                	cmp    edx,eax
c0009886:	75 6c                	jne    c00098f4 <raw_input+0xdc>
c0009888:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000988c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000988f:	85 c0                	test   eax,eax
c0009891:	74 61                	je     c00098f4 <raw_input+0xdc>
c0009893:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009897:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000989a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000989e:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c00098a1:	68 90 68 03 c0       	push   0xc0036890
c00098a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00098aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ae:	52                   	push   edx
c00098af:	ff d0                	call   eax
c00098b1:	83 c4 10             	add    esp,0x10
c00098b4:	0f b6 c0             	movzx  eax,al
c00098b7:	85 c0                	test   eax,eax
c00098b9:	74 39                	je     c00098f4 <raw_input+0xdc>
c00098bb:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00098c3:	c6 44 24 17 01       	mov    BYTE PTR [esp+0x17],0x1
c00098c8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00098cd:	74 25                	je     c00098f4 <raw_input+0xdc>
c00098cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098d3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00098d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00098da:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00098dd:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c00098e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098e7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00098ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098ee:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c00098f3:	90                   	nop
c00098f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009900:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009903:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009907:	90                   	nop
c0009908:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000990d:	85 c0                	test   eax,eax
c000990f:	75 0b                	jne    c000991c <raw_input+0x104>
c0009911:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009916:	0f 85 34 ff ff ff    	jne    c0009850 <raw_input+0x38>
c000991c:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0009920:	83 c4 2c             	add    esp,0x2c
c0009923:	c3                   	ret    

c0009924 <raw_bind>:
c0009924:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009929:	74 09                	je     c0009934 <raw_bind+0x10>
c000992b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000992f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009931:	eb 09                	jmp    c000993c <raw_bind+0x18>
c0009933:	90                   	nop
c0009934:	b8 00 00 00 00       	mov    eax,0x0
c0009939:	8d 76 00             	lea    esi,[esi+0x0]
c000993c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009940:	89 02                	mov    DWORD PTR [edx],eax
c0009942:	b0 00                	mov    al,0x0
c0009944:	c3                   	ret    
c0009945:	8d 76 00             	lea    esi,[esi+0x0]

c0009948 <raw_connect>:
c0009948:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000994d:	74 09                	je     c0009958 <raw_connect+0x10>
c000994f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009953:	8b 00                	mov    eax,DWORD PTR [eax]
c0009955:	eb 09                	jmp    c0009960 <raw_connect+0x18>
c0009957:	90                   	nop
c0009958:	b8 00 00 00 00       	mov    eax,0x0
c000995d:	8d 76 00             	lea    esi,[esi+0x0]
c0009960:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009964:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009967:	b0 00                	mov    al,0x0
c0009969:	c3                   	ret    
c000996a:	66 90                	xchg   ax,ax

c000996c <raw_recv>:
c000996c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009970:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009974:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0009977:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000997b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000997f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009982:	90                   	nop
c0009983:	c3                   	ret    

c0009984 <raw_sendto>:
c0009984:	83 ec 1c             	sub    esp,0x1c
c0009987:	83 ec 08             	sub    esp,0x8
c000998a:	6a 14                	push   0x14
c000998c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009990:	e8 c3 e9 ff ff       	call   c0008358 <pbuf_header>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	0f b6 c0             	movzx  eax,al
c000999b:	85 c0                	test   eax,eax
c000999d:	74 49                	je     c00099e8 <raw_sendto+0x64>
c000999f:	83 ec 04             	sub    esp,0x4
c00099a2:	6a 00                	push   0x0
c00099a4:	6a 00                	push   0x0
c00099a6:	6a 01                	push   0x1
c00099a8:	e8 1f ed ff ff       	call   c00086cc <pbuf_alloc>
c00099ad:	83 c4 10             	add    esp,0x10
c00099b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00099b4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00099b9:	75 09                	jne    c00099c4 <raw_sendto+0x40>
c00099bb:	b0 ff                	mov    al,0xff
c00099bd:	e9 2a 01 00 00       	jmp    c0009aec <raw_sendto+0x168>
c00099c2:	66 90                	xchg   ax,ax
c00099c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00099c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00099cb:	0f b7 c0             	movzx  eax,ax
c00099ce:	85 c0                	test   eax,eax
c00099d0:	74 52                	je     c0009a24 <raw_sendto+0xa0>
c00099d2:	83 ec 08             	sub    esp,0x8
c00099d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099dd:	e8 2a f4 ff ff       	call   c0008e0c <pbuf_chain>
c00099e2:	83 c4 10             	add    esp,0x10
c00099e5:	eb 3d                	jmp    c0009a24 <raw_sendto+0xa0>
c00099e7:	90                   	nop
c00099e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00099ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00099f0:	83 ec 08             	sub    esp,0x8
c00099f3:	6a ec                	push   0xffffffec
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	e8 5a e9 ff ff       	call   c0008358 <pbuf_header>
c00099fe:	83 c4 10             	add    esp,0x10
c0009a01:	0f b6 c0             	movzx  eax,al
c0009a04:	85 c0                	test   eax,eax
c0009a06:	74 1c                	je     c0009a24 <raw_sendto+0xa0>
c0009a08:	83 ec 08             	sub    esp,0x8
c0009a0b:	68 18 03 03 c0       	push   0xc0030318
c0009a10:	68 a6 fd 02 c0       	push   0xc002fda6
c0009a15:	e8 fe 63 01 00       	call   c001fe18 <CPrintf>
c0009a1a:	83 c4 10             	add    esp,0x10
c0009a1d:	b0 ff                	mov    al,0xff
c0009a1f:	e9 c8 00 00 00       	jmp    c0009aec <raw_sendto+0x168>
c0009a24:	83 ec 0c             	sub    esp,0xc
c0009a27:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a2b:	e8 6c 9d 00 00       	call   c001379c <ip_route>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a37:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0009a3c:	75 22                	jne    c0009a60 <raw_sendto+0xdc>
c0009a3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a42:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0009a46:	74 10                	je     c0009a58 <raw_sendto+0xd4>
c0009a48:	83 ec 0c             	sub    esp,0xc
c0009a4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a4f:	e8 a0 ea ff ff       	call   c00084f4 <pbuf_free>
c0009a54:	83 c4 10             	add    esp,0x10
c0009a57:	90                   	nop
c0009a58:	b0 fc                	mov    al,0xfc
c0009a5a:	e9 8d 00 00 00       	jmp    c0009aec <raw_sendto+0x168>
c0009a5f:	90                   	nop
c0009a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a64:	85 c0                	test   eax,eax
c0009a66:	74 0c                	je     c0009a74 <raw_sendto+0xf0>
c0009a68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a6e:	85 c0                	test   eax,eax
c0009a70:	75 12                	jne    c0009a84 <raw_sendto+0x100>
c0009a72:	66 90                	xchg   ax,ax
c0009a74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a78:	83 c0 04             	add    eax,0x4
c0009a7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a7f:	eb 0b                	jmp    c0009a8c <raw_sendto+0x108>
c0009a81:	8d 76 00             	lea    esi,[esi+0x0]
c0009a84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a90:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0009a93:	0f b6 c8             	movzx  ecx,al
c0009a96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a9a:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0009a9d:	0f b6 d0             	movzx  edx,al
c0009aa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009aa4:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0009aa7:	0f b6 c0             	movzx  eax,al
c0009aaa:	83 ec 04             	sub    esp,0x4
c0009aad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009ab1:	51                   	push   ecx
c0009ab2:	52                   	push   edx
c0009ab3:	50                   	push   eax
c0009ab4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ab8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009abc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac0:	e8 af a1 00 00       	call   c0013c74 <ip_output_if>
c0009ac5:	83 c4 20             	add    esp,0x20
c0009ac8:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0009acc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ad0:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0009ad4:	74 12                	je     c0009ae8 <raw_sendto+0x164>
c0009ad6:	83 ec 0c             	sub    esp,0xc
c0009ad9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009add:	e8 12 ea ff ff       	call   c00084f4 <pbuf_free>
c0009ae2:	83 c4 10             	add    esp,0x10
c0009ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0009ae8:	8a 44 24 03          	mov    al,BYTE PTR [esp+0x3]
c0009aec:	83 c4 1c             	add    esp,0x1c
c0009aef:	c3                   	ret    

c0009af0 <raw_send>:
c0009af0:	83 ec 0c             	sub    esp,0xc
c0009af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009af7:	83 c0 04             	add    eax,0x4
c0009afa:	83 ec 04             	sub    esp,0x4
c0009afd:	50                   	push   eax
c0009afe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b06:	e8 79 fe ff ff       	call   c0009984 <raw_sendto>
c0009b0b:	83 c4 10             	add    esp,0x10
c0009b0e:	83 c4 0c             	add    esp,0xc
c0009b11:	c3                   	ret    
c0009b12:	66 90                	xchg   ax,ax

c0009b14 <raw_remove>:
c0009b14:	83 ec 1c             	sub    esp,0x1c
c0009b17:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009b1c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0009b20:	75 12                	jne    c0009b34 <raw_remove+0x20>
c0009b22:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009b27:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b2a:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c0009b2f:	eb 4b                	jmp    c0009b7c <raw_remove+0x68>
c0009b31:	8d 76 00             	lea    esi,[esi+0x0]
c0009b34:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b3d:	eb 35                	jmp    c0009b74 <raw_remove+0x60>
c0009b3f:	90                   	nop
c0009b40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b44:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b47:	85 c0                	test   eax,eax
c0009b49:	74 1d                	je     c0009b68 <raw_remove+0x54>
c0009b4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b4f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b52:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0009b56:	75 10                	jne    c0009b68 <raw_remove+0x54>
c0009b58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b5c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0009b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b63:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009b66:	66 90                	xchg   ax,ax
c0009b68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b6c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b73:	90                   	nop
c0009b74:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009b79:	75 c5                	jne    c0009b40 <raw_remove+0x2c>
c0009b7b:	90                   	nop
c0009b7c:	83 ec 08             	sub    esp,0x8
c0009b7f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009b83:	6a 00                	push   0x0
c0009b85:	e8 ae e0 ff ff       	call   c0007c38 <memp_free>
c0009b8a:	83 c4 10             	add    esp,0x10
c0009b8d:	90                   	nop
c0009b8e:	83 c4 1c             	add    esp,0x1c
c0009b91:	c3                   	ret    
c0009b92:	66 90                	xchg   ax,ax

c0009b94 <raw_new>:
c0009b94:	83 ec 2c             	sub    esp,0x2c
c0009b97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b9b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009b9f:	83 ec 0c             	sub    esp,0xc
c0009ba2:	6a 00                	push   0x0
c0009ba4:	e8 63 df ff ff       	call   c0007b0c <memp_malloc>
c0009ba9:	83 c4 10             	add    esp,0x10
c0009bac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009bb0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009bb5:	74 3d                	je     c0009bf4 <raw_new+0x60>
c0009bb7:	83 ec 04             	sub    esp,0x4
c0009bba:	6a 1c                	push   0x1c
c0009bbc:	6a 00                	push   0x0
c0009bbe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009bc2:	e8 29 69 ff ff       	call   c00004f0 <memset>
c0009bc7:	83 c4 10             	add    esp,0x10
c0009bca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bce:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009bd2:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0009bd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bd9:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0009bdd:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c0009be3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009be7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009bea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bee:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c0009bf3:	90                   	nop
c0009bf4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bf8:	83 c4 2c             	add    esp,0x2c
c0009bfb:	c3                   	ret    

c0009bfc <stats_init>:
c0009bfc:	90                   	nop
c0009bfd:	c3                   	ret    
c0009bfe:	66 90                	xchg   ax,ax

c0009c00 <sys_msleep>:
c0009c00:	83 ec 1c             	sub    esp,0x1c
c0009c03:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0009c08:	74 46                	je     c0009c50 <sys_msleep+0x50>
c0009c0a:	83 ec 08             	sub    esp,0x8
c0009c0d:	6a 00                	push   0x0
c0009c0f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c13:	50                   	push   eax
c0009c14:	e8 53 70 ff ff       	call   c0000c6c <sys_sem_new>
c0009c19:	83 c4 10             	add    esp,0x10
c0009c1c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009c20:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0009c25:	85 c0                	test   eax,eax
c0009c27:	75 27                	jne    c0009c50 <sys_msleep+0x50>
c0009c29:	83 ec 08             	sub    esp,0x8
c0009c2c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009c30:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c34:	50                   	push   eax
c0009c35:	e8 8a 70 ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c0009c3a:	83 c4 10             	add    esp,0x10
c0009c3d:	83 ec 0c             	sub    esp,0xc
c0009c40:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c44:	50                   	push   eax
c0009c45:	e8 4a 70 ff ff       	call   c0000c94 <sys_sem_free>
c0009c4a:	83 c4 10             	add    esp,0x10
c0009c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0009c50:	90                   	nop
c0009c51:	83 c4 1c             	add    esp,0x1c
c0009c54:	c3                   	ret    
c0009c55:	66 90                	xchg   ax,ax
c0009c57:	90                   	nop

c0009c58 <tcp_accept_null>:
c0009c58:	83 ec 04             	sub    esp,0x4
c0009c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c5f:	88 04 24             	mov    BYTE PTR [esp],al
c0009c62:	b0 f6                	mov    al,0xf6
c0009c64:	83 c4 04             	add    esp,0x4
c0009c67:	c3                   	ret    

c0009c68 <tcp_listen_with_backlog>:
c0009c68:	83 ec 2c             	sub    esp,0x2c
c0009c6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009c6f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009c73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c77:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009c7a:	85 c0                	test   eax,eax
c0009c7c:	74 22                	je     c0009ca0 <tcp_listen_with_backlog+0x38>
c0009c7e:	83 ec 08             	sub    esp,0x8
c0009c81:	68 40 03 03 c0       	push   0xc0030340
c0009c86:	68 a6 fd 02 c0       	push   0xc002fda6
c0009c8b:	e8 88 61 01 00       	call   c001fe18 <CPrintf>
c0009c90:	83 c4 10             	add    esp,0x10
c0009c93:	b8 00 00 00 00       	mov    eax,0x0
c0009c98:	e9 77 01 00 00       	jmp    c0009e14 <tcp_listen_with_backlog+0x1ac>
c0009c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0009ca0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ca4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009ca7:	83 f8 01             	cmp    eax,0x1
c0009caa:	75 0c                	jne    c0009cb8 <tcp_listen_with_backlog+0x50>
c0009cac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cb0:	e9 5f 01 00 00       	jmp    c0009e14 <tcp_listen_with_backlog+0x1ac>
c0009cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0009cb8:	83 ec 0c             	sub    esp,0xc
c0009cbb:	6a 03                	push   0x3
c0009cbd:	e8 4a de ff ff       	call   c0007b0c <memp_malloc>
c0009cc2:	83 c4 10             	add    esp,0x10
c0009cc5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cc9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009cce:	75 0c                	jne    c0009cdc <tcp_listen_with_backlog+0x74>
c0009cd0:	b8 00 00 00 00       	mov    eax,0x0
c0009cd5:	e9 3a 01 00 00       	jmp    c0009e14 <tcp_listen_with_backlog+0x1ac>
c0009cda:	66 90                	xchg   ax,ax
c0009cdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ce0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0009ce3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ce7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009cea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cee:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009cf1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009cf5:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c0009cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009cfd:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
c0009d04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d08:	8a 50 14             	mov    dl,BYTE PTR [eax+0x14]
c0009d0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d0f:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009d12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d16:	8a 50 08             	mov    dl,BYTE PTR [eax+0x8]
c0009d19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d1d:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009d20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d24:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c0009d27:	83 c8 02             	or     eax,0x2
c0009d2a:	88 c2                	mov    dl,al
c0009d2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d30:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009d33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d37:	8a 50 0a             	mov    dl,BYTE PTR [eax+0xa]
c0009d3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d3e:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c0009d41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d45:	8a 50 09             	mov    dl,BYTE PTR [eax+0x9]
c0009d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d4c:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0009d4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d53:	8b 10                	mov    edx,DWORD PTR [eax]
c0009d55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d59:	89 10                	mov    DWORD PTR [eax],edx
c0009d5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d5f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009d62:	0f b7 c0             	movzx  eax,ax
c0009d65:	85 c0                	test   eax,eax
c0009d67:	74 6f                	je     c0009dd8 <tcp_listen_with_backlog+0x170>
c0009d69:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009d6e:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009d72:	75 10                	jne    c0009d84 <tcp_listen_with_backlog+0x11c>
c0009d74:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009d79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009d7c:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009d81:	eb 49                	jmp    c0009dcc <tcp_listen_with_backlog+0x164>
c0009d83:	90                   	nop
c0009d84:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009d89:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009d8e:	eb 30                	jmp    c0009dc0 <tcp_listen_with_backlog+0x158>
c0009d90:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009d95:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009d98:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009d9c:	75 12                	jne    c0009db0 <tcp_listen_with_backlog+0x148>
c0009d9e:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009da3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009da7:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009daa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009dad:	eb 1d                	jmp    c0009dcc <tcp_listen_with_backlog+0x164>
c0009daf:	90                   	nop
c0009db0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009db5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009db8:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0009dc0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009dc5:	85 c0                	test   eax,eax
c0009dc7:	75 c7                	jne    c0009d90 <tcp_listen_with_backlog+0x128>
c0009dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0009dcc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dd0:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0009dd7:	90                   	nop
c0009dd8:	83 ec 08             	sub    esp,0x8
c0009ddb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009ddf:	6a 02                	push   0x2
c0009de1:	e8 52 de ff ff       	call   c0007c38 <memp_free>
c0009de6:	83 c4 10             	add    esp,0x10
c0009de9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ded:	c7 40 1c 58 9c 00 c0 	mov    DWORD PTR [eax+0x1c],0xc0009c58
c0009df4:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c0009dfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009dfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e05:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c0009e0a:	e8 a5 6e 00 00       	call   c0010cb4 <tcp_timer_needed>
c0009e0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e13:	90                   	nop
c0009e14:	83 c4 2c             	add    esp,0x2c
c0009e17:	c3                   	ret    

c0009e18 <tcp_update_rcv_ann_wnd>:
c0009e18:	83 ec 1c             	sub    esp,0x1c
c0009e1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e1f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009e22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e26:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009e29:	0f b7 c0             	movzx  eax,ax
c0009e2c:	01 d0                	add    eax,edx
c0009e2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e36:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009e39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e3d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009e40:	0f b7 c8             	movzx  ecx,ax
c0009e43:	81 f9 30 04 00 00    	cmp    ecx,0x430
c0009e49:	76 05                	jbe    c0009e50 <tcp_update_rcv_ann_wnd+0x38>
c0009e4b:	b8 30 04 00 00       	mov    eax,0x430
c0009e50:	0f b7 c0             	movzx  eax,ax
c0009e53:	01 c2                	add    edx,eax
c0009e55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e59:	29 d0                	sub    eax,edx
c0009e5b:	78 23                	js     c0009e80 <tcp_update_rcv_ann_wnd+0x68>
c0009e5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e61:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009e64:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009e68:	66 89 42 2e          	mov    WORD PTR [edx+0x2e],ax
c0009e6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e70:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009e73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009e77:	29 c2                	sub    edx,eax
c0009e79:	89 d0                	mov    eax,edx
c0009e7b:	eb 73                	jmp    c0009ef0 <tcp_update_rcv_ann_wnd+0xd8>
c0009e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0009e80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e84:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009e87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e8b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009e8e:	29 c2                	sub    edx,eax
c0009e90:	89 d0                	mov    eax,edx
c0009e92:	85 c0                	test   eax,eax
c0009e94:	7e 0e                	jle    c0009ea4 <tcp_update_rcv_ann_wnd+0x8c>
c0009e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e9a:	66 c7 40 2e 00 00    	mov    WORD PTR [eax+0x2e],0x0
c0009ea0:	eb 46                	jmp    c0009ee8 <tcp_update_rcv_ann_wnd+0xd0>
c0009ea2:	66 90                	xchg   ax,ax
c0009ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ea8:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009eab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eaf:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0009eb2:	29 c2                	sub    edx,eax
c0009eb4:	89 d0                	mov    eax,edx
c0009eb6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eba:	81 7c 24 08 ff ff 00 00 	cmp    DWORD PTR [esp+0x8],0xffff
c0009ec2:	76 18                	jbe    c0009edc <tcp_update_rcv_ann_wnd+0xc4>
c0009ec4:	83 ec 08             	sub    esp,0x8
c0009ec7:	68 74 05 03 c0       	push   0xc0030574
c0009ecc:	68 a6 fd 02 c0       	push   0xc002fda6
c0009ed1:	e8 42 5f 01 00       	call   c001fe18 <CPrintf>
c0009ed6:	83 c4 10             	add    esp,0x10
c0009ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0009edc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ee0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009ee4:	66 89 42 2e          	mov    WORD PTR [edx+0x2e],ax
c0009ee8:	b8 00 00 00 00       	mov    eax,0x0
c0009eed:	8d 76 00             	lea    esi,[esi+0x0]
c0009ef0:	83 c4 1c             	add    esp,0x1c
c0009ef3:	c3                   	ret    

c0009ef4 <tcp_recved>:
c0009ef4:	83 ec 2c             	sub    esp,0x2c
c0009ef7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009efb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009f00:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009f05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f09:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009f0c:	0f b7 c0             	movzx  eax,ax
c0009f0f:	b9 ff ff 00 00       	mov    ecx,0xffff
c0009f14:	29 c1                	sub    ecx,eax
c0009f16:	89 c8                	mov    eax,ecx
c0009f18:	39 c2                	cmp    edx,eax
c0009f1a:	7e 18                	jle    c0009f34 <tcp_recved+0x40>
c0009f1c:	83 ec 08             	sub    esp,0x8
c0009f1f:	68 64 03 03 c0       	push   0xc0030364
c0009f24:	68 a6 fd 02 c0       	push   0xc002fda6
c0009f29:	e8 ea 5e 01 00       	call   c001fe18 <CPrintf>
c0009f2e:	83 c4 10             	add    esp,0x10
c0009f31:	8d 76 00             	lea    esi,[esi+0x0]
c0009f34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f38:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009f3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f3f:	01 d0                	add    eax,edx
c0009f41:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f45:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c0009f49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f4d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009f50:	0f b7 c0             	movzx  eax,ax
c0009f53:	3d 60 08 00 00       	cmp    eax,0x860
c0009f58:	76 0a                	jbe    c0009f64 <tcp_recved+0x70>
c0009f5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f5e:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c0009f64:	83 ec 0c             	sub    esp,0xc
c0009f67:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f6b:	e8 a8 fe ff ff       	call   c0009e18 <tcp_update_rcv_ann_wnd>
c0009f70:	83 c4 10             	add    esp,0x10
c0009f73:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009f77:	81 7c 24 1c 17 02 00 00 	cmp    DWORD PTR [esp+0x1c],0x217
c0009f7f:	7e 23                	jle    c0009fa4 <tcp_recved+0xb0>
c0009f81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f85:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0009f88:	83 c8 02             	or     eax,0x2
c0009f8b:	88 c2                	mov    dl,al
c0009f8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f91:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0009f94:	83 ec 0c             	sub    esp,0xc
c0009f97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f9b:	e8 84 60 00 00       	call   c0010024 <tcp_output>
c0009fa0:	83 c4 10             	add    esp,0x10
c0009fa3:	90                   	nop
c0009fa4:	90                   	nop
c0009fa5:	83 c4 2c             	add    esp,0x2c
c0009fa8:	c3                   	ret    
c0009fa9:	8d 76 00             	lea    esi,[esi+0x0]

c0009fac <tcp_new_port>:
c0009fac:	83 ec 10             	sub    esp,0x10
c0009faf:	90                   	nop
c0009fb0:	66 a1 a0 3e 03 c0    	mov    ax,ds:0xc0033ea0
c0009fb6:	8d 50 01             	lea    edx,[eax+0x1]
c0009fb9:	66 89 15 a0 3e 03 c0 	mov    WORD PTR ds:0xc0033ea0,dx
c0009fc0:	0f b7 c0             	movzx  eax,ax
c0009fc3:	3d ff ff 00 00       	cmp    eax,0xffff
c0009fc8:	75 0a                	jne    c0009fd4 <tcp_new_port+0x28>
c0009fca:	66 c7 05 a0 3e 03 c0 00 c0 	mov    WORD PTR ds:0xc0033ea0,0xc000
c0009fd3:	90                   	nop
c0009fd4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009fdc:	eb 4a                	jmp    c000a028 <tcp_new_port+0x7c>
c0009fde:	66 90                	xchg   ax,ax
c0009fe0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009fe4:	8b 04 85 80 06 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf980]
c0009feb:	8b 00                	mov    eax,DWORD PTR [eax]
c0009fed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ff1:	eb 29                	jmp    c000a01c <tcp_new_port+0x70>
c0009ff3:	90                   	nop
c0009ff4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ff8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0009ffb:	66 a1 a0 3e 03 c0    	mov    ax,ds:0xc0033ea0
c000a001:	0f b7 d2             	movzx  edx,dx
c000a004:	0f b7 c0             	movzx  eax,ax
c000a007:	39 c2                	cmp    edx,eax
c000a009:	75 05                	jne    c000a010 <tcp_new_port+0x64>
c000a00b:	eb a3                	jmp    c0009fb0 <tcp_new_port+0x4>
c000a00d:	8d 76 00             	lea    esi,[esi+0x0]
c000a010:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a014:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a017:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a01b:	90                   	nop
c000a01c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000a021:	75 d1                	jne    c0009ff4 <tcp_new_port+0x48>
c000a023:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000a028:	83 7c 24 0c 03       	cmp    DWORD PTR [esp+0xc],0x3
c000a02d:	7e b1                	jle    c0009fe0 <tcp_new_port+0x34>
c000a02f:	66 a1 a0 3e 03 c0    	mov    ax,ds:0xc0033ea0
c000a035:	83 c4 10             	add    esp,0x10
c000a038:	c3                   	ret    
c000a039:	8d 76 00             	lea    esi,[esi+0x0]

c000a03c <tcp_bind>:
c000a03c:	83 ec 2c             	sub    esp,0x2c
c000a03f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a043:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000a048:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000a050:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a054:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a057:	85 c0                	test   eax,eax
c000a059:	74 1d                	je     c000a078 <tcp_bind+0x3c>
c000a05b:	83 ec 08             	sub    esp,0x8
c000a05e:	68 88 03 03 c0       	push   0xc0030388
c000a063:	68 a6 fd 02 c0       	push   0xc002fda6
c000a068:	e8 ab 5d 01 00       	call   c001fe18 <CPrintf>
c000a06d:	83 c4 10             	add    esp,0x10
c000a070:	b0 fa                	mov    al,0xfa
c000a072:	e9 f1 00 00 00       	jmp    c000a168 <tcp_bind+0x12c>
c000a077:	90                   	nop
c000a078:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000a07d:	85 c0                	test   eax,eax
c000a07f:	75 0b                	jne    c000a08c <tcp_bind+0x50>
c000a081:	e8 26 ff ff ff       	call   c0009fac <tcp_new_port>
c000a086:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000a08b:	90                   	nop
c000a08c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a094:	eb 7a                	jmp    c000a110 <tcp_bind+0xd4>
c000a096:	66 90                	xchg   ax,ax
c000a098:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a09c:	8b 04 85 80 06 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf980]
c000a0a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0a9:	eb 59                	jmp    c000a104 <tcp_bind+0xc8>
c000a0ab:	90                   	nop
c000a0ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0b0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a0b3:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000a0b8:	0f b7 c0             	movzx  eax,ax
c000a0bb:	39 c2                	cmp    edx,eax
c000a0bd:	75 39                	jne    c000a0f8 <tcp_bind+0xbc>
c000a0bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0c3:	85 c0                	test   eax,eax
c000a0c5:	74 2d                	je     c000a0f4 <tcp_bind+0xb8>
c000a0c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0cb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0cd:	85 c0                	test   eax,eax
c000a0cf:	74 23                	je     c000a0f4 <tcp_bind+0xb8>
c000a0d1:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000a0d6:	74 1c                	je     c000a0f4 <tcp_bind+0xb8>
c000a0d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0de:	85 c0                	test   eax,eax
c000a0e0:	74 12                	je     c000a0f4 <tcp_bind+0xb8>
c000a0e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0e6:	8b 10                	mov    edx,DWORD PTR [eax]
c000a0e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0ec:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0ee:	39 c2                	cmp    edx,eax
c000a0f0:	75 06                	jne    c000a0f8 <tcp_bind+0xbc>
c000a0f2:	66 90                	xchg   ax,ax
c000a0f4:	b0 f8                	mov    al,0xf8
c000a0f6:	eb 70                	jmp    c000a168 <tcp_bind+0x12c>
c000a0f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a103:	90                   	nop
c000a104:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a109:	75 a1                	jne    c000a0ac <tcp_bind+0x70>
c000a10b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a110:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a114:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c000a118:	0f 8c 7a ff ff ff    	jl     c000a098 <tcp_bind+0x5c>
c000a11e:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000a123:	74 17                	je     c000a13c <tcp_bind+0x100>
c000a125:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a129:	8b 00                	mov    eax,DWORD PTR [eax]
c000a12b:	85 c0                	test   eax,eax
c000a12d:	74 0d                	je     c000a13c <tcp_bind+0x100>
c000a12f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a133:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a137:	8b 12                	mov    edx,DWORD PTR [edx]
c000a139:	89 10                	mov    DWORD PTR [eax],edx
c000a13b:	90                   	nop
c000a13c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a140:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a144:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000a148:	8b 15 80 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036880
c000a14e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a152:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a155:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a159:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000a15e:	e8 51 6b 00 00       	call   c0010cb4 <tcp_timer_needed>
c000a163:	b0 00                	mov    al,0x0
c000a165:	8d 76 00             	lea    esi,[esi+0x0]
c000a168:	83 c4 2c             	add    esp,0x2c
c000a16b:	c3                   	ret    

c000a16c <tcp_seg_free>:
c000a16c:	83 ec 0c             	sub    esp,0xc
c000a16f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000a174:	74 32                	je     c000a1a8 <tcp_seg_free+0x3c>
c000a176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a17a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a17d:	85 c0                	test   eax,eax
c000a17f:	74 13                	je     c000a194 <tcp_seg_free+0x28>
c000a181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a185:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a188:	83 ec 0c             	sub    esp,0xc
c000a18b:	50                   	push   eax
c000a18c:	e8 63 e3 ff ff       	call   c00084f4 <pbuf_free>
c000a191:	83 c4 10             	add    esp,0x10
c000a194:	83 ec 08             	sub    esp,0x8
c000a197:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a19b:	6a 04                	push   0x4
c000a19d:	e8 96 da ff ff       	call   c0007c38 <memp_free>
c000a1a2:	83 c4 10             	add    esp,0x10
c000a1a5:	8d 76 00             	lea    esi,[esi+0x0]
c000a1a8:	90                   	nop
c000a1a9:	83 c4 0c             	add    esp,0xc
c000a1ac:	c3                   	ret    
c000a1ad:	8d 76 00             	lea    esi,[esi+0x0]

c000a1b0 <tcp_segs_free>:
c000a1b0:	83 ec 1c             	sub    esp,0x1c
c000a1b3:	eb 27                	jmp    c000a1dc <tcp_segs_free+0x2c>
c000a1b5:	8d 76 00             	lea    esi,[esi+0x0]
c000a1b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a1bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000a1be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a1c2:	83 ec 0c             	sub    esp,0xc
c000a1c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1c9:	e8 9e ff ff ff       	call   c000a16c <tcp_seg_free>
c000a1ce:	83 c4 10             	add    esp,0x10
c000a1d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a1d9:	8d 76 00             	lea    esi,[esi+0x0]
c000a1dc:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000a1e1:	75 d5                	jne    c000a1b8 <tcp_segs_free+0x8>
c000a1e3:	90                   	nop
c000a1e4:	83 c4 1c             	add    esp,0x1c
c000a1e7:	c3                   	ret    

c000a1e8 <tcp_setprio>:
c000a1e8:	83 ec 04             	sub    esp,0x4
c000a1eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1ef:	88 04 24             	mov    BYTE PTR [esp],al
c000a1f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a1f6:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a1f9:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000a1fc:	90                   	nop
c000a1fd:	83 c4 04             	add    esp,0x4
c000a200:	c3                   	ret    
c000a201:	8d 76 00             	lea    esi,[esi+0x0]

c000a204 <tcp_seg_copy>:
c000a204:	83 ec 1c             	sub    esp,0x1c
c000a207:	83 ec 0c             	sub    esp,0xc
c000a20a:	6a 04                	push   0x4
c000a20c:	e8 fb d8 ff ff       	call   c0007b0c <memp_malloc>
c000a211:	83 c4 10             	add    esp,0x10
c000a214:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a218:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a21d:	75 09                	jne    c000a228 <tcp_seg_copy+0x24>
c000a21f:	b8 00 00 00 00       	mov    eax,0x0
c000a224:	eb 2e                	jmp    c000a254 <tcp_seg_copy+0x50>
c000a226:	66 90                	xchg   ax,ax
c000a228:	83 ec 04             	sub    esp,0x4
c000a22b:	6a 10                	push   0x10
c000a22d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a231:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a235:	e8 40 61 ff ff       	call   c000037a <memcpy>
c000a23a:	83 c4 10             	add    esp,0x10
c000a23d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a241:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a244:	83 ec 0c             	sub    esp,0xc
c000a247:	50                   	push   eax
c000a248:	e8 af ea ff ff       	call   c0008cfc <pbuf_ref>
c000a24d:	83 c4 10             	add    esp,0x10
c000a250:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a254:	83 c4 1c             	add    esp,0x1c
c000a257:	c3                   	ret    

c000a258 <tcp_arg>:
c000a258:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a25c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a260:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a263:	90                   	nop
c000a264:	c3                   	ret    
c000a265:	8d 76 00             	lea    esi,[esi+0x0]

c000a268 <tcp_recv>:
c000a268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a26c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a270:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
c000a276:	90                   	nop
c000a277:	c3                   	ret    

c000a278 <tcp_sent>:
c000a278:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a27c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a280:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c000a286:	90                   	nop
c000a287:	c3                   	ret    

c000a288 <tcp_err>:
c000a288:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a28c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a290:	89 90 98 00 00 00    	mov    DWORD PTR [eax+0x98],edx
c000a296:	90                   	nop
c000a297:	c3                   	ret    

c000a298 <tcp_accept>:
c000a298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a29c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a2a0:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000a2a3:	90                   	nop
c000a2a4:	c3                   	ret    
c000a2a5:	8d 76 00             	lea    esi,[esi+0x0]

c000a2a8 <tcp_poll>:
c000a2a8:	83 ec 04             	sub    esp,0x4
c000a2ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2af:	88 04 24             	mov    BYTE PTR [esp],al
c000a2b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a2b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a2ba:	89 90 94 00 00 00    	mov    DWORD PTR [eax+0x94],edx
c000a2c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a2c4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a2c7:	88 50 39             	mov    BYTE PTR [eax+0x39],dl
c000a2ca:	90                   	nop
c000a2cb:	83 c4 04             	add    esp,0x4
c000a2ce:	c3                   	ret    
c000a2cf:	90                   	nop

c000a2d0 <tcp_pcb_purge>:
c000a2d0:	83 ec 0c             	sub    esp,0xc
c000a2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2d7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2da:	85 c0                	test   eax,eax
c000a2dc:	0f 84 ca 00 00 00    	je     c000a3ac <tcp_pcb_purge+0xdc>
c000a2e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2e6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2e9:	83 f8 0a             	cmp    eax,0xa
c000a2ec:	0f 84 ba 00 00 00    	je     c000a3ac <tcp_pcb_purge+0xdc>
c000a2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2f6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2f9:	83 f8 01             	cmp    eax,0x1
c000a2fc:	0f 84 aa 00 00 00    	je     c000a3ac <tcp_pcb_purge+0xdc>
c000a302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a306:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a30c:	85 c0                	test   eax,eax
c000a30e:	74 24                	je     c000a334 <tcp_pcb_purge+0x64>
c000a310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a314:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a31a:	83 ec 0c             	sub    esp,0xc
c000a31d:	50                   	push   eax
c000a31e:	e8 d1 e1 ff ff       	call   c00084f4 <pbuf_free>
c000a323:	83 c4 10             	add    esp,0x10
c000a326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a32a:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000a334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a338:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a33e:	83 ec 0c             	sub    esp,0xc
c000a341:	50                   	push   eax
c000a342:	e8 69 fe ff ff       	call   c000a1b0 <tcp_segs_free>
c000a347:	83 c4 10             	add    esp,0x10
c000a34a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a34e:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a35c:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000a362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a366:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000a369:	83 ec 0c             	sub    esp,0xc
c000a36c:	50                   	push   eax
c000a36d:	e8 3e fe ff ff       	call   c000a1b0 <tcp_segs_free>
c000a372:	83 c4 10             	add    esp,0x10
c000a375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a379:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a37c:	83 ec 0c             	sub    esp,0xc
c000a37f:	50                   	push   eax
c000a380:	e8 2b fe ff ff       	call   c000a1b0 <tcp_segs_free>
c000a385:	83 c4 10             	add    esp,0x10
c000a388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a38c:	c7 40 78 00 00 00 00 	mov    DWORD PTR [eax+0x78],0x0
c000a393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a397:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c000a39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a39e:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000a3a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3a5:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000a3ab:	90                   	nop
c000a3ac:	90                   	nop
c000a3ad:	83 c4 0c             	add    esp,0xc
c000a3b0:	c3                   	ret    
c000a3b1:	8d 76 00             	lea    esi,[esi+0x0]

c000a3b4 <tcp_slowtmr>:
c000a3b4:	57                   	push   edi
c000a3b5:	56                   	push   esi
c000a3b6:	53                   	push   ebx
c000a3b7:	83 ec 20             	sub    esp,0x20
c000a3ba:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a3bf:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000a3c4:	83 c0 01             	add    eax,0x1
c000a3c7:	a3 74 68 03 c0       	mov    ds:0xc0036874,eax
c000a3cc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a3d4:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a3d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a3dd:	e9 16 06 00 00       	jmp    c000a9f8 <tcp_slowtmr+0x644>
c000a3e2:	66 90                	xchg   ax,ax
c000a3e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3e8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a3eb:	85 c0                	test   eax,eax
c000a3ed:	75 15                	jne    c000a404 <tcp_slowtmr+0x50>
c000a3ef:	83 ec 08             	sub    esp,0x8
c000a3f2:	68 b0 03 03 c0       	push   0xc00303b0
c000a3f7:	68 a6 fd 02 c0       	push   0xc002fda6
c000a3fc:	e8 17 5a 01 00       	call   c001fe18 <CPrintf>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a408:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a40b:	83 f8 01             	cmp    eax,0x1
c000a40e:	75 18                	jne    c000a428 <tcp_slowtmr+0x74>
c000a410:	83 ec 08             	sub    esp,0x8
c000a413:	68 dc 03 03 c0       	push   0xc00303dc
c000a418:	68 a6 fd 02 c0       	push   0xc002fda6
c000a41d:	e8 f6 59 01 00       	call   c001fe18 <CPrintf>
c000a422:	83 c4 10             	add    esp,0x10
c000a425:	8d 76 00             	lea    esi,[esi+0x0]
c000a428:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a42c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a42f:	83 f8 0a             	cmp    eax,0xa
c000a432:	75 18                	jne    c000a44c <tcp_slowtmr+0x98>
c000a434:	83 ec 08             	sub    esp,0x8
c000a437:	68 08 04 03 c0       	push   0xc0030408
c000a43c:	68 a6 fd 02 c0       	push   0xc002fda6
c000a441:	e8 d2 59 01 00       	call   c001fe18 <CPrintf>
c000a446:	83 c4 10             	add    esp,0x10
c000a449:	8d 76 00             	lea    esi,[esi+0x0]
c000a44c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a451:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000a456:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a45a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a45d:	83 f8 02             	cmp    eax,0x2
c000a460:	75 22                	jne    c000a484 <tcp_slowtmr+0xd0>
c000a462:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a466:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a469:	0f b6 c0             	movzx  eax,al
c000a46c:	83 f8 06             	cmp    eax,0x6
c000a46f:	75 13                	jne    c000a484 <tcp_slowtmr+0xd0>
c000a471:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a475:	83 c0 01             	add    eax,0x1
c000a478:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a47c:	e9 df 01 00 00       	jmp    c000a660 <tcp_slowtmr+0x2ac>
c000a481:	8d 76 00             	lea    esi,[esi+0x0]
c000a484:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a488:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a48b:	0f b6 c0             	movzx  eax,al
c000a48e:	83 f8 0c             	cmp    eax,0xc
c000a491:	75 11                	jne    c000a4a4 <tcp_slowtmr+0xf0>
c000a493:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a497:	83 c0 01             	add    eax,0x1
c000a49a:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a49e:	e9 bd 01 00 00       	jmp    c000a660 <tcp_slowtmr+0x2ac>
c000a4a3:	90                   	nop
c000a4a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4a8:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a4ae:	0f b6 c0             	movzx  eax,al
c000a4b1:	85 c0                	test   eax,eax
c000a4b3:	0f 84 8f 00 00 00    	je     c000a548 <tcp_slowtmr+0x194>
c000a4b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4bd:	8b 80 a0 00 00 00    	mov    eax,DWORD PTR [eax+0xa0]
c000a4c3:	8d 50 01             	lea    edx,[eax+0x1]
c000a4c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4ca:	89 90 a0 00 00 00    	mov    DWORD PTR [eax+0xa0],edx
c000a4d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4d4:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
c000a4da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4de:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a4e4:	0f b6 c0             	movzx  eax,al
c000a4e7:	83 e8 01             	sub    eax,0x1
c000a4ea:	8a 80 90 06 03 c0    	mov    al,BYTE PTR [eax-0x3ffcf970]
c000a4f0:	0f b6 c0             	movzx  eax,al
c000a4f3:	39 c2                	cmp    edx,eax
c000a4f5:	0f 82 65 01 00 00    	jb     c000a660 <tcp_slowtmr+0x2ac>
c000a4fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4ff:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c000a509:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a50d:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a513:	0f b6 c0             	movzx  eax,al
c000a516:	83 f8 06             	cmp    eax,0x6
c000a519:	77 19                	ja     c000a534 <tcp_slowtmr+0x180>
c000a51b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a51f:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a525:	83 c0 01             	add    eax,0x1
c000a528:	88 c2                	mov    dl,al
c000a52a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a52e:	88 90 a4 00 00 00    	mov    BYTE PTR [eax+0xa4],dl
c000a534:	83 ec 0c             	sub    esp,0xc
c000a537:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a53b:	e8 e8 63 00 00       	call   c0010928 <tcp_zero_window_probe>
c000a540:	83 c4 10             	add    esp,0x10
c000a543:	e9 18 01 00 00       	jmp    c000a660 <tcp_slowtmr+0x2ac>
c000a548:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a54c:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a550:	98                   	cwde   
c000a551:	85 c0                	test   eax,eax
c000a553:	78 13                	js     c000a568 <tcp_slowtmr+0x1b4>
c000a555:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a559:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a55d:	83 c0 01             	add    eax,0x1
c000a560:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a564:	66 89 42 3a          	mov    WORD PTR [edx+0x3a],ax
c000a568:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a56c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a56f:	85 c0                	test   eax,eax
c000a571:	0f 84 e9 00 00 00    	je     c000a660 <tcp_slowtmr+0x2ac>
c000a577:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a57b:	66 8b 50 3a          	mov    dx,WORD PTR [eax+0x3a]
c000a57f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a583:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a586:	0f bf d2             	movsx  edx,dx
c000a589:	98                   	cwde   
c000a58a:	39 c2                	cmp    edx,eax
c000a58c:	0f 8c ce 00 00 00    	jl     c000a660 <tcp_slowtmr+0x2ac>
c000a592:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a596:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a599:	83 f8 02             	cmp    eax,0x2
c000a59c:	74 3a                	je     c000a5d8 <tcp_slowtmr+0x224>
c000a59e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5a2:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000a5a5:	98                   	cwde   
c000a5a6:	c1 f8 03             	sar    eax,0x3
c000a5a9:	0f bf d0             	movsx  edx,ax
c000a5ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5b0:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000a5b4:	98                   	cwde   
c000a5b5:	01 c2                	add    edx,eax
c000a5b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5bb:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a5be:	0f b6 c0             	movzx  eax,al
c000a5c1:	8a 80 98 06 03 c0    	mov    al,BYTE PTR [eax-0x3ffcf968]
c000a5c7:	0f b6 c0             	movzx  eax,al
c000a5ca:	88 c1                	mov    cl,al
c000a5cc:	d3 e2                	shl    edx,cl
c000a5ce:	89 d0                	mov    eax,edx
c000a5d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a5d4:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000a5d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5dc:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000a5e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5e6:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000a5e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a5ed:	66 8b 52 56          	mov    dx,WORD PTR [edx+0x56]
c000a5f1:	0f b7 d8             	movzx  ebx,ax
c000a5f4:	0f b7 ca             	movzx  ecx,dx
c000a5f7:	39 cb                	cmp    ebx,ecx
c000a5f9:	76 05                	jbe    c000a600 <tcp_slowtmr+0x24c>
c000a5fb:	89 d0                	mov    eax,edx
c000a5fd:	8d 76 00             	lea    esi,[esi+0x0]
c000a600:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000a605:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000a60a:	d1 e8                	shr    eax,1
c000a60c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a610:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000a614:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a618:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000a61b:	0f b7 d0             	movzx  edx,ax
c000a61e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a622:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a625:	0f b7 c0             	movzx  eax,ax
c000a628:	01 c0                	add    eax,eax
c000a62a:	39 c2                	cmp    edx,eax
c000a62c:	7d 12                	jge    c000a640 <tcp_slowtmr+0x28c>
c000a62e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a632:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a635:	d1 e0                	shl    eax,1
c000a637:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a63b:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000a63f:	90                   	nop
c000a640:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a644:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a647:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a64b:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000a64f:	83 ec 0c             	sub    esp,0xc
c000a652:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a656:	e8 c9 5f 00 00       	call   c0010624 <tcp_rexmit_rto>
c000a65b:	83 c4 10             	add    esp,0x10
c000a65e:	66 90                	xchg   ax,ax
c000a660:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a664:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a667:	83 f8 06             	cmp    eax,0x6
c000a66a:	75 24                	jne    c000a690 <tcp_slowtmr+0x2dc>
c000a66c:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a672:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a676:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a679:	29 c2                	sub    edx,eax
c000a67b:	89 d0                	mov    eax,edx
c000a67d:	83 f8 28             	cmp    eax,0x28
c000a680:	76 0e                	jbe    c000a690 <tcp_slowtmr+0x2dc>
c000a682:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a686:	83 c0 01             	add    eax,0x1
c000a689:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a68d:	8d 76 00             	lea    esi,[esi+0x0]
c000a690:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a694:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000a697:	0f b6 c0             	movzx  eax,al
c000a69a:	83 e0 08             	and    eax,0x8
c000a69d:	0f 84 e1 00 00 00    	je     c000a784 <tcp_slowtmr+0x3d0>
c000a6a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a6aa:	83 f8 04             	cmp    eax,0x4
c000a6ad:	74 11                	je     c000a6c0 <tcp_slowtmr+0x30c>
c000a6af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6b3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a6b6:	83 f8 07             	cmp    eax,0x7
c000a6b9:	0f 85 c5 00 00 00    	jne    c000a784 <tcp_slowtmr+0x3d0>
c000a6bf:	90                   	nop
c000a6c0:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a6c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6ca:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a6cd:	89 d1                	mov    ecx,edx
c000a6cf:	29 c1                	sub    ecx,eax
c000a6d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6d5:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [eax+0x9c]
c000a6db:	05 b8 4c 0a 00       	add    eax,0xa4cb8
c000a6e0:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a6e5:	f7 e2                	mul    edx
c000a6e7:	89 d0                	mov    eax,edx
c000a6e9:	c1 e8 05             	shr    eax,0x5
c000a6ec:	39 c1                	cmp    ecx,eax
c000a6ee:	76 18                	jbe    c000a708 <tcp_slowtmr+0x354>
c000a6f0:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a6f4:	83 c0 01             	add    eax,0x1
c000a6f7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a6fb:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c000a6ff:	83 c0 01             	add    eax,0x1
c000a702:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c000a706:	eb 7c                	jmp    c000a784 <tcp_slowtmr+0x3d0>
c000a708:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a70e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a712:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a715:	89 d3                	mov    ebx,edx
c000a717:	29 c3                	sub    ebx,eax
c000a719:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a71d:	8b 88 9c 00 00 00    	mov    ecx,DWORD PTR [eax+0x9c]
c000a723:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a727:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a72d:	0f b6 d0             	movzx  edx,al
c000a730:	89 d0                	mov    eax,edx
c000a732:	c1 e0 03             	shl    eax,0x3
c000a735:	01 d0                	add    eax,edx
c000a737:	c1 e0 03             	shl    eax,0x3
c000a73a:	01 d0                	add    eax,edx
c000a73c:	c1 e0 02             	shl    eax,0x2
c000a73f:	01 d0                	add    eax,edx
c000a741:	c1 e0 05             	shl    eax,0x5
c000a744:	29 d0                	sub    eax,edx
c000a746:	c1 e0 03             	shl    eax,0x3
c000a749:	01 c8                	add    eax,ecx
c000a74b:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a750:	f7 e2                	mul    edx
c000a752:	89 d0                	mov    eax,edx
c000a754:	c1 e8 05             	shr    eax,0x5
c000a757:	39 c3                	cmp    ebx,eax
c000a759:	76 29                	jbe    c000a784 <tcp_slowtmr+0x3d0>
c000a75b:	83 ec 0c             	sub    esp,0xc
c000a75e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a762:	e8 f9 60 00 00       	call   c0010860 <tcp_keepalive>
c000a767:	83 c4 10             	add    esp,0x10
c000a76a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a76e:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a774:	83 c0 01             	add    eax,0x1
c000a777:	88 c2                	mov    dl,al
c000a779:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a77d:	88 90 a5 00 00 00    	mov    BYTE PTR [eax+0xa5],dl
c000a783:	90                   	nop
c000a784:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a788:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a78e:	85 c0                	test   eax,eax
c000a790:	74 4e                	je     c000a7e0 <tcp_slowtmr+0x42c>
c000a792:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a798:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a79c:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a79f:	89 d1                	mov    ecx,edx
c000a7a1:	29 c1                	sub    ecx,eax
c000a7a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7a7:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a7aa:	0f bf d0             	movsx  edx,ax
c000a7ad:	89 d0                	mov    eax,edx
c000a7af:	01 c0                	add    eax,eax
c000a7b1:	01 d0                	add    eax,edx
c000a7b3:	01 c0                	add    eax,eax
c000a7b5:	39 c1                	cmp    ecx,eax
c000a7b7:	72 27                	jb     c000a7e0 <tcp_slowtmr+0x42c>
c000a7b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7bd:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a7c3:	83 ec 0c             	sub    esp,0xc
c000a7c6:	50                   	push   eax
c000a7c7:	e8 e4 f9 ff ff       	call   c000a1b0 <tcp_segs_free>
c000a7cc:	83 c4 10             	add    esp,0x10
c000a7cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7d3:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a7dd:	8d 76 00             	lea    esi,[esi+0x0]
c000a7e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7e4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a7e7:	83 f8 03             	cmp    eax,0x3
c000a7ea:	75 24                	jne    c000a810 <tcp_slowtmr+0x45c>
c000a7ec:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a7f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7f6:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a7f9:	29 c2                	sub    edx,eax
c000a7fb:	89 d0                	mov    eax,edx
c000a7fd:	83 f8 28             	cmp    eax,0x28
c000a800:	76 0e                	jbe    c000a810 <tcp_slowtmr+0x45c>
c000a802:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a806:	83 c0 01             	add    eax,0x1
c000a809:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a80d:	8d 76 00             	lea    esi,[esi+0x0]
c000a810:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a814:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a817:	83 f8 09             	cmp    eax,0x9
c000a81a:	75 24                	jne    c000a840 <tcp_slowtmr+0x48c>
c000a81c:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a826:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a829:	29 c2                	sub    edx,eax
c000a82b:	89 d0                	mov    eax,edx
c000a82d:	3d f0 00 00 00       	cmp    eax,0xf0
c000a832:	76 0c                	jbe    c000a840 <tcp_slowtmr+0x48c>
c000a834:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a838:	83 c0 01             	add    eax,0x1
c000a83b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a83f:	90                   	nop
c000a840:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a845:	85 c0                	test   eax,eax
c000a847:	0f 84 13 01 00 00    	je     c000a960 <tcp_slowtmr+0x5ac>
c000a84d:	83 ec 0c             	sub    esp,0xc
c000a850:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a854:	e8 77 fa ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000a859:	83 c4 10             	add    esp,0x10
c000a85c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a861:	74 31                	je     c000a894 <tcp_slowtmr+0x4e0>
c000a863:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a868:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a86c:	75 16                	jne    c000a884 <tcp_slowtmr+0x4d0>
c000a86e:	83 ec 08             	sub    esp,0x8
c000a871:	68 38 04 03 c0       	push   0xc0030438
c000a876:	68 a6 fd 02 c0       	push   0xc002fda6
c000a87b:	e8 98 55 01 00       	call   c001fe18 <CPrintf>
c000a880:	83 c4 10             	add    esp,0x10
c000a883:	90                   	nop
c000a884:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a888:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a88b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a88f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a892:	eb 2c                	jmp    c000a8c0 <tcp_slowtmr+0x50c>
c000a894:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a899:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a89d:	74 15                	je     c000a8b4 <tcp_slowtmr+0x500>
c000a89f:	83 ec 08             	sub    esp,0x8
c000a8a2:	68 64 04 03 c0       	push   0xc0030464
c000a8a7:	68 a6 fd 02 c0       	push   0xc002fda6
c000a8ac:	e8 67 55 01 00       	call   c001fe18 <CPrintf>
c000a8b1:	83 c4 10             	add    esp,0x10
c000a8b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a8bb:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000a8c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8c4:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a8ca:	85 c0                	test   eax,eax
c000a8cc:	74 1e                	je     c000a8ec <tcp_slowtmr+0x538>
c000a8ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d2:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a8d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8dc:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a8df:	83 ec 08             	sub    esp,0x8
c000a8e2:	6a f6                	push   0xfffffff6
c000a8e4:	52                   	push   edx
c000a8e5:	ff d0                	call   eax
c000a8e7:	83 c4 10             	add    esp,0x10
c000a8ea:	66 90                	xchg   ax,ax
c000a8ec:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000a8f1:	85 c0                	test   eax,eax
c000a8f3:	74 3f                	je     c000a934 <tcp_slowtmr+0x580>
c000a8f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8f9:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000a8fd:	0f b7 f0             	movzx  esi,ax
c000a900:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a904:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a907:	0f b7 d8             	movzx  ebx,ax
c000a90a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a90e:	8d 78 04             	lea    edi,[eax+0x4]
c000a911:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a915:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a919:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a91c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a920:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000a923:	83 ec 08             	sub    esp,0x8
c000a926:	56                   	push   esi
c000a927:	53                   	push   ebx
c000a928:	57                   	push   edi
c000a929:	51                   	push   ecx
c000a92a:	52                   	push   edx
c000a92b:	50                   	push   eax
c000a92c:	e8 7f 5b 00 00       	call   c00104b0 <tcp_rst>
c000a931:	83 c4 20             	add    esp,0x20
c000a934:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a938:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a93c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a940:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a943:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a947:	83 ec 08             	sub    esp,0x8
c000a94a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a94e:	6a 02                	push   0x2
c000a950:	e8 e3 d2 ff ff       	call   c0007c38 <memp_free>
c000a955:	83 c4 10             	add    esp,0x10
c000a958:	e9 9b 00 00 00       	jmp    c000a9f8 <tcp_slowtmr+0x644>
c000a95d:	8d 76 00             	lea    esi,[esi+0x0]
c000a960:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a964:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a968:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a96c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a96f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a973:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a977:	8a 40 38             	mov    al,BYTE PTR [eax+0x38]
c000a97a:	83 c0 01             	add    eax,0x1
c000a97d:	88 c2                	mov    dl,al
c000a97f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a983:	88 50 38             	mov    BYTE PTR [eax+0x38],dl
c000a986:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a98a:	8a 50 38             	mov    dl,BYTE PTR [eax+0x38]
c000a98d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a991:	8a 40 39             	mov    al,BYTE PTR [eax+0x39]
c000a994:	0f b6 d2             	movzx  edx,dl
c000a997:	0f b6 c0             	movzx  eax,al
c000a99a:	39 c2                	cmp    edx,eax
c000a99c:	72 5a                	jb     c000a9f8 <tcp_slowtmr+0x644>
c000a99e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9a2:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000a9a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9aa:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a9b0:	85 c0                	test   eax,eax
c000a9b2:	74 24                	je     c000a9d8 <tcp_slowtmr+0x624>
c000a9b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9b8:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a9be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a9c2:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a9c5:	83 ec 08             	sub    esp,0x8
c000a9c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a9cc:	52                   	push   edx
c000a9cd:	ff d0                	call   eax
c000a9cf:	83 c4 10             	add    esp,0x10
c000a9d2:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000a9d6:	eb 08                	jmp    c000a9e0 <tcp_slowtmr+0x62c>
c000a9d8:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a9dd:	8d 76 00             	lea    esi,[esi+0x0]
c000a9e0:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c000a9e5:	85 c0                	test   eax,eax
c000a9e7:	75 0f                	jne    c000a9f8 <tcp_slowtmr+0x644>
c000a9e9:	83 ec 0c             	sub    esp,0xc
c000a9ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a9f0:	e8 2f 56 00 00       	call   c0010024 <tcp_output>
c000a9f5:	83 c4 10             	add    esp,0x10
c000a9f8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a9fd:	0f 85 e1 f9 ff ff    	jne    c000a3e4 <tcp_slowtmr+0x30>
c000aa03:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000aa0b:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000aa10:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000aa14:	e9 0b 01 00 00       	jmp    c000ab24 <tcp_slowtmr+0x770>
c000aa19:	8d 76 00             	lea    esi,[esi+0x0]
c000aa1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa23:	83 f8 0a             	cmp    eax,0xa
c000aa26:	74 18                	je     c000aa40 <tcp_slowtmr+0x68c>
c000aa28:	83 ec 08             	sub    esp,0x8
c000aa2b:	68 90 04 03 c0       	push   0xc0030490
c000aa30:	68 a6 fd 02 c0       	push   0xc002fda6
c000aa35:	e8 de 53 01 00       	call   c001fe18 <CPrintf>
c000aa3a:	83 c4 10             	add    esp,0x10
c000aa3d:	8d 76 00             	lea    esi,[esi+0x0]
c000aa40:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000aa45:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000aa4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa4f:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000aa52:	29 c2                	sub    edx,eax
c000aa54:	89 d0                	mov    eax,edx
c000aa56:	3d f0 00 00 00       	cmp    eax,0xf0
c000aa5b:	76 0b                	jbe    c000aa68 <tcp_slowtmr+0x6b4>
c000aa5d:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000aa61:	83 c0 01             	add    eax,0x1
c000aa64:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000aa68:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000aa6d:	85 c0                	test   eax,eax
c000aa6f:	0f 84 9b 00 00 00    	je     c000ab10 <tcp_slowtmr+0x75c>
c000aa75:	83 ec 0c             	sub    esp,0xc
c000aa78:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa7c:	e8 4f f8 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000aa81:	83 c4 10             	add    esp,0x10
c000aa84:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000aa89:	74 31                	je     c000aabc <tcp_slowtmr+0x708>
c000aa8b:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000aa90:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000aa94:	75 16                	jne    c000aaac <tcp_slowtmr+0x6f8>
c000aa96:	83 ec 08             	sub    esp,0x8
c000aa99:	68 c0 04 03 c0       	push   0xc00304c0
c000aa9e:	68 a6 fd 02 c0       	push   0xc002fda6
c000aaa3:	e8 70 53 01 00       	call   c001fe18 <CPrintf>
c000aaa8:	83 c4 10             	add    esp,0x10
c000aaab:	90                   	nop
c000aaac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aab0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000aab3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aab7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aaba:	eb 2c                	jmp    c000aae8 <tcp_slowtmr+0x734>
c000aabc:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000aac1:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000aac5:	74 15                	je     c000aadc <tcp_slowtmr+0x728>
c000aac7:	83 ec 08             	sub    esp,0x8
c000aaca:	68 e8 04 03 c0       	push   0xc00304e8
c000aacf:	68 a6 fd 02 c0       	push   0xc002fda6
c000aad4:	e8 3f 53 01 00       	call   c001fe18 <CPrintf>
c000aad9:	83 c4 10             	add    esp,0x10
c000aadc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aae0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aae3:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000aae8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aaec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaf0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aaf4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aaf7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ab02:	6a 02                	push   0x2
c000ab04:	e8 2f d1 ff ff       	call   c0007c38 <memp_free>
c000ab09:	83 c4 10             	add    esp,0x10
c000ab0c:	eb 16                	jmp    c000ab24 <tcp_slowtmr+0x770>
c000ab0e:	66 90                	xchg   ax,ax
c000ab10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab14:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab1c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab1f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab23:	90                   	nop
c000ab24:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ab29:	0f 85 ed fe ff ff    	jne    c000aa1c <tcp_slowtmr+0x668>
c000ab2f:	90                   	nop
c000ab30:	83 c4 20             	add    esp,0x20
c000ab33:	5b                   	pop    ebx
c000ab34:	5e                   	pop    esi
c000ab35:	5f                   	pop    edi
c000ab36:	c3                   	ret    
c000ab37:	90                   	nop

c000ab38 <tcp_pcb_remove>:
c000ab38:	83 ec 0c             	sub    esp,0xc
c000ab3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab3f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab41:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000ab45:	75 11                	jne    c000ab58 <tcp_pcb_remove+0x20>
c000ab47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab4d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ab50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab54:	89 10                	mov    DWORD PTR [eax],edx
c000ab56:	eb 4c                	jmp    c000aba4 <tcp_pcb_remove+0x6c>
c000ab58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab5c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab5e:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ab63:	eb 33                	jmp    c000ab98 <tcp_pcb_remove+0x60>
c000ab65:	8d 76 00             	lea    esi,[esi+0x0]
c000ab68:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab6d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab70:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000ab74:	75 12                	jne    c000ab88 <tcp_pcb_remove+0x50>
c000ab76:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab7f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ab82:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ab85:	eb 1d                	jmp    c000aba4 <tcp_pcb_remove+0x6c>
c000ab87:	90                   	nop
c000ab88:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab8d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab90:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ab95:	8d 76 00             	lea    esi,[esi+0x0]
c000ab98:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab9d:	85 c0                	test   eax,eax
c000ab9f:	75 c7                	jne    c000ab68 <tcp_pcb_remove+0x30>
c000aba1:	8d 76 00             	lea    esi,[esi+0x0]
c000aba4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aba8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000abaf:	83 ec 0c             	sub    esp,0xc
c000abb2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000abb6:	e8 15 f7 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000abbb:	83 c4 10             	add    esp,0x10
c000abbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abc2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000abc5:	83 f8 0a             	cmp    eax,0xa
c000abc8:	74 3e                	je     c000ac08 <tcp_pcb_remove+0xd0>
c000abca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000abd1:	83 f8 01             	cmp    eax,0x1
c000abd4:	74 32                	je     c000ac08 <tcp_pcb_remove+0xd0>
c000abd6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abda:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000abdd:	0f b6 c0             	movzx  eax,al
c000abe0:	83 e0 01             	and    eax,0x1
c000abe3:	74 23                	je     c000ac08 <tcp_pcb_remove+0xd0>
c000abe5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abe9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000abec:	83 c8 02             	or     eax,0x2
c000abef:	88 c2                	mov    dl,al
c000abf1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abf5:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000abf8:	83 ec 0c             	sub    esp,0xc
c000abfb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000abff:	e8 20 54 00 00       	call   c0010024 <tcp_output>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac0c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ac0f:	83 f8 01             	cmp    eax,0x1
c000ac12:	74 64                	je     c000ac78 <tcp_pcb_remove+0x140>
c000ac14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac18:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ac1b:	85 c0                	test   eax,eax
c000ac1d:	74 15                	je     c000ac34 <tcp_pcb_remove+0xfc>
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	68 8e 05 03 c0       	push   0xc003058e
c000ac27:	68 a6 fd 02 c0       	push   0xc002fda6
c000ac2c:	e8 e7 51 01 00       	call   c001fe18 <CPrintf>
c000ac31:	83 c4 10             	add    esp,0x10
c000ac34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac38:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ac3b:	85 c0                	test   eax,eax
c000ac3d:	74 15                	je     c000ac54 <tcp_pcb_remove+0x11c>
c000ac3f:	83 ec 08             	sub    esp,0x8
c000ac42:	68 a6 05 03 c0       	push   0xc00305a6
c000ac47:	68 a6 fd 02 c0       	push   0xc002fda6
c000ac4c:	e8 c7 51 01 00       	call   c001fe18 <CPrintf>
c000ac51:	83 c4 10             	add    esp,0x10
c000ac54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac58:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ac5e:	85 c0                	test   eax,eax
c000ac60:	74 16                	je     c000ac78 <tcp_pcb_remove+0x140>
c000ac62:	83 ec 08             	sub    esp,0x8
c000ac65:	68 bf 05 03 c0       	push   0xc00305bf
c000ac6a:	68 a6 fd 02 c0       	push   0xc002fda6
c000ac6f:	e8 a4 51 01 00       	call   c001fe18 <CPrintf>
c000ac74:	83 c4 10             	add    esp,0x10
c000ac77:	90                   	nop
c000ac78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac7c:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ac83:	90                   	nop
c000ac84:	83 c4 0c             	add    esp,0xc
c000ac87:	c3                   	ret    

c000ac88 <tcp_close_shutdown>:
c000ac88:	57                   	push   edi
c000ac89:	56                   	push   esi
c000ac8a:	53                   	push   ebx
c000ac8b:	83 ec 20             	sub    esp,0x20
c000ac8e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ac92:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ac96:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ac9b:	85 c0                	test   eax,eax
c000ac9d:	0f 84 41 01 00 00    	je     c000ade4 <tcp_close_shutdown+0x15c>
c000aca3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aca7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000acaa:	83 f8 01             	cmp    eax,0x1
c000acad:	0f 84 31 01 00 00    	je     c000ade4 <tcp_close_shutdown+0x15c>
c000acb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acb7:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000acbd:	85 c0                	test   eax,eax
c000acbf:	75 17                	jne    c000acd8 <tcp_close_shutdown+0x50>
c000acc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acc5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000acc8:	0f b7 c0             	movzx  eax,ax
c000accb:	3d 60 08 00 00       	cmp    eax,0x860
c000acd0:	0f 84 0e 01 00 00    	je     c000ade4 <tcp_close_shutdown+0x15c>
c000acd6:	66 90                	xchg   ax,ax
c000acd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acdc:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000acdf:	0f b6 c0             	movzx  eax,al
c000ace2:	83 e0 10             	and    eax,0x10
c000ace5:	75 15                	jne    c000acfc <tcp_close_shutdown+0x74>
c000ace7:	83 ec 08             	sub    esp,0x8
c000acea:	68 d6 05 03 c0       	push   0xc00305d6
c000acef:	68 a6 fd 02 c0       	push   0xc002fda6
c000acf4:	e8 1f 51 01 00       	call   c001fe18 <CPrintf>
c000acf9:	83 c4 10             	add    esp,0x10
c000acfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad00:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ad04:	0f b7 f0             	movzx  esi,ax
c000ad07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad0b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ad0e:	0f b7 d8             	movzx  ebx,ax
c000ad11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad15:	8d 78 04             	lea    edi,[eax+0x4]
c000ad18:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ad1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad20:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ad23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad27:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000ad2a:	83 ec 08             	sub    esp,0x8
c000ad2d:	56                   	push   esi
c000ad2e:	53                   	push   ebx
c000ad2f:	57                   	push   edi
c000ad30:	51                   	push   ecx
c000ad31:	52                   	push   edx
c000ad32:	50                   	push   eax
c000ad33:	e8 78 57 00 00       	call   c00104b0 <tcp_rst>
c000ad38:	83 c4 20             	add    esp,0x20
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad42:	e8 89 f5 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000ad47:	83 c4 10             	add    esp,0x10
c000ad4a:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ad4f:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ad53:	75 0f                	jne    c000ad64 <tcp_close_shutdown+0xdc>
c000ad55:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ad5a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ad5d:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000ad62:	eb 48                	jmp    c000adac <tcp_close_shutdown+0x124>
c000ad64:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ad69:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ad6e:	eb 30                	jmp    c000ada0 <tcp_close_shutdown+0x118>
c000ad70:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ad75:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ad78:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ad7c:	75 12                	jne    c000ad90 <tcp_close_shutdown+0x108>
c000ad7e:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ad83:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ad87:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ad8a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ad8d:	eb 1d                	jmp    c000adac <tcp_close_shutdown+0x124>
c000ad8f:	90                   	nop
c000ad90:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ad95:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ad98:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ad9d:	8d 76 00             	lea    esi,[esi+0x0]
c000ada0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ada5:	85 c0                	test   eax,eax
c000ada7:	75 c7                	jne    c000ad70 <tcp_close_shutdown+0xe8>
c000ada9:	8d 76 00             	lea    esi,[esi+0x0]
c000adac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adb0:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000adb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adbb:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000adc2:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000adc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adcc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000adcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000add3:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000add8:	e8 d7 5e 00 00       	call   c0010cb4 <tcp_timer_needed>
c000addd:	b0 00                	mov    al,0x0
c000addf:	e9 f4 01 00 00       	jmp    c000afd8 <tcp_close_shutdown+0x350>
c000ade4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ade8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000adeb:	83 f8 07             	cmp    eax,0x7
c000adee:	0f 87 a4 01 00 00    	ja     c000af98 <tcp_close_shutdown+0x310>
c000adf4:	8b 04 85 60 06 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf9a0]
c000adfb:	ff e0                	jmp    eax
c000adfd:	8d 76 00             	lea    esi,[esi+0x0]
c000ae00:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ae05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae09:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ae0c:	0f b7 c0             	movzx  eax,ax
c000ae0f:	85 c0                	test   eax,eax
c000ae11:	74 71                	je     c000ae84 <tcp_close_shutdown+0x1fc>
c000ae13:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ae18:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ae1c:	75 12                	jne    c000ae30 <tcp_close_shutdown+0x1a8>
c000ae1e:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ae23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae26:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000ae2b:	eb 4b                	jmp    c000ae78 <tcp_close_shutdown+0x1f0>
c000ae2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ae30:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ae35:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ae3a:	eb 30                	jmp    c000ae6c <tcp_close_shutdown+0x1e4>
c000ae3c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ae41:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae44:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ae48:	75 12                	jne    c000ae5c <tcp_close_shutdown+0x1d4>
c000ae4a:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ae4f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ae53:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ae56:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ae59:	eb 1d                	jmp    c000ae78 <tcp_close_shutdown+0x1f0>
c000ae5b:	90                   	nop
c000ae5c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ae61:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae64:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ae69:	8d 76 00             	lea    esi,[esi+0x0]
c000ae6c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ae71:	85 c0                	test   eax,eax
c000ae73:	75 c7                	jne    c000ae3c <tcp_close_shutdown+0x1b4>
c000ae75:	8d 76 00             	lea    esi,[esi+0x0]
c000ae78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae7c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ae83:	90                   	nop
c000ae84:	83 ec 08             	sub    esp,0x8
c000ae87:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ae8b:	6a 02                	push   0x2
c000ae8d:	e8 a6 cd ff ff       	call   c0007c38 <memp_free>
c000ae92:	83 c4 10             	add    esp,0x10
c000ae95:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ae9d:	e9 12 01 00 00       	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000aea2:	66 90                	xchg   ax,ax
c000aea4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000aea9:	83 ec 08             	sub    esp,0x8
c000aeac:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aeb0:	68 78 68 03 c0       	push   0xc0036878
c000aeb5:	e8 7e fc ff ff       	call   c000ab38 <tcp_pcb_remove>
c000aeba:	83 c4 10             	add    esp,0x10
c000aebd:	83 ec 08             	sub    esp,0x8
c000aec0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aec4:	6a 03                	push   0x3
c000aec6:	e8 6d cd ff ff       	call   c0007c38 <memp_free>
c000aecb:	83 c4 10             	add    esp,0x10
c000aece:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000aed6:	e9 d9 00 00 00       	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000aedb:	90                   	nop
c000aedc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000aee1:	83 ec 08             	sub    esp,0x8
c000aee4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aee8:	68 70 68 03 c0       	push   0xc0036870
c000aeed:	e8 46 fc ff ff       	call   c000ab38 <tcp_pcb_remove>
c000aef2:	83 c4 10             	add    esp,0x10
c000aef5:	83 ec 08             	sub    esp,0x8
c000aef8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aefc:	6a 02                	push   0x2
c000aefe:	e8 35 cd ff ff       	call   c0007c38 <memp_free>
c000af03:	83 c4 10             	add    esp,0x10
c000af06:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000af0e:	e9 a1 00 00 00       	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000af13:	90                   	nop
c000af14:	83 ec 0c             	sub    esp,0xc
c000af17:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af1b:	e8 54 4d 00 00       	call   c000fc74 <tcp_send_fin>
c000af20:	83 c4 10             	add    esp,0x10
c000af23:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000af27:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000af2c:	85 c0                	test   eax,eax
c000af2e:	75 78                	jne    c000afa8 <tcp_close_shutdown+0x320>
c000af30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af34:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000af3b:	eb 6b                	jmp    c000afa8 <tcp_close_shutdown+0x320>
c000af3d:	8d 76 00             	lea    esi,[esi+0x0]
c000af40:	83 ec 0c             	sub    esp,0xc
c000af43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af47:	e8 28 4d 00 00       	call   c000fc74 <tcp_send_fin>
c000af4c:	83 c4 10             	add    esp,0x10
c000af4f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000af53:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000af58:	85 c0                	test   eax,eax
c000af5a:	75 50                	jne    c000afac <tcp_close_shutdown+0x324>
c000af5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af60:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000af67:	eb 43                	jmp    c000afac <tcp_close_shutdown+0x324>
c000af69:	8d 76 00             	lea    esi,[esi+0x0]
c000af6c:	83 ec 0c             	sub    esp,0xc
c000af6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af73:	e8 fc 4c 00 00       	call   c000fc74 <tcp_send_fin>
c000af78:	83 c4 10             	add    esp,0x10
c000af7b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000af7f:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000af84:	85 c0                	test   eax,eax
c000af86:	75 28                	jne    c000afb0 <tcp_close_shutdown+0x328>
c000af88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af8c:	c7 40 10 09 00 00 00 	mov    DWORD PTR [eax+0x10],0x9
c000af93:	eb 1b                	jmp    c000afb0 <tcp_close_shutdown+0x328>
c000af95:	8d 76 00             	lea    esi,[esi+0x0]
c000af98:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000af9d:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000afa5:	eb 0d                	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000afa7:	90                   	nop
c000afa8:	90                   	nop
c000afa9:	eb 09                	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000afab:	90                   	nop
c000afac:	90                   	nop
c000afad:	eb 05                	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000afaf:	90                   	nop
c000afb0:	90                   	nop
c000afb1:	8d 76 00             	lea    esi,[esi+0x0]
c000afb4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000afb9:	74 19                	je     c000afd4 <tcp_close_shutdown+0x34c>
c000afbb:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000afc0:	85 c0                	test   eax,eax
c000afc2:	75 10                	jne    c000afd4 <tcp_close_shutdown+0x34c>
c000afc4:	83 ec 0c             	sub    esp,0xc
c000afc7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000afcb:	e8 54 50 00 00       	call   c0010024 <tcp_output>
c000afd0:	83 c4 10             	add    esp,0x10
c000afd3:	90                   	nop
c000afd4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000afd8:	83 c4 20             	add    esp,0x20
c000afdb:	5b                   	pop    ebx
c000afdc:	5e                   	pop    esi
c000afdd:	5f                   	pop    edi
c000afde:	c3                   	ret    
c000afdf:	90                   	nop

c000afe0 <tcp_close>:
c000afe0:	83 ec 0c             	sub    esp,0xc
c000afe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000afea:	83 f8 01             	cmp    eax,0x1
c000afed:	74 15                	je     c000b004 <tcp_close+0x24>
c000afef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aff6:	83 c8 10             	or     eax,0x10
c000aff9:	88 c2                	mov    dl,al
c000affb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afff:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b002:	66 90                	xchg   ax,ax
c000b004:	83 ec 08             	sub    esp,0x8
c000b007:	6a 01                	push   0x1
c000b009:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b00d:	e8 76 fc ff ff       	call   c000ac88 <tcp_close_shutdown>
c000b012:	83 c4 10             	add    esp,0x10
c000b015:	83 c4 0c             	add    esp,0xc
c000b018:	c3                   	ret    
c000b019:	8d 76 00             	lea    esi,[esi+0x0]

c000b01c <tcp_recv_null>:
c000b01c:	83 ec 1c             	sub    esp,0x1c
c000b01f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b023:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b027:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b02c:	74 2e                	je     c000b05c <tcp_recv_null+0x40>
c000b02e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b032:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b035:	0f b7 c0             	movzx  eax,ax
c000b038:	83 ec 08             	sub    esp,0x8
c000b03b:	50                   	push   eax
c000b03c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b040:	e8 af ee ff ff       	call   c0009ef4 <tcp_recved>
c000b045:	83 c4 10             	add    esp,0x10
c000b048:	83 ec 0c             	sub    esp,0xc
c000b04b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b04f:	e8 a0 d4 ff ff       	call   c00084f4 <pbuf_free>
c000b054:	83 c4 10             	add    esp,0x10
c000b057:	eb 1f                	jmp    c000b078 <tcp_recv_null+0x5c>
c000b059:	8d 76 00             	lea    esi,[esi+0x0]
c000b05c:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c000b061:	85 c0                	test   eax,eax
c000b063:	75 13                	jne    c000b078 <tcp_recv_null+0x5c>
c000b065:	83 ec 0c             	sub    esp,0xc
c000b068:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b06c:	e8 6f ff ff ff       	call   c000afe0 <tcp_close>
c000b071:	83 c4 10             	add    esp,0x10
c000b074:	eb 06                	jmp    c000b07c <tcp_recv_null+0x60>
c000b076:	66 90                	xchg   ax,ax
c000b078:	b0 00                	mov    al,0x0
c000b07a:	66 90                	xchg   ax,ax
c000b07c:	83 c4 1c             	add    esp,0x1c
c000b07f:	c3                   	ret    

c000b080 <tcp_fasttmr>:
c000b080:	83 ec 1c             	sub    esp,0x1c
c000b083:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000b088:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b08c:	e9 03 01 00 00       	jmp    c000b194 <tcp_fasttmr+0x114>
c000b091:	8d 76 00             	lea    esi,[esi+0x0]
c000b094:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b098:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b09b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b09f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0a3:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b0a9:	85 c0                	test   eax,eax
c000b0ab:	0f 84 8f 00 00 00    	je     c000b140 <tcp_fasttmr+0xc0>
c000b0b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0b5:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000b0bb:	85 c0                	test   eax,eax
c000b0bd:	74 31                	je     c000b0f0 <tcp_fasttmr+0x70>
c000b0bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0c3:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000b0c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b0cd:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000b0d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b0d7:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000b0da:	6a 00                	push   0x0
c000b0dc:	51                   	push   ecx
c000b0dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e1:	52                   	push   edx
c000b0e2:	ff d0                	call   eax
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000b0eb:	eb 23                	jmp    c000b110 <tcp_fasttmr+0x90>
c000b0ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b0f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0f4:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b0fa:	6a 00                	push   0x0
c000b0fc:	50                   	push   eax
c000b0fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b101:	6a 00                	push   0x0
c000b103:	e8 14 ff ff ff       	call   c000b01c <tcp_recv_null>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000b10f:	90                   	nop
c000b110:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000b115:	85 c0                	test   eax,eax
c000b117:	75 13                	jne    c000b12c <tcp_fasttmr+0xac>
c000b119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b11d:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000b127:	eb 17                	jmp    c000b140 <tcp_fasttmr+0xc0>
c000b129:	8d 76 00             	lea    esi,[esi+0x0]
c000b12c:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000b131:	83 f8 f6             	cmp    eax,0xfffffff6
c000b134:	75 0a                	jne    c000b140 <tcp_fasttmr+0xc0>
c000b136:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b13e:	66 90                	xchg   ax,ax
c000b140:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b145:	74 45                	je     c000b18c <tcp_fasttmr+0x10c>
c000b147:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b14b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b14e:	0f b6 c0             	movzx  eax,al
c000b151:	83 e0 01             	and    eax,0x1
c000b154:	74 36                	je     c000b18c <tcp_fasttmr+0x10c>
c000b156:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b15a:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b15d:	83 c8 02             	or     eax,0x2
c000b160:	88 c2                	mov    dl,al
c000b162:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b166:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b169:	83 ec 0c             	sub    esp,0xc
c000b16c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b170:	e8 af 4e 00 00       	call   c0010024 <tcp_output>
c000b175:	83 c4 10             	add    esp,0x10
c000b178:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b17c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b17f:	83 e0 fc             	and    eax,0xfffffffc
c000b182:	88 c2                	mov    dl,al
c000b184:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b188:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b18b:	90                   	nop
c000b18c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b190:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b194:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b199:	0f 85 f5 fe ff ff    	jne    c000b094 <tcp_fasttmr+0x14>
c000b19f:	90                   	nop
c000b1a0:	83 c4 1c             	add    esp,0x1c
c000b1a3:	c3                   	ret    

c000b1a4 <tcp_tmr>:
c000b1a4:	83 ec 0c             	sub    esp,0xc
c000b1a7:	e8 d4 fe ff ff       	call   c000b080 <tcp_fasttmr>
c000b1ac:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000b1b1:	83 c0 01             	add    eax,0x1
c000b1b4:	a2 a0 a8 03 c0       	mov    ds:0xc003a8a0,al
c000b1b9:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000b1be:	0f b6 c0             	movzx  eax,al
c000b1c1:	83 e0 01             	and    eax,0x1
c000b1c4:	74 06                	je     c000b1cc <tcp_tmr+0x28>
c000b1c6:	e8 e9 f1 ff ff       	call   c000a3b4 <tcp_slowtmr>
c000b1cb:	90                   	nop
c000b1cc:	90                   	nop
c000b1cd:	83 c4 0c             	add    esp,0xc
c000b1d0:	c3                   	ret    
c000b1d1:	8d 76 00             	lea    esi,[esi+0x0]

c000b1d4 <tcp_shutdown>:
c000b1d4:	83 ec 0c             	sub    esp,0xc
c000b1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b1de:	83 f8 01             	cmp    eax,0x1
c000b1e1:	75 09                	jne    c000b1ec <tcp_shutdown+0x18>
c000b1e3:	b0 f3                	mov    al,0xf3
c000b1e5:	e9 92 00 00 00       	jmp    c000b27c <tcp_shutdown+0xa8>
c000b1ea:	66 90                	xchg   ax,ax
c000b1ec:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b1f1:	74 49                	je     c000b23c <tcp_shutdown+0x68>
c000b1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f7:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b1fd:	85 c0                	test   eax,eax
c000b1ff:	74 27                	je     c000b228 <tcp_shutdown+0x54>
c000b201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b205:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b20b:	83 ec 0c             	sub    esp,0xc
c000b20e:	50                   	push   eax
c000b20f:	e8 e0 d2 ff ff       	call   c00084f4 <pbuf_free>
c000b214:	83 c4 10             	add    esp,0x10
c000b217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b21b:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000b225:	8d 76 00             	lea    esi,[esi+0x0]
c000b228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b22c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b22f:	83 c8 10             	or     eax,0x10
c000b232:	88 c2                	mov    dl,al
c000b234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b238:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b23b:	90                   	nop
c000b23c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b241:	74 2d                	je     c000b270 <tcp_shutdown+0x9c>
c000b243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b247:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b24a:	83 f8 03             	cmp    eax,0x3
c000b24d:	72 25                	jb     c000b274 <tcp_shutdown+0xa0>
c000b24f:	83 f8 04             	cmp    eax,0x4
c000b252:	76 08                	jbe    c000b25c <tcp_shutdown+0x88>
c000b254:	83 f8 07             	cmp    eax,0x7
c000b257:	75 1b                	jne    c000b274 <tcp_shutdown+0xa0>
c000b259:	8d 76 00             	lea    esi,[esi+0x0]
c000b25c:	83 ec 08             	sub    esp,0x8
c000b25f:	6a 00                	push   0x0
c000b261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b265:	e8 1e fa ff ff       	call   c000ac88 <tcp_close_shutdown>
c000b26a:	83 c4 10             	add    esp,0x10
c000b26d:	eb 0d                	jmp    c000b27c <tcp_shutdown+0xa8>
c000b26f:	90                   	nop
c000b270:	90                   	nop
c000b271:	eb 05                	jmp    c000b278 <tcp_shutdown+0xa4>
c000b273:	90                   	nop
c000b274:	90                   	nop
c000b275:	8d 76 00             	lea    esi,[esi+0x0]
c000b278:	b0 00                	mov    al,0x0
c000b27a:	66 90                	xchg   ax,ax
c000b27c:	83 c4 0c             	add    esp,0xc
c000b27f:	c3                   	ret    

c000b280 <tcp_abandon>:
c000b280:	83 ec 2c             	sub    esp,0x2c
c000b283:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b287:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b28a:	83 f8 01             	cmp    eax,0x1
c000b28d:	75 15                	jne    c000b2a4 <tcp_abandon+0x24>
c000b28f:	83 ec 08             	sub    esp,0x8
c000b292:	68 10 05 03 c0       	push   0xc0030510
c000b297:	68 a6 fd 02 c0       	push   0xc002fda6
c000b29c:	e8 77 4b 01 00       	call   c001fe18 <CPrintf>
c000b2a1:	83 c4 10             	add    esp,0x10
c000b2a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b2ab:	83 f8 0a             	cmp    eax,0xa
c000b2ae:	75 2c                	jne    c000b2dc <tcp_abandon+0x5c>
c000b2b0:	83 ec 08             	sub    esp,0x8
c000b2b3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b2b7:	68 84 68 03 c0       	push   0xc0036884
c000b2bc:	e8 77 f8 ff ff       	call   c000ab38 <tcp_pcb_remove>
c000b2c1:	83 c4 10             	add    esp,0x10
c000b2c4:	83 ec 08             	sub    esp,0x8
c000b2c7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b2cb:	6a 02                	push   0x2
c000b2cd:	e8 66 c9 ff ff       	call   c0007c38 <memp_free>
c000b2d2:	83 c4 10             	add    esp,0x10
c000b2d5:	e9 32 01 00 00       	jmp    c000b40c <tcp_abandon+0x18c>
c000b2da:	66 90                	xchg   ax,ax
c000b2dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2e0:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000b2e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b2e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2eb:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b2ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b2f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000b2f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b2fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b300:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b303:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b307:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b30b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b30e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000b313:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b317:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000b31b:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000b320:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b324:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000b32a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b32e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b332:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000b335:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b339:	83 ec 08             	sub    esp,0x8
c000b33c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b340:	68 70 68 03 c0       	push   0xc0036870
c000b345:	e8 ee f7 ff ff       	call   c000ab38 <tcp_pcb_remove>
c000b34a:	83 c4 10             	add    esp,0x10
c000b34d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b351:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b354:	85 c0                	test   eax,eax
c000b356:	74 14                	je     c000b36c <tcp_abandon+0xec>
c000b358:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b35c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b35f:	83 ec 0c             	sub    esp,0xc
c000b362:	50                   	push   eax
c000b363:	e8 48 ee ff ff       	call   c000a1b0 <tcp_segs_free>
c000b368:	83 c4 10             	add    esp,0x10
c000b36b:	90                   	nop
c000b36c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b370:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b373:	85 c0                	test   eax,eax
c000b375:	74 15                	je     c000b38c <tcp_abandon+0x10c>
c000b377:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b37b:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b37e:	83 ec 0c             	sub    esp,0xc
c000b381:	50                   	push   eax
c000b382:	e8 29 ee ff ff       	call   c000a1b0 <tcp_segs_free>
c000b387:	83 c4 10             	add    esp,0x10
c000b38a:	66 90                	xchg   ax,ax
c000b38c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b390:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b396:	85 c0                	test   eax,eax
c000b398:	74 16                	je     c000b3b0 <tcp_abandon+0x130>
c000b39a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b39e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b3a4:	83 ec 0c             	sub    esp,0xc
c000b3a7:	50                   	push   eax
c000b3a8:	e8 03 ee ff ff       	call   c000a1b0 <tcp_segs_free>
c000b3ad:	83 c4 10             	add    esp,0x10
c000b3b0:	83 ec 08             	sub    esp,0x8
c000b3b3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b3b7:	6a 02                	push   0x2
c000b3b9:	e8 7a c8 ff ff       	call   c0007c38 <memp_free>
c000b3be:	83 c4 10             	add    esp,0x10
c000b3c1:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b3c6:	74 14                	je     c000b3dc <tcp_abandon+0x15c>
c000b3c8:	83 ec 08             	sub    esp,0x8
c000b3cb:	6a f6                	push   0xfffffff6
c000b3cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b3d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3d5:	ff d0                	call   eax
c000b3d7:	83 c4 10             	add    esp,0x10
c000b3da:	66 90                	xchg   ax,ax
c000b3dc:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b3e1:	74 29                	je     c000b40c <tcp_abandon+0x18c>
c000b3e3:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c000b3e8:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000b3ed:	83 ec 08             	sub    esp,0x8
c000b3f0:	52                   	push   edx
c000b3f1:	50                   	push   eax
c000b3f2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3f6:	50                   	push   eax
c000b3f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3fb:	50                   	push   eax
c000b3fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b400:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b404:	e8 a7 50 00 00       	call   c00104b0 <tcp_rst>
c000b409:	83 c4 20             	add    esp,0x20
c000b40c:	90                   	nop
c000b40d:	83 c4 2c             	add    esp,0x2c
c000b410:	c3                   	ret    
c000b411:	8d 76 00             	lea    esi,[esi+0x0]

c000b414 <tcp_abort>:
c000b414:	83 ec 0c             	sub    esp,0xc
c000b417:	83 ec 08             	sub    esp,0x8
c000b41a:	6a 01                	push   0x1
c000b41c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b420:	e8 5b fe ff ff       	call   c000b280 <tcp_abandon>
c000b425:	83 c4 10             	add    esp,0x10
c000b428:	90                   	nop
c000b429:	83 c4 0c             	add    esp,0xc
c000b42c:	c3                   	ret    
c000b42d:	8d 76 00             	lea    esi,[esi+0x0]

c000b430 <tcp_kill_prio>:
c000b430:	83 ec 2c             	sub    esp,0x2c
c000b433:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b437:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b43b:	c6 44 24 13 7f       	mov    BYTE PTR [esp+0x13],0x7f
c000b440:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b448:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b450:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000b455:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b459:	eb 75                	jmp    c000b4d0 <tcp_kill_prio+0xa0>
c000b45b:	90                   	nop
c000b45c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b460:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b463:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c000b468:	0f b6 c0             	movzx  eax,al
c000b46b:	39 c2                	cmp    edx,eax
c000b46d:	72 55                	jb     c000b4c4 <tcp_kill_prio+0x94>
c000b46f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b473:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b476:	0f b6 54 24 13       	movzx  edx,BYTE PTR [esp+0x13]
c000b47b:	0f b6 c0             	movzx  eax,al
c000b47e:	39 c2                	cmp    edx,eax
c000b480:	72 42                	jb     c000b4c4 <tcp_kill_prio+0x94>
c000b482:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b488:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b48c:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b48f:	29 c2                	sub    edx,eax
c000b491:	89 d0                	mov    eax,edx
c000b493:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000b497:	77 2b                	ja     c000b4c4 <tcp_kill_prio+0x94>
c000b499:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b49f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4a3:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b4a6:	29 c2                	sub    edx,eax
c000b4a8:	89 d0                	mov    eax,edx
c000b4aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b4ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b4b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4ba:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b4bd:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b4c1:	8d 76 00             	lea    esi,[esi+0x0]
c000b4c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4c8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b4cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b4cf:	90                   	nop
c000b4d0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b4d5:	75 85                	jne    c000b45c <tcp_kill_prio+0x2c>
c000b4d7:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b4dc:	74 12                	je     c000b4f0 <tcp_kill_prio+0xc0>
c000b4de:	83 ec 0c             	sub    esp,0xc
c000b4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b4e5:	e8 2a ff ff ff       	call   c000b414 <tcp_abort>
c000b4ea:	83 c4 10             	add    esp,0x10
c000b4ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b4f0:	90                   	nop
c000b4f1:	83 c4 2c             	add    esp,0x2c
c000b4f4:	c3                   	ret    
c000b4f5:	8d 76 00             	lea    esi,[esi+0x0]

c000b4f8 <tcp_kill_timewait>:
c000b4f8:	83 ec 1c             	sub    esp,0x1c
c000b4fb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b503:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b50b:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000b510:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b514:	eb 42                	jmp    c000b558 <tcp_kill_timewait+0x60>
c000b516:	66 90                	xchg   ax,ax
c000b518:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b51e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b522:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b525:	29 c2                	sub    edx,eax
c000b527:	89 d0                	mov    eax,edx
c000b529:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b52d:	77 1d                	ja     c000b54c <tcp_kill_timewait+0x54>
c000b52f:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b535:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b539:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b53c:	29 c2                	sub    edx,eax
c000b53e:	89 d0                	mov    eax,edx
c000b540:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b544:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b548:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b54c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b550:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b553:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b557:	90                   	nop
c000b558:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b55d:	75 b9                	jne    c000b518 <tcp_kill_timewait+0x20>
c000b55f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b564:	74 12                	je     c000b578 <tcp_kill_timewait+0x80>
c000b566:	83 ec 0c             	sub    esp,0xc
c000b569:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56d:	e8 a2 fe ff ff       	call   c000b414 <tcp_abort>
c000b572:	83 c4 10             	add    esp,0x10
c000b575:	8d 76 00             	lea    esi,[esi+0x0]
c000b578:	90                   	nop
c000b579:	83 c4 1c             	add    esp,0x1c
c000b57c:	c3                   	ret    
c000b57d:	8d 76 00             	lea    esi,[esi+0x0]

c000b580 <tcp_next_iss>:
c000b580:	8b 15 9c 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033e9c
c000b586:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000b58b:	01 d0                	add    eax,edx
c000b58d:	a3 9c 3e 03 c0       	mov    ds:0xc0033e9c,eax
c000b592:	a1 9c 3e 03 c0       	mov    eax,ds:0xc0033e9c
c000b597:	c3                   	ret    

c000b598 <tcp_alloc>:
c000b598:	83 ec 2c             	sub    esp,0x2c
c000b59b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b59f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b5a3:	83 ec 0c             	sub    esp,0xc
c000b5a6:	6a 02                	push   0x2
c000b5a8:	e8 5f c5 ff ff       	call   c0007b0c <memp_malloc>
c000b5ad:	83 c4 10             	add    esp,0x10
c000b5b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5b4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b5b9:	75 6d                	jne    c000b628 <tcp_alloc+0x90>
c000b5bb:	e8 38 ff ff ff       	call   c000b4f8 <tcp_kill_timewait>
c000b5c0:	83 ec 0c             	sub    esp,0xc
c000b5c3:	6a 02                	push   0x2
c000b5c5:	e8 42 c5 ff ff       	call   c0007b0c <memp_malloc>
c000b5ca:	83 c4 10             	add    esp,0x10
c000b5cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5d1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b5d6:	75 38                	jne    c000b610 <tcp_alloc+0x78>
c000b5d8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b5dd:	83 ec 0c             	sub    esp,0xc
c000b5e0:	50                   	push   eax
c000b5e1:	e8 4a fe ff ff       	call   c000b430 <tcp_kill_prio>
c000b5e6:	83 c4 10             	add    esp,0x10
c000b5e9:	83 ec 0c             	sub    esp,0xc
c000b5ec:	6a 02                	push   0x2
c000b5ee:	e8 19 c5 ff ff       	call   c0007b0c <memp_malloc>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5fa:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b5ff:	74 0f                	je     c000b610 <tcp_alloc+0x78>
c000b601:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b607:	83 e8 01             	sub    eax,0x1
c000b60a:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b610:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b615:	74 11                	je     c000b628 <tcp_alloc+0x90>
c000b617:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b61d:	83 e8 01             	sub    eax,0x1
c000b620:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b626:	66 90                	xchg   ax,ax
c000b628:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b62d:	0f 84 09 01 00 00    	je     c000b73c <tcp_alloc+0x1a4>
c000b633:	83 ec 04             	sub    esp,0x4
c000b636:	68 a8 00 00 00       	push   0xa8
c000b63b:	6a 00                	push   0x0
c000b63d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b641:	e8 aa 4e ff ff       	call   c00004f0 <memset>
c000b646:	83 c4 10             	add    esp,0x10
c000b649:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b64d:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000b651:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000b654:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b658:	66 c7 40 72 00 01    	mov    WORD PTR [eax+0x72],0x100
c000b65e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b662:	66 c7 40 74 00 00    	mov    WORD PTR [eax+0x74],0x0
c000b668:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b66c:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b672:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b676:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b67c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b680:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
c000b684:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b688:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c000b68c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b690:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b696:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b69a:	66 c7 40 4c 06 00    	mov    WORD PTR [eax+0x4c],0x6
c000b6a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6a4:	66 c7 40 48 00 00    	mov    WORD PTR [eax+0x48],0x0
c000b6aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6ae:	66 c7 40 4a 06 00    	mov    WORD PTR [eax+0x4a],0x6
c000b6b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6b8:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000b6be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6c2:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b6c8:	e8 b3 fe ff ff       	call   c000b580 <tcp_next_iss>
c000b6cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b6d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b6d9:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000b6dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b6e4:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b6e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b6ef:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b6f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6f6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b6fa:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b6fd:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b703:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b707:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b70a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b70e:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000b712:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b716:	c7 80 8c 00 00 00 1c b0 00 c0 	mov    DWORD PTR [eax+0x8c],0xc000b01c
c000b720:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b724:	c7 80 9c 00 00 00 00 dd 6d 00 	mov    DWORD PTR [eax+0x9c],0x6ddd00
c000b72e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b732:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000b739:	8d 76 00             	lea    esi,[esi+0x0]
c000b73c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b740:	83 c4 2c             	add    esp,0x2c
c000b743:	c3                   	ret    

c000b744 <tcp_new>:
c000b744:	83 ec 0c             	sub    esp,0xc
c000b747:	83 ec 0c             	sub    esp,0xc
c000b74a:	6a 40                	push   0x40
c000b74c:	e8 47 fe ff ff       	call   c000b598 <tcp_alloc>
c000b751:	83 c4 10             	add    esp,0x10
c000b754:	83 c4 0c             	add    esp,0xc
c000b757:	c3                   	ret    

c000b758 <tcp_eff_send_mss>:
c000b758:	53                   	push   ebx
c000b759:	83 ec 28             	sub    esp,0x28
c000b75c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b760:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b765:	83 ec 0c             	sub    esp,0xc
c000b768:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b76c:	e8 2b 80 00 00       	call   c001379c <ip_route>
c000b771:	83 c4 10             	add    esp,0x10
c000b774:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b778:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b77d:	74 3d                	je     c000b7bc <tcp_eff_send_mss+0x64>
c000b77f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b783:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b786:	0f b7 c0             	movzx  eax,ax
c000b789:	85 c0                	test   eax,eax
c000b78b:	74 2f                	je     c000b7bc <tcp_eff_send_mss+0x64>
c000b78d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b791:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b794:	83 e8 28             	sub    eax,0x28
c000b797:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b79c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7a0:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000b7a5:	0f b7 d8             	movzx  ebx,ax
c000b7a8:	0f b7 ca             	movzx  ecx,dx
c000b7ab:	39 cb                	cmp    ebx,ecx
c000b7ad:	76 05                	jbe    c000b7b4 <tcp_eff_send_mss+0x5c>
c000b7af:	89 d0                	mov    eax,edx
c000b7b1:	8d 76 00             	lea    esi,[esi+0x0]
c000b7b4:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b7b9:	8d 76 00             	lea    esi,[esi+0x0]
c000b7bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7c0:	83 c4 28             	add    esp,0x28
c000b7c3:	5b                   	pop    ebx
c000b7c4:	c3                   	ret    
c000b7c5:	8d 76 00             	lea    esi,[esi+0x0]

c000b7c8 <tcp_connect>:
c000b7c8:	83 ec 2c             	sub    esp,0x2c
c000b7cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b7cf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b7d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7d8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b7db:	85 c0                	test   eax,eax
c000b7dd:	74 1d                	je     c000b7fc <tcp_connect+0x34>
c000b7df:	83 ec 08             	sub    esp,0x8
c000b7e2:	68 44 05 03 c0       	push   0xc0030544
c000b7e7:	68 a6 fd 02 c0       	push   0xc002fda6
c000b7ec:	e8 27 46 01 00       	call   c001fe18 <CPrintf>
c000b7f1:	83 c4 10             	add    esp,0x10
c000b7f4:	b0 f7                	mov    al,0xf7
c000b7f6:	e9 39 02 00 00       	jmp    c000ba34 <tcp_connect+0x26c>
c000b7fb:	90                   	nop
c000b7fc:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b801:	74 25                	je     c000b828 <tcp_connect+0x60>
c000b803:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b807:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b80b:	8b 12                	mov    edx,DWORD PTR [edx]
c000b80d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b810:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b814:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b818:	66 89 42 22          	mov    WORD PTR [edx+0x22],ax
c000b81c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b820:	85 c0                	test   eax,eax
c000b822:	74 18                	je     c000b83c <tcp_connect+0x74>
c000b824:	eb 0a                	jmp    c000b830 <tcp_connect+0x68>
c000b826:	66 90                	xchg   ax,ax
c000b828:	b0 fa                	mov    al,0xfa
c000b82a:	e9 05 02 00 00       	jmp    c000ba34 <tcp_connect+0x26c>
c000b82f:	90                   	nop
c000b830:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b834:	8b 00                	mov    eax,DWORD PTR [eax]
c000b836:	85 c0                	test   eax,eax
c000b838:	75 3a                	jne    c000b874 <tcp_connect+0xac>
c000b83a:	66 90                	xchg   ax,ax
c000b83c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b840:	83 c0 04             	add    eax,0x4
c000b843:	83 ec 0c             	sub    esp,0xc
c000b846:	50                   	push   eax
c000b847:	e8 50 7f 00 00       	call   c001379c <ip_route>
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b853:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b858:	75 0a                	jne    c000b864 <tcp_connect+0x9c>
c000b85a:	b0 fc                	mov    al,0xfc
c000b85c:	e9 d3 01 00 00       	jmp    c000ba34 <tcp_connect+0x26c>
c000b861:	8d 76 00             	lea    esi,[esi+0x0]
c000b864:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b868:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b86b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b86f:	89 10                	mov    DWORD PTR [eax],edx
c000b871:	8d 76 00             	lea    esi,[esi+0x0]
c000b874:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b878:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b87b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b880:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b884:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b887:	0f b7 c0             	movzx  eax,ax
c000b88a:	85 c0                	test   eax,eax
c000b88c:	75 0e                	jne    c000b89c <tcp_connect+0xd4>
c000b88e:	e8 19 e7 ff ff       	call   c0009fac <tcp_new_port>
c000b893:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b897:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000b89b:	90                   	nop
c000b89c:	e8 df fc ff ff       	call   c000b580 <tcp_next_iss>
c000b8a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8a9:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c000b8b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b8b8:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b8bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8bf:	8d 50 ff             	lea    edx,[eax-0x1]
c000b8c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8c6:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b8c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8cd:	8d 50 ff             	lea    edx,[eax-0x1]
c000b8d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8d4:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b8d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8db:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b8e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8e5:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b8eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8ef:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000b8f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8f6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000b8f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8fd:	66 c7 40 60 60 08    	mov    WORD PTR [eax+0x60],0x860
c000b903:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b907:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b90d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b911:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b914:	0f b7 c0             	movzx  eax,ax
c000b917:	83 ec 08             	sub    esp,0x8
c000b91a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b91e:	50                   	push   eax
c000b91f:	e8 34 fe ff ff       	call   c000b758 <tcp_eff_send_mss>
c000b924:	83 c4 10             	add    esp,0x10
c000b927:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b92b:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000b92f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b933:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b939:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b93d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b940:	89 c2                	mov    edx,eax
c000b942:	c1 e2 02             	shl    edx,0x2
c000b945:	01 d0                	add    eax,edx
c000b947:	d1 e0                	shl    eax,1
c000b949:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b94d:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000b951:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b955:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b959:	89 90 90 00 00 00    	mov    DWORD PTR [eax+0x90],edx
c000b95f:	83 ec 08             	sub    esp,0x8
c000b962:	6a 02                	push   0x2
c000b964:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b968:	e8 1b 40 00 00       	call   c000f988 <tcp_enqueue_flags>
c000b96d:	83 c4 10             	add    esp,0x10
c000b970:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b974:	0f be 44 24 13       	movsx  eax,BYTE PTR [esp+0x13]
c000b979:	85 c0                	test   eax,eax
c000b97b:	0f 85 af 00 00 00    	jne    c000ba30 <tcp_connect+0x268>
c000b981:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b985:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b98c:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c000b991:	85 c0                	test   eax,eax
c000b993:	74 6f                	je     c000ba04 <tcp_connect+0x23c>
c000b995:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b99a:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b99e:	75 10                	jne    c000b9b0 <tcp_connect+0x1e8>
c000b9a0:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b9a5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9a8:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000b9ad:	eb 49                	jmp    c000b9f8 <tcp_connect+0x230>
c000b9af:	90                   	nop
c000b9b0:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b9b5:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b9ba:	eb 30                	jmp    c000b9ec <tcp_connect+0x224>
c000b9bc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b9c1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9c4:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b9c8:	75 12                	jne    c000b9dc <tcp_connect+0x214>
c000b9ca:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b9cf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b9d3:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000b9d6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b9d9:	eb 1d                	jmp    c000b9f8 <tcp_connect+0x230>
c000b9db:	90                   	nop
c000b9dc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b9e1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9e4:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b9e9:	8d 76 00             	lea    esi,[esi+0x0]
c000b9ec:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b9f1:	85 c0                	test   eax,eax
c000b9f3:	75 c7                	jne    c000b9bc <tcp_connect+0x1f4>
c000b9f5:	8d 76 00             	lea    esi,[esi+0x0]
c000b9f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b9fc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ba03:	90                   	nop
c000ba04:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000ba0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba0e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ba11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba15:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000ba1a:	e8 95 52 00 00       	call   c0010cb4 <tcp_timer_needed>
c000ba1f:	83 ec 0c             	sub    esp,0xc
c000ba22:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ba26:	e8 f9 45 00 00       	call   c0010024 <tcp_output>
c000ba2b:	83 c4 10             	add    esp,0x10
c000ba2e:	66 90                	xchg   ax,ax
c000ba30:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c000ba34:	83 c4 2c             	add    esp,0x2c
c000ba37:	c3                   	ret    

c000ba38 <tcp_debug_state_str>:
c000ba38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba3c:	8b 04 85 c0 06 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf940]
c000ba43:	c3                   	ret    

c000ba44 <tcp_timewait_input>:
c000ba44:	53                   	push   ebx
c000ba45:	83 ec 08             	sub    esp,0x8
c000ba48:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000ba4d:	0f b6 c0             	movzx  eax,al
c000ba50:	83 e0 04             	and    eax,0x4
c000ba53:	74 07                	je     c000ba5c <tcp_timewait_input+0x18>
c000ba55:	b0 00                	mov    al,0x0
c000ba57:	e9 e8 00 00 00       	jmp    c000bb44 <tcp_timewait_input+0x100>
c000ba5c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000ba61:	0f b6 c0             	movzx  eax,al
c000ba64:	83 e0 02             	and    eax,0x2
c000ba67:	0f 84 83 00 00 00    	je     c000baf0 <tcp_timewait_input+0xac>
c000ba6d:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000ba73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba77:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ba7a:	29 c2                	sub    edx,eax
c000ba7c:	89 d0                	mov    eax,edx
c000ba7e:	0f 88 88 00 00 00    	js     c000bb0c <tcp_timewait_input+0xc8>
c000ba84:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000ba8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba8e:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000ba91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba95:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ba98:	0f b7 c0             	movzx  eax,ax
c000ba9b:	01 c8                	add    eax,ecx
c000ba9d:	29 c2                	sub    edx,eax
c000ba9f:	89 d0                	mov    eax,edx
c000baa1:	85 c0                	test   eax,eax
c000baa3:	7f 67                	jg     c000bb0c <tcp_timewait_input+0xc8>
c000baa5:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000baaa:	66 8b 00             	mov    ax,WORD PTR [eax]
c000baad:	0f b7 c8             	movzx  ecx,ax
c000bab0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bab5:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000bab9:	0f b7 d0             	movzx  edx,ax
c000babc:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000bac2:	0f b7 d8             	movzx  ebx,ax
c000bac5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000baca:	01 c3                	add    ebx,eax
c000bacc:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bad1:	83 ec 08             	sub    esp,0x8
c000bad4:	51                   	push   ecx
c000bad5:	52                   	push   edx
c000bad6:	68 90 68 03 c0       	push   0xc0036890
c000badb:	68 98 68 03 c0       	push   0xc0036898
c000bae0:	53                   	push   ebx
c000bae1:	50                   	push   eax
c000bae2:	e8 c9 49 00 00       	call   c00104b0 <tcp_rst>
c000bae7:	83 c4 20             	add    esp,0x20
c000baea:	b0 00                	mov    al,0x0
c000baec:	eb 56                	jmp    c000bb44 <tcp_timewait_input+0x100>
c000baee:	66 90                	xchg   ax,ax
c000baf0:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000baf5:	0f b6 c0             	movzx  eax,al
c000baf8:	83 e0 01             	and    eax,0x1
c000bafb:	74 0f                	je     c000bb0c <tcp_timewait_input+0xc8>
c000bafd:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000bb03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb07:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000bb0a:	66 90                	xchg   ax,ax
c000bb0c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000bb12:	0f b7 c0             	movzx  eax,ax
c000bb15:	85 c0                	test   eax,eax
c000bb17:	74 27                	je     c000bb40 <tcp_timewait_input+0xfc>
c000bb19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb1d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bb20:	83 c8 02             	or     eax,0x2
c000bb23:	88 c2                	mov    dl,al
c000bb25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb29:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bb2c:	83 ec 0c             	sub    esp,0xc
c000bb2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb33:	e8 ec 44 00 00       	call   c0010024 <tcp_output>
c000bb38:	83 c4 10             	add    esp,0x10
c000bb3b:	eb 07                	jmp    c000bb44 <tcp_timewait_input+0x100>
c000bb3d:	8d 76 00             	lea    esi,[esi+0x0]
c000bb40:	b0 00                	mov    al,0x0
c000bb42:	66 90                	xchg   ax,ax
c000bb44:	83 c4 08             	add    esp,0x8
c000bb47:	5b                   	pop    ebx
c000bb48:	c3                   	ret    
c000bb49:	8d 76 00             	lea    esi,[esi+0x0]

c000bb4c <tcp_oos_insert_segment>:
c000bb4c:	53                   	push   ebx
c000bb4d:	83 ec 18             	sub    esp,0x18
c000bb50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb54:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bb57:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bb5b:	0f b7 c0             	movzx  eax,ax
c000bb5e:	83 ec 0c             	sub    esp,0xc
c000bb61:	50                   	push   eax
c000bb62:	e8 81 50 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000bb67:	83 c4 10             	add    esp,0x10
c000bb6a:	0f b7 c0             	movzx  eax,ax
c000bb6d:	83 e0 01             	and    eax,0x1
c000bb70:	0f 84 8e 00 00 00    	je     c000bc04 <tcp_oos_insert_segment+0xb8>
c000bb76:	83 ec 0c             	sub    esp,0xc
c000bb79:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bb7d:	e8 2e e6 ff ff       	call   c000a1b0 <tcp_segs_free>
c000bb82:	83 c4 10             	add    esp,0x10
c000bb85:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000bb8d:	e9 16 01 00 00       	jmp    c000bca8 <tcp_oos_insert_segment+0x15c>
c000bb92:	66 90                	xchg   ax,ax
c000bb94:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bb98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bb9b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bb9f:	0f b7 c0             	movzx  eax,ax
c000bba2:	83 ec 0c             	sub    esp,0xc
c000bba5:	50                   	push   eax
c000bba6:	e8 3d 50 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000bbab:	83 c4 10             	add    esp,0x10
c000bbae:	0f b7 c0             	movzx  eax,ax
c000bbb1:	83 e0 01             	and    eax,0x1
c000bbb4:	74 2a                	je     c000bbe0 <tcp_oos_insert_segment+0x94>
c000bbb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bbbd:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000bbc1:	83 ec 0c             	sub    esp,0xc
c000bbc4:	6a 01                	push   0x1
c000bbc6:	e8 1d 50 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000bbcb:	83 c4 10             	add    esp,0x10
c000bbce:	89 c1                	mov    ecx,eax
c000bbd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbd4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000bbd7:	89 d8                	mov    eax,ebx
c000bbd9:	09 c8                	or     eax,ecx
c000bbdb:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000bbdf:	90                   	nop
c000bbe0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bbe4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bbe8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bbec:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bbf2:	83 ec 0c             	sub    esp,0xc
c000bbf5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbf9:	e8 6e e5 ff ff       	call   c000a16c <tcp_seg_free>
c000bbfe:	83 c4 10             	add    esp,0x10
c000bc01:	8d 76 00             	lea    esi,[esi+0x0]
c000bc04:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000bc09:	74 35                	je     c000bc40 <tcp_oos_insert_segment+0xf4>
c000bc0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc12:	0f b7 d0             	movzx  edx,ax
c000bc15:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bc1a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000bc1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc21:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc24:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bc27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc2b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc2e:	0f b7 c0             	movzx  eax,ax
c000bc31:	01 d0                	add    eax,edx
c000bc33:	29 c1                	sub    ecx,eax
c000bc35:	89 c8                	mov    eax,ecx
c000bc37:	0f 89 57 ff ff ff    	jns    c000bb94 <tcp_oos_insert_segment+0x48>
c000bc3d:	8d 76 00             	lea    esi,[esi+0x0]
c000bc40:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000bc45:	74 61                	je     c000bca8 <tcp_oos_insert_segment+0x15c>
c000bc47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc4b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc4e:	0f b7 d0             	movzx  edx,ax
c000bc51:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bc56:	01 c2                	add    edx,eax
c000bc58:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bc62:	29 c2                	sub    edx,eax
c000bc64:	89 d0                	mov    eax,edx
c000bc66:	85 c0                	test   eax,eax
c000bc68:	7e 3e                	jle    c000bca8 <tcp_oos_insert_segment+0x15c>
c000bc6a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc6e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bc74:	89 c2                	mov    edx,eax
c000bc76:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bc7b:	89 d3                	mov    ebx,edx
c000bc7d:	29 c3                	sub    ebx,eax
c000bc7f:	89 d8                	mov    eax,ebx
c000bc81:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bc85:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000bc89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc8d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc90:	0f b7 d0             	movzx  edx,ax
c000bc93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bc9a:	83 ec 08             	sub    esp,0x8
c000bc9d:	52                   	push   edx
c000bc9e:	50                   	push   eax
c000bc9f:	e8 20 ce ff ff       	call   c0008ac4 <pbuf_realloc>
c000bca4:	83 c4 10             	add    esp,0x10
c000bca7:	90                   	nop
c000bca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcac:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bcb0:	89 10                	mov    DWORD PTR [eax],edx
c000bcb2:	90                   	nop
c000bcb3:	83 c4 18             	add    esp,0x18
c000bcb6:	5b                   	pop    ebx
c000bcb7:	c3                   	ret    

c000bcb8 <tcp_receive>:
c000bcb8:	57                   	push   edi
c000bcb9:	56                   	push   esi
c000bcba:	53                   	push   ebx
c000bcbb:	83 ec 30             	sub    esp,0x30
c000bcbe:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bcc6:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000bccb:	0f b6 c0             	movzx  eax,al
c000bcce:	83 e0 10             	and    eax,0x10
c000bcd1:	0f 84 e5 07 00 00    	je     c000c4bc <tcp_receive+0x804>
c000bcd7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcdb:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bcde:	0f b7 d0             	movzx  edx,ax
c000bce1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bce5:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000bce8:	01 d0                	add    eax,edx
c000bcea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bcee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcf2:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bcf5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bcfa:	29 c2                	sub    edx,eax
c000bcfc:	89 d0                	mov    eax,edx
c000bcfe:	78 50                	js     c000bd50 <tcp_receive+0x98>
c000bd00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd04:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bd07:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bd0c:	39 c2                	cmp    edx,eax
c000bd0e:	75 14                	jne    c000bd24 <tcp_receive+0x6c>
c000bd10:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd14:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bd17:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bd1c:	29 c2                	sub    edx,eax
c000bd1e:	89 d0                	mov    eax,edx
c000bd20:	78 2e                	js     c000bd50 <tcp_receive+0x98>
c000bd22:	66 90                	xchg   ax,ax
c000bd24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd28:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bd2b:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bd30:	39 c2                	cmp    edx,eax
c000bd32:	75 74                	jne    c000bda8 <tcp_receive+0xf0>
c000bd34:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bd39:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bd3d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd41:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bd44:	0f b7 d2             	movzx  edx,dx
c000bd47:	0f b7 c0             	movzx  eax,ax
c000bd4a:	39 c2                	cmp    edx,eax
c000bd4c:	76 5a                	jbe    c000bda8 <tcp_receive+0xf0>
c000bd4e:	66 90                	xchg   ax,ax
c000bd50:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bd55:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000bd59:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bd5d:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000bd61:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000bd67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd6b:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000bd6e:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bd74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd78:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000bd7b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd7f:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bd82:	0f b7 c0             	movzx  eax,ax
c000bd85:	85 c0                	test   eax,eax
c000bd87:	74 1f                	je     c000bda8 <tcp_receive+0xf0>
c000bd89:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd8d:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000bd93:	0f b6 c0             	movzx  eax,al
c000bd96:	85 c0                	test   eax,eax
c000bd98:	74 0e                	je     c000bda8 <tcp_receive+0xf0>
c000bd9a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd9e:	c6 80 a4 00 00 00 00 	mov    BYTE PTR [eax+0xa4],0x0
c000bda5:	8d 76 00             	lea    esi,[esi+0x0]
c000bda8:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bdae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdb2:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bdb5:	29 c2                	sub    edx,eax
c000bdb7:	89 d0                	mov    eax,edx
c000bdb9:	85 c0                	test   eax,eax
c000bdbb:	0f 8f ff 00 00 00    	jg     c000bec0 <tcp_receive+0x208>
c000bdc1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdc5:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000bdcb:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000bdd1:	0f b7 c0             	movzx  eax,ax
c000bdd4:	85 c0                	test   eax,eax
c000bdd6:	0f 85 cc 00 00 00    	jne    c000bea8 <tcp_receive+0x1f0>
c000bddc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bde0:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bde3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bde7:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bdea:	0f b7 c0             	movzx  eax,ax
c000bded:	01 d0                	add    eax,edx
c000bdef:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000bdf3:	0f 85 af 00 00 00    	jne    c000bea8 <tcp_receive+0x1f0>
c000bdf9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdfd:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000be01:	98                   	cwde   
c000be02:	85 c0                	test   eax,eax
c000be04:	0f 88 9e 00 00 00    	js     c000bea8 <tcp_receive+0x1f0>
c000be0a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be0e:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000be11:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000be16:	39 c2                	cmp    edx,eax
c000be18:	0f 85 8a 00 00 00    	jne    c000bea8 <tcp_receive+0x1f0>
c000be1e:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000be26:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be2a:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000be2d:	83 c0 01             	add    eax,0x1
c000be30:	88 c2                	mov    dl,al
c000be32:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be36:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
c000be39:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be3d:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000be40:	0f b6 c0             	movzx  eax,al
c000be43:	83 f8 03             	cmp    eax,0x3
c000be46:	76 40                	jbe    c000be88 <tcp_receive+0x1d0>
c000be48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be4c:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be50:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be54:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be57:	01 d0                	add    eax,edx
c000be59:	89 c2                	mov    edx,eax
c000be5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be5f:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000be63:	0f b7 d2             	movzx  edx,dx
c000be66:	0f b7 c0             	movzx  eax,ax
c000be69:	39 c2                	cmp    edx,eax
c000be6b:	76 3b                	jbe    c000bea8 <tcp_receive+0x1f0>
c000be6d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be71:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be75:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be79:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be7c:	01 d0                	add    eax,edx
c000be7e:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000be82:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000be86:	eb 20                	jmp    c000bea8 <tcp_receive+0x1f0>
c000be88:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be8c:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000be8f:	0f b6 c0             	movzx  eax,al
c000be92:	83 f8 03             	cmp    eax,0x3
c000be95:	75 11                	jne    c000bea8 <tcp_receive+0x1f0>
c000be97:	83 ec 0c             	sub    esp,0xc
c000be9a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be9e:	e8 d9 48 00 00       	call   c001077c <tcp_rexmit_fast>
c000bea3:	83 c4 10             	add    esp,0x10
c000bea6:	66 90                	xchg   ax,ax
c000bea8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bead:	0f 85 99 04 00 00    	jne    c000c34c <tcp_receive+0x694>
c000beb3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beb7:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bebb:	e9 8c 04 00 00       	jmp    c000c34c <tcp_receive+0x694>
c000bec0:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bec6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beca:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000becd:	29 c2                	sub    edx,eax
c000becf:	89 d0                	mov    eax,edx
c000bed1:	83 e8 01             	sub    eax,0x1
c000bed4:	0f 88 4a 03 00 00    	js     c000c224 <tcp_receive+0x56c>
c000beda:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bee0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bee4:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000bee7:	29 c2                	sub    edx,eax
c000bee9:	89 d0                	mov    eax,edx
c000beeb:	85 c0                	test   eax,eax
c000beed:	0f 8f 31 03 00 00    	jg     c000c224 <tcp_receive+0x56c>
c000bef3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bef7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000befa:	0f b6 c0             	movzx  eax,al
c000befd:	83 e0 04             	and    eax,0x4
c000bf00:	74 22                	je     c000bf24 <tcp_receive+0x26c>
c000bf02:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf06:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bf09:	83 e0 fb             	and    eax,0xfffffffb
c000bf0c:	88 c2                	mov    dl,al
c000bf0e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf12:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bf15:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf19:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bf1c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf20:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000bf24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf28:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000bf2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf30:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000bf33:	98                   	cwde   
c000bf34:	c1 f8 03             	sar    eax,0x3
c000bf37:	89 c2                	mov    edx,eax
c000bf39:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf3d:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000bf41:	01 d0                	add    eax,edx
c000bf43:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf47:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000bf4b:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bf50:	89 c2                	mov    edx,eax
c000bf52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf56:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bf59:	89 d7                	mov    edi,edx
c000bf5b:	29 c7                	sub    edi,eax
c000bf5d:	89 f8                	mov    eax,edi
c000bf5f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf63:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000bf67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf6b:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000bf6f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf73:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bf76:	01 d0                	add    eax,edx
c000bf78:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf7c:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000bf80:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf84:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bf88:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bf8e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf92:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000bf95:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf99:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bf9c:	83 f8 03             	cmp    eax,0x3
c000bf9f:	0f 86 db 01 00 00    	jbe    c000c180 <tcp_receive+0x4c8>
c000bfa5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfa9:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bfad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfb1:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bfb4:	0f b7 d2             	movzx  edx,dx
c000bfb7:	0f b7 c0             	movzx  eax,ax
c000bfba:	39 c2                	cmp    edx,eax
c000bfbc:	73 4a                	jae    c000c008 <tcp_receive+0x350>
c000bfbe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfc2:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bfc6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bfcd:	01 d0                	add    eax,edx
c000bfcf:	89 c2                	mov    edx,eax
c000bfd1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfd5:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bfd9:	0f b7 d2             	movzx  edx,dx
c000bfdc:	0f b7 c0             	movzx  eax,ax
c000bfdf:	39 c2                	cmp    edx,eax
c000bfe1:	0f 86 99 01 00 00    	jbe    c000c180 <tcp_receive+0x4c8>
c000bfe7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfeb:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bfef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bff3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bff6:	01 d0                	add    eax,edx
c000bff8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bffc:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000c000:	e9 7b 01 00 00       	jmp    c000c180 <tcp_receive+0x4c8>
c000c005:	8d 76 00             	lea    esi,[esi+0x0]
c000c008:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c00c:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c000c010:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c014:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c017:	0f b7 d0             	movzx  edx,ax
c000c01a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c01e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c021:	0f b7 c0             	movzx  eax,ax
c000c024:	0f af d0             	imul   edx,eax
c000c027:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c02b:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000c02f:	0f b7 d8             	movzx  ebx,ax
c000c032:	89 d0                	mov    eax,edx
c000c034:	89 c2                	mov    edx,eax
c000c036:	c1 fa 1f             	sar    edx,0x1f
c000c039:	f7 fb                	idiv   ebx
c000c03b:	01 c8                	add    eax,ecx
c000c03d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000c042:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c046:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000c04a:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c000c04f:	0f b7 c0             	movzx  eax,ax
c000c052:	39 c2                	cmp    edx,eax
c000c054:	0f 86 26 01 00 00    	jbe    c000c180 <tcp_receive+0x4c8>
c000c05a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c05e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000c063:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000c067:	e9 14 01 00 00       	jmp    c000c180 <tcp_receive+0x4c8>
c000c06c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c070:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c073:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c077:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c07b:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c07e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c080:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c084:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000c087:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c08b:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c08e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c092:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c095:	83 ec 0c             	sub    esp,0xc
c000c098:	50                   	push   eax
c000c099:	e8 2a cc ff ff       	call   c0008cc8 <pbuf_clen>
c000c09e:	83 c4 10             	add    esp,0x10
c000c0a1:	0f b6 c0             	movzx  eax,al
c000c0a4:	0f b7 d3             	movzx  edx,bx
c000c0a7:	0f b7 c0             	movzx  eax,ax
c000c0aa:	39 c2                	cmp    edx,eax
c000c0ac:	73 16                	jae    c000c0c4 <tcp_receive+0x40c>
c000c0ae:	83 ec 08             	sub    esp,0x8
c000c0b1:	68 ec 06 03 c0       	push   0xc00306ec
c000c0b6:	68 a6 fd 02 c0       	push   0xc002fda6
c000c0bb:	e8 58 3d 01 00       	call   c001fe18 <CPrintf>
c000c0c0:	83 c4 10             	add    esp,0x10
c000c0c3:	90                   	nop
c000c0c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0c8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c0cb:	0f b7 c0             	movzx  eax,ax
c000c0ce:	85 c0                	test   eax,eax
c000c0d0:	74 36                	je     c000c108 <tcp_receive+0x450>
c000c0d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c0d6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c0d9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c0dd:	0f b7 c0             	movzx  eax,ax
c000c0e0:	83 ec 0c             	sub    esp,0xc
c000c0e3:	50                   	push   eax
c000c0e4:	e8 ff 4a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c0e9:	83 c4 10             	add    esp,0x10
c000c0ec:	0f b7 c0             	movzx  eax,ax
c000c0ef:	83 e0 01             	and    eax,0x1
c000c0f2:	74 14                	je     c000c108 <tcp_receive+0x450>
c000c0f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0f8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c0fb:	83 e8 01             	sub    eax,0x1
c000c0fe:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c102:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000c106:	66 90                	xchg   ax,ax
c000c108:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c10c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c10f:	83 ec 0c             	sub    esp,0xc
c000c112:	50                   	push   eax
c000c113:	e8 b0 cb ff ff       	call   c0008cc8 <pbuf_clen>
c000c118:	83 c4 10             	add    esp,0x10
c000c11b:	88 c1                	mov    cl,al
c000c11d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c121:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c124:	0f b6 c1             	movzx  eax,cl
c000c127:	89 d7                	mov    edi,edx
c000c129:	29 c7                	sub    edi,eax
c000c12b:	89 f8                	mov    eax,edi
c000c12d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c131:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000c135:	83 ec 0c             	sub    esp,0xc
c000c138:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c13c:	e8 2b e0 ff ff       	call   c000a16c <tcp_seg_free>
c000c141:	83 c4 10             	add    esp,0x10
c000c144:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c148:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c14b:	0f b7 c0             	movzx  eax,ax
c000c14e:	85 c0                	test   eax,eax
c000c150:	74 2e                	je     c000c180 <tcp_receive+0x4c8>
c000c152:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c156:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c159:	85 c0                	test   eax,eax
c000c15b:	75 23                	jne    c000c180 <tcp_receive+0x4c8>
c000c15d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c161:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c164:	85 c0                	test   eax,eax
c000c166:	75 18                	jne    c000c180 <tcp_receive+0x4c8>
c000c168:	83 ec 08             	sub    esp,0x8
c000c16b:	68 14 07 03 c0       	push   0xc0030714
c000c170:	68 a6 fd 02 c0       	push   0xc002fda6
c000c175:	e8 9e 3c 01 00       	call   c001fe18 <CPrintf>
c000c17a:	83 c4 10             	add    esp,0x10
c000c17d:	8d 76 00             	lea    esi,[esi+0x0]
c000c180:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c184:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c187:	85 c0                	test   eax,eax
c000c189:	74 69                	je     c000c1f4 <tcp_receive+0x53c>
c000c18b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c18f:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c192:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c195:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c198:	83 ec 0c             	sub    esp,0xc
c000c19b:	50                   	push   eax
c000c19c:	e8 6b 4a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000c1a1:	83 c4 10             	add    esp,0x10
c000c1a4:	89 c3                	mov    ebx,eax
c000c1a6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1aa:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1ad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c1b0:	0f b7 f0             	movzx  esi,ax
c000c1b3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1b7:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1ba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c1bd:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c1c1:	0f b7 c0             	movzx  eax,ax
c000c1c4:	83 ec 0c             	sub    esp,0xc
c000c1c7:	50                   	push   eax
c000c1c8:	e8 1b 4a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	0f b7 c0             	movzx  eax,ax
c000c1d3:	83 e0 03             	and    eax,0x3
c000c1d6:	0f 95 c0             	setne  al
c000c1d9:	0f b6 c0             	movzx  eax,al
c000c1dc:	01 f0                	add    eax,esi
c000c1de:	8d 14 03             	lea    edx,[ebx+eax*1]
c000c1e1:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c1e6:	29 c2                	sub    edx,eax
c000c1e8:	89 d0                	mov    eax,edx
c000c1ea:	85 c0                	test   eax,eax
c000c1ec:	0f 8e 7a fe ff ff    	jle    c000c06c <tcp_receive+0x3b4>
c000c1f2:	66 90                	xchg   ax,ax
c000c1f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1f8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1fb:	85 c0                	test   eax,eax
c000c1fd:	75 0d                	jne    c000c20c <tcp_receive+0x554>
c000c1ff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c203:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000c209:	eb 0d                	jmp    c000c218 <tcp_receive+0x560>
c000c20b:	90                   	nop
c000c20c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c210:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000c216:	66 90                	xchg   ax,ax
c000c218:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c21c:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000c220:	eb 0e                	jmp    c000c230 <tcp_receive+0x578>
c000c222:	66 90                	xchg   ax,ax
c000c224:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c228:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000c22e:	66 90                	xchg   ax,ax
c000c230:	e9 17 01 00 00       	jmp    c000c34c <tcp_receive+0x694>
c000c235:	8d 76 00             	lea    esi,[esi+0x0]
c000c238:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c23c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c23f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c243:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c247:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c24a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c24c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c250:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000c253:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c257:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c25a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c25e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c261:	83 ec 0c             	sub    esp,0xc
c000c264:	50                   	push   eax
c000c265:	e8 5e ca ff ff       	call   c0008cc8 <pbuf_clen>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	0f b6 c0             	movzx  eax,al
c000c270:	0f b7 d3             	movzx  edx,bx
c000c273:	0f b7 c0             	movzx  eax,ax
c000c276:	39 c2                	cmp    edx,eax
c000c278:	73 16                	jae    c000c290 <tcp_receive+0x5d8>
c000c27a:	83 ec 08             	sub    esp,0x8
c000c27d:	68 ec 06 03 c0       	push   0xc00306ec
c000c282:	68 a6 fd 02 c0       	push   0xc002fda6
c000c287:	e8 8c 3b 01 00       	call   c001fe18 <CPrintf>
c000c28c:	83 c4 10             	add    esp,0x10
c000c28f:	90                   	nop
c000c290:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c294:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c297:	0f b7 c0             	movzx  eax,ax
c000c29a:	85 c0                	test   eax,eax
c000c29c:	74 36                	je     c000c2d4 <tcp_receive+0x61c>
c000c29e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c2a2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2a5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c2a9:	0f b7 c0             	movzx  eax,ax
c000c2ac:	83 ec 0c             	sub    esp,0xc
c000c2af:	50                   	push   eax
c000c2b0:	e8 33 49 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c2b5:	83 c4 10             	add    esp,0x10
c000c2b8:	0f b7 c0             	movzx  eax,ax
c000c2bb:	83 e0 01             	and    eax,0x1
c000c2be:	74 14                	je     c000c2d4 <tcp_receive+0x61c>
c000c2c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2c4:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c2c7:	83 e8 01             	sub    eax,0x1
c000c2ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2ce:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000c2d2:	66 90                	xchg   ax,ax
c000c2d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c2d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c2db:	83 ec 0c             	sub    esp,0xc
c000c2de:	50                   	push   eax
c000c2df:	e8 e4 c9 ff ff       	call   c0008cc8 <pbuf_clen>
c000c2e4:	83 c4 10             	add    esp,0x10
c000c2e7:	88 c1                	mov    cl,al
c000c2e9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2ed:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c2f0:	0f b6 c1             	movzx  eax,cl
c000c2f3:	89 d6                	mov    esi,edx
c000c2f5:	29 c6                	sub    esi,eax
c000c2f7:	89 f0                	mov    eax,esi
c000c2f9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2fd:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000c301:	83 ec 0c             	sub    esp,0xc
c000c304:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c308:	e8 5f de ff ff       	call   c000a16c <tcp_seg_free>
c000c30d:	83 c4 10             	add    esp,0x10
c000c310:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c314:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c317:	0f b7 c0             	movzx  eax,ax
c000c31a:	85 c0                	test   eax,eax
c000c31c:	74 2e                	je     c000c34c <tcp_receive+0x694>
c000c31e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c322:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c325:	85 c0                	test   eax,eax
c000c327:	75 23                	jne    c000c34c <tcp_receive+0x694>
c000c329:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c32d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c330:	85 c0                	test   eax,eax
c000c332:	75 18                	jne    c000c34c <tcp_receive+0x694>
c000c334:	83 ec 08             	sub    esp,0x8
c000c337:	68 14 07 03 c0       	push   0xc0030714
c000c33c:	68 a6 fd 02 c0       	push   0xc002fda6
c000c341:	e8 d2 3a 01 00       	call   c001fe18 <CPrintf>
c000c346:	83 c4 10             	add    esp,0x10
c000c349:	8d 76 00             	lea    esi,[esi+0x0]
c000c34c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c350:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c353:	85 c0                	test   eax,eax
c000c355:	74 7d                	je     c000c3d4 <tcp_receive+0x71c>
c000c357:	8b 1d b0 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8b0
c000c35d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c361:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c364:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c367:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c36a:	83 ec 0c             	sub    esp,0xc
c000c36d:	50                   	push   eax
c000c36e:	e8 99 48 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000c373:	83 c4 10             	add    esp,0x10
c000c376:	89 c6                	mov    esi,eax
c000c378:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c37c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c37f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c382:	0f b7 f8             	movzx  edi,ax
c000c385:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c389:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c38c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c38f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c393:	0f b7 c0             	movzx  eax,ax
c000c396:	83 ec 0c             	sub    esp,0xc
c000c399:	50                   	push   eax
c000c39a:	e8 49 48 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c39f:	83 c4 10             	add    esp,0x10
c000c3a2:	0f b7 c0             	movzx  eax,ax
c000c3a5:	83 e0 03             	and    eax,0x3
c000c3a8:	0f 95 c0             	setne  al
c000c3ab:	0f b6 c0             	movzx  eax,al
c000c3ae:	01 f8                	add    eax,edi
c000c3b0:	01 f0                	add    eax,esi
c000c3b2:	29 c3                	sub    ebx,eax
c000c3b4:	89 d8                	mov    eax,ebx
c000c3b6:	78 1c                	js     c000c3d4 <tcp_receive+0x71c>
c000c3b8:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000c3be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3c2:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000c3c5:	29 c2                	sub    edx,eax
c000c3c7:	89 d0                	mov    eax,edx
c000c3c9:	85 c0                	test   eax,eax
c000c3cb:	0f 8e 67 fe ff ff    	jle    c000c238 <tcp_receive+0x580>
c000c3d1:	8d 76 00             	lea    esi,[esi+0x0]
c000c3d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c3db:	85 c0                	test   eax,eax
c000c3dd:	0f 84 d9 00 00 00    	je     c000c4bc <tcp_receive+0x804>
c000c3e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3e7:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
c000c3ea:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c3ef:	29 c2                	sub    edx,eax
c000c3f1:	89 d0                	mov    eax,edx
c000c3f3:	0f 89 c3 00 00 00    	jns    c000c4bc <tcp_receive+0x804>
c000c3f9:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000c3fe:	89 c2                	mov    edx,eax
c000c400:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c404:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c407:	89 d7                	mov    edi,edx
c000c409:	29 c7                	sub    edi,eax
c000c40b:	89 f8                	mov    eax,edi
c000c40d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c412:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c417:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c41b:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c41e:	98                   	cwde   
c000c41f:	c1 f8 03             	sar    eax,0x3
c000c422:	89 d6                	mov    esi,edx
c000c424:	29 c6                	sub    esi,eax
c000c426:	89 f0                	mov    eax,esi
c000c428:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c42d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c431:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c434:	89 c2                	mov    edx,eax
c000c436:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c43b:	01 d0                	add    eax,edx
c000c43d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c441:	66 89 42 48          	mov    WORD PTR [edx+0x48],ax
c000c445:	0f bf 44 24 1e       	movsx  eax,WORD PTR [esp+0x1e]
c000c44a:	85 c0                	test   eax,eax
c000c44c:	79 0e                	jns    c000c45c <tcp_receive+0x7a4>
c000c44e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c453:	f7 d8                	neg    eax
c000c455:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c45a:	66 90                	xchg   ax,ax
c000c45c:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c461:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c465:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c469:	98                   	cwde   
c000c46a:	c1 f8 02             	sar    eax,0x2
c000c46d:	89 d7                	mov    edi,edx
c000c46f:	29 c7                	sub    edi,eax
c000c471:	89 f8                	mov    eax,edi
c000c473:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c478:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c47c:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c480:	89 c2                	mov    edx,eax
c000c482:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c487:	01 d0                	add    eax,edx
c000c489:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c48d:	66 89 42 4a          	mov    WORD PTR [edx+0x4a],ax
c000c491:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c495:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c498:	98                   	cwde   
c000c499:	c1 f8 03             	sar    eax,0x3
c000c49c:	89 c2                	mov    edx,eax
c000c49e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4a2:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c4a6:	01 d0                	add    eax,edx
c000c4a8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c4ac:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000c4b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4b4:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c000c4bb:	90                   	nop
c000c4bc:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c4c2:	0f b7 c0             	movzx  eax,ax
c000c4c5:	85 c0                	test   eax,eax
c000c4c7:	0f 84 2f 0e 00 00    	je     c000d2fc <tcp_receive+0x1644>
c000c4cd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4d1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c4d4:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c4d9:	29 c2                	sub    edx,eax
c000c4db:	89 d0                	mov    eax,edx
c000c4dd:	83 e8 01             	sub    eax,0x1
c000c4e0:	0f 88 c6 01 00 00    	js     c000c6ac <tcp_receive+0x9f4>
c000c4e6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4ea:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c4ed:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c4f3:	0f b7 c8             	movzx  ecx,ax
c000c4f6:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c4fb:	01 c8                	add    eax,ecx
c000c4fd:	29 c2                	sub    edx,eax
c000c4ff:	89 d0                	mov    eax,edx
c000c501:	83 c0 01             	add    eax,0x1
c000c504:	85 c0                	test   eax,eax
c000c506:	0f 8f a0 01 00 00    	jg     c000c6ac <tcp_receive+0x9f4>
c000c50c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c510:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c513:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c518:	29 c2                	sub    edx,eax
c000c51a:	89 d0                	mov    eax,edx
c000c51c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c520:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c525:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c529:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c52e:	85 c0                	test   eax,eax
c000c530:	75 16                	jne    c000c548 <tcp_receive+0x890>
c000c532:	83 ec 08             	sub    esp,0x8
c000c535:	68 11 09 03 c0       	push   0xc0030911
c000c53a:	68 a6 fd 02 c0       	push   0xc002fda6
c000c53f:	e8 d4 38 01 00       	call   c001fe18 <CPrintf>
c000c544:	83 c4 10             	add    esp,0x10
c000c547:	90                   	nop
c000c548:	81 7c 24 20 fe 7f 00 00 	cmp    DWORD PTR [esp+0x20],0x7ffe
c000c550:	7e 16                	jle    c000c568 <tcp_receive+0x8b0>
c000c552:	83 ec 08             	sub    esp,0x8
c000c555:	68 21 09 03 c0       	push   0xc0030921
c000c55a:	68 a6 fd 02 c0       	push   0xc002fda6
c000c55f:	e8 b4 38 01 00       	call   c001fe18 <CPrintf>
c000c564:	83 c4 10             	add    esp,0x10
c000c567:	90                   	nop
c000c568:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c56d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c571:	0f b7 c0             	movzx  eax,ax
c000c574:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c578:	0f 8e b6 00 00 00    	jle    c000c634 <tcp_receive+0x97c>
c000c57e:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c583:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c586:	0f b7 c0             	movzx  eax,ax
c000c589:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c58d:	7e 15                	jle    c000c5a4 <tcp_receive+0x8ec>
c000c58f:	83 ec 08             	sub    esp,0x8
c000c592:	68 30 09 03 c0       	push   0xc0030930
c000c597:	68 a6 fd 02 c0       	push   0xc002fda6
c000c59c:	e8 77 38 01 00       	call   c001fe18 <CPrintf>
c000c5a1:	83 c4 10             	add    esp,0x10
c000c5a4:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c5a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c5ac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c5b0:	29 d0                	sub    eax,edx
c000c5b2:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000c5b7:	eb 33                	jmp    c000c5ec <tcp_receive+0x934>
c000c5b9:	8d 76 00             	lea    esi,[esi+0x0]
c000c5bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c5c0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c5c4:	0f b7 c0             	movzx  eax,ax
c000c5c7:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c000c5cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c5cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5d3:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000c5d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c5db:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c000c5e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c5e5:	8b 00                	mov    eax,DWORD PTR [eax]
c000c5e7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c5eb:	90                   	nop
c000c5ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c5f0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c5f4:	0f b7 c0             	movzx  eax,ax
c000c5f7:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c5fb:	7f bf                	jg     c000c5bc <tcp_receive+0x904>
c000c5fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c601:	f7 d8                	neg    eax
c000c603:	98                   	cwde   
c000c604:	83 ec 08             	sub    esp,0x8
c000c607:	50                   	push   eax
c000c608:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c60c:	e8 47 bd ff ff       	call   c0008358 <pbuf_header>
c000c611:	83 c4 10             	add    esp,0x10
c000c614:	0f b6 c0             	movzx  eax,al
c000c617:	85 c0                	test   eax,eax
c000c619:	74 51                	je     c000c66c <tcp_receive+0x9b4>
c000c61b:	83 ec 08             	sub    esp,0x8
c000c61e:	68 40 09 03 c0       	push   0xc0030940
c000c623:	68 a6 fd 02 c0       	push   0xc002fda6
c000c628:	e8 eb 37 01 00       	call   c001fe18 <CPrintf>
c000c62d:	83 c4 10             	add    esp,0x10
c000c630:	eb 3a                	jmp    c000c66c <tcp_receive+0x9b4>
c000c632:	66 90                	xchg   ax,ax
c000c634:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c638:	f7 d8                	neg    eax
c000c63a:	0f bf d0             	movsx  edx,ax
c000c63d:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c642:	83 ec 08             	sub    esp,0x8
c000c645:	52                   	push   edx
c000c646:	50                   	push   eax
c000c647:	e8 0c bd ff ff       	call   c0008358 <pbuf_header>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	0f b6 c0             	movzx  eax,al
c000c652:	85 c0                	test   eax,eax
c000c654:	74 16                	je     c000c66c <tcp_receive+0x9b4>
c000c656:	83 ec 08             	sub    esp,0x8
c000c659:	68 40 09 03 c0       	push   0xc0030940
c000c65e:	68 a6 fd 02 c0       	push   0xc002fda6
c000c663:	e8 b0 37 01 00       	call   c001fe18 <CPrintf>
c000c668:	83 c4 10             	add    esp,0x10
c000c66b:	90                   	nop
c000c66c:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c671:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c677:	89 d1                	mov    ecx,edx
c000c679:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c67d:	8b 52 28             	mov    edx,DWORD PTR [edx+0x28]
c000c680:	89 ce                	mov    esi,ecx
c000c682:	29 d6                	sub    esi,edx
c000c684:	89 f2                	mov    edx,esi
c000c686:	01 d0                	add    eax,edx
c000c688:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c68e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c692:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c695:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000c69a:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c69f:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c6a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000c6a8:	eb 2a                	jmp    c000c6d4 <tcp_receive+0xa1c>
c000c6aa:	66 90                	xchg   ax,ax
c000c6ac:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c6b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6b6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c6b9:	29 c2                	sub    edx,eax
c000c6bb:	89 d0                	mov    eax,edx
c000c6bd:	79 15                	jns    c000c6d4 <tcp_receive+0xa1c>
c000c6bf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6c3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000c6c6:	83 c8 02             	or     eax,0x2
c000c6c9:	88 c2                	mov    dl,al
c000c6cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6cf:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000c6d2:	66 90                	xchg   ax,ax
c000c6d4:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c6da:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6de:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c6e1:	29 c2                	sub    edx,eax
c000c6e3:	89 d0                	mov    eax,edx
c000c6e5:	0f 88 fd 0b 00 00    	js     c000d2e8 <tcp_receive+0x1630>
c000c6eb:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c6f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6f5:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000c6f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6fc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c6ff:	0f b7 c0             	movzx  eax,ax
c000c702:	01 c8                	add    eax,ecx
c000c704:	29 c2                	sub    edx,eax
c000c706:	89 d0                	mov    eax,edx
c000c708:	83 c0 01             	add    eax,0x1
c000c70b:	85 c0                	test   eax,eax
c000c70d:	0f 8f d5 0b 00 00    	jg     c000d2e8 <tcp_receive+0x1630>
c000c713:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c717:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c71a:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c71f:	39 c2                	cmp    edx,eax
c000c721:	0f 85 1d 07 00 00    	jne    c000ce44 <tcp_receive+0x118c>
c000c727:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c72d:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c732:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c736:	0f b7 c0             	movzx  eax,ax
c000c739:	83 ec 0c             	sub    esp,0xc
c000c73c:	50                   	push   eax
c000c73d:	e8 a6 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	0f b7 c0             	movzx  eax,ax
c000c748:	83 e0 03             	and    eax,0x3
c000c74b:	0f 95 c0             	setne  al
c000c74e:	0f b6 c0             	movzx  eax,al
c000c751:	01 d8                	add    eax,ebx
c000c753:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c759:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c75d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c760:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c766:	0f b7 d2             	movzx  edx,dx
c000c769:	0f b7 c0             	movzx  eax,ax
c000c76c:	39 c2                	cmp    edx,eax
c000c76e:	0f 83 2c 01 00 00    	jae    c000c8a0 <tcp_receive+0xbe8>
c000c774:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c779:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c77d:	0f b7 c0             	movzx  eax,ax
c000c780:	83 ec 0c             	sub    esp,0xc
c000c783:	50                   	push   eax
c000c784:	e8 5f 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c789:	83 c4 10             	add    esp,0x10
c000c78c:	0f b7 c0             	movzx  eax,ax
c000c78f:	83 e0 01             	and    eax,0x1
c000c792:	74 44                	je     c000c7d8 <tcp_receive+0xb20>
c000c794:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c799:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c79d:	80 e4 c0             	and    ah,0xc0
c000c7a0:	89 c3                	mov    ebx,eax
c000c7a2:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c7a7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7ab:	0f b7 c0             	movzx  eax,ax
c000c7ae:	83 ec 0c             	sub    esp,0xc
c000c7b1:	50                   	push   eax
c000c7b2:	e8 31 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7b7:	83 c4 10             	add    esp,0x10
c000c7ba:	0f b7 c0             	movzx  eax,ax
c000c7bd:	83 e0 3e             	and    eax,0x3e
c000c7c0:	83 ec 0c             	sub    esp,0xc
c000c7c3:	50                   	push   eax
c000c7c4:	e8 1f 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7c9:	83 c4 10             	add    esp,0x10
c000c7cc:	09 d8                	or     eax,ebx
c000c7ce:	8b 15 cc a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8cc
c000c7d4:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000c7d8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7dc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c7df:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c7e5:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c7ea:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7ee:	0f b7 c0             	movzx  eax,ax
c000c7f1:	83 ec 0c             	sub    esp,0xc
c000c7f4:	50                   	push   eax
c000c7f5:	e8 ee 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7fa:	83 c4 10             	add    esp,0x10
c000c7fd:	0f b7 c0             	movzx  eax,ax
c000c800:	83 e0 02             	and    eax,0x2
c000c803:	74 0f                	je     c000c814 <tcp_receive+0xb5c>
c000c805:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c80a:	83 e8 01             	sub    eax,0x1
c000c80d:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c813:	90                   	nop
c000c814:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c819:	0f b7 d0             	movzx  edx,ax
c000c81c:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c821:	83 ec 08             	sub    esp,0x8
c000c824:	52                   	push   edx
c000c825:	50                   	push   eax
c000c826:	e8 99 c2 ff ff       	call   c0008ac4 <pbuf_realloc>
c000c82b:	83 c4 10             	add    esp,0x10
c000c82e:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c834:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c839:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c83d:	0f b7 c0             	movzx  eax,ax
c000c840:	83 ec 0c             	sub    esp,0xc
c000c843:	50                   	push   eax
c000c844:	e8 9f 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c849:	83 c4 10             	add    esp,0x10
c000c84c:	0f b7 c0             	movzx  eax,ax
c000c84f:	83 e0 03             	and    eax,0x3
c000c852:	0f 95 c0             	setne  al
c000c855:	0f b6 c0             	movzx  eax,al
c000c858:	01 d8                	add    eax,ebx
c000c85a:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c860:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c866:	0f b7 d0             	movzx  edx,ax
c000c869:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c86e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c871:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c875:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c878:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c87c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c87f:	0f b7 c0             	movzx  eax,ax
c000c882:	01 d0                	add    eax,edx
c000c884:	39 c1                	cmp    ecx,eax
c000c886:	74 18                	je     c000c8a0 <tcp_receive+0xbe8>
c000c888:	83 ec 08             	sub    esp,0x8
c000c88b:	68 34 07 03 c0       	push   0xc0030734
c000c890:	68 a6 fd 02 c0       	push   0xc002fda6
c000c895:	e8 7e 35 01 00       	call   c001fe18 <CPrintf>
c000c89a:	83 c4 10             	add    esp,0x10
c000c89d:	8d 76 00             	lea    esi,[esi+0x0]
c000c8a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8a4:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c8aa:	85 c0                	test   eax,eax
c000c8ac:	0f 84 7e 02 00 00    	je     c000cb30 <tcp_receive+0xe78>
c000c8b2:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c8b7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c8bb:	0f b7 c0             	movzx  eax,ax
c000c8be:	83 ec 0c             	sub    esp,0xc
c000c8c1:	50                   	push   eax
c000c8c2:	e8 21 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c8c7:	83 c4 10             	add    esp,0x10
c000c8ca:	0f b7 c0             	movzx  eax,ax
c000c8cd:	83 e0 01             	and    eax,0x1
c000c8d0:	74 4a                	je     c000c91c <tcp_receive+0xc64>
c000c8d2:	eb 34                	jmp    c000c908 <tcp_receive+0xc50>
c000c8d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8d8:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c8de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c8e2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8e6:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c8ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000c8ee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8f2:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c8f8:	83 ec 0c             	sub    esp,0xc
c000c8fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c8ff:	e8 68 d8 ff ff       	call   c000a16c <tcp_seg_free>
c000c904:	83 c4 10             	add    esp,0x10
c000c907:	90                   	nop
c000c908:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c90c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c912:	85 c0                	test   eax,eax
c000c914:	75 be                	jne    c000c8d4 <tcp_receive+0xc1c>
c000c916:	e9 15 02 00 00       	jmp    c000cb30 <tcp_receive+0xe78>
c000c91b:	90                   	nop
c000c91c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c920:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c926:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c92a:	e9 bd 00 00 00       	jmp    c000c9ec <tcp_receive+0xd34>
c000c92f:	90                   	nop
c000c930:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c934:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c937:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c93b:	0f b7 c0             	movzx  eax,ax
c000c93e:	83 ec 0c             	sub    esp,0xc
c000c941:	50                   	push   eax
c000c942:	e8 a1 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c947:	83 c4 10             	add    esp,0x10
c000c94a:	0f b7 c0             	movzx  eax,ax
c000c94d:	83 e0 01             	and    eax,0x1
c000c950:	74 76                	je     c000c9c8 <tcp_receive+0xd10>
c000c952:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c957:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c95b:	0f b7 c0             	movzx  eax,ax
c000c95e:	83 ec 0c             	sub    esp,0xc
c000c961:	50                   	push   eax
c000c962:	e8 81 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c967:	83 c4 10             	add    esp,0x10
c000c96a:	0f b7 c0             	movzx  eax,ax
c000c96d:	83 e0 02             	and    eax,0x2
c000c970:	75 56                	jne    c000c9c8 <tcp_receive+0xd10>
c000c972:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c977:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000c97b:	83 ec 0c             	sub    esp,0xc
c000c97e:	6a 01                	push   0x1
c000c980:	e8 63 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c985:	83 c4 10             	add    esp,0x10
c000c988:	8b 15 cc a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8cc
c000c98e:	09 d8                	or     eax,ebx
c000c990:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000c994:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c99a:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c99f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c9a3:	0f b7 c0             	movzx  eax,ax
c000c9a6:	83 ec 0c             	sub    esp,0xc
c000c9a9:	50                   	push   eax
c000c9aa:	e8 39 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c9af:	83 c4 10             	add    esp,0x10
c000c9b2:	0f b7 c0             	movzx  eax,ax
c000c9b5:	83 e0 03             	and    eax,0x3
c000c9b8:	0f 95 c0             	setne  al
c000c9bb:	0f b6 c0             	movzx  eax,al
c000c9be:	01 d8                	add    eax,ebx
c000c9c0:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c9c6:	66 90                	xchg   ax,ax
c000c9c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c9cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c9d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000c9d6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9da:	83 ec 0c             	sub    esp,0xc
c000c9dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9e1:	e8 86 d7 ff ff       	call   c000a16c <tcp_seg_free>
c000c9e6:	83 c4 10             	add    esp,0x10
c000c9e9:	8d 76 00             	lea    esi,[esi+0x0]
c000c9ec:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c9f1:	74 31                	je     c000ca24 <tcp_receive+0xd6c>
c000c9f3:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c9f9:	0f b7 d0             	movzx  edx,ax
c000c9fc:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ca01:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ca04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca0b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ca0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca12:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca15:	0f b7 c0             	movzx  eax,ax
c000ca18:	01 d0                	add    eax,edx
c000ca1a:	29 c1                	sub    ecx,eax
c000ca1c:	89 c8                	mov    eax,ecx
c000ca1e:	0f 89 0c ff ff ff    	jns    c000c930 <tcp_receive+0xc78>
c000ca24:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000ca29:	0f 84 f1 00 00 00    	je     c000cb20 <tcp_receive+0xe68>
c000ca2f:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000ca35:	0f b7 d0             	movzx  edx,ax
c000ca38:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ca3d:	01 c2                	add    edx,eax
c000ca3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ca49:	29 c2                	sub    edx,eax
c000ca4b:	89 d0                	mov    eax,edx
c000ca4d:	85 c0                	test   eax,eax
c000ca4f:	0f 8e cb 00 00 00    	jle    c000cb20 <tcp_receive+0xe68>
c000ca55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca59:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ca5f:	89 c2                	mov    edx,eax
c000ca61:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ca66:	89 d7                	mov    edi,edx
c000ca68:	29 c7                	sub    edi,eax
c000ca6a:	89 f8                	mov    eax,edi
c000ca6c:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000ca72:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000ca77:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ca7b:	0f b7 c0             	movzx  eax,ax
c000ca7e:	83 ec 0c             	sub    esp,0xc
c000ca81:	50                   	push   eax
c000ca82:	e8 61 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ca87:	83 c4 10             	add    esp,0x10
c000ca8a:	0f b7 c0             	movzx  eax,ax
c000ca8d:	83 e0 02             	and    eax,0x2
c000ca90:	74 0e                	je     c000caa0 <tcp_receive+0xde8>
c000ca92:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000ca97:	83 e8 01             	sub    eax,0x1
c000ca9a:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000caa0:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000caa5:	0f b7 d0             	movzx  edx,ax
c000caa8:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000caad:	83 ec 08             	sub    esp,0x8
c000cab0:	52                   	push   edx
c000cab1:	50                   	push   eax
c000cab2:	e8 0d c0 ff ff       	call   c0008ac4 <pbuf_realloc>
c000cab7:	83 c4 10             	add    esp,0x10
c000caba:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000cac0:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000cac5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cac9:	0f b7 c0             	movzx  eax,ax
c000cacc:	83 ec 0c             	sub    esp,0xc
c000cacf:	50                   	push   eax
c000cad0:	e8 13 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cad5:	83 c4 10             	add    esp,0x10
c000cad8:	0f b7 c0             	movzx  eax,ax
c000cadb:	83 e0 03             	and    eax,0x3
c000cade:	0f 95 c0             	setne  al
c000cae1:	0f b6 c0             	movzx  eax,al
c000cae4:	01 d8                	add    eax,ebx
c000cae6:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000caec:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000caf2:	0f b7 d0             	movzx  edx,ax
c000caf5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cafa:	01 c2                	add    edx,eax
c000cafc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb00:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cb03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cb06:	39 c2                	cmp    edx,eax
c000cb08:	74 16                	je     c000cb20 <tcp_receive+0xe68>
c000cb0a:	83 ec 08             	sub    esp,0x8
c000cb0d:	68 6c 07 03 c0       	push   0xc003076c
c000cb12:	68 a6 fd 02 c0       	push   0xc002fda6
c000cb17:	e8 fc 32 01 00       	call   c001fe18 <CPrintf>
c000cb1c:	83 c4 10             	add    esp,0x10
c000cb1f:	90                   	nop
c000cb20:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb24:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cb28:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cb2e:	66 90                	xchg   ax,ax
c000cb30:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cb36:	0f b7 d0             	movzx  edx,ax
c000cb39:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cb3e:	01 c2                	add    edx,eax
c000cb40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb44:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000cb47:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb4b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000cb4e:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cb54:	0f b7 d2             	movzx  edx,dx
c000cb57:	0f b7 c0             	movzx  eax,ax
c000cb5a:	39 c2                	cmp    edx,eax
c000cb5c:	73 16                	jae    c000cb74 <tcp_receive+0xebc>
c000cb5e:	83 ec 08             	sub    esp,0x8
c000cb61:	68 a8 07 03 c0       	push   0xc00307a8
c000cb66:	68 a6 fd 02 c0       	push   0xc002fda6
c000cb6b:	e8 a8 32 01 00       	call   c001fe18 <CPrintf>
c000cb70:	83 c4 10             	add    esp,0x10
c000cb73:	90                   	nop
c000cb74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb78:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000cb7b:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cb81:	89 d6                	mov    esi,edx
c000cb83:	29 c6                	sub    esi,eax
c000cb85:	89 f0                	mov    eax,esi
c000cb87:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000cb8b:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000cb8f:	83 ec 0c             	sub    esp,0xc
c000cb92:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cb96:	e8 7d d2 ff ff       	call   c0009e18 <tcp_update_rcv_ann_wnd>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000cba3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cba6:	0f b7 c0             	movzx  eax,ax
c000cba9:	85 c0                	test   eax,eax
c000cbab:	74 17                	je     c000cbc4 <tcp_receive+0xf0c>
c000cbad:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000cbb2:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000cbb7:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000cbc1:	8d 76 00             	lea    esi,[esi+0x0]
c000cbc4:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000cbc9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cbcd:	0f b7 c0             	movzx  eax,ax
c000cbd0:	83 ec 0c             	sub    esp,0xc
c000cbd3:	50                   	push   eax
c000cbd4:	e8 0f 40 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cbd9:	83 c4 10             	add    esp,0x10
c000cbdc:	0f b7 c0             	movzx  eax,ax
c000cbdf:	83 e0 01             	and    eax,0x1
c000cbe2:	0f 84 d8 01 00 00    	je     c000cdc0 <tcp_receive+0x1108>
c000cbe8:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000cbed:	83 c8 20             	or     eax,0x20
c000cbf0:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000cbf5:	e9 c6 01 00 00       	jmp    c000cdc0 <tcp_receive+0x1108>
c000cbfa:	66 90                	xchg   ax,ax
c000cbfc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc00:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc0a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc0e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cc1a:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000cc1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc23:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cc26:	0f b7 d8             	movzx  ebx,ax
c000cc29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc2d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc30:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cc34:	0f b7 c0             	movzx  eax,ax
c000cc37:	83 ec 0c             	sub    esp,0xc
c000cc3a:	50                   	push   eax
c000cc3b:	e8 a8 3f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cc40:	83 c4 10             	add    esp,0x10
c000cc43:	0f b7 c0             	movzx  eax,ax
c000cc46:	83 e0 03             	and    eax,0x3
c000cc49:	0f 95 c0             	setne  al
c000cc4c:	0f b6 c0             	movzx  eax,al
c000cc4f:	8d 14 03             	lea    edx,[ebx+eax*1]
c000cc52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc56:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cc59:	01 c2                	add    edx,eax
c000cc5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc5f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000cc62:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc66:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cc69:	0f b7 d8             	movzx  ebx,ax
c000cc6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc70:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cc73:	0f b7 f0             	movzx  esi,ax
c000cc76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc7a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc7d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cc81:	0f b7 c0             	movzx  eax,ax
c000cc84:	83 ec 0c             	sub    esp,0xc
c000cc87:	50                   	push   eax
c000cc88:	e8 5b 3f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cc8d:	83 c4 10             	add    esp,0x10
c000cc90:	0f b7 c0             	movzx  eax,ax
c000cc93:	83 e0 03             	and    eax,0x3
c000cc96:	0f 95 c0             	setne  al
c000cc99:	0f b6 c0             	movzx  eax,al
c000cc9c:	01 f0                	add    eax,esi
c000cc9e:	39 c3                	cmp    ebx,eax
c000cca0:	7d 16                	jge    c000ccb8 <tcp_receive+0x1000>
c000cca2:	83 ec 08             	sub    esp,0x8
c000cca5:	68 c8 07 03 c0       	push   0xc00307c8
c000ccaa:	68 a6 fd 02 c0       	push   0xc002fda6
c000ccaf:	e8 64 31 01 00       	call   c001fe18 <CPrintf>
c000ccb4:	83 c4 10             	add    esp,0x10
c000ccb7:	90                   	nop
c000ccb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ccbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ccbf:	0f b7 d8             	movzx  ebx,ax
c000ccc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ccc6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ccc9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cccd:	0f b7 c0             	movzx  eax,ax
c000ccd0:	83 ec 0c             	sub    esp,0xc
c000ccd3:	50                   	push   eax
c000ccd4:	e8 0f 3f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ccd9:	83 c4 10             	add    esp,0x10
c000ccdc:	0f b7 c0             	movzx  eax,ax
c000ccdf:	83 e0 03             	and    eax,0x3
c000cce2:	0f 95 c0             	setne  al
c000cce5:	0f b6 c0             	movzx  eax,al
c000cce8:	8d 14 03             	lea    edx,[ebx+eax*1]
c000cceb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccef:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ccf2:	29 d0                	sub    eax,edx
c000ccf4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ccf8:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000ccfc:	83 ec 0c             	sub    esp,0xc
c000ccff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd03:	e8 10 d1 ff ff       	call   c0009e18 <tcp_update_rcv_ann_wnd>
c000cd08:	83 c4 10             	add    esp,0x10
c000cd0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd12:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cd15:	0f b7 c0             	movzx  eax,ax
c000cd18:	85 c0                	test   eax,eax
c000cd1a:	74 3c                	je     c000cd58 <tcp_receive+0x10a0>
c000cd1c:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cd21:	85 c0                	test   eax,eax
c000cd23:	74 1b                	je     c000cd40 <tcp_receive+0x1088>
c000cd25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd29:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cd2c:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cd31:	83 ec 08             	sub    esp,0x8
c000cd34:	52                   	push   edx
c000cd35:	50                   	push   eax
c000cd36:	e8 f1 bf ff ff       	call   c0008d2c <pbuf_cat>
c000cd3b:	83 c4 10             	add    esp,0x10
c000cd3e:	eb 0c                	jmp    c000cd4c <tcp_receive+0x1094>
c000cd40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd47:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000cd4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cd57:	90                   	nop
c000cd58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd5f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cd63:	0f b7 c0             	movzx  eax,ax
c000cd66:	83 ec 0c             	sub    esp,0xc
c000cd69:	50                   	push   eax
c000cd6a:	e8 79 3e ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cd6f:	83 c4 10             	add    esp,0x10
c000cd72:	0f b7 c0             	movzx  eax,ax
c000cd75:	83 e0 01             	and    eax,0x1
c000cd78:	74 26                	je     c000cda0 <tcp_receive+0x10e8>
c000cd7a:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000cd7f:	83 c8 20             	or     eax,0x20
c000cd82:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000cd87:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd8b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000cd8e:	83 f8 04             	cmp    eax,0x4
c000cd91:	75 0d                	jne    c000cda0 <tcp_receive+0x10e8>
c000cd93:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd97:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000cd9e:	66 90                	xchg   ax,ax
c000cda0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cda4:	8b 10                	mov    edx,DWORD PTR [eax]
c000cda6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdaa:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cdb0:	83 ec 0c             	sub    esp,0xc
c000cdb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb7:	e8 b0 d3 ff ff       	call   c000a16c <tcp_seg_free>
c000cdbc:	83 c4 10             	add    esp,0x10
c000cdbf:	90                   	nop
c000cdc0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdc4:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cdca:	85 c0                	test   eax,eax
c000cdcc:	74 22                	je     c000cdf0 <tcp_receive+0x1138>
c000cdce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdd2:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cdd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cddb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cdde:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cde2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cde5:	39 c2                	cmp    edx,eax
c000cde7:	0f 84 0f fe ff ff    	je     c000cbfc <tcp_receive+0xf44>
c000cded:	8d 76 00             	lea    esi,[esi+0x0]
c000cdf0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdf4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cdf7:	0f b6 c0             	movzx  eax,al
c000cdfa:	83 e0 01             	and    eax,0x1
c000cdfd:	74 2d                	je     c000ce2c <tcp_receive+0x1174>
c000cdff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce03:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce06:	83 e0 fe             	and    eax,0xfffffffe
c000ce09:	88 c2                	mov    dl,al
c000ce0b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce0f:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ce12:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce16:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce19:	83 c8 02             	or     eax,0x2
c000ce1c:	88 c2                	mov    dl,al
c000ce1e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce22:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ce25:	e9 22 05 00 00       	jmp    c000d34c <tcp_receive+0x1694>
c000ce2a:	66 90                	xchg   ax,ax
c000ce2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce30:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce33:	83 c8 01             	or     eax,0x1
c000ce36:	88 c2                	mov    dl,al
c000ce38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce3c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ce3f:	e9 08 05 00 00       	jmp    c000d34c <tcp_receive+0x1694>
c000ce44:	83 ec 0c             	sub    esp,0xc
c000ce47:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce4b:	e8 c4 2e 00 00       	call   c000fd14 <tcp_send_empty_ack>
c000ce50:	83 c4 10             	add    esp,0x10
c000ce53:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce57:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ce5d:	85 c0                	test   eax,eax
c000ce5f:	75 23                	jne    c000ce84 <tcp_receive+0x11cc>
c000ce61:	83 ec 0c             	sub    esp,0xc
c000ce64:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ce69:	e8 96 d3 ff ff       	call   c000a204 <tcp_seg_copy>
c000ce6e:	83 c4 10             	add    esp,0x10
c000ce71:	89 c2                	mov    edx,eax
c000ce73:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce77:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000ce7d:	e9 ca 04 00 00       	jmp    c000d34c <tcp_receive+0x1694>
c000ce82:	66 90                	xchg   ax,ax
c000ce84:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000ce8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce90:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ce96:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce9a:	e9 21 04 00 00       	jmp    c000d2c0 <tcp_receive+0x1608>
c000ce9f:	90                   	nop
c000cea0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cea4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cea7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ceaa:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ceaf:	39 c2                	cmp    edx,eax
c000ceb1:	75 75                	jne    c000cf28 <tcp_receive+0x1270>
c000ceb3:	8b 15 c8 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8c8
c000ceb9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cebd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cec0:	0f b7 d2             	movzx  edx,dx
c000cec3:	0f b7 c0             	movzx  eax,ax
c000cec6:	39 c2                	cmp    edx,eax
c000cec8:	0f 86 02 04 00 00    	jbe    c000d2d0 <tcp_receive+0x1618>
c000cece:	83 ec 0c             	sub    esp,0xc
c000ced1:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ced6:	e8 29 d3 ff ff       	call   c000a204 <tcp_seg_copy>
c000cedb:	83 c4 10             	add    esp,0x10
c000cede:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cee2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cee7:	0f 84 e7 03 00 00    	je     c000d2d4 <tcp_receive+0x161c>
c000ceed:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cef2:	74 0c                	je     c000cf00 <tcp_receive+0x1248>
c000cef4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cef8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cefc:	89 10                	mov    DWORD PTR [eax],edx
c000cefe:	eb 10                	jmp    c000cf10 <tcp_receive+0x1258>
c000cf00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf08:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cf0e:	66 90                	xchg   ax,ax
c000cf10:	83 ec 08             	sub    esp,0x8
c000cf13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf1b:	e8 2c ec ff ff       	call   c000bb4c <tcp_oos_insert_segment>
c000cf20:	83 c4 10             	add    esp,0x10
c000cf23:	e9 ac 03 00 00       	jmp    c000d2d4 <tcp_receive+0x161c>
c000cf28:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cf2d:	75 61                	jne    c000cf90 <tcp_receive+0x12d8>
c000cf2f:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cf35:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf39:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cf3f:	29 c2                	sub    edx,eax
c000cf41:	89 d0                	mov    eax,edx
c000cf43:	0f 89 27 01 00 00    	jns    c000d070 <tcp_receive+0x13b8>
c000cf49:	83 ec 0c             	sub    esp,0xc
c000cf4c:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cf51:	e8 ae d2 ff ff       	call   c000a204 <tcp_seg_copy>
c000cf56:	83 c4 10             	add    esp,0x10
c000cf59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf5d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cf62:	0f 84 70 03 00 00    	je     c000d2d8 <tcp_receive+0x1620>
c000cf68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf70:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cf76:	83 ec 08             	sub    esp,0x8
c000cf79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf81:	e8 c6 eb ff ff       	call   c000bb4c <tcp_oos_insert_segment>
c000cf86:	83 c4 10             	add    esp,0x10
c000cf89:	e9 4a 03 00 00       	jmp    c000d2d8 <tcp_receive+0x1620>
c000cf8e:	66 90                	xchg   ax,ax
c000cf90:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cf96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf9a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf9d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cfa0:	29 c2                	sub    edx,eax
c000cfa2:	89 d0                	mov    eax,edx
c000cfa4:	83 e8 01             	sub    eax,0x1
c000cfa7:	0f 88 c3 00 00 00    	js     c000d070 <tcp_receive+0x13b8>
c000cfad:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cfb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfb7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cfba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cfbd:	29 c2                	sub    edx,eax
c000cfbf:	89 d0                	mov    eax,edx
c000cfc1:	83 c0 01             	add    eax,0x1
c000cfc4:	85 c0                	test   eax,eax
c000cfc6:	0f 8f a4 00 00 00    	jg     c000d070 <tcp_receive+0x13b8>
c000cfcc:	83 ec 0c             	sub    esp,0xc
c000cfcf:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cfd4:	e8 2b d2 ff ff       	call   c000a204 <tcp_seg_copy>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfe0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cfe5:	0f 84 f1 02 00 00    	je     c000d2dc <tcp_receive+0x1624>
c000cfeb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cfef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cff2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cff5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cff9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cffc:	0f b7 c0             	movzx  eax,ax
c000cfff:	01 c2                	add    edx,eax
c000d001:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d006:	29 c2                	sub    edx,eax
c000d008:	89 d0                	mov    eax,edx
c000d00a:	85 c0                	test   eax,eax
c000d00c:	7e 3e                	jle    c000d04c <tcp_receive+0x1394>
c000d00e:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d013:	89 c2                	mov    edx,eax
c000d015:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d019:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d01c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d01f:	89 d7                	mov    edi,edx
c000d021:	29 c7                	sub    edi,eax
c000d023:	89 f8                	mov    eax,edi
c000d025:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d029:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000d02d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d031:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d034:	0f b7 d0             	movzx  edx,ax
c000d037:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d03b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d03e:	83 ec 08             	sub    esp,0x8
c000d041:	52                   	push   edx
c000d042:	50                   	push   eax
c000d043:	e8 7c ba ff ff       	call   c0008ac4 <pbuf_realloc>
c000d048:	83 c4 10             	add    esp,0x10
c000d04b:	90                   	nop
c000d04c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d050:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d054:	89 10                	mov    DWORD PTR [eax],edx
c000d056:	83 ec 08             	sub    esp,0x8
c000d059:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d061:	e8 e6 ea ff ff       	call   c000bb4c <tcp_oos_insert_segment>
c000d066:	83 c4 10             	add    esp,0x10
c000d069:	e9 6e 02 00 00       	jmp    c000d2dc <tcp_receive+0x1624>
c000d06e:	66 90                	xchg   ax,ax
c000d070:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d074:	8b 00                	mov    eax,DWORD PTR [eax]
c000d076:	85 c0                	test   eax,eax
c000d078:	0f 85 2e 02 00 00    	jne    c000d2ac <tcp_receive+0x15f4>
c000d07e:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d084:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d088:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d08b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d08e:	29 c2                	sub    edx,eax
c000d090:	89 d0                	mov    eax,edx
c000d092:	85 c0                	test   eax,eax
c000d094:	0f 8e 12 02 00 00    	jle    c000d2ac <tcp_receive+0x15f4>
c000d09a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d09e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d0a1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d0a5:	0f b7 c0             	movzx  eax,ax
c000d0a8:	83 ec 0c             	sub    esp,0xc
c000d0ab:	50                   	push   eax
c000d0ac:	e8 37 3b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d0b1:	83 c4 10             	add    esp,0x10
c000d0b4:	0f b7 c0             	movzx  eax,ax
c000d0b7:	83 e0 01             	and    eax,0x1
c000d0ba:	0f 85 20 02 00 00    	jne    c000d2e0 <tcp_receive+0x1628>
c000d0c0:	83 ec 0c             	sub    esp,0xc
c000d0c3:	68 c0 a8 03 c0       	push   0xc003a8c0
c000d0c8:	e8 37 d1 ff ff       	call   c000a204 <tcp_seg_copy>
c000d0cd:	83 c4 10             	add    esp,0x10
c000d0d0:	89 c2                	mov    edx,eax
c000d0d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0d6:	89 10                	mov    DWORD PTR [eax],edx
c000d0d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0de:	85 c0                	test   eax,eax
c000d0e0:	0f 84 fe 01 00 00    	je     c000d2e4 <tcp_receive+0x162c>
c000d0e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0ea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d0ed:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d0f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d0f7:	0f b7 c0             	movzx  eax,ax
c000d0fa:	01 c2                	add    edx,eax
c000d0fc:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d101:	29 c2                	sub    edx,eax
c000d103:	89 d0                	mov    eax,edx
c000d105:	85 c0                	test   eax,eax
c000d107:	7e 3f                	jle    c000d148 <tcp_receive+0x1490>
c000d109:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d10e:	89 c2                	mov    edx,eax
c000d110:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d114:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d117:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d11a:	89 d6                	mov    esi,edx
c000d11c:	29 c6                	sub    esi,eax
c000d11e:	89 f0                	mov    eax,esi
c000d120:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d124:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000d128:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d12c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d12f:	0f b7 d0             	movzx  edx,ax
c000d132:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d136:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d139:	83 ec 08             	sub    esp,0x8
c000d13c:	52                   	push   edx
c000d13d:	50                   	push   eax
c000d13e:	e8 81 b9 ff ff       	call   c0008ac4 <pbuf_realloc>
c000d143:	83 c4 10             	add    esp,0x10
c000d146:	66 90                	xchg   ax,ax
c000d148:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d14e:	0f b7 d0             	movzx  edx,ax
c000d151:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d156:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d159:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d15d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d160:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d164:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d167:	0f b7 c0             	movzx  eax,ax
c000d16a:	01 d0                	add    eax,edx
c000d16c:	39 c1                	cmp    ecx,eax
c000d16e:	0f 86 70 01 00 00    	jbe    c000d2e4 <tcp_receive+0x162c>
c000d174:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d178:	8b 00                	mov    eax,DWORD PTR [eax]
c000d17a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d17d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d181:	0f b7 c0             	movzx  eax,ax
c000d184:	83 ec 0c             	sub    esp,0xc
c000d187:	50                   	push   eax
c000d188:	e8 5b 3a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d18d:	83 c4 10             	add    esp,0x10
c000d190:	0f b7 c0             	movzx  eax,ax
c000d193:	83 e0 01             	and    eax,0x1
c000d196:	74 50                	je     c000d1e8 <tcp_receive+0x1530>
c000d198:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d19c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d19e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d1a1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d1a5:	80 e4 c0             	and    ah,0xc0
c000d1a8:	89 c3                	mov    ebx,eax
c000d1aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d1ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000d1b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d1b3:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d1b7:	0f b7 c0             	movzx  eax,ax
c000d1ba:	83 ec 0c             	sub    esp,0xc
c000d1bd:	50                   	push   eax
c000d1be:	e8 25 3a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d1c3:	83 c4 10             	add    esp,0x10
c000d1c6:	0f b7 c0             	movzx  eax,ax
c000d1c9:	83 e0 3e             	and    eax,0x3e
c000d1cc:	83 ec 0c             	sub    esp,0xc
c000d1cf:	50                   	push   eax
c000d1d0:	e8 13 3a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d1d5:	83 c4 10             	add    esp,0x10
c000d1d8:	09 d8                	or     eax,ebx
c000d1da:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d1de:	8b 12                	mov    edx,DWORD PTR [edx]
c000d1e0:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000d1e3:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000d1e7:	90                   	nop
c000d1e8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1ec:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d1ef:	89 c2                	mov    edx,eax
c000d1f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1f5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d1f8:	01 d0                	add    eax,edx
c000d1fa:	89 c3                	mov    ebx,eax
c000d1fc:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d201:	89 c1                	mov    ecx,eax
c000d203:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d207:	8b 10                	mov    edx,DWORD PTR [eax]
c000d209:	89 d8                	mov    eax,ebx
c000d20b:	29 c8                	sub    eax,ecx
c000d20d:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000d211:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d215:	8b 00                	mov    eax,DWORD PTR [eax]
c000d217:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d21a:	0f b7 d0             	movzx  edx,ax
c000d21d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d221:	8b 00                	mov    eax,DWORD PTR [eax]
c000d223:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d226:	83 ec 08             	sub    esp,0x8
c000d229:	52                   	push   edx
c000d22a:	50                   	push   eax
c000d22b:	e8 94 b8 ff ff       	call   c0008ac4 <pbuf_realloc>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d237:	8b 00                	mov    eax,DWORD PTR [eax]
c000d239:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
c000d23c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d240:	8b 00                	mov    eax,DWORD PTR [eax]
c000d242:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d245:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d249:	0f b7 c0             	movzx  eax,ax
c000d24c:	83 ec 0c             	sub    esp,0xc
c000d24f:	50                   	push   eax
c000d250:	e8 93 39 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d255:	83 c4 10             	add    esp,0x10
c000d258:	0f b7 c0             	movzx  eax,ax
c000d25b:	83 e0 03             	and    eax,0x3
c000d25e:	0f 95 c0             	setne  al
c000d261:	0f b6 c0             	movzx  eax,al
c000d264:	01 d8                	add    eax,ebx
c000d266:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000d26c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d272:	0f b7 d0             	movzx  edx,ax
c000d275:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d27a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d27d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d281:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d284:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d288:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d28b:	0f b7 c0             	movzx  eax,ax
c000d28e:	01 d0                	add    eax,edx
c000d290:	39 c1                	cmp    ecx,eax
c000d292:	74 50                	je     c000d2e4 <tcp_receive+0x162c>
c000d294:	83 ec 08             	sub    esp,0x8
c000d297:	68 34 07 03 c0       	push   0xc0030734
c000d29c:	68 a6 fd 02 c0       	push   0xc002fda6
c000d2a1:	e8 72 2b 01 00       	call   c001fe18 <CPrintf>
c000d2a6:	83 c4 10             	add    esp,0x10
c000d2a9:	eb 39                	jmp    c000d2e4 <tcp_receive+0x162c>
c000d2ab:	90                   	nop
c000d2ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d2b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d2b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d2ba:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2be:	66 90                	xchg   ax,ax
c000d2c0:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000d2c5:	0f 85 d5 fb ff ff    	jne    c000cea0 <tcp_receive+0x11e8>
c000d2cb:	eb 7f                	jmp    c000d34c <tcp_receive+0x1694>
c000d2cd:	8d 76 00             	lea    esi,[esi+0x0]
c000d2d0:	90                   	nop
c000d2d1:	eb 79                	jmp    c000d34c <tcp_receive+0x1694>
c000d2d3:	90                   	nop
c000d2d4:	90                   	nop
c000d2d5:	eb 75                	jmp    c000d34c <tcp_receive+0x1694>
c000d2d7:	90                   	nop
c000d2d8:	90                   	nop
c000d2d9:	eb 71                	jmp    c000d34c <tcp_receive+0x1694>
c000d2db:	90                   	nop
c000d2dc:	90                   	nop
c000d2dd:	eb 6d                	jmp    c000d34c <tcp_receive+0x1694>
c000d2df:	90                   	nop
c000d2e0:	90                   	nop
c000d2e1:	eb 69                	jmp    c000d34c <tcp_receive+0x1694>
c000d2e3:	90                   	nop
c000d2e4:	90                   	nop
c000d2e5:	eb 65                	jmp    c000d34c <tcp_receive+0x1694>
c000d2e7:	90                   	nop
c000d2e8:	83 ec 0c             	sub    esp,0xc
c000d2eb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d2ef:	e8 20 2a 00 00       	call   c000fd14 <tcp_send_empty_ack>
c000d2f4:	83 c4 10             	add    esp,0x10
c000d2f7:	eb 53                	jmp    c000d34c <tcp_receive+0x1694>
c000d2f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d2fc:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d302:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d306:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d309:	29 c2                	sub    edx,eax
c000d30b:	89 d0                	mov    eax,edx
c000d30d:	78 25                	js     c000d334 <tcp_receive+0x167c>
c000d30f:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d315:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d319:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d31c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d320:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d323:	0f b7 c0             	movzx  eax,ax
c000d326:	01 c8                	add    eax,ecx
c000d328:	29 c2                	sub    edx,eax
c000d32a:	89 d0                	mov    eax,edx
c000d32c:	83 c0 01             	add    eax,0x1
c000d32f:	85 c0                	test   eax,eax
c000d331:	7e 19                	jle    c000d34c <tcp_receive+0x1694>
c000d333:	90                   	nop
c000d334:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d338:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d33b:	83 c8 02             	or     eax,0x2
c000d33e:	88 c2                	mov    dl,al
c000d340:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d344:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d347:	eb 03                	jmp    c000d34c <tcp_receive+0x1694>
c000d349:	8d 76 00             	lea    esi,[esi+0x0]
c000d34c:	90                   	nop
c000d34d:	83 c4 30             	add    esp,0x30
c000d350:	5b                   	pop    ebx
c000d351:	5e                   	pop    esi
c000d352:	5f                   	pop    edi
c000d353:	c3                   	ret    

c000d354 <tcp_parseopt>:
c000d354:	83 ec 1c             	sub    esp,0x1c
c000d357:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d35c:	83 c0 14             	add    eax,0x14
c000d35f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d363:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d368:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d36c:	0f b7 c0             	movzx  eax,ax
c000d36f:	83 ec 0c             	sub    esp,0xc
c000d372:	50                   	push   eax
c000d373:	e8 70 38 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d378:	83 c4 10             	add    esp,0x10
c000d37b:	0f b7 c0             	movzx  eax,ax
c000d37e:	c1 e8 0c             	shr    eax,0xc
c000d381:	0f b7 c0             	movzx  eax,ax
c000d384:	83 f8 05             	cmp    eax,0x5
c000d387:	0f 86 6f 01 00 00    	jbe    c000d4fc <tcp_parseopt+0x1a8>
c000d38d:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d392:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d396:	0f b7 c0             	movzx  eax,ax
c000d399:	83 ec 0c             	sub    esp,0xc
c000d39c:	50                   	push   eax
c000d39d:	e8 46 38 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d3a2:	83 c4 10             	add    esp,0x10
c000d3a5:	0f b7 c0             	movzx  eax,ax
c000d3a8:	c1 e8 0c             	shr    eax,0xc
c000d3ab:	83 e8 05             	sub    eax,0x5
c000d3ae:	c1 e0 02             	shl    eax,0x2
c000d3b1:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d3b6:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000d3bd:	e9 1e 01 00 00       	jmp    c000d4e0 <tcp_parseopt+0x18c>
c000d3c2:	66 90                	xchg   ax,ax
c000d3c4:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d3c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d3cd:	01 d0                	add    eax,edx
c000d3cf:	8a 00                	mov    al,BYTE PTR [eax]
c000d3d1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000d3d5:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c000d3da:	83 f8 01             	cmp    eax,0x1
c000d3dd:	74 15                	je     c000d3f4 <tcp_parseopt+0xa0>
c000d3df:	83 f8 02             	cmp    eax,0x2
c000d3e2:	74 24                	je     c000d408 <tcp_parseopt+0xb4>
c000d3e4:	85 c0                	test   eax,eax
c000d3e6:	0f 85 bc 00 00 00    	jne    c000d4a8 <tcp_parseopt+0x154>
c000d3ec:	e9 0b 01 00 00       	jmp    c000d4fc <tcp_parseopt+0x1a8>
c000d3f1:	8d 76 00             	lea    esi,[esi+0x0]
c000d3f4:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d3f9:	83 c0 01             	add    eax,0x1
c000d3fc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d401:	e9 da 00 00 00       	jmp    c000d4e0 <tcp_parseopt+0x18c>
c000d406:	66 90                	xchg   ax,ax
c000d408:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d40d:	8d 50 01             	lea    edx,[eax+0x1]
c000d410:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d414:	01 d0                	add    eax,edx
c000d416:	8a 00                	mov    al,BYTE PTR [eax]
c000d418:	0f b6 c0             	movzx  eax,al
c000d41b:	83 f8 04             	cmp    eax,0x4
c000d41e:	0f 85 d0 00 00 00    	jne    c000d4f4 <tcp_parseopt+0x1a0>
c000d424:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d429:	8d 50 03             	lea    edx,[eax+0x3]
c000d42c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d431:	39 c2                	cmp    edx,eax
c000d433:	0f 8d bb 00 00 00    	jge    c000d4f4 <tcp_parseopt+0x1a0>
c000d439:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d43e:	8d 50 02             	lea    edx,[eax+0x2]
c000d441:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d445:	01 d0                	add    eax,edx
c000d447:	8a 00                	mov    al,BYTE PTR [eax]
c000d449:	0f b6 c0             	movzx  eax,al
c000d44c:	c1 e0 08             	shl    eax,0x8
c000d44f:	89 c2                	mov    edx,eax
c000d451:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d456:	8d 48 03             	lea    ecx,[eax+0x3]
c000d459:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d45d:	01 c8                	add    eax,ecx
c000d45f:	8a 00                	mov    al,BYTE PTR [eax]
c000d461:	0f b6 c0             	movzx  eax,al
c000d464:	09 d0                	or     eax,edx
c000d466:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c000d46b:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d470:	3d 18 02 00 00       	cmp    eax,0x218
c000d475:	77 11                	ja     c000d488 <tcp_parseopt+0x134>
c000d477:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d47c:	85 c0                	test   eax,eax
c000d47e:	74 08                	je     c000d488 <tcp_parseopt+0x134>
c000d480:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c000d485:	eb 09                	jmp    c000d490 <tcp_parseopt+0x13c>
c000d487:	90                   	nop
c000d488:	b8 18 02 00 00       	mov    eax,0x218
c000d48d:	8d 76 00             	lea    esi,[esi+0x0]
c000d490:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d494:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d498:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d49d:	83 c0 04             	add    eax,0x4
c000d4a0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d4a5:	eb 39                	jmp    c000d4e0 <tcp_parseopt+0x18c>
c000d4a7:	90                   	nop
c000d4a8:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d4ad:	8d 50 01             	lea    edx,[eax+0x1]
c000d4b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d4b4:	01 d0                	add    eax,edx
c000d4b6:	8a 00                	mov    al,BYTE PTR [eax]
c000d4b8:	0f b6 c0             	movzx  eax,al
c000d4bb:	85 c0                	test   eax,eax
c000d4bd:	74 39                	je     c000d4f8 <tcp_parseopt+0x1a4>
c000d4bf:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d4c4:	8d 50 01             	lea    edx,[eax+0x1]
c000d4c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d4cb:	01 d0                	add    eax,edx
c000d4cd:	8a 00                	mov    al,BYTE PTR [eax]
c000d4cf:	0f b6 c0             	movzx  eax,al
c000d4d2:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c000d4d7:	01 d0                	add    eax,edx
c000d4d9:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d4de:	66 90                	xchg   ax,ax
c000d4e0:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d4e5:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d4ea:	39 c2                	cmp    edx,eax
c000d4ec:	0f 82 d2 fe ff ff    	jb     c000d3c4 <tcp_parseopt+0x70>
c000d4f2:	eb 08                	jmp    c000d4fc <tcp_parseopt+0x1a8>
c000d4f4:	90                   	nop
c000d4f5:	eb 05                	jmp    c000d4fc <tcp_parseopt+0x1a8>
c000d4f7:	90                   	nop
c000d4f8:	90                   	nop
c000d4f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d4fc:	83 c4 1c             	add    esp,0x1c
c000d4ff:	c3                   	ret    

c000d500 <tcp_listen_input>:
c000d500:	53                   	push   ebx
c000d501:	83 ec 18             	sub    esp,0x18
c000d504:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d509:	0f b6 c0             	movzx  eax,al
c000d50c:	83 e0 10             	and    eax,0x10
c000d50f:	74 4f                	je     c000d560 <tcp_listen_input+0x60>
c000d511:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d516:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d519:	0f b7 c8             	movzx  ecx,ax
c000d51c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d521:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d525:	0f b7 d0             	movzx  edx,ax
c000d528:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d52e:	0f b7 d8             	movzx  ebx,ax
c000d531:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d536:	01 c3                	add    ebx,eax
c000d538:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d53d:	83 c0 01             	add    eax,0x1
c000d540:	83 ec 08             	sub    esp,0x8
c000d543:	51                   	push   ecx
c000d544:	52                   	push   edx
c000d545:	68 90 68 03 c0       	push   0xc0036890
c000d54a:	68 98 68 03 c0       	push   0xc0036898
c000d54f:	53                   	push   ebx
c000d550:	50                   	push   eax
c000d551:	e8 5a 2f 00 00       	call   c00104b0 <tcp_rst>
c000d556:	83 c4 20             	add    esp,0x20
c000d559:	e9 a2 01 00 00       	jmp    c000d700 <tcp_listen_input+0x200>
c000d55e:	66 90                	xchg   ax,ax
c000d560:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d565:	0f b6 c0             	movzx  eax,al
c000d568:	83 e0 02             	and    eax,0x2
c000d56b:	0f 84 8f 01 00 00    	je     c000d700 <tcp_listen_input+0x200>
c000d571:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d575:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000d578:	0f b6 c0             	movzx  eax,al
c000d57b:	83 ec 0c             	sub    esp,0xc
c000d57e:	50                   	push   eax
c000d57f:	e8 14 e0 ff ff       	call   c000b598 <tcp_alloc>
c000d584:	83 c4 10             	add    esp,0x10
c000d587:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d58b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d590:	75 16                	jne    c000d5a8 <tcp_listen_input+0xa8>
c000d592:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000d598:	83 c0 01             	add    eax,0x1
c000d59b:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000d5a1:	b0 ff                	mov    al,0xff
c000d5a3:	e9 5c 01 00 00       	jmp    c000d704 <tcp_listen_input+0x204>
c000d5a8:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c000d5ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5b2:	89 10                	mov    DWORD PTR [eax],edx
c000d5b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d5bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d5bf:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000d5c3:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c000d5c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5cd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d5d0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d5d5:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d5d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d5dc:	66 89 42 22          	mov    WORD PTR [edx+0x22],ax
c000d5e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5e4:	c7 40 10 03 00 00 00 	mov    DWORD PTR [eax+0x10],0x3
c000d5eb:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d5f0:	8d 50 01             	lea    edx,[eax+0x1]
c000d5f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5f7:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d5fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5fe:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d601:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d605:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d608:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d60d:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000d611:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d615:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000d619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d61d:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000d620:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d624:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000d628:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d62d:	8d 50 ff             	lea    edx,[eax-0x1]
c000d630:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d634:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d637:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d63b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000d63e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d642:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000d645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d649:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
c000d64c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d650:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000d653:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d657:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000d65a:	83 e0 8c             	and    eax,0xffffff8c
c000d65d:	88 c2                	mov    dl,al
c000d65f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d663:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c000d666:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000d66c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d670:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d673:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d677:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000d67c:	e8 33 36 00 00       	call   c0010cb4 <tcp_timer_needed>
c000d681:	83 ec 0c             	sub    esp,0xc
c000d684:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d688:	e8 c7 fc ff ff       	call   c000d354 <tcp_parseopt>
c000d68d:	83 c4 10             	add    esp,0x10
c000d690:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d694:	8d 50 04             	lea    edx,[eax+0x4]
c000d697:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d69b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d69e:	0f b7 c0             	movzx  eax,ax
c000d6a1:	83 ec 08             	sub    esp,0x8
c000d6a4:	52                   	push   edx
c000d6a5:	50                   	push   eax
c000d6a6:	e8 ad e0 ff ff       	call   c000b758 <tcp_eff_send_mss>
c000d6ab:	83 c4 10             	add    esp,0x10
c000d6ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d6b2:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d6b6:	83 ec 08             	sub    esp,0x8
c000d6b9:	6a 12                	push   0x12
c000d6bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d6bf:	e8 c4 22 00 00       	call   c000f988 <tcp_enqueue_flags>
c000d6c4:	83 c4 10             	add    esp,0x10
c000d6c7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d6cb:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000d6d0:	85 c0                	test   eax,eax
c000d6d2:	74 18                	je     c000d6ec <tcp_listen_input+0x1ec>
c000d6d4:	83 ec 08             	sub    esp,0x8
c000d6d7:	6a 00                	push   0x0
c000d6d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d6dd:	e8 9e db ff ff       	call   c000b280 <tcp_abandon>
c000d6e2:	83 c4 10             	add    esp,0x10
c000d6e5:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d6e9:	eb 19                	jmp    c000d704 <tcp_listen_input+0x204>
c000d6eb:	90                   	nop
c000d6ec:	83 ec 0c             	sub    esp,0xc
c000d6ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d6f3:	e8 2c 29 00 00       	call   c0010024 <tcp_output>
c000d6f8:	83 c4 10             	add    esp,0x10
c000d6fb:	eb 07                	jmp    c000d704 <tcp_listen_input+0x204>
c000d6fd:	8d 76 00             	lea    esi,[esi+0x0]
c000d700:	b0 00                	mov    al,0x0
c000d702:	66 90                	xchg   ax,ax
c000d704:	83 c4 18             	add    esp,0x18
c000d707:	5b                   	pop    ebx
c000d708:	c3                   	ret    
c000d709:	8d 76 00             	lea    esi,[esi+0x0]

c000d70c <tcp_process>:
c000d70c:	53                   	push   ebx
c000d70d:	83 ec 18             	sub    esp,0x18
c000d710:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000d715:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d71a:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d71f:	0f b6 c0             	movzx  eax,al
c000d722:	83 e0 04             	and    eax,0x4
c000d725:	0f 84 bd 00 00 00    	je     c000d7e8 <tcp_process+0xdc>
c000d72b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d72f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d732:	83 f8 02             	cmp    eax,0x2
c000d735:	75 19                	jne    c000d750 <tcp_process+0x44>
c000d737:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d73b:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000d73e:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d743:	39 c2                	cmp    edx,eax
c000d745:	75 45                	jne    c000d78c <tcp_process+0x80>
c000d747:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d74c:	eb 3e                	jmp    c000d78c <tcp_process+0x80>
c000d74e:	66 90                	xchg   ax,ax
c000d750:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d75a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d75d:	29 c2                	sub    edx,eax
c000d75f:	89 d0                	mov    eax,edx
c000d761:	78 29                	js     c000d78c <tcp_process+0x80>
c000d763:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d769:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d76d:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d770:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d774:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d777:	0f b7 c0             	movzx  eax,ax
c000d77a:	01 c8                	add    eax,ecx
c000d77c:	29 c2                	sub    edx,eax
c000d77e:	89 d0                	mov    eax,edx
c000d780:	85 c0                	test   eax,eax
c000d782:	7f 08                	jg     c000d78c <tcp_process+0x80>
c000d784:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d789:	8d 76 00             	lea    esi,[esi+0x0]
c000d78c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000d791:	85 c0                	test   eax,eax
c000d793:	74 4b                	je     c000d7e0 <tcp_process+0xd4>
c000d795:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d799:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d79c:	85 c0                	test   eax,eax
c000d79e:	75 18                	jne    c000d7b8 <tcp_process+0xac>
c000d7a0:	83 ec 08             	sub    esp,0x8
c000d7a3:	68 f0 07 03 c0       	push   0xc00307f0
c000d7a8:	68 a6 fd 02 c0       	push   0xc002fda6
c000d7ad:	e8 66 26 01 00       	call   c001fe18 <CPrintf>
c000d7b2:	83 c4 10             	add    esp,0x10
c000d7b5:	8d 76 00             	lea    esi,[esi+0x0]
c000d7b8:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000d7bd:	83 c8 08             	or     eax,0x8
c000d7c0:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000d7c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7c9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d7cc:	83 e0 fe             	and    eax,0xfffffffe
c000d7cf:	88 c2                	mov    dl,al
c000d7d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d5:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d7d8:	b0 f5                	mov    al,0xf5
c000d7da:	e9 bd 08 00 00       	jmp    c000e09c <tcp_process+0x990>
c000d7df:	90                   	nop
c000d7e0:	b0 00                	mov    al,0x0
c000d7e2:	e9 b5 08 00 00       	jmp    c000e09c <tcp_process+0x990>
c000d7e7:	90                   	nop
c000d7e8:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d7ed:	0f b6 c0             	movzx  eax,al
c000d7f0:	83 e0 02             	and    eax,0x2
c000d7f3:	74 33                	je     c000d828 <tcp_process+0x11c>
c000d7f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d7fc:	83 f8 02             	cmp    eax,0x2
c000d7ff:	74 27                	je     c000d828 <tcp_process+0x11c>
c000d801:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d805:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d808:	83 f8 03             	cmp    eax,0x3
c000d80b:	74 1b                	je     c000d828 <tcp_process+0x11c>
c000d80d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d811:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d814:	83 c8 02             	or     eax,0x2
c000d817:	88 c2                	mov    dl,al
c000d819:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d81d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d820:	b0 00                	mov    al,0x0
c000d822:	e9 75 08 00 00       	jmp    c000e09c <tcp_process+0x990>
c000d827:	90                   	nop
c000d828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d82c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d82f:	0f b6 c0             	movzx  eax,al
c000d832:	83 e0 10             	and    eax,0x10
c000d835:	75 0d                	jne    c000d844 <tcp_process+0x138>
c000d837:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000d83d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d841:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000d844:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d848:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000d84f:	83 ec 0c             	sub    esp,0xc
c000d852:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d856:	e8 f9 fa ff ff       	call   c000d354 <tcp_parseopt>
c000d85b:	83 c4 10             	add    esp,0x10
c000d85e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d862:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d865:	83 f8 09             	cmp    eax,0x9
c000d868:	0f 87 0a 08 00 00    	ja     c000e078 <tcp_process+0x96c>
c000d86e:	8b 04 85 98 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf668]
c000d875:	ff e0                	jmp    eax
c000d877:	90                   	nop
c000d878:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d87d:	0f b6 c0             	movzx  eax,al
c000d880:	83 e0 10             	and    eax,0x10
c000d883:	0f 84 ff 01 00 00    	je     c000da88 <tcp_process+0x37c>
c000d889:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d88e:	0f b6 c0             	movzx  eax,al
c000d891:	83 e0 02             	and    eax,0x2
c000d894:	0f 84 ee 01 00 00    	je     c000da88 <tcp_process+0x37c>
c000d89a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d89e:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d8a1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d8a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d8a7:	83 ec 0c             	sub    esp,0xc
c000d8aa:	50                   	push   eax
c000d8ab:	e8 5c 33 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000d8b0:	83 c4 10             	add    esp,0x10
c000d8b3:	8d 50 01             	lea    edx,[eax+0x1]
c000d8b6:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d8bb:	39 c2                	cmp    edx,eax
c000d8bd:	0f 85 c5 01 00 00    	jne    c000da88 <tcp_process+0x37c>
c000d8c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8c7:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000d8cb:	83 c0 01             	add    eax,0x1
c000d8ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d8d2:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000d8d6:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d8db:	8d 50 01             	lea    edx,[eax+0x1]
c000d8de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8e2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d8e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8e9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d8ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8f0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d8f3:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d8f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8fd:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000d900:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d905:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000d909:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d90d:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000d911:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d916:	8d 50 ff             	lea    edx,[eax-0x1]
c000d919:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d91d:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d920:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d924:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d92b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d92f:	8d 50 04             	lea    edx,[eax+0x4]
c000d932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d936:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d939:	0f b7 c0             	movzx  eax,ax
c000d93c:	83 ec 08             	sub    esp,0x8
c000d93f:	52                   	push   edx
c000d940:	50                   	push   eax
c000d941:	e8 12 de ff ff       	call   c000b758 <tcp_eff_send_mss>
c000d946:	83 c4 10             	add    esp,0x10
c000d949:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d94d:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d951:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d955:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d958:	89 c2                	mov    edx,eax
c000d95a:	c1 e2 02             	shl    edx,0x2
c000d95d:	01 d0                	add    eax,edx
c000d95f:	d1 e0                	shl    eax,1
c000d961:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d965:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000d969:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d96d:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d971:	0f b7 c0             	movzx  eax,ax
c000d974:	83 f8 01             	cmp    eax,0x1
c000d977:	75 0b                	jne    c000d984 <tcp_process+0x278>
c000d979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d97d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d980:	d1 e0                	shl    eax,1
c000d982:	eb 08                	jmp    c000d98c <tcp_process+0x280>
c000d984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d988:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d98b:	90                   	nop
c000d98c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d990:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000d994:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d998:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d99b:	0f b7 c0             	movzx  eax,ax
c000d99e:	85 c0                	test   eax,eax
c000d9a0:	75 16                	jne    c000d9b8 <tcp_process+0x2ac>
c000d9a2:	83 ec 08             	sub    esp,0x8
c000d9a5:	68 53 09 03 c0       	push   0xc0030953
c000d9aa:	68 a6 fd 02 c0       	push   0xc002fda6
c000d9af:	e8 64 24 01 00       	call   c001fe18 <CPrintf>
c000d9b4:	83 c4 10             	add    esp,0x10
c000d9b7:	90                   	nop
c000d9b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9bc:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d9bf:	83 e8 01             	sub    eax,0x1
c000d9c2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d9c6:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000d9ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9ce:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d9d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d9d9:	8b 10                	mov    edx,DWORD PTR [eax]
c000d9db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9df:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000d9e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e6:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d9e9:	85 c0                	test   eax,eax
c000d9eb:	75 0f                	jne    c000d9fc <tcp_process+0x2f0>
c000d9ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f1:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000d9f7:	eb 17                	jmp    c000da10 <tcp_process+0x304>
c000d9f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d9fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da00:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000da06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da0a:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000da0e:	66 90                	xchg   ax,ax
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da17:	e8 50 c7 ff ff       	call   c000a16c <tcp_seg_free>
c000da1c:	83 c4 10             	add    esp,0x10
c000da1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da23:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000da29:	85 c0                	test   eax,eax
c000da2b:	74 27                	je     c000da54 <tcp_process+0x348>
c000da2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da31:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000da37:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000da3b:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000da3e:	83 ec 04             	sub    esp,0x4
c000da41:	6a 00                	push   0x0
c000da43:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da47:	52                   	push   edx
c000da48:	ff d0                	call   eax
c000da4a:	83 c4 10             	add    esp,0x10
c000da4d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000da51:	eb 09                	jmp    c000da5c <tcp_process+0x350>
c000da53:	90                   	nop
c000da54:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000da59:	8d 76 00             	lea    esi,[esi+0x0]
c000da5c:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000da61:	83 f8 f6             	cmp    eax,0xfffffff6
c000da64:	75 0a                	jne    c000da70 <tcp_process+0x364>
c000da66:	b0 f6                	mov    al,0xf6
c000da68:	e9 2f 06 00 00       	jmp    c000e09c <tcp_process+0x990>
c000da6d:	8d 76 00             	lea    esi,[esi+0x0]
c000da70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da74:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000da77:	83 c8 02             	or     eax,0x2
c000da7a:	88 c2                	mov    dl,al
c000da7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da80:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000da83:	e9 f4 05 00 00       	jmp    c000e07c <tcp_process+0x970>
c000da88:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000da8d:	0f b6 c0             	movzx  eax,al
c000da90:	83 e0 10             	and    eax,0x10
c000da93:	0f 84 e3 05 00 00    	je     c000e07c <tcp_process+0x970>
c000da99:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000da9e:	66 8b 00             	mov    ax,WORD PTR [eax]
c000daa1:	0f b7 c8             	movzx  ecx,ax
c000daa4:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000daa9:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000daad:	0f b7 d0             	movzx  edx,ax
c000dab0:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000dab6:	0f b7 d8             	movzx  ebx,ax
c000dab9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000dabe:	01 c3                	add    ebx,eax
c000dac0:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dac5:	83 ec 08             	sub    esp,0x8
c000dac8:	51                   	push   ecx
c000dac9:	52                   	push   edx
c000daca:	68 90 68 03 c0       	push   0xc0036890
c000dacf:	68 98 68 03 c0       	push   0xc0036898
c000dad4:	53                   	push   ebx
c000dad5:	50                   	push   eax
c000dad6:	e8 d5 29 00 00       	call   c00104b0 <tcp_rst>
c000dadb:	83 c4 20             	add    esp,0x20
c000dade:	e9 99 05 00 00       	jmp    c000e07c <tcp_process+0x970>
c000dae3:	90                   	nop
c000dae4:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dae9:	0f b6 c0             	movzx  eax,al
c000daec:	83 e0 10             	and    eax,0x10
c000daef:	0f 84 a7 01 00 00    	je     c000dc9c <tcp_process+0x590>
c000daf5:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000dafb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daff:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000db02:	29 c2                	sub    edx,eax
c000db04:	89 d0                	mov    eax,edx
c000db06:	83 e8 01             	sub    eax,0x1
c000db09:	0f 88 41 01 00 00    	js     c000dc50 <tcp_process+0x544>
c000db0f:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000db15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db19:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000db1c:	29 c2                	sub    edx,eax
c000db1e:	89 d0                	mov    eax,edx
c000db20:	85 c0                	test   eax,eax
c000db22:	0f 8f 28 01 00 00    	jg     c000dc50 <tcp_process+0x544>
c000db28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db2c:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000db33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db37:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000db3a:	85 c0                	test   eax,eax
c000db3c:	75 16                	jne    c000db54 <tcp_process+0x448>
c000db3e:	83 ec 08             	sub    esp,0x8
c000db41:	68 69 09 03 c0       	push   0xc0030969
c000db46:	68 a6 fd 02 c0       	push   0xc002fda6
c000db4b:	e8 c8 22 01 00       	call   c001fe18 <CPrintf>
c000db50:	83 c4 10             	add    esp,0x10
c000db53:	90                   	nop
c000db54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db58:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000db5b:	85 c0                	test   eax,eax
c000db5d:	74 25                	je     c000db84 <tcp_process+0x478>
c000db5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db63:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000db66:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000db6a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000db6d:	83 ec 04             	sub    esp,0x4
c000db70:	6a 00                	push   0x0
c000db72:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000db76:	52                   	push   edx
c000db77:	ff d0                	call   eax
c000db79:	83 c4 10             	add    esp,0x10
c000db7c:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000db80:	eb 0a                	jmp    c000db8c <tcp_process+0x480>
c000db82:	66 90                	xchg   ax,ax
c000db84:	c6 44 24 0e f2       	mov    BYTE PTR [esp+0xe],0xf2
c000db89:	8d 76 00             	lea    esi,[esi+0x0]
c000db8c:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000db91:	85 c0                	test   eax,eax
c000db93:	74 23                	je     c000dbb8 <tcp_process+0x4ac>
c000db95:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000db9a:	83 f8 f6             	cmp    eax,0xfffffff6
c000db9d:	74 11                	je     c000dbb0 <tcp_process+0x4a4>
c000db9f:	83 ec 0c             	sub    esp,0xc
c000dba2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dba6:	e8 69 d8 ff ff       	call   c000b414 <tcp_abort>
c000dbab:	83 c4 10             	add    esp,0x10
c000dbae:	66 90                	xchg   ax,ax
c000dbb0:	b0 f6                	mov    al,0xf6
c000dbb2:	e9 e5 04 00 00       	jmp    c000e09c <tcp_process+0x990>
c000dbb7:	90                   	nop
c000dbb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbbc:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000dbc0:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000dbc5:	83 ec 0c             	sub    esp,0xc
c000dbc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbcc:	e8 e7 e0 ff ff       	call   c000bcb8 <tcp_receive>
c000dbd1:	83 c4 10             	add    esp,0x10
c000dbd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000dbdb:	0f b7 c0             	movzx  eax,ax
c000dbde:	85 c0                	test   eax,eax
c000dbe0:	74 12                	je     c000dbf4 <tcp_process+0x4e8>
c000dbe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbe6:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000dbe9:	83 e8 01             	sub    eax,0x1
c000dbec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dbf0:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000dbf4:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000dbf9:	83 f8 01             	cmp    eax,0x1
c000dbfc:	75 0e                	jne    c000dc0c <tcp_process+0x500>
c000dbfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc02:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000dc05:	d1 e0                	shl    eax,1
c000dc07:	eb 0b                	jmp    c000dc14 <tcp_process+0x508>
c000dc09:	8d 76 00             	lea    esi,[esi+0x0]
c000dc0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc10:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000dc13:	90                   	nop
c000dc14:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dc18:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000dc1c:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dc21:	0f b6 c0             	movzx  eax,al
c000dc24:	83 e0 20             	and    eax,0x20
c000dc27:	0f 84 ab 00 00 00    	je     c000dcd8 <tcp_process+0x5cc>
c000dc2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc31:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dc34:	83 c8 02             	or     eax,0x2
c000dc37:	88 c2                	mov    dl,al
c000dc39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc3d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dc40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc44:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000dc4b:	e9 88 00 00 00       	jmp    c000dcd8 <tcp_process+0x5cc>
c000dc50:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000dc55:	66 8b 00             	mov    ax,WORD PTR [eax]
c000dc58:	0f b7 c8             	movzx  ecx,ax
c000dc5b:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000dc60:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000dc64:	0f b7 d0             	movzx  edx,ax
c000dc67:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000dc6d:	0f b7 d8             	movzx  ebx,ax
c000dc70:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000dc75:	01 c3                	add    ebx,eax
c000dc77:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dc7c:	83 ec 08             	sub    esp,0x8
c000dc7f:	51                   	push   ecx
c000dc80:	52                   	push   edx
c000dc81:	68 90 68 03 c0       	push   0xc0036890
c000dc86:	68 98 68 03 c0       	push   0xc0036898
c000dc8b:	53                   	push   ebx
c000dc8c:	50                   	push   eax
c000dc8d:	e8 1e 28 00 00       	call   c00104b0 <tcp_rst>
c000dc92:	83 c4 20             	add    esp,0x20
c000dc95:	e9 e6 03 00 00       	jmp    c000e080 <tcp_process+0x974>
c000dc9a:	66 90                	xchg   ax,ax
c000dc9c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dca1:	0f b6 c0             	movzx  eax,al
c000dca4:	83 e0 02             	and    eax,0x2
c000dca7:	0f 84 d3 03 00 00    	je     c000e080 <tcp_process+0x974>
c000dcad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcb1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dcb4:	8d 50 ff             	lea    edx,[eax-0x1]
c000dcb7:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000dcbc:	39 c2                	cmp    edx,eax
c000dcbe:	0f 85 bc 03 00 00    	jne    c000e080 <tcp_process+0x974>
c000dcc4:	83 ec 0c             	sub    esp,0xc
c000dcc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dccb:	e8 e4 29 00 00       	call   c00106b4 <tcp_rexmit>
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	e9 a8 03 00 00       	jmp    c000e080 <tcp_process+0x974>
c000dcd8:	90                   	nop
c000dcd9:	e9 a2 03 00 00       	jmp    c000e080 <tcp_process+0x974>
c000dcde:	66 90                	xchg   ax,ax
c000dce0:	83 ec 0c             	sub    esp,0xc
c000dce3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dce7:	e8 cc df ff ff       	call   c000bcb8 <tcp_receive>
c000dcec:	83 c4 10             	add    esp,0x10
c000dcef:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dcf4:	0f b6 c0             	movzx  eax,al
c000dcf7:	83 e0 20             	and    eax,0x20
c000dcfa:	0f 84 84 03 00 00    	je     c000e084 <tcp_process+0x978>
c000dd00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd04:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dd07:	83 c8 02             	or     eax,0x2
c000dd0a:	88 c2                	mov    dl,al
c000dd0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd10:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dd13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd17:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000dd1e:	e9 61 03 00 00       	jmp    c000e084 <tcp_process+0x978>
c000dd23:	90                   	nop
c000dd24:	83 ec 0c             	sub    esp,0xc
c000dd27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd2b:	e8 88 df ff ff       	call   c000bcb8 <tcp_receive>
c000dd30:	83 c4 10             	add    esp,0x10
c000dd33:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dd38:	0f b6 c0             	movzx  eax,al
c000dd3b:	83 e0 20             	and    eax,0x20
c000dd3e:	0f 84 08 01 00 00    	je     c000de4c <tcp_process+0x740>
c000dd44:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dd49:	0f b6 c0             	movzx  eax,al
c000dd4c:	83 e0 10             	and    eax,0x10
c000dd4f:	0f 84 d3 00 00 00    	je     c000de28 <tcp_process+0x71c>
c000dd55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd59:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dd5c:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dd61:	39 c2                	cmp    edx,eax
c000dd63:	0f 85 bf 00 00 00    	jne    c000de28 <tcp_process+0x71c>
c000dd69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd6d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dd70:	83 c8 02             	or     eax,0x2
c000dd73:	88 c2                	mov    dl,al
c000dd75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd79:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dd7c:	83 ec 0c             	sub    esp,0xc
c000dd7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd83:	e8 48 c5 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000dd88:	83 c4 10             	add    esp,0x10
c000dd8b:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd90:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dd94:	75 12                	jne    c000dda8 <tcp_process+0x69c>
c000dd96:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd9b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd9e:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dda3:	eb 4b                	jmp    c000ddf0 <tcp_process+0x6e4>
c000dda5:	8d 76 00             	lea    esi,[esi+0x0]
c000dda8:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ddad:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ddb2:	eb 30                	jmp    c000dde4 <tcp_process+0x6d8>
c000ddb4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ddb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ddbc:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000ddc0:	75 12                	jne    c000ddd4 <tcp_process+0x6c8>
c000ddc2:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ddc7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ddcb:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ddce:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ddd1:	eb 1d                	jmp    c000ddf0 <tcp_process+0x6e4>
c000ddd3:	90                   	nop
c000ddd4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ddd9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dddc:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dde1:	8d 76 00             	lea    esi,[esi+0x0]
c000dde4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dde9:	85 c0                	test   eax,eax
c000ddeb:	75 c7                	jne    c000ddb4 <tcp_process+0x6a8>
c000dded:	8d 76 00             	lea    esi,[esi+0x0]
c000ddf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddf4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ddfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddff:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000de06:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000de0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de10:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de17:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000de1c:	e8 93 2e 00 00       	call   c0010cb4 <tcp_timer_needed>
c000de21:	e9 62 02 00 00       	jmp    c000e088 <tcp_process+0x97c>
c000de26:	66 90                	xchg   ax,ax
c000de28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de2c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000de2f:	83 c8 02             	or     eax,0x2
c000de32:	88 c2                	mov    dl,al
c000de34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de38:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000de3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de3f:	c7 40 10 08 00 00 00 	mov    DWORD PTR [eax+0x10],0x8
c000de46:	e9 3d 02 00 00       	jmp    c000e088 <tcp_process+0x97c>
c000de4b:	90                   	nop
c000de4c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000de51:	0f b6 c0             	movzx  eax,al
c000de54:	83 e0 10             	and    eax,0x10
c000de57:	0f 84 2b 02 00 00    	je     c000e088 <tcp_process+0x97c>
c000de5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de61:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000de64:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000de69:	39 c2                	cmp    edx,eax
c000de6b:	0f 85 17 02 00 00    	jne    c000e088 <tcp_process+0x97c>
c000de71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de75:	c7 40 10 06 00 00 00 	mov    DWORD PTR [eax+0x10],0x6
c000de7c:	e9 07 02 00 00       	jmp    c000e088 <tcp_process+0x97c>
c000de81:	8d 76 00             	lea    esi,[esi+0x0]
c000de84:	83 ec 0c             	sub    esp,0xc
c000de87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de8b:	e8 28 de ff ff       	call   c000bcb8 <tcp_receive>
c000de90:	83 c4 10             	add    esp,0x10
c000de93:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000de98:	0f b6 c0             	movzx  eax,al
c000de9b:	83 e0 20             	and    eax,0x20
c000de9e:	0f 84 e8 01 00 00    	je     c000e08c <tcp_process+0x980>
c000dea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dea8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000deab:	83 c8 02             	or     eax,0x2
c000deae:	88 c2                	mov    dl,al
c000deb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000deb4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000deb7:	83 ec 0c             	sub    esp,0xc
c000deba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000debe:	e8 0d c4 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000dec3:	83 c4 10             	add    esp,0x10
c000dec6:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000decb:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000decf:	75 0f                	jne    c000dee0 <tcp_process+0x7d4>
c000ded1:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ded6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ded9:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dede:	eb 48                	jmp    c000df28 <tcp_process+0x81c>
c000dee0:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dee5:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000deea:	eb 30                	jmp    c000df1c <tcp_process+0x810>
c000deec:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000def1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000def4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000def8:	75 12                	jne    c000df0c <tcp_process+0x800>
c000defa:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000deff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000df03:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000df06:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000df09:	eb 1d                	jmp    c000df28 <tcp_process+0x81c>
c000df0b:	90                   	nop
c000df0c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000df11:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000df14:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000df19:	8d 76 00             	lea    esi,[esi+0x0]
c000df1c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000df21:	85 c0                	test   eax,eax
c000df23:	75 c7                	jne    c000deec <tcp_process+0x7e0>
c000df25:	8d 76 00             	lea    esi,[esi+0x0]
c000df28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df2c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000df33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df37:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000df3e:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000df44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df48:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000df4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df4f:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000df54:	e8 5b 2d 00 00       	call   c0010cb4 <tcp_timer_needed>
c000df59:	e9 2e 01 00 00       	jmp    c000e08c <tcp_process+0x980>
c000df5e:	66 90                	xchg   ax,ax
c000df60:	83 ec 0c             	sub    esp,0xc
c000df63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df67:	e8 4c dd ff ff       	call   c000bcb8 <tcp_receive>
c000df6c:	83 c4 10             	add    esp,0x10
c000df6f:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000df74:	0f b6 c0             	movzx  eax,al
c000df77:	83 e0 10             	and    eax,0x10
c000df7a:	0f 84 10 01 00 00    	je     c000e090 <tcp_process+0x984>
c000df80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df84:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000df87:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000df8c:	39 c2                	cmp    edx,eax
c000df8e:	0f 85 fc 00 00 00    	jne    c000e090 <tcp_process+0x984>
c000df94:	83 ec 0c             	sub    esp,0xc
c000df97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df9b:	e8 30 c3 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000dfa0:	83 c4 10             	add    esp,0x10
c000dfa3:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dfa8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dfac:	75 12                	jne    c000dfc0 <tcp_process+0x8b4>
c000dfae:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dfb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dfb6:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dfbb:	eb 4b                	jmp    c000e008 <tcp_process+0x8fc>
c000dfbd:	8d 76 00             	lea    esi,[esi+0x0]
c000dfc0:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dfc5:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dfca:	eb 30                	jmp    c000dffc <tcp_process+0x8f0>
c000dfcc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dfd1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dfd4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dfd8:	75 12                	jne    c000dfec <tcp_process+0x8e0>
c000dfda:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dfdf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dfe3:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dfe6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dfe9:	eb 1d                	jmp    c000e008 <tcp_process+0x8fc>
c000dfeb:	90                   	nop
c000dfec:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dff1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dff4:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dff9:	8d 76 00             	lea    esi,[esi+0x0]
c000dffc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000e001:	85 c0                	test   eax,eax
c000e003:	75 c7                	jne    c000dfcc <tcp_process+0x8c0>
c000e005:	8d 76 00             	lea    esi,[esi+0x0]
c000e008:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e00c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000e013:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e017:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000e01e:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000e024:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e028:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e02b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e02f:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000e034:	e8 7b 2c 00 00       	call   c0010cb4 <tcp_timer_needed>
c000e039:	eb 55                	jmp    c000e090 <tcp_process+0x984>
c000e03b:	90                   	nop
c000e03c:	83 ec 0c             	sub    esp,0xc
c000e03f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e043:	e8 70 dc ff ff       	call   c000bcb8 <tcp_receive>
c000e048:	83 c4 10             	add    esp,0x10
c000e04b:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e050:	0f b6 c0             	movzx  eax,al
c000e053:	83 e0 10             	and    eax,0x10
c000e056:	74 3c                	je     c000e094 <tcp_process+0x988>
c000e058:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e05c:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000e05f:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000e064:	39 c2                	cmp    edx,eax
c000e066:	75 2c                	jne    c000e094 <tcp_process+0x988>
c000e068:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e06d:	83 c8 10             	or     eax,0x10
c000e070:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000e075:	eb 1d                	jmp    c000e094 <tcp_process+0x988>
c000e077:	90                   	nop
c000e078:	90                   	nop
c000e079:	eb 1d                	jmp    c000e098 <tcp_process+0x98c>
c000e07b:	90                   	nop
c000e07c:	90                   	nop
c000e07d:	eb 19                	jmp    c000e098 <tcp_process+0x98c>
c000e07f:	90                   	nop
c000e080:	90                   	nop
c000e081:	eb 15                	jmp    c000e098 <tcp_process+0x98c>
c000e083:	90                   	nop
c000e084:	90                   	nop
c000e085:	eb 11                	jmp    c000e098 <tcp_process+0x98c>
c000e087:	90                   	nop
c000e088:	90                   	nop
c000e089:	eb 0d                	jmp    c000e098 <tcp_process+0x98c>
c000e08b:	90                   	nop
c000e08c:	90                   	nop
c000e08d:	eb 09                	jmp    c000e098 <tcp_process+0x98c>
c000e08f:	90                   	nop
c000e090:	90                   	nop
c000e091:	eb 05                	jmp    c000e098 <tcp_process+0x98c>
c000e093:	90                   	nop
c000e094:	90                   	nop
c000e095:	8d 76 00             	lea    esi,[esi+0x0]
c000e098:	b0 00                	mov    al,0x0
c000e09a:	66 90                	xchg   ax,ax
c000e09c:	83 c4 18             	add    esp,0x18
c000e09f:	5b                   	pop    ebx
c000e0a0:	c3                   	ret    
c000e0a1:	8d 76 00             	lea    esi,[esi+0x0]

c000e0a4 <tcp_input>:
c000e0a4:	53                   	push   ebx
c000e0a5:	83 ec 18             	sub    esp,0x18
c000e0a8:	66 a1 b2 67 03 c0    	mov    ax,ds:0xc00367b2
c000e0ae:	83 c0 01             	add    eax,0x1
c000e0b1:	66 a3 b2 67 03 c0    	mov    ds:0xc00367b2,ax
c000e0b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e0be:	a3 b8 a8 03 c0       	mov    ds:0xc003a8b8,eax
c000e0c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0c7:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000e0ca:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000e0cf:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e0d2:	0f b7 c0             	movzx  eax,ax
c000e0d5:	83 ec 0c             	sub    esp,0xc
c000e0d8:	50                   	push   eax
c000e0d9:	e8 0a 2b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e0de:	83 c4 10             	add    esp,0x10
c000e0e1:	0f b7 c0             	movzx  eax,ax
c000e0e4:	c1 e8 08             	shr    eax,0x8
c000e0e7:	0f b7 c0             	movzx  eax,ax
c000e0ea:	83 e0 0f             	and    eax,0xf
c000e0ed:	c1 e0 02             	shl    eax,0x2
c000e0f0:	01 d8                	add    eax,ebx
c000e0f2:	a3 bc a8 03 c0       	mov    ds:0xc003a8bc,eax
c000e0f7:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000e0fc:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e0ff:	0f b7 c0             	movzx  eax,ax
c000e102:	83 ec 0c             	sub    esp,0xc
c000e105:	50                   	push   eax
c000e106:	e8 dd 2a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e10b:	83 c4 10             	add    esp,0x10
c000e10e:	0f b7 c0             	movzx  eax,ax
c000e111:	c1 e8 08             	shr    eax,0x8
c000e114:	83 e0 0f             	and    eax,0xf
c000e117:	c1 e0 02             	shl    eax,0x2
c000e11a:	f7 d8                	neg    eax
c000e11c:	98                   	cwde   
c000e11d:	83 ec 08             	sub    esp,0x8
c000e120:	50                   	push   eax
c000e121:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e125:	e8 2e a2 ff ff       	call   c0008358 <pbuf_header>
c000e12a:	83 c4 10             	add    esp,0x10
c000e12d:	0f b6 c0             	movzx  eax,al
c000e130:	85 c0                	test   eax,eax
c000e132:	75 10                	jne    c000e144 <tcp_input+0xa0>
c000e134:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e138:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e13b:	0f b7 c0             	movzx  eax,ax
c000e13e:	83 f8 13             	cmp    eax,0x13
c000e141:	77 35                	ja     c000e178 <tcp_input+0xd4>
c000e143:	90                   	nop
c000e144:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000e14a:	83 c0 01             	add    eax,0x1
c000e14d:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000e153:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e159:	83 c0 01             	add    eax,0x1
c000e15c:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e162:	83 ec 0c             	sub    esp,0xc
c000e165:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e169:	e8 86 a3 ff ff       	call   c00084f4 <pbuf_free>
c000e16e:	83 c4 10             	add    esp,0x10
c000e171:	e9 fa 09 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e176:	66 90                	xchg   ax,ax
c000e178:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e17d:	83 ec 08             	sub    esp,0x8
c000e180:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e184:	50                   	push   eax
c000e185:	e8 5e 5e 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c000e18a:	83 c4 10             	add    esp,0x10
c000e18d:	0f b6 c0             	movzx  eax,al
c000e190:	85 c0                	test   eax,eax
c000e192:	75 14                	jne    c000e1a8 <tcp_input+0x104>
c000e194:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e199:	25 f0 00 00 00       	and    eax,0xf0
c000e19e:	3d e0 00 00 00       	cmp    eax,0xe0
c000e1a3:	75 37                	jne    c000e1dc <tcp_input+0x138>
c000e1a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e1a8:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000e1ae:	83 c0 01             	add    eax,0x1
c000e1b1:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000e1b7:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e1bd:	83 c0 01             	add    eax,0x1
c000e1c0:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e1c6:	83 ec 0c             	sub    esp,0xc
c000e1c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e1cd:	e8 22 a3 ff ff       	call   c00084f4 <pbuf_free>
c000e1d2:	83 c4 10             	add    esp,0x10
c000e1d5:	e9 96 09 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e1da:	66 90                	xchg   ax,ax
c000e1dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e1e3:	0f b7 c0             	movzx  eax,ax
c000e1e6:	83 ec 0c             	sub    esp,0xc
c000e1e9:	50                   	push   eax
c000e1ea:	6a 06                	push   0x6
c000e1ec:	68 98 68 03 c0       	push   0xc0036898
c000e1f1:	68 90 68 03 c0       	push   0xc0036890
c000e1f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e1fa:	e8 11 51 00 00       	call   c0013310 <inet_chksum_pseudo>
c000e1ff:	83 c4 20             	add    esp,0x20
c000e202:	0f b7 c0             	movzx  eax,ax
c000e205:	85 c0                	test   eax,eax
c000e207:	74 33                	je     c000e23c <tcp_input+0x198>
c000e209:	66 a1 b8 67 03 c0    	mov    ax,ds:0xc00367b8
c000e20f:	83 c0 01             	add    eax,0x1
c000e212:	66 a3 b8 67 03 c0    	mov    ds:0xc00367b8,ax
c000e218:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e21e:	83 c0 01             	add    eax,0x1
c000e221:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e227:	83 ec 0c             	sub    esp,0xc
c000e22a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e22e:	e8 c1 a2 ff ff       	call   c00084f4 <pbuf_free>
c000e233:	83 c4 10             	add    esp,0x10
c000e236:	e9 35 09 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e23b:	90                   	nop
c000e23c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e241:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e245:	0f b7 c0             	movzx  eax,ax
c000e248:	83 ec 0c             	sub    esp,0xc
c000e24b:	50                   	push   eax
c000e24c:	e8 97 29 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e251:	83 c4 10             	add    esp,0x10
c000e254:	0f b7 c0             	movzx  eax,ax
c000e257:	c1 e8 0c             	shr    eax,0xc
c000e25a:	88 44 24 02          	mov    BYTE PTR [esp+0x2],al
c000e25e:	0f b6 44 24 02       	movzx  eax,BYTE PTR [esp+0x2]
c000e263:	ba 00 00 00 00       	mov    edx,0x0
c000e268:	89 d1                	mov    ecx,edx
c000e26a:	29 c1                	sub    ecx,eax
c000e26c:	89 c8                	mov    eax,ecx
c000e26e:	c1 e0 02             	shl    eax,0x2
c000e271:	98                   	cwde   
c000e272:	83 ec 08             	sub    esp,0x8
c000e275:	50                   	push   eax
c000e276:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e27a:	e8 d9 a0 ff ff       	call   c0008358 <pbuf_header>
c000e27f:	83 c4 10             	add    esp,0x10
c000e282:	0f b6 c0             	movzx  eax,al
c000e285:	85 c0                	test   eax,eax
c000e287:	74 33                	je     c000e2bc <tcp_input+0x218>
c000e289:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000e28f:	83 c0 01             	add    eax,0x1
c000e292:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000e298:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e29e:	83 c0 01             	add    eax,0x1
c000e2a1:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e2a7:	83 ec 0c             	sub    esp,0xc
c000e2aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ae:	e8 41 a2 ff ff       	call   c00084f4 <pbuf_free>
c000e2b3:	83 c4 10             	add    esp,0x10
c000e2b6:	e9 b5 08 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e2bb:	90                   	nop
c000e2bc:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e2c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e2c4:	0f b7 c0             	movzx  eax,ax
c000e2c7:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e2cd:	83 ec 0c             	sub    esp,0xc
c000e2d0:	50                   	push   eax
c000e2d1:	e8 12 29 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e2d6:	83 c4 10             	add    esp,0x10
c000e2d9:	66 89 03             	mov    WORD PTR [ebx],ax
c000e2dc:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e2e1:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e2e5:	0f b7 c0             	movzx  eax,ax
c000e2e8:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e2ee:	83 ec 0c             	sub    esp,0xc
c000e2f1:	50                   	push   eax
c000e2f2:	e8 f1 28 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e2f7:	83 c4 10             	add    esp,0x10
c000e2fa:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000e2fe:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e303:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e306:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e30c:	83 ec 0c             	sub    esp,0xc
c000e30f:	50                   	push   eax
c000e310:	e8 f7 28 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e31b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e31e:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000e323:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e328:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e32b:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e331:	83 ec 0c             	sub    esp,0xc
c000e334:	50                   	push   eax
c000e335:	e8 d2 28 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e33a:	83 c4 10             	add    esp,0x10
c000e33d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000e340:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e343:	a3 b0 a8 03 c0       	mov    ds:0xc003a8b0,eax
c000e348:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e34d:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000e351:	0f b7 c0             	movzx  eax,ax
c000e354:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e35a:	83 ec 0c             	sub    esp,0xc
c000e35d:	50                   	push   eax
c000e35e:	e8 85 28 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e363:	83 c4 10             	add    esp,0x10
c000e366:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000e36a:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e36f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e373:	0f b7 c0             	movzx  eax,ax
c000e376:	83 ec 0c             	sub    esp,0xc
c000e379:	50                   	push   eax
c000e37a:	e8 69 28 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e37f:	83 c4 10             	add    esp,0x10
c000e382:	83 e0 3f             	and    eax,0x3f
c000e385:	a2 ac a8 03 c0       	mov    ds:0xc003a8ac,al
c000e38a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e38e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000e391:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e396:	0f b6 c0             	movzx  eax,al
c000e399:	83 e0 03             	and    eax,0x3
c000e39c:	0f 95 c0             	setne  al
c000e39f:	0f b6 c0             	movzx  eax,al
c000e3a2:	01 d0                	add    eax,edx
c000e3a4:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000e3aa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e3b2:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000e3b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e3bb:	e9 50 01 00 00       	jmp    c000e510 <tcp_input+0x46c>
c000e3c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3c4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e3c7:	85 c0                	test   eax,eax
c000e3c9:	75 15                	jne    c000e3e0 <tcp_input+0x33c>
c000e3cb:	83 ec 08             	sub    esp,0x8
c000e3ce:	68 10 08 03 c0       	push   0xc0030810
c000e3d3:	68 a6 fd 02 c0       	push   0xc002fda6
c000e3d8:	e8 3b 1a 01 00       	call   c001fe18 <CPrintf>
c000e3dd:	83 c4 10             	add    esp,0x10
c000e3e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3e4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e3e7:	83 f8 0a             	cmp    eax,0xa
c000e3ea:	75 18                	jne    c000e404 <tcp_input+0x360>
c000e3ec:	83 ec 08             	sub    esp,0x8
c000e3ef:	68 38 08 03 c0       	push   0xc0030838
c000e3f4:	68 a6 fd 02 c0       	push   0xc002fda6
c000e3f9:	e8 1a 1a 01 00       	call   c001fe18 <CPrintf>
c000e3fe:	83 c4 10             	add    esp,0x10
c000e401:	8d 76 00             	lea    esi,[esi+0x0]
c000e404:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e408:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e40b:	83 f8 01             	cmp    eax,0x1
c000e40e:	75 18                	jne    c000e428 <tcp_input+0x384>
c000e410:	83 ec 08             	sub    esp,0x8
c000e413:	68 64 08 03 c0       	push   0xc0030864
c000e418:	68 a6 fd 02 c0       	push   0xc002fda6
c000e41d:	e8 f6 19 01 00       	call   c001fe18 <CPrintf>
c000e422:	83 c4 10             	add    esp,0x10
c000e425:	8d 76 00             	lea    esi,[esi+0x0]
c000e428:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e42c:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e430:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e435:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e438:	0f b7 d2             	movzx  edx,dx
c000e43b:	0f b7 c0             	movzx  eax,ax
c000e43e:	39 c2                	cmp    edx,eax
c000e440:	0f 85 b6 00 00 00    	jne    c000e4fc <tcp_input+0x458>
c000e446:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e44a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e44d:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e452:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e456:	0f b7 d2             	movzx  edx,dx
c000e459:	0f b7 c0             	movzx  eax,ax
c000e45c:	39 c2                	cmp    edx,eax
c000e45e:	0f 85 98 00 00 00    	jne    c000e4fc <tcp_input+0x458>
c000e464:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e468:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e46b:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e470:	39 c2                	cmp    edx,eax
c000e472:	0f 85 84 00 00 00    	jne    c000e4fc <tcp_input+0x458>
c000e478:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e47c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e47e:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e483:	39 c2                	cmp    edx,eax
c000e485:	75 75                	jne    c000e4fc <tcp_input+0x458>
c000e487:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e48b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e48e:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e492:	75 18                	jne    c000e4ac <tcp_input+0x408>
c000e494:	83 ec 08             	sub    esp,0x8
c000e497:	68 8c 08 03 c0       	push   0xc003088c
c000e49c:	68 a6 fd 02 c0       	push   0xc002fda6
c000e4a1:	e8 72 19 01 00       	call   c001fe18 <CPrintf>
c000e4a6:	83 c4 10             	add    esp,0x10
c000e4a9:	8d 76 00             	lea    esi,[esi+0x0]
c000e4ac:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e4b1:	74 25                	je     c000e4d8 <tcp_input+0x434>
c000e4b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4b7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e4ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e4be:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e4c1:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000e4c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e4ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4d2:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000e4d7:	90                   	nop
c000e4d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e4df:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e4e3:	75 3b                	jne    c000e520 <tcp_input+0x47c>
c000e4e5:	83 ec 08             	sub    esp,0x8
c000e4e8:	68 b8 08 03 c0       	push   0xc00308b8
c000e4ed:	68 a6 fd 02 c0       	push   0xc002fda6
c000e4f2:	e8 21 19 01 00       	call   c001fe18 <CPrintf>
c000e4f7:	83 c4 10             	add    esp,0x10
c000e4fa:	eb 24                	jmp    c000e520 <tcp_input+0x47c>
c000e4fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e500:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e504:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e508:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e50b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e50f:	90                   	nop
c000e510:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e515:	0f 85 a5 fe ff ff    	jne    c000e3c0 <tcp_input+0x31c>
c000e51b:	eb 07                	jmp    c000e524 <tcp_input+0x480>
c000e51d:	8d 76 00             	lea    esi,[esi+0x0]
c000e520:	90                   	nop
c000e521:	8d 76 00             	lea    esi,[esi+0x0]
c000e524:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e529:	0f 85 89 01 00 00    	jne    c000e6b8 <tcp_input+0x614>
c000e52f:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000e534:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e538:	e9 ab 00 00 00       	jmp    c000e5e8 <tcp_input+0x544>
c000e53d:	8d 76 00             	lea    esi,[esi+0x0]
c000e540:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e544:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e547:	83 f8 0a             	cmp    eax,0xa
c000e54a:	74 18                	je     c000e564 <tcp_input+0x4c0>
c000e54c:	83 ec 08             	sub    esp,0x8
c000e54f:	68 e4 08 03 c0       	push   0xc00308e4
c000e554:	68 a6 fd 02 c0       	push   0xc002fda6
c000e559:	e8 ba 18 01 00       	call   c001fe18 <CPrintf>
c000e55e:	83 c4 10             	add    esp,0x10
c000e561:	8d 76 00             	lea    esi,[esi+0x0]
c000e564:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e568:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e56c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e571:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e574:	0f b7 d2             	movzx  edx,dx
c000e577:	0f b7 c0             	movzx  eax,ax
c000e57a:	39 c2                	cmp    edx,eax
c000e57c:	75 5e                	jne    c000e5dc <tcp_input+0x538>
c000e57e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e582:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e585:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e58a:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e58e:	0f b7 d2             	movzx  edx,dx
c000e591:	0f b7 c0             	movzx  eax,ax
c000e594:	39 c2                	cmp    edx,eax
c000e596:	75 44                	jne    c000e5dc <tcp_input+0x538>
c000e598:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e59c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e59f:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e5a4:	39 c2                	cmp    edx,eax
c000e5a6:	75 34                	jne    c000e5dc <tcp_input+0x538>
c000e5a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e5ae:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e5b3:	39 c2                	cmp    edx,eax
c000e5b5:	75 25                	jne    c000e5dc <tcp_input+0x538>
c000e5b7:	83 ec 0c             	sub    esp,0xc
c000e5ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5be:	e8 81 d4 ff ff       	call   c000ba44 <tcp_timewait_input>
c000e5c3:	83 c4 10             	add    esp,0x10
c000e5c6:	83 ec 0c             	sub    esp,0xc
c000e5c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e5cd:	e8 22 9f ff ff       	call   c00084f4 <pbuf_free>
c000e5d2:	83 c4 10             	add    esp,0x10
c000e5d5:	e9 96 05 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e5da:	66 90                	xchg   ax,ax
c000e5dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e5e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5e7:	90                   	nop
c000e5e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e5ed:	0f 85 4d ff ff ff    	jne    c000e540 <tcp_input+0x49c>
c000e5f3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e5fb:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c000e600:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e604:	eb 52                	jmp    c000e658 <tcp_input+0x5b4>
c000e606:	66 90                	xchg   ax,ax
c000e608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e60c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e60f:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e614:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e618:	0f b7 d2             	movzx  edx,dx
c000e61b:	0f b7 c0             	movzx  eax,ax
c000e61e:	39 c2                	cmp    edx,eax
c000e620:	75 22                	jne    c000e644 <tcp_input+0x5a0>
c000e622:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e626:	8b 10                	mov    edx,DWORD PTR [eax]
c000e628:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e62d:	39 c2                	cmp    edx,eax
c000e62f:	74 2f                	je     c000e660 <tcp_input+0x5bc>
c000e631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e635:	85 c0                	test   eax,eax
c000e637:	74 27                	je     c000e660 <tcp_input+0x5bc>
c000e639:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e63d:	8b 00                	mov    eax,DWORD PTR [eax]
c000e63f:	85 c0                	test   eax,eax
c000e641:	74 1d                	je     c000e660 <tcp_input+0x5bc>
c000e643:	90                   	nop
c000e644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e648:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e650:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e653:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e657:	90                   	nop
c000e658:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e65d:	75 a9                	jne    c000e608 <tcp_input+0x564>
c000e65f:	90                   	nop
c000e660:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e665:	74 51                	je     c000e6b8 <tcp_input+0x614>
c000e667:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e66c:	74 26                	je     c000e694 <tcp_input+0x5f0>
c000e66e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e672:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e675:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e679:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e67c:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c000e682:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e686:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e689:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e68d:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c000e692:	66 90                	xchg   ax,ax
c000e694:	83 ec 0c             	sub    esp,0xc
c000e697:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e69b:	e8 60 ee ff ff       	call   c000d500 <tcp_listen_input>
c000e6a0:	83 c4 10             	add    esp,0x10
c000e6a3:	83 ec 0c             	sub    esp,0xc
c000e6a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e6aa:	e8 45 9e ff ff       	call   c00084f4 <pbuf_free>
c000e6af:	83 c4 10             	add    esp,0x10
c000e6b2:	e9 b9 04 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e6b7:	90                   	nop
c000e6b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e6bd:	0f 84 19 04 00 00    	je     c000eadc <tcp_input+0xa38>
c000e6c3:	c7 05 c0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c0,0x0
c000e6cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e6d4:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000e6da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6de:	a3 c4 a8 03 c0       	mov    ds:0xc003a8c4,eax
c000e6e3:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e6e8:	a3 cc a8 03 c0       	mov    ds:0xc003a8cc,eax
c000e6ed:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e6f7:	c6 05 a8 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a8a8,0x0
c000e6fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e702:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e708:	85 c0                	test   eax,eax
c000e70a:	0f 84 b4 00 00 00    	je     c000e7c4 <tcp_input+0x720>
c000e710:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e714:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e71a:	85 c0                	test   eax,eax
c000e71c:	74 2e                	je     c000e74c <tcp_input+0x6a8>
c000e71e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e722:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e728:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e72c:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000e732:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e736:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e739:	6a 00                	push   0x0
c000e73b:	51                   	push   ecx
c000e73c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e740:	52                   	push   edx
c000e741:	ff d0                	call   eax
c000e743:	83 c4 10             	add    esp,0x10
c000e746:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e74a:	eb 20                	jmp    c000e76c <tcp_input+0x6c8>
c000e74c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e750:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e756:	6a 00                	push   0x0
c000e758:	50                   	push   eax
c000e759:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e75d:	6a 00                	push   0x0
c000e75f:	e8 b8 c8 ff ff       	call   c000b01c <tcp_recv_null>
c000e764:	83 c4 10             	add    esp,0x10
c000e767:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e76b:	90                   	nop
c000e76c:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e771:	85 c0                	test   eax,eax
c000e773:	75 13                	jne    c000e788 <tcp_input+0x6e4>
c000e775:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e779:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000e783:	eb 3f                	jmp    c000e7c4 <tcp_input+0x720>
c000e785:	8d 76 00             	lea    esi,[esi+0x0]
c000e788:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e78d:	83 f8 f6             	cmp    eax,0xfffffff6
c000e790:	74 0e                	je     c000e7a0 <tcp_input+0x6fc>
c000e792:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e798:	0f b7 c0             	movzx  eax,ax
c000e79b:	85 c0                	test   eax,eax
c000e79d:	74 25                	je     c000e7c4 <tcp_input+0x720>
c000e79f:	90                   	nop
c000e7a0:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e7a6:	83 c0 01             	add    eax,0x1
c000e7a9:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e7af:	83 ec 0c             	sub    esp,0xc
c000e7b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e7b6:	e8 39 9d ff ff       	call   c00084f4 <pbuf_free>
c000e7bb:	83 c4 10             	add    esp,0x10
c000e7be:	e9 ad 03 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e7c3:	90                   	nop
c000e7c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7c8:	a3 88 68 03 c0       	mov    ds:0xc0036888,eax
c000e7cd:	83 ec 0c             	sub    esp,0xc
c000e7d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7d4:	e8 33 ef ff ff       	call   c000d70c <tcp_process>
c000e7d9:	83 c4 10             	add    esp,0x10
c000e7dc:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e7e0:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e7e5:	83 f8 f6             	cmp    eax,0xfffffff6
c000e7e8:	0f 84 9a 02 00 00    	je     c000ea88 <tcp_input+0x9e4>
c000e7ee:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e7f3:	0f b6 c0             	movzx  eax,al
c000e7f6:	83 e0 08             	and    eax,0x8
c000e7f9:	74 59                	je     c000e854 <tcp_input+0x7b0>
c000e7fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7ff:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e805:	85 c0                	test   eax,eax
c000e807:	74 1f                	je     c000e828 <tcp_input+0x784>
c000e809:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e80d:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e813:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e817:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e81a:	83 ec 08             	sub    esp,0x8
c000e81d:	6a f5                	push   0xfffffff5
c000e81f:	52                   	push   edx
c000e820:	ff d0                	call   eax
c000e822:	83 c4 10             	add    esp,0x10
c000e825:	8d 76 00             	lea    esi,[esi+0x0]
c000e828:	83 ec 08             	sub    esp,0x8
c000e82b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e82f:	68 70 68 03 c0       	push   0xc0036870
c000e834:	e8 ff c2 ff ff       	call   c000ab38 <tcp_pcb_remove>
c000e839:	83 c4 10             	add    esp,0x10
c000e83c:	83 ec 08             	sub    esp,0x8
c000e83f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e843:	6a 02                	push   0x2
c000e845:	e8 ee 93 ff ff       	call   c0007c38 <memp_free>
c000e84a:	83 c4 10             	add    esp,0x10
c000e84d:	e9 46 02 00 00       	jmp    c000ea98 <tcp_input+0x9f4>
c000e852:	66 90                	xchg   ax,ax
c000e854:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e859:	0f b6 c0             	movzx  eax,al
c000e85c:	83 e0 10             	and    eax,0x10
c000e85f:	74 2b                	je     c000e88c <tcp_input+0x7e8>
c000e861:	83 ec 08             	sub    esp,0x8
c000e864:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e868:	68 70 68 03 c0       	push   0xc0036870
c000e86d:	e8 c6 c2 ff ff       	call   c000ab38 <tcp_pcb_remove>
c000e872:	83 c4 10             	add    esp,0x10
c000e875:	83 ec 08             	sub    esp,0x8
c000e878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e87c:	6a 02                	push   0x2
c000e87e:	e8 b5 93 ff ff       	call   c0007c38 <memp_free>
c000e883:	83 c4 10             	add    esp,0x10
c000e886:	e9 0d 02 00 00       	jmp    c000ea98 <tcp_input+0x9f4>
c000e88b:	90                   	nop
c000e88c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e891:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e895:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e898:	0f b7 c0             	movzx  eax,ax
c000e89b:	85 c0                	test   eax,eax
c000e89d:	74 55                	je     c000e8f4 <tcp_input+0x850>
c000e89f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8a3:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e8a9:	85 c0                	test   eax,eax
c000e8ab:	74 2f                	je     c000e8dc <tcp_input+0x838>
c000e8ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8b1:	8b 90 88 00 00 00    	mov    edx,DWORD PTR [eax+0x88]
c000e8b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8bb:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e8be:	0f b7 c8             	movzx  ecx,ax
c000e8c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8c5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000e8c8:	83 ec 04             	sub    esp,0x4
c000e8cb:	51                   	push   ecx
c000e8cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8d0:	50                   	push   eax
c000e8d1:	ff d2                	call   edx
c000e8d3:	83 c4 10             	add    esp,0x10
c000e8d6:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e8da:	eb 08                	jmp    c000e8e4 <tcp_input+0x840>
c000e8dc:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e8e1:	8d 76 00             	lea    esi,[esi+0x0]
c000e8e4:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e8e9:	83 f8 f6             	cmp    eax,0xfffffff6
c000e8ec:	0f 84 9a 01 00 00    	je     c000ea8c <tcp_input+0x9e8>
c000e8f2:	66 90                	xchg   ax,ax
c000e8f4:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e8f9:	85 c0                	test   eax,eax
c000e8fb:	0f 84 f3 00 00 00    	je     c000e9f4 <tcp_input+0x950>
c000e901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e905:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e90b:	85 c0                	test   eax,eax
c000e90d:	74 15                	je     c000e924 <tcp_input+0x880>
c000e90f:	83 ec 08             	sub    esp,0x8
c000e912:	68 7d 09 03 c0       	push   0xc003097d
c000e917:	68 a6 fd 02 c0       	push   0xc002fda6
c000e91c:	e8 f7 14 01 00       	call   c001fe18 <CPrintf>
c000e921:	83 c4 10             	add    esp,0x10
c000e924:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e928:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e92b:	0f b6 c0             	movzx  eax,al
c000e92e:	83 e0 10             	and    eax,0x10
c000e931:	74 25                	je     c000e958 <tcp_input+0x8b4>
c000e933:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e938:	83 ec 0c             	sub    esp,0xc
c000e93b:	50                   	push   eax
c000e93c:	e8 b3 9b ff ff       	call   c00084f4 <pbuf_free>
c000e941:	83 c4 10             	add    esp,0x10
c000e944:	83 ec 0c             	sub    esp,0xc
c000e947:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e94b:	e8 c4 ca ff ff       	call   c000b414 <tcp_abort>
c000e950:	83 c4 10             	add    esp,0x10
c000e953:	e9 40 01 00 00       	jmp    c000ea98 <tcp_input+0x9f4>
c000e958:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e95d:	0f b6 c0             	movzx  eax,al
c000e960:	83 e0 08             	and    eax,0x8
c000e963:	74 13                	je     c000e978 <tcp_input+0x8d4>
c000e965:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e96a:	8a 50 0d             	mov    dl,BYTE PTR [eax+0xd]
c000e96d:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e972:	83 ca 01             	or     edx,0x1
c000e975:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
c000e978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e97c:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e982:	85 c0                	test   eax,eax
c000e984:	74 2a                	je     c000e9b0 <tcp_input+0x90c>
c000e986:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e98a:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e990:	8b 0d a4 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8a4
c000e996:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e99a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e99d:	6a 00                	push   0x0
c000e99f:	51                   	push   ecx
c000e9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e9a4:	52                   	push   edx
c000e9a5:	ff d0                	call   eax
c000e9a7:	83 c4 10             	add    esp,0x10
c000e9aa:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e9ae:	eb 1c                	jmp    c000e9cc <tcp_input+0x928>
c000e9b0:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e9b5:	6a 00                	push   0x0
c000e9b7:	50                   	push   eax
c000e9b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e9bc:	6a 00                	push   0x0
c000e9be:	e8 59 c6 ff ff       	call   c000b01c <tcp_recv_null>
c000e9c3:	83 c4 10             	add    esp,0x10
c000e9c6:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e9ca:	66 90                	xchg   ax,ax
c000e9cc:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e9d1:	83 f8 f6             	cmp    eax,0xfffffff6
c000e9d4:	0f 84 b6 00 00 00    	je     c000ea90 <tcp_input+0x9ec>
c000e9da:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e9df:	85 c0                	test   eax,eax
c000e9e1:	74 11                	je     c000e9f4 <tcp_input+0x950>
c000e9e3:	8b 15 a4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8a4
c000e9e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9ed:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
c000e9f3:	90                   	nop
c000e9f4:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e9f9:	0f b6 c0             	movzx  eax,al
c000e9fc:	83 e0 20             	and    eax,0x20
c000e9ff:	74 6b                	je     c000ea6c <tcp_input+0x9c8>
c000ea01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea05:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ea08:	0f b7 c0             	movzx  eax,ax
c000ea0b:	3d 60 08 00 00       	cmp    eax,0x860
c000ea10:	74 12                	je     c000ea24 <tcp_input+0x980>
c000ea12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea16:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ea19:	83 c0 01             	add    eax,0x1
c000ea1c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea20:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000ea24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea28:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000ea2e:	85 c0                	test   eax,eax
c000ea30:	74 26                	je     c000ea58 <tcp_input+0x9b4>
c000ea32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea36:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000ea3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea40:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000ea43:	6a 00                	push   0x0
c000ea45:	6a 00                	push   0x0
c000ea47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea4b:	52                   	push   edx
c000ea4c:	ff d0                	call   eax
c000ea4e:	83 c4 10             	add    esp,0x10
c000ea51:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ea55:	eb 09                	jmp    c000ea60 <tcp_input+0x9bc>
c000ea57:	90                   	nop
c000ea58:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000ea5d:	8d 76 00             	lea    esi,[esi+0x0]
c000ea60:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000ea65:	83 f8 f6             	cmp    eax,0xfffffff6
c000ea68:	74 2a                	je     c000ea94 <tcp_input+0x9f0>
c000ea6a:	66 90                	xchg   ax,ax
c000ea6c:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000ea76:	83 ec 0c             	sub    esp,0xc
c000ea79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea7d:	e8 a2 15 00 00       	call   c0010024 <tcp_output>
c000ea82:	83 c4 10             	add    esp,0x10
c000ea85:	eb 11                	jmp    c000ea98 <tcp_input+0x9f4>
c000ea87:	90                   	nop
c000ea88:	90                   	nop
c000ea89:	eb 0d                	jmp    c000ea98 <tcp_input+0x9f4>
c000ea8b:	90                   	nop
c000ea8c:	90                   	nop
c000ea8d:	eb 09                	jmp    c000ea98 <tcp_input+0x9f4>
c000ea8f:	90                   	nop
c000ea90:	90                   	nop
c000ea91:	eb 05                	jmp    c000ea98 <tcp_input+0x9f4>
c000ea93:	90                   	nop
c000ea94:	90                   	nop
c000ea95:	8d 76 00             	lea    esi,[esi+0x0]
c000ea98:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000eaa2:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000eaac:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000eab1:	85 c0                	test   eax,eax
c000eab3:	0f 84 b7 00 00 00    	je     c000eb70 <tcp_input+0xacc>
c000eab9:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000eabe:	83 ec 0c             	sub    esp,0xc
c000eac1:	50                   	push   eax
c000eac2:	e8 2d 9a ff ff       	call   c00084f4 <pbuf_free>
c000eac7:	83 c4 10             	add    esp,0x10
c000eaca:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000ead4:	e9 97 00 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000ead9:	8d 76 00             	lea    esi,[esi+0x0]
c000eadc:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000eae1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000eae5:	0f b7 c0             	movzx  eax,ax
c000eae8:	83 ec 0c             	sub    esp,0xc
c000eaeb:	50                   	push   eax
c000eaec:	e8 f7 20 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000eaf1:	83 c4 10             	add    esp,0x10
c000eaf4:	0f b7 c0             	movzx  eax,ax
c000eaf7:	83 e0 04             	and    eax,0x4
c000eafa:	75 64                	jne    c000eb60 <tcp_input+0xabc>
c000eafc:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000eb02:	83 c0 01             	add    eax,0x1
c000eb05:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000eb0b:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000eb11:	83 c0 01             	add    eax,0x1
c000eb14:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000eb1a:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000eb1f:	66 8b 00             	mov    ax,WORD PTR [eax]
c000eb22:	0f b7 c8             	movzx  ecx,ax
c000eb25:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000eb2a:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000eb2e:	0f b7 d0             	movzx  edx,ax
c000eb31:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000eb37:	0f b7 d8             	movzx  ebx,ax
c000eb3a:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000eb3f:	01 c3                	add    ebx,eax
c000eb41:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000eb46:	83 ec 08             	sub    esp,0x8
c000eb49:	51                   	push   ecx
c000eb4a:	52                   	push   edx
c000eb4b:	68 90 68 03 c0       	push   0xc0036890
c000eb50:	68 98 68 03 c0       	push   0xc0036898
c000eb55:	53                   	push   ebx
c000eb56:	50                   	push   eax
c000eb57:	e8 54 19 00 00       	call   c00104b0 <tcp_rst>
c000eb5c:	83 c4 20             	add    esp,0x20
c000eb5f:	90                   	nop
c000eb60:	83 ec 0c             	sub    esp,0xc
c000eb63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eb67:	e8 88 99 ff ff       	call   c00084f4 <pbuf_free>
c000eb6c:	83 c4 10             	add    esp,0x10
c000eb6f:	90                   	nop
c000eb70:	83 c4 18             	add    esp,0x18
c000eb73:	5b                   	pop    ebx
c000eb74:	c3                   	ret    
c000eb75:	66 90                	xchg   ax,ax
c000eb77:	90                   	nop

c000eb78 <tcp_output_alloc_header>:
c000eb78:	83 ec 2c             	sub    esp,0x2c
c000eb7b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eb7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eb83:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000eb88:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000eb8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb95:	01 d0                	add    eax,edx
c000eb97:	83 c0 14             	add    eax,0x14
c000eb9a:	0f b7 c0             	movzx  eax,ax
c000eb9d:	83 ec 04             	sub    esp,0x4
c000eba0:	6a 00                	push   0x0
c000eba2:	50                   	push   eax
c000eba3:	6a 01                	push   0x1
c000eba5:	e8 22 9b ff ff       	call   c00086cc <pbuf_alloc>
c000ebaa:	83 c4 10             	add    esp,0x10
c000ebad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ebb1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ebb6:	0f 84 10 01 00 00    	je     c000eccc <tcp_output_alloc_header+0x154>
c000ebbc:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ebc1:	8d 50 13             	lea    edx,[eax+0x13]
c000ebc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ebc8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000ebcc:	0f b7 c0             	movzx  eax,ax
c000ebcf:	39 c2                	cmp    edx,eax
c000ebd1:	7c 15                	jl     c000ebe8 <tcp_output_alloc_header+0x70>
c000ebd3:	83 ec 08             	sub    esp,0x8
c000ebd6:	68 c0 09 03 c0       	push   0xc00309c0
c000ebdb:	68 a6 fd 02 c0       	push   0xc002fda6
c000ebe0:	e8 33 12 01 00       	call   c001fe18 <CPrintf>
c000ebe5:	83 c4 10             	add    esp,0x10
c000ebe8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ebec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ebef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ebf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebf7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ebfa:	0f b7 c0             	movzx  eax,ax
c000ebfd:	83 ec 0c             	sub    esp,0xc
c000ec00:	50                   	push   eax
c000ec01:	e8 e2 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec06:	83 c4 10             	add    esp,0x10
c000ec09:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec0d:	66 89 02             	mov    WORD PTR [edx],ax
c000ec10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec14:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ec18:	0f b7 c0             	movzx  eax,ax
c000ec1b:	83 ec 0c             	sub    esp,0xc
c000ec1e:	50                   	push   eax
c000ec1f:	e8 c4 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec24:	83 c4 10             	add    esp,0x10
c000ec27:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec2b:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ec2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec33:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ec37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ec3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec3e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ec41:	83 ec 0c             	sub    esp,0xc
c000ec44:	50                   	push   eax
c000ec45:	e8 c2 1f ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000ec4a:	83 c4 10             	add    esp,0x10
c000ec4d:	89 c2                	mov    edx,eax
c000ec4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec53:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ec56:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ec5b:	c1 e8 02             	shr    eax,0x2
c000ec5e:	83 c0 05             	add    eax,0x5
c000ec61:	c1 e0 0c             	shl    eax,0xc
c000ec64:	83 c8 10             	or     eax,0x10
c000ec67:	0f b7 c0             	movzx  eax,ax
c000ec6a:	83 ec 0c             	sub    esp,0xc
c000ec6d:	50                   	push   eax
c000ec6e:	e8 75 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec73:	83 c4 10             	add    esp,0x10
c000ec76:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec7a:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000ec7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec82:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000ec86:	0f b7 c0             	movzx  eax,ax
c000ec89:	83 ec 0c             	sub    esp,0xc
c000ec8c:	50                   	push   eax
c000ec8d:	e8 56 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec92:	83 c4 10             	add    esp,0x10
c000ec95:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec99:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c000ec9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eca1:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000eca7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecab:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ecb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecb5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ecb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecbc:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000ecc0:	0f b7 c0             	movzx  eax,ax
c000ecc3:	01 c2                	add    edx,eax
c000ecc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecc9:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000eccc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ecd0:	83 c4 2c             	add    esp,0x2c
c000ecd3:	c3                   	ret    

c000ecd4 <tcp_create_segment>:
c000ecd4:	53                   	push   ebx
c000ecd5:	83 ec 28             	sub    esp,0x28
c000ecd8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ecdc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ece0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000ece4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ece8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000eced:	c1 e0 02             	shl    eax,0x2
c000ecf0:	83 e0 04             	and    eax,0x4
c000ecf3:	88 c2                	mov    dl,al
c000ecf5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ecfa:	83 e0 02             	and    eax,0x2
c000ecfd:	74 05                	je     c000ed04 <tcp_create_segment+0x30>
c000ecff:	b0 0c                	mov    al,0xc
c000ed01:	eb 05                	jmp    c000ed08 <tcp_create_segment+0x34>
c000ed03:	90                   	nop
c000ed04:	b0 00                	mov    al,0x0
c000ed06:	66 90                	xchg   ax,ax
c000ed08:	01 d0                	add    eax,edx
c000ed0a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ed0e:	83 ec 0c             	sub    esp,0xc
c000ed11:	6a 04                	push   0x4
c000ed13:	e8 f4 8d ff ff       	call   c0007b0c <memp_malloc>
c000ed18:	83 c4 10             	add    esp,0x10
c000ed1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed1f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ed24:	75 1a                	jne    c000ed40 <tcp_create_segment+0x6c>
c000ed26:	83 ec 0c             	sub    esp,0xc
c000ed29:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ed2d:	e8 c2 97 ff ff       	call   c00084f4 <pbuf_free>
c000ed32:	83 c4 10             	add    esp,0x10
c000ed35:	b8 00 00 00 00       	mov    eax,0x0
c000ed3a:	e9 31 01 00 00       	jmp    c000ee70 <tcp_create_segment+0x19c>
c000ed3f:	90                   	nop
c000ed40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed44:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c000ed48:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c000ed4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed4f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed59:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ed5d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ed60:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed64:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ed67:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ed6c:	89 d1                	mov    ecx,edx
c000ed6e:	29 c1                	sub    ecx,eax
c000ed70:	89 c8                	mov    eax,ecx
c000ed72:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed76:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000ed7a:	83 ec 08             	sub    esp,0x8
c000ed7d:	6a 14                	push   0x14
c000ed7f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ed83:	e8 d0 95 ff ff       	call   c0008358 <pbuf_header>
c000ed88:	83 c4 10             	add    esp,0x10
c000ed8b:	0f b6 c0             	movzx  eax,al
c000ed8e:	85 c0                	test   eax,eax
c000ed90:	74 2a                	je     c000edbc <tcp_create_segment+0xe8>
c000ed92:	66 a1 c4 67 03 c0    	mov    ax,ds:0xc00367c4
c000ed98:	83 c0 01             	add    eax,0x1
c000ed9b:	66 a3 c4 67 03 c0    	mov    ds:0xc00367c4,ax
c000eda1:	83 ec 0c             	sub    esp,0xc
c000eda4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eda8:	e8 bf b3 ff ff       	call   c000a16c <tcp_seg_free>
c000edad:	83 c4 10             	add    esp,0x10
c000edb0:	b8 00 00 00 00       	mov    eax,0x0
c000edb5:	e9 b6 00 00 00       	jmp    c000ee70 <tcp_create_segment+0x19c>
c000edba:	66 90                	xchg   ax,ax
c000edbc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edc3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000edc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edca:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000edcd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edd1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000edd4:	0f b7 c0             	movzx  eax,ax
c000edd7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eddb:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000edde:	83 ec 0c             	sub    esp,0xc
c000ede1:	50                   	push   eax
c000ede2:	e8 01 1e ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ede7:	83 c4 10             	add    esp,0x10
c000edea:	66 89 03             	mov    WORD PTR [ebx],ax
c000eded:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edf1:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000edf5:	0f b7 c0             	movzx  eax,ax
c000edf8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edfc:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000edff:	83 ec 0c             	sub    esp,0xc
c000ee02:	50                   	push   eax
c000ee03:	e8 e0 1d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ee08:	83 c4 10             	add    esp,0x10
c000ee0b:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000ee0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee13:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ee16:	83 ec 0c             	sub    esp,0xc
c000ee19:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ee1d:	e8 ea 1d ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000ee22:	83 c4 10             	add    esp,0x10
c000ee25:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ee28:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ee2d:	c1 e8 02             	shr    eax,0x2
c000ee30:	0f b6 c0             	movzx  eax,al
c000ee33:	83 c0 05             	add    eax,0x5
c000ee36:	c1 e0 0c             	shl    eax,0xc
c000ee39:	89 c2                	mov    edx,eax
c000ee3b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ee40:	09 d0                	or     eax,edx
c000ee42:	0f b7 c0             	movzx  eax,ax
c000ee45:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee49:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ee4c:	83 ec 0c             	sub    esp,0xc
c000ee4f:	50                   	push   eax
c000ee50:	e8 93 1d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ee55:	83 c4 10             	add    esp,0x10
c000ee58:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c000ee5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ee63:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ee69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee6d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee70:	83 c4 28             	add    esp,0x28
c000ee73:	5b                   	pop    ebx
c000ee74:	c3                   	ret    
c000ee75:	8d 76 00             	lea    esi,[esi+0x0]

c000ee78 <tcp_pbuf_prealloc>:
c000ee78:	53                   	push   ebx
c000ee79:	83 ec 28             	sub    esp,0x28
c000ee7c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ee80:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee84:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ee88:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000ee8c:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000ee91:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ee96:	88 d8                	mov    al,bl
c000ee98:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ee9c:	88 c8                	mov    al,cl
c000ee9e:	88 04 24             	mov    BYTE PTR [esp],al
c000eea1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eea5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000eeaa:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000eeaf:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000eeb4:	39 c2                	cmp    edx,eax
c000eeb6:	73 64                	jae    c000ef1c <tcp_pbuf_prealloc+0xa4>
c000eeb8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000eebd:	83 e0 02             	and    eax,0x2
c000eec0:	75 2e                	jne    c000eef0 <tcp_pbuf_prealloc+0x78>
c000eec2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eec6:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000eec9:	0f b6 c0             	movzx  eax,al
c000eecc:	83 e0 40             	and    eax,0x40
c000eecf:	75 4b                	jne    c000ef1c <tcp_pbuf_prealloc+0xa4>
c000eed1:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000eed5:	85 c0                	test   eax,eax
c000eed7:	74 17                	je     c000eef0 <tcp_pbuf_prealloc+0x78>
c000eed9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eedd:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000eee0:	85 c0                	test   eax,eax
c000eee2:	75 0c                	jne    c000eef0 <tcp_pbuf_prealloc+0x78>
c000eee4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eee8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000eeeb:	85 c0                	test   eax,eax
c000eeed:	74 2d                	je     c000ef1c <tcp_pbuf_prealloc+0xa4>
c000eeef:	90                   	nop
c000eef0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000eef5:	8d 90 17 02 00 00    	lea    edx,[eax+0x217]
c000eefb:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ef00:	39 c2                	cmp    edx,eax
c000ef02:	7d 0c                	jge    c000ef10 <tcp_pbuf_prealloc+0x98>
c000ef04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef08:	05 18 02 00 00       	add    eax,0x218
c000ef0d:	eb 05                	jmp    c000ef14 <tcp_pbuf_prealloc+0x9c>
c000ef0f:	90                   	nop
c000ef10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef14:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ef19:	8d 76 00             	lea    esi,[esi+0x0]
c000ef1c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000ef21:	83 ec 04             	sub    esp,0x4
c000ef24:	6a 00                	push   0x0
c000ef26:	50                   	push   eax
c000ef27:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ef2b:	e8 9c 97 ff ff       	call   c00086cc <pbuf_alloc>
c000ef30:	83 c4 10             	add    esp,0x10
c000ef33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef37:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ef3c:	75 0a                	jne    c000ef48 <tcp_pbuf_prealloc+0xd0>
c000ef3e:	b8 00 00 00 00       	mov    eax,0x0
c000ef43:	eb 5b                	jmp    c000efa0 <tcp_pbuf_prealloc+0x128>
c000ef45:	8d 76 00             	lea    esi,[esi+0x0]
c000ef48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef4c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef4e:	85 c0                	test   eax,eax
c000ef50:	74 16                	je     c000ef68 <tcp_pbuf_prealloc+0xf0>
c000ef52:	83 ec 08             	sub    esp,0x8
c000ef55:	68 44 0c 03 c0       	push   0xc0030c44
c000ef5a:	68 a6 fd 02 c0       	push   0xc002fda6
c000ef5f:	e8 b4 0e 01 00       	call   c001fe18 <CPrintf>
c000ef64:	83 c4 10             	add    esp,0x10
c000ef67:	90                   	nop
c000ef68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef6c:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000ef70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef74:	89 d1                	mov    ecx,edx
c000ef76:	29 c1                	sub    ecx,eax
c000ef78:	89 c8                	mov    eax,ecx
c000ef7a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ef7e:	66 89 02             	mov    WORD PTR [edx],ax
c000ef81:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ef85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef89:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000ef8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef91:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ef94:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ef98:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000ef9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000efa0:	83 c4 28             	add    esp,0x28
c000efa3:	5b                   	pop    ebx
c000efa4:	c3                   	ret    
c000efa5:	8d 76 00             	lea    esi,[esi+0x0]

c000efa8 <tcp_write_checks>:
c000efa8:	83 ec 1c             	sub    esp,0x1c
c000efab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efaf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000efb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efb8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000efbb:	83 f8 04             	cmp    eax,0x4
c000efbe:	74 2c                	je     c000efec <tcp_write_checks+0x44>
c000efc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efc4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000efc7:	83 f8 07             	cmp    eax,0x7
c000efca:	74 20                	je     c000efec <tcp_write_checks+0x44>
c000efcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efd0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000efd3:	83 f8 02             	cmp    eax,0x2
c000efd6:	74 14                	je     c000efec <tcp_write_checks+0x44>
c000efd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efdc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000efdf:	83 f8 03             	cmp    eax,0x3
c000efe2:	74 08                	je     c000efec <tcp_write_checks+0x44>
c000efe4:	b0 f3                	mov    al,0xf3
c000efe6:	e9 f9 00 00 00       	jmp    c000f0e4 <tcp_write_checks+0x13c>
c000efeb:	90                   	nop
c000efec:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000eff1:	85 c0                	test   eax,eax
c000eff3:	75 07                	jne    c000effc <tcp_write_checks+0x54>
c000eff5:	b0 00                	mov    al,0x0
c000eff7:	e9 e8 00 00 00       	jmp    c000f0e4 <tcp_write_checks+0x13c>
c000effc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f000:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000f004:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f009:	0f b7 c0             	movzx  eax,ax
c000f00c:	39 c2                	cmp    edx,eax
c000f00e:	76 1c                	jbe    c000f02c <tcp_write_checks+0x84>
c000f010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f014:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f017:	83 c8 80             	or     eax,0xffffff80
c000f01a:	88 c2                	mov    dl,al
c000f01c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f020:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f023:	b0 ff                	mov    al,0xff
c000f025:	e9 ba 00 00 00       	jmp    c000f0e4 <tcp_write_checks+0x13c>
c000f02a:	66 90                	xchg   ax,ax
c000f02c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f030:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f033:	0f b7 c0             	movzx  eax,ax
c000f036:	83 f8 01             	cmp    eax,0x1
c000f039:	77 11                	ja     c000f04c <tcp_write_checks+0xa4>
c000f03b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f03f:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f042:	0f b7 c0             	movzx  eax,ax
c000f045:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f04a:	76 28                	jbe    c000f074 <tcp_write_checks+0xcc>
c000f04c:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f052:	83 c0 01             	add    eax,0x1
c000f055:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f05b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f05f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f062:	83 c8 80             	or     eax,0xffffff80
c000f065:	88 c2                	mov    dl,al
c000f067:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f06b:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f06e:	b0 ff                	mov    al,0xff
c000f070:	eb 72                	jmp    c000f0e4 <tcp_write_checks+0x13c>
c000f072:	66 90                	xchg   ax,ax
c000f074:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f078:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f07b:	0f b7 c0             	movzx  eax,ax
c000f07e:	85 c0                	test   eax,eax
c000f080:	74 2e                	je     c000f0b0 <tcp_write_checks+0x108>
c000f082:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f086:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f089:	85 c0                	test   eax,eax
c000f08b:	75 53                	jne    c000f0e0 <tcp_write_checks+0x138>
c000f08d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f091:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f094:	85 c0                	test   eax,eax
c000f096:	75 48                	jne    c000f0e0 <tcp_write_checks+0x138>
c000f098:	83 ec 08             	sub    esp,0x8
c000f09b:	68 f0 09 03 c0       	push   0xc00309f0
c000f0a0:	68 a6 fd 02 c0       	push   0xc002fda6
c000f0a5:	e8 6e 0d 01 00       	call   c001fe18 <CPrintf>
c000f0aa:	83 c4 10             	add    esp,0x10
c000f0ad:	eb 31                	jmp    c000f0e0 <tcp_write_checks+0x138>
c000f0af:	90                   	nop
c000f0b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0b4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f0b7:	85 c0                	test   eax,eax
c000f0b9:	75 0d                	jne    c000f0c8 <tcp_write_checks+0x120>
c000f0bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0bf:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f0c2:	85 c0                	test   eax,eax
c000f0c4:	74 1a                	je     c000f0e0 <tcp_write_checks+0x138>
c000f0c6:	66 90                	xchg   ax,ax
c000f0c8:	83 ec 08             	sub    esp,0x8
c000f0cb:	68 2c 0a 03 c0       	push   0xc0030a2c
c000f0d0:	68 a6 fd 02 c0       	push   0xc002fda6
c000f0d5:	e8 3e 0d 01 00       	call   c001fe18 <CPrintf>
c000f0da:	83 c4 10             	add    esp,0x10
c000f0dd:	8d 76 00             	lea    esi,[esi+0x0]
c000f0e0:	b0 00                	mov    al,0x0
c000f0e2:	66 90                	xchg   ax,ax
c000f0e4:	83 c4 1c             	add    esp,0x1c
c000f0e7:	c3                   	ret    

c000f0e8 <tcp_write>:
c000f0e8:	56                   	push   esi
c000f0e9:	53                   	push   ebx
c000f0ea:	83 ec 54             	sub    esp,0x54
c000f0ed:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f0f1:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000f0f5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f0fa:	88 d0                	mov    al,dl
c000f0fc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f100:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f108:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000f110:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000f118:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000f120:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000f128:	66 c7 44 24 3a 00 00 	mov    WORD PTR [esp+0x3a],0x0
c000f12f:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000f134:	c6 44 24 2a 00       	mov    BYTE PTR [esp+0x2a],0x0
c000f139:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000f140:	66 c7 44 24 36 00 00 	mov    WORD PTR [esp+0x36],0x0
c000f147:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
c000f14c:	75 1e                	jne    c000f16c <tcp_write+0x84>
c000f14e:	83 ec 08             	sub    esp,0x8
c000f151:	68 60 0a 03 c0       	push   0xc0030a60
c000f156:	68 a6 fd 02 c0       	push   0xc002fda6
c000f15b:	e8 b8 0c 01 00       	call   c001fe18 <CPrintf>
c000f160:	83 c4 10             	add    esp,0x10
c000f163:	b0 f2                	mov    al,0xf2
c000f165:	e9 16 08 00 00       	jmp    c000f980 <tcp_write+0x898>
c000f16a:	66 90                	xchg   ax,ax
c000f16c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f171:	83 ec 08             	sub    esp,0x8
c000f174:	50                   	push   eax
c000f175:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f179:	e8 2a fe ff ff       	call   c000efa8 <tcp_write_checks>
c000f17e:	83 c4 10             	add    esp,0x10
c000f181:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c000f185:	0f be 44 24 29       	movsx  eax,BYTE PTR [esp+0x29]
c000f18a:	85 c0                	test   eax,eax
c000f18c:	74 0a                	je     c000f198 <tcp_write+0xb0>
c000f18e:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c000f192:	e9 e9 07 00 00       	jmp    c000f980 <tcp_write+0x898>
c000f197:	90                   	nop
c000f198:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f19c:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f19f:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f1a4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f1a8:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f1ab:	85 c0                	test   eax,eax
c000f1ad:	0f 84 79 02 00 00    	je     c000f42c <tcp_write+0x344>
c000f1b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f1b7:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f1ba:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f1be:	eb 0c                	jmp    c000f1cc <tcp_write+0xe4>
c000f1c0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f1c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1c6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f1ca:	66 90                	xchg   ax,ax
c000f1cc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f1d0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1d2:	85 c0                	test   eax,eax
c000f1d4:	75 ea                	jne    c000f1c0 <tcp_write+0xd8>
c000f1d6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f1da:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f1dd:	0f b6 c0             	movzx  eax,al
c000f1e0:	c1 e0 02             	shl    eax,0x2
c000f1e3:	83 e0 04             	and    eax,0x4
c000f1e6:	89 c2                	mov    edx,eax
c000f1e8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f1ec:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f1ef:	0f b6 c0             	movzx  eax,al
c000f1f2:	83 e0 02             	and    eax,0x2
c000f1f5:	74 09                	je     c000f200 <tcp_write+0x118>
c000f1f7:	b8 0c 00 00 00       	mov    eax,0xc
c000f1fc:	eb 0a                	jmp    c000f208 <tcp_write+0x120>
c000f1fe:	66 90                	xchg   ax,ax
c000f200:	b8 00 00 00 00       	mov    eax,0x0
c000f205:	8d 76 00             	lea    esi,[esi+0x0]
c000f208:	01 d0                	add    eax,edx
c000f20a:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000f20f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f213:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f216:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f21a:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000f21d:	66 8b 4c 24 26       	mov    cx,WORD PTR [esp+0x26]
c000f222:	01 ca                	add    edx,ecx
c000f224:	29 d0                	sub    eax,edx
c000f226:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f22b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f22f:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f233:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f238:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f23d:	0f b7 c0             	movzx  eax,ax
c000f240:	85 c0                	test   eax,eax
c000f242:	0f 84 84 00 00 00    	je     c000f2cc <tcp_write+0x1e4>
c000f248:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f24d:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f252:	39 c2                	cmp    edx,eax
c000f254:	76 16                	jbe    c000f26c <tcp_write+0x184>
c000f256:	83 ec 08             	sub    esp,0x8
c000f259:	68 94 0a 03 c0       	push   0xc0030a94
c000f25e:	68 a6 fd 02 c0       	push   0xc002fda6
c000f263:	e8 b0 0b 01 00       	call   c001fe18 <CPrintf>
c000f268:	83 c4 10             	add    esp,0x10
c000f26b:	90                   	nop
c000f26c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f270:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f274:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f279:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f27d:	0f b7 d8             	movzx  ebx,ax
c000f280:	0f b7 ca             	movzx  ecx,dx
c000f283:	39 cb                	cmp    ebx,ecx
c000f285:	76 05                	jbe    c000f28c <tcp_write+0x1a4>
c000f287:	89 d0                	mov    eax,edx
c000f289:	8d 76 00             	lea    esi,[esi+0x0]
c000f28c:	66 89 44 24 36       	mov    WORD PTR [esp+0x36],ax
c000f291:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f296:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f29b:	01 d0                	add    eax,edx
c000f29d:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f2a2:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f2a7:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f2ac:	89 d6                	mov    esi,edx
c000f2ae:	29 c6                	sub    esi,eax
c000f2b0:	89 f0                	mov    eax,esi
c000f2b2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f2b7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000f2bb:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f2c0:	89 d6                	mov    esi,edx
c000f2c2:	29 c6                	sub    esi,eax
c000f2c4:	89 f0                	mov    eax,esi
c000f2c6:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f2cb:	90                   	nop
c000f2cc:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f2d1:	0f b7 c0             	movzx  eax,ax
c000f2d4:	85 c0                	test   eax,eax
c000f2d6:	74 24                	je     c000f2fc <tcp_write+0x214>
c000f2d8:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f2dd:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f2e2:	39 c2                	cmp    edx,eax
c000f2e4:	74 16                	je     c000f2fc <tcp_write+0x214>
c000f2e6:	83 ec 08             	sub    esp,0x8
c000f2e9:	68 58 0c 03 c0       	push   0xc0030c58
c000f2ee:	68 a6 fd 02 c0       	push   0xc002fda6
c000f2f3:	e8 20 0b 01 00       	call   c001fe18 <CPrintf>
c000f2f8:	83 c4 10             	add    esp,0x10
c000f2fb:	90                   	nop
c000f2fc:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f301:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f306:	39 c2                	cmp    edx,eax
c000f308:	0f 83 ce 03 00 00    	jae    c000f6dc <tcp_write+0x5f4>
c000f30e:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f313:	85 c0                	test   eax,eax
c000f315:	0f 84 c1 03 00 00    	je     c000f6dc <tcp_write+0x5f4>
c000f31b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f31f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f322:	0f b7 c0             	movzx  eax,ax
c000f325:	85 c0                	test   eax,eax
c000f327:	0f 84 af 03 00 00    	je     c000f6dc <tcp_write+0x5f4>
c000f32d:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f332:	0f b7 44 24 3a       	movzx  eax,WORD PTR [esp+0x3a]
c000f337:	29 c2                	sub    edx,eax
c000f339:	89 d0                	mov    eax,edx
c000f33b:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f340:	39 d0                	cmp    eax,edx
c000f342:	7e 04                	jle    c000f348 <tcp_write+0x260>
c000f344:	89 d0                	mov    eax,edx
c000f346:	66 90                	xchg   ax,ax
c000f348:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c000f34d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f351:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f355:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f35a:	83 e0 01             	and    eax,0x1
c000f35d:	74 61                	je     c000f3c0 <tcp_write+0x2d8>
c000f35f:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f364:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f369:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f36e:	83 ec 04             	sub    esp,0x4
c000f371:	6a 01                	push   0x1
c000f373:	51                   	push   ecx
c000f374:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f378:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f37c:	51                   	push   ecx
c000f37d:	52                   	push   edx
c000f37e:	50                   	push   eax
c000f37f:	6a 03                	push   0x3
c000f381:	e8 f2 fa ff ff       	call   c000ee78 <tcp_pbuf_prealloc>
c000f386:	83 c4 20             	add    esp,0x20
c000f389:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f38d:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f392:	0f 84 44 05 00 00    	je     c000f8dc <tcp_write+0x7f4>
c000f398:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000f39d:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f3a2:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f3a6:	01 c1                	add    ecx,eax
c000f3a8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f3af:	83 ec 04             	sub    esp,0x4
c000f3b2:	52                   	push   edx
c000f3b3:	51                   	push   ecx
c000f3b4:	50                   	push   eax
c000f3b5:	e8 c0 0f ff ff       	call   c000037a <memcpy>
c000f3ba:	83 c4 10             	add    esp,0x10
c000f3bd:	eb 39                	jmp    c000f3f8 <tcp_write+0x310>
c000f3bf:	90                   	nop
c000f3c0:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f3c5:	83 ec 04             	sub    esp,0x4
c000f3c8:	6a 01                	push   0x1
c000f3ca:	50                   	push   eax
c000f3cb:	6a 03                	push   0x3
c000f3cd:	e8 fa 92 ff ff       	call   c00086cc <pbuf_alloc>
c000f3d2:	83 c4 10             	add    esp,0x10
c000f3d5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f3d9:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f3de:	0f 84 fc 04 00 00    	je     c000f8e0 <tcp_write+0x7f8>
c000f3e4:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f3e9:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f3ed:	01 c2                	add    edx,eax
c000f3ef:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f3f6:	66 90                	xchg   ax,ax
c000f3f8:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f3fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f401:	01 d0                	add    eax,edx
c000f403:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f408:	83 ec 0c             	sub    esp,0xc
c000f40b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f40f:	e8 b4 98 ff ff       	call   c0008cc8 <pbuf_clen>
c000f414:	83 c4 10             	add    esp,0x10
c000f417:	0f b6 c0             	movzx  eax,al
c000f41a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f41e:	01 d0                	add    eax,edx
c000f420:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f425:	e9 b2 02 00 00       	jmp    c000f6dc <tcp_write+0x5f4>
c000f42a:	66 90                	xchg   ax,ax
c000f42c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f430:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f434:	0f b7 c0             	movzx  eax,ax
c000f437:	85 c0                	test   eax,eax
c000f439:	0f 84 9d 02 00 00    	je     c000f6dc <tcp_write+0x5f4>
c000f43f:	83 ec 08             	sub    esp,0x8
c000f442:	68 b4 0a 03 c0       	push   0xc0030ab4
c000f447:	68 a6 fd 02 c0       	push   0xc002fda6
c000f44c:	e8 c7 09 01 00       	call   c001fe18 <CPrintf>
c000f451:	83 c4 10             	add    esp,0x10
c000f454:	e9 83 02 00 00       	jmp    c000f6dc <tcp_write+0x5f4>
c000f459:	8d 76 00             	lea    esi,[esi+0x0]
c000f45c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f460:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c000f465:	89 d6                	mov    esi,edx
c000f467:	29 c6                	sub    esi,eax
c000f469:	89 f0                	mov    eax,esi
c000f46b:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c000f470:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f474:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f477:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f47c:	89 d3                	mov    ebx,edx
c000f47e:	29 c3                	sub    ebx,eax
c000f480:	89 d8                	mov    eax,ebx
c000f482:	66 89 44 24 20       	mov    WORD PTR [esp+0x20],ax
c000f487:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f48b:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c000f490:	0f b7 d8             	movzx  ebx,ax
c000f493:	0f b7 ca             	movzx  ecx,dx
c000f496:	39 cb                	cmp    ebx,ecx
c000f498:	76 02                	jbe    c000f49c <tcp_write+0x3b4>
c000f49a:	89 d0                	mov    eax,edx
c000f49c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000f4a1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f4a6:	83 e0 01             	and    eax,0x1
c000f4a9:	0f 84 b1 00 00 00    	je     c000f560 <tcp_write+0x478>
c000f4af:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f4b4:	0f 94 c0             	sete   al
c000f4b7:	0f b6 f0             	movzx  esi,al
c000f4ba:	0f b6 5c 24 08       	movzx  ebx,BYTE PTR [esp+0x8]
c000f4bf:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f4c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f4c6:	0f b7 c8             	movzx  ecx,ax
c000f4c9:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f4ce:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000f4d3:	01 d0                	add    eax,edx
c000f4d5:	0f b7 c0             	movzx  eax,ax
c000f4d8:	83 ec 04             	sub    esp,0x4
c000f4db:	56                   	push   esi
c000f4dc:	53                   	push   ebx
c000f4dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f4e1:	8d 54 24 26          	lea    edx,[esp+0x26]
c000f4e5:	52                   	push   edx
c000f4e6:	51                   	push   ecx
c000f4e7:	50                   	push   eax
c000f4e8:	6a 00                	push   0x0
c000f4ea:	e8 89 f9 ff ff       	call   c000ee78 <tcp_pbuf_prealloc>
c000f4ef:	83 c4 20             	add    esp,0x20
c000f4f2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f4f6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f4fb:	0f 84 e3 03 00 00    	je     c000f8e4 <tcp_write+0x7fc>
c000f501:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f505:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f509:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000f50e:	0f b7 c0             	movzx  eax,ax
c000f511:	39 c2                	cmp    edx,eax
c000f513:	76 17                	jbe    c000f52c <tcp_write+0x444>
c000f515:	83 ec 08             	sub    esp,0x8
c000f518:	68 e4 0a 03 c0       	push   0xc0030ae4
c000f51d:	68 a6 fd 02 c0       	push   0xc002fda6
c000f522:	e8 f1 08 01 00       	call   c001fe18 <CPrintf>
c000f527:	83 c4 10             	add    esp,0x10
c000f52a:	66 90                	xchg   ax,ax
c000f52c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f531:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f536:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000f53a:	01 d1                	add    ecx,edx
c000f53c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f540:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000f543:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000f548:	01 da                	add    edx,ebx
c000f54a:	83 ec 04             	sub    esp,0x4
c000f54d:	50                   	push   eax
c000f54e:	51                   	push   ecx
c000f54f:	52                   	push   edx
c000f550:	e8 25 0e ff ff       	call   c000037a <memcpy>
c000f555:	83 c4 10             	add    esp,0x10
c000f558:	e9 a7 00 00 00       	jmp    c000f604 <tcp_write+0x51c>
c000f55d:	8d 76 00             	lea    esi,[esi+0x0]
c000f560:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f565:	0f b7 c0             	movzx  eax,ax
c000f568:	85 c0                	test   eax,eax
c000f56a:	74 18                	je     c000f584 <tcp_write+0x49c>
c000f56c:	83 ec 08             	sub    esp,0x8
c000f56f:	68 76 0c 03 c0       	push   0xc0030c76
c000f574:	68 a6 fd 02 c0       	push   0xc002fda6
c000f579:	e8 9a 08 01 00       	call   c001fe18 <CPrintf>
c000f57e:	83 c4 10             	add    esp,0x10
c000f581:	8d 76 00             	lea    esi,[esi+0x0]
c000f584:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f589:	83 ec 04             	sub    esp,0x4
c000f58c:	6a 01                	push   0x1
c000f58e:	50                   	push   eax
c000f58f:	6a 00                	push   0x0
c000f591:	e8 36 91 ff ff       	call   c00086cc <pbuf_alloc>
c000f596:	83 c4 10             	add    esp,0x10
c000f599:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f59d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f5a2:	0f 84 40 03 00 00    	je     c000f8e8 <tcp_write+0x800>
c000f5a8:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f5ad:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f5b1:	01 c2                	add    edx,eax
c000f5b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f5b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f5ba:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f5bf:	83 ec 04             	sub    esp,0x4
c000f5c2:	6a 00                	push   0x0
c000f5c4:	50                   	push   eax
c000f5c5:	6a 00                	push   0x0
c000f5c7:	e8 00 91 ff ff       	call   c00086cc <pbuf_alloc>
c000f5cc:	83 c4 10             	add    esp,0x10
c000f5cf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f5d3:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f5d8:	75 16                	jne    c000f5f0 <tcp_write+0x508>
c000f5da:	83 ec 0c             	sub    esp,0xc
c000f5dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f5e1:	e8 0e 8f ff ff       	call   c00084f4 <pbuf_free>
c000f5e6:	83 c4 10             	add    esp,0x10
c000f5e9:	e9 02 03 00 00       	jmp    c000f8f0 <tcp_write+0x808>
c000f5ee:	66 90                	xchg   ax,ax
c000f5f0:	83 ec 08             	sub    esp,0x8
c000f5f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f5f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f5fb:	e8 2c 97 ff ff       	call   c0008d2c <pbuf_cat>
c000f600:	83 c4 10             	add    esp,0x10
c000f603:	90                   	nop
c000f604:	83 ec 0c             	sub    esp,0xc
c000f607:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f60b:	e8 b8 96 ff ff       	call   c0008cc8 <pbuf_clen>
c000f610:	83 c4 10             	add    esp,0x10
c000f613:	0f b6 c0             	movzx  eax,al
c000f616:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f61a:	01 d0                	add    eax,edx
c000f61c:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f621:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f626:	83 f8 02             	cmp    eax,0x2
c000f629:	77 0d                	ja     c000f638 <tcp_write+0x550>
c000f62b:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f630:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f635:	76 15                	jbe    c000f64c <tcp_write+0x564>
c000f637:	90                   	nop
c000f638:	83 ec 0c             	sub    esp,0xc
c000f63b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f63f:	e8 b0 8e ff ff       	call   c00084f4 <pbuf_free>
c000f644:	83 c4 10             	add    esp,0x10
c000f647:	e9 a4 02 00 00       	jmp    c000f8f0 <tcp_write+0x808>
c000f64c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c000f651:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f655:	8b 4a 6c             	mov    ecx,DWORD PTR [edx+0x6c]
c000f658:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f65d:	01 ca                	add    edx,ecx
c000f65f:	83 ec 0c             	sub    esp,0xc
c000f662:	50                   	push   eax
c000f663:	52                   	push   edx
c000f664:	6a 00                	push   0x0
c000f666:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f66a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000f66e:	e8 61 f6 ff ff       	call   c000ecd4 <tcp_create_segment>
c000f673:	83 c4 20             	add    esp,0x20
c000f676:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f67a:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f67f:	0f 84 67 02 00 00    	je     c000f8ec <tcp_write+0x804>
c000f685:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f68a:	75 0c                	jne    c000f698 <tcp_write+0x5b0>
c000f68c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f690:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f694:	eb 2a                	jmp    c000f6c0 <tcp_write+0x5d8>
c000f696:	66 90                	xchg   ax,ax
c000f698:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f69d:	75 15                	jne    c000f6b4 <tcp_write+0x5cc>
c000f69f:	83 ec 08             	sub    esp,0x8
c000f6a2:	68 84 0c 03 c0       	push   0xc0030c84
c000f6a7:	68 a6 fd 02 c0       	push   0xc002fda6
c000f6ac:	e8 67 07 01 00       	call   c001fe18 <CPrintf>
c000f6b1:	83 c4 10             	add    esp,0x10
c000f6b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f6b8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f6bc:	89 10                	mov    DWORD PTR [eax],edx
c000f6be:	66 90                	xchg   ax,ax
c000f6c0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f6c4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f6c8:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f6cd:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000f6d2:	01 d0                	add    eax,edx
c000f6d4:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f6d9:	8d 76 00             	lea    esi,[esi+0x0]
c000f6dc:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f6e1:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f6e6:	39 c2                	cmp    edx,eax
c000f6e8:	0f 82 6e fd ff ff    	jb     c000f45c <tcp_write+0x374>
c000f6ee:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f6f3:	85 c0                	test   eax,eax
c000f6f5:	0f 84 9d 00 00 00    	je     c000f798 <tcp_write+0x6b0>
c000f6fb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f6ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f702:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f706:	eb 70                	jmp    c000f778 <tcp_write+0x690>
c000f708:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f70c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f70f:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f714:	01 d0                	add    eax,edx
c000f716:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f71a:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f71e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f722:	8b 00                	mov    eax,DWORD PTR [eax]
c000f724:	85 c0                	test   eax,eax
c000f726:	75 44                	jne    c000f76c <tcp_write+0x684>
c000f728:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f72d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f731:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000f734:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f738:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f73c:	0f b7 c0             	movzx  eax,ax
c000f73f:	01 c8                	add    eax,ecx
c000f741:	83 ec 04             	sub    esp,0x4
c000f744:	52                   	push   edx
c000f745:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f749:	50                   	push   eax
c000f74a:	e8 2b 0c ff ff       	call   c000037a <memcpy>
c000f74f:	83 c4 10             	add    esp,0x10
c000f752:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f756:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f75a:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f75f:	01 d0                	add    eax,edx
c000f761:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f765:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000f769:	8d 76 00             	lea    esi,[esi+0x0]
c000f76c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f770:	8b 00                	mov    eax,DWORD PTR [eax]
c000f772:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f776:	66 90                	xchg   ax,ax
c000f778:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000f77d:	75 89                	jne    c000f708 <tcp_write+0x620>
c000f77f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f783:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f786:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f78b:	01 d0                	add    eax,edx
c000f78d:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f791:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f795:	8d 76 00             	lea    esi,[esi+0x0]
c000f798:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f79d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f7a1:	66 89 42 76          	mov    WORD PTR [edx+0x76],ax
c000f7a5:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f7aa:	74 4c                	je     c000f7f8 <tcp_write+0x710>
c000f7ac:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f7b1:	75 15                	jne    c000f7c8 <tcp_write+0x6e0>
c000f7b3:	83 ec 08             	sub    esp,0x8
c000f7b6:	68 24 0b 03 c0       	push   0xc0030b24
c000f7bb:	68 a6 fd 02 c0       	push   0xc002fda6
c000f7c0:	e8 53 06 01 00       	call   c001fe18 <CPrintf>
c000f7c5:	83 c4 10             	add    esp,0x10
c000f7c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f7cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f7cf:	83 ec 08             	sub    esp,0x8
c000f7d2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000f7d6:	50                   	push   eax
c000f7d7:	e8 50 95 ff ff       	call   c0008d2c <pbuf_cat>
c000f7dc:	83 c4 10             	add    esp,0x10
c000f7df:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f7e3:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000f7e6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f7ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f7ed:	01 d0                	add    eax,edx
c000f7ef:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f7f3:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f7f7:	90                   	nop
c000f7f8:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f7fd:	75 0d                	jne    c000f80c <tcp_write+0x724>
c000f7ff:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f803:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f807:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f80a:	eb 0c                	jmp    c000f818 <tcp_write+0x730>
c000f80c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f810:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f814:	89 10                	mov    DWORD PTR [eax],edx
c000f816:	66 90                	xchg   ax,ax
c000f818:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f81c:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f81f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f824:	01 c2                	add    edx,eax
c000f826:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f82a:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000f82d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f831:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000f835:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f839:	89 d6                	mov    esi,edx
c000f83b:	29 c6                	sub    esi,eax
c000f83d:	89 f0                	mov    eax,esi
c000f83f:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f843:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000f847:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f84b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f84f:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000f853:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f857:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f85a:	0f b7 c0             	movzx  eax,ax
c000f85d:	85 c0                	test   eax,eax
c000f85f:	74 2b                	je     c000f88c <tcp_write+0x7a4>
c000f861:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f865:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f868:	85 c0                	test   eax,eax
c000f86a:	75 20                	jne    c000f88c <tcp_write+0x7a4>
c000f86c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f870:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f873:	85 c0                	test   eax,eax
c000f875:	75 15                	jne    c000f88c <tcp_write+0x7a4>
c000f877:	83 ec 08             	sub    esp,0x8
c000f87a:	68 95 0c 03 c0       	push   0xc0030c95
c000f87f:	68 a6 fd 02 c0       	push   0xc002fda6
c000f884:	e8 8f 05 01 00       	call   c001fe18 <CPrintf>
c000f889:	83 c4 10             	add    esp,0x10
c000f88c:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f891:	74 41                	je     c000f8d4 <tcp_write+0x7ec>
c000f893:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f897:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f89a:	85 c0                	test   eax,eax
c000f89c:	74 36                	je     c000f8d4 <tcp_write+0x7ec>
c000f89e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f8a3:	83 e0 02             	and    eax,0x2
c000f8a6:	75 2c                	jne    c000f8d4 <tcp_write+0x7ec>
c000f8a8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f8ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f8af:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000f8b3:	83 ec 0c             	sub    esp,0xc
c000f8b6:	6a 08                	push   0x8
c000f8b8:	e8 2b 13 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000f8bd:	83 c4 10             	add    esp,0x10
c000f8c0:	89 c1                	mov    ecx,eax
c000f8c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f8c6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f8c9:	89 d8                	mov    eax,ebx
c000f8cb:	09 c8                	or     eax,ecx
c000f8cd:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000f8d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f8d4:	b0 00                	mov    al,0x0
c000f8d6:	e9 a5 00 00 00       	jmp    c000f980 <tcp_write+0x898>
c000f8db:	90                   	nop
c000f8dc:	90                   	nop
c000f8dd:	eb 11                	jmp    c000f8f0 <tcp_write+0x808>
c000f8df:	90                   	nop
c000f8e0:	90                   	nop
c000f8e1:	eb 0d                	jmp    c000f8f0 <tcp_write+0x808>
c000f8e3:	90                   	nop
c000f8e4:	90                   	nop
c000f8e5:	eb 09                	jmp    c000f8f0 <tcp_write+0x808>
c000f8e7:	90                   	nop
c000f8e8:	90                   	nop
c000f8e9:	eb 05                	jmp    c000f8f0 <tcp_write+0x808>
c000f8eb:	90                   	nop
c000f8ec:	90                   	nop
c000f8ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f8f0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8f4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f8f7:	83 c8 80             	or     eax,0xffffff80
c000f8fa:	88 c2                	mov    dl,al
c000f8fc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f900:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f903:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f909:	83 c0 01             	add    eax,0x1
c000f90c:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f912:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f917:	74 0f                	je     c000f928 <tcp_write+0x840>
c000f919:	83 ec 0c             	sub    esp,0xc
c000f91c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f920:	e8 cf 8b ff ff       	call   c00084f4 <pbuf_free>
c000f925:	83 c4 10             	add    esp,0x10
c000f928:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f92d:	74 11                	je     c000f940 <tcp_write+0x858>
c000f92f:	83 ec 0c             	sub    esp,0xc
c000f932:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f936:	e8 75 a8 ff ff       	call   c000a1b0 <tcp_segs_free>
c000f93b:	83 c4 10             	add    esp,0x10
c000f93e:	66 90                	xchg   ax,ax
c000f940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f944:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f947:	0f b7 c0             	movzx  eax,ax
c000f94a:	85 c0                	test   eax,eax
c000f94c:	74 2e                	je     c000f97c <tcp_write+0x894>
c000f94e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f952:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f955:	85 c0                	test   eax,eax
c000f957:	75 23                	jne    c000f97c <tcp_write+0x894>
c000f959:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f95d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f960:	85 c0                	test   eax,eax
c000f962:	75 18                	jne    c000f97c <tcp_write+0x894>
c000f964:	83 ec 08             	sub    esp,0x8
c000f967:	68 95 0c 03 c0       	push   0xc0030c95
c000f96c:	68 a6 fd 02 c0       	push   0xc002fda6
c000f971:	e8 a2 04 01 00       	call   c001fe18 <CPrintf>
c000f976:	83 c4 10             	add    esp,0x10
c000f979:	8d 76 00             	lea    esi,[esi+0x0]
c000f97c:	b0 ff                	mov    al,0xff
c000f97e:	66 90                	xchg   ax,ax
c000f980:	83 c4 54             	add    esp,0x54
c000f983:	5b                   	pop    ebx
c000f984:	5e                   	pop    esi
c000f985:	c3                   	ret    
c000f986:	66 90                	xchg   ax,ax

c000f988 <tcp_enqueue_flags>:
c000f988:	83 ec 3c             	sub    esp,0x3c
c000f98b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f98f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000f993:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f998:	c6 44 24 27 00       	mov    BYTE PTR [esp+0x27],0x0
c000f99d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f9a2:	83 e0 03             	and    eax,0x3
c000f9a5:	75 15                	jne    c000f9bc <tcp_enqueue_flags+0x34>
c000f9a7:	83 ec 08             	sub    esp,0x8
c000f9aa:	68 5c 0b 03 c0       	push   0xc0030b5c
c000f9af:	68 a6 fd 02 c0       	push   0xc002fda6
c000f9b4:	e8 5f 04 01 00       	call   c001fe18 <CPrintf>
c000f9b9:	83 c4 10             	add    esp,0x10
c000f9bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9c0:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f9c3:	0f b7 c0             	movzx  eax,ax
c000f9c6:	83 f8 01             	cmp    eax,0x1
c000f9c9:	77 11                	ja     c000f9dc <tcp_enqueue_flags+0x54>
c000f9cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9cf:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f9d2:	0f b7 c0             	movzx  eax,ax
c000f9d5:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f9da:	76 2c                	jbe    c000fa08 <tcp_enqueue_flags+0x80>
c000f9dc:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f9e2:	83 c0 01             	add    eax,0x1
c000f9e5:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f9eb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9ef:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f9f2:	83 c8 80             	or     eax,0xffffff80
c000f9f5:	88 c2                	mov    dl,al
c000f9f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9fb:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f9fe:	b0 ff                	mov    al,0xff
c000fa00:	e9 6b 02 00 00       	jmp    c000fc70 <tcp_enqueue_flags+0x2e8>
c000fa05:	8d 76 00             	lea    esi,[esi+0x0]
c000fa08:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fa0d:	83 e0 02             	and    eax,0x2
c000fa10:	74 06                	je     c000fa18 <tcp_enqueue_flags+0x90>
c000fa12:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000fa17:	90                   	nop
c000fa18:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000fa1d:	c1 e0 02             	shl    eax,0x2
c000fa20:	83 e0 04             	and    eax,0x4
c000fa23:	88 c2                	mov    dl,al
c000fa25:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000fa2a:	83 e0 02             	and    eax,0x2
c000fa2d:	74 05                	je     c000fa34 <tcp_enqueue_flags+0xac>
c000fa2f:	b0 0c                	mov    al,0xc
c000fa31:	eb 05                	jmp    c000fa38 <tcp_enqueue_flags+0xb0>
c000fa33:	90                   	nop
c000fa34:	b0 00                	mov    al,0x0
c000fa36:	66 90                	xchg   ax,ax
c000fa38:	01 d0                	add    eax,edx
c000fa3a:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c000fa3e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa42:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000fa46:	0f b7 c0             	movzx  eax,ax
c000fa49:	85 c0                	test   eax,eax
c000fa4b:	75 17                	jne    c000fa64 <tcp_enqueue_flags+0xdc>
c000fa4d:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000fa53:	83 c0 01             	add    eax,0x1
c000fa56:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000fa5c:	b0 ff                	mov    al,0xff
c000fa5e:	e9 0d 02 00 00       	jmp    c000fc70 <tcp_enqueue_flags+0x2e8>
c000fa63:	90                   	nop
c000fa64:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000fa69:	83 ec 04             	sub    esp,0x4
c000fa6c:	6a 00                	push   0x0
c000fa6e:	50                   	push   eax
c000fa6f:	6a 00                	push   0x0
c000fa71:	e8 56 8c ff ff       	call   c00086cc <pbuf_alloc>
c000fa76:	83 c4 10             	add    esp,0x10
c000fa79:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fa7d:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000fa82:	75 2c                	jne    c000fab0 <tcp_enqueue_flags+0x128>
c000fa84:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa88:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fa8b:	83 c8 80             	or     eax,0xffffff80
c000fa8e:	88 c2                	mov    dl,al
c000fa90:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa94:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fa97:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000fa9d:	83 c0 01             	add    eax,0x1
c000faa0:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000faa6:	b0 ff                	mov    al,0xff
c000faa8:	e9 c3 01 00 00       	jmp    c000fc70 <tcp_enqueue_flags+0x2e8>
c000faad:	8d 76 00             	lea    esi,[esi+0x0]
c000fab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fab4:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000fab8:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000fabd:	0f b7 d2             	movzx  edx,dx
c000fac0:	0f b7 c0             	movzx  eax,ax
c000fac3:	39 c2                	cmp    edx,eax
c000fac5:	73 15                	jae    c000fadc <tcp_enqueue_flags+0x154>
c000fac7:	83 ec 08             	sub    esp,0x8
c000faca:	68 b4 0b 03 c0       	push   0xc0030bb4
c000facf:	68 a6 fd 02 c0       	push   0xc002fda6
c000fad4:	e8 3f 03 01 00       	call   c001fe18 <CPrintf>
c000fad9:	83 c4 10             	add    esp,0x10
c000fadc:	0f b6 4c 24 2f       	movzx  ecx,BYTE PTR [esp+0x2f]
c000fae1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fae5:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000fae8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000faed:	83 ec 0c             	sub    esp,0xc
c000faf0:	51                   	push   ecx
c000faf1:	52                   	push   edx
c000faf2:	50                   	push   eax
c000faf3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000faf7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000fafb:	e8 d4 f1 ff ff       	call   c000ecd4 <tcp_create_segment>
c000fb00:	83 c4 20             	add    esp,0x20
c000fb03:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fb07:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fb0c:	75 2a                	jne    c000fb38 <tcp_enqueue_flags+0x1b0>
c000fb0e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb12:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fb15:	83 c8 80             	or     eax,0xffffff80
c000fb18:	88 c2                	mov    dl,al
c000fb1a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb1e:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fb21:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000fb27:	83 c0 01             	add    eax,0x1
c000fb2a:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000fb30:	b0 ff                	mov    al,0xff
c000fb32:	e9 39 01 00 00       	jmp    c000fc70 <tcp_enqueue_flags+0x2e8>
c000fb37:	90                   	nop
c000fb38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fb3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fb3f:	0f b7 c0             	movzx  eax,ax
c000fb42:	85 c0                	test   eax,eax
c000fb44:	74 16                	je     c000fb5c <tcp_enqueue_flags+0x1d4>
c000fb46:	83 ec 08             	sub    esp,0x8
c000fb49:	68 f0 0b 03 c0       	push   0xc0030bf0
c000fb4e:	68 a6 fd 02 c0       	push   0xc002fda6
c000fb53:	e8 c0 02 01 00       	call   c001fe18 <CPrintf>
c000fb58:	83 c4 10             	add    esp,0x10
c000fb5b:	90                   	nop
c000fb5c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb60:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fb63:	85 c0                	test   eax,eax
c000fb65:	75 0d                	jne    c000fb74 <tcp_enqueue_flags+0x1ec>
c000fb67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb6b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fb6f:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000fb72:	eb 30                	jmp    c000fba4 <tcp_enqueue_flags+0x21c>
c000fb74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb78:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fb7b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb7f:	eb 0f                	jmp    c000fb90 <tcp_enqueue_flags+0x208>
c000fb81:	8d 76 00             	lea    esi,[esi+0x0]
c000fb84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fb88:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb8a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb8e:	66 90                	xchg   ax,ax
c000fb90:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fb94:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb96:	85 c0                	test   eax,eax
c000fb98:	75 ea                	jne    c000fb84 <tcp_enqueue_flags+0x1fc>
c000fb9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fb9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fba2:	89 10                	mov    DWORD PTR [eax],edx
c000fba4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fba8:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000fbae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fbb3:	83 e0 02             	and    eax,0x2
c000fbb6:	75 0c                	jne    c000fbc4 <tcp_enqueue_flags+0x23c>
c000fbb8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fbbd:	83 e0 01             	and    eax,0x1
c000fbc0:	74 26                	je     c000fbe8 <tcp_enqueue_flags+0x260>
c000fbc2:	66 90                	xchg   ax,ax
c000fbc4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbc8:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
c000fbcb:	8d 50 01             	lea    edx,[eax+0x1]
c000fbce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbd2:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000fbd5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbd9:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000fbdd:	83 e8 01             	sub    eax,0x1
c000fbe0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000fbe4:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000fbe8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fbed:	83 e0 01             	and    eax,0x1
c000fbf0:	74 16                	je     c000fc08 <tcp_enqueue_flags+0x280>
c000fbf2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbf6:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fbf9:	83 c8 20             	or     eax,0x20
c000fbfc:	88 c2                	mov    dl,al
c000fbfe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc02:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fc05:	8d 76 00             	lea    esi,[esi+0x0]
c000fc08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fc0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc0f:	83 ec 0c             	sub    esp,0xc
c000fc12:	50                   	push   eax
c000fc13:	e8 b0 90 ff ff       	call   c0008cc8 <pbuf_clen>
c000fc18:	83 c4 10             	add    esp,0x10
c000fc1b:	88 c1                	mov    cl,al
c000fc1d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc21:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000fc24:	0f b6 c1             	movzx  eax,cl
c000fc27:	01 d0                	add    eax,edx
c000fc29:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000fc2d:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000fc31:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc35:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000fc38:	0f b7 c0             	movzx  eax,ax
c000fc3b:	85 c0                	test   eax,eax
c000fc3d:	74 2d                	je     c000fc6c <tcp_enqueue_flags+0x2e4>
c000fc3f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc43:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000fc46:	85 c0                	test   eax,eax
c000fc48:	75 22                	jne    c000fc6c <tcp_enqueue_flags+0x2e4>
c000fc4a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc4e:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fc51:	85 c0                	test   eax,eax
c000fc53:	75 17                	jne    c000fc6c <tcp_enqueue_flags+0x2e4>
c000fc55:	83 ec 08             	sub    esp,0x8
c000fc58:	68 1c 0c 03 c0       	push   0xc0030c1c
c000fc5d:	68 a6 fd 02 c0       	push   0xc002fda6
c000fc62:	e8 b1 01 01 00       	call   c001fe18 <CPrintf>
c000fc67:	83 c4 10             	add    esp,0x10
c000fc6a:	66 90                	xchg   ax,ax
c000fc6c:	b0 00                	mov    al,0x0
c000fc6e:	66 90                	xchg   ax,ax
c000fc70:	83 c4 3c             	add    esp,0x3c
c000fc73:	c3                   	ret    

c000fc74 <tcp_send_fin>:
c000fc74:	53                   	push   ebx
c000fc75:	83 ec 18             	sub    esp,0x18
c000fc78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc7c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fc7f:	85 c0                	test   eax,eax
c000fc81:	74 75                	je     c000fcf8 <tcp_send_fin+0x84>
c000fc83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc87:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fc8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc8e:	eb 0c                	jmp    c000fc9c <tcp_send_fin+0x28>
c000fc90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc94:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc9a:	66 90                	xchg   ax,ax
c000fc9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fca0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fca2:	85 c0                	test   eax,eax
c000fca4:	75 ea                	jne    c000fc90 <tcp_send_fin+0x1c>
c000fca6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcaa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fcad:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000fcb1:	0f b7 c0             	movzx  eax,ax
c000fcb4:	83 ec 0c             	sub    esp,0xc
c000fcb7:	50                   	push   eax
c000fcb8:	e8 2b 0f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fcbd:	83 c4 10             	add    esp,0x10
c000fcc0:	0f b7 c0             	movzx  eax,ax
c000fcc3:	83 e0 07             	and    eax,0x7
c000fcc6:	75 30                	jne    c000fcf8 <tcp_send_fin+0x84>
c000fcc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fccc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fccf:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000fcd3:	83 ec 0c             	sub    esp,0xc
c000fcd6:	6a 01                	push   0x1
c000fcd8:	e8 0b 0f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fcdd:	83 c4 10             	add    esp,0x10
c000fce0:	89 c1                	mov    ecx,eax
c000fce2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fce6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fce9:	89 d8                	mov    eax,ebx
c000fceb:	09 c8                	or     eax,ecx
c000fced:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000fcf1:	b0 00                	mov    al,0x0
c000fcf3:	eb 17                	jmp    c000fd0c <tcp_send_fin+0x98>
c000fcf5:	8d 76 00             	lea    esi,[esi+0x0]
c000fcf8:	83 ec 08             	sub    esp,0x8
c000fcfb:	6a 01                	push   0x1
c000fcfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fd01:	e8 82 fc ff ff       	call   c000f988 <tcp_enqueue_flags>
c000fd06:	83 c4 10             	add    esp,0x10
c000fd09:	8d 76 00             	lea    esi,[esi+0x0]
c000fd0c:	83 c4 18             	add    esp,0x18
c000fd0f:	5b                   	pop    ebx
c000fd10:	c3                   	ret    
c000fd11:	8d 76 00             	lea    esi,[esi+0x0]

c000fd14 <tcp_send_empty_ack>:
c000fd14:	53                   	push   ebx
c000fd15:	83 ec 18             	sub    esp,0x18
c000fd18:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fd1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd21:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000fd24:	83 ec 0c             	sub    esp,0xc
c000fd27:	50                   	push   eax
c000fd28:	e8 df 0e ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fd2d:	83 c4 10             	add    esp,0x10
c000fd30:	89 c2                	mov    edx,eax
c000fd32:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fd37:	52                   	push   edx
c000fd38:	6a 00                	push   0x0
c000fd3a:	50                   	push   eax
c000fd3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fd3f:	e8 34 ee ff ff       	call   c000eb78 <tcp_output_alloc_header>
c000fd44:	83 c4 10             	add    esp,0x10
c000fd47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fd4b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fd50:	75 0a                	jne    c000fd5c <tcp_send_empty_ack+0x48>
c000fd52:	b0 fe                	mov    al,0xfe
c000fd54:	e9 97 00 00 00       	jmp    c000fdf0 <tcp_send_empty_ack+0xdc>
c000fd59:	8d 76 00             	lea    esi,[esi+0x0]
c000fd5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fd67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd6b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fd6e:	83 e0 fc             	and    eax,0xfffffffc
c000fd71:	88 c2                	mov    dl,al
c000fd73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd77:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fd7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd7e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fd81:	0f b7 d0             	movzx  edx,ax
c000fd84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd88:	8d 48 04             	lea    ecx,[eax+0x4]
c000fd8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd8f:	83 ec 0c             	sub    esp,0xc
c000fd92:	52                   	push   edx
c000fd93:	6a 06                	push   0x6
c000fd95:	51                   	push   ecx
c000fd96:	50                   	push   eax
c000fd97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd9b:	e8 70 35 00 00       	call   c0013310 <inet_chksum_pseudo>
c000fda0:	83 c4 20             	add    esp,0x20
c000fda3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000fda7:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c000fdab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdaf:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fdb2:	0f b6 c8             	movzx  ecx,al
c000fdb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdb9:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fdbc:	0f b6 d0             	movzx  edx,al
c000fdbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdc3:	8d 58 04             	lea    ebx,[eax+0x4]
c000fdc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdca:	83 ec 08             	sub    esp,0x8
c000fdcd:	6a 06                	push   0x6
c000fdcf:	51                   	push   ecx
c000fdd0:	52                   	push   edx
c000fdd1:	53                   	push   ebx
c000fdd2:	50                   	push   eax
c000fdd3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fdd7:	e8 68 41 00 00       	call   c0013f44 <ip_output>
c000fddc:	83 c4 20             	add    esp,0x20
c000fddf:	83 ec 0c             	sub    esp,0xc
c000fde2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fde6:	e8 09 87 ff ff       	call   c00084f4 <pbuf_free>
c000fdeb:	83 c4 10             	add    esp,0x10
c000fdee:	b0 00                	mov    al,0x0
c000fdf0:	83 c4 18             	add    esp,0x18
c000fdf3:	5b                   	pop    ebx
c000fdf4:	c3                   	ret    
c000fdf5:	8d 76 00             	lea    esi,[esi+0x0]

c000fdf8 <tcp_output_segment>:
c000fdf8:	56                   	push   esi
c000fdf9:	53                   	push   ebx
c000fdfa:	83 ec 14             	sub    esp,0x14
c000fdfd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe01:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000fe04:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fe08:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fe0b:	83 ec 0c             	sub    esp,0xc
c000fe0e:	50                   	push   eax
c000fe0f:	e8 f8 0d ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fe14:	83 c4 10             	add    esp,0x10
c000fe17:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000fe1a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe1e:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fe22:	0f b7 c0             	movzx  eax,ax
c000fe25:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fe29:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fe2c:	83 ec 0c             	sub    esp,0xc
c000fe2f:	50                   	push   eax
c000fe30:	e8 b3 0d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fe35:	83 c4 10             	add    esp,0x10
c000fe38:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000fe3c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe40:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000fe43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe47:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fe4b:	0f b7 c0             	movzx  eax,ax
c000fe4e:	01 c2                	add    edx,eax
c000fe50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe54:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000fe57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe5b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fe5e:	83 c0 14             	add    eax,0x14
c000fe61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe69:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fe6c:	0f b6 c0             	movzx  eax,al
c000fe6f:	83 e0 01             	and    eax,0x1
c000fe72:	74 10                	je     c000fe84 <tcp_output_segment+0x8c>
c000fe74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe78:	c7 00 02 04 02 18    	mov    DWORD PTR [eax],0x18020402
c000fe7e:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c000fe83:	90                   	nop
c000fe84:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe88:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000fe8c:	98                   	cwde   
c000fe8d:	83 f8 ff             	cmp    eax,0xffffffff
c000fe90:	75 0a                	jne    c000fe9c <tcp_output_segment+0xa4>
c000fe92:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe96:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000fe9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fea0:	85 c0                	test   eax,eax
c000fea2:	74 0c                	je     c000feb0 <tcp_output_segment+0xb8>
c000fea4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fea8:	8b 00                	mov    eax,DWORD PTR [eax]
c000feaa:	85 c0                	test   eax,eax
c000feac:	75 32                	jne    c000fee0 <tcp_output_segment+0xe8>
c000feae:	66 90                	xchg   ax,ax
c000feb0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000feb4:	83 c0 04             	add    eax,0x4
c000feb7:	83 ec 0c             	sub    esp,0xc
c000feba:	50                   	push   eax
c000febb:	e8 dc 38 00 00       	call   c001379c <ip_route>
c000fec0:	83 c4 10             	add    esp,0x10
c000fec3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fec7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fecc:	0f 84 46 01 00 00    	je     c0010018 <tcp_output_segment+0x220>
c000fed2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fed6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000fed9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fedd:	89 10                	mov    DWORD PTR [eax],edx
c000fedf:	90                   	nop
c000fee0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fee4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fee7:	85 c0                	test   eax,eax
c000fee9:	75 2d                	jne    c000ff18 <tcp_output_segment+0x120>
c000feeb:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000fef1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fef5:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000fef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fefc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000feff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff02:	83 ec 0c             	sub    esp,0xc
c000ff05:	50                   	push   eax
c000ff06:	e8 01 0d ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000ff0b:	83 c4 10             	add    esp,0x10
c000ff0e:	89 c2                	mov    edx,eax
c000ff10:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff14:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c000ff17:	90                   	nop
c000ff18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff1c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ff1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff29:	29 c2                	sub    edx,eax
c000ff2b:	89 d0                	mov    eax,edx
c000ff2d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000ff32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff39:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000ff3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff41:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ff44:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000ff49:	89 d6                	mov    esi,edx
c000ff4b:	29 c6                	sub    esi,eax
c000ff4d:	89 f0                	mov    eax,esi
c000ff4f:	66 89 41 0a          	mov    WORD PTR [ecx+0xa],ax
c000ff53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff5a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ff5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff61:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ff64:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000ff69:	89 d6                	mov    esi,edx
c000ff6b:	29 c6                	sub    esi,eax
c000ff6d:	89 f0                	mov    eax,esi
c000ff6f:	66 89 41 08          	mov    WORD PTR [ecx+0x8],ax
c000ff73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff7a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ff7e:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ff81:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ff84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff88:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ff8b:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000ff91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff98:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ff9b:	0f b7 c8             	movzx  ecx,ax
c000ff9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffa2:	8d 70 04             	lea    esi,[eax+0x4]
c000ffa5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ffa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffb0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ffb4:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c000ffb7:	83 ec 0c             	sub    esp,0xc
c000ffba:	51                   	push   ecx
c000ffbb:	6a 06                	push   0x6
c000ffbd:	56                   	push   esi
c000ffbe:	52                   	push   edx
c000ffbf:	50                   	push   eax
c000ffc0:	e8 4b 33 00 00       	call   c0013310 <inet_chksum_pseudo>
c000ffc5:	83 c4 20             	add    esp,0x20
c000ffc8:	66 89 43 10          	mov    WORD PTR [ebx+0x10],ax
c000ffcc:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c000ffd2:	83 c0 01             	add    eax,0x1
c000ffd5:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c000ffdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffdf:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000ffe2:	0f b6 d8             	movzx  ebx,al
c000ffe5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffe9:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000ffec:	0f b6 c8             	movzx  ecx,al
c000ffef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fff3:	8d 70 04             	lea    esi,[eax+0x4]
c000fff6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fffa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fffe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010001:	83 ec 08             	sub    esp,0x8
c0010004:	6a 06                	push   0x6
c0010006:	53                   	push   ebx
c0010007:	51                   	push   ecx
c0010008:	56                   	push   esi
c0010009:	52                   	push   edx
c001000a:	50                   	push   eax
c001000b:	e8 34 3f 00 00       	call   c0013f44 <ip_output>
c0010010:	83 c4 20             	add    esp,0x20
c0010013:	eb 07                	jmp    c001001c <tcp_output_segment+0x224>
c0010015:	8d 76 00             	lea    esi,[esi+0x0]
c0010018:	90                   	nop
c0010019:	8d 76 00             	lea    esi,[esi+0x0]
c001001c:	83 c4 14             	add    esp,0x14
c001001f:	5b                   	pop    ebx
c0010020:	5e                   	pop    esi
c0010021:	c3                   	ret    
c0010022:	66 90                	xchg   ax,ax

c0010024 <tcp_output>:
c0010024:	56                   	push   esi
c0010025:	53                   	push   ebx
c0010026:	83 ec 24             	sub    esp,0x24
c0010029:	a1 88 68 03 c0       	mov    eax,ds:0xc0036888
c001002e:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0010032:	75 08                	jne    c001003c <tcp_output+0x18>
c0010034:	b0 00                	mov    al,0x0
c0010036:	e9 6d 04 00 00       	jmp    c00104a8 <tcp_output+0x484>
c001003b:	90                   	nop
c001003c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010040:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c0010044:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010048:	8b 52 60             	mov    edx,DWORD PTR [edx+0x60]
c001004b:	0f b7 d8             	movzx  ebx,ax
c001004e:	0f b7 ca             	movzx  ecx,dx
c0010051:	39 cb                	cmp    ebx,ecx
c0010053:	76 03                	jbe    c0010058 <tcp_output+0x34>
c0010055:	89 d0                	mov    eax,edx
c0010057:	90                   	nop
c0010058:	0f b7 c0             	movzx  eax,ax
c001005b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001005f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010063:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010066:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001006a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001006e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010071:	0f b6 c0             	movzx  eax,al
c0010074:	83 e0 02             	and    eax,0x2
c0010077:	74 4f                	je     c00100c8 <tcp_output+0xa4>
c0010079:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001007e:	74 34                	je     c00100b4 <tcp_output+0x90>
c0010080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010084:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010087:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001008a:	83 ec 0c             	sub    esp,0xc
c001008d:	50                   	push   eax
c001008e:	e8 79 0b ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010093:	83 c4 10             	add    esp,0x10
c0010096:	89 c2                	mov    edx,eax
c0010098:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001009c:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c001009f:	29 c2                	sub    edx,eax
c00100a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100a5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00100a8:	0f b7 c0             	movzx  eax,ax
c00100ab:	01 d0                	add    eax,edx
c00100ad:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00100b1:	73 15                	jae    c00100c8 <tcp_output+0xa4>
c00100b3:	90                   	nop
c00100b4:	83 ec 0c             	sub    esp,0xc
c00100b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00100bb:	e8 54 fc ff ff       	call   c000fd14 <tcp_send_empty_ack>
c00100c0:	83 c4 10             	add    esp,0x10
c00100c3:	e9 e0 03 00 00       	jmp    c00104a8 <tcp_output+0x484>
c00100c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100cc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00100cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100d3:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00100d8:	0f 84 ea 02 00 00    	je     c00103c8 <tcp_output+0x3a4>
c00100de:	eb 0c                	jmp    c00100ec <tcp_output+0xc8>
c00100e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00100e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00100e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100ea:	66 90                	xchg   ax,ax
c00100ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00100f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00100f2:	85 c0                	test   eax,eax
c00100f4:	75 ea                	jne    c00100e0 <tcp_output+0xbc>
c00100f6:	e9 cd 02 00 00       	jmp    c00103c8 <tcp_output+0x3a4>
c00100fb:	90                   	nop
c00100fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010100:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010103:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010107:	0f b7 c0             	movzx  eax,ax
c001010a:	83 ec 0c             	sub    esp,0xc
c001010d:	50                   	push   eax
c001010e:	e8 d5 0a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010113:	83 c4 10             	add    esp,0x10
c0010116:	0f b7 c0             	movzx  eax,ax
c0010119:	83 e0 04             	and    eax,0x4
c001011c:	74 16                	je     c0010134 <tcp_output+0x110>
c001011e:	83 ec 08             	sub    esp,0x8
c0010121:	68 b3 0c 03 c0       	push   0xc0030cb3
c0010126:	68 a6 fd 02 c0       	push   0xc002fda6
c001012b:	e8 e8 fc 00 00       	call   c001fe18 <CPrintf>
c0010130:	83 c4 10             	add    esp,0x10
c0010133:	90                   	nop
c0010134:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010138:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001013b:	85 c0                	test   eax,eax
c001013d:	74 45                	je     c0010184 <tcp_output+0x160>
c001013f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010143:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010146:	0f b6 c0             	movzx  eax,al
c0010149:	83 e0 44             	and    eax,0x44
c001014c:	75 36                	jne    c0010184 <tcp_output+0x160>
c001014e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010152:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010155:	85 c0                	test   eax,eax
c0010157:	74 33                	je     c001018c <tcp_output+0x168>
c0010159:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001015d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010160:	8b 00                	mov    eax,DWORD PTR [eax]
c0010162:	85 c0                	test   eax,eax
c0010164:	75 1e                	jne    c0010184 <tcp_output+0x160>
c0010166:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001016a:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c001016d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0010170:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010174:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010177:	0f b7 d2             	movzx  edx,dx
c001017a:	0f b7 c0             	movzx  eax,ax
c001017d:	39 c2                	cmp    edx,eax
c001017f:	72 0b                	jb     c001018c <tcp_output+0x168>
c0010181:	8d 76 00             	lea    esi,[esi+0x0]
c0010184:	b8 01 00 00 00       	mov    eax,0x1
c0010189:	eb 09                	jmp    c0010194 <tcp_output+0x170>
c001018b:	90                   	nop
c001018c:	b8 00 00 00 00       	mov    eax,0x0
c0010191:	8d 76 00             	lea    esi,[esi+0x0]
c0010194:	85 c0                	test   eax,eax
c0010196:	75 18                	jne    c00101b0 <tcp_output+0x18c>
c0010198:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001019c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001019f:	0f b6 c0             	movzx  eax,al
c00101a2:	25 a0 00 00 00       	and    eax,0xa0
c00101a7:	0f 84 5b 02 00 00    	je     c0010408 <tcp_output+0x3e4>
c00101ad:	8d 76 00             	lea    esi,[esi+0x0]
c00101b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101b4:	8b 10                	mov    edx,DWORD PTR [eax]
c00101b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101ba:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c00101bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101c1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00101c4:	83 f8 02             	cmp    eax,0x2
c00101c7:	74 3f                	je     c0010208 <tcp_output+0x1e4>
c00101c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101cd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00101d0:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c00101d4:	83 ec 0c             	sub    esp,0xc
c00101d7:	6a 10                	push   0x10
c00101d9:	e8 0a 0a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00101de:	83 c4 10             	add    esp,0x10
c00101e1:	89 c1                	mov    ecx,eax
c00101e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101e7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00101ea:	89 d8                	mov    eax,ebx
c00101ec:	09 c8                	or     eax,ecx
c00101ee:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c00101f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101f6:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00101f9:	83 e0 fc             	and    eax,0xfffffffc
c00101fc:	88 c2                	mov    dl,al
c00101fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010202:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0010205:	8d 76 00             	lea    esi,[esi+0x0]
c0010208:	83 ec 08             	sub    esp,0x8
c001020b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001020f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010213:	e8 e0 fb ff ff       	call   c000fdf8 <tcp_output_segment>
c0010218:	83 c4 10             	add    esp,0x10
c001021b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001021f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010222:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010225:	83 ec 0c             	sub    esp,0xc
c0010228:	50                   	push   eax
c0010229:	e8 de 09 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001022e:	83 c4 10             	add    esp,0x10
c0010231:	89 c3                	mov    ebx,eax
c0010233:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010237:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001023a:	0f b7 f0             	movzx  esi,ax
c001023d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010241:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010244:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010248:	0f b7 c0             	movzx  eax,ax
c001024b:	83 ec 0c             	sub    esp,0xc
c001024e:	50                   	push   eax
c001024f:	e8 94 09 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010254:	83 c4 10             	add    esp,0x10
c0010257:	0f b7 c0             	movzx  eax,ax
c001025a:	83 e0 03             	and    eax,0x3
c001025d:	0f 95 c0             	setne  al
c0010260:	0f b6 c0             	movzx  eax,al
c0010263:	01 f0                	add    eax,esi
c0010265:	01 d8                	add    eax,ebx
c0010267:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001026b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001026f:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c0010272:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0010276:	79 0c                	jns    c0010284 <tcp_output+0x260>
c0010278:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001027c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010280:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c0010283:	90                   	nop
c0010284:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010288:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001028b:	0f b7 d8             	movzx  ebx,ax
c001028e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010292:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010295:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010299:	0f b7 c0             	movzx  eax,ax
c001029c:	83 ec 0c             	sub    esp,0xc
c001029f:	50                   	push   eax
c00102a0:	e8 43 09 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00102a5:	83 c4 10             	add    esp,0x10
c00102a8:	0f b7 c0             	movzx  eax,ax
c00102ab:	83 e0 03             	and    eax,0x3
c00102ae:	0f 95 c0             	setne  al
c00102b1:	0f b6 c0             	movzx  eax,al
c00102b4:	01 d8                	add    eax,ebx
c00102b6:	85 c0                	test   eax,eax
c00102b8:	0f 8e ee 00 00 00    	jle    c00103ac <tcp_output+0x388>
c00102be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00102c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102cc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00102cf:	85 c0                	test   eax,eax
c00102d1:	75 19                	jne    c00102ec <tcp_output+0x2c8>
c00102d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00102db:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c00102de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102e6:	e9 d1 00 00 00       	jmp    c00103bc <tcp_output+0x398>
c00102eb:	90                   	nop
c00102ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00102f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00102f6:	83 ec 0c             	sub    esp,0xc
c00102f9:	50                   	push   eax
c00102fa:	e8 0d 09 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00102ff:	83 c4 10             	add    esp,0x10
c0010302:	89 c3                	mov    ebx,eax
c0010304:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010308:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001030b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001030e:	83 ec 0c             	sub    esp,0xc
c0010311:	50                   	push   eax
c0010312:	e8 f5 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010317:	83 c4 10             	add    esp,0x10
c001031a:	29 c3                	sub    ebx,eax
c001031c:	89 d8                	mov    eax,ebx
c001031e:	79 74                	jns    c0010394 <tcp_output+0x370>
c0010320:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010324:	83 c0 7c             	add    eax,0x7c
c0010327:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001032b:	eb 0f                	jmp    c001033c <tcp_output+0x318>
c001032d:	8d 76 00             	lea    esi,[esi+0x0]
c0010330:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010334:	8b 00                	mov    eax,DWORD PTR [eax]
c0010336:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001033a:	66 90                	xchg   ax,ax
c001033c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010340:	8b 00                	mov    eax,DWORD PTR [eax]
c0010342:	85 c0                	test   eax,eax
c0010344:	74 36                	je     c001037c <tcp_output+0x358>
c0010346:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001034a:	8b 00                	mov    eax,DWORD PTR [eax]
c001034c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001034f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010352:	83 ec 0c             	sub    esp,0xc
c0010355:	50                   	push   eax
c0010356:	e8 b1 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001035b:	83 c4 10             	add    esp,0x10
c001035e:	89 c3                	mov    ebx,eax
c0010360:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010364:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010367:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001036a:	83 ec 0c             	sub    esp,0xc
c001036d:	50                   	push   eax
c001036e:	e8 99 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010373:	83 c4 10             	add    esp,0x10
c0010376:	29 c3                	sub    ebx,eax
c0010378:	89 d8                	mov    eax,ebx
c001037a:	78 b4                	js     c0010330 <tcp_output+0x30c>
c001037c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010380:	8b 10                	mov    edx,DWORD PTR [eax]
c0010382:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010386:	89 10                	mov    DWORD PTR [eax],edx
c0010388:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001038c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010390:	89 10                	mov    DWORD PTR [eax],edx
c0010392:	eb 28                	jmp    c00103bc <tcp_output+0x398>
c0010394:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010398:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001039c:	89 10                	mov    DWORD PTR [eax],edx
c001039e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00103a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00103a8:	eb 12                	jmp    c00103bc <tcp_output+0x398>
c00103aa:	66 90                	xchg   ax,ax
c00103ac:	83 ec 0c             	sub    esp,0xc
c00103af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00103b3:	e8 b4 9d ff ff       	call   c000a16c <tcp_seg_free>
c00103b8:	83 c4 10             	add    esp,0x10
c00103bb:	90                   	nop
c00103bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00103c0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00103c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00103c7:	90                   	nop
c00103c8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00103cd:	74 3d                	je     c001040c <tcp_output+0x3e8>
c00103cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00103d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00103d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00103d9:	83 ec 0c             	sub    esp,0xc
c00103dc:	50                   	push   eax
c00103dd:	e8 2a 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00103e2:	83 c4 10             	add    esp,0x10
c00103e5:	89 c2                	mov    edx,eax
c00103e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00103eb:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c00103ee:	29 c2                	sub    edx,eax
c00103f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00103f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00103f7:	0f b7 c0             	movzx  eax,ax
c00103fa:	01 d0                	add    eax,edx
c00103fc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0010400:	0f 83 f6 fc ff ff    	jae    c00100fc <tcp_output+0xd8>
c0010406:	eb 04                	jmp    c001040c <tcp_output+0x3e8>
c0010408:	90                   	nop
c0010409:	8d 76 00             	lea    esi,[esi+0x0]
c001040c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010410:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010413:	85 c0                	test   eax,eax
c0010415:	75 0d                	jne    c0010424 <tcp_output+0x400>
c0010417:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001041b:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c0010421:	8d 76 00             	lea    esi,[esi+0x0]
c0010424:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010429:	74 65                	je     c0010490 <tcp_output+0x46c>
c001042b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001042f:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c0010435:	0f b6 c0             	movzx  eax,al
c0010438:	85 c0                	test   eax,eax
c001043a:	75 54                	jne    c0010490 <tcp_output+0x46c>
c001043c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010440:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010443:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010446:	83 ec 0c             	sub    esp,0xc
c0010449:	50                   	push   eax
c001044a:	e8 bd 07 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001044f:	83 c4 10             	add    esp,0x10
c0010452:	89 c2                	mov    edx,eax
c0010454:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010458:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c001045b:	29 c2                	sub    edx,eax
c001045d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010461:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010464:	0f b7 c0             	movzx  eax,ax
c0010467:	01 c2                	add    edx,eax
c0010469:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001046d:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010470:	0f b7 c0             	movzx  eax,ax
c0010473:	39 c2                	cmp    edx,eax
c0010475:	76 19                	jbe    c0010490 <tcp_output+0x46c>
c0010477:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001047b:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c0010485:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010489:	c6 80 a4 00 00 00 01 	mov    BYTE PTR [eax+0xa4],0x1
c0010490:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010494:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010497:	83 e0 7f             	and    eax,0x7f
c001049a:	88 c2                	mov    dl,al
c001049c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104a0:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c00104a3:	b0 00                	mov    al,0x0
c00104a5:	8d 76 00             	lea    esi,[esi+0x0]
c00104a8:	83 c4 24             	add    esp,0x24
c00104ab:	5b                   	pop    ebx
c00104ac:	5e                   	pop    esi
c00104ad:	c3                   	ret    
c00104ae:	66 90                	xchg   ax,ax

c00104b0 <tcp_rst>:
c00104b0:	83 ec 2c             	sub    esp,0x2c
c00104b3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00104b7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00104bb:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00104c0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00104c5:	83 ec 04             	sub    esp,0x4
c00104c8:	6a 00                	push   0x0
c00104ca:	6a 14                	push   0x14
c00104cc:	6a 01                	push   0x1
c00104ce:	e8 f9 81 ff ff       	call   c00086cc <pbuf_alloc>
c00104d3:	83 c4 10             	add    esp,0x10
c00104d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00104da:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00104df:	0f 84 37 01 00 00    	je     c001061c <tcp_rst+0x16c>
c00104e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00104e9:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00104ed:	0f b7 c0             	movzx  eax,ax
c00104f0:	83 f8 13             	cmp    eax,0x13
c00104f3:	77 17                	ja     c001050c <tcp_rst+0x5c>
c00104f5:	83 ec 08             	sub    esp,0x8
c00104f8:	68 c0 09 03 c0       	push   0xc00309c0
c00104fd:	68 a6 fd 02 c0       	push   0xc002fda6
c0010502:	e8 11 f9 00 00       	call   c001fe18 <CPrintf>
c0010507:	83 c4 10             	add    esp,0x10
c001050a:	66 90                	xchg   ax,ax
c001050c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010510:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010513:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010517:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001051c:	83 ec 0c             	sub    esp,0xc
c001051f:	50                   	push   eax
c0010520:	e8 c3 06 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010525:	83 c4 10             	add    esp,0x10
c0010528:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001052c:	66 89 02             	mov    WORD PTR [edx],ax
c001052f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0010534:	83 ec 0c             	sub    esp,0xc
c0010537:	50                   	push   eax
c0010538:	e8 ab 06 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001053d:	83 c4 10             	add    esp,0x10
c0010540:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010544:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0010548:	83 ec 0c             	sub    esp,0xc
c001054b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001054f:	e8 b8 06 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010554:	83 c4 10             	add    esp,0x10
c0010557:	89 c2                	mov    edx,eax
c0010559:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001055d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010560:	83 ec 0c             	sub    esp,0xc
c0010563:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010567:	e8 a0 06 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001056c:	83 c4 10             	add    esp,0x10
c001056f:	89 c2                	mov    edx,eax
c0010571:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010575:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010578:	83 ec 0c             	sub    esp,0xc
c001057b:	68 14 50 00 00       	push   0x5014
c0010580:	e8 63 06 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010585:	83 c4 10             	add    esp,0x10
c0010588:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001058c:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c0010590:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010594:	66 c7 40 0e 08 60    	mov    WORD PTR [eax+0xe],0x6008
c001059a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001059e:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c00105a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00105a8:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c00105ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00105b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00105b5:	0f b7 c0             	movzx  eax,ax
c00105b8:	83 ec 0c             	sub    esp,0xc
c00105bb:	50                   	push   eax
c00105bc:	6a 06                	push   0x6
c00105be:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00105c2:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00105c6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00105ca:	e8 41 2d 00 00       	call   c0013310 <inet_chksum_pseudo>
c00105cf:	83 c4 20             	add    esp,0x20
c00105d2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00105d6:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c00105da:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c00105e0:	83 c0 01             	add    eax,0x1
c00105e3:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c00105e9:	83 ec 08             	sub    esp,0x8
c00105ec:	6a 06                	push   0x6
c00105ee:	6a 00                	push   0x0
c00105f0:	68 ff 00 00 00       	push   0xff
c00105f5:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00105f9:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00105fd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010601:	e8 3e 39 00 00       	call   c0013f44 <ip_output>
c0010606:	83 c4 20             	add    esp,0x20
c0010609:	83 ec 0c             	sub    esp,0xc
c001060c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010610:	e8 df 7e ff ff       	call   c00084f4 <pbuf_free>
c0010615:	83 c4 10             	add    esp,0x10
c0010618:	eb 06                	jmp    c0010620 <tcp_rst+0x170>
c001061a:	66 90                	xchg   ax,ax
c001061c:	90                   	nop
c001061d:	8d 76 00             	lea    esi,[esi+0x0]
c0010620:	83 c4 2c             	add    esp,0x2c
c0010623:	c3                   	ret    

c0010624 <tcp_rexmit_rto>:
c0010624:	83 ec 1c             	sub    esp,0x1c
c0010627:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001062b:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001062e:	85 c0                	test   eax,eax
c0010630:	74 7a                	je     c00106ac <tcp_rexmit_rto+0x88>
c0010632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010636:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010639:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001063d:	eb 0d                	jmp    c001064c <tcp_rexmit_rto+0x28>
c001063f:	90                   	nop
c0010640:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010644:	8b 00                	mov    eax,DWORD PTR [eax]
c0010646:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001064a:	66 90                	xchg   ax,ax
c001064c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010650:	8b 00                	mov    eax,DWORD PTR [eax]
c0010652:	85 c0                	test   eax,eax
c0010654:	75 ea                	jne    c0010640 <tcp_rexmit_rto+0x1c>
c0010656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001065a:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c001065d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010661:	89 10                	mov    DWORD PTR [eax],edx
c0010663:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010667:	8b 50 7c             	mov    edx,DWORD PTR [eax+0x7c]
c001066a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001066e:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c0010671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010675:	c7 40 7c 00 00 00 00 	mov    DWORD PTR [eax+0x7c],0x0
c001067c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010680:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c0010683:	83 c0 01             	add    eax,0x1
c0010686:	88 c2                	mov    dl,al
c0010688:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001068c:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c001068f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010693:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001069a:	83 ec 0c             	sub    esp,0xc
c001069d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00106a1:	e8 7e f9 ff ff       	call   c0010024 <tcp_output>
c00106a6:	83 c4 10             	add    esp,0x10
c00106a9:	eb 05                	jmp    c00106b0 <tcp_rexmit_rto+0x8c>
c00106ab:	90                   	nop
c00106ac:	90                   	nop
c00106ad:	8d 76 00             	lea    esi,[esi+0x0]
c00106b0:	83 c4 1c             	add    esp,0x1c
c00106b3:	c3                   	ret    

c00106b4 <tcp_rexmit>:
c00106b4:	53                   	push   ebx
c00106b5:	83 ec 18             	sub    esp,0x18
c00106b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106bc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00106bf:	85 c0                	test   eax,eax
c00106c1:	0f 84 a9 00 00 00    	je     c0010770 <tcp_rexmit+0xbc>
c00106c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106cb:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00106ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00106d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00106d6:	8b 10                	mov    edx,DWORD PTR [eax]
c00106d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106dc:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c00106df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106e3:	83 c0 78             	add    eax,0x78
c00106e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106ea:	eb 0c                	jmp    c00106f8 <tcp_rexmit+0x44>
c00106ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00106f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106f6:	66 90                	xchg   ax,ax
c00106f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00106fe:	85 c0                	test   eax,eax
c0010700:	74 36                	je     c0010738 <tcp_rexmit+0x84>
c0010702:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010706:	8b 00                	mov    eax,DWORD PTR [eax]
c0010708:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001070b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001070e:	83 ec 0c             	sub    esp,0xc
c0010711:	50                   	push   eax
c0010712:	e8 f5 04 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010717:	83 c4 10             	add    esp,0x10
c001071a:	89 c3                	mov    ebx,eax
c001071c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010720:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010723:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010726:	83 ec 0c             	sub    esp,0xc
c0010729:	50                   	push   eax
c001072a:	e8 dd 04 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001072f:	83 c4 10             	add    esp,0x10
c0010732:	29 c3                	sub    ebx,eax
c0010734:	89 d8                	mov    eax,ebx
c0010736:	78 b4                	js     c00106ec <tcp_rexmit+0x38>
c0010738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001073c:	8b 10                	mov    edx,DWORD PTR [eax]
c001073e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010742:	89 10                	mov    DWORD PTR [eax],edx
c0010744:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010748:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001074c:	89 10                	mov    DWORD PTR [eax],edx
c001074e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010752:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c0010755:	83 c0 01             	add    eax,0x1
c0010758:	88 c2                	mov    dl,al
c001075a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001075e:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c0010761:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010765:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001076c:	eb 06                	jmp    c0010774 <tcp_rexmit+0xc0>
c001076e:	66 90                	xchg   ax,ax
c0010770:	90                   	nop
c0010771:	8d 76 00             	lea    esi,[esi+0x0]
c0010774:	83 c4 18             	add    esp,0x18
c0010777:	5b                   	pop    ebx
c0010778:	c3                   	ret    
c0010779:	8d 76 00             	lea    esi,[esi+0x0]

c001077c <tcp_rexmit_fast>:
c001077c:	83 ec 0c             	sub    esp,0xc
c001077f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010783:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010786:	85 c0                	test   eax,eax
c0010788:	0f 84 ca 00 00 00    	je     c0010858 <tcp_rexmit_fast+0xdc>
c001078e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010792:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010795:	0f b6 c0             	movzx  eax,al
c0010798:	83 e0 04             	and    eax,0x4
c001079b:	0f 85 b7 00 00 00    	jne    c0010858 <tcp_rexmit_fast+0xdc>
c00107a1:	83 ec 0c             	sub    esp,0xc
c00107a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107a8:	e8 07 ff ff ff       	call   c00106b4 <tcp_rexmit>
c00107ad:	83 c4 10             	add    esp,0x10
c00107b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107b4:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c00107b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107bc:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c00107bf:	0f b7 d2             	movzx  edx,dx
c00107c2:	0f b7 c0             	movzx  eax,ax
c00107c5:	39 c2                	cmp    edx,eax
c00107c7:	76 17                	jbe    c00107e0 <tcp_rexmit_fast+0x64>
c00107c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107cd:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c00107d0:	0f b7 c0             	movzx  eax,ax
c00107d3:	d1 e8                	shr    eax,1
c00107d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107d9:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c00107dd:	eb 19                	jmp    c00107f8 <tcp_rexmit_fast+0x7c>
c00107df:	90                   	nop
c00107e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107e4:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c00107e8:	0f b7 c0             	movzx  eax,ax
c00107eb:	d1 e8                	shr    eax,1
c00107ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107f1:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c00107f5:	8d 76 00             	lea    esi,[esi+0x0]
c00107f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107fc:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c00107ff:	0f b7 d0             	movzx  edx,ax
c0010802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010806:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010809:	0f b7 c0             	movzx  eax,ax
c001080c:	01 c0                	add    eax,eax
c001080e:	39 c2                	cmp    edx,eax
c0010810:	7d 12                	jge    c0010824 <tcp_rexmit_fast+0xa8>
c0010812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010816:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010819:	d1 e0                	shl    eax,1
c001081b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001081f:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c0010823:	90                   	nop
c0010824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010828:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c001082b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010832:	89 c1                	mov    ecx,eax
c0010834:	d1 e1                	shl    ecx,1
c0010836:	01 c8                	add    eax,ecx
c0010838:	01 d0                	add    eax,edx
c001083a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001083e:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c0010842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010846:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010849:	83 c8 04             	or     eax,0x4
c001084c:	88 c2                	mov    dl,al
c001084e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010852:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0010855:	8d 76 00             	lea    esi,[esi+0x0]
c0010858:	90                   	nop
c0010859:	83 c4 0c             	add    esp,0xc
c001085c:	c3                   	ret    
c001085d:	8d 76 00             	lea    esi,[esi+0x0]

c0010860 <tcp_keepalive>:
c0010860:	83 ec 1c             	sub    esp,0x1c
c0010863:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010867:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c001086a:	83 e8 01             	sub    eax,0x1
c001086d:	83 ec 0c             	sub    esp,0xc
c0010870:	50                   	push   eax
c0010871:	e8 96 03 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010876:	83 c4 10             	add    esp,0x10
c0010879:	50                   	push   eax
c001087a:	6a 00                	push   0x0
c001087c:	6a 00                	push   0x0
c001087e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010882:	e8 f1 e2 ff ff       	call   c000eb78 <tcp_output_alloc_header>
c0010887:	83 c4 10             	add    esp,0x10
c001088a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001088e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010893:	0f 84 87 00 00 00    	je     c0010920 <tcp_keepalive+0xc0>
c0010899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001089d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00108a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00108a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00108a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00108ab:	0f b7 d0             	movzx  edx,ax
c00108ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108b2:	8d 48 04             	lea    ecx,[eax+0x4]
c00108b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108b9:	83 ec 0c             	sub    esp,0xc
c00108bc:	52                   	push   edx
c00108bd:	6a 06                	push   0x6
c00108bf:	51                   	push   ecx
c00108c0:	50                   	push   eax
c00108c1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00108c5:	e8 46 2a 00 00       	call   c0013310 <inet_chksum_pseudo>
c00108ca:	83 c4 20             	add    esp,0x20
c00108cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108d1:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c00108d5:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c00108db:	83 c0 01             	add    eax,0x1
c00108de:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c00108e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108e8:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c00108eb:	0f b6 d0             	movzx  edx,al
c00108ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108f2:	8d 48 04             	lea    ecx,[eax+0x4]
c00108f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108f9:	83 ec 08             	sub    esp,0x8
c00108fc:	6a 06                	push   0x6
c00108fe:	6a 00                	push   0x0
c0010900:	52                   	push   edx
c0010901:	51                   	push   ecx
c0010902:	50                   	push   eax
c0010903:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010907:	e8 38 36 00 00       	call   c0013f44 <ip_output>
c001090c:	83 c4 20             	add    esp,0x20
c001090f:	83 ec 0c             	sub    esp,0xc
c0010912:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010916:	e8 d9 7b ff ff       	call   c00084f4 <pbuf_free>
c001091b:	83 c4 10             	add    esp,0x10
c001091e:	eb 04                	jmp    c0010924 <tcp_keepalive+0xc4>
c0010920:	90                   	nop
c0010921:	8d 76 00             	lea    esi,[esi+0x0]
c0010924:	83 c4 1c             	add    esp,0x1c
c0010927:	c3                   	ret    

c0010928 <tcp_zero_window_probe>:
c0010928:	53                   	push   ebx
c0010929:	83 ec 28             	sub    esp,0x28
c001092c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010930:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010933:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010937:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001093c:	75 0e                	jne    c001094c <tcp_zero_window_probe+0x24>
c001093e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010942:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010945:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010949:	8d 76 00             	lea    esi,[esi+0x0]
c001094c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010951:	0f 84 95 01 00 00    	je     c0010aec <tcp_zero_window_probe+0x1c4>
c0010957:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001095b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001095e:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010962:	0f b7 c0             	movzx  eax,ax
c0010965:	83 ec 0c             	sub    esp,0xc
c0010968:	50                   	push   eax
c0010969:	e8 7a 02 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001096e:	83 c4 10             	add    esp,0x10
c0010971:	0f b7 c0             	movzx  eax,ax
c0010974:	83 e0 01             	and    eax,0x1
c0010977:	74 17                	je     c0010990 <tcp_zero_window_probe+0x68>
c0010979:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001097d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010980:	0f b7 c0             	movzx  eax,ax
c0010983:	85 c0                	test   eax,eax
c0010985:	75 09                	jne    c0010990 <tcp_zero_window_probe+0x68>
c0010987:	b8 01 00 00 00       	mov    eax,0x1
c001098c:	eb 0a                	jmp    c0010998 <tcp_zero_window_probe+0x70>
c001098e:	66 90                	xchg   ax,ax
c0010990:	b8 00 00 00 00       	mov    eax,0x0
c0010995:	8d 76 00             	lea    esi,[esi+0x0]
c0010998:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001099c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00109a1:	85 c0                	test   eax,eax
c00109a3:	0f 94 c0             	sete   al
c00109a6:	0f b6 c0             	movzx  eax,al
c00109a9:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00109ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00109b2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00109b5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00109b8:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00109bd:	52                   	push   edx
c00109be:	50                   	push   eax
c00109bf:	6a 00                	push   0x0
c00109c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00109c5:	e8 ae e1 ff ff       	call   c000eb78 <tcp_output_alloc_header>
c00109ca:	83 c4 10             	add    esp,0x10
c00109cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00109d1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00109d6:	0f 84 14 01 00 00    	je     c0010af0 <tcp_zero_window_probe+0x1c8>
c00109dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00109e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00109e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00109e7:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00109ec:	85 c0                	test   eax,eax
c00109ee:	74 28                	je     c0010a18 <tcp_zero_window_probe+0xf0>
c00109f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109f4:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00109f8:	80 e4 c0             	and    ah,0xc0
c00109fb:	89 c3                	mov    ebx,eax
c00109fd:	83 ec 0c             	sub    esp,0xc
c0010a00:	6a 11                	push   0x11
c0010a02:	e8 e1 01 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010a07:	83 c4 10             	add    esp,0x10
c0010a0a:	09 d8                	or     eax,ebx
c0010a0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010a10:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c0010a14:	eb 5a                	jmp    c0010a70 <tcp_zero_window_probe+0x148>
c0010a16:	66 90                	xchg   ax,ax
c0010a18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010a26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a2d:	83 c0 14             	add    eax,0x14
c0010a30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a38:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010a3c:	0f b7 c0             	movzx  eax,ax
c0010a3f:	83 ec 0c             	sub    esp,0xc
c0010a42:	50                   	push   eax
c0010a43:	e8 a0 01 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010a48:	83 c4 10             	add    esp,0x10
c0010a4b:	0f b7 c0             	movzx  eax,ax
c0010a4e:	c1 e8 0c             	shr    eax,0xc
c0010a51:	c1 e0 02             	shl    eax,0x2
c0010a54:	0f b7 d0             	movzx  edx,ax
c0010a57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a5e:	52                   	push   edx
c0010a5f:	6a 01                	push   0x1
c0010a61:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010a65:	50                   	push   eax
c0010a66:	e8 29 87 ff ff       	call   c0009194 <pbuf_copy_partial>
c0010a6b:	83 c4 10             	add    esp,0x10
c0010a6e:	66 90                	xchg   ax,ax
c0010a70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010a77:	0f b7 d0             	movzx  edx,ax
c0010a7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010a7e:	8d 48 04             	lea    ecx,[eax+0x4]
c0010a81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010a85:	83 ec 0c             	sub    esp,0xc
c0010a88:	52                   	push   edx
c0010a89:	6a 06                	push   0x6
c0010a8b:	51                   	push   ecx
c0010a8c:	50                   	push   eax
c0010a8d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010a91:	e8 7a 28 00 00       	call   c0013310 <inet_chksum_pseudo>
c0010a96:	83 c4 20             	add    esp,0x20
c0010a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010a9d:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c0010aa1:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c0010aa7:	83 c0 01             	add    eax,0x1
c0010aaa:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010ab0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010ab4:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0010ab7:	0f b6 d0             	movzx  edx,al
c0010aba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010abe:	8d 48 04             	lea    ecx,[eax+0x4]
c0010ac1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010ac5:	83 ec 08             	sub    esp,0x8
c0010ac8:	6a 06                	push   0x6
c0010aca:	6a 00                	push   0x0
c0010acc:	52                   	push   edx
c0010acd:	51                   	push   ecx
c0010ace:	50                   	push   eax
c0010acf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010ad3:	e8 6c 34 00 00       	call   c0013f44 <ip_output>
c0010ad8:	83 c4 20             	add    esp,0x20
c0010adb:	83 ec 0c             	sub    esp,0xc
c0010ade:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ae2:	e8 0d 7a ff ff       	call   c00084f4 <pbuf_free>
c0010ae7:	83 c4 10             	add    esp,0x10
c0010aea:	eb 08                	jmp    c0010af4 <tcp_zero_window_probe+0x1cc>
c0010aec:	90                   	nop
c0010aed:	eb 05                	jmp    c0010af4 <tcp_zero_window_probe+0x1cc>
c0010aef:	90                   	nop
c0010af0:	90                   	nop
c0010af1:	8d 76 00             	lea    esi,[esi+0x0]
c0010af4:	83 c4 28             	add    esp,0x28
c0010af7:	5b                   	pop    ebx
c0010af8:	c3                   	ret    
c0010af9:	66 90                	xchg   ax,ax
c0010afb:	90                   	nop

c0010afc <sys_timeout>:
c0010afc:	83 ec 1c             	sub    esp,0x1c
c0010aff:	83 ec 0c             	sub    esp,0xc
c0010b02:	6a 0b                	push   0xb
c0010b04:	e8 03 70 ff ff       	call   c0007b0c <memp_malloc>
c0010b09:	83 c4 10             	add    esp,0x10
c0010b0c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010b10:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010b15:	75 25                	jne    c0010b3c <sys_timeout+0x40>
c0010b17:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010b1c:	0f 85 3e 01 00 00    	jne    c0010c60 <sys_timeout+0x164>
c0010b22:	83 ec 08             	sub    esp,0x8
c0010b25:	68 cc 0c 03 c0       	push   0xc0030ccc
c0010b2a:	68 a6 fd 02 c0       	push   0xc002fda6
c0010b2f:	e8 e4 f2 00 00       	call   c001fe18 <CPrintf>
c0010b34:	83 c4 10             	add    esp,0x10
c0010b37:	e9 24 01 00 00       	jmp    c0010c60 <sys_timeout+0x164>
c0010b3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b40:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b4a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010b4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010b51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b55:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010b59:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010b5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b60:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010b64:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b67:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010b6c:	85 c0                	test   eax,eax
c0010b6e:	75 10                	jne    c0010b80 <sys_timeout+0x84>
c0010b70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b74:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010b79:	e9 e6 00 00 00       	jmp    c0010c64 <sys_timeout+0x168>
c0010b7e:	66 90                	xchg   ax,ax
c0010b80:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010b85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b88:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010b8c:	73 2e                	jae    c0010bbc <sys_timeout+0xc0>
c0010b8e:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010b93:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010b96:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010b9b:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0010b9f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010ba2:	8b 15 d4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8d4
c0010ba8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bac:	89 10                	mov    DWORD PTR [eax],edx
c0010bae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bb2:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010bb7:	e9 a8 00 00 00       	jmp    c0010c64 <sys_timeout+0x168>
c0010bbc:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010bc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010bc5:	e9 86 00 00 00       	jmp    c0010c50 <sys_timeout+0x154>
c0010bca:	66 90                	xchg   ax,ax
c0010bcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bd0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010bd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bda:	29 c2                	sub    edx,eax
c0010bdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010be0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010be3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010be7:	8b 00                	mov    eax,DWORD PTR [eax]
c0010be9:	85 c0                	test   eax,eax
c0010beb:	74 17                	je     c0010c04 <sys_timeout+0x108>
c0010bed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bf1:	8b 00                	mov    eax,DWORD PTR [eax]
c0010bf3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010bf6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bfd:	39 c2                	cmp    edx,eax
c0010bff:	76 43                	jbe    c0010c44 <sys_timeout+0x148>
c0010c01:	8d 76 00             	lea    esi,[esi+0x0]
c0010c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c08:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c0a:	85 c0                	test   eax,eax
c0010c0c:	74 1e                	je     c0010c2c <sys_timeout+0x130>
c0010c0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c12:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c14:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010c17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c1b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010c1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c22:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c24:	29 d1                	sub    ecx,edx
c0010c26:	89 ca                	mov    edx,ecx
c0010c28:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c2b:	90                   	nop
c0010c2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c30:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c36:	89 10                	mov    DWORD PTR [eax],edx
c0010c38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c40:	89 10                	mov    DWORD PTR [eax],edx
c0010c42:	eb 20                	jmp    c0010c64 <sys_timeout+0x168>
c0010c44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c48:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c4e:	66 90                	xchg   ax,ax
c0010c50:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010c55:	0f 85 71 ff ff ff    	jne    c0010bcc <sys_timeout+0xd0>
c0010c5b:	eb 07                	jmp    c0010c64 <sys_timeout+0x168>
c0010c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0010c60:	90                   	nop
c0010c61:	8d 76 00             	lea    esi,[esi+0x0]
c0010c64:	83 c4 1c             	add    esp,0x1c
c0010c67:	c3                   	ret    

c0010c68 <tcpip_tcp_timer>:
c0010c68:	83 ec 0c             	sub    esp,0xc
c0010c6b:	e8 34 a5 ff ff       	call   c000b1a4 <tcp_tmr>
c0010c70:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010c75:	85 c0                	test   eax,eax
c0010c77:	75 0b                	jne    c0010c84 <tcpip_tcp_timer+0x1c>
c0010c79:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010c7e:	85 c0                	test   eax,eax
c0010c80:	74 1e                	je     c0010ca0 <tcpip_tcp_timer+0x38>
c0010c82:	66 90                	xchg   ax,ax
c0010c84:	83 ec 04             	sub    esp,0x4
c0010c87:	6a 00                	push   0x0
c0010c89:	68 68 0c 01 c0       	push   0xc0010c68
c0010c8e:	68 fa 00 00 00       	push   0xfa
c0010c93:	e8 64 fe ff ff       	call   c0010afc <sys_timeout>
c0010c98:	83 c4 10             	add    esp,0x10
c0010c9b:	eb 0f                	jmp    c0010cac <tcpip_tcp_timer+0x44>
c0010c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0010ca0:	c7 05 d0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x0
c0010caa:	66 90                	xchg   ax,ax
c0010cac:	90                   	nop
c0010cad:	83 c4 0c             	add    esp,0xc
c0010cb0:	c3                   	ret    
c0010cb1:	8d 76 00             	lea    esi,[esi+0x0]

c0010cb4 <tcp_timer_needed>:
c0010cb4:	83 ec 0c             	sub    esp,0xc
c0010cb7:	a1 d0 a8 03 c0       	mov    eax,ds:0xc003a8d0
c0010cbc:	85 c0                	test   eax,eax
c0010cbe:	75 38                	jne    c0010cf8 <tcp_timer_needed+0x44>
c0010cc0:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010cc5:	85 c0                	test   eax,eax
c0010cc7:	75 0b                	jne    c0010cd4 <tcp_timer_needed+0x20>
c0010cc9:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010cce:	85 c0                	test   eax,eax
c0010cd0:	74 26                	je     c0010cf8 <tcp_timer_needed+0x44>
c0010cd2:	66 90                	xchg   ax,ax
c0010cd4:	c7 05 d0 a8 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x1
c0010cde:	83 ec 04             	sub    esp,0x4
c0010ce1:	6a 00                	push   0x0
c0010ce3:	68 68 0c 01 c0       	push   0xc0010c68
c0010ce8:	68 fa 00 00 00       	push   0xfa
c0010ced:	e8 0a fe ff ff       	call   c0010afc <sys_timeout>
c0010cf2:	83 c4 10             	add    esp,0x10
c0010cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0010cf8:	90                   	nop
c0010cf9:	83 c4 0c             	add    esp,0xc
c0010cfc:	c3                   	ret    
c0010cfd:	8d 76 00             	lea    esi,[esi+0x0]

c0010d00 <ip_reass_timer>:
c0010d00:	83 ec 0c             	sub    esp,0xc
c0010d03:	e8 f0 3a 00 00       	call   c00147f8 <ip_reass_tmr>
c0010d08:	83 ec 04             	sub    esp,0x4
c0010d0b:	6a 00                	push   0x0
c0010d0d:	68 00 0d 01 c0       	push   0xc0010d00
c0010d12:	68 e8 03 00 00       	push   0x3e8
c0010d17:	e8 e0 fd ff ff       	call   c0010afc <sys_timeout>
c0010d1c:	83 c4 10             	add    esp,0x10
c0010d1f:	90                   	nop
c0010d20:	83 c4 0c             	add    esp,0xc
c0010d23:	c3                   	ret    

c0010d24 <arp_timer>:
c0010d24:	83 ec 0c             	sub    esp,0xc
c0010d27:	e8 60 0d 00 00       	call   c0011a8c <etharp_tmr>
c0010d2c:	83 ec 04             	sub    esp,0x4
c0010d2f:	6a 00                	push   0x0
c0010d31:	68 24 0d 01 c0       	push   0xc0010d24
c0010d36:	68 88 13 00 00       	push   0x1388
c0010d3b:	e8 bc fd ff ff       	call   c0010afc <sys_timeout>
c0010d40:	83 c4 10             	add    esp,0x10
c0010d43:	90                   	nop
c0010d44:	83 c4 0c             	add    esp,0xc
c0010d47:	c3                   	ret    

c0010d48 <sys_timeouts_init>:
c0010d48:	83 ec 0c             	sub    esp,0xc
c0010d4b:	83 ec 04             	sub    esp,0x4
c0010d4e:	6a 00                	push   0x0
c0010d50:	68 00 0d 01 c0       	push   0xc0010d00
c0010d55:	68 e8 03 00 00       	push   0x3e8
c0010d5a:	e8 9d fd ff ff       	call   c0010afc <sys_timeout>
c0010d5f:	83 c4 10             	add    esp,0x10
c0010d62:	83 ec 04             	sub    esp,0x4
c0010d65:	6a 00                	push   0x0
c0010d67:	68 24 0d 01 c0       	push   0xc0010d24
c0010d6c:	68 88 13 00 00       	push   0x1388
c0010d71:	e8 86 fd ff ff       	call   c0010afc <sys_timeout>
c0010d76:	83 c4 10             	add    esp,0x10
c0010d79:	90                   	nop
c0010d7a:	83 c4 0c             	add    esp,0xc
c0010d7d:	c3                   	ret    
c0010d7e:	66 90                	xchg   ax,ax

c0010d80 <sys_untimeout>:
c0010d80:	83 ec 1c             	sub    esp,0x1c
c0010d83:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d88:	85 c0                	test   eax,eax
c0010d8a:	0f 84 b4 00 00 00    	je     c0010e44 <sys_untimeout+0xc4>
c0010d90:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d99:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010da1:	e9 8e 00 00 00       	jmp    c0010e34 <sys_untimeout+0xb4>
c0010da6:	66 90                	xchg   ax,ax
c0010da8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010dac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010daf:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010db3:	75 6b                	jne    c0010e20 <sys_untimeout+0xa0>
c0010db5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010db9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010dbc:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0010dc0:	75 5e                	jne    c0010e20 <sys_untimeout+0xa0>
c0010dc2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010dc7:	75 0f                	jne    c0010dd8 <sys_untimeout+0x58>
c0010dc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010dcd:	8b 00                	mov    eax,DWORD PTR [eax]
c0010dcf:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010dd4:	eb 0e                	jmp    c0010de4 <sys_untimeout+0x64>
c0010dd6:	66 90                	xchg   ax,ax
c0010dd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ddc:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010de2:	89 10                	mov    DWORD PTR [eax],edx
c0010de4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010de8:	8b 00                	mov    eax,DWORD PTR [eax]
c0010dea:	85 c0                	test   eax,eax
c0010dec:	74 1e                	je     c0010e0c <sys_untimeout+0x8c>
c0010dee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010df2:	8b 00                	mov    eax,DWORD PTR [eax]
c0010df4:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010df7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010dfb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010dfe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e02:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e04:	01 ca                	add    edx,ecx
c0010e06:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e09:	8d 76 00             	lea    esi,[esi+0x0]
c0010e0c:	83 ec 08             	sub    esp,0x8
c0010e0f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010e13:	6a 0b                	push   0xb
c0010e15:	e8 1e 6e ff ff       	call   c0007c38 <memp_free>
c0010e1a:	83 c4 10             	add    esp,0x10
c0010e1d:	eb 29                	jmp    c0010e48 <sys_untimeout+0xc8>
c0010e1f:	90                   	nop
c0010e20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e32:	66 90                	xchg   ax,ax
c0010e34:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010e39:	0f 85 69 ff ff ff    	jne    c0010da8 <sys_untimeout+0x28>
c0010e3f:	90                   	nop
c0010e40:	eb 06                	jmp    c0010e48 <sys_untimeout+0xc8>
c0010e42:	66 90                	xchg   ax,ax
c0010e44:	90                   	nop
c0010e45:	8d 76 00             	lea    esi,[esi+0x0]
c0010e48:	83 c4 1c             	add    esp,0x1c
c0010e4b:	c3                   	ret    

c0010e4c <sys_timeouts_mbox_fetch>:
c0010e4c:	83 ec 1c             	sub    esp,0x1c
c0010e4f:	90                   	nop
c0010e50:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010e55:	85 c0                	test   eax,eax
c0010e57:	75 1f                	jne    c0010e78 <sys_timeouts_mbox_fetch+0x2c>
c0010e59:	83 ec 04             	sub    esp,0x4
c0010e5c:	6a 00                	push   0x0
c0010e5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e66:	e8 c1 fe fe ff       	call   c0000d2c <sys_arch_mbox_fetch>
c0010e6b:	83 c4 10             	add    esp,0x10
c0010e6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e72:	e9 cd 00 00 00       	jmp    c0010f44 <sys_timeouts_mbox_fetch+0xf8>
c0010e77:	90                   	nop
c0010e78:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010e7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e80:	85 c0                	test   eax,eax
c0010e82:	74 24                	je     c0010ea8 <sys_timeouts_mbox_fetch+0x5c>
c0010e84:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010e89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e8c:	83 ec 04             	sub    esp,0x4
c0010e8f:	50                   	push   eax
c0010e90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e94:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e98:	e8 8f fe fe ff       	call   c0000d2c <sys_arch_mbox_fetch>
c0010e9d:	83 c4 10             	add    esp,0x10
c0010ea0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ea4:	eb 0a                	jmp    c0010eb0 <sys_timeouts_mbox_fetch+0x64>
c0010ea6:	66 90                	xchg   ax,ax
c0010ea8:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0010eb0:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0010eb5:	75 5d                	jne    c0010f14 <sys_timeouts_mbox_fetch+0xc8>
c0010eb7:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010ebc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ec4:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ec6:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010ecb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ecf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010ed2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ed6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010eda:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010edd:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ee0:	83 ec 08             	sub    esp,0x8
c0010ee3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ee7:	6a 0b                	push   0xb
c0010ee9:	e8 4a 6d ff ff       	call   c0007c38 <memp_free>
c0010eee:	83 c4 10             	add    esp,0x10
c0010ef1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0010ef6:	0f 84 54 ff ff ff    	je     c0010e50 <sys_timeouts_mbox_fetch+0x4>
c0010efc:	83 ec 0c             	sub    esp,0xc
c0010eff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010f03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010f07:	ff d0                	call   eax
c0010f09:	83 c4 10             	add    esp,0x10
c0010f0c:	e9 3f ff ff ff       	jmp    c0010e50 <sys_timeouts_mbox_fetch+0x4>
c0010f11:	8d 76 00             	lea    esi,[esi+0x0]
c0010f14:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010f19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f1c:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0010f20:	73 16                	jae    c0010f38 <sys_timeouts_mbox_fetch+0xec>
c0010f22:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010f27:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010f2a:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010f2f:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010f33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f36:	eb 0c                	jmp    c0010f44 <sys_timeouts_mbox_fetch+0xf8>
c0010f38:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010f3d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f44:	90                   	nop
c0010f45:	83 c4 1c             	add    esp,0x1c
c0010f48:	c3                   	ret    
c0010f49:	66 90                	xchg   ax,ax
c0010f4b:	90                   	nop

c0010f4c <udp_input>:
c0010f4c:	53                   	push   ebx
c0010f4d:	83 ec 28             	sub    esp,0x28
c0010f50:	66 a1 9a 67 03 c0    	mov    ax,ds:0xc003679a
c0010f56:	83 c0 01             	add    eax,0x1
c0010f59:	66 a3 9a 67 03 c0    	mov    ds:0xc003679a,ax
c0010f5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010f63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010f6e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010f71:	0f b7 d8             	movzx  ebx,ax
c0010f74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f78:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010f7b:	0f b7 c0             	movzx  eax,ax
c0010f7e:	83 ec 0c             	sub    esp,0xc
c0010f81:	50                   	push   eax
c0010f82:	e8 61 fc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010f87:	83 c4 10             	add    esp,0x10
c0010f8a:	0f b7 c0             	movzx  eax,ax
c0010f8d:	c1 e8 08             	shr    eax,0x8
c0010f90:	0f b7 c0             	movzx  eax,ax
c0010f93:	83 e0 0f             	and    eax,0xf
c0010f96:	83 c0 02             	add    eax,0x2
c0010f99:	c1 e0 02             	shl    eax,0x2
c0010f9c:	39 c3                	cmp    ebx,eax
c0010f9e:	7c 3c                	jl     c0010fdc <udp_input+0x90>
c0010fa0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fa4:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010fa7:	0f b7 c0             	movzx  eax,ax
c0010faa:	83 ec 0c             	sub    esp,0xc
c0010fad:	50                   	push   eax
c0010fae:	e8 35 fc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010fb3:	83 c4 10             	add    esp,0x10
c0010fb6:	0f b7 c0             	movzx  eax,ax
c0010fb9:	c1 e8 08             	shr    eax,0x8
c0010fbc:	83 e0 0f             	and    eax,0xf
c0010fbf:	c1 e0 02             	shl    eax,0x2
c0010fc2:	f7 d8                	neg    eax
c0010fc4:	98                   	cwde   
c0010fc5:	83 ec 08             	sub    esp,0x8
c0010fc8:	50                   	push   eax
c0010fc9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010fcd:	e8 86 73 ff ff       	call   c0008358 <pbuf_header>
c0010fd2:	83 c4 10             	add    esp,0x10
c0010fd5:	0f b6 c0             	movzx  eax,al
c0010fd8:	85 c0                	test   eax,eax
c0010fda:	74 34                	je     c0011010 <udp_input+0xc4>
c0010fdc:	66 a1 a2 67 03 c0    	mov    ax,ds:0xc00367a2
c0010fe2:	83 c0 01             	add    eax,0x1
c0010fe5:	66 a3 a2 67 03 c0    	mov    ds:0xc00367a2,ax
c0010feb:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0010ff1:	83 c0 01             	add    eax,0x1
c0010ff4:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0010ffa:	83 ec 0c             	sub    esp,0xc
c0010ffd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011001:	e8 ee 74 ff ff       	call   c00084f4 <pbuf_free>
c0011006:	83 c4 10             	add    esp,0x10
c0011009:	e9 aa 03 00 00       	jmp    c00113b8 <udp_input+0x46c>
c001100e:	66 90                	xchg   ax,ax
c0011010:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011017:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001101b:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0011020:	83 ec 08             	sub    esp,0x8
c0011023:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011027:	50                   	push   eax
c0011028:	e8 bb 2f 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c001102d:	83 c4 10             	add    esp,0x10
c0011030:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0011034:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011038:	66 8b 00             	mov    ax,WORD PTR [eax]
c001103b:	0f b7 c0             	movzx  eax,ax
c001103e:	83 ec 0c             	sub    esp,0xc
c0011041:	50                   	push   eax
c0011042:	e8 a1 fb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011047:	83 c4 10             	add    esp,0x10
c001104a:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c001104f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011053:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0011057:	0f b7 c0             	movzx  eax,ax
c001105a:	83 ec 0c             	sub    esp,0xc
c001105d:	50                   	push   eax
c001105e:	e8 85 fb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011063:	83 c4 10             	add    esp,0x10
c0011066:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c001106b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011073:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0011078:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011080:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011085:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011089:	e9 0a 01 00 00       	jmp    c0011198 <udp_input+0x24c>
c001108e:	66 90                	xchg   ax,ax
c0011090:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0011095:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011099:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001109d:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c00110a2:	0f b7 c0             	movzx  eax,ax
c00110a5:	39 c2                	cmp    edx,eax
c00110a7:	75 57                	jne    c0011100 <udp_input+0x1b4>
c00110a9:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c00110ae:	85 c0                	test   eax,eax
c00110b0:	75 12                	jne    c00110c4 <udp_input+0x178>
c00110b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110b6:	85 c0                	test   eax,eax
c00110b8:	74 22                	je     c00110dc <udp_input+0x190>
c00110ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110be:	8b 00                	mov    eax,DWORD PTR [eax]
c00110c0:	85 c0                	test   eax,eax
c00110c2:	74 18                	je     c00110dc <udp_input+0x190>
c00110c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00110ca:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00110cf:	39 c2                	cmp    edx,eax
c00110d1:	74 09                	je     c00110dc <udp_input+0x190>
c00110d3:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c00110d8:	85 c0                	test   eax,eax
c00110da:	74 24                	je     c0011100 <udp_input+0x1b4>
c00110dc:	c6 44 24 13 01       	mov    BYTE PTR [esp+0x13],0x1
c00110e1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00110e6:	75 18                	jne    c0011100 <udp_input+0x1b4>
c00110e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110ec:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00110ef:	0f b6 c0             	movzx  eax,al
c00110f2:	83 e0 04             	and    eax,0x4
c00110f5:	75 09                	jne    c0011100 <udp_input+0x1b4>
c00110f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110fb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00110ff:	90                   	nop
c0011100:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0011105:	85 c0                	test   eax,eax
c0011107:	74 7b                	je     c0011184 <udp_input+0x238>
c0011109:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001110d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011110:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0011115:	0f b7 c0             	movzx  eax,ax
c0011118:	39 c2                	cmp    edx,eax
c001111a:	75 68                	jne    c0011184 <udp_input+0x238>
c001111c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011120:	83 c0 04             	add    eax,0x4
c0011123:	74 1b                	je     c0011140 <udp_input+0x1f4>
c0011125:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011129:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001112c:	85 c0                	test   eax,eax
c001112e:	74 10                	je     c0011140 <udp_input+0x1f4>
c0011130:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011134:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011137:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c001113c:	39 c2                	cmp    edx,eax
c001113e:	75 44                	jne    c0011184 <udp_input+0x238>
c0011140:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011145:	74 29                	je     c0011170 <udp_input+0x224>
c0011147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001114b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001114e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011152:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011155:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c001115b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001115f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011162:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011166:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c001116b:	eb 37                	jmp    c00111a4 <udp_input+0x258>
c001116d:	8d 76 00             	lea    esi,[esi+0x0]
c0011170:	66 a1 ae 67 03 c0    	mov    ax,ds:0xc00367ae
c0011176:	83 c0 01             	add    eax,0x1
c0011179:	66 a3 ae 67 03 c0    	mov    ds:0xc00367ae,ax
c001117f:	eb 23                	jmp    c00111a4 <udp_input+0x258>
c0011181:	8d 76 00             	lea    esi,[esi+0x0]
c0011184:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011188:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001118c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011190:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011193:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011197:	90                   	nop
c0011198:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001119d:	0f 85 ed fe ff ff    	jne    c0011090 <udp_input+0x144>
c00111a3:	90                   	nop
c00111a4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00111a9:	75 09                	jne    c00111b4 <udp_input+0x268>
c00111ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00111af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00111b3:	90                   	nop
c00111b4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00111b9:	75 15                	jne    c00111d0 <udp_input+0x284>
c00111bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00111bf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00111c2:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00111c7:	39 c2                	cmp    edx,eax
c00111c9:	0f 85 d9 01 00 00    	jne    c00113a8 <udp_input+0x45c>
c00111cf:	90                   	nop
c00111d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111d4:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00111d8:	0f b7 c0             	movzx  eax,ax
c00111db:	85 c0                	test   eax,eax
c00111dd:	74 61                	je     c0011240 <udp_input+0x2f4>
c00111df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00111e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00111e6:	0f b7 c0             	movzx  eax,ax
c00111e9:	83 ec 0c             	sub    esp,0xc
c00111ec:	50                   	push   eax
c00111ed:	6a 11                	push   0x11
c00111ef:	68 98 68 03 c0       	push   0xc0036898
c00111f4:	68 90 68 03 c0       	push   0xc0036890
c00111f9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00111fd:	e8 0e 21 00 00       	call   c0013310 <inet_chksum_pseudo>
c0011202:	83 c4 20             	add    esp,0x20
c0011205:	0f b7 c0             	movzx  eax,ax
c0011208:	85 c0                	test   eax,eax
c001120a:	74 34                	je     c0011240 <udp_input+0x2f4>
c001120c:	66 a1 a0 67 03 c0    	mov    ax,ds:0xc00367a0
c0011212:	83 c0 01             	add    eax,0x1
c0011215:	66 a3 a0 67 03 c0    	mov    ds:0xc00367a0,ax
c001121b:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0011221:	83 c0 01             	add    eax,0x1
c0011224:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c001122a:	83 ec 0c             	sub    esp,0xc
c001122d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011231:	e8 be 72 ff ff       	call   c00084f4 <pbuf_free>
c0011236:	83 c4 10             	add    esp,0x10
c0011239:	e9 7a 01 00 00       	jmp    c00113b8 <udp_input+0x46c>
c001123e:	66 90                	xchg   ax,ax
c0011240:	83 ec 08             	sub    esp,0x8
c0011243:	6a f8                	push   0xfffffff8
c0011245:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011249:	e8 0a 71 ff ff       	call   c0008358 <pbuf_header>
c001124e:	83 c4 10             	add    esp,0x10
c0011251:	0f b6 c0             	movzx  eax,al
c0011254:	85 c0                	test   eax,eax
c0011256:	74 38                	je     c0011290 <udp_input+0x344>
c0011258:	83 ec 08             	sub    esp,0x8
c001125b:	68 09 0d 03 c0       	push   0xc0030d09
c0011260:	68 a6 fd 02 c0       	push   0xc002fda6
c0011265:	e8 ae eb 00 00       	call   c001fe18 <CPrintf>
c001126a:	83 c4 10             	add    esp,0x10
c001126d:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0011273:	83 c0 01             	add    eax,0x1
c0011276:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c001127c:	83 ec 0c             	sub    esp,0xc
c001127f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011283:	e8 6c 72 ff ff       	call   c00084f4 <pbuf_free>
c0011288:	83 c4 10             	add    esp,0x10
c001128b:	e9 28 01 00 00       	jmp    c00113b8 <udp_input+0x46c>
c0011290:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011295:	74 51                	je     c00112e8 <udp_input+0x39c>
c0011297:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001129b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001129e:	85 c0                	test   eax,eax
c00112a0:	74 32                	je     c00112d4 <udp_input+0x388>
c00112a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112a6:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00112a9:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c00112ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00112b2:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00112b5:	83 ec 0c             	sub    esp,0xc
c00112b8:	51                   	push   ecx
c00112b9:	68 90 68 03 c0       	push   0xc0036890
c00112be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00112c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00112c6:	52                   	push   edx
c00112c7:	ff d0                	call   eax
c00112c9:	83 c4 20             	add    esp,0x20
c00112cc:	e9 e7 00 00 00       	jmp    c00113b8 <udp_input+0x46c>
c00112d1:	8d 76 00             	lea    esi,[esi+0x0]
c00112d4:	83 ec 0c             	sub    esp,0xc
c00112d7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00112db:	e8 14 72 ff ff       	call   c00084f4 <pbuf_free>
c00112e0:	83 c4 10             	add    esp,0x10
c00112e3:	e9 d0 00 00 00       	jmp    c00113b8 <udp_input+0x46c>
c00112e8:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c00112ed:	85 c0                	test   eax,eax
c00112ef:	0f 85 83 00 00 00    	jne    c0011378 <udp_input+0x42c>
c00112f5:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00112fa:	25 f0 00 00 00       	and    eax,0xf0
c00112ff:	3d e0 00 00 00       	cmp    eax,0xe0
c0011304:	74 72                	je     c0011378 <udp_input+0x42c>
c0011306:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001130a:	66 8b 00             	mov    ax,WORD PTR [eax]
c001130d:	0f b7 c0             	movzx  eax,ax
c0011310:	83 ec 0c             	sub    esp,0xc
c0011313:	50                   	push   eax
c0011314:	e8 cf f8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011319:	83 c4 10             	add    esp,0x10
c001131c:	0f b7 c0             	movzx  eax,ax
c001131f:	c1 e8 08             	shr    eax,0x8
c0011322:	0f b7 c0             	movzx  eax,ax
c0011325:	83 e0 0f             	and    eax,0xf
c0011328:	83 c0 02             	add    eax,0x2
c001132b:	c1 e0 02             	shl    eax,0x2
c001132e:	98                   	cwde   
c001132f:	83 ec 08             	sub    esp,0x8
c0011332:	50                   	push   eax
c0011333:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011337:	e8 1c 70 ff ff       	call   c0008358 <pbuf_header>
c001133c:	83 c4 10             	add    esp,0x10
c001133f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011343:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011346:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001134a:	74 18                	je     c0011364 <udp_input+0x418>
c001134c:	83 ec 08             	sub    esp,0x8
c001134f:	68 1d 0d 03 c0       	push   0xc0030d1d
c0011354:	68 a6 fd 02 c0       	push   0xc002fda6
c0011359:	e8 ba ea 00 00       	call   c001fe18 <CPrintf>
c001135e:	83 c4 10             	add    esp,0x10
c0011361:	8d 76 00             	lea    esi,[esi+0x0]
c0011364:	83 ec 08             	sub    esp,0x8
c0011367:	6a 03                	push   0x3
c0011369:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001136d:	e8 5e 1e 00 00       	call   c00131d0 <icmp_dest_unreach>
c0011372:	83 c4 10             	add    esp,0x10
c0011375:	8d 76 00             	lea    esi,[esi+0x0]
c0011378:	66 a1 a8 67 03 c0    	mov    ax,ds:0xc00367a8
c001137e:	83 c0 01             	add    eax,0x1
c0011381:	66 a3 a8 67 03 c0    	mov    ds:0xc00367a8,ax
c0011387:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c001138d:	83 c0 01             	add    eax,0x1
c0011390:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0011396:	83 ec 0c             	sub    esp,0xc
c0011399:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001139d:	e8 52 71 ff ff       	call   c00084f4 <pbuf_free>
c00113a2:	83 c4 10             	add    esp,0x10
c00113a5:	eb 11                	jmp    c00113b8 <udp_input+0x46c>
c00113a7:	90                   	nop
c00113a8:	83 ec 0c             	sub    esp,0xc
c00113ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00113af:	e8 40 71 ff ff       	call   c00084f4 <pbuf_free>
c00113b4:	83 c4 10             	add    esp,0x10
c00113b7:	90                   	nop
c00113b8:	90                   	nop
c00113b9:	83 c4 28             	add    esp,0x28
c00113bc:	5b                   	pop    ebx
c00113bd:	c3                   	ret    
c00113be:	66 90                	xchg   ax,ax

c00113c0 <udp_bind>:
c00113c0:	83 ec 2c             	sub    esp,0x2c
c00113c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00113c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00113cc:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c00113d1:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00113d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00113da:	e9 8d 00 00 00       	jmp    c001146c <udp_bind+0xac>
c00113df:	90                   	nop
c00113e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113e4:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00113e8:	75 26                	jne    c0011410 <udp_bind+0x50>
c00113ea:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00113ef:	85 c0                	test   eax,eax
c00113f1:	74 15                	je     c0011408 <udp_bind+0x48>
c00113f3:	83 ec 08             	sub    esp,0x8
c00113f6:	68 31 0d 03 c0       	push   0xc0030d31
c00113fb:	68 a6 fd 02 c0       	push   0xc002fda6
c0011400:	e8 13 ea 00 00       	call   c001fe18 <CPrintf>
c0011405:	83 c4 10             	add    esp,0x10
c0011408:	c6 44 24 1b 01       	mov    BYTE PTR [esp+0x1b],0x1
c001140d:	eb 51                	jmp    c0011460 <udp_bind+0xa0>
c001140f:	90                   	nop
c0011410:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011414:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011418:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c001141d:	0f b7 c0             	movzx  eax,ax
c0011420:	39 c2                	cmp    edx,eax
c0011422:	75 3c                	jne    c0011460 <udp_bind+0xa0>
c0011424:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011428:	85 c0                	test   eax,eax
c001142a:	74 2c                	je     c0011458 <udp_bind+0x98>
c001142c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011430:	8b 00                	mov    eax,DWORD PTR [eax]
c0011432:	85 c0                	test   eax,eax
c0011434:	74 22                	je     c0011458 <udp_bind+0x98>
c0011436:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001143b:	74 1b                	je     c0011458 <udp_bind+0x98>
c001143d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011441:	8b 00                	mov    eax,DWORD PTR [eax]
c0011443:	85 c0                	test   eax,eax
c0011445:	74 11                	je     c0011458 <udp_bind+0x98>
c0011447:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001144b:	8b 10                	mov    edx,DWORD PTR [eax]
c001144d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011451:	8b 00                	mov    eax,DWORD PTR [eax]
c0011453:	39 c2                	cmp    edx,eax
c0011455:	75 09                	jne    c0011460 <udp_bind+0xa0>
c0011457:	90                   	nop
c0011458:	b0 f8                	mov    al,0xf8
c001145a:	e9 dd 00 00 00       	jmp    c001153c <udp_bind+0x17c>
c001145f:	90                   	nop
c0011460:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011464:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011467:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001146b:	90                   	nop
c001146c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011471:	0f 85 69 ff ff ff    	jne    c00113e0 <udp_bind+0x20>
c0011477:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001147c:	74 0a                	je     c0011488 <udp_bind+0xc8>
c001147e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011482:	8b 00                	mov    eax,DWORD PTR [eax]
c0011484:	eb 0a                	jmp    c0011490 <udp_bind+0xd0>
c0011486:	66 90                	xchg   ax,ax
c0011488:	b8 00 00 00 00       	mov    eax,0x0
c001148d:	8d 76 00             	lea    esi,[esi+0x0]
c0011490:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011494:	89 02                	mov    DWORD PTR [edx],eax
c0011496:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001149b:	85 c0                	test   eax,eax
c001149d:	75 6d                	jne    c001150c <udp_bind+0x14c>
c001149f:	66 c7 44 24 0c 00 c0 	mov    WORD PTR [esp+0xc],0xc000
c00114a6:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00114ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114af:	eb 3b                	jmp    c00114ec <udp_bind+0x12c>
c00114b1:	8d 76 00             	lea    esi,[esi+0x0]
c00114b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114b8:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00114bc:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00114c1:	0f b7 c0             	movzx  eax,ax
c00114c4:	39 c2                	cmp    edx,eax
c00114c6:	75 18                	jne    c00114e0 <udp_bind+0x120>
c00114c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114cc:	83 c0 01             	add    eax,0x1
c00114cf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00114d4:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00114d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114dd:	eb 0d                	jmp    c00114ec <udp_bind+0x12c>
c00114df:	90                   	nop
c00114e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00114e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114eb:	90                   	nop
c00114ec:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00114f1:	74 0d                	je     c0011500 <udp_bind+0x140>
c00114f3:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00114f8:	3d ff ff 00 00       	cmp    eax,0xffff
c00114fd:	75 b5                	jne    c00114b4 <udp_bind+0xf4>
c00114ff:	90                   	nop
c0011500:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011505:	74 05                	je     c001150c <udp_bind+0x14c>
c0011507:	b0 f8                	mov    al,0xf8
c0011509:	eb 31                	jmp    c001153c <udp_bind+0x17c>
c001150b:	90                   	nop
c001150c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011510:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011514:	66 89 42 12          	mov    WORD PTR [edx+0x12],ax
c0011518:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001151d:	85 c0                	test   eax,eax
c001151f:	75 17                	jne    c0011538 <udp_bind+0x178>
c0011521:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0011527:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001152b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001152e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011532:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011537:	90                   	nop
c0011538:	b0 00                	mov    al,0x0
c001153a:	66 90                	xchg   ax,ax
c001153c:	83 c4 2c             	add    esp,0x2c
c001153f:	c3                   	ret    

c0011540 <udp_sendto_if>:
c0011540:	83 ec 2c             	sub    esp,0x2c
c0011543:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011547:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001154c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011550:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011554:	0f b7 c0             	movzx  eax,ax
c0011557:	85 c0                	test   eax,eax
c0011559:	75 39                	jne    c0011594 <udp_sendto_if+0x54>
c001155b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001155f:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011563:	0f b7 d0             	movzx  edx,ax
c0011566:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001156a:	83 ec 04             	sub    esp,0x4
c001156d:	52                   	push   edx
c001156e:	50                   	push   eax
c001156f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011573:	e8 48 fe ff ff       	call   c00113c0 <udp_bind>
c0011578:	83 c4 10             	add    esp,0x10
c001157b:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001157f:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c0011584:	85 c0                	test   eax,eax
c0011586:	74 0c                	je     c0011594 <udp_sendto_if+0x54>
c0011588:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c001158c:	e9 2b 02 00 00       	jmp    c00117bc <udp_sendto_if+0x27c>
c0011591:	8d 76 00             	lea    esi,[esi+0x0]
c0011594:	83 ec 08             	sub    esp,0x8
c0011597:	6a 08                	push   0x8
c0011599:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001159d:	e8 b6 6d ff ff       	call   c0008358 <pbuf_header>
c00115a2:	83 c4 10             	add    esp,0x10
c00115a5:	0f b6 c0             	movzx  eax,al
c00115a8:	85 c0                	test   eax,eax
c00115aa:	74 48                	je     c00115f4 <udp_sendto_if+0xb4>
c00115ac:	83 ec 04             	sub    esp,0x4
c00115af:	6a 00                	push   0x0
c00115b1:	6a 08                	push   0x8
c00115b3:	6a 01                	push   0x1
c00115b5:	e8 12 71 ff ff       	call   c00086cc <pbuf_alloc>
c00115ba:	83 c4 10             	add    esp,0x10
c00115bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00115c1:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00115c6:	75 08                	jne    c00115d0 <udp_sendto_if+0x90>
c00115c8:	b0 ff                	mov    al,0xff
c00115ca:	e9 ed 01 00 00       	jmp    c00117bc <udp_sendto_if+0x27c>
c00115cf:	90                   	nop
c00115d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00115d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00115d7:	0f b7 c0             	movzx  eax,ax
c00115da:	85 c0                	test   eax,eax
c00115dc:	74 1e                	je     c00115fc <udp_sendto_if+0xbc>
c00115de:	83 ec 08             	sub    esp,0x8
c00115e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00115e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00115e9:	e8 1e 78 ff ff       	call   c0008e0c <pbuf_chain>
c00115ee:	83 c4 10             	add    esp,0x10
c00115f1:	eb 09                	jmp    c00115fc <udp_sendto_if+0xbc>
c00115f3:	90                   	nop
c00115f4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00115f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00115fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011600:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0011604:	0f b7 c0             	movzx  eax,ax
c0011607:	83 f8 07             	cmp    eax,0x7
c001160a:	77 18                	ja     c0011624 <udp_sendto_if+0xe4>
c001160c:	83 ec 08             	sub    esp,0x8
c001160f:	68 40 0d 03 c0       	push   0xc0030d40
c0011614:	68 a6 fd 02 c0       	push   0xc002fda6
c0011619:	e8 fa e7 00 00       	call   c001fe18 <CPrintf>
c001161e:	83 c4 10             	add    esp,0x10
c0011621:	8d 76 00             	lea    esi,[esi+0x0]
c0011624:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011628:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001162b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001162f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011633:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011637:	0f b7 c0             	movzx  eax,ax
c001163a:	83 ec 0c             	sub    esp,0xc
c001163d:	50                   	push   eax
c001163e:	e8 a5 f5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011643:	83 c4 10             	add    esp,0x10
c0011646:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001164a:	66 89 02             	mov    WORD PTR [edx],ax
c001164d:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011652:	83 ec 0c             	sub    esp,0xc
c0011655:	50                   	push   eax
c0011656:	e8 8d f5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001165b:	83 c4 10             	add    esp,0x10
c001165e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011662:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0011666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001166a:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0011670:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011674:	85 c0                	test   eax,eax
c0011676:	74 0c                	je     c0011684 <udp_sendto_if+0x144>
c0011678:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001167c:	8b 00                	mov    eax,DWORD PTR [eax]
c001167e:	85 c0                	test   eax,eax
c0011680:	75 12                	jne    c0011694 <udp_sendto_if+0x154>
c0011682:	66 90                	xchg   ax,ax
c0011684:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011688:	83 c0 04             	add    eax,0x4
c001168b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001168f:	eb 47                	jmp    c00116d8 <udp_sendto_if+0x198>
c0011691:	8d 76 00             	lea    esi,[esi+0x0]
c0011694:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011698:	8b 10                	mov    edx,DWORD PTR [eax]
c001169a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001169e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116a1:	39 c2                	cmp    edx,eax
c00116a3:	74 2b                	je     c00116d0 <udp_sendto_if+0x190>
c00116a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116a9:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00116ad:	74 19                	je     c00116c8 <udp_sendto_if+0x188>
c00116af:	83 ec 0c             	sub    esp,0xc
c00116b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00116b6:	e8 39 6e ff ff       	call   c00084f4 <pbuf_free>
c00116bb:	83 c4 10             	add    esp,0x10
c00116be:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00116c6:	66 90                	xchg   ax,ax
c00116c8:	b0 fa                	mov    al,0xfa
c00116ca:	e9 ed 00 00 00       	jmp    c00117bc <udp_sendto_if+0x27c>
c00116cf:	90                   	nop
c00116d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00116d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00116df:	0f b7 c0             	movzx  eax,ax
c00116e2:	83 ec 0c             	sub    esp,0xc
c00116e5:	50                   	push   eax
c00116e6:	e8 fd f4 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00116eb:	83 c4 10             	add    esp,0x10
c00116ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00116f2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00116f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116fa:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00116fd:	0f b6 c0             	movzx  eax,al
c0011700:	83 e0 01             	and    eax,0x1
c0011703:	75 4b                	jne    c0011750 <udp_sendto_if+0x210>
c0011705:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011709:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001170c:	0f b7 c0             	movzx  eax,ax
c001170f:	83 ec 0c             	sub    esp,0xc
c0011712:	50                   	push   eax
c0011713:	6a 11                	push   0x11
c0011715:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011719:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001171d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011721:	e8 ea 1b 00 00       	call   c0013310 <inet_chksum_pseudo>
c0011726:	83 c4 20             	add    esp,0x20
c0011729:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001172e:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0011733:	85 c0                	test   eax,eax
c0011735:	75 09                	jne    c0011740 <udp_sendto_if+0x200>
c0011737:	66 c7 44 24 16 ff ff 	mov    WORD PTR [esp+0x16],0xffff
c001173e:	66 90                	xchg   ax,ax
c0011740:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011744:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0011749:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c001174d:	8d 76 00             	lea    esi,[esi+0x0]
c0011750:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011754:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0011757:	0f b6 d0             	movzx  edx,al
c001175a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001175e:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0011761:	0f b6 c0             	movzx  eax,al
c0011764:	83 ec 04             	sub    esp,0x4
c0011767:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001176b:	6a 11                	push   0x11
c001176d:	52                   	push   edx
c001176e:	50                   	push   eax
c001176f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011773:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011777:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001177b:	e8 f4 24 00 00       	call   c0013c74 <ip_output_if>
c0011780:	83 c4 20             	add    esp,0x20
c0011783:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0011787:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001178b:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001178f:	74 17                	je     c00117a8 <udp_sendto_if+0x268>
c0011791:	83 ec 0c             	sub    esp,0xc
c0011794:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011798:	e8 57 6d ff ff       	call   c00084f4 <pbuf_free>
c001179d:	83 c4 10             	add    esp,0x10
c00117a0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00117a8:	66 a1 98 67 03 c0    	mov    ax,ds:0xc0036798
c00117ae:	83 c0 01             	add    eax,0x1
c00117b1:	66 a3 98 67 03 c0    	mov    ds:0xc0036798,ax
c00117b7:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00117bb:	90                   	nop
c00117bc:	83 c4 2c             	add    esp,0x2c
c00117bf:	c3                   	ret    

c00117c0 <udp_sendto>:
c00117c0:	83 ec 2c             	sub    esp,0x2c
c00117c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00117c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00117cc:	83 ec 0c             	sub    esp,0xc
c00117cf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00117d3:	e8 c4 1f 00 00       	call   c001379c <ip_route>
c00117d8:	83 c4 10             	add    esp,0x10
c00117db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00117df:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00117e4:	75 16                	jne    c00117fc <udp_sendto+0x3c>
c00117e6:	66 a1 a6 67 03 c0    	mov    ax,ds:0xc00367a6
c00117ec:	83 c0 01             	add    eax,0x1
c00117ef:	66 a3 a6 67 03 c0    	mov    ds:0xc00367a6,ax
c00117f5:	b0 fc                	mov    al,0xfc
c00117f7:	eb 27                	jmp    c0011820 <udp_sendto+0x60>
c00117f9:	8d 76 00             	lea    esi,[esi+0x0]
c00117fc:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011801:	83 ec 0c             	sub    esp,0xc
c0011804:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011808:	50                   	push   eax
c0011809:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001180d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011811:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011815:	e8 26 fd ff ff       	call   c0011540 <udp_sendto_if>
c001181a:	83 c4 20             	add    esp,0x20
c001181d:	8d 76 00             	lea    esi,[esi+0x0]
c0011820:	83 c4 2c             	add    esp,0x2c
c0011823:	c3                   	ret    

c0011824 <udp_send>:
c0011824:	83 ec 0c             	sub    esp,0xc
c0011827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001182b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001182e:	0f b7 c0             	movzx  eax,ax
c0011831:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011835:	83 c2 04             	add    edx,0x4
c0011838:	50                   	push   eax
c0011839:	52                   	push   edx
c001183a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001183e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011842:	e8 79 ff ff ff       	call   c00117c0 <udp_sendto>
c0011847:	83 c4 10             	add    esp,0x10
c001184a:	83 c4 0c             	add    esp,0xc
c001184d:	c3                   	ret    
c001184e:	66 90                	xchg   ax,ax

c0011850 <udp_connect>:
c0011850:	83 ec 2c             	sub    esp,0x2c
c0011853:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011857:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001185c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011860:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011864:	0f b7 c0             	movzx  eax,ax
c0011867:	85 c0                	test   eax,eax
c0011869:	75 39                	jne    c00118a4 <udp_connect+0x54>
c001186b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001186f:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011873:	0f b7 d0             	movzx  edx,ax
c0011876:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001187a:	83 ec 04             	sub    esp,0x4
c001187d:	52                   	push   edx
c001187e:	50                   	push   eax
c001187f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011883:	e8 38 fb ff ff       	call   c00113c0 <udp_bind>
c0011888:	83 c4 10             	add    esp,0x10
c001188b:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001188f:	0f be 44 24 1b       	movsx  eax,BYTE PTR [esp+0x1b]
c0011894:	85 c0                	test   eax,eax
c0011896:	74 0c                	je     c00118a4 <udp_connect+0x54>
c0011898:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001189c:	e9 8b 00 00 00       	jmp    c001192c <udp_connect+0xdc>
c00118a1:	8d 76 00             	lea    esi,[esi+0x0]
c00118a4:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00118a9:	74 09                	je     c00118b4 <udp_connect+0x64>
c00118ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00118af:	8b 00                	mov    eax,DWORD PTR [eax]
c00118b1:	eb 09                	jmp    c00118bc <udp_connect+0x6c>
c00118b3:	90                   	nop
c00118b4:	b8 00 00 00 00       	mov    eax,0x0
c00118b9:	8d 76 00             	lea    esi,[esi+0x0]
c00118bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00118c0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00118c3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00118c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118cb:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c00118cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118d3:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00118d6:	83 c8 04             	or     eax,0x4
c00118d9:	88 c2                	mov    dl,al
c00118db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118df:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c00118e2:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00118e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00118eb:	eb 1f                	jmp    c001190c <udp_connect+0xbc>
c00118ed:	8d 76 00             	lea    esi,[esi+0x0]
c00118f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118f4:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00118f8:	75 06                	jne    c0011900 <udp_connect+0xb0>
c00118fa:	b0 00                	mov    al,0x0
c00118fc:	eb 2e                	jmp    c001192c <udp_connect+0xdc>
c00118fe:	66 90                	xchg   ax,ax
c0011900:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011904:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011907:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001190b:	90                   	nop
c001190c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011911:	75 dd                	jne    c00118f0 <udp_connect+0xa0>
c0011913:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0011919:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001191d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011920:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011924:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011929:	b0 00                	mov    al,0x0
c001192b:	90                   	nop
c001192c:	83 c4 2c             	add    esp,0x2c
c001192f:	c3                   	ret    

c0011930 <udp_disconnect>:
c0011930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011934:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001193b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001193f:	66 c7 40 14 00 00    	mov    WORD PTR [eax+0x14],0x0
c0011945:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011949:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c001194c:	83 e0 fb             	and    eax,0xfffffffb
c001194f:	88 c2                	mov    dl,al
c0011951:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011955:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0011958:	90                   	nop
c0011959:	c3                   	ret    
c001195a:	66 90                	xchg   ax,ax

c001195c <udp_recv>:
c001195c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011960:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011964:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011967:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001196b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001196f:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011972:	90                   	nop
c0011973:	c3                   	ret    

c0011974 <udp_remove>:
c0011974:	83 ec 1c             	sub    esp,0x1c
c0011977:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001197c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0011980:	75 12                	jne    c0011994 <udp_remove+0x20>
c0011982:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011987:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001198a:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c001198f:	eb 4b                	jmp    c00119dc <udp_remove+0x68>
c0011991:	8d 76 00             	lea    esi,[esi+0x0]
c0011994:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011999:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001199d:	eb 35                	jmp    c00119d4 <udp_remove+0x60>
c001199f:	90                   	nop
c00119a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119a4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00119a7:	85 c0                	test   eax,eax
c00119a9:	74 1d                	je     c00119c8 <udp_remove+0x54>
c00119ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119af:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00119b2:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00119b6:	75 10                	jne    c00119c8 <udp_remove+0x54>
c00119b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00119bc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00119bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119c3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00119c6:	66 90                	xchg   ax,ax
c00119c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00119cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119d3:	90                   	nop
c00119d4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00119d9:	75 c5                	jne    c00119a0 <udp_remove+0x2c>
c00119db:	90                   	nop
c00119dc:	83 ec 08             	sub    esp,0x8
c00119df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00119e3:	6a 01                	push   0x1
c00119e5:	e8 4e 62 ff ff       	call   c0007c38 <memp_free>
c00119ea:	83 c4 10             	add    esp,0x10
c00119ed:	90                   	nop
c00119ee:	83 c4 1c             	add    esp,0x1c
c00119f1:	c3                   	ret    
c00119f2:	66 90                	xchg   ax,ax

c00119f4 <udp_new>:
c00119f4:	83 ec 1c             	sub    esp,0x1c
c00119f7:	83 ec 0c             	sub    esp,0xc
c00119fa:	6a 01                	push   0x1
c00119fc:	e8 0b 61 ff ff       	call   c0007b0c <memp_malloc>
c0011a01:	83 c4 10             	add    esp,0x10
c0011a04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a08:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011a0d:	74 1d                	je     c0011a2c <udp_new+0x38>
c0011a0f:	83 ec 04             	sub    esp,0x4
c0011a12:	6a 20                	push   0x20
c0011a14:	6a 00                	push   0x0
c0011a16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011a1a:	e8 d1 ea fe ff       	call   c00004f0 <memset>
c0011a1f:	83 c4 10             	add    esp,0x10
c0011a22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a26:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0011a2a:	66 90                	xchg   ax,ax
c0011a2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a30:	83 c4 1c             	add    esp,0x1c
c0011a33:	c3                   	ret    

c0011a34 <free_entry>:
c0011a34:	83 ec 0c             	sub    esp,0xc
c0011a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a3b:	c1 e0 04             	shl    eax,0x4
c0011a3e:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011a43:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a45:	85 c0                	test   eax,eax
c0011a47:	74 2f                	je     c0011a78 <free_entry+0x44>
c0011a49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a4d:	c1 e0 04             	shl    eax,0x4
c0011a50:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011a55:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a57:	83 ec 0c             	sub    esp,0xc
c0011a5a:	50                   	push   eax
c0011a5b:	e8 94 6a ff ff       	call   c00084f4 <pbuf_free>
c0011a60:	83 c4 10             	add    esp,0x10
c0011a63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a67:	c1 e0 04             	shl    eax,0x4
c0011a6a:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011a6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011a75:	8d 76 00             	lea    esi,[esi+0x0]
c0011a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a7c:	c1 e0 04             	shl    eax,0x4
c0011a7f:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011a84:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011a87:	90                   	nop
c0011a88:	83 c4 0c             	add    esp,0xc
c0011a8b:	c3                   	ret    

c0011a8c <etharp_tmr>:
c0011a8c:	83 ec 1c             	sub    esp,0x1c
c0011a8f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011a94:	e9 a7 00 00 00       	jmp    c0011b40 <etharp_tmr+0xb4>
c0011a99:	8d 76 00             	lea    esi,[esi+0x0]
c0011a9c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011aa1:	c1 e0 04             	shl    eax,0x4
c0011aa4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011aa9:	8a 00                	mov    al,BYTE PTR [eax]
c0011aab:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0011aaf:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0011ab4:	85 c0                	test   eax,eax
c0011ab6:	74 7c                	je     c0011b34 <etharp_tmr+0xa8>
c0011ab8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011abd:	89 c2                	mov    edx,eax
c0011abf:	c1 e2 04             	shl    edx,0x4
c0011ac2:	81 c2 0f a9 03 c0    	add    edx,0xc003a90f
c0011ac8:	8a 12                	mov    dl,BYTE PTR [edx]
c0011aca:	83 c2 01             	add    edx,0x1
c0011acd:	c1 e0 04             	shl    eax,0x4
c0011ad0:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011ad5:	88 10                	mov    BYTE PTR [eax],dl
c0011ad7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011adc:	c1 e0 04             	shl    eax,0x4
c0011adf:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011ae4:	8a 00                	mov    al,BYTE PTR [eax]
c0011ae6:	0f b6 c0             	movzx  eax,al
c0011ae9:	3d ef 00 00 00       	cmp    eax,0xef
c0011aee:	77 30                	ja     c0011b20 <etharp_tmr+0x94>
c0011af0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011af5:	c1 e0 04             	shl    eax,0x4
c0011af8:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011afd:	8a 00                	mov    al,BYTE PTR [eax]
c0011aff:	0f b6 c0             	movzx  eax,al
c0011b02:	83 f8 01             	cmp    eax,0x1
c0011b05:	75 2d                	jne    c0011b34 <etharp_tmr+0xa8>
c0011b07:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b0c:	c1 e0 04             	shl    eax,0x4
c0011b0f:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b14:	8a 00                	mov    al,BYTE PTR [eax]
c0011b16:	0f b6 c0             	movzx  eax,al
c0011b19:	83 f8 01             	cmp    eax,0x1
c0011b1c:	76 16                	jbe    c0011b34 <etharp_tmr+0xa8>
c0011b1e:	66 90                	xchg   ax,ax
c0011b20:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b25:	83 ec 0c             	sub    esp,0xc
c0011b28:	50                   	push   eax
c0011b29:	e8 06 ff ff ff       	call   c0011a34 <free_entry>
c0011b2e:	83 c4 10             	add    esp,0x10
c0011b31:	8d 76 00             	lea    esi,[esi+0x0]
c0011b34:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011b38:	83 c0 01             	add    eax,0x1
c0011b3b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011b3f:	90                   	nop
c0011b40:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b45:	83 f8 09             	cmp    eax,0x9
c0011b48:	0f 86 4e ff ff ff    	jbe    c0011a9c <etharp_tmr+0x10>
c0011b4e:	90                   	nop
c0011b4f:	83 c4 1c             	add    esp,0x1c
c0011b52:	c3                   	ret    
c0011b53:	90                   	nop

c0011b54 <find_entry>:
c0011b54:	83 ec 2c             	sub    esp,0x2c
c0011b57:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b5b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011b5f:	c6 44 24 1f 0a       	mov    BYTE PTR [esp+0x1f],0xa
c0011b64:	c6 44 24 1e 0a       	mov    BYTE PTR [esp+0x1e],0xa
c0011b69:	c6 44 24 1d 0a       	mov    BYTE PTR [esp+0x1d],0xa
c0011b6e:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0011b73:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0011b78:	c6 44 24 1a 00       	mov    BYTE PTR [esp+0x1a],0x0
c0011b7d:	c6 44 24 19 0a       	mov    BYTE PTR [esp+0x19],0xa
c0011b82:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
c0011b87:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0011b8c:	e9 7f 01 00 00       	jmp    c0011d10 <find_entry+0x1bc>
c0011b91:	8d 76 00             	lea    esi,[esi+0x0]
c0011b94:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b99:	c1 e0 04             	shl    eax,0x4
c0011b9c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011ba1:	8a 00                	mov    al,BYTE PTR [eax]
c0011ba3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0011ba7:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011bac:	83 f8 0a             	cmp    eax,0xa
c0011baf:	75 17                	jne    c0011bc8 <find_entry+0x74>
c0011bb1:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011bb6:	85 c0                	test   eax,eax
c0011bb8:	75 0e                	jne    c0011bc8 <find_entry+0x74>
c0011bba:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011bbe:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0011bc2:	e9 3d 01 00 00       	jmp    c0011d04 <find_entry+0x1b0>
c0011bc7:	90                   	nop
c0011bc8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011bcd:	85 c0                	test   eax,eax
c0011bcf:	0f 84 2f 01 00 00    	je     c0011d04 <find_entry+0x1b0>
c0011bd5:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011bda:	83 f8 01             	cmp    eax,0x1
c0011bdd:	74 21                	je     c0011c00 <find_entry+0xac>
c0011bdf:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011be4:	83 f8 02             	cmp    eax,0x2
c0011be7:	74 17                	je     c0011c00 <find_entry+0xac>
c0011be9:	83 ec 08             	sub    esp,0x8
c0011bec:	68 70 0d 03 c0       	push   0xc0030d70
c0011bf1:	68 a6 fd 02 c0       	push   0xc002fda6
c0011bf6:	e8 1d e2 00 00       	call   c001fe18 <CPrintf>
c0011bfb:	83 c4 10             	add    esp,0x10
c0011bfe:	66 90                	xchg   ax,ax
c0011c00:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011c05:	74 25                	je     c0011c2c <find_entry+0xd8>
c0011c07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c0b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c0d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c12:	c1 e0 04             	shl    eax,0x4
c0011c15:	05 04 a9 03 c0       	add    eax,0xc003a904
c0011c1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c1c:	39 c2                	cmp    edx,eax
c0011c1e:	75 0c                	jne    c0011c2c <find_entry+0xd8>
c0011c20:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011c24:	e9 53 02 00 00       	jmp    c0011e7c <find_entry+0x328>
c0011c29:	8d 76 00             	lea    esi,[esi+0x0]
c0011c2c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011c31:	83 f8 01             	cmp    eax,0x1
c0011c34:	0f 85 8a 00 00 00    	jne    c0011cc4 <find_entry+0x170>
c0011c3a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c3f:	c1 e0 04             	shl    eax,0x4
c0011c42:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011c47:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c49:	85 c0                	test   eax,eax
c0011c4b:	74 3f                	je     c0011c8c <find_entry+0x138>
c0011c4d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c52:	c1 e0 04             	shl    eax,0x4
c0011c55:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011c5a:	8a 00                	mov    al,BYTE PTR [eax]
c0011c5c:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0011c61:	0f b6 c0             	movzx  eax,al
c0011c64:	39 c2                	cmp    edx,eax
c0011c66:	0f 87 98 00 00 00    	ja     c0011d04 <find_entry+0x1b0>
c0011c6c:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011c70:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0011c74:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c79:	c1 e0 04             	shl    eax,0x4
c0011c7c:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011c81:	8a 00                	mov    al,BYTE PTR [eax]
c0011c83:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0011c87:	eb 7b                	jmp    c0011d04 <find_entry+0x1b0>
c0011c89:	8d 76 00             	lea    esi,[esi+0x0]
c0011c8c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c91:	c1 e0 04             	shl    eax,0x4
c0011c94:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011c99:	8a 00                	mov    al,BYTE PTR [eax]
c0011c9b:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011ca0:	0f b6 c0             	movzx  eax,al
c0011ca3:	39 c2                	cmp    edx,eax
c0011ca5:	77 5d                	ja     c0011d04 <find_entry+0x1b0>
c0011ca7:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011cab:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011caf:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cb4:	c1 e0 04             	shl    eax,0x4
c0011cb7:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011cbc:	8a 00                	mov    al,BYTE PTR [eax]
c0011cbe:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0011cc2:	eb 40                	jmp    c0011d04 <find_entry+0x1b0>
c0011cc4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011cc9:	83 f8 02             	cmp    eax,0x2
c0011ccc:	75 36                	jne    c0011d04 <find_entry+0x1b0>
c0011cce:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cd3:	c1 e0 04             	shl    eax,0x4
c0011cd6:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011cdb:	8a 00                	mov    al,BYTE PTR [eax]
c0011cdd:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c0011ce2:	0f b6 c0             	movzx  eax,al
c0011ce5:	39 c2                	cmp    edx,eax
c0011ce7:	77 1b                	ja     c0011d04 <find_entry+0x1b0>
c0011ce9:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011ced:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0011cf1:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cf6:	c1 e0 04             	shl    eax,0x4
c0011cf9:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011cfe:	8a 00                	mov    al,BYTE PTR [eax]
c0011d00:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0011d04:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011d08:	83 c0 01             	add    eax,0x1
c0011d0b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011d0f:	90                   	nop
c0011d10:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d15:	83 f8 09             	cmp    eax,0x9
c0011d18:	0f 86 76 fe ff ff    	jbe    c0011b94 <find_entry+0x40>
c0011d1e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011d23:	83 e0 02             	and    eax,0x2
c0011d26:	75 14                	jne    c0011d3c <find_entry+0x1e8>
c0011d28:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011d2d:	83 f8 0a             	cmp    eax,0xa
c0011d30:	75 12                	jne    c0011d44 <find_entry+0x1f0>
c0011d32:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011d37:	83 e0 01             	and    eax,0x1
c0011d3a:	75 08                	jne    c0011d44 <find_entry+0x1f0>
c0011d3c:	b0 ff                	mov    al,0xff
c0011d3e:	e9 39 01 00 00       	jmp    c0011e7c <find_entry+0x328>
c0011d43:	90                   	nop
c0011d44:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011d49:	83 f8 09             	cmp    eax,0x9
c0011d4c:	7f 0e                	jg     c0011d5c <find_entry+0x208>
c0011d4e:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0011d52:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011d56:	e9 a1 00 00 00       	jmp    c0011dfc <find_entry+0x2a8>
c0011d5b:	90                   	nop
c0011d5c:	0f be 44 24 1e       	movsx  eax,BYTE PTR [esp+0x1e]
c0011d61:	83 f8 09             	cmp    eax,0x9
c0011d64:	7f 32                	jg     c0011d98 <find_entry+0x244>
c0011d66:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0011d6a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011d6e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d73:	c1 e0 04             	shl    eax,0x4
c0011d76:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011d7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d7d:	85 c0                	test   eax,eax
c0011d7f:	74 47                	je     c0011dc8 <find_entry+0x274>
c0011d81:	83 ec 08             	sub    esp,0x8
c0011d84:	68 e9 0e 03 c0       	push   0xc0030ee9
c0011d89:	68 a6 fd 02 c0       	push   0xc002fda6
c0011d8e:	e8 85 e0 00 00       	call   c001fe18 <CPrintf>
c0011d93:	83 c4 10             	add    esp,0x10
c0011d96:	eb 30                	jmp    c0011dc8 <find_entry+0x274>
c0011d98:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011d9d:	83 f8 09             	cmp    eax,0x9
c0011da0:	7f 0a                	jg     c0011dac <find_entry+0x258>
c0011da2:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011da6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011daa:	eb 1c                	jmp    c0011dc8 <find_entry+0x274>
c0011dac:	0f be 44 24 19       	movsx  eax,BYTE PTR [esp+0x19]
c0011db1:	83 f8 09             	cmp    eax,0x9
c0011db4:	7f 0a                	jg     c0011dc0 <find_entry+0x26c>
c0011db6:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0011dba:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011dbe:	eb 08                	jmp    c0011dc8 <find_entry+0x274>
c0011dc0:	b0 ff                	mov    al,0xff
c0011dc2:	e9 b5 00 00 00       	jmp    c0011e7c <find_entry+0x328>
c0011dc7:	90                   	nop
c0011dc8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011dcd:	83 f8 09             	cmp    eax,0x9
c0011dd0:	76 16                	jbe    c0011de8 <find_entry+0x294>
c0011dd2:	83 ec 08             	sub    esp,0x8
c0011dd5:	68 00 0f 03 c0       	push   0xc0030f00
c0011dda:	68 a6 fd 02 c0       	push   0xc002fda6
c0011ddf:	e8 34 e0 00 00       	call   c001fe18 <CPrintf>
c0011de4:	83 c4 10             	add    esp,0x10
c0011de7:	90                   	nop
c0011de8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ded:	83 ec 0c             	sub    esp,0xc
c0011df0:	50                   	push   eax
c0011df1:	e8 3e fc ff ff       	call   c0011a34 <free_entry>
c0011df6:	83 c4 10             	add    esp,0x10
c0011df9:	8d 76 00             	lea    esi,[esi+0x0]
c0011dfc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e01:	83 f8 09             	cmp    eax,0x9
c0011e04:	76 16                	jbe    c0011e1c <find_entry+0x2c8>
c0011e06:	83 ec 08             	sub    esp,0x8
c0011e09:	68 00 0f 03 c0       	push   0xc0030f00
c0011e0e:	68 a6 fd 02 c0       	push   0xc002fda6
c0011e13:	e8 00 e0 00 00       	call   c001fe18 <CPrintf>
c0011e18:	83 c4 10             	add    esp,0x10
c0011e1b:	90                   	nop
c0011e1c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e21:	c1 e0 04             	shl    eax,0x4
c0011e24:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011e29:	8a 00                	mov    al,BYTE PTR [eax]
c0011e2b:	0f b6 c0             	movzx  eax,al
c0011e2e:	85 c0                	test   eax,eax
c0011e30:	74 16                	je     c0011e48 <find_entry+0x2f4>
c0011e32:	83 ec 08             	sub    esp,0x8
c0011e35:	68 b0 0d 03 c0       	push   0xc0030db0
c0011e3a:	68 a6 fd 02 c0       	push   0xc002fda6
c0011e3f:	e8 d4 df 00 00       	call   c001fe18 <CPrintf>
c0011e44:	83 c4 10             	add    esp,0x10
c0011e47:	90                   	nop
c0011e48:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011e4d:	74 19                	je     c0011e68 <find_entry+0x314>
c0011e4f:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c0011e54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e58:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e5a:	c1 e2 04             	shl    edx,0x4
c0011e5d:	81 c2 04 a9 03 c0    	add    edx,0xc003a904
c0011e63:	89 02                	mov    DWORD PTR [edx],eax
c0011e65:	8d 76 00             	lea    esi,[esi+0x0]
c0011e68:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e6d:	c1 e0 04             	shl    eax,0x4
c0011e70:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011e75:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011e78:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011e7c:	83 c4 2c             	add    esp,0x2c
c0011e7f:	c3                   	ret    

c0011e80 <etharp_send_ip>:
c0011e80:	83 ec 1c             	sub    esp,0x1c
c0011e83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011e87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011e8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e92:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011e95:	0f b6 c0             	movzx  eax,al
c0011e98:	83 f8 06             	cmp    eax,0x6
c0011e9b:	74 17                	je     c0011eb4 <etharp_send_ip+0x34>
c0011e9d:	83 ec 08             	sub    esp,0x8
c0011ea0:	68 dc 0d 03 c0       	push   0xc0030ddc
c0011ea5:	68 a6 fd 02 c0       	push   0xc002fda6
c0011eaa:	e8 69 df 00 00       	call   c001fe18 <CPrintf>
c0011eaf:	83 c4 10             	add    esp,0x10
c0011eb2:	66 90                	xchg   ax,ax
c0011eb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011eb8:	83 ec 04             	sub    esp,0x4
c0011ebb:	6a 06                	push   0x6
c0011ebd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011ec1:	50                   	push   eax
c0011ec2:	e8 b3 e4 fe ff       	call   c000037a <memcpy>
c0011ec7:	83 c4 10             	add    esp,0x10
c0011eca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ece:	83 c0 06             	add    eax,0x6
c0011ed1:	83 ec 04             	sub    esp,0x4
c0011ed4:	6a 06                	push   0x6
c0011ed6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011eda:	50                   	push   eax
c0011edb:	e8 9a e4 fe ff       	call   c000037a <memcpy>
c0011ee0:	83 c4 10             	add    esp,0x10
c0011ee3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ee7:	66 c7 40 0c 08 00    	mov    WORD PTR [eax+0xc],0x8
c0011eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ef1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011ef4:	83 ec 08             	sub    esp,0x8
c0011ef7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011efb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011eff:	ff d0                	call   eax
c0011f01:	83 c4 10             	add    esp,0x10
c0011f04:	83 c4 1c             	add    esp,0x1c
c0011f07:	c3                   	ret    

c0011f08 <update_arp_entry>:
c0011f08:	83 ec 2c             	sub    esp,0x2c
c0011f0b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011f0f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011f13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f17:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011f1a:	0f b6 c0             	movzx  eax,al
c0011f1d:	83 f8 06             	cmp    eax,0x6
c0011f20:	74 16                	je     c0011f38 <update_arp_entry+0x30>
c0011f22:	83 ec 08             	sub    esp,0x8
c0011f25:	68 20 0e 03 c0       	push   0xc0030e20
c0011f2a:	68 a6 fd 02 c0       	push   0xc002fda6
c0011f2f:	e8 e4 de 00 00       	call   c001fe18 <CPrintf>
c0011f34:	83 c4 10             	add    esp,0x10
c0011f37:	90                   	nop
c0011f38:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011f3d:	74 39                	je     c0011f78 <update_arp_entry+0x70>
c0011f3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f43:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f45:	85 c0                	test   eax,eax
c0011f47:	74 2f                	je     c0011f78 <update_arp_entry+0x70>
c0011f49:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f4f:	83 ec 08             	sub    esp,0x8
c0011f52:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f56:	50                   	push   eax
c0011f57:	e8 8c 20 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0011f5c:	83 c4 10             	add    esp,0x10
c0011f5f:	0f b6 c0             	movzx  eax,al
c0011f62:	85 c0                	test   eax,eax
c0011f64:	75 12                	jne    c0011f78 <update_arp_entry+0x70>
c0011f66:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f6c:	25 f0 00 00 00       	and    eax,0xf0
c0011f71:	3d e0 00 00 00       	cmp    eax,0xe0
c0011f76:	75 08                	jne    c0011f80 <update_arp_entry+0x78>
c0011f78:	b0 f2                	mov    al,0xf2
c0011f7a:	e9 d9 00 00 00       	jmp    c0012058 <update_arp_entry+0x150>
c0011f7f:	90                   	nop
c0011f80:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011f85:	83 ec 08             	sub    esp,0x8
c0011f88:	50                   	push   eax
c0011f89:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011f8d:	e8 c2 fb ff ff       	call   c0011b54 <find_entry>
c0011f92:	83 c4 10             	add    esp,0x10
c0011f95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011f99:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011f9e:	85 c0                	test   eax,eax
c0011fa0:	79 0a                	jns    c0011fac <update_arp_entry+0xa4>
c0011fa2:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011fa6:	e9 ad 00 00 00       	jmp    c0012058 <update_arp_entry+0x150>
c0011fab:	90                   	nop
c0011fac:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011fb1:	c1 e0 04             	shl    eax,0x4
c0011fb4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011fb9:	c6 00 02             	mov    BYTE PTR [eax],0x2
c0011fbc:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011fc1:	c1 e0 04             	shl    eax,0x4
c0011fc4:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011fc9:	83 c0 08             	add    eax,0x8
c0011fcc:	83 ec 04             	sub    esp,0x4
c0011fcf:	6a 06                	push   0x6
c0011fd1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011fd5:	50                   	push   eax
c0011fd6:	e8 9f e3 fe ff       	call   c000037a <memcpy>
c0011fdb:	83 c4 10             	add    esp,0x10
c0011fde:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011fe3:	c1 e0 04             	shl    eax,0x4
c0011fe6:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011feb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011fee:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011ff3:	c1 e0 04             	shl    eax,0x4
c0011ff6:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ffd:	85 c0                	test   eax,eax
c0011fff:	74 53                	je     c0012054 <update_arp_entry+0x14c>
c0012001:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0012006:	c1 e0 04             	shl    eax,0x4
c0012009:	05 00 a9 03 c0       	add    eax,0xc003a900
c001200e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012010:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012014:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0012019:	c1 e0 04             	shl    eax,0x4
c001201c:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012021:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012027:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001202b:	83 c0 23             	add    eax,0x23
c001202e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012032:	50                   	push   eax
c0012033:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012037:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001203b:	e8 40 fe ff ff       	call   c0011e80 <etharp_send_ip>
c0012040:	83 c4 10             	add    esp,0x10
c0012043:	83 ec 0c             	sub    esp,0xc
c0012046:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001204a:	e8 a5 64 ff ff       	call   c00084f4 <pbuf_free>
c001204f:	83 c4 10             	add    esp,0x10
c0012052:	66 90                	xchg   ax,ax
c0012054:	b0 00                	mov    al,0x0
c0012056:	66 90                	xchg   ax,ax
c0012058:	83 c4 2c             	add    esp,0x2c
c001205b:	c3                   	ret    

c001205c <etharp_find_addr>:
c001205c:	83 ec 1c             	sub    esp,0x1c
c001205f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0012064:	74 0a                	je     c0012070 <etharp_find_addr+0x14>
c0012066:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001206b:	75 1b                	jne    c0012088 <etharp_find_addr+0x2c>
c001206d:	8d 76 00             	lea    esi,[esi+0x0]
c0012070:	83 ec 08             	sub    esp,0x8
c0012073:	68 48 0e 03 c0       	push   0xc0030e48
c0012078:	68 a6 fd 02 c0       	push   0xc002fda6
c001207d:	e8 96 dd 00 00       	call   c001fe18 <CPrintf>
c0012082:	83 c4 10             	add    esp,0x10
c0012085:	8d 76 00             	lea    esi,[esi+0x0]
c0012088:	83 ec 08             	sub    esp,0x8
c001208b:	6a 02                	push   0x2
c001208d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012091:	e8 be fa ff ff       	call   c0011b54 <find_entry>
c0012096:	83 c4 10             	add    esp,0x10
c0012099:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001209d:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00120a2:	85 c0                	test   eax,eax
c00120a4:	78 4a                	js     c00120f0 <etharp_find_addr+0x94>
c00120a6:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00120ab:	c1 e0 04             	shl    eax,0x4
c00120ae:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00120b3:	8a 00                	mov    al,BYTE PTR [eax]
c00120b5:	0f b6 c0             	movzx  eax,al
c00120b8:	83 f8 02             	cmp    eax,0x2
c00120bb:	75 33                	jne    c00120f0 <etharp_find_addr+0x94>
c00120bd:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00120c2:	c1 e0 04             	shl    eax,0x4
c00120c5:	05 00 a9 03 c0       	add    eax,0xc003a900
c00120ca:	8d 50 08             	lea    edx,[eax+0x8]
c00120cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00120d1:	89 10                	mov    DWORD PTR [eax],edx
c00120d3:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00120d8:	c1 e0 04             	shl    eax,0x4
c00120db:	05 00 a9 03 c0       	add    eax,0xc003a900
c00120e0:	8d 50 04             	lea    edx,[eax+0x4]
c00120e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120e7:	89 10                	mov    DWORD PTR [eax],edx
c00120e9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00120ed:	eb 05                	jmp    c00120f4 <etharp_find_addr+0x98>
c00120ef:	90                   	nop
c00120f0:	b0 ff                	mov    al,0xff
c00120f2:	66 90                	xchg   ax,ax
c00120f4:	83 c4 1c             	add    esp,0x1c
c00120f7:	c3                   	ret    

c00120f8 <etharp_arp_input>:
c00120f8:	83 ec 2c             	sub    esp,0x2c
c00120fb:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0012100:	75 1a                	jne    c001211c <etharp_arp_input+0x24>
c0012102:	83 ec 08             	sub    esp,0x8
c0012105:	68 13 0f 03 c0       	push   0xc0030f13
c001210a:	68 a6 fd 02 c0       	push   0xc002fda6
c001210f:	e8 04 dd 00 00       	call   c001fe18 <CPrintf>
c0012114:	83 c4 10             	add    esp,0x10
c0012117:	e9 d0 02 00 00       	jmp    c00123ec <etharp_arp_input+0x2f4>
c001211c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012120:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012124:	0f b7 c0             	movzx  eax,ax
c0012127:	83 f8 29             	cmp    eax,0x29
c001212a:	77 34                	ja     c0012160 <etharp_arp_input+0x68>
c001212c:	66 a1 42 67 03 c0    	mov    ax,ds:0xc0036742
c0012132:	83 c0 01             	add    eax,0x1
c0012135:	66 a3 42 67 03 c0    	mov    ds:0xc0036742,ax
c001213b:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012141:	83 c0 01             	add    eax,0x1
c0012144:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c001214a:	83 ec 0c             	sub    esp,0xc
c001214d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012151:	e8 9e 63 ff ff       	call   c00084f4 <pbuf_free>
c0012156:	83 c4 10             	add    esp,0x10
c0012159:	e9 8e 02 00 00       	jmp    c00123ec <etharp_arp_input+0x2f4>
c001215e:	66 90                	xchg   ax,ax
c0012160:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012164:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001216b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001216f:	83 c0 0e             	add    eax,0xe
c0012172:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012176:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001217a:	66 8b 00             	mov    ax,WORD PTR [eax]
c001217d:	0f b7 c0             	movzx  eax,ax
c0012180:	3d 00 01 00 00       	cmp    eax,0x100
c0012185:	75 31                	jne    c00121b8 <etharp_arp_input+0xc0>
c0012187:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001218b:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c001218e:	0f b6 c0             	movzx  eax,al
c0012191:	83 f8 06             	cmp    eax,0x6
c0012194:	75 22                	jne    c00121b8 <etharp_arp_input+0xc0>
c0012196:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001219a:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
c001219d:	0f b6 c0             	movzx  eax,al
c00121a0:	83 f8 04             	cmp    eax,0x4
c00121a3:	75 13                	jne    c00121b8 <etharp_arp_input+0xc0>
c00121a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121a9:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00121ad:	0f b7 c0             	movzx  eax,ax
c00121b0:	83 f8 08             	cmp    eax,0x8
c00121b3:	74 37                	je     c00121ec <etharp_arp_input+0xf4>
c00121b5:	8d 76 00             	lea    esi,[esi+0x0]
c00121b8:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c00121be:	83 c0 01             	add    eax,0x1
c00121c1:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c00121c7:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c00121cd:	83 c0 01             	add    eax,0x1
c00121d0:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c00121d6:	83 ec 0c             	sub    esp,0xc
c00121d9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00121dd:	e8 12 63 ff ff       	call   c00084f4 <pbuf_free>
c00121e2:	83 c4 10             	add    esp,0x10
c00121e5:	e9 02 02 00 00       	jmp    c00123ec <etharp_arp_input+0x2f4>
c00121ea:	66 90                	xchg   ax,ax
c00121ec:	66 a1 3a 67 03 c0    	mov    ax,ds:0xc003673a
c00121f2:	83 c0 01             	add    eax,0x1
c00121f5:	66 a3 3a 67 03 c0    	mov    ds:0xc003673a,ax
c00121fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121ff:	83 c0 0e             	add    eax,0xe
c0012202:	83 ec 04             	sub    esp,0x4
c0012205:	6a 04                	push   0x4
c0012207:	50                   	push   eax
c0012208:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001220c:	50                   	push   eax
c001220d:	e8 68 e1 fe ff       	call   c000037a <memcpy>
c0012212:	83 c4 10             	add    esp,0x10
c0012215:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012219:	83 c0 18             	add    eax,0x18
c001221c:	83 ec 04             	sub    esp,0x4
c001221f:	6a 04                	push   0x4
c0012221:	50                   	push   eax
c0012222:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012226:	50                   	push   eax
c0012227:	e8 4e e1 fe ff       	call   c000037a <memcpy>
c001222c:	83 c4 10             	add    esp,0x10
c001222f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012233:	83 c0 04             	add    eax,0x4
c0012236:	74 0c                	je     c0012244 <etharp_arp_input+0x14c>
c0012238:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001223c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001223f:	85 c0                	test   eax,eax
c0012241:	75 09                	jne    c001224c <etharp_arp_input+0x154>
c0012243:	90                   	nop
c0012244:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012249:	eb 15                	jmp    c0012260 <etharp_arp_input+0x168>
c001224b:	90                   	nop
c001224c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012250:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012254:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012257:	39 c2                	cmp    edx,eax
c0012259:	0f 94 c0             	sete   al
c001225c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012260:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0012265:	85 c0                	test   eax,eax
c0012267:	74 07                	je     c0012270 <etharp_arp_input+0x178>
c0012269:	b8 01 00 00 00       	mov    eax,0x1
c001226e:	eb 08                	jmp    c0012278 <etharp_arp_input+0x180>
c0012270:	b8 02 00 00 00       	mov    eax,0x2
c0012275:	8d 76 00             	lea    esi,[esi+0x0]
c0012278:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001227c:	83 c2 08             	add    edx,0x8
c001227f:	50                   	push   eax
c0012280:	52                   	push   edx
c0012281:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012285:	50                   	push   eax
c0012286:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001228a:	e8 79 fc ff ff       	call   c0011f08 <update_arp_entry>
c001228f:	83 c4 10             	add    esp,0x10
c0012292:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012296:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c001229a:	0f b7 c0             	movzx  eax,ax
c001229d:	3d 00 01 00 00       	cmp    eax,0x100
c00122a2:	74 10                	je     c00122b4 <etharp_arp_input+0x1bc>
c00122a4:	3d 00 02 00 00       	cmp    eax,0x200
c00122a9:	0f 84 29 01 00 00    	je     c00123d8 <etharp_arp_input+0x2e0>
c00122af:	e9 10 01 00 00       	jmp    c00123c4 <etharp_arp_input+0x2cc>
c00122b4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c00122b9:	85 c0                	test   eax,eax
c00122bb:	0f 84 f7 00 00 00    	je     c00123b8 <etharp_arp_input+0x2c0>
c00122c1:	83 ec 0c             	sub    esp,0xc
c00122c4:	6a 02                	push   0x2
c00122c6:	e8 1d e9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00122cb:	83 c4 10             	add    esp,0x10
c00122ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00122d2:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00122d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122da:	8d 50 0e             	lea    edx,[eax+0xe]
c00122dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122e1:	83 c0 18             	add    eax,0x18
c00122e4:	83 ec 04             	sub    esp,0x4
c00122e7:	6a 04                	push   0x4
c00122e9:	52                   	push   edx
c00122ea:	50                   	push   eax
c00122eb:	e8 8a e0 fe ff       	call   c000037a <memcpy>
c00122f0:	83 c4 10             	add    esp,0x10
c00122f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122f7:	8d 50 04             	lea    edx,[eax+0x4]
c00122fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122fe:	83 c0 0e             	add    eax,0xe
c0012301:	83 ec 04             	sub    esp,0x4
c0012304:	6a 04                	push   0x4
c0012306:	52                   	push   edx
c0012307:	50                   	push   eax
c0012308:	e8 6d e0 fe ff       	call   c000037a <memcpy>
c001230d:	83 c4 10             	add    esp,0x10
c0012310:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012314:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0012317:	0f b6 c0             	movzx  eax,al
c001231a:	83 f8 06             	cmp    eax,0x6
c001231d:	74 15                	je     c0012334 <etharp_arp_input+0x23c>
c001231f:	83 ec 08             	sub    esp,0x8
c0012322:	68 dc 0d 03 c0       	push   0xc0030ddc
c0012327:	68 a6 fd 02 c0       	push   0xc002fda6
c001232c:	e8 e7 da 00 00       	call   c001fe18 <CPrintf>
c0012331:	83 c4 10             	add    esp,0x10
c0012334:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012338:	8d 50 08             	lea    edx,[eax+0x8]
c001233b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001233f:	83 c0 12             	add    eax,0x12
c0012342:	83 ec 04             	sub    esp,0x4
c0012345:	6a 06                	push   0x6
c0012347:	52                   	push   edx
c0012348:	50                   	push   eax
c0012349:	e8 2c e0 fe ff       	call   c000037a <memcpy>
c001234e:	83 c4 10             	add    esp,0x10
c0012351:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012355:	8d 50 08             	lea    edx,[eax+0x8]
c0012358:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001235c:	83 ec 04             	sub    esp,0x4
c001235f:	6a 06                	push   0x6
c0012361:	52                   	push   edx
c0012362:	50                   	push   eax
c0012363:	e8 12 e0 fe ff       	call   c000037a <memcpy>
c0012368:	83 c4 10             	add    esp,0x10
c001236b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001236f:	83 c0 08             	add    eax,0x8
c0012372:	83 ec 04             	sub    esp,0x4
c0012375:	6a 06                	push   0x6
c0012377:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001237b:	50                   	push   eax
c001237c:	e8 f9 df fe ff       	call   c000037a <memcpy>
c0012381:	83 c4 10             	add    esp,0x10
c0012384:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012388:	83 c0 06             	add    eax,0x6
c001238b:	83 ec 04             	sub    esp,0x4
c001238e:	6a 06                	push   0x6
c0012390:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012394:	50                   	push   eax
c0012395:	e8 e0 df fe ff       	call   c000037a <memcpy>
c001239a:	83 c4 10             	add    esp,0x10
c001239d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123a1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00123a4:	83 ec 08             	sub    esp,0x8
c00123a7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00123ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123af:	ff d0                	call   eax
c00123b1:	83 c4 10             	add    esp,0x10
c00123b4:	eb 26                	jmp    c00123dc <etharp_arp_input+0x2e4>
c00123b6:	66 90                	xchg   ax,ax
c00123b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123bc:	83 c0 04             	add    eax,0x4
c00123bf:	eb 1b                	jmp    c00123dc <etharp_arp_input+0x2e4>
c00123c1:	8d 76 00             	lea    esi,[esi+0x0]
c00123c4:	66 a1 4c 67 03 c0    	mov    ax,ds:0xc003674c
c00123ca:	83 c0 01             	add    eax,0x1
c00123cd:	66 a3 4c 67 03 c0    	mov    ds:0xc003674c,ax
c00123d3:	eb 07                	jmp    c00123dc <etharp_arp_input+0x2e4>
c00123d5:	8d 76 00             	lea    esi,[esi+0x0]
c00123d8:	90                   	nop
c00123d9:	8d 76 00             	lea    esi,[esi+0x0]
c00123dc:	83 ec 0c             	sub    esp,0xc
c00123df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00123e3:	e8 0c 61 ff ff       	call   c00084f4 <pbuf_free>
c00123e8:	83 c4 10             	add    esp,0x10
c00123eb:	90                   	nop
c00123ec:	83 c4 2c             	add    esp,0x2c
c00123ef:	c3                   	ret    

c00123f0 <etharp_raw>:
c00123f0:	83 ec 2c             	sub    esp,0x2c
c00123f3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00123f7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00123fc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012401:	83 ec 04             	sub    esp,0x4
c0012404:	6a 00                	push   0x0
c0012406:	6a 2a                	push   0x2a
c0012408:	6a 03                	push   0x3
c001240a:	e8 bd 62 ff ff       	call   c00086cc <pbuf_alloc>
c001240f:	83 c4 10             	add    esp,0x10
c0012412:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012416:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001241b:	75 17                	jne    c0012434 <etharp_raw+0x44>
c001241d:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c0012423:	83 c0 01             	add    eax,0x1
c0012426:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c001242c:	b0 ff                	mov    al,0xff
c001242e:	e9 85 01 00 00       	jmp    c00125b8 <etharp_raw+0x1c8>
c0012433:	90                   	nop
c0012434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012438:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001243c:	0f b7 c0             	movzx  eax,ax
c001243f:	83 f8 29             	cmp    eax,0x29
c0012442:	77 18                	ja     c001245c <etharp_raw+0x6c>
c0012444:	83 ec 08             	sub    esp,0x8
c0012447:	68 6c 0e 03 c0       	push   0xc0030e6c
c001244c:	68 a6 fd 02 c0       	push   0xc002fda6
c0012451:	e8 c2 d9 00 00       	call   c001fe18 <CPrintf>
c0012456:	83 c4 10             	add    esp,0x10
c0012459:	8d 76 00             	lea    esi,[esi+0x0]
c001245c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012460:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012463:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012467:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001246b:	83 c0 0e             	add    eax,0xe
c001246e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012472:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0012477:	83 ec 0c             	sub    esp,0xc
c001247a:	50                   	push   eax
c001247b:	e8 68 e7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0012480:	83 c4 10             	add    esp,0x10
c0012483:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012487:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c001248b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001248f:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0012492:	0f b6 c0             	movzx  eax,al
c0012495:	83 f8 06             	cmp    eax,0x6
c0012498:	74 16                	je     c00124b0 <etharp_raw+0xc0>
c001249a:	83 ec 08             	sub    esp,0x8
c001249d:	68 dc 0d 03 c0       	push   0xc0030ddc
c00124a2:	68 a6 fd 02 c0       	push   0xc002fda6
c00124a7:	e8 6c d9 00 00       	call   c001fe18 <CPrintf>
c00124ac:	83 c4 10             	add    esp,0x10
c00124af:	90                   	nop
c00124b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124b4:	83 c0 08             	add    eax,0x8
c00124b7:	83 ec 04             	sub    esp,0x4
c00124ba:	6a 06                	push   0x6
c00124bc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00124c0:	50                   	push   eax
c00124c1:	e8 b4 de fe ff       	call   c000037a <memcpy>
c00124c6:	83 c4 10             	add    esp,0x10
c00124c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124cd:	83 c0 12             	add    eax,0x12
c00124d0:	83 ec 04             	sub    esp,0x4
c00124d3:	6a 06                	push   0x6
c00124d5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124d9:	50                   	push   eax
c00124da:	e8 9b de fe ff       	call   c000037a <memcpy>
c00124df:	83 c4 10             	add    esp,0x10
c00124e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124e6:	83 ec 04             	sub    esp,0x4
c00124e9:	6a 06                	push   0x6
c00124eb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00124ef:	50                   	push   eax
c00124f0:	e8 85 de fe ff       	call   c000037a <memcpy>
c00124f5:	83 c4 10             	add    esp,0x10
c00124f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124fc:	83 c0 06             	add    eax,0x6
c00124ff:	83 ec 04             	sub    esp,0x4
c0012502:	6a 06                	push   0x6
c0012504:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012508:	50                   	push   eax
c0012509:	e8 6c de fe ff       	call   c000037a <memcpy>
c001250e:	83 c4 10             	add    esp,0x10
c0012511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012515:	83 c0 0e             	add    eax,0xe
c0012518:	83 ec 04             	sub    esp,0x4
c001251b:	6a 04                	push   0x4
c001251d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012521:	50                   	push   eax
c0012522:	e8 53 de fe ff       	call   c000037a <memcpy>
c0012527:	83 c4 10             	add    esp,0x10
c001252a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001252e:	83 c0 18             	add    eax,0x18
c0012531:	83 ec 04             	sub    esp,0x4
c0012534:	6a 04                	push   0x4
c0012536:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001253a:	50                   	push   eax
c001253b:	e8 3a de fe ff       	call   c000037a <memcpy>
c0012540:	83 c4 10             	add    esp,0x10
c0012543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012547:	66 c7 00 00 01       	mov    WORD PTR [eax],0x100
c001254c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012550:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0012556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001255a:	c6 40 04 06          	mov    BYTE PTR [eax+0x4],0x6
c001255e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012562:	c6 40 05 04          	mov    BYTE PTR [eax+0x5],0x4
c0012566:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001256a:	66 c7 40 0c 08 06    	mov    WORD PTR [eax+0xc],0x608
c0012570:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012574:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012577:	83 ec 08             	sub    esp,0x8
c001257a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001257e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012582:	ff d0                	call   eax
c0012584:	83 c4 10             	add    esp,0x10
c0012587:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001258b:	66 a1 38 67 03 c0    	mov    ax,ds:0xc0036738
c0012591:	83 c0 01             	add    eax,0x1
c0012594:	66 a3 38 67 03 c0    	mov    ds:0xc0036738,ax
c001259a:	83 ec 0c             	sub    esp,0xc
c001259d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00125a1:	e8 4e 5f ff ff       	call   c00084f4 <pbuf_free>
c00125a6:	83 c4 10             	add    esp,0x10
c00125a9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00125b1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00125b5:	8d 76 00             	lea    esi,[esi+0x0]
c00125b8:	83 c4 2c             	add    esp,0x2c
c00125bb:	c3                   	ret    

c00125bc <etharp_request>:
c00125bc:	83 ec 0c             	sub    esp,0xc
c00125bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125c3:	8d 48 04             	lea    ecx,[eax+0x4]
c00125c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125ca:	8d 50 23             	lea    edx,[eax+0x23]
c00125cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125d1:	83 c0 23             	add    eax,0x23
c00125d4:	6a 01                	push   0x1
c00125d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00125da:	68 3c 0f 03 c0       	push   0xc0030f3c
c00125df:	51                   	push   ecx
c00125e0:	52                   	push   edx
c00125e1:	68 44 0f 03 c0       	push   0xc0030f44
c00125e6:	50                   	push   eax
c00125e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00125eb:	e8 00 fe ff ff       	call   c00123f0 <etharp_raw>
c00125f0:	83 c4 20             	add    esp,0x20
c00125f3:	83 c4 0c             	add    esp,0xc
c00125f6:	c3                   	ret    
c00125f7:	90                   	nop

c00125f8 <etharp_query>:
c00125f8:	83 ec 2c             	sub    esp,0x2c
c00125fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125ff:	83 c0 23             	add    eax,0x23
c0012602:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012606:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c001260b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001260f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012611:	83 ec 08             	sub    esp,0x8
c0012614:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012618:	50                   	push   eax
c0012619:	e8 ca 19 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c001261e:	83 c4 10             	add    esp,0x10
c0012621:	0f b6 c0             	movzx  eax,al
c0012624:	85 c0                	test   eax,eax
c0012626:	75 24                	jne    c001264c <etharp_query+0x54>
c0012628:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001262c:	8b 00                	mov    eax,DWORD PTR [eax]
c001262e:	25 f0 00 00 00       	and    eax,0xf0
c0012633:	3d e0 00 00 00       	cmp    eax,0xe0
c0012638:	74 12                	je     c001264c <etharp_query+0x54>
c001263a:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001263f:	74 0b                	je     c001264c <etharp_query+0x54>
c0012641:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012645:	8b 00                	mov    eax,DWORD PTR [eax]
c0012647:	85 c0                	test   eax,eax
c0012649:	75 09                	jne    c0012654 <etharp_query+0x5c>
c001264b:	90                   	nop
c001264c:	b0 f2                	mov    al,0xf2
c001264e:	e9 dd 02 00 00       	jmp    c0012930 <etharp_query+0x338>
c0012653:	90                   	nop
c0012654:	83 ec 08             	sub    esp,0x8
c0012657:	6a 01                	push   0x1
c0012659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001265d:	e8 f2 f4 ff ff       	call   c0011b54 <find_entry>
c0012662:	83 c4 10             	add    esp,0x10
c0012665:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012669:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001266e:	85 c0                	test   eax,eax
c0012670:	79 22                	jns    c0012694 <etharp_query+0x9c>
c0012672:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0012677:	74 0f                	je     c0012688 <etharp_query+0x90>
c0012679:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c001267f:	83 c0 01             	add    eax,0x1
c0012682:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c0012688:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001268c:	e9 9f 02 00 00       	jmp    c0012930 <etharp_query+0x338>
c0012691:	8d 76 00             	lea    esi,[esi+0x0]
c0012694:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012699:	c1 e0 04             	shl    eax,0x4
c001269c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00126a1:	8a 00                	mov    al,BYTE PTR [eax]
c00126a3:	0f b6 c0             	movzx  eax,al
c00126a6:	85 c0                	test   eax,eax
c00126a8:	75 12                	jne    c00126bc <etharp_query+0xc4>
c00126aa:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00126af:	c1 e0 04             	shl    eax,0x4
c00126b2:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00126b7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00126ba:	66 90                	xchg   ax,ax
c00126bc:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00126c1:	c1 e0 04             	shl    eax,0x4
c00126c4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00126c9:	8a 00                	mov    al,BYTE PTR [eax]
c00126cb:	0f b6 c0             	movzx  eax,al
c00126ce:	83 f8 01             	cmp    eax,0x1
c00126d1:	74 2d                	je     c0012700 <etharp_query+0x108>
c00126d3:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00126d8:	c1 e0 04             	shl    eax,0x4
c00126db:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00126e0:	8a 00                	mov    al,BYTE PTR [eax]
c00126e2:	0f b6 c0             	movzx  eax,al
c00126e5:	83 f8 02             	cmp    eax,0x2
c00126e8:	74 16                	je     c0012700 <etharp_query+0x108>
c00126ea:	83 ec 08             	sub    esp,0x8
c00126ed:	68 a0 0e 03 c0       	push   0xc0030ea0
c00126f2:	68 a6 fd 02 c0       	push   0xc002fda6
c00126f7:	e8 1c d7 00 00       	call   c001fe18 <CPrintf>
c00126fc:	83 c4 10             	add    esp,0x10
c00126ff:	90                   	nop
c0012700:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012705:	c1 e0 04             	shl    eax,0x4
c0012708:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001270d:	8a 00                	mov    al,BYTE PTR [eax]
c001270f:	0f b6 c0             	movzx  eax,al
c0012712:	83 f8 01             	cmp    eax,0x1
c0012715:	74 09                	je     c0012720 <etharp_query+0x128>
c0012717:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001271c:	75 2a                	jne    c0012748 <etharp_query+0x150>
c001271e:	66 90                	xchg   ax,ax
c0012720:	83 ec 08             	sub    esp,0x8
c0012723:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012727:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001272b:	e8 8c fe ff ff       	call   c00125bc <etharp_request>
c0012730:	83 c4 10             	add    esp,0x10
c0012733:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012737:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001273c:	75 0a                	jne    c0012748 <etharp_query+0x150>
c001273e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012742:	e9 e9 01 00 00       	jmp    c0012930 <etharp_query+0x338>
c0012747:	90                   	nop
c0012748:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001274d:	75 15                	jne    c0012764 <etharp_query+0x16c>
c001274f:	83 ec 08             	sub    esp,0x8
c0012752:	68 1a 02 03 c0       	push   0xc003021a
c0012757:	68 a6 fd 02 c0       	push   0xc002fda6
c001275c:	e8 b7 d6 00 00       	call   c001fe18 <CPrintf>
c0012761:	83 c4 10             	add    esp,0x10
c0012764:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012769:	c1 e0 04             	shl    eax,0x4
c001276c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012771:	8a 00                	mov    al,BYTE PTR [eax]
c0012773:	0f b6 c0             	movzx  eax,al
c0012776:	83 f8 02             	cmp    eax,0x2
c0012779:	75 39                	jne    c00127b4 <etharp_query+0x1bc>
c001277b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001277f:	a2 e0 a8 03 c0       	mov    ds:0xc003a8e0,al
c0012784:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012789:	c1 e0 04             	shl    eax,0x4
c001278c:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012791:	83 c0 08             	add    eax,0x8
c0012794:	50                   	push   eax
c0012795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012799:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001279d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00127a1:	e8 da f6 ff ff       	call   c0011e80 <etharp_send_ip>
c00127a6:	83 c4 10             	add    esp,0x10
c00127a9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00127ad:	e9 7a 01 00 00       	jmp    c001292c <etharp_query+0x334>
c00127b2:	66 90                	xchg   ax,ax
c00127b4:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00127b9:	c1 e0 04             	shl    eax,0x4
c00127bc:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00127c1:	8a 00                	mov    al,BYTE PTR [eax]
c00127c3:	0f b6 c0             	movzx  eax,al
c00127c6:	83 f8 01             	cmp    eax,0x1
c00127c9:	0f 85 5d 01 00 00    	jne    c001292c <etharp_query+0x334>
c00127cf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00127d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00127db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127df:	eb 63                	jmp    c0012844 <etharp_query+0x24c>
c00127e1:	8d 76 00             	lea    esi,[esi+0x0]
c00127e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127e8:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00127ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00127f3:	0f b7 d2             	movzx  edx,dx
c00127f6:	0f b7 c0             	movzx  eax,ax
c00127f9:	39 c2                	cmp    edx,eax
c00127fb:	75 1f                	jne    c001281c <etharp_query+0x224>
c00127fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012801:	8b 00                	mov    eax,DWORD PTR [eax]
c0012803:	85 c0                	test   eax,eax
c0012805:	74 15                	je     c001281c <etharp_query+0x224>
c0012807:	83 ec 08             	sub    esp,0x8
c001280a:	68 21 0f 03 c0       	push   0xc0030f21
c001280f:	68 a6 fd 02 c0       	push   0xc002fda6
c0012814:	e8 ff d5 00 00       	call   c001fe18 <CPrintf>
c0012819:	83 c4 10             	add    esp,0x10
c001281c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012820:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0012823:	0f b6 c0             	movzx  eax,al
c0012826:	83 f8 01             	cmp    eax,0x1
c0012829:	74 0d                	je     c0012838 <etharp_query+0x240>
c001282b:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
c0012833:	eb 17                	jmp    c001284c <etharp_query+0x254>
c0012835:	8d 76 00             	lea    esi,[esi+0x0]
c0012838:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001283c:	8b 00                	mov    eax,DWORD PTR [eax]
c001283e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012842:	66 90                	xchg   ax,ax
c0012844:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012849:	75 99                	jne    c00127e4 <etharp_query+0x1ec>
c001284b:	90                   	nop
c001284c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012851:	74 59                	je     c00128ac <etharp_query+0x2b4>
c0012853:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012857:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001285a:	0f b7 c0             	movzx  eax,ax
c001285d:	83 ec 04             	sub    esp,0x4
c0012860:	6a 00                	push   0x0
c0012862:	50                   	push   eax
c0012863:	6a 03                	push   0x3
c0012865:	e8 62 5e ff ff       	call   c00086cc <pbuf_alloc>
c001286a:	83 c4 10             	add    esp,0x10
c001286d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012871:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012876:	74 4c                	je     c00128c4 <etharp_query+0x2cc>
c0012878:	83 ec 08             	sub    esp,0x8
c001287b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001287f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012883:	e8 a4 66 ff ff       	call   c0008f2c <pbuf_copy>
c0012888:	83 c4 10             	add    esp,0x10
c001288b:	0f be c0             	movsx  eax,al
c001288e:	85 c0                	test   eax,eax
c0012890:	74 32                	je     c00128c4 <etharp_query+0x2cc>
c0012892:	83 ec 0c             	sub    esp,0xc
c0012895:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012899:	e8 56 5c ff ff       	call   c00084f4 <pbuf_free>
c001289e:	83 c4 10             	add    esp,0x10
c00128a1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00128a9:	eb 19                	jmp    c00128c4 <etharp_query+0x2cc>
c00128ab:	90                   	nop
c00128ac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00128b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00128b4:	83 ec 0c             	sub    esp,0xc
c00128b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00128bb:	e8 3c 64 ff ff       	call   c0008cfc <pbuf_ref>
c00128c0:	83 c4 10             	add    esp,0x10
c00128c3:	90                   	nop
c00128c4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00128c9:	74 4d                	je     c0012918 <etharp_query+0x320>
c00128cb:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00128d0:	c1 e0 04             	shl    eax,0x4
c00128d3:	05 00 a9 03 c0       	add    eax,0xc003a900
c00128d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00128da:	85 c0                	test   eax,eax
c00128dc:	74 1e                	je     c00128fc <etharp_query+0x304>
c00128de:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00128e3:	c1 e0 04             	shl    eax,0x4
c00128e6:	05 00 a9 03 c0       	add    eax,0xc003a900
c00128eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00128ed:	83 ec 0c             	sub    esp,0xc
c00128f0:	50                   	push   eax
c00128f1:	e8 fe 5b ff ff       	call   c00084f4 <pbuf_free>
c00128f6:	83 c4 10             	add    esp,0x10
c00128f9:	8d 76 00             	lea    esi,[esi+0x0]
c00128fc:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012901:	c1 e0 04             	shl    eax,0x4
c0012904:	8d 90 00 a9 03 c0    	lea    edx,[eax-0x3ffc5700]
c001290a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001290e:	89 02                	mov    DWORD PTR [edx],eax
c0012910:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012915:	eb 15                	jmp    c001292c <etharp_query+0x334>
c0012917:	90                   	nop
c0012918:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c001291e:	83 c0 01             	add    eax,0x1
c0012921:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c0012927:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c001292c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012930:	83 c4 2c             	add    esp,0x2c
c0012933:	c3                   	ret    

c0012934 <etharp_output>:
c0012934:	83 ec 1c             	sub    esp,0x1c
c0012937:	83 ec 08             	sub    esp,0x8
c001293a:	6a 0e                	push   0xe
c001293c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012940:	e8 13 5a ff ff       	call   c0008358 <pbuf_header>
c0012945:	83 c4 10             	add    esp,0x10
c0012948:	0f b6 c0             	movzx  eax,al
c001294b:	85 c0                	test   eax,eax
c001294d:	74 19                	je     c0012968 <etharp_output+0x34>
c001294f:	66 a1 2a 67 03 c0    	mov    ax,ds:0xc003672a
c0012955:	83 c0 01             	add    eax,0x1
c0012958:	66 a3 2a 67 03 c0    	mov    ds:0xc003672a,ax
c001295e:	b0 fe                	mov    al,0xfe
c0012960:	e9 8b 01 00 00       	jmp    c0012af0 <etharp_output+0x1bc>
c0012965:	8d 76 00             	lea    esi,[esi+0x0]
c0012968:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012970:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012974:	8b 00                	mov    eax,DWORD PTR [eax]
c0012976:	83 ec 08             	sub    esp,0x8
c0012979:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001297d:	50                   	push   eax
c001297e:	e8 65 16 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0012983:	83 c4 10             	add    esp,0x10
c0012986:	0f b6 c0             	movzx  eax,al
c0012989:	85 c0                	test   eax,eax
c001298b:	74 0f                	je     c001299c <etharp_output+0x68>
c001298d:	c7 44 24 0c 44 0f 03 c0 	mov    DWORD PTR [esp+0xc],0xc0030f44
c0012995:	e9 3a 01 00 00       	jmp    c0012ad4 <etharp_output+0x1a0>
c001299a:	66 90                	xchg   ax,ax
c001299c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00129a2:	25 f0 00 00 00       	and    eax,0xf0
c00129a7:	3d e0 00 00 00       	cmp    eax,0xe0
c00129ac:	75 42                	jne    c00129f0 <etharp_output+0xbc>
c00129ae:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c00129b3:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c00129b8:	c6 44 24 08 5e       	mov    BYTE PTR [esp+0x8],0x5e
c00129bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129c1:	83 c0 01             	add    eax,0x1
c00129c4:	8a 00                	mov    al,BYTE PTR [eax]
c00129c6:	83 e0 7f             	and    eax,0x7f
c00129c9:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00129cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129d1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c00129d4:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00129d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129dc:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
c00129df:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00129e3:	8d 44 24 06          	lea    eax,[esp+0x6]
c00129e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129eb:	e9 e4 00 00 00       	jmp    c0012ad4 <etharp_output+0x1a0>
c00129f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00129f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129fd:	31 c2                	xor    edx,eax
c00129ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a03:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012a06:	21 d0                	and    eax,edx
c0012a08:	74 3a                	je     c0012a44 <etharp_output+0x110>
c0012a0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a10:	0f b7 c0             	movzx  eax,ax
c0012a13:	3d a9 fe 00 00       	cmp    eax,0xfea9
c0012a18:	74 2a                	je     c0012a44 <etharp_output+0x110>
c0012a1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a1e:	83 c0 0c             	add    eax,0xc
c0012a21:	74 19                	je     c0012a3c <etharp_output+0x108>
c0012a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a27:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012a2a:	85 c0                	test   eax,eax
c0012a2c:	74 0e                	je     c0012a3c <etharp_output+0x108>
c0012a2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a32:	83 c0 0c             	add    eax,0xc
c0012a35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012a39:	eb 09                	jmp    c0012a44 <etharp_output+0x110>
c0012a3b:	90                   	nop
c0012a3c:	b0 fc                	mov    al,0xfc
c0012a3e:	e9 ad 00 00 00       	jmp    c0012af0 <etharp_output+0x1bc>
c0012a43:	90                   	nop
c0012a44:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c0012a49:	0f b6 c0             	movzx  eax,al
c0012a4c:	c1 e0 04             	shl    eax,0x4
c0012a4f:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012a54:	8a 00                	mov    al,BYTE PTR [eax]
c0012a56:	0f b6 c0             	movzx  eax,al
c0012a59:	83 f8 02             	cmp    eax,0x2
c0012a5c:	75 5a                	jne    c0012ab8 <etharp_output+0x184>
c0012a5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a62:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a64:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c0012a69:	0f b6 c0             	movzx  eax,al
c0012a6c:	c1 e0 04             	shl    eax,0x4
c0012a6f:	05 04 a9 03 c0       	add    eax,0xc003a904
c0012a74:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a76:	39 c2                	cmp    edx,eax
c0012a78:	75 3e                	jne    c0012ab8 <etharp_output+0x184>
c0012a7a:	66 a1 4e 67 03 c0    	mov    ax,ds:0xc003674e
c0012a80:	83 c0 01             	add    eax,0x1
c0012a83:	66 a3 4e 67 03 c0    	mov    ds:0xc003674e,ax
c0012a89:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c0012a8e:	0f b6 c0             	movzx  eax,al
c0012a91:	c1 e0 04             	shl    eax,0x4
c0012a94:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012a99:	8d 50 08             	lea    edx,[eax+0x8]
c0012a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012aa0:	83 c0 23             	add    eax,0x23
c0012aa3:	52                   	push   edx
c0012aa4:	50                   	push   eax
c0012aa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012aa9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012aad:	e8 ce f3 ff ff       	call   c0011e80 <etharp_send_ip>
c0012ab2:	83 c4 10             	add    esp,0x10
c0012ab5:	eb 39                	jmp    c0012af0 <etharp_output+0x1bc>
c0012ab7:	90                   	nop
c0012ab8:	83 ec 04             	sub    esp,0x4
c0012abb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012abf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012ac3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ac7:	e8 2c fb ff ff       	call   c00125f8 <etharp_query>
c0012acc:	83 c4 10             	add    esp,0x10
c0012acf:	eb 1f                	jmp    c0012af0 <etharp_output+0x1bc>
c0012ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0012ad4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ad8:	83 c0 23             	add    eax,0x23
c0012adb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012adf:	50                   	push   eax
c0012ae0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ae4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ae8:	e8 93 f3 ff ff       	call   c0011e80 <etharp_send_ip>
c0012aed:	83 c4 10             	add    esp,0x10
c0012af0:	83 c4 1c             	add    esp,0x1c
c0012af3:	c3                   	ret    

c0012af4 <ethernet_input>:
c0012af4:	83 ec 1c             	sub    esp,0x1c
c0012af7:	66 c7 44 24 0e 0e 00 	mov    WORD PTR [esp+0xe],0xe
c0012afe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b02:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012b06:	0f b7 c0             	movzx  eax,ax
c0012b09:	83 f8 0e             	cmp    eax,0xe
c0012b0c:	77 26                	ja     c0012b34 <ethernet_input+0x40>
c0012b0e:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012b14:	83 c0 01             	add    eax,0x1
c0012b17:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012b1d:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012b23:	83 c0 01             	add    eax,0x1
c0012b26:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012b2c:	e9 ef 00 00 00       	jmp    c0012c20 <ethernet_input+0x12c>
c0012b31:	8d 76 00             	lea    esi,[esi+0x0]
c0012b34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b43:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0012b47:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0012b4c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0012b51:	83 f8 08             	cmp    eax,0x8
c0012b54:	74 0e                	je     c0012b64 <ethernet_input+0x70>
c0012b56:	3d 08 06 00 00       	cmp    eax,0x608
c0012b5b:	74 6b                	je     c0012bc8 <ethernet_input+0xd4>
c0012b5d:	e9 92 00 00 00       	jmp    c0012bf4 <ethernet_input+0x100>
c0012b62:	66 90                	xchg   ax,ax
c0012b64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b68:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012b6b:	0f b6 c0             	movzx  eax,al
c0012b6e:	83 e0 20             	and    eax,0x20
c0012b71:	0f 84 a1 00 00 00    	je     c0012c18 <ethernet_input+0x124>
c0012b77:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0012b7c:	f7 d8                	neg    eax
c0012b7e:	98                   	cwde   
c0012b7f:	83 ec 08             	sub    esp,0x8
c0012b82:	50                   	push   eax
c0012b83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b87:	e8 cc 57 ff ff       	call   c0008358 <pbuf_header>
c0012b8c:	83 c4 10             	add    esp,0x10
c0012b8f:	0f b6 c0             	movzx  eax,al
c0012b92:	85 c0                	test   eax,eax
c0012b94:	74 1a                	je     c0012bb0 <ethernet_input+0xbc>
c0012b96:	83 ec 08             	sub    esp,0x8
c0012b99:	68 c8 0e 03 c0       	push   0xc0030ec8
c0012b9e:	68 a6 fd 02 c0       	push   0xc002fda6
c0012ba3:	e8 70 d2 00 00       	call   c001fe18 <CPrintf>
c0012ba8:	83 c4 10             	add    esp,0x10
c0012bab:	eb 73                	jmp    c0012c20 <ethernet_input+0x12c>
c0012bad:	8d 76 00             	lea    esi,[esi+0x0]
c0012bb0:	83 ec 08             	sub    esp,0x8
c0012bb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012bb7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012bbb:	e8 70 0c 00 00       	call   c0013830 <ip_input>
c0012bc0:	83 c4 10             	add    esp,0x10
c0012bc3:	eb 4f                	jmp    c0012c14 <ethernet_input+0x120>
c0012bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0012bc8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012bcc:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012bcf:	0f b6 c0             	movzx  eax,al
c0012bd2:	83 e0 20             	and    eax,0x20
c0012bd5:	74 45                	je     c0012c1c <ethernet_input+0x128>
c0012bd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012bdb:	83 c0 23             	add    eax,0x23
c0012bde:	83 ec 04             	sub    esp,0x4
c0012be1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012be5:	50                   	push   eax
c0012be6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012bea:	e8 09 f5 ff ff       	call   c00120f8 <etharp_arp_input>
c0012bef:	83 c4 10             	add    esp,0x10
c0012bf2:	eb 20                	jmp    c0012c14 <ethernet_input+0x120>
c0012bf4:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012bfa:	83 c0 01             	add    eax,0x1
c0012bfd:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012c03:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012c09:	83 c0 01             	add    eax,0x1
c0012c0c:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012c12:	eb 0c                	jmp    c0012c20 <ethernet_input+0x12c>
c0012c14:	b0 00                	mov    al,0x0
c0012c16:	eb 1c                	jmp    c0012c34 <ethernet_input+0x140>
c0012c18:	90                   	nop
c0012c19:	eb 05                	jmp    c0012c20 <ethernet_input+0x12c>
c0012c1b:	90                   	nop
c0012c1c:	90                   	nop
c0012c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0012c20:	83 ec 0c             	sub    esp,0xc
c0012c23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c27:	e8 c8 58 ff ff       	call   c00084f4 <pbuf_free>
c0012c2c:	83 c4 10             	add    esp,0x10
c0012c2f:	b0 00                	mov    al,0x0
c0012c31:	8d 76 00             	lea    esi,[esi+0x0]
c0012c34:	83 c4 1c             	add    esp,0x1c
c0012c37:	c3                   	ret    

c0012c38 <icmp_input>:
c0012c38:	83 ec 2c             	sub    esp,0x2c
c0012c3b:	66 a1 82 67 03 c0    	mov    ax,ds:0xc0036782
c0012c41:	83 c0 01             	add    eax,0x1
c0012c44:	66 a3 82 67 03 c0    	mov    ds:0xc0036782,ax
c0012c4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c59:	66 8b 00             	mov    ax,WORD PTR [eax]
c0012c5c:	0f b7 c0             	movzx  eax,ax
c0012c5f:	83 ec 0c             	sub    esp,0xc
c0012c62:	50                   	push   eax
c0012c63:	e8 80 df fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0012c68:	83 c4 10             	add    esp,0x10
c0012c6b:	0f b7 c0             	movzx  eax,ax
c0012c6e:	c1 e8 08             	shr    eax,0x8
c0012c71:	83 e0 0f             	and    eax,0xf
c0012c74:	c1 e0 02             	shl    eax,0x2
c0012c77:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0012c7c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012c81:	f7 d8                	neg    eax
c0012c83:	98                   	cwde   
c0012c84:	83 ec 08             	sub    esp,0x8
c0012c87:	50                   	push   eax
c0012c88:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c8c:	e8 c7 56 ff ff       	call   c0008358 <pbuf_header>
c0012c91:	83 c4 10             	add    esp,0x10
c0012c94:	0f b6 c0             	movzx  eax,al
c0012c97:	85 c0                	test   eax,eax
c0012c99:	0f 85 a9 03 00 00    	jne    c0013048 <icmp_input+0x410>
c0012c9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ca3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012ca6:	0f b7 c0             	movzx  eax,ax
c0012ca9:	83 f8 03             	cmp    eax,0x3
c0012cac:	0f 86 96 03 00 00    	jbe    c0013048 <icmp_input+0x410>
c0012cb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012cb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cb9:	8a 00                	mov    al,BYTE PTR [eax]
c0012cbb:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012cbf:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012cc4:	85 c0                	test   eax,eax
c0012cc6:	0f 84 64 03 00 00    	je     c0013030 <icmp_input+0x3f8>
c0012ccc:	83 f8 08             	cmp    eax,0x8
c0012ccf:	0f 85 3b 03 00 00    	jne    c0013010 <icmp_input+0x3d8>
c0012cd5:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0012cdd:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012ce2:	25 f0 00 00 00       	and    eax,0xf0
c0012ce7:	3d e0 00 00 00       	cmp    eax,0xe0
c0012cec:	75 0a                	jne    c0012cf8 <icmp_input+0xc0>
c0012cee:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012cf6:	66 90                	xchg   ax,ax
c0012cf8:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012cfd:	83 ec 08             	sub    esp,0x8
c0012d00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d04:	50                   	push   eax
c0012d05:	e8 de 12 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0012d0a:	83 c4 10             	add    esp,0x10
c0012d0d:	0f b6 c0             	movzx  eax,al
c0012d10:	85 c0                	test   eax,eax
c0012d12:	74 08                	je     c0012d1c <icmp_input+0xe4>
c0012d14:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012d1c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012d21:	75 25                	jne    c0012d48 <icmp_input+0x110>
c0012d23:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012d29:	83 c0 01             	add    eax,0x1
c0012d2c:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012d32:	83 ec 0c             	sub    esp,0xc
c0012d35:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d39:	e8 b6 57 ff ff       	call   c00084f4 <pbuf_free>
c0012d3e:	83 c4 10             	add    esp,0x10
c0012d41:	e9 4e 03 00 00       	jmp    c0013094 <icmp_input+0x45c>
c0012d46:	66 90                	xchg   ax,ax
c0012d48:	90                   	nop
c0012d49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d4d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012d50:	0f b7 c0             	movzx  eax,ax
c0012d53:	83 f8 07             	cmp    eax,0x7
c0012d56:	0f 86 f0 02 00 00    	jbe    c001304c <icmp_input+0x414>
c0012d5c:	83 ec 0c             	sub    esp,0xc
c0012d5f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d63:	e8 50 09 00 00       	call   c00136b8 <inet_chksum_pbuf>
c0012d68:	83 c4 10             	add    esp,0x10
c0012d6b:	0f b7 c0             	movzx  eax,ax
c0012d6e:	85 c0                	test   eax,eax
c0012d70:	74 26                	je     c0012d98 <icmp_input+0x160>
c0012d72:	83 ec 0c             	sub    esp,0xc
c0012d75:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d79:	e8 76 57 ff ff       	call   c00084f4 <pbuf_free>
c0012d7e:	83 c4 10             	add    esp,0x10
c0012d81:	66 a1 88 67 03 c0    	mov    ax,ds:0xc0036788
c0012d87:	83 c0 01             	add    eax,0x1
c0012d8a:	66 a3 88 67 03 c0    	mov    ds:0xc0036788,ax
c0012d90:	e9 ff 02 00 00       	jmp    c0013094 <icmp_input+0x45c>
c0012d95:	8d 76 00             	lea    esi,[esi+0x0]
c0012d98:	83 ec 08             	sub    esp,0x8
c0012d9b:	6a 22                	push   0x22
c0012d9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012da1:	e8 b2 55 ff ff       	call   c0008358 <pbuf_header>
c0012da6:	83 c4 10             	add    esp,0x10
c0012da9:	0f b6 c0             	movzx  eax,al
c0012dac:	85 c0                	test   eax,eax
c0012dae:	0f 84 24 01 00 00    	je     c0012ed8 <icmp_input+0x2a0>
c0012db4:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012db9:	83 ec 08             	sub    esp,0x8
c0012dbc:	50                   	push   eax
c0012dbd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012dc1:	e8 92 55 ff ff       	call   c0008358 <pbuf_header>
c0012dc6:	83 c4 10             	add    esp,0x10
c0012dc9:	0f b6 c0             	movzx  eax,al
c0012dcc:	85 c0                	test   eax,eax
c0012dce:	74 1c                	je     c0012dec <icmp_input+0x1b4>
c0012dd0:	83 ec 08             	sub    esp,0x8
c0012dd3:	68 4c 0f 03 c0       	push   0xc0030f4c
c0012dd8:	68 a6 fd 02 c0       	push   0xc002fda6
c0012ddd:	e8 36 d0 00 00       	call   c001fe18 <CPrintf>
c0012de2:	83 c4 10             	add    esp,0x10
c0012de5:	e9 8a 02 00 00       	jmp    c0013074 <icmp_input+0x43c>
c0012dea:	66 90                	xchg   ax,ax
c0012dec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012df0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012df3:	0f b7 c0             	movzx  eax,ax
c0012df6:	83 ec 04             	sub    esp,0x4
c0012df9:	6a 00                	push   0x0
c0012dfb:	50                   	push   eax
c0012dfc:	6a 02                	push   0x2
c0012dfe:	e8 c9 58 ff ff       	call   c00086cc <pbuf_alloc>
c0012e03:	83 c4 10             	add    esp,0x10
c0012e06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012e0a:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012e0f:	0f 84 5b 02 00 00    	je     c0013070 <icmp_input+0x438>
c0012e15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e19:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012e1d:	0f b7 c0             	movzx  eax,ax
c0012e20:	0f bf 54 24 16       	movsx  edx,WORD PTR [esp+0x16]
c0012e25:	83 c2 08             	add    edx,0x8
c0012e28:	39 d0                	cmp    eax,edx
c0012e2a:	73 18                	jae    c0012e44 <icmp_input+0x20c>
c0012e2c:	83 ec 08             	sub    esp,0x8
c0012e2f:	68 80 0f 03 c0       	push   0xc0030f80
c0012e34:	68 a6 fd 02 c0       	push   0xc002fda6
c0012e39:	e8 da cf 00 00       	call   c001fe18 <CPrintf>
c0012e3e:	83 c4 10             	add    esp,0x10
c0012e41:	8d 76 00             	lea    esi,[esi+0x0]
c0012e44:	83 ec 08             	sub    esp,0x8
c0012e47:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e4f:	e8 d8 60 ff ff       	call   c0008f2c <pbuf_copy>
c0012e54:	83 c4 10             	add    esp,0x10
c0012e57:	0f be c0             	movsx  eax,al
c0012e5a:	85 c0                	test   eax,eax
c0012e5c:	74 1a                	je     c0012e78 <icmp_input+0x240>
c0012e5e:	83 ec 08             	sub    esp,0x8
c0012e61:	68 b8 0f 03 c0       	push   0xc0030fb8
c0012e66:	68 a6 fd 02 c0       	push   0xc002fda6
c0012e6b:	e8 a8 cf 00 00       	call   c001fe18 <CPrintf>
c0012e70:	83 c4 10             	add    esp,0x10
c0012e73:	e9 fc 01 00 00       	jmp    c0013074 <icmp_input+0x43c>
c0012e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e7f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012e83:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012e88:	f7 d8                	neg    eax
c0012e8a:	98                   	cwde   
c0012e8b:	83 ec 08             	sub    esp,0x8
c0012e8e:	50                   	push   eax
c0012e8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e93:	e8 c0 54 ff ff       	call   c0008358 <pbuf_header>
c0012e98:	83 c4 10             	add    esp,0x10
c0012e9b:	0f b6 c0             	movzx  eax,al
c0012e9e:	85 c0                	test   eax,eax
c0012ea0:	74 1a                	je     c0012ebc <icmp_input+0x284>
c0012ea2:	83 ec 08             	sub    esp,0x8
c0012ea5:	68 e0 0f 03 c0       	push   0xc0030fe0
c0012eaa:	68 a6 fd 02 c0       	push   0xc002fda6
c0012eaf:	e8 64 cf 00 00       	call   c001fe18 <CPrintf>
c0012eb4:	83 c4 10             	add    esp,0x10
c0012eb7:	e9 b8 01 00 00       	jmp    c0013074 <icmp_input+0x43c>
c0012ebc:	83 ec 0c             	sub    esp,0xc
c0012ebf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ec3:	e8 2c 56 ff ff       	call   c00084f4 <pbuf_free>
c0012ec8:	83 c4 10             	add    esp,0x10
c0012ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ecf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012ed3:	eb 37                	jmp    c0012f0c <icmp_input+0x2d4>
c0012ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ed8:	83 ec 08             	sub    esp,0x8
c0012edb:	6a de                	push   0xffffffde
c0012edd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ee1:	e8 72 54 ff ff       	call   c0008358 <pbuf_header>
c0012ee6:	83 c4 10             	add    esp,0x10
c0012ee9:	0f b6 c0             	movzx  eax,al
c0012eec:	85 c0                	test   eax,eax
c0012eee:	74 1c                	je     c0012f0c <icmp_input+0x2d4>
c0012ef0:	83 ec 08             	sub    esp,0x8
c0012ef3:	68 e0 0f 03 c0       	push   0xc0030fe0
c0012ef8:	68 a6 fd 02 c0       	push   0xc002fda6
c0012efd:	e8 16 cf 00 00       	call   c001fe18 <CPrintf>
c0012f02:	83 c4 10             	add    esp,0x10
c0012f05:	e9 6a 01 00 00       	jmp    c0013074 <icmp_input+0x43c>
c0012f0a:	66 90                	xchg   ax,ax
c0012f0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012f17:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c0012f1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f21:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012f24:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c0012f2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f2e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012f31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f35:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f3c:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012f40:	0f b7 c0             	movzx  eax,ax
c0012f43:	3d f6 ff 00 00       	cmp    eax,0xfff6
c0012f48:	76 16                	jbe    c0012f60 <icmp_input+0x328>
c0012f4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f4e:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012f52:	83 c0 09             	add    eax,0x9
c0012f55:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012f59:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012f5d:	eb 15                	jmp    c0012f74 <icmp_input+0x33c>
c0012f5f:	90                   	nop
c0012f60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f64:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012f68:	83 c0 08             	add    eax,0x8
c0012f6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012f6f:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012f73:	90                   	nop
c0012f74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f78:	c6 40 08 ff          	mov    BYTE PTR [eax+0x8],0xff
c0012f7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f80:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0012f86:	83 ec 08             	sub    esp,0x8
c0012f89:	6a 14                	push   0x14
c0012f8b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012f8f:	e8 fc 06 00 00       	call   c0013690 <inet_chksum>
c0012f94:	83 c4 10             	add    esp,0x10
c0012f97:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012f9b:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0012f9f:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0012fa5:	83 c0 01             	add    eax,0x1
c0012fa8:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c0012fae:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012fb3:	83 ec 08             	sub    esp,0x8
c0012fb6:	50                   	push   eax
c0012fb7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012fbb:	e8 98 53 ff ff       	call   c0008358 <pbuf_header>
c0012fc0:	83 c4 10             	add    esp,0x10
c0012fc3:	0f b6 c0             	movzx  eax,al
c0012fc6:	85 c0                	test   eax,eax
c0012fc8:	74 1a                	je     c0012fe4 <icmp_input+0x3ac>
c0012fca:	83 ec 08             	sub    esp,0x8
c0012fcd:	68 c8 0e 03 c0       	push   0xc0030ec8
c0012fd2:	68 a6 fd 02 c0       	push   0xc002fda6
c0012fd7:	e8 3c ce 00 00       	call   c001fe18 <CPrintf>
c0012fdc:	83 c4 10             	add    esp,0x10
c0012fdf:	eb 53                	jmp    c0013034 <icmp_input+0x3fc>
c0012fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0012fe4:	83 ec 04             	sub    esp,0x4
c0012fe7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012feb:	6a 01                	push   0x1
c0012fed:	6a 00                	push   0x0
c0012fef:	68 ff 00 00 00       	push   0xff
c0012ff4:	6a 00                	push   0x0
c0012ff6:	68 98 68 03 c0       	push   0xc0036898
c0012ffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012fff:	e8 70 0c 00 00       	call   c0013c74 <ip_output_if>
c0013004:	83 c4 20             	add    esp,0x20
c0013007:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001300b:	eb 27                	jmp    c0013034 <icmp_input+0x3fc>
c001300d:	8d 76 00             	lea    esi,[esi+0x0]
c0013010:	66 a1 90 67 03 c0    	mov    ax,ds:0xc0036790
c0013016:	83 c0 01             	add    eax,0x1
c0013019:	66 a3 90 67 03 c0    	mov    ds:0xc0036790,ax
c001301f:	66 a1 86 67 03 c0    	mov    ax,ds:0xc0036786
c0013025:	83 c0 01             	add    eax,0x1
c0013028:	66 a3 86 67 03 c0    	mov    ds:0xc0036786,ax
c001302e:	eb 04                	jmp    c0013034 <icmp_input+0x3fc>
c0013030:	90                   	nop
c0013031:	8d 76 00             	lea    esi,[esi+0x0]
c0013034:	83 ec 0c             	sub    esp,0xc
c0013037:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001303b:	e8 b4 54 ff ff       	call   c00084f4 <pbuf_free>
c0013040:	83 c4 10             	add    esp,0x10
c0013043:	eb 4f                	jmp    c0013094 <icmp_input+0x45c>
c0013045:	8d 76 00             	lea    esi,[esi+0x0]
c0013048:	90                   	nop
c0013049:	eb 05                	jmp    c0013050 <icmp_input+0x418>
c001304b:	90                   	nop
c001304c:	90                   	nop
c001304d:	8d 76 00             	lea    esi,[esi+0x0]
c0013050:	83 ec 0c             	sub    esp,0xc
c0013053:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013057:	e8 98 54 ff ff       	call   c00084f4 <pbuf_free>
c001305c:	83 c4 10             	add    esp,0x10
c001305f:	66 a1 8a 67 03 c0    	mov    ax,ds:0xc003678a
c0013065:	83 c0 01             	add    eax,0x1
c0013068:	66 a3 8a 67 03 c0    	mov    ds:0xc003678a,ax
c001306e:	eb 24                	jmp    c0013094 <icmp_input+0x45c>
c0013070:	90                   	nop
c0013071:	8d 76 00             	lea    esi,[esi+0x0]
c0013074:	83 ec 0c             	sub    esp,0xc
c0013077:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001307b:	e8 74 54 ff ff       	call   c00084f4 <pbuf_free>
c0013080:	83 c4 10             	add    esp,0x10
c0013083:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0013089:	83 c0 01             	add    eax,0x1
c001308c:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0013092:	90                   	nop
c0013093:	90                   	nop
c0013094:	83 c4 2c             	add    esp,0x2c
c0013097:	c3                   	ret    

c0013098 <icmp_send_response>:
c0013098:	83 ec 2c             	sub    esp,0x2c
c001309b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001309f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00130a3:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00130a7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00130ab:	83 ec 04             	sub    esp,0x4
c00130ae:	6a 00                	push   0x0
c00130b0:	6a 24                	push   0x24
c00130b2:	6a 01                	push   0x1
c00130b4:	e8 13 56 ff ff       	call   c00086cc <pbuf_alloc>
c00130b9:	83 c4 10             	add    esp,0x10
c00130bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00130c0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00130c5:	0f 84 fd 00 00 00    	je     c00131c8 <icmp_send_response+0x130>
c00130cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130cf:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00130d3:	0f b7 c0             	movzx  eax,ax
c00130d6:	83 f8 23             	cmp    eax,0x23
c00130d9:	77 15                	ja     c00130f0 <icmp_send_response+0x58>
c00130db:	83 ec 08             	sub    esp,0x8
c00130de:	68 14 10 03 c0       	push   0xc0031014
c00130e3:	68 a6 fd 02 c0       	push   0xc002fda6
c00130e8:	e8 2b cd 00 00       	call   c001fe18 <CPrintf>
c00130ed:	83 c4 10             	add    esp,0x10
c00130f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00130f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00130fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013102:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013106:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001310a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001310e:	88 10                	mov    BYTE PTR [eax],dl
c0013110:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013114:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0013118:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001311b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001311f:	66 c7 40 04 00 00    	mov    WORD PTR [eax+0x4],0x0
c0013125:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013129:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c001312f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013133:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013136:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001313a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001313d:	83 c2 08             	add    edx,0x8
c0013140:	83 ec 04             	sub    esp,0x4
c0013143:	6a 1c                	push   0x1c
c0013145:	50                   	push   eax
c0013146:	52                   	push   edx
c0013147:	e8 2e d2 fe ff       	call   c000037a <memcpy>
c001314c:	83 c4 10             	add    esp,0x10
c001314f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013153:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0013159:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001315d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013161:	0f b7 c0             	movzx  eax,ax
c0013164:	83 ec 08             	sub    esp,0x8
c0013167:	50                   	push   eax
c0013168:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001316c:	e8 1f 05 00 00       	call   c0013690 <inet_chksum>
c0013171:	83 c4 10             	add    esp,0x10
c0013174:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013178:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c001317c:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0013182:	83 c0 01             	add    eax,0x1
c0013185:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c001318b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001318f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013192:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013196:	83 ec 08             	sub    esp,0x8
c0013199:	6a 01                	push   0x1
c001319b:	6a 00                	push   0x0
c001319d:	68 ff 00 00 00       	push   0xff
c00131a2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00131a6:	50                   	push   eax
c00131a7:	6a 00                	push   0x0
c00131a9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00131ad:	e8 92 0d 00 00       	call   c0013f44 <ip_output>
c00131b2:	83 c4 20             	add    esp,0x20
c00131b5:	83 ec 0c             	sub    esp,0xc
c00131b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00131bc:	e8 33 53 ff ff       	call   c00084f4 <pbuf_free>
c00131c1:	83 c4 10             	add    esp,0x10
c00131c4:	eb 06                	jmp    c00131cc <icmp_send_response+0x134>
c00131c6:	66 90                	xchg   ax,ax
c00131c8:	90                   	nop
c00131c9:	8d 76 00             	lea    esi,[esi+0x0]
c00131cc:	83 c4 2c             	add    esp,0x2c
c00131cf:	c3                   	ret    

c00131d0 <icmp_dest_unreach>:
c00131d0:	83 ec 0c             	sub    esp,0xc
c00131d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131d7:	0f b6 c0             	movzx  eax,al
c00131da:	83 ec 04             	sub    esp,0x4
c00131dd:	50                   	push   eax
c00131de:	6a 03                	push   0x3
c00131e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131e4:	e8 af fe ff ff       	call   c0013098 <icmp_send_response>
c00131e9:	83 c4 10             	add    esp,0x10
c00131ec:	90                   	nop
c00131ed:	83 c4 0c             	add    esp,0xc
c00131f0:	c3                   	ret    
c00131f1:	8d 76 00             	lea    esi,[esi+0x0]

c00131f4 <icmp_time_exceeded>:
c00131f4:	83 ec 0c             	sub    esp,0xc
c00131f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131fb:	0f b6 c0             	movzx  eax,al
c00131fe:	83 ec 04             	sub    esp,0x4
c0013201:	50                   	push   eax
c0013202:	6a 0b                	push   0xb
c0013204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013208:	e8 8b fe ff ff       	call   c0013098 <icmp_send_response>
c001320d:	83 c4 10             	add    esp,0x10
c0013210:	90                   	nop
c0013211:	83 c4 0c             	add    esp,0xc
c0013214:	c3                   	ret    
c0013215:	66 90                	xchg   ax,ax
c0013217:	90                   	nop

c0013218 <lwip_standard_chksum>:
c0013218:	83 ec 2c             	sub    esp,0x2c
c001321b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001321f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013223:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c001322a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013232:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013236:	83 e0 01             	and    eax,0x1
c0013239:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001323d:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013242:	74 24                	je     c0013268 <lwip_standard_chksum+0x50>
c0013244:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013249:	7e 1d                	jle    c0013268 <lwip_standard_chksum+0x50>
c001324b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001324f:	8d 42 01             	lea    eax,[edx+0x1]
c0013252:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013256:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001325a:	83 c0 01             	add    eax,0x1
c001325d:	8a 12                	mov    dl,BYTE PTR [edx]
c001325f:	88 10                	mov    BYTE PTR [eax],dl
c0013261:	83 6c 24 34 01       	sub    DWORD PTR [esp+0x34],0x1
c0013266:	66 90                	xchg   ax,ax
c0013268:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001326c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013270:	eb 1e                	jmp    c0013290 <lwip_standard_chksum+0x78>
c0013272:	66 90                	xchg   ax,ax
c0013274:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013278:	8d 50 02             	lea    edx,[eax+0x2]
c001327b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001327f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013282:	0f b7 c0             	movzx  eax,ax
c0013285:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013289:	83 6c 24 34 02       	sub    DWORD PTR [esp+0x34],0x2
c001328e:	66 90                	xchg   ax,ax
c0013290:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0013295:	7f dd                	jg     c0013274 <lwip_standard_chksum+0x5c>
c0013297:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001329c:	7e 0e                	jle    c00132ac <lwip_standard_chksum+0x94>
c001329e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00132a2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00132a6:	8a 12                	mov    dl,BYTE PTR [edx]
c00132a8:	88 10                	mov    BYTE PTR [eax],dl
c00132aa:	66 90                	xchg   ax,ax
c00132ac:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00132b1:	0f b7 c0             	movzx  eax,ax
c00132b4:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00132b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132bc:	c1 e8 10             	shr    eax,0x10
c00132bf:	89 c2                	mov    edx,eax
c00132c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132c5:	0f b7 c0             	movzx  eax,ax
c00132c8:	01 d0                	add    eax,edx
c00132ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00132ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132d2:	c1 e8 10             	shr    eax,0x10
c00132d5:	89 c2                	mov    edx,eax
c00132d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132db:	0f b7 c0             	movzx  eax,ax
c00132de:	01 d0                	add    eax,edx
c00132e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00132e4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00132e9:	74 1d                	je     c0013308 <lwip_standard_chksum+0xf0>
c00132eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132ef:	0f b7 c0             	movzx  eax,ax
c00132f2:	83 ec 0c             	sub    esp,0xc
c00132f5:	50                   	push   eax
c00132f6:	e8 ed d8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00132fb:	83 c4 10             	add    esp,0x10
c00132fe:	0f b7 c0             	movzx  eax,ax
c0013301:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013305:	8d 76 00             	lea    esi,[esi+0x0]
c0013308:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001330c:	83 c4 2c             	add    esp,0x2c
c001330f:	c3                   	ret    

c0013310 <inet_chksum_pseudo>:
c0013310:	83 ec 2c             	sub    esp,0x2c
c0013313:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013317:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001331b:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001331f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013324:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001332c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013331:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013335:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013339:	e9 8a 00 00 00       	jmp    c00133c8 <inet_chksum_pseudo+0xb8>
c001333e:	66 90                	xchg   ax,ax
c0013340:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013344:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013348:	0f b7 d0             	movzx  edx,ax
c001334b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001334f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013352:	83 ec 08             	sub    esp,0x8
c0013355:	52                   	push   edx
c0013356:	50                   	push   eax
c0013357:	e8 bc fe ff ff       	call   c0013218 <lwip_standard_chksum>
c001335c:	83 c4 10             	add    esp,0x10
c001335f:	0f b7 c0             	movzx  eax,ax
c0013362:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013366:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001336a:	c1 e8 10             	shr    eax,0x10
c001336d:	89 c2                	mov    edx,eax
c001336f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013373:	0f b7 c0             	movzx  eax,ax
c0013376:	01 d0                	add    eax,edx
c0013378:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001337c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013380:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013384:	83 e0 01             	and    eax,0x1
c0013387:	0f b7 c0             	movzx  eax,ax
c001338a:	85 c0                	test   eax,eax
c001338c:	74 2e                	je     c00133bc <inet_chksum_pseudo+0xac>
c001338e:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0013392:	ba 01 00 00 00       	mov    edx,0x1
c0013397:	29 c2                	sub    edx,eax
c0013399:	89 d0                	mov    eax,edx
c001339b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001339f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133a3:	0f b7 c0             	movzx  eax,ax
c00133a6:	83 ec 0c             	sub    esp,0xc
c00133a9:	50                   	push   eax
c00133aa:	e8 39 d8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00133af:	83 c4 10             	add    esp,0x10
c00133b2:	0f b7 c0             	movzx  eax,ax
c00133b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133b9:	8d 76 00             	lea    esi,[esi+0x0]
c00133bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00133c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00133c6:	66 90                	xchg   ax,ax
c00133c8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00133cd:	0f 85 6d ff ff ff    	jne    c0013340 <inet_chksum_pseudo+0x30>
c00133d3:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00133d8:	85 c0                	test   eax,eax
c00133da:	74 1c                	je     c00133f8 <inet_chksum_pseudo+0xe8>
c00133dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133e0:	0f b7 c0             	movzx  eax,ax
c00133e3:	83 ec 0c             	sub    esp,0xc
c00133e6:	50                   	push   eax
c00133e7:	e8 fc d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00133ec:	83 c4 10             	add    esp,0x10
c00133ef:	0f b7 c0             	movzx  eax,ax
c00133f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133f6:	66 90                	xchg   ax,ax
c00133f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00133fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00133fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013406:	0f b7 c0             	movzx  eax,ax
c0013409:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001340d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013411:	c1 e8 10             	shr    eax,0x10
c0013414:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013418:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001341c:	8b 00                	mov    eax,DWORD PTR [eax]
c001341e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013426:	0f b7 c0             	movzx  eax,ax
c0013429:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001342d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013431:	c1 e8 10             	shr    eax,0x10
c0013434:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013438:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001343d:	83 ec 0c             	sub    esp,0xc
c0013440:	50                   	push   eax
c0013441:	e8 a2 d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013446:	83 c4 10             	add    esp,0x10
c0013449:	0f b7 c0             	movzx  eax,ax
c001344c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013450:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0013455:	83 ec 0c             	sub    esp,0xc
c0013458:	50                   	push   eax
c0013459:	e8 8a d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001345e:	83 c4 10             	add    esp,0x10
c0013461:	0f b7 c0             	movzx  eax,ax
c0013464:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013468:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001346c:	c1 e8 10             	shr    eax,0x10
c001346f:	89 c2                	mov    edx,eax
c0013471:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013475:	0f b7 c0             	movzx  eax,ax
c0013478:	01 d0                	add    eax,edx
c001347a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001347e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013482:	c1 e8 10             	shr    eax,0x10
c0013485:	89 c2                	mov    edx,eax
c0013487:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001348b:	0f b7 c0             	movzx  eax,ax
c001348e:	01 d0                	add    eax,edx
c0013490:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013494:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013498:	f7 d0                	not    eax
c001349a:	83 c4 2c             	add    esp,0x2c
c001349d:	c3                   	ret    
c001349e:	66 90                	xchg   ax,ax

c00134a0 <inet_chksum_pseudo_partial>:
c00134a0:	83 ec 2c             	sub    esp,0x2c
c00134a3:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00134a7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00134ab:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00134af:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00134b3:	66 89 54 24 08       	mov    WORD PTR [esp+0x8],dx
c00134b8:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00134bd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00134c5:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00134ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00134d2:	e9 d9 00 00 00       	jmp    c00135b0 <inet_chksum_pseudo_partial+0x110>
c00134d7:	90                   	nop
c00134d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134dc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00134e0:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00134e5:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c00134ea:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00134ef:	39 c2                	cmp    edx,eax
c00134f1:	76 09                	jbe    c00134fc <inet_chksum_pseudo_partial+0x5c>
c00134f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134f7:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00134fc:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c0013501:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013505:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013508:	83 ec 08             	sub    esp,0x8
c001350b:	52                   	push   edx
c001350c:	50                   	push   eax
c001350d:	e8 06 fd ff ff       	call   c0013218 <lwip_standard_chksum>
c0013512:	83 c4 10             	add    esp,0x10
c0013515:	0f b7 c0             	movzx  eax,ax
c0013518:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001351c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013520:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013524:	89 d1                	mov    ecx,edx
c0013526:	29 c1                	sub    ecx,eax
c0013528:	89 c8                	mov    eax,ecx
c001352a:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c001352f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013534:	3d fe 7f 00 00       	cmp    eax,0x7ffe
c0013539:	76 15                	jbe    c0013550 <inet_chksum_pseudo_partial+0xb0>
c001353b:	83 ec 08             	sub    esp,0x8
c001353e:	68 40 10 03 c0       	push   0xc0031040
c0013543:	68 a6 fd 02 c0       	push   0xc002fda6
c0013548:	e8 cb c8 00 00       	call   c001fe18 <CPrintf>
c001354d:	83 c4 10             	add    esp,0x10
c0013550:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013554:	c1 e8 10             	shr    eax,0x10
c0013557:	89 c2                	mov    edx,eax
c0013559:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001355d:	0f b7 c0             	movzx  eax,ax
c0013560:	01 d0                	add    eax,edx
c0013562:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013566:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001356a:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001356e:	83 e0 01             	and    eax,0x1
c0013571:	0f b7 c0             	movzx  eax,ax
c0013574:	85 c0                	test   eax,eax
c0013576:	74 2c                	je     c00135a4 <inet_chksum_pseudo_partial+0x104>
c0013578:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001357c:	ba 01 00 00 00       	mov    edx,0x1
c0013581:	29 c2                	sub    edx,eax
c0013583:	89 d0                	mov    eax,edx
c0013585:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0013589:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001358d:	0f b7 c0             	movzx  eax,ax
c0013590:	83 ec 0c             	sub    esp,0xc
c0013593:	50                   	push   eax
c0013594:	e8 4f d6 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013599:	83 c4 10             	add    esp,0x10
c001359c:	0f b7 c0             	movzx  eax,ax
c001359f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00135a3:	90                   	nop
c00135a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00135aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00135ae:	66 90                	xchg   ax,ax
c00135b0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00135b5:	74 0d                	je     c00135c4 <inet_chksum_pseudo_partial+0x124>
c00135b7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00135bc:	85 c0                	test   eax,eax
c00135be:	0f 85 14 ff ff ff    	jne    c00134d8 <inet_chksum_pseudo_partial+0x38>
c00135c4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00135c9:	85 c0                	test   eax,eax
c00135cb:	74 1b                	je     c00135e8 <inet_chksum_pseudo_partial+0x148>
c00135cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135d1:	0f b7 c0             	movzx  eax,ax
c00135d4:	83 ec 0c             	sub    esp,0xc
c00135d7:	50                   	push   eax
c00135d8:	e8 0b d6 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00135dd:	83 c4 10             	add    esp,0x10
c00135e0:	0f b7 c0             	movzx  eax,ax
c00135e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00135e7:	90                   	nop
c00135e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00135ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00135ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00135f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135f6:	0f b7 c0             	movzx  eax,ax
c00135f9:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00135fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013601:	c1 e8 10             	shr    eax,0x10
c0013604:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013608:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001360c:	8b 00                	mov    eax,DWORD PTR [eax]
c001360e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013616:	0f b7 c0             	movzx  eax,ax
c0013619:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001361d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013621:	c1 e8 10             	shr    eax,0x10
c0013624:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013628:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001362d:	83 ec 0c             	sub    esp,0xc
c0013630:	50                   	push   eax
c0013631:	e8 b2 d5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013636:	83 c4 10             	add    esp,0x10
c0013639:	0f b7 c0             	movzx  eax,ax
c001363c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013640:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0013645:	83 ec 0c             	sub    esp,0xc
c0013648:	50                   	push   eax
c0013649:	e8 9a d5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001364e:	83 c4 10             	add    esp,0x10
c0013651:	0f b7 c0             	movzx  eax,ax
c0013654:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013658:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001365c:	c1 e8 10             	shr    eax,0x10
c001365f:	89 c2                	mov    edx,eax
c0013661:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013665:	0f b7 c0             	movzx  eax,ax
c0013668:	01 d0                	add    eax,edx
c001366a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001366e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013672:	c1 e8 10             	shr    eax,0x10
c0013675:	89 c2                	mov    edx,eax
c0013677:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001367b:	0f b7 c0             	movzx  eax,ax
c001367e:	01 d0                	add    eax,edx
c0013680:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013684:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013688:	f7 d0                	not    eax
c001368a:	83 c4 2c             	add    esp,0x2c
c001368d:	c3                   	ret    
c001368e:	66 90                	xchg   ax,ax

c0013690 <inet_chksum>:
c0013690:	83 ec 1c             	sub    esp,0x1c
c0013693:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013697:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001369c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00136a1:	83 ec 08             	sub    esp,0x8
c00136a4:	50                   	push   eax
c00136a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00136a9:	e8 6a fb ff ff       	call   c0013218 <lwip_standard_chksum>
c00136ae:	83 c4 10             	add    esp,0x10
c00136b1:	f7 d0                	not    eax
c00136b3:	83 c4 1c             	add    esp,0x1c
c00136b6:	c3                   	ret    
c00136b7:	90                   	nop

c00136b8 <inet_chksum_pbuf>:
c00136b8:	83 ec 1c             	sub    esp,0x1c
c00136bb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00136c3:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c00136c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00136d0:	e9 8b 00 00 00       	jmp    c0013760 <inet_chksum_pbuf+0xa8>
c00136d5:	8d 76 00             	lea    esi,[esi+0x0]
c00136d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00136dc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00136e0:	0f b7 d0             	movzx  edx,ax
c00136e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00136e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136ea:	83 ec 08             	sub    esp,0x8
c00136ed:	52                   	push   edx
c00136ee:	50                   	push   eax
c00136ef:	e8 24 fb ff ff       	call   c0013218 <lwip_standard_chksum>
c00136f4:	83 c4 10             	add    esp,0x10
c00136f7:	0f b7 c0             	movzx  eax,ax
c00136fa:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00136fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013702:	c1 e8 10             	shr    eax,0x10
c0013705:	89 c2                	mov    edx,eax
c0013707:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001370b:	0f b7 c0             	movzx  eax,ax
c001370e:	01 d0                	add    eax,edx
c0013710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013714:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013718:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001371c:	83 e0 01             	and    eax,0x1
c001371f:	0f b7 c0             	movzx  eax,ax
c0013722:	85 c0                	test   eax,eax
c0013724:	74 2e                	je     c0013754 <inet_chksum_pbuf+0x9c>
c0013726:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001372a:	ba 01 00 00 00       	mov    edx,0x1
c001372f:	29 c2                	sub    edx,eax
c0013731:	89 d0                	mov    eax,edx
c0013733:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013737:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001373b:	0f b7 c0             	movzx  eax,ax
c001373e:	83 ec 0c             	sub    esp,0xc
c0013741:	50                   	push   eax
c0013742:	e8 a1 d4 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013747:	83 c4 10             	add    esp,0x10
c001374a:	0f b7 c0             	movzx  eax,ax
c001374d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013751:	8d 76 00             	lea    esi,[esi+0x0]
c0013754:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013758:	8b 00                	mov    eax,DWORD PTR [eax]
c001375a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001375e:	66 90                	xchg   ax,ax
c0013760:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013765:	0f 85 6d ff ff ff    	jne    c00136d8 <inet_chksum_pbuf+0x20>
c001376b:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0013770:	85 c0                	test   eax,eax
c0013772:	74 1c                	je     c0013790 <inet_chksum_pbuf+0xd8>
c0013774:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013778:	0f b7 c0             	movzx  eax,ax
c001377b:	83 ec 0c             	sub    esp,0xc
c001377e:	50                   	push   eax
c001377f:	e8 64 d4 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013784:	83 c4 10             	add    esp,0x10
c0013787:	0f b7 c0             	movzx  eax,ax
c001378a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001378e:	66 90                	xchg   ax,ax
c0013790:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013794:	f7 d0                	not    eax
c0013796:	83 c4 1c             	add    esp,0x1c
c0013799:	c3                   	ret    
c001379a:	66 90                	xchg   ax,ax

c001379c <ip_route>:
c001379c:	83 ec 10             	sub    esp,0x10
c001379f:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c00137a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137a8:	eb 42                	jmp    c00137ec <ip_route+0x50>
c00137aa:	66 90                	xchg   ax,ax
c00137ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137b0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00137b3:	83 e0 01             	and    eax,0x1
c00137b6:	0f b6 c0             	movzx  eax,al
c00137b9:	85 c0                	test   eax,eax
c00137bb:	74 23                	je     c00137e0 <ip_route+0x44>
c00137bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137c1:	8b 10                	mov    edx,DWORD PTR [eax]
c00137c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00137ca:	31 c2                	xor    edx,eax
c00137cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00137d3:	21 d0                	and    eax,edx
c00137d5:	75 09                	jne    c00137e0 <ip_route+0x44>
c00137d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137db:	eb 4f                	jmp    c001382c <ip_route+0x90>
c00137dd:	8d 76 00             	lea    esi,[esi+0x0]
c00137e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00137e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137ea:	66 90                	xchg   ax,ax
c00137ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00137f1:	75 b9                	jne    c00137ac <ip_route+0x10>
c00137f3:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c00137f8:	85 c0                	test   eax,eax
c00137fa:	74 10                	je     c001380c <ip_route+0x70>
c00137fc:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013801:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013804:	0f b6 c0             	movzx  eax,al
c0013807:	83 e0 01             	and    eax,0x1
c001380a:	75 18                	jne    c0013824 <ip_route+0x88>
c001380c:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c0013812:	83 c0 01             	add    eax,0x1
c0013815:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c001381b:	b8 00 00 00 00       	mov    eax,0x0
c0013820:	eb 0a                	jmp    c001382c <ip_route+0x90>
c0013822:	66 90                	xchg   ax,ax
c0013824:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013829:	8d 76 00             	lea    esi,[esi+0x0]
c001382c:	83 c4 10             	add    esp,0x10
c001382f:	c3                   	ret    

c0013830 <ip_input>:
c0013830:	83 ec 1c             	sub    esp,0x1c
c0013833:	66 a1 6a 67 03 c0    	mov    ax,ds:0xc003676a
c0013839:	83 c0 01             	add    eax,0x1
c001383c:	66 a3 6a 67 03 c0    	mov    ds:0xc003676a,ax
c0013842:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013846:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013849:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001384d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013851:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013854:	0f b7 c0             	movzx  eax,ax
c0013857:	83 ec 0c             	sub    esp,0xc
c001385a:	50                   	push   eax
c001385b:	e8 88 d3 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013860:	83 c4 10             	add    esp,0x10
c0013863:	0f b7 c0             	movzx  eax,ax
c0013866:	c1 e8 0c             	shr    eax,0xc
c0013869:	0f b7 c0             	movzx  eax,ax
c001386c:	83 f8 04             	cmp    eax,0x4
c001386f:	74 37                	je     c00138a8 <ip_input+0x78>
c0013871:	83 ec 0c             	sub    esp,0xc
c0013874:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013878:	e8 77 4c ff ff       	call   c00084f4 <pbuf_free>
c001387d:	83 c4 10             	add    esp,0x10
c0013880:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c0013886:	83 c0 01             	add    eax,0x1
c0013889:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c001388f:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013895:	83 c0 01             	add    eax,0x1
c0013898:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c001389e:	b0 00                	mov    al,0x0
c00138a0:	e9 cb 03 00 00       	jmp    c0013c70 <ip_input+0x440>
c00138a5:	8d 76 00             	lea    esi,[esi+0x0]
c00138a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00138af:	0f b7 c0             	movzx  eax,ax
c00138b2:	83 ec 0c             	sub    esp,0xc
c00138b5:	50                   	push   eax
c00138b6:	e8 2d d3 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00138bb:	83 c4 10             	add    esp,0x10
c00138be:	0f b7 c0             	movzx  eax,ax
c00138c1:	c1 e8 08             	shr    eax,0x8
c00138c4:	83 e0 0f             	and    eax,0xf
c00138c7:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c00138cc:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c00138d1:	c1 e0 02             	shl    eax,0x2
c00138d4:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c00138d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138dd:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00138e1:	0f b7 c0             	movzx  eax,ax
c00138e4:	83 ec 0c             	sub    esp,0xc
c00138e7:	50                   	push   eax
c00138e8:	e8 fb d2 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00138ed:	83 c4 10             	add    esp,0x10
c00138f0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00138f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00138f8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00138fc:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0013901:	0f b7 c0             	movzx  eax,ax
c0013904:	39 c2                	cmp    edx,eax
c0013906:	77 14                	ja     c001391c <ip_input+0xec>
c0013908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001390c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001390f:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c0013913:	0f b7 c0             	movzx  eax,ax
c0013916:	39 c2                	cmp    edx,eax
c0013918:	76 36                	jbe    c0013950 <ip_input+0x120>
c001391a:	66 90                	xchg   ax,ax
c001391c:	83 ec 0c             	sub    esp,0xc
c001391f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013923:	e8 cc 4b ff ff       	call   c00084f4 <pbuf_free>
c0013928:	83 c4 10             	add    esp,0x10
c001392b:	66 a1 72 67 03 c0    	mov    ax,ds:0xc0036772
c0013931:	83 c0 01             	add    eax,0x1
c0013934:	66 a3 72 67 03 c0    	mov    ds:0xc0036772,ax
c001393a:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013940:	83 c0 01             	add    eax,0x1
c0013943:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013949:	b0 00                	mov    al,0x0
c001394b:	e9 20 03 00 00       	jmp    c0013c70 <ip_input+0x440>
c0013950:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c0013955:	83 ec 08             	sub    esp,0x8
c0013958:	50                   	push   eax
c0013959:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001395d:	e8 2e fd ff ff       	call   c0013690 <inet_chksum>
c0013962:	83 c4 10             	add    esp,0x10
c0013965:	0f b7 c0             	movzx  eax,ax
c0013968:	85 c0                	test   eax,eax
c001396a:	74 34                	je     c00139a0 <ip_input+0x170>
c001396c:	83 ec 0c             	sub    esp,0xc
c001396f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013973:	e8 7c 4b ff ff       	call   c00084f4 <pbuf_free>
c0013978:	83 c4 10             	add    esp,0x10
c001397b:	66 a1 70 67 03 c0    	mov    ax,ds:0xc0036770
c0013981:	83 c0 01             	add    eax,0x1
c0013984:	66 a3 70 67 03 c0    	mov    ds:0xc0036770,ax
c001398a:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013990:	83 c0 01             	add    eax,0x1
c0013993:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013999:	b0 00                	mov    al,0x0
c001399b:	e9 d0 02 00 00       	jmp    c0013c70 <ip_input+0x440>
c00139a0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00139a4:	83 ec 08             	sub    esp,0x8
c00139a7:	50                   	push   eax
c00139a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139ac:	e8 13 51 ff ff       	call   c0008ac4 <pbuf_realloc>
c00139b1:	83 c4 10             	add    esp,0x10
c00139b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00139bb:	a3 98 68 03 c0       	mov    ds:0xc0036898,eax
c00139c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00139c7:	a3 90 68 03 c0       	mov    ds:0xc0036890,eax
c00139cc:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00139d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00139d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00139dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00139e0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00139e3:	83 e0 01             	and    eax,0x1
c00139e6:	0f b6 c0             	movzx  eax,al
c00139e9:	85 c0                	test   eax,eax
c00139eb:	74 43                	je     c0013a30 <ip_input+0x200>
c00139ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00139f1:	83 c0 04             	add    eax,0x4
c00139f4:	74 3a                	je     c0013a30 <ip_input+0x200>
c00139f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00139fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00139fd:	85 c0                	test   eax,eax
c00139ff:	74 2f                	je     c0013a30 <ip_input+0x200>
c0013a01:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c0013a07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013a0e:	39 c2                	cmp    edx,eax
c0013a10:	74 66                	je     c0013a78 <ip_input+0x248>
c0013a12:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013a17:	83 ec 08             	sub    esp,0x8
c0013a1a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013a1e:	50                   	push   eax
c0013a1f:	e8 c4 05 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0013a24:	83 c4 10             	add    esp,0x10
c0013a27:	0f b6 c0             	movzx  eax,al
c0013a2a:	85 c0                	test   eax,eax
c0013a2c:	75 4a                	jne    c0013a78 <ip_input+0x248>
c0013a2e:	66 90                	xchg   ax,ax
c0013a30:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0013a35:	74 15                	je     c0013a4c <ip_input+0x21c>
c0013a37:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013a3f:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0013a44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a48:	eb 0e                	jmp    c0013a58 <ip_input+0x228>
c0013a4a:	66 90                	xchg   ax,ax
c0013a4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a50:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a56:	66 90                	xchg   ax,ax
c0013a58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a5c:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0013a60:	75 0a                	jne    c0013a6c <ip_input+0x23c>
c0013a62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a66:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a6c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013a71:	0f 85 65 ff ff ff    	jne    c00139dc <ip_input+0x1ac>
c0013a77:	90                   	nop
c0013a78:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0013a7d:	83 ec 08             	sub    esp,0x8
c0013a80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a84:	50                   	push   eax
c0013a85:	e8 5e 05 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0013a8a:	83 c4 10             	add    esp,0x10
c0013a8d:	0f b6 c0             	movzx  eax,al
c0013a90:	85 c0                	test   eax,eax
c0013a92:	75 14                	jne    c0013aa8 <ip_input+0x278>
c0013a94:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0013a99:	25 f0 00 00 00       	and    eax,0xf0
c0013a9e:	3d e0 00 00 00       	cmp    eax,0xe0
c0013aa3:	75 2b                	jne    c0013ad0 <ip_input+0x2a0>
c0013aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0013aa8:	83 ec 0c             	sub    esp,0xc
c0013aab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013aaf:	e8 40 4a ff ff       	call   c00084f4 <pbuf_free>
c0013ab4:	83 c4 10             	add    esp,0x10
c0013ab7:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013abd:	83 c0 01             	add    eax,0x1
c0013ac0:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013ac6:	b0 00                	mov    al,0x0
c0013ac8:	e9 a3 01 00 00       	jmp    c0013c70 <ip_input+0x440>
c0013acd:	8d 76 00             	lea    esi,[esi+0x0]
c0013ad0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013ad5:	75 19                	jne    c0013af0 <ip_input+0x2c0>
c0013ad7:	83 ec 0c             	sub    esp,0xc
c0013ada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ade:	e8 11 4a ff ff       	call   c00084f4 <pbuf_free>
c0013ae3:	83 c4 10             	add    esp,0x10
c0013ae6:	b0 00                	mov    al,0x0
c0013ae8:	e9 83 01 00 00       	jmp    c0013c70 <ip_input+0x440>
c0013aed:	8d 76 00             	lea    esi,[esi+0x0]
c0013af0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013af4:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0013af8:	0f b7 c0             	movzx  eax,ax
c0013afb:	25 3f ff 00 00       	and    eax,0xff3f
c0013b00:	74 2e                	je     c0013b30 <ip_input+0x300>
c0013b02:	83 ec 0c             	sub    esp,0xc
c0013b05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b09:	e8 7a 13 00 00       	call   c0014e88 <ip_reass>
c0013b0e:	83 c4 10             	add    esp,0x10
c0013b11:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013b15:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0013b1a:	75 08                	jne    c0013b24 <ip_input+0x2f4>
c0013b1c:	b0 00                	mov    al,0x0
c0013b1e:	e9 4d 01 00 00       	jmp    c0013c70 <ip_input+0x440>
c0013b23:	90                   	nop
c0013b24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013b2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b2f:	90                   	nop
c0013b30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013b34:	a3 94 68 03 c0       	mov    ds:0xc0036894,eax
c0013b39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b3d:	a3 9c 68 03 c0       	mov    ds:0xc003689c,eax
c0013b42:	83 ec 08             	sub    esp,0x8
c0013b45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b4d:	e8 c6 5c ff ff       	call   c0009818 <raw_input>
c0013b52:	83 c4 10             	add    esp,0x10
c0013b55:	0f b6 c0             	movzx  eax,al
c0013b58:	85 c0                	test   eax,eax
c0013b5a:	0f 85 e0 00 00 00    	jne    c0013c40 <ip_input+0x410>
c0013b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b64:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0013b67:	0f b6 c0             	movzx  eax,al
c0013b6a:	83 f8 06             	cmp    eax,0x6
c0013b6d:	74 25                	je     c0013b94 <ip_input+0x364>
c0013b6f:	83 f8 11             	cmp    eax,0x11
c0013b72:	74 08                	je     c0013b7c <ip_input+0x34c>
c0013b74:	83 f8 01             	cmp    eax,0x1
c0013b77:	74 33                	je     c0013bac <ip_input+0x37c>
c0013b79:	eb 49                	jmp    c0013bc4 <ip_input+0x394>
c0013b7b:	90                   	nop
c0013b7c:	83 ec 08             	sub    esp,0x8
c0013b7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b87:	e8 c0 d3 ff ff       	call   c0010f4c <udp_input>
c0013b8c:	83 c4 10             	add    esp,0x10
c0013b8f:	e9 b0 00 00 00       	jmp    c0013c44 <ip_input+0x414>
c0013b94:	83 ec 08             	sub    esp,0x8
c0013b97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b9f:	e8 00 a5 ff ff       	call   c000e0a4 <tcp_input>
c0013ba4:	83 c4 10             	add    esp,0x10
c0013ba7:	e9 98 00 00 00       	jmp    c0013c44 <ip_input+0x414>
c0013bac:	83 ec 08             	sub    esp,0x8
c0013baf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bb7:	e8 7c f0 ff ff       	call   c0012c38 <icmp_input>
c0013bbc:	83 c4 10             	add    esp,0x10
c0013bbf:	e9 80 00 00 00       	jmp    c0013c44 <ip_input+0x414>
c0013bc4:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013bc9:	83 ec 08             	sub    esp,0x8
c0013bcc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bd0:	50                   	push   eax
c0013bd1:	e8 12 04 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0013bd6:	83 c4 10             	add    esp,0x10
c0013bd9:	0f b6 c0             	movzx  eax,al
c0013bdc:	85 c0                	test   eax,eax
c0013bde:	75 30                	jne    c0013c10 <ip_input+0x3e0>
c0013be0:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013be5:	25 f0 00 00 00       	and    eax,0xf0
c0013bea:	3d e0 00 00 00       	cmp    eax,0xe0
c0013bef:	74 1f                	je     c0013c10 <ip_input+0x3e0>
c0013bf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bf5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013bf9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013bfc:	83 ec 08             	sub    esp,0x8
c0013bff:	6a 02                	push   0x2
c0013c01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c05:	e8 c6 f5 ff ff       	call   c00131d0 <icmp_dest_unreach>
c0013c0a:	83 c4 10             	add    esp,0x10
c0013c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0013c10:	83 ec 0c             	sub    esp,0xc
c0013c13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c17:	e8 d8 48 ff ff       	call   c00084f4 <pbuf_free>
c0013c1c:	83 c4 10             	add    esp,0x10
c0013c1f:	66 a1 78 67 03 c0    	mov    ax,ds:0xc0036778
c0013c25:	83 c0 01             	add    eax,0x1
c0013c28:	66 a3 78 67 03 c0    	mov    ds:0xc0036778,ax
c0013c2e:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013c34:	83 c0 01             	add    eax,0x1
c0013c37:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013c3d:	eb 05                	jmp    c0013c44 <ip_input+0x414>
c0013c3f:	90                   	nop
c0013c40:	90                   	nop
c0013c41:	8d 76 00             	lea    esi,[esi+0x0]
c0013c44:	c7 05 94 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036894,0x0
c0013c4e:	c7 05 9c 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003689c,0x0
c0013c58:	c7 05 90 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036890,0x0
c0013c62:	c7 05 98 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036898,0x0
c0013c6c:	b0 00                	mov    al,0x0
c0013c6e:	66 90                	xchg   ax,ax
c0013c70:	83 c4 1c             	add    esp,0x1c
c0013c73:	c3                   	ret    

c0013c74 <ip_output_if>:
c0013c74:	83 ec 2c             	sub    esp,0x2c
c0013c77:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013c7b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013c7f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013c83:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013c87:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c0013c8b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013c8f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013c97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c9b:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013c9f:	0f b7 c0             	movzx  eax,ax
c0013ca2:	83 f8 01             	cmp    eax,0x1
c0013ca5:	74 15                	je     c0013cbc <ip_output_if+0x48>
c0013ca7:	83 ec 08             	sub    esp,0x8
c0013caa:	68 4a 10 03 c0       	push   0xc003104a
c0013caf:	68 a6 fd 02 c0       	push   0xc002fda6
c0013cb4:	e8 5f c1 00 00       	call   c001fe18 <CPrintf>
c0013cb9:	83 c4 10             	add    esp,0x10
c0013cbc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0013cc1:	0f 84 ed 01 00 00    	je     c0013eb4 <ip_output_if+0x240>
c0013cc7:	66 c7 44 24 1a 14 00 	mov    WORD PTR [esp+0x1a],0x14
c0013cce:	83 ec 08             	sub    esp,0x8
c0013cd1:	6a 14                	push   0x14
c0013cd3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013cd7:	e8 7c 46 ff ff       	call   c0008358 <pbuf_header>
c0013cdc:	83 c4 10             	add    esp,0x10
c0013cdf:	0f b6 c0             	movzx  eax,al
c0013ce2:	85 c0                	test   eax,eax
c0013ce4:	74 16                	je     c0013cfc <ip_output_if+0x88>
c0013ce6:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c0013cec:	83 c0 01             	add    eax,0x1
c0013cef:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c0013cf5:	b0 fe                	mov    al,0xfe
c0013cf7:	e9 44 02 00 00       	jmp    c0013f40 <ip_output_if+0x2cc>
c0013cfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013d03:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d0b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013d0f:	0f b7 c0             	movzx  eax,ax
c0013d12:	83 f8 13             	cmp    eax,0x13
c0013d15:	77 15                	ja     c0013d2c <ip_output_if+0xb8>
c0013d17:	83 ec 08             	sub    esp,0x8
c0013d1a:	68 58 10 03 c0       	push   0xc0031058
c0013d1f:	68 a6 fd 02 c0       	push   0xc002fda6
c0013d24:	e8 ef c0 00 00       	call   c001fe18 <CPrintf>
c0013d29:	83 c4 10             	add    esp,0x10
c0013d2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d30:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013d34:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0013d37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d3b:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013d3f:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0013d42:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0013d47:	c1 e0 08             	shl    eax,0x8
c0013d4a:	89 c2                	mov    edx,eax
c0013d4c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013d51:	09 d0                	or     eax,edx
c0013d53:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013d5b:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d61:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013d64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d68:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013d6b:	0f b7 c0             	movzx  eax,ax
c0013d6e:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d76:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013d79:	c1 e8 10             	shr    eax,0x10
c0013d7c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d80:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0013d85:	c1 e8 02             	shr    eax,0x2
c0013d88:	0f b7 c0             	movzx  eax,ax
c0013d8b:	c1 e0 08             	shl    eax,0x8
c0013d8e:	80 cc 40             	or     ah,0x40
c0013d91:	89 c2                	mov    edx,eax
c0013d93:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013d98:	09 d0                	or     eax,edx
c0013d9a:	0f b7 c0             	movzx  eax,ax
c0013d9d:	83 ec 0c             	sub    esp,0xc
c0013da0:	50                   	push   eax
c0013da1:	e8 42 ce fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013da6:	83 c4 10             	add    esp,0x10
c0013da9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013dad:	66 89 02             	mov    WORD PTR [edx],ax
c0013db0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013db4:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013db7:	0f b7 c0             	movzx  eax,ax
c0013dba:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013dbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dc2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013dc5:	0f b7 c0             	movzx  eax,ax
c0013dc8:	83 ec 0c             	sub    esp,0xc
c0013dcb:	50                   	push   eax
c0013dcc:	e8 17 ce fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013dd1:	83 c4 10             	add    esp,0x10
c0013dd4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013dd8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0013ddc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013de0:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013de4:	0f b7 c0             	movzx  eax,ax
c0013de7:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013def:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0013df5:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013dfb:	0f b7 c0             	movzx  eax,ax
c0013dfe:	83 ec 0c             	sub    esp,0xc
c0013e01:	50                   	push   eax
c0013e02:	e8 e1 cd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013e07:	83 c4 10             	add    esp,0x10
c0013e0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013e0e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0013e12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e16:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013e1a:	0f b7 c0             	movzx  eax,ax
c0013e1d:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e21:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013e27:	83 c0 01             	add    eax,0x1
c0013e2a:	66 a3 a0 a9 03 c0    	mov    ds:0xc003a9a0,ax
c0013e30:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013e35:	74 0d                	je     c0013e44 <ip_output_if+0x1d0>
c0013e37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0013e3d:	85 c0                	test   eax,eax
c0013e3f:	75 13                	jne    c0013e54 <ip_output_if+0x1e0>
c0013e41:	8d 76 00             	lea    esi,[esi+0x0]
c0013e44:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013e48:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013e4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e4f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013e52:	eb 10                	jmp    c0013e64 <ip_output_if+0x1f0>
c0013e54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e58:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e5e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013e61:	8d 76 00             	lea    esi,[esi+0x0]
c0013e64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e68:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e6b:	0f b7 c0             	movzx  eax,ax
c0013e6e:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e76:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e79:	c1 e8 10             	shr    eax,0x10
c0013e7c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e84:	c1 e8 10             	shr    eax,0x10
c0013e87:	89 c2                	mov    edx,eax
c0013e89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e8d:	0f b7 c0             	movzx  eax,ax
c0013e90:	01 d0                	add    eax,edx
c0013e92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e9a:	c1 e8 10             	shr    eax,0x10
c0013e9d:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013ea1:	f7 54 24 1c          	not    DWORD PTR [esp+0x1c]
c0013ea5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ea9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013ead:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0013eb1:	eb 21                	jmp    c0013ed4 <ip_output_if+0x260>
c0013eb3:	90                   	nop
c0013eb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013eb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013ebb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ebf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ec3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013ec6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013eca:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013ece:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013ed2:	66 90                	xchg   ax,ax
c0013ed4:	66 a1 68 67 03 c0    	mov    ax,ds:0xc0036768
c0013eda:	83 c0 01             	add    eax,0x1
c0013edd:	66 a3 68 67 03 c0    	mov    ds:0xc0036768,ax
c0013ee3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013ee7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013eea:	0f b7 c0             	movzx  eax,ax
c0013eed:	85 c0                	test   eax,eax
c0013eef:	74 33                	je     c0013f24 <ip_output_if+0x2b0>
c0013ef1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ef5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0013ef8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013efc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013eff:	0f b7 d2             	movzx  edx,dx
c0013f02:	0f b7 c0             	movzx  eax,ax
c0013f05:	39 c2                	cmp    edx,eax
c0013f07:	76 1b                	jbe    c0013f24 <ip_output_if+0x2b0>
c0013f09:	83 ec 04             	sub    esp,0x4
c0013f0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f10:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013f14:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f18:	e8 2b 14 00 00       	call   c0015348 <ip_frag>
c0013f1d:	83 c4 10             	add    esp,0x10
c0013f20:	eb 1e                	jmp    c0013f40 <ip_output_if+0x2cc>
c0013f22:	66 90                	xchg   ax,ax
c0013f24:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013f28:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0013f2b:	83 ec 04             	sub    esp,0x4
c0013f2e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f32:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013f36:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013f3a:	ff d0                	call   eax
c0013f3c:	83 c4 10             	add    esp,0x10
c0013f3f:	90                   	nop
c0013f40:	83 c4 2c             	add    esp,0x2c
c0013f43:	c3                   	ret    

c0013f44 <ip_output>:
c0013f44:	83 ec 2c             	sub    esp,0x2c
c0013f47:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013f4b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013f4f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013f53:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013f57:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c0013f5b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013f5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f63:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013f67:	0f b7 c0             	movzx  eax,ax
c0013f6a:	83 f8 01             	cmp    eax,0x1
c0013f6d:	74 15                	je     c0013f84 <ip_output+0x40>
c0013f6f:	83 ec 08             	sub    esp,0x8
c0013f72:	68 4a 10 03 c0       	push   0xc003104a
c0013f77:	68 a6 fd 02 c0       	push   0xc002fda6
c0013f7c:	e8 97 be 00 00       	call   c001fe18 <CPrintf>
c0013f81:	83 c4 10             	add    esp,0x10
c0013f84:	83 ec 0c             	sub    esp,0xc
c0013f87:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013f8b:	e8 0c f8 ff ff       	call   c001379c <ip_route>
c0013f90:	83 c4 10             	add    esp,0x10
c0013f93:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013f97:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013f9c:	75 16                	jne    c0013fb4 <ip_output+0x70>
c0013f9e:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c0013fa4:	83 c0 01             	add    eax,0x1
c0013fa7:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c0013fad:	b0 fc                	mov    al,0xfc
c0013faf:	eb 33                	jmp    c0013fe4 <ip_output+0xa0>
c0013fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fb4:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013fb9:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013fbe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013fc3:	83 ec 04             	sub    esp,0x4
c0013fc6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013fca:	51                   	push   ecx
c0013fcb:	52                   	push   edx
c0013fcc:	50                   	push   eax
c0013fcd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013fd1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013fd5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013fd9:	e8 96 fc ff ff       	call   c0013c74 <ip_output_if>
c0013fde:	83 c4 20             	add    esp,0x20
c0013fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fe4:	83 c4 2c             	add    esp,0x2c
c0013fe7:	c3                   	ret    

c0013fe8 <ip4_addr_isbroadcast>:
c0013fe8:	83 ec 10             	sub    esp,0x10
c0013feb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ff3:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0013ff8:	74 0a                	je     c0014004 <ip4_addr_isbroadcast+0x1c>
c0013ffa:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013fff:	75 07                	jne    c0014008 <ip4_addr_isbroadcast+0x20>
c0014001:	8d 76 00             	lea    esi,[esi+0x0]
c0014004:	b0 01                	mov    al,0x1
c0014006:	eb 64                	jmp    c001406c <ip4_addr_isbroadcast+0x84>
c0014008:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001400c:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c001400f:	0f b6 c0             	movzx  eax,al
c0014012:	83 e0 02             	and    eax,0x2
c0014015:	75 05                	jne    c001401c <ip4_addr_isbroadcast+0x34>
c0014017:	b0 00                	mov    al,0x0
c0014019:	eb 51                	jmp    c001406c <ip4_addr_isbroadcast+0x84>
c001401b:	90                   	nop
c001401c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014023:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0014027:	75 07                	jne    c0014030 <ip4_addr_isbroadcast+0x48>
c0014029:	b0 00                	mov    al,0x0
c001402b:	eb 3f                	jmp    c001406c <ip4_addr_isbroadcast+0x84>
c001402d:	8d 76 00             	lea    esi,[esi+0x0]
c0014030:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014034:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001403b:	31 c2                	xor    edx,eax
c001403d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014041:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0014044:	21 d0                	and    eax,edx
c0014046:	75 20                	jne    c0014068 <ip4_addr_isbroadcast+0x80>
c0014048:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001404c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001404f:	f7 d0                	not    eax
c0014051:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0014055:	89 c2                	mov    edx,eax
c0014057:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001405b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001405e:	f7 d0                	not    eax
c0014060:	39 c2                	cmp    edx,eax
c0014062:	75 04                	jne    c0014068 <ip4_addr_isbroadcast+0x80>
c0014064:	b0 01                	mov    al,0x1
c0014066:	eb 04                	jmp    c001406c <ip4_addr_isbroadcast+0x84>
c0014068:	b0 00                	mov    al,0x0
c001406a:	66 90                	xchg   ax,ax
c001406c:	83 c4 10             	add    esp,0x10
c001406f:	c3                   	ret    

c0014070 <ip4_addr_netmask_valid>:
c0014070:	83 ec 1c             	sub    esp,0x1c
c0014073:	83 ec 0c             	sub    esp,0xc
c0014076:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001407a:	e8 8d cb fe ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001407f:	83 c4 10             	add    esp,0x10
c0014082:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014086:	c7 44 24 0c 00 00 00 80 	mov    DWORD PTR [esp+0xc],0x80000000
c001408e:	eb 10                	jmp    c00140a0 <ip4_addr_netmask_valid+0x30>
c0014090:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014094:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0014098:	74 12                	je     c00140ac <ip4_addr_netmask_valid+0x3c>
c001409a:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c001409e:	66 90                	xchg   ax,ax
c00140a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00140a5:	75 e9                	jne    c0014090 <ip4_addr_netmask_valid+0x20>
c00140a7:	eb 1b                	jmp    c00140c4 <ip4_addr_netmask_valid+0x54>
c00140a9:	8d 76 00             	lea    esi,[esi+0x0]
c00140ac:	90                   	nop
c00140ad:	eb 15                	jmp    c00140c4 <ip4_addr_netmask_valid+0x54>
c00140af:	90                   	nop
c00140b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00140b4:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c00140b8:	74 06                	je     c00140c0 <ip4_addr_netmask_valid+0x50>
c00140ba:	b0 00                	mov    al,0x0
c00140bc:	eb 12                	jmp    c00140d0 <ip4_addr_netmask_valid+0x60>
c00140be:	66 90                	xchg   ax,ax
c00140c0:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c00140c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00140c9:	75 e5                	jne    c00140b0 <ip4_addr_netmask_valid+0x40>
c00140cb:	b0 01                	mov    al,0x1
c00140cd:	8d 76 00             	lea    esi,[esi+0x0]
c00140d0:	83 c4 1c             	add    esp,0x1c
c00140d3:	c3                   	ret    

c00140d4 <ipaddr_aton>:
c00140d4:	83 ec 2c             	sub    esp,0x2c
c00140d7:	8d 44 24 04          	lea    eax,[esp+0x4]
c00140db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00140df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00140e3:	8a 00                	mov    al,BYTE PTR [eax]
c00140e5:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00140e9:	8d 76 00             	lea    esi,[esi+0x0]
c00140ec:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00140f0:	0f b6 c0             	movzx  eax,al
c00140f3:	83 f8 2f             	cmp    eax,0x2f
c00140f6:	76 0c                	jbe    c0014104 <ipaddr_aton+0x30>
c00140f8:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00140fc:	0f b6 c0             	movzx  eax,al
c00140ff:	83 f8 39             	cmp    eax,0x39
c0014102:	76 0c                	jbe    c0014110 <ipaddr_aton+0x3c>
c0014104:	b8 00 00 00 00       	mov    eax,0x0
c0014109:	e9 f2 02 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c001410e:	66 90                	xchg   ax,ax
c0014110:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014118:	c6 44 24 1b 0a       	mov    BYTE PTR [esp+0x1b],0xa
c001411d:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014122:	83 f8 30             	cmp    eax,0x30
c0014125:	75 45                	jne    c001416c <ipaddr_aton+0x98>
c0014127:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c001412c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014130:	8a 00                	mov    al,BYTE PTR [eax]
c0014132:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014136:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001413b:	83 f8 78             	cmp    eax,0x78
c001413e:	74 0c                	je     c001414c <ipaddr_aton+0x78>
c0014140:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014145:	83 f8 58             	cmp    eax,0x58
c0014148:	75 1a                	jne    c0014164 <ipaddr_aton+0x90>
c001414a:	66 90                	xchg   ax,ax
c001414c:	c6 44 24 1b 10       	mov    BYTE PTR [esp+0x1b],0x10
c0014151:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014156:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001415a:	8a 00                	mov    al,BYTE PTR [eax]
c001415c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014160:	eb 0a                	jmp    c001416c <ipaddr_aton+0x98>
c0014162:	66 90                	xchg   ax,ax
c0014164:	c6 44 24 1b 08       	mov    BYTE PTR [esp+0x1b],0x8
c0014169:	8d 76 00             	lea    esi,[esi+0x0]
c001416c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014170:	0f b6 c0             	movzx  eax,al
c0014173:	83 f8 2f             	cmp    eax,0x2f
c0014176:	76 3c                	jbe    c00141b4 <ipaddr_aton+0xe0>
c0014178:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001417c:	0f b6 c0             	movzx  eax,al
c001417f:	83 f8 39             	cmp    eax,0x39
c0014182:	77 30                	ja     c00141b4 <ipaddr_aton+0xe0>
c0014184:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0014189:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c001418e:	89 c2                	mov    edx,eax
c0014190:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014195:	01 d0                	add    eax,edx
c0014197:	83 e8 30             	sub    eax,0x30
c001419a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001419e:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00141a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00141a7:	8a 00                	mov    al,BYTE PTR [eax]
c00141a9:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00141ad:	e9 ae 00 00 00       	jmp    c0014260 <ipaddr_aton+0x18c>
c00141b2:	66 90                	xchg   ax,ax
c00141b4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00141b9:	83 f8 10             	cmp    eax,0x10
c00141bc:	0f 85 a6 00 00 00    	jne    c0014268 <ipaddr_aton+0x194>
c00141c2:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141c6:	0f b6 c0             	movzx  eax,al
c00141c9:	83 f8 2f             	cmp    eax,0x2f
c00141cc:	76 0e                	jbe    c00141dc <ipaddr_aton+0x108>
c00141ce:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141d2:	0f b6 c0             	movzx  eax,al
c00141d5:	83 f8 39             	cmp    eax,0x39
c00141d8:	76 32                	jbe    c001420c <ipaddr_aton+0x138>
c00141da:	66 90                	xchg   ax,ax
c00141dc:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141e0:	0f b6 c0             	movzx  eax,al
c00141e3:	83 f8 60             	cmp    eax,0x60
c00141e6:	76 0c                	jbe    c00141f4 <ipaddr_aton+0x120>
c00141e8:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141ec:	0f b6 c0             	movzx  eax,al
c00141ef:	83 f8 66             	cmp    eax,0x66
c00141f2:	76 18                	jbe    c001420c <ipaddr_aton+0x138>
c00141f4:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141f8:	0f b6 c0             	movzx  eax,al
c00141fb:	83 f8 40             	cmp    eax,0x40
c00141fe:	76 68                	jbe    c0014268 <ipaddr_aton+0x194>
c0014200:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014204:	0f b6 c0             	movzx  eax,al
c0014207:	83 f8 46             	cmp    eax,0x46
c001420a:	77 5c                	ja     c0014268 <ipaddr_aton+0x194>
c001420c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014210:	c1 e0 04             	shl    eax,0x4
c0014213:	89 c2                	mov    edx,eax
c0014215:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001421a:	8d 48 0a             	lea    ecx,[eax+0xa]
c001421d:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014221:	0f b6 c0             	movzx  eax,al
c0014224:	83 f8 60             	cmp    eax,0x60
c0014227:	76 13                	jbe    c001423c <ipaddr_aton+0x168>
c0014229:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001422d:	0f b6 c0             	movzx  eax,al
c0014230:	83 f8 7a             	cmp    eax,0x7a
c0014233:	77 07                	ja     c001423c <ipaddr_aton+0x168>
c0014235:	b8 61 00 00 00       	mov    eax,0x61
c001423a:	eb 08                	jmp    c0014244 <ipaddr_aton+0x170>
c001423c:	b8 41 00 00 00       	mov    eax,0x41
c0014241:	8d 76 00             	lea    esi,[esi+0x0]
c0014244:	29 c1                	sub    ecx,eax
c0014246:	89 c8                	mov    eax,ecx
c0014248:	09 d0                	or     eax,edx
c001424a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001424e:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014253:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014257:	8a 00                	mov    al,BYTE PTR [eax]
c0014259:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001425d:	8d 76 00             	lea    esi,[esi+0x0]
c0014260:	e9 07 ff ff ff       	jmp    c001416c <ipaddr_aton+0x98>
c0014265:	8d 76 00             	lea    esi,[esi+0x0]
c0014268:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001426d:	83 f8 2e             	cmp    eax,0x2e
c0014270:	75 42                	jne    c00142b4 <ipaddr_aton+0x1e0>
c0014272:	8d 44 24 04          	lea    eax,[esp+0x4]
c0014276:	83 c0 0c             	add    eax,0xc
c0014279:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c001427d:	72 0d                	jb     c001428c <ipaddr_aton+0x1b8>
c001427f:	b8 00 00 00 00       	mov    eax,0x0
c0014284:	e9 77 01 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c0014289:	8d 76 00             	lea    esi,[esi+0x0]
c001428c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014290:	8d 50 04             	lea    edx,[eax+0x4]
c0014293:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014297:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001429b:	89 10                	mov    DWORD PTR [eax],edx
c001429d:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00142a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142a6:	8a 00                	mov    al,BYTE PTR [eax]
c00142a8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00142ac:	e9 3b fe ff ff       	jmp    c00140ec <ipaddr_aton+0x18>
c00142b1:	8d 76 00             	lea    esi,[esi+0x0]
c00142b4:	90                   	nop
c00142b5:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142ba:	85 c0                	test   eax,eax
c00142bc:	74 46                	je     c0014304 <ipaddr_aton+0x230>
c00142be:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142c3:	83 f8 20             	cmp    eax,0x20
c00142c6:	74 3c                	je     c0014304 <ipaddr_aton+0x230>
c00142c8:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142cd:	83 f8 0c             	cmp    eax,0xc
c00142d0:	74 32                	je     c0014304 <ipaddr_aton+0x230>
c00142d2:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142d7:	83 f8 0a             	cmp    eax,0xa
c00142da:	74 28                	je     c0014304 <ipaddr_aton+0x230>
c00142dc:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142e1:	83 f8 0d             	cmp    eax,0xd
c00142e4:	74 1e                	je     c0014304 <ipaddr_aton+0x230>
c00142e6:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142eb:	83 f8 09             	cmp    eax,0x9
c00142ee:	74 14                	je     c0014304 <ipaddr_aton+0x230>
c00142f0:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142f5:	83 f8 0b             	cmp    eax,0xb
c00142f8:	74 0a                	je     c0014304 <ipaddr_aton+0x230>
c00142fa:	b8 00 00 00 00       	mov    eax,0x0
c00142ff:	e9 fc 00 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c0014304:	8d 44 24 04          	lea    eax,[esp+0x4]
c0014308:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001430c:	29 c2                	sub    edx,eax
c001430e:	89 d0                	mov    eax,edx
c0014310:	c1 f8 02             	sar    eax,0x2
c0014313:	83 c0 01             	add    eax,0x1
c0014316:	83 f8 04             	cmp    eax,0x4
c0014319:	0f 87 9d 00 00 00    	ja     c00143bc <ipaddr_aton+0x2e8>
c001431f:	8b 04 85 90 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef70]
c0014326:	ff e0                	jmp    eax
c0014328:	b8 00 00 00 00       	mov    eax,0x0
c001432d:	e9 ce 00 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c0014332:	66 90                	xchg   ax,ax
c0014334:	81 7c 24 1c ff ff ff 00 	cmp    DWORD PTR [esp+0x1c],0xffffff
c001433c:	76 0a                	jbe    c0014348 <ipaddr_aton+0x274>
c001433e:	b8 00 00 00 00       	mov    eax,0x0
c0014343:	e9 b8 00 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c0014348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001434c:	c1 e0 18             	shl    eax,0x18
c001434f:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014353:	e9 80 00 00 00       	jmp    c00143d8 <ipaddr_aton+0x304>
c0014358:	81 7c 24 1c ff ff 00 00 	cmp    DWORD PTR [esp+0x1c],0xffff
c0014360:	76 0a                	jbe    c001436c <ipaddr_aton+0x298>
c0014362:	b8 00 00 00 00       	mov    eax,0x0
c0014367:	e9 94 00 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c001436c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014370:	c1 e0 18             	shl    eax,0x18
c0014373:	89 c2                	mov    edx,eax
c0014375:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014379:	c1 e0 10             	shl    eax,0x10
c001437c:	09 d0                	or     eax,edx
c001437e:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014382:	eb 54                	jmp    c00143d8 <ipaddr_aton+0x304>
c0014384:	81 7c 24 1c ff 00 00 00 	cmp    DWORD PTR [esp+0x1c],0xff
c001438c:	76 0a                	jbe    c0014398 <ipaddr_aton+0x2c4>
c001438e:	b8 00 00 00 00       	mov    eax,0x0
c0014393:	eb 6b                	jmp    c0014400 <ipaddr_aton+0x32c>
c0014395:	8d 76 00             	lea    esi,[esi+0x0]
c0014398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001439c:	c1 e0 18             	shl    eax,0x18
c001439f:	89 c2                	mov    edx,eax
c00143a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00143a5:	c1 e0 10             	shl    eax,0x10
c00143a8:	09 c2                	or     edx,eax
c00143aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00143ae:	c1 e0 08             	shl    eax,0x8
c00143b1:	09 d0                	or     eax,edx
c00143b3:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c00143b7:	eb 1f                	jmp    c00143d8 <ipaddr_aton+0x304>
c00143b9:	8d 76 00             	lea    esi,[esi+0x0]
c00143bc:	83 ec 08             	sub    esp,0x8
c00143bf:	68 85 10 03 c0       	push   0xc0031085
c00143c4:	68 a6 fd 02 c0       	push   0xc002fda6
c00143c9:	e8 4a ba 00 00       	call   c001fe18 <CPrintf>
c00143ce:	83 c4 10             	add    esp,0x10
c00143d1:	eb 05                	jmp    c00143d8 <ipaddr_aton+0x304>
c00143d3:	90                   	nop
c00143d4:	90                   	nop
c00143d5:	8d 76 00             	lea    esi,[esi+0x0]
c00143d8:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00143dd:	74 19                	je     c00143f8 <ipaddr_aton+0x324>
c00143df:	83 ec 0c             	sub    esp,0xc
c00143e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00143e6:	e8 21 c8 fe ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00143eb:	83 c4 10             	add    esp,0x10
c00143ee:	89 c2                	mov    edx,eax
c00143f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00143f4:	89 10                	mov    DWORD PTR [eax],edx
c00143f6:	66 90                	xchg   ax,ax
c00143f8:	b8 01 00 00 00       	mov    eax,0x1
c00143fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014400:	83 c4 2c             	add    esp,0x2c
c0014403:	c3                   	ret    

c0014404 <ipaddr_addr>:
c0014404:	83 ec 1c             	sub    esp,0x1c
c0014407:	83 ec 08             	sub    esp,0x8
c001440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001440e:	50                   	push   eax
c001440f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014413:	e8 bc fc ff ff       	call   c00140d4 <ipaddr_aton>
c0014418:	83 c4 10             	add    esp,0x10
c001441b:	85 c0                	test   eax,eax
c001441d:	74 09                	je     c0014428 <ipaddr_addr+0x24>
c001441f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014423:	eb 0b                	jmp    c0014430 <ipaddr_addr+0x2c>
c0014425:	8d 76 00             	lea    esi,[esi+0x0]
c0014428:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001442d:	8d 76 00             	lea    esi,[esi+0x0]
c0014430:	83 c4 1c             	add    esp,0x1c
c0014433:	c3                   	ret    

c0014434 <ipaddr_ntoa_r>:
c0014434:	83 ec 20             	sub    esp,0x20
c0014437:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001443f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014443:	8b 00                	mov    eax,DWORD PTR [eax]
c0014445:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014449:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001444d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014451:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014455:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014459:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001445e:	e9 f9 00 00 00       	jmp    c001455c <ipaddr_ntoa_r+0x128>
c0014463:	90                   	nop
c0014464:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0014469:	8d 76 00             	lea    esi,[esi+0x0]
c001446c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014470:	8a 00                	mov    al,BYTE PTR [eax]
c0014472:	0f b6 c8             	movzx  ecx,al
c0014475:	ba cd cc cc cc       	mov    edx,0xcccccccd
c001447a:	89 c8                	mov    eax,ecx
c001447c:	f7 e2                	mul    edx
c001447e:	c1 ea 03             	shr    edx,0x3
c0014481:	89 d0                	mov    eax,edx
c0014483:	c1 e0 02             	shl    eax,0x2
c0014486:	01 d0                	add    eax,edx
c0014488:	01 c0                	add    eax,eax
c001448a:	29 c1                	sub    ecx,eax
c001448c:	89 c8                	mov    eax,ecx
c001448e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014492:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014496:	8a 00                	mov    al,BYTE PTR [eax]
c0014498:	0f b6 c0             	movzx  eax,al
c001449b:	ba cd cc cc cc       	mov    edx,0xcccccccd
c00144a0:	f7 e2                	mul    edx
c00144a2:	89 d0                	mov    eax,edx
c00144a4:	c1 e8 03             	shr    eax,0x3
c00144a7:	88 c2                	mov    dl,al
c00144a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144ad:	88 10                	mov    BYTE PTR [eax],dl
c00144af:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00144b3:	83 c0 30             	add    eax,0x30
c00144b6:	88 c1                	mov    cl,al
c00144b8:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c00144bc:	8d 50 01             	lea    edx,[eax+0x1]
c00144bf:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c00144c3:	0f b6 c0             	movzx  eax,al
c00144c6:	88 ca                	mov    dl,cl
c00144c8:	88 54 04 05          	mov    BYTE PTR [esp+eax*1+0x5],dl
c00144cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144d0:	8a 00                	mov    al,BYTE PTR [eax]
c00144d2:	0f b6 c0             	movzx  eax,al
c00144d5:	85 c0                	test   eax,eax
c00144d7:	75 93                	jne    c001446c <ipaddr_ntoa_r+0x38>
c00144d9:	eb 35                	jmp    c0014510 <ipaddr_ntoa_r+0xdc>
c00144db:	90                   	nop
c00144dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144e0:	8d 50 01             	lea    edx,[eax+0x1]
c00144e3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00144e7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00144eb:	7f 0b                	jg     c00144f8 <ipaddr_ntoa_r+0xc4>
c00144ed:	b8 00 00 00 00       	mov    eax,0x0
c00144f2:	e9 85 00 00 00       	jmp    c001457c <ipaddr_ntoa_r+0x148>
c00144f7:	90                   	nop
c00144f8:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00144fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014501:	8d 48 01             	lea    ecx,[eax+0x1]
c0014504:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014508:	8a 54 14 05          	mov    dl,BYTE PTR [esp+edx*1+0x5]
c001450c:	88 10                	mov    BYTE PTR [eax],dl
c001450e:	66 90                	xchg   ax,ax
c0014510:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c0014514:	8d 50 ff             	lea    edx,[eax-0x1]
c0014517:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c001451b:	0f b6 c0             	movzx  eax,al
c001451e:	85 c0                	test   eax,eax
c0014520:	75 ba                	jne    c00144dc <ipaddr_ntoa_r+0xa8>
c0014522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014526:	8d 50 01             	lea    edx,[eax+0x1]
c0014529:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001452d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0014531:	7f 09                	jg     c001453c <ipaddr_ntoa_r+0x108>
c0014533:	b8 00 00 00 00       	mov    eax,0x0
c0014538:	eb 42                	jmp    c001457c <ipaddr_ntoa_r+0x148>
c001453a:	66 90                	xchg   ax,ax
c001453c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014540:	8d 50 01             	lea    edx,[eax+0x1]
c0014543:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014547:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
c001454a:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001454f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0014553:	83 c0 01             	add    eax,0x1
c0014556:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001455a:	66 90                	xchg   ax,ax
c001455c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0014561:	83 f8 03             	cmp    eax,0x3
c0014564:	0f 86 fa fe ff ff    	jbe    c0014464 <ipaddr_ntoa_r+0x30>
c001456a:	83 6c 24 1c 01       	sub    DWORD PTR [esp+0x1c],0x1
c001456f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014573:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014576:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001457a:	66 90                	xchg   ax,ax
c001457c:	83 c4 20             	add    esp,0x20
c001457f:	c3                   	ret    

c0014580 <ipaddr_ntoa>:
c0014580:	6a 10                	push   0x10
c0014582:	68 a4 a9 03 c0       	push   0xc003a9a4
c0014587:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001458b:	e8 a4 fe ff ff       	call   c0014434 <ipaddr_ntoa_r>
c0014590:	83 c4 0c             	add    esp,0xc
c0014593:	c3                   	ret    

c0014594 <ip_reass_dequeue_datagram>:
c0014594:	83 ec 0c             	sub    esp,0xc
c0014597:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c001459c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00145a0:	75 0e                	jne    c00145b0 <ip_reass_dequeue_datagram+0x1c>
c00145a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00145a8:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c00145ad:	eb 29                	jmp    c00145d8 <ip_reass_dequeue_datagram+0x44>
c00145af:	90                   	nop
c00145b0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00145b5:	75 15                	jne    c00145cc <ip_reass_dequeue_datagram+0x38>
c00145b7:	83 ec 08             	sub    esp,0x8
c00145ba:	68 ac 10 03 c0       	push   0xc00310ac
c00145bf:	68 a6 fd 02 c0       	push   0xc002fda6
c00145c4:	e8 4f b8 00 00       	call   c001fe18 <CPrintf>
c00145c9:	83 c4 10             	add    esp,0x10
c00145cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00145d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145d6:	89 10                	mov    DWORD PTR [eax],edx
c00145d8:	83 ec 08             	sub    esp,0x8
c00145db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145df:	6a 05                	push   0x5
c00145e1:	e8 52 36 ff ff       	call   c0007c38 <memp_free>
c00145e6:	83 c4 10             	add    esp,0x10
c00145e9:	90                   	nop
c00145ea:	83 c4 0c             	add    esp,0xc
c00145ed:	c3                   	ret    
c00145ee:	66 90                	xchg   ax,ax

c00145f0 <ip_reass_free_complete_datagram>:
c00145f0:	83 ec 2c             	sub    esp,0x2c
c00145f3:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c00145fa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00145fe:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0014602:	75 18                	jne    c001461c <ip_reass_free_complete_datagram+0x2c>
c0014604:	83 ec 08             	sub    esp,0x8
c0014607:	68 c5 10 03 c0       	push   0xc00310c5
c001460c:	68 a6 fd 02 c0       	push   0xc002fda6
c0014611:	e8 02 b8 00 00       	call   c001fe18 <CPrintf>
c0014616:	83 c4 10             	add    esp,0x10
c0014619:	8d 76 00             	lea    esi,[esi+0x0]
c001461c:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0014621:	74 21                	je     c0014644 <ip_reass_free_complete_datagram+0x54>
c0014623:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014627:	8b 00                	mov    eax,DWORD PTR [eax]
c0014629:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c001462d:	74 15                	je     c0014644 <ip_reass_free_complete_datagram+0x54>
c001462f:	83 ec 08             	sub    esp,0x8
c0014632:	68 d1 10 03 c0       	push   0xc00310d1
c0014637:	68 a6 fd 02 c0       	push   0xc002fda6
c001463c:	e8 d7 b7 00 00       	call   c001fe18 <CPrintf>
c0014641:	83 c4 10             	add    esp,0x10
c0014644:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014648:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001464b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001464e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014652:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014656:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001465a:	0f b7 c0             	movzx  eax,ax
c001465d:	85 c0                	test   eax,eax
c001465f:	0f 85 a3 00 00 00    	jne    c0014708 <ip_reass_free_complete_datagram+0x118>
c0014665:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014669:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001466c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014670:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014674:	8b 10                	mov    edx,DWORD PTR [eax]
c0014676:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001467a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001467d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014681:	8d 50 08             	lea    edx,[eax+0x8]
c0014684:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014688:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001468b:	83 ec 04             	sub    esp,0x4
c001468e:	6a 14                	push   0x14
c0014690:	52                   	push   edx
c0014691:	50                   	push   eax
c0014692:	e8 e3 bc fe ff       	call   c000037a <memcpy>
c0014697:	83 c4 10             	add    esp,0x10
c001469a:	83 ec 08             	sub    esp,0x8
c001469d:	6a 01                	push   0x1
c001469f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00146a3:	e8 4c eb ff ff       	call   c00131f4 <icmp_time_exceeded>
c00146a8:	83 c4 10             	add    esp,0x10
c00146ab:	83 ec 0c             	sub    esp,0xc
c00146ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00146b2:	e8 11 46 ff ff       	call   c0008cc8 <pbuf_clen>
c00146b7:	83 c4 10             	add    esp,0x10
c00146ba:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00146be:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00146c3:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00146c8:	01 d0                	add    eax,edx
c00146ca:	3d ff ff 00 00       	cmp    eax,0xffff
c00146cf:	7e 17                	jle    c00146e8 <ip_reass_free_complete_datagram+0xf8>
c00146d1:	83 ec 08             	sub    esp,0x8
c00146d4:	68 e3 10 03 c0       	push   0xc00310e3
c00146d9:	68 a6 fd 02 c0       	push   0xc002fda6
c00146de:	e8 35 b7 00 00       	call   c001fe18 <CPrintf>
c00146e3:	83 c4 10             	add    esp,0x10
c00146e6:	66 90                	xchg   ax,ax
c00146e8:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00146ed:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c00146f2:	01 d0                	add    eax,edx
c00146f4:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00146f9:	83 ec 0c             	sub    esp,0xc
c00146fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014700:	e8 ef 3d ff ff       	call   c00084f4 <pbuf_free>
c0014705:	83 c4 10             	add    esp,0x10
c0014708:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001470c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001470f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014713:	eb 7b                	jmp    c0014790 <ip_reass_free_complete_datagram+0x1a0>
c0014715:	8d 76 00             	lea    esi,[esi+0x0]
c0014718:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001471c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001471f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014723:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014727:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001472b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001472f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014731:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014735:	83 ec 0c             	sub    esp,0xc
c0014738:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001473c:	e8 87 45 ff ff       	call   c0008cc8 <pbuf_clen>
c0014741:	83 c4 10             	add    esp,0x10
c0014744:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0014748:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c001474d:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014752:	01 d0                	add    eax,edx
c0014754:	3d ff ff 00 00       	cmp    eax,0xffff
c0014759:	7e 15                	jle    c0014770 <ip_reass_free_complete_datagram+0x180>
c001475b:	83 ec 08             	sub    esp,0x8
c001475e:	68 e3 10 03 c0       	push   0xc00310e3
c0014763:	68 a6 fd 02 c0       	push   0xc002fda6
c0014768:	e8 ab b6 00 00       	call   c001fe18 <CPrintf>
c001476d:	83 c4 10             	add    esp,0x10
c0014770:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014775:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c001477a:	01 d0                	add    eax,edx
c001477c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0014781:	83 ec 0c             	sub    esp,0xc
c0014784:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014788:	e8 67 3d ff ff       	call   c00084f4 <pbuf_free>
c001478d:	83 c4 10             	add    esp,0x10
c0014790:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014795:	75 81                	jne    c0014718 <ip_reass_free_complete_datagram+0x128>
c0014797:	83 ec 08             	sub    esp,0x8
c001479a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001479e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00147a2:	e8 ed fd ff ff       	call   c0014594 <ip_reass_dequeue_datagram>
c00147a7:	83 c4 10             	add    esp,0x10
c00147aa:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c00147b0:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00147b5:	0f b7 c0             	movzx  eax,ax
c00147b8:	39 c2                	cmp    edx,eax
c00147ba:	76 18                	jbe    c00147d4 <ip_reass_free_complete_datagram+0x1e4>
c00147bc:	83 ec 08             	sub    esp,0x8
c00147bf:	68 00 11 03 c0       	push   0xc0031100
c00147c4:	68 a6 fd 02 c0       	push   0xc002fda6
c00147c9:	e8 4a b6 00 00       	call   c001fe18 <CPrintf>
c00147ce:	83 c4 10             	add    esp,0x10
c00147d1:	8d 76 00             	lea    esi,[esi+0x0]
c00147d4:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c00147db:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00147e0:	89 d1                	mov    ecx,edx
c00147e2:	29 c1                	sub    ecx,eax
c00147e4:	89 c8                	mov    eax,ecx
c00147e6:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c00147ec:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00147f1:	83 c4 2c             	add    esp,0x2c
c00147f4:	c3                   	ret    
c00147f5:	8d 76 00             	lea    esi,[esi+0x0]

c00147f8 <ip_reass_tmr>:
c00147f8:	83 ec 1c             	sub    esp,0x1c
c00147fb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014803:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014808:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001480c:	eb 62                	jmp    c0014870 <ip_reass_tmr+0x78>
c001480e:	66 90                	xchg   ax,ax
c0014810:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014814:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c0014817:	0f b6 c0             	movzx  eax,al
c001481a:	85 c0                	test   eax,eax
c001481c:	74 2a                	je     c0014848 <ip_reass_tmr+0x50>
c001481e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014822:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c0014825:	83 e8 01             	sub    eax,0x1
c0014828:	88 c2                	mov    dl,al
c001482a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001482e:	88 50 1f             	mov    BYTE PTR [eax+0x1f],dl
c0014831:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014835:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014839:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001483d:	8b 00                	mov    eax,DWORD PTR [eax]
c001483f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014843:	eb 2b                	jmp    c0014870 <ip_reass_tmr+0x78>
c0014845:	8d 76 00             	lea    esi,[esi+0x0]
c0014848:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001484c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014850:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014854:	8b 00                	mov    eax,DWORD PTR [eax]
c0014856:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001485a:	83 ec 08             	sub    esp,0x8
c001485d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014861:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014865:	e8 86 fd ff ff       	call   c00145f0 <ip_reass_free_complete_datagram>
c001486a:	83 c4 10             	add    esp,0x10
c001486d:	8d 76 00             	lea    esi,[esi+0x0]
c0014870:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014875:	75 99                	jne    c0014810 <ip_reass_tmr+0x18>
c0014877:	90                   	nop
c0014878:	83 c4 1c             	add    esp,0x1c
c001487b:	c3                   	ret    

c001487c <ip_reass_remove_oldest_datagram>:
c001487c:	83 ec 2c             	sub    esp,0x2c
c001487f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014887:	90                   	nop
c0014888:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014890:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014898:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00148a0:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c00148a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00148a9:	e9 9a 00 00 00       	jmp    c0014948 <ip_reass_remove_oldest_datagram+0xcc>
c00148ae:	66 90                	xchg   ax,ax
c00148b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148b4:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c00148b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00148be:	39 c2                	cmp    edx,eax
c00148c0:	75 2e                	jne    c00148f0 <ip_reass_remove_oldest_datagram+0x74>
c00148c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148c6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00148c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00148d0:	39 c2                	cmp    edx,eax
c00148d2:	75 1c                	jne    c00148f0 <ip_reass_remove_oldest_datagram+0x74>
c00148d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148d8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00148db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148df:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00148e3:	0f b7 d2             	movzx  edx,dx
c00148e6:	0f b7 c0             	movzx  eax,ax
c00148e9:	39 c2                	cmp    edx,eax
c00148eb:	74 3b                	je     c0014928 <ip_reass_remove_oldest_datagram+0xac>
c00148ed:	8d 76 00             	lea    esi,[esi+0x0]
c00148f0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00148f5:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00148fa:	75 0c                	jne    c0014908 <ip_reass_remove_oldest_datagram+0x8c>
c00148fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014900:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014904:	eb 22                	jmp    c0014928 <ip_reass_remove_oldest_datagram+0xac>
c0014906:	66 90                	xchg   ax,ax
c0014908:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001490c:	8a 50 1f             	mov    dl,BYTE PTR [eax+0x1f]
c001490f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014913:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c0014916:	0f b6 d2             	movzx  edx,dl
c0014919:	0f b6 c0             	movzx  eax,al
c001491c:	39 c2                	cmp    edx,eax
c001491e:	77 08                	ja     c0014928 <ip_reass_remove_oldest_datagram+0xac>
c0014920:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014924:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014928:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001492c:	8b 00                	mov    eax,DWORD PTR [eax]
c001492e:	85 c0                	test   eax,eax
c0014930:	74 0a                	je     c001493c <ip_reass_remove_oldest_datagram+0xc0>
c0014932:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014936:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001493a:	66 90                	xchg   ax,ax
c001493c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014940:	8b 00                	mov    eax,DWORD PTR [eax]
c0014942:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014946:	66 90                	xchg   ax,ax
c0014948:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001494d:	0f 85 5d ff ff ff    	jne    c00148b0 <ip_reass_remove_oldest_datagram+0x34>
c0014953:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014958:	74 22                	je     c001497c <ip_reass_remove_oldest_datagram+0x100>
c001495a:	83 ec 08             	sub    esp,0x8
c001495d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014961:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014965:	e8 86 fc ff ff       	call   c00145f0 <ip_reass_free_complete_datagram>
c001496a:	83 c4 10             	add    esp,0x10
c001496d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014971:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014975:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0014979:	8d 76 00             	lea    esi,[esi+0x0]
c001497c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014980:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0014984:	7d 0e                	jge    c0014994 <ip_reass_remove_oldest_datagram+0x118>
c0014986:	83 7c 24 0c 01       	cmp    DWORD PTR [esp+0xc],0x1
c001498b:	0f 8f f7 fe ff ff    	jg     c0014888 <ip_reass_remove_oldest_datagram+0xc>
c0014991:	8d 76 00             	lea    esi,[esi+0x0]
c0014994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014998:	83 c4 2c             	add    esp,0x2c
c001499b:	c3                   	ret    

c001499c <ip_reass_enqueue_new_datagram>:
c001499c:	83 ec 1c             	sub    esp,0x1c
c001499f:	83 ec 0c             	sub    esp,0xc
c00149a2:	6a 05                	push   0x5
c00149a4:	e8 63 31 ff ff       	call   c0007b0c <memp_malloc>
c00149a9:	83 c4 10             	add    esp,0x10
c00149ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00149b0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00149b5:	75 4d                	jne    c0014a04 <ip_reass_enqueue_new_datagram+0x68>
c00149b7:	83 ec 08             	sub    esp,0x8
c00149ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00149be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00149c2:	e8 b5 fe ff ff       	call   c001487c <ip_reass_remove_oldest_datagram>
c00149c7:	83 c4 10             	add    esp,0x10
c00149ca:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c00149ce:	7f 14                	jg     c00149e4 <ip_reass_enqueue_new_datagram+0x48>
c00149d0:	83 ec 0c             	sub    esp,0xc
c00149d3:	6a 05                	push   0x5
c00149d5:	e8 32 31 ff ff       	call   c0007b0c <memp_malloc>
c00149da:	83 c4 10             	add    esp,0x10
c00149dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00149e1:	8d 76 00             	lea    esi,[esi+0x0]
c00149e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00149e9:	75 19                	jne    c0014a04 <ip_reass_enqueue_new_datagram+0x68>
c00149eb:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c00149f1:	83 c0 01             	add    eax,0x1
c00149f4:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c00149fa:	b8 00 00 00 00       	mov    eax,0x0
c00149ff:	eb 53                	jmp    c0014a54 <ip_reass_enqueue_new_datagram+0xb8>
c0014a01:	8d 76 00             	lea    esi,[esi+0x0]
c0014a04:	83 ec 04             	sub    esp,0x4
c0014a07:	6a 20                	push   0x20
c0014a09:	6a 00                	push   0x0
c0014a0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014a0f:	e8 dc ba fe ff       	call   c00004f0 <memset>
c0014a14:	83 c4 10             	add    esp,0x10
c0014a17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a1b:	c6 40 1f 03          	mov    BYTE PTR [eax+0x1f],0x3
c0014a1f:	8b 15 b8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9b8
c0014a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a29:	89 10                	mov    DWORD PTR [eax],edx
c0014a2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a2f:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c0014a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a38:	83 c0 08             	add    eax,0x8
c0014a3b:	83 ec 04             	sub    esp,0x4
c0014a3e:	6a 14                	push   0x14
c0014a40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014a44:	50                   	push   eax
c0014a45:	e8 30 b9 fe ff       	call   c000037a <memcpy>
c0014a4a:	83 c4 10             	add    esp,0x10
c0014a4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a51:	8d 76 00             	lea    esi,[esi+0x0]
c0014a54:	83 c4 1c             	add    esp,0x1c
c0014a57:	c3                   	ret    

c0014a58 <ip_reass_chain_frag_into_datagram_and_validate>:
c0014a58:	53                   	push   ebx
c0014a59:	83 ec 28             	sub    esp,0x28
c0014a5c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014a64:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c0014a6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014a70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014a73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a7b:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014a7f:	0f b7 c0             	movzx  eax,ax
c0014a82:	83 ec 0c             	sub    esp,0xc
c0014a85:	50                   	push   eax
c0014a86:	e8 5d c1 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014a8b:	83 c4 10             	add    esp,0x10
c0014a8e:	89 c3                	mov    ebx,eax
c0014a90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a94:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014a97:	0f b7 c0             	movzx  eax,ax
c0014a9a:	83 ec 0c             	sub    esp,0xc
c0014a9d:	50                   	push   eax
c0014a9e:	e8 45 c1 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014aa3:	83 c4 10             	add    esp,0x10
c0014aa6:	0f b7 c0             	movzx  eax,ax
c0014aa9:	c1 e8 08             	shr    eax,0x8
c0014aac:	83 e0 0f             	and    eax,0xf
c0014aaf:	c1 e0 02             	shl    eax,0x2
c0014ab2:	89 d9                	mov    ecx,ebx
c0014ab4:	29 c1                	sub    ecx,eax
c0014ab6:	89 c8                	mov    eax,ecx
c0014ab8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0014abd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014ac1:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014ac5:	0f b7 c0             	movzx  eax,ax
c0014ac8:	83 ec 0c             	sub    esp,0xc
c0014acb:	50                   	push   eax
c0014acc:	e8 17 c1 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014ad1:	83 c4 10             	add    esp,0x10
c0014ad4:	25 ff 1f 00 00       	and    eax,0x1fff
c0014ad9:	c1 e0 03             	shl    eax,0x3
c0014adc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0014ae1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014ae5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ae8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014aec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014af0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014af6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014afa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014afe:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0014b02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014b06:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0014b0b:	01 d0                	add    eax,edx
c0014b0d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014b11:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0014b15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b20:	e9 13 01 00 00       	jmp    c0014c38 <ip_reass_chain_frag_into_datagram_and_validate+0x1e0>
c0014b25:	8d 76 00             	lea    esi,[esi+0x0]
c0014b28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b2f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b37:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014b3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b3f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b43:	0f b7 d2             	movzx  edx,dx
c0014b46:	0f b7 c0             	movzx  eax,ax
c0014b49:	39 c2                	cmp    edx,eax
c0014b4b:	73 6f                	jae    c0014bbc <ip_reass_chain_frag_into_datagram_and_validate+0x164>
c0014b4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014b55:	89 10                	mov    DWORD PTR [eax],edx
c0014b57:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014b5c:	74 4e                	je     c0014bac <ip_reass_chain_frag_into_datagram_and_validate+0x154>
c0014b5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b62:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014b66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b6a:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014b6e:	0f b7 d2             	movzx  edx,dx
c0014b71:	0f b7 c0             	movzx  eax,ax
c0014b74:	39 c2                	cmp    edx,eax
c0014b76:	0f 82 bc 02 00 00    	jb     c0014e38 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014b7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b80:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014b84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b88:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b8c:	0f b7 d2             	movzx  edx,dx
c0014b8f:	0f b7 c0             	movzx  eax,ax
c0014b92:	39 c2                	cmp    edx,eax
c0014b94:	0f 87 9e 02 00 00    	ja     c0014e38 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014b9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b9e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014ba2:	89 10                	mov    DWORD PTR [eax],edx
c0014ba4:	e9 9b 00 00 00       	jmp    c0014c44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0014bac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bb0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014bb4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014bb7:	e9 88 00 00 00       	jmp    c0014c44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014bbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bc0:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014bc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014bc8:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014bcc:	0f b7 d2             	movzx  edx,dx
c0014bcf:	0f b7 c0             	movzx  eax,ax
c0014bd2:	39 c2                	cmp    edx,eax
c0014bd4:	0f 84 62 02 00 00    	je     c0014e3c <ip_reass_chain_frag_into_datagram_and_validate+0x3e4>
c0014bda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bde:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014be2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014be6:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014bea:	0f b7 d2             	movzx  edx,dx
c0014bed:	0f b7 c0             	movzx  eax,ax
c0014bf0:	39 c2                	cmp    edx,eax
c0014bf2:	0f 82 48 02 00 00    	jb     c0014e40 <ip_reass_chain_frag_into_datagram_and_validate+0x3e8>
c0014bf8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014bfd:	74 25                	je     c0014c24 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014bff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c03:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c0b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014c0f:	0f b7 d2             	movzx  edx,dx
c0014c12:	0f b7 c0             	movzx  eax,ax
c0014c15:	39 c2                	cmp    edx,eax
c0014c17:	74 0b                	je     c0014c24 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014c19:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014c21:	8d 76 00             	lea    esi,[esi+0x0]
c0014c24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c28:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c2a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c36:	66 90                	xchg   ax,ax
c0014c38:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014c3d:	0f 85 e5 fe ff ff    	jne    c0014b28 <ip_reass_chain_frag_into_datagram_and_validate+0xd0>
c0014c43:	90                   	nop
c0014c44:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014c49:	0f 85 95 00 00 00    	jne    c0014ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014c4f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014c54:	74 62                	je     c0014cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x260>
c0014c56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c5a:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c62:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014c66:	0f b7 d2             	movzx  edx,dx
c0014c69:	0f b7 c0             	movzx  eax,ax
c0014c6c:	39 c2                	cmp    edx,eax
c0014c6e:	76 18                	jbe    c0014c88 <ip_reass_chain_frag_into_datagram_and_validate+0x230>
c0014c70:	83 ec 08             	sub    esp,0x8
c0014c73:	68 1b 11 03 c0       	push   0xc003111b
c0014c78:	68 a6 fd 02 c0       	push   0xc002fda6
c0014c7d:	e8 96 b1 00 00       	call   c001fe18 <CPrintf>
c0014c82:	83 c4 10             	add    esp,0x10
c0014c85:	8d 76 00             	lea    esi,[esi+0x0]
c0014c88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c8c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014c90:	89 10                	mov    DWORD PTR [eax],edx
c0014c92:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c96:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c9e:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014ca2:	0f b7 d2             	movzx  edx,dx
c0014ca5:	0f b7 c0             	movzx  eax,ax
c0014ca8:	39 c2                	cmp    edx,eax
c0014caa:	74 38                	je     c0014ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014cac:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014cb4:	eb 2e                	jmp    c0014ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014cb6:	66 90                	xchg   ax,ax
c0014cb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014cbf:	85 c0                	test   eax,eax
c0014cc1:	74 15                	je     c0014cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
c0014cc3:	83 ec 08             	sub    esp,0x8
c0014cc6:	68 5c 11 03 c0       	push   0xc003115c
c0014ccb:	68 a6 fd 02 c0       	push   0xc002fda6
c0014cd0:	e8 43 b1 00 00       	call   c001fe18 <CPrintf>
c0014cd5:	83 c4 10             	add    esp,0x10
c0014cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cdc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014ce0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014ce3:	90                   	nop
c0014ce4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ce8:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014ceb:	0f b6 c0             	movzx  eax,al
c0014cee:	83 e0 01             	and    eax,0x1
c0014cf1:	0f 84 39 01 00 00    	je     c0014e30 <ip_reass_chain_frag_into_datagram_and_validate+0x3d8>
c0014cf7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014cfc:	0f 84 26 01 00 00    	je     c0014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014d02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d09:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d0c:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014d10:	0f b7 c0             	movzx  eax,ax
c0014d13:	85 c0                	test   eax,eax
c0014d15:	74 0d                	je     c0014d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>
c0014d17:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d1f:	e9 04 01 00 00       	jmp    c0014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014d24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d30:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d36:	eb 44                	jmp    c0014d7c <ip_reass_chain_frag_into_datagram_and_validate+0x324>
c0014d38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014d3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d3f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014d43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d47:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014d4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d4f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014d53:	0f b7 d2             	movzx  edx,dx
c0014d56:	0f b7 c0             	movzx  eax,ax
c0014d59:	39 c2                	cmp    edx,eax
c0014d5b:	74 0b                	je     c0014d68 <ip_reass_chain_frag_into_datagram_and_validate+0x310>
c0014d5d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d65:	eb 1d                	jmp    c0014d84 <ip_reass_chain_frag_into_datagram_and_validate+0x32c>
c0014d67:	90                   	nop
c0014d68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d6c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d74:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d7a:	66 90                	xchg   ax,ax
c0014d7c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014d81:	75 b5                	jne    c0014d38 <ip_reass_chain_frag_into_datagram_and_validate+0x2e0>
c0014d83:	90                   	nop
c0014d84:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014d89:	0f 84 99 00 00 00    	je     c0014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014d8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d96:	85 c0                	test   eax,eax
c0014d98:	75 16                	jne    c0014db0 <ip_reass_chain_frag_into_datagram_and_validate+0x358>
c0014d9a:	83 ec 08             	sub    esp,0x8
c0014d9d:	68 39 11 03 c0       	push   0xc0031139
c0014da2:	68 a6 fd 02 c0       	push   0xc002fda6
c0014da7:	e8 6c b0 00 00       	call   c001fe18 <CPrintf>
c0014dac:	83 c4 10             	add    esp,0x10
c0014daf:	90                   	nop
c0014db0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014db4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014db7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014dba:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0014dbe:	75 18                	jne    c0014dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x380>
c0014dc0:	83 ec 08             	sub    esp,0x8
c0014dc3:	68 39 11 03 c0       	push   0xc0031139
c0014dc8:	68 a6 fd 02 c0       	push   0xc002fda6
c0014dcd:	e8 46 b0 00 00       	call   c001fe18 <CPrintf>
c0014dd2:	83 c4 10             	add    esp,0x10
c0014dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0014dd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ddc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dde:	85 c0                	test   eax,eax
c0014de0:	74 16                	je     c0014df8 <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
c0014de2:	83 ec 08             	sub    esp,0x8
c0014de5:	68 94 11 03 c0       	push   0xc0031194
c0014dea:	68 a6 fd 02 c0       	push   0xc002fda6
c0014def:	e8 24 b0 00 00       	call   c001fe18 <CPrintf>
c0014df4:	83 c4 10             	add    esp,0x10
c0014df7:	90                   	nop
c0014df8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014dfc:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014e00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014e04:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014e07:	0f b7 d2             	movzx  edx,dx
c0014e0a:	0f b7 c0             	movzx  eax,ax
c0014e0d:	39 c2                	cmp    edx,eax
c0014e0f:	74 17                	je     c0014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014e11:	83 ec 08             	sub    esp,0x8
c0014e14:	68 b8 11 03 c0       	push   0xc00311b8
c0014e19:	68 a6 fd 02 c0       	push   0xc002fda6
c0014e1e:	e8 f5 af 00 00       	call   c001fe18 <CPrintf>
c0014e23:	83 c4 10             	add    esp,0x10
c0014e26:	66 90                	xchg   ax,ax
c0014e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e2c:	eb 52                	jmp    c0014e80 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014e2e:	66 90                	xchg   ax,ax
c0014e30:	b8 00 00 00 00       	mov    eax,0x0
c0014e35:	eb 49                	jmp    c0014e80 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014e37:	90                   	nop
c0014e38:	90                   	nop
c0014e39:	eb 09                	jmp    c0014e44 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014e3b:	90                   	nop
c0014e3c:	90                   	nop
c0014e3d:	eb 05                	jmp    c0014e44 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014e3f:	90                   	nop
c0014e40:	90                   	nop
c0014e41:	8d 76 00             	lea    esi,[esi+0x0]
c0014e44:	83 ec 0c             	sub    esp,0xc
c0014e47:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014e4b:	e8 78 3e ff ff       	call   c0008cc8 <pbuf_clen>
c0014e50:	83 c4 10             	add    esp,0x10
c0014e53:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014e5a:	0f b6 c0             	movzx  eax,al
c0014e5d:	89 d3                	mov    ebx,edx
c0014e5f:	29 c3                	sub    ebx,eax
c0014e61:	89 d8                	mov    eax,ebx
c0014e63:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014e69:	83 ec 0c             	sub    esp,0xc
c0014e6c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014e70:	e8 7f 36 ff ff       	call   c00084f4 <pbuf_free>
c0014e75:	83 c4 10             	add    esp,0x10
c0014e78:	b8 00 00 00 00       	mov    eax,0x0
c0014e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0014e80:	83 c4 28             	add    esp,0x28
c0014e83:	5b                   	pop    ebx
c0014e84:	c3                   	ret    
c0014e85:	8d 76 00             	lea    esi,[esi+0x0]

c0014e88 <ip_reass>:
c0014e88:	53                   	push   ebx
c0014e89:	83 ec 28             	sub    esp,0x28
c0014e8c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014e94:	66 a1 52 67 03 c0    	mov    ax,ds:0xc0036752
c0014e9a:	83 c0 01             	add    eax,0x1
c0014e9d:	66 a3 52 67 03 c0    	mov    ds:0xc0036752,ax
c0014ea3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ea7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014eaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014eb2:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014eb5:	0f b7 c0             	movzx  eax,ax
c0014eb8:	83 ec 0c             	sub    esp,0xc
c0014ebb:	50                   	push   eax
c0014ebc:	e8 27 bd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014ec1:	83 c4 10             	add    esp,0x10
c0014ec4:	0f b7 c0             	movzx  eax,ax
c0014ec7:	c1 e8 08             	shr    eax,0x8
c0014eca:	0f b7 c0             	movzx  eax,ax
c0014ecd:	83 e0 0f             	and    eax,0xf
c0014ed0:	c1 e0 02             	shl    eax,0x2
c0014ed3:	83 f8 14             	cmp    eax,0x14
c0014ed6:	74 14                	je     c0014eec <ip_reass+0x64>
c0014ed8:	66 a1 64 67 03 c0    	mov    ax,ds:0xc0036764
c0014ede:	83 c0 01             	add    eax,0x1
c0014ee1:	66 a3 64 67 03 c0    	mov    ds:0xc0036764,ax
c0014ee7:	e9 68 03 00 00       	jmp    c0015254 <ip_reass+0x3cc>
c0014eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ef0:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014ef4:	0f b7 c0             	movzx  eax,ax
c0014ef7:	83 ec 0c             	sub    esp,0xc
c0014efa:	50                   	push   eax
c0014efb:	e8 e8 bc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014f00:	83 c4 10             	add    esp,0x10
c0014f03:	25 ff 1f 00 00       	and    eax,0x1fff
c0014f08:	c1 e0 03             	shl    eax,0x3
c0014f0b:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f14:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014f18:	0f b7 c0             	movzx  eax,ax
c0014f1b:	83 ec 0c             	sub    esp,0xc
c0014f1e:	50                   	push   eax
c0014f1f:	e8 c4 bc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014f24:	83 c4 10             	add    esp,0x10
c0014f27:	89 c3                	mov    ebx,eax
c0014f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f2d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014f30:	0f b7 c0             	movzx  eax,ax
c0014f33:	83 ec 0c             	sub    esp,0xc
c0014f36:	50                   	push   eax
c0014f37:	e8 ac bc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014f3c:	83 c4 10             	add    esp,0x10
c0014f3f:	0f b7 c0             	movzx  eax,ax
c0014f42:	c1 e8 08             	shr    eax,0x8
c0014f45:	83 e0 0f             	and    eax,0xf
c0014f48:	c1 e0 02             	shl    eax,0x2
c0014f4b:	89 d9                	mov    ecx,ebx
c0014f4d:	29 c1                	sub    ecx,eax
c0014f4f:	89 c8                	mov    eax,ecx
c0014f51:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0014f56:	83 ec 0c             	sub    esp,0xc
c0014f59:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014f5d:	e8 66 3d ff ff       	call   c0008cc8 <pbuf_clen>
c0014f62:	83 c4 10             	add    esp,0x10
c0014f65:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0014f69:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014f6f:	0f b7 d0             	movzx  edx,ax
c0014f72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014f77:	01 d0                	add    eax,edx
c0014f79:	83 f8 0a             	cmp    eax,0xa
c0014f7c:	7e 42                	jle    c0014fc0 <ip_reass+0x138>
c0014f7e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014f83:	83 ec 08             	sub    esp,0x8
c0014f86:	50                   	push   eax
c0014f87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f8b:	e8 ec f8 ff ff       	call   c001487c <ip_reass_remove_oldest_datagram>
c0014f90:	83 c4 10             	add    esp,0x10
c0014f93:	85 c0                	test   eax,eax
c0014f95:	74 15                	je     c0014fac <ip_reass+0x124>
c0014f97:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014f9d:	0f b7 d0             	movzx  edx,ax
c0014fa0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014fa5:	01 d0                	add    eax,edx
c0014fa7:	83 f8 0a             	cmp    eax,0xa
c0014faa:	7e 14                	jle    c0014fc0 <ip_reass+0x138>
c0014fac:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0014fb2:	83 c0 01             	add    eax,0x1
c0014fb5:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c0014fbb:	e9 94 02 00 00       	jmp    c0015254 <ip_reass+0x3cc>
c0014fc0:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014fc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014fc9:	eb 65                	jmp    c0015030 <ip_reass+0x1a8>
c0014fcb:	90                   	nop
c0014fcc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fd0:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c0014fd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fd7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014fda:	39 c2                	cmp    edx,eax
c0014fdc:	75 3e                	jne    c001501c <ip_reass+0x194>
c0014fde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fe2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014fe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fe9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014fec:	39 c2                	cmp    edx,eax
c0014fee:	75 2c                	jne    c001501c <ip_reass+0x194>
c0014ff0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ff4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ffb:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014fff:	0f b7 d2             	movzx  edx,dx
c0015002:	0f b7 c0             	movzx  eax,ax
c0015005:	39 c2                	cmp    edx,eax
c0015007:	75 13                	jne    c001501c <ip_reass+0x194>
c0015009:	66 a1 66 67 03 c0    	mov    ax,ds:0xc0036766
c001500f:	83 c0 01             	add    eax,0x1
c0015012:	66 a3 66 67 03 c0    	mov    ds:0xc0036766,ax
c0015018:	eb 1e                	jmp    c0015038 <ip_reass+0x1b0>
c001501a:	66 90                	xchg   ax,ax
c001501c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015020:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015024:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015028:	8b 00                	mov    eax,DWORD PTR [eax]
c001502a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001502e:	66 90                	xchg   ax,ax
c0015030:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0015035:	75 95                	jne    c0014fcc <ip_reass+0x144>
c0015037:	90                   	nop
c0015038:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001503d:	75 25                	jne    c0015064 <ip_reass+0x1dc>
c001503f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0015044:	83 ec 08             	sub    esp,0x8
c0015047:	50                   	push   eax
c0015048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001504c:	e8 4b f9 ff ff       	call   c001499c <ip_reass_enqueue_new_datagram>
c0015051:	83 c4 10             	add    esp,0x10
c0015054:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015058:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001505d:	75 61                	jne    c00150c0 <ip_reass+0x238>
c001505f:	e9 f0 01 00 00       	jmp    c0015254 <ip_reass+0x3cc>
c0015064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015068:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c001506c:	0f b7 c0             	movzx  eax,ax
c001506f:	83 ec 0c             	sub    esp,0xc
c0015072:	50                   	push   eax
c0015073:	e8 70 bb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015078:	83 c4 10             	add    esp,0x10
c001507b:	0f b7 c0             	movzx  eax,ax
c001507e:	25 ff 1f 00 00       	and    eax,0x1fff
c0015083:	75 3b                	jne    c00150c0 <ip_reass+0x238>
c0015085:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015089:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c001508d:	0f b7 c0             	movzx  eax,ax
c0015090:	83 ec 0c             	sub    esp,0xc
c0015093:	50                   	push   eax
c0015094:	e8 4f bb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015099:	83 c4 10             	add    esp,0x10
c001509c:	0f b7 c0             	movzx  eax,ax
c001509f:	25 ff 1f 00 00       	and    eax,0x1fff
c00150a4:	74 1a                	je     c00150c0 <ip_reass+0x238>
c00150a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150aa:	83 c0 08             	add    eax,0x8
c00150ad:	83 ec 04             	sub    esp,0x4
c00150b0:	6a 14                	push   0x14
c00150b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00150b6:	50                   	push   eax
c00150b7:	e8 be b2 fe ff       	call   c000037a <memcpy>
c00150bc:	83 c4 10             	add    esp,0x10
c00150bf:	90                   	nop
c00150c0:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c00150c5:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c00150cb:	01 d0                	add    eax,edx
c00150cd:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c00150d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150d7:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00150db:	0f b7 c0             	movzx  eax,ax
c00150de:	83 e0 20             	and    eax,0x20
c00150e1:	75 29                	jne    c001510c <ip_reass+0x284>
c00150e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150e7:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c00150ea:	83 c8 01             	or     eax,0x1
c00150ed:	88 c2                	mov    dl,al
c00150ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150f3:	88 50 1e             	mov    BYTE PTR [eax+0x1e],dl
c00150f6:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00150fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00150ff:	01 d0                	add    eax,edx
c0015101:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015105:	66 89 42 1c          	mov    WORD PTR [edx+0x1c],ax
c0015109:	8d 76 00             	lea    esi,[esi+0x0]
c001510c:	83 ec 08             	sub    esp,0x8
c001510f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0015113:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015117:	e8 3c f9 ff ff       	call   c0014a58 <ip_reass_chain_frag_into_datagram_and_validate>
c001511c:	83 c4 10             	add    esp,0x10
c001511f:	85 c0                	test   eax,eax
c0015121:	0f 84 25 01 00 00    	je     c001524c <ip_reass+0x3c4>
c0015127:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001512b:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001512e:	83 c0 14             	add    eax,0x14
c0015131:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015135:	66 89 42 1c          	mov    WORD PTR [edx+0x1c],ax
c0015139:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001513d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015140:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015143:	8b 00                	mov    eax,DWORD PTR [eax]
c0015145:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015149:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001514d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015150:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015153:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015157:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001515b:	83 c0 08             	add    eax,0x8
c001515e:	83 ec 04             	sub    esp,0x4
c0015161:	6a 14                	push   0x14
c0015163:	50                   	push   eax
c0015164:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015168:	e8 0d b2 fe ff       	call   c000037a <memcpy>
c001516d:	83 c4 10             	add    esp,0x10
c0015170:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015174:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015177:	0f b7 c0             	movzx  eax,ax
c001517a:	83 ec 0c             	sub    esp,0xc
c001517d:	50                   	push   eax
c001517e:	e8 65 ba fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015183:	83 c4 10             	add    esp,0x10
c0015186:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001518a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c001518e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015192:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0015198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001519c:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c00151a2:	83 ec 08             	sub    esp,0x8
c00151a5:	6a 14                	push   0x14
c00151a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151ab:	e8 e0 e4 ff ff       	call   c0013690 <inet_chksum>
c00151b0:	83 c4 10             	add    esp,0x10
c00151b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00151b7:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00151bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00151c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00151c6:	eb 3c                	jmp    c0015204 <ip_reass+0x37c>
c00151c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00151cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00151cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00151d3:	83 ec 08             	sub    esp,0x8
c00151d6:	6a ec                	push   0xffffffec
c00151d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00151dc:	e8 77 31 ff ff       	call   c0008358 <pbuf_header>
c00151e1:	83 c4 10             	add    esp,0x10
c00151e4:	83 ec 08             	sub    esp,0x8
c00151e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00151eb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00151ef:	e8 38 3b ff ff       	call   c0008d2c <pbuf_cat>
c00151f4:	83 c4 10             	add    esp,0x10
c00151f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00151fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00151fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015201:	8d 76 00             	lea    esi,[esi+0x0]
c0015204:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015209:	75 bd                	jne    c00151c8 <ip_reass+0x340>
c001520b:	83 ec 08             	sub    esp,0x8
c001520e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015212:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015216:	e8 79 f3 ff ff       	call   c0014594 <ip_reass_dequeue_datagram>
c001521b:	83 c4 10             	add    esp,0x10
c001521e:	83 ec 0c             	sub    esp,0xc
c0015221:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015225:	e8 9e 3a ff ff       	call   c0008cc8 <pbuf_clen>
c001522a:	83 c4 10             	add    esp,0x10
c001522d:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0015234:	0f b6 c0             	movzx  eax,al
c0015237:	89 d3                	mov    ebx,edx
c0015239:	29 c3                	sub    ebx,eax
c001523b:	89 d8                	mov    eax,ebx
c001523d:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0015243:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015247:	eb 2f                	jmp    c0015278 <ip_reass+0x3f0>
c0015249:	8d 76 00             	lea    esi,[esi+0x0]
c001524c:	b8 00 00 00 00       	mov    eax,0x0
c0015251:	eb 25                	jmp    c0015278 <ip_reass+0x3f0>
c0015253:	90                   	nop
c0015254:	66 a1 56 67 03 c0    	mov    ax,ds:0xc0036756
c001525a:	83 c0 01             	add    eax,0x1
c001525d:	66 a3 56 67 03 c0    	mov    ds:0xc0036756,ax
c0015263:	83 ec 0c             	sub    esp,0xc
c0015266:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001526a:	e8 85 32 ff ff       	call   c00084f4 <pbuf_free>
c001526f:	83 c4 10             	add    esp,0x10
c0015272:	b8 00 00 00 00       	mov    eax,0x0
c0015277:	90                   	nop
c0015278:	83 c4 28             	add    esp,0x28
c001527b:	5b                   	pop    ebx
c001527c:	c3                   	ret    
c001527d:	8d 76 00             	lea    esi,[esi+0x0]

c0015280 <ip_frag_alloc_pbuf_custom_ref>:
c0015280:	83 ec 0c             	sub    esp,0xc
c0015283:	83 ec 0c             	sub    esp,0xc
c0015286:	6a 06                	push   0x6
c0015288:	e8 7f 28 ff ff       	call   c0007b0c <memp_malloc>
c001528d:	83 c4 10             	add    esp,0x10
c0015290:	83 c4 0c             	add    esp,0xc
c0015293:	c3                   	ret    

c0015294 <ip_frag_free_pbuf_custom_ref>:
c0015294:	83 ec 0c             	sub    esp,0xc
c0015297:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001529c:	75 16                	jne    c00152b4 <ip_frag_free_pbuf_custom_ref+0x20>
c001529e:	83 ec 08             	sub    esp,0x8
c00152a1:	68 d6 01 03 c0       	push   0xc00301d6
c00152a6:	68 a6 fd 02 c0       	push   0xc002fda6
c00152ab:	e8 68 ab 00 00       	call   c001fe18 <CPrintf>
c00152b0:	83 c4 10             	add    esp,0x10
c00152b3:	90                   	nop
c00152b4:	83 ec 08             	sub    esp,0x8
c00152b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152bb:	6a 06                	push   0x6
c00152bd:	e8 76 29 ff ff       	call   c0007c38 <memp_free>
c00152c2:	83 c4 10             	add    esp,0x10
c00152c5:	90                   	nop
c00152c6:	83 c4 0c             	add    esp,0xc
c00152c9:	c3                   	ret    
c00152ca:	66 90                	xchg   ax,ax

c00152cc <ipfrag_free_pbuf_custom>:
c00152cc:	83 ec 1c             	sub    esp,0x1c
c00152cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00152d7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00152dc:	75 16                	jne    c00152f4 <ipfrag_free_pbuf_custom+0x28>
c00152de:	83 ec 08             	sub    esp,0x8
c00152e1:	68 46 11 03 c0       	push   0xc0031146
c00152e6:	68 a6 fd 02 c0       	push   0xc002fda6
c00152eb:	e8 28 ab 00 00       	call   c001fe18 <CPrintf>
c00152f0:	83 c4 10             	add    esp,0x10
c00152f3:	90                   	nop
c00152f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152f8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00152fc:	74 16                	je     c0015314 <ipfrag_free_pbuf_custom+0x48>
c00152fe:	83 ec 08             	sub    esp,0x8
c0015301:	68 52 11 03 c0       	push   0xc0031152
c0015306:	68 a6 fd 02 c0       	push   0xc002fda6
c001530b:	e8 08 ab 00 00       	call   c001fe18 <CPrintf>
c0015310:	83 c4 10             	add    esp,0x10
c0015313:	90                   	nop
c0015314:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015318:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001531b:	85 c0                	test   eax,eax
c001531d:	74 15                	je     c0015334 <ipfrag_free_pbuf_custom+0x68>
c001531f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015323:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015326:	83 ec 0c             	sub    esp,0xc
c0015329:	50                   	push   eax
c001532a:	e8 c5 31 ff ff       	call   c00084f4 <pbuf_free>
c001532f:	83 c4 10             	add    esp,0x10
c0015332:	66 90                	xchg   ax,ax
c0015334:	83 ec 0c             	sub    esp,0xc
c0015337:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001533b:	e8 54 ff ff ff       	call   c0015294 <ip_frag_free_pbuf_custom_ref>
c0015340:	83 c4 10             	add    esp,0x10
c0015343:	90                   	nop
c0015344:	83 c4 1c             	add    esp,0x1c
c0015347:	c3                   	ret    

c0015348 <ip_frag>:
c0015348:	53                   	push   ebx
c0015349:	83 ec 38             	sub    esp,0x38
c001534c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015350:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015353:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c0015358:	66 c7 44 24 2a 14 00 	mov    WORD PTR [esp+0x2a],0x14
c001535f:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c0015366:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001536a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001536d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015371:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015375:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015379:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001537d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0015381:	0f b7 c0             	movzx  eax,ax
c0015384:	83 ec 0c             	sub    esp,0xc
c0015387:	50                   	push   eax
c0015388:	e8 5b b8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001538d:	83 c4 10             	add    esp,0x10
c0015390:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015395:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015399:	25 ff 1f 00 00       	and    eax,0x1fff
c001539e:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00153a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00153a7:	25 00 20 00 00       	and    eax,0x2000
c00153ac:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00153b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00153b8:	83 e8 14             	sub    eax,0x14
c00153bb:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c00153c0:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c00153c5:	83 e8 14             	sub    eax,0x14
c00153c8:	79 06                	jns    c00153d0 <ip_frag+0x88>
c00153ca:	83 c0 07             	add    eax,0x7
c00153cd:	8d 76 00             	lea    esi,[esi+0x0]
c00153d0:	c1 f8 03             	sar    eax,0x3
c00153d3:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00153d8:	e9 03 03 00 00       	jmp    c00156e0 <ip_frag+0x398>
c00153dd:	8d 76 00             	lea    esi,[esi+0x0]
c00153e0:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c00153e5:	8d 50 ed             	lea    edx,[eax-0x13]
c00153e8:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c00153ed:	39 c2                	cmp    edx,eax
c00153ef:	0f 9f c0             	setg   al
c00153f2:	0f b6 c0             	movzx  eax,al
c00153f5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00153fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00153fe:	25 ff 1f 00 00       	and    eax,0x1fff
c0015403:	89 c2                	mov    edx,eax
c0015405:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c001540a:	09 d0                	or     eax,edx
c001540c:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015411:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0015416:	85 c0                	test   eax,eax
c0015418:	75 0e                	jne    c0015428 <ip_frag+0xe0>
c001541a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001541e:	80 cc 20             	or     ah,0x20
c0015421:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015426:	66 90                	xchg   ax,ax
c0015428:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c001542d:	85 c0                	test   eax,eax
c001542f:	75 0b                	jne    c001543c <ip_frag+0xf4>
c0015431:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015435:	c1 e0 03             	shl    eax,0x3
c0015438:	eb 0a                	jmp    c0015444 <ip_frag+0xfc>
c001543a:	66 90                	xchg   ax,ax
c001543c:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0015441:	8d 76 00             	lea    esi,[esi+0x0]
c0015444:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0015449:	83 ec 04             	sub    esp,0x4
c001544c:	6a 00                	push   0x0
c001544e:	6a 14                	push   0x14
c0015450:	6a 02                	push   0x2
c0015452:	e8 75 32 ff ff       	call   c00086cc <pbuf_alloc>
c0015457:	83 c4 10             	add    esp,0x10
c001545a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001545e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015463:	75 07                	jne    c001546c <ip_frag+0x124>
c0015465:	b0 ff                	mov    al,0xff
c0015467:	e9 84 02 00 00       	jmp    c00156f0 <ip_frag+0x3a8>
c001546c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015470:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0015474:	0f b7 c0             	movzx  eax,ax
c0015477:	83 f8 13             	cmp    eax,0x13
c001547a:	77 18                	ja     c0015494 <ip_frag+0x14c>
c001547c:	83 ec 08             	sub    esp,0x8
c001547f:	68 e8 11 03 c0       	push   0xc00311e8
c0015484:	68 a6 fd 02 c0       	push   0xc002fda6
c0015489:	e8 8a a9 00 00       	call   c001fe18 <CPrintf>
c001548e:	83 c4 10             	add    esp,0x10
c0015491:	8d 76 00             	lea    esi,[esi+0x0]
c0015494:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015498:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001549b:	83 ec 04             	sub    esp,0x4
c001549e:	6a 14                	push   0x14
c00154a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00154a4:	50                   	push   eax
c00154a5:	e8 d0 ae fe ff       	call   c000037a <memcpy>
c00154aa:	83 c4 10             	add    esp,0x10
c00154ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00154b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00154b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00154b8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154bc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00154bf:	0f b7 44 24 2a       	movzx  eax,WORD PTR [esp+0x2a]
c00154c4:	01 c2                	add    edx,eax
c00154c6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154ca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00154cd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154d1:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00154d5:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c00154da:	89 d1                	mov    ecx,edx
c00154dc:	29 c1                	sub    ecx,eax
c00154de:	89 c8                	mov    eax,ecx
c00154e0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00154e4:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00154e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154ec:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c00154f1:	e9 1a 01 00 00       	jmp    c0015610 <ip_frag+0x2c8>
c00154f6:	66 90                	xchg   ax,ax
c00154f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154fc:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0015500:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015504:	0f b7 d8             	movzx  ebx,ax
c0015507:	0f b7 ca             	movzx  ecx,dx
c001550a:	39 cb                	cmp    ebx,ecx
c001550c:	76 02                	jbe    c0015510 <ip_frag+0x1c8>
c001550e:	89 d0                	mov    eax,edx
c0015510:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0015515:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c001551a:	85 c0                	test   eax,eax
c001551c:	75 12                	jne    c0015530 <ip_frag+0x1e8>
c001551e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015522:	8b 00                	mov    eax,DWORD PTR [eax]
c0015524:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015528:	e9 e3 00 00 00       	jmp    c0015610 <ip_frag+0x2c8>
c001552d:	8d 76 00             	lea    esi,[esi+0x0]
c0015530:	e8 4b fd ff ff       	call   c0015280 <ip_frag_alloc_pbuf_custom_ref>
c0015535:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015539:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001553e:	75 18                	jne    c0015558 <ip_frag+0x210>
c0015540:	83 ec 0c             	sub    esp,0xc
c0015543:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015547:	e8 a8 2f ff ff       	call   c00084f4 <pbuf_free>
c001554c:	83 c4 10             	add    esp,0x10
c001554f:	b0 ff                	mov    al,0xff
c0015551:	e9 9a 01 00 00       	jmp    c00156f0 <ip_frag+0x3a8>
c0015556:	66 90                	xchg   ax,ax
c0015558:	0f b7 5c 24 26       	movzx  ebx,WORD PTR [esp+0x26]
c001555d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015561:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015564:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015568:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c001556d:	83 ec 08             	sub    esp,0x8
c0015570:	53                   	push   ebx
c0015571:	51                   	push   ecx
c0015572:	52                   	push   edx
c0015573:	6a 02                	push   0x2
c0015575:	50                   	push   eax
c0015576:	6a 03                	push   0x3
c0015578:	e8 b7 2c ff ff       	call   c0008234 <pbuf_alloced_custom>
c001557d:	83 c4 20             	add    esp,0x20
c0015580:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015584:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0015589:	75 25                	jne    c00155b0 <ip_frag+0x268>
c001558b:	83 ec 0c             	sub    esp,0xc
c001558e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015592:	e8 fd fc ff ff       	call   c0015294 <ip_frag_free_pbuf_custom_ref>
c0015597:	83 c4 10             	add    esp,0x10
c001559a:	83 ec 0c             	sub    esp,0xc
c001559d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00155a1:	e8 4e 2f ff ff       	call   c00084f4 <pbuf_free>
c00155a6:	83 c4 10             	add    esp,0x10
c00155a9:	b0 ff                	mov    al,0xff
c00155ab:	e9 40 01 00 00       	jmp    c00156f0 <ip_frag+0x3a8>
c00155b0:	83 ec 0c             	sub    esp,0xc
c00155b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00155b7:	e8 40 37 ff ff       	call   c0008cfc <pbuf_ref>
c00155bc:	83 c4 10             	add    esp,0x10
c00155bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00155c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00155c7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00155ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00155ce:	c7 40 10 cc 52 01 c0 	mov    DWORD PTR [eax+0x10],0xc00152cc
c00155d5:	83 ec 08             	sub    esp,0x8
c00155d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00155dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00155e0:	e8 47 37 ff ff       	call   c0008d2c <pbuf_cat>
c00155e5:	83 c4 10             	add    esp,0x10
c00155e8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00155ec:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00155f1:	89 d3                	mov    ebx,edx
c00155f3:	29 c3                	sub    ebx,eax
c00155f5:	89 d8                	mov    eax,ebx
c00155f7:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c00155fc:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c0015601:	85 c0                	test   eax,eax
c0015603:	74 0b                	je     c0015610 <ip_frag+0x2c8>
c0015605:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015609:	8b 00                	mov    eax,DWORD PTR [eax]
c001560b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001560f:	90                   	nop
c0015610:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c0015615:	85 c0                	test   eax,eax
c0015617:	0f 85 db fe ff ff    	jne    c00154f8 <ip_frag+0x1b0>
c001561d:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0015622:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0015627:	0f b7 44 24 28       	movzx  eax,WORD PTR [esp+0x28]
c001562c:	83 ec 0c             	sub    esp,0xc
c001562f:	50                   	push   eax
c0015630:	e8 b3 b5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015635:	83 c4 10             	add    esp,0x10
c0015638:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001563c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0015640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015644:	83 c0 14             	add    eax,0x14
c0015647:	0f b7 c0             	movzx  eax,ax
c001564a:	83 ec 0c             	sub    esp,0xc
c001564d:	50                   	push   eax
c001564e:	e8 95 b5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015653:	83 c4 10             	add    esp,0x10
c0015656:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001565a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c001565e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015662:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0015668:	83 ec 08             	sub    esp,0x8
c001566b:	6a 14                	push   0x14
c001566d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015671:	e8 1a e0 ff ff       	call   c0013690 <inet_chksum>
c0015676:	83 c4 10             	add    esp,0x10
c0015679:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001567d:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0015681:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015685:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015688:	83 ec 04             	sub    esp,0x4
c001568b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001568f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015693:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0015697:	ff d0                	call   eax
c0015699:	83 c4 10             	add    esp,0x10
c001569c:	66 a1 50 67 03 c0    	mov    ax,ds:0xc0036750
c00156a2:	83 c0 01             	add    eax,0x1
c00156a5:	66 a3 50 67 03 c0    	mov    ds:0xc0036750,ax
c00156ab:	83 ec 0c             	sub    esp,0xc
c00156ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00156b2:	e8 3d 2e ff ff       	call   c00084f4 <pbuf_free>
c00156b7:	83 c4 10             	add    esp,0x10
c00156ba:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c00156bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156c3:	89 d1                	mov    ecx,edx
c00156c5:	29 c1                	sub    ecx,eax
c00156c7:	89 c8                	mov    eax,ecx
c00156c9:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c00156ce:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00156d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00156d6:	01 d0                	add    eax,edx
c00156d8:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00156dd:	8d 76 00             	lea    esi,[esi+0x0]
c00156e0:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c00156e5:	85 c0                	test   eax,eax
c00156e7:	0f 85 f3 fc ff ff    	jne    c00153e0 <ip_frag+0x98>
c00156ed:	b0 00                	mov    al,0x0
c00156ef:	90                   	nop
c00156f0:	83 c4 38             	add    esp,0x38
c00156f3:	5b                   	pop    ebx
c00156f4:	c3                   	ret    
c00156f5:	90                   	nop

c00156f6 <Computer::close(int, int, void*)>:
c00156f6:	53                   	push   ebx
c00156f7:	83 ec 08             	sub    esp,0x8
c00156fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156fe:	e8 a5 a5 00 00       	call   c001fca8 <KeExecuteAtexit()>
c0015703:	83 ec 0c             	sub    esp,0xc
c0015706:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c001570c:	50                   	push   eax
c001570d:	e8 a8 60 00 00       	call   c001b7ba <Device::closeAll()>
c0015712:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0015718:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001571c:	8b 10                	mov    edx,DWORD PTR [eax]
c001571e:	51                   	push   ecx
c001571f:	68 0f 27 00 00       	push   0x270f
c0015724:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015728:	53                   	push   ebx
c0015729:	50                   	push   eax
c001572a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001572d:	83 c4 14             	add    esp,0x14
c0015730:	68 08 12 03 c0       	push   0xc0031208
c0015735:	e8 b0 ad 00 00       	call   c00204ea <KePanic(char const*)>
c001573a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001573f:	83 c4 18             	add    esp,0x18
c0015742:	5b                   	pop    ebx
c0015743:	c3                   	ret    

c0015744 <Krnl::firstTask()>:
c0015744:	53                   	push   ebx
c0015745:	83 ec 14             	sub    esp,0x14
c0015748:	fb                   	sti    
c0015749:	68 1e 12 03 c0       	push   0xc003121e
c001574e:	e8 34 a6 00 00       	call   c001fd87 <KeSetBootMessage(char const*)>
c0015753:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c001575a:	e8 e4 0e 00 00       	call   c0016643 <malloc>
c001575f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015766:	89 c3                	mov    ebx,eax
c0015768:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001576d:	50                   	push   eax
c001576e:	68 37 12 03 c0       	push   0xc0031237
c0015773:	6a 01                	push   0x1
c0015775:	53                   	push   ebx
c0015776:	e8 0d f9 00 00       	call   c0025088 <Process::Process(bool, char const*, Process*, char**)>
c001577b:	83 c4 20             	add    esp,0x20
c001577e:	68 ff 00 00 00       	push   0xff
c0015783:	6a 00                	push   0x0
c0015785:	68 9d 5f 01 c0       	push   0xc0015f9d
c001578a:	53                   	push   ebx
c001578b:	e8 20 fb 00 00       	call   c00252b0 <Process::createThread(void (*)(void*), void*, int)>
c0015790:	8b 15 f8 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401f8
c0015796:	6a 7a                	push   0x7a
c0015798:	6a 00                	push   0x0
c001579a:	68 78 5b 02 c0       	push   0xc0025b78
c001579f:	52                   	push   edx
c00157a0:	e8 0b fb 00 00       	call   c00252b0 <Process::createThread(void (*)(void*), void*, int)>
c00157a5:	83 c4 14             	add    esp,0x14
c00157a8:	a3 b0 01 04 c0       	mov    ds:0xc00401b0,eax
c00157ad:	68 34 13 03 c0       	push   0xc0031334
c00157b2:	e8 d0 a5 00 00       	call   c001fd87 <KeSetBootMessage(char const*)>
c00157b7:	c6 05 c1 a9 03 c0 01 	mov    BYTE PTR ds:0xc003a9c1,0x1
c00157be:	e8 e0 ae 00 00       	call   c00206a3 <KeInitRand()>
c00157c3:	e8 47 07 01 00       	call   c0025f0f <Vm::initialise8086()>
c00157c8:	e8 e9 4b 00 00       	call   c001a3b6 <Fs::initVFS()>
c00157cd:	c7 04 24 44 12 03 c0 	mov    DWORD PTR [esp],0xc0031244
c00157d4:	e8 ae a5 00 00       	call   c001fd87 <KeSetBootMessage(char const*)>
c00157d9:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00157de:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00157e4:	8b 10                	mov    edx,DWORD PTR [eax]
c00157e6:	6a 00                	push   0x0
c00157e8:	6a 00                	push   0x0
c00157ea:	6a 00                	push   0x0
c00157ec:	50                   	push   eax
c00157ed:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00157f0:	83 c4 14             	add    esp,0x14
c00157f3:	68 34 13 03 c0       	push   0xc0031334
c00157f8:	e8 8a a5 00 00       	call   c001fd87 <KeSetBootMessage(char const*)>
c00157fd:	e8 4e 43 00 00       	call   c0019b50 <KeInitialiseSymlinks()>
c0015802:	e8 2b ab 00 00       	call   c0020332 <KeLoadSystemEnv()>
c0015807:	e8 a3 ad 00 00       	call   c00205af <KeSetupPowerManager()>
c001580c:	83 c4 0c             	add    esp,0xc
c001580f:	6a 3a                	push   0x3a
c0015811:	68 5e 12 03 c0       	push   0xc003125e
c0015816:	68 67 12 03 c0       	push   0xc0031267
c001581b:	e8 1f da 00 00       	call   c002323f <Reg::readIntWithDefault(char*, char*, int)>
c0015820:	89 04 24             	mov    DWORD PTR [esp],eax
c0015823:	e8 a8 57 00 00       	call   c001afd0 <User::loadClockSettings(int)>
c0015828:	c7 04 24 58 13 03 c0 	mov    DWORD PTR [esp],0xc0031358
c001582f:	e8 53 a5 00 00       	call   c001fd87 <KeSetBootMessage(char const*)>
c0015834:	59                   	pop    ecx
c0015835:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001583a:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0015840:	53                   	push   ebx
c0015841:	e8 28 5e 00 00       	call   c001b66e <Device::loadDriversForAll()>
c0015846:	e8 61 17 ff ff       	call   c0006fac <lwip_init>
c001584b:	c7 04 24 6f 12 03 c0 	mov    DWORD PTR [esp],0xc003126f
c0015852:	e8 30 a5 00 00       	call   c001fd87 <KeSetBootMessage(char const*)>
c0015857:	58                   	pop    eax
c0015858:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001585e:	5a                   	pop    edx
c001585f:	6a 01                	push   0x1
c0015861:	68 80 12 03 c0       	push   0xc0031280
c0015866:	e8 12 f2 00 00       	call   c0024a7d <Thr::loadDLL(char const*, bool)>
c001586b:	59                   	pop    ecx
c001586c:	5a                   	pop    edx
c001586d:	53                   	push   ebx
c001586e:	50                   	push   eax
c001586f:	e8 5b f4 00 00       	call   c0024ccf <Thr::executeDLL(unsigned long, void*)>
c0015874:	83 c4 10             	add    esp,0x10
c0015877:	83 ec 0c             	sub    esp,0xc
c001587a:	6a 02                	push   0x2
c001587c:	e8 3b fd 00 00       	call   c00255bc <blockTask(TaskState)>
c0015881:	83 c4 10             	add    esp,0x10
c0015884:	eb f1                	jmp    c0015877 <Krnl::firstTask()+0x133>

c0015886 <Computer::Computer()>:
c0015886:	83 ec 0c             	sub    esp,0xc
c0015889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001588d:	83 ec 08             	sub    esp,0x8
c0015890:	68 9c 12 03 c0       	push   0xc003129c
c0015895:	50                   	push   eax
c0015896:	e8 19 5e 00 00       	call   c001b6b4 <Device::Device(char const*)>
c001589b:	83 c4 10             	add    esp,0x10
c001589e:	ba a4 13 03 c0       	mov    edx,0xc00313a4
c00158a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158a7:	89 10                	mov    DWORD PTR [eax],edx
c00158a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158ad:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00158b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158bb:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c00158c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158c9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00158cf:	83 ca 04             	or     edx,0x4
c00158d2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00158d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158dc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00158e2:	0f b6 d0             	movzx  edx,al
c00158e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158e9:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c00158f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158f4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00158fa:	0f b6 d0             	movzx  edx,al
c00158fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015901:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0015906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001590a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0015910:	8d 50 01             	lea    edx,[eax+0x1]
c0015913:	88 d1                	mov    cl,dl
c0015915:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015919:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001591f:	0f b6 d0             	movzx  edx,al
c0015922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015926:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001592a:	83 e1 3f             	and    ecx,0x3f
c001592d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0015931:	90                   	nop
c0015932:	83 c4 0c             	add    esp,0xc
c0015935:	c3                   	ret    

c0015936 <Computer::setBootMessage(char const*)>:
c0015936:	c3                   	ret    
c0015937:	90                   	nop

c0015938 <Computer::detectFeatures()>:
c0015938:	55                   	push   ebp
c0015939:	57                   	push   edi
c001593a:	56                   	push   esi
c001593b:	53                   	push   ebx
c001593c:	83 ec 1c             	sub    esp,0x1c
c001593f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015943:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0015949:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c001594f:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0015955:	e8 9f a8 fe ff       	call   c00001f9 <detectCPUID>
c001595a:	31 d2                	xor    edx,edx
c001595c:	85 c0                	test   eax,eax
c001595e:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015964:	0f 95 c2             	setne  dl
c0015967:	83 e0 fd             	and    eax,0xfffffffd
c001596a:	d1 e2                	shl    edx,1
c001596c:	09 d0                	or     eax,edx
c001596e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015974:	a8 02                	test   al,0x2
c0015976:	75 51                	jne    c00159c9 <Computer::detectFeatures()+0x91>
c0015978:	f6 05 d5 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d5,0x4
c001597f:	74 0f                	je     c0015990 <Computer::detectFeatures()+0x58>
c0015981:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015987:	83 e0 fb             	and    eax,0xfffffffb
c001598a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015990:	e8 31 8c 01 00       	call   c002e5c6 <x87Detect>
c0015995:	83 e0 01             	and    eax,0x1
c0015998:	c1 e0 04             	shl    eax,0x4
c001599b:	89 c2                	mov    edx,eax
c001599d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00159a3:	83 e0 ef             	and    eax,0xffffffef
c00159a6:	09 d0                	or     eax,edx
c00159a8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00159ae:	88 c2                	mov    dl,al
c00159b0:	a8 10                	test   al,0x10
c00159b2:	0f 85 33 01 00 00    	jne    c0015aeb <Computer::detectFeatures()+0x1b3>
c00159b8:	80 e2 80             	and    dl,0x80
c00159bb:	0f 85 4c 01 00 00    	jne    c0015b0d <Computer::detectFeatures()+0x1d5>
c00159c1:	83 c4 1c             	add    esp,0x1c
c00159c4:	5b                   	pop    ebx
c00159c5:	5e                   	pop    esi
c00159c6:	5f                   	pop    edi
c00159c7:	5d                   	pop    ebp
c00159c8:	c3                   	ret    
c00159c9:	83 ec 0c             	sub    esp,0xc
c00159cc:	6a 20                	push   0x20
c00159ce:	e8 ed 97 00 00       	call   c001f1c0 <CPU::cpuidCheckEDX(unsigned int)>
c00159d3:	83 e0 01             	and    eax,0x1
c00159d6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00159dd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00159e3:	83 e0 f7             	and    eax,0xfffffff7
c00159e6:	09 d0                	or     eax,edx
c00159e8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00159ee:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c00159f5:	e8 c6 97 00 00       	call   c001f1c0 <CPU::cpuidCheckEDX(unsigned int)>
c00159fa:	89 c2                	mov    edx,eax
c00159fc:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015a02:	83 e2 01             	and    edx,0x1
c0015a05:	83 e0 fe             	and    eax,0xfffffffe
c0015a08:	09 d0                	or     eax,edx
c0015a0a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015a10:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0015a17:	e8 a4 97 00 00       	call   c001f1c0 <CPU::cpuidCheckEDX(unsigned int)>
c0015a1c:	89 c2                	mov    edx,eax
c0015a1e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015a24:	c1 e2 07             	shl    edx,0x7
c0015a27:	83 e0 7f             	and    eax,0x7f
c0015a2a:	09 d0                	or     eax,edx
c0015a2c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015a32:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0015a39:	e8 82 97 00 00       	call   c001f1c0 <CPU::cpuidCheckEDX(unsigned int)>
c0015a3e:	83 c4 10             	add    esp,0x10
c0015a41:	83 e0 01             	and    eax,0x1
c0015a44:	c1 e0 05             	shl    eax,0x5
c0015a47:	89 c2                	mov    edx,eax
c0015a49:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015a4f:	83 e0 df             	and    eax,0xffffffdf
c0015a52:	09 d0                	or     eax,edx
c0015a54:	f7 05 d4 a9 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003a9d4,0x401
c0015a5e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015a64:	0f 84 c9 00 00 00    	je     c0015b33 <Computer::detectFeatures()+0x1fb>
c0015a6a:	83 e0 fe             	and    eax,0xfffffffe
c0015a6d:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015a73:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015a79:	89 c2                	mov    edx,eax
c0015a7b:	83 e2 09             	and    edx,0x9
c0015a7e:	83 fa 01             	cmp    edx,0x1
c0015a81:	75 09                	jne    c0015a8c <Computer::detectFeatures()+0x154>
c0015a83:	83 e0 fe             	and    eax,0xfffffffe
c0015a86:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015a8c:	83 ec 0c             	sub    esp,0xc
c0015a8f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015a93:	50                   	push   eax
c0015a94:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0015a98:	55                   	push   ebp
c0015a99:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0015a9d:	57                   	push   edi
c0015a9e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0015aa2:	56                   	push   esi
c0015aa3:	68 00 00 00 80       	push   0x80000000
c0015aa8:	e8 8f 96 00 00       	call   c001f13c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015aad:	83 c4 20             	add    esp,0x20
c0015ab0:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0015ab7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0015abb:	0f 86 b7 fe ff ff    	jbe    c0015978 <Computer::detectFeatures()+0x40>
c0015ac1:	83 ec 0c             	sub    esp,0xc
c0015ac4:	50                   	push   eax
c0015ac5:	55                   	push   ebp
c0015ac6:	57                   	push   edi
c0015ac7:	56                   	push   esi
c0015ac8:	68 01 00 00 80       	push   0x80000001
c0015acd:	e8 6a 96 00 00       	call   c001f13c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015ad2:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0015ad8:	83 c4 20             	add    esp,0x20
c0015adb:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0015ae0:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0015ae6:	e9 8d fe ff ff       	jmp    c0015978 <Computer::detectFeatures()+0x40>
c0015aeb:	e8 90 8a 01 00       	call   c002e580 <sseDetect>
c0015af0:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0015af6:	c1 e0 07             	shl    eax,0x7
c0015af9:	83 e2 7f             	and    edx,0x7f
c0015afc:	09 c2                	or     edx,eax
c0015afe:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0015b04:	80 e2 80             	and    dl,0x80
c0015b07:	0f 84 b4 fe ff ff    	je     c00159c1 <Computer::detectFeatures()+0x89>
c0015b0d:	e8 fe 86 01 00       	call   c002e210 <avxDetect>
c0015b12:	83 e0 01             	and    eax,0x1
c0015b15:	c1 e0 05             	shl    eax,0x5
c0015b18:	89 c2                	mov    edx,eax
c0015b1a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015b20:	83 e0 df             	and    eax,0xffffffdf
c0015b23:	09 d0                	or     eax,edx
c0015b25:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015b2b:	83 c4 1c             	add    esp,0x1c
c0015b2e:	5b                   	pop    ebx
c0015b2f:	5e                   	pop    esi
c0015b30:	5f                   	pop    edi
c0015b31:	5d                   	pop    ebp
c0015b32:	c3                   	ret    
c0015b33:	83 ec 0c             	sub    esp,0xc
c0015b36:	68 00 02 00 00       	push   0x200
c0015b3b:	e8 80 96 00 00       	call   c001f1c0 <CPU::cpuidCheckEDX(unsigned int)>
c0015b40:	83 c4 10             	add    esp,0x10
c0015b43:	89 c2                	mov    edx,eax
c0015b45:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015b4b:	83 e2 01             	and    edx,0x1
c0015b4e:	83 e0 fe             	and    eax,0xfffffffe
c0015b51:	09 d0                	or     eax,edx
c0015b53:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015b59:	e9 15 ff ff ff       	jmp    c0015a73 <Computer::detectFeatures()+0x13b>

c0015b5e <Computer::displayFeatures()>:
c0015b5e:	c3                   	ret    
c0015b5f:	90                   	nop

c0015b60 <Computer::rdmsr(unsigned int)>:
c0015b60:	83 ec 0c             	sub    esp,0xc
c0015b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b67:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015b6e:	74 0a                	je     c0015b7a <Computer::rdmsr(unsigned int)+0x1a>
c0015b70:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015b74:	0f 32                	rdmsr  
c0015b76:	83 c4 0c             	add    esp,0xc
c0015b79:	c3                   	ret    
c0015b7a:	83 ec 0c             	sub    esp,0xc
c0015b7d:	68 a5 12 03 c0       	push   0xc00312a5
c0015b82:	e8 63 a9 00 00       	call   c00204ea <KePanic(char const*)>
c0015b87:	83 c4 10             	add    esp,0x10
c0015b8a:	eb e4                	jmp    c0015b70 <Computer::rdmsr(unsigned int)+0x10>

c0015b8c <Computer::wrmsr(unsigned int, unsigned long long)>:
c0015b8c:	57                   	push   edi
c0015b8d:	56                   	push   esi
c0015b8e:	83 ec 04             	sub    esp,0x4
c0015b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b95:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015b99:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0015b9d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015ba4:	74 10                	je     c0015bb6 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0015ba6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015baa:	89 f0                	mov    eax,esi
c0015bac:	89 fa                	mov    edx,edi
c0015bae:	0f 30                	wrmsr  
c0015bb0:	83 c4 04             	add    esp,0x4
c0015bb3:	5e                   	pop    esi
c0015bb4:	5f                   	pop    edi
c0015bb5:	c3                   	ret    
c0015bb6:	83 ec 0c             	sub    esp,0xc
c0015bb9:	68 ab 12 03 c0       	push   0xc00312ab
c0015bbe:	e8 27 a9 00 00       	call   c00204ea <KePanic(char const*)>
c0015bc3:	83 c4 10             	add    esp,0x10
c0015bc6:	eb de                	jmp    c0015ba6 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0015bc8 <Computer::shutdown()>:
c0015bc8:	83 ec 0c             	sub    esp,0xc
c0015bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bcf:	8b 10                	mov    edx,DWORD PTR [eax]
c0015bd1:	6a 00                	push   0x0
c0015bd3:	6a 00                	push   0x0
c0015bd5:	6a 00                	push   0x0
c0015bd7:	50                   	push   eax
c0015bd8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015bdb:	83 c4 1c             	add    esp,0x1c
c0015bde:	c3                   	ret    
c0015bdf:	90                   	nop

c0015be0 <Computer::restart()>:
c0015be0:	83 ec 0c             	sub    esp,0xc
c0015be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015be7:	8b 10                	mov    edx,DWORD PTR [eax]
c0015be9:	6a 00                	push   0x0
c0015beb:	6a 00                	push   0x0
c0015bed:	6a 01                	push   0x1
c0015bef:	50                   	push   eax
c0015bf0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015bf3:	83 c4 1c             	add    esp,0x1c
c0015bf6:	c3                   	ret    
c0015bf7:	90                   	nop

c0015bf8 <Computer::sleep()>:
c0015bf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bfc:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0015c02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015c06:	e9 cd 8f 00 00       	jmp    c001ebd8 <ACPI::sleep()>
c0015c0b:	90                   	nop

c0015c0c <Computer::nmiEnabled()>:
c0015c0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c10:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0015c16:	c3                   	ret    
c0015c17:	90                   	nop

c0015c18 <Computer::readCMOS(unsigned char)>:
c0015c18:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c20:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0015c27:	75 09                	jne    c0015c32 <Computer::readCMOS(unsigned char)+0x1a>
c0015c29:	b2 80                	mov    dl,0x80
c0015c2b:	09 d0                	or     eax,edx
c0015c2d:	e6 70                	out    0x70,al
c0015c2f:	e4 71                	in     al,0x71
c0015c31:	c3                   	ret    
c0015c32:	31 d2                	xor    edx,edx
c0015c34:	eb f5                	jmp    c0015c2b <Computer::readCMOS(unsigned char)+0x13>

c0015c36 <Computer::enableNMI(bool)>:
c0015c36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015c3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c3e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0015c44:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0015c4c:	eb ca                	jmp    c0015c18 <Computer::readCMOS(unsigned char)>

c0015c4e <Computer::open(int, int, void*)>:
c0015c4e:	56                   	push   esi
c0015c4f:	53                   	push   ebx
c0015c50:	83 ec 10             	sub    esp,0x10
c0015c53:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015c57:	f6 05 d4 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d4,0x4
c0015c5e:	68 b1 12 03 c0       	push   0xc00312b1
c0015c63:	0f 94 05 c0 3e 03 c0 	sete   BYTE PTR ds:0xc0033ec0
c0015c6a:	e8 18 a1 00 00       	call   c001fd87 <KeSetBootMessage(char const*)>
c0015c6f:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0015c76:	e8 c8 09 00 00       	call   c0016643 <malloc>
c0015c7b:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c7e:	89 c6                	mov    esi,eax
c0015c80:	e8 c7 8a 00 00       	call   c001e74c <ACPI::ACPI()>
c0015c85:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0015c8b:	58                   	pop    eax
c0015c8c:	5a                   	pop    edx
c0015c8d:	56                   	push   esi
c0015c8e:	53                   	push   ebx
c0015c8f:	e8 be 58 00 00       	call   c001b552 <Device::addChild(Device*)>
c0015c94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c97:	e8 9c fc ff ff       	call   c0015938 <Computer::detectFeatures()>
c0015c9c:	59                   	pop    ecx
c0015c9d:	5e                   	pop    esi
c0015c9e:	6a 01                	push   0x1
c0015ca0:	53                   	push   ebx
c0015ca1:	e8 90 ff ff ff       	call   c0015c36 <Computer::enableNMI(bool)>
c0015ca6:	c7 04 24 c9 12 03 c0 	mov    DWORD PTR [esp],0xc00312c9
c0015cad:	e8 d5 a0 00 00       	call   c001fd87 <KeSetBootMessage(char const*)>
c0015cb2:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0015cb9:	e8 85 09 00 00       	call   c0016643 <malloc>
c0015cbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0015cc1:	89 c6                	mov    esi,eax
c0015cc3:	e8 b0 95 00 00       	call   c001f278 <CPU::CPU()>
c0015cc8:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0015cce:	58                   	pop    eax
c0015ccf:	5a                   	pop    edx
c0015cd0:	56                   	push   esi
c0015cd1:	53                   	push   ebx
c0015cd2:	e8 7b 58 00 00       	call   c001b552 <Device::addChild(Device*)>
c0015cd7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015cdd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015ce1:	8b 10                	mov    edx,DWORD PTR [eax]
c0015ce3:	51                   	push   ecx
c0015ce4:	6a 00                	push   0x0
c0015ce6:	6a 00                	push   0x0
c0015ce8:	50                   	push   eax
c0015ce9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015cec:	83 c4 14             	add    esp,0x14
c0015cef:	68 78 13 03 c0       	push   0xc0031378
c0015cf4:	e8 8e a0 00 00       	call   c001fd87 <KeSetBootMessage(char const*)>
c0015cf9:	e8 4e 14 01 00       	call   c002714c <HalInitialiseCoprocessor()>
c0015cfe:	c7 04 24 e3 12 03 c0 	mov    DWORD PTR [esp],0xc00312e3
c0015d05:	e8 7d a0 00 00       	call   c001fd87 <KeSetBootMessage(char const*)>
c0015d0a:	c7 04 24 44 57 01 c0 	mov    DWORD PTR [esp],0xc0015744
c0015d11:	e8 c6 f6 00 00       	call   c00253dc <setupMultitasking(void (*)())>
c0015d16:	83 c4 14             	add    esp,0x14
c0015d19:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d1e:	5b                   	pop    ebx
c0015d1f:	5e                   	pop    esi
c0015d20:	c3                   	ret    
c0015d21:	90                   	nop

c0015d22 <Computer::disableNMI()>:
c0015d22:	6a 00                	push   0x0
c0015d24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d28:	50                   	push   eax
c0015d29:	e8 08 ff ff ff       	call   c0015c36 <Computer::enableNMI(bool)>
c0015d2e:	5a                   	pop    edx
c0015d2f:	59                   	pop    ecx
c0015d30:	c3                   	ret    
c0015d31:	90                   	nop

c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0015d32:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015d36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d3e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c0015d45:	75 0b                	jne    c0015d52 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c0015d47:	b1 80                	mov    cl,0x80
c0015d49:	09 c8                	or     eax,ecx
c0015d4b:	e6 70                	out    0x70,al
c0015d4d:	88 d0                	mov    al,dl
c0015d4f:	e6 71                	out    0x71,al
c0015d51:	c3                   	ret    
c0015d52:	31 c9                	xor    ecx,ecx
c0015d54:	eb f3                	jmp    c0015d49 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c0015d56 <Computer::handleNMI()>:
c0015d56:	56                   	push   esi
c0015d57:	53                   	push   ebx
c0015d58:	83 ec 10             	sub    esp,0x10
c0015d5b:	e4 92                	in     al,0x92
c0015d5d:	89 c6                	mov    esi,eax
c0015d5f:	e4 61                	in     al,0x61
c0015d61:	68 fe 12 03 c0       	push   0xc00312fe
c0015d66:	88 c3                	mov    bl,al
c0015d68:	e8 64 37 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0015d6d:	83 c4 10             	add    esp,0x10
c0015d70:	83 e6 10             	and    esi,0x10
c0015d73:	75 10                	jne    c0015d85 <Computer::handleNMI()+0x2f>
c0015d75:	f6 c3 40             	test   bl,0x40
c0015d78:	75 20                	jne    c0015d9a <Computer::handleNMI()+0x44>
c0015d7a:	80 e3 80             	and    bl,0x80
c0015d7d:	75 30                	jne    c0015daf <Computer::handleNMI()+0x59>
c0015d7f:	83 c4 04             	add    esp,0x4
c0015d82:	5b                   	pop    ebx
c0015d83:	5e                   	pop    esi
c0015d84:	c3                   	ret    
c0015d85:	83 ec 0c             	sub    esp,0xc
c0015d88:	68 0f 13 03 c0       	push   0xc003130f
c0015d8d:	e8 58 a7 00 00       	call   c00204ea <KePanic(char const*)>
c0015d92:	83 c4 10             	add    esp,0x10
c0015d95:	f6 c3 40             	test   bl,0x40
c0015d98:	74 e0                	je     c0015d7a <Computer::handleNMI()+0x24>
c0015d9a:	83 ec 0c             	sub    esp,0xc
c0015d9d:	68 1c 13 03 c0       	push   0xc003131c
c0015da2:	e8 43 a7 00 00       	call   c00204ea <KePanic(char const*)>
c0015da7:	83 c4 10             	add    esp,0x10
c0015daa:	80 e3 80             	and    bl,0x80
c0015dad:	74 d0                	je     c0015d7f <Computer::handleNMI()+0x29>
c0015daf:	c7 44 24 10 26 13 03 c0 	mov    DWORD PTR [esp+0x10],0xc0031326
c0015db7:	83 c4 04             	add    esp,0x4
c0015dba:	5b                   	pop    ebx
c0015dbb:	5e                   	pop    esi
c0015dbc:	e9 29 a7 00 00       	jmp    c00204ea <KePanic(char const*)>
c0015dc1:	90                   	nop

c0015dc2 <GDTEntry::setBase(unsigned int)>:
c0015dc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015dc6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015dca:	89 c1                	mov    ecx,eax
c0015dcc:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0015dd0:	c1 e9 10             	shr    ecx,0x10
c0015dd3:	c1 e8 18             	shr    eax,0x18
c0015dd6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0015dd9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0015ddc:	c3                   	ret    
c0015ddd:	90                   	nop

c0015dde <GDTEntry::setLimit(unsigned int)>:
c0015dde:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015de2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015de6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0015de9:	66 89 01             	mov    WORD PTR [ecx],ax
c0015dec:	83 e2 f0             	and    edx,0xfffffff0
c0015def:	c1 e8 10             	shr    eax,0x10
c0015df2:	83 e0 0f             	and    eax,0xf
c0015df5:	09 d0                	or     eax,edx
c0015df7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0015dfa:	c3                   	ret    
c0015dfb:	90                   	nop

c0015dfc <GDT::GDT()>:
c0015dfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015e06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e0a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015e10:	90                   	nop
c0015e11:	c3                   	ret    

c0015e12 <GDT::addEntry(GDTEntry)>:
c0015e12:	53                   	push   ebx
c0015e13:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015e17:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015e1b:	8b 02                	mov    eax,DWORD PTR [edx]
c0015e1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e21:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0015e25:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0015e29:	8d 48 01             	lea    ecx,[eax+0x1]
c0015e2c:	c1 e0 03             	shl    eax,0x3
c0015e2f:	89 0a                	mov    DWORD PTR [edx],ecx
c0015e31:	5b                   	pop    ebx
c0015e32:	c3                   	ret    
c0015e33:	90                   	nop

c0015e34 <GDT::getNumberOfEntries()>:
c0015e34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e38:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e3a:	c3                   	ret    
c0015e3b:	90                   	nop

c0015e3c <GDT::flush()>:
c0015e3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e40:	8b 10                	mov    edx,DWORD PTR [eax]
c0015e42:	83 c0 04             	add    eax,0x4
c0015e45:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0015e4c:	a3 c6 a9 03 c0       	mov    ds:0xc003a9c6,eax
c0015e51:	66 89 15 c4 a9 03 c0 	mov    WORD PTR ds:0xc003a9c4,dx
c0015e58:	e9 fd a4 fe ff       	jmp    c000035a <loadGDT>
c0015e5d:	90                   	nop

c0015e5e <GDT::setup()>:
c0015e5e:	57                   	push   edi
c0015e5f:	56                   	push   esi
c0015e60:	53                   	push   ebx
c0015e61:	83 ec 30             	sub    esp,0x30
c0015e64:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015e68:	6a 00                	push   0x0
c0015e6a:	8d 74 24 14          	lea    esi,[esp+0x14]
c0015e6e:	56                   	push   esi
c0015e6f:	e8 4e ff ff ff       	call   c0015dc2 <GDTEntry::setBase(unsigned int)>
c0015e74:	6a 00                	push   0x0
c0015e76:	56                   	push   esi
c0015e77:	e8 62 ff ff ff       	call   c0015dde <GDTEntry::setLimit(unsigned int)>
c0015e7c:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0015e84:	6a 00                	push   0x0
c0015e86:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015e8a:	56                   	push   esi
c0015e8b:	e8 32 ff ff ff       	call   c0015dc2 <GDTEntry::setBase(unsigned int)>
c0015e90:	68 ff ff ff 00       	push   0xffffff
c0015e95:	56                   	push   esi
c0015e96:	e8 43 ff ff ff       	call   c0015dde <GDTEntry::setLimit(unsigned int)>
c0015e9b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015e9f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015ea3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015ea7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0015eab:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0015eb0:	0d 00 9a c0 00       	or     eax,0xc09a00
c0015eb5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015eb9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0015ebd:	89 f8                	mov    eax,edi
c0015ebf:	89 fa                	mov    edx,edi
c0015ec1:	80 e4 f7             	and    ah,0xf7
c0015ec4:	80 ce 60             	or     dh,0x60
c0015ec7:	89 c7                	mov    edi,eax
c0015ec9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015ecd:	80 cc 60             	or     ah,0x60
c0015ed0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015ed4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015ed8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0015edc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015ee0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015ee4:	83 c4 20             	add    esp,0x20
c0015ee7:	6a 00                	push   0x0
c0015ee9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015eed:	50                   	push   eax
c0015eee:	e8 cf fe ff ff       	call   c0015dc2 <GDTEntry::setBase(unsigned int)>
c0015ef3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0015ef7:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015efb:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0015eff:	83 e0 3f             	and    eax,0x3f
c0015f02:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015f06:	6a 00                	push   0x0
c0015f08:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015f0c:	50                   	push   eax
c0015f0d:	e8 b0 fe ff ff       	call   c0015dc2 <GDTEntry::setBase(unsigned int)>
c0015f12:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0015f16:	83 e0 3f             	and    eax,0x3f
c0015f19:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0015f1d:	83 c4 0c             	add    esp,0xc
c0015f20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015f24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015f28:	53                   	push   ebx
c0015f29:	e8 e4 fe ff ff       	call   c0015e12 <GDT::addEntry(GDTEntry)>
c0015f2e:	83 c4 0c             	add    esp,0xc
c0015f31:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015f35:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015f39:	53                   	push   ebx
c0015f3a:	e8 d3 fe ff ff       	call   c0015e12 <GDT::addEntry(GDTEntry)>
c0015f3f:	83 c4 0c             	add    esp,0xc
c0015f42:	57                   	push   edi
c0015f43:	56                   	push   esi
c0015f44:	53                   	push   ebx
c0015f45:	e8 c8 fe ff ff       	call   c0015e12 <GDT::addEntry(GDTEntry)>
c0015f4a:	83 c4 0c             	add    esp,0xc
c0015f4d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015f51:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015f55:	53                   	push   ebx
c0015f56:	e8 b7 fe ff ff       	call   c0015e12 <GDT::addEntry(GDTEntry)>
c0015f5b:	83 c4 0c             	add    esp,0xc
c0015f5e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015f62:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015f66:	53                   	push   ebx
c0015f67:	e8 a6 fe ff ff       	call   c0015e12 <GDT::addEntry(GDTEntry)>
c0015f6c:	83 c4 0c             	add    esp,0xc
c0015f6f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015f73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015f77:	53                   	push   ebx
c0015f78:	e8 95 fe ff ff       	call   c0015e12 <GDT::addEntry(GDTEntry)>
c0015f7d:	83 c4 0c             	add    esp,0xc
c0015f80:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f84:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f88:	53                   	push   ebx
c0015f89:	e8 84 fe ff ff       	call   c0015e12 <GDT::addEntry(GDTEntry)>
c0015f8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f91:	e8 a6 fe ff ff       	call   c0015e3c <GDT::flush()>
c0015f96:	83 c4 40             	add    esp,0x40
c0015f99:	5b                   	pop    ebx
c0015f9a:	5e                   	pop    esi
c0015f9b:	5f                   	pop    edi
c0015f9c:	c3                   	ret    

c0015f9d <idleFunction(void*)>:
c0015f9d:	83 ec 0c             	sub    esp,0xc
c0015fa0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0015fa5:	48                   	dec    eax
c0015fa6:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0015fab:	75 01                	jne    c0015fae <idleFunction(void*)+0x11>
c0015fad:	fb                   	sti    
c0015fae:	e8 65 0e 01 00       	call   c0026e18 <HalSystemIdle()>
c0015fb3:	e8 ca 8b 01 00       	call   c002eb82 <idleCommon()>
c0015fb8:	eb f4                	jmp    c0015fae <idleFunction(void*)+0x11>
c0015fba:	66 90                	xchg   ax,ax

c0015fbc <IDTEntry::IDTEntry(bool)>:
c0015fbc:	53                   	push   ebx
c0015fbd:	83 ec 04             	sub    esp,0x4
c0015fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fc4:	88 04 24             	mov    BYTE PTR [esp],al
c0015fc7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fcb:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0015fd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fd5:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0015fd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fdd:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015fe0:	83 e2 f0             	and    edx,0xfffffff0
c0015fe3:	83 ca 0e             	or     edx,0xe
c0015fe6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fed:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015ff0:	83 e2 ef             	and    edx,0xffffffef
c0015ff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015ff6:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0015ffa:	85 c0                	test   eax,eax
c0015ffc:	74 06                	je     c0016004 <IDTEntry::IDTEntry(bool)+0x48>
c0015ffe:	b2 03                	mov    dl,0x3
c0016000:	eb 06                	jmp    c0016008 <IDTEntry::IDTEntry(bool)+0x4c>
c0016002:	66 90                	xchg   ax,ax
c0016004:	b2 00                	mov    dl,0x0
c0016006:	66 90                	xchg   ax,ax
c0016008:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001600c:	83 e2 03             	and    edx,0x3
c001600f:	89 d3                	mov    ebx,edx
c0016011:	c1 e3 05             	shl    ebx,0x5
c0016014:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0016017:	83 e2 9f             	and    edx,0xffffff9f
c001601a:	88 d1                	mov    cl,dl
c001601c:	88 da                	mov    dl,bl
c001601e:	09 ca                	or     edx,ecx
c0016020:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0016023:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016027:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c001602a:	83 ca 80             	or     edx,0xffffff80
c001602d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0016030:	90                   	nop
c0016031:	83 c4 04             	add    esp,0x4
c0016034:	5b                   	pop    ebx
c0016035:	c3                   	ret    

c0016036 <IDTEntry::setOffset(unsigned int)>:
c0016036:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001603a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001603e:	66 89 02             	mov    WORD PTR [edx],ax
c0016041:	c1 e8 10             	shr    eax,0x10
c0016044:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0016048:	c3                   	ret    
c0016049:	90                   	nop
c001604a:	66 90                	xchg   ax,ax

c001604c <IDT::IDT()>:
c001604c:	90                   	nop
c001604d:	c3                   	ret    

c001604e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c001604e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016052:	83 c0 30             	add    eax,0x30
c0016055:	c3                   	ret    

c0016056 <IDT::addEntry(IDTEntry, int)>:
c0016056:	53                   	push   ebx
c0016057:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001605b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001605f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016063:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016067:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c001606a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c001606e:	5b                   	pop    ebx
c001606f:	c3                   	ret    

c0016070 <IDT::addEntry(int, void (*)(), bool)>:
c0016070:	53                   	push   ebx
c0016071:	83 ec 10             	sub    esp,0x10
c0016074:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0016079:	50                   	push   eax
c001607a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001607e:	53                   	push   ebx
c001607f:	e8 38 ff ff ff       	call   c0015fbc <IDTEntry::IDTEntry(bool)>
c0016084:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016088:	53                   	push   ebx
c0016089:	e8 a8 ff ff ff       	call   c0016036 <IDTEntry::setOffset(unsigned int)>
c001608e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016092:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016096:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001609a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001609e:	e8 b3 ff ff ff       	call   c0016056 <IDT::addEntry(IDTEntry, int)>
c00160a3:	83 c4 30             	add    esp,0x30
c00160a6:	5b                   	pop    ebx
c00160a7:	c3                   	ret    

c00160a8 <IDT::flush()>:
c00160a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00160ac:	66 c7 05 cc a9 03 c0 ff 07 	mov    WORD PTR ds:0xc003a9cc,0x7ff
c00160b5:	a3 ce a9 03 c0       	mov    ds:0xc003a9ce,eax
c00160ba:	0f 01 1d cc a9 03 c0 	lidtd  ds:0xc003a9cc
c00160c1:	c3                   	ret    

c00160c2 <IDT::setup()>:
c00160c2:	57                   	push   edi
c00160c3:	56                   	push   esi
c00160c4:	53                   	push   ebx
c00160c5:	83 ec 10             	sub    esp,0x10
c00160c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00160cc:	6a 00                	push   0x0
c00160ce:	68 80 e2 02 c0       	push   0xc002e280
c00160d3:	6a 00                	push   0x0
c00160d5:	53                   	push   ebx
c00160d6:	e8 95 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00160db:	6a 00                	push   0x0
c00160dd:	68 90 e2 02 c0       	push   0xc002e290
c00160e2:	6a 01                	push   0x1
c00160e4:	53                   	push   ebx
c00160e5:	e8 86 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00160ea:	83 c4 20             	add    esp,0x20
c00160ed:	6a 00                	push   0x0
c00160ef:	68 9a e2 02 c0       	push   0xc002e29a
c00160f4:	6a 02                	push   0x2
c00160f6:	53                   	push   ebx
c00160f7:	e8 74 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00160fc:	6a 00                	push   0x0
c00160fe:	68 a4 e2 02 c0       	push   0xc002e2a4
c0016103:	6a 03                	push   0x3
c0016105:	53                   	push   ebx
c0016106:	e8 65 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001610b:	83 c4 20             	add    esp,0x20
c001610e:	6a 00                	push   0x0
c0016110:	68 ae e2 02 c0       	push   0xc002e2ae
c0016115:	6a 04                	push   0x4
c0016117:	53                   	push   ebx
c0016118:	e8 53 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001611d:	6a 00                	push   0x0
c001611f:	68 b8 e2 02 c0       	push   0xc002e2b8
c0016124:	6a 05                	push   0x5
c0016126:	53                   	push   ebx
c0016127:	e8 44 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001612c:	83 c4 20             	add    esp,0x20
c001612f:	6a 00                	push   0x0
c0016131:	68 c2 e2 02 c0       	push   0xc002e2c2
c0016136:	6a 06                	push   0x6
c0016138:	53                   	push   ebx
c0016139:	e8 32 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001613e:	6a 00                	push   0x0
c0016140:	68 cc e2 02 c0       	push   0xc002e2cc
c0016145:	6a 07                	push   0x7
c0016147:	53                   	push   ebx
c0016148:	e8 23 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001614d:	83 c4 20             	add    esp,0x20
c0016150:	6a 00                	push   0x0
c0016152:	68 d6 e2 02 c0       	push   0xc002e2d6
c0016157:	6a 08                	push   0x8
c0016159:	53                   	push   ebx
c001615a:	e8 11 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001615f:	6a 00                	push   0x0
c0016161:	68 de e2 02 c0       	push   0xc002e2de
c0016166:	6a 09                	push   0x9
c0016168:	53                   	push   ebx
c0016169:	e8 02 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001616e:	83 c4 20             	add    esp,0x20
c0016171:	6a 00                	push   0x0
c0016173:	68 e8 e2 02 c0       	push   0xc002e2e8
c0016178:	6a 0a                	push   0xa
c001617a:	53                   	push   ebx
c001617b:	e8 f0 fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016180:	6a 00                	push   0x0
c0016182:	68 f0 e2 02 c0       	push   0xc002e2f0
c0016187:	6a 0b                	push   0xb
c0016189:	53                   	push   ebx
c001618a:	e8 e1 fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001618f:	83 c4 20             	add    esp,0x20
c0016192:	6a 00                	push   0x0
c0016194:	68 f8 e2 02 c0       	push   0xc002e2f8
c0016199:	6a 0c                	push   0xc
c001619b:	53                   	push   ebx
c001619c:	e8 cf fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00161a1:	6a 00                	push   0x0
c00161a3:	68 00 e3 02 c0       	push   0xc002e300
c00161a8:	6a 0d                	push   0xd
c00161aa:	53                   	push   ebx
c00161ab:	e8 c0 fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00161b0:	83 c4 20             	add    esp,0x20
c00161b3:	6a 00                	push   0x0
c00161b5:	68 1a e3 02 c0       	push   0xc002e31a
c00161ba:	6a 0e                	push   0xe
c00161bc:	53                   	push   ebx
c00161bd:	e8 ae fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00161c2:	6a 00                	push   0x0
c00161c4:	68 22 e3 02 c0       	push   0xc002e322
c00161c9:	6a 0f                	push   0xf
c00161cb:	53                   	push   ebx
c00161cc:	e8 9f fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00161d1:	83 c4 20             	add    esp,0x20
c00161d4:	6a 00                	push   0x0
c00161d6:	68 2c e3 02 c0       	push   0xc002e32c
c00161db:	6a 10                	push   0x10
c00161dd:	53                   	push   ebx
c00161de:	e8 8d fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00161e3:	6a 00                	push   0x0
c00161e5:	68 36 e3 02 c0       	push   0xc002e336
c00161ea:	6a 11                	push   0x11
c00161ec:	53                   	push   ebx
c00161ed:	e8 7e fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00161f2:	83 c4 20             	add    esp,0x20
c00161f5:	6a 00                	push   0x0
c00161f7:	68 40 e3 02 c0       	push   0xc002e340
c00161fc:	6a 12                	push   0x12
c00161fe:	53                   	push   ebx
c00161ff:	e8 6c fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016204:	6a 01                	push   0x1
c0016206:	68 da e3 02 c0       	push   0xc002e3da
c001620b:	6a 60                	push   0x60
c001620d:	53                   	push   ebx
c001620e:	e8 5d fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016213:	83 c4 20             	add    esp,0x20
c0016216:	6a 00                	push   0x0
c0016218:	68 e1 e3 02 c0       	push   0xc002e3e1
c001621d:	6a 20                	push   0x20
c001621f:	53                   	push   ebx
c0016220:	e8 4b fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016225:	6a 00                	push   0x0
c0016227:	68 cc e3 02 c0       	push   0xc002e3cc
c001622c:	6a 21                	push   0x21
c001622e:	53                   	push   ebx
c001622f:	e8 3c fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016234:	83 c4 20             	add    esp,0x20
c0016237:	6a 00                	push   0x0
c0016239:	68 d3 e3 02 c0       	push   0xc002e3d3
c001623e:	6a 22                	push   0x22
c0016240:	53                   	push   ebx
c0016241:	e8 2a fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016246:	6a 00                	push   0x0
c0016248:	68 4a e3 02 c0       	push   0xc002e34a
c001624d:	6a 23                	push   0x23
c001624f:	53                   	push   ebx
c0016250:	e8 1b fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016255:	83 c4 20             	add    esp,0x20
c0016258:	6a 00                	push   0x0
c001625a:	68 54 e3 02 c0       	push   0xc002e354
c001625f:	6a 24                	push   0x24
c0016261:	53                   	push   ebx
c0016262:	e8 09 fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016267:	6a 00                	push   0x0
c0016269:	68 5e e3 02 c0       	push   0xc002e35e
c001626e:	6a 25                	push   0x25
c0016270:	53                   	push   ebx
c0016271:	e8 fa fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016276:	83 c4 20             	add    esp,0x20
c0016279:	6a 00                	push   0x0
c001627b:	68 68 e3 02 c0       	push   0xc002e368
c0016280:	6a 26                	push   0x26
c0016282:	53                   	push   ebx
c0016283:	e8 e8 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016288:	6a 00                	push   0x0
c001628a:	68 72 e3 02 c0       	push   0xc002e372
c001628f:	6a 27                	push   0x27
c0016291:	53                   	push   ebx
c0016292:	e8 d9 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016297:	83 c4 20             	add    esp,0x20
c001629a:	6a 00                	push   0x0
c001629c:	68 7c e3 02 c0       	push   0xc002e37c
c00162a1:	6a 28                	push   0x28
c00162a3:	53                   	push   ebx
c00162a4:	e8 c7 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00162a9:	6a 00                	push   0x0
c00162ab:	68 86 e3 02 c0       	push   0xc002e386
c00162b0:	6a 29                	push   0x29
c00162b2:	53                   	push   ebx
c00162b3:	e8 b8 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00162b8:	83 c4 20             	add    esp,0x20
c00162bb:	6a 00                	push   0x0
c00162bd:	68 90 e3 02 c0       	push   0xc002e390
c00162c2:	6a 2a                	push   0x2a
c00162c4:	53                   	push   ebx
c00162c5:	e8 a6 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00162ca:	6a 00                	push   0x0
c00162cc:	68 9a e3 02 c0       	push   0xc002e39a
c00162d1:	6a 2b                	push   0x2b
c00162d3:	53                   	push   ebx
c00162d4:	e8 97 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00162d9:	83 c4 20             	add    esp,0x20
c00162dc:	6a 00                	push   0x0
c00162de:	68 a4 e3 02 c0       	push   0xc002e3a4
c00162e3:	6a 2c                	push   0x2c
c00162e5:	53                   	push   ebx
c00162e6:	e8 85 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00162eb:	6a 00                	push   0x0
c00162ed:	68 ae e3 02 c0       	push   0xc002e3ae
c00162f2:	6a 2d                	push   0x2d
c00162f4:	53                   	push   ebx
c00162f5:	e8 76 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00162fa:	83 c4 20             	add    esp,0x20
c00162fd:	6a 00                	push   0x0
c00162ff:	68 b8 e3 02 c0       	push   0xc002e3b8
c0016304:	6a 2e                	push   0x2e
c0016306:	53                   	push   ebx
c0016307:	e8 64 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001630c:	6a 00                	push   0x0
c001630e:	68 c2 e3 02 c0       	push   0xc002e3c2
c0016313:	6a 2f                	push   0x2f
c0016315:	53                   	push   ebx
c0016316:	e8 55 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001631b:	83 c4 20             	add    esp,0x20
c001631e:	6a 00                	push   0x0
c0016320:	68 1c e5 02 c0       	push   0xc002e51c
c0016325:	6a 30                	push   0x30
c0016327:	53                   	push   ebx
c0016328:	e8 43 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001632d:	6a 00                	push   0x0
c001632f:	68 26 e5 02 c0       	push   0xc002e526
c0016334:	6a 31                	push   0x31
c0016336:	53                   	push   ebx
c0016337:	e8 34 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001633c:	83 c4 20             	add    esp,0x20
c001633f:	6a 00                	push   0x0
c0016341:	68 30 e5 02 c0       	push   0xc002e530
c0016346:	6a 32                	push   0x32
c0016348:	53                   	push   ebx
c0016349:	e8 22 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001634e:	6a 00                	push   0x0
c0016350:	68 3a e5 02 c0       	push   0xc002e53a
c0016355:	6a 33                	push   0x33
c0016357:	53                   	push   ebx
c0016358:	e8 13 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001635d:	83 c4 20             	add    esp,0x20
c0016360:	6a 00                	push   0x0
c0016362:	68 44 e5 02 c0       	push   0xc002e544
c0016367:	6a 34                	push   0x34
c0016369:	53                   	push   ebx
c001636a:	e8 01 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001636f:	6a 00                	push   0x0
c0016371:	68 4e e5 02 c0       	push   0xc002e54e
c0016376:	6a 35                	push   0x35
c0016378:	53                   	push   ebx
c0016379:	e8 f2 fc ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001637e:	83 c4 20             	add    esp,0x20
c0016381:	6a 00                	push   0x0
c0016383:	68 58 e5 02 c0       	push   0xc002e558
c0016388:	6a 36                	push   0x36
c001638a:	53                   	push   ebx
c001638b:	e8 e0 fc ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016390:	6a 00                	push   0x0
c0016392:	68 62 e5 02 c0       	push   0xc002e562
c0016397:	6a 37                	push   0x37
c0016399:	53                   	push   ebx
c001639a:	e8 d1 fc ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001639f:	83 c4 1c             	add    esp,0x1c
c00163a2:	6a 03                	push   0x3
c00163a4:	6a 02                	push   0x2
c00163a6:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c00163ac:	e8 ff 25 00 00       	call   c00189b0 <VAS::allocatePages(int, int)>
c00163b1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00163b8:	89 c6                	mov    esi,eax
c00163ba:	e8 84 02 00 00       	call   c0016643 <malloc>
c00163bf:	81 c6 00 20 00 00    	add    esi,0x2000
c00163c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00163c8:	89 c7                	mov    edi,eax
c00163ca:	e8 01 17 00 00       	call   c0017ad0 <TSS::TSS()>
c00163cf:	83 c4 0c             	add    esp,0xc
c00163d2:	68 d6 e2 02 c0       	push   0xc002e2d6
c00163d7:	56                   	push   esi
c00163d8:	57                   	push   edi
c00163d9:	e8 36 17 00 00       	call   c0017b14 <TSS::setup(unsigned long, unsigned long)>
c00163de:	89 c6                	mov    esi,eax
c00163e0:	58                   	pop    eax
c00163e1:	5a                   	pop    edx
c00163e2:	6a 00                	push   0x0
c00163e4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00163e8:	50                   	push   eax
c00163e9:	e8 ce fb ff ff       	call   c0015fbc <IDTEntry::IDTEntry(bool)>
c00163ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00163f2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00163f7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00163fe:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0016404:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016408:	80 ce 05             	or     dh,0x5
c001640b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c001640e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016412:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016416:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016419:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001641c:	e8 87 fc ff ff       	call   c00160a8 <IDT::flush()>
c0016421:	83 c4 20             	add    esp,0x20
c0016424:	5b                   	pop    ebx
c0016425:	5e                   	pop    esi
c0016426:	5f                   	pop    edi
c0016427:	c3                   	ret    

c0016428 <sbrk>:
c0016428:	55                   	push   ebp
c0016429:	57                   	push   edi
c001642a:	56                   	push   esi
c001642b:	53                   	push   ebx
c001642c:	83 ec 1c             	sub    esp,0x1c
c001642f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016433:	85 c0                	test   eax,eax
c0016435:	74 61                	je     c0016498 <sbrk+0x70>
c0016437:	78 66                	js     c001649f <sbrk+0x77>
c0016439:	8b 15 a4 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033ea4
c001643f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016443:	05 ff 0f 00 00       	add    eax,0xfff
c0016448:	89 c5                	mov    ebp,eax
c001644a:	78 6b                	js     c00164b7 <sbrk+0x8f>
c001644c:	c1 fd 0c             	sar    ebp,0xc
c001644f:	bb 00 00 00 00       	mov    ebx,0x0
c0016454:	8b 35 b0 aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aab0
c001645a:	8b 3d a4 3e 03 c0    	mov    edi,DWORD PTR ds:0xc0033ea4
c0016460:	e8 e7 04 00 00       	call   c001694c <Phys::allocatePage()>
c0016465:	68 01 04 00 00       	push   0x401
c001646a:	57                   	push   edi
c001646b:	50                   	push   eax
c001646c:	56                   	push   esi
c001646d:	e8 3a 24 00 00       	call   c00188ac <VAS::mapPage(unsigned long, unsigned long, int)>
c0016472:	81 05 a4 3e 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc0033ea4,0x1000
c001647c:	83 c3 01             	add    ebx,0x1
c001647f:	83 c4 10             	add    esp,0x10
c0016482:	39 dd                	cmp    ebp,ebx
c0016484:	75 ce                	jne    c0016454 <sbrk+0x2c>
c0016486:	0f 20 d8             	mov    eax,cr3
c0016489:	0f 22 d8             	mov    cr3,eax
c001648c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016490:	83 c4 1c             	add    esp,0x1c
c0016493:	5b                   	pop    ebx
c0016494:	5e                   	pop    esi
c0016495:	5f                   	pop    edi
c0016496:	5d                   	pop    ebp
c0016497:	c3                   	ret    
c0016498:	a1 a4 3e 03 c0       	mov    eax,ds:0xc0033ea4
c001649d:	eb f1                	jmp    c0016490 <sbrk+0x68>
c001649f:	83 ec 08             	sub    esp,0x8
c00164a2:	50                   	push   eax
c00164a3:	68 c8 13 03 c0       	push   0xc00313c8
c00164a8:	e8 24 30 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c00164ad:	83 c4 10             	add    esp,0x10
c00164b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00164b5:	eb d9                	jmp    c0016490 <sbrk+0x68>
c00164b7:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c00164bd:	eb 8d                	jmp    c001644c <sbrk+0x24>

c00164bf <sbrk_thunk>:
c00164bf:	83 ec 0c             	sub    esp,0xc
c00164c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164c6:	3d ff bf 00 00       	cmp    eax,0xbfff
c00164cb:	7f 10                	jg     c00164dd <sbrk_thunk+0x1e>
c00164cd:	83 ec 0c             	sub    esp,0xc
c00164d0:	50                   	push   eax
c00164d1:	e8 52 ff ff ff       	call   c0016428 <sbrk>
c00164d6:	83 c4 10             	add    esp,0x10
c00164d9:	83 c4 0c             	add    esp,0xc
c00164dc:	c3                   	ret    
c00164dd:	83 ec 08             	sub    esp,0x8
c00164e0:	50                   	push   eax
c00164e1:	68 f8 13 03 c0       	push   0xc00313f8
c00164e6:	e8 e6 2f 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c00164eb:	83 c4 10             	add    esp,0x10
c00164ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00164f3:	eb e4                	jmp    c00164d9 <sbrk_thunk+0x1a>

c00164f5 <mmap>:
c00164f5:	55                   	push   ebp
c00164f6:	57                   	push   edi
c00164f7:	56                   	push   esi
c00164f8:	53                   	push   ebx
c00164f9:	83 ec 14             	sub    esp,0x14
c00164fc:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016500:	89 f0                	mov    eax,esi
c0016502:	c1 e8 0a             	shr    eax,0xa
c0016505:	50                   	push   eax
c0016506:	68 07 14 03 c0       	push   0xc0031407
c001650b:	e8 c1 2f 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0016510:	81 c6 ff 0f 00 00    	add    esi,0xfff
c0016516:	89 f3                	mov    ebx,esi
c0016518:	c1 eb 0c             	shr    ebx,0xc
c001651b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001651e:	e8 76 1c 00 00       	call   c0018199 <Virt::allocateKernelVirtualPages(int)>
c0016523:	89 c5                	mov    ebp,eax
c0016525:	83 c4 10             	add    esp,0x10
c0016528:	85 db                	test   ebx,ebx
c001652a:	7e 2f                	jle    c001655b <mmap+0x66>
c001652c:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0016532:	01 c6                	add    esi,eax
c0016534:	89 c3                	mov    ebx,eax
c0016536:	8b 3d b0 aa 03 c0    	mov    edi,DWORD PTR ds:0xc003aab0
c001653c:	e8 0b 04 00 00       	call   c001694c <Phys::allocatePage()>
c0016541:	68 01 04 00 00       	push   0x401
c0016546:	53                   	push   ebx
c0016547:	50                   	push   eax
c0016548:	57                   	push   edi
c0016549:	e8 5e 23 00 00       	call   c00188ac <VAS::mapPage(unsigned long, unsigned long, int)>
c001654e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016554:	83 c4 10             	add    esp,0x10
c0016557:	39 f3                	cmp    ebx,esi
c0016559:	75 db                	jne    c0016536 <mmap+0x41>
c001655b:	83 ec 08             	sub    esp,0x8
c001655e:	55                   	push   ebp
c001655f:	68 21 14 03 c0       	push   0xc0031421
c0016564:	e8 68 2f 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0016569:	89 e8                	mov    eax,ebp
c001656b:	83 c4 1c             	add    esp,0x1c
c001656e:	5b                   	pop    ebx
c001656f:	5e                   	pop    esi
c0016570:	5f                   	pop    edi
c0016571:	5d                   	pop    ebp
c0016572:	c3                   	ret    

c0016573 <munmap>:
c0016573:	57                   	push   edi
c0016574:	56                   	push   esi
c0016575:	53                   	push   ebx
c0016576:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001657a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001657e:	83 ec 08             	sub    esp,0x8
c0016581:	89 f0                	mov    eax,esi
c0016583:	c1 e8 0a             	shr    eax,0xa
c0016586:	50                   	push   eax
c0016587:	68 30 14 03 c0       	push   0xc0031430
c001658c:	e8 40 2f 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0016591:	83 c4 08             	add    esp,0x8
c0016594:	57                   	push   edi
c0016595:	68 21 14 03 c0       	push   0xc0031421
c001659a:	e8 32 2f 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001659f:	81 c6 ff 0f 00 00    	add    esi,0xfff
c00165a5:	83 c4 10             	add    esp,0x10
c00165a8:	89 f0                	mov    eax,esi
c00165aa:	c1 e8 0c             	shr    eax,0xc
c00165ad:	74 20                	je     c00165cf <munmap+0x5c>
c00165af:	89 fb                	mov    ebx,edi
c00165b1:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00165b7:	01 fe                	add    esi,edi
c00165b9:	83 ec 0c             	sub    esp,0xc
c00165bc:	53                   	push   ebx
c00165bd:	e8 f5 1e 00 00       	call   c00184b7 <Virt::freeKernelVirtualPages(unsigned long)>
c00165c2:	81 c3 00 10 00 00    	add    ebx,0x1000
c00165c8:	83 c4 10             	add    esp,0x10
c00165cb:	39 f3                	cmp    ebx,esi
c00165cd:	75 ea                	jne    c00165b9 <munmap+0x46>
c00165cf:	b8 00 00 00 00       	mov    eax,0x0
c00165d4:	5b                   	pop    ebx
c00165d5:	5e                   	pop    esi
c00165d6:	5f                   	pop    edi
c00165d7:	c3                   	ret    

c00165d8 <liballoc_lock()>:
c00165d8:	fa                   	cli    
c00165d9:	83 05 d0 01 04 c0 01 	add    DWORD PTR ds:0xc00401d0,0x1
c00165e0:	b8 00 00 00 00       	mov    eax,0x0
c00165e5:	c3                   	ret    

c00165e6 <liballoc_unlock()>:
c00165e6:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00165eb:	83 e8 01             	sub    eax,0x1
c00165ee:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00165f3:	75 01                	jne    c00165f6 <liballoc_unlock()+0x10>
c00165f5:	fb                   	sti    
c00165f6:	b8 00 00 00 00       	mov    eax,0x0
c00165fb:	c3                   	ret    

c00165fc <liballoc_alloc(int)>:
c00165fc:	83 ec 10             	sub    esp,0x10
c00165ff:	6a 01                	push   0x1
c0016601:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016605:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c001660b:	e8 a0 23 00 00       	call   c00189b0 <VAS::allocatePages(int, int)>
c0016610:	83 c4 1c             	add    esp,0x1c
c0016613:	c3                   	ret    

c0016614 <liballoc_free(void*, int)>:
c0016614:	83 ec 14             	sub    esp,0x14
c0016617:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001661b:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0016621:	e8 ce 1f 00 00       	call   c00185f4 <VAS::freeAllocatedPages(unsigned long)>
c0016626:	b8 00 00 00 00       	mov    eax,0x0
c001662b:	83 c4 1c             	add    esp,0x1c
c001662e:	c3                   	ret    

c001662f <realloc>:
c001662f:	83 ec 14             	sub    esp,0x14
c0016632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001663a:	e8 ce b2 fe ff       	call   c000190d <dlrealloc>
c001663f:	83 c4 1c             	add    esp,0x1c
c0016642:	c3                   	ret    

c0016643 <malloc>:
c0016643:	83 ec 18             	sub    esp,0x18
c0016646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001664a:	e8 81 ad fe ff       	call   c00013d0 <dlmalloc>
c001664f:	83 c4 1c             	add    esp,0x1c
c0016652:	c3                   	ret    

c0016653 <free>:
c0016653:	83 ec 18             	sub    esp,0x18
c0016656:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001665a:	e8 aa a8 fe ff       	call   c0000f09 <dlfree>
c001665f:	83 c4 1c             	add    esp,0x1c
c0016662:	c3                   	ret    

c0016663 <rfree>:
c0016663:	83 ec 18             	sub    esp,0x18
c0016666:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001666a:	e8 9a a8 fe ff       	call   c0000f09 <dlfree>
c001666f:	83 c4 1c             	add    esp,0x1c
c0016672:	c3                   	ret    

c0016673 <calloc>:
c0016673:	56                   	push   esi
c0016674:	53                   	push   ebx
c0016675:	83 ec 10             	sub    esp,0x10
c0016678:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001667c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0016681:	53                   	push   ebx
c0016682:	e8 bc ff ff ff       	call   c0016643 <malloc>
c0016687:	89 c6                	mov    esi,eax
c0016689:	83 c4 0c             	add    esp,0xc
c001668c:	53                   	push   ebx
c001668d:	6a 00                	push   0x0
c001668f:	50                   	push   eax
c0016690:	e8 5b 9e fe ff       	call   c00004f0 <memset>
c0016695:	89 f0                	mov    eax,esi
c0016697:	83 c4 14             	add    esp,0x14
c001669a:	5b                   	pop    ebx
c001669b:	5e                   	pop    esi
c001669c:	c3                   	ret    

c001669d <KeEntryPoint>:
c001669d:	57                   	push   edi
c001669e:	bf f9 03 00 00       	mov    edi,0x3f9
c00166a3:	56                   	push   esi
c00166a4:	89 fa                	mov    edx,edi
c00166a6:	53                   	push   ebx
c00166a7:	31 f6                	xor    esi,esi
c00166a9:	83 ec 2c             	sub    esp,0x2c
c00166ac:	a1 00 05 00 00       	mov    eax,ds:0x500
c00166b1:	a3 d4 a9 03 c0       	mov    ds:0xc003a9d4,eax
c00166b6:	89 f0                	mov    eax,esi
c00166b8:	ee                   	out    dx,al
c00166b9:	bb fb 03 00 00       	mov    ebx,0x3fb
c00166be:	b0 80                	mov    al,0x80
c00166c0:	89 da                	mov    edx,ebx
c00166c2:	ee                   	out    dx,al
c00166c3:	b1 03                	mov    cl,0x3
c00166c5:	ba f8 03 00 00       	mov    edx,0x3f8
c00166ca:	88 c8                	mov    al,cl
c00166cc:	ee                   	out    dx,al
c00166cd:	89 f0                	mov    eax,esi
c00166cf:	89 fa                	mov    edx,edi
c00166d1:	ee                   	out    dx,al
c00166d2:	88 c8                	mov    al,cl
c00166d4:	89 da                	mov    edx,ebx
c00166d6:	ee                   	out    dx,al
c00166d7:	b0 c7                	mov    al,0xc7
c00166d9:	ba fa 03 00 00       	mov    edx,0x3fa
c00166de:	ee                   	out    dx,al
c00166df:	b0 0b                	mov    al,0xb
c00166e1:	ba fc 03 00 00       	mov    edx,0x3fc
c00166e6:	ee                   	out    dx,al
c00166e7:	68 49 14 03 c0       	push   0xc0031449
c00166ec:	e8 e0 2d 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c00166f1:	e8 15 96 00 00       	call   c001fd0b <KeDisplaySplashScreen()>
c00166f6:	a1 24 05 00 00       	mov    eax,ds:0x524
c00166fb:	05 ff 0f 00 00       	add    eax,0xfff
c0016700:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016705:	89 04 24             	mov    DWORD PTR [esp],eax
c0016708:	e8 ad 03 00 00       	call   c0016aba <Phys::physicalMemorySetup(unsigned int)>
c001670d:	e8 65 1c 00 00       	call   c0018377 <Virt::virtualMemorySetup()>
c0016712:	e8 3e 95 00 00       	call   c001fc55 <KeInitialiseAtexit()>
c0016717:	58                   	pop    eax
c0016718:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c001671c:	53                   	push   ebx
c001671d:	e8 52 1f 00 00       	call   c0018674 <VAS::VAS()>
c0016722:	89 1d b0 aa 03 c0    	mov    DWORD PTR ds:0xc003aab0,ebx
c0016728:	e8 ed 83 01 00       	call   c002eb1a <_init>
c001672d:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0016734:	e8 0a ff ff ff       	call   c0016643 <malloc>
c0016739:	89 04 24             	mov    DWORD PTR [esp],eax
c001673c:	89 c6                	mov    esi,eax
c001673e:	e8 43 f1 ff ff       	call   c0015886 <Computer::Computer()>
c0016743:	53                   	push   ebx
c0016744:	89 35 bc a9 03 c0    	mov    DWORD PTR ds:0xc003a9bc,esi
c001674a:	6a 00                	push   0x0
c001674c:	6a 00                	push   0x0
c001674e:	56                   	push   esi
c001674f:	e8 fa f4 ff ff       	call   c0015c4e <Computer::open(int, int, void*)>
c0016754:	83 c4 14             	add    esp,0x14
c0016757:	53                   	push   ebx
c0016758:	e8 e1 1f 00 00       	call   c001873e <VAS::~VAS()>
c001675d:	83 c4 30             	add    esp,0x30
c0016760:	5b                   	pop    ebx
c0016761:	5e                   	pop    esi
c0016762:	5f                   	pop    edi
c0016763:	c3                   	ret    

c0016764 <Phys::allocateDMA(unsigned long)>:
c0016764:	55                   	push   ebp
c0016765:	31 ed                	xor    ebp,ebp
c0016767:	57                   	push   edi
c0016768:	56                   	push   esi
c0016769:	53                   	push   ebx
c001676a:	31 db                	xor    ebx,ebx
c001676c:	83 ec 1c             	sub    esp,0x1c
c001676f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016773:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001677b:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0016781:	31 c0                	xor    eax,eax
c0016783:	c1 ef 0c             	shr    edi,0xc
c0016786:	eb 1b                	jmp    c00167a3 <Phys::allocateDMA(unsigned long)+0x3f>
c0016788:	85 c0                	test   eax,eax
c001678a:	75 06                	jne    c0016792 <Phys::allocateDMA(unsigned long)+0x2e>
c001678c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016790:	89 dd                	mov    ebp,ebx
c0016792:	8d 70 01             	lea    esi,[eax+0x1]
c0016795:	39 f7                	cmp    edi,esi
c0016797:	74 37                	je     c00167d0 <Phys::allocateDMA(unsigned long)+0x6c>
c0016799:	89 f0                	mov    eax,esi
c001679b:	83 c3 01             	add    ebx,0x1
c001679e:	83 fb 0f             	cmp    ebx,0xf
c00167a1:	7f 13                	jg     c00167b6 <Phys::allocateDMA(unsigned long)+0x52>
c00167a3:	80 bb f0 a9 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffc5610],0x0
c00167aa:	74 dc                	je     c0016788 <Phys::allocateDMA(unsigned long)+0x24>
c00167ac:	31 c0                	xor    eax,eax
c00167ae:	83 c3 01             	add    ebx,0x1
c00167b1:	83 fb 0f             	cmp    ebx,0xf
c00167b4:	7e ed                	jle    c00167a3 <Phys::allocateDMA(unsigned long)+0x3f>
c00167b6:	83 ec 0c             	sub    esp,0xc
c00167b9:	68 60 14 03 c0       	push   0xc0031460
c00167be:	e8 27 9d 00 00       	call   c00204ea <KePanic(char const*)>
c00167c3:	83 c4 10             	add    esp,0x10
c00167c6:	31 c0                	xor    eax,eax
c00167c8:	83 c4 1c             	add    esp,0x1c
c00167cb:	5b                   	pop    ebx
c00167cc:	5e                   	pop    esi
c00167cd:	5f                   	pop    edi
c00167ce:	5d                   	pop    ebp
c00167cf:	c3                   	ret    
c00167d0:	89 e9                	mov    ecx,ebp
c00167d2:	c1 f9 04             	sar    ecx,0x4
c00167d5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00167d9:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c00167dd:	89 ca                	mov    edx,ecx
c00167df:	83 ea 01             	sub    edx,0x1
c00167e2:	79 03                	jns    c00167e7 <Phys::allocateDMA(unsigned long)+0x83>
c00167e4:	8d 51 0e             	lea    edx,[ecx+0xe]
c00167e7:	c1 fa 04             	sar    edx,0x4
c00167ea:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c00167ee:	74 08                	je     c00167f8 <Phys::allocateDMA(unsigned long)+0x94>
c00167f0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00167f4:	31 c0                	xor    eax,eax
c00167f6:	eb b6                	jmp    c00167ae <Phys::allocateDMA(unsigned long)+0x4a>
c00167f8:	85 f6                	test   esi,esi
c00167fa:	74 17                	je     c0016813 <Phys::allocateDMA(unsigned long)+0xaf>
c00167fc:	8d 95 f0 a9 03 c0    	lea    edx,[ebp-0x3ffc5610]
c0016802:	8d 84 05 f1 a9 03 c0 	lea    eax,[ebp+eax*1-0x3ffc560f]
c0016809:	c6 02 01             	mov    BYTE PTR [edx],0x1
c001680c:	83 c2 01             	add    edx,0x1
c001680f:	39 d0                	cmp    eax,edx
c0016811:	75 f6                	jne    c0016809 <Phys::allocateDMA(unsigned long)+0xa5>
c0016813:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c0016818:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001681c:	01 f8                	add    eax,edi
c001681e:	85 d2                	test   edx,edx
c0016820:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c0016825:	74 17                	je     c001683e <Phys::allocateDMA(unsigned long)+0xda>
c0016827:	83 ec 0c             	sub    esp,0xc
c001682a:	68 60 14 03 c0       	push   0xc0031460
c001682f:	e8 b6 9c 00 00       	call   c00204ea <KePanic(char const*)>
c0016834:	83 c4 10             	add    esp,0x10
c0016837:	89 f0                	mov    eax,esi
c0016839:	e9 5d ff ff ff       	jmp    c001679b <Phys::allocateDMA(unsigned long)+0x37>
c001683e:	c1 e5 0c             	shl    ebp,0xc
c0016841:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0016847:	e9 7c ff ff ff       	jmp    c00167c8 <Phys::allocateDMA(unsigned long)+0x64>

c001684c <Phys::freeDMA(unsigned long, unsigned long)>:
c001684c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016850:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0016856:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c001685b:	c1 ea 0c             	shr    edx,0xc
c001685e:	29 d0                	sub    eax,edx
c0016860:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c0016865:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016869:	05 00 00 ff 3d       	add    eax,0x3dff0000
c001686e:	c1 e8 0c             	shr    eax,0xc
c0016871:	85 d2                	test   edx,edx
c0016873:	74 11                	je     c0016886 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0016875:	05 f0 a9 03 c0       	add    eax,0xc003a9f0
c001687a:	01 c2                	add    edx,eax
c001687c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001687f:	83 c0 01             	add    eax,0x1
c0016882:	39 d0                	cmp    eax,edx
c0016884:	75 f6                	jne    c001687c <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0016886:	c3                   	ret    

c0016887 <Phys::setPageState(unsigned long, bool)>:
c0016887:	57                   	push   edi
c0016888:	56                   	push   esi
c0016889:	8b 35 a8 3e 03 c0    	mov    esi,DWORD PTR ds:0xc0033ea8
c001688f:	53                   	push   ebx
c0016890:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0016895:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016899:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001689d:	0f b6 c0             	movzx  eax,al
c00168a0:	89 ca                	mov    edx,ecx
c00168a2:	83 e1 07             	and    ecx,0x7
c00168a5:	c1 ea 03             	shr    edx,0x3
c00168a8:	d3 c3                	rol    ebx,cl
c00168aa:	01 d6                	add    esi,edx
c00168ac:	d3 e0                	shl    eax,cl
c00168ae:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c00168b1:	21 fb                	and    ebx,edi
c00168b3:	88 1e                	mov    BYTE PTR [esi],bl
c00168b5:	8b 1d a8 3e 03 c0    	mov    ebx,DWORD PTR ds:0xc0033ea8
c00168bb:	01 da                	add    edx,ebx
c00168bd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00168bf:	09 c8                	or     eax,ecx
c00168c1:	88 02                	mov    BYTE PTR [edx],al
c00168c3:	5b                   	pop    ebx
c00168c4:	5e                   	pop    esi
c00168c5:	5f                   	pop    edi
c00168c6:	c3                   	ret    

c00168c7 <Phys::getPageState(unsigned long)>:
c00168c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00168cb:	8b 15 a8 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033ea8
c00168d1:	89 c8                	mov    eax,ecx
c00168d3:	83 e1 07             	and    ecx,0x7
c00168d6:	c1 e8 03             	shr    eax,0x3
c00168d9:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c00168dd:	d3 f8                	sar    eax,cl
c00168df:	83 e0 01             	and    eax,0x1
c00168e2:	c3                   	ret    

c00168e3 <Phys::freePage(unsigned long)>:
c00168e3:	53                   	push   ebx
c00168e4:	83 ec 08             	sub    esp,0x8
c00168e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168eb:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c00168f1:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00168f7:	76 41                	jbe    c001693a <Phys::freePage(unsigned long)+0x57>
c00168f9:	c1 e8 0c             	shr    eax,0xc
c00168fc:	50                   	push   eax
c00168fd:	89 c3                	mov    ebx,eax
c00168ff:	e8 c3 ff ff ff       	call   c00168c7 <Phys::getPageState(unsigned long)>
c0016904:	5a                   	pop    edx
c0016905:	84 c0                	test   al,al
c0016907:	74 20                	je     c0016929 <Phys::freePage(unsigned long)+0x46>
c0016909:	83 ec 08             	sub    esp,0x8
c001690c:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c0016911:	6a 00                	push   0x0
c0016913:	83 e8 01             	sub    eax,0x1
c0016916:	53                   	push   ebx
c0016917:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c001691c:	e8 66 ff ff ff       	call   c0016887 <Phys::setPageState(unsigned long, bool)>
c0016921:	83 c4 10             	add    esp,0x10
c0016924:	83 c4 08             	add    esp,0x8
c0016927:	5b                   	pop    ebx
c0016928:	c3                   	ret    
c0016929:	c7 44 24 10 05 15 03 c0 	mov    DWORD PTR [esp+0x10],0xc0031505
c0016931:	83 c4 08             	add    esp,0x8
c0016934:	5b                   	pop    ebx
c0016935:	e9 b0 9b 00 00       	jmp    c00204ea <KePanic(char const*)>
c001693a:	68 00 10 00 00       	push   0x1000
c001693f:	50                   	push   eax
c0016940:	e8 07 ff ff ff       	call   c001684c <Phys::freeDMA(unsigned long, unsigned long)>
c0016945:	59                   	pop    ecx
c0016946:	5b                   	pop    ebx
c0016947:	83 c4 08             	add    esp,0x8
c001694a:	5b                   	pop    ebx
c001694b:	c3                   	ret    

c001694c <Phys::allocatePage()>:
c001694c:	56                   	push   esi
c001694d:	53                   	push   ebx
c001694e:	83 ec 14             	sub    esp,0x14
c0016951:	8b 35 dc a9 03 c0    	mov    esi,DWORD PTR ds:0xc003a9dc
c0016957:	89 f3                	mov    ebx,esi
c0016959:	eb 0a                	jmp    c0016965 <Phys::allocatePage()+0x19>
c001695b:	89 1d dc a9 03 c0    	mov    DWORD PTR ds:0xc003a9dc,ebx
c0016961:	39 de                	cmp    esi,ebx
c0016963:	74 26                	je     c001698b <Phys::allocatePage()+0x3f>
c0016965:	53                   	push   ebx
c0016966:	e8 5c ff ff ff       	call   c00168c7 <Phys::getPageState(unsigned long)>
c001696b:	5a                   	pop    edx
c001696c:	84 c0                	test   al,al
c001696e:	74 67                	je     c00169d7 <Phys::allocatePage()+0x8b>
c0016970:	83 c3 01             	add    ebx,0x1
c0016973:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0016979:	75 e0                	jne    c001695b <Phys::allocatePage()+0xf>
c001697b:	31 db                	xor    ebx,ebx
c001697d:	c7 05 dc a9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a9dc,0x0
c0016987:	39 de                	cmp    esi,ebx
c0016989:	75 da                	jne    c0016965 <Phys::allocatePage()+0x19>
c001698b:	83 ec 0c             	sub    esp,0xc
c001698e:	a0 00 aa 03 c0       	mov    al,ds:0xc003aa00
c0016993:	83 f0 01             	xor    eax,0x1
c0016996:	a2 00 aa 03 c0       	mov    ds:0xc003aa00,al
c001699b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169a0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00169a3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00169a9:	50                   	push   eax
c00169aa:	e8 a7 27 00 00       	call   c0019156 <VAS::scanForEviction()>
c00169af:	83 c4 10             	add    esp,0x10
c00169b2:	85 c0                	test   eax,eax
c00169b4:	75 48                	jne    c00169fe <Phys::allocatePage()+0xb2>
c00169b6:	83 ec 0c             	sub    esp,0xc
c00169b9:	68 88 14 03 c0       	push   0xc0031488
c00169be:	e8 27 9b 00 00       	call   c00204ea <KePanic(char const*)>
c00169c3:	83 c4 10             	add    esp,0x10
c00169c6:	8b 1d dc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9dc
c00169cc:	53                   	push   ebx
c00169cd:	e8 f5 fe ff ff       	call   c00168c7 <Phys::getPageState(unsigned long)>
c00169d2:	5a                   	pop    edx
c00169d3:	84 c0                	test   al,al
c00169d5:	75 99                	jne    c0016970 <Phys::allocatePage()+0x24>
c00169d7:	6a 01                	push   0x1
c00169d9:	53                   	push   ebx
c00169da:	e8 a8 fe ff ff       	call   c0016887 <Phys::setPageState(unsigned long, bool)>
c00169df:	8b 15 e8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9e8
c00169e5:	a1 dc a9 03 c0       	mov    eax,ds:0xc003a9dc
c00169ea:	83 c2 01             	add    edx,0x1
c00169ed:	59                   	pop    ecx
c00169ee:	89 15 e8 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e8,edx
c00169f4:	c1 e0 0c             	shl    eax,0xc
c00169f7:	5b                   	pop    ebx
c00169f8:	83 c4 14             	add    esp,0x14
c00169fb:	5b                   	pop    ebx
c00169fc:	5e                   	pop    esi
c00169fd:	c3                   	ret    
c00169fe:	83 ec 08             	sub    esp,0x8
c0016a01:	89 c2                	mov    edx,eax
c0016a03:	6a 01                	push   0x1
c0016a05:	c1 ea 0c             	shr    edx,0xc
c0016a08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016a0c:	52                   	push   edx
c0016a0d:	e8 75 fe ff ff       	call   c0016887 <Phys::setPageState(unsigned long, bool)>
c0016a12:	83 c4 10             	add    esp,0x10
c0016a15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a19:	eb dd                	jmp    c00169f8 <Phys::allocatePage()+0xac>

c0016a1b <Phys::allocateContiguousPages(int)>:
c0016a1b:	57                   	push   edi
c0016a1c:	56                   	push   esi
c0016a1d:	53                   	push   ebx
c0016a1e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016a22:	fa                   	cli    
c0016a23:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016a28:	31 db                	xor    ebx,ebx
c0016a2a:	83 c0 01             	add    eax,0x1
c0016a2d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016a32:	85 db                	test   ebx,ebx
c0016a34:	75 11                	jne    c0016a47 <Phys::allocateContiguousPages(int)+0x2c>
c0016a36:	e8 11 ff ff ff       	call   c001694c <Phys::allocatePage()>
c0016a3b:	83 fe 01             	cmp    esi,0x1
c0016a3e:	89 c7                	mov    edi,eax
c0016a40:	74 21                	je     c0016a63 <Phys::allocateContiguousPages(int)+0x48>
c0016a42:	bb 01 00 00 00       	mov    ebx,0x1
c0016a47:	e8 00 ff ff ff       	call   c001694c <Phys::allocatePage()>
c0016a4c:	89 da                	mov    edx,ebx
c0016a4e:	c1 e2 0c             	shl    edx,0xc
c0016a51:	01 fa                	add    edx,edi
c0016a53:	39 c2                	cmp    edx,eax
c0016a55:	74 22                	je     c0016a79 <Phys::allocateContiguousPages(int)+0x5e>
c0016a57:	bb 01 00 00 00       	mov    ebx,0x1
c0016a5c:	89 c7                	mov    edi,eax
c0016a5e:	83 fe 01             	cmp    esi,0x1
c0016a61:	75 e4                	jne    c0016a47 <Phys::allocateContiguousPages(int)+0x2c>
c0016a63:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016a68:	83 e8 01             	sub    eax,0x1
c0016a6b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016a70:	75 01                	jne    c0016a73 <Phys::allocateContiguousPages(int)+0x58>
c0016a72:	fb                   	sti    
c0016a73:	89 f8                	mov    eax,edi
c0016a75:	5b                   	pop    ebx
c0016a76:	5e                   	pop    esi
c0016a77:	5f                   	pop    edi
c0016a78:	c3                   	ret    
c0016a79:	83 c3 01             	add    ebx,0x1
c0016a7c:	39 f3                	cmp    ebx,esi
c0016a7e:	75 b2                	jne    c0016a32 <Phys::allocateContiguousPages(int)+0x17>
c0016a80:	eb e1                	jmp    c0016a63 <Phys::allocateContiguousPages(int)+0x48>

c0016a82 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0016a82:	56                   	push   esi
c0016a83:	53                   	push   ebx
c0016a84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a88:	39 1d e0 a9 03 c0    	cmp    DWORD PTR ds:0xc003a9e0,ebx
c0016a8e:	73 06                	jae    c0016a96 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0016a90:	89 1d e0 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e0,ebx
c0016a96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a9a:	c1 eb 0c             	shr    ebx,0xc
c0016a9d:	c1 e8 0c             	shr    eax,0xc
c0016aa0:	39 d8                	cmp    eax,ebx
c0016aa2:	73 13                	jae    c0016ab7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0016aa4:	6a 00                	push   0x0
c0016aa6:	8d 70 01             	lea    esi,[eax+0x1]
c0016aa9:	50                   	push   eax
c0016aaa:	e8 d8 fd ff ff       	call   c0016887 <Phys::setPageState(unsigned long, bool)>
c0016aaf:	5a                   	pop    edx
c0016ab0:	89 f0                	mov    eax,esi
c0016ab2:	59                   	pop    ecx
c0016ab3:	39 f3                	cmp    ebx,esi
c0016ab5:	75 ed                	jne    c0016aa4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0016ab7:	5b                   	pop    ebx
c0016ab8:	5e                   	pop    esi
c0016ab9:	c3                   	ret    

c0016aba <Phys::physicalMemorySetup(unsigned int)>:
c0016aba:	55                   	push   ebp
c0016abb:	57                   	push   edi
c0016abc:	56                   	push   esi
c0016abd:	53                   	push   ebx
c0016abe:	83 ec 40             	sub    esp,0x40
c0016ac1:	6a 10                	push   0x10
c0016ac3:	6a 00                	push   0x0
c0016ac5:	68 f0 a9 03 c0       	push   0xc003a9f0
c0016aca:	e8 21 9a fe ff       	call   c00004f0 <memset>
c0016acf:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0016ad3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016ad8:	05 00 10 00 00       	add    eax,0x1000
c0016add:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016ae1:	5b                   	pop    ebx
c0016ae2:	31 db                	xor    ebx,ebx
c0016ae4:	5e                   	pop    esi
c0016ae5:	50                   	push   eax
c0016ae6:	68 1b 15 03 c0       	push   0xc003151b
c0016aeb:	e8 e1 29 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0016af0:	83 c4 10             	add    esp,0x10
c0016af3:	83 ec 08             	sub    esp,0x8
c0016af6:	6a 01                	push   0x1
c0016af8:	53                   	push   ebx
c0016af9:	83 c3 01             	add    ebx,0x1
c0016afc:	e8 86 fd ff ff       	call   c0016887 <Phys::setPageState(unsigned long, bool)>
c0016b01:	83 c4 10             	add    esp,0x10
c0016b04:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0016b0a:	75 e7                	jne    c0016af3 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0016b0c:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0016b13:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0016b1a:	c1 e0 08             	shl    eax,0x8
c0016b1d:	09 c2                	or     edx,eax
c0016b1f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0016b23:	0f 84 98 01 00 00    	je     c0016cc1 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0016b29:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b2d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b35:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0016b3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016b3e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016b46:	eb 1c                	jmp    c0016b64 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0016b48:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016b4c:	83 c3 18             	add    ebx,0x18
c0016b4f:	83 c6 01             	add    esi,0x1
c0016b52:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0016b56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016b5a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0016b5e:	0f 84 6d 01 00 00    	je     c0016cd1 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0016b64:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016b67:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b6a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0016b6d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b71:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b75:	8b 33                	mov    esi,DWORD PTR [ebx]
c0016b77:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0016b7a:	01 f0                	add    eax,esi
c0016b7c:	55                   	push   ebp
c0016b7d:	11 fa                	adc    edx,edi
c0016b7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b83:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016b87:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b8b:	51                   	push   ecx
c0016b8c:	56                   	push   esi
c0016b8d:	68 b8 14 03 c0       	push   0xc00314b8
c0016b92:	e8 3a 29 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0016b97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b9b:	83 c4 10             	add    esp,0x10
c0016b9e:	09 f8                	or     eax,edi
c0016ba0:	0f 85 2b 01 00 00    	jne    c0016cd1 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0016ba6:	83 fd 01             	cmp    ebp,0x1
c0016ba9:	75 9d                	jne    c0016b48 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016bab:	ba 00 00 08 00       	mov    edx,0x80000
c0016bb0:	89 c1                	mov    ecx,eax
c0016bb2:	39 f2                	cmp    edx,esi
c0016bb4:	19 f9                	sbb    ecx,edi
c0016bb6:	0f 82 ab 00 00 00    	jb     c0016c67 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0016bbc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0016bc0:	89 c1                	mov    ecx,eax
c0016bc2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0016bc6:	0f 83 9b 00 00 00    	jae    c0016c67 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0016bcc:	ba 00 00 0a 00       	mov    edx,0xa0000
c0016bd1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016bd5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0016bd9:	39 fa                	cmp    edx,edi
c0016bdb:	19 e8                	sbb    eax,ebp
c0016bdd:	0f 82 b0 01 00 00    	jb     c0016d93 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0016be3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016be7:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0016beb:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0016bf1:	ba ff 1f 00 00       	mov    edx,0x1fff
c0016bf6:	83 d5 ff             	adc    ebp,0xffffffff
c0016bf9:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0016bfd:	31 c0                	xor    eax,eax
c0016bff:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0016c03:	39 fa                	cmp    edx,edi
c0016c05:	89 c1                	mov    ecx,eax
c0016c07:	19 e9                	sbb    ecx,ebp
c0016c09:	0f 83 39 ff ff ff    	jae    c0016b48 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016c0f:	be 00 00 08 00       	mov    esi,0x80000
c0016c14:	83 ec 04             	sub    esp,0x4
c0016c17:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016c1b:	57                   	push   edi
c0016c1c:	56                   	push   esi
c0016c1d:	68 dc 14 03 c0       	push   0xc00314dc
c0016c22:	e8 aa 28 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0016c27:	5d                   	pop    ebp
c0016c28:	58                   	pop    eax
c0016c29:	57                   	push   edi
c0016c2a:	56                   	push   esi
c0016c2b:	e8 52 fe ff ff       	call   c0016a82 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0016c30:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016c34:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c38:	83 c4 0c             	add    esp,0xc
c0016c3b:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016c3f:	8b 15 ec a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9ec
c0016c45:	01 d0                	add    eax,edx
c0016c47:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0016c4e:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016c53:	52                   	push   edx
c0016c54:	50                   	push   eax
c0016c55:	68 41 15 03 c0       	push   0xc0031541
c0016c5a:	e8 72 28 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0016c5f:	83 c4 10             	add    esp,0x10
c0016c62:	e9 e1 fe ff ff       	jmp    c0016b48 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016c67:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0016c6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016c6f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c73:	39 ea                	cmp    edx,ebp
c0016c75:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0016c79:	0f 82 c9 fe ff ff    	jb     c0016b48 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016c7f:	ba ff 1f 00 00       	mov    edx,0x1fff
c0016c84:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0016c88:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0016c8c:	0f 83 b6 fe ff ff    	jae    c0016b48 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016c92:	39 ee                	cmp    esi,ebp
c0016c94:	89 f8                	mov    eax,edi
c0016c96:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0016c9a:	0f 83 74 ff ff ff    	jae    c0016c14 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0016ca0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ca4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016ca8:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016cac:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0016cb0:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0016cb4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016cb8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016cbc:	e9 53 ff ff ff       	jmp    c0016c14 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0016cc1:	83 ec 0c             	sub    esp,0xc
c0016cc4:	68 33 15 03 c0       	push   0xc0031533
c0016cc9:	e8 1c 98 00 00       	call   c00204ea <KePanic(char const*)>
c0016cce:	83 c4 10             	add    esp,0x10
c0016cd1:	83 ec 08             	sub    esp,0x8
c0016cd4:	bb 60 00 00 00       	mov    ebx,0x60
c0016cd9:	6a 00                	push   0x0
c0016cdb:	6a 06                	push   0x6
c0016cdd:	e8 a5 fb ff ff       	call   c0016887 <Phys::setPageState(unsigned long, bool)>
c0016ce2:	58                   	pop    eax
c0016ce3:	5a                   	pop    edx
c0016ce4:	6a 00                	push   0x0
c0016ce6:	6a 07                	push   0x7
c0016ce8:	e8 9a fb ff ff       	call   c0016887 <Phys::setPageState(unsigned long, bool)>
c0016ced:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c0016cf3:	83 c4 10             	add    esp,0x10
c0016cf6:	83 c1 02             	add    ecx,0x2
c0016cf9:	89 0d ec a9 03 c0    	mov    DWORD PTR ds:0xc003a9ec,ecx
c0016cff:	83 ec 08             	sub    esp,0x8
c0016d02:	6a 00                	push   0x0
c0016d04:	53                   	push   ebx
c0016d05:	83 c3 01             	add    ebx,0x1
c0016d08:	e8 7a fb ff ff       	call   c0016887 <Phys::setPageState(unsigned long, bool)>
c0016d0d:	83 c4 10             	add    esp,0x10
c0016d10:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0016d16:	75 e7                	jne    c0016cff <Phys::physicalMemorySetup(unsigned int)+0x245>
c0016d18:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016d1d:	bb 40 01 00 00       	mov    ebx,0x140
c0016d22:	83 c0 20             	add    eax,0x20
c0016d25:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016d2a:	eb 26                	jmp    c0016d52 <Phys::physicalMemorySetup(unsigned int)+0x298>
c0016d2c:	83 ec 08             	sub    esp,0x8
c0016d2f:	6a 00                	push   0x0
c0016d31:	53                   	push   ebx
c0016d32:	83 c3 01             	add    ebx,0x1
c0016d35:	e8 4d fb ff ff       	call   c0016887 <Phys::setPageState(unsigned long, bool)>
c0016d3a:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016d3f:	83 c4 10             	add    esp,0x10
c0016d42:	83 c0 01             	add    eax,0x1
c0016d45:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0016d4b:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016d50:	74 07                	je     c0016d59 <Phys::physicalMemorySetup(unsigned int)+0x29f>
c0016d52:	3d ff 03 00 00       	cmp    eax,0x3ff
c0016d57:	7e d3                	jle    c0016d2c <Phys::physicalMemorySetup(unsigned int)+0x272>
c0016d59:	bb d0 01 00 00       	mov    ebx,0x1d0
c0016d5e:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016d63:	7f 26                	jg     c0016d8b <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c0016d65:	83 ec 08             	sub    esp,0x8
c0016d68:	6a 00                	push   0x0
c0016d6a:	53                   	push   ebx
c0016d6b:	83 c3 01             	add    ebx,0x1
c0016d6e:	e8 14 fb ff ff       	call   c0016887 <Phys::setPageState(unsigned long, bool)>
c0016d73:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016d78:	83 c4 10             	add    esp,0x10
c0016d7b:	83 c0 01             	add    eax,0x1
c0016d7e:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0016d84:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016d89:	75 d3                	jne    c0016d5e <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c0016d8b:	83 c4 3c             	add    esp,0x3c
c0016d8e:	5b                   	pop    ebx
c0016d8f:	5e                   	pop    esi
c0016d90:	5f                   	pop    edi
c0016d91:	5d                   	pop    ebp
c0016d92:	c3                   	ret    
c0016d93:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0016d9b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016da3:	e9 3b fe ff ff       	jmp    c0016be3 <Phys::physicalMemorySetup(unsigned int)+0x129>

c0016da8 <Pipe::isAtty()>:
c0016da8:	31 c0                	xor    eax,eax
c0016daa:	c3                   	ret    
c0016dab:	90                   	nop

c0016dac <Pipe::~Pipe()>:
c0016dac:	83 ec 0c             	sub    esp,0xc
c0016daf:	ba a0 15 03 c0       	mov    edx,0xc00315a0
c0016db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016db8:	89 10                	mov    DWORD PTR [eax],edx
c0016dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dbe:	83 ec 0c             	sub    esp,0xc
c0016dc1:	50                   	push   eax
c0016dc2:	e8 69 11 00 00       	call   c0017f30 <UnixFile::~UnixFile()>
c0016dc7:	83 c4 10             	add    esp,0x10
c0016dca:	90                   	nop
c0016dcb:	83 c4 0c             	add    esp,0xc
c0016dce:	c3                   	ret    
c0016dcf:	90                   	nop

c0016dd0 <Pipe::~Pipe()>:
c0016dd0:	83 ec 0c             	sub    esp,0xc
c0016dd3:	83 ec 0c             	sub    esp,0xc
c0016dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dda:	e8 cd ff ff ff       	call   c0016dac <Pipe::~Pipe()>
c0016ddf:	83 c4 10             	add    esp,0x10
c0016de2:	83 ec 08             	sub    esp,0x8
c0016de5:	6a 20                	push   0x20
c0016de7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016deb:	e8 b4 25 00 00       	call   c00193a4 <operator delete(void*, unsigned long)>
c0016df0:	83 c4 10             	add    esp,0x10
c0016df3:	83 c4 0c             	add    esp,0xc
c0016df6:	c3                   	ret    
c0016df7:	90                   	nop

c0016df8 <Pipe::write(unsigned long long, void*, int*)>:
c0016df8:	55                   	push   ebp
c0016df9:	57                   	push   edi
c0016dfa:	56                   	push   esi
c0016dfb:	53                   	push   ebx
c0016dfc:	83 ec 1c             	sub    esp,0x1c
c0016dff:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016e03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e07:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0016e0a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016e0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e11:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016e15:	89 d8                	mov    eax,ebx
c0016e17:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016e1a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016e1e:	89 d6                	mov    esi,edx
c0016e20:	89 d7                	mov    edi,edx
c0016e22:	c1 ff 1f             	sar    edi,0x1f
c0016e25:	03 34 24             	add    esi,DWORD PTR [esp]
c0016e28:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0016e2c:	c1 f8 1f             	sar    eax,0x1f
c0016e2f:	39 f3                	cmp    ebx,esi
c0016e31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e39:	19 f8                	sbb    eax,edi
c0016e3b:	b8 01 00 00 00       	mov    eax,0x1
c0016e40:	72 6e                	jb     c0016eb0 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0016e42:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016e45:	01 d0                	add    eax,edx
c0016e47:	99                   	cdq    
c0016e48:	f7 fb                	idiv   ebx
c0016e4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e4e:	29 d3                	sub    ebx,edx
c0016e50:	89 d7                	mov    edi,edx
c0016e52:	89 de                	mov    esi,ebx
c0016e54:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016e57:	c1 fb 1f             	sar    ebx,0x1f
c0016e5a:	39 f2                	cmp    edx,esi
c0016e5c:	19 d8                	sbb    eax,ebx
c0016e5e:	b8 00 00 00 00       	mov    eax,0x0
c0016e63:	72 04                	jb     c0016e69 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0016e65:	89 d0                	mov    eax,edx
c0016e67:	29 f0                	sub    eax,esi
c0016e69:	89 d3                	mov    ebx,edx
c0016e6b:	29 c3                	sub    ebx,eax
c0016e6d:	74 0b                	je     c0016e7a <Pipe::write(unsigned long long, void*, int*)+0x82>
c0016e6f:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0016e72:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016e76:	89 d9                	mov    ecx,ebx
c0016e78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e7a:	85 c0                	test   eax,eax
c0016e7c:	74 0d                	je     c0016e8b <Pipe::write(unsigned long long, void*, int*)+0x93>
c0016e7e:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016e82:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016e85:	89 de                	mov    esi,ebx
c0016e87:	89 c1                	mov    ecx,eax
c0016e89:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e8b:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0016e8e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016e93:	75 10                	jne    c0016ea5 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0016e95:	83 ec 0c             	sub    esp,0xc
c0016e98:	68 5d 15 03 c0       	push   0xc003155d
c0016e9d:	e8 48 96 00 00       	call   c00204ea <KePanic(char const*)>
c0016ea2:	83 c4 10             	add    esp,0x10
c0016ea5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016ea9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016eac:	89 08                	mov    DWORD PTR [eax],ecx
c0016eae:	31 c0                	xor    eax,eax
c0016eb0:	83 c4 1c             	add    esp,0x1c
c0016eb3:	5b                   	pop    ebx
c0016eb4:	5e                   	pop    esi
c0016eb5:	5f                   	pop    edi
c0016eb6:	5d                   	pop    ebp
c0016eb7:	c3                   	ret    

c0016eb8 <Pipe::read(unsigned long long, void*, int*)>:
c0016eb8:	55                   	push   ebp
c0016eb9:	57                   	push   edi
c0016eba:	56                   	push   esi
c0016ebb:	53                   	push   ebx
c0016ebc:	83 ec 1c             	sub    esp,0x1c
c0016ebf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016ec3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016ec7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0016ecb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0016ece:	89 c8                	mov    eax,ecx
c0016ed0:	99                   	cdq    
c0016ed1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0016ed5:	74 24                	je     c0016efb <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016ed7:	39 f9                	cmp    ecx,edi
c0016ed9:	89 d1                	mov    ecx,edx
c0016edb:	19 f1                	sbb    ecx,esi
c0016edd:	73 1c                	jae    c0016efb <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016edf:	fa                   	cli    
c0016ee0:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0016ee6:	e8 15 e6 00 00       	call   c0025500 <schedule()>
c0016eeb:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016ef0:	48                   	dec    eax
c0016ef1:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016ef6:	75 d3                	jne    c0016ecb <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016ef8:	fb                   	sti    
c0016ef9:	eb d0                	jmp    c0016ecb <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016efb:	39 f8                	cmp    eax,edi
c0016efd:	89 d1                	mov    ecx,edx
c0016eff:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016f02:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016f06:	19 f1                	sbb    ecx,esi
c0016f08:	73 07                	jae    c0016f11 <Pipe::read(unsigned long long, void*, int*)+0x59>
c0016f0a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016f11:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0016f14:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0016f17:	29 f7                	sub    edi,esi
c0016f19:	89 f8                	mov    eax,edi
c0016f1b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016f1f:	99                   	cdq    
c0016f20:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0016f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f27:	19 d0                	sbb    eax,edx
c0016f29:	73 07                	jae    c0016f32 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0016f2b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016f2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f32:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0016f35:	89 ea                	mov    edx,ebp
c0016f37:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0016f3b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016f40:	74 0d                	je     c0016f4f <Pipe::read(unsigned long long, void*, int*)+0x97>
c0016f42:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0016f45:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0016f49:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f4f:	85 d2                	test   edx,edx
c0016f51:	74 11                	je     c0016f64 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0016f53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f57:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0016f5a:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016f5e:	89 d1                	mov    ecx,edx
c0016f60:	89 c7                	mov    edi,eax
c0016f62:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f64:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f67:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0016f6a:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0016f6d:	99                   	cdq    
c0016f6e:	89 f7                	mov    edi,esi
c0016f70:	03 04 24             	add    eax,DWORD PTR [esp]
c0016f73:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0016f77:	c1 ff 1f             	sar    edi,0x1f
c0016f7a:	57                   	push   edi
c0016f7b:	56                   	push   esi
c0016f7c:	52                   	push   edx
c0016f7d:	50                   	push   eax
c0016f7e:	e8 7d 7a 01 00       	call   c002ea00 <__umoddi3>
c0016f83:	83 c4 10             	add    esp,0x10
c0016f86:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016f89:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016f8e:	75 10                	jne    c0016fa0 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0016f90:	83 ec 0c             	sub    esp,0xc
c0016f93:	68 7a 15 03 c0       	push   0xc003157a
c0016f98:	e8 4d 95 00 00       	call   c00204ea <KePanic(char const*)>
c0016f9d:	83 c4 10             	add    esp,0x10
c0016fa0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016fa4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016fa7:	89 10                	mov    DWORD PTR [eax],edx
c0016fa9:	83 c4 1c             	add    esp,0x1c
c0016fac:	31 c0                	xor    eax,eax
c0016fae:	5b                   	pop    ebx
c0016faf:	5e                   	pop    esi
c0016fb0:	5f                   	pop    edi
c0016fb1:	5d                   	pop    ebp
c0016fb2:	c3                   	ret    
c0016fb3:	90                   	nop

c0016fb4 <Pipe::Pipe(int)>:
c0016fb4:	83 ec 0c             	sub    esp,0xc
c0016fb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fbb:	83 ec 08             	sub    esp,0x8
c0016fbe:	6a 00                	push   0x0
c0016fc0:	50                   	push   eax
c0016fc1:	e8 84 0d 00 00       	call   c0017d4a <UnixFile::UnixFile(int)>
c0016fc6:	83 c4 10             	add    esp,0x10
c0016fc9:	ba a0 15 03 c0       	mov    edx,0xc00315a0
c0016fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fd2:	89 10                	mov    DWORD PTR [eax],edx
c0016fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fd8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016fdc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016fdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fe3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0016fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fee:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0016ff5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ff9:	83 ec 0c             	sub    esp,0xc
c0016ffc:	50                   	push   eax
c0016ffd:	e8 41 f6 ff ff       	call   c0016643 <malloc>
c0017002:	83 c4 10             	add    esp,0x10
c0017005:	89 c2                	mov    edx,eax
c0017007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001700b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001700e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017012:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0017016:	90                   	nop
c0017017:	83 c4 0c             	add    esp,0xc
c001701a:	c3                   	ret    
c001701b:	90                   	nop

c001701c <VgaText::isAtty()>:
c001701c:	b0 01                	mov    al,0x1
c001701e:	c3                   	ret    
c001701f:	90                   	nop

c0017020 <VgaText::~VgaText()>:
c0017020:	83 ec 0c             	sub    esp,0xc
c0017023:	ba e8 15 03 c0       	mov    edx,0xc00315e8
c0017028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001702c:	89 10                	mov    DWORD PTR [eax],edx
c001702e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017032:	83 ec 0c             	sub    esp,0xc
c0017035:	50                   	push   eax
c0017036:	e8 f5 0e 00 00       	call   c0017f30 <UnixFile::~UnixFile()>
c001703b:	83 c4 10             	add    esp,0x10
c001703e:	90                   	nop
c001703f:	83 c4 0c             	add    esp,0xc
c0017042:	c3                   	ret    
c0017043:	90                   	nop

c0017044 <VgaText::~VgaText()>:
c0017044:	83 ec 0c             	sub    esp,0xc
c0017047:	83 ec 0c             	sub    esp,0xc
c001704a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001704e:	e8 cd ff ff ff       	call   c0017020 <VgaText::~VgaText()>
c0017053:	83 c4 10             	add    esp,0x10
c0017056:	83 ec 08             	sub    esp,0x8
c0017059:	68 84 01 00 00       	push   0x184
c001705e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017062:	e8 3d 23 00 00       	call   c00193a4 <operator delete(void*, unsigned long)>
c0017067:	83 c4 10             	add    esp,0x10
c001706a:	83 c4 0c             	add    esp,0xc
c001706d:	c3                   	ret    

c001706e <VgaText::read(unsigned long long, void*, int*)>:
c001706e:	83 ec 10             	sub    esp,0x10
c0017071:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017075:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001707d:	e8 ba 53 00 00       	call   c001c43c <readKeyboard(VgaText*, char*, unsigned long)>
c0017082:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017086:	89 02                	mov    DWORD PTR [edx],eax
c0017088:	31 c0                	xor    eax,eax
c001708a:	83 c4 1c             	add    esp,0x1c
c001708d:	c3                   	ret    

c001708e <setTerminalScrollLock(bool)>:
c001708e:	c3                   	ret    

c001708f <doTerminalCycle()>:
c001708f:	c3                   	ret    

c0017090 <addToTerminalCycle(VgaText*)>:
c0017090:	c3                   	ret    

c0017091 <scrollTerminalScrollLock(int)>:
c0017091:	c3                   	ret    

c0017092 <VgaText::updateTitle()>:
c0017092:	c3                   	ret    
c0017093:	90                   	nop

c0017094 <VgaText::load()>:
c0017094:	c3                   	ret    
c0017095:	90                   	nop

c0017096 <VgaText::updateCursor()>:
c0017096:	83 ec 14             	sub    esp,0x14
c0017099:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001709d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00170a0:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00170a3:	e8 64 0f 01 00       	call   c002800c <HalConsoleCursorUpdate(int, int)>
c00170a8:	83 c4 1c             	add    esp,0x1c
c00170ab:	c3                   	ret    

c00170ac <VgaText::doANSI_SGR(int)>:
c00170ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00170b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170b4:	85 d2                	test   edx,edx
c00170b6:	75 0b                	jne    c00170c3 <VgaText::doANSI_SGR(int)+0x17>
c00170b8:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00170bb:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00170be:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00170c1:	eb 59                	jmp    c001711c <VgaText::doANSI_SGR(int)+0x70>
c00170c3:	83 fa 07             	cmp    edx,0x7
c00170c6:	75 0b                	jne    c00170d3 <VgaText::doANSI_SGR(int)+0x27>
c00170c8:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00170cb:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00170ce:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00170d1:	eb 49                	jmp    c001711c <VgaText::doANSI_SGR(int)+0x70>
c00170d3:	83 fa 1b             	cmp    edx,0x1b
c00170d6:	74 e0                	je     c00170b8 <VgaText::doANSI_SGR(int)+0xc>
c00170d8:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00170db:	83 f9 07             	cmp    ecx,0x7
c00170de:	77 09                	ja     c00170e9 <VgaText::doANSI_SGR(int)+0x3d>
c00170e0:	8b 14 8d e0 3e 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc120]
c00170e7:	eb 20                	jmp    c0017109 <VgaText::doANSI_SGR(int)+0x5d>
c00170e9:	8d 4a d8             	lea    ecx,[edx-0x28]
c00170ec:	83 f9 07             	cmp    ecx,0x7
c00170ef:	77 09                	ja     c00170fa <VgaText::doANSI_SGR(int)+0x4e>
c00170f1:	8b 14 8d e0 3e 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc120]
c00170f8:	eb 22                	jmp    c001711c <VgaText::doANSI_SGR(int)+0x70>
c00170fa:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00170fd:	83 f9 07             	cmp    ecx,0x7
c0017100:	77 0b                	ja     c001710d <VgaText::doANSI_SGR(int)+0x61>
c0017102:	8b 14 95 98 3d 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc268]
c0017109:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001710c:	c3                   	ret    
c001710d:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0017110:	83 f9 07             	cmp    ecx,0x7
c0017113:	77 0a                	ja     c001711f <VgaText::doANSI_SGR(int)+0x73>
c0017115:	8b 14 95 70 3d 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc290]
c001711c:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001711f:	c3                   	ret    

c0017120 <VgaText::setDefaultBgColour(VgaColour)>:
c0017120:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017124:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017128:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001712b:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001712e:	c3                   	ret    
c001712f:	90                   	nop

c0017130 <VgaText::setDefaultFgColour(VgaColour)>:
c0017130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017134:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017138:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001713b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001713e:	c3                   	ret    
c001713f:	90                   	nop

c0017140 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0017140:	53                   	push   ebx
c0017141:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017145:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0017149:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001714d:	51                   	push   ecx
c001714e:	e8 cd ff ff ff       	call   c0017120 <VgaText::setDefaultBgColour(VgaColour)>
c0017153:	58                   	pop    eax
c0017154:	5a                   	pop    edx
c0017155:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017159:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001715d:	5b                   	pop    ebx
c001715e:	eb d0                	jmp    c0017130 <VgaText::setDefaultFgColour(VgaColour)>

c0017160 <VgaText::setTitleTextColour(VgaColour)>:
c0017160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017164:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017168:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c001716b:	c3                   	ret    

c001716c <VgaText::setTitleColour(VgaColour)>:
c001716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017170:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017174:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017177:	c3                   	ret    

c0017178 <VgaText::setTitle(char*)>:
c0017178:	c3                   	ret    
c0017179:	90                   	nop

c001717a <VgaText::combineColours(unsigned char, unsigned char)>:
c001717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001717e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0017183:	83 e0 0f             	and    eax,0xf
c0017186:	c1 e2 04             	shl    edx,0x4
c0017189:	09 d0                	or     eax,edx
c001718b:	c3                   	ret    

c001718c <VgaText::scrollScreen()>:
c001718c:	55                   	push   ebp
c001718d:	57                   	push   edi
c001718e:	56                   	push   esi
c001718f:	be 01 00 00 00       	mov    esi,0x1
c0017194:	53                   	push   ebx
c0017195:	83 ec 0c             	sub    esp,0xc
c0017198:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001719c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c001719f:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00171a5:	31 ff                	xor    edi,edi
c00171a7:	01 e9                	add    ecx,ebp
c00171a9:	8a 01                	mov    al,BYTE PTR [ecx]
c00171ab:	83 fe 18             	cmp    esi,0x18
c00171ae:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c00171b4:	75 20                	jne    c00171d6 <VgaText::scrollScreen()+0x4a>
c00171b6:	f7 c7 01 00 00 00    	test   edi,0x1
c00171bc:	74 15                	je     c00171d3 <VgaText::scrollScreen()+0x47>
c00171be:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00171c2:	50                   	push   eax
c00171c3:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00171c7:	50                   	push   eax
c00171c8:	e8 ad ff ff ff       	call   c001717a <VgaText::combineColours(unsigned char, unsigned char)>
c00171cd:	5a                   	pop    edx
c00171ce:	5a                   	pop    edx
c00171cf:	88 01                	mov    BYTE PTR [ecx],al
c00171d1:	eb 03                	jmp    c00171d6 <VgaText::scrollScreen()+0x4a>
c00171d3:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c00171d6:	47                   	inc    edi
c00171d7:	41                   	inc    ecx
c00171d8:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00171de:	75 c9                	jne    c00171a9 <VgaText::scrollScreen()+0x1d>
c00171e0:	46                   	inc    esi
c00171e1:	83 fe 19             	cmp    esi,0x19
c00171e4:	75 b9                	jne    c001719f <VgaText::scrollScreen()+0x13>
c00171e6:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c00171ec:	75 1f                	jne    c001720d <VgaText::scrollScreen()+0x81>
c00171ee:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00171f2:	74 05                	je     c00171f9 <VgaText::scrollScreen()+0x6d>
c00171f4:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00171f7:	eb 14                	jmp    c001720d <VgaText::scrollScreen()+0x81>
c00171f9:	50                   	push   eax
c00171fa:	50                   	push   eax
c00171fb:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00171ff:	50                   	push   eax
c0017200:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0017204:	50                   	push   eax
c0017205:	e8 96 0c 01 00       	call   c0027ea0 <HalConsoleScroll(int, int)>
c001720a:	83 c4 10             	add    esp,0x10
c001720d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0017211:	83 c4 0c             	add    esp,0xc
c0017214:	5b                   	pop    ebx
c0017215:	5e                   	pop    esi
c0017216:	5f                   	pop    edi
c0017217:	5d                   	pop    ebp
c0017218:	e9 79 fe ff ff       	jmp    c0017096 <VgaText::updateCursor()>
c001721d:	90                   	nop

c001721e <VgaText::combineCharAndColour(char, unsigned char)>:
c001721e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017223:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0017228:	c1 e0 08             	shl    eax,0x8
c001722b:	09 d0                	or     eax,edx
c001722d:	c3                   	ret    

c001722e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001722e:	55                   	push   ebp
c001722f:	57                   	push   edi
c0017230:	56                   	push   esi
c0017231:	53                   	push   ebx
c0017232:	83 ec 1c             	sub    esp,0x1c
c0017235:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017239:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001723d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017241:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017245:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017249:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001724d:	0f b6 c3             	movzx  eax,bl
c0017250:	50                   	push   eax
c0017251:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0017256:	50                   	push   eax
c0017257:	e8 1e ff ff ff       	call   c001717a <VgaText::combineColours(unsigned char, unsigned char)>
c001725c:	5a                   	pop    edx
c001725d:	0f b6 c0             	movzx  eax,al
c0017260:	59                   	pop    ecx
c0017261:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0017266:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001726a:	50                   	push   eax
c001726b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001726f:	e8 aa ff ff ff       	call   c001721e <VgaText::combineCharAndColour(char, unsigned char)>
c0017274:	5a                   	pop    edx
c0017275:	6b d7 50             	imul   edx,edi,0x50
c0017278:	59                   	pop    ecx
c0017279:	01 f2                	add    edx,esi
c001727b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001727e:	0f b7 d2             	movzx  edx,dx
c0017281:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0017285:	39 2d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebp
c001728b:	75 28                	jne    c00172b5 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c001728d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017291:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0017295:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0017299:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c001729d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00172a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172a5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00172a9:	83 c4 1c             	add    esp,0x1c
c00172ac:	5b                   	pop    ebx
c00172ad:	5e                   	pop    esi
c00172ae:	5f                   	pop    edi
c00172af:	5d                   	pop    ebp
c00172b0:	e9 f3 0c 01 00       	jmp    c0027fa8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00172b5:	83 c4 1c             	add    esp,0x1c
c00172b8:	5b                   	pop    ebx
c00172b9:	5e                   	pop    esi
c00172ba:	5f                   	pop    edi
c00172bb:	5d                   	pop    ebp
c00172bc:	c3                   	ret    
c00172bd:	90                   	nop

c00172be <VgaText::getCursorX()>:
c00172be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00172c2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00172c5:	c3                   	ret    

c00172c6 <VgaText::getCursorY()>:
c00172c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00172ca:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00172cd:	c3                   	ret    

c00172ce <VgaText::setCursor(int, int)>:
c00172ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00172d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00172d6:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00172d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00172dd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00172e0:	e9 b1 fd ff ff       	jmp    c0017096 <VgaText::updateCursor()>

c00172e5 <setActiveTerminal(VgaText*)>:
c00172e5:	53                   	push   ebx
c00172e6:	83 ec 08             	sub    esp,0x8
c00172e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00172ed:	85 db                	test   ebx,ebx
c00172ef:	75 11                	jne    c0017302 <setActiveTerminal(VgaText*)+0x1d>
c00172f1:	c7 44 24 10 b4 15 03 c0 	mov    DWORD PTR [esp+0x10],0xc00315b4
c00172f9:	83 c4 08             	add    esp,0x8
c00172fc:	5b                   	pop    ebx
c00172fd:	e9 e8 91 00 00       	jmp    c00204ea <KePanic(char const*)>
c0017302:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c0017307:	85 c0                	test   eax,eax
c0017309:	74 0c                	je     c0017317 <setActiveTerminal(VgaText*)+0x32>
c001730b:	83 ec 0c             	sub    esp,0xc
c001730e:	50                   	push   eax
c001730f:	e8 82 fd ff ff       	call   c0017096 <VgaText::updateCursor()>
c0017314:	83 c4 10             	add    esp,0x10
c0017317:	89 1d 08 aa 03 c0    	mov    DWORD PTR ds:0xc003aa08,ebx
c001731d:	50                   	push   eax
c001731e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017321:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017324:	53                   	push   ebx
c0017325:	e8 a4 ff ff ff       	call   c00172ce <VgaText::setCursor(int, int)>
c001732a:	83 c4 18             	add    esp,0x18
c001732d:	5b                   	pop    ebx
c001732e:	c3                   	ret    
c001732f:	90                   	nop

c0017330 <VgaText::clearScreen()>:
c0017330:	57                   	push   edi
c0017331:	56                   	push   esi
c0017332:	31 f6                	xor    esi,esi
c0017334:	53                   	push   ebx
c0017335:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017339:	52                   	push   edx
c001733a:	6a 00                	push   0x0
c001733c:	6a 00                	push   0x0
c001733e:	53                   	push   ebx
c001733f:	e8 8a ff ff ff       	call   c00172ce <VgaText::setCursor(int, int)>
c0017344:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001734b:	83 c4 10             	add    esp,0x10
c001734e:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0017351:	7e 20                	jle    c0017373 <VgaText::clearScreen()+0x43>
c0017353:	31 ff                	xor    edi,edi
c0017355:	50                   	push   eax
c0017356:	50                   	push   eax
c0017357:	56                   	push   esi
c0017358:	57                   	push   edi
c0017359:	47                   	inc    edi
c001735a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001735d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017360:	6a 20                	push   0x20
c0017362:	53                   	push   ebx
c0017363:	e8 c6 fe ff ff       	call   c001722e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017368:	83 c4 20             	add    esp,0x20
c001736b:	83 ff 50             	cmp    edi,0x50
c001736e:	75 e5                	jne    c0017355 <VgaText::clearScreen()+0x25>
c0017370:	46                   	inc    esi
c0017371:	eb db                	jmp    c001734e <VgaText::clearScreen()+0x1e>
c0017373:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001737a:	5b                   	pop    ebx
c001737b:	5e                   	pop    esi
c001737c:	5f                   	pop    edi
c001737d:	c3                   	ret    

c001737e <VgaText::setCursorX(int)>:
c001737e:	83 ec 10             	sub    esp,0x10
c0017381:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017385:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0017388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001738c:	50                   	push   eax
c001738d:	e8 3c ff ff ff       	call   c00172ce <VgaText::setCursor(int, int)>
c0017392:	83 c4 1c             	add    esp,0x1c
c0017395:	c3                   	ret    

c0017396 <VgaText::setCursorY(int)>:
c0017396:	83 ec 10             	sub    esp,0x10
c0017399:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001739d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173a1:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00173a4:	50                   	push   eax
c00173a5:	e8 24 ff ff ff       	call   c00172ce <VgaText::setCursor(int, int)>
c00173aa:	83 c4 1c             	add    esp,0x1c
c00173ad:	c3                   	ret    

c00173ae <VgaText::incrementCursor(bool)>:
c00173ae:	56                   	push   esi
c00173af:	53                   	push   ebx
c00173b0:	51                   	push   ecx
c00173b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00173b5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00173b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00173bc:	40                   	inc    eax
c00173bd:	83 f8 50             	cmp    eax,0x50
c00173c0:	74 05                	je     c00173c7 <VgaText::incrementCursor(bool)+0x19>
c00173c2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00173c5:	eb 24                	jmp    c00173eb <VgaText::incrementCursor(bool)+0x3d>
c00173c7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00173ca:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00173d1:	8d 50 01             	lea    edx,[eax+0x1]
c00173d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00173d7:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00173da:	75 0f                	jne    c00173eb <VgaText::incrementCursor(bool)+0x3d>
c00173dc:	83 ec 0c             	sub    esp,0xc
c00173df:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00173e2:	53                   	push   ebx
c00173e3:	e8 a4 fd ff ff       	call   c001718c <VgaText::scrollScreen()>
c00173e8:	83 c4 10             	add    esp,0x10
c00173eb:	89 f0                	mov    eax,esi
c00173ed:	84 c0                	test   al,al
c00173ef:	74 0c                	je     c00173fd <VgaText::incrementCursor(bool)+0x4f>
c00173f1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00173f5:	5a                   	pop    edx
c00173f6:	5b                   	pop    ebx
c00173f7:	5e                   	pop    esi
c00173f8:	e9 99 fc ff ff       	jmp    c0017096 <VgaText::updateCursor()>
c00173fd:	58                   	pop    eax
c00173fe:	5b                   	pop    ebx
c00173ff:	5e                   	pop    esi
c0017400:	c3                   	ret    
c0017401:	90                   	nop

c0017402 <VgaText::decrementCursor(bool)>:
c0017402:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017406:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001740a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001740d:	85 c0                	test   eax,eax
c001740f:	74 04                	je     c0017415 <VgaText::decrementCursor(bool)+0x13>
c0017411:	48                   	dec    eax
c0017412:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0017415:	84 c9                	test   cl,cl
c0017417:	74 09                	je     c0017422 <VgaText::decrementCursor(bool)+0x20>
c0017419:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001741d:	e9 74 fc ff ff       	jmp    c0017096 <VgaText::updateCursor()>
c0017422:	c3                   	ret    
c0017423:	90                   	nop

c0017424 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0017424:	53                   	push   ebx
c0017425:	83 ec 08             	sub    esp,0x8
c0017428:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c001742d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017431:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017435:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017439:	83 f8 07             	cmp    eax,0x7
c001743c:	75 21                	jne    c001745f <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c001743e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017446:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c001744e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0017456:	83 c4 08             	add    esp,0x8
c0017459:	5b                   	pop    ebx
c001745a:	e9 18 3b 00 00       	jmp    c001af77 <Krnl::beep(int, int, bool)>
c001745f:	83 f8 0d             	cmp    eax,0xd
c0017462:	75 09                	jne    c001746d <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0017464:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001746b:	eb 2d                	jmp    c001749a <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c001746d:	83 f8 0a             	cmp    eax,0xa
c0017470:	75 31                	jne    c00174a3 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0017472:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017475:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001747c:	8d 50 01             	lea    edx,[eax+0x1]
c001747f:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0017482:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0017485:	75 0f                	jne    c0017496 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0017487:	83 ec 0c             	sub    esp,0xc
c001748a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001748d:	53                   	push   ebx
c001748e:	e8 f9 fc ff ff       	call   c001718c <VgaText::scrollScreen()>
c0017493:	83 c4 10             	add    esp,0x10
c0017496:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001749a:	83 c4 08             	add    esp,0x8
c001749d:	5b                   	pop    ebx
c001749e:	e9 f3 fb ff ff       	jmp    c0017096 <VgaText::updateCursor()>
c00174a3:	83 f8 08             	cmp    eax,0x8
c00174a6:	75 25                	jne    c00174cd <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c00174a8:	50                   	push   eax
c00174a9:	50                   	push   eax
c00174aa:	6a 01                	push   0x1
c00174ac:	53                   	push   ebx
c00174ad:	e8 50 ff ff ff       	call   c0017402 <VgaText::decrementCursor(bool)>
c00174b2:	5a                   	pop    edx
c00174b3:	59                   	pop    ecx
c00174b4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00174b7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00174ba:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00174bd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00174c0:	6a 20                	push   0x20
c00174c2:	53                   	push   ebx
c00174c3:	e8 66 fd ff ff       	call   c001722e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00174c8:	83 c4 28             	add    esp,0x28
c00174cb:	5b                   	pop    ebx
c00174cc:	c3                   	ret    
c00174cd:	83 ec 08             	sub    esp,0x8
c00174d0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00174d3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00174d6:	51                   	push   ecx
c00174d7:	52                   	push   edx
c00174d8:	50                   	push   eax
c00174d9:	53                   	push   ebx
c00174da:	e8 4f fd ff ff       	call   c001722e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00174df:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00174e3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00174eb:	83 c4 28             	add    esp,0x28
c00174ee:	5b                   	pop    ebx
c00174ef:	e9 ba fe ff ff       	jmp    c00173ae <VgaText::incrementCursor(bool)>

c00174f4 <VgaText::putchar(char)>:
c00174f4:	57                   	push   edi
c00174f5:	56                   	push   esi
c00174f6:	53                   	push   ebx
c00174f7:	83 ec 10             	sub    esp,0x10
c00174fa:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00174fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017502:	89 f8                	mov    eax,edi
c0017504:	0f be c0             	movsx  eax,al
c0017507:	83 f8 5b             	cmp    eax,0x5b
c001750a:	75 18                	jne    c0017524 <VgaText::putchar(char)+0x30>
c001750c:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0017510:	74 20                	je     c0017532 <VgaText::putchar(char)+0x3e>
c0017512:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0017518:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c001751f:	e9 c1 00 00 00       	jmp    c00175e5 <VgaText::putchar(char)+0xf1>
c0017524:	83 f8 1b             	cmp    eax,0x1b
c0017527:	75 09                	jne    c0017532 <VgaText::putchar(char)+0x3e>
c0017529:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001752d:	e9 b3 00 00 00       	jmp    c00175e5 <VgaText::putchar(char)+0xf1>
c0017532:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0017535:	84 c9                	test   cl,cl
c0017537:	0f 84 98 00 00 00    	je     c00175d5 <VgaText::putchar(char)+0xe1>
c001753d:	8d 77 c0             	lea    esi,[edi-0x40]
c0017540:	89 f2                	mov    edx,esi
c0017542:	80 fa 3e             	cmp    dl,0x3e
c0017545:	77 78                	ja     c00175bf <VgaText::putchar(char)+0xcb>
c0017547:	83 f8 6d             	cmp    eax,0x6d
c001754a:	75 47                	jne    c0017593 <VgaText::putchar(char)+0x9f>
c001754c:	31 f6                	xor    esi,esi
c001754e:	31 d2                	xor    edx,edx
c0017550:	31 c0                	xor    eax,eax
c0017552:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0017555:	7e 2d                	jle    c0017584 <VgaText::putchar(char)+0x90>
c0017557:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001755c:	83 fa 3b             	cmp    edx,0x3b
c001755f:	75 17                	jne    c0017578 <VgaText::putchar(char)+0x84>
c0017561:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0017565:	50                   	push   eax
c0017566:	53                   	push   ebx
c0017567:	e8 40 fb ff ff       	call   c00170ac <VgaText::doANSI_SGR(int)>
c001756c:	59                   	pop    ecx
c001756d:	31 d2                	xor    edx,edx
c001756f:	5f                   	pop    edi
c0017570:	31 c0                	xor    eax,eax
c0017572:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0017576:	eb 09                	jmp    c0017581 <VgaText::putchar(char)+0x8d>
c0017578:	6b c0 0a             	imul   eax,eax,0xa
c001757b:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001757f:	88 ca                	mov    dl,cl
c0017581:	46                   	inc    esi
c0017582:	eb ce                	jmp    c0017552 <VgaText::putchar(char)+0x5e>
c0017584:	84 d2                	test   dl,dl
c0017586:	74 2f                	je     c00175b7 <VgaText::putchar(char)+0xc3>
c0017588:	50                   	push   eax
c0017589:	53                   	push   ebx
c001758a:	e8 1d fb ff ff       	call   c00170ac <VgaText::doANSI_SGR(int)>
c001758f:	58                   	pop    eax
c0017590:	5a                   	pop    edx
c0017591:	eb 24                	jmp    c00175b7 <VgaText::putchar(char)+0xc3>
c0017593:	83 f8 4a             	cmp    eax,0x4a
c0017596:	75 1f                	jne    c00175b7 <VgaText::putchar(char)+0xc3>
c0017598:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c001759c:	75 19                	jne    c00175b7 <VgaText::putchar(char)+0xc3>
c001759e:	83 ec 0c             	sub    esp,0xc
c00175a1:	53                   	push   ebx
c00175a2:	e8 89 fd ff ff       	call   c0017330 <VgaText::clearScreen()>
c00175a7:	83 c4 0c             	add    esp,0xc
c00175aa:	6a 00                	push   0x0
c00175ac:	6a 00                	push   0x0
c00175ae:	53                   	push   ebx
c00175af:	e8 1a fd ff ff       	call   c00172ce <VgaText::setCursor(int, int)>
c00175b4:	83 c4 10             	add    esp,0x10
c00175b7:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00175bd:	eb 26                	jmp    c00175e5 <VgaText::putchar(char)+0xf1>
c00175bf:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c00175c2:	83 f8 0e             	cmp    eax,0xe
c00175c5:	7f 1e                	jg     c00175e5 <VgaText::putchar(char)+0xf1>
c00175c7:	8d 48 01             	lea    ecx,[eax+0x1]
c00175ca:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00175cd:	89 f9                	mov    ecx,edi
c00175cf:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c00175d3:	eb 10                	jmp    c00175e5 <VgaText::putchar(char)+0xf1>
c00175d5:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00175d8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00175db:	50                   	push   eax
c00175dc:	53                   	push   ebx
c00175dd:	e8 42 fe ff ff       	call   c0017424 <VgaText::putchar(char, VgaColour, VgaColour)>
c00175e2:	83 c4 10             	add    esp,0x10
c00175e5:	83 c4 10             	add    esp,0x10
c00175e8:	5b                   	pop    ebx
c00175e9:	5e                   	pop    esi
c00175ea:	5f                   	pop    edi
c00175eb:	c3                   	ret    

c00175ec <VgaText::putx(unsigned int)>:
c00175ec:	57                   	push   edi
c00175ed:	b9 11 00 00 00       	mov    ecx,0x11
c00175f2:	56                   	push   esi
c00175f3:	be c2 15 03 c0       	mov    esi,0xc00315c2
c00175f8:	53                   	push   ebx
c00175f9:	83 ec 20             	sub    esp,0x20
c00175fc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0017600:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0017604:	fc                   	cld    
c0017605:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017607:	be 08 00 00 00       	mov    esi,0x8
c001760c:	50                   	push   eax
c001760d:	50                   	push   eax
c001760e:	89 d8                	mov    eax,ebx
c0017610:	c1 e3 04             	shl    ebx,0x4
c0017613:	c1 e8 1c             	shr    eax,0x1c
c0017616:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001761b:	50                   	push   eax
c001761c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017620:	e8 cf fe ff ff       	call   c00174f4 <VgaText::putchar(char)>
c0017625:	83 c4 10             	add    esp,0x10
c0017628:	4e                   	dec    esi
c0017629:	75 e1                	jne    c001760c <VgaText::putx(unsigned int)+0x20>
c001762b:	83 c4 20             	add    esp,0x20
c001762e:	5b                   	pop    ebx
c001762f:	5e                   	pop    esi
c0017630:	5f                   	pop    edi
c0017631:	c3                   	ret    

c0017632 <VgaText::puts(char const*)>:
c0017632:	53                   	push   ebx
c0017633:	83 ec 08             	sub    esp,0x8
c0017636:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001763a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001763d:	85 c0                	test   eax,eax
c001763f:	74 12                	je     c0017653 <VgaText::puts(char const*)+0x21>
c0017641:	43                   	inc    ebx
c0017642:	51                   	push   ecx
c0017643:	51                   	push   ecx
c0017644:	50                   	push   eax
c0017645:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017649:	e8 a6 fe ff ff       	call   c00174f4 <VgaText::putchar(char)>
c001764e:	83 c4 10             	add    esp,0x10
c0017651:	eb e7                	jmp    c001763a <VgaText::puts(char const*)+0x8>
c0017653:	83 c4 08             	add    esp,0x8
c0017656:	5b                   	pop    ebx
c0017657:	c3                   	ret    

c0017658 <VgaText::write(unsigned long long, void*, int*)>:
c0017658:	55                   	push   ebp
c0017659:	57                   	push   edi
c001765a:	56                   	push   esi
c001765b:	53                   	push   ebx
c001765c:	83 ec 0c             	sub    esp,0xc
c001765f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0017663:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0017667:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001766b:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0017672:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0017675:	39 eb                	cmp    ebx,ebp
c0017677:	74 13                	je     c001768c <VgaText::write(unsigned long long, void*, int*)+0x34>
c0017679:	43                   	inc    ebx
c001767a:	50                   	push   eax
c001767b:	50                   	push   eax
c001767c:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0017680:	50                   	push   eax
c0017681:	56                   	push   esi
c0017682:	e8 6d fe ff ff       	call   c00174f4 <VgaText::putchar(char)>
c0017687:	83 c4 10             	add    esp,0x10
c001768a:	eb e9                	jmp    c0017675 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001768c:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0017693:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017697:	89 38                	mov    DWORD PTR [eax],edi
c0017699:	83 c4 0c             	add    esp,0xc
c001769c:	31 c0                	xor    eax,eax
c001769e:	5b                   	pop    ebx
c001769f:	5e                   	pop    esi
c00176a0:	5f                   	pop    edi
c00176a1:	5d                   	pop    ebp
c00176a2:	c3                   	ret    
c00176a3:	90                   	nop

c00176a4 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00176a4:	55                   	push   ebp
c00176a5:	57                   	push   edi
c00176a6:	56                   	push   esi
c00176a7:	53                   	push   ebx
c00176a8:	83 ec 0c             	sub    esp,0xc
c00176ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00176af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00176b4:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00176bb:	50                   	push   eax
c00176bc:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00176c1:	50                   	push   eax
c00176c2:	e8 b3 fa ff ff       	call   c001717a <VgaText::combineColours(unsigned char, unsigned char)>
c00176c7:	5a                   	pop    edx
c00176c8:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00176cc:	59                   	pop    ecx
c00176cd:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00176d0:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00176d4:	0f b7 f6             	movzx  esi,si
c00176d7:	0f b6 e8             	movzx  ebp,al
c00176da:	01 f6                	add    esi,esi
c00176dc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00176df:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00176e2:	85 c0                	test   eax,eax
c00176e4:	0f 84 ef 00 00 00    	je     c00177d9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c00176ea:	83 f8 0d             	cmp    eax,0xd
c00176ed:	75 0c                	jne    c00176fb <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c00176ef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00176f6:	e9 d8 00 00 00       	jmp    c00177d3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00176fb:	83 f8 0a             	cmp    eax,0xa
c00176fe:	75 44                	jne    c0017744 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0017700:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017703:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001770a:	8d 48 01             	lea    ecx,[eax+0x1]
c001770d:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0017710:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0017713:	75 0f                	jne    c0017724 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0017715:	83 ec 0c             	sub    esp,0xc
c0017718:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001771b:	53                   	push   ebx
c001771c:	e8 6b fa ff ff       	call   c001718c <VgaText::scrollScreen()>
c0017721:	83 c4 10             	add    esp,0x10
c0017724:	83 ec 0c             	sub    esp,0xc
c0017727:	53                   	push   ebx
c0017728:	e8 69 f9 ff ff       	call   c0017096 <VgaText::updateCursor()>
c001772d:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0017731:	83 c4 10             	add    esp,0x10
c0017734:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0017737:	0f b7 f6             	movzx  esi,si
c001773a:	01 f6                	add    esi,esi
c001773c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001773f:	e9 8f 00 00 00       	jmp    c00177d3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017744:	83 f8 08             	cmp    eax,0x8
c0017747:	75 34                	jne    c001777d <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0017749:	51                   	push   ecx
c001774a:	51                   	push   ecx
c001774b:	6a 01                	push   0x1
c001774d:	53                   	push   ebx
c001774e:	e8 af fc ff ff       	call   c0017402 <VgaText::decrementCursor(bool)>
c0017753:	5e                   	pop    esi
c0017754:	58                   	pop    eax
c0017755:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017758:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001775b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001775e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017761:	6a 20                	push   0x20
c0017763:	53                   	push   ebx
c0017764:	e8 c5 fa ff ff       	call   c001722e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017769:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c001776d:	83 c4 20             	add    esp,0x20
c0017770:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0017773:	0f b7 f6             	movzx  esi,si
c0017776:	01 f6                	add    esi,esi
c0017778:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001777b:	eb 56                	jmp    c00177d3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001777d:	52                   	push   edx
c001777e:	52                   	push   edx
c001777f:	55                   	push   ebp
c0017780:	50                   	push   eax
c0017781:	e8 98 fa ff ff       	call   c001721e <VgaText::combineCharAndColour(char, unsigned char)>
c0017786:	83 c4 10             	add    esp,0x10
c0017789:	66 89 06             	mov    WORD PTR [esi],ax
c001778c:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c0017792:	75 1d                	jne    c00177b1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0017794:	83 ec 0c             	sub    esp,0xc
c0017797:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001779a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001779d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00177a1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00177a5:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00177a8:	50                   	push   eax
c00177a9:	e8 fa 07 01 00       	call   c0027fa8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00177ae:	83 c4 20             	add    esp,0x20
c00177b1:	83 c6 02             	add    esi,0x2
c00177b4:	50                   	push   eax
c00177b5:	50                   	push   eax
c00177b6:	6a 00                	push   0x0
c00177b8:	53                   	push   ebx
c00177b9:	e8 f0 fb ff ff       	call   c00173ae <VgaText::incrementCursor(bool)>
c00177be:	83 c4 10             	add    esp,0x10
c00177c1:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00177c5:	75 0c                	jne    c00177d3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00177c7:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00177cb:	0f b7 f6             	movzx  esi,si
c00177ce:	01 f6                	add    esi,esi
c00177d0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00177d3:	47                   	inc    edi
c00177d4:	e9 06 ff ff ff       	jmp    c00176df <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00177d9:	83 ec 0c             	sub    esp,0xc
c00177dc:	53                   	push   ebx
c00177dd:	e8 b4 f8 ff ff       	call   c0017096 <VgaText::updateCursor()>
c00177e2:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00177e9:	83 c4 1c             	add    esp,0x1c
c00177ec:	5b                   	pop    ebx
c00177ed:	5e                   	pop    esi
c00177ee:	5f                   	pop    edi
c00177ef:	5d                   	pop    ebp
c00177f0:	c3                   	ret    
c00177f1:	90                   	nop

c00177f2 <VgaText::VgaText(char const*)>:
c00177f2:	56                   	push   esi
c00177f3:	53                   	push   ebx
c00177f4:	83 ec 04             	sub    esp,0x4
c00177f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177fb:	83 ec 08             	sub    esp,0x8
c00177fe:	6a 00                	push   0x0
c0017800:	50                   	push   eax
c0017801:	e8 44 05 00 00       	call   c0017d4a <UnixFile::UnixFile(int)>
c0017806:	83 c4 10             	add    esp,0x10
c0017809:	ba e8 15 03 c0       	mov    edx,0xc00315e8
c001780e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017812:	89 10                	mov    DWORD PTR [eax],edx
c0017814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017818:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c001781f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017823:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001782a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001782e:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0017832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017836:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c001783a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001783e:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0017845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017849:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0017850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017854:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c001785b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001785f:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0017866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001786a:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0017871:	83 ec 0c             	sub    esp,0xc
c0017874:	6a 01                	push   0x1
c0017876:	e8 1e 09 00 00       	call   c0018199 <Virt::allocateKernelVirtualPages(int)>
c001787b:	83 c4 10             	add    esp,0x10
c001787e:	89 c2                	mov    edx,eax
c0017880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017884:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017887:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001788d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017891:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017894:	89 c6                	mov    esi,eax
c0017896:	e8 b1 f0 ff ff       	call   c001694c <Phys::allocatePage()>
c001789b:	68 05 0c 00 00       	push   0xc05
c00178a0:	56                   	push   esi
c00178a1:	50                   	push   eax
c00178a2:	53                   	push   ebx
c00178a3:	e8 04 10 00 00       	call   c00188ac <VAS::mapPage(unsigned long, unsigned long, int)>
c00178a8:	83 c4 10             	add    esp,0x10
c00178ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178af:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00178b2:	83 ec 04             	sub    esp,0x4
c00178b5:	68 a0 0f 00 00       	push   0xfa0
c00178ba:	6a 00                	push   0x0
c00178bc:	50                   	push   eax
c00178bd:	e8 2e 8c fe ff       	call   c00004f0 <memset>
c00178c2:	83 c4 10             	add    esp,0x10
c00178c5:	83 ec 04             	sub    esp,0x4
c00178c8:	6a 00                	push   0x0
c00178ca:	6a 07                	push   0x7
c00178cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178d0:	e8 6b f8 ff ff       	call   c0017140 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00178d5:	83 c4 10             	add    esp,0x10
c00178d8:	83 ec 04             	sub    esp,0x4
c00178db:	6a 00                	push   0x0
c00178dd:	6a 00                	push   0x0
c00178df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178e3:	e8 e6 f9 ff ff       	call   c00172ce <VgaText::setCursor(int, int)>
c00178e8:	83 c4 10             	add    esp,0x10
c00178eb:	83 ec 0c             	sub    esp,0xc
c00178ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178f2:	e8 39 fa ff ff       	call   c0017330 <VgaText::clearScreen()>
c00178f7:	83 c4 10             	add    esp,0x10
c00178fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178fe:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0017902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017906:	05 82 00 00 00       	add    eax,0x82
c001790b:	83 ec 04             	sub    esp,0x4
c001790e:	68 80 00 00 00       	push   0x80
c0017913:	6a 00                	push   0x0
c0017915:	50                   	push   eax
c0017916:	e8 d5 8b fe ff       	call   c00004f0 <memset>
c001791b:	83 c4 10             	add    esp,0x10
c001791e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017922:	05 02 01 00 00       	add    eax,0x102
c0017927:	83 ec 04             	sub    esp,0x4
c001792a:	68 80 00 00 00       	push   0x80
c001792f:	6a 00                	push   0x0
c0017931:	50                   	push   eax
c0017932:	e8 b9 8b fe ff       	call   c00004f0 <memset>
c0017937:	83 c4 10             	add    esp,0x10
c001793a:	90                   	nop
c001793b:	83 c4 04             	add    esp,0x4
c001793e:	5b                   	pop    ebx
c001793f:	5e                   	pop    esi
c0017940:	c3                   	ret    
c0017941:	90                   	nop

c0017942 <VgaText::receiveKey(unsigned char)>:
c0017942:	55                   	push   ebp
c0017943:	57                   	push   edi
c0017944:	56                   	push   esi
c0017945:	53                   	push   ebx
c0017946:	83 ec 2c             	sub    esp,0x2c
c0017949:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001794d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017951:	89 ef                	mov    edi,ebp
c0017953:	81 e7 ff 00 00 00    	and    edi,0xff
c0017959:	0f 84 66 01 00 00    	je     c0017ac5 <VgaText::receiveKey(unsigned char)+0x183>
c001795f:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0017965:	83 ff 08             	cmp    edi,0x8
c0017968:	75 73                	jne    c00179dd <VgaText::receiveKey(unsigned char)+0x9b>
c001796a:	83 ec 0c             	sub    esp,0xc
c001796d:	56                   	push   esi
c001796e:	e8 fd 8b fe ff       	call   c0000570 <strlen>
c0017973:	83 c4 10             	add    esp,0x10
c0017976:	85 c0                	test   eax,eax
c0017978:	0f 84 02 01 00 00    	je     c0017a80 <VgaText::receiveKey(unsigned char)+0x13e>
c001797e:	50                   	push   eax
c001797f:	50                   	push   eax
c0017980:	6a 08                	push   0x8
c0017982:	53                   	push   ebx
c0017983:	e8 6c fb ff ff       	call   c00174f4 <VgaText::putchar(char)>
c0017988:	89 34 24             	mov    DWORD PTR [esp],esi
c001798b:	e8 e0 8b fe ff       	call   c0000570 <strlen>
c0017990:	83 c4 10             	add    esp,0x10
c0017993:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c001799b:	83 fa 0d             	cmp    edx,0xd
c001799e:	89 d0                	mov    eax,edx
c00179a0:	0f 95 c1             	setne  cl
c00179a3:	83 fa 1f             	cmp    edx,0x1f
c00179a6:	0f 9e c2             	setle  dl
c00179a9:	0f b6 d2             	movzx  edx,dl
c00179ac:	85 ca                	test   edx,ecx
c00179ae:	74 17                	je     c00179c7 <VgaText::receiveKey(unsigned char)+0x85>
c00179b0:	83 e8 08             	sub    eax,0x8
c00179b3:	3c 02                	cmp    al,0x2
c00179b5:	76 10                	jbe    c00179c7 <VgaText::receiveKey(unsigned char)+0x85>
c00179b7:	55                   	push   ebp
c00179b8:	55                   	push   ebp
c00179b9:	68 d3 15 03 c0       	push   0xc00315d3
c00179be:	53                   	push   ebx
c00179bf:	e8 6e fc ff ff       	call   c0017632 <VgaText::puts(char const*)>
c00179c4:	83 c4 10             	add    esp,0x10
c00179c7:	83 ec 0c             	sub    esp,0xc
c00179ca:	56                   	push   esi
c00179cb:	e8 a0 8b fe ff       	call   c0000570 <strlen>
c00179d0:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c00179d8:	e9 a0 00 00 00       	jmp    c0017a7d <VgaText::receiveKey(unsigned char)+0x13b>
c00179dd:	83 ec 0c             	sub    esp,0xc
c00179e0:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c00179e6:	50                   	push   eax
c00179e7:	e8 84 8b fe ff       	call   c0000570 <strlen>
c00179ec:	89 34 24             	mov    DWORD PTR [esp],esi
c00179ef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179f3:	e8 78 8b fe ff       	call   c0000570 <strlen>
c00179f8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00179fc:	83 c4 10             	add    esp,0x10
c00179ff:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0017a03:	3d 80 00 00 00       	cmp    eax,0x80
c0017a08:	0f 87 b7 00 00 00    	ja     c0017ac5 <VgaText::receiveKey(unsigned char)+0x183>
c0017a0e:	8d 45 ff             	lea    eax,[ebp-0x1]
c0017a11:	8d 55 f7             	lea    edx,[ebp-0x9]
c0017a14:	3c 1e                	cmp    al,0x1e
c0017a16:	0f 96 c0             	setbe  al
c0017a19:	80 fa 01             	cmp    dl,0x1
c0017a1c:	0f 97 c2             	seta   dl
c0017a1f:	0f b6 d2             	movzx  edx,dl
c0017a22:	85 c2                	test   edx,eax
c0017a24:	74 2e                	je     c0017a54 <VgaText::receiveKey(unsigned char)+0x112>
c0017a26:	83 ff 0d             	cmp    edi,0xd
c0017a29:	74 29                	je     c0017a54 <VgaText::receiveKey(unsigned char)+0x112>
c0017a2b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017a2e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017a31:	68 d9 15 03 c0       	push   0xc00315d9
c0017a36:	53                   	push   ebx
c0017a37:	e8 68 fc ff ff       	call   c00176a4 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017a3c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017a3f:	8d 45 40             	lea    eax,[ebp+0x40]
c0017a42:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017a45:	0f b6 c0             	movzx  eax,al
c0017a48:	50                   	push   eax
c0017a49:	53                   	push   ebx
c0017a4a:	e8 d5 f9 ff ff       	call   c0017424 <VgaText::putchar(char, VgaColour, VgaColour)>
c0017a4f:	83 c4 20             	add    esp,0x20
c0017a52:	eb 11                	jmp    c0017a65 <VgaText::receiveKey(unsigned char)+0x123>
c0017a54:	89 e8                	mov    eax,ebp
c0017a56:	51                   	push   ecx
c0017a57:	0f be c0             	movsx  eax,al
c0017a5a:	51                   	push   ecx
c0017a5b:	50                   	push   eax
c0017a5c:	53                   	push   ebx
c0017a5d:	e8 92 fa ff ff       	call   c00174f4 <VgaText::putchar(char)>
c0017a62:	83 c4 10             	add    esp,0x10
c0017a65:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017a6a:	89 e8                	mov    eax,ebp
c0017a6c:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0017a70:	52                   	push   edx
c0017a71:	52                   	push   edx
c0017a72:	8d 44 24 26          	lea    eax,[esp+0x26]
c0017a76:	50                   	push   eax
c0017a77:	56                   	push   esi
c0017a78:	e8 c3 8d fe ff       	call   c0000840 <strcat>
c0017a7d:	83 c4 10             	add    esp,0x10
c0017a80:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0017a86:	b0 01                	mov    al,0x1
c0017a88:	83 ff 1c             	cmp    edi,0x1c
c0017a8b:	77 0e                	ja     c0017a9b <VgaText::receiveKey(unsigned char)+0x159>
c0017a8d:	b8 08 04 00 10       	mov    eax,0x10000408
c0017a92:	89 f9                	mov    ecx,edi
c0017a94:	d3 e8                	shr    eax,cl
c0017a96:	f7 d0                	not    eax
c0017a98:	83 e0 01             	and    eax,0x1
c0017a9b:	84 c0                	test   al,al
c0017a9d:	74 04                	je     c0017aa3 <VgaText::receiveKey(unsigned char)+0x161>
c0017a9f:	84 d2                	test   dl,dl
c0017aa1:	74 22                	je     c0017ac5 <VgaText::receiveKey(unsigned char)+0x183>
c0017aa3:	81 c3 02 01 00 00    	add    ebx,0x102
c0017aa9:	50                   	push   eax
c0017aaa:	50                   	push   eax
c0017aab:	56                   	push   esi
c0017aac:	53                   	push   ebx
c0017aad:	e8 8e 8d fe ff       	call   c0000840 <strcat>
c0017ab2:	83 c4 0c             	add    esp,0xc
c0017ab5:	68 80 00 00 00       	push   0x80
c0017aba:	6a 00                	push   0x0
c0017abc:	56                   	push   esi
c0017abd:	e8 2e 8a fe ff       	call   c00004f0 <memset>
c0017ac2:	83 c4 10             	add    esp,0x10
c0017ac5:	83 c4 2c             	add    esp,0x2c
c0017ac8:	5b                   	pop    ebx
c0017ac9:	5e                   	pop    esi
c0017aca:	5f                   	pop    edi
c0017acb:	5d                   	pop    ebp
c0017acc:	c3                   	ret    
c0017acd:	90                   	nop

c0017ace <VgaText::doUpdate()>:
c0017ace:	c3                   	ret    
c0017acf:	90                   	nop

c0017ad0 <TSS::TSS()>:
c0017ad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ad4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017adb:	90                   	nop
c0017adc:	c3                   	ret    
c0017add:	90                   	nop
c0017ade:	66 90                	xchg   ax,ax

c0017ae0 <TSS::setESP(unsigned long)>:
c0017ae0:	55                   	push   ebp
c0017ae1:	89 e5                	mov    ebp,esp
c0017ae3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ae6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ae9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017aec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017aef:	90                   	nop
c0017af0:	5d                   	pop    ebp
c0017af1:	c3                   	ret    
c0017af2:	66 90                	xchg   ax,ax

c0017af4 <TSS::flush()>:
c0017af4:	55                   	push   ebp
c0017af5:	89 e5                	mov    ebp,esp
c0017af7:	83 ec 10             	sub    esp,0x10
c0017afa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017afd:	8b 00                	mov    eax,DWORD PTR [eax]
c0017aff:	83 c8 03             	or     eax,0x3
c0017b02:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017b06:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0017b0a:	66 89 d0             	mov    ax,dx
c0017b0d:	0f 00 d8             	ltr    ax
c0017b10:	90                   	nop
c0017b11:	c9                   	leave  
c0017b12:	c3                   	ret    
c0017b13:	90                   	nop

c0017b14 <TSS::setup(unsigned long, unsigned long)>:
c0017b14:	55                   	push   ebp
c0017b15:	89 e5                	mov    ebp,esp
c0017b17:	83 ec 18             	sub    esp,0x18
c0017b1a:	83 ec 0c             	sub    esp,0xc
c0017b1d:	6a 68                	push   0x68
c0017b1f:	e8 1f eb ff ff       	call   c0016643 <malloc>
c0017b24:	83 c4 10             	add    esp,0x10
c0017b27:	89 c2                	mov    edx,eax
c0017b29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b2c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017b2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b35:	83 ec 04             	sub    esp,0x4
c0017b38:	6a 68                	push   0x68
c0017b3a:	6a 00                	push   0x0
c0017b3c:	50                   	push   eax
c0017b3d:	e8 ae 89 fe ff       	call   c00004f0 <memset>
c0017b42:	83 c4 10             	add    esp,0x10
c0017b45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b4b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0017b51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b57:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0017b5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b63:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017b66:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017b69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b6f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0017b75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b7b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0017b81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b87:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0017b8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b93:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0017b99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b9f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0017ba5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ba8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bab:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0017bb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bb7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0017bba:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0017bbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bc3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017bc6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017bc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bcf:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0017bd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bd9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bdc:	0f 20 da             	mov    edx,cr3
c0017bdf:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0017be2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0017be5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0017be8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017beb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bee:	83 ec 08             	sub    esp,0x8
c0017bf1:	50                   	push   eax
c0017bf2:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017bf5:	50                   	push   eax
c0017bf6:	e8 c7 e1 ff ff       	call   c0015dc2 <GDTEntry::setBase(unsigned int)>
c0017bfb:	83 c4 10             	add    esp,0x10
c0017bfe:	83 ec 08             	sub    esp,0x8
c0017c01:	6a 68                	push   0x68
c0017c03:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017c06:	50                   	push   eax
c0017c07:	e8 d2 e1 ff ff       	call   c0015dde <GDTEntry::setLimit(unsigned int)>
c0017c0c:	83 c4 10             	add    esp,0x10
c0017c0f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0017c13:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017c16:	83 e0 0f             	and    eax,0xf
c0017c19:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017c1c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017c1f:	83 c8 40             	or     eax,0x40
c0017c22:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017c25:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0017c2a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017c30:	05 78 01 00 00       	add    eax,0x178
c0017c35:	83 ec 04             	sub    esp,0x4
c0017c38:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0017c3b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0017c3e:	50                   	push   eax
c0017c3f:	e8 ce e1 ff ff       	call   c0015e12 <GDT::addEntry(GDTEntry)>
c0017c44:	83 c4 10             	add    esp,0x10
c0017c47:	89 c2                	mov    edx,eax
c0017c49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c4c:	89 10                	mov    DWORD PTR [eax],edx
c0017c4e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0017c53:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017c59:	05 78 01 00 00       	add    eax,0x178
c0017c5e:	83 ec 0c             	sub    esp,0xc
c0017c61:	50                   	push   eax
c0017c62:	e8 d5 e1 ff ff       	call   c0015e3c <GDT::flush()>
c0017c67:	83 c4 10             	add    esp,0x10
c0017c6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c6f:	c9                   	leave  
c0017c70:	c3                   	ret    
c0017c71:	90                   	nop

c0017c72 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0017c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c7d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017c82:	75 08                	jne    c0017c8c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0017c84:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017c8a:	eb 38                	jmp    c0017cc4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0017c8c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017c91:	75 17                	jne    c0017caa <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0017c93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c98:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c9b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ca1:	8b 10                	mov    edx,DWORD PTR [eax]
c0017ca3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ca7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0017caa:	89 c1                	mov    ecx,eax
c0017cac:	83 e1 fd             	and    ecx,0xfffffffd
c0017caf:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0017cb5:	74 cd                	je     c0017c84 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017cb7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017cbc:	83 e0 ef             	and    eax,0xffffffef
c0017cbf:	83 f8 08             	cmp    eax,0x8
c0017cc2:	76 c0                	jbe    c0017c84 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017cc4:	31 c0                	xor    eax,eax
c0017cc6:	c3                   	ret    
c0017cc7:	90                   	nop

c0017cc8 <ReservedFilename::isAtty()>:
c0017cc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ccc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017ccf:	31 c0                	xor    eax,eax
c0017cd1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0017cd7:	74 09                	je     c0017ce2 <ReservedFilename::isAtty()+0x1a>
c0017cd9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0017cdf:	0f 94 c0             	sete   al
c0017ce2:	c3                   	ret    
c0017ce3:	90                   	nop

c0017ce4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0017ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ce8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017cec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017cef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017cf3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017cf8:	75 08                	jne    c0017d02 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0017cfa:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017d00:	eb 3d                	jmp    c0017d3f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017d02:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017d07:	75 17                	jne    c0017d20 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0017d09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d0e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d11:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d17:	8b 10                	mov    edx,DWORD PTR [eax]
c0017d19:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017d1d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0017d20:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0017d25:	75 04                	jne    c0017d2b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0017d27:	89 0a                	mov    DWORD PTR [edx],ecx
c0017d29:	eb 14                	jmp    c0017d3f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017d2b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0017d30:	74 c8                	je     c0017cfa <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017d32:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017d37:	83 e0 ef             	and    eax,0xffffffef
c0017d3a:	83 f8 08             	cmp    eax,0x8
c0017d3d:	76 bb                	jbe    c0017cfa <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017d3f:	31 c0                	xor    eax,eax
c0017d41:	c3                   	ret    

c0017d42 <UnixFile::getFileDescriptor()>:
c0017d42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017d49:	c3                   	ret    

c0017d4a <UnixFile::UnixFile(int)>:
c0017d4a:	53                   	push   ebx
c0017d4b:	83 ec 28             	sub    esp,0x28
c0017d4e:	ba b0 16 03 c0       	mov    edx,0xc00316b0
c0017d53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d57:	89 10                	mov    DWORD PTR [eax],edx
c0017d59:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0017d61:	0f 8f 90 01 00 00    	jg     c0017ef7 <UnixFile::UnixFile(int)+0x1ad>
c0017d67:	a1 20 3f 03 c0       	mov    eax,ds:0xc0033f20
c0017d6c:	8d 50 01             	lea    edx,[eax+0x1]
c0017d6f:	89 15 20 3f 03 c0    	mov    DWORD PTR ds:0xc0033f20,edx
c0017d75:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017d79:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017d7c:	83 ec 08             	sub    esp,0x8
c0017d7f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017d83:	68 98 aa 03 c0       	push   0xc003aa98
c0017d88:	e8 5b 6e 01 00       	call   c002ebe8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017d8d:	83 c4 10             	add    esp,0x10
c0017d90:	a0 94 aa 03 c0       	mov    al,ds:0xc003aa94
c0017d95:	83 f0 01             	xor    eax,0x1
c0017d98:	0f b6 c0             	movzx  eax,al
c0017d9b:	85 c0                	test   eax,eax
c0017d9d:	0f 84 55 01 00 00    	je     c0017ef8 <UnixFile::UnixFile(int)+0x1ae>
c0017da3:	c6 05 94 aa 03 c0 01 	mov    BYTE PTR ds:0xc003aa94,0x1
c0017daa:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0017db2:	83 ec 0c             	sub    esp,0xc
c0017db5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017db9:	e8 85 e8 ff ff       	call   c0016643 <malloc>
c0017dbe:	83 c4 10             	add    esp,0x10
c0017dc1:	89 c3                	mov    ebx,eax
c0017dc3:	83 ec 08             	sub    esp,0x8
c0017dc6:	68 03 ff ff 0f       	push   0xfffff03
c0017dcb:	53                   	push   ebx
c0017dcc:	e8 2d 01 00 00       	call   c0017efe <ReservedFilename::ReservedFilename(int)>
c0017dd1:	83 c4 10             	add    esp,0x10
c0017dd4:	89 1d 8c aa 03 c0    	mov    DWORD PTR ds:0xc003aa8c,ebx
c0017dda:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0017de2:	83 ec 0c             	sub    esp,0xc
c0017de5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017de9:	e8 55 e8 ff ff       	call   c0016643 <malloc>
c0017dee:	83 c4 10             	add    esp,0x10
c0017df1:	89 c3                	mov    ebx,eax
c0017df3:	83 ec 08             	sub    esp,0x8
c0017df6:	68 01 ff ff 0f       	push   0xfffff01
c0017dfb:	53                   	push   ebx
c0017dfc:	e8 fd 00 00 00       	call   c0017efe <ReservedFilename::ReservedFilename(int)>
c0017e01:	83 c4 10             	add    esp,0x10
c0017e04:	89 1d 90 aa 03 c0    	mov    DWORD PTR ds:0xc003aa90,ebx
c0017e0a:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0017e12:	83 ec 0c             	sub    esp,0xc
c0017e15:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017e19:	e8 25 e8 ff ff       	call   c0016643 <malloc>
c0017e1e:	83 c4 10             	add    esp,0x10
c0017e21:	89 c3                	mov    ebx,eax
c0017e23:	83 ec 08             	sub    esp,0x8
c0017e26:	68 00 ff ff 0f       	push   0xfffff00
c0017e2b:	53                   	push   ebx
c0017e2c:	e8 cd 00 00 00       	call   c0017efe <ReservedFilename::ReservedFilename(int)>
c0017e31:	83 c4 10             	add    esp,0x10
c0017e34:	89 1d 84 aa 03 c0    	mov    DWORD PTR ds:0xc003aa84,ebx
c0017e3a:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0017e42:	83 ec 0c             	sub    esp,0xc
c0017e45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017e49:	e8 f5 e7 ff ff       	call   c0016643 <malloc>
c0017e4e:	83 c4 10             	add    esp,0x10
c0017e51:	89 c3                	mov    ebx,eax
c0017e53:	83 ec 08             	sub    esp,0x8
c0017e56:	68 02 ff ff 0f       	push   0xfffff02
c0017e5b:	53                   	push   ebx
c0017e5c:	e8 9d 00 00 00       	call   c0017efe <ReservedFilename::ReservedFilename(int)>
c0017e61:	83 c4 10             	add    esp,0x10
c0017e64:	89 1d 88 aa 03 c0    	mov    DWORD PTR ds:0xc003aa88,ebx
c0017e6a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017e72:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0017e77:	7f 7f                	jg     c0017ef8 <UnixFile::UnixFile(int)+0x1ae>
c0017e79:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0017e81:	83 ec 0c             	sub    esp,0xc
c0017e84:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017e88:	e8 b6 e7 ff ff       	call   c0016643 <malloc>
c0017e8d:	83 c4 10             	add    esp,0x10
c0017e90:	89 c3                	mov    ebx,eax
c0017e92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e96:	05 10 ff ff 0f       	add    eax,0xfffff10
c0017e9b:	83 ec 08             	sub    esp,0x8
c0017e9e:	50                   	push   eax
c0017e9f:	53                   	push   ebx
c0017ea0:	e8 59 00 00 00       	call   c0017efe <ReservedFilename::ReservedFilename(int)>
c0017ea5:	83 c4 10             	add    esp,0x10
c0017ea8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017eac:	89 1c 85 60 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55a0],ebx
c0017eb3:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0017ebb:	83 ec 0c             	sub    esp,0xc
c0017ebe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017ec2:	e8 7c e7 ff ff       	call   c0016643 <malloc>
c0017ec7:	83 c4 10             	add    esp,0x10
c0017eca:	89 c3                	mov    ebx,eax
c0017ecc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ed0:	05 20 ff ff 0f       	add    eax,0xfffff20
c0017ed5:	83 ec 08             	sub    esp,0x8
c0017ed8:	50                   	push   eax
c0017ed9:	53                   	push   ebx
c0017eda:	e8 1f 00 00 00       	call   c0017efe <ReservedFilename::ReservedFilename(int)>
c0017edf:	83 c4 10             	add    esp,0x10
c0017ee2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ee6:	89 1c 85 20 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55e0],ebx
c0017eed:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0017ef2:	e9 7b ff ff ff       	jmp    c0017e72 <UnixFile::UnixFile(int)+0x128>
c0017ef7:	90                   	nop
c0017ef8:	83 c4 28             	add    esp,0x28
c0017efb:	5b                   	pop    ebx
c0017efc:	c3                   	ret    
c0017efd:	90                   	nop

c0017efe <ReservedFilename::ReservedFilename(int)>:
c0017efe:	83 ec 0c             	sub    esp,0xc
c0017f01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f05:	83 ec 08             	sub    esp,0x8
c0017f08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f0c:	50                   	push   eax
c0017f0d:	e8 38 fe ff ff       	call   c0017d4a <UnixFile::UnixFile(int)>
c0017f12:	83 c4 10             	add    esp,0x10
c0017f15:	ba cc 16 03 c0       	mov    edx,0xc00316cc
c0017f1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f1e:	89 10                	mov    DWORD PTR [eax],edx
c0017f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017f28:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017f2b:	90                   	nop
c0017f2c:	83 c4 0c             	add    esp,0xc
c0017f2f:	c3                   	ret    

c0017f30 <UnixFile::~UnixFile()>:
c0017f30:	83 ec 1c             	sub    esp,0x1c
c0017f33:	ba b0 16 03 c0       	mov    edx,0xc00316b0
c0017f38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f3c:	89 10                	mov    DWORD PTR [eax],edx
c0017f3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017f45:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0017f4a:	7f 76                	jg     c0017fc2 <UnixFile::~UnixFile()+0x92>
c0017f4c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017f54:	83 ec 0c             	sub    esp,0xc
c0017f57:	68 98 aa 03 c0       	push   0xc003aa98
c0017f5c:	e8 5b 6d 01 00       	call   c002ecbc <LinkedList<UnixFile>::getFirstElement()>
c0017f61:	83 c4 10             	add    esp,0x10
c0017f64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017f68:	83 ec 0c             	sub    esp,0xc
c0017f6b:	68 98 aa 03 c0       	push   0xc003aa98
c0017f70:	e8 4f 6d 01 00       	call   c002ecc4 <LinkedList<UnixFile>::removeFirst()>
c0017f75:	83 c4 10             	add    esp,0x10
c0017f78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f7c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0017f80:	74 43                	je     c0017fc5 <UnixFile::~UnixFile()+0x95>
c0017f82:	83 ec 08             	sub    esp,0x8
c0017f85:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017f89:	68 98 aa 03 c0       	push   0xc003aa98
c0017f8e:	e8 55 6c 01 00       	call   c002ebe8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017f93:	83 c4 10             	add    esp,0x10
c0017f96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f9a:	8d 50 01             	lea    edx,[eax+0x1]
c0017f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017fa1:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0017fa6:	0f 94 c0             	sete   al
c0017fa9:	0f b6 c0             	movzx  eax,al
c0017fac:	85 c0                	test   eax,eax
c0017fae:	74 a4                	je     c0017f54 <UnixFile::~UnixFile()+0x24>
c0017fb0:	83 ec 0c             	sub    esp,0xc
c0017fb3:	68 88 16 03 c0       	push   0xc0031688
c0017fb8:	e8 2d 85 00 00       	call   c00204ea <KePanic(char const*)>
c0017fbd:	83 c4 10             	add    esp,0x10
c0017fc0:	eb 92                	jmp    c0017f54 <UnixFile::~UnixFile()+0x24>
c0017fc2:	90                   	nop
c0017fc3:	eb 01                	jmp    c0017fc6 <UnixFile::~UnixFile()+0x96>
c0017fc5:	90                   	nop
c0017fc6:	90                   	nop
c0017fc7:	83 c4 1c             	add    esp,0x1c
c0017fca:	c3                   	ret    
c0017fcb:	90                   	nop

c0017fcc <UnixFile::~UnixFile()>:
c0017fcc:	83 ec 0c             	sub    esp,0xc
c0017fcf:	83 ec 0c             	sub    esp,0xc
c0017fd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fd6:	e8 55 ff ff ff       	call   c0017f30 <UnixFile::~UnixFile()>
c0017fdb:	83 c4 10             	add    esp,0x10
c0017fde:	83 ec 08             	sub    esp,0x8
c0017fe1:	6a 0c                	push   0xc
c0017fe3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fe7:	e8 b8 13 00 00       	call   c00193a4 <operator delete(void*, unsigned long)>
c0017fec:	83 c4 10             	add    esp,0x10
c0017fef:	83 c4 0c             	add    esp,0xc
c0017ff2:	c3                   	ret    
c0017ff3:	90                   	nop

c0017ff4 <ReservedFilename::~ReservedFilename()>:
c0017ff4:	83 ec 0c             	sub    esp,0xc
c0017ff7:	ba cc 16 03 c0       	mov    edx,0xc00316cc
c0017ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018000:	89 10                	mov    DWORD PTR [eax],edx
c0018002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018006:	83 ec 0c             	sub    esp,0xc
c0018009:	50                   	push   eax
c001800a:	e8 21 ff ff ff       	call   c0017f30 <UnixFile::~UnixFile()>
c001800f:	83 c4 10             	add    esp,0x10
c0018012:	90                   	nop
c0018013:	83 c4 0c             	add    esp,0xc
c0018016:	c3                   	ret    
c0018017:	90                   	nop

c0018018 <ReservedFilename::~ReservedFilename()>:
c0018018:	83 ec 0c             	sub    esp,0xc
c001801b:	83 ec 0c             	sub    esp,0xc
c001801e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018022:	e8 cd ff ff ff       	call   c0017ff4 <ReservedFilename::~ReservedFilename()>
c0018027:	83 c4 10             	add    esp,0x10
c001802a:	83 ec 08             	sub    esp,0x8
c001802d:	6a 0c                	push   0xc
c001802f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018033:	e8 6c 13 00 00       	call   c00193a4 <operator delete(void*, unsigned long)>
c0018038:	83 c4 10             	add    esp,0x10
c001803b:	83 c4 0c             	add    esp,0xc
c001803e:	c3                   	ret    

c001803f <KeGetFileFromDescriptor(int)>:
c001803f:	53                   	push   ebx
c0018040:	83 ec 08             	sub    esp,0x8
c0018043:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018047:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001804d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0018053:	7f 2c                	jg     c0018081 <KeGetFileFromDescriptor(int)+0x42>
c0018055:	83 ec 0c             	sub    esp,0xc
c0018058:	68 98 aa 03 c0       	push   0xc003aa98
c001805d:	e8 5a 6c 01 00       	call   c002ecbc <LinkedList<UnixFile>::getFirstElement()>
c0018062:	83 c4 10             	add    esp,0x10
c0018065:	85 c0                	test   eax,eax
c0018067:	75 04                	jne    c001806d <KeGetFileFromDescriptor(int)+0x2e>
c0018069:	31 c0                	xor    eax,eax
c001806b:	eb 6e                	jmp    c00180db <KeGetFileFromDescriptor(int)+0x9c>
c001806d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0018070:	74 69                	je     c00180db <KeGetFileFromDescriptor(int)+0x9c>
c0018072:	52                   	push   edx
c0018073:	52                   	push   edx
c0018074:	50                   	push   eax
c0018075:	68 98 aa 03 c0       	push   0xc003aa98
c001807a:	e8 e7 6c 01 00       	call   c002ed66 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001807f:	eb e1                	jmp    c0018062 <KeGetFileFromDescriptor(int)+0x23>
c0018081:	a1 8c aa 03 c0       	mov    eax,ds:0xc003aa8c
c0018086:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001808c:	74 4d                	je     c00180db <KeGetFileFromDescriptor(int)+0x9c>
c001808e:	a1 90 aa 03 c0       	mov    eax,ds:0xc003aa90
c0018093:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0018099:	74 40                	je     c00180db <KeGetFileFromDescriptor(int)+0x9c>
c001809b:	a1 88 aa 03 c0       	mov    eax,ds:0xc003aa88
c00180a0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00180a6:	74 33                	je     c00180db <KeGetFileFromDescriptor(int)+0x9c>
c00180a8:	a1 84 aa 03 c0       	mov    eax,ds:0xc003aa84
c00180ad:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00180b3:	74 26                	je     c00180db <KeGetFileFromDescriptor(int)+0x9c>
c00180b5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00180bb:	83 f8 08             	cmp    eax,0x8
c00180be:	77 09                	ja     c00180c9 <KeGetFileFromDescriptor(int)+0x8a>
c00180c0:	8b 04 85 60 aa 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc55a0]
c00180c7:	eb 12                	jmp    c00180db <KeGetFileFromDescriptor(int)+0x9c>
c00180c9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00180cf:	83 fb 08             	cmp    ebx,0x8
c00180d2:	77 95                	ja     c0018069 <KeGetFileFromDescriptor(int)+0x2a>
c00180d4:	8b 04 9d 20 aa 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc55e0]
c00180db:	83 c4 08             	add    esp,0x8
c00180de:	5b                   	pop    ebx
c00180df:	c3                   	ret    

c00180e0 <__static_initialization_and_destruction_0(int, int)>:
c00180e0:	83 ec 0c             	sub    esp,0xc
c00180e3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00180e8:	75 34                	jne    c001811e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00180ea:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00180f2:	75 2a                	jne    c001811e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00180f4:	83 ec 0c             	sub    esp,0xc
c00180f7:	68 98 aa 03 c0       	push   0xc003aa98
c00180fc:	e8 a5 6a 01 00       	call   c002eba6 <LinkedList<UnixFile>::LinkedList()>
c0018101:	83 c4 10             	add    esp,0x10
c0018104:	83 ec 04             	sub    esp,0x4
c0018107:	68 98 3e 03 c0       	push   0xc0033e98
c001810c:	68 98 aa 03 c0       	push   0xc003aa98
c0018111:	68 a4 eb 02 c0       	push   0xc002eba4
c0018116:	e8 39 12 00 00       	call   c0019354 <__cxa_atexit>
c001811b:	83 c4 10             	add    esp,0x10
c001811e:	90                   	nop
c001811f:	83 c4 0c             	add    esp,0xc
c0018122:	c3                   	ret    

c0018123 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0018123:	83 ec 0c             	sub    esp,0xc
c0018126:	83 ec 08             	sub    esp,0x8
c0018129:	68 ff ff 00 00       	push   0xffff
c001812e:	6a 01                	push   0x1
c0018130:	e8 ab ff ff ff       	call   c00180e0 <__static_initialization_and_destruction_0(int, int)>
c0018135:	83 c4 10             	add    esp,0x10
c0018138:	83 c4 0c             	add    esp,0xc
c001813b:	c3                   	ret    

c001813c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001813c:	53                   	push   ebx
c001813d:	8b 15 28 3f 03 c0    	mov    edx,DWORD PTR ds:0xc0033f28
c0018143:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018147:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001814b:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0018151:	89 d8                	mov    eax,ebx
c0018153:	d1 e8                	shr    eax,1
c0018155:	01 d0                	add    eax,edx
c0018157:	80 e3 01             	and    bl,0x1
c001815a:	8a 10                	mov    dl,BYTE PTR [eax]
c001815c:	75 09                	jne    c0018167 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c001815e:	83 e2 f0             	and    edx,0xfffffff0
c0018161:	09 ca                	or     edx,ecx
c0018163:	88 10                	mov    BYTE PTR [eax],dl
c0018165:	5b                   	pop    ebx
c0018166:	c3                   	ret    
c0018167:	83 e2 0f             	and    edx,0xf
c001816a:	0f b6 c9             	movzx  ecx,cl
c001816d:	c1 e1 04             	shl    ecx,0x4
c0018170:	09 ca                	or     edx,ecx
c0018172:	88 10                	mov    BYTE PTR [eax],dl
c0018174:	5b                   	pop    ebx
c0018175:	c3                   	ret    

c0018176 <Virt::getPageState(unsigned long)>:
c0018176:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001817a:	8b 0d 28 3f 03 c0    	mov    ecx,DWORD PTR ds:0xc0033f28
c0018180:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0018186:	89 d0                	mov    eax,edx
c0018188:	d1 e8                	shr    eax,1
c001818a:	80 e2 01             	and    dl,0x1
c001818d:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0018190:	74 03                	je     c0018195 <Virt::getPageState(unsigned long)+0x1f>
c0018192:	c1 e8 04             	shr    eax,0x4
c0018195:	83 e0 0f             	and    eax,0xf
c0018198:	c3                   	ret    

c0018199 <Virt::allocateKernelVirtualPages(int)>:
c0018199:	55                   	push   ebp
c001819a:	31 ed                	xor    ebp,ebp
c001819c:	57                   	push   edi
c001819d:	31 ff                	xor    edi,edi
c001819f:	56                   	push   esi
c00181a0:	53                   	push   ebx
c00181a1:	31 db                	xor    ebx,ebx
c00181a3:	83 ec 0c             	sub    esp,0xc
c00181a6:	8b 35 24 3f 03 c0    	mov    esi,DWORD PTR ds:0xc0033f24
c00181ac:	56                   	push   esi
c00181ad:	e8 c4 ff ff ff       	call   c0018176 <Virt::getPageState(unsigned long)>
c00181b2:	5a                   	pop    edx
c00181b3:	84 c0                	test   al,al
c00181b5:	75 41                	jne    c00181f8 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00181b7:	85 db                	test   ebx,ebx
c00181b9:	75 02                	jne    c00181bd <Virt::allocateKernelVirtualPages(int)+0x24>
c00181bb:	89 f5                	mov    ebp,esi
c00181bd:	83 c3 01             	add    ebx,0x1
c00181c0:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00181c4:	74 5f                	je     c0018225 <Virt::allocateKernelVirtualPages(int)+0x8c>
c00181c6:	83 c6 01             	add    esi,0x1
c00181c9:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c00181cf:	76 34                	jbe    c0018205 <Virt::allocateKernelVirtualPages(int)+0x6c>
c00181d1:	c7 05 24 3f 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0033f24,0xc8000
c00181db:	f7 c7 01 00 00 00    	test   edi,0x1
c00181e1:	75 2a                	jne    c001820d <Virt::allocateKernelVirtualPages(int)+0x74>
c00181e3:	be 00 80 0c 00       	mov    esi,0xc8000
c00181e8:	bf 01 00 00 00       	mov    edi,0x1
c00181ed:	56                   	push   esi
c00181ee:	e8 83 ff ff ff       	call   c0018176 <Virt::getPageState(unsigned long)>
c00181f3:	5a                   	pop    edx
c00181f4:	84 c0                	test   al,al
c00181f6:	74 bf                	je     c00181b7 <Virt::allocateKernelVirtualPages(int)+0x1e>
c00181f8:	31 db                	xor    ebx,ebx
c00181fa:	83 c6 01             	add    esi,0x1
c00181fd:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0018203:	77 cc                	ja     c00181d1 <Virt::allocateKernelVirtualPages(int)+0x38>
c0018205:	89 35 24 3f 03 c0    	mov    DWORD PTR ds:0xc0033f24,esi
c001820b:	eb 9f                	jmp    c00181ac <Virt::allocateKernelVirtualPages(int)+0x13>
c001820d:	83 ec 0c             	sub    esp,0xc
c0018210:	68 e0 16 03 c0       	push   0xc00316e0
c0018215:	e8 d0 82 00 00       	call   c00204ea <KePanic(char const*)>
c001821a:	8b 35 24 3f 03 c0    	mov    esi,DWORD PTR ds:0xc0033f24
c0018220:	83 c4 10             	add    esp,0x10
c0018223:	eb 87                	jmp    c00181ac <Virt::allocateKernelVirtualPages(int)+0x13>
c0018225:	89 2d 24 3f 03 c0    	mov    DWORD PTR ds:0xc0033f24,ebp
c001822b:	83 fb 01             	cmp    ebx,0x1
c001822e:	74 6f                	je     c001829f <Virt::allocateKernelVirtualPages(int)+0x106>
c0018230:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0018234:	85 c9                	test   ecx,ecx
c0018236:	74 49                	je     c0018281 <Virt::allocateKernelVirtualPages(int)+0xe8>
c0018238:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001823c:	89 e8                	mov    eax,ebp
c001823e:	31 db                	xor    ebx,ebx
c0018240:	8d 79 ff             	lea    edi,[ecx-0x1]
c0018243:	eb 18                	jmp    c001825d <Virt::allocateKernelVirtualPages(int)+0xc4>
c0018245:	6a 01                	push   0x1
c0018247:	83 c3 01             	add    ebx,0x1
c001824a:	50                   	push   eax
c001824b:	e8 ec fe ff ff       	call   c001813c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018250:	58                   	pop    eax
c0018251:	5a                   	pop    edx
c0018252:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0018256:	74 29                	je     c0018281 <Virt::allocateKernelVirtualPages(int)+0xe8>
c0018258:	a1 24 3f 03 c0       	mov    eax,ds:0xc0033f24
c001825d:	8d 50 01             	lea    edx,[eax+0x1]
c0018260:	85 db                	test   ebx,ebx
c0018262:	89 15 24 3f 03 c0    	mov    DWORD PTR ds:0xc0033f24,edx
c0018268:	74 24                	je     c001828e <Virt::allocateKernelVirtualPages(int)+0xf5>
c001826a:	39 df                	cmp    edi,ebx
c001826c:	75 d7                	jne    c0018245 <Virt::allocateKernelVirtualPages(int)+0xac>
c001826e:	6a 03                	push   0x3
c0018270:	83 c3 01             	add    ebx,0x1
c0018273:	50                   	push   eax
c0018274:	e8 c3 fe ff ff       	call   c001813c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018279:	59                   	pop    ecx
c001827a:	5e                   	pop    esi
c001827b:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c001827f:	75 d7                	jne    c0018258 <Virt::allocateKernelVirtualPages(int)+0xbf>
c0018281:	83 c4 0c             	add    esp,0xc
c0018284:	89 e8                	mov    eax,ebp
c0018286:	5b                   	pop    ebx
c0018287:	c1 e0 0c             	shl    eax,0xc
c001828a:	5e                   	pop    esi
c001828b:	5f                   	pop    edi
c001828c:	5d                   	pop    ebp
c001828d:	c3                   	ret    
c001828e:	6a 02                	push   0x2
c0018290:	bb 01 00 00 00       	mov    ebx,0x1
c0018295:	50                   	push   eax
c0018296:	e8 a1 fe ff ff       	call   c001813c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001829b:	58                   	pop    eax
c001829c:	5a                   	pop    edx
c001829d:	eb b9                	jmp    c0018258 <Virt::allocateKernelVirtualPages(int)+0xbf>
c001829f:	6a 04                	push   0x4
c00182a1:	8d 45 01             	lea    eax,[ebp+0x1]
c00182a4:	55                   	push   ebp
c00182a5:	a3 24 3f 03 c0       	mov    ds:0xc0033f24,eax
c00182aa:	e8 8d fe ff ff       	call   c001813c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00182af:	5b                   	pop    ebx
c00182b0:	89 e8                	mov    eax,ebp
c00182b2:	5e                   	pop    esi
c00182b3:	c1 e0 0c             	shl    eax,0xc
c00182b6:	83 c4 0c             	add    esp,0xc
c00182b9:	5b                   	pop    ebx
c00182ba:	5e                   	pop    esi
c00182bb:	5f                   	pop    edi
c00182bc:	5d                   	pop    ebp
c00182bd:	c3                   	ret    

c00182be <Virt::freeSwapfilePage(unsigned long)>:
c00182be:	53                   	push   ebx
c00182bf:	8b 15 ac aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaac
c00182c5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00182c9:	b8 01 00 00 00       	mov    eax,0x1
c00182ce:	89 cb                	mov    ebx,ecx
c00182d0:	d3 e0                	shl    eax,cl
c00182d2:	c1 eb 05             	shr    ebx,0x5
c00182d5:	f7 d0                	not    eax
c00182d7:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c00182da:	21 c1                	and    ecx,eax
c00182dc:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c00182df:	5b                   	pop    ebx
c00182e0:	c3                   	ret    

c00182e1 <Virt::swapIDToSector(unsigned long)>:
c00182e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182e5:	8b 15 2c 3f 03 c0    	mov    edx,DWORD PTR ds:0xc0033f2c
c00182eb:	8b 0d 34 3f 03 c0    	mov    ecx,DWORD PTR ds:0xc0033f34
c00182f1:	0f af c2             	imul   eax,edx
c00182f4:	01 c8                	add    eax,ecx
c00182f6:	c3                   	ret    

c00182f7 <Virt::allocateSwapfilePage()>:
c00182f7:	55                   	push   ebp
c00182f8:	31 d2                	xor    edx,edx
c00182fa:	57                   	push   edi
c00182fb:	56                   	push   esi
c00182fc:	53                   	push   ebx
c00182fd:	83 ec 0c             	sub    esp,0xc
c0018300:	8b 0d 2c 3f 03 c0    	mov    ecx,DWORD PTR ds:0xc0033f2c
c0018306:	a1 30 3f 03 c0       	mov    eax,ds:0xc0033f30
c001830b:	f7 f1                	div    ecx
c001830d:	39 0d 30 3f 03 c0    	cmp    DWORD PTR ds:0xc0033f30,ecx
c0018313:	72 2f                	jb     c0018344 <Virt::allocateSwapfilePage()+0x4d>
c0018315:	8b 35 ac aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aaac
c001831b:	8b 16                	mov    edx,DWORD PTR [esi]
c001831d:	f6 c2 01             	test   dl,0x1
c0018320:	74 3e                	je     c0018360 <Virt::allocateSwapfilePage()+0x69>
c0018322:	31 c9                	xor    ecx,ecx
c0018324:	bf 01 00 00 00       	mov    edi,0x1
c0018329:	eb 12                	jmp    c001833d <Virt::allocateSwapfilePage()+0x46>
c001832b:	89 fd                	mov    ebp,edi
c001832d:	89 ca                	mov    edx,ecx
c001832f:	d3 e5                	shl    ebp,cl
c0018331:	c1 ea 05             	shr    edx,0x5
c0018334:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0018337:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018339:	85 ea                	test   edx,ebp
c001833b:	74 2c                	je     c0018369 <Virt::allocateSwapfilePage()+0x72>
c001833d:	83 c1 01             	add    ecx,0x1
c0018340:	39 c8                	cmp    eax,ecx
c0018342:	77 e7                	ja     c001832b <Virt::allocateSwapfilePage()+0x34>
c0018344:	83 ec 0c             	sub    esp,0xc
c0018347:	68 74 19 03 c0       	push   0xc0031974
c001834c:	e8 99 81 00 00       	call   c00204ea <KePanic(char const*)>
c0018351:	83 c4 10             	add    esp,0x10
c0018354:	31 c9                	xor    ecx,ecx
c0018356:	83 c4 0c             	add    esp,0xc
c0018359:	89 c8                	mov    eax,ecx
c001835b:	5b                   	pop    ebx
c001835c:	5e                   	pop    esi
c001835d:	5f                   	pop    edi
c001835e:	5d                   	pop    ebp
c001835f:	c3                   	ret    
c0018360:	89 f3                	mov    ebx,esi
c0018362:	bd 01 00 00 00       	mov    ebp,0x1
c0018367:	31 c9                	xor    ecx,ecx
c0018369:	09 ea                	or     edx,ebp
c001836b:	89 c8                	mov    eax,ecx
c001836d:	89 13                	mov    DWORD PTR [ebx],edx
c001836f:	83 c4 0c             	add    esp,0xc
c0018372:	5b                   	pop    ebx
c0018373:	5e                   	pop    esi
c0018374:	5f                   	pop    edi
c0018375:	5d                   	pop    ebp
c0018376:	c3                   	ret    

c0018377 <Virt::virtualMemorySetup()>:
c0018377:	53                   	push   ebx
c0018378:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001837d:	6a 0f                	push   0xf
c001837f:	53                   	push   ebx
c0018380:	83 c3 01             	add    ebx,0x1
c0018383:	e8 b4 fd ff ff       	call   c001813c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018388:	58                   	pop    eax
c0018389:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001838f:	5a                   	pop    edx
c0018390:	75 eb                	jne    c001837d <Virt::virtualMemorySetup()+0x6>
c0018392:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0018397:	6a 00                	push   0x0
c0018399:	53                   	push   ebx
c001839a:	83 c3 01             	add    ebx,0x1
c001839d:	e8 9a fd ff ff       	call   c001813c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00183a2:	59                   	pop    ecx
c00183a3:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00183a9:	58                   	pop    eax
c00183aa:	75 eb                	jne    c0018397 <Virt::virtualMemorySetup()+0x20>
c00183ac:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00183b1:	6a 0f                	push   0xf
c00183b3:	53                   	push   ebx
c00183b4:	83 c3 01             	add    ebx,0x1
c00183b7:	e8 80 fd ff ff       	call   c001813c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00183bc:	58                   	pop    eax
c00183bd:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00183c3:	5a                   	pop    edx
c00183c4:	75 eb                	jne    c00183b1 <Virt::virtualMemorySetup()+0x3a>
c00183c6:	5b                   	pop    ebx
c00183c7:	c3                   	ret    

c00183c8 <Virt::setupPageSwapping(int)>:
c00183c8:	53                   	push   ebx
c00183c9:	83 ec 0c             	sub    esp,0xc
c00183cc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00183d0:	a1 88 f3 03 c0       	mov    eax,ds:0xc003f388
c00183d5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00183db:	8b 10                	mov    edx,DWORD PTR [eax]
c00183dd:	53                   	push   ebx
c00183de:	c1 e3 0b             	shl    ebx,0xb
c00183e1:	68 8b 19 03 c0       	push   0xc003198b
c00183e6:	50                   	push   eax
c00183e7:	ff 52 60             	call   DWORD PTR [edx+0x60]
c00183ea:	89 1d 30 3f 03 c0    	mov    DWORD PTR ds:0xc0033f30,ebx
c00183f0:	c6 05 38 3f 03 c0 43 	mov    BYTE PTR ds:0xc0033f38,0x43
c00183f7:	c1 eb 08             	shr    ebx,0x8
c00183fa:	a3 34 3f 03 c0       	mov    ds:0xc0033f34,eax
c00183ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018402:	c7 05 2c 3f 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0033f2c,0x8
c001840c:	e8 32 e2 ff ff       	call   c0016643 <malloc>
c0018411:	83 c4 0c             	add    esp,0xc
c0018414:	89 c1                	mov    ecx,eax
c0018416:	a3 ac aa 03 c0       	mov    ds:0xc003aaac,eax
c001841b:	31 d2                	xor    edx,edx
c001841d:	a1 30 3f 03 c0       	mov    eax,ds:0xc0033f30
c0018422:	f7 35 2c 3f 03 c0    	div    DWORD PTR ds:0xc0033f2c
c0018428:	c1 e8 05             	shr    eax,0x5
c001842b:	50                   	push   eax
c001842c:	6a 00                	push   0x0
c001842e:	51                   	push   ecx
c001842f:	e8 bc 80 fe ff       	call   c00004f0 <memset>
c0018434:	83 c4 18             	add    esp,0x18
c0018437:	5b                   	pop    ebx
c0018438:	c3                   	ret    
c0018439:	90                   	nop

c001843a <VAS::setCPUSpecific(unsigned long)>:
c001843a:	c3                   	ret    
c001843b:	90                   	nop

c001843c <VAS::VAS(VAS*)>:
c001843c:	83 ec 0c             	sub    esp,0xc
c001843f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018443:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001844a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001844e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018455:	83 ec 0c             	sub    esp,0xc
c0018458:	68 00 17 03 c0       	push   0xc0031700
c001845d:	e8 88 80 00 00       	call   c00204ea <KePanic(char const*)>
c0018462:	83 c4 10             	add    esp,0x10
c0018465:	90                   	nop
c0018466:	83 c4 0c             	add    esp,0xc
c0018469:	c3                   	ret    

c001846a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001846a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001846e:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0018473:	89 c2                	mov    edx,eax
c0018475:	c1 e8 0a             	shr    eax,0xa
c0018478:	c1 ea 16             	shr    edx,0x16
c001847b:	83 f9 01             	cmp    ecx,0x1
c001847e:	19 c9                	sbb    ecx,ecx
c0018480:	c1 e2 0c             	shl    edx,0xc
c0018483:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0018489:	25 fc 0f 00 00       	and    eax,0xffc
c001848e:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0018495:	01 d0                	add    eax,edx
c0018497:	c3                   	ret    

c0018498 <VAS::getPageTableEntry(unsigned long)>:
c0018498:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001849c:	89 ca                	mov    edx,ecx
c001849e:	c1 e9 0a             	shr    ecx,0xa
c00184a1:	c1 ea 16             	shr    edx,0x16
c00184a4:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00184aa:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00184b0:	c1 e0 0c             	shl    eax,0xc
c00184b3:	8d 04 08             	lea    eax,[eax+ecx*1]
c00184b6:	c3                   	ret    

c00184b7 <Virt::freeKernelVirtualPages(unsigned long)>:
c00184b7:	55                   	push   ebp
c00184b8:	57                   	push   edi
c00184b9:	bf 01 00 00 00       	mov    edi,0x1
c00184be:	56                   	push   esi
c00184bf:	53                   	push   ebx
c00184c0:	83 ec 1c             	sub    esp,0x1c
c00184c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00184c7:	c1 ee 0c             	shr    esi,0xc
c00184ca:	eb 48                	jmp    c0018514 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c00184cc:	83 ec 08             	sub    esp,0x8
c00184cf:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c00184d4:	55                   	push   ebp
c00184d5:	50                   	push   eax
c00184d6:	e8 bd ff ff ff       	call   c0018498 <VAS::getPageTableEntry(unsigned long)>
c00184db:	83 c4 10             	add    esp,0x10
c00184de:	8b 10                	mov    edx,DWORD PTR [eax]
c00184e0:	f6 c6 04             	test   dh,0x4
c00184e3:	75 70                	jne    c0018555 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00184e5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00184eb:	83 fb 04             	cmp    ebx,0x4
c00184ee:	0f 84 8a 00 00 00    	je     c001857e <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00184f4:	83 fb 02             	cmp    ebx,0x2
c00184f7:	0f 84 9a 00 00 00    	je     c0018597 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c00184fd:	83 fb 03             	cmp    ebx,0x3
c0018500:	0f 84 be 00 00 00    	je     c00185c4 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0018506:	83 fb 01             	cmp    ebx,0x1
c0018509:	0f 84 a2 00 00 00    	je     c00185b1 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c001850f:	83 c6 01             	add    esi,0x1
c0018512:	31 ff                	xor    edi,edi
c0018514:	56                   	push   esi
c0018515:	89 f5                	mov    ebp,esi
c0018517:	e8 5a fc ff ff       	call   c0018176 <Virt::getPageState(unsigned long)>
c001851c:	c1 e5 0c             	shl    ebp,0xc
c001851f:	0f b6 d8             	movzx  ebx,al
c0018522:	5a                   	pop    edx
c0018523:	85 db                	test   ebx,ebx
c0018525:	75 a5                	jne    c00184cc <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0018527:	83 ec 0c             	sub    esp,0xc
c001852a:	68 a2 19 03 c0       	push   0xc00319a2
c001852f:	e8 b6 7f 00 00       	call   c00204ea <KePanic(char const*)>
c0018534:	5a                   	pop    edx
c0018535:	59                   	pop    ecx
c0018536:	55                   	push   ebp
c0018537:	8b 2d b0 aa 03 c0    	mov    ebp,DWORD PTR ds:0xc003aab0
c001853d:	55                   	push   ebp
c001853e:	e8 55 ff ff ff       	call   c0018498 <VAS::getPageTableEntry(unsigned long)>
c0018543:	83 c4 10             	add    esp,0x10
c0018546:	8b 10                	mov    edx,DWORD PTR [eax]
c0018548:	f6 c6 04             	test   dh,0x4
c001854b:	75 08                	jne    c0018555 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001854d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0018553:	eb ba                	jmp    c001850f <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018555:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018559:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001855f:	83 ec 0c             	sub    esp,0xc
c0018562:	52                   	push   edx
c0018563:	e8 7b e3 ff ff       	call   c00168e3 <Phys::freePage(unsigned long)>
c0018568:	83 c4 10             	add    esp,0x10
c001856b:	83 fb 04             	cmp    ebx,0x4
c001856e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018572:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0018578:	0f 85 76 ff ff ff    	jne    c00184f4 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c001857e:	83 e7 01             	and    edi,0x1
c0018581:	75 46                	jne    c00185c9 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0018583:	c7 44 24 30 24 17 03 c0 	mov    DWORD PTR [esp+0x30],0xc0031724
c001858b:	83 c4 1c             	add    esp,0x1c
c001858e:	5b                   	pop    ebx
c001858f:	5e                   	pop    esi
c0018590:	5f                   	pop    edi
c0018591:	5d                   	pop    ebp
c0018592:	e9 53 7f 00 00       	jmp    c00204ea <KePanic(char const*)>
c0018597:	83 e7 01             	and    edi,0x1
c001859a:	75 15                	jne    c00185b1 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c001859c:	83 ec 0c             	sub    esp,0xc
c001859f:	68 be 19 03 c0       	push   0xc00319be
c00185a4:	e8 41 7f 00 00       	call   c00204ea <KePanic(char const*)>
c00185a9:	83 c4 10             	add    esp,0x10
c00185ac:	e9 5e ff ff ff       	jmp    c001850f <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00185b1:	83 ec 08             	sub    esp,0x8
c00185b4:	6a 00                	push   0x0
c00185b6:	56                   	push   esi
c00185b7:	e8 80 fb ff ff       	call   c001813c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00185bc:	83 c4 10             	add    esp,0x10
c00185bf:	e9 4b ff ff ff       	jmp    c001850f <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00185c4:	83 e7 01             	and    edi,0x1
c00185c7:	75 16                	jne    c00185df <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c00185c9:	83 ec 08             	sub    esp,0x8
c00185cc:	6a 00                	push   0x0
c00185ce:	56                   	push   esi
c00185cf:	e8 68 fb ff ff       	call   c001813c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00185d4:	83 c4 10             	add    esp,0x10
c00185d7:	83 c4 1c             	add    esp,0x1c
c00185da:	5b                   	pop    ebx
c00185db:	5e                   	pop    esi
c00185dc:	5f                   	pop    edi
c00185dd:	5d                   	pop    ebp
c00185de:	c3                   	ret    
c00185df:	c7 44 24 30 da 19 03 c0 	mov    DWORD PTR [esp+0x30],0xc00319da
c00185e7:	83 c4 1c             	add    esp,0x1c
c00185ea:	5b                   	pop    ebx
c00185eb:	5e                   	pop    esi
c00185ec:	5f                   	pop    edi
c00185ed:	5d                   	pop    ebp
c00185ee:	e9 f7 7e 00 00       	jmp    c00204ea <KePanic(char const*)>
c00185f3:	90                   	nop

c00185f4 <VAS::freeAllocatedPages(unsigned long)>:
c00185f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00185f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185fc:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0018600:	74 09                	je     c001860b <VAS::freeAllocatedPages(unsigned long)+0x17>
c0018602:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018606:	e9 ac fe ff ff       	jmp    c00184b7 <Virt::freeKernelVirtualPages(unsigned long)>
c001860b:	c7 44 24 04 48 17 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031748
c0018613:	e9 b9 0e 00 00       	jmp    c00194d1 <Dbg::kprintf(char const*, ...)>

c0018618 <VAS::virtualToPhysical(unsigned long)>:
c0018618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001861c:	50                   	push   eax
c001861d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018621:	52                   	push   edx
c0018622:	e8 71 fe ff ff       	call   c0018498 <VAS::getPageTableEntry(unsigned long)>
c0018627:	59                   	pop    ecx
c0018628:	8b 00                	mov    eax,DWORD PTR [eax]
c001862a:	5a                   	pop    edx
c001862b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018630:	c3                   	ret    
c0018631:	90                   	nop

c0018632 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0018632:	55                   	push   ebp
c0018633:	57                   	push   edi
c0018634:	56                   	push   esi
c0018635:	53                   	push   ebx
c0018636:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001863a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001863e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018642:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018646:	85 db                	test   ebx,ebx
c0018648:	7e 24                	jle    c001866e <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c001864a:	c1 e3 0c             	shl    ebx,0xc
c001864d:	01 f3                	add    ebx,esi
c001864f:	56                   	push   esi
c0018650:	81 c6 00 10 00 00    	add    esi,0x1000
c0018656:	55                   	push   ebp
c0018657:	e8 3c fe ff ff       	call   c0018498 <VAS::getPageTableEntry(unsigned long)>
c001865c:	5a                   	pop    edx
c001865d:	59                   	pop    ecx
c001865e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0018660:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018664:	21 f9                	and    ecx,edi
c0018666:	09 d1                	or     ecx,edx
c0018668:	39 f3                	cmp    ebx,esi
c001866a:	89 08                	mov    DWORD PTR [eax],ecx
c001866c:	75 e1                	jne    c001864f <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c001866e:	5b                   	pop    ebx
c001866f:	5e                   	pop    esi
c0018670:	5f                   	pop    edi
c0018671:	5d                   	pop    ebp
c0018672:	c3                   	ret    
c0018673:	90                   	nop

c0018674 <VAS::VAS()>:
c0018674:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018678:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001867f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018683:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001868a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001868e:	a3 b0 aa 03 c0       	mov    ds:0xc003aab0,eax
c0018693:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018697:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001869b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001869f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00186a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186a6:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00186ad:	ba 7d 50 03 c0       	mov    edx,0xc003507d
c00186b2:	b8 00 50 03 c0       	mov    eax,0xc0035000
c00186b7:	29 c2                	sub    edx,eax
c00186b9:	89 d0                	mov    eax,edx
c00186bb:	05 ff 0f 00 00       	add    eax,0xfff
c00186c0:	c1 e8 0c             	shr    eax,0xc
c00186c3:	89 c2                	mov    edx,eax
c00186c5:	b8 00 50 03 c0       	mov    eax,0xc0035000
c00186ca:	6a 04                	push   0x4
c00186cc:	6a ff                	push   0xffffffff
c00186ce:	52                   	push   edx
c00186cf:	50                   	push   eax
c00186d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00186d4:	e8 59 ff ff ff       	call   c0018632 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00186d9:	83 c4 14             	add    esp,0x14
c00186dc:	90                   	nop
c00186dd:	c3                   	ret    

c00186de <VAS::setToWriteCombining(unsigned long, int)>:
c00186de:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00186e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00186e9:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c00186f0:	75 01                	jne    c00186f3 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00186f2:	c3                   	ret    
c00186f3:	68 80 00 00 00       	push   0x80
c00186f8:	6a ff                	push   0xffffffff
c00186fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186fe:	50                   	push   eax
c00186ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018703:	52                   	push   edx
c0018704:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018708:	51                   	push   ecx
c0018709:	e8 24 ff ff ff       	call   c0018632 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001870e:	83 c4 14             	add    esp,0x14
c0018711:	c3                   	ret    

c0018712 <VAS::mapOtherVASIn(bool, VAS*)>:
c0018712:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018716:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001871d:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0018720:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018725:	83 f8 01             	cmp    eax,0x1
c0018728:	19 c0                	sbb    eax,eax
c001872a:	83 ca 03             	or     edx,0x3
c001872d:	83 e0 fc             	and    eax,0xfffffffc
c0018730:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0018737:	0f 20 d8             	mov    eax,cr3
c001873a:	0f 22 d8             	mov    cr3,eax
c001873d:	c3                   	ret    

c001873e <VAS::~VAS()>:
c001873e:	83 ec 2c             	sub    esp,0x2c
c0018741:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018749:	fa                   	cli    
c001874a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001874f:	83 c0 01             	add    eax,0x1
c0018752:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0018757:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001875c:	8b 00                	mov    eax,DWORD PTR [eax]
c001875e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018761:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018767:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001876b:	6a 01                	push   0x1
c001876d:	50                   	push   eax
c001876e:	e8 9f ff ff ff       	call   c0018712 <VAS::mapOtherVASIn(bool, VAS*)>
c0018773:	83 c4 0c             	add    esp,0xc
c0018776:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001877e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0018786:	0f 8f d8 00 00 00    	jg     c0018864 <VAS::~VAS()+0x126>
c001878c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018790:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018793:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018797:	c1 e2 02             	shl    edx,0x2
c001879a:	01 d0                	add    eax,edx
c001879c:	8b 00                	mov    eax,DWORD PTR [eax]
c001879e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00187a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187a6:	83 e0 01             	and    eax,0x1
c00187a9:	0f 84 ab 00 00 00    	je     c001885a <VAS::~VAS()+0x11c>
c00187af:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00187b7:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00187bf:	7f 74                	jg     c0018835 <VAS::~VAS()+0xf7>
c00187c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00187c5:	c1 e0 0a             	shl    eax,0xa
c00187c8:	89 c2                	mov    edx,eax
c00187ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187ce:	01 d0                	add    eax,edx
c00187d0:	c1 e0 0c             	shl    eax,0xc
c00187d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00187d7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00187dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00187de:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00187e1:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00187e7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00187eb:	6a 01                	push   0x1
c00187ed:	50                   	push   eax
c00187ee:	e8 77 fc ff ff       	call   c001846a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00187f3:	83 c4 0c             	add    esp,0xc
c00187f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00187fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0018800:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018808:	25 01 04 00 00       	and    eax,0x401
c001880d:	3d 01 04 00 00       	cmp    eax,0x401
c0018812:	75 1a                	jne    c001882e <VAS::~VAS()+0xf0>
c0018814:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018818:	25 00 f0 ff ff       	and    eax,0xfffff000
c001881d:	83 ec 0c             	sub    esp,0xc
c0018820:	50                   	push   eax
c0018821:	e8 bd e0 ff ff       	call   c00168e3 <Phys::freePage(unsigned long)>
c0018826:	83 c4 10             	add    esp,0x10
c0018829:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001882e:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0018833:	eb 82                	jmp    c00187b7 <VAS::~VAS()+0x79>
c0018835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018839:	25 00 04 00 00       	and    eax,0x400
c001883e:	74 1a                	je     c001885a <VAS::~VAS()+0x11c>
c0018840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018844:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018849:	83 ec 0c             	sub    esp,0xc
c001884c:	50                   	push   eax
c001884d:	e8 91 e0 ff ff       	call   c00168e3 <Phys::freePage(unsigned long)>
c0018852:	83 c4 10             	add    esp,0x10
c0018855:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001885a:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001885f:	e9 1a ff ff ff       	jmp    c001877e <VAS::~VAS()+0x40>
c0018864:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018868:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001886b:	83 ec 0c             	sub    esp,0xc
c001886e:	50                   	push   eax
c001886f:	e8 43 fc ff ff       	call   c00184b7 <Virt::freeKernelVirtualPages(unsigned long)>
c0018874:	83 c4 10             	add    esp,0x10
c0018877:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001887b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001887e:	83 ec 0c             	sub    esp,0xc
c0018881:	50                   	push   eax
c0018882:	e8 5c e0 ff ff       	call   c00168e3 <Phys::freePage(unsigned long)>
c0018887:	83 c4 10             	add    esp,0x10
c001888a:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001888f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018894:	83 e8 01             	sub    eax,0x1
c0018897:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001889c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00188a1:	85 c0                	test   eax,eax
c00188a3:	75 01                	jne    c00188a6 <VAS::~VAS()+0x168>
c00188a5:	fb                   	sti    
c00188a6:	90                   	nop
c00188a7:	83 c4 2c             	add    esp,0x2c
c00188aa:	c3                   	ret    
c00188ab:	90                   	nop

c00188ac <VAS::mapPage(unsigned long, unsigned long, int)>:
c00188ac:	55                   	push   ebp
c00188ad:	57                   	push   edi
c00188ae:	56                   	push   esi
c00188af:	53                   	push   ebx
c00188b0:	83 ec 1c             	sub    esp,0x1c
c00188b3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00188b7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00188bb:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00188c1:	77 08                	ja     c00188cb <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00188c3:	0f 20 d8             	mov    eax,cr3
c00188c6:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00188c9:	75 49                	jne    c0018914 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c00188cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00188cf:	09 d8                	or     eax,ebx
c00188d1:	a9 ff 0f 00 00       	test   eax,0xfff
c00188d6:	75 59                	jne    c0018931 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c00188d8:	89 de                	mov    esi,ebx
c00188da:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00188dd:	c1 ee 16             	shr    esi,0x16
c00188e0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00188e7:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00188eb:	74 56                	je     c0018943 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c00188ed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00188f1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00188f5:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00188fb:	c1 eb 0a             	shr    ebx,0xa
c00188fe:	c1 e6 0c             	shl    esi,0xc
c0018901:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0018907:	09 d0                	or     eax,edx
c0018909:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001890c:	83 c4 1c             	add    esp,0x1c
c001890f:	5b                   	pop    ebx
c0018910:	5e                   	pop    esi
c0018911:	5f                   	pop    edi
c0018912:	5d                   	pop    ebp
c0018913:	c3                   	ret    
c0018914:	83 ec 0c             	sub    esp,0xc
c0018917:	68 6c 17 03 c0       	push   0xc003176c
c001891c:	e8 b0 0b 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0018921:	83 c4 10             	add    esp,0x10
c0018924:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018928:	09 d8                	or     eax,ebx
c001892a:	a9 ff 0f 00 00       	test   eax,0xfff
c001892f:	74 a7                	je     c00188d8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0018931:	83 ec 0c             	sub    esp,0xc
c0018934:	68 d4 17 03 c0       	push   0xc00317d4
c0018939:	e8 ac 7b 00 00       	call   c00204ea <KePanic(char const*)>
c001893e:	83 c4 10             	add    esp,0x10
c0018941:	eb 95                	jmp    c00188d8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0018943:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018947:	e8 00 e0 ff ff       	call   c001694c <Phys::allocatePage()>
c001894c:	83 ec 0c             	sub    esp,0xc
c001894f:	89 c5                	mov    ebp,eax
c0018951:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c0018957:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001895b:	6a 01                	push   0x1
c001895d:	e8 37 f8 ff ff       	call   c0018199 <Virt::allocateKernelVirtualPages(int)>
c0018962:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018969:	6a 01                	push   0x1
c001896b:	50                   	push   eax
c001896c:	55                   	push   ebp
c001896d:	81 cd 07 04 00 00    	or     ebp,0x407
c0018973:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0018977:	51                   	push   ecx
c0018978:	e8 29 01 00 00       	call   c0018aa6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001897d:	83 c4 1c             	add    esp,0x1c
c0018980:	68 00 10 00 00       	push   0x1000
c0018985:	6a 00                	push   0x0
c0018987:	50                   	push   eax
c0018988:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001898c:	e8 5f 7b fe ff       	call   c00004f0 <memset>
c0018991:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018995:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018998:	e8 1a fb ff ff       	call   c00184b7 <Virt::freeKernelVirtualPages(unsigned long)>
c001899d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00189a1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00189a4:	83 c4 10             	add    esp,0x10
c00189a7:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00189aa:	e9 3e ff ff ff       	jmp    c00188ed <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c00189af:	90                   	nop

c00189b0 <VAS::allocatePages(int, int)>:
c00189b0:	55                   	push   ebp
c00189b1:	57                   	push   edi
c00189b2:	56                   	push   esi
c00189b3:	53                   	push   ebx
c00189b4:	83 ec 1c             	sub    esp,0x1c
c00189b7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00189bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00189bf:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c00189c3:	75 71                	jne    c0018a36 <VAS::allocatePages(int, int)+0x86>
c00189c5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00189c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00189cc:	85 c0                	test   eax,eax
c00189ce:	74 4d                	je     c0018a1d <VAS::allocatePages(int, int)+0x6d>
c00189d0:	89 dd                	mov    ebp,ebx
c00189d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00189d6:	c1 e5 0c             	shl    ebp,0xc
c00189d9:	01 c5                	add    ebp,eax
c00189db:	85 db                	test   ebx,ebx
c00189dd:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00189e0:	7e 29                	jle    c0018a0b <VAS::allocatePages(int, int)+0x5b>
c00189e2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00189e6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00189ea:	81 cf 00 04 00 00    	or     edi,0x400
c00189f0:	e8 57 df ff ff       	call   c001694c <Phys::allocatePage()>
c00189f5:	57                   	push   edi
c00189f6:	53                   	push   ebx
c00189f7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00189fd:	50                   	push   eax
c00189fe:	56                   	push   esi
c00189ff:	e8 a8 fe ff ff       	call   c00188ac <VAS::mapPage(unsigned long, unsigned long, int)>
c0018a04:	83 c4 10             	add    esp,0x10
c0018a07:	39 dd                	cmp    ebp,ebx
c0018a09:	75 e5                	jne    c00189f0 <VAS::allocatePages(int, int)+0x40>
c0018a0b:	0f 20 d8             	mov    eax,cr3
c0018a0e:	0f 22 d8             	mov    cr3,eax
c0018a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018a15:	83 c4 1c             	add    esp,0x1c
c0018a18:	5b                   	pop    ebx
c0018a19:	5e                   	pop    esi
c0018a1a:	5f                   	pop    edi
c0018a1b:	5d                   	pop    ebp
c0018a1c:	c3                   	ret    
c0018a1d:	83 ec 0c             	sub    esp,0xc
c0018a20:	68 f8 17 03 c0       	push   0xc00317f8
c0018a25:	e8 c0 7a 00 00       	call   c00204ea <KePanic(char const*)>
c0018a2a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0018a2d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018a31:	83 c4 10             	add    esp,0x10
c0018a34:	eb 9a                	jmp    c00189d0 <VAS::allocatePages(int, int)+0x20>
c0018a36:	83 ec 0c             	sub    esp,0xc
c0018a39:	53                   	push   ebx
c0018a3a:	e8 5a f7 ff ff       	call   c0018199 <Virt::allocateKernelVirtualPages(int)>
c0018a3f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018a43:	83 c4 10             	add    esp,0x10
c0018a46:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0018a4b:	77 37                	ja     c0018a84 <VAS::allocatePages(int, int)+0xd4>
c0018a4d:	85 db                	test   ebx,ebx
c0018a4f:	7e ba                	jle    c0018a0b <VAS::allocatePages(int, int)+0x5b>
c0018a51:	c1 e3 0c             	shl    ebx,0xc
c0018a54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018a58:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0018a5c:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0018a5f:	81 cf 00 04 00 00    	or     edi,0x400
c0018a65:	89 c3                	mov    ebx,eax
c0018a67:	e8 e0 de ff ff       	call   c001694c <Phys::allocatePage()>
c0018a6c:	57                   	push   edi
c0018a6d:	53                   	push   ebx
c0018a6e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018a74:	50                   	push   eax
c0018a75:	56                   	push   esi
c0018a76:	e8 31 fe ff ff       	call   c00188ac <VAS::mapPage(unsigned long, unsigned long, int)>
c0018a7b:	83 c4 10             	add    esp,0x10
c0018a7e:	39 dd                	cmp    ebp,ebx
c0018a80:	75 e5                	jne    c0018a67 <VAS::allocatePages(int, int)+0xb7>
c0018a82:	eb 87                	jmp    c0018a0b <VAS::allocatePages(int, int)+0x5b>
c0018a84:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018a89:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018a8f:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0018a96:	74 b5                	je     c0018a4d <VAS::allocatePages(int, int)+0x9d>
c0018a98:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018a9c:	80 ce 01             	or     dh,0x1
c0018a9f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0018aa3:	eb a8                	jmp    c0018a4d <VAS::allocatePages(int, int)+0x9d>
c0018aa5:	90                   	nop

c0018aa6 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0018aa6:	55                   	push   ebp
c0018aa7:	57                   	push   edi
c0018aa8:	56                   	push   esi
c0018aa9:	53                   	push   ebx
c0018aaa:	83 ec 0c             	sub    esp,0xc
c0018aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018ab1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018ab5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0018ab9:	85 db                	test   ebx,ebx
c0018abb:	7e 2f                	jle    c0018aec <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0018abd:	c1 e3 0c             	shl    ebx,0xc
c0018ac0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018ac4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0018ac8:	01 d3                	add    ebx,edx
c0018aca:	55                   	push   ebp
c0018acb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018acf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ad3:	29 c2                	sub    edx,eax
c0018ad5:	01 f2                	add    edx,esi
c0018ad7:	52                   	push   edx
c0018ad8:	56                   	push   esi
c0018ad9:	81 c6 00 10 00 00    	add    esi,0x1000
c0018adf:	57                   	push   edi
c0018ae0:	e8 c7 fd ff ff       	call   c00188ac <VAS::mapPage(unsigned long, unsigned long, int)>
c0018ae5:	83 c4 10             	add    esp,0x10
c0018ae8:	39 de                	cmp    esi,ebx
c0018aea:	75 de                	jne    c0018aca <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0018aec:	0f 20 d8             	mov    eax,cr3
c0018aef:	0f 22 d8             	mov    cr3,eax
c0018af2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018af6:	83 c4 0c             	add    esp,0xc
c0018af9:	5b                   	pop    ebx
c0018afa:	5e                   	pop    esi
c0018afb:	5f                   	pop    edi
c0018afc:	5d                   	pop    ebp
c0018afd:	c3                   	ret    

c0018afe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0018afe:	55                   	push   ebp
c0018aff:	57                   	push   edi
c0018b00:	56                   	push   esi
c0018b01:	53                   	push   ebx
c0018b02:	83 ec 1c             	sub    esp,0x1c
c0018b05:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018b09:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0018b0d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018b11:	09 f8                	or     eax,edi
c0018b13:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018b17:	a9 ff 0f 00 00       	test   eax,0xfff
c0018b1c:	75 4f                	jne    c0018b6d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0018b1e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0018b22:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0018b25:	c1 eb 16             	shr    ebx,0x16
c0018b28:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0018b2f:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0018b33:	74 52                	je     c0018b87 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0018b35:	0f b6 f2             	movzx  esi,dl
c0018b38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018b3c:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0018b40:	c1 e8 0a             	shr    eax,0xa
c0018b43:	83 fe 01             	cmp    esi,0x1
c0018b46:	19 d2                	sbb    edx,edx
c0018b48:	c1 e3 0c             	shl    ebx,0xc
c0018b4b:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0018b51:	25 fc 0f 00 00       	and    eax,0xffc
c0018b56:	01 d8                	add    eax,ebx
c0018b58:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0018b5c:	09 d9                	or     ecx,ebx
c0018b5e:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0018b65:	83 c4 1c             	add    esp,0x1c
c0018b68:	5b                   	pop    ebx
c0018b69:	5e                   	pop    esi
c0018b6a:	5f                   	pop    edi
c0018b6b:	5d                   	pop    ebp
c0018b6c:	c3                   	ret    
c0018b6d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018b71:	83 ec 0c             	sub    esp,0xc
c0018b74:	68 24 18 03 c0       	push   0xc0031824
c0018b79:	e8 6c 79 00 00       	call   c00204ea <KePanic(char const*)>
c0018b7e:	83 c4 10             	add    esp,0x10
c0018b81:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b85:	eb 97                	jmp    c0018b1e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0018b87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018b8b:	e8 bc dd ff ff       	call   c001694c <Phys::allocatePage()>
c0018b90:	83 ec 0c             	sub    esp,0xc
c0018b93:	89 c5                	mov    ebp,eax
c0018b95:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c0018b9b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0018b9f:	6a 01                	push   0x1
c0018ba1:	e8 f3 f5 ff ff       	call   c0018199 <Virt::allocateKernelVirtualPages(int)>
c0018ba6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018bad:	6a 01                	push   0x1
c0018baf:	50                   	push   eax
c0018bb0:	55                   	push   ebp
c0018bb1:	81 cd 07 04 00 00    	or     ebp,0x407
c0018bb7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0018bbb:	51                   	push   ecx
c0018bbc:	e8 e5 fe ff ff       	call   c0018aa6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018bc1:	83 c4 1c             	add    esp,0x1c
c0018bc4:	68 00 10 00 00       	push   0x1000
c0018bc9:	6a 00                	push   0x0
c0018bcb:	50                   	push   eax
c0018bcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018bd0:	e8 1b 79 fe ff       	call   c00004f0 <memset>
c0018bd5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018bd9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018bdc:	e8 d6 f8 ff ff       	call   c00184b7 <Virt::freeKernelVirtualPages(unsigned long)>
c0018be1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0018be4:	83 c4 10             	add    esp,0x10
c0018be7:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0018bea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018bee:	e9 42 ff ff ff       	jmp    c0018b35 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0018bf3:	90                   	nop

c0018bf4 <VAS::VAS(bool)>:
c0018bf4:	53                   	push   ebx
c0018bf5:	83 ec 28             	sub    esp,0x28
c0018bf8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018bfc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018c0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c0f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018c16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c1a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018c1e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0018c21:	e8 26 dd ff ff       	call   c001694c <Phys::allocatePage()>
c0018c26:	89 c2                	mov    edx,eax
c0018c28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c2c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018c2f:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c0018c35:	83 ec 0c             	sub    esp,0xc
c0018c38:	6a 01                	push   0x1
c0018c3a:	e8 5a f5 ff ff       	call   c0018199 <Virt::allocateKernelVirtualPages(int)>
c0018c3f:	83 c4 10             	add    esp,0x10
c0018c42:	89 c2                	mov    edx,eax
c0018c44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c48:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018c4b:	83 ec 0c             	sub    esp,0xc
c0018c4e:	6a 03                	push   0x3
c0018c50:	6a 01                	push   0x1
c0018c52:	52                   	push   edx
c0018c53:	50                   	push   eax
c0018c54:	53                   	push   ebx
c0018c55:	e8 4c fe ff ff       	call   c0018aa6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018c5a:	83 c4 20             	add    esp,0x20
c0018c5d:	89 c2                	mov    edx,eax
c0018c5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c63:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018c66:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018c6e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0018c76:	7f 1d                	jg     c0018c95 <VAS::VAS(bool)+0xa1>
c0018c78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c7c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018c7f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018c83:	c1 e2 02             	shl    edx,0x2
c0018c86:	01 d0                	add    eax,edx
c0018c88:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018c8e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018c93:	eb d9                	jmp    c0018c6e <VAS::VAS(bool)+0x7a>
c0018c95:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0018c9d:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0018ca5:	7f 7e                	jg     c0018d25 <VAS::VAS(bool)+0x131>
c0018ca7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018cab:	2d 00 02 00 00       	sub    eax,0x200
c0018cb0:	c1 e0 0c             	shl    eax,0xc
c0018cb3:	83 c8 05             	or     eax,0x5
c0018cb6:	89 c2                	mov    edx,eax
c0018cb8:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018cbd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018cc3:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018cc9:	83 e0 10             	and    eax,0x10
c0018ccc:	0f b6 c0             	movzx  eax,al
c0018ccf:	85 c0                	test   eax,eax
c0018cd1:	74 07                	je     c0018cda <VAS::VAS(bool)+0xe6>
c0018cd3:	b8 00 01 00 00       	mov    eax,0x100
c0018cd8:	eb 05                	jmp    c0018cdf <VAS::VAS(bool)+0xeb>
c0018cda:	b8 00 00 00 00       	mov    eax,0x0
c0018cdf:	09 d0                	or     eax,edx
c0018ce1:	89 c1                	mov    ecx,eax
c0018ce3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ce7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018cea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018cee:	c1 e2 02             	shl    edx,0x2
c0018cf1:	01 d0                	add    eax,edx
c0018cf3:	89 ca                	mov    edx,ecx
c0018cf5:	89 10                	mov    DWORD PTR [eax],edx
c0018cf7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018cfb:	2d 40 03 00 00       	sub    eax,0x340
c0018d00:	83 f8 7f             	cmp    eax,0x7f
c0018d03:	77 16                	ja     c0018d1b <VAS::VAS(bool)+0x127>
c0018d05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018d09:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018d0c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018d10:	c1 e2 02             	shl    edx,0x2
c0018d13:	01 d0                	add    eax,edx
c0018d15:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018d1b:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0018d20:	e9 78 ff ff ff       	jmp    c0018c9d <VAS::VAS(bool)+0xa9>
c0018d25:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018d2a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018d30:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018d36:	83 e0 10             	and    eax,0x10
c0018d39:	0f b6 c0             	movzx  eax,al
c0018d3c:	85 c0                	test   eax,eax
c0018d3e:	74 07                	je     c0018d47 <VAS::VAS(bool)+0x153>
c0018d40:	b8 03 41 00 00       	mov    eax,0x4103
c0018d45:	eb 05                	jmp    c0018d4c <VAS::VAS(bool)+0x158>
c0018d47:	b8 03 40 00 00       	mov    eax,0x4003
c0018d4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018d50:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0018d53:	81 c2 20 0c 00 00    	add    edx,0xc20
c0018d59:	89 02                	mov    DWORD PTR [edx],eax
c0018d5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018d5f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018d62:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018d67:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018d6d:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018d73:	83 e0 10             	and    eax,0x10
c0018d76:	0f b6 c0             	movzx  eax,al
c0018d79:	85 c0                	test   eax,eax
c0018d7b:	74 07                	je     c0018d84 <VAS::VAS(bool)+0x190>
c0018d7d:	b8 00 01 00 00       	mov    eax,0x100
c0018d82:	eb 05                	jmp    c0018d89 <VAS::VAS(bool)+0x195>
c0018d84:	b8 00 00 00 00       	mov    eax,0x0
c0018d89:	09 c2                	or     edx,eax
c0018d8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018d8f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018d92:	05 fc 0f 00 00       	add    eax,0xffc
c0018d97:	83 ca 03             	or     edx,0x3
c0018d9a:	89 10                	mov    DWORD PTR [eax],edx
c0018d9c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018da1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018da7:	83 ec 0c             	sub    esp,0xc
c0018daa:	50                   	push   eax
c0018dab:	e8 00 2a 00 00       	call   c001b7b0 <Device::getName()>
c0018db0:	83 c4 10             	add    esp,0x10
c0018db3:	83 ec 08             	sub    esp,0x8
c0018db6:	68 f4 19 03 c0       	push   0xc00319f4
c0018dbb:	50                   	push   eax
c0018dbc:	e8 8f 79 fe ff       	call   c0000750 <strcmp>
c0018dc1:	83 c4 10             	add    esp,0x10
c0018dc4:	85 c0                	test   eax,eax
c0018dc6:	0f 94 c0             	sete   al
c0018dc9:	0f b6 c0             	movzx  eax,al
c0018dcc:	85 c0                	test   eax,eax
c0018dce:	74 68                	je     c0018e38 <VAS::VAS(bool)+0x244>
c0018dd0:	fa                   	cli    
c0018dd1:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018dd6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018ddc:	05 7c 09 00 00       	add    eax,0x97c
c0018de1:	83 ec 0c             	sub    esp,0xc
c0018de4:	50                   	push   eax
c0018de5:	e8 64 d2 ff ff       	call   c001604e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018dea:	83 c4 10             	add    esp,0x10
c0018ded:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018df2:	89 c3                	mov    ebx,eax
c0018df4:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018df9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018dff:	05 7c 09 00 00       	add    eax,0x97c
c0018e04:	83 ec 0c             	sub    esp,0xc
c0018e07:	50                   	push   eax
c0018e08:	e8 41 d2 ff ff       	call   c001604e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018e0d:	83 c4 10             	add    esp,0x10
c0018e10:	83 ec 08             	sub    esp,0x8
c0018e13:	50                   	push   eax
c0018e14:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018e18:	e8 7b f6 ff ff       	call   c0018498 <VAS::getPageTableEntry(unsigned long)>
c0018e1d:	83 c4 10             	add    esp,0x10
c0018e20:	8b 00                	mov    eax,DWORD PTR [eax]
c0018e22:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018e27:	6a 11                	push   0x11
c0018e29:	53                   	push   ebx
c0018e2a:	50                   	push   eax
c0018e2b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018e2f:	e8 78 fa ff ff       	call   c00188ac <VAS::mapPage(unsigned long, unsigned long, int)>
c0018e34:	83 c4 10             	add    esp,0x10
c0018e37:	fb                   	sti    
c0018e38:	90                   	nop
c0018e39:	83 c4 28             	add    esp,0x28
c0018e3c:	5b                   	pop    ebx
c0018e3d:	c3                   	ret    

c0018e3e <VAS::evict(unsigned long)>:
c0018e3e:	55                   	push   ebp
c0018e3f:	57                   	push   edi
c0018e40:	56                   	push   esi
c0018e41:	53                   	push   ebx
c0018e42:	83 ec 1c             	sub    esp,0x1c
c0018e45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018e49:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018e4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e51:	e8 a1 f4 ff ff       	call   c00182f7 <Virt::allocateSwapfilePage()>
c0018e56:	89 c7                	mov    edi,eax
c0018e58:	a1 2c 3f 03 c0       	mov    eax,ds:0xc0033f2c
c0018e5d:	85 c0                	test   eax,eax
c0018e5f:	7e 40                	jle    c0018ea1 <VAS::evict(unsigned long)+0x63>
c0018e61:	89 ee                	mov    esi,ebp
c0018e63:	31 db                	xor    ebx,ebx
c0018e65:	83 ec 0c             	sub    esp,0xc
c0018e68:	57                   	push   edi
c0018e69:	e8 73 f4 ff ff       	call   c00182e1 <Virt::swapIDToSector(unsigned long)>
c0018e6e:	89 34 24             	mov    DWORD PTR [esp],esi
c0018e71:	01 d8                	add    eax,ebx
c0018e73:	6a 01                	push   0x1
c0018e75:	31 d2                	xor    edx,edx
c0018e77:	83 c3 01             	add    ebx,0x1
c0018e7a:	52                   	push   edx
c0018e7b:	81 c6 00 02 00 00    	add    esi,0x200
c0018e81:	50                   	push   eax
c0018e82:	0f be 05 38 3f 03 c0 	movsx  eax,BYTE PTR ds:0xc0033f38
c0018e89:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0018e90:	50                   	push   eax
c0018e91:	e8 1a 3b 00 00       	call   c001c9b0 <LogicalDisk::write(unsigned long long, int, void*)>
c0018e96:	83 c4 20             	add    esp,0x20
c0018e99:	39 1d 2c 3f 03 c0    	cmp    DWORD PTR ds:0xc0033f2c,ebx
c0018e9f:	7f c4                	jg     c0018e65 <VAS::evict(unsigned long)+0x27>
c0018ea1:	83 ec 08             	sub    esp,0x8
c0018ea4:	c1 e7 0c             	shl    edi,0xc
c0018ea7:	55                   	push   ebp
c0018ea8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018eac:	50                   	push   eax
c0018ead:	e8 e6 f5 ff ff       	call   c0018498 <VAS::getPageTableEntry(unsigned long)>
c0018eb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0018eb4:	89 d3                	mov    ebx,edx
c0018eb6:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0018ebc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018ec2:	09 d7                	or     edi,edx
c0018ec4:	89 38                	mov    DWORD PTR [eax],edi
c0018ec6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018ec9:	8b 15 a8 aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaa8
c0018ecf:	83 c2 01             	add    edx,0x1
c0018ed2:	89 15 a8 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa8,edx
c0018ed8:	e8 06 da ff ff       	call   c00168e3 <Phys::freePage(unsigned long)>
c0018edd:	0f 20 d8             	mov    eax,cr3
c0018ee0:	0f 22 d8             	mov    cr3,eax
c0018ee3:	8b 0d a8 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aaa8
c0018ee9:	51                   	push   ecx
c0018eea:	55                   	push   ebp
c0018eeb:	53                   	push   ebx
c0018eec:	68 48 18 03 c0       	push   0xc0031848
c0018ef1:	e8 db 05 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0018ef6:	a1 a4 aa 03 c0       	mov    eax,ds:0xc003aaa4
c0018efb:	c7 44 24 50 02 1a 03 c0 	mov    DWORD PTR [esp+0x50],0xc0031a02
c0018f03:	8d 50 01             	lea    edx,[eax+0x1]
c0018f06:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0018f0a:	89 15 a4 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa4,edx
c0018f10:	83 c4 3c             	add    esp,0x3c
c0018f13:	5b                   	pop    ebx
c0018f14:	5e                   	pop    esi
c0018f15:	5f                   	pop    edi
c0018f16:	5d                   	pop    ebp
c0018f17:	e9 b5 05 00 00       	jmp    c00194d1 <Dbg::kprintf(char const*, ...)>

c0018f1c <VAS::tryLoadBackOffDisk(unsigned long)>:
c0018f1c:	55                   	push   ebp
c0018f1d:	57                   	push   edi
c0018f1e:	56                   	push   esi
c0018f1f:	53                   	push   ebx
c0018f20:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0018f26:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c0018f2d:	89 f3                	mov    ebx,esi
c0018f2f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018f35:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0018f3b:	77 22                	ja     c0018f5f <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c0018f3d:	83 ec 08             	sub    esp,0x8
c0018f40:	56                   	push   esi
c0018f41:	68 25 1a 03 c0       	push   0xc0031a25
c0018f46:	e8 86 05 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0018f4b:	83 c4 10             	add    esp,0x10
c0018f4e:	85 db                	test   ebx,ebx
c0018f50:	75 2a                	jne    c0018f7c <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c0018f52:	31 c0                	xor    eax,eax
c0018f54:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018f5a:	5b                   	pop    ebx
c0018f5b:	5e                   	pop    esi
c0018f5c:	5f                   	pop    edi
c0018f5d:	5d                   	pop    ebp
c0018f5e:	c3                   	ret    
c0018f5f:	83 ec 0c             	sub    esp,0xc
c0018f62:	68 13 1a 03 c0       	push   0xc0031a13
c0018f67:	e8 7e 75 00 00       	call   c00204ea <KePanic(char const*)>
c0018f6c:	5f                   	pop    edi
c0018f6d:	5d                   	pop    ebp
c0018f6e:	56                   	push   esi
c0018f6f:	68 25 1a 03 c0       	push   0xc0031a25
c0018f74:	e8 58 05 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0018f79:	83 c4 10             	add    esp,0x10
c0018f7c:	83 ec 08             	sub    esp,0x8
c0018f7f:	53                   	push   ebx
c0018f80:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c0018f87:	51                   	push   ecx
c0018f88:	e8 0b f5 ff ff       	call   c0018498 <VAS::getPageTableEntry(unsigned long)>
c0018f8d:	83 c4 10             	add    esp,0x10
c0018f90:	89 c2                	mov    edx,eax
c0018f92:	85 c0                	test   eax,eax
c0018f94:	74 bc                	je     c0018f52 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0018f96:	8b 28                	mov    ebp,DWORD PTR [eax]
c0018f98:	f7 c5 00 02 00 00    	test   ebp,0x200
c0018f9e:	0f 85 c0 00 00 00    	jne    c0019064 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c0018fa4:	89 e8                	mov    eax,ebp
c0018fa6:	25 01 04 00 00       	and    eax,0x401
c0018fab:	3d 00 04 00 00       	cmp    eax,0x400
c0018fb0:	75 a0                	jne    c0018f52 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0018fb2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018fb6:	c1 ed 0c             	shr    ebp,0xc
c0018fb9:	e8 8e d9 ff ff       	call   c001694c <Phys::allocatePage()>
c0018fbe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018fc2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018fc4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0018fca:	09 c1                	or     ecx,eax
c0018fcc:	81 c9 01 08 00 00    	or     ecx,0x801
c0018fd2:	89 0a                	mov    DWORD PTR [edx],ecx
c0018fd4:	8b 15 2c 3f 03 c0    	mov    edx,DWORD PTR ds:0xc0033f2c
c0018fda:	85 d2                	test   edx,edx
c0018fdc:	7e 40                	jle    c001901e <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0018fde:	89 df                	mov    edi,ebx
c0018fe0:	31 f6                	xor    esi,esi
c0018fe2:	83 ec 0c             	sub    esp,0xc
c0018fe5:	55                   	push   ebp
c0018fe6:	e8 f6 f2 ff ff       	call   c00182e1 <Virt::swapIDToSector(unsigned long)>
c0018feb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018fee:	01 f0                	add    eax,esi
c0018ff0:	6a 01                	push   0x1
c0018ff2:	31 d2                	xor    edx,edx
c0018ff4:	83 c6 01             	add    esi,0x1
c0018ff7:	52                   	push   edx
c0018ff8:	81 c7 00 02 00 00    	add    edi,0x200
c0018ffe:	50                   	push   eax
c0018fff:	0f be 05 38 3f 03 c0 	movsx  eax,BYTE PTR ds:0xc0033f38
c0019006:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c001900d:	50                   	push   eax
c001900e:	e8 31 39 00 00       	call   c001c944 <LogicalDisk::read(unsigned long long, int, void*)>
c0019013:	83 c4 20             	add    esp,0x20
c0019016:	39 35 2c 3f 03 c0    	cmp    DWORD PTR ds:0xc0033f2c,esi
c001901c:	7f c4                	jg     c0018fe2 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c001901e:	83 ec 04             	sub    esp,0x4
c0019021:	a1 a8 aa 03 c0       	mov    eax,ds:0xc003aaa8
c0019026:	83 e8 01             	sub    eax,0x1
c0019029:	50                   	push   eax
c001902a:	a3 a8 aa 03 c0       	mov    ds:0xc003aaa8,eax
c001902f:	53                   	push   ebx
c0019030:	68 38 1a 03 c0       	push   0xc0031a38
c0019035:	e8 97 04 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001903a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001903d:	e8 7c f2 ff ff       	call   c00182be <Virt::freeSwapfilePage(unsigned long)>
c0019042:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0019047:	83 c4 10             	add    esp,0x10
c001904a:	83 e8 01             	sub    eax,0x1
c001904d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0019052:	85 c0                	test   eax,eax
c0019054:	75 01                	jne    c0019057 <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c0019056:	fb                   	sti    
c0019057:	0f 20 d8             	mov    eax,cr3
c001905a:	0f 22 d8             	mov    cr3,eax
c001905d:	b0 01                	mov    al,0x1
c001905f:	e9 f0 fe ff ff       	jmp    c0018f54 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c0019064:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019068:	bd 00 10 00 00       	mov    ebp,0x1000
c001906d:	83 ec 0c             	sub    esp,0xc
c0019070:	89 de                	mov    esi,ebx
c0019072:	68 78 18 03 c0       	push   0xc0031878
c0019077:	e8 55 04 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001907c:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0019080:	e8 c7 d8 ff ff       	call   c001694c <Phys::allocatePage()>
c0019085:	89 e9                	mov    ecx,ebp
c0019087:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019089:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001908d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001908f:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0019095:	09 c8                	or     eax,ecx
c0019097:	83 c8 02             	or     eax,0x2
c001909a:	89 02                	mov    DWORD PTR [edx],eax
c001909c:	0f 20 d8             	mov    eax,cr3
c001909f:	0f 22 d8             	mov    cr3,eax
c00190a2:	8d 74 24 20          	lea    esi,[esp+0x20]
c00190a6:	89 df                	mov    edi,ebx
c00190a8:	89 e9                	mov    ecx,ebp
c00190aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00190ac:	b0 01                	mov    al,0x1
c00190ae:	83 c4 10             	add    esp,0x10
c00190b1:	e9 9e fe ff ff       	jmp    c0018f54 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c00190b6 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c00190b6:	55                   	push   ebp
c00190b7:	57                   	push   edi
c00190b8:	56                   	push   esi
c00190b9:	53                   	push   ebx
c00190ba:	83 ec 28             	sub    esp,0x28
c00190bd:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00190c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00190c5:	50                   	push   eax
c00190c6:	e8 ce f0 ff ff       	call   c0018199 <Virt::allocateKernelVirtualPages(int)>
c00190cb:	83 c4 0c             	add    esp,0xc
c00190ce:	89 c5                	mov    ebp,eax
c00190d0:	6a 07                	push   0x7
c00190d2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00190d6:	52                   	push   edx
c00190d7:	56                   	push   esi
c00190d8:	e8 d3 f8 ff ff       	call   c00189b0 <VAS::allocatePages(int, int)>
c00190dd:	83 c4 10             	add    esp,0x10
c00190e0:	89 c7                	mov    edi,eax
c00190e2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00190e6:	85 c9                	test   ecx,ecx
c00190e8:	74 2f                	je     c0019119 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c00190ea:	31 db                	xor    ebx,ebx
c00190ec:	e8 5b d8 ff ff       	call   c001694c <Phys::allocatePage()>
c00190f1:	83 c3 01             	add    ebx,0x1
c00190f4:	6a 03                	push   0x3
c00190f6:	55                   	push   ebp
c00190f7:	50                   	push   eax
c00190f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00190fc:	56                   	push   esi
c00190fd:	e8 aa f7 ff ff       	call   c00188ac <VAS::mapPage(unsigned long, unsigned long, int)>
c0019102:	6a 07                	push   0x7
c0019104:	57                   	push   edi
c0019105:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019109:	50                   	push   eax
c001910a:	56                   	push   esi
c001910b:	e8 9c f7 ff ff       	call   c00188ac <VAS::mapPage(unsigned long, unsigned long, int)>
c0019110:	83 c4 20             	add    esp,0x20
c0019113:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0019117:	75 d3                	jne    c00190ec <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0019119:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001911d:	89 28                	mov    DWORD PTR [eax],ebp
c001911f:	83 c4 1c             	add    esp,0x1c
c0019122:	89 f8                	mov    eax,edi
c0019124:	5b                   	pop    ebx
c0019125:	5e                   	pop    esi
c0019126:	5f                   	pop    edi
c0019127:	5d                   	pop    ebp
c0019128:	c3                   	ret    
c0019129:	90                   	nop

c001912a <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c001912a:	53                   	push   ebx
c001912b:	83 ec 14             	sub    esp,0x14
c001912e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019132:	68 98 18 03 c0       	push   0xc0031898
c0019137:	e8 95 03 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001913c:	c7 04 24 f8 18 03 c0 	mov    DWORD PTR [esp],0xc00318f8
c0019143:	e8 89 03 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0019148:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001914c:	83 c4 18             	add    esp,0x18
c001914f:	5b                   	pop    ebx
c0019150:	e9 62 f3 ff ff       	jmp    c00184b7 <Virt::freeKernelVirtualPages(unsigned long)>
c0019155:	90                   	nop

c0019156 <VAS::scanForEviction()>:
c0019156:	57                   	push   edi
c0019157:	56                   	push   esi
c0019158:	31 f6                	xor    esi,esi
c001915a:	53                   	push   ebx
c001915b:	83 ec 10             	sub    esp,0x10
c001915e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019162:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0019165:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001916b:	75 0e                	jne    c001917b <VAS::scanForEviction()+0x25>
c001916d:	89 da                	mov    edx,ebx
c001916f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0019172:	c1 ea 16             	shr    edx,0x16
c0019175:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0019179:	74 57                	je     c00191d2 <VAS::scanForEviction()+0x7c>
c001917b:	53                   	push   ebx
c001917c:	57                   	push   edi
c001917d:	e8 16 f3 ff ff       	call   c0018498 <VAS::getPageTableEntry(unsigned long)>
c0019182:	5a                   	pop    edx
c0019183:	8b 10                	mov    edx,DWORD PTR [eax]
c0019185:	59                   	pop    ecx
c0019186:	89 d1                	mov    ecx,edx
c0019188:	c1 e9 0c             	shr    ecx,0xc
c001918b:	74 10                	je     c001919d <VAS::scanForEviction()+0x47>
c001918d:	89 d1                	mov    ecx,edx
c001918f:	81 e1 01 08 00 00    	and    ecx,0x801
c0019195:	81 f9 01 08 00 00    	cmp    ecx,0x801
c001919b:	74 40                	je     c00191dd <VAS::scanForEviction()+0x87>
c001919d:	81 c3 00 10 00 00    	add    ebx,0x1000
c00191a3:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c00191a9:	76 2d                	jbe    c00191d8 <VAS::scanForEviction()+0x82>
c00191ab:	83 c6 01             	add    esi,0x1
c00191ae:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c00191b5:	83 fe 03             	cmp    esi,0x3
c00191b8:	74 32                	je     c00191ec <VAS::scanForEviction()+0x96>
c00191ba:	31 db                	xor    ebx,ebx
c00191bc:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00191c2:	75 b7                	jne    c001917b <VAS::scanForEviction()+0x25>
c00191c4:	89 da                	mov    edx,ebx
c00191c6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00191c9:	c1 ea 16             	shr    edx,0x16
c00191cc:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00191d0:	75 a9                	jne    c001917b <VAS::scanForEviction()+0x25>
c00191d2:	81 c3 00 00 40 00    	add    ebx,0x400000
c00191d8:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c00191db:	eb 88                	jmp    c0019165 <VAS::scanForEviction()+0xf>
c00191dd:	f6 c2 20             	test   dl,0x20
c00191e0:	74 13                	je     c00191f5 <VAS::scanForEviction()+0x9f>
c00191e2:	83 e2 df             	and    edx,0xffffffdf
c00191e5:	89 10                	mov    DWORD PTR [eax],edx
c00191e7:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00191ea:	eb b1                	jmp    c001919d <VAS::scanForEviction()+0x47>
c00191ec:	83 c4 10             	add    esp,0x10
c00191ef:	31 c0                	xor    eax,eax
c00191f1:	5b                   	pop    ebx
c00191f2:	5e                   	pop    esi
c00191f3:	5f                   	pop    edi
c00191f4:	c3                   	ret    
c00191f5:	83 ec 08             	sub    esp,0x8
c00191f8:	89 d0                	mov    eax,edx
c00191fa:	25 00 f0 ff ff       	and    eax,0xfffff000
c00191ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019203:	53                   	push   ebx
c0019204:	68 4d 1a 03 c0       	push   0xc0031a4d
c0019209:	e8 c3 02 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001920e:	58                   	pop    eax
c001920f:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0019212:	5a                   	pop    edx
c0019213:	51                   	push   ecx
c0019214:	57                   	push   edi
c0019215:	e8 24 fc ff ff       	call   c0018e3e <VAS::evict(unsigned long)>
c001921a:	5b                   	pop    ebx
c001921b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001921e:	5e                   	pop    esi
c001921f:	50                   	push   eax
c0019220:	68 61 1a 03 c0       	push   0xc0031a61
c0019225:	e8 a7 02 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001922a:	58                   	pop    eax
c001922b:	5a                   	pop    edx
c001922c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019230:	50                   	push   eax
c0019231:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019235:	68 74 1a 03 c0       	push   0xc0031a74
c001923a:	e8 92 02 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001923f:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0019242:	83 c4 10             	add    esp,0x10
c0019245:	81 c1 00 10 00 00    	add    ecx,0x1000
c001924b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001924f:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0019252:	83 c4 10             	add    esp,0x10
c0019255:	5b                   	pop    ebx
c0019256:	5e                   	pop    esi
c0019257:	5f                   	pop    edi
c0019258:	c3                   	ret    

c0019259 <mapVASFirstTime>:
c0019259:	55                   	push   ebp
c001925a:	57                   	push   edi
c001925b:	56                   	push   esi
c001925c:	53                   	push   ebx
c001925d:	83 ec 0c             	sub    esp,0xc
c0019260:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019265:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0019268:	83 fa 01             	cmp    edx,0x1
c001926b:	0f 84 cb 00 00 00    	je     c001933c <mapVASFirstTime+0xe3>
c0019271:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0019274:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0019277:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001927c:	c1 e5 15             	shl    ebp,0x15
c001927f:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0019284:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c001928a:	29 eb                	sub    ebx,ebp
c001928c:	29 ef                	sub    edi,ebp
c001928e:	e8 b9 d6 ff ff       	call   c001694c <Phys::allocatePage()>
c0019293:	83 ec 0c             	sub    esp,0xc
c0019296:	68 03 04 00 00       	push   0x403
c001929b:	6a 01                	push   0x1
c001929d:	53                   	push   ebx
c001929e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00192a4:	50                   	push   eax
c00192a5:	56                   	push   esi
c00192a6:	e8 fb f7 ff ff       	call   c0018aa6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00192ab:	83 c4 20             	add    esp,0x20
c00192ae:	39 fb                	cmp    ebx,edi
c00192b0:	75 dc                	jne    c001928e <mapVASFirstTime+0x35>
c00192b2:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c00192b7:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c00192bc:	29 eb                	sub    ebx,ebp
c00192be:	29 ef                	sub    edi,ebp
c00192c0:	e8 87 d6 ff ff       	call   c001694c <Phys::allocatePage()>
c00192c5:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c00192c9:	83 fa 01             	cmp    edx,0x1
c00192cc:	19 d2                	sbb    edx,edx
c00192ce:	83 ec 0c             	sub    esp,0xc
c00192d1:	83 e2 04             	and    edx,0x4
c00192d4:	81 c2 03 04 00 00    	add    edx,0x403
c00192da:	52                   	push   edx
c00192db:	6a 01                	push   0x1
c00192dd:	53                   	push   ebx
c00192de:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00192e4:	50                   	push   eax
c00192e5:	56                   	push   esi
c00192e6:	e8 bb f7 ff ff       	call   c0018aa6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00192eb:	83 c4 20             	add    esp,0x20
c00192ee:	39 df                	cmp    edi,ebx
c00192f0:	75 ce                	jne    c00192c0 <mapVASFirstTime+0x67>
c00192f2:	83 ec 0c             	sub    esp,0xc
c00192f5:	bb 7c 60 03 c0       	mov    ebx,0xc003607c
c00192fa:	6a 04                	push   0x4
c00192fc:	81 eb 00 50 03 c0    	sub    ebx,0xc0035000
c0019302:	6a ff                	push   0xffffffff
c0019304:	c1 eb 0c             	shr    ebx,0xc
c0019307:	53                   	push   ebx
c0019308:	68 00 50 03 c0       	push   0xc0035000
c001930d:	56                   	push   esi
c001930e:	e8 1f f3 ff ff       	call   c0018632 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0019313:	83 c4 14             	add    esp,0x14
c0019316:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c001931b:	6a 04                	push   0x4
c001931d:	6a ff                	push   0xffffffff
c001931f:	53                   	push   ebx
c0019320:	68 00 50 03 c0       	push   0xc0035000
c0019325:	50                   	push   eax
c0019326:	e8 07 f3 ff ff       	call   c0018632 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001932b:	0f 20 d8             	mov    eax,cr3
c001932e:	0f 22 d8             	mov    cr3,eax
c0019331:	83 c4 20             	add    esp,0x20
c0019334:	83 c4 0c             	add    esp,0xc
c0019337:	5b                   	pop    ebx
c0019338:	5e                   	pop    esi
c0019339:	5f                   	pop    edi
c001933a:	5d                   	pop    ebp
c001933b:	c3                   	ret    
c001933c:	83 ec 0c             	sub    esp,0xc
c001933f:	68 81 1a 03 c0       	push   0xc0031a81
c0019344:	e8 88 01 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0019349:	83 c4 10             	add    esp,0x10
c001934c:	83 c4 0c             	add    esp,0xc
c001934f:	5b                   	pop    ebx
c0019350:	5e                   	pop    esi
c0019351:	5f                   	pop    edi
c0019352:	5d                   	pop    ebp
c0019353:	c3                   	ret    

c0019354 <__cxa_atexit>:
c0019354:	31 c0                	xor    eax,eax
c0019356:	c3                   	ret    

c0019357 <__cxa_finalize>:
c0019357:	c3                   	ret    

c0019358 <__stack_chk_fail>:
c0019358:	55                   	push   ebp
c0019359:	89 e5                	mov    ebp,esp
c001935b:	83 ec 10             	sub    esp,0x10
c001935e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019361:	68 9a 1a 03 c0       	push   0xc0031a9a
c0019366:	e8 66 01 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001936b:	58                   	pop    eax
c001936c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001936f:	5a                   	pop    edx
c0019370:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019373:	68 9a 1a 03 c0       	push   0xc0031a9a
c0019378:	e8 54 01 00 00       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001937d:	c7 04 24 a2 1a 03 c0 	mov    DWORD PTR [esp],0xc0031aa2
c0019384:	e8 61 71 00 00       	call   c00204ea <KePanic(char const*)>
c0019389:	83 c4 10             	add    esp,0x10
c001938c:	c9                   	leave  
c001938d:	c3                   	ret    

c001938e <__cxa_pure_virtual>:
c001938e:	83 ec 18             	sub    esp,0x18
c0019391:	68 ba 1a 03 c0       	push   0xc0031aba
c0019396:	e8 4f 71 00 00       	call   c00204ea <KePanic(char const*)>
c001939b:	83 c4 1c             	add    esp,0x1c
c001939e:	c3                   	ret    

c001939f <operator new[](unsigned long)>:
c001939f:	e9 9f d2 ff ff       	jmp    c0016643 <malloc>

c00193a4 <operator delete(void*, unsigned long)>:
c00193a4:	e9 ba d2 ff ff       	jmp    c0016663 <rfree>

c00193a9 <operator delete[](void*)>:
c00193a9:	e9 b5 d2 ff ff       	jmp    c0016663 <rfree>

c00193ae <operator delete[](void*, unsigned long)>:
c00193ae:	e9 b0 d2 ff ff       	jmp    c0016663 <rfree>

c00193b3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00193b3:	55                   	push   ebp
c00193b4:	57                   	push   edi
c00193b5:	56                   	push   esi
c00193b6:	be c3 15 03 c0       	mov    esi,0xc00315c3
c00193bb:	53                   	push   ebx
c00193bc:	83 ec 20             	sub    esp,0x20
c00193bf:	a0 c2 15 03 c0       	mov    al,ds:0xc00315c2
c00193c4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00193c8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00193cc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00193d0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00193d4:	b8 10 00 00 00       	mov    eax,0x10
c00193d9:	f7 c7 02 00 00 00    	test   edi,0x2
c00193df:	75 60                	jne    c0019441 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c00193e1:	89 c1                	mov    ecx,eax
c00193e3:	c1 e9 02             	shr    ecx,0x2
c00193e6:	fc                   	cld    
c00193e7:	31 d2                	xor    edx,edx
c00193e9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00193eb:	a8 02                	test   al,0x2
c00193ed:	74 0b                	je     c00193fa <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c00193ef:	66 8b 16             	mov    dx,WORD PTR [esi]
c00193f2:	66 89 17             	mov    WORD PTR [edi],dx
c00193f5:	ba 02 00 00 00       	mov    edx,0x2
c00193fa:	a8 01                	test   al,0x1
c00193fc:	74 06                	je     c0019404 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c00193fe:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0019401:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0019404:	89 ee                	mov    esi,ebp
c0019406:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001940a:	eb 02                	jmp    c001940e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c001940c:	89 c6                	mov    esi,eax
c001940e:	31 d2                	xor    edx,edx
c0019410:	83 c1 01             	add    ecx,0x1
c0019413:	89 f0                	mov    eax,esi
c0019415:	f7 f3                	div    ebx
c0019417:	39 de                	cmp    esi,ebx
c0019419:	73 f1                	jae    c001940c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c001941b:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001941e:	eb 02                	jmp    c0019422 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0019420:	89 c5                	mov    ebp,eax
c0019422:	31 d2                	xor    edx,edx
c0019424:	83 e9 01             	sub    ecx,0x1
c0019427:	89 e8                	mov    eax,ebp
c0019429:	f7 f3                	div    ebx
c001942b:	39 dd                	cmp    ebp,ebx
c001942d:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0019431:	88 11                	mov    BYTE PTR [ecx],dl
c0019433:	73 eb                	jae    c0019420 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0019435:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019439:	83 c4 20             	add    esp,0x20
c001943c:	5b                   	pop    ebx
c001943d:	5e                   	pop    esi
c001943e:	5f                   	pop    edi
c001943f:	5d                   	pop    ebp
c0019440:	c3                   	ret    
c0019441:	66 8b 16             	mov    dx,WORD PTR [esi]
c0019444:	83 c7 02             	add    edi,0x2
c0019447:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c001944b:	83 c6 02             	add    esi,0x2
c001944e:	83 e8 02             	sub    eax,0x2
c0019451:	eb 8e                	jmp    c00193e1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0019453 <Dbg::logc(char)>:
c0019453:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019457:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c001945e:	75 12                	jne    c0019472 <Dbg::logc(char)+0x1f>
c0019460:	ba fd 03 00 00       	mov    edx,0x3fd
c0019465:	ec                   	in     al,dx
c0019466:	a8 20                	test   al,0x20
c0019468:	74 fb                	je     c0019465 <Dbg::logc(char)+0x12>
c001946a:	ba f8 03 00 00       	mov    edx,0x3f8
c001946f:	88 c8                	mov    al,cl
c0019471:	ee                   	out    dx,al
c0019472:	c3                   	ret    

c0019473 <Dbg::logs(char*)>:
c0019473:	53                   	push   ebx
c0019474:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0019478:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001947b:	85 c0                	test   eax,eax
c001947d:	74 11                	je     c0019490 <Dbg::logs(char*)+0x1d>
c001947f:	83 c3 01             	add    ebx,0x1
c0019482:	50                   	push   eax
c0019483:	e8 cb ff ff ff       	call   c0019453 <Dbg::logc(char)>
c0019488:	58                   	pop    eax
c0019489:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001948c:	85 c0                	test   eax,eax
c001948e:	75 ef                	jne    c001947f <Dbg::logs(char*)+0xc>
c0019490:	5b                   	pop    ebx
c0019491:	c3                   	ret    

c0019492 <Dbg::logWriteInt(unsigned int)>:
c0019492:	83 ec 10             	sub    esp,0x10
c0019495:	6a 0a                	push   0xa
c0019497:	8d 44 24 08          	lea    eax,[esp+0x8]
c001949b:	50                   	push   eax
c001949c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00194a0:	50                   	push   eax
c00194a1:	e8 0d ff ff ff       	call   c00193b3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00194a6:	50                   	push   eax
c00194a7:	e8 c7 ff ff ff       	call   c0019473 <Dbg::logs(char*)>
c00194ac:	83 c4 20             	add    esp,0x20
c00194af:	c3                   	ret    

c00194b0 <Dbg::logWriteIntBase(unsigned int, int)>:
c00194b0:	83 ec 10             	sub    esp,0x10
c00194b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00194b7:	50                   	push   eax
c00194b8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00194bc:	50                   	push   eax
c00194bd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00194c1:	52                   	push   edx
c00194c2:	e8 ec fe ff ff       	call   c00193b3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00194c7:	50                   	push   eax
c00194c8:	e8 a6 ff ff ff       	call   c0019473 <Dbg::logs(char*)>
c00194cd:	83 c4 20             	add    esp,0x20
c00194d0:	c3                   	ret    

c00194d1 <Dbg::kprintf(char const*, ...)>:
c00194d1:	55                   	push   ebp
c00194d2:	57                   	push   edi
c00194d3:	56                   	push   esi
c00194d4:	53                   	push   ebx
c00194d5:	83 ec 0c             	sub    esp,0xc
c00194d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00194dc:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c00194e3:	74 08                	je     c00194ed <Dbg::kprintf(char const*, ...)+0x1c>
c00194e5:	83 c4 0c             	add    esp,0xc
c00194e8:	5b                   	pop    ebx
c00194e9:	5e                   	pop    esi
c00194ea:	5f                   	pop    edi
c00194eb:	5d                   	pop    ebp
c00194ec:	c3                   	ret    
c00194ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00194f1:	31 ff                	xor    edi,edi
c00194f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00194f7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00194fa:	85 c0                	test   eax,eax
c00194fc:	74 e7                	je     c00194e5 <Dbg::kprintf(char const*, ...)+0x14>
c00194fe:	8d 77 01             	lea    esi,[edi+0x1]
c0019501:	83 f8 25             	cmp    eax,0x25
c0019504:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0019507:	75 47                	jne    c0019550 <Dbg::kprintf(char const*, ...)+0x7f>
c0019509:	83 c7 02             	add    edi,0x2
c001950c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001950f:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0019512:	83 e8 25             	sub    eax,0x25
c0019515:	0f b6 c0             	movzx  eax,al
c0019518:	83 f8 53             	cmp    eax,0x53
c001951b:	0f 87 ce 00 00 00    	ja     c00195ef <Dbg::kprintf(char const*, ...)+0x11e>
c0019521:	ff 24 85 d0 1a 03 c0 	jmp    DWORD PTR [eax*4-0x3ffce530]
c0019528:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001952c:	89 c8                	mov    eax,ecx
c001952e:	83 c1 04             	add    ecx,0x4
c0019531:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0019535:	8b 28                	mov    ebp,DWORD PTR [eax]
c0019537:	55                   	push   ebp
c0019538:	e8 55 ff ff ff       	call   c0019492 <Dbg::logWriteInt(unsigned int)>
c001953d:	58                   	pop    eax
c001953e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0019541:	85 c0                	test   eax,eax
c0019543:	74 a0                	je     c00194e5 <Dbg::kprintf(char const*, ...)+0x14>
c0019545:	8d 77 01             	lea    esi,[edi+0x1]
c0019548:	83 f8 25             	cmp    eax,0x25
c001954b:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c001954e:	74 b9                	je     c0019509 <Dbg::kprintf(char const*, ...)+0x38>
c0019550:	50                   	push   eax
c0019551:	89 f7                	mov    edi,esi
c0019553:	e8 fb fe ff ff       	call   c0019453 <Dbg::logc(char)>
c0019558:	89 ee                	mov    esi,ebp
c001955a:	58                   	pop    eax
c001955b:	eb e1                	jmp    c001953e <Dbg::kprintf(char const*, ...)+0x6d>
c001955d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019561:	89 c8                	mov    eax,ecx
c0019563:	83 c1 04             	add    ecx,0x4
c0019566:	8b 00                	mov    eax,DWORD PTR [eax]
c0019568:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001956c:	50                   	push   eax
c001956d:	e8 01 ff ff ff       	call   c0019473 <Dbg::logs(char*)>
c0019572:	58                   	pop    eax
c0019573:	eb c9                	jmp    c001953e <Dbg::kprintf(char const*, ...)+0x6d>
c0019575:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019579:	89 d0                	mov    eax,edx
c001957b:	83 c2 04             	add    edx,0x4
c001957e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019582:	8b 00                	mov    eax,DWORD PTR [eax]
c0019584:	50                   	push   eax
c0019585:	e8 08 ff ff ff       	call   c0019492 <Dbg::logWriteInt(unsigned int)>
c001958a:	58                   	pop    eax
c001958b:	eb b1                	jmp    c001953e <Dbg::kprintf(char const*, ...)+0x6d>
c001958d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019591:	89 d0                	mov    eax,edx
c0019593:	83 c2 04             	add    edx,0x4
c0019596:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0019599:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001959d:	50                   	push   eax
c001959e:	e8 b0 fe ff ff       	call   c0019453 <Dbg::logc(char)>
c00195a3:	58                   	pop    eax
c00195a4:	eb 98                	jmp    c001953e <Dbg::kprintf(char const*, ...)+0x6d>
c00195a6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00195aa:	89 c8                	mov    eax,ecx
c00195ac:	83 c1 04             	add    ecx,0x4
c00195af:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00195b3:	6a 10                	push   0x10
c00195b5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00195b7:	51                   	push   ecx
c00195b8:	e8 f3 fe ff ff       	call   c00194b0 <Dbg::logWriteIntBase(unsigned int, int)>
c00195bd:	5d                   	pop    ebp
c00195be:	58                   	pop    eax
c00195bf:	e9 7a ff ff ff       	jmp    c001953e <Dbg::kprintf(char const*, ...)+0x6d>
c00195c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00195c8:	89 d0                	mov    eax,edx
c00195ca:	83 c2 08             	add    edx,0x8
c00195cd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00195d1:	6a 10                	push   0x10
c00195d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00195d5:	50                   	push   eax
c00195d6:	e8 d5 fe ff ff       	call   c00194b0 <Dbg::logWriteIntBase(unsigned int, int)>
c00195db:	58                   	pop    eax
c00195dc:	5a                   	pop    edx
c00195dd:	e9 5c ff ff ff       	jmp    c001953e <Dbg::kprintf(char const*, ...)+0x6d>
c00195e2:	6a 25                	push   0x25
c00195e4:	e8 6a fe ff ff       	call   c0019453 <Dbg::logc(char)>
c00195e9:	5a                   	pop    edx
c00195ea:	e9 4f ff ff ff       	jmp    c001953e <Dbg::kprintf(char const*, ...)+0x6d>
c00195ef:	6a 25                	push   0x25
c00195f1:	e8 5d fe ff ff       	call   c0019453 <Dbg::logc(char)>
c00195f6:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00195fa:	50                   	push   eax
c00195fb:	e8 53 fe ff ff       	call   c0019453 <Dbg::logc(char)>
c0019600:	5a                   	pop    edx
c0019601:	59                   	pop    ecx
c0019602:	e9 37 ff ff ff       	jmp    c001953e <Dbg::kprintf(char const*, ...)+0x6d>
c0019607:	90                   	nop

c0019608 <KiUbsanPrintDetails(char const*, void*)>:
c0019608:	83 ec 1c             	sub    esp,0x1c
c001960b:	83 ec 08             	sub    esp,0x8
c001960e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019612:	68 20 1c 03 c0       	push   0xc0031c20
c0019617:	e8 b5 fe ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001961c:	83 c4 10             	add    esp,0x10
c001961f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019623:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019627:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001962b:	8b 00                	mov    eax,DWORD PTR [eax]
c001962d:	83 ec 08             	sub    esp,0x8
c0019630:	50                   	push   eax
c0019631:	68 34 1c 03 c0       	push   0xc0031c34
c0019636:	e8 96 fe ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001963b:	83 c4 10             	add    esp,0x10
c001963e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019642:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019645:	83 ec 08             	sub    esp,0x8
c0019648:	50                   	push   eax
c0019649:	68 3e 1c 03 c0       	push   0xc0031c3e
c001964e:	e8 7e fe ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0019653:	83 c4 10             	add    esp,0x10
c0019656:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001965a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001965d:	83 ec 08             	sub    esp,0x8
c0019660:	50                   	push   eax
c0019661:	68 48 1c 03 c0       	push   0xc0031c48
c0019666:	e8 66 fe ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001966b:	83 c4 10             	add    esp,0x10
c001966e:	90                   	nop
c001966f:	83 c4 1c             	add    esp,0x1c
c0019672:	c3                   	ret    
c0019673:	90                   	nop

c0019674 <__ubsan_handle_type_mismatch_v1>:
c0019674:	83 ec 0c             	sub    esp,0xc
c0019677:	83 ec 08             	sub    esp,0x8
c001967a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001967e:	68 8c 1d 03 c0       	push   0xc0031d8c
c0019683:	e8 80 ff ff ff       	call   c0019608 <KiUbsanPrintDetails(char const*, void*)>
c0019688:	83 c4 10             	add    esp,0x10
c001968b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019690:	75 16                	jne    c00196a8 <__ubsan_handle_type_mismatch_v1+0x34>
c0019692:	83 ec 0c             	sub    esp,0xc
c0019695:	68 52 1c 03 c0       	push   0xc0031c52
c001969a:	e8 32 fe ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001969f:	83 c4 10             	add    esp,0x10
c00196a2:	e9 91 00 00 00       	jmp    c0019738 <__ubsan_handle_type_mismatch_v1+0xc4>
c00196a7:	90                   	nop
c00196a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196ac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00196af:	85 c0                	test   eax,eax
c00196b1:	74 29                	je     c00196dc <__ubsan_handle_type_mismatch_v1+0x68>
c00196b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196b7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00196ba:	83 e8 01             	sub    eax,0x1
c00196bd:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00196c1:	75 19                	jne    c00196dc <__ubsan_handle_type_mismatch_v1+0x68>
c00196c3:	83 ec 08             	sub    esp,0x8
c00196c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00196ca:	68 ac 1d 03 c0       	push   0xc0031dac
c00196cf:	e8 fd fd ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c00196d4:	83 c4 10             	add    esp,0x10
c00196d7:	eb 5f                	jmp    c0019738 <__ubsan_handle_type_mismatch_v1+0xc4>
c00196d9:	8d 76 00             	lea    esi,[esi+0x0]
c00196dc:	83 ec 0c             	sub    esp,0xc
c00196df:	68 67 1c 03 c0       	push   0xc0031c67
c00196e4:	e8 e8 fd ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c00196e9:	83 c4 10             	add    esp,0x10
c00196ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196f0:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00196f3:	0f b6 c0             	movzx  eax,al
c00196f6:	83 ec 08             	sub    esp,0x8
c00196f9:	50                   	push   eax
c00196fa:	68 81 1c 03 c0       	push   0xc0031c81
c00196ff:	e8 cd fd ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0019704:	83 c4 10             	add    esp,0x10
c0019707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001970b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001970e:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0019711:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019719:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c001971c:	0f b6 c0             	movzx  eax,al
c001971f:	8b 04 85 40 3f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc0c0]
c0019726:	51                   	push   ecx
c0019727:	52                   	push   edx
c0019728:	50                   	push   eax
c0019729:	68 d4 1d 03 c0       	push   0xc0031dd4
c001972e:	e8 9e fd ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0019733:	83 c4 10             	add    esp,0x10
c0019736:	66 90                	xchg   ax,ax
c0019738:	83 ec 0c             	sub    esp,0xc
c001973b:	68 8c 1d 03 c0       	push   0xc0031d8c
c0019740:	e8 a5 6d 00 00       	call   c00204ea <KePanic(char const*)>
c0019745:	83 c4 10             	add    esp,0x10
c0019748:	90                   	nop
c0019749:	83 c4 0c             	add    esp,0xc
c001974c:	c3                   	ret    
c001974d:	8d 76 00             	lea    esi,[esi+0x0]

c0019750 <__ubsan_handle_pointer_overflow>:
c0019750:	83 ec 0c             	sub    esp,0xc
c0019753:	83 ec 08             	sub    esp,0x8
c0019756:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001975a:	68 1c 1e 03 c0       	push   0xc0031e1c
c001975f:	e8 a4 fe ff ff       	call   c0019608 <KiUbsanPrintDetails(char const*, void*)>
c0019764:	83 c4 10             	add    esp,0x10
c0019767:	83 ec 0c             	sub    esp,0xc
c001976a:	68 1c 1e 03 c0       	push   0xc0031e1c
c001976f:	e8 76 6d 00 00       	call   c00204ea <KePanic(char const*)>
c0019774:	83 c4 10             	add    esp,0x10
c0019777:	90                   	nop
c0019778:	83 c4 0c             	add    esp,0xc
c001977b:	c3                   	ret    

c001977c <__ubsan_handle_out_of_bounds>:
c001977c:	83 ec 0c             	sub    esp,0xc
c001977f:	83 ec 08             	sub    esp,0x8
c0019782:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019786:	68 8c 1c 03 c0       	push   0xc0031c8c
c001978b:	e8 78 fe ff ff       	call   c0019608 <KiUbsanPrintDetails(char const*, void*)>
c0019790:	83 c4 10             	add    esp,0x10
c0019793:	83 ec 0c             	sub    esp,0xc
c0019796:	68 8c 1c 03 c0       	push   0xc0031c8c
c001979b:	e8 4a 6d 00 00       	call   c00204ea <KePanic(char const*)>
c00197a0:	83 c4 10             	add    esp,0x10
c00197a3:	90                   	nop
c00197a4:	83 c4 0c             	add    esp,0xc
c00197a7:	c3                   	ret    

c00197a8 <__ubsan_handle_add_overflow>:
c00197a8:	83 ec 0c             	sub    esp,0xc
c00197ab:	83 ec 08             	sub    esp,0x8
c00197ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197b2:	68 a9 1c 03 c0       	push   0xc0031ca9
c00197b7:	e8 4c fe ff ff       	call   c0019608 <KiUbsanPrintDetails(char const*, void*)>
c00197bc:	83 c4 10             	add    esp,0x10
c00197bf:	83 ec 0c             	sub    esp,0xc
c00197c2:	68 a9 1c 03 c0       	push   0xc0031ca9
c00197c7:	e8 1e 6d 00 00       	call   c00204ea <KePanic(char const*)>
c00197cc:	83 c4 10             	add    esp,0x10
c00197cf:	90                   	nop
c00197d0:	83 c4 0c             	add    esp,0xc
c00197d3:	c3                   	ret    

c00197d4 <__ubsan_handle_load_invalid_value>:
c00197d4:	83 ec 0c             	sub    esp,0xc
c00197d7:	83 ec 08             	sub    esp,0x8
c00197da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197de:	68 3c 1e 03 c0       	push   0xc0031e3c
c00197e3:	e8 20 fe ff ff       	call   c0019608 <KiUbsanPrintDetails(char const*, void*)>
c00197e8:	83 c4 10             	add    esp,0x10
c00197eb:	83 ec 0c             	sub    esp,0xc
c00197ee:	68 3c 1e 03 c0       	push   0xc0031e3c
c00197f3:	e8 f2 6c 00 00       	call   c00204ea <KePanic(char const*)>
c00197f8:	83 c4 10             	add    esp,0x10
c00197fb:	90                   	nop
c00197fc:	83 c4 0c             	add    esp,0xc
c00197ff:	c3                   	ret    

c0019800 <__ubsan_handle_divrem_overflow>:
c0019800:	83 ec 0c             	sub    esp,0xc
c0019803:	83 ec 08             	sub    esp,0x8
c0019806:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001980a:	68 60 1e 03 c0       	push   0xc0031e60
c001980f:	e8 f4 fd ff ff       	call   c0019608 <KiUbsanPrintDetails(char const*, void*)>
c0019814:	83 c4 10             	add    esp,0x10
c0019817:	83 ec 0c             	sub    esp,0xc
c001981a:	68 60 1e 03 c0       	push   0xc0031e60
c001981f:	e8 c6 6c 00 00       	call   c00204ea <KePanic(char const*)>
c0019824:	83 c4 10             	add    esp,0x10
c0019827:	90                   	nop
c0019828:	83 c4 0c             	add    esp,0xc
c001982b:	c3                   	ret    

c001982c <__ubsan_handle_mul_overflow>:
c001982c:	83 ec 0c             	sub    esp,0xc
c001982f:	83 ec 08             	sub    esp,0x8
c0019832:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019836:	68 c5 1c 03 c0       	push   0xc0031cc5
c001983b:	e8 c8 fd ff ff       	call   c0019608 <KiUbsanPrintDetails(char const*, void*)>
c0019840:	83 c4 10             	add    esp,0x10
c0019843:	83 ec 0c             	sub    esp,0xc
c0019846:	68 c5 1c 03 c0       	push   0xc0031cc5
c001984b:	e8 9a 6c 00 00       	call   c00204ea <KePanic(char const*)>
c0019850:	83 c4 10             	add    esp,0x10
c0019853:	90                   	nop
c0019854:	83 c4 0c             	add    esp,0xc
c0019857:	c3                   	ret    

c0019858 <__ubsan_handle_sub_overflow>:
c0019858:	83 ec 0c             	sub    esp,0xc
c001985b:	83 ec 08             	sub    esp,0x8
c001985e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019862:	68 e1 1c 03 c0       	push   0xc0031ce1
c0019867:	e8 9c fd ff ff       	call   c0019608 <KiUbsanPrintDetails(char const*, void*)>
c001986c:	83 c4 10             	add    esp,0x10
c001986f:	83 ec 0c             	sub    esp,0xc
c0019872:	68 e1 1c 03 c0       	push   0xc0031ce1
c0019877:	e8 6e 6c 00 00       	call   c00204ea <KePanic(char const*)>
c001987c:	83 c4 10             	add    esp,0x10
c001987f:	90                   	nop
c0019880:	83 c4 0c             	add    esp,0xc
c0019883:	c3                   	ret    

c0019884 <__ubsan_handle_shift_out_of_bounds>:
c0019884:	83 ec 0c             	sub    esp,0xc
c0019887:	83 ec 08             	sub    esp,0x8
c001988a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001988e:	68 80 1e 03 c0       	push   0xc0031e80
c0019893:	e8 70 fd ff ff       	call   c0019608 <KiUbsanPrintDetails(char const*, void*)>
c0019898:	83 c4 10             	add    esp,0x10
c001989b:	83 ec 0c             	sub    esp,0xc
c001989e:	68 80 1e 03 c0       	push   0xc0031e80
c00198a3:	e8 42 6c 00 00       	call   c00204ea <KePanic(char const*)>
c00198a8:	83 c4 10             	add    esp,0x10
c00198ab:	90                   	nop
c00198ac:	83 c4 0c             	add    esp,0xc
c00198af:	c3                   	ret    

c00198b0 <__ubsan_handle_negate_overflow>:
c00198b0:	83 ec 0c             	sub    esp,0xc
c00198b3:	83 ec 08             	sub    esp,0x8
c00198b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00198ba:	68 a4 1e 03 c0       	push   0xc0031ea4
c00198bf:	e8 44 fd ff ff       	call   c0019608 <KiUbsanPrintDetails(char const*, void*)>
c00198c4:	83 c4 10             	add    esp,0x10
c00198c7:	83 ec 0c             	sub    esp,0xc
c00198ca:	68 a4 1e 03 c0       	push   0xc0031ea4
c00198cf:	e8 16 6c 00 00       	call   c00204ea <KePanic(char const*)>
c00198d4:	83 c4 10             	add    esp,0x10
c00198d7:	90                   	nop
c00198d8:	83 c4 0c             	add    esp,0xc
c00198db:	c3                   	ret    

c00198dc <KiIsHashInTable(unsigned short)>:
c00198dc:	0f b7 d0             	movzx  edx,ax
c00198df:	83 e0 07             	and    eax,0x7
c00198e2:	c1 fa 03             	sar    edx,0x3
c00198e5:	88 c1                	mov    cl,al
c00198e7:	0f b6 92 00 af 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffc5100]
c00198ee:	d3 fa                	sar    edx,cl
c00198f0:	89 d0                	mov    eax,edx
c00198f2:	83 e0 01             	and    eax,0x1
c00198f5:	c3                   	ret    

c00198f6 <KiSetHashInTable(unsigned short, bool)>:
c00198f6:	56                   	push   esi
c00198f7:	53                   	push   ebx
c00198f8:	0f b7 d8             	movzx  ebx,ax
c00198fb:	83 e0 07             	and    eax,0x7
c00198fe:	c1 fb 03             	sar    ebx,0x3
c0019901:	89 c1                	mov    ecx,eax
c0019903:	0f b6 b3 00 af 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffc5100]
c001990a:	b8 01 00 00 00       	mov    eax,0x1
c001990f:	d3 e0                	shl    eax,cl
c0019911:	84 d2                	test   dl,dl
c0019913:	74 04                	je     c0019919 <KiSetHashInTable(unsigned short, bool)+0x23>
c0019915:	09 f0                	or     eax,esi
c0019917:	eb 04                	jmp    c001991d <KiSetHashInTable(unsigned short, bool)+0x27>
c0019919:	f7 d0                	not    eax
c001991b:	21 f0                	and    eax,esi
c001991d:	88 83 00 af 03 c0    	mov    BYTE PTR [ebx-0x3ffc5100],al
c0019923:	5b                   	pop    ebx
c0019924:	5e                   	pop    esi
c0019925:	c3                   	ret    

c0019926 <KiFlushSymlinkChanges()>:
c0019926:	57                   	push   edi
c0019927:	56                   	push   esi
c0019928:	53                   	push   ebx
c0019929:	83 ec 1c             	sub    esp,0x1c
c001992c:	68 14 01 00 00       	push   0x114
c0019931:	e8 0d cd ff ff       	call   c0016643 <malloc>
c0019936:	83 c4 0c             	add    esp,0xc
c0019939:	89 c3                	mov    ebx,eax
c001993b:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019941:	68 c3 1e 03 c0       	push   0xc0031ec3
c0019946:	50                   	push   eax
c0019947:	e8 8c 0d 00 00       	call   c001a6d8 <File::File(char const*, Process*)>
c001994c:	83 c4 10             	add    esp,0x10
c001994f:	85 db                	test   ebx,ebx
c0019951:	75 10                	jne    c0019963 <KiFlushSymlinkChanges()+0x3d>
c0019953:	83 ec 0c             	sub    esp,0xc
c0019956:	68 e1 1e 03 c0       	push   0xc0031ee1
c001995b:	e8 8a 6b 00 00       	call   c00204ea <KePanic(char const*)>
c0019960:	83 c4 10             	add    esp,0x10
c0019963:	50                   	push   eax
c0019964:	50                   	push   eax
c0019965:	6a 06                	push   0x6
c0019967:	53                   	push   ebx
c0019968:	e8 89 0d 00 00       	call   c001a6f6 <File::open(FileOpenMode)>
c001996d:	83 c4 10             	add    esp,0x10
c0019970:	85 c0                	test   eax,eax
c0019972:	74 10                	je     c0019984 <KiFlushSymlinkChanges()+0x5e>
c0019974:	83 ec 0c             	sub    esp,0xc
c0019977:	68 fb 1e 03 c0       	push   0xc0031efb
c001997c:	e8 69 6b 00 00       	call   c00204ea <KePanic(char const*)>
c0019981:	83 c4 10             	add    esp,0x10
c0019984:	31 f6                	xor    esi,esi
c0019986:	39 35 c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,esi
c001998c:	7e 70                	jle    c00199fe <KiFlushSymlinkChanges()+0xd8>
c001998e:	83 ec 0c             	sub    esp,0xc
c0019991:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019993:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0019997:	89 f0                	mov    eax,esi
c0019999:	57                   	push   edi
c001999a:	c1 e0 08             	shl    eax,0x8
c001999d:	05 00 ab 03 c0       	add    eax,0xc003ab00
c00199a2:	50                   	push   eax
c00199a3:	6a 00                	push   0x0
c00199a5:	68 00 01 00 00       	push   0x100
c00199aa:	53                   	push   ebx
c00199ab:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00199ae:	83 c4 20             	add    esp,0x20
c00199b1:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c00199b9:	74 10                	je     c00199cb <KiFlushSymlinkChanges()+0xa5>
c00199bb:	83 ec 0c             	sub    esp,0xc
c00199be:	68 15 1f 03 c0       	push   0xc0031f15
c00199c3:	e8 22 6b 00 00       	call   c00204ea <KePanic(char const*)>
c00199c8:	83 c4 10             	add    esp,0x10
c00199cb:	83 ec 0c             	sub    esp,0xc
c00199ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199d0:	8d 14 f5 e0 aa 03 c0 	lea    edx,[esi*8-0x3ffc5520]
c00199d7:	57                   	push   edi
c00199d8:	52                   	push   edx
c00199d9:	6a 00                	push   0x0
c00199db:	6a 08                	push   0x8
c00199dd:	53                   	push   ebx
c00199de:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00199e1:	83 c4 20             	add    esp,0x20
c00199e4:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00199e9:	74 10                	je     c00199fb <KiFlushSymlinkChanges()+0xd5>
c00199eb:	83 ec 0c             	sub    esp,0xc
c00199ee:	68 2f 1f 03 c0       	push   0xc0031f2f
c00199f3:	e8 f2 6a 00 00       	call   c00204ea <KePanic(char const*)>
c00199f8:	83 c4 10             	add    esp,0x10
c00199fb:	46                   	inc    esi
c00199fc:	eb 88                	jmp    c0019986 <KiFlushSymlinkChanges()+0x60>
c00199fe:	83 ec 0c             	sub    esp,0xc
c0019a01:	53                   	push   ebx
c0019a02:	e8 4d 0d 00 00       	call   c001a754 <File::close()>
c0019a07:	83 c4 10             	add    esp,0x10
c0019a0a:	85 db                	test   ebx,ebx
c0019a0c:	74 0c                	je     c0019a1a <KiFlushSymlinkChanges()+0xf4>
c0019a0e:	83 ec 0c             	sub    esp,0xc
c0019a11:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a13:	53                   	push   ebx
c0019a14:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a17:	83 c4 10             	add    esp,0x10
c0019a1a:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c0019a24:	83 c4 10             	add    esp,0x10
c0019a27:	5b                   	pop    ebx
c0019a28:	5e                   	pop    esi
c0019a29:	5f                   	pop    edi
c0019a2a:	c3                   	ret    

c0019a2b <KiDeinitialiseSymlinks(void*)>:
c0019a2b:	e9 f6 fe ff ff       	jmp    c0019926 <KiFlushSymlinkChanges()>

c0019a30 <KiGetSymlinkHash(char const*)>:
c0019a30:	53                   	push   ebx
c0019a31:	89 c3                	mov    ebx,eax
c0019a33:	83 ec 14             	sub    esp,0x14
c0019a36:	50                   	push   eax
c0019a37:	e8 34 6b fe ff       	call   c0000570 <strlen>
c0019a3c:	5a                   	pop    edx
c0019a3d:	59                   	pop    ecx
c0019a3e:	50                   	push   eax
c0019a3f:	53                   	push   ebx
c0019a40:	e8 0c 64 00 00       	call   c001fe51 <KeCalculateCRC32(unsigned char*, int)>
c0019a45:	83 c4 18             	add    esp,0x18
c0019a48:	89 c2                	mov    edx,eax
c0019a4a:	5b                   	pop    ebx
c0019a4b:	c1 ea 10             	shr    edx,0x10
c0019a4e:	31 d0                	xor    eax,edx
c0019a50:	c3                   	ret    

c0019a51 <KiCreateSymlinkID()>:
c0019a51:	55                   	push   ebp
c0019a52:	57                   	push   edi
c0019a53:	56                   	push   esi
c0019a54:	53                   	push   ebx
c0019a55:	31 db                	xor    ebx,ebx
c0019a57:	83 ec 1c             	sub    esp,0x1c
c0019a5a:	e8 d9 6b 00 00       	call   c0020638 <KeRand()>
c0019a5f:	43                   	inc    ebx
c0019a60:	8b 2d 00 cf 03 c0    	mov    ebp,DWORD PTR ds:0xc003cf00
c0019a66:	31 d2                	xor    edx,edx
c0019a68:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0019a6b:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0019a6f:	89 0d 00 cf 03 c0    	mov    DWORD PTR ds:0xc003cf00,ecx
c0019a75:	c1 e0 1f             	shl    eax,0x1f
c0019a78:	89 d7                	mov    edi,edx
c0019a7a:	89 c6                	mov    esi,eax
c0019a7c:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0019a80:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019a88:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0019a8e:	75 10                	jne    c0019aa0 <KiCreateSymlinkID()+0x4f>
c0019a90:	83 ec 0c             	sub    esp,0xc
c0019a93:	68 49 1f 03 c0       	push   0xc0031f49
c0019a98:	e8 4d 6a 00 00       	call   c00204ea <KePanic(char const*)>
c0019a9d:	83 c4 10             	add    esp,0x10
c0019aa0:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0019aa4:	75 04                	jne    c0019aaa <KiCreateSymlinkID()+0x59>
c0019aa6:	39 f5                	cmp    ebp,esi
c0019aa8:	74 b0                	je     c0019a5a <KiCreateSymlinkID()+0x9>
c0019aaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019aae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019ab2:	31 f0                	xor    eax,esi
c0019ab4:	83 c4 1c             	add    esp,0x1c
c0019ab7:	31 fa                	xor    edx,edi
c0019ab9:	5b                   	pop    ebx
c0019aba:	5e                   	pop    esi
c0019abb:	5f                   	pop    edi
c0019abc:	5d                   	pop    ebp
c0019abd:	c3                   	ret    

c0019abe <KeRegisterSymlink(char const*, unsigned long long)>:
c0019abe:	53                   	push   ebx
c0019abf:	83 ec 0c             	sub    esp,0xc
c0019ac2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019ac6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019aca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019ace:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019ad3:	68 00 01 00 00       	push   0x100
c0019ad8:	89 0c c5 e4 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc551c],ecx
c0019adf:	6a 00                	push   0x0
c0019ae1:	89 14 c5 e0 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc5520],edx
c0019ae8:	c1 e0 08             	shl    eax,0x8
c0019aeb:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019af0:	50                   	push   eax
c0019af1:	e8 fa 69 fe ff       	call   c00004f0 <memset>
c0019af6:	58                   	pop    eax
c0019af7:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019afc:	5a                   	pop    edx
c0019afd:	c1 e0 08             	shl    eax,0x8
c0019b00:	53                   	push   ebx
c0019b01:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019b06:	50                   	push   eax
c0019b07:	e8 34 6b fe ff       	call   c0000640 <strcpy>
c0019b0c:	89 d8                	mov    eax,ebx
c0019b0e:	e8 1d ff ff ff       	call   c0019a30 <KiGetSymlinkHash(char const*)>
c0019b13:	59                   	pop    ecx
c0019b14:	0f b7 d8             	movzx  ebx,ax
c0019b17:	58                   	pop    eax
c0019b18:	53                   	push   ebx
c0019b19:	68 52 1f 03 c0       	push   0xc0031f52
c0019b1e:	e8 ae f9 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0019b23:	89 d8                	mov    eax,ebx
c0019b25:	ba 01 00 00 00       	mov    edx,0x1
c0019b2a:	e8 c7 fd ff ff       	call   c00198f6 <KiSetHashInTable(unsigned short, bool)>
c0019b2f:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019b34:	83 c4 10             	add    esp,0x10
c0019b37:	40                   	inc    eax
c0019b38:	a3 c0 aa 03 c0       	mov    ds:0xc003aac0,eax
c0019b3d:	83 f8 03             	cmp    eax,0x3
c0019b40:	7e 09                	jle    c0019b4b <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c0019b42:	83 c4 08             	add    esp,0x8
c0019b45:	5b                   	pop    ebx
c0019b46:	e9 db fd ff ff       	jmp    c0019926 <KiFlushSymlinkChanges()>
c0019b4b:	83 c4 08             	add    esp,0x8
c0019b4e:	5b                   	pop    ebx
c0019b4f:	c3                   	ret    

c0019b50 <KeInitialiseSymlinks()>:
c0019b50:	57                   	push   edi
c0019b51:	56                   	push   esi
c0019b52:	53                   	push   ebx
c0019b53:	81 ec 14 01 00 00    	sub    esp,0x114
c0019b59:	c7 05 00 cf 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003cf00,0x0
c0019b63:	68 00 20 00 00       	push   0x2000
c0019b68:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c0019b72:	6a 00                	push   0x0
c0019b74:	68 00 af 03 c0       	push   0xc003af00
c0019b79:	e8 72 69 fe ff       	call   c00004f0 <memset>
c0019b7e:	59                   	pop    ecx
c0019b7f:	5b                   	pop    ebx
c0019b80:	ff 35 00 cf 03 c0    	push   DWORD PTR ds:0xc003cf00
c0019b86:	68 66 1f 03 c0       	push   0xc0031f66
c0019b8b:	e8 41 f9 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0019b90:	5e                   	pop    esi
c0019b91:	5f                   	pop    edi
c0019b92:	6a 00                	push   0x0
c0019b94:	68 2b 9a 01 c0       	push   0xc0019a2b
c0019b99:	e8 d6 60 00 00       	call   c001fc74 <KeRegisterAtexit(void (*)(void*), void*)>
c0019b9e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019ba5:	e8 99 ca ff ff       	call   c0016643 <malloc>
c0019baa:	83 c4 0c             	add    esp,0xc
c0019bad:	89 c3                	mov    ebx,eax
c0019baf:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019bb5:	68 c3 1e 03 c0       	push   0xc0031ec3
c0019bba:	50                   	push   eax
c0019bbb:	e8 18 0b 00 00       	call   c001a6d8 <File::File(char const*, Process*)>
c0019bc0:	83 c4 10             	add    esp,0x10
c0019bc3:	85 db                	test   ebx,ebx
c0019bc5:	75 10                	jne    c0019bd7 <KeInitialiseSymlinks()+0x87>
c0019bc7:	83 ec 0c             	sub    esp,0xc
c0019bca:	68 83 1f 03 c0       	push   0xc0031f83
c0019bcf:	e8 16 69 00 00       	call   c00204ea <KePanic(char const*)>
c0019bd4:	83 c4 10             	add    esp,0x10
c0019bd7:	83 ec 0c             	sub    esp,0xc
c0019bda:	53                   	push   ebx
c0019bdb:	e8 da 0d 00 00       	call   c001a9ba <File::exists()>
c0019be0:	83 c4 10             	add    esp,0x10
c0019be3:	84 c0                	test   al,al
c0019be5:	75 3a                	jne    c0019c21 <KeInitialiseSymlinks()+0xd1>
c0019be7:	52                   	push   edx
c0019be8:	52                   	push   edx
c0019be9:	6a 12                	push   0x12
c0019beb:	53                   	push   ebx
c0019bec:	e8 05 0b 00 00       	call   c001a6f6 <File::open(FileOpenMode)>
c0019bf1:	83 c4 10             	add    esp,0x10
c0019bf4:	85 c0                	test   eax,eax
c0019bf6:	74 10                	je     c0019c08 <KeInitialiseSymlinks()+0xb8>
c0019bf8:	83 ec 0c             	sub    esp,0xc
c0019bfb:	68 a0 1f 03 c0       	push   0xc0031fa0
c0019c00:	e8 e5 68 00 00       	call   c00204ea <KePanic(char const*)>
c0019c05:	83 c4 10             	add    esp,0x10
c0019c08:	83 ec 0c             	sub    esp,0xc
c0019c0b:	53                   	push   ebx
c0019c0c:	e8 43 0b 00 00       	call   c001a754 <File::close()>
c0019c11:	83 c4 10             	add    esp,0x10
c0019c14:	85 db                	test   ebx,ebx
c0019c16:	0f 84 9e 00 00 00    	je     c0019cba <KeInitialiseSymlinks()+0x16a>
c0019c1c:	e9 8d 00 00 00       	jmp    c0019cae <KeInitialiseSymlinks()+0x15e>
c0019c21:	50                   	push   eax
c0019c22:	50                   	push   eax
c0019c23:	6a 01                	push   0x1
c0019c25:	53                   	push   ebx
c0019c26:	e8 cb 0a 00 00       	call   c001a6f6 <File::open(FileOpenMode)>
c0019c2b:	83 c4 10             	add    esp,0x10
c0019c2e:	85 c0                	test   eax,eax
c0019c30:	74 10                	je     c0019c42 <KeInitialiseSymlinks()+0xf2>
c0019c32:	83 ec 0c             	sub    esp,0xc
c0019c35:	68 bd 1f 03 c0       	push   0xc0031fbd
c0019c3a:	e8 ab 68 00 00       	call   c00204ea <KePanic(char const*)>
c0019c3f:	83 c4 10             	add    esp,0x10
c0019c42:	83 ec 0c             	sub    esp,0xc
c0019c45:	ff 05 00 cf 03 c0    	inc    DWORD PTR ds:0xc003cf00
c0019c4b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019c4f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c51:	57                   	push   edi
c0019c52:	8d 74 24 20          	lea    esi,[esp+0x20]
c0019c56:	56                   	push   esi
c0019c57:	6a 00                	push   0x0
c0019c59:	68 00 01 00 00       	push   0x100
c0019c5e:	53                   	push   ebx
c0019c5f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c62:	83 c4 20             	add    esp,0x20
c0019c65:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019c6d:	75 33                	jne    c0019ca2 <KeInitialiseSymlinks()+0x152>
c0019c6f:	83 ec 0c             	sub    esp,0xc
c0019c72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c74:	57                   	push   edi
c0019c75:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019c79:	52                   	push   edx
c0019c7a:	6a 00                	push   0x0
c0019c7c:	6a 08                	push   0x8
c0019c7e:	53                   	push   ebx
c0019c7f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c82:	83 c4 20             	add    esp,0x20
c0019c85:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019c8a:	75 16                	jne    c0019ca2 <KeInitialiseSymlinks()+0x152>
c0019c8c:	89 f0                	mov    eax,esi
c0019c8e:	e8 9d fd ff ff       	call   c0019a30 <KiGetSymlinkHash(char const*)>
c0019c93:	ba 01 00 00 00       	mov    edx,0x1
c0019c98:	0f b7 c0             	movzx  eax,ax
c0019c9b:	e8 56 fc ff ff       	call   c00198f6 <KiSetHashInTable(unsigned short, bool)>
c0019ca0:	eb a0                	jmp    c0019c42 <KeInitialiseSymlinks()+0xf2>
c0019ca2:	83 ec 0c             	sub    esp,0xc
c0019ca5:	53                   	push   ebx
c0019ca6:	e8 a9 0a 00 00       	call   c001a754 <File::close()>
c0019cab:	83 c4 10             	add    esp,0x10
c0019cae:	83 ec 0c             	sub    esp,0xc
c0019cb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019cb3:	53                   	push   ebx
c0019cb4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019cb7:	83 c4 10             	add    esp,0x10
c0019cba:	81 c4 10 01 00 00    	add    esp,0x110
c0019cc0:	5b                   	pop    ebx
c0019cc1:	5e                   	pop    esi
c0019cc2:	5f                   	pop    edi
c0019cc3:	c3                   	ret    

c0019cc4 <KiIsSymlinkRegistered(char const*)>:
c0019cc4:	55                   	push   ebp
c0019cc5:	57                   	push   edi
c0019cc6:	56                   	push   esi
c0019cc7:	53                   	push   ebx
c0019cc8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019cce:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0019cd5:	89 f0                	mov    eax,esi
c0019cd7:	e8 54 fd ff ff       	call   c0019a30 <KiGetSymlinkHash(char const*)>
c0019cdc:	0f b7 c0             	movzx  eax,ax
c0019cdf:	53                   	push   ebx
c0019ce0:	56                   	push   esi
c0019ce1:	50                   	push   eax
c0019ce2:	68 d8 1f 03 c0       	push   0xc0031fd8
c0019ce7:	e8 e5 f7 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0019cec:	89 f0                	mov    eax,esi
c0019cee:	e8 3d fd ff ff       	call   c0019a30 <KiGetSymlinkHash(char const*)>
c0019cf3:	0f b7 c0             	movzx  eax,ax
c0019cf6:	e8 e1 fb ff ff       	call   c00198dc <KiIsHashInTable(unsigned short)>
c0019cfb:	83 c4 10             	add    esp,0x10
c0019cfe:	88 c1                	mov    cl,al
c0019d00:	31 d2                	xor    edx,edx
c0019d02:	31 c0                	xor    eax,eax
c0019d04:	84 c9                	test   cl,cl
c0019d06:	0f 84 31 01 00 00    	je     c0019e3d <KiIsSymlinkRegistered(char const*)+0x179>
c0019d0c:	31 db                	xor    ebx,ebx
c0019d0e:	39 1d c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,ebx
c0019d14:	7e 30                	jle    c0019d46 <KiIsSymlinkRegistered(char const*)+0x82>
c0019d16:	89 d8                	mov    eax,ebx
c0019d18:	51                   	push   ecx
c0019d19:	c1 e0 08             	shl    eax,0x8
c0019d1c:	51                   	push   ecx
c0019d1d:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019d22:	50                   	push   eax
c0019d23:	56                   	push   esi
c0019d24:	e8 27 6a fe ff       	call   c0000750 <strcmp>
c0019d29:	83 c4 10             	add    esp,0x10
c0019d2c:	85 c0                	test   eax,eax
c0019d2e:	75 13                	jne    c0019d43 <KiIsSymlinkRegistered(char const*)+0x7f>
c0019d30:	8b 04 dd e0 aa 03 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffc5520]
c0019d37:	8b 14 dd e4 aa 03 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffc551c]
c0019d3e:	e9 fa 00 00 00       	jmp    c0019e3d <KiIsSymlinkRegistered(char const*)+0x179>
c0019d43:	43                   	inc    ebx
c0019d44:	eb c8                	jmp    c0019d0e <KiIsSymlinkRegistered(char const*)+0x4a>
c0019d46:	83 ec 0c             	sub    esp,0xc
c0019d49:	68 14 01 00 00       	push   0x114
c0019d4e:	e8 f0 c8 ff ff       	call   c0016643 <malloc>
c0019d53:	83 c4 0c             	add    esp,0xc
c0019d56:	89 c3                	mov    ebx,eax
c0019d58:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019d5e:	68 c3 1e 03 c0       	push   0xc0031ec3
c0019d63:	50                   	push   eax
c0019d64:	e8 6f 09 00 00       	call   c001a6d8 <File::File(char const*, Process*)>
c0019d69:	83 c4 10             	add    esp,0x10
c0019d6c:	85 db                	test   ebx,ebx
c0019d6e:	75 12                	jne    c0019d82 <KiIsSymlinkRegistered(char const*)+0xbe>
c0019d70:	83 ec 0c             	sub    esp,0xc
c0019d73:	68 ed 1f 03 c0       	push   0xc0031fed
c0019d78:	e8 6d 67 00 00       	call   c00204ea <KePanic(char const*)>
c0019d7d:	83 c4 10             	add    esp,0x10
c0019d80:	eb 10                	jmp    c0019d92 <KiIsSymlinkRegistered(char const*)+0xce>
c0019d82:	83 ec 0c             	sub    esp,0xc
c0019d85:	53                   	push   ebx
c0019d86:	e8 2f 0c 00 00       	call   c001a9ba <File::exists()>
c0019d8b:	83 c4 10             	add    esp,0x10
c0019d8e:	84 c0                	test   al,al
c0019d90:	74 de                	je     c0019d70 <KiIsSymlinkRegistered(char const*)+0xac>
c0019d92:	52                   	push   edx
c0019d93:	52                   	push   edx
c0019d94:	6a 01                	push   0x1
c0019d96:	53                   	push   ebx
c0019d97:	e8 5a 09 00 00       	call   c001a6f6 <File::open(FileOpenMode)>
c0019d9c:	83 c4 10             	add    esp,0x10
c0019d9f:	85 c0                	test   eax,eax
c0019da1:	74 10                	je     c0019db3 <KiIsSymlinkRegistered(char const*)+0xef>
c0019da3:	83 ec 0c             	sub    esp,0xc
c0019da6:	68 08 20 03 c0       	push   0xc0032008
c0019dab:	e8 3a 67 00 00       	call   c00204ea <KePanic(char const*)>
c0019db0:	83 c4 10             	add    esp,0x10
c0019db3:	83 ec 0c             	sub    esp,0xc
c0019db6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019db8:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0019dbc:	55                   	push   ebp
c0019dbd:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0019dc1:	57                   	push   edi
c0019dc2:	6a 00                	push   0x0
c0019dc4:	68 00 01 00 00       	push   0x100
c0019dc9:	53                   	push   ebx
c0019dca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019dcd:	83 c4 20             	add    esp,0x20
c0019dd0:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019dd8:	75 4b                	jne    c0019e25 <KiIsSymlinkRegistered(char const*)+0x161>
c0019dda:	83 ec 0c             	sub    esp,0xc
c0019ddd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ddf:	55                   	push   ebp
c0019de0:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019de4:	52                   	push   edx
c0019de5:	6a 00                	push   0x0
c0019de7:	6a 08                	push   0x8
c0019de9:	53                   	push   ebx
c0019dea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019ded:	83 c4 20             	add    esp,0x20
c0019df0:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019df5:	75 2e                	jne    c0019e25 <KiIsSymlinkRegistered(char const*)+0x161>
c0019df7:	50                   	push   eax
c0019df8:	50                   	push   eax
c0019df9:	57                   	push   edi
c0019dfa:	56                   	push   esi
c0019dfb:	e8 50 69 fe ff       	call   c0000750 <strcmp>
c0019e00:	83 c4 10             	add    esp,0x10
c0019e03:	85 c0                	test   eax,eax
c0019e05:	75 ac                	jne    c0019db3 <KiIsSymlinkRegistered(char const*)+0xef>
c0019e07:	83 ec 0c             	sub    esp,0xc
c0019e0a:	53                   	push   ebx
c0019e0b:	e8 44 09 00 00       	call   c001a754 <File::close()>
c0019e10:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e15:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019e18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e1c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e20:	83 c4 10             	add    esp,0x10
c0019e23:	eb 18                	jmp    c0019e3d <KiIsSymlinkRegistered(char const*)+0x179>
c0019e25:	83 ec 0c             	sub    esp,0xc
c0019e28:	53                   	push   ebx
c0019e29:	e8 26 09 00 00       	call   c001a754 <File::close()>
c0019e2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e33:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019e36:	83 c4 10             	add    esp,0x10
c0019e39:	31 c0                	xor    eax,eax
c0019e3b:	31 d2                	xor    edx,edx
c0019e3d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e43:	5b                   	pop    ebx
c0019e44:	5e                   	pop    esi
c0019e45:	5f                   	pop    edi
c0019e46:	5d                   	pop    ebp
c0019e47:	c3                   	ret    

c0019e48 <KeDereferenceSymlink(char const*, char*)>:
c0019e48:	55                   	push   ebp
c0019e49:	57                   	push   edi
c0019e4a:	56                   	push   esi
c0019e4b:	53                   	push   ebx
c0019e4c:	83 ec 48             	sub    esp,0x48
c0019e4f:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019e53:	56                   	push   esi
c0019e54:	e8 6b fe ff ff       	call   c0019cc4 <KiIsSymlinkRegistered(char const*)>
c0019e59:	83 c4 10             	add    esp,0x10
c0019e5c:	89 c7                	mov    edi,eax
c0019e5e:	89 d0                	mov    eax,edx
c0019e60:	09 f8                	or     eax,edi
c0019e62:	75 07                	jne    c0019e6b <KeDereferenceSymlink(char const*, char*)+0x23>
c0019e64:	31 c0                	xor    eax,eax
c0019e66:	e9 7c 01 00 00       	jmp    c0019fe7 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019e6b:	83 ec 0c             	sub    esp,0xc
c0019e6e:	89 d5                	mov    ebp,edx
c0019e70:	68 14 01 00 00       	push   0x114
c0019e75:	e8 c9 c7 ff ff       	call   c0016643 <malloc>
c0019e7a:	83 c4 0c             	add    esp,0xc
c0019e7d:	89 c3                	mov    ebx,eax
c0019e7f:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019e85:	56                   	push   esi
c0019e86:	50                   	push   eax
c0019e87:	e8 4c 08 00 00       	call   c001a6d8 <File::File(char const*, Process*)>
c0019e8c:	83 c4 10             	add    esp,0x10
c0019e8f:	85 db                	test   ebx,ebx
c0019e91:	0f 84 32 01 00 00    	je     c0019fc9 <KeDereferenceSymlink(char const*, char*)+0x181>
c0019e97:	56                   	push   esi
c0019e98:	56                   	push   esi
c0019e99:	6a 01                	push   0x1
c0019e9b:	53                   	push   ebx
c0019e9c:	e8 55 08 00 00       	call   c001a6f6 <File::open(FileOpenMode)>
c0019ea1:	83 c4 10             	add    esp,0x10
c0019ea4:	85 c0                	test   eax,eax
c0019ea6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ea8:	74 09                	je     c0019eb3 <KeDereferenceSymlink(char const*, char*)+0x6b>
c0019eaa:	83 ec 0c             	sub    esp,0xc
c0019ead:	53                   	push   ebx
c0019eae:	e9 10 01 00 00       	jmp    c0019fc3 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0019eb3:	83 ec 0c             	sub    esp,0xc
c0019eb6:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019eba:	56                   	push   esi
c0019ebb:	8d 54 24 37          	lea    edx,[esp+0x37]
c0019ebf:	52                   	push   edx
c0019ec0:	6a 00                	push   0x0
c0019ec2:	6a 08                	push   0x8
c0019ec4:	53                   	push   ebx
c0019ec5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019ec8:	83 c4 20             	add    esp,0x20
c0019ecb:	85 c0                	test   eax,eax
c0019ecd:	0f 85 e2 00 00 00    	jne    c0019fb5 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019ed3:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019ed8:	0f 85 d7 00 00 00    	jne    c0019fb5 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019ede:	83 ec 0c             	sub    esp,0xc
c0019ee1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ee3:	56                   	push   esi
c0019ee4:	8d 54 24 20          	lea    edx,[esp+0x20]
c0019ee8:	52                   	push   edx
c0019ee9:	6a 00                	push   0x0
c0019eeb:	6a 08                	push   0x8
c0019eed:	53                   	push   ebx
c0019eee:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019ef1:	83 c4 20             	add    esp,0x20
c0019ef4:	85 c0                	test   eax,eax
c0019ef6:	0f 85 b9 00 00 00    	jne    c0019fb5 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019efc:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019f01:	0f 85 ae 00 00 00    	jne    c0019fb5 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019f07:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0019f0b:	0f 85 53 ff ff ff    	jne    c0019e64 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019f11:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0019f15:	0f 85 49 ff ff ff    	jne    c0019e64 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019f1b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019f23:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019f2b:	51                   	push   ecx
c0019f2c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0019f30:	50                   	push   eax
c0019f31:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019f35:	50                   	push   eax
c0019f36:	53                   	push   ebx
c0019f37:	e8 bc 0a 00 00       	call   c001a9f8 <File::stat(unsigned long long*, bool*)>
c0019f3c:	83 c4 10             	add    esp,0x10
c0019f3f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019f44:	75 6f                	jne    c0019fb5 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019f46:	31 c9                	xor    ecx,ecx
c0019f48:	bf 0f 00 00 00       	mov    edi,0xf
c0019f4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f51:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019f55:	39 c7                	cmp    edi,eax
c0019f57:	89 cf                	mov    edi,ecx
c0019f59:	19 d7                	sbb    edi,edx
c0019f5b:	73 58                	jae    c0019fb5 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019f5d:	83 c0 f0             	add    eax,0xfffffff0
c0019f60:	bf ff 00 00 00       	mov    edi,0xff
c0019f65:	83 d2 ff             	adc    edx,0xffffffff
c0019f68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019f6c:	39 c7                	cmp    edi,eax
c0019f6e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019f72:	19 d1                	sbb    ecx,edx
c0019f74:	72 53                	jb     c0019fc9 <KeDereferenceSymlink(char const*, char*)+0x181>
c0019f76:	40                   	inc    eax
c0019f77:	52                   	push   edx
c0019f78:	50                   	push   eax
c0019f79:	6a 00                	push   0x0
c0019f7b:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0019f7f:	e8 6c 65 fe ff       	call   c00004f0 <memset>
c0019f84:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f86:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f89:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0019f8d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019f91:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019f95:	53                   	push   ebx
c0019f96:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019f99:	83 c4 20             	add    esp,0x20
c0019f9c:	85 c0                	test   eax,eax
c0019f9e:	75 15                	jne    c0019fb5 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019fa0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fa4:	89 c7                	mov    edi,eax
c0019fa6:	c1 ff 1f             	sar    edi,0x1f
c0019fa9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0019fad:	75 06                	jne    c0019fb5 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019faf:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019fb3:	74 19                	je     c0019fce <KeDereferenceSymlink(char const*, char*)+0x186>
c0019fb5:	83 ec 0c             	sub    esp,0xc
c0019fb8:	53                   	push   ebx
c0019fb9:	e8 96 07 00 00       	call   c001a754 <File::close()>
c0019fbe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fc3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019fc6:	83 c4 10             	add    esp,0x10
c0019fc9:	83 c8 ff             	or     eax,0xffffffff
c0019fcc:	eb 19                	jmp    c0019fe7 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019fce:	83 ec 0c             	sub    esp,0xc
c0019fd1:	53                   	push   ebx
c0019fd2:	e8 7d 07 00 00       	call   c001a754 <File::close()>
c0019fd7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fdc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019fdf:	83 c4 10             	add    esp,0x10
c0019fe2:	b8 01 00 00 00       	mov    eax,0x1
c0019fe7:	83 c4 3c             	add    esp,0x3c
c0019fea:	5b                   	pop    ebx
c0019feb:	5e                   	pop    esi
c0019fec:	5f                   	pop    edi
c0019fed:	5d                   	pop    ebp
c0019fee:	c3                   	ret    

c0019fef <KeCreateSymlink(char const*, char const*)>:
c0019fef:	55                   	push   ebp
c0019ff0:	57                   	push   edi
c0019ff1:	56                   	push   esi
c0019ff2:	53                   	push   ebx
c0019ff3:	83 ec 38             	sub    esp,0x38
c0019ff6:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0019ffa:	68 14 01 00 00       	push   0x114
c0019fff:	e8 3f c6 ff ff       	call   c0016643 <malloc>
c001a004:	6a 00                	push   0x0
c001a006:	89 c3                	mov    ebx,eax
c001a008:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001a00e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a012:	50                   	push   eax
c001a013:	e8 e2 05 00 00       	call   c001a5fa <File::File(char const*, Process*, bool)>
c001a018:	83 c4 20             	add    esp,0x20
c001a01b:	b8 01 00 00 00       	mov    eax,0x1
c001a020:	85 db                	test   ebx,ebx
c001a022:	0f 84 19 01 00 00    	je     c001a141 <KeCreateSymlink(char const*, char const*)+0x152>
c001a028:	52                   	push   edx
c001a029:	52                   	push   edx
c001a02a:	6a 12                	push   0x12
c001a02c:	53                   	push   ebx
c001a02d:	e8 c4 06 00 00       	call   c001a6f6 <File::open(FileOpenMode)>
c001a032:	83 c4 10             	add    esp,0x10
c001a035:	85 c0                	test   eax,eax
c001a037:	74 0b                	je     c001a044 <KeCreateSymlink(char const*, char const*)+0x55>
c001a039:	83 ec 0c             	sub    esp,0xc
c001a03c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a03e:	53                   	push   ebx
c001a03f:	e9 f2 00 00 00       	jmp    c001a136 <KeCreateSymlink(char const*, char const*)+0x147>
c001a044:	8d 7c 24 17          	lea    edi,[esp+0x17]
c001a048:	be 55 20 03 c0       	mov    esi,0xc0032055
c001a04d:	b9 09 00 00 00       	mov    ecx,0x9
c001a052:	fc                   	cld    
c001a053:	83 ec 0c             	sub    esp,0xc
c001a056:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a058:	8d 74 24 10          	lea    esi,[esp+0x10]
c001a05c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a05e:	56                   	push   esi
c001a05f:	8d 54 24 27          	lea    edx,[esp+0x27]
c001a063:	52                   	push   edx
c001a064:	6a 00                	push   0x0
c001a066:	6a 08                	push   0x8
c001a068:	53                   	push   ebx
c001a069:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a06c:	83 c4 20             	add    esp,0x20
c001a06f:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c001a074:	0f 85 ae 00 00 00    	jne    c001a128 <KeCreateSymlink(char const*, char const*)+0x139>
c001a07a:	85 c0                	test   eax,eax
c001a07c:	0f 85 a6 00 00 00    	jne    c001a128 <KeCreateSymlink(char const*, char const*)+0x139>
c001a082:	e8 ca f9 ff ff       	call   c0019a51 <KiCreateSymlinkID()>
c001a087:	83 ec 0c             	sub    esp,0xc
c001a08a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a08e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a092:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a094:	56                   	push   esi
c001a095:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a099:	52                   	push   edx
c001a09a:	6a 00                	push   0x0
c001a09c:	6a 08                	push   0x8
c001a09e:	53                   	push   ebx
c001a09f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a0a2:	83 c4 20             	add    esp,0x20
c001a0a5:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c001a0aa:	75 7c                	jne    c001a128 <KeCreateSymlink(char const*, char const*)+0x139>
c001a0ac:	85 c0                	test   eax,eax
c001a0ae:	75 78                	jne    c001a128 <KeCreateSymlink(char const*, char const*)+0x139>
c001a0b0:	83 ec 0c             	sub    esp,0xc
c001a0b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0b5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001a0b8:	55                   	push   ebp
c001a0b9:	e8 b2 64 fe ff       	call   c0000570 <strlen>
c001a0be:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0c1:	31 d2                	xor    edx,edx
c001a0c3:	55                   	push   ebp
c001a0c4:	52                   	push   edx
c001a0c5:	50                   	push   eax
c001a0c6:	53                   	push   ebx
c001a0c7:	ff d7                	call   edi
c001a0c9:	83 c4 14             	add    esp,0x14
c001a0cc:	89 c6                	mov    esi,eax
c001a0ce:	55                   	push   ebp
c001a0cf:	e8 9c 64 fe ff       	call   c0000570 <strlen>
c001a0d4:	83 c4 10             	add    esp,0x10
c001a0d7:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a0db:	75 4b                	jne    c001a128 <KeCreateSymlink(char const*, char const*)+0x139>
c001a0dd:	85 f6                	test   esi,esi
c001a0df:	75 47                	jne    c001a128 <KeCreateSymlink(char const*, char const*)+0x139>
c001a0e1:	50                   	push   eax
c001a0e2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a0e6:	55                   	push   ebp
c001a0e7:	68 23 20 03 c0       	push   0xc0032023
c001a0ec:	e8 e0 f3 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001a0f1:	83 c4 0c             	add    esp,0xc
c001a0f4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a0f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a0fc:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001a100:	e8 b9 f9 ff ff       	call   c0019abe <KeRegisterSymlink(char const*, unsigned long long)>
c001a105:	c7 04 24 48 20 03 c0 	mov    DWORD PTR [esp],0xc0032048
c001a10c:	e8 c0 f3 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001a111:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a114:	e8 3b 06 00 00       	call   c001a754 <File::close()>
c001a119:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a11b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a11e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a121:	83 c4 10             	add    esp,0x10
c001a124:	31 c0                	xor    eax,eax
c001a126:	eb 19                	jmp    c001a141 <KeCreateSymlink(char const*, char const*)+0x152>
c001a128:	83 ec 0c             	sub    esp,0xc
c001a12b:	53                   	push   ebx
c001a12c:	e8 23 06 00 00       	call   c001a754 <File::close()>
c001a131:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a133:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a136:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a139:	83 c4 10             	add    esp,0x10
c001a13c:	b8 01 00 00 00       	mov    eax,0x1
c001a141:	83 c4 2c             	add    esp,0x2c
c001a144:	5b                   	pop    ebx
c001a145:	5e                   	pop    esi
c001a146:	5f                   	pop    edi
c001a147:	5d                   	pop    ebp
c001a148:	c3                   	ret    
c001a149:	90                   	nop

c001a14a <File::read(unsigned long long, void*, int*)>:
c001a14a:	53                   	push   ebx
c001a14b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a14f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a153:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a15a:	83 f8 19             	cmp    eax,0x19
c001a15d:	77 35                	ja     c001a194 <File::read(unsigned long long, void*, int*)+0x4a>
c001a15f:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a166:	85 c0                	test   eax,eax
c001a168:	74 2a                	je     c001a194 <File::read(unsigned long long, void*, int*)+0x4a>
c001a16a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a170:	85 c0                	test   eax,eax
c001a172:	74 20                	je     c001a194 <File::read(unsigned long long, void*, int*)+0x4a>
c001a174:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a178:	74 21                	je     c001a19b <File::read(unsigned long long, void*, int*)+0x51>
c001a17a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a17c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a180:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a186:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a18a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a18e:	5b                   	pop    ebx
c001a18f:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001a192:	ff e0                	jmp    eax
c001a194:	b8 0b 00 00 00       	mov    eax,0xb
c001a199:	eb 05                	jmp    c001a1a0 <File::read(unsigned long long, void*, int*)+0x56>
c001a19b:	b8 05 00 00 00       	mov    eax,0x5
c001a1a0:	5b                   	pop    ebx
c001a1a1:	c3                   	ret    

c001a1a2 <File::write(unsigned long long, void*, int*)>:
c001a1a2:	53                   	push   ebx
c001a1a3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1a7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a1ab:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a1b2:	83 f8 19             	cmp    eax,0x19
c001a1b5:	77 35                	ja     c001a1ec <File::write(unsigned long long, void*, int*)+0x4a>
c001a1b7:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a1be:	85 c0                	test   eax,eax
c001a1c0:	74 2a                	je     c001a1ec <File::write(unsigned long long, void*, int*)+0x4a>
c001a1c2:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a1c8:	85 c0                	test   eax,eax
c001a1ca:	74 20                	je     c001a1ec <File::write(unsigned long long, void*, int*)+0x4a>
c001a1cc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a1d0:	74 21                	je     c001a1f3 <File::write(unsigned long long, void*, int*)+0x51>
c001a1d2:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a1d4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a1d8:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a1de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a1e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a1e6:	5b                   	pop    ebx
c001a1e7:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001a1ea:	ff e0                	jmp    eax
c001a1ec:	b8 0b 00 00 00       	mov    eax,0xb
c001a1f1:	eb 05                	jmp    c001a1f8 <File::write(unsigned long long, void*, int*)+0x56>
c001a1f3:	b8 05 00 00 00       	mov    eax,0x5
c001a1f8:	5b                   	pop    ebx
c001a1f9:	c3                   	ret    

c001a1fa <Directory::read(unsigned long long, void*, int*)>:
c001a1fa:	53                   	push   ebx
c001a1fb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1ff:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a203:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a20a:	83 f8 19             	cmp    eax,0x19
c001a20d:	77 35                	ja     c001a244 <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a20f:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a216:	85 c0                	test   eax,eax
c001a218:	74 2a                	je     c001a244 <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a21a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a220:	85 c0                	test   eax,eax
c001a222:	74 20                	je     c001a244 <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a224:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a228:	74 21                	je     c001a24b <Directory::read(unsigned long long, void*, int*)+0x51>
c001a22a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a22c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a230:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a236:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a23a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a23e:	5b                   	pop    ebx
c001a23f:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c001a242:	ff e0                	jmp    eax
c001a244:	b8 0b 00 00 00       	mov    eax,0xb
c001a249:	eb 05                	jmp    c001a250 <Directory::read(unsigned long long, void*, int*)+0x56>
c001a24b:	b8 05 00 00 00       	mov    eax,0x5
c001a250:	5b                   	pop    ebx
c001a251:	c3                   	ret    

c001a252 <Directory::write(unsigned long long, void*, int*)>:
c001a252:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a256:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001a25d:	b8 0b 00 00 00       	mov    eax,0xb
c001a262:	83 fa 19             	cmp    edx,0x19
c001a265:	77 18                	ja     c001a27f <Directory::write(unsigned long long, void*, int*)+0x2d>
c001a267:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a26e:	85 d2                	test   edx,edx
c001a270:	74 0d                	je     c001a27f <Directory::write(unsigned long long, void*, int*)+0x2d>
c001a272:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c001a279:	19 c0                	sbb    eax,eax
c001a27b:	83 e0 0a             	and    eax,0xa
c001a27e:	40                   	inc    eax
c001a27f:	c3                   	ret    

c001a280 <File::isAtty()>:
c001a280:	31 c0                	xor    eax,eax
c001a282:	c3                   	ret    
c001a283:	90                   	nop

c001a284 <Directory::isAtty()>:
c001a284:	31 c0                	xor    eax,eax
c001a286:	c3                   	ret    
c001a287:	90                   	nop

c001a288 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a288:	b8 0a 00 00 00       	mov    eax,0xa
c001a28d:	c3                   	ret    

c001a28e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001a28e:	b8 0a 00 00 00       	mov    eax,0xa
c001a293:	c3                   	ret    

c001a294 <Filesystem::allocateSwapfile(char const*, int)>:
c001a294:	31 c0                	xor    eax,eax
c001a296:	31 d2                	xor    edx,edx
c001a298:	c3                   	ret    
c001a299:	90                   	nop

c001a29a <File::~File()>:
c001a29a:	83 ec 0c             	sub    esp,0xc
c001a29d:	ba 14 21 03 c0       	mov    edx,0xc0032114
c001a2a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2a6:	89 10                	mov    DWORD PTR [eax],edx
c001a2a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2ac:	83 ec 0c             	sub    esp,0xc
c001a2af:	50                   	push   eax
c001a2b0:	e8 7b dc ff ff       	call   c0017f30 <UnixFile::~UnixFile()>
c001a2b5:	83 c4 10             	add    esp,0x10
c001a2b8:	90                   	nop
c001a2b9:	83 c4 0c             	add    esp,0xc
c001a2bc:	c3                   	ret    
c001a2bd:	90                   	nop

c001a2be <File::~File()>:
c001a2be:	83 ec 0c             	sub    esp,0xc
c001a2c1:	83 ec 0c             	sub    esp,0xc
c001a2c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2c8:	e8 cd ff ff ff       	call   c001a29a <File::~File()>
c001a2cd:	83 c4 10             	add    esp,0x10
c001a2d0:	83 ec 08             	sub    esp,0x8
c001a2d3:	68 14 01 00 00       	push   0x114
c001a2d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2dc:	e8 c3 f0 ff ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c001a2e1:	83 c4 10             	add    esp,0x10
c001a2e4:	83 c4 0c             	add    esp,0xc
c001a2e7:	c3                   	ret    

c001a2e8 <Directory::~Directory()>:
c001a2e8:	83 ec 0c             	sub    esp,0xc
c001a2eb:	ba 30 21 03 c0       	mov    edx,0xc0032130
c001a2f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2f4:	89 10                	mov    DWORD PTR [eax],edx
c001a2f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2fa:	83 ec 0c             	sub    esp,0xc
c001a2fd:	50                   	push   eax
c001a2fe:	e8 2d dc ff ff       	call   c0017f30 <UnixFile::~UnixFile()>
c001a303:	83 c4 10             	add    esp,0x10
c001a306:	90                   	nop
c001a307:	83 c4 0c             	add    esp,0xc
c001a30a:	c3                   	ret    
c001a30b:	90                   	nop

c001a30c <Directory::~Directory()>:
c001a30c:	83 ec 0c             	sub    esp,0xc
c001a30f:	83 ec 0c             	sub    esp,0xc
c001a312:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a316:	e8 cd ff ff ff       	call   c001a2e8 <Directory::~Directory()>
c001a31b:	83 c4 10             	add    esp,0x10
c001a31e:	83 ec 08             	sub    esp,0x8
c001a321:	68 14 01 00 00       	push   0x114
c001a326:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a32a:	e8 75 f0 ff ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c001a32f:	83 c4 10             	add    esp,0x10
c001a332:	83 c4 0c             	add    esp,0xc
c001a335:	c3                   	ret    

c001a336 <Filesystem::Filesystem()>:
c001a336:	ba a8 20 03 c0       	mov    edx,0xc00320a8
c001a33b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a33f:	89 10                	mov    DWORD PTR [eax],edx
c001a341:	8b 15 04 cf 03 c0    	mov    edx,DWORD PTR ds:0xc003cf04
c001a347:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a34b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a34e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a352:	a3 04 cf 03 c0       	mov    ds:0xc003cf04,eax
c001a357:	90                   	nop
c001a358:	c3                   	ret    
c001a359:	90                   	nop

c001a35a <Filesystem::~Filesystem()>:
c001a35a:	ba a8 20 03 c0       	mov    edx,0xc00320a8
c001a35f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a363:	89 10                	mov    DWORD PTR [eax],edx
c001a365:	90                   	nop
c001a366:	c3                   	ret    
c001a367:	90                   	nop

c001a368 <Filesystem::~Filesystem()>:
c001a368:	83 ec 0c             	sub    esp,0xc
c001a36b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a36f:	e8 e6 ff ff ff       	call   c001a35a <Filesystem::~Filesystem()>
c001a374:	83 c4 04             	add    esp,0x4
c001a377:	83 ec 08             	sub    esp,0x8
c001a37a:	6a 08                	push   0x8
c001a37c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a380:	e8 1f f0 ff ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c001a385:	83 c4 10             	add    esp,0x10
c001a388:	83 c4 0c             	add    esp,0xc
c001a38b:	c3                   	ret    

c001a38c <Fs::getcwd(Process*, char*, int)>:
c001a38c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a390:	31 c0                	xor    eax,eax
c001a392:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a395:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001a399:	7d 15                	jge    c001a3b0 <Fs::getcwd(Process*, char*, int)+0x24>
c001a39b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a39f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001a3a6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001a3a9:	84 c9                	test   cl,cl
c001a3ab:	74 06                	je     c001a3b3 <Fs::getcwd(Process*, char*, int)+0x27>
c001a3ad:	40                   	inc    eax
c001a3ae:	eb e2                	jmp    c001a392 <Fs::getcwd(Process*, char*, int)+0x6>
c001a3b0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001a3b3:	31 c0                	xor    eax,eax
c001a3b5:	c3                   	ret    

c001a3b6 <Fs::initVFS()>:
c001a3b6:	83 ec 18             	sub    esp,0x18
c001a3b9:	6a 08                	push   0x8
c001a3bb:	e8 83 c2 ff ff       	call   c0016643 <malloc>
c001a3c0:	89 04 24             	mov    DWORD PTR [esp],eax
c001a3c3:	e8 f8 e9 00 00       	call   c0028dc0 <FAT::FAT()>
c001a3c8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a3cf:	e8 6f c2 ff ff       	call   c0016643 <malloc>
c001a3d4:	89 04 24             	mov    DWORD PTR [esp],eax
c001a3d7:	e8 10 f9 00 00       	call   c0029cec <ISO9660::ISO9660()>
c001a3dc:	83 c4 1c             	add    esp,0x1c
c001a3df:	c3                   	ret    

c001a3e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c001a3e0:	55                   	push   ebp
c001a3e1:	57                   	push   edi
c001a3e2:	56                   	push   esi
c001a3e3:	53                   	push   ebx
c001a3e4:	81 ec 10 04 00 00    	sub    esp,0x410
c001a3ea:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c001a3f1:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c001a3f8:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c001a400:	68 00 04 00 00       	push   0x400
c001a405:	6a 00                	push   0x0
c001a407:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a40b:	57                   	push   edi
c001a40c:	e8 df 60 fe ff       	call   c00004f0 <memset>
c001a411:	83 c4 10             	add    esp,0x10
c001a414:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c001a418:	75 0b                	jne    c001a425 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c001a41a:	50                   	push   eax
c001a41b:	50                   	push   eax
c001a41c:	55                   	push   ebp
c001a41d:	57                   	push   edi
c001a41e:	e8 1d 62 fe ff       	call   c0000640 <strcpy>
c001a423:	eb 51                	jmp    c001a476 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c001a425:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001a429:	83 f8 5c             	cmp    eax,0x5c
c001a42c:	74 05                	je     c001a433 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c001a42e:	83 f8 2f             	cmp    eax,0x2f
c001a431:	75 1e                	jne    c001a451 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c001a433:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001a43a:	8a 00                	mov    al,BYTE PTR [eax]
c001a43c:	3c 60                	cmp    al,0x60
c001a43e:	7e 03                	jle    c001a443 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c001a440:	83 e8 20             	sub    eax,0x20
c001a443:	88 04 24             	mov    BYTE PTR [esp],al
c001a446:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001a44d:	50                   	push   eax
c001a44e:	50                   	push   eax
c001a44f:	eb 1e                	jmp    c001a46f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c001a451:	50                   	push   eax
c001a452:	50                   	push   eax
c001a453:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c001a45a:	57                   	push   edi
c001a45b:	e8 e0 61 fe ff       	call   c0000640 <strcpy>
c001a460:	58                   	pop    eax
c001a461:	5a                   	pop    edx
c001a462:	68 9f 31 03 c0       	push   0xc003319f
c001a467:	57                   	push   edi
c001a468:	e8 d3 63 fe ff       	call   c0000840 <strcat>
c001a46d:	59                   	pop    ecx
c001a46e:	58                   	pop    eax
c001a46f:	55                   	push   ebp
c001a470:	57                   	push   edi
c001a471:	e8 ca 63 fe ff       	call   c0000840 <strcat>
c001a476:	83 c4 10             	add    esp,0x10
c001a479:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a47c:	3c 60                	cmp    al,0x60
c001a47e:	7e 03                	jle    c001a483 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c001a480:	83 e8 20             	sub    eax,0x20
c001a483:	88 04 24             	mov    BYTE PTR [esp],al
c001a486:	88 06                	mov    BYTE PTR [esi],al
c001a488:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001a48f:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c001a495:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c001a499:	bf 03 00 00 00       	mov    edi,0x3
c001a49e:	b8 03 00 00 00       	mov    eax,0x3
c001a4a3:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c001a4a7:	89 e9                	mov    ecx,ebp
c001a4a9:	85 ed                	test   ebp,ebp
c001a4ab:	0f 84 97 00 00 00    	je     c001a548 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c001a4b1:	8d 57 01             	lea    edx,[edi+0x1]
c001a4b4:	83 fd 5c             	cmp    ebp,0x5c
c001a4b7:	74 05                	je     c001a4be <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c001a4b9:	83 fd 2f             	cmp    ebp,0x2f
c001a4bc:	75 12                	jne    c001a4d0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a4be:	89 c5                	mov    ebp,eax
c001a4c0:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c001a4c5:	74 09                	je     c001a4d0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a4c7:	40                   	inc    eax
c001a4c8:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c001a4cc:	89 d7                	mov    edi,edx
c001a4ce:	eb d3                	jmp    c001a4a3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c001a4d0:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001a4d5:	0f be e9             	movsx  ebp,cl
c001a4d8:	75 5e                	jne    c001a538 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c001a4da:	83 fd 2e             	cmp    ebp,0x2e
c001a4dd:	75 59                	jne    c001a538 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c001a4df:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c001a4e3:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c001a4e8:	74 18                	je     c001a502 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c001a4ea:	83 fd 2e             	cmp    ebp,0x2e
c001a4ed:	74 53                	je     c001a542 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c001a4ef:	89 fa                	mov    edx,edi
c001a4f1:	42                   	inc    edx
c001a4f2:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c001a4f6:	83 f9 2f             	cmp    ecx,0x2f
c001a4f9:	74 f6                	je     c001a4f1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c001a4fb:	83 f9 5c             	cmp    ecx,0x5c
c001a4fe:	74 f1                	je     c001a4f1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c001a500:	eb ca                	jmp    c001a4cc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a502:	83 fd 2e             	cmp    ebp,0x2e
c001a505:	74 3b                	je     c001a542 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c001a507:	83 f8 03             	cmp    eax,0x3
c001a50a:	74 c0                	je     c001a4cc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a50c:	42                   	inc    edx
c001a50d:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c001a511:	83 f9 5c             	cmp    ecx,0x5c
c001a514:	74 f6                	je     c001a50c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c001a516:	83 f9 2f             	cmp    ecx,0x2f
c001a519:	74 f1                	je     c001a50c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c001a51b:	48                   	dec    eax
c001a51c:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c001a520:	75 06                	jne    c001a528 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c001a522:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a526:	eb f3                	jmp    c001a51b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c001a528:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c001a52c:	74 07                	je     c001a535 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c001a52e:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a532:	48                   	dec    eax
c001a533:	eb f3                	jmp    c001a528 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c001a535:	40                   	inc    eax
c001a536:	eb 94                	jmp    c001a4cc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a538:	83 fd 5c             	cmp    ebp,0x5c
c001a53b:	74 8f                	je     c001a4cc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a53d:	83 fd 2f             	cmp    ebp,0x2f
c001a540:	74 8a                	je     c001a4cc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a542:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c001a545:	40                   	inc    eax
c001a546:	eb 84                	jmp    c001a4cc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a548:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a54c:	83 ec 0c             	sub    esp,0xc
c001a54f:	56                   	push   esi
c001a550:	e8 1b 60 fe ff       	call   c0000570 <strlen>
c001a555:	83 c4 10             	add    esp,0x10
c001a558:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c001a55d:	74 17                	je     c001a576 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c001a55f:	83 ec 0c             	sub    esp,0xc
c001a562:	56                   	push   esi
c001a563:	e8 08 60 fe ff       	call   c0000570 <strlen>
c001a568:	83 c4 10             	add    esp,0x10
c001a56b:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c001a570:	74 04                	je     c001a576 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c001a572:	31 ff                	xor    edi,edi
c001a574:	eb 5c                	jmp    c001a5d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c001a576:	83 ec 0c             	sub    esp,0xc
c001a579:	56                   	push   esi
c001a57a:	e8 f1 5f fe ff       	call   c0000570 <strlen>
c001a57f:	83 c4 10             	add    esp,0x10
c001a582:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c001a587:	74 e9                	je     c001a572 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c001a589:	83 ec 0c             	sub    esp,0xc
c001a58c:	56                   	push   esi
c001a58d:	e8 de 5f fe ff       	call   c0000570 <strlen>
c001a592:	83 c4 10             	add    esp,0x10
c001a595:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c001a59a:	eb b0                	jmp    c001a54c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c001a59c:	52                   	push   edx
c001a59d:	52                   	push   edx
c001a59e:	56                   	push   esi
c001a59f:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c001a5a3:	55                   	push   ebp
c001a5a4:	e8 97 60 fe ff       	call   c0000640 <strcpy>
c001a5a9:	59                   	pop    ecx
c001a5aa:	58                   	pop    eax
c001a5ab:	56                   	push   esi
c001a5ac:	55                   	push   ebp
c001a5ad:	e8 96 f8 ff ff       	call   c0019e48 <KeDereferenceSymlink(char const*, char*)>
c001a5b2:	83 c4 10             	add    esp,0x10
c001a5b5:	48                   	dec    eax
c001a5b6:	75 37                	jne    c001a5ef <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c001a5b8:	50                   	push   eax
c001a5b9:	56                   	push   esi
c001a5ba:	55                   	push   ebp
c001a5bb:	68 5e 20 03 c0       	push   0xc003205e
c001a5c0:	e8 0c ef ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001a5c5:	83 c4 10             	add    esp,0x10
c001a5c8:	8d 47 01             	lea    eax,[edi+0x1]
c001a5cb:	83 ff 14             	cmp    edi,0x14
c001a5ce:	74 08                	je     c001a5d8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c001a5d0:	89 c7                	mov    edi,eax
c001a5d2:	85 db                	test   ebx,ebx
c001a5d4:	75 c6                	jne    c001a59c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c001a5d6:	eb 17                	jmp    c001a5ef <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c001a5d8:	83 ec 0c             	sub    esp,0xc
c001a5db:	bf 15 00 00 00       	mov    edi,0x15
c001a5e0:	68 79 20 03 c0       	push   0xc0032079
c001a5e5:	e8 00 5f 00 00       	call   c00204ea <KePanic(char const*)>
c001a5ea:	83 c4 10             	add    esp,0x10
c001a5ed:	eb e3                	jmp    c001a5d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c001a5ef:	81 c4 0c 04 00 00    	add    esp,0x40c
c001a5f5:	5b                   	pop    ebx
c001a5f6:	5e                   	pop    esi
c001a5f7:	5f                   	pop    edi
c001a5f8:	5d                   	pop    ebp
c001a5f9:	c3                   	ret    

c001a5fa <File::File(char const*, Process*, bool)>:
c001a5fa:	83 ec 1c             	sub    esp,0x1c
c001a5fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a601:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a605:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a609:	83 ec 08             	sub    esp,0x8
c001a60c:	6a 00                	push   0x0
c001a60e:	50                   	push   eax
c001a60f:	e8 36 d7 ff ff       	call   c0017d4a <UnixFile::UnixFile(int)>
c001a614:	83 c4 10             	add    esp,0x10
c001a617:	ba 14 21 03 c0       	mov    edx,0xc0032114
c001a61c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a620:	89 10                	mov    DWORD PTR [eax],edx
c001a622:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a627:	85 c0                	test   eax,eax
c001a629:	74 0f                	je     c001a63a <File::File(char const*, Process*, bool)+0x40>
c001a62b:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a630:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a634:	74 04                	je     c001a63a <File::File(char const*, Process*, bool)+0x40>
c001a636:	b0 01                	mov    al,0x1
c001a638:	eb 02                	jmp    c001a63c <File::File(char const*, Process*, bool)+0x42>
c001a63a:	b0 00                	mov    al,0x0
c001a63c:	0f b6 c0             	movzx  eax,al
c001a63f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a643:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a649:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a64d:	83 c2 0d             	add    edx,0xd
c001a650:	50                   	push   eax
c001a651:	51                   	push   ecx
c001a652:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a656:	52                   	push   edx
c001a657:	e8 84 fd ff ff       	call   c001a3e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a65c:	83 c4 10             	add    esp,0x10
c001a65f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a663:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a666:	83 e8 41             	sub    eax,0x41
c001a669:	88 c2                	mov    dl,al
c001a66b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a66f:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a675:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a679:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a67d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a681:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a687:	0f b6 c0             	movzx  eax,al
c001a68a:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a691:	85 c0                	test   eax,eax
c001a693:	74 3e                	je     c001a6d3 <File::File(char const*, Process*, bool)+0xd9>
c001a695:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a699:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a69f:	0f b6 c0             	movzx  eax,al
c001a6a2:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a6a9:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a6af:	85 c0                	test   eax,eax
c001a6b1:	75 20                	jne    c001a6d3 <File::File(char const*, Process*, bool)+0xd9>
c001a6b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6b7:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a6bd:	0f b6 c0             	movzx  eax,al
c001a6c0:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a6c7:	83 ec 0c             	sub    esp,0xc
c001a6ca:	50                   	push   eax
c001a6cb:	e8 b2 21 00 00       	call   c001c882 <LogicalDisk::mount()>
c001a6d0:	83 c4 10             	add    esp,0x10
c001a6d3:	90                   	nop
c001a6d4:	83 c4 1c             	add    esp,0x1c
c001a6d7:	c3                   	ret    

c001a6d8 <File::File(char const*, Process*)>:
c001a6d8:	83 ec 0c             	sub    esp,0xc
c001a6db:	6a 01                	push   0x1
c001a6dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6e9:	e8 0c ff ff ff       	call   c001a5fa <File::File(char const*, Process*, bool)>
c001a6ee:	83 c4 10             	add    esp,0x10
c001a6f1:	90                   	nop
c001a6f2:	83 c4 0c             	add    esp,0xc
c001a6f5:	c3                   	ret    

c001a6f6 <File::open(FileOpenMode)>:
c001a6f6:	53                   	push   ebx
c001a6f7:	b8 0b 00 00 00       	mov    eax,0xb
c001a6fc:	83 ec 08             	sub    esp,0x8
c001a6ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a703:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a70a:	83 fa 19             	cmp    edx,0x19
c001a70d:	77 40                	ja     c001a74f <File::open(FileOpenMode)+0x59>
c001a70f:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a716:	85 d2                	test   edx,edx
c001a718:	74 35                	je     c001a74f <File::open(FileOpenMode)+0x59>
c001a71a:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a720:	85 d2                	test   edx,edx
c001a722:	74 2b                	je     c001a74f <File::open(FileOpenMode)+0x59>
c001a724:	b8 06 00 00 00       	mov    eax,0x6
c001a729:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001a72d:	75 20                	jne    c001a74f <File::open(FileOpenMode)+0x59>
c001a72f:	8b 02                	mov    eax,DWORD PTR [edx]
c001a731:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a73b:	51                   	push   ecx
c001a73c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001a73f:	51                   	push   ecx
c001a740:	52                   	push   edx
c001a741:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a744:	83 c4 10             	add    esp,0x10
c001a747:	85 c0                	test   eax,eax
c001a749:	75 04                	jne    c001a74f <File::open(FileOpenMode)+0x59>
c001a74b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001a74f:	83 c4 08             	add    esp,0x8
c001a752:	5b                   	pop    ebx
c001a753:	c3                   	ret    

c001a754 <File::close()>:
c001a754:	53                   	push   ebx
c001a755:	b8 0b 00 00 00       	mov    eax,0xb
c001a75a:	83 ec 08             	sub    esp,0x8
c001a75d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a761:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a768:	83 f9 19             	cmp    ecx,0x19
c001a76b:	77 41                	ja     c001a7ae <File::close()+0x5a>
c001a76d:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a774:	85 db                	test   ebx,ebx
c001a776:	74 36                	je     c001a7ae <File::close()+0x5a>
c001a778:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001a77f:	74 2d                	je     c001a7ae <File::close()+0x5a>
c001a781:	b8 05 00 00 00       	mov    eax,0x5
c001a786:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a78a:	74 22                	je     c001a7ae <File::close()+0x5a>
c001a78c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001a790:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001a797:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a79d:	53                   	push   ebx
c001a79e:	53                   	push   ebx
c001a79f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a7a1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a7a7:	50                   	push   eax
c001a7a8:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c001a7ab:	83 c4 10             	add    esp,0x10
c001a7ae:	83 c4 08             	add    esp,0x8
c001a7b1:	5b                   	pop    ebx
c001a7b2:	c3                   	ret    
c001a7b3:	90                   	nop

c001a7b4 <File::seek(unsigned long long)>:
c001a7b4:	56                   	push   esi
c001a7b5:	53                   	push   ebx
c001a7b6:	b8 0b 00 00 00       	mov    eax,0xb
c001a7bb:	51                   	push   ecx
c001a7bc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a7c0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a7c4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a7cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a7cf:	83 fa 19             	cmp    edx,0x19
c001a7d2:	77 31                	ja     c001a805 <File::seek(unsigned long long)+0x51>
c001a7d4:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a7db:	85 d2                	test   edx,edx
c001a7dd:	74 26                	je     c001a805 <File::seek(unsigned long long)+0x51>
c001a7df:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a7e5:	85 d2                	test   edx,edx
c001a7e7:	74 1c                	je     c001a805 <File::seek(unsigned long long)+0x51>
c001a7e9:	b8 05 00 00 00       	mov    eax,0x5
c001a7ee:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a7f2:	74 11                	je     c001a805 <File::seek(unsigned long long)+0x51>
c001a7f4:	8b 02                	mov    eax,DWORD PTR [edx]
c001a7f6:	53                   	push   ebx
c001a7f7:	51                   	push   ecx
c001a7f8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a7fe:	52                   	push   edx
c001a7ff:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a802:	83 c4 10             	add    esp,0x10
c001a805:	5a                   	pop    edx
c001a806:	5b                   	pop    ebx
c001a807:	5e                   	pop    esi
c001a808:	c3                   	ret    
c001a809:	90                   	nop

c001a80a <File::truncate(unsigned long long)>:
c001a80a:	56                   	push   esi
c001a80b:	53                   	push   ebx
c001a80c:	b8 0b 00 00 00       	mov    eax,0xb
c001a811:	51                   	push   ecx
c001a812:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a816:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a81a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a821:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a825:	83 fa 19             	cmp    edx,0x19
c001a828:	77 31                	ja     c001a85b <File::truncate(unsigned long long)+0x51>
c001a82a:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a831:	85 d2                	test   edx,edx
c001a833:	74 26                	je     c001a85b <File::truncate(unsigned long long)+0x51>
c001a835:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a83b:	85 d2                	test   edx,edx
c001a83d:	74 1c                	je     c001a85b <File::truncate(unsigned long long)+0x51>
c001a83f:	b8 05 00 00 00       	mov    eax,0x5
c001a844:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a848:	74 11                	je     c001a85b <File::truncate(unsigned long long)+0x51>
c001a84a:	8b 02                	mov    eax,DWORD PTR [edx]
c001a84c:	53                   	push   ebx
c001a84d:	51                   	push   ecx
c001a84e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a854:	52                   	push   edx
c001a855:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001a858:	83 c4 10             	add    esp,0x10
c001a85b:	5a                   	pop    edx
c001a85c:	5b                   	pop    ebx
c001a85d:	5e                   	pop    esi
c001a85e:	c3                   	ret    
c001a85f:	90                   	nop

c001a860 <File::tell(unsigned long long*)>:
c001a860:	83 ec 0c             	sub    esp,0xc
c001a863:	b8 0b 00 00 00       	mov    eax,0xb
c001a868:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a86c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001a873:	83 fa 19             	cmp    edx,0x19
c001a876:	77 34                	ja     c001a8ac <File::tell(unsigned long long*)+0x4c>
c001a878:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a87f:	85 d2                	test   edx,edx
c001a881:	74 29                	je     c001a8ac <File::tell(unsigned long long*)+0x4c>
c001a883:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a889:	85 d2                	test   edx,edx
c001a88b:	74 1f                	je     c001a8ac <File::tell(unsigned long long*)+0x4c>
c001a88d:	b8 05 00 00 00       	mov    eax,0x5
c001a892:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001a896:	74 14                	je     c001a8ac <File::tell(unsigned long long*)+0x4c>
c001a898:	50                   	push   eax
c001a899:	8b 02                	mov    eax,DWORD PTR [edx]
c001a89b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a89f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001a8a5:	52                   	push   edx
c001a8a6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a8a9:	83 c4 10             	add    esp,0x10
c001a8ac:	83 c4 0c             	add    esp,0xc
c001a8af:	c3                   	ret    

c001a8b0 <File::rewind()>:
c001a8b0:	83 ec 10             	sub    esp,0x10
c001a8b3:	6a 00                	push   0x0
c001a8b5:	6a 00                	push   0x0
c001a8b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8bb:	e8 f4 fe ff ff       	call   c001a7b4 <File::seek(unsigned long long)>
c001a8c0:	83 c4 1c             	add    esp,0x1c
c001a8c3:	c3                   	ret    

c001a8c4 <File::unlink()>:
c001a8c4:	83 ec 0c             	sub    esp,0xc
c001a8c7:	b8 0b 00 00 00       	mov    eax,0xb
c001a8cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a8d0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a8d7:	83 f9 19             	cmp    ecx,0x19
c001a8da:	77 2f                	ja     c001a90b <File::unlink()+0x47>
c001a8dc:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a8e3:	85 c9                	test   ecx,ecx
c001a8e5:	74 24                	je     c001a90b <File::unlink()+0x47>
c001a8e7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a8ed:	85 c9                	test   ecx,ecx
c001a8ef:	74 1a                	je     c001a90b <File::unlink()+0x47>
c001a8f1:	b8 06 00 00 00       	mov    eax,0x6
c001a8f6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a8fa:	75 0f                	jne    c001a90b <File::unlink()+0x47>
c001a8fc:	83 c2 0d             	add    edx,0xd
c001a8ff:	50                   	push   eax
c001a900:	50                   	push   eax
c001a901:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a903:	52                   	push   edx
c001a904:	51                   	push   ecx
c001a905:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001a908:	83 c4 10             	add    esp,0x10
c001a90b:	83 c4 0c             	add    esp,0xc
c001a90e:	c3                   	ret    
c001a90f:	90                   	nop

c001a910 <File::rename(char const*)>:
c001a910:	83 ec 0c             	sub    esp,0xc
c001a913:	b8 0b 00 00 00       	mov    eax,0xb
c001a918:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a91c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a923:	83 f9 19             	cmp    ecx,0x19
c001a926:	77 32                	ja     c001a95a <File::rename(char const*)+0x4a>
c001a928:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a92f:	85 c9                	test   ecx,ecx
c001a931:	74 27                	je     c001a95a <File::rename(char const*)+0x4a>
c001a933:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a939:	85 c9                	test   ecx,ecx
c001a93b:	74 1d                	je     c001a95a <File::rename(char const*)+0x4a>
c001a93d:	b8 06 00 00 00       	mov    eax,0x6
c001a942:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a946:	75 12                	jne    c001a95a <File::rename(char const*)+0x4a>
c001a948:	83 c2 0d             	add    edx,0xd
c001a94b:	50                   	push   eax
c001a94c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a94e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a952:	52                   	push   edx
c001a953:	51                   	push   ecx
c001a954:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001a957:	83 c4 10             	add    esp,0x10
c001a95a:	83 c4 0c             	add    esp,0xc
c001a95d:	c3                   	ret    

c001a95e <File::chfatattr(unsigned char, unsigned char)>:
c001a95e:	57                   	push   edi
c001a95f:	b8 0b 00 00 00       	mov    eax,0xb
c001a964:	56                   	push   esi
c001a965:	53                   	push   ebx
c001a966:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a96a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a96e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a975:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a979:	83 f9 19             	cmp    ecx,0x19
c001a97c:	77 37                	ja     c001a9b5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a97e:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a985:	85 c9                	test   ecx,ecx
c001a987:	74 2c                	je     c001a9b5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a989:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a98f:	85 c9                	test   ecx,ecx
c001a991:	74 22                	je     c001a9b5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a993:	b8 06 00 00 00       	mov    eax,0x6
c001a998:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a99c:	75 17                	jne    c001a9b5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a99e:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a9a0:	89 f0                	mov    eax,esi
c001a9a2:	83 c2 0d             	add    edx,0xd
c001a9a5:	0f b6 f0             	movzx  esi,al
c001a9a8:	0f b6 db             	movzx  ebx,bl
c001a9ab:	56                   	push   esi
c001a9ac:	53                   	push   ebx
c001a9ad:	52                   	push   edx
c001a9ae:	51                   	push   ecx
c001a9af:	ff 57 38             	call   DWORD PTR [edi+0x38]
c001a9b2:	83 c4 10             	add    esp,0x10
c001a9b5:	5b                   	pop    ebx
c001a9b6:	5e                   	pop    esi
c001a9b7:	5f                   	pop    edi
c001a9b8:	c3                   	ret    
c001a9b9:	90                   	nop

c001a9ba <File::exists()>:
c001a9ba:	83 ec 0c             	sub    esp,0xc
c001a9bd:	31 c0                	xor    eax,eax
c001a9bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a9c3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a9ca:	83 f9 19             	cmp    ecx,0x19
c001a9cd:	77 24                	ja     c001a9f3 <File::exists()+0x39>
c001a9cf:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a9d6:	85 c9                	test   ecx,ecx
c001a9d8:	74 19                	je     c001a9f3 <File::exists()+0x39>
c001a9da:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a9e0:	85 c9                	test   ecx,ecx
c001a9e2:	74 0f                	je     c001a9f3 <File::exists()+0x39>
c001a9e4:	83 c2 0d             	add    edx,0xd
c001a9e7:	50                   	push   eax
c001a9e8:	50                   	push   eax
c001a9e9:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a9eb:	52                   	push   edx
c001a9ec:	51                   	push   ecx
c001a9ed:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001a9f0:	83 c4 10             	add    esp,0x10
c001a9f3:	83 c4 0c             	add    esp,0xc
c001a9f6:	c3                   	ret    
c001a9f7:	90                   	nop

c001a9f8 <File::stat(unsigned long long*, bool*)>:
c001a9f8:	56                   	push   esi
c001a9f9:	53                   	push   ebx
c001a9fa:	50                   	push   eax
c001a9fb:	b8 0b 00 00 00       	mov    eax,0xb
c001aa00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa04:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aa08:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aa0f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aa13:	83 f9 19             	cmp    ecx,0x19
c001aa16:	77 3d                	ja     c001aa55 <File::stat(unsigned long long*, bool*)+0x5d>
c001aa18:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aa1f:	85 c9                	test   ecx,ecx
c001aa21:	74 32                	je     c001aa55 <File::stat(unsigned long long*, bool*)+0x5d>
c001aa23:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001aa29:	85 c9                	test   ecx,ecx
c001aa2b:	74 28                	je     c001aa55 <File::stat(unsigned long long*, bool*)+0x5d>
c001aa2d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aa2f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001aa33:	74 13                	je     c001aa48 <File::stat(unsigned long long*, bool*)+0x50>
c001aa35:	83 ec 04             	sub    esp,0x4
c001aa38:	56                   	push   esi
c001aa39:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001aa3f:	51                   	push   ecx
c001aa40:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001aa43:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001aa46:	eb 0a                	jmp    c001aa52 <File::stat(unsigned long long*, bool*)+0x5a>
c001aa48:	53                   	push   ebx
c001aa49:	83 c2 0d             	add    edx,0xd
c001aa4c:	56                   	push   esi
c001aa4d:	52                   	push   edx
c001aa4e:	51                   	push   ecx
c001aa4f:	ff 50 34             	call   DWORD PTR [eax+0x34]
c001aa52:	83 c4 10             	add    esp,0x10
c001aa55:	5a                   	pop    edx
c001aa56:	5b                   	pop    ebx
c001aa57:	5e                   	pop    esi
c001aa58:	c3                   	ret    

c001aa59 <Fs::setcwd(Process*, char*)>:
c001aa59:	55                   	push   ebp
c001aa5a:	57                   	push   edi
c001aa5b:	56                   	push   esi
c001aa5c:	53                   	push   ebx
c001aa5d:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001aa63:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c001aa6a:	6a 00                	push   0x0
c001aa6c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001aa72:	57                   	push   edi
c001aa73:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aa7a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001aa7e:	56                   	push   esi
c001aa7f:	e8 5c f9 ff ff       	call   c001a3e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001aa84:	89 34 24             	mov    DWORD PTR [esp],esi
c001aa87:	e8 e4 5a fe ff       	call   c0000570 <strlen>
c001aa8c:	83 c4 10             	add    esp,0x10
c001aa8f:	83 f8 02             	cmp    eax,0x2
c001aa92:	77 15                	ja     c001aaa9 <Fs::setcwd(Process*, char*)+0x50>
c001aa94:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c001aa99:	83 eb 41             	sub    ebx,0x41
c001aa9c:	8b 04 9d 80 f3 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc0c80]
c001aaa3:	85 c0                	test   eax,eax
c001aaa5:	75 1c                	jne    c001aac3 <Fs::setcwd(Process*, char*)+0x6a>
c001aaa7:	eb 2f                	jmp    c001aad8 <Fs::setcwd(Process*, char*)+0x7f>
c001aaa9:	83 ec 0c             	sub    esp,0xc
c001aaac:	56                   	push   esi
c001aaad:	e8 be 5a fe ff       	call   c0000570 <strlen>
c001aab2:	83 c4 10             	add    esp,0x10
c001aab5:	83 f8 03             	cmp    eax,0x3
c001aab8:	75 57                	jne    c001ab11 <Fs::setcwd(Process*, char*)+0xb8>
c001aaba:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001aabf:	75 50                	jne    c001ab11 <Fs::setcwd(Process*, char*)+0xb8>
c001aac1:	eb d1                	jmp    c001aa94 <Fs::setcwd(Process*, char*)+0x3b>
c001aac3:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c001aaca:	75 0c                	jne    c001aad8 <Fs::setcwd(Process*, char*)+0x7f>
c001aacc:	83 ec 0c             	sub    esp,0xc
c001aacf:	50                   	push   eax
c001aad0:	e8 ad 1d 00 00       	call   c001c882 <LogicalDisk::mount()>
c001aad5:	83 c4 10             	add    esp,0x10
c001aad8:	b8 03 00 00 00       	mov    eax,0x3
c001aadd:	83 fb 19             	cmp    ebx,0x19
c001aae0:	0f 87 c6 00 00 00    	ja     c001abac <Fs::setcwd(Process*, char*)+0x153>
c001aae6:	8b 14 9d 80 f3 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffc0c80]
c001aaed:	b8 05 00 00 00       	mov    eax,0x5
c001aaf2:	85 d2                	test   edx,edx
c001aaf4:	0f 84 b2 00 00 00    	je     c001abac <Fs::setcwd(Process*, char*)+0x153>
c001aafa:	b8 06 00 00 00       	mov    eax,0x6
c001aaff:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c001ab06:	0f 85 92 00 00 00    	jne    c001ab9e <Fs::setcwd(Process*, char*)+0x145>
c001ab0c:	e9 9b 00 00 00       	jmp    c001abac <Fs::setcwd(Process*, char*)+0x153>
c001ab11:	83 ec 0c             	sub    esp,0xc
c001ab14:	68 14 01 00 00       	push   0x114
c001ab19:	e8 25 bb ff ff       	call   c0016643 <malloc>
c001ab1e:	83 c4 0c             	add    esp,0xc
c001ab21:	89 c3                	mov    ebx,eax
c001ab23:	55                   	push   ebp
c001ab24:	56                   	push   esi
c001ab25:	50                   	push   eax
c001ab26:	e8 ad fb ff ff       	call   c001a6d8 <File::File(char const*, Process*)>
c001ab2b:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001ab30:	83 c4 0c             	add    esp,0xc
c001ab33:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001ab37:	50                   	push   eax
c001ab38:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab3c:	50                   	push   eax
c001ab3d:	53                   	push   ebx
c001ab3e:	e8 b5 fe ff ff       	call   c001a9f8 <File::stat(unsigned long long*, bool*)>
c001ab43:	83 c4 10             	add    esp,0x10
c001ab46:	83 f8 02             	cmp    eax,0x2
c001ab49:	74 27                	je     c001ab72 <Fs::setcwd(Process*, char*)+0x119>
c001ab4b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001ab50:	75 1c                	jne    c001ab6e <Fs::setcwd(Process*, char*)+0x115>
c001ab52:	b8 02 00 00 00       	mov    eax,0x2
c001ab57:	85 db                	test   ebx,ebx
c001ab59:	74 51                	je     c001abac <Fs::setcwd(Process*, char*)+0x153>
c001ab5b:	83 ec 0c             	sub    esp,0xc
c001ab5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab60:	53                   	push   ebx
c001ab61:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab64:	83 c4 10             	add    esp,0x10
c001ab67:	b8 02 00 00 00       	mov    eax,0x2
c001ab6c:	eb 3e                	jmp    c001abac <Fs::setcwd(Process*, char*)+0x153>
c001ab6e:	85 c0                	test   eax,eax
c001ab70:	74 1c                	je     c001ab8e <Fs::setcwd(Process*, char*)+0x135>
c001ab72:	b8 01 00 00 00       	mov    eax,0x1
c001ab77:	85 db                	test   ebx,ebx
c001ab79:	74 31                	je     c001abac <Fs::setcwd(Process*, char*)+0x153>
c001ab7b:	83 ec 0c             	sub    esp,0xc
c001ab7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab80:	53                   	push   ebx
c001ab81:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab84:	83 c4 10             	add    esp,0x10
c001ab87:	b8 01 00 00 00       	mov    eax,0x1
c001ab8c:	eb 1e                	jmp    c001abac <Fs::setcwd(Process*, char*)+0x153>
c001ab8e:	85 db                	test   ebx,ebx
c001ab90:	74 0c                	je     c001ab9e <Fs::setcwd(Process*, char*)+0x145>
c001ab92:	83 ec 0c             	sub    esp,0xc
c001ab95:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab97:	53                   	push   ebx
c001ab98:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab9b:	83 c4 10             	add    esp,0x10
c001ab9e:	50                   	push   eax
c001ab9f:	50                   	push   eax
c001aba0:	56                   	push   esi
c001aba1:	57                   	push   edi
c001aba2:	e8 99 5a fe ff       	call   c0000640 <strcpy>
c001aba7:	83 c4 10             	add    esp,0x10
c001abaa:	31 c0                	xor    eax,eax
c001abac:	81 c4 1c 02 00 00    	add    esp,0x21c
c001abb2:	5b                   	pop    ebx
c001abb3:	5e                   	pop    esi
c001abb4:	5f                   	pop    edi
c001abb5:	5d                   	pop    ebp
c001abb6:	c3                   	ret    
c001abb7:	90                   	nop

c001abb8 <Directory::Directory(char const*, Process*)>:
c001abb8:	83 ec 0c             	sub    esp,0xc
c001abbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abbf:	83 ec 08             	sub    esp,0x8
c001abc2:	6a 00                	push   0x0
c001abc4:	50                   	push   eax
c001abc5:	e8 80 d1 ff ff       	call   c0017d4a <UnixFile::UnixFile(int)>
c001abca:	83 c4 10             	add    esp,0x10
c001abcd:	ba 30 21 03 c0       	mov    edx,0xc0032130
c001abd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abd6:	89 10                	mov    DWORD PTR [eax],edx
c001abd8:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001abdd:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001abe1:	0f 95 c0             	setne  al
c001abe4:	0f b6 c0             	movzx  eax,al
c001abe7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001abeb:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001abf1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001abf5:	83 c2 0d             	add    edx,0xd
c001abf8:	50                   	push   eax
c001abf9:	51                   	push   ecx
c001abfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abfe:	52                   	push   edx
c001abff:	e8 dc f7 ff ff       	call   c001a3e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001ac04:	83 c4 10             	add    esp,0x10
c001ac07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac0b:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001ac0e:	83 e8 41             	sub    eax,0x41
c001ac11:	88 c2                	mov    dl,al
c001ac13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac17:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001ac1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac21:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001ac25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac29:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001ac2f:	0f b6 c0             	movzx  eax,al
c001ac32:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001ac39:	85 c0                	test   eax,eax
c001ac3b:	74 3e                	je     c001ac7b <Directory::Directory(char const*, Process*)+0xc3>
c001ac3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac41:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001ac47:	0f b6 c0             	movzx  eax,al
c001ac4a:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001ac51:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001ac57:	85 c0                	test   eax,eax
c001ac59:	75 20                	jne    c001ac7b <Directory::Directory(char const*, Process*)+0xc3>
c001ac5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac5f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001ac65:	0f b6 c0             	movzx  eax,al
c001ac68:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001ac6f:	83 ec 0c             	sub    esp,0xc
c001ac72:	50                   	push   eax
c001ac73:	e8 0a 1c 00 00       	call   c001c882 <LogicalDisk::mount()>
c001ac78:	83 c4 10             	add    esp,0x10
c001ac7b:	90                   	nop
c001ac7c:	83 c4 0c             	add    esp,0xc
c001ac7f:	c3                   	ret    

c001ac80 <Directory::open()>:
c001ac80:	53                   	push   ebx
c001ac81:	b8 0b 00 00 00       	mov    eax,0xb
c001ac86:	83 ec 08             	sub    esp,0x8
c001ac89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac8d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001ac94:	83 fa 19             	cmp    edx,0x19
c001ac97:	77 3d                	ja     c001acd6 <Directory::open()+0x56>
c001ac99:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001aca0:	85 d2                	test   edx,edx
c001aca2:	74 32                	je     c001acd6 <Directory::open()+0x56>
c001aca4:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001acaa:	85 d2                	test   edx,edx
c001acac:	74 28                	je     c001acd6 <Directory::open()+0x56>
c001acae:	b8 06 00 00 00       	mov    eax,0x6
c001acb3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001acb7:	75 1d                	jne    c001acd6 <Directory::open()+0x56>
c001acb9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001acbf:	50                   	push   eax
c001acc0:	8b 02                	mov    eax,DWORD PTR [edx]
c001acc2:	51                   	push   ecx
c001acc3:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001acc6:	51                   	push   ecx
c001acc7:	52                   	push   edx
c001acc8:	ff 50 50             	call   DWORD PTR [eax+0x50]
c001accb:	83 c4 10             	add    esp,0x10
c001acce:	85 c0                	test   eax,eax
c001acd0:	75 04                	jne    c001acd6 <Directory::open()+0x56>
c001acd2:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001acd6:	83 c4 08             	add    esp,0x8
c001acd9:	5b                   	pop    ebx
c001acda:	c3                   	ret    
c001acdb:	90                   	nop

c001acdc <Directory::close()>:
c001acdc:	53                   	push   ebx
c001acdd:	b8 0b 00 00 00       	mov    eax,0xb
c001ace2:	83 ec 08             	sub    esp,0x8
c001ace5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ace9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001acf0:	83 f9 19             	cmp    ecx,0x19
c001acf3:	77 41                	ja     c001ad36 <Directory::close()+0x5a>
c001acf5:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001acfc:	85 db                	test   ebx,ebx
c001acfe:	74 36                	je     c001ad36 <Directory::close()+0x5a>
c001ad00:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001ad07:	74 2d                	je     c001ad36 <Directory::close()+0x5a>
c001ad09:	b8 05 00 00 00       	mov    eax,0x5
c001ad0e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ad12:	74 22                	je     c001ad36 <Directory::close()+0x5a>
c001ad14:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001ad18:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001ad1f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001ad25:	53                   	push   ebx
c001ad26:	53                   	push   ebx
c001ad27:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ad29:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001ad2f:	50                   	push   eax
c001ad30:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c001ad33:	83 c4 10             	add    esp,0x10
c001ad36:	83 c4 08             	add    esp,0x8
c001ad39:	5b                   	pop    ebx
c001ad3a:	c3                   	ret    
c001ad3b:	90                   	nop

c001ad3c <Directory::unlink()>:
c001ad3c:	83 ec 0c             	sub    esp,0xc
c001ad3f:	b8 0b 00 00 00       	mov    eax,0xb
c001ad44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad48:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ad4f:	83 f9 19             	cmp    ecx,0x19
c001ad52:	77 2f                	ja     c001ad83 <Directory::unlink()+0x47>
c001ad54:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ad5b:	85 c9                	test   ecx,ecx
c001ad5d:	74 24                	je     c001ad83 <Directory::unlink()+0x47>
c001ad5f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ad65:	85 c9                	test   ecx,ecx
c001ad67:	74 1a                	je     c001ad83 <Directory::unlink()+0x47>
c001ad69:	b8 06 00 00 00       	mov    eax,0x6
c001ad6e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ad72:	75 0f                	jne    c001ad83 <Directory::unlink()+0x47>
c001ad74:	83 c2 0d             	add    edx,0xd
c001ad77:	50                   	push   eax
c001ad78:	50                   	push   eax
c001ad79:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ad7b:	52                   	push   edx
c001ad7c:	51                   	push   ecx
c001ad7d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001ad80:	83 c4 10             	add    esp,0x10
c001ad83:	83 c4 0c             	add    esp,0xc
c001ad86:	c3                   	ret    
c001ad87:	90                   	nop

c001ad88 <Directory::rename(char const*)>:
c001ad88:	83 ec 0c             	sub    esp,0xc
c001ad8b:	b8 0b 00 00 00       	mov    eax,0xb
c001ad90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad94:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ad9b:	83 f9 19             	cmp    ecx,0x19
c001ad9e:	77 32                	ja     c001add2 <Directory::rename(char const*)+0x4a>
c001ada0:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ada7:	85 c9                	test   ecx,ecx
c001ada9:	74 27                	je     c001add2 <Directory::rename(char const*)+0x4a>
c001adab:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001adb1:	85 c9                	test   ecx,ecx
c001adb3:	74 1d                	je     c001add2 <Directory::rename(char const*)+0x4a>
c001adb5:	b8 06 00 00 00       	mov    eax,0x6
c001adba:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001adbe:	75 12                	jne    c001add2 <Directory::rename(char const*)+0x4a>
c001adc0:	83 c2 0d             	add    edx,0xd
c001adc3:	50                   	push   eax
c001adc4:	8b 01                	mov    eax,DWORD PTR [ecx]
c001adc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001adca:	52                   	push   edx
c001adcb:	51                   	push   ecx
c001adcc:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001adcf:	83 c4 10             	add    esp,0x10
c001add2:	83 c4 0c             	add    esp,0xc
c001add5:	c3                   	ret    

c001add6 <Directory::exists()>:
c001add6:	83 ec 0c             	sub    esp,0xc
c001add9:	31 c0                	xor    eax,eax
c001addb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001addf:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ade6:	83 f9 19             	cmp    ecx,0x19
c001ade9:	77 24                	ja     c001ae0f <Directory::exists()+0x39>
c001adeb:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001adf2:	85 c9                	test   ecx,ecx
c001adf4:	74 19                	je     c001ae0f <Directory::exists()+0x39>
c001adf6:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001adfc:	85 c9                	test   ecx,ecx
c001adfe:	74 0f                	je     c001ae0f <Directory::exists()+0x39>
c001ae00:	83 c2 0d             	add    edx,0xd
c001ae03:	50                   	push   eax
c001ae04:	50                   	push   eax
c001ae05:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae07:	52                   	push   edx
c001ae08:	51                   	push   ecx
c001ae09:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001ae0c:	83 c4 10             	add    esp,0x10
c001ae0f:	83 c4 0c             	add    esp,0xc
c001ae12:	c3                   	ret    
c001ae13:	90                   	nop

c001ae14 <Directory::read(dirent*)>:
c001ae14:	83 ec 1c             	sub    esp,0x1c
c001ae17:	b8 0b 00 00 00       	mov    eax,0xb
c001ae1c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae20:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ae27:	83 f9 19             	cmp    ecx,0x19
c001ae2a:	77 30                	ja     c001ae5c <Directory::read(dirent*)+0x48>
c001ae2c:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ae33:	85 c9                	test   ecx,ecx
c001ae35:	74 25                	je     c001ae5c <Directory::read(dirent*)+0x48>
c001ae37:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c001ae3e:	74 1c                	je     c001ae5c <Directory::read(dirent*)+0x48>
c001ae40:	83 ec 0c             	sub    esp,0xc
c001ae43:	8b 02                	mov    eax,DWORD PTR [edx]
c001ae45:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001ae49:	51                   	push   ecx
c001ae4a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae4e:	6a 00                	push   0x0
c001ae50:	68 10 01 00 00       	push   0x110
c001ae55:	52                   	push   edx
c001ae56:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae59:	83 c4 20             	add    esp,0x20
c001ae5c:	83 c4 1c             	add    esp,0x1c
c001ae5f:	c3                   	ret    

c001ae60 <Directory::create()>:
c001ae60:	83 ec 0c             	sub    esp,0xc
c001ae63:	b8 0b 00 00 00       	mov    eax,0xb
c001ae68:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae6c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ae73:	83 f9 19             	cmp    ecx,0x19
c001ae76:	77 2f                	ja     c001aea7 <Directory::create()+0x47>
c001ae78:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ae7f:	85 c9                	test   ecx,ecx
c001ae81:	74 24                	je     c001aea7 <Directory::create()+0x47>
c001ae83:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ae89:	85 c9                	test   ecx,ecx
c001ae8b:	74 1a                	je     c001aea7 <Directory::create()+0x47>
c001ae8d:	b8 06 00 00 00       	mov    eax,0x6
c001ae92:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ae96:	75 0f                	jne    c001aea7 <Directory::create()+0x47>
c001ae98:	83 c2 0d             	add    edx,0xd
c001ae9b:	50                   	push   eax
c001ae9c:	50                   	push   eax
c001ae9d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae9f:	52                   	push   edx
c001aea0:	51                   	push   ecx
c001aea1:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001aea4:	83 c4 10             	add    esp,0x10
c001aea7:	83 c4 0c             	add    esp,0xc
c001aeaa:	c3                   	ret    
c001aeab:	90                   	nop

c001aeac <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001aeac:	b8 0a 00 00 00       	mov    eax,0xa
c001aeb1:	c3                   	ret    
c001aeb2:	66 90                	xchg   ax,ax

c001aeb4 <Bus::Bus(char const*)>:
c001aeb4:	83 ec 0c             	sub    esp,0xc
c001aeb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aebb:	83 ec 08             	sub    esp,0x8
c001aebe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aec2:	50                   	push   eax
c001aec3:	e8 ec 07 00 00       	call   c001b6b4 <Device::Device(char const*)>
c001aec8:	83 c4 10             	add    esp,0x10
c001aecb:	ba 4c 21 03 c0       	mov    edx,0xc003214c
c001aed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aed4:	89 10                	mov    DWORD PTR [eax],edx
c001aed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeda:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001aee4:	90                   	nop
c001aee5:	83 c4 0c             	add    esp,0xc
c001aee8:	c3                   	ret    
c001aee9:	90                   	nop
c001aeea:	66 90                	xchg   ax,ax

c001aeec <Bus::~Bus()>:
c001aeec:	83 ec 0c             	sub    esp,0xc
c001aeef:	ba 4c 21 03 c0       	mov    edx,0xc003214c
c001aef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aef8:	89 10                	mov    DWORD PTR [eax],edx
c001aefa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aefe:	83 ec 0c             	sub    esp,0xc
c001af01:	50                   	push   eax
c001af02:	e8 4d 05 00 00       	call   c001b454 <Device::~Device()>
c001af07:	83 c4 10             	add    esp,0x10
c001af0a:	90                   	nop
c001af0b:	83 c4 0c             	add    esp,0xc
c001af0e:	c3                   	ret    
c001af0f:	90                   	nop

c001af10 <Bus::~Bus()>:
c001af10:	83 ec 0c             	sub    esp,0xc
c001af13:	83 ec 0c             	sub    esp,0xc
c001af16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af1a:	e8 cd ff ff ff       	call   c001aeec <Bus::~Bus()>
c001af1f:	83 c4 10             	add    esp,0x10
c001af22:	83 ec 08             	sub    esp,0x8
c001af25:	68 58 01 00 00       	push   0x158
c001af2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af2e:	e8 71 e4 ff ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c001af33:	83 c4 10             	add    esp,0x10
c001af36:	83 c4 0c             	add    esp,0xc
c001af39:	c3                   	ret    

c001af3a <beepThread(void*)>:
c001af3a:	83 ec 0c             	sub    esp,0xc
c001af3d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001af42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001af46:	48                   	dec    eax
c001af47:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001af4c:	75 01                	jne    c001af4f <beepThread(void*)+0x15>
c001af4e:	fb                   	sti    
c001af4f:	83 ec 0c             	sub    esp,0xc
c001af52:	6b c2 0a             	imul   eax,edx,0xa
c001af55:	50                   	push   eax
c001af56:	e8 7d a7 00 00       	call   c00256d8 <milliTenthSleep(unsigned int)>
c001af5b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001af62:	e8 78 c5 00 00       	call   c00274df <HalMakeBeep(int)>
c001af67:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001af6f:	83 c4 1c             	add    esp,0x1c
c001af72:	e9 45 a6 00 00       	jmp    c00255bc <blockTask(TaskState)>

c001af77 <Krnl::beep(int, int, bool)>:
c001af77:	56                   	push   esi
c001af78:	53                   	push   ebx
c001af79:	83 ec 10             	sub    esp,0x10
c001af7c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001af80:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af88:	e8 52 c5 00 00       	call   c00274df <HalMakeBeep(int)>
c001af8d:	83 c4 10             	add    esp,0x10
c001af90:	89 f0                	mov    eax,esi
c001af92:	84 c0                	test   al,al
c001af94:	74 1e                	je     c001afb4 <Krnl::beep(int, int, bool)+0x3d>
c001af96:	83 ec 0c             	sub    esp,0xc
c001af99:	6b db 0a             	imul   ebx,ebx,0xa
c001af9c:	53                   	push   ebx
c001af9d:	e8 36 a7 00 00       	call   c00256d8 <milliTenthSleep(unsigned int)>
c001afa2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001afaa:	83 c4 14             	add    esp,0x14
c001afad:	5b                   	pop    ebx
c001afae:	5e                   	pop    esi
c001afaf:	e9 2b c5 00 00       	jmp    c00274df <HalMakeBeep(int)>
c001afb4:	68 e6 00 00 00       	push   0xe6
c001afb9:	53                   	push   ebx
c001afba:	68 3a af 01 c0       	push   0xc001af3a
c001afbf:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001afc5:	e8 e6 a2 00 00       	call   c00252b0 <Process::createThread(void (*)(void*), void*, int)>
c001afca:	83 c4 14             	add    esp,0x14
c001afcd:	5b                   	pop    ebx
c001afce:	5e                   	pop    esi
c001afcf:	c3                   	ret    

c001afd0 <User::loadClockSettings(int)>:
c001afd0:	53                   	push   ebx
c001afd1:	83 ec 14             	sub    esp,0x14
c001afd4:	68 14 01 00 00       	push   0x114
c001afd9:	e8 65 b6 ff ff       	call   c0016643 <malloc>
c001afde:	83 c4 0c             	add    esp,0xc
c001afe1:	89 c3                	mov    ebx,eax
c001afe3:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001afe9:	68 70 21 03 c0       	push   0xc0032170
c001afee:	50                   	push   eax
c001afef:	e8 e4 f6 ff ff       	call   c001a6d8 <File::File(char const*, Process*)>
c001aff4:	58                   	pop    eax
c001aff5:	5a                   	pop    edx
c001aff6:	6a 01                	push   0x1
c001aff8:	53                   	push   ebx
c001aff9:	e8 f8 f6 ff ff       	call   c001a6f6 <File::open(FileOpenMode)>
c001affe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b001:	e8 4e f7 ff ff       	call   c001a754 <File::close()>
c001b006:	83 c4 10             	add    esp,0x10
c001b009:	85 db                	test   ebx,ebx
c001b00b:	74 0f                	je     c001b01c <User::loadClockSettings(int)+0x4c>
c001b00d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b00f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001b013:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b016:	83 c4 08             	add    esp,0x8
c001b019:	5b                   	pop    ebx
c001b01a:	ff e0                	jmp    eax
c001b01c:	83 c4 08             	add    esp,0x8
c001b01f:	5b                   	pop    ebx
c001b020:	c3                   	ret    
c001b021:	90                   	nop

c001b022 <Clock::Clock(char const*)>:
c001b022:	83 ec 0c             	sub    esp,0xc
c001b025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b029:	83 ec 08             	sub    esp,0x8
c001b02c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b030:	50                   	push   eax
c001b031:	e8 7e 06 00 00       	call   c001b6b4 <Device::Device(char const*)>
c001b036:	83 c4 10             	add    esp,0x10
c001b039:	ba 98 21 03 c0       	mov    edx,0xc0032198
c001b03e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b042:	89 10                	mov    DWORD PTR [eax],edx
c001b044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b048:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001b052:	90                   	nop
c001b053:	83 c4 0c             	add    esp,0xc
c001b056:	c3                   	ret    
c001b057:	90                   	nop

c001b058 <Clock::~Clock()>:
c001b058:	83 ec 0c             	sub    esp,0xc
c001b05b:	ba 98 21 03 c0       	mov    edx,0xc0032198
c001b060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b064:	89 10                	mov    DWORD PTR [eax],edx
c001b066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b06a:	83 ec 0c             	sub    esp,0xc
c001b06d:	50                   	push   eax
c001b06e:	e8 e1 03 00 00       	call   c001b454 <Device::~Device()>
c001b073:	83 c4 10             	add    esp,0x10
c001b076:	90                   	nop
c001b077:	83 c4 0c             	add    esp,0xc
c001b07a:	c3                   	ret    
c001b07b:	90                   	nop

c001b07c <Clock::~Clock()>:
c001b07c:	83 ec 0c             	sub    esp,0xc
c001b07f:	83 ec 0c             	sub    esp,0xc
c001b082:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b086:	e8 cd ff ff ff       	call   c001b058 <Clock::~Clock()>
c001b08b:	83 c4 10             	add    esp,0x10
c001b08e:	83 ec 08             	sub    esp,0x8
c001b091:	68 58 01 00 00       	push   0x158
c001b096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b09a:	e8 05 e3 ff ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c001b09f:	83 c4 10             	add    esp,0x10
c001b0a2:	83 c4 0c             	add    esp,0xc
c001b0a5:	c3                   	ret    

c001b0a6 <Clock::timeInSecondsLocal()>:
c001b0a6:	53                   	push   ebx
c001b0a7:	83 ec 14             	sub    esp,0x14
c001b0aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0ae:	8b 10                	mov    edx,DWORD PTR [eax]
c001b0b0:	50                   	push   eax
c001b0b1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b0b4:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001b0bb:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001b0c1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001b0c7:	89 cb                	mov    ebx,ecx
c001b0c9:	c1 fb 1f             	sar    ebx,0x1f
c001b0cc:	01 c8                	add    eax,ecx
c001b0ce:	11 da                	adc    edx,ebx
c001b0d0:	83 c4 10             	add    esp,0x10
c001b0d3:	31 c9                	xor    ecx,ecx
c001b0d5:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001b0dc:	74 05                	je     c001b0e3 <Clock::timeInSecondsLocal()+0x3d>
c001b0de:	b9 08 07 00 00       	mov    ecx,0x708
c001b0e3:	31 db                	xor    ebx,ebx
c001b0e5:	01 c8                	add    eax,ecx
c001b0e7:	11 da                	adc    edx,ebx
c001b0e9:	83 c4 08             	add    esp,0x8
c001b0ec:	5b                   	pop    ebx
c001b0ed:	c3                   	ret    

c001b0ee <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001b0ee:	57                   	push   edi
c001b0ef:	56                   	push   esi
c001b0f0:	53                   	push   ebx
c001b0f1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b0f5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b0f9:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b0fb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b0ff:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001b102:	0f b6 05 08 cf 03 c0 	movzx  eax,BYTE PTR ds:0xc003cf08
c001b109:	03 05 0c cf 03 c0    	add    eax,DWORD PTR ds:0xc003cf0c
c001b10f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001b115:	99                   	cdq    
c001b116:	29 c6                	sub    esi,eax
c001b118:	19 d7                	sbb    edi,edx
c001b11a:	89 f0                	mov    eax,esi
c001b11c:	89 fa                	mov    edx,edi
c001b11e:	31 f6                	xor    esi,esi
c001b120:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001b127:	74 05                	je     c001b12e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001b129:	be 08 07 00 00       	mov    esi,0x708
c001b12e:	31 ff                	xor    edi,edi
c001b130:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b134:	29 f0                	sub    eax,esi
c001b136:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b13a:	19 fa                	sbb    edx,edi
c001b13c:	89 d8                	mov    eax,ebx
c001b13e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b142:	5b                   	pop    ebx
c001b143:	5e                   	pop    esi
c001b144:	5f                   	pop    edi
c001b145:	ff e0                	jmp    eax

c001b147 <datetimeToSeconds(datetime_t)>:
c001b147:	55                   	push   ebp
c001b148:	57                   	push   edi
c001b149:	56                   	push   esi
c001b14a:	53                   	push   ebx
c001b14b:	83 ec 0c             	sub    esp,0xc
c001b14e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b152:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b156:	89 d6                	mov    esi,edx
c001b158:	0f b6 c7             	movzx  eax,bh
c001b15b:	c1 ee 10             	shr    esi,0x10
c001b15e:	6b e8 3c             	imul   ebp,eax,0x3c
c001b161:	81 ee 6c 07 00 00    	sub    esi,0x76c
c001b167:	0f b6 ce             	movzx  ecx,dh
c001b16a:	89 df                	mov    edi,ebx
c001b16c:	49                   	dec    ecx
c001b16d:	c1 ef 10             	shr    edi,0x10
c001b170:	0f b6 db             	movzx  ebx,bl
c001b173:	89 f8                	mov    eax,edi
c001b175:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c001b17b:	0f b6 f8             	movzx  edi,al
c001b17e:	0f b6 d2             	movzx  edx,dl
c001b181:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c001b185:	01 d8                	add    eax,ebx
c001b187:	0f b7 de             	movzx  ebx,si
c001b18a:	89 04 24             	mov    DWORD PTR [esp],eax
c001b18d:	c1 f8 1f             	sar    eax,0x1f
c001b190:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b194:	0f b6 c1             	movzx  eax,cl
c001b197:	8b 0c 85 e0 21 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcde20]
c001b19e:	83 f8 01             	cmp    eax,0x1
c001b1a1:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001b1a5:	76 27                	jbe    c001b1ce <datetimeToSeconds(datetime_t)+0x87>
c001b1a7:	83 e6 03             	and    esi,0x3
c001b1aa:	75 22                	jne    c001b1ce <datetimeToSeconds(datetime_t)+0x87>
c001b1ac:	31 d2                	xor    edx,edx
c001b1ae:	be 64 00 00 00       	mov    esi,0x64
c001b1b3:	89 d8                	mov    eax,ebx
c001b1b5:	f7 f6                	div    esi
c001b1b7:	85 d2                	test   edx,edx
c001b1b9:	75 12                	jne    c001b1cd <datetimeToSeconds(datetime_t)+0x86>
c001b1bb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001b1c1:	be 90 01 00 00       	mov    esi,0x190
c001b1c6:	99                   	cdq    
c001b1c7:	f7 fe                	idiv   esi
c001b1c9:	85 d2                	test   edx,edx
c001b1cb:	75 01                	jne    c001b1ce <datetimeToSeconds(datetime_t)+0x87>
c001b1cd:	41                   	inc    ecx
c001b1ce:	83 fb 46             	cmp    ebx,0x46
c001b1d1:	76 48                	jbe    c001b21b <datetimeToSeconds(datetime_t)+0xd4>
c001b1d3:	be 46 00 00 00       	mov    esi,0x46
c001b1d8:	bf 64 00 00 00       	mov    edi,0x64
c001b1dd:	bd 90 01 00 00       	mov    ebp,0x190
c001b1e2:	b8 6d 01 00 00       	mov    eax,0x16d
c001b1e7:	f7 c6 03 00 00 00    	test   esi,0x3
c001b1ed:	75 23                	jne    c001b212 <datetimeToSeconds(datetime_t)+0xcb>
c001b1ef:	89 f0                	mov    eax,esi
c001b1f1:	99                   	cdq    
c001b1f2:	f7 ff                	idiv   edi
c001b1f4:	b8 6e 01 00 00       	mov    eax,0x16e
c001b1f9:	85 d2                	test   edx,edx
c001b1fb:	75 15                	jne    c001b212 <datetimeToSeconds(datetime_t)+0xcb>
c001b1fd:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001b203:	99                   	cdq    
c001b204:	f7 fd                	idiv   ebp
c001b206:	83 fa 01             	cmp    edx,0x1
c001b209:	19 c0                	sbb    eax,eax
c001b20b:	f7 d0                	not    eax
c001b20d:	05 6e 01 00 00       	add    eax,0x16e
c001b212:	01 c1                	add    ecx,eax
c001b214:	46                   	inc    esi
c001b215:	39 de                	cmp    esi,ebx
c001b217:	7c c9                	jl     c001b1e2 <datetimeToSeconds(datetime_t)+0x9b>
c001b219:	eb 34                	jmp    c001b24f <datetimeToSeconds(datetime_t)+0x108>
c001b21b:	74 32                	je     c001b24f <datetimeToSeconds(datetime_t)+0x108>
c001b21d:	b8 45 00 00 00       	mov    eax,0x45
c001b222:	89 c2                	mov    edx,eax
c001b224:	83 e2 03             	and    edx,0x3
c001b227:	39 d8                	cmp    eax,ebx
c001b229:	7e 0f                	jle    c001b23a <datetimeToSeconds(datetime_t)+0xf3>
c001b22b:	83 fa 01             	cmp    edx,0x1
c001b22e:	19 d2                	sbb    edx,edx
c001b230:	48                   	dec    eax
c001b231:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001b238:	eb e8                	jmp    c001b222 <datetimeToSeconds(datetime_t)+0xdb>
c001b23a:	b8 6d 01 00 00       	mov    eax,0x16d
c001b23f:	85 d2                	test   edx,edx
c001b241:	75 0a                	jne    c001b24d <datetimeToSeconds(datetime_t)+0x106>
c001b243:	83 fb 01             	cmp    ebx,0x1
c001b246:	19 c0                	sbb    eax,eax
c001b248:	05 6e 01 00 00       	add    eax,0x16e
c001b24d:	29 c1                	sub    ecx,eax
c001b24f:	b8 80 51 01 00       	mov    eax,0x15180
c001b254:	f7 e9                	imul   ecx
c001b256:	03 04 24             	add    eax,DWORD PTR [esp]
c001b259:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001b25d:	83 c4 0c             	add    esp,0xc
c001b260:	5b                   	pop    ebx
c001b261:	5e                   	pop    esi
c001b262:	5f                   	pop    edi
c001b263:	5d                   	pop    ebp
c001b264:	c3                   	ret    
c001b265:	90                   	nop

c001b266 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001b266:	57                   	push   edi
c001b267:	56                   	push   esi
c001b268:	53                   	push   ebx
c001b269:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b26d:	8b 06                	mov    eax,DWORD PTR [esi]
c001b26f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001b272:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b276:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b27a:	e8 c8 fe ff ff       	call   c001b147 <datetimeToSeconds(datetime_t)>
c001b27f:	59                   	pop    ecx
c001b280:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001b287:	5b                   	pop    ebx
c001b288:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001b28e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001b294:	89 cb                	mov    ebx,ecx
c001b296:	c1 fb 1f             	sar    ebx,0x1f
c001b299:	29 c8                	sub    eax,ecx
c001b29b:	19 da                	sbb    edx,ebx
c001b29d:	31 c9                	xor    ecx,ecx
c001b29f:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001b2a6:	74 05                	je     c001b2ad <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001b2a8:	b9 08 07 00 00       	mov    ecx,0x708
c001b2ad:	31 db                	xor    ebx,ebx
c001b2af:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b2b3:	29 c8                	sub    eax,ecx
c001b2b5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b2b9:	19 da                	sbb    edx,ebx
c001b2bb:	89 f8                	mov    eax,edi
c001b2bd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b2c1:	5b                   	pop    ebx
c001b2c2:	5e                   	pop    esi
c001b2c3:	5f                   	pop    edi
c001b2c4:	ff e0                	jmp    eax

c001b2c6 <secondsToDatetime(unsigned long long)>:
c001b2c6:	55                   	push   ebp
c001b2c7:	57                   	push   edi
c001b2c8:	56                   	push   esi
c001b2c9:	53                   	push   ebx
c001b2ca:	83 ec 1c             	sub    esp,0x1c
c001b2cd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b2d1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b2d5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001b2d9:	6a 00                	push   0x0
c001b2db:	68 80 51 01 00       	push   0x15180
c001b2e0:	55                   	push   ebp
c001b2e1:	57                   	push   edi
c001b2e2:	e8 19 36 01 00       	call   c002e900 <__udivdi3>
c001b2e7:	83 c4 10             	add    esp,0x10
c001b2ea:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001b2f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b2f4:	6a 00                	push   0x0
c001b2f6:	68 80 51 01 00       	push   0x15180
c001b2fb:	55                   	push   ebp
c001b2fc:	57                   	push   edi
c001b2fd:	bf 10 0e 00 00       	mov    edi,0xe10
c001b302:	e8 f9 36 01 00       	call   c002ea00 <__umoddi3>
c001b307:	83 c4 10             	add    esp,0x10
c001b30a:	99                   	cdq    
c001b30b:	f7 ff                	idiv   edi
c001b30d:	bf 3c 00 00 00       	mov    edi,0x3c
c001b312:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001b315:	89 d0                	mov    eax,edx
c001b317:	99                   	cdq    
c001b318:	f7 ff                	idiv   edi
c001b31a:	85 db                	test   ebx,ebx
c001b31c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001b31f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001b322:	79 11                	jns    c001b335 <secondsToDatetime(unsigned long long)+0x6f>
c001b324:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b328:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001b32e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b333:	eb 07                	jmp    c001b33c <secondsToDatetime(unsigned long long)+0x76>
c001b335:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b33a:	89 d8                	mov    eax,ebx
c001b33c:	bf b4 05 00 00       	mov    edi,0x5b4
c001b341:	99                   	cdq    
c001b342:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001b347:	f7 f9                	idiv   ecx
c001b349:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001b34e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b352:	31 d2                	xor    edx,edx
c001b354:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001b35c:	01 c3                	add    ebx,eax
c001b35e:	89 d8                	mov    eax,ebx
c001b360:	f7 f1                	div    ecx
c001b362:	31 d2                	xor    edx,edx
c001b364:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001b367:	89 d8                	mov    eax,ebx
c001b369:	f7 f7                	div    edi
c001b36b:	31 d2                	xor    edx,edx
c001b36d:	29 c1                	sub    ecx,eax
c001b36f:	89 d8                	mov    eax,ebx
c001b371:	f7 f5                	div    ebp
c001b373:	bd 6d 01 00 00       	mov    ebp,0x16d
c001b378:	29 c1                	sub    ecx,eax
c001b37a:	31 d2                	xor    edx,edx
c001b37c:	89 c8                	mov    eax,ecx
c001b37e:	f7 f5                	div    ebp
c001b380:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001b385:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b389:	31 d2                	xor    edx,edx
c001b38b:	89 c8                	mov    eax,ecx
c001b38d:	f7 f5                	div    ebp
c001b38f:	31 d2                	xor    edx,edx
c001b391:	01 c3                	add    ebx,eax
c001b393:	89 c8                	mov    eax,ecx
c001b395:	f7 f7                	div    edi
c001b397:	bf 99 00 00 00       	mov    edi,0x99
c001b39c:	29 c3                	sub    ebx,eax
c001b39e:	31 d2                	xor    edx,edx
c001b3a0:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001b3a8:	29 c3                	sub    ebx,eax
c001b3aa:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001b3ad:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001b3b0:	bb 05 00 00 00       	mov    ebx,0x5
c001b3b5:	83 c1 02             	add    ecx,0x2
c001b3b8:	89 c8                	mov    eax,ecx
c001b3ba:	f7 f7                	div    edi
c001b3bc:	31 d2                	xor    edx,edx
c001b3be:	89 c7                	mov    edi,eax
c001b3c0:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001b3c6:	83 c0 02             	add    eax,0x2
c001b3c9:	f7 f3                	div    ebx
c001b3cb:	89 eb                	mov    ebx,ebp
c001b3cd:	29 c3                	sub    ebx,eax
c001b3cf:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001b3d5:	88 1e                	mov    BYTE PTR [esi],bl
c001b3d7:	19 c0                	sbb    eax,eax
c001b3d9:	31 d2                	xor    edx,edx
c001b3db:	83 e0 0c             	and    eax,0xc
c001b3de:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001b3e2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001b3ea:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001b3ee:	83 f9 01             	cmp    ecx,0x1
c001b3f1:	0f 96 c2             	setbe  dl
c001b3f4:	41                   	inc    ecx
c001b3f5:	01 d0                	add    eax,edx
c001b3f7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001b3fa:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001b3fe:	83 c4 1c             	add    esp,0x1c
c001b401:	89 f0                	mov    eax,esi
c001b403:	5b                   	pop    ebx
c001b404:	5e                   	pop    esi
c001b405:	5f                   	pop    edi
c001b406:	5d                   	pop    ebp
c001b407:	c2 04 00             	ret    0x4

c001b40a <Clock::timeInDatetimeLocal()>:
c001b40a:	53                   	push   ebx
c001b40b:	83 ec 14             	sub    esp,0x14
c001b40e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b412:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b416:	e8 8b fc ff ff       	call   c001b0a6 <Clock::timeInSecondsLocal()>
c001b41b:	83 c4 0c             	add    esp,0xc
c001b41e:	52                   	push   edx
c001b41f:	50                   	push   eax
c001b420:	53                   	push   ebx
c001b421:	e8 a0 fe ff ff       	call   c001b2c6 <secondsToDatetime(unsigned long long)>
c001b426:	89 d8                	mov    eax,ebx
c001b428:	83 c4 14             	add    esp,0x14
c001b42b:	5b                   	pop    ebx
c001b42c:	c2 04 00             	ret    0x4
c001b42f:	90                   	nop

c001b430 <Device::hibernate()>:
c001b430:	c3                   	ret    
c001b431:	90                   	nop

c001b432 <Device::wake()>:
c001b432:	c3                   	ret    
c001b433:	90                   	nop

c001b434 <Device::detect()>:
c001b434:	c3                   	ret    
c001b435:	90                   	nop

c001b436 <Device::disableLegacy()>:
c001b436:	c3                   	ret    
c001b437:	90                   	nop

c001b438 <Device::powerSaving(PowerSavingLevel)>:
c001b438:	c3                   	ret    
c001b439:	90                   	nop

c001b43a <DriverlessDevice::close(int, int, void*)>:
c001b43a:	31 c0                	xor    eax,eax
c001b43c:	c3                   	ret    
c001b43d:	90                   	nop

c001b43e <DriverlessDevice::detect()>:
c001b43e:	c3                   	ret    
c001b43f:	90                   	nop

c001b440 <DriverlessDevice::open(int, int, void*)>:
c001b440:	83 ec 18             	sub    esp,0x18
c001b443:	68 10 22 03 c0       	push   0xc0032210
c001b448:	e8 9d 50 00 00       	call   c00204ea <KePanic(char const*)>
c001b44d:	83 c8 ff             	or     eax,0xffffffff
c001b450:	83 c4 1c             	add    esp,0x1c
c001b453:	c3                   	ret    

c001b454 <Device::~Device()>:
c001b454:	ba 7c 22 03 c0       	mov    edx,0xc003227c
c001b459:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b45d:	89 10                	mov    DWORD PTR [eax],edx
c001b45f:	90                   	nop
c001b460:	c3                   	ret    
c001b461:	90                   	nop

c001b462 <Device::~Device()>:
c001b462:	83 ec 0c             	sub    esp,0xc
c001b465:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b469:	e8 e6 ff ff ff       	call   c001b454 <Device::~Device()>
c001b46e:	83 c4 04             	add    esp,0x4
c001b471:	83 ec 08             	sub    esp,0x8
c001b474:	68 58 01 00 00       	push   0x158
c001b479:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b47d:	e8 22 df ff ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c001b482:	83 c4 10             	add    esp,0x10
c001b485:	83 c4 0c             	add    esp,0xc
c001b488:	c3                   	ret    
c001b489:	90                   	nop

c001b48a <Device::findAndLoadDriver()>:
c001b48a:	c7 44 24 04 2e 22 03 c0 	mov    DWORD PTR [esp+0x4],0xc003222e
c001b492:	e9 3a e0 ff ff       	jmp    c00194d1 <Dbg::kprintf(char const*, ...)>
c001b497:	90                   	nop

c001b498 <Device::preOpenPCI(PCIDeviceInfo)>:
c001b498:	57                   	push   edi
c001b499:	b9 09 00 00 00       	mov    ecx,0x9
c001b49e:	56                   	push   esi
c001b49f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b4a3:	8d 74 24 10          	lea    esi,[esp+0x10]
c001b4a7:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001b4b1:	81 c7 18 01 00 00    	add    edi,0x118
c001b4b7:	fc                   	cld    
c001b4b8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b4ba:	5e                   	pop    esi
c001b4bb:	5f                   	pop    edi
c001b4bc:	c3                   	ret    
c001b4bd:	90                   	nop

c001b4be <Device::preOpenACPI(void*, char*, char*)>:
c001b4be:	57                   	push   edi
c001b4bf:	b9 1e 00 00 00       	mov    ecx,0x1e
c001b4c4:	56                   	push   esi
c001b4c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b4c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b4cd:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c001b4d7:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c001b4dd:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c001b4e3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b4e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b4e9:	b9 0e 00 00 00       	mov    ecx,0xe
c001b4ee:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c001b4f4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b4f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b4fa:	5e                   	pop    esi
c001b4fb:	5f                   	pop    edi
c001b4fc:	c3                   	ret    
c001b4fd:	90                   	nop

c001b4fe <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b4fe:	53                   	push   ebx
c001b4ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b503:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b507:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b50b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b50f:	0f b6 c0             	movzx  eax,al
c001b512:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b516:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b51a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b51e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b522:	5b                   	pop    ebx
c001b523:	e9 c0 05 00 00       	jmp    c001bae8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c001b528 <Device::getParent()>:
c001b528:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b52c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c001b532:	c3                   	ret    
c001b533:	90                   	nop

c001b534 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b538:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b53c:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b541:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b545:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b549:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b54d:	e9 fe 06 00 00       	jmp    c001bc50 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c001b552 <Device::addChild(Device*)>:
c001b552:	53                   	push   ebx
c001b553:	83 ec 08             	sub    esp,0x8
c001b556:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b55a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b55e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001b564:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001b56a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b56c:	85 d2                	test   edx,edx
c001b56e:	74 04                	je     c001b574 <Device::addChild(Device*)+0x22>
c001b570:	89 d3                	mov    ebx,edx
c001b572:	eb f6                	jmp    c001b56a <Device::addChild(Device*)+0x18>
c001b574:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001b577:	83 ec 0c             	sub    esp,0xc
c001b57a:	6a 08                	push   0x8
c001b57c:	e8 c2 b0 ff ff       	call   c0016643 <malloc>
c001b581:	89 03                	mov    DWORD PTR [ebx],eax
c001b583:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b589:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b590:	83 c4 18             	add    esp,0x18
c001b593:	5b                   	pop    ebx
c001b594:	c3                   	ret    
c001b595:	90                   	nop

c001b596 <Device::removeAllChildren()>:
c001b596:	56                   	push   esi
c001b597:	53                   	push   ebx
c001b598:	52                   	push   edx
c001b599:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b59d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001b5a3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b5a6:	74 17                	je     c001b5bf <Device::removeAllChildren()+0x29>
c001b5a8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b5ab:	85 c0                	test   eax,eax
c001b5ad:	74 0c                	je     c001b5bb <Device::removeAllChildren()+0x25>
c001b5af:	83 ec 0c             	sub    esp,0xc
c001b5b2:	8b 10                	mov    edx,DWORD PTR [eax]
c001b5b4:	50                   	push   eax
c001b5b5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b5b8:	83 c4 10             	add    esp,0x10
c001b5bb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b5bd:	eb e4                	jmp    c001b5a3 <Device::removeAllChildren()+0xd>
c001b5bf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b5c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b5cb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b5d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b5d8:	58                   	pop    eax
c001b5d9:	5b                   	pop    ebx
c001b5da:	5e                   	pop    esi
c001b5db:	c3                   	ret    

c001b5dc <Device::hibernateAll()>:
c001b5dc:	53                   	push   ebx
c001b5dd:	83 ec 14             	sub    esp,0x14
c001b5e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b5e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5e6:	53                   	push   ebx
c001b5e7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b5ea:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b5f0:	83 c4 10             	add    esp,0x10
c001b5f3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b5f6:	74 0f                	je     c001b607 <Device::hibernateAll()+0x2b>
c001b5f8:	83 ec 0c             	sub    esp,0xc
c001b5fb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b5fe:	e8 d9 ff ff ff       	call   c001b5dc <Device::hibernateAll()>
c001b603:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b605:	eb e9                	jmp    c001b5f0 <Device::hibernateAll()+0x14>
c001b607:	83 c4 08             	add    esp,0x8
c001b60a:	5b                   	pop    ebx
c001b60b:	c3                   	ret    

c001b60c <Device::wakeAll()>:
c001b60c:	53                   	push   ebx
c001b60d:	83 ec 14             	sub    esp,0x14
c001b610:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b614:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b616:	53                   	push   ebx
c001b617:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001b61a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b620:	83 c4 10             	add    esp,0x10
c001b623:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b626:	74 0f                	je     c001b637 <Device::wakeAll()+0x2b>
c001b628:	83 ec 0c             	sub    esp,0xc
c001b62b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b62e:	e8 d9 ff ff ff       	call   c001b60c <Device::wakeAll()>
c001b633:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b635:	eb e9                	jmp    c001b620 <Device::wakeAll()+0x14>
c001b637:	83 c4 08             	add    esp,0x8
c001b63a:	5b                   	pop    ebx
c001b63b:	c3                   	ret    

c001b63c <Device::detectAll()>:
c001b63c:	53                   	push   ebx
c001b63d:	83 ec 14             	sub    esp,0x14
c001b640:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b644:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b646:	53                   	push   ebx
c001b647:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b64a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b650:	83 c4 10             	add    esp,0x10
c001b653:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b656:	74 0f                	je     c001b667 <Device::detectAll()+0x2b>
c001b658:	83 ec 0c             	sub    esp,0xc
c001b65b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b65e:	e8 d9 ff ff ff       	call   c001b63c <Device::detectAll()>
c001b663:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b665:	eb e9                	jmp    c001b650 <Device::detectAll()+0x14>
c001b667:	83 c4 08             	add    esp,0x8
c001b66a:	5b                   	pop    ebx
c001b66b:	c3                   	ret    

c001b66c <Device::disableLegacyAll()>:
c001b66c:	c3                   	ret    
c001b66d:	90                   	nop

c001b66e <Device::loadDriversForAll()>:
c001b66e:	c3                   	ret    
c001b66f:	90                   	nop

c001b670 <Device::powerSavingAll(PowerSavingLevel)>:
c001b670:	56                   	push   esi
c001b671:	53                   	push   ebx
c001b672:	83 ec 0c             	sub    esp,0xc
c001b675:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b679:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b67d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b67f:	56                   	push   esi
c001b680:	53                   	push   ebx
c001b681:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001b684:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b68a:	83 c4 10             	add    esp,0x10
c001b68d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b690:	74 0f                	je     c001b6a1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001b692:	52                   	push   edx
c001b693:	52                   	push   edx
c001b694:	56                   	push   esi
c001b695:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b698:	e8 d3 ff ff ff       	call   c001b670 <Device::powerSavingAll(PowerSavingLevel)>
c001b69d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b69f:	eb e9                	jmp    c001b68a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001b6a1:	58                   	pop    eax
c001b6a2:	5b                   	pop    ebx
c001b6a3:	5e                   	pop    esi
c001b6a4:	c3                   	ret    
c001b6a5:	90                   	nop

c001b6a6 <Device::setName(char const*)>:
c001b6a6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001b6ae:	e9 8d 4f fe ff       	jmp    c0000640 <strcpy>
c001b6b3:	90                   	nop

c001b6b4 <Device::Device(char const*)>:
c001b6b4:	83 ec 1c             	sub    esp,0x1c
c001b6b7:	ba 7c 22 03 c0       	mov    edx,0xc003227c
c001b6bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6c0:	89 10                	mov    DWORD PTR [eax],edx
c001b6c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6c6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001b6d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6d4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b6de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6e2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b6ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6f0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b6fa:	83 ec 08             	sub    esp,0x8
c001b6fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b701:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b705:	e8 9c ff ff ff       	call   c001b6a6 <Device::setName(char const*)>
c001b70a:	83 c4 10             	add    esp,0x10
c001b70d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001b715:	83 ec 0c             	sub    esp,0xc
c001b718:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b71c:	e8 22 af ff ff       	call   c0016643 <malloc>
c001b721:	83 c4 10             	add    esp,0x10
c001b724:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b72a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b731:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b735:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001b73b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b73f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b745:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b74b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b74f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b755:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b75c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b760:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001b767:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b76b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001b772:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b776:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b780:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b784:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b78e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b792:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b79c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7a0:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c001b7aa:	90                   	nop
c001b7ab:	83 c4 1c             	add    esp,0x1c
c001b7ae:	c3                   	ret    
c001b7af:	90                   	nop

c001b7b0 <Device::getName()>:
c001b7b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7b4:	05 d0 00 00 00       	add    eax,0xd0
c001b7b9:	c3                   	ret    

c001b7ba <Device::closeAll()>:
c001b7ba:	53                   	push   ebx
c001b7bb:	83 ec 08             	sub    esp,0x8
c001b7be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b7c2:	53                   	push   ebx
c001b7c3:	e8 e8 ff ff ff       	call   c001b7b0 <Device::getName()>
c001b7c8:	52                   	push   edx
c001b7c9:	50                   	push   eax
c001b7ca:	68 68 22 03 c0       	push   0xc0032268
c001b7cf:	e8 fd dc ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001b7d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b7d6:	6a 00                	push   0x0
c001b7d8:	6a 00                	push   0x0
c001b7da:	6a 00                	push   0x0
c001b7dc:	53                   	push   ebx
c001b7dd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b7e0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b7e6:	83 c4 20             	add    esp,0x20
c001b7e9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b7ec:	74 12                	je     c001b800 <Device::closeAll()+0x46>
c001b7ee:	83 ec 0c             	sub    esp,0xc
c001b7f1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b7f4:	e8 c1 ff ff ff       	call   c001b7ba <Device::closeAll()>
c001b7f9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b7fb:	83 c4 10             	add    esp,0x10
c001b7fe:	eb e9                	jmp    c001b7e9 <Device::closeAll()+0x2f>
c001b800:	83 c4 08             	add    esp,0x8
c001b803:	5b                   	pop    ebx
c001b804:	c3                   	ret    
c001b805:	90                   	nop

c001b806 <DriverlessDevice::DriverlessDevice(char const*)>:
c001b806:	83 ec 0c             	sub    esp,0xc
c001b809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b80d:	83 ec 08             	sub    esp,0x8
c001b810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b814:	50                   	push   eax
c001b815:	e8 9a fe ff ff       	call   c001b6b4 <Device::Device(char const*)>
c001b81a:	83 c4 10             	add    esp,0x10
c001b81d:	ba a8 22 03 c0       	mov    edx,0xc00322a8
c001b822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b826:	89 10                	mov    DWORD PTR [eax],edx
c001b828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b82c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001b836:	90                   	nop
c001b837:	83 c4 0c             	add    esp,0xc
c001b83a:	c3                   	ret    
c001b83b:	90                   	nop

c001b83c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001b83c:	57                   	push   edi
c001b83d:	56                   	push   esi
c001b83e:	53                   	push   ebx
c001b83f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b843:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b847:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b84b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001b851:	75 0c                	jne    c001b85f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001b853:	52                   	push   edx
c001b854:	52                   	push   edx
c001b855:	53                   	push   ebx
c001b856:	56                   	push   esi
c001b857:	e8 56 35 01 00       	call   c002edb2 <LinkedList<Device>::addElement(Device*)>
c001b85c:	83 c4 10             	add    esp,0x10
c001b85f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b865:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b868:	74 12                	je     c001b87c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001b86a:	50                   	push   eax
c001b86b:	57                   	push   edi
c001b86c:	56                   	push   esi
c001b86d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b870:	e8 c7 ff ff ff       	call   c001b83c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b875:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b877:	83 c4 10             	add    esp,0x10
c001b87a:	eb e9                	jmp    c001b865 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001b87c:	5b                   	pop    ebx
c001b87d:	5e                   	pop    esi
c001b87e:	5f                   	pop    edi
c001b87f:	c3                   	ret    

c001b880 <getDevicesOfType(DeviceType)>:
c001b880:	53                   	push   ebx
c001b881:	83 ec 14             	sub    esp,0x14
c001b884:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b888:	53                   	push   ebx
c001b889:	e8 00 36 01 00       	call   c002ee8e <LinkedList<Device>::LinkedList()>
c001b88e:	83 c4 0c             	add    esp,0xc
c001b891:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b895:	53                   	push   ebx
c001b896:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001b89c:	e8 9b ff ff ff       	call   c001b83c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b8a1:	89 d8                	mov    eax,ebx
c001b8a3:	83 c4 18             	add    esp,0x18
c001b8a6:	5b                   	pop    ebx
c001b8a7:	c2 04 00             	ret    0x4
c001b8aa:	66 90                	xchg   ax,ax

c001b8ac <HardDiskController::HardDiskController(char const*)>:
c001b8ac:	83 ec 0c             	sub    esp,0xc
c001b8af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8b3:	83 ec 08             	sub    esp,0x8
c001b8b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8ba:	50                   	push   eax
c001b8bb:	e8 f4 fd ff ff       	call   c001b6b4 <Device::Device(char const*)>
c001b8c0:	83 c4 10             	add    esp,0x10
c001b8c3:	ba d4 22 03 c0       	mov    edx,0xc00322d4
c001b8c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8cc:	89 10                	mov    DWORD PTR [eax],edx
c001b8ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8d2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001b8dc:	90                   	nop
c001b8dd:	83 c4 0c             	add    esp,0xc
c001b8e0:	c3                   	ret    
c001b8e1:	90                   	nop
c001b8e2:	66 90                	xchg   ax,ax

c001b8e4 <HardDiskController::~HardDiskController()>:
c001b8e4:	83 ec 0c             	sub    esp,0xc
c001b8e7:	ba d4 22 03 c0       	mov    edx,0xc00322d4
c001b8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8f0:	89 10                	mov    DWORD PTR [eax],edx
c001b8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8f6:	83 ec 0c             	sub    esp,0xc
c001b8f9:	50                   	push   eax
c001b8fa:	e8 55 fb ff ff       	call   c001b454 <Device::~Device()>
c001b8ff:	83 c4 10             	add    esp,0x10
c001b902:	90                   	nop
c001b903:	83 c4 0c             	add    esp,0xc
c001b906:	c3                   	ret    
c001b907:	90                   	nop

c001b908 <HardDiskController::~HardDiskController()>:
c001b908:	83 ec 0c             	sub    esp,0xc
c001b90b:	83 ec 0c             	sub    esp,0xc
c001b90e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b912:	e8 cd ff ff ff       	call   c001b8e4 <HardDiskController::~HardDiskController()>
c001b917:	83 c4 10             	add    esp,0x10
c001b91a:	83 ec 08             	sub    esp,0x8
c001b91d:	68 58 01 00 00       	push   0x158
c001b922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b926:	e8 79 da ff ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c001b92b:	83 c4 10             	add    esp,0x10
c001b92e:	83 c4 0c             	add    esp,0xc
c001b931:	c3                   	ret    

c001b932 <PhysicalDisk::eject()>:
c001b932:	83 c8 ff             	or     eax,0xffffffff
c001b935:	c3                   	ret    

c001b936 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001b936:	83 ec 0c             	sub    esp,0xc
c001b939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b93d:	83 ec 08             	sub    esp,0x8
c001b940:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b944:	50                   	push   eax
c001b945:	e8 6a fd ff ff       	call   c001b6b4 <Device::Device(char const*)>
c001b94a:	83 c4 10             	add    esp,0x10
c001b94d:	ba 00 23 03 c0       	mov    edx,0xc0032300
c001b952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b956:	89 10                	mov    DWORD PTR [eax],edx
c001b958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b95c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001b963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b967:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001b96e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b972:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001b97c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b980:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b984:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b98e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b998:	90                   	nop
c001b999:	83 c4 0c             	add    esp,0xc
c001b99c:	c3                   	ret    
c001b99d:	90                   	nop

c001b99e <PhysicalDisk::startCache()>:
c001b99e:	56                   	push   esi
c001b99f:	53                   	push   ebx
c001b9a0:	83 ec 10             	sub    esp,0x10
c001b9a3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b9a7:	6a 44                	push   0x44
c001b9a9:	e8 95 ac ff ff       	call   c0016643 <malloc>
c001b9ae:	89 c6                	mov    esi,eax
c001b9b0:	58                   	pop    eax
c001b9b1:	5a                   	pop    edx
c001b9b2:	53                   	push   ebx
c001b9b3:	56                   	push   esi
c001b9b4:	e8 6f 17 00 00       	call   c001d128 <VCache::VCache(PhysicalDisk*)>
c001b9b9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001b9bf:	83 c4 14             	add    esp,0x14
c001b9c2:	5b                   	pop    ebx
c001b9c3:	5e                   	pop    esi
c001b9c4:	c3                   	ret    
c001b9c5:	90                   	nop

c001b9c6 <PhysicalDisk::~PhysicalDisk()>:
c001b9c6:	83 ec 0c             	sub    esp,0xc
c001b9c9:	ba 00 23 03 c0       	mov    edx,0xc0032300
c001b9ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9d2:	89 10                	mov    DWORD PTR [eax],edx
c001b9d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9d8:	83 ec 0c             	sub    esp,0xc
c001b9db:	50                   	push   eax
c001b9dc:	e8 73 fa ff ff       	call   c001b454 <Device::~Device()>
c001b9e1:	83 c4 10             	add    esp,0x10
c001b9e4:	90                   	nop
c001b9e5:	83 c4 0c             	add    esp,0xc
c001b9e8:	c3                   	ret    
c001b9e9:	90                   	nop

c001b9ea <PhysicalDisk::~PhysicalDisk()>:
c001b9ea:	83 ec 0c             	sub    esp,0xc
c001b9ed:	83 ec 0c             	sub    esp,0xc
c001b9f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9f4:	e8 cd ff ff ff       	call   c001b9c6 <PhysicalDisk::~PhysicalDisk()>
c001b9f9:	83 c4 10             	add    esp,0x10
c001b9fc:	83 ec 08             	sub    esp,0x8
c001b9ff:	68 6c 01 00 00       	push   0x16c
c001ba04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba08:	e8 97 d9 ff ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c001ba0d:	83 c4 10             	add    esp,0x10
c001ba10:	83 c4 0c             	add    esp,0xc
c001ba13:	c3                   	ret    

c001ba14 <int_handler>:
c001ba14:	55                   	push   ebp
c001ba15:	57                   	push   edi
c001ba16:	56                   	push   esi
c001ba17:	53                   	push   ebx
c001ba18:	83 ec 0c             	sub    esp,0xc
c001ba1b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ba1f:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001ba26:	74 0b                	je     c001ba33 <int_handler+0x1f>
c001ba28:	fa                   	cli    
c001ba29:	f4                   	hlt    
c001ba2a:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001ba31:	75 f5                	jne    c001ba28 <int_handler+0x14>
c001ba33:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001ba36:	8d 46 e0             	lea    eax,[esi-0x20]
c001ba39:	83 f8 17             	cmp    eax,0x17
c001ba3c:	76 40                	jbe    c001ba7e <int_handler+0x6a>
c001ba3e:	c1 e6 04             	shl    esi,0x4
c001ba41:	31 db                	xor    ebx,ebx
c001ba43:	8d ae 20 df 03 c0    	lea    ebp,[esi-0x3ffc20e0]
c001ba49:	81 c6 20 cf 03 c0    	add    esi,0xc003cf20
c001ba4f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001ba53:	85 c0                	test   eax,eax
c001ba55:	74 13                	je     c001ba6a <int_handler+0x56>
c001ba57:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001ba5a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001ba5e:	74 2c                	je     c001ba8c <int_handler+0x78>
c001ba60:	83 ec 08             	sub    esp,0x8
c001ba63:	52                   	push   edx
c001ba64:	57                   	push   edi
c001ba65:	ff d0                	call   eax
c001ba67:	83 c4 10             	add    esp,0x10
c001ba6a:	83 c3 01             	add    ebx,0x1
c001ba6d:	83 fb 04             	cmp    ebx,0x4
c001ba70:	75 dd                	jne    c001ba4f <int_handler+0x3b>
c001ba72:	83 c4 0c             	add    esp,0xc
c001ba75:	31 c0                	xor    eax,eax
c001ba77:	5b                   	pop    ebx
c001ba78:	31 d2                	xor    edx,edx
c001ba7a:	5e                   	pop    esi
c001ba7b:	5f                   	pop    edi
c001ba7c:	5d                   	pop    ebp
c001ba7d:	c3                   	ret    
c001ba7e:	83 ec 0c             	sub    esp,0xc
c001ba81:	50                   	push   eax
c001ba82:	e8 95 ba 00 00       	call   c002751c <HalEndOfInterrupt(int)>
c001ba87:	83 c4 10             	add    esp,0x10
c001ba8a:	eb b2                	jmp    c001ba3e <int_handler+0x2a>
c001ba8c:	83 ec 08             	sub    esp,0x8
c001ba8f:	52                   	push   edx
c001ba90:	57                   	push   edi
c001ba91:	ff d0                	call   eax
c001ba93:	83 c4 10             	add    esp,0x10
c001ba96:	83 c4 0c             	add    esp,0xc
c001ba99:	5b                   	pop    ebx
c001ba9a:	5e                   	pop    esi
c001ba9b:	5f                   	pop    edi
c001ba9c:	5d                   	pop    ebp
c001ba9d:	c3                   	ret    

c001ba9e <installISRHandler(int, void (*)(regs*, void*), void*)>:
c001ba9e:	56                   	push   esi
c001ba9f:	31 c0                	xor    eax,eax
c001baa1:	53                   	push   ebx
c001baa2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001baa6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001baaa:	89 ca                	mov    edx,ecx
c001baac:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bab0:	c1 e2 04             	shl    edx,0x4
c001bab3:	83 bc 82 20 df 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffc20e0],0x0
c001babb:	74 17                	je     c001bad4 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001babd:	83 c0 01             	add    eax,0x1
c001bac0:	83 f8 04             	cmp    eax,0x4
c001bac3:	75 ee                	jne    c001bab3 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001bac5:	c7 44 24 0c 30 23 03 c0 	mov    DWORD PTR [esp+0xc],0xc0032330
c001bacd:	5b                   	pop    ebx
c001bace:	5e                   	pop    esi
c001bacf:	e9 16 4a 00 00       	jmp    c00204ea <KePanic(char const*)>
c001bad4:	8d 04 88             	lea    eax,[eax+ecx*4]
c001bad7:	89 1c 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],ebx
c001bade:	89 34 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],esi
c001bae5:	5b                   	pop    ebx
c001bae6:	5e                   	pop    esi
c001bae7:	c3                   	ret    

c001bae8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001bae8:	57                   	push   edi
c001bae9:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001baef:	56                   	push   esi
c001baf0:	53                   	push   ebx
c001baf1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001baf5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001baf9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bb00:	74 54                	je     c001bb56 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c001bb02:	89 c7                	mov    edi,eax
c001bb04:	84 c0                	test   al,al
c001bb06:	74 1d                	je     c001bb25 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c001bb08:	83 fe 0f             	cmp    esi,0xf
c001bb0b:	0f 8f d5 00 00 00    	jg     c001bbe6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c001bb11:	0f b6 b6 68 3f 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffcc098]
c001bb18:	0f b7 bc 36 c0 f6 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffc0940]
c001bb20:	d1 ef                	shr    edi,1
c001bb22:	83 e7 01             	and    edi,0x1
c001bb25:	83 ec 08             	sub    esp,0x8
c001bb28:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001bb2d:	31 db                	xor    ebx,ebx
c001bb2f:	50                   	push   eax
c001bb30:	68 3d 23 03 c0       	push   0xc003233d
c001bb35:	e8 97 d9 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001bb3a:	83 c4 10             	add    esp,0x10
c001bb3d:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001bb42:	85 c0                	test   eax,eax
c001bb44:	7f 55                	jg     c001bb9b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c001bb46:	83 ec 0c             	sub    esp,0xc
c001bb49:	68 54 23 03 c0       	push   0xc0032354
c001bb4e:	e8 97 49 00 00       	call   c00204ea <KePanic(char const*)>
c001bb53:	83 c4 10             	add    esp,0x10
c001bb56:	8d 7e 20             	lea    edi,[esi+0x20]
c001bb59:	89 f8                	mov    eax,edi
c001bb5b:	31 d2                	xor    edx,edx
c001bb5d:	c1 e0 04             	shl    eax,0x4
c001bb60:	8b 8c 90 20 df 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffc20e0]
c001bb67:	85 c9                	test   ecx,ecx
c001bb69:	0f 84 8e 00 00 00    	je     c001bbfd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c001bb6f:	83 c2 01             	add    edx,0x1
c001bb72:	83 fa 04             	cmp    edx,0x4
c001bb75:	75 e9                	jne    c001bb60 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001bb77:	83 ec 0c             	sub    esp,0xc
c001bb7a:	68 a8 23 03 c0       	push   0xc00323a8
c001bb7f:	e8 66 49 00 00       	call   c00204ea <KePanic(char const*)>
c001bb84:	83 c4 10             	add    esp,0x10
c001bb87:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb8c:	5b                   	pop    ebx
c001bb8d:	5e                   	pop    esi
c001bb8e:	5f                   	pop    edi
c001bb8f:	c3                   	ret    
c001bb90:	83 c3 01             	add    ebx,0x1
c001bb93:	39 1d c0 0b 04 c0    	cmp    DWORD PTR ds:0xc0040bc0,ebx
c001bb99:	7e ab                	jle    c001bb46 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c001bb9b:	83 ec 08             	sub    esp,0x8
c001bb9e:	8b 04 9d e0 0b 04 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffbf420]
c001bba5:	56                   	push   esi
c001bba6:	50                   	push   eax
c001bba7:	e8 50 21 01 00       	call   c002dcfc <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001bbac:	83 c4 10             	add    esp,0x10
c001bbaf:	84 c0                	test   al,al
c001bbb1:	74 dd                	je     c001bb90 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c001bbb3:	83 ec 04             	sub    esp,0x4
c001bbb6:	89 f8                	mov    eax,edi
c001bbb8:	8b 1c 9d e0 0b 04 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffbf420]
c001bbbf:	0f b6 f8             	movzx  edi,al
c001bbc2:	57                   	push   edi
c001bbc3:	8d 7e 20             	lea    edi,[esi+0x20]
c001bbc6:	6a 00                	push   0x0
c001bbc8:	89 f8                	mov    eax,edi
c001bbca:	0f b6 c0             	movzx  eax,al
c001bbcd:	50                   	push   eax
c001bbce:	89 f0                	mov    eax,esi
c001bbd0:	6a 00                	push   0x0
c001bbd2:	0f b6 c0             	movzx  eax,al
c001bbd5:	6a 00                	push   0x0
c001bbd7:	50                   	push   eax
c001bbd8:	53                   	push   ebx
c001bbd9:	e8 8a 22 01 00       	call   c002de68 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001bbde:	83 c4 20             	add    esp,0x20
c001bbe1:	e9 73 ff ff ff       	jmp    c001bb59 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c001bbe6:	83 ec 0c             	sub    esp,0xc
c001bbe9:	31 ff                	xor    edi,edi
c001bbeb:	68 70 23 03 c0       	push   0xc0032370
c001bbf0:	e8 f5 48 00 00       	call   c00204ea <KePanic(char const*)>
c001bbf5:	83 c4 10             	add    esp,0x10
c001bbf8:	e9 28 ff ff ff       	jmp    c001bb25 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c001bbfd:	8d 04 ba             	lea    eax,[edx+edi*4]
c001bc00:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bc04:	89 14 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],edx
c001bc0b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bc0f:	5b                   	pop    ebx
c001bc10:	89 14 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],edx
c001bc17:	89 f0                	mov    eax,esi
c001bc19:	5e                   	pop    esi
c001bc1a:	5f                   	pop    edi
c001bc1b:	c3                   	ret    

c001bc1c <uninstallISRHandler(int, void (*)(regs*, void*))>:
c001bc1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc20:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bc24:	c1 e0 04             	shl    eax,0x4
c001bc27:	8d 50 10             	lea    edx,[eax+0x10]
c001bc2a:	39 88 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ecx
c001bc30:	74 08                	je     c001bc3a <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001bc32:	83 c0 04             	add    eax,0x4
c001bc35:	39 d0                	cmp    eax,edx
c001bc37:	75 f1                	jne    c001bc2a <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001bc39:	c3                   	ret    
c001bc3a:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bc44:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001bc4e:	eb e2                	jmp    c001bc32 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001bc50 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001bc50:	53                   	push   ebx
c001bc51:	83 ec 08             	sub    esp,0x8
c001bc54:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bc58:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bc5d:	74 0e                	je     c001bc6d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001bc5f:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001bc64:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c001bc6b:	75 37                	jne    c001bca4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c001bc6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc71:	83 c0 20             	add    eax,0x20
c001bc74:	c1 e0 04             	shl    eax,0x4
c001bc77:	8d 50 10             	lea    edx,[eax+0x10]
c001bc7a:	39 98 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ebx
c001bc80:	74 0c                	je     c001bc8e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c001bc82:	83 c0 04             	add    eax,0x4
c001bc85:	39 d0                	cmp    eax,edx
c001bc87:	75 f1                	jne    c001bc7a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c001bc89:	83 c4 08             	add    esp,0x8
c001bc8c:	5b                   	pop    ebx
c001bc8d:	c3                   	ret    
c001bc8e:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bc98:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001bca2:	eb de                	jmp    c001bc82 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c001bca4:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001bca9:	7f 11                	jg     c001bcbc <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c001bcab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcaf:	0f b6 80 68 3f 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcc098]
c001bcb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bcba:	eb b1                	jmp    c001bc6d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001bcbc:	83 ec 0c             	sub    esp,0xc
c001bcbf:	68 61 23 03 c0       	push   0xc0032361
c001bcc4:	e8 21 48 00 00       	call   c00204ea <KePanic(char const*)>
c001bcc9:	83 c4 10             	add    esp,0x10
c001bccc:	eb 9f                	jmp    c001bc6d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c001bcce <setupINTS()>:
c001bcce:	31 c0                	xor    eax,eax
c001bcd0:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bcda:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001bce4:	c7 80 24 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20dc],0x0
c001bcee:	c7 80 24 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30dc],0x0
c001bcf8:	c7 80 28 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20d8],0x0
c001bd02:	c7 80 28 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30d8],0x0
c001bd0c:	c7 80 2c df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20d4],0x0
c001bd16:	c7 80 2c cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30d4],0x0
c001bd20:	83 c0 10             	add    eax,0x10
c001bd23:	3d 00 10 00 00       	cmp    eax,0x1000
c001bd28:	75 a6                	jne    c001bcd0 <setupINTS()+0x2>
c001bd2a:	c3                   	ret    

c001bd2b <convertLegacyIRQNumber(int)>:
c001bd2b:	83 ec 0c             	sub    esp,0xc
c001bd2e:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001bd34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd38:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bd3f:	74 0c                	je     c001bd4d <convertLegacyIRQNumber(int)+0x22>
c001bd41:	83 f8 0f             	cmp    eax,0xf
c001bd44:	7f 0b                	jg     c001bd51 <convertLegacyIRQNumber(int)+0x26>
c001bd46:	0f b6 80 68 3f 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcc098]
c001bd4d:	83 c4 0c             	add    esp,0xc
c001bd50:	c3                   	ret    
c001bd51:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bd55:	83 ec 0c             	sub    esp,0xc
c001bd58:	68 70 23 03 c0       	push   0xc0032370
c001bd5d:	e8 88 47 00 00       	call   c00204ea <KePanic(char const*)>
c001bd62:	83 c4 10             	add    esp,0x10
c001bd65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd69:	83 c4 0c             	add    esp,0xc
c001bd6c:	c3                   	ret    
c001bd6d:	90                   	nop

c001bd6e <startGUI(void*)>:
c001bd6e:	55                   	push   ebp
c001bd6f:	89 e5                	mov    ebp,esp
c001bd71:	53                   	push   ebx
c001bd72:	83 ec 04             	sub    esp,0x4
c001bd75:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bd7a:	83 e8 01             	sub    eax,0x1
c001bd7d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bd82:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bd87:	85 c0                	test   eax,eax
c001bd89:	75 01                	jne    c001bd8c <startGUI(void*)+0x1e>
c001bd8b:	fb                   	sti    
c001bd8c:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bd92:	83 ec 08             	sub    esp,0x8
c001bd95:	6a 01                	push   0x1
c001bd97:	68 cd 23 03 c0       	push   0xc00323cd
c001bd9c:	e8 dc 8c 00 00       	call   c0024a7d <Thr::loadDLL(char const*, bool)>
c001bda1:	83 c4 10             	add    esp,0x10
c001bda4:	83 ec 08             	sub    esp,0x8
c001bda7:	53                   	push   ebx
c001bda8:	50                   	push   eax
c001bda9:	e8 21 8f 00 00       	call   c0024ccf <Thr::executeDLL(unsigned long, void*)>
c001bdae:	83 c4 10             	add    esp,0x10
c001bdb1:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bdb7:	83 ec 08             	sub    esp,0x8
c001bdba:	6a 01                	push   0x1
c001bdbc:	68 e7 23 03 c0       	push   0xc00323e7
c001bdc1:	e8 b7 8c 00 00       	call   c0024a7d <Thr::loadDLL(char const*, bool)>
c001bdc6:	83 c4 10             	add    esp,0x10
c001bdc9:	83 ec 08             	sub    esp,0x8
c001bdcc:	53                   	push   ebx
c001bdcd:	50                   	push   eax
c001bdce:	e8 fc 8e 00 00       	call   c0024ccf <Thr::executeDLL(unsigned long, void*)>
c001bdd3:	83 c4 10             	add    esp,0x10
c001bdd6:	eb fe                	jmp    c001bdd6 <startGUI(void*)+0x68>

c001bdd8 <startGUIVESA(void*)>:
c001bdd8:	55                   	push   ebp
c001bdd9:	89 e5                	mov    ebp,esp
c001bddb:	53                   	push   ebx
c001bddc:	83 ec 04             	sub    esp,0x4
c001bddf:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bde4:	83 e8 01             	sub    eax,0x1
c001bde7:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bdec:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bdf1:	85 c0                	test   eax,eax
c001bdf3:	75 01                	jne    c001bdf6 <startGUIVESA(void*)+0x1e>
c001bdf5:	fb                   	sti    
c001bdf6:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bdfc:	83 ec 08             	sub    esp,0x8
c001bdff:	6a 01                	push   0x1
c001be01:	68 05 24 03 c0       	push   0xc0032405
c001be06:	e8 72 8c 00 00       	call   c0024a7d <Thr::loadDLL(char const*, bool)>
c001be0b:	83 c4 10             	add    esp,0x10
c001be0e:	83 ec 08             	sub    esp,0x8
c001be11:	53                   	push   ebx
c001be12:	50                   	push   eax
c001be13:	e8 b7 8e 00 00       	call   c0024ccf <Thr::executeDLL(unsigned long, void*)>
c001be18:	83 c4 10             	add    esp,0x10
c001be1b:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001be21:	83 ec 08             	sub    esp,0x8
c001be24:	6a 01                	push   0x1
c001be26:	68 e7 23 03 c0       	push   0xc00323e7
c001be2b:	e8 4d 8c 00 00       	call   c0024a7d <Thr::loadDLL(char const*, bool)>
c001be30:	83 c4 10             	add    esp,0x10
c001be33:	83 ec 08             	sub    esp,0x8
c001be36:	53                   	push   ebx
c001be37:	50                   	push   eax
c001be38:	e8 92 8e 00 00       	call   c0024ccf <Thr::executeDLL(unsigned long, void*)>
c001be3d:	83 c4 10             	add    esp,0x10
c001be40:	eb fe                	jmp    c001be40 <startGUIVESA(void*)+0x68>

c001be42 <sendKeyToTerminal(unsigned char)>:
c001be42:	55                   	push   ebp
c001be43:	89 e5                	mov    ebp,esp
c001be45:	83 ec 28             	sub    esp,0x28
c001be48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be4b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001be4e:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c001be53:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001be57:	83 ec 08             	sub    esp,0x8
c001be5a:	52                   	push   edx
c001be5b:	50                   	push   eax
c001be5c:	e8 e1 ba ff ff       	call   c0017942 <VgaText::receiveKey(unsigned char)>
c001be61:	83 c4 10             	add    esp,0x10
c001be64:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001be68:	83 f8 0a             	cmp    eax,0xa
c001be6b:	74 16                	je     c001be83 <sendKeyToTerminal(unsigned char)+0x41>
c001be6d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001be71:	83 f8 03             	cmp    eax,0x3
c001be74:	74 0d                	je     c001be83 <sendKeyToTerminal(unsigned char)+0x41>
c001be76:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001be7a:	83 f8 1c             	cmp    eax,0x1c
c001be7d:	0f 85 97 00 00 00    	jne    c001bf1a <sendKeyToTerminal(unsigned char)+0xd8>
c001be83:	fa                   	cli    
c001be84:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001be89:	83 c0 01             	add    eax,0x1
c001be8c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001be91:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001be96:	83 c0 01             	add    eax,0x1
c001be99:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001be9e:	a1 20 ef 03 c0       	mov    eax,ds:0xc003ef20
c001bea3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bea6:	c7 05 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003ef20,0x0
c001beb0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001beb4:	74 1f                	je     c001bed5 <sendKeyToTerminal(unsigned char)+0x93>
c001beb6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001beb9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bebc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bebf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bec2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bec5:	83 ec 0c             	sub    esp,0xc
c001bec8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001becb:	e8 28 99 00 00       	call   c00257f8 <unblockTask(ThreadControlBlock*)>
c001bed0:	83 c4 10             	add    esp,0x10
c001bed3:	eb db                	jmp    c001beb0 <sendKeyToTerminal(unsigned char)+0x6e>
c001bed5:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001beda:	83 e8 01             	sub    eax,0x1
c001bedd:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bee2:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bee7:	85 c0                	test   eax,eax
c001bee9:	75 18                	jne    c001bf03 <sendKeyToTerminal(unsigned char)+0xc1>
c001beeb:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c001bef0:	85 c0                	test   eax,eax
c001bef2:	74 0f                	je     c001bf03 <sendKeyToTerminal(unsigned char)+0xc1>
c001bef4:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001befe:	e8 fd 95 00 00       	call   c0025500 <schedule()>
c001bf03:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bf08:	83 e8 01             	sub    eax,0x1
c001bf0b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bf10:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bf15:	85 c0                	test   eax,eax
c001bf17:	75 01                	jne    c001bf1a <sendKeyToTerminal(unsigned char)+0xd8>
c001bf19:	fb                   	sti    
c001bf1a:	90                   	nop
c001bf1b:	c9                   	leave  
c001bf1c:	c3                   	ret    

c001bf1d <sendKeyboardToken(KeyboardToken)>:
c001bf1d:	55                   	push   ebp
c001bf1e:	89 e5                	mov    ebp,esp
c001bf20:	83 ec 18             	sub    esp,0x18
c001bf23:	e8 12 46 00 00       	call   c002053a <KeUserIOReceived()>
c001bf28:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001bf2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf2e:	0f b7 c0             	movzx  eax,ax
c001bf31:	83 f2 01             	xor    edx,0x1
c001bf34:	88 90 40 ef 03 c0    	mov    BYTE PTR [eax-0x3ffc10c0],dl
c001bf3a:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001bf3f:	85 c0                	test   eax,eax
c001bf41:	74 24                	je     c001bf67 <sendKeyboardToken(KeyboardToken)+0x4a>
c001bf43:	8b 0d 28 ef 03 c0    	mov    ecx,DWORD PTR ds:0xc003ef28
c001bf49:	83 ec 04             	sub    esp,0x4
c001bf4c:	68 40 ef 03 c0       	push   0xc003ef40
c001bf51:	83 ec 08             	sub    esp,0x8
c001bf54:	89 e2                	mov    edx,esp
c001bf56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf59:	89 02                	mov    DWORD PTR [edx],eax
c001bf5b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bf5e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001bf62:	ff d1                	call   ecx
c001bf64:	83 c4 10             	add    esp,0x10
c001bf67:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001bf6b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001bf6e:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bf73:	0f b6 d2             	movzx  edx,dl
c001bf76:	0f b6 c0             	movzx  eax,al
c001bf79:	39 c2                	cmp    edx,eax
c001bf7b:	74 1c                	je     c001bf99 <sendKeyboardToken(KeyboardToken)+0x7c>
c001bf7d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001bf80:	a2 48 f3 03 c0       	mov    ds:0xc003f348,al
c001bf85:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bf8a:	0f b6 c0             	movzx  eax,al
c001bf8d:	83 ec 0c             	sub    esp,0xc
c001bf90:	50                   	push   eax
c001bf91:	e8 f8 b0 ff ff       	call   c001708e <setTerminalScrollLock(bool)>
c001bf96:	83 c4 10             	add    esp,0x10
c001bf99:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001bf9c:	0f b6 c0             	movzx  eax,al
c001bf9f:	85 c0                	test   eax,eax
c001bfa1:	0f 84 da 00 00 00    	je     c001c081 <sendKeyboardToken(KeyboardToken)+0x164>
c001bfa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfaa:	0f b7 c0             	movzx  eax,ax
c001bfad:	3d 18 03 00 00       	cmp    eax,0x318
c001bfb2:	75 06                	jne    c001bfba <sendKeyboardToken(KeyboardToken)+0x9d>
c001bfb4:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001bfba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfbd:	0f b7 c0             	movzx  eax,ax
c001bfc0:	3d 19 03 00 00       	cmp    eax,0x319
c001bfc5:	75 06                	jne    c001bfcd <sendKeyboardToken(KeyboardToken)+0xb0>
c001bfc7:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001bfcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfd0:	0f b7 c0             	movzx  eax,ax
c001bfd3:	3d 1a 03 00 00       	cmp    eax,0x31a
c001bfd8:	75 06                	jne    c001bfe0 <sendKeyboardToken(KeyboardToken)+0xc3>
c001bfda:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001bfe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfe3:	0f b7 c0             	movzx  eax,ax
c001bfe6:	3d 1b 03 00 00       	cmp    eax,0x31b
c001bfeb:	75 06                	jne    c001bff3 <sendKeyboardToken(KeyboardToken)+0xd6>
c001bfed:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001bff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bff6:	0f b7 c0             	movzx  eax,ax
c001bff9:	3d 1c 03 00 00       	cmp    eax,0x31c
c001bffe:	75 06                	jne    c001c006 <sendKeyboardToken(KeyboardToken)+0xe9>
c001c000:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001c006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c009:	0f b7 c0             	movzx  eax,ax
c001c00c:	3d 1d 03 00 00       	cmp    eax,0x31d
c001c011:	75 06                	jne    c001c019 <sendKeyboardToken(KeyboardToken)+0xfc>
c001c013:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001c019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c01c:	0f b7 c0             	movzx  eax,ax
c001c01f:	3d 1e 03 00 00       	cmp    eax,0x31e
c001c024:	75 06                	jne    c001c02c <sendKeyboardToken(KeyboardToken)+0x10f>
c001c026:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001c02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c02f:	0f b7 c0             	movzx  eax,ax
c001c032:	3d 1f 03 00 00       	cmp    eax,0x31f
c001c037:	75 06                	jne    c001c03f <sendKeyboardToken(KeyboardToken)+0x122>
c001c039:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001c03f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c042:	0f b7 c0             	movzx  eax,ax
c001c045:	3d 20 03 00 00       	cmp    eax,0x320
c001c04a:	75 06                	jne    c001c052 <sendKeyboardToken(KeyboardToken)+0x135>
c001c04c:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001c052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c055:	0f b7 c0             	movzx  eax,ax
c001c058:	3d 21 03 00 00       	cmp    eax,0x321
c001c05d:	75 06                	jne    c001c065 <sendKeyboardToken(KeyboardToken)+0x148>
c001c05f:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001c065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c068:	0f b7 c0             	movzx  eax,ax
c001c06b:	3d 22 03 00 00       	cmp    eax,0x322
c001c070:	0f 85 f1 00 00 00    	jne    c001c167 <sendKeyboardToken(KeyboardToken)+0x24a>
c001c076:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001c07c:	e9 e6 00 00 00       	jmp    c001c167 <sendKeyboardToken(KeyboardToken)+0x24a>
c001c081:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c084:	0f b7 c0             	movzx  eax,ax
c001c087:	3d 18 03 00 00       	cmp    eax,0x318
c001c08c:	75 0a                	jne    c001c098 <sendKeyboardToken(KeyboardToken)+0x17b>
c001c08e:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001c094:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c098:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c09b:	0f b7 c0             	movzx  eax,ax
c001c09e:	3d 19 03 00 00       	cmp    eax,0x319
c001c0a3:	75 0a                	jne    c001c0af <sendKeyboardToken(KeyboardToken)+0x192>
c001c0a5:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001c0ab:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c0af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0b2:	0f b7 c0             	movzx  eax,ax
c001c0b5:	3d 1a 03 00 00       	cmp    eax,0x31a
c001c0ba:	75 0a                	jne    c001c0c6 <sendKeyboardToken(KeyboardToken)+0x1a9>
c001c0bc:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001c0c2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c0c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0c9:	0f b7 c0             	movzx  eax,ax
c001c0cc:	3d 1b 03 00 00       	cmp    eax,0x31b
c001c0d1:	75 0a                	jne    c001c0dd <sendKeyboardToken(KeyboardToken)+0x1c0>
c001c0d3:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001c0d9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c0dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0e0:	0f b7 c0             	movzx  eax,ax
c001c0e3:	3d 1c 03 00 00       	cmp    eax,0x31c
c001c0e8:	75 0a                	jne    c001c0f4 <sendKeyboardToken(KeyboardToken)+0x1d7>
c001c0ea:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001c0f0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c0f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0f7:	0f b7 c0             	movzx  eax,ax
c001c0fa:	3d 1d 03 00 00       	cmp    eax,0x31d
c001c0ff:	75 0a                	jne    c001c10b <sendKeyboardToken(KeyboardToken)+0x1ee>
c001c101:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001c107:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c10b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c10e:	0f b7 c0             	movzx  eax,ax
c001c111:	3d 1e 03 00 00       	cmp    eax,0x31e
c001c116:	75 0a                	jne    c001c122 <sendKeyboardToken(KeyboardToken)+0x205>
c001c118:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001c11e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c122:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c125:	0f b7 c0             	movzx  eax,ax
c001c128:	3d 1f 03 00 00       	cmp    eax,0x31f
c001c12d:	75 0a                	jne    c001c139 <sendKeyboardToken(KeyboardToken)+0x21c>
c001c12f:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001c135:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c139:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c13c:	0f b7 c0             	movzx  eax,ax
c001c13f:	3d 20 03 00 00       	cmp    eax,0x320
c001c144:	75 0a                	jne    c001c150 <sendKeyboardToken(KeyboardToken)+0x233>
c001c146:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001c14c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c150:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c153:	0f b7 c0             	movzx  eax,ax
c001c156:	3d 21 03 00 00       	cmp    eax,0x321
c001c15b:	75 0a                	jne    c001c167 <sendKeyboardToken(KeyboardToken)+0x24a>
c001c15d:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001c163:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c167:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c16a:	0f b7 c0             	movzx  eax,ax
c001c16d:	3d 00 02 00 00       	cmp    eax,0x200
c001c172:	75 2f                	jne    c001c1a3 <sendKeyboardToken(KeyboardToken)+0x286>
c001c174:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001c179:	83 f0 01             	xor    eax,0x1
c001c17c:	0f b6 c0             	movzx  eax,al
c001c17f:	85 c0                	test   eax,eax
c001c181:	74 20                	je     c001c1a3 <sendKeyboardToken(KeyboardToken)+0x286>
c001c183:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001c188:	6a 01                	push   0x1
c001c18a:	6a 00                	push   0x0
c001c18c:	68 6e bd 01 c0       	push   0xc001bd6e
c001c191:	50                   	push   eax
c001c192:	e8 19 91 00 00       	call   c00252b0 <Process::createThread(void (*)(void*), void*, int)>
c001c197:	83 c4 10             	add    esp,0x10
c001c19a:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001c1a1:	eb 3a                	jmp    c001c1dd <sendKeyboardToken(KeyboardToken)+0x2c0>
c001c1a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1a6:	0f b7 c0             	movzx  eax,ax
c001c1a9:	3d 01 02 00 00       	cmp    eax,0x201
c001c1ae:	75 2d                	jne    c001c1dd <sendKeyboardToken(KeyboardToken)+0x2c0>
c001c1b0:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001c1b5:	83 f0 01             	xor    eax,0x1
c001c1b8:	0f b6 c0             	movzx  eax,al
c001c1bb:	85 c0                	test   eax,eax
c001c1bd:	74 1e                	je     c001c1dd <sendKeyboardToken(KeyboardToken)+0x2c0>
c001c1bf:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001c1c4:	6a 01                	push   0x1
c001c1c6:	6a 00                	push   0x0
c001c1c8:	68 d8 bd 01 c0       	push   0xc001bdd8
c001c1cd:	50                   	push   eax
c001c1ce:	e8 dd 90 00 00       	call   c00252b0 <Process::createThread(void (*)(void*), void*, int)>
c001c1d3:	83 c4 10             	add    esp,0x10
c001c1d6:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001c1dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1e0:	0f b7 c0             	movzx  eax,ax
c001c1e3:	3d 25 03 00 00       	cmp    eax,0x325
c001c1e8:	75 06                	jne    c001c1f0 <sendKeyboardToken(KeyboardToken)+0x2d3>
c001c1ea:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001c1f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1f3:	0f b7 c0             	movzx  eax,ax
c001c1f6:	3d 24 03 00 00       	cmp    eax,0x324
c001c1fb:	75 06                	jne    c001c203 <sendKeyboardToken(KeyboardToken)+0x2e6>
c001c1fd:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001c203:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c206:	0f b7 c0             	movzx  eax,ax
c001c209:	3d 23 03 00 00       	cmp    eax,0x323
c001c20e:	75 06                	jne    c001c216 <sendKeyboardToken(KeyboardToken)+0x2f9>
c001c210:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001c216:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c219:	0f b7 c0             	movzx  eax,ax
c001c21c:	3d 26 03 00 00       	cmp    eax,0x326
c001c221:	75 06                	jne    c001c229 <sendKeyboardToken(KeyboardToken)+0x30c>
c001c223:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001c229:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c22c:	0f b7 c0             	movzx  eax,ax
c001c22f:	3d 27 03 00 00       	cmp    eax,0x327
c001c234:	75 06                	jne    c001c23c <sendKeyboardToken(KeyboardToken)+0x31f>
c001c236:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001c23c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c23f:	0f b7 c0             	movzx  eax,ax
c001c242:	3d 22 03 00 00       	cmp    eax,0x322
c001c247:	75 06                	jne    c001c24f <sendKeyboardToken(KeyboardToken)+0x332>
c001c249:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001c24f:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001c253:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c256:	83 f0 01             	xor    eax,0x1
c001c259:	0f b6 c0             	movzx  eax,al
c001c25c:	85 c0                	test   eax,eax
c001c25e:	74 7c                	je     c001c2dc <sendKeyboardToken(KeyboardToken)+0x3bf>
c001c260:	a0 41 f0 03 c0       	mov    al,ds:0xc003f041
c001c265:	0f b6 c0             	movzx  eax,al
c001c268:	85 c0                	test   eax,eax
c001c26a:	74 43                	je     c001c2af <sendKeyboardToken(KeyboardToken)+0x392>
c001c26c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c270:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001c274:	85 c0                	test   eax,eax
c001c276:	74 2b                	je     c001c2a3 <sendKeyboardToken(KeyboardToken)+0x386>
c001c278:	8b 15 44 f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f344
c001c27e:	89 d0                	mov    eax,edx
c001c280:	c1 e0 02             	shl    eax,0x2
c001c283:	01 d0                	add    eax,edx
c001c285:	01 c0                	add    eax,eax
c001c287:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001c28c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c28f:	0f b7 c0             	movzx  eax,ax
c001c292:	8d 50 d0             	lea    edx,[eax-0x30]
c001c295:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c29a:	01 d0                	add    eax,edx
c001c29c:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001c2a1:	eb 71                	jmp    c001c314 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c2a3:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c2ad:	eb 65                	jmp    c001c314 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c2af:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c2b4:	85 c0                	test   eax,eax
c001c2b6:	74 18                	je     c001c2d0 <sendKeyboardToken(KeyboardToken)+0x3b3>
c001c2b8:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c2bd:	0f b6 c0             	movzx  eax,al
c001c2c0:	83 ec 0c             	sub    esp,0xc
c001c2c3:	50                   	push   eax
c001c2c4:	e8 79 fb ff ff       	call   c001be42 <sendKeyToTerminal(unsigned char)>
c001c2c9:	83 c4 10             	add    esp,0x10
c001c2cc:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c2d0:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c2da:	eb 38                	jmp    c001c314 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2df:	0f b7 c0             	movzx  eax,ax
c001c2e2:	3d 01 01 00 00       	cmp    eax,0x101
c001c2e7:	75 2b                	jne    c001c314 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c2e9:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c2ee:	85 c0                	test   eax,eax
c001c2f0:	74 18                	je     c001c30a <sendKeyboardToken(KeyboardToken)+0x3ed>
c001c2f2:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c2f7:	0f b6 c0             	movzx  eax,al
c001c2fa:	83 ec 0c             	sub    esp,0xc
c001c2fd:	50                   	push   eax
c001c2fe:	e8 3f fb ff ff       	call   c001be42 <sendKeyToTerminal(unsigned char)>
c001c303:	83 c4 10             	add    esp,0x10
c001c306:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c30a:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c314:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c317:	83 f0 01             	xor    eax,0x1
c001c31a:	0f b6 c0             	movzx  eax,al
c001c31d:	85 c0                	test   eax,eax
c001c31f:	74 5a                	je     c001c37b <sendKeyboardToken(KeyboardToken)+0x45e>
c001c321:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c324:	83 f0 01             	xor    eax,0x1
c001c327:	0f b6 c0             	movzx  eax,al
c001c32a:	85 c0                	test   eax,eax
c001c32c:	74 4d                	je     c001c37b <sendKeyboardToken(KeyboardToken)+0x45e>
c001c32e:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c333:	83 f0 01             	xor    eax,0x1
c001c336:	0f b6 c0             	movzx  eax,al
c001c339:	85 c0                	test   eax,eax
c001c33b:	74 3e                	je     c001c37b <sendKeyboardToken(KeyboardToken)+0x45e>
c001c33d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c340:	0f b7 c0             	movzx  eax,ax
c001c343:	83 f8 1f             	cmp    eax,0x1f
c001c346:	76 0b                	jbe    c001c353 <sendKeyboardToken(KeyboardToken)+0x436>
c001c348:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c34b:	0f b7 c0             	movzx  eax,ax
c001c34e:	83 f8 7e             	cmp    eax,0x7e
c001c351:	76 16                	jbe    c001c369 <sendKeyboardToken(KeyboardToken)+0x44c>
c001c353:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c356:	0f b7 c0             	movzx  eax,ax
c001c359:	83 f8 0a             	cmp    eax,0xa
c001c35c:	74 0b                	je     c001c369 <sendKeyboardToken(KeyboardToken)+0x44c>
c001c35e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c361:	0f b7 c0             	movzx  eax,ax
c001c364:	83 f8 08             	cmp    eax,0x8
c001c367:	75 12                	jne    c001c37b <sendKeyboardToken(KeyboardToken)+0x45e>
c001c369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c36c:	0f b6 c0             	movzx  eax,al
c001c36f:	83 ec 0c             	sub    esp,0xc
c001c372:	50                   	push   eax
c001c373:	e8 ca fa ff ff       	call   c001be42 <sendKeyToTerminal(unsigned char)>
c001c378:	83 c4 10             	add    esp,0x10
c001c37b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c37e:	83 f0 01             	xor    eax,0x1
c001c381:	0f b6 c0             	movzx  eax,al
c001c384:	85 c0                	test   eax,eax
c001c386:	74 5d                	je     c001c3e5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c388:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c38b:	83 f0 01             	xor    eax,0x1
c001c38e:	0f b6 c0             	movzx  eax,al
c001c391:	85 c0                	test   eax,eax
c001c393:	74 50                	je     c001c3e5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c395:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c39a:	0f b6 c0             	movzx  eax,al
c001c39d:	85 c0                	test   eax,eax
c001c39f:	74 44                	je     c001c3e5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c3a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c3a4:	0f b7 c0             	movzx  eax,ax
c001c3a7:	83 f8 3f             	cmp    eax,0x3f
c001c3aa:	76 39                	jbe    c001c3e5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c3ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c3af:	0f b7 c0             	movzx  eax,ax
c001c3b2:	83 f8 7f             	cmp    eax,0x7f
c001c3b5:	77 2e                	ja     c001c3e5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c3b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c3ba:	88 c2                	mov    dl,al
c001c3bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c3bf:	0f b7 c0             	movzx  eax,ax
c001c3c2:	83 f8 5f             	cmp    eax,0x5f
c001c3c5:	76 04                	jbe    c001c3cb <sendKeyboardToken(KeyboardToken)+0x4ae>
c001c3c7:	b0 20                	mov    al,0x20
c001c3c9:	eb 02                	jmp    c001c3cd <sendKeyboardToken(KeyboardToken)+0x4b0>
c001c3cb:	b0 00                	mov    al,0x0
c001c3cd:	89 d1                	mov    ecx,edx
c001c3cf:	29 c1                	sub    ecx,eax
c001c3d1:	89 c8                	mov    eax,ecx
c001c3d3:	83 e8 40             	sub    eax,0x40
c001c3d6:	0f b6 c0             	movzx  eax,al
c001c3d9:	83 ec 0c             	sub    esp,0xc
c001c3dc:	50                   	push   eax
c001c3dd:	e8 60 fa ff ff       	call   c001be42 <sendKeyToTerminal(unsigned char)>
c001c3e2:	83 c4 10             	add    esp,0x10
c001c3e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c3e8:	0f b7 c0             	movzx  eax,ax
c001c3eb:	3d 00 03 00 00       	cmp    eax,0x300
c001c3f0:	75 12                	jne    c001c404 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c3f2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c3f5:	83 f0 01             	xor    eax,0x1
c001c3f8:	0f b6 c0             	movzx  eax,al
c001c3fb:	85 c0                	test   eax,eax
c001c3fd:	74 05                	je     c001c404 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c3ff:	e8 8b ac ff ff       	call   c001708f <doTerminalCycle()>
c001c404:	90                   	nop
c001c405:	c9                   	leave  
c001c406:	c3                   	ret    

c001c407 <clearInternalKeybuffer(VgaText*)>:
c001c407:	55                   	push   ebp
c001c408:	89 e5                	mov    ebp,esp
c001c40a:	83 ec 08             	sub    esp,0x8
c001c40d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c410:	05 02 01 00 00       	add    eax,0x102
c001c415:	83 ec 0c             	sub    esp,0xc
c001c418:	50                   	push   eax
c001c419:	e8 52 41 fe ff       	call   c0000570 <strlen>
c001c41e:	83 c4 10             	add    esp,0x10
c001c421:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c424:	81 c2 02 01 00 00    	add    edx,0x102
c001c42a:	83 ec 04             	sub    esp,0x4
c001c42d:	50                   	push   eax
c001c42e:	6a 00                	push   0x0
c001c430:	52                   	push   edx
c001c431:	e8 ba 40 fe ff       	call   c00004f0 <memset>
c001c436:	83 c4 10             	add    esp,0x10
c001c439:	90                   	nop
c001c43a:	c9                   	leave  
c001c43b:	c3                   	ret    

c001c43c <readKeyboard(VgaText*, char*, unsigned long)>:
c001c43c:	55                   	push   ebp
c001c43d:	89 e5                	mov    ebp,esp
c001c43f:	83 ec 18             	sub    esp,0x18
c001c442:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001c447:	85 c0                	test   eax,eax
c001c449:	74 2a                	je     c001c475 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001c44b:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001c451:	8b 0d 28 ef 03 c0    	mov    ecx,DWORD PTR ds:0xc003ef28
c001c457:	83 ec 04             	sub    esp,0x4
c001c45a:	68 40 ef 03 c0       	push   0xc003ef40
c001c45f:	83 ec 08             	sub    esp,0x8
c001c462:	89 e2                	mov    edx,esp
c001c464:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001c467:	89 02                	mov    DWORD PTR [edx],eax
c001c469:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001c46c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001c470:	ff d1                	call   ecx
c001c472:	83 c4 10             	add    esp,0x10
c001c475:	fb                   	sti    
c001c476:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001c47d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c481:	0f 84 0d 01 00 00    	je     c001c594 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c001c487:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c48a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c490:	0f be c0             	movsx  eax,al
c001c493:	85 c0                	test   eax,eax
c001c495:	75 2c                	jne    c001c4c3 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c001c497:	fa                   	cli    
c001c498:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c49d:	83 c0 01             	add    eax,0x1
c001c4a0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c4a5:	e8 56 90 00 00       	call   c0025500 <schedule()>
c001c4aa:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c4af:	83 e8 01             	sub    eax,0x1
c001c4b2:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c4b7:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c4bc:	85 c0                	test   eax,eax
c001c4be:	75 c7                	jne    c001c487 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c4c0:	fb                   	sti    
c001c4c1:	eb c4                	jmp    c001c487 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c4c3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c4c6:	8d 50 01             	lea    edx,[eax+0x1]
c001c4c9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c4cc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c4cf:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c001c4d5:	88 10                	mov    BYTE PTR [eax],dl
c001c4d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c4da:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c4e0:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001c4e3:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c4e7:	83 f8 03             	cmp    eax,0x3
c001c4ea:	75 1e                	jne    c001c50a <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c001c4ec:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c4f1:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c4f6:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c4fc:	83 ec 08             	sub    esp,0x8
c001c4ff:	6a 02                	push   0x2
c001c501:	50                   	push   eax
c001c502:	e8 9c 48 00 00       	call   c0020da3 <KeRaiseSignal(SigHandlerBlock*, int)>
c001c507:	83 c4 10             	add    esp,0x10
c001c50a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c50e:	83 f8 1c             	cmp    eax,0x1c
c001c511:	75 1e                	jne    c001c531 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c001c513:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c518:	8b 00                	mov    eax,DWORD PTR [eax]
c001c51a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c51d:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c523:	83 ec 08             	sub    esp,0x8
c001c526:	6a 09                	push   0x9
c001c528:	50                   	push   eax
c001c529:	e8 75 48 00 00       	call   c0020da3 <KeRaiseSignal(SigHandlerBlock*, int)>
c001c52e:	83 c4 10             	add    esp,0x10
c001c531:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c534:	05 02 01 00 00       	add    eax,0x102
c001c539:	83 ec 0c             	sub    esp,0xc
c001c53c:	50                   	push   eax
c001c53d:	e8 2e 40 fe ff       	call   c0000570 <strlen>
c001c542:	83 c4 10             	add    esp,0x10
c001c545:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c548:	81 c2 02 01 00 00    	add    edx,0x102
c001c54e:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c551:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c554:	81 c2 02 01 00 00    	add    edx,0x102
c001c55a:	83 ec 04             	sub    esp,0x4
c001c55d:	50                   	push   eax
c001c55e:	51                   	push   ecx
c001c55f:	52                   	push   edx
c001c560:	e8 6b 3e fe ff       	call   c00003d0 <memmove>
c001c565:	83 c4 10             	add    esp,0x10
c001c568:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c001c56c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c001c570:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c574:	83 f8 0a             	cmp    eax,0xa
c001c577:	74 16                	je     c001c58f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c579:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c57d:	83 f8 03             	cmp    eax,0x3
c001c580:	74 0d                	je     c001c58f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c582:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c586:	83 f8 1c             	cmp    eax,0x1c
c001c589:	0f 85 ee fe ff ff    	jne    c001c47d <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c001c58f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c592:	eb 03                	jmp    c001c597 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c001c594:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c597:	c9                   	leave  
c001c598:	c3                   	ret    
c001c599:	90                   	nop

c001c59a <Keyboard::Keyboard(char const*)>:
c001c59a:	83 ec 0c             	sub    esp,0xc
c001c59d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5a1:	83 ec 08             	sub    esp,0x8
c001c5a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5a8:	50                   	push   eax
c001c5a9:	e8 06 f1 ff ff       	call   c001b6b4 <Device::Device(char const*)>
c001c5ae:	83 c4 10             	add    esp,0x10
c001c5b1:	ba 28 24 03 c0       	mov    edx,0xc0032428
c001c5b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5ba:	89 10                	mov    DWORD PTR [eax],edx
c001c5bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5c0:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001c5ca:	c6 05 24 ef 03 c0 01 	mov    BYTE PTR ds:0xc003ef24,0x1
c001c5d1:	90                   	nop
c001c5d2:	83 c4 0c             	add    esp,0xc
c001c5d5:	c3                   	ret    

c001c5d6 <Keyboard::~Keyboard()>:
c001c5d6:	83 ec 0c             	sub    esp,0xc
c001c5d9:	ba 28 24 03 c0       	mov    edx,0xc0032428
c001c5de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e2:	89 10                	mov    DWORD PTR [eax],edx
c001c5e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e8:	83 ec 0c             	sub    esp,0xc
c001c5eb:	50                   	push   eax
c001c5ec:	e8 63 ee ff ff       	call   c001b454 <Device::~Device()>
c001c5f1:	83 c4 10             	add    esp,0x10
c001c5f4:	90                   	nop
c001c5f5:	83 c4 0c             	add    esp,0xc
c001c5f8:	c3                   	ret    
c001c5f9:	90                   	nop

c001c5fa <Keyboard::~Keyboard()>:
c001c5fa:	83 ec 0c             	sub    esp,0xc
c001c5fd:	83 ec 0c             	sub    esp,0xc
c001c600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c604:	e8 cd ff ff ff       	call   c001c5d6 <Keyboard::~Keyboard()>
c001c609:	83 c4 10             	add    esp,0x10
c001c60c:	83 ec 08             	sub    esp,0x8
c001c60f:	68 5c 01 00 00       	push   0x15c
c001c614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c618:	e8 87 cd ff ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c001c61d:	83 c4 10             	add    esp,0x10
c001c620:	83 c4 0c             	add    esp,0xc
c001c623:	c3                   	ret    

c001c624 <LogicalDisk::close(int, int, void*)>:
c001c624:	83 c8 ff             	or     eax,0xffffffff
c001c627:	c3                   	ret    

c001c628 <LogicalDisk::~LogicalDisk()>:
c001c628:	83 ec 0c             	sub    esp,0xc
c001c62b:	ba a0 24 03 c0       	mov    edx,0xc00324a0
c001c630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c634:	89 10                	mov    DWORD PTR [eax],edx
c001c636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c63a:	83 ec 0c             	sub    esp,0xc
c001c63d:	50                   	push   eax
c001c63e:	e8 11 ee ff ff       	call   c001b454 <Device::~Device()>
c001c643:	83 c4 10             	add    esp,0x10
c001c646:	90                   	nop
c001c647:	83 c4 0c             	add    esp,0xc
c001c64a:	c3                   	ret    
c001c64b:	90                   	nop

c001c64c <LogicalDisk::~LogicalDisk()>:
c001c64c:	83 ec 0c             	sub    esp,0xc
c001c64f:	83 ec 0c             	sub    esp,0xc
c001c652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c656:	e8 cd ff ff ff       	call   c001c628 <LogicalDisk::~LogicalDisk()>
c001c65b:	83 c4 10             	add    esp,0x10
c001c65e:	83 ec 08             	sub    esp,0x8
c001c661:	68 78 01 00 00       	push   0x178
c001c666:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c66a:	e8 35 cd ff ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c001c66f:	83 c4 10             	add    esp,0x10
c001c672:	83 c4 0c             	add    esp,0xc
c001c675:	c3                   	ret    

c001c676 <LogicalDisk::open(int, int, void*)>:
c001c676:	83 ec 18             	sub    esp,0x18
c001c679:	68 54 24 03 c0       	push   0xc0032454
c001c67e:	e8 67 3e 00 00       	call   c00204ea <KePanic(char const*)>
c001c683:	83 c8 ff             	or     eax,0xffffffff
c001c686:	83 c4 1c             	add    esp,0x1c
c001c689:	c3                   	ret    

c001c68a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001c68a:	53                   	push   ebx
c001c68b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c68f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c693:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c697:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001c69d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001c6a3:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001c6a9:	77 10                	ja     c001c6bb <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001c6ab:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001c6b1:	89 d3                	mov    ebx,edx
c001c6b3:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001c6b9:	72 05                	jb     c001c6c0 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001c6bb:	83 c8 ff             	or     eax,0xffffffff
c001c6be:	89 c2                	mov    edx,eax
c001c6c0:	5b                   	pop    ebx
c001c6c1:	c3                   	ret    

c001c6c2 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001c6c2:	56                   	push   esi
c001c6c3:	83 c8 ff             	or     eax,0xffffffff
c001c6c6:	53                   	push   ebx
c001c6c7:	89 c2                	mov    edx,eax
c001c6c9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c6cd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001c6d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c6d5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c6db:	77 27                	ja     c001c704 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c6dd:	89 d8                	mov    eax,ebx
c001c6df:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001c6e5:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001c6eb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c6f0:	89 c2                	mov    edx,eax
c001c6f2:	73 10                	jae    c001c704 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c6f4:	89 c8                	mov    eax,ecx
c001c6f6:	89 da                	mov    edx,ebx
c001c6f8:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c6fe:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001c704:	5b                   	pop    ebx
c001c705:	5e                   	pop    esi
c001c706:	c3                   	ret    
c001c707:	90                   	nop

c001c708 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c708:	83 ec 1c             	sub    esp,0x1c
c001c70b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c70f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c713:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c717:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c71b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c71f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c722:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c726:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c72a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c72e:	83 ec 08             	sub    esp,0x8
c001c731:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c735:	50                   	push   eax
c001c736:	e8 79 ef ff ff       	call   c001b6b4 <Device::Device(char const*)>
c001c73b:	83 c4 10             	add    esp,0x10
c001c73e:	ba a0 24 03 c0       	mov    edx,0xc00324a0
c001c743:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c747:	89 10                	mov    DWORD PTR [eax],edx
c001c749:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c74d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c758:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c75f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c763:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c76a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c76e:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001c778:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c77c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c780:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c784:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001c78a:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001c790:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c794:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c797:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c79b:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001c7a1:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001c7a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7ab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c7af:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001c7b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7b9:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c7c3:	90                   	nop
c001c7c4:	83 c4 1c             	add    esp,0x1c
c001c7c7:	c3                   	ret    

c001c7c8 <LogicalDisk::assignDriveLetter()>:
c001c7c8:	55                   	push   ebp
c001c7c9:	57                   	push   edi
c001c7ca:	56                   	push   esi
c001c7cb:	53                   	push   ebx
c001c7cc:	83 ec 14             	sub    esp,0x14
c001c7cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c7d3:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001c7d9:	b0 41                	mov    al,0x41
c001c7db:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c001c7e1:	84 d2                	test   dl,dl
c001c7e3:	75 02                	jne    c001c7e7 <LogicalDisk::assignDriveLetter()+0x1f>
c001c7e5:	b0 43                	mov    al,0x43
c001c7e7:	8b 3d 60 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f360
c001c7ed:	0f b6 ca             	movzx  ecx,dl
c001c7f0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c7f4:	0f be e8             	movsx  ebp,al
c001c7f7:	8b 3d 64 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f364
c001c7fd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c801:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001c805:	3c 43                	cmp    al,0x43
c001c807:	75 10                	jne    c001c819 <LogicalDisk::assignDriveLetter()+0x51>
c001c809:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001c810:	75 5a                	jne    c001c86c <LogicalDisk::assignDriveLetter()+0xa4>
c001c812:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c817:	75 53                	jne    c001c86c <LogicalDisk::assignDriveLetter()+0xa4>
c001c819:	8d 75 bf             	lea    esi,[ebp-0x41]
c001c81c:	ba 01 00 00 00       	mov    edx,0x1
c001c821:	89 34 24             	mov    DWORD PTR [esp],esi
c001c824:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001c827:	d3 e2                	shl    edx,cl
c001c829:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c82d:	89 d7                	mov    edi,edx
c001c82f:	89 d6                	mov    esi,edx
c001c831:	c1 ff 1f             	sar    edi,0x1f
c001c834:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c001c838:	21 f9                	and    ecx,edi
c001c83a:	09 d1                	or     ecx,edx
c001c83c:	75 2e                	jne    c001c86c <LogicalDisk::assignDriveLetter()+0xa4>
c001c83e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c842:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c846:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001c84c:	09 f2                	or     edx,esi
c001c84e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c851:	89 15 60 f3 03 c0    	mov    DWORD PTR ds:0xc003f360,edx
c001c857:	89 1c b5 80 f3 03 c0 	mov    DWORD PTR [esi*4-0x3ffc0c80],ebx
c001c85e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c862:	09 fa                	or     edx,edi
c001c864:	89 15 64 f3 03 c0    	mov    DWORD PTR ds:0xc003f364,edx
c001c86a:	eb 0d                	jmp    c001c879 <LogicalDisk::assignDriveLetter()+0xb1>
c001c86c:	8d 50 01             	lea    edx,[eax+0x1]
c001c86f:	45                   	inc    ebp
c001c870:	88 d0                	mov    al,dl
c001c872:	80 fa 5b             	cmp    dl,0x5b
c001c875:	75 8e                	jne    c001c805 <LogicalDisk::assignDriveLetter()+0x3d>
c001c877:	31 c0                	xor    eax,eax
c001c879:	83 c4 14             	add    esp,0x14
c001c87c:	5b                   	pop    ebx
c001c87d:	5e                   	pop    esi
c001c87e:	5f                   	pop    edi
c001c87f:	5d                   	pop    ebp
c001c880:	c3                   	ret    
c001c881:	90                   	nop

c001c882 <LogicalDisk::mount()>:
c001c882:	56                   	push   esi
c001c883:	53                   	push   ebx
c001c884:	53                   	push   ebx
c001c885:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c889:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c001c88f:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c001c899:	85 db                	test   ebx,ebx
c001c89b:	74 27                	je     c001c8c4 <LogicalDisk::mount()+0x42>
c001c89d:	51                   	push   ecx
c001c89e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001c8a5:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c8a7:	83 e8 41             	sub    eax,0x41
c001c8aa:	50                   	push   eax
c001c8ab:	56                   	push   esi
c001c8ac:	53                   	push   ebx
c001c8ad:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c8b0:	83 c4 10             	add    esp,0x10
c001c8b3:	84 c0                	test   al,al
c001c8b5:	74 08                	je     c001c8bf <LogicalDisk::mount()+0x3d>
c001c8b7:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c001c8bd:	eb 07                	jmp    c001c8c6 <LogicalDisk::mount()+0x44>
c001c8bf:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001c8c2:	eb d5                	jmp    c001c899 <LogicalDisk::mount()+0x17>
c001c8c4:	31 c0                	xor    eax,eax
c001c8c6:	5a                   	pop    edx
c001c8c7:	5b                   	pop    ebx
c001c8c8:	5e                   	pop    esi
c001c8c9:	c3                   	ret    

c001c8ca <LogicalDisk::unmount()>:
c001c8ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8ce:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c8d8:	c3                   	ret    
c001c8d9:	90                   	nop

c001c8da <LogicalDisk::eject()>:
c001c8da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8de:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c8e4:	8b 10                	mov    edx,DWORD PTR [eax]
c001c8e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c8ea:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001c8ed:	90                   	nop

c001c8ee <LogicalDisk::unassignDriveLetter()>:
c001c8ee:	57                   	push   edi
c001c8ef:	56                   	push   esi
c001c8f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c8f4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001c8fb:	85 c9                	test   ecx,ecx
c001c8fd:	75 0f                	jne    c001c90e <LogicalDisk::unassignDriveLetter()+0x20>
c001c8ff:	c7 44 24 0c 78 24 03 c0 	mov    DWORD PTR [esp+0xc],0xc0032478
c001c907:	5e                   	pop    esi
c001c908:	5f                   	pop    edi
c001c909:	e9 dc 3b 00 00       	jmp    c00204ea <KePanic(char const*)>
c001c90e:	83 e9 41             	sub    ecx,0x41
c001c911:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001c918:	b8 01 00 00 00       	mov    eax,0x1
c001c91d:	c7 04 8d 80 f3 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc0c80],0x0
c001c928:	d3 e0                	shl    eax,cl
c001c92a:	89 c7                	mov    edi,eax
c001c92c:	f7 d0                	not    eax
c001c92e:	c1 ff 1f             	sar    edi,0x1f
c001c931:	21 05 60 f3 03 c0    	and    DWORD PTR ds:0xc003f360,eax
c001c937:	89 fe                	mov    esi,edi
c001c939:	f7 d6                	not    esi
c001c93b:	21 35 64 f3 03 c0    	and    DWORD PTR ds:0xc003f364,esi
c001c941:	5e                   	pop    esi
c001c942:	5f                   	pop    edi
c001c943:	c3                   	ret    

c001c944 <LogicalDisk::read(unsigned long long, int, void*)>:
c001c944:	57                   	push   edi
c001c945:	56                   	push   esi
c001c946:	53                   	push   ebx
c001c947:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c94b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c94f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c953:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c957:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c95d:	77 41                	ja     c001c9a0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001c95f:	99                   	cdq    
c001c960:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c966:	01 c8                	add    eax,ecx
c001c968:	11 da                	adc    edx,ebx
c001c96a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c970:	19 d7                	sbb    edi,edx
c001c972:	72 33                	jb     c001c9a7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001c974:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c97a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c980:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c984:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c988:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c98e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c994:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c998:	5b                   	pop    ebx
c001c999:	5e                   	pop    esi
c001c99a:	5f                   	pop    edi
c001c99b:	e9 c8 0a 00 00       	jmp    c001d468 <VCache::read(unsigned long long, int, void*)>
c001c9a0:	b8 05 00 00 00       	mov    eax,0x5
c001c9a5:	eb 05                	jmp    c001c9ac <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001c9a7:	b8 07 00 00 00       	mov    eax,0x7
c001c9ac:	5b                   	pop    ebx
c001c9ad:	5e                   	pop    esi
c001c9ae:	5f                   	pop    edi
c001c9af:	c3                   	ret    

c001c9b0 <LogicalDisk::write(unsigned long long, int, void*)>:
c001c9b0:	57                   	push   edi
c001c9b1:	56                   	push   esi
c001c9b2:	53                   	push   ebx
c001c9b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c9b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c9bb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c9bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c9c3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c9c9:	77 41                	ja     c001ca0c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001c9cb:	99                   	cdq    
c001c9cc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c9d2:	01 c8                	add    eax,ecx
c001c9d4:	11 da                	adc    edx,ebx
c001c9d6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c9dc:	19 d7                	sbb    edi,edx
c001c9de:	72 33                	jb     c001ca13 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001c9e0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c9e6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c9ec:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c9f0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c9f4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c9fa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ca00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ca04:	5b                   	pop    ebx
c001ca05:	5e                   	pop    esi
c001ca06:	5f                   	pop    edi
c001ca07:	e9 68 09 00 00       	jmp    c001d374 <VCache::write(unsigned long long, int, void*)>
c001ca0c:	b8 05 00 00 00       	mov    eax,0x5
c001ca11:	eb 05                	jmp    c001ca18 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001ca13:	b8 07 00 00 00       	mov    eax,0x7
c001ca18:	5b                   	pop    ebx
c001ca19:	5e                   	pop    esi
c001ca1a:	5f                   	pop    edi
c001ca1b:	c3                   	ret    

c001ca1c <Mouse::Mouse(char const*)>:
c001ca1c:	83 ec 0c             	sub    esp,0xc
c001ca1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca23:	83 ec 08             	sub    esp,0x8
c001ca26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca2a:	50                   	push   eax
c001ca2b:	e8 84 ec ff ff       	call   c001b6b4 <Device::Device(char const*)>
c001ca30:	83 c4 10             	add    esp,0x10
c001ca33:	ba cc 24 03 c0       	mov    edx,0xc00324cc
c001ca38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca3c:	89 10                	mov    DWORD PTR [eax],edx
c001ca3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca42:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001ca4c:	90                   	nop
c001ca4d:	83 c4 0c             	add    esp,0xc
c001ca50:	c3                   	ret    
c001ca51:	90                   	nop
c001ca52:	66 90                	xchg   ax,ax

c001ca54 <Mouse::~Mouse()>:
c001ca54:	83 ec 0c             	sub    esp,0xc
c001ca57:	ba cc 24 03 c0       	mov    edx,0xc00324cc
c001ca5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca60:	89 10                	mov    DWORD PTR [eax],edx
c001ca62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca66:	83 ec 0c             	sub    esp,0xc
c001ca69:	50                   	push   eax
c001ca6a:	e8 e5 e9 ff ff       	call   c001b454 <Device::~Device()>
c001ca6f:	83 c4 10             	add    esp,0x10
c001ca72:	90                   	nop
c001ca73:	83 c4 0c             	add    esp,0xc
c001ca76:	c3                   	ret    
c001ca77:	90                   	nop

c001ca78 <Mouse::~Mouse()>:
c001ca78:	83 ec 0c             	sub    esp,0xc
c001ca7b:	83 ec 0c             	sub    esp,0xc
c001ca7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca82:	e8 cd ff ff ff       	call   c001ca54 <Mouse::~Mouse()>
c001ca87:	83 c4 10             	add    esp,0x10
c001ca8a:	83 ec 08             	sub    esp,0x8
c001ca8d:	68 58 01 00 00       	push   0x158
c001ca92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca96:	e8 09 c9 ff ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c001ca9b:	83 c4 10             	add    esp,0x10
c001ca9e:	83 c4 0c             	add    esp,0xc
c001caa1:	c3                   	ret    

c001caa2 <NIC::getMAC()>:
c001caa2:	31 c0                	xor    eax,eax
c001caa4:	31 d2                	xor    edx,edx
c001caa6:	c3                   	ret    
c001caa7:	90                   	nop

c001caa8 <NIC::write(int, unsigned char*, int*)>:
c001caa8:	b8 01 00 00 00       	mov    eax,0x1
c001caad:	c3                   	ret    

c001caae <NIC::NIC(char const*)>:
c001caae:	83 ec 0c             	sub    esp,0xc
c001cab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cab5:	83 ec 08             	sub    esp,0x8
c001cab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cabc:	50                   	push   eax
c001cabd:	e8 f2 eb ff ff       	call   c001b6b4 <Device::Device(char const*)>
c001cac2:	83 c4 10             	add    esp,0x10
c001cac5:	ba f8 24 03 c0       	mov    edx,0xc00324f8
c001caca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cace:	89 10                	mov    DWORD PTR [eax],edx
c001cad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cad4:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001cade:	90                   	nop
c001cadf:	83 c4 0c             	add    esp,0xc
c001cae2:	c3                   	ret    
c001cae3:	90                   	nop

c001cae4 <NIC::~NIC()>:
c001cae4:	83 ec 0c             	sub    esp,0xc
c001cae7:	ba f8 24 03 c0       	mov    edx,0xc00324f8
c001caec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caf0:	89 10                	mov    DWORD PTR [eax],edx
c001caf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caf6:	83 ec 0c             	sub    esp,0xc
c001caf9:	50                   	push   eax
c001cafa:	e8 55 e9 ff ff       	call   c001b454 <Device::~Device()>
c001caff:	83 c4 10             	add    esp,0x10
c001cb02:	90                   	nop
c001cb03:	83 c4 0c             	add    esp,0xc
c001cb06:	c3                   	ret    
c001cb07:	90                   	nop

c001cb08 <NIC::~NIC()>:
c001cb08:	83 ec 0c             	sub    esp,0xc
c001cb0b:	83 ec 0c             	sub    esp,0xc
c001cb0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb12:	e8 cd ff ff ff       	call   c001cae4 <NIC::~NIC()>
c001cb17:	83 c4 10             	add    esp,0x10
c001cb1a:	83 ec 08             	sub    esp,0x8
c001cb1d:	68 58 01 00 00       	push   0x158
c001cb22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb26:	e8 79 c8 ff ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c001cb2b:	83 c4 10             	add    esp,0x10
c001cb2e:	83 c4 0c             	add    esp,0xc
c001cb31:	c3                   	ret    

c001cb32 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001cb32:	55                   	push   ebp
c001cb33:	57                   	push   edi
c001cb34:	56                   	push   esi
c001cb35:	53                   	push   ebx
c001cb36:	81 ec 28 01 00 00    	sub    esp,0x128
c001cb3c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001cb43:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001cb4a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001cb51:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001cb58:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb5c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cb60:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cb67:	e8 44 ec ff ff       	call   c001b7b0 <Device::getName()>
c001cb6c:	5a                   	pop    edx
c001cb6d:	59                   	pop    ecx
c001cb6e:	50                   	push   eax
c001cb6f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001cb73:	55                   	push   ebp
c001cb74:	e8 c7 3a fe ff       	call   c0000640 <strcpy>
c001cb79:	5b                   	pop    ebx
c001cb7a:	58                   	pop    eax
c001cb7b:	68 24 25 03 c0       	push   0xc0032524
c001cb80:	55                   	push   ebp
c001cb81:	e8 ba 3c fe ff       	call   c0000840 <strcat>
c001cb86:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c001cb8d:	e8 b1 9a ff ff       	call   c0016643 <malloc>
c001cb92:	83 c4 0c             	add    esp,0xc
c001cb95:	89 c3                	mov    ebx,eax
c001cb97:	57                   	push   edi
c001cb98:	56                   	push   esi
c001cb99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cba1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001cba8:	55                   	push   ebp
c001cba9:	50                   	push   eax
c001cbaa:	e8 59 fb ff ff       	call   c001c708 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001cbaf:	83 c4 14             	add    esp,0x14
c001cbb2:	53                   	push   ebx
c001cbb3:	e8 10 fc ff ff       	call   c001c7c8 <LogicalDisk::assignDriveLetter()>
c001cbb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbbb:	e8 c2 fc ff ff       	call   c001c882 <LogicalDisk::mount()>
c001cbc0:	58                   	pop    eax
c001cbc1:	5a                   	pop    edx
c001cbc2:	53                   	push   ebx
c001cbc3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cbca:	e8 83 e9 ff ff       	call   c001b552 <Device::addChild(Device*)>
c001cbcf:	81 c4 2c 01 00 00    	add    esp,0x12c
c001cbd5:	5b                   	pop    ebx
c001cbd6:	5e                   	pop    esi
c001cbd7:	5f                   	pop    edi
c001cbd8:	5d                   	pop    ebp
c001cbd9:	c3                   	ret    

c001cbda <createPartitionsForDisk(PhysicalDisk*)>:
c001cbda:	55                   	push   ebp
c001cbdb:	57                   	push   edi
c001cbdc:	56                   	push   esi
c001cbdd:	53                   	push   ebx
c001cbde:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001cbe4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001cbeb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cbf1:	3d 00 02 00 00       	cmp    eax,0x200
c001cbf6:	74 27                	je     c001cc1f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001cbf8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001cbfe:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001cc04:	83 ec 10             	sub    esp,0x10
c001cc07:	0f a4 f7 0a          	shld   edi,esi,0xa
c001cc0b:	99                   	cdq    
c001cc0c:	c1 e6 0a             	shl    esi,0xa
c001cc0f:	52                   	push   edx
c001cc10:	89 fd                	mov    ebp,edi
c001cc12:	50                   	push   eax
c001cc13:	55                   	push   ebp
c001cc14:	56                   	push   esi
c001cc15:	e8 e6 1c 01 00       	call   c002e900 <__udivdi3>
c001cc1a:	e9 b9 00 00 00       	jmp    c001ccd8 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001cc1f:	83 ec 0c             	sub    esp,0xc
c001cc22:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc24:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001cc28:	56                   	push   esi
c001cc29:	6a 01                	push   0x1
c001cc2b:	6a 00                	push   0x0
c001cc2d:	6a 00                	push   0x0
c001cc2f:	53                   	push   ebx
c001cc30:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001cc33:	83 c4 20             	add    esp,0x20
c001cc36:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001cc3e:	75 0a                	jne    c001cc4a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001cc40:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001cc48:	74 2c                	je     c001cc76 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001cc4a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cc50:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cc56:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cc5c:	83 ec 10             	sub    esp,0x10
c001cc5f:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cc63:	89 f7                	mov    edi,esi
c001cc65:	c1 e0 0a             	shl    eax,0xa
c001cc68:	c1 ff 1f             	sar    edi,0x1f
c001cc6b:	57                   	push   edi
c001cc6c:	56                   	push   esi
c001cc6d:	52                   	push   edx
c001cc6e:	50                   	push   eax
c001cc6f:	e8 8c 1c 01 00       	call   c002e900 <__udivdi3>
c001cc74:	eb 62                	jmp    c001ccd8 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001cc76:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001cc7d:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c001cc84:	89 cf                	mov    edi,ecx
c001cc86:	83 e2 7f             	and    edx,0x7f
c001cc89:	83 e7 7f             	and    edi,0x7f
c001cc8c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001cc93:	8d 0c 17             	lea    ecx,[edi+edx*1]
c001cc96:	83 e0 7f             	and    eax,0x7f
c001cc99:	8d 14 01             	lea    edx,[ecx+eax*1]
c001cc9c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001cca3:	83 e0 7f             	and    eax,0x7f
c001cca6:	01 d0                	add    eax,edx
c001cca8:	89 c5                	mov    ebp,eax
c001ccaa:	84 c0                	test   al,al
c001ccac:	74 41                	je     c001ccef <createPartitionsForDisk(PhysicalDisk*)+0x115>
c001ccae:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001ccb4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001ccba:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ccc0:	83 ec 10             	sub    esp,0x10
c001ccc3:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ccc7:	89 f7                	mov    edi,esi
c001ccc9:	c1 e0 0a             	shl    eax,0xa
c001cccc:	c1 ff 1f             	sar    edi,0x1f
c001cccf:	57                   	push   edi
c001ccd0:	56                   	push   esi
c001ccd1:	52                   	push   edx
c001ccd2:	50                   	push   eax
c001ccd3:	e8 28 1c 01 00       	call   c002e900 <__udivdi3>
c001ccd8:	83 c4 14             	add    esp,0x14
c001ccdb:	52                   	push   edx
c001ccdc:	50                   	push   eax
c001ccdd:	6a 00                	push   0x0
c001ccdf:	6a 00                	push   0x0
c001cce1:	53                   	push   ebx
c001cce2:	e8 4b fe ff ff       	call   c001cb32 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001cce7:	83 c4 20             	add    esp,0x20
c001ccea:	e9 73 01 00 00       	jmp    c001ce62 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c001ccef:	89 f0                	mov    eax,esi
c001ccf1:	31 c9                	xor    ecx,ecx
c001ccf3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001ccfa:	75 02                	jne    c001ccfe <createPartitionsForDisk(PhysicalDisk*)+0x124>
c001ccfc:	89 cd                	mov    ebp,ecx
c001ccfe:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001cd05:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c001cd0c:	c1 e2 08             	shl    edx,0x8
c001cd0f:	c1 e6 10             	shl    esi,0x10
c001cd12:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c001cd1a:	09 f2                	or     edx,esi
c001cd1c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c001cd24:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c001cd2b:	83 c0 10             	add    eax,0x10
c001cd2e:	09 f2                	or     edx,esi
c001cd30:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c001cd37:	c1 e6 18             	shl    esi,0x18
c001cd3a:	09 f2                	or     edx,esi
c001cd3c:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c001cd43:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c001cd47:	c1 e6 10             	shl    esi,0x10
c001cd4a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001cd51:	c1 e2 08             	shl    edx,0x8
c001cd54:	09 f2                	or     edx,esi
c001cd56:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c001cd5d:	09 f2                	or     edx,esi
c001cd5f:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c001cd66:	c1 e6 18             	shl    esi,0x18
c001cd69:	09 f2                	or     edx,esi
c001cd6b:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c001cd6f:	41                   	inc    ecx
c001cd70:	83 f9 04             	cmp    ecx,0x4
c001cd73:	0f 85 7a ff ff ff    	jne    c001ccf3 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c001cd79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd7d:	83 f0 01             	xor    eax,0x1
c001cd80:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001cd84:	75 4f                	jne    c001cdd5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001cd86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cd8a:	83 f0 01             	xor    eax,0x1
c001cd8d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001cd91:	75 42                	jne    c001cdd5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001cd93:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cd9b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cda3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cda9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cdaf:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cdb5:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cdb9:	89 f7                	mov    edi,esi
c001cdbb:	c1 e0 0a             	shl    eax,0xa
c001cdbe:	c1 ff 1f             	sar    edi,0x1f
c001cdc1:	57                   	push   edi
c001cdc2:	56                   	push   esi
c001cdc3:	52                   	push   edx
c001cdc4:	50                   	push   eax
c001cdc5:	e8 36 1b 01 00       	call   c002e900 <__udivdi3>
c001cdca:	83 c4 10             	add    esp,0x10
c001cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cdd5:	89 e8                	mov    eax,ebp
c001cdd7:	0f b6 e8             	movzx  ebp,al
c001cdda:	85 ed                	test   ebp,ebp
c001cddc:	74 50                	je     c001ce2e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001cdde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cde2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001cde6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cdea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cdee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cdf2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cdf6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cdfa:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cdfe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ce02:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ce06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ce0a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c001ce0e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c001ce12:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001ce16:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001ce1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ce1e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001ce22:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c001ce26:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c001ce2a:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c001ce2e:	31 ed                	xor    ebp,ebp
c001ce30:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001ce34:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001ce38:	89 f8                	mov    eax,edi
c001ce3a:	09 f0                	or     eax,esi
c001ce3c:	74 1e                	je     c001ce5c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001ce3e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001ce42:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001ce46:	89 d1                	mov    ecx,edx
c001ce48:	09 c1                	or     ecx,eax
c001ce4a:	74 10                	je     c001ce5c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001ce4c:	83 ec 0c             	sub    esp,0xc
c001ce4f:	57                   	push   edi
c001ce50:	56                   	push   esi
c001ce51:	52                   	push   edx
c001ce52:	50                   	push   eax
c001ce53:	53                   	push   ebx
c001ce54:	e8 d9 fc ff ff       	call   c001cb32 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001ce59:	83 c4 20             	add    esp,0x20
c001ce5c:	45                   	inc    ebp
c001ce5d:	83 fd 04             	cmp    ebp,0x4
c001ce60:	75 ce                	jne    c001ce30 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c001ce62:	81 c4 5c 02 00 00    	add    esp,0x25c
c001ce68:	5b                   	pop    ebx
c001ce69:	5e                   	pop    esi
c001ce6a:	5f                   	pop    edi
c001ce6b:	5d                   	pop    ebp
c001ce6c:	c3                   	ret    
c001ce6d:	66 90                	xchg   ax,ax
c001ce6f:	90                   	nop

c001ce70 <Serial::Serial(char const*)>:
c001ce70:	83 ec 0c             	sub    esp,0xc
c001ce73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce77:	83 ec 08             	sub    esp,0x8
c001ce7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce7e:	50                   	push   eax
c001ce7f:	e8 30 e8 ff ff       	call   c001b6b4 <Device::Device(char const*)>
c001ce84:	83 c4 10             	add    esp,0x10
c001ce87:	ba 38 25 03 c0       	mov    edx,0xc0032538
c001ce8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce90:	89 10                	mov    DWORD PTR [eax],edx
c001ce92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce96:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001cea0:	90                   	nop
c001cea1:	83 c4 0c             	add    esp,0xc
c001cea4:	c3                   	ret    
c001cea5:	90                   	nop
c001cea6:	66 90                	xchg   ax,ax

c001cea8 <Serial::~Serial()>:
c001cea8:	83 ec 0c             	sub    esp,0xc
c001ceab:	ba 38 25 03 c0       	mov    edx,0xc0032538
c001ceb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceb4:	89 10                	mov    DWORD PTR [eax],edx
c001ceb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceba:	83 ec 0c             	sub    esp,0xc
c001cebd:	50                   	push   eax
c001cebe:	e8 91 e5 ff ff       	call   c001b454 <Device::~Device()>
c001cec3:	83 c4 10             	add    esp,0x10
c001cec6:	90                   	nop
c001cec7:	83 c4 0c             	add    esp,0xc
c001ceca:	c3                   	ret    
c001cecb:	90                   	nop

c001cecc <Serial::~Serial()>:
c001cecc:	83 ec 0c             	sub    esp,0xc
c001cecf:	83 ec 0c             	sub    esp,0xc
c001ced2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ced6:	e8 cd ff ff ff       	call   c001cea8 <Serial::~Serial()>
c001cedb:	83 c4 10             	add    esp,0x10
c001cede:	83 ec 08             	sub    esp,0x8
c001cee1:	68 58 01 00 00       	push   0x158
c001cee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ceea:	e8 b5 c4 ff ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c001ceef:	83 c4 10             	add    esp,0x10
c001cef2:	83 c4 0c             	add    esp,0xc
c001cef5:	c3                   	ret    
c001cef6:	66 90                	xchg   ax,ax

c001cef8 <Timer::Timer(char const*)>:
c001cef8:	83 ec 0c             	sub    esp,0xc
c001cefb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceff:	83 ec 08             	sub    esp,0x8
c001cf02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf06:	50                   	push   eax
c001cf07:	e8 a8 e7 ff ff       	call   c001b6b4 <Device::Device(char const*)>
c001cf0c:	83 c4 10             	add    esp,0x10
c001cf0f:	ba 7c 25 03 c0       	mov    edx,0xc003257c
c001cf14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf18:	89 10                	mov    DWORD PTR [eax],edx
c001cf1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf1e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001cf28:	90                   	nop
c001cf29:	83 c4 0c             	add    esp,0xc
c001cf2c:	c3                   	ret    
c001cf2d:	90                   	nop
c001cf2e:	66 90                	xchg   ax,ax

c001cf30 <Timer::~Timer()>:
c001cf30:	83 ec 0c             	sub    esp,0xc
c001cf33:	ba 7c 25 03 c0       	mov    edx,0xc003257c
c001cf38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf3c:	89 10                	mov    DWORD PTR [eax],edx
c001cf3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf42:	83 ec 0c             	sub    esp,0xc
c001cf45:	50                   	push   eax
c001cf46:	e8 09 e5 ff ff       	call   c001b454 <Device::~Device()>
c001cf4b:	83 c4 10             	add    esp,0x10
c001cf4e:	90                   	nop
c001cf4f:	83 c4 0c             	add    esp,0xc
c001cf52:	c3                   	ret    
c001cf53:	90                   	nop

c001cf54 <Timer::~Timer()>:
c001cf54:	83 ec 0c             	sub    esp,0xc
c001cf57:	83 ec 0c             	sub    esp,0xc
c001cf5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf5e:	e8 cd ff ff ff       	call   c001cf30 <Timer::~Timer()>
c001cf63:	83 c4 10             	add    esp,0x10
c001cf66:	83 ec 08             	sub    esp,0x8
c001cf69:	68 5c 01 00 00       	push   0x15c
c001cf6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf72:	e8 2d c4 ff ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c001cf77:	83 c4 10             	add    esp,0x10
c001cf7a:	83 c4 0c             	add    esp,0xc
c001cf7d:	c3                   	ret    

c001cf7e <Timer::read()>:
c001cf7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf82:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cf88:	c3                   	ret    

c001cf89 <setupTimer(int)>:
c001cf89:	53                   	push   ebx
c001cf8a:	83 ec 14             	sub    esp,0x14
c001cf8d:	68 5c 01 00 00       	push   0x15c
c001cf92:	e8 ac 96 ff ff       	call   c0016643 <malloc>
c001cf97:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf9a:	89 c3                	mov    ebx,eax
c001cf9c:	e8 e3 11 01 00       	call   c002e184 <PIT::PIT()>
c001cfa1:	58                   	pop    eax
c001cfa2:	5a                   	pop    edx
c001cfa3:	53                   	push   ebx
c001cfa4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001cfaa:	e8 a3 e5 ff ff       	call   c001b552 <Device::addChild(Device*)>
c001cfaf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cfb1:	6a 00                	push   0x0
c001cfb3:	6a 00                	push   0x0
c001cfb5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cfb9:	53                   	push   ebx
c001cfba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cfbd:	89 d8                	mov    eax,ebx
c001cfbf:	83 c4 28             	add    esp,0x28
c001cfc2:	5b                   	pop    ebx
c001cfc3:	c3                   	ret    

c001cfc4 <timerHandler(unsigned int)>:
c001cfc4:	57                   	push   edi
c001cfc5:	56                   	push   esi
c001cfc6:	53                   	push   ebx
c001cfc7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001cfcb:	01 3d ec f3 03 c0    	add    DWORD PTR ds:0xc003f3ec,edi
c001cfd1:	80 3d c1 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c1,0x0
c001cfd8:	0f 84 46 01 00 00    	je     c001d124 <timerHandler(unsigned int)+0x160>
c001cfde:	fa                   	cli    
c001cfdf:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001cfe5:	83 ec 0c             	sub    esp,0xc
c001cfe8:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c001cfee:	68 e0 01 04 c0       	push   0xc00401e0
c001cff3:	e8 d8 1e 01 00       	call   c002eed0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cff8:	83 c4 10             	add    esp,0x10
c001cffb:	84 c0                	test   al,al
c001cffd:	0f 85 a1 00 00 00    	jne    c001d0a4 <timerHandler(unsigned int)+0xe0>
c001d003:	83 ec 0c             	sub    esp,0xc
c001d006:	68 e0 01 04 c0       	push   0xc00401e0
c001d00b:	e8 dc 1e 01 00       	call   c002eeec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d010:	83 c4 10             	add    esp,0x10
c001d013:	89 c6                	mov    esi,eax
c001d015:	8d 76 00             	lea    esi,[esi+0x0]
c001d018:	83 ec 0c             	sub    esp,0xc
c001d01b:	68 e0 01 04 c0       	push   0xc00401e0
c001d020:	e8 c7 1e 01 00       	call   c002eeec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d025:	c7 04 24 e0 01 04 c0 	mov    DWORD PTR [esp],0xc00401e0
c001d02c:	89 c3                	mov    ebx,eax
c001d02e:	e8 c1 1e 01 00       	call   c002eef4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d033:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001d036:	83 c4 10             	add    esp,0x10
c001d039:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c001d03f:	77 23                	ja     c001d064 <timerHandler(unsigned int)+0xa0>
c001d041:	83 ec 0c             	sub    esp,0xc
c001d044:	53                   	push   ebx
c001d045:	e8 ae 87 00 00       	call   c00257f8 <unblockTask(ThreadControlBlock*)>
c001d04a:	83 c4 10             	add    esp,0x10
c001d04d:	39 de                	cmp    esi,ebx
c001d04f:	75 27                	jne    c001d078 <timerHandler(unsigned int)+0xb4>
c001d051:	83 ec 0c             	sub    esp,0xc
c001d054:	68 e0 01 04 c0       	push   0xc00401e0
c001d059:	e8 8e 1e 01 00       	call   c002eeec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d05e:	89 c6                	mov    esi,eax
c001d060:	eb 12                	jmp    c001d074 <timerHandler(unsigned int)+0xb0>
c001d062:	66 90                	xchg   ax,ax
c001d064:	50                   	push   eax
c001d065:	50                   	push   eax
c001d066:	53                   	push   ebx
c001d067:	68 e0 01 04 c0       	push   0xc00401e0
c001d06c:	e8 3f 1f 01 00       	call   c002efb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d071:	8d 76 00             	lea    esi,[esi+0x0]
c001d074:	83 c4 10             	add    esp,0x10
c001d077:	90                   	nop
c001d078:	83 ec 0c             	sub    esp,0xc
c001d07b:	68 e0 01 04 c0       	push   0xc00401e0
c001d080:	e8 4b 1e 01 00       	call   c002eed0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d085:	83 c4 10             	add    esp,0x10
c001d088:	84 c0                	test   al,al
c001d08a:	75 18                	jne    c001d0a4 <timerHandler(unsigned int)+0xe0>
c001d08c:	83 ec 0c             	sub    esp,0xc
c001d08f:	68 e0 01 04 c0       	push   0xc00401e0
c001d094:	e8 53 1e 01 00       	call   c002eeec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d099:	83 c4 10             	add    esp,0x10
c001d09c:	39 f0                	cmp    eax,esi
c001d09e:	0f 85 74 ff ff ff    	jne    c001d018 <timerHandler(unsigned int)+0x54>
c001d0a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0a9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c001d0ad:	74 3d                	je     c001d0ec <timerHandler(unsigned int)+0x128>
c001d0af:	80 3d c0 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c0,0x0
c001d0b6:	74 34                	je     c001d0ec <timerHandler(unsigned int)+0x128>
c001d0b8:	fa                   	cli    
c001d0b9:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001d0bf:	8b 15 ec f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f3ec
c001d0c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0ca:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c001d0cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0d2:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c001d0d5:	77 05                	ja     c001d0dc <timerHandler(unsigned int)+0x118>
c001d0d7:	e8 24 84 00 00       	call   c0025500 <schedule()>
c001d0dc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001d0e1:	48                   	dec    eax
c001d0e2:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001d0e7:	75 03                	jne    c001d0ec <timerHandler(unsigned int)+0x128>
c001d0e9:	fb                   	sti    
c001d0ea:	66 90                	xchg   ax,ax
c001d0ec:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001d0f1:	48                   	dec    eax
c001d0f2:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001d0f7:	75 1b                	jne    c001d114 <timerHandler(unsigned int)+0x150>
c001d0f9:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c001d100:	74 12                	je     c001d114 <timerHandler(unsigned int)+0x150>
c001d102:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001d10c:	e8 ef 83 00 00       	call   c0025500 <schedule()>
c001d111:	8d 76 00             	lea    esi,[esi+0x0]
c001d114:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001d119:	48                   	dec    eax
c001d11a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001d11f:	75 03                	jne    c001d124 <timerHandler(unsigned int)+0x160>
c001d121:	fb                   	sti    
c001d122:	66 90                	xchg   ax,ax
c001d124:	5b                   	pop    ebx
c001d125:	5e                   	pop    esi
c001d126:	5f                   	pop    edi
c001d127:	c3                   	ret    

c001d128 <VCache::VCache(PhysicalDisk*)>:
c001d128:	53                   	push   ebx
c001d129:	83 ec 18             	sub    esp,0x18
c001d12c:	ba ac 25 03 c0       	mov    edx,0xc00325ac
c001d131:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d135:	89 10                	mov    DWORD PTR [eax],edx
c001d137:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d13b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001d142:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d146:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001d14d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d151:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001d158:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d15f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d163:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001d16a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001d171:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d175:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001d17c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d180:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001d184:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d188:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001d18f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001d196:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d19a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001d19e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1a2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001d1a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1aa:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001d1ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1b2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001d1b9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001d1c1:	83 ec 0c             	sub    esp,0xc
c001d1c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d1c8:	e8 76 94 ff ff       	call   c0016643 <malloc>
c001d1cd:	83 c4 10             	add    esp,0x10
c001d1d0:	89 c3                	mov    ebx,eax
c001d1d2:	83 ec 0c             	sub    esp,0xc
c001d1d5:	53                   	push   ebx
c001d1d6:	e8 f5 32 00 00       	call   c00204d0 <Mutex::Mutex()>
c001d1db:	83 c4 10             	add    esp,0x10
c001d1de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1e2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001d1e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1e9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d1ed:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d1f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1f4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001d1fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d1ff:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d205:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d209:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d20c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d210:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001d216:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d21c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d220:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001d223:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001d226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d22a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001d22e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d232:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d238:	05 00 02 00 00       	add    eax,0x200
c001d23d:	c1 e0 03             	shl    eax,0x3
c001d240:	83 ec 0c             	sub    esp,0xc
c001d243:	50                   	push   eax
c001d244:	e8 fa 93 ff ff       	call   c0016643 <malloc>
c001d249:	83 c4 10             	add    esp,0x10
c001d24c:	89 c2                	mov    edx,eax
c001d24e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d252:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001d255:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d259:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001d260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d264:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001d268:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d26c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d272:	89 d0                	mov    eax,edx
c001d274:	c1 e0 02             	shl    eax,0x2
c001d277:	01 d0                	add    eax,edx
c001d279:	c1 e0 04             	shl    eax,0x4
c001d27c:	83 ec 0c             	sub    esp,0xc
c001d27f:	50                   	push   eax
c001d280:	e8 be 93 ff ff       	call   c0016643 <malloc>
c001d285:	83 c4 10             	add    esp,0x10
c001d288:	89 c2                	mov    edx,eax
c001d28a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d28e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001d291:	90                   	nop
c001d292:	83 c4 18             	add    esp,0x18
c001d295:	5b                   	pop    ebx
c001d296:	c3                   	ret    
c001d297:	90                   	nop

c001d298 <VCache::invalidateReadBuffer()>:
c001d298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d29c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001d2a2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001d2a6:	c3                   	ret    
c001d2a7:	90                   	nop

c001d2a8 <VCache::writeWriteBuffer()>:
c001d2a8:	53                   	push   ebx
c001d2a9:	83 ec 08             	sub    esp,0x8
c001d2ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d2b0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d2b4:	74 1e                	je     c001d2d4 <VCache::writeWriteBuffer()+0x2c>
c001d2b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d2b9:	83 ec 0c             	sub    esp,0xc
c001d2bc:	8b 10                	mov    edx,DWORD PTR [eax]
c001d2be:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001d2c1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001d2c4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001d2c7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001d2ca:	50                   	push   eax
c001d2cb:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d2ce:	83 c4 20             	add    esp,0x20
c001d2d1:	8d 76 00             	lea    esi,[esi+0x0]
c001d2d4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001d2db:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001d2e2:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001d2e6:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001d2ed:	83 c4 08             	add    esp,0x8
c001d2f0:	5b                   	pop    ebx
c001d2f1:	c3                   	ret    
c001d2f2:	66 90                	xchg   ax,ax

c001d2f4 <VCache::~VCache()>:
c001d2f4:	83 ec 0c             	sub    esp,0xc
c001d2f7:	ba ac 25 03 c0       	mov    edx,0xc00325ac
c001d2fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d300:	89 10                	mov    DWORD PTR [eax],edx
c001d302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d306:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001d309:	0f b6 c0             	movzx  eax,al
c001d30c:	85 c0                	test   eax,eax
c001d30e:	74 10                	je     c001d320 <VCache::~VCache()+0x2c>
c001d310:	83 ec 0c             	sub    esp,0xc
c001d313:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d317:	e8 8c ff ff ff       	call   c001d2a8 <VCache::writeWriteBuffer()>
c001d31c:	83 c4 10             	add    esp,0x10
c001d31f:	90                   	nop
c001d320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d324:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001d327:	83 ec 0c             	sub    esp,0xc
c001d32a:	50                   	push   eax
c001d32b:	e8 23 93 ff ff       	call   c0016653 <free>
c001d330:	83 c4 10             	add    esp,0x10
c001d333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d337:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d33a:	83 ec 0c             	sub    esp,0xc
c001d33d:	50                   	push   eax
c001d33e:	e8 10 93 ff ff       	call   c0016653 <free>
c001d343:	83 c4 10             	add    esp,0x10
c001d346:	90                   	nop
c001d347:	83 c4 0c             	add    esp,0xc
c001d34a:	c3                   	ret    
c001d34b:	90                   	nop

c001d34c <VCache::~VCache()>:
c001d34c:	83 ec 0c             	sub    esp,0xc
c001d34f:	83 ec 0c             	sub    esp,0xc
c001d352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d356:	e8 99 ff ff ff       	call   c001d2f4 <VCache::~VCache()>
c001d35b:	83 c4 10             	add    esp,0x10
c001d35e:	83 ec 08             	sub    esp,0x8
c001d361:	6a 44                	push   0x44
c001d363:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d367:	e8 38 c0 ff ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c001d36c:	83 c4 10             	add    esp,0x10
c001d36f:	83 c4 0c             	add    esp,0xc
c001d372:	c3                   	ret    
c001d373:	90                   	nop

c001d374 <VCache::write(unsigned long long, int, void*)>:
c001d374:	55                   	push   ebp
c001d375:	57                   	push   edi
c001d376:	56                   	push   esi
c001d377:	53                   	push   ebx
c001d378:	83 ec 1c             	sub    esp,0x1c
c001d37b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d37f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d383:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d387:	e8 dc 7e 00 00       	call   c0025268 <KeDisablePreemption()>
c001d38c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d390:	74 0e                	je     c001d3a0 <VCache::write(unsigned long long, int, void*)+0x2c>
c001d392:	83 ec 0c             	sub    esp,0xc
c001d395:	53                   	push   ebx
c001d396:	e8 fd fe ff ff       	call   c001d298 <VCache::invalidateReadBuffer()>
c001d39b:	83 c4 10             	add    esp,0x10
c001d39e:	66 90                	xchg   ax,ax
c001d3a0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d3a4:	74 5e                	je     c001d404 <VCache::write(unsigned long long, int, void*)+0x90>
c001d3a6:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c001d3a9:	89 e8                	mov    eax,ebp
c001d3ab:	99                   	cdq    
c001d3ac:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001d3af:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001d3b2:	89 c1                	mov    ecx,eax
c001d3b4:	89 d0                	mov    eax,edx
c001d3b6:	31 f1                	xor    ecx,esi
c001d3b8:	31 f8                	xor    eax,edi
c001d3ba:	09 c1                	or     ecx,eax
c001d3bc:	75 3a                	jne    c001d3f8 <VCache::write(unsigned long long, int, void*)+0x84>
c001d3be:	83 7c 24 3c 01       	cmp    DWORD PTR [esp+0x3c],0x1
c001d3c3:	75 33                	jne    c001d3f8 <VCache::write(unsigned long long, int, void*)+0x84>
c001d3c5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d3c8:	89 ef                	mov    edi,ebp
c001d3ca:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d3d0:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d3d4:	0f af f9             	imul   edi,ecx
c001d3d7:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001d3da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d3dc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d3df:	40                   	inc    eax
c001d3e0:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001d3e3:	83 f8 50             	cmp    eax,0x50
c001d3e6:	75 70                	jne    c001d458 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d3e8:	83 ec 0c             	sub    esp,0xc
c001d3eb:	53                   	push   ebx
c001d3ec:	e8 b7 fe ff ff       	call   c001d2a8 <VCache::writeWriteBuffer()>
c001d3f1:	83 c4 10             	add    esp,0x10
c001d3f4:	eb 62                	jmp    c001d458 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d3f6:	66 90                	xchg   ax,ax
c001d3f8:	83 ec 0c             	sub    esp,0xc
c001d3fb:	53                   	push   ebx
c001d3fc:	e8 a7 fe ff ff       	call   c001d2a8 <VCache::writeWriteBuffer()>
c001d401:	83 c4 10             	add    esp,0x10
c001d404:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d407:	83 7c 24 3c 4f       	cmp    DWORD PTR [esp+0x3c],0x4f
c001d40c:	7f 22                	jg     c001d430 <VCache::write(unsigned long long, int, void*)+0xbc>
c001d40e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001d411:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001d414:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d418:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001d41c:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c001d41f:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001d422:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d428:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d42c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d42e:	eb 28                	jmp    c001d458 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d430:	83 ec 0c             	sub    esp,0xc
c001d433:	8b 10                	mov    edx,DWORD PTR [eax]
c001d435:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d439:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d43d:	57                   	push   edi
c001d43e:	56                   	push   esi
c001d43f:	50                   	push   eax
c001d440:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d443:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d447:	83 c4 20             	add    esp,0x20
c001d44a:	e8 41 7e 00 00       	call   c0025290 <KeRestorePreemption()>
c001d44f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d453:	eb 0b                	jmp    c001d460 <VCache::write(unsigned long long, int, void*)+0xec>
c001d455:	8d 76 00             	lea    esi,[esi+0x0]
c001d458:	e8 33 7e 00 00       	call   c0025290 <KeRestorePreemption()>
c001d45d:	31 c0                	xor    eax,eax
c001d45f:	90                   	nop
c001d460:	83 c4 1c             	add    esp,0x1c
c001d463:	5b                   	pop    ebx
c001d464:	5e                   	pop    esi
c001d465:	5f                   	pop    edi
c001d466:	5d                   	pop    ebp
c001d467:	c3                   	ret    

c001d468 <VCache::read(unsigned long long, int, void*)>:
c001d468:	55                   	push   ebp
c001d469:	57                   	push   edi
c001d46a:	56                   	push   esi
c001d46b:	53                   	push   ebx
c001d46c:	83 ec 1c             	sub    esp,0x1c
c001d46f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d473:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d477:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d47b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d47f:	e8 e4 7d 00 00       	call   c0025268 <KeDisablePreemption()>
c001d484:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d488:	74 0e                	je     c001d498 <VCache::read(unsigned long long, int, void*)+0x30>
c001d48a:	83 ec 0c             	sub    esp,0xc
c001d48d:	53                   	push   ebx
c001d48e:	e8 15 fe ff ff       	call   c001d2a8 <VCache::writeWriteBuffer()>
c001d493:	83 c4 10             	add    esp,0x10
c001d496:	66 90                	xchg   ax,ax
c001d498:	83 fd 01             	cmp    ebp,0x1
c001d49b:	0f 85 97 00 00 00    	jne    c001d538 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d4a1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d4a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d4a8:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001d4af:	0f 85 83 00 00 00    	jne    c001d538 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d4b5:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c001d4b8:	89 e9                	mov    ecx,ebp
c001d4ba:	f7 d9                	neg    ecx
c001d4bc:	89 c8                	mov    eax,ecx
c001d4be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d4c2:	c1 f8 1f             	sar    eax,0x1f
c001d4c5:	21 f1                	and    ecx,esi
c001d4c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d4cb:	89 c8                	mov    eax,ecx
c001d4cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d4d1:	21 f9                	and    ecx,edi
c001d4d3:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d4d7:	89 ca                	mov    edx,ecx
c001d4d9:	74 31                	je     c001d50c <VCache::read(unsigned long long, int, void*)+0xa4>
c001d4db:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001d4de:	75 2c                	jne    c001d50c <VCache::read(unsigned long long, int, void*)+0xa4>
c001d4e0:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001d4e3:	75 27                	jne    c001d50c <VCache::read(unsigned long long, int, void*)+0xa4>
c001d4e5:	8d 76 00             	lea    esi,[esi+0x0]
c001d4e8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d4eb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d4ef:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d4f5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d4f8:	48                   	dec    eax
c001d4f9:	21 c6                	and    esi,eax
c001d4fb:	0f af f1             	imul   esi,ecx
c001d4fe:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c001d501:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d503:	e8 88 7d 00 00       	call   c0025290 <KeRestorePreemption()>
c001d508:	31 c0                	xor    eax,eax
c001d50a:	eb 58                	jmp    c001d564 <VCache::read(unsigned long long, int, void*)+0xfc>
c001d50c:	83 ec 0c             	sub    esp,0xc
c001d50f:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001d513:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d517:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001d51a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c001d51d:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001d51f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001d522:	55                   	push   ebp
c001d523:	52                   	push   edx
c001d524:	50                   	push   eax
c001d525:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d529:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001d52c:	83 c4 20             	add    esp,0x20
c001d52f:	85 c0                	test   eax,eax
c001d531:	75 31                	jne    c001d564 <VCache::read(unsigned long long, int, void*)+0xfc>
c001d533:	eb b3                	jmp    c001d4e8 <VCache::read(unsigned long long, int, void*)+0x80>
c001d535:	8d 76 00             	lea    esi,[esi+0x0]
c001d538:	83 ec 0c             	sub    esp,0xc
c001d53b:	53                   	push   ebx
c001d53c:	e8 57 fd ff ff       	call   c001d298 <VCache::invalidateReadBuffer()>
c001d541:	5a                   	pop    edx
c001d542:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d545:	8b 10                	mov    edx,DWORD PTR [eax]
c001d547:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d54b:	55                   	push   ebp
c001d54c:	57                   	push   edi
c001d54d:	56                   	push   esi
c001d54e:	50                   	push   eax
c001d54f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001d552:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d556:	83 c4 20             	add    esp,0x20
c001d559:	e8 32 7d 00 00       	call   c0025290 <KeRestorePreemption()>
c001d55e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d562:	66 90                	xchg   ax,ax
c001d564:	83 c4 1c             	add    esp,0x1c
c001d567:	5b                   	pop    ebx
c001d568:	5e                   	pop    esi
c001d569:	5f                   	pop    edi
c001d56a:	5d                   	pop    ebp
c001d56b:	c3                   	ret    

c001d56c <Video::putrect(int, int, int, int, unsigned int)>:
c001d56c:	55                   	push   ebp
c001d56d:	57                   	push   edi
c001d56e:	56                   	push   esi
c001d56f:	53                   	push   ebx
c001d570:	83 ec 1c             	sub    esp,0x1c
c001d573:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d577:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d57b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d57f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001d583:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d587:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d58b:	01 df                	add    edi,ebx
c001d58d:	39 fb                	cmp    ebx,edi
c001d58f:	7d 1f                	jge    c001d5b0 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001d591:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d595:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001d599:	7d 12                	jge    c001d5ad <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001d59b:	8b 16                	mov    edx,DWORD PTR [esi]
c001d59d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d5a1:	53                   	push   ebx
c001d5a2:	55                   	push   ebp
c001d5a3:	45                   	inc    ebp
c001d5a4:	56                   	push   esi
c001d5a5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001d5a8:	83 c4 10             	add    esp,0x10
c001d5ab:	eb e8                	jmp    c001d595 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001d5ad:	43                   	inc    ebx
c001d5ae:	eb dd                	jmp    c001d58d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001d5b0:	83 c4 1c             	add    esp,0x1c
c001d5b3:	5b                   	pop    ebx
c001d5b4:	5e                   	pop    esi
c001d5b5:	5f                   	pop    edi
c001d5b6:	5d                   	pop    ebp
c001d5b7:	c3                   	ret    

c001d5b8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001d5b8:	55                   	push   ebp
c001d5b9:	57                   	push   edi
c001d5ba:	31 ff                	xor    edi,edi
c001d5bc:	56                   	push   esi
c001d5bd:	53                   	push   ebx
c001d5be:	83 ec 1c             	sub    esp,0x1c
c001d5c1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001d5c5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d5c9:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001d5d0:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001d5d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d5d9:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001d5dd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d5e1:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001d5e4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d5e8:	01 f9                	add    ecx,edi
c001d5ea:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001d5ee:	7d 2f                	jge    c001d61f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001d5f0:	31 f6                	xor    esi,esi
c001d5f2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d5f6:	01 f2                	add    edx,esi
c001d5f8:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001d5fc:	7d 1a                	jge    c001d618 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001d5fe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d601:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001d604:	46                   	inc    esi
c001d605:	51                   	push   ecx
c001d606:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d60a:	52                   	push   edx
c001d60b:	55                   	push   ebp
c001d60c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d60f:	83 c4 10             	add    esp,0x10
c001d612:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d616:	eb da                	jmp    c001d5f2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001d618:	47                   	inc    edi
c001d619:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d61d:	eb c5                	jmp    c001d5e4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001d61f:	83 c4 1c             	add    esp,0x1c
c001d622:	5b                   	pop    ebx
c001d623:	5e                   	pop    esi
c001d624:	5f                   	pop    edi
c001d625:	5d                   	pop    ebp
c001d626:	c3                   	ret    
c001d627:	90                   	nop

c001d628 <Video::blit(unsigned int*, int, int, int, int)>:
c001d628:	55                   	push   ebp
c001d629:	57                   	push   edi
c001d62a:	56                   	push   esi
c001d62b:	53                   	push   ebx
c001d62c:	83 ec 1c             	sub    esp,0x1c
c001d62f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d633:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d637:	85 c0                	test   eax,eax
c001d639:	79 02                	jns    c001d63d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001d63b:	31 c0                	xor    eax,eax
c001d63d:	c1 e0 02             	shl    eax,0x2
c001d640:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d644:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d648:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d64c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001d650:	39 d8                	cmp    eax,ebx
c001d652:	7e 49                	jle    c001d69d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001d654:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d65a:	7c 41                	jl     c001d69d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001d65c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d660:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d664:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d668:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001d66c:	39 f9                	cmp    ecx,edi
c001d66e:	7e 22                	jle    c001d692 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001d670:	83 c5 04             	add    ebp,0x4
c001d673:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d679:	7c 14                	jl     c001d68f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001d67b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d67d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001d680:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d684:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d688:	56                   	push   esi
c001d689:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001d68c:	83 c4 10             	add    esp,0x10
c001d68f:	47                   	inc    edi
c001d690:	eb d2                	jmp    c001d664 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001d692:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d696:	43                   	inc    ebx
c001d697:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001d69b:	eb ab                	jmp    c001d648 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001d69d:	83 c4 1c             	add    esp,0x1c
c001d6a0:	5b                   	pop    ebx
c001d6a1:	5e                   	pop    esi
c001d6a2:	5f                   	pop    edi
c001d6a3:	5d                   	pop    ebp
c001d6a4:	c3                   	ret    
c001d6a5:	90                   	nop

c001d6a6 <Video::clearScreen(unsigned int)>:
c001d6a6:	57                   	push   edi
c001d6a7:	56                   	push   esi
c001d6a8:	53                   	push   ebx
c001d6a9:	31 db                	xor    ebx,ebx
c001d6ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d6af:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d6b5:	7e 1f                	jle    c001d6d6 <Video::clearScreen(unsigned int)+0x30>
c001d6b7:	31 ff                	xor    edi,edi
c001d6b9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d6bf:	7e 12                	jle    c001d6d3 <Video::clearScreen(unsigned int)+0x2d>
c001d6c1:	8b 06                	mov    eax,DWORD PTR [esi]
c001d6c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6c7:	53                   	push   ebx
c001d6c8:	57                   	push   edi
c001d6c9:	47                   	inc    edi
c001d6ca:	56                   	push   esi
c001d6cb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d6ce:	83 c4 10             	add    esp,0x10
c001d6d1:	eb e6                	jmp    c001d6b9 <Video::clearScreen(unsigned int)+0x13>
c001d6d3:	43                   	inc    ebx
c001d6d4:	eb d9                	jmp    c001d6af <Video::clearScreen(unsigned int)+0x9>
c001d6d6:	5b                   	pop    ebx
c001d6d7:	5e                   	pop    esi
c001d6d8:	5f                   	pop    edi
c001d6d9:	c3                   	ret    

c001d6da <Video::putpixel(int, int, unsigned int)>:
c001d6da:	c7 44 24 04 b4 25 03 c0 	mov    DWORD PTR [esp+0x4],0xc00325b4
c001d6e2:	e9 03 2e 00 00       	jmp    c00204ea <KePanic(char const*)>
c001d6e7:	90                   	nop

c001d6e8 <Video::readPixelApprox(int, int)>:
c001d6e8:	83 ec 18             	sub    esp,0x18
c001d6eb:	68 d5 25 03 c0       	push   0xc00325d5
c001d6f0:	e8 f5 2d 00 00       	call   c00204ea <KePanic(char const*)>
c001d6f5:	31 c0                	xor    eax,eax
c001d6f7:	83 c4 1c             	add    esp,0x1c
c001d6fa:	c3                   	ret    
c001d6fb:	90                   	nop

c001d6fc <Video::Video(char const*)>:
c001d6fc:	83 ec 0c             	sub    esp,0xc
c001d6ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d703:	83 ec 08             	sub    esp,0x8
c001d706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d70a:	50                   	push   eax
c001d70b:	e8 a4 df ff ff       	call   c001b6b4 <Device::Device(char const*)>
c001d710:	83 c4 10             	add    esp,0x10
c001d713:	ba 78 26 03 c0       	mov    edx,0xc0032678
c001d718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d71c:	89 10                	mov    DWORD PTR [eax],edx
c001d71e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d722:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001d72c:	90                   	nop
c001d72d:	83 c4 0c             	add    esp,0xc
c001d730:	c3                   	ret    
c001d731:	90                   	nop

c001d732 <Video::~Video()>:
c001d732:	83 ec 0c             	sub    esp,0xc
c001d735:	ba 78 26 03 c0       	mov    edx,0xc0032678
c001d73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d73e:	89 10                	mov    DWORD PTR [eax],edx
c001d740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d744:	83 ec 0c             	sub    esp,0xc
c001d747:	50                   	push   eax
c001d748:	e8 07 dd ff ff       	call   c001b454 <Device::~Device()>
c001d74d:	83 c4 10             	add    esp,0x10
c001d750:	90                   	nop
c001d751:	83 c4 0c             	add    esp,0xc
c001d754:	c3                   	ret    
c001d755:	90                   	nop

c001d756 <Video::~Video()>:
c001d756:	83 ec 0c             	sub    esp,0xc
c001d759:	83 ec 0c             	sub    esp,0xc
c001d75c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d760:	e8 cd ff ff ff       	call   c001d732 <Video::~Video()>
c001d765:	83 c4 10             	add    esp,0x10
c001d768:	83 ec 08             	sub    esp,0x8
c001d76b:	68 64 01 00 00       	push   0x164
c001d770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d774:	e8 2b bc ff ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c001d779:	83 c4 10             	add    esp,0x10
c001d77c:	83 c4 0c             	add    esp,0xc
c001d77f:	c3                   	ret    

c001d780 <Video::isMonochrome()>:
c001d780:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d784:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001d78a:	c3                   	ret    
c001d78b:	90                   	nop

c001d78c <Video::getWidth()>:
c001d78c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d790:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d796:	c3                   	ret    
c001d797:	90                   	nop

c001d798 <Video::getHeight()>:
c001d798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d79c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d7a2:	c3                   	ret    
c001d7a3:	90                   	nop

c001d7a4 <Video::drawCursor(int, int, unsigned int*, int)>:
c001d7a4:	55                   	push   ebp
c001d7a5:	57                   	push   edi
c001d7a6:	56                   	push   esi
c001d7a7:	53                   	push   ebx
c001d7a8:	83 ec 2c             	sub    esp,0x2c
c001d7ab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d7af:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d7b3:	83 f8 01             	cmp    eax,0x1
c001d7b6:	19 c9                	sbb    ecx,ecx
c001d7b8:	31 db                	xor    ebx,ebx
c001d7ba:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001d7be:	89 cd                	mov    ebp,ecx
c001d7c0:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001d7c8:	f7 d5                	not    ebp
c001d7ca:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001d7d0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d7d4:	01 d8                	add    eax,ebx
c001d7d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d7da:	56                   	push   esi
c001d7db:	e8 b8 ff ff ff       	call   c001d798 <Video::getHeight()>
c001d7e0:	59                   	pop    ecx
c001d7e1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001d7e5:	7e 70                	jle    c001d857 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c001d7e7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d7eb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001d7ef:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001d7f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d7f6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d7fa:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001d801:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d805:	89 f8                	mov    eax,edi
c001d807:	83 c0 20             	add    eax,0x20
c001d80a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d80e:	56                   	push   esi
c001d80f:	e8 78 ff ff ff       	call   c001d78c <Video::getWidth()>
c001d814:	5a                   	pop    edx
c001d815:	39 c7                	cmp    edi,eax
c001d817:	7d 34                	jge    c001d84d <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c001d819:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001d81e:	74 05                	je     c001d825 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c001d820:	8b 06                	mov    eax,DWORD PTR [esi]
c001d822:	55                   	push   ebp
c001d823:	eb 0d                	jmp    c001d832 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c001d825:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001d82a:	74 12                	je     c001d83e <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c001d82c:	8b 06                	mov    eax,DWORD PTR [esi]
c001d82e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d832:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d836:	57                   	push   edi
c001d837:	56                   	push   esi
c001d838:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d83b:	83 c4 10             	add    esp,0x10
c001d83e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001d842:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001d846:	47                   	inc    edi
c001d847:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001d84b:	75 c1                	jne    c001d80e <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c001d84d:	43                   	inc    ebx
c001d84e:	83 fb 20             	cmp    ebx,0x20
c001d851:	0f 85 79 ff ff ff    	jne    c001d7d0 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c001d857:	83 c4 2c             	add    esp,0x2c
c001d85a:	5b                   	pop    ebx
c001d85b:	5e                   	pop    esi
c001d85c:	5f                   	pop    edi
c001d85d:	5d                   	pop    ebp
c001d85e:	c3                   	ret    
c001d85f:	90                   	nop

c001d860 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001d860:	55                   	push   ebp
c001d861:	57                   	push   edi
c001d862:	56                   	push   esi
c001d863:	53                   	push   ebx
c001d864:	83 ec 48             	sub    esp,0x48
c001d867:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001d86b:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c001d86f:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c001d873:	c1 e0 08             	shl    eax,0x8
c001d876:	01 d0                	add    eax,edx
c001d878:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001d87c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d880:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001d884:	c1 e0 08             	shl    eax,0x8
c001d887:	01 d0                	add    eax,edx
c001d889:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d88d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d891:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c001d896:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d89a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d89e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001d8a5:	50                   	push   eax
c001d8a6:	e8 98 8d ff ff       	call   c0016643 <malloc>
c001d8ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d8af:	83 c4 10             	add    esp,0x10
c001d8b2:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001d8b7:	75 10                	jne    c001d8c9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c001d8b9:	83 ec 0c             	sub    esp,0xc
c001d8bc:	68 00 26 03 c0       	push   0xc0032600
c001d8c1:	e8 24 2c 00 00       	call   c00204ea <KePanic(char const*)>
c001d8c6:	83 c4 10             	add    esp,0x10
c001d8c9:	51                   	push   ecx
c001d8ca:	51                   	push   ecx
c001d8cb:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d8cf:	50                   	push   eax
c001d8d0:	68 10 26 03 c0       	push   0xc0032610
c001d8d5:	e8 f7 bb ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001d8da:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c001d8dd:	83 e0 20             	and    eax,0x20
c001d8e0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001d8e4:	85 c0                	test   eax,eax
c001d8e6:	5e                   	pop    esi
c001d8e7:	0f 94 c0             	sete   al
c001d8ea:	5f                   	pop    edi
c001d8eb:	0f b6 c0             	movzx  eax,al
c001d8ee:	be 12 00 00 00       	mov    esi,0x12
c001d8f3:	50                   	push   eax
c001d8f4:	68 1a 26 03 c0       	push   0xc003261a
c001d8f9:	e8 d3 bb ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001d8fe:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c001d902:	83 c4 10             	add    esp,0x10
c001d905:	89 d0                	mov    eax,edx
c001d907:	85 d2                	test   edx,edx
c001d909:	74 11                	je     c001d91c <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c001d90b:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001d90f:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001d913:	c1 fe 03             	sar    esi,0x3
c001d916:	0f af f1             	imul   esi,ecx
c001d919:	83 c6 12             	add    esi,0x12
c001d91c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d921:	74 07                	je     c001d92a <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c001d923:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d928:	75 12                	jne    c001d93c <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c001d92a:	83 ec 0c             	sub    esp,0xc
c001d92d:	68 28 26 03 c0       	push   0xc0032628
c001d932:	e8 9a bb ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001d937:	e9 a0 02 00 00       	jmp    c001dbdc <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c001d93c:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001d940:	83 f9 02             	cmp    ecx,0x2
c001d943:	74 0e                	je     c001d953 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c001d945:	83 f9 0a             	cmp    ecx,0xa
c001d948:	0f 84 c8 00 00 00    	je     c001da16 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c001d94e:	e9 72 02 00 00       	jmp    c001dbc5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c001d953:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d958:	75 0e                	jne    c001d968 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c001d95a:	84 c0                	test   al,al
c001d95c:	75 0a                	jne    c001d968 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c001d95e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d961:	83 e8 18             	sub    eax,0x18
c001d964:	a8 f7                	test   al,0xf7
c001d966:	74 0d                	je     c001d975 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c001d968:	83 ec 0c             	sub    esp,0xc
c001d96b:	68 3d 26 03 c0       	push   0xc003263d
c001d970:	e9 58 02 00 00       	jmp    c001dbcd <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c001d975:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c001d97a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d982:	31 c0                	xor    eax,eax
c001d984:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d988:	89 c7                	mov    edi,eax
c001d98a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d992:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001d997:	75 15                	jne    c001d9ae <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001d999:	99                   	cdq    
c001d99a:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001d99e:	85 d2                	test   edx,edx
c001d9a0:	75 0c                	jne    c001d9ae <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001d9a2:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d9a6:	29 c7                	sub    edi,eax
c001d9a8:	4f                   	dec    edi
c001d9a9:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c001d9ae:	31 d2                	xor    edx,edx
c001d9b0:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d9b4:	75 08                	jne    c001d9be <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c001d9b6:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c001d9bb:	c1 e2 18             	shl    edx,0x18
c001d9be:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c001d9c3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d9c7:	c1 e1 10             	shl    ecx,0x10
c001d9ca:	8d 47 01             	lea    eax,[edi+0x1]
c001d9cd:	89 cd                	mov    ebp,ecx
c001d9cf:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c001d9d4:	c1 e1 08             	shl    ecx,0x8
c001d9d7:	09 e9                	or     ecx,ebp
c001d9d9:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001d9dd:	09 e9                	or     ecx,ebp
c001d9df:	09 d1                	or     ecx,edx
c001d9e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d9e5:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c001d9e8:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c001d9ec:	c1 fa 03             	sar    edx,0x3
c001d9ef:	01 d6                	add    esi,edx
c001d9f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d9f5:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001d9f9:	7e 04                	jle    c001d9ff <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c001d9fb:	89 c7                	mov    edi,eax
c001d9fd:	eb 93                	jmp    c001d992 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001d9ff:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001da03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001da07:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c001da0b:	0f 8f 77 ff ff ff    	jg     c001d988 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c001da11:	e9 d3 01 00 00       	jmp    c001dbe9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001da16:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001da1b:	75 0e                	jne    c001da2b <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c001da1d:	85 d2                	test   edx,edx
c001da1f:	75 0a                	jne    c001da2b <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c001da21:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001da24:	83 e8 18             	sub    eax,0x18
c001da27:	a8 f7                	test   al,0xf7
c001da29:	74 0d                	je     c001da38 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c001da2b:	83 ec 0c             	sub    esp,0xc
c001da2e:	68 4b 26 03 c0       	push   0xc003264b
c001da33:	e9 95 01 00 00       	jmp    c001dbcd <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c001da38:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001da40:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001da48:	31 c9                	xor    ecx,ecx
c001da4a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001da4e:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c001da52:	0f 8e 91 01 00 00    	jle    c001dbe9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001da58:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c001da5c:	0f 8d 87 01 00 00    	jge    c001dbe9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001da62:	8d 46 01             	lea    eax,[esi+0x1]
c001da65:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001da69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001da6d:	83 fd 7f             	cmp    ebp,0x7f
c001da70:	89 e8                	mov    eax,ebp
c001da72:	0f 8e 9d 00 00 00    	jle    c001db15 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c001da78:	83 e0 7f             	and    eax,0x7f
c001da7b:	31 d2                	xor    edx,edx
c001da7d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001da81:	40                   	inc    eax
c001da82:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001da86:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001da8a:	75 0a                	jne    c001da96 <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c001da8c:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c001da91:	89 ea                	mov    edx,ebp
c001da93:	c1 e2 18             	shl    edx,0x18
c001da96:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001da9b:	c1 e0 10             	shl    eax,0x10
c001da9e:	89 c7                	mov    edi,eax
c001daa0:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c001daa5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001daa9:	c1 e0 08             	shl    eax,0x8
c001daac:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001dab0:	09 f8                	or     eax,edi
c001dab2:	31 f6                	xor    esi,esi
c001dab4:	09 c5                	or     ebp,eax
c001dab6:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c001dabb:	09 d5                	or     ebp,edx
c001dabd:	85 ff                	test   edi,edi
c001dabf:	75 1d                	jne    c001dade <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c001dac1:	89 c8                	mov    eax,ecx
c001dac3:	99                   	cdq    
c001dac4:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001dac8:	85 d2                	test   edx,edx
c001daca:	75 12                	jne    c001dade <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c001dacc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dad0:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c001dad4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001dad8:	49                   	dec    ecx
c001dad9:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c001dade:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dae2:	8d 51 01             	lea    edx,[ecx+0x1]
c001dae5:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c001dae8:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c001daec:	8d 46 01             	lea    eax,[esi+0x1]
c001daef:	7e 06                	jle    c001daf7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c001daf1:	89 c6                	mov    esi,eax
c001daf3:	89 d1                	mov    ecx,edx
c001daf5:	eb c6                	jmp    c001dabd <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c001daf7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001dafb:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001daff:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c001db03:	c1 f8 03             	sar    eax,0x3
c001db06:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001db0a:	89 d1                	mov    ecx,edx
c001db0c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001db10:	e9 35 ff ff ff       	jmp    c001da4a <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c001db15:	8d 45 01             	lea    eax,[ebp+0x1]
c001db18:	31 f6                	xor    esi,esi
c001db1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001db1e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001db23:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001db27:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001db2c:	75 1d                	jne    c001db4b <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c001db2e:	89 c8                	mov    eax,ecx
c001db30:	99                   	cdq    
c001db31:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001db35:	85 d2                	test   edx,edx
c001db37:	75 12                	jne    c001db4b <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c001db39:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001db3d:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c001db41:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001db45:	49                   	dec    ecx
c001db46:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c001db4b:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c001db53:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001db57:	75 10                	jne    c001db69 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c001db59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001db5d:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c001db62:	c1 e7 18             	shl    edi,0x18
c001db65:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001db69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001db6d:	8d 51 01             	lea    edx,[ecx+0x1]
c001db70:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c001db75:	c1 e0 10             	shl    eax,0x10
c001db78:	89 c7                	mov    edi,eax
c001db7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001db7e:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c001db83:	c1 e0 08             	shl    eax,0x8
c001db86:	09 f8                	or     eax,edi
c001db88:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001db8c:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c001db90:	09 f8                	or     eax,edi
c001db92:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001db96:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c001db9a:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c001db9d:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001dba1:	c1 f8 03             	sar    eax,0x3
c001dba4:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001dba8:	8d 46 01             	lea    eax,[esi+0x1]
c001dbab:	39 f5                	cmp    ebp,esi
c001dbad:	7e 09                	jle    c001dbb8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c001dbaf:	89 c6                	mov    esi,eax
c001dbb1:	89 d1                	mov    ecx,edx
c001dbb3:	e9 6f ff ff ff       	jmp    c001db27 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c001dbb8:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001dbbc:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c001dbc0:	e9 45 ff ff ff       	jmp    c001db0a <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c001dbc5:	52                   	push   edx
c001dbc6:	52                   	push   edx
c001dbc7:	51                   	push   ecx
c001dbc8:	68 5a 26 03 c0       	push   0xc003265a
c001dbcd:	e8 ff b8 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001dbd2:	58                   	pop    eax
c001dbd3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dbd7:	e8 77 8a ff ff       	call   c0016653 <free>
c001dbdc:	83 c4 10             	add    esp,0x10
c001dbdf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001dbe7:	eb 14                	jmp    c001dbfd <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c001dbe9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001dbed:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001dbf1:	89 18                	mov    DWORD PTR [eax],ebx
c001dbf3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001dbf7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dbfb:	89 18                	mov    DWORD PTR [eax],ebx
c001dbfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dc01:	83 c4 3c             	add    esp,0x3c
c001dc04:	5b                   	pop    ebx
c001dc05:	5e                   	pop    esi
c001dc06:	5f                   	pop    edi
c001dc07:	5d                   	pop    ebp
c001dc08:	c3                   	ret    
c001dc09:	90                   	nop

c001dc0a <Video::putTGA(int, int, unsigned char*, int)>:
c001dc0a:	55                   	push   ebp
c001dc0b:	57                   	push   edi
c001dc0c:	56                   	push   esi
c001dc0d:	53                   	push   ebx
c001dc0e:	83 ec 28             	sub    esp,0x28
c001dc11:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001dc15:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dc19:	50                   	push   eax
c001dc1a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dc1e:	50                   	push   eax
c001dc1f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001dc23:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001dc27:	57                   	push   edi
c001dc28:	e8 33 fc ff ff       	call   c001d860 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001dc2d:	83 c4 20             	add    esp,0x20
c001dc30:	85 c0                	test   eax,eax
c001dc32:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001dc36:	74 3a                	je     c001dc72 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c001dc38:	89 c6                	mov    esi,eax
c001dc3a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dc3e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001dc42:	39 d8                	cmp    eax,ebx
c001dc44:	7e 2c                	jle    c001dc72 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c001dc46:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001dc4a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc4e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dc52:	39 e8                	cmp    eax,ebp
c001dc54:	7e 19                	jle    c001dc6f <Video::putTGA(int, int, unsigned char*, int)+0x65>
c001dc56:	83 c6 04             	add    esi,0x4
c001dc59:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c001dc5c:	85 c0                	test   eax,eax
c001dc5e:	79 0c                	jns    c001dc6c <Video::putTGA(int, int, unsigned char*, int)+0x62>
c001dc60:	8b 17                	mov    edx,DWORD PTR [edi]
c001dc62:	50                   	push   eax
c001dc63:	53                   	push   ebx
c001dc64:	55                   	push   ebp
c001dc65:	57                   	push   edi
c001dc66:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001dc69:	83 c4 10             	add    esp,0x10
c001dc6c:	45                   	inc    ebp
c001dc6d:	eb db                	jmp    c001dc4a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001dc6f:	43                   	inc    ebx
c001dc70:	eb c8                	jmp    c001dc3a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001dc72:	83 c4 1c             	add    esp,0x1c
c001dc75:	5b                   	pop    ebx
c001dc76:	5e                   	pop    esi
c001dc77:	5f                   	pop    edi
c001dc78:	5d                   	pop    ebp
c001dc79:	c3                   	ret    
c001dc7a:	66 90                	xchg   ax,ax

c001dc7c <ACPI::close(int, int, void*)>:
c001dc7c:	83 ec 1c             	sub    esp,0x1c
c001dc7f:	83 ec 0c             	sub    esp,0xc
c001dc82:	68 bc 26 03 c0       	push   0xc00326bc
c001dc87:	e8 45 b8 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001dc8c:	83 c4 10             	add    esp,0x10
c001dc8f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001dc97:	74 1b                	je     c001dcb4 <ACPI::close(int, int, void*)+0x38>
c001dc99:	83 ec 0c             	sub    esp,0xc
c001dc9c:	68 cb 26 03 c0       	push   0xc00326cb
c001dca1:	e8 2b b8 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001dca6:	83 c4 10             	add    esp,0x10
c001dca9:	b8 00 00 00 00       	mov    eax,0x0
c001dcae:	e9 01 01 00 00       	jmp    c001ddb4 <ACPI::close(int, int, void*)+0x138>
c001dcb3:	90                   	nop
c001dcb4:	83 ec 0c             	sub    esp,0xc
c001dcb7:	68 dc 26 03 c0       	push   0xc00326dc
c001dcbc:	e8 10 b8 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001dcc1:	83 c4 10             	add    esp,0x10
c001dcc4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001dcc9:	75 45                	jne    c001dd10 <ACPI::close(int, int, void*)+0x94>
c001dccb:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001dcd0:	83 ec 08             	sub    esp,0x8
c001dcd3:	50                   	push   eax
c001dcd4:	68 eb 26 03 c0       	push   0xc00326eb
c001dcd9:	e8 f3 b7 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001dcde:	83 c4 10             	add    esp,0x10
c001dce1:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001dce6:	85 c0                	test   eax,eax
c001dce8:	74 0a                	je     c001dcf4 <ACPI::close(int, int, void*)+0x78>
c001dcea:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001dcef:	ff d0                	call   eax
c001dcf1:	8d 76 00             	lea    esi,[esi+0x0]
c001dcf4:	83 ec 0c             	sub    esp,0xc
c001dcf7:	68 bc 28 03 c0       	push   0xc00328bc
c001dcfc:	e8 e9 27 00 00       	call   c00204ea <KePanic(char const*)>
c001dd01:	83 c4 10             	add    esp,0x10
c001dd04:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001dd09:	e9 a6 00 00 00       	jmp    c001ddb4 <ACPI::close(int, int, void*)+0x138>
c001dd0e:	66 90                	xchg   ax,ax
c001dd10:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001dd15:	0f 85 81 00 00 00    	jne    c001dd9c <ACPI::close(int, int, void*)+0x120>
c001dd1b:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001dd20:	83 ec 08             	sub    esp,0x8
c001dd23:	50                   	push   eax
c001dd24:	68 09 27 03 c0       	push   0xc0032709
c001dd29:	e8 a3 b7 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001dd2e:	83 c4 10             	add    esp,0x10
c001dd31:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001dd36:	85 c0                	test   eax,eax
c001dd38:	74 0a                	je     c001dd44 <ACPI::close(int, int, void*)+0xc8>
c001dd3a:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001dd3f:	ff d0                	call   eax
c001dd41:	8d 76 00             	lea    esi,[esi+0x0]
c001dd44:	83 ec 0c             	sub    esp,0xc
c001dd47:	68 24 27 03 c0       	push   0xc0032724
c001dd4c:	e8 80 b7 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001dd51:	83 c4 10             	add    esp,0x10
c001dd54:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001dd59:	8d 76 00             	lea    esi,[esi+0x0]
c001dd5c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dd61:	83 e0 02             	and    eax,0x2
c001dd64:	74 1e                	je     c001dd84 <ACPI::close(int, int, void*)+0x108>
c001dd66:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001dd6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd71:	89 c2                	mov    edx,eax
c001dd73:	ec                   	in     al,dx
c001dd74:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001dd78:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001dd7c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dd80:	eb da                	jmp    c001dd5c <ACPI::close(int, int, void*)+0xe0>
c001dd82:	66 90                	xchg   ax,ax
c001dd84:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001dd8b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001dd90:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001dd94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dd98:	ee                   	out    dx,al
c001dd99:	8d 76 00             	lea    esi,[esi+0x0]
c001dd9c:	83 ec 0c             	sub    esp,0xc
c001dd9f:	68 36 27 03 c0       	push   0xc0032736
c001dda4:	e8 28 b7 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001dda9:	83 c4 10             	add    esp,0x10
c001ddac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ddb1:	8d 76 00             	lea    esi,[esi+0x0]
c001ddb4:	83 c4 1c             	add    esp,0x1c
c001ddb7:	c3                   	ret    

c001ddb8 <findRSDP()>:
c001ddb8:	83 ec 1c             	sub    esp,0x1c
c001ddbb:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001ddc0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ddc6:	83 e0 04             	and    eax,0x4
c001ddc9:	0f b6 c0             	movzx  eax,al
c001ddcc:	85 c0                	test   eax,eax
c001ddce:	75 08                	jne    c001ddd8 <findRSDP()+0x20>
c001ddd0:	b8 00 00 00 00       	mov    eax,0x0
c001ddd5:	eb 75                	jmp    c001de4c <findRSDP()+0x94>
c001ddd7:	90                   	nop
c001ddd8:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c001dddd:	3d ff 07 00 00       	cmp    eax,0x7ff
c001dde2:	7f 1c                	jg     c001de00 <findRSDP()+0x48>
c001dde4:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dde9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001ddef:	83 e2 fb             	and    edx,0xfffffffb
c001ddf2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001ddf8:	b8 00 00 00 00       	mov    eax,0x0
c001ddfd:	eb 4d                	jmp    c001de4c <findRSDP()+0x94>
c001ddff:	90                   	nop
c001de00:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001de08:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001de10:	77 32                	ja     c001de44 <findRSDP()+0x8c>
c001de12:	83 ec 04             	sub    esp,0x4
c001de15:	6a 08                	push   0x8
c001de17:	68 45 27 03 c0       	push   0xc0032745
c001de1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001de20:	e8 5b 25 fe ff       	call   c0000380 <memcmp>
c001de25:	83 c4 10             	add    esp,0x10
c001de28:	85 c0                	test   eax,eax
c001de2a:	0f 94 c0             	sete   al
c001de2d:	0f b6 c0             	movzx  eax,al
c001de30:	85 c0                	test   eax,eax
c001de32:	74 08                	je     c001de3c <findRSDP()+0x84>
c001de34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de38:	eb 12                	jmp    c001de4c <findRSDP()+0x94>
c001de3a:	66 90                	xchg   ax,ax
c001de3c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001de41:	eb c5                	jmp    c001de08 <findRSDP()+0x50>
c001de43:	90                   	nop
c001de44:	b8 00 00 00 00       	mov    eax,0x0
c001de49:	8d 76 00             	lea    esi,[esi+0x0]
c001de4c:	83 c4 1c             	add    esp,0x1c
c001de4f:	c3                   	ret    

c001de50 <loadACPITables(unsigned char*)>:
c001de50:	57                   	push   edi
c001de51:	56                   	push   esi
c001de52:	53                   	push   ebx
c001de53:	83 ec 60             	sub    esp,0x60
c001de56:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001de5b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001de61:	83 e0 04             	and    eax,0x4
c001de64:	0f b6 c0             	movzx  eax,al
c001de67:	85 c0                	test   eax,eax
c001de69:	0f 84 41 02 00 00    	je     c001e0b0 <loadACPITables(unsigned char*)+0x260>
c001de6f:	a0 20 f6 03 c0       	mov    al,ds:0xc003f620
c001de74:	0f b6 c0             	movzx  eax,al
c001de77:	85 c0                	test   eax,eax
c001de79:	74 79                	je     c001def4 <loadACPITables(unsigned char*)+0xa4>
c001de7b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001de7f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001de83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001de87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001de8a:	83 e8 24             	sub    eax,0x24
c001de8d:	c1 e8 03             	shr    eax,0x3
c001de90:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001de94:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001de9c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001dea0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001dea4:	0f 8d ba 00 00 00    	jge    c001df64 <loadACPITables(unsigned char*)+0x114>
c001deaa:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001deae:	83 c0 24             	add    eax,0x24
c001deb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001deb5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001deb9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001debd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001dec1:	c1 e0 03             	shl    eax,0x3
c001dec4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001dec8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001decc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001decf:	8b 00                	mov    eax,DWORD PTR [eax]
c001ded1:	89 c1                	mov    ecx,eax
c001ded3:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001ded8:	8d 50 01             	lea    edx,[eax+0x1]
c001dedb:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001dee1:	89 ca                	mov    edx,ecx
c001dee3:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001deea:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c001deef:	eb ab                	jmp    c001de9c <loadACPITables(unsigned char*)+0x4c>
c001def1:	8d 76 00             	lea    esi,[esi+0x0]
c001def4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001def8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001defc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001df00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001df03:	83 e8 24             	sub    eax,0x24
c001df06:	c1 e8 02             	shr    eax,0x2
c001df09:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001df0d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001df15:	8d 76 00             	lea    esi,[esi+0x0]
c001df18:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001df1c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001df20:	7d 42                	jge    c001df64 <loadACPITables(unsigned char*)+0x114>
c001df22:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001df26:	83 c0 24             	add    eax,0x24
c001df29:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001df2d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001df31:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001df35:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001df39:	c1 e0 02             	shl    eax,0x2
c001df3c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001df40:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001df44:	8b 08                	mov    ecx,DWORD PTR [eax]
c001df46:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001df4b:	8d 50 01             	lea    edx,[eax+0x1]
c001df4e:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001df54:	89 ca                	mov    edx,ecx
c001df56:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001df5d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c001df62:	eb b4                	jmp    c001df18 <loadACPITables(unsigned char*)+0xc8>
c001df64:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001df6c:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001df71:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001df75:	0f 8d 39 01 00 00    	jge    c001e0b4 <loadACPITables(unsigned char*)+0x264>
c001df7b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001df7f:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001df86:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001df8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df8e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001df92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df96:	25 ff 0f 00 00       	and    eax,0xfff
c001df9b:	89 c6                	mov    esi,eax
c001df9d:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001dfa3:	83 ec 0c             	sub    esp,0xc
c001dfa6:	6a 01                	push   0x1
c001dfa8:	e8 ec a1 ff ff       	call   c0018199 <Virt::allocateKernelVirtualPages(int)>
c001dfad:	83 c4 10             	add    esp,0x10
c001dfb0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001dfb4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dfba:	83 ec 0c             	sub    esp,0xc
c001dfbd:	6a 01                	push   0x1
c001dfbf:	6a 01                	push   0x1
c001dfc1:	50                   	push   eax
c001dfc2:	52                   	push   edx
c001dfc3:	53                   	push   ebx
c001dfc4:	e8 dd aa ff ff       	call   c0018aa6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dfc9:	83 c4 20             	add    esp,0x20
c001dfcc:	09 f0                	or     eax,esi
c001dfce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dfd2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dfd6:	c1 e0 03             	shl    eax,0x3
c001dfd9:	05 20 f4 03 c0       	add    eax,0xc003f420
c001dfde:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dfe2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dfe6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dfea:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001dff2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dff6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dffa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dffe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e002:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e006:	89 c6                	mov    esi,eax
c001e008:	89 d7                	mov    edi,edx
c001e00a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e00c:	89 c8                	mov    eax,ecx
c001e00e:	89 fa                	mov    edx,edi
c001e010:	89 f3                	mov    ebx,esi
c001e012:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e016:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e01a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e01e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e022:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e025:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e029:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e02d:	05 00 10 00 00       	add    eax,0x1000
c001e032:	c1 e8 0c             	shr    eax,0xc
c001e035:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e039:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e03d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e041:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e045:	25 ff 0f 00 00       	and    eax,0xfff
c001e04a:	89 c6                	mov    esi,eax
c001e04c:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001e052:	83 ec 0c             	sub    esp,0xc
c001e055:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e059:	e8 3b a1 ff ff       	call   c0018199 <Virt::allocateKernelVirtualPages(int)>
c001e05e:	83 c4 10             	add    esp,0x10
c001e061:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e065:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e06b:	83 ec 0c             	sub    esp,0xc
c001e06e:	6a 01                	push   0x1
c001e070:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e074:	50                   	push   eax
c001e075:	52                   	push   edx
c001e076:	53                   	push   ebx
c001e077:	e8 2a aa ff ff       	call   c0018aa6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e07c:	83 c4 20             	add    esp,0x20
c001e07f:	09 f0                	or     eax,esi
c001e081:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e085:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e089:	83 ec 0c             	sub    esp,0xc
c001e08c:	50                   	push   eax
c001e08d:	e8 25 a4 ff ff       	call   c00184b7 <Virt::freeKernelVirtualPages(unsigned long)>
c001e092:	83 c4 10             	add    esp,0x10
c001e095:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e099:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e09d:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001e0a4:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c001e0a9:	e9 be fe ff ff       	jmp    c001df6c <loadACPITables(unsigned char*)+0x11c>
c001e0ae:	66 90                	xchg   ax,ax
c001e0b0:	90                   	nop
c001e0b1:	8d 76 00             	lea    esi,[esi+0x0]
c001e0b4:	83 c4 60             	add    esp,0x60
c001e0b7:	5b                   	pop    ebx
c001e0b8:	5e                   	pop    esi
c001e0b9:	5f                   	pop    edi
c001e0ba:	c3                   	ret    
c001e0bb:	90                   	nop

c001e0bc <findRSDT(unsigned char*)>:
c001e0bc:	57                   	push   edi
c001e0bd:	56                   	push   esi
c001e0be:	53                   	push   ebx
c001e0bf:	83 ec 50             	sub    esp,0x50
c001e0c2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e0c7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e0cd:	83 e0 04             	and    eax,0x4
c001e0d0:	0f b6 c0             	movzx  eax,al
c001e0d3:	85 c0                	test   eax,eax
c001e0d5:	75 0d                	jne    c001e0e4 <findRSDT(unsigned char*)+0x28>
c001e0d7:	b8 00 00 00 00       	mov    eax,0x0
c001e0dc:	e9 2b 01 00 00       	jmp    c001e20c <findRSDT(unsigned char*)+0x150>
c001e0e1:	8d 76 00             	lea    esi,[esi+0x0]
c001e0e4:	89 e0                	mov    eax,esp
c001e0e6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001e0ea:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001e0ee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001e0f2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001e0fa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e0fe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e102:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e106:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e10a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e10e:	89 c6                	mov    esi,eax
c001e110:	89 d7                	mov    edi,edx
c001e112:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e114:	89 c8                	mov    eax,ecx
c001e116:	89 fa                	mov    edx,edi
c001e118:	89 f3                	mov    ebx,esi
c001e11a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001e11e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e122:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e126:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e12a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001e12e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001e136:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e13a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e13e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e146:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001e14a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e14e:	25 ff 0f 00 00       	and    eax,0xfff
c001e153:	89 c6                	mov    esi,eax
c001e155:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001e15b:	83 ec 0c             	sub    esp,0xc
c001e15e:	6a 02                	push   0x2
c001e160:	e8 34 a0 ff ff       	call   c0018199 <Virt::allocateKernelVirtualPages(int)>
c001e165:	83 c4 10             	add    esp,0x10
c001e168:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001e16c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e172:	83 ec 0c             	sub    esp,0xc
c001e175:	6a 01                	push   0x1
c001e177:	6a 02                	push   0x2
c001e179:	50                   	push   eax
c001e17a:	52                   	push   edx
c001e17b:	53                   	push   ebx
c001e17c:	e8 25 a9 ff ff       	call   c0018aa6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e181:	83 c4 20             	add    esp,0x20
c001e184:	09 f0                	or     eax,esi
c001e186:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e18a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e18e:	25 ff 0f 00 00       	and    eax,0xfff
c001e193:	89 c6                	mov    esi,eax
c001e195:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001e19b:	83 ec 0c             	sub    esp,0xc
c001e19e:	6a 02                	push   0x2
c001e1a0:	e8 f4 9f ff ff       	call   c0018199 <Virt::allocateKernelVirtualPages(int)>
c001e1a5:	83 c4 10             	add    esp,0x10
c001e1a8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e1ac:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e1b2:	83 ec 0c             	sub    esp,0xc
c001e1b5:	6a 01                	push   0x1
c001e1b7:	6a 02                	push   0x2
c001e1b9:	50                   	push   eax
c001e1ba:	52                   	push   edx
c001e1bb:	53                   	push   ebx
c001e1bc:	e8 e5 a8 ff ff       	call   c0018aa6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e1c1:	83 c4 20             	add    esp,0x20
c001e1c4:	09 f0                	or     eax,esi
c001e1c6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001e1ca:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001e1cf:	85 c0                	test   eax,eax
c001e1d1:	75 11                	jne    c001e1e4 <findRSDT(unsigned char*)+0x128>
c001e1d3:	c6 05 20 f6 03 c0 00 	mov    BYTE PTR ds:0xc003f620,0x0
c001e1da:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e1de:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e1e2:	eb 24                	jmp    c001e208 <findRSDT(unsigned char*)+0x14c>
c001e1e4:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001e1e9:	83 f8 02             	cmp    eax,0x2
c001e1ec:	75 12                	jne    c001e200 <findRSDT(unsigned char*)+0x144>
c001e1ee:	c6 05 20 f6 03 c0 01 	mov    BYTE PTR ds:0xc003f620,0x1
c001e1f5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e1f9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e1fd:	eb 09                	jmp    c001e208 <findRSDT(unsigned char*)+0x14c>
c001e1ff:	90                   	nop
c001e200:	b8 00 00 00 00       	mov    eax,0x0
c001e205:	eb 05                	jmp    c001e20c <findRSDT(unsigned char*)+0x150>
c001e207:	90                   	nop
c001e208:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e20c:	83 c4 50             	add    esp,0x50
c001e20f:	5b                   	pop    ebx
c001e210:	5e                   	pop    esi
c001e211:	5f                   	pop    edi
c001e212:	c3                   	ret    
c001e213:	90                   	nop

c001e214 <findDataTable(unsigned char*, char*)>:
c001e214:	83 ec 1c             	sub    esp,0x1c
c001e217:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e21c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e222:	83 e0 04             	and    eax,0x4
c001e225:	0f b6 c0             	movzx  eax,al
c001e228:	85 c0                	test   eax,eax
c001e22a:	75 08                	jne    c001e234 <findDataTable(unsigned char*, char*)+0x20>
c001e22c:	b8 00 00 00 00       	mov    eax,0x0
c001e231:	eb 5d                	jmp    c001e290 <findDataTable(unsigned char*, char*)+0x7c>
c001e233:	90                   	nop
c001e234:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e23c:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001e241:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001e245:	7d 41                	jge    c001e288 <findDataTable(unsigned char*, char*)+0x74>
c001e247:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e24b:	c1 e0 03             	shl    eax,0x3
c001e24e:	05 20 f4 03 c0       	add    eax,0xc003f420
c001e253:	83 ec 04             	sub    esp,0x4
c001e256:	6a 04                	push   0x4
c001e258:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e25c:	50                   	push   eax
c001e25d:	e8 1e 21 fe ff       	call   c0000380 <memcmp>
c001e262:	83 c4 10             	add    esp,0x10
c001e265:	85 c0                	test   eax,eax
c001e267:	0f 94 c0             	sete   al
c001e26a:	0f b6 c0             	movzx  eax,al
c001e26d:	85 c0                	test   eax,eax
c001e26f:	74 0f                	je     c001e280 <findDataTable(unsigned char*, char*)+0x6c>
c001e271:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e275:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001e27c:	eb 12                	jmp    c001e290 <findDataTable(unsigned char*, char*)+0x7c>
c001e27e:	66 90                	xchg   ax,ax
c001e280:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001e285:	eb b5                	jmp    c001e23c <findDataTable(unsigned char*, char*)+0x28>
c001e287:	90                   	nop
c001e288:	b8 00 00 00 00       	mov    eax,0x0
c001e28d:	8d 76 00             	lea    esi,[esi+0x0]
c001e290:	83 c4 1c             	add    esp,0x1c
c001e293:	c3                   	ret    

c001e294 <scanMADT()>:
c001e294:	53                   	push   ebx
c001e295:	83 ec 38             	sub    esp,0x38
c001e298:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001e29d:	25 00 04 00 00       	and    eax,0x400
c001e2a2:	74 14                	je     c001e2b8 <scanMADT()+0x24>
c001e2a4:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e2a9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e2af:	83 e2 fb             	and    edx,0xfffffffb
c001e2b2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e2b8:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e2bd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e2c3:	83 e0 04             	and    eax,0x4
c001e2c6:	0f b6 c0             	movzx  eax,al
c001e2c9:	85 c0                	test   eax,eax
c001e2cb:	0f 84 6b 04 00 00    	je     c001e73c <scanMADT()+0x4a8>
c001e2d1:	e8 e2 fa ff ff       	call   c001ddb8 <findRSDP()>
c001e2d6:	a3 2c f6 03 c0       	mov    ds:0xc003f62c,eax
c001e2db:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001e2e0:	85 c0                	test   eax,eax
c001e2e2:	75 1c                	jne    c001e300 <scanMADT()+0x6c>
c001e2e4:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e2e9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e2ef:	83 e2 fb             	and    edx,0xfffffffb
c001e2f2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e2f8:	e9 47 04 00 00       	jmp    c001e744 <scanMADT()+0x4b0>
c001e2fd:	8d 76 00             	lea    esi,[esi+0x0]
c001e300:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001e305:	83 ec 0c             	sub    esp,0xc
c001e308:	50                   	push   eax
c001e309:	e8 ae fd ff ff       	call   c001e0bc <findRSDT(unsigned char*)>
c001e30e:	83 c4 10             	add    esp,0x10
c001e311:	a3 28 f6 03 c0       	mov    ds:0xc003f628,eax
c001e316:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e31b:	85 c0                	test   eax,eax
c001e31d:	75 19                	jne    c001e338 <scanMADT()+0xa4>
c001e31f:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e324:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e32a:	83 e2 fb             	and    edx,0xfffffffb
c001e32d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e333:	e9 0c 04 00 00       	jmp    c001e744 <scanMADT()+0x4b0>
c001e338:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e33d:	83 ec 0c             	sub    esp,0xc
c001e340:	50                   	push   eax
c001e341:	e8 0a fb ff ff       	call   c001de50 <loadACPITables(unsigned char*)>
c001e346:	83 c4 10             	add    esp,0x10
c001e349:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e34e:	83 ec 08             	sub    esp,0x8
c001e351:	68 4e 27 03 c0       	push   0xc003274e
c001e356:	50                   	push   eax
c001e357:	e8 b8 fe ff ff       	call   c001e214 <findDataTable(unsigned char*, char*)>
c001e35c:	83 c4 10             	add    esp,0x10
c001e35f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e363:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001e368:	75 1a                	jne    c001e384 <scanMADT()+0xf0>
c001e36a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e36f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e375:	83 e2 fe             	and    edx,0xfffffffe
c001e378:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e37e:	e9 c1 03 00 00       	jmp    c001e744 <scanMADT()+0x4b0>
c001e383:	90                   	nop
c001e384:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001e38c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e390:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e393:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e397:	0f 87 a7 03 00 00    	ja     c001e744 <scanMADT()+0x4b0>
c001e39d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001e3a5:	0f 87 99 03 00 00    	ja     c001e744 <scanMADT()+0x4b0>
c001e3ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e3af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e3b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e3b7:	8d 50 01             	lea    edx,[eax+0x1]
c001e3ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e3be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e3c2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e3c6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001e3ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e3ce:	8d 50 01             	lea    edx,[eax+0x1]
c001e3d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e3d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e3d9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e3dd:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001e3e1:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c001e3e6:	83 f8 02             	cmp    eax,0x2
c001e3e9:	0f 86 51 03 00 00    	jbe    c001e740 <scanMADT()+0x4ac>
c001e3ef:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e3f4:	85 c0                	test   eax,eax
c001e3f6:	75 58                	jne    c001e450 <scanMADT()+0x1bc>
c001e3f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e3fc:	8d 50 01             	lea    edx,[eax+0x1]
c001e3ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e403:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e409:	0f b6 d2             	movzx  edx,dl
c001e40c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e410:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e414:	88 82 60 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07a0],al
c001e41a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e41e:	8d 50 01             	lea    edx,[eax+0x1]
c001e421:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e425:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e42b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e42e:	88 0d 20 f8 03 c0    	mov    BYTE PTR ds:0xc003f820,cl
c001e434:	0f b6 d2             	movzx  edx,dl
c001e437:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e43b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e43f:	88 82 40 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07c0],al
c001e445:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e44a:	e9 d9 02 00 00       	jmp    c001e728 <scanMADT()+0x494>
c001e44f:	90                   	nop
c001e450:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e455:	83 f8 01             	cmp    eax,0x1
c001e458:	0f 85 1a 01 00 00    	jne    c001e578 <scanMADT()+0x2e4>
c001e45e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e462:	8d 50 01             	lea    edx,[eax+0x1]
c001e465:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e469:	8a 15 e0 f6 03 c0    	mov    dl,BYTE PTR ds:0xc003f6e0
c001e46f:	0f b6 d2             	movzx  edx,dl
c001e472:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e476:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e47a:	88 82 00 f7 03 c0    	mov    BYTE PTR [edx-0x3ffc0900],al
c001e480:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c001e485:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e489:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e48d:	01 d0                	add    eax,edx
c001e48f:	83 c0 2c             	add    eax,0x2c
c001e492:	8a 00                	mov    al,BYTE PTR [eax]
c001e494:	0f b6 d0             	movzx  edx,al
c001e497:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e49b:	8d 48 01             	lea    ecx,[eax+0x1]
c001e49e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e4a2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e4a6:	0f b6 c0             	movzx  eax,al
c001e4a9:	c1 e0 08             	shl    eax,0x8
c001e4ac:	89 d1                	mov    ecx,edx
c001e4ae:	09 c1                	or     ecx,eax
c001e4b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e4b4:	8d 50 02             	lea    edx,[eax+0x2]
c001e4b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e4bb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e4bf:	0f b6 c0             	movzx  eax,al
c001e4c2:	c1 e0 10             	shl    eax,0x10
c001e4c5:	09 c1                	or     ecx,eax
c001e4c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e4cb:	8d 50 03             	lea    edx,[eax+0x3]
c001e4ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e4d2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e4d6:	0f b6 c0             	movzx  eax,al
c001e4d9:	c1 e0 18             	shl    eax,0x18
c001e4dc:	09 c1                	or     ecx,eax
c001e4de:	89 ca                	mov    edx,ecx
c001e4e0:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e4e5:	0f b6 c0             	movzx  eax,al
c001e4e8:	89 14 85 20 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc08e0],edx
c001e4ef:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e4f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e4f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e4fc:	01 d0                	add    eax,edx
c001e4fe:	83 c0 2c             	add    eax,0x2c
c001e501:	8a 00                	mov    al,BYTE PTR [eax]
c001e503:	0f b6 d0             	movzx  edx,al
c001e506:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e50a:	8d 48 01             	lea    ecx,[eax+0x1]
c001e50d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e511:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e515:	0f b6 c0             	movzx  eax,al
c001e518:	c1 e0 08             	shl    eax,0x8
c001e51b:	89 d1                	mov    ecx,edx
c001e51d:	09 c1                	or     ecx,eax
c001e51f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e523:	8d 50 02             	lea    edx,[eax+0x2]
c001e526:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e52a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e52e:	0f b6 c0             	movzx  eax,al
c001e531:	c1 e0 10             	shl    eax,0x10
c001e534:	09 c1                	or     ecx,eax
c001e536:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e53a:	8d 50 03             	lea    edx,[eax+0x3]
c001e53d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e541:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e545:	0f b6 c0             	movzx  eax,al
c001e548:	c1 e0 18             	shl    eax,0x18
c001e54b:	09 c1                	or     ecx,eax
c001e54d:	89 ca                	mov    edx,ecx
c001e54f:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e554:	0f b6 c0             	movzx  eax,al
c001e557:	89 14 85 a0 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0860],edx
c001e55e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e563:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e568:	83 c0 01             	add    eax,0x1
c001e56b:	a2 e0 f6 03 c0       	mov    ds:0xc003f6e0,al
c001e570:	e9 b3 01 00 00       	jmp    c001e728 <scanMADT()+0x494>
c001e575:	8d 76 00             	lea    esi,[esi+0x0]
c001e578:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e57d:	83 f8 02             	cmp    eax,0x2
c001e580:	0f 85 ea 00 00 00    	jne    c001e670 <scanMADT()+0x3dc>
c001e586:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e58a:	8d 50 01             	lea    edx,[eax+0x1]
c001e58d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e591:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e595:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e599:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001e59d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5a1:	8d 50 01             	lea    edx,[eax+0x1]
c001e5a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e5a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e5ac:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e5b0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e5b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e5b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5bc:	01 d0                	add    eax,edx
c001e5be:	83 c0 2c             	add    eax,0x2c
c001e5c1:	8a 00                	mov    al,BYTE PTR [eax]
c001e5c3:	0f b6 d0             	movzx  edx,al
c001e5c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5ca:	8d 48 01             	lea    ecx,[eax+0x1]
c001e5cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5d1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e5d5:	0f b6 c0             	movzx  eax,al
c001e5d8:	c1 e0 08             	shl    eax,0x8
c001e5db:	89 d1                	mov    ecx,edx
c001e5dd:	09 c1                	or     ecx,eax
c001e5df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5e3:	8d 50 02             	lea    edx,[eax+0x2]
c001e5e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5ea:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e5ee:	0f b6 c0             	movzx  eax,al
c001e5f1:	c1 e0 10             	shl    eax,0x10
c001e5f4:	09 c1                	or     ecx,eax
c001e5f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5fa:	8d 50 03             	lea    edx,[eax+0x3]
c001e5fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e601:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e605:	0f b6 c0             	movzx  eax,al
c001e608:	c1 e0 18             	shl    eax,0x18
c001e60b:	09 c8                	or     eax,ecx
c001e60d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e611:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e616:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e61a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e61e:	01 d0                	add    eax,edx
c001e620:	83 c0 2c             	add    eax,0x2c
c001e623:	8a 00                	mov    al,BYTE PTR [eax]
c001e625:	0f b6 c0             	movzx  eax,al
c001e628:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e62c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e62f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e633:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001e637:	0f b6 d2             	movzx  edx,dl
c001e63a:	c1 e2 08             	shl    edx,0x8
c001e63d:	09 d0                	or     eax,edx
c001e63f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001e644:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e649:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e64e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e652:	88 90 68 3f 03 c0    	mov    BYTE PTR [eax-0x3ffcc098],dl
c001e658:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001e65d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001e662:	66 89 84 12 c0 f6 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffc0940],ax
c001e66a:	e9 b9 00 00 00       	jmp    c001e728 <scanMADT()+0x494>
c001e66f:	90                   	nop
c001e670:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e675:	83 f8 04             	cmp    eax,0x4
c001e678:	0f 85 9a 00 00 00    	jne    c001e718 <scanMADT()+0x484>
c001e67e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e682:	8d 50 01             	lea    edx,[eax+0x1]
c001e685:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e689:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e68d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e691:	0f b6 c0             	movzx  eax,al
c001e694:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e698:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e69c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e6a0:	01 d0                	add    eax,edx
c001e6a2:	83 c0 2c             	add    eax,0x2c
c001e6a5:	8a 00                	mov    al,BYTE PTR [eax]
c001e6a7:	0f b6 d0             	movzx  edx,al
c001e6aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e6ae:	8d 48 01             	lea    ecx,[eax+0x1]
c001e6b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e6b5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e6b9:	0f b6 c0             	movzx  eax,al
c001e6bc:	c1 e0 08             	shl    eax,0x8
c001e6bf:	09 d0                	or     eax,edx
c001e6c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e6c5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e6ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e6ce:	8d 50 01             	lea    edx,[eax+0x1]
c001e6d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e6d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e6d9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e6dd:	0f b6 c0             	movzx  eax,al
c001e6e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e6e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6e8:	c1 e0 08             	shl    eax,0x8
c001e6eb:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001e6ef:	89 c1                	mov    ecx,eax
c001e6f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e6f5:	c1 e0 18             	shl    eax,0x18
c001e6f8:	89 c3                	mov    ebx,eax
c001e6fa:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c001e6ff:	8d 50 01             	lea    edx,[eax+0x1]
c001e702:	89 15 30 f6 03 c0    	mov    DWORD PTR ds:0xc003f630,edx
c001e708:	09 d9                	or     ecx,ebx
c001e70a:	89 ca                	mov    edx,ecx
c001e70c:	89 14 85 40 f6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc09c0],edx
c001e713:	eb 13                	jmp    c001e728 <scanMADT()+0x494>
c001e715:	8d 76 00             	lea    esi,[esi+0x0]
c001e718:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e71d:	83 f8 05             	cmp    eax,0x5
c001e720:	75 06                	jne    c001e728 <scanMADT()+0x494>
c001e722:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001e727:	90                   	nop
c001e728:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001e72d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e731:	01 d0                	add    eax,edx
c001e733:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e737:	e9 50 fc ff ff       	jmp    c001e38c <scanMADT()+0xf8>
c001e73c:	90                   	nop
c001e73d:	eb 05                	jmp    c001e744 <scanMADT()+0x4b0>
c001e73f:	90                   	nop
c001e740:	90                   	nop
c001e741:	8d 76 00             	lea    esi,[esi+0x0]
c001e744:	83 c4 38             	add    esp,0x38
c001e747:	5b                   	pop    ebx
c001e748:	c3                   	ret    
c001e749:	90                   	nop
c001e74a:	66 90                	xchg   ax,ax

c001e74c <ACPI::ACPI()>:
c001e74c:	83 ec 0c             	sub    esp,0xc
c001e74f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e753:	83 ec 08             	sub    esp,0x8
c001e756:	68 53 27 03 c0       	push   0xc0032753
c001e75b:	50                   	push   eax
c001e75c:	e8 53 cf ff ff       	call   c001b6b4 <Device::Device(char const*)>
c001e761:	83 c4 10             	add    esp,0x10
c001e764:	ba 60 29 03 c0       	mov    edx,0xc0032960
c001e769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e76d:	89 10                	mov    DWORD PTR [eax],edx
c001e76f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e773:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e77e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001e788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e78c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001e796:	e8 f9 fa ff ff       	call   c001e294 <scanMADT()>
c001e79b:	90                   	nop
c001e79c:	83 c4 0c             	add    esp,0xc
c001e79f:	c3                   	ret    

c001e7a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001e7a0:	83 ec 2c             	sub    esp,0x2c
c001e7a3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001e7a7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e7ab:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e7af:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001e7b3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001e7b8:	88 d0                	mov    al,dl
c001e7ba:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e7be:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e7c3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001e7cb:	90                   	nop
c001e7cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e7d0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e7d6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001e7da:	0f 8d b0 00 00 00    	jge    c001e890 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c001e7e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e7e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e7e8:	83 c2 2a             	add    edx,0x2a
c001e7eb:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001e7ef:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7f4:	0f b7 c0             	movzx  eax,ax
c001e7f7:	39 c2                	cmp    edx,eax
c001e7f9:	0f 85 85 00 00 00    	jne    c001e884 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e7ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e803:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e807:	83 c2 2a             	add    edx,0x2a
c001e80a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001e80e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001e813:	0f b6 c0             	movzx  eax,al
c001e816:	39 c2                	cmp    edx,eax
c001e818:	75 6a                	jne    c001e884 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e81a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e81f:	85 c0                	test   eax,eax
c001e821:	74 3d                	je     c001e860 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c001e823:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e827:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e82b:	83 c2 2a             	add    edx,0x2a
c001e82e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001e832:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e836:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e839:	39 c2                	cmp    edx,eax
c001e83b:	74 13                	je     c001e850 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c001e83d:	83 ec 0c             	sub    esp,0xc
c001e840:	68 e0 28 03 c0       	push   0xc00328e0
c001e845:	e8 a0 1c 00 00       	call   c00204ea <KePanic(char const*)>
c001e84a:	83 c4 10             	add    esp,0x10
c001e84d:	8d 76 00             	lea    esi,[esi+0x0]
c001e850:	83 ec 0c             	sub    esp,0xc
c001e853:	68 58 27 03 c0       	push   0xc0032758
c001e858:	e8 8d 1c 00 00       	call   c00204ea <KePanic(char const*)>
c001e85d:	83 c4 10             	add    esp,0x10
c001e860:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e864:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e868:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e86c:	83 c2 2a             	add    edx,0x2a
c001e86f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001e873:	8b 02                	mov    eax,DWORD PTR [edx]
c001e875:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e878:	89 01                	mov    DWORD PTR [ecx],eax
c001e87a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e87d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e882:	66 90                	xchg   ax,ax
c001e884:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001e889:	e9 3e ff ff ff       	jmp    c001e7cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c001e88e:	66 90                	xchg   ax,ax
c001e890:	90                   	nop
c001e891:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e895:	83 c4 2c             	add    esp,0x2c
c001e898:	c2 04 00             	ret    0x4
c001e89b:	90                   	nop

c001e89c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001e89c:	83 ec 1c             	sub    esp,0x1c
c001e89f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e8a3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001e8a7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e8ab:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001e8b0:	88 c8                	mov    al,cl
c001e8b2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e8b6:	88 d0                	mov    al,dl
c001e8b8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e8bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8c0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e8c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8ca:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e8cd:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001e8d1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001e8d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8d9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e8df:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e8e3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001e8e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8ea:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001e8ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8f3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e8f9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e8fd:	83 c0 01             	add    eax,0x1
c001e900:	88 c1                	mov    cl,al
c001e902:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e906:	83 c2 2a             	add    edx,0x2a
c001e909:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001e90d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e911:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e917:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e91b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e91e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e922:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001e926:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e92a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e930:	8d 50 01             	lea    edx,[eax+0x1]
c001e933:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e937:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001e93d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e941:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e947:	3d 00 02 00 00       	cmp    eax,0x200
c001e94c:	75 12                	jne    c001e960 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c001e94e:	83 ec 0c             	sub    esp,0xc
c001e951:	68 67 27 03 c0       	push   0xc0032767
c001e956:	e8 8f 1b 00 00       	call   c00204ea <KePanic(char const*)>
c001e95b:	83 c4 10             	add    esp,0x10
c001e95e:	66 90                	xchg   ax,ax
c001e960:	90                   	nop
c001e961:	83 c4 1c             	add    esp,0x1c
c001e964:	c3                   	ret    
c001e965:	90                   	nop
c001e966:	66 90                	xchg   ax,ax

c001e968 <ACPI::setScreenBrightnessLevel(void*, int)>:
c001e968:	b8 00 00 00 00       	mov    eax,0x0
c001e96d:	c3                   	ret    
c001e96e:	66 90                	xchg   ax,ax

c001e970 <ACPI::detectPCI()>:
c001e970:	53                   	push   ebx
c001e971:	83 ec 28             	sub    esp,0x28
c001e974:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e979:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001e97e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e983:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e989:	83 e0 04             	and    eax,0x4
c001e98c:	0f b6 c0             	movzx  eax,al
c001e98f:	85 c0                	test   eax,eax
c001e991:	74 2d                	je     c001e9c0 <ACPI::detectPCI()+0x50>
c001e993:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e998:	83 ec 08             	sub    esp,0x8
c001e99b:	68 84 27 03 c0       	push   0xc0032784
c001e9a0:	50                   	push   eax
c001e9a1:	e8 6e f8 ff ff       	call   c001e214 <findDataTable(unsigned char*, char*)>
c001e9a6:	83 c4 10             	add    esp,0x10
c001e9a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e9ad:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001e9b2:	74 0c                	je     c001e9c0 <ACPI::detectPCI()+0x50>
c001e9b4:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e9b9:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e9be:	66 90                	xchg   ax,ax
c001e9c0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c001e9c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e9cc:	8a 00                	mov    al,BYTE PTR [eax]
c001e9ce:	0f b6 c0             	movzx  eax,al
c001e9d1:	83 f8 01             	cmp    eax,0x1
c001e9d4:	75 0e                	jne    c001e9e4 <ACPI::detectPCI()+0x74>
c001e9d6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e9db:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e9e0:	eb 2e                	jmp    c001ea10 <ACPI::detectPCI()+0xa0>
c001e9e2:	66 90                	xchg   ax,ax
c001e9e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e9e8:	8a 00                	mov    al,BYTE PTR [eax]
c001e9ea:	0f b6 c0             	movzx  eax,al
c001e9ed:	83 f8 02             	cmp    eax,0x2
c001e9f0:	75 1e                	jne    c001ea10 <ACPI::detectPCI()+0xa0>
c001e9f2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e9f7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e9fc:	85 c0                	test   eax,eax
c001e9fe:	74 10                	je     c001ea10 <ACPI::detectPCI()+0xa0>
c001ea00:	83 ec 0c             	sub    esp,0xc
c001ea03:	68 10 29 03 c0       	push   0xc0032910
c001ea08:	e8 dd 1a 00 00       	call   c00204ea <KePanic(char const*)>
c001ea0d:	83 c4 10             	add    esp,0x10
c001ea10:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001ea14:	83 f0 01             	xor    eax,0x1
c001ea17:	0f b6 c0             	movzx  eax,al
c001ea1a:	85 c0                	test   eax,eax
c001ea1c:	74 46                	je     c001ea64 <ACPI::detectPCI()+0xf4>
c001ea1e:	e8 0d 17 fe ff       	call   c0000130 <manualPCIProbe>
c001ea23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ea27:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ea2c:	75 0e                	jne    c001ea3c <ACPI::detectPCI()+0xcc>
c001ea2e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001ea33:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001ea38:	eb 2a                	jmp    c001ea64 <ACPI::detectPCI()+0xf4>
c001ea3a:	66 90                	xchg   ax,ax
c001ea3c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001ea41:	75 21                	jne    c001ea64 <ACPI::detectPCI()+0xf4>
c001ea43:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001ea48:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ea4d:	85 c0                	test   eax,eax
c001ea4f:	74 13                	je     c001ea64 <ACPI::detectPCI()+0xf4>
c001ea51:	83 ec 0c             	sub    esp,0xc
c001ea54:	68 10 29 03 c0       	push   0xc0032910
c001ea59:	e8 8c 1a 00 00       	call   c00204ea <KePanic(char const*)>
c001ea5e:	83 c4 10             	add    esp,0x10
c001ea61:	8d 76 00             	lea    esi,[esi+0x0]
c001ea64:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001ea69:	85 c0                	test   eax,eax
c001ea6b:	0f 84 87 00 00 00    	je     c001eaf8 <ACPI::detectPCI()+0x188>
c001ea71:	83 ec 0c             	sub    esp,0xc
c001ea74:	68 89 27 03 c0       	push   0xc0032789
c001ea79:	e8 09 13 00 00       	call   c001fd87 <KeSetBootMessage(char const*)>
c001ea7e:	83 c4 10             	add    esp,0x10
c001ea81:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001ea89:	83 ec 0c             	sub    esp,0xc
c001ea8c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ea90:	e8 ae 7b ff ff       	call   c0016643 <malloc>
c001ea95:	83 c4 10             	add    esp,0x10
c001ea98:	89 c3                	mov    ebx,eax
c001ea9a:	83 ec 0c             	sub    esp,0xc
c001ea9d:	53                   	push   ebx
c001ea9e:	e8 89 b8 00 00       	call   c002a32c <PCI::PCI()>
c001eaa3:	83 c4 10             	add    esp,0x10
c001eaa6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001eaaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001eaae:	83 ec 08             	sub    esp,0x8
c001eab1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001eab5:	50                   	push   eax
c001eab6:	e8 97 ca ff ff       	call   c001b552 <Device::addChild(Device*)>
c001eabb:	83 c4 10             	add    esp,0x10
c001eabe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eac2:	8b 00                	mov    eax,DWORD PTR [eax]
c001eac4:	83 c0 08             	add    eax,0x8
c001eac7:	8b 00                	mov    eax,DWORD PTR [eax]
c001eac9:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c001eace:	85 d2                	test   edx,edx
c001ead0:	74 0a                	je     c001eadc <ACPI::detectPCI()+0x16c>
c001ead2:	ba 01 00 00 00       	mov    edx,0x1
c001ead7:	eb 0b                	jmp    c001eae4 <ACPI::detectPCI()+0x174>
c001ead9:	8d 76 00             	lea    esi,[esi+0x0]
c001eadc:	ba 02 00 00 00       	mov    edx,0x2
c001eae1:	8d 76 00             	lea    esi,[esi+0x0]
c001eae4:	6a 00                	push   0x0
c001eae6:	6a 00                	push   0x0
c001eae8:	52                   	push   edx
c001eae9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001eaed:	ff d0                	call   eax
c001eaef:	83 c4 10             	add    esp,0x10
c001eaf2:	e9 91 00 00 00       	jmp    c001eb88 <ACPI::detectPCI()+0x218>
c001eaf7:	90                   	nop
c001eaf8:	83 ec 0c             	sub    esp,0xc
c001eafb:	68 a1 27 03 c0       	push   0xc00327a1
c001eb00:	e8 82 12 00 00       	call   c001fd87 <KeSetBootMessage(char const*)>
c001eb05:	83 c4 10             	add    esp,0x10
c001eb08:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c001eb0f:	83 ec 0c             	sub    esp,0xc
c001eb12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001eb16:	e8 28 7b ff ff       	call   c0016643 <malloc>
c001eb1b:	83 c4 10             	add    esp,0x10
c001eb1e:	89 c3                	mov    ebx,eax
c001eb20:	83 ec 0c             	sub    esp,0xc
c001eb23:	53                   	push   ebx
c001eb24:	e8 9d c3 00 00       	call   c002aec6 <IDE::IDE()>
c001eb29:	83 c4 10             	add    esp,0x10
c001eb2c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001eb30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001eb34:	83 ec 08             	sub    esp,0x8
c001eb37:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001eb3b:	50                   	push   eax
c001eb3c:	e8 11 ca ff ff       	call   c001b552 <Device::addChild(Device*)>
c001eb41:	83 c4 10             	add    esp,0x10
c001eb44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eb48:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001eb52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eb56:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001eb5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eb63:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001eb6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eb70:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb72:	83 c0 08             	add    eax,0x8
c001eb75:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb77:	6a 00                	push   0x0
c001eb79:	6a 00                	push   0x0
c001eb7b:	6a 00                	push   0x0
c001eb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001eb81:	ff d0                	call   eax
c001eb83:	83 c4 10             	add    esp,0x10
c001eb86:	66 90                	xchg   ax,ax
c001eb88:	90                   	nop
c001eb89:	83 c4 28             	add    esp,0x28
c001eb8c:	5b                   	pop    ebx
c001eb8d:	c3                   	ret    
c001eb8e:	66 90                	xchg   ax,ax

c001eb90 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001eb90:	83 ec 1c             	sub    esp,0x1c
c001eb93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001eb97:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001eb9a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001eb9e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001eba3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001eba8:	83 ec 08             	sub    esp,0x8
c001ebab:	52                   	push   edx
c001ebac:	50                   	push   eax
c001ebad:	e8 66 70 ff ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c001ebb2:	83 c4 10             	add    esp,0x10
c001ebb5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001ebb9:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001ebbe:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001ebc3:	83 ec 04             	sub    esp,0x4
c001ebc6:	6a 01                	push   0x1
c001ebc8:	52                   	push   edx
c001ebc9:	50                   	push   eax
c001ebca:	e8 63 71 ff ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c001ebcf:	83 c4 10             	add    esp,0x10
c001ebd2:	90                   	nop
c001ebd3:	83 c4 1c             	add    esp,0x1c
c001ebd6:	c3                   	ret    
c001ebd7:	90                   	nop

c001ebd8 <ACPI::sleep()>:
c001ebd8:	83 ec 0c             	sub    esp,0xc
c001ebdb:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001ebe0:	85 c0                	test   eax,eax
c001ebe2:	74 08                	je     c001ebec <ACPI::sleep()+0x14>
c001ebe4:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001ebe9:	ff d0                	call   eax
c001ebeb:	90                   	nop
c001ebec:	90                   	nop
c001ebed:	83 c4 0c             	add    esp,0xc
c001ebf0:	c3                   	ret    
c001ebf1:	90                   	nop
c001ebf2:	66 90                	xchg   ax,ax

c001ebf4 <ACPI::open(int, int, void*)>:
c001ebf4:	57                   	push   edi
c001ebf5:	56                   	push   esi
c001ebf6:	53                   	push   ebx
c001ebf7:	81 ec 70 01 00 00    	sub    esp,0x170
c001ebfd:	83 ec 0c             	sub    esp,0xc
c001ec00:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001ec07:	e8 64 fd ff ff       	call   c001e970 <ACPI::detectPCI()>
c001ec0c:	83 c4 10             	add    esp,0x10
c001ec0f:	83 ec 0c             	sub    esp,0xc
c001ec12:	68 38 29 03 c0       	push   0xc0032938
c001ec17:	e8 6b 11 00 00       	call   c001fd87 <KeSetBootMessage(char const*)>
c001ec1c:	83 c4 10             	add    esp,0x10
c001ec1f:	b8 4c 05 00 00       	mov    eax,0x54c
c001ec24:	8a 00                	mov    al,BYTE PTR [eax]
c001ec26:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c001ec2d:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c001ec35:	83 f8 01             	cmp    eax,0x1
c001ec38:	75 12                	jne    c001ec4c <ACPI::open(int, int, void*)+0x58>
c001ec3a:	83 ec 0c             	sub    esp,0xc
c001ec3d:	68 b6 27 03 c0       	push   0xc00327b6
c001ec42:	e8 bc 53 00 00       	call   c0024003 <Thr::loadKernelSymbolTable(char const*)>
c001ec47:	83 c4 10             	add    esp,0x10
c001ec4a:	eb 34                	jmp    c001ec80 <ACPI::open(int, int, void*)+0x8c>
c001ec4c:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c001ec54:	3d bb 00 00 00       	cmp    eax,0xbb
c001ec59:	75 15                	jne    c001ec70 <ACPI::open(int, int, void*)+0x7c>
c001ec5b:	83 ec 0c             	sub    esp,0xc
c001ec5e:	68 d4 27 03 c0       	push   0xc00327d4
c001ec63:	e8 9b 53 00 00       	call   c0024003 <Thr::loadKernelSymbolTable(char const*)>
c001ec68:	83 c4 10             	add    esp,0x10
c001ec6b:	eb 13                	jmp    c001ec80 <ACPI::open(int, int, void*)+0x8c>
c001ec6d:	8d 76 00             	lea    esi,[esi+0x0]
c001ec70:	83 ec 0c             	sub    esp,0xc
c001ec73:	68 f2 27 03 c0       	push   0xc00327f2
c001ec78:	e8 6d 18 00 00       	call   c00204ea <KePanic(char const*)>
c001ec7d:	83 c4 10             	add    esp,0x10
c001ec80:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c001ec88:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c001ec93:	83 ec 0c             	sub    esp,0xc
c001ec96:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001ec9d:	e8 a1 79 ff ff       	call   c0016643 <malloc>
c001eca2:	83 c4 10             	add    esp,0x10
c001eca5:	89 c3                	mov    ebx,eax
c001eca7:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ecac:	83 ec 04             	sub    esp,0x4
c001ecaf:	50                   	push   eax
c001ecb0:	68 0c 28 03 c0       	push   0xc003280c
c001ecb5:	53                   	push   ebx
c001ecb6:	e8 1d ba ff ff       	call   c001a6d8 <File::File(char const*, Process*)>
c001ecbb:	83 c4 10             	add    esp,0x10
c001ecbe:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c001ecc5:	83 ec 08             	sub    esp,0x8
c001ecc8:	6a 01                	push   0x1
c001ecca:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001ecd1:	e8 20 ba ff ff       	call   c001a6f6 <File::open(FileOpenMode)>
c001ecd6:	83 c4 10             	add    esp,0x10
c001ecd9:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c001ece0:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c001ece8:	75 16                	jne    c001ed00 <ACPI::open(int, int, void*)+0x10c>
c001ecea:	83 ec 0c             	sub    esp,0xc
c001eced:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001ecf4:	e8 5b ba ff ff       	call   c001a754 <File::close()>
c001ecf9:	83 c4 10             	add    esp,0x10
c001ecfc:	eb 0a                	jmp    c001ed08 <ACPI::open(int, int, void*)+0x114>
c001ecfe:	66 90                	xchg   ax,ax
c001ed00:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c001ed08:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c001ed10:	74 1e                	je     c001ed30 <ACPI::open(int, int, void*)+0x13c>
c001ed12:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c001ed19:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed1b:	83 c0 08             	add    eax,0x8
c001ed1e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed20:	83 ec 0c             	sub    esp,0xc
c001ed23:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001ed2a:	ff d0                	call   eax
c001ed2c:	83 c4 10             	add    esp,0x10
c001ed2f:	90                   	nop
c001ed30:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c001ed37:	83 f0 01             	xor    eax,0x1
c001ed3a:	0f b6 c0             	movzx  eax,al
c001ed3d:	85 c0                	test   eax,eax
c001ed3f:	74 43                	je     c001ed84 <ACPI::open(int, int, void*)+0x190>
c001ed41:	83 ec 0c             	sub    esp,0xc
c001ed44:	68 2a 28 03 c0       	push   0xc003282a
c001ed49:	e8 39 10 00 00       	call   c001fd87 <KeSetBootMessage(char const*)>
c001ed4e:	83 c4 10             	add    esp,0x10
c001ed51:	83 ec 04             	sub    esp,0x4
c001ed54:	6a 0c                	push   0xc
c001ed56:	68 45 28 03 c0       	push   0xc0032845
c001ed5b:	68 56 28 03 c0       	push   0xc0032856
c001ed60:	e8 da 44 00 00       	call   c002323f <Reg::readIntWithDefault(char*, char*, int)>
c001ed65:	83 c4 10             	add    esp,0x10
c001ed68:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c001ed6f:	83 ec 0c             	sub    esp,0xc
c001ed72:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c001ed79:	e8 4a 96 ff ff       	call   c00183c8 <Virt::setupPageSwapping(int)>
c001ed7e:	83 c4 10             	add    esp,0x10
c001ed81:	8d 76 00             	lea    esi,[esi+0x0]
c001ed84:	83 ec 0c             	sub    esp,0xc
c001ed87:	68 44 12 03 c0       	push   0xc0031244
c001ed8c:	e8 f6 0f 00 00       	call   c001fd87 <KeSetBootMessage(char const*)>
c001ed91:	83 c4 10             	add    esp,0x10
c001ed94:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c001ed9b:	83 ec 08             	sub    esp,0x8
c001ed9e:	6a 13                	push   0x13
c001eda0:	50                   	push   eax
c001eda1:	e8 da ca ff ff       	call   c001b880 <getDevicesOfType(DeviceType)>
c001eda6:	83 c4 0c             	add    esp,0xc
c001eda9:	8d 76 00             	lea    esi,[esi+0x0]
c001edac:	83 ec 0c             	sub    esp,0xc
c001edaf:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001edb6:	50                   	push   eax
c001edb7:	e8 24 03 01 00       	call   c002f0e0 <LinkedList<Device>::isEmpty()>
c001edbc:	83 c4 10             	add    esp,0x10
c001edbf:	83 f0 01             	xor    eax,0x1
c001edc2:	0f b6 c0             	movzx  eax,al
c001edc5:	85 c0                	test   eax,eax
c001edc7:	0f 84 47 01 00 00    	je     c001ef14 <ACPI::open(int, int, void*)+0x320>
c001edcd:	83 ec 0c             	sub    esp,0xc
c001edd0:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001edd7:	50                   	push   eax
c001edd8:	e8 1f 03 01 00       	call   c002f0fc <LinkedList<Device>::getFirstElement()>
c001eddd:	83 c4 10             	add    esp,0x10
c001ede0:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c001ede7:	83 ec 0c             	sub    esp,0xc
c001edea:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001edf1:	50                   	push   eax
c001edf2:	e8 0d 03 01 00       	call   c002f104 <LinkedList<Device>::removeFirst()>
c001edf7:	83 c4 10             	add    esp,0x10
c001edfa:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c001ee01:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c001ee08:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c001ee0f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee13:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001ee19:	ba 09 00 00 00       	mov    edx,0x9
c001ee1e:	fc                   	cld    
c001ee1f:	89 c7                	mov    edi,eax
c001ee21:	89 de                	mov    esi,ebx
c001ee23:	89 d1                	mov    ecx,edx
c001ee25:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ee27:	83 ec 08             	sub    esp,0x8
c001ee2a:	8d 44 24 38          	lea    eax,[esp+0x38]
c001ee2e:	50                   	push   eax
c001ee2f:	83 ec 24             	sub    esp,0x24
c001ee32:	89 e0                	mov    eax,esp
c001ee34:	89 c3                	mov    ebx,eax
c001ee36:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ee3a:	ba 09 00 00 00       	mov    edx,0x9
c001ee3f:	89 df                	mov    edi,ebx
c001ee41:	89 c6                	mov    esi,eax
c001ee43:	89 d1                	mov    ecx,edx
c001ee45:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ee47:	e8 ca b9 00 00       	call   c002a816 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001ee4c:	83 c4 30             	add    esp,0x30
c001ee4f:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001ee56:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001ee5e:	0f 84 48 ff ff ff    	je     c001edac <ACPI::open(int, int, void*)+0x1b8>
c001ee64:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001ee6f:	83 ec 0c             	sub    esp,0xc
c001ee72:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ee79:	e8 c5 77 ff ff       	call   c0016643 <malloc>
c001ee7e:	83 c4 10             	add    esp,0x10
c001ee81:	89 c3                	mov    ebx,eax
c001ee83:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ee88:	83 ec 04             	sub    esp,0x4
c001ee8b:	50                   	push   eax
c001ee8c:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ee93:	53                   	push   ebx
c001ee94:	e8 3f b8 ff ff       	call   c001a6d8 <File::File(char const*, Process*)>
c001ee99:	83 c4 10             	add    esp,0x10
c001ee9c:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c001eea3:	83 ec 0c             	sub    esp,0xc
c001eea6:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001eead:	e8 08 bb ff ff       	call   c001a9ba <File::exists()>
c001eeb2:	83 c4 10             	add    esp,0x10
c001eeb5:	0f b6 c0             	movzx  eax,al
c001eeb8:	85 c0                	test   eax,eax
c001eeba:	74 28                	je     c001eee4 <ACPI::open(int, int, void*)+0x2f0>
c001eebc:	83 ec 08             	sub    esp,0x8
c001eebf:	6a 01                	push   0x1
c001eec1:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001eec8:	e8 b0 5b 00 00       	call   c0024a7d <Thr::loadDLL(char const*, bool)>
c001eecd:	83 c4 10             	add    esp,0x10
c001eed0:	83 ec 08             	sub    esp,0x8
c001eed3:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001eeda:	50                   	push   eax
c001eedb:	e8 ef 5d 00 00       	call   c0024ccf <Thr::executeDLL(unsigned long, void*)>
c001eee0:	83 c4 10             	add    esp,0x10
c001eee3:	90                   	nop
c001eee4:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001eeec:	0f 84 ba fe ff ff    	je     c001edac <ACPI::open(int, int, void*)+0x1b8>
c001eef2:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c001eef9:	8b 00                	mov    eax,DWORD PTR [eax]
c001eefb:	83 c0 08             	add    eax,0x8
c001eefe:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef00:	83 ec 0c             	sub    esp,0xc
c001ef03:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ef0a:	ff d0                	call   eax
c001ef0c:	83 c4 10             	add    esp,0x10
c001ef0f:	e9 98 fe ff ff       	jmp    c001edac <ACPI::open(int, int, void*)+0x1b8>
c001ef14:	83 ec 0c             	sub    esp,0xc
c001ef17:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001ef1e:	50                   	push   eax
c001ef1f:	e8 b8 01 01 00       	call   c002f0dc <LinkedList<Device>::~LinkedList()>
c001ef24:	83 c4 10             	add    esp,0x10
c001ef27:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001ef2d:	83 ec 08             	sub    esp,0x8
c001ef30:	6a 01                	push   0x1
c001ef32:	68 5d 28 03 c0       	push   0xc003285d
c001ef37:	e8 41 5b 00 00       	call   c0024a7d <Thr::loadDLL(char const*, bool)>
c001ef3c:	83 c4 10             	add    esp,0x10
c001ef3f:	83 ec 08             	sub    esp,0x8
c001ef42:	53                   	push   ebx
c001ef43:	50                   	push   eax
c001ef44:	e8 86 5d 00 00       	call   c0024ccf <Thr::executeDLL(unsigned long, void*)>
c001ef49:	83 c4 10             	add    esp,0x10
c001ef4c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001ef51:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ef57:	83 e0 04             	and    eax,0x4
c001ef5a:	0f b6 c0             	movzx  eax,al
c001ef5d:	85 c0                	test   eax,eax
c001ef5f:	0f 84 1b 01 00 00    	je     c001f080 <ACPI::open(int, int, void*)+0x48c>
c001ef65:	83 ec 0c             	sub    esp,0xc
c001ef68:	68 7a 28 03 c0       	push   0xc003287a
c001ef6d:	e8 15 0e 00 00       	call   c001fd87 <KeSetBootMessage(char const*)>
c001ef72:	83 c4 10             	add    esp,0x10
c001ef75:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001ef80:	83 ec 0c             	sub    esp,0xc
c001ef83:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001ef8a:	e8 b4 76 ff ff       	call   c0016643 <malloc>
c001ef8f:	83 c4 10             	add    esp,0x10
c001ef92:	89 c3                	mov    ebx,eax
c001ef94:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ef99:	83 ec 04             	sub    esp,0x4
c001ef9c:	50                   	push   eax
c001ef9d:	68 97 28 03 c0       	push   0xc0032897
c001efa2:	53                   	push   ebx
c001efa3:	e8 30 b7 ff ff       	call   c001a6d8 <File::File(char const*, Process*)>
c001efa8:	83 c4 10             	add    esp,0x10
c001efab:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001efb2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001efba:	74 20                	je     c001efdc <ACPI::open(int, int, void*)+0x3e8>
c001efbc:	83 ec 0c             	sub    esp,0xc
c001efbf:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001efc6:	e8 ef b9 ff ff       	call   c001a9ba <File::exists()>
c001efcb:	83 c4 10             	add    esp,0x10
c001efce:	0f b6 c0             	movzx  eax,al
c001efd1:	85 c0                	test   eax,eax
c001efd3:	74 07                	je     c001efdc <ACPI::open(int, int, void*)+0x3e8>
c001efd5:	b0 01                	mov    al,0x1
c001efd7:	eb 07                	jmp    c001efe0 <ACPI::open(int, int, void*)+0x3ec>
c001efd9:	8d 76 00             	lea    esi,[esi+0x0]
c001efdc:	b0 00                	mov    al,0x0
c001efde:	66 90                	xchg   ax,ax
c001efe0:	0f b6 c0             	movzx  eax,al
c001efe3:	85 c0                	test   eax,eax
c001efe5:	74 25                	je     c001f00c <ACPI::open(int, int, void*)+0x418>
c001efe7:	83 ec 08             	sub    esp,0x8
c001efea:	6a 01                	push   0x1
c001efec:	68 97 28 03 c0       	push   0xc0032897
c001eff1:	e8 87 5a 00 00       	call   c0024a7d <Thr::loadDLL(char const*, bool)>
c001eff6:	83 c4 10             	add    esp,0x10
c001eff9:	83 ec 08             	sub    esp,0x8
c001effc:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c001f003:	50                   	push   eax
c001f004:	e8 c6 5c 00 00       	call   c0024ccf <Thr::executeDLL(unsigned long, void*)>
c001f009:	83 c4 10             	add    esp,0x10
c001f00c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001f014:	74 2a                	je     c001f040 <ACPI::open(int, int, void*)+0x44c>
c001f016:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001f01e:	74 20                	je     c001f040 <ACPI::open(int, int, void*)+0x44c>
c001f020:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001f027:	8b 00                	mov    eax,DWORD PTR [eax]
c001f029:	83 c0 08             	add    eax,0x8
c001f02c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f02e:	83 ec 0c             	sub    esp,0xc
c001f031:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001f038:	ff d0                	call   eax
c001f03a:	83 c4 10             	add    esp,0x10
c001f03d:	8d 76 00             	lea    esi,[esi+0x0]
c001f040:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001f045:	83 ec 08             	sub    esp,0x8
c001f048:	68 b4 28 03 c0       	push   0xc00328b4
c001f04d:	50                   	push   eax
c001f04e:	e8 c1 f1 ff ff       	call   c001e214 <findDataTable(unsigned char*, char*)>
c001f053:	83 c4 10             	add    esp,0x10
c001f056:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c001f05d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001f065:	74 19                	je     c001f080 <ACPI::open(int, int, void*)+0x48c>
c001f067:	83 ec 08             	sub    esp,0x8
c001f06a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001f071:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001f078:	e8 13 fb ff ff       	call   c001eb90 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001f07d:	83 c4 10             	add    esp,0x10
c001f080:	b8 00 00 00 00       	mov    eax,0x0
c001f085:	81 c4 70 01 00 00    	add    esp,0x170
c001f08b:	5b                   	pop    ebx
c001f08c:	5e                   	pop    esi
c001f08d:	5f                   	pop    edi
c001f08e:	c3                   	ret    
c001f08f:	90                   	nop

c001f090 <CPU::close(int, int, void*)>:
c001f090:	31 c0                	xor    eax,eax
c001f092:	c3                   	ret    
c001f093:	90                   	nop

c001f094 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001f094:	60                   	pusha  
c001f095:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f099:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f09d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f0a1:	9c                   	pushf  
c001f0a2:	fa                   	cli    
c001f0a3:	0f 09                	wbinvd 
c001f0a5:	0f 30                	wrmsr  
c001f0a7:	9d                   	popf   
c001f0a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f0ac:	89 02                	mov    DWORD PTR [edx],eax
c001f0ae:	61                   	popa   
c001f0af:	c3                   	ret    

c001f0b0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001f0b0:	60                   	pusha  
c001f0b1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f0b5:	9c                   	pushf  
c001f0b6:	fa                   	cli    
c001f0b7:	0f 09                	wbinvd 
c001f0b9:	31 c0                	xor    eax,eax
c001f0bb:	31 d2                	xor    edx,edx
c001f0bd:	0f 32                	rdmsr  
c001f0bf:	9d                   	popf   
c001f0c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f0c4:	89 02                	mov    DWORD PTR [edx],eax
c001f0c6:	61                   	popa   
c001f0c7:	c3                   	ret    

c001f0c8 <CPU::AMD_K6_writeback(int, int, int)>:
c001f0c8:	56                   	push   esi
c001f0c9:	53                   	push   ebx
c001f0ca:	83 ec 10             	sub    esp,0x10
c001f0cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f0d1:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001f0d6:	75 5d                	jne    c001f135 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001f0d8:	83 f8 08             	cmp    eax,0x8
c001f0db:	75 09                	jne    c001f0e6 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001f0dd:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001f0e2:	7e 13                	jle    c001f0f7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001f0e4:	eb 30                	jmp    c001f116 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001f0e6:	83 f8 06             	cmp    eax,0x6
c001f0e9:	7c 4a                	jl     c001f135 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001f0eb:	83 f8 07             	cmp    eax,0x7
c001f0ee:	7e 07                	jle    c001f0f7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001f0f0:	83 f8 09             	cmp    eax,0x9
c001f0f3:	74 21                	je     c001f116 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001f0f5:	eb 3e                	jmp    c001f135 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001f0f7:	89 e6                	mov    esi,esp
c001f0f9:	8b 1d e0 a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9e0
c001f0ff:	56                   	push   esi
c001f100:	c1 eb 15             	shr    ebx,0x15
c001f103:	68 82 00 00 c0       	push   0xc0000082
c001f108:	83 e3 7e             	and    ebx,0x7e
c001f10b:	e8 a0 ff ff ff       	call   c001f0b0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001f110:	56                   	push   esi
c001f111:	6a 00                	push   0x0
c001f113:	53                   	push   ebx
c001f114:	eb 12                	jmp    c001f128 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001f116:	89 e3                	mov    ebx,esp
c001f118:	53                   	push   ebx
c001f119:	68 82 00 00 c0       	push   0xc0000082
c001f11e:	e8 8d ff ff ff       	call   c001f0b0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001f123:	53                   	push   ebx
c001f124:	6a 00                	push   0x0
c001f126:	6a 00                	push   0x0
c001f128:	68 82 00 00 c0       	push   0xc0000082
c001f12d:	e8 62 ff ff ff       	call   c001f094 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001f132:	83 c4 18             	add    esp,0x18
c001f135:	83 c4 10             	add    esp,0x10
c001f138:	5b                   	pop    ebx
c001f139:	5e                   	pop    esi
c001f13a:	c3                   	ret    
c001f13b:	90                   	nop

c001f13c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001f13c:	55                   	push   ebp
c001f13d:	57                   	push   edi
c001f13e:	56                   	push   esi
c001f13f:	53                   	push   ebx
c001f140:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f144:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f148:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f14c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001f150:	39 05 78 3f 03 c0    	cmp    DWORD PTR ds:0xc0033f78,eax
c001f156:	75 23                	jne    c001f17b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001f158:	a1 8c f8 03 c0       	mov    eax,ds:0xc003f88c
c001f15d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f161:	89 06                	mov    DWORD PTR [esi],eax
c001f163:	a1 88 f8 03 c0       	mov    eax,ds:0xc003f888
c001f168:	89 07                	mov    DWORD PTR [edi],eax
c001f16a:	a1 84 f8 03 c0       	mov    eax,ds:0xc003f884
c001f16f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001f172:	a1 80 f8 03 c0       	mov    eax,ds:0xc003f880
c001f177:	89 02                	mov    DWORD PTR [edx],eax
c001f179:	eb 3f                	jmp    c001f1ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001f17b:	31 c9                	xor    ecx,ecx
c001f17d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f181:	0f a2                	cpuid  
c001f183:	89 06                	mov    DWORD PTR [esi],eax
c001f185:	89 1f                	mov    DWORD PTR [edi],ebx
c001f187:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f18b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001f18e:	89 10                	mov    DWORD PTR [eax],edx
c001f190:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f194:	a3 78 3f 03 c0       	mov    ds:0xc0033f78,eax
c001f199:	8b 06                	mov    eax,DWORD PTR [esi]
c001f19b:	a3 8c f8 03 c0       	mov    ds:0xc003f88c,eax
c001f1a0:	8b 07                	mov    eax,DWORD PTR [edi]
c001f1a2:	a3 88 f8 03 c0       	mov    ds:0xc003f888,eax
c001f1a7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f1aa:	a3 84 f8 03 c0       	mov    ds:0xc003f884,eax
c001f1af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f1b3:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1b5:	a3 80 f8 03 c0       	mov    ds:0xc003f880,eax
c001f1ba:	5b                   	pop    ebx
c001f1bb:	5e                   	pop    esi
c001f1bc:	5f                   	pop    edi
c001f1bd:	5d                   	pop    ebp
c001f1be:	c3                   	ret    
c001f1bf:	90                   	nop

c001f1c0 <CPU::cpuidCheckEDX(unsigned int)>:
c001f1c0:	83 ec 10             	sub    esp,0x10
c001f1c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1c7:	50                   	push   eax
c001f1c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1cc:	50                   	push   eax
c001f1cd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1d1:	50                   	push   eax
c001f1d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1d6:	50                   	push   eax
c001f1d7:	6a 01                	push   0x1
c001f1d9:	e8 5e ff ff ff       	call   c001f13c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f1de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f1e2:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001f1e6:	0f 95 c0             	setne  al
c001f1e9:	83 c4 24             	add    esp,0x24
c001f1ec:	c3                   	ret    
c001f1ed:	90                   	nop

c001f1ee <CPU::cpuidCheckECX(unsigned int)>:
c001f1ee:	83 ec 10             	sub    esp,0x10
c001f1f1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1f5:	50                   	push   eax
c001f1f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1fa:	50                   	push   eax
c001f1fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1ff:	50                   	push   eax
c001f200:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f204:	50                   	push   eax
c001f205:	6a 01                	push   0x1
c001f207:	e8 30 ff ff ff       	call   c001f13c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f20c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f210:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001f214:	0f 95 c0             	setne  al
c001f217:	83 c4 24             	add    esp,0x24
c001f21a:	c3                   	ret    
c001f21b:	90                   	nop

c001f21c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001f21c:	83 ec 10             	sub    esp,0x10
c001f21f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f223:	50                   	push   eax
c001f224:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f228:	50                   	push   eax
c001f229:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f22d:	50                   	push   eax
c001f22e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f232:	50                   	push   eax
c001f233:	6a 07                	push   0x7
c001f235:	e8 02 ff ff ff       	call   c001f13c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f23a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f23e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001f242:	0f 95 c0             	setne  al
c001f245:	83 c4 24             	add    esp,0x24
c001f248:	c3                   	ret    
c001f249:	90                   	nop

c001f24a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001f24a:	83 ec 10             	sub    esp,0x10
c001f24d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f251:	50                   	push   eax
c001f252:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f256:	50                   	push   eax
c001f257:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f25b:	50                   	push   eax
c001f25c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f260:	50                   	push   eax
c001f261:	6a 07                	push   0x7
c001f263:	e8 d4 fe ff ff       	call   c001f13c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f268:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f26c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001f270:	0f 95 c0             	setne  al
c001f273:	83 c4 24             	add    esp,0x24
c001f276:	c3                   	ret    
c001f277:	90                   	nop

c001f278 <CPU::CPU()>:
c001f278:	83 ec 0c             	sub    esp,0xc
c001f27b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f27f:	83 ec 08             	sub    esp,0x8
c001f282:	68 75 2a 03 c0       	push   0xc0032a75
c001f287:	50                   	push   eax
c001f288:	e8 27 c4 ff ff       	call   c001b6b4 <Device::Device(char const*)>
c001f28d:	83 c4 10             	add    esp,0x10
c001f290:	ba 08 2b 03 c0       	mov    edx,0xc0032b08
c001f295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f299:	89 10                	mov    DWORD PTR [eax],edx
c001f29b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f29f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001f2a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2ad:	05 78 01 00 00       	add    eax,0x178
c001f2b2:	83 ec 0c             	sub    esp,0xc
c001f2b5:	50                   	push   eax
c001f2b6:	e8 41 6b ff ff       	call   c0015dfc <GDT::GDT()>
c001f2bb:	83 c4 10             	add    esp,0x10
c001f2be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2c2:	05 7c 09 00 00       	add    eax,0x97c
c001f2c7:	83 ec 0c             	sub    esp,0xc
c001f2ca:	50                   	push   eax
c001f2cb:	e8 7c 6d ff ff       	call   c001604c <IDT::IDT()>
c001f2d0:	83 c4 10             	add    esp,0x10
c001f2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2d7:	05 7c 11 00 00       	add    eax,0x117c
c001f2dc:	83 ec 0c             	sub    esp,0xc
c001f2df:	50                   	push   eax
c001f2e0:	e8 eb 87 ff ff       	call   c0017ad0 <TSS::TSS()>
c001f2e5:	83 c4 10             	add    esp,0x10
c001f2e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2ec:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001f2f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2f7:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001f301:	90                   	nop
c001f302:	83 c4 0c             	add    esp,0xc
c001f305:	c3                   	ret    

c001f306 <CPU::displayFeatures()>:
c001f306:	c3                   	ret    
c001f307:	90                   	nop

c001f308 <CPU::detectFeatures()>:
c001f308:	55                   	push   ebp
c001f309:	57                   	push   edi
c001f30a:	56                   	push   esi
c001f30b:	53                   	push   ebx
c001f30c:	83 ec 30             	sub    esp,0x30
c001f30f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f313:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001f31d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001f324:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001f32a:	6a 0d                	push   0xd
c001f32c:	6a 00                	push   0x0
c001f32e:	55                   	push   ebp
c001f32f:	e8 bc 11 fe ff       	call   c00004f0 <memset>
c001f334:	83 c4 10             	add    esp,0x10
c001f337:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f33c:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001f343:	0f 84 db 05 00 00    	je     c001f924 <CPU::detectFeatures()+0x61c>
c001f349:	83 ec 0c             	sub    esp,0xc
c001f34c:	89 ef                	mov    edi,ebp
c001f34e:	6a 10                	push   0x10
c001f350:	e8 6b fe ff ff       	call   c001f1c0 <CPU::cpuidCheckEDX(unsigned int)>
c001f355:	83 e0 01             	and    eax,0x1
c001f358:	8d 14 00             	lea    edx,[eax+eax*1]
c001f35b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f361:	83 e0 fd             	and    eax,0xfffffffd
c001f364:	09 d0                	or     eax,edx
c001f366:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f36c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001f373:	e8 48 fe ff ff       	call   c001f1c0 <CPU::cpuidCheckEDX(unsigned int)>
c001f378:	83 e0 01             	and    eax,0x1
c001f37b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f382:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f388:	83 e0 fb             	and    eax,0xfffffffb
c001f38b:	09 d0                	or     eax,edx
c001f38d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f393:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001f39a:	e8 21 fe ff ff       	call   c001f1c0 <CPU::cpuidCheckEDX(unsigned int)>
c001f39f:	83 e0 01             	and    eax,0x1
c001f3a2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f3a9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f3af:	83 e0 f7             	and    eax,0xfffffff7
c001f3b2:	09 d0                	or     eax,edx
c001f3b4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f3ba:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001f3c1:	e8 fa fd ff ff       	call   c001f1c0 <CPU::cpuidCheckEDX(unsigned int)>
c001f3c6:	83 e0 01             	and    eax,0x1
c001f3c9:	c1 e0 04             	shl    eax,0x4
c001f3cc:	89 c2                	mov    edx,eax
c001f3ce:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f3d4:	83 e0 ef             	and    eax,0xffffffef
c001f3d7:	09 d0                	or     eax,edx
c001f3d9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f3df:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001f3e6:	e8 d5 fd ff ff       	call   c001f1c0 <CPU::cpuidCheckEDX(unsigned int)>
c001f3eb:	83 e0 01             	and    eax,0x1
c001f3ee:	c1 e0 05             	shl    eax,0x5
c001f3f1:	89 c2                	mov    edx,eax
c001f3f3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f3f9:	83 e0 df             	and    eax,0xffffffdf
c001f3fc:	09 d0                	or     eax,edx
c001f3fe:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f404:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f40b:	e8 b0 fd ff ff       	call   c001f1c0 <CPU::cpuidCheckEDX(unsigned int)>
c001f410:	83 e0 01             	and    eax,0x1
c001f413:	8d 14 00             	lea    edx,[eax+eax*1]
c001f416:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f41c:	83 e0 fd             	and    eax,0xfffffffd
c001f41f:	09 d0                	or     eax,edx
c001f421:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f427:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001f42e:	e8 8d fd ff ff       	call   c001f1c0 <CPU::cpuidCheckEDX(unsigned int)>
c001f433:	83 e0 01             	and    eax,0x1
c001f436:	c1 e0 06             	shl    eax,0x6
c001f439:	89 c2                	mov    edx,eax
c001f43b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f441:	83 e0 bf             	and    eax,0xffffffbf
c001f444:	09 d0                	or     eax,edx
c001f446:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f44c:	58                   	pop    eax
c001f44d:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f451:	50                   	push   eax
c001f452:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f456:	50                   	push   eax
c001f457:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f45b:	56                   	push   esi
c001f45c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f460:	50                   	push   eax
c001f461:	6a 00                	push   0x0
c001f463:	e8 d4 fc ff ff       	call   c001f13c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f468:	b8 04 00 00 00       	mov    eax,0x4
c001f46d:	89 c1                	mov    ecx,eax
c001f46f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f471:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001f477:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001f47b:	89 c1                	mov    ecx,eax
c001f47d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f47f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001f485:	8d 74 24 38          	lea    esi,[esp+0x38]
c001f489:	89 c1                	mov    ecx,eax
c001f48b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f48d:	83 c4 18             	add    esp,0x18
c001f490:	68 84 29 03 c0       	push   0xc0032984
c001f495:	55                   	push   ebp
c001f496:	e8 b5 12 fe ff       	call   c0000750 <strcmp>
c001f49b:	83 c4 10             	add    esp,0x10
c001f49e:	85 c0                	test   eax,eax
c001f4a0:	75 0f                	jne    c001f4b1 <CPU::detectFeatures()+0x1a9>
c001f4a2:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001f4ac:	e9 22 02 00 00       	jmp    c001f6d3 <CPU::detectFeatures()+0x3cb>
c001f4b1:	50                   	push   eax
c001f4b2:	50                   	push   eax
c001f4b3:	68 91 29 03 c0       	push   0xc0032991
c001f4b8:	55                   	push   ebp
c001f4b9:	e8 92 12 fe ff       	call   c0000750 <strcmp>
c001f4be:	83 c4 10             	add    esp,0x10
c001f4c1:	85 c0                	test   eax,eax
c001f4c3:	74 dd                	je     c001f4a2 <CPU::detectFeatures()+0x19a>
c001f4c5:	50                   	push   eax
c001f4c6:	50                   	push   eax
c001f4c7:	68 9e 29 03 c0       	push   0xc003299e
c001f4cc:	55                   	push   ebp
c001f4cd:	e8 7e 12 fe ff       	call   c0000750 <strcmp>
c001f4d2:	83 c4 10             	add    esp,0x10
c001f4d5:	85 c0                	test   eax,eax
c001f4d7:	74 2a                	je     c001f503 <CPU::detectFeatures()+0x1fb>
c001f4d9:	50                   	push   eax
c001f4da:	50                   	push   eax
c001f4db:	68 ab 29 03 c0       	push   0xc00329ab
c001f4e0:	55                   	push   ebp
c001f4e1:	e8 6a 12 fe ff       	call   c0000750 <strcmp>
c001f4e6:	83 c4 10             	add    esp,0x10
c001f4e9:	85 c0                	test   eax,eax
c001f4eb:	74 16                	je     c001f503 <CPU::detectFeatures()+0x1fb>
c001f4ed:	50                   	push   eax
c001f4ee:	50                   	push   eax
c001f4ef:	68 b8 29 03 c0       	push   0xc00329b8
c001f4f4:	55                   	push   ebp
c001f4f5:	e8 56 12 fe ff       	call   c0000750 <strcmp>
c001f4fa:	83 c4 10             	add    esp,0x10
c001f4fd:	85 c0                	test   eax,eax
c001f4ff:	74 48                	je     c001f549 <CPU::detectFeatures()+0x241>
c001f501:	eb 0f                	jmp    c001f512 <CPU::detectFeatures()+0x20a>
c001f503:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001f50d:	e9 c1 01 00 00       	jmp    c001f6d3 <CPU::detectFeatures()+0x3cb>
c001f512:	50                   	push   eax
c001f513:	50                   	push   eax
c001f514:	68 c5 29 03 c0       	push   0xc00329c5
c001f519:	55                   	push   ebp
c001f51a:	e8 31 12 fe ff       	call   c0000750 <strcmp>
c001f51f:	83 c4 10             	add    esp,0x10
c001f522:	85 c0                	test   eax,eax
c001f524:	74 23                	je     c001f549 <CPU::detectFeatures()+0x241>
c001f526:	57                   	push   edi
c001f527:	57                   	push   edi
c001f528:	68 d2 29 03 c0       	push   0xc00329d2
c001f52d:	55                   	push   ebp
c001f52e:	e8 1d 12 fe ff       	call   c0000750 <strcmp>
c001f533:	83 c4 10             	add    esp,0x10
c001f536:	85 c0                	test   eax,eax
c001f538:	75 1e                	jne    c001f558 <CPU::detectFeatures()+0x250>
c001f53a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f544:	e9 8a 01 00 00       	jmp    c001f6d3 <CPU::detectFeatures()+0x3cb>
c001f549:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001f553:	e9 7b 01 00 00       	jmp    c001f6d3 <CPU::detectFeatures()+0x3cb>
c001f558:	56                   	push   esi
c001f559:	56                   	push   esi
c001f55a:	68 df 29 03 c0       	push   0xc00329df
c001f55f:	55                   	push   ebp
c001f560:	e8 eb 11 fe ff       	call   c0000750 <strcmp>
c001f565:	83 c4 10             	add    esp,0x10
c001f568:	85 c0                	test   eax,eax
c001f56a:	75 0f                	jne    c001f57b <CPU::detectFeatures()+0x273>
c001f56c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001f576:	e9 58 01 00 00       	jmp    c001f6d3 <CPU::detectFeatures()+0x3cb>
c001f57b:	51                   	push   ecx
c001f57c:	51                   	push   ecx
c001f57d:	68 9e 29 03 c0       	push   0xc003299e
c001f582:	55                   	push   ebp
c001f583:	e8 c8 11 fe ff       	call   c0000750 <strcmp>
c001f588:	83 c4 10             	add    esp,0x10
c001f58b:	85 c0                	test   eax,eax
c001f58d:	75 0f                	jne    c001f59e <CPU::detectFeatures()+0x296>
c001f58f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001f599:	e9 35 01 00 00       	jmp    c001f6d3 <CPU::detectFeatures()+0x3cb>
c001f59e:	52                   	push   edx
c001f59f:	52                   	push   edx
c001f5a0:	68 ec 29 03 c0       	push   0xc00329ec
c001f5a5:	55                   	push   ebp
c001f5a6:	e8 a5 11 fe ff       	call   c0000750 <strcmp>
c001f5ab:	83 c4 10             	add    esp,0x10
c001f5ae:	85 c0                	test   eax,eax
c001f5b0:	75 0f                	jne    c001f5c1 <CPU::detectFeatures()+0x2b9>
c001f5b2:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001f5bc:	e9 12 01 00 00       	jmp    c001f6d3 <CPU::detectFeatures()+0x3cb>
c001f5c1:	50                   	push   eax
c001f5c2:	50                   	push   eax
c001f5c3:	68 f9 29 03 c0       	push   0xc00329f9
c001f5c8:	55                   	push   ebp
c001f5c9:	e8 82 11 fe ff       	call   c0000750 <strcmp>
c001f5ce:	83 c4 10             	add    esp,0x10
c001f5d1:	85 c0                	test   eax,eax
c001f5d3:	75 0f                	jne    c001f5e4 <CPU::detectFeatures()+0x2dc>
c001f5d5:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001f5df:	e9 ef 00 00 00       	jmp    c001f6d3 <CPU::detectFeatures()+0x3cb>
c001f5e4:	50                   	push   eax
c001f5e5:	50                   	push   eax
c001f5e6:	68 06 2a 03 c0       	push   0xc0032a06
c001f5eb:	55                   	push   ebp
c001f5ec:	e8 5f 11 fe ff       	call   c0000750 <strcmp>
c001f5f1:	83 c4 10             	add    esp,0x10
c001f5f4:	85 c0                	test   eax,eax
c001f5f6:	75 0f                	jne    c001f607 <CPU::detectFeatures()+0x2ff>
c001f5f8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001f602:	e9 cc 00 00 00       	jmp    c001f6d3 <CPU::detectFeatures()+0x3cb>
c001f607:	50                   	push   eax
c001f608:	50                   	push   eax
c001f609:	68 13 2a 03 c0       	push   0xc0032a13
c001f60e:	55                   	push   ebp
c001f60f:	e8 3c 11 fe ff       	call   c0000750 <strcmp>
c001f614:	83 c4 10             	add    esp,0x10
c001f617:	85 c0                	test   eax,eax
c001f619:	75 0f                	jne    c001f62a <CPU::detectFeatures()+0x322>
c001f61b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001f625:	e9 a9 00 00 00       	jmp    c001f6d3 <CPU::detectFeatures()+0x3cb>
c001f62a:	50                   	push   eax
c001f62b:	50                   	push   eax
c001f62c:	68 20 2a 03 c0       	push   0xc0032a20
c001f631:	55                   	push   ebp
c001f632:	e8 19 11 fe ff       	call   c0000750 <strcmp>
c001f637:	83 c4 10             	add    esp,0x10
c001f63a:	85 c0                	test   eax,eax
c001f63c:	75 0f                	jne    c001f64d <CPU::detectFeatures()+0x345>
c001f63e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001f648:	e9 86 00 00 00       	jmp    c001f6d3 <CPU::detectFeatures()+0x3cb>
c001f64d:	50                   	push   eax
c001f64e:	50                   	push   eax
c001f64f:	68 2d 2a 03 c0       	push   0xc0032a2d
c001f654:	55                   	push   ebp
c001f655:	e8 f6 10 fe ff       	call   c0000750 <strcmp>
c001f65a:	83 c4 10             	add    esp,0x10
c001f65d:	85 c0                	test   eax,eax
c001f65f:	75 0c                	jne    c001f66d <CPU::detectFeatures()+0x365>
c001f661:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001f66b:	eb 66                	jmp    c001f6d3 <CPU::detectFeatures()+0x3cb>
c001f66d:	50                   	push   eax
c001f66e:	50                   	push   eax
c001f66f:	68 3a 2a 03 c0       	push   0xc0032a3a
c001f674:	55                   	push   ebp
c001f675:	e8 d6 10 fe ff       	call   c0000750 <strcmp>
c001f67a:	83 c4 10             	add    esp,0x10
c001f67d:	85 c0                	test   eax,eax
c001f67f:	75 0c                	jne    c001f68d <CPU::detectFeatures()+0x385>
c001f681:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001f68b:	eb 46                	jmp    c001f6d3 <CPU::detectFeatures()+0x3cb>
c001f68d:	57                   	push   edi
c001f68e:	57                   	push   edi
c001f68f:	68 47 2a 03 c0       	push   0xc0032a47
c001f694:	55                   	push   ebp
c001f695:	e8 b6 10 fe ff       	call   c0000750 <strcmp>
c001f69a:	83 c4 10             	add    esp,0x10
c001f69d:	85 c0                	test   eax,eax
c001f69f:	74 e0                	je     c001f681 <CPU::detectFeatures()+0x379>
c001f6a1:	56                   	push   esi
c001f6a2:	56                   	push   esi
c001f6a3:	68 54 2a 03 c0       	push   0xc0032a54
c001f6a8:	55                   	push   ebp
c001f6a9:	e8 a2 10 fe ff       	call   c0000750 <strcmp>
c001f6ae:	83 c4 10             	add    esp,0x10
c001f6b1:	85 c0                	test   eax,eax
c001f6b3:	74 cc                	je     c001f681 <CPU::detectFeatures()+0x379>
c001f6b5:	51                   	push   ecx
c001f6b6:	51                   	push   ecx
c001f6b7:	68 61 2a 03 c0       	push   0xc0032a61
c001f6bc:	55                   	push   ebp
c001f6bd:	e8 8e 10 fe ff       	call   c0000750 <strcmp>
c001f6c2:	83 c4 10             	add    esp,0x10
c001f6c5:	85 c0                	test   eax,eax
c001f6c7:	74 b8                	je     c001f681 <CPU::detectFeatures()+0x379>
c001f6c9:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001f6d3:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001f6d8:	0f 86 be 00 00 00    	jbe    c001f79c <CPU::detectFeatures()+0x494>
c001f6de:	83 ec 0c             	sub    esp,0xc
c001f6e1:	68 80 00 00 00       	push   0x80
c001f6e6:	e8 31 fb ff ff       	call   c001f21c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f6eb:	83 e0 01             	and    eax,0x1
c001f6ee:	c1 e0 06             	shl    eax,0x6
c001f6f1:	89 c2                	mov    edx,eax
c001f6f3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f6f9:	83 e0 bf             	and    eax,0xffffffbf
c001f6fc:	09 d0                	or     eax,edx
c001f6fe:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f704:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001f70b:	e8 0c fb ff ff       	call   c001f21c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f710:	83 e0 01             	and    eax,0x1
c001f713:	c1 e0 04             	shl    eax,0x4
c001f716:	89 c2                	mov    edx,eax
c001f718:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f71e:	83 e0 ef             	and    eax,0xffffffef
c001f721:	09 d0                	or     eax,edx
c001f723:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f729:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001f730:	e8 e7 fa ff ff       	call   c001f21c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f735:	89 c2                	mov    edx,eax
c001f737:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f73d:	c1 e2 07             	shl    edx,0x7
c001f740:	83 e0 7f             	and    eax,0x7f
c001f743:	09 d0                	or     eax,edx
c001f745:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f74b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f752:	e8 f3 fa ff ff       	call   c001f24a <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f757:	83 e0 01             	and    eax,0x1
c001f75a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f761:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f767:	83 e0 f7             	and    eax,0xfffffff7
c001f76a:	09 d0                	or     eax,edx
c001f76c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f772:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001f779:	e8 cc fa ff ff       	call   c001f24a <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f77e:	83 c4 10             	add    esp,0x10
c001f781:	83 e0 01             	and    eax,0x1
c001f784:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f78b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f791:	83 e0 fb             	and    eax,0xfffffffb
c001f794:	09 d0                	or     eax,edx
c001f796:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f79c:	83 ec 0c             	sub    esp,0xc
c001f79f:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f7a3:	50                   	push   eax
c001f7a4:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f7a8:	50                   	push   eax
c001f7a9:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f7ad:	57                   	push   edi
c001f7ae:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f7b2:	56                   	push   esi
c001f7b3:	6a 01                	push   0x1
c001f7b5:	e8 82 f9 ff ff       	call   c001f13c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f7ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f7be:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001f7c4:	89 c1                	mov    ecx,eax
c001f7c6:	83 e2 f0             	and    edx,0xfffffff0
c001f7c9:	83 e1 0f             	and    ecx,0xf
c001f7cc:	09 ca                	or     edx,ecx
c001f7ce:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001f7d4:	89 c2                	mov    edx,eax
c001f7d6:	c1 ea 04             	shr    edx,0x4
c001f7d9:	83 e2 0f             	and    edx,0xf
c001f7dc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f7e0:	89 d1                	mov    ecx,edx
c001f7e2:	83 c4 20             	add    esp,0x20
c001f7e5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001f7eb:	c1 e1 06             	shl    ecx,0x6
c001f7ee:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001f7f4:	09 ca                	or     edx,ecx
c001f7f6:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001f7fd:	89 c2                	mov    edx,eax
c001f7ff:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001f805:	c1 ea 08             	shr    edx,0x8
c001f808:	83 e1 3f             	and    ecx,0x3f
c001f80b:	83 e2 0f             	and    edx,0xf
c001f80e:	89 d5                	mov    ebp,edx
c001f810:	83 e5 03             	and    ebp,0x3
c001f813:	c1 e5 06             	shl    ebp,0x6
c001f816:	09 e9                	or     ecx,ebp
c001f818:	89 d5                	mov    ebp,edx
c001f81a:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001f820:	c1 ed 02             	shr    ebp,0x2
c001f823:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001f829:	83 e1 c0             	and    ecx,0xffffffc0
c001f82c:	09 e9                	or     ecx,ebp
c001f82e:	89 c5                	mov    ebp,eax
c001f830:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001f836:	c1 ed 08             	shr    ebp,0x8
c001f839:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001f83f:	83 e5 30             	and    ebp,0x30
c001f842:	83 e1 cf             	and    ecx,0xffffffcf
c001f845:	09 e9                	or     ecx,ebp
c001f847:	83 fa 06             	cmp    edx,0x6
c001f84a:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001f850:	74 05                	je     c001f857 <CPU::detectFeatures()+0x54f>
c001f852:	83 fa 0f             	cmp    edx,0xf
c001f855:	75 64                	jne    c001f8bb <CPU::detectFeatures()+0x5b3>
c001f857:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001f85d:	89 c1                	mov    ecx,eax
c001f85f:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c001f865:	c1 e9 10             	shr    ecx,0x10
c001f868:	c1 e1 04             	shl    ecx,0x4
c001f86b:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001f86f:	0f b6 c9             	movzx  ecx,cl
c001f872:	c1 e1 06             	shl    ecx,0x6
c001f875:	09 e9                	or     ecx,ebp
c001f877:	83 fa 0f             	cmp    edx,0xf
c001f87a:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001f881:	75 38                	jne    c001f8bb <CPU::detectFeatures()+0x5b3>
c001f883:	c1 e8 14             	shr    eax,0x14
c001f886:	83 c0 0f             	add    eax,0xf
c001f889:	0f b6 c0             	movzx  eax,al
c001f88c:	89 c2                	mov    edx,eax
c001f88e:	c1 e8 02             	shr    eax,0x2
c001f891:	83 e2 03             	and    edx,0x3
c001f894:	89 d1                	mov    ecx,edx
c001f896:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001f89c:	c1 e1 06             	shl    ecx,0x6
c001f89f:	83 e2 3f             	and    edx,0x3f
c001f8a2:	09 ca                	or     edx,ecx
c001f8a4:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001f8aa:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001f8b0:	83 e2 c0             	and    edx,0xffffffc0
c001f8b3:	09 d0                	or     eax,edx
c001f8b5:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001f8bb:	83 ec 0c             	sub    esp,0xc
c001f8be:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f8c4:	83 c8 07             	or     eax,0x7
c001f8c7:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f8cd:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f8d1:	50                   	push   eax
c001f8d2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f8d6:	55                   	push   ebp
c001f8d7:	57                   	push   edi
c001f8d8:	56                   	push   esi
c001f8d9:	68 00 00 00 80       	push   0x80000000
c001f8de:	e8 59 f8 ff ff       	call   c001f13c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f8e3:	83 c4 20             	add    esp,0x20
c001f8e6:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001f8ee:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f8f2:	76 1e                	jbe    c001f912 <CPU::detectFeatures()+0x60a>
c001f8f4:	83 ec 0c             	sub    esp,0xc
c001f8f7:	50                   	push   eax
c001f8f8:	55                   	push   ebp
c001f8f9:	57                   	push   edi
c001f8fa:	56                   	push   esi
c001f8fb:	68 01 00 00 80       	push   0x80000001
c001f900:	e8 37 f8 ff ff       	call   c001f13c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f905:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001f90f:	83 c4 20             	add    esp,0x20
c001f912:	52                   	push   edx
c001f913:	52                   	push   edx
c001f914:	68 6d 2a 03 c0       	push   0xc0032a6d
c001f919:	53                   	push   ebx
c001f91a:	e8 87 bd ff ff       	call   c001b6a6 <Device::setName(char const*)>
c001f91f:	83 c4 10             	add    esp,0x10
c001f922:	eb 69                	jmp    c001f98d <CPU::detectFeatures()+0x685>
c001f924:	50                   	push   eax
c001f925:	50                   	push   eax
c001f926:	68 d2 29 03 c0       	push   0xc00329d2
c001f92b:	55                   	push   ebp
c001f92c:	e8 0f 0d fe ff       	call   c0000640 <strcpy>
c001f931:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f93b:	e8 83 08 fe ff       	call   c00001c3 <is486>
c001f940:	83 c4 10             	add    esp,0x10
c001f943:	85 c0                	test   eax,eax
c001f945:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f94b:	74 1f                	je     c001f96c <CPU::detectFeatures()+0x664>
c001f94d:	83 c8 07             	or     eax,0x7
c001f950:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f956:	0f 20 c0             	mov    eax,cr0
c001f959:	83 e0 14             	and    eax,0x14
c001f95c:	83 f8 04             	cmp    eax,0x4
c001f95f:	75 10                	jne    c001f971 <CPU::detectFeatures()+0x669>
c001f961:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f967:	83 e0 fd             	and    eax,0xfffffffd
c001f96a:	eb 1b                	jmp    c001f987 <CPU::detectFeatures()+0x67f>
c001f96c:	83 e0 f8             	and    eax,0xfffffff8
c001f96f:	eb df                	jmp    c001f950 <CPU::detectFeatures()+0x648>
c001f971:	e8 28 08 fe ff       	call   c000019e <hasLegacyFPU>
c001f976:	83 e0 01             	and    eax,0x1
c001f979:	8d 14 00             	lea    edx,[eax+eax*1]
c001f97c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f982:	83 e0 fd             	and    eax,0xfffffffd
c001f985:	09 d0                	or     eax,edx
c001f987:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f98d:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001f994:	74 17                	je     c001f9ad <CPU::detectFeatures()+0x6a5>
c001f996:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001f99c:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c001f9a2:	83 c8 10             	or     eax,0x10
c001f9a5:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001f9ab:	eb 20                	jmp    c001f9cd <CPU::detectFeatures()+0x6c5>
c001f9ad:	e8 ec 07 fe ff       	call   c000019e <hasLegacyFPU>
c001f9b2:	83 e0 01             	and    eax,0x1
c001f9b5:	8d 14 00             	lea    edx,[eax+eax*1]
c001f9b8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f9be:	83 e0 fd             	and    eax,0xfffffffd
c001f9c1:	09 d0                	or     eax,edx
c001f9c3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f9c9:	a8 02                	test   al,0x2
c001f9cb:	75 c9                	jne    c001f996 <CPU::detectFeatures()+0x68e>
c001f9cd:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001f9d4:	83 c4 2c             	add    esp,0x2c
c001f9d7:	5b                   	pop    ebx
c001f9d8:	5e                   	pop    esi
c001f9d9:	5f                   	pop    edi
c001f9da:	5d                   	pop    ebp
c001f9db:	c3                   	ret    

c001f9dc <CPU::setupSMEP()>:
c001f9dc:	0f 20 e0             	mov    eax,cr4
c001f9df:	0d 00 00 10 00       	or     eax,0x100000
c001f9e4:	0f 22 e0             	mov    cr4,eax
c001f9e7:	c3                   	ret    

c001f9e8 <CPU::setupUMIP()>:
c001f9e8:	0f 20 e0             	mov    eax,cr4
c001f9eb:	80 cc 08             	or     ah,0x8
c001f9ee:	0f 22 e0             	mov    cr4,eax
c001f9f1:	c3                   	ret    

c001f9f2 <CPU::setupTSC()>:
c001f9f2:	0f 20 e0             	mov    eax,cr4
c001f9f5:	83 c8 04             	or     eax,0x4
c001f9f8:	0f 22 e0             	mov    cr4,eax
c001f9fb:	c3                   	ret    

c001f9fc <CPU::setupLargePages()>:
c001f9fc:	0f 20 e0             	mov    eax,cr4
c001f9ff:	83 c8 10             	or     eax,0x10
c001fa02:	0f 22 e0             	mov    cr4,eax
c001fa05:	c3                   	ret    

c001fa06 <CPU::setupPAT()>:
c001fa06:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001fa0b:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001fa12:	74 2c                	je     c001fa40 <CPU::setupPAT()+0x3a>
c001fa14:	53                   	push   ebx
c001fa15:	83 ec 10             	sub    esp,0x10
c001fa18:	68 77 02 00 00       	push   0x277
c001fa1d:	50                   	push   eax
c001fa1e:	e8 3d 61 ff ff       	call   c0015b60 <Computer::rdmsr(unsigned int)>
c001fa23:	83 e2 f8             	and    edx,0xfffffff8
c001fa26:	83 ca 01             	or     edx,0x1
c001fa29:	52                   	push   edx
c001fa2a:	50                   	push   eax
c001fa2b:	68 77 02 00 00       	push   0x277
c001fa30:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001fa36:	e8 51 61 ff ff       	call   c0015b8c <Computer::wrmsr(unsigned int, unsigned long long)>
c001fa3b:	83 c4 28             	add    esp,0x28
c001fa3e:	5b                   	pop    ebx
c001fa3f:	c3                   	ret    
c001fa40:	c3                   	ret    
c001fa41:	90                   	nop

c001fa42 <CPU::setupMTRR()>:
c001fa42:	c3                   	ret    
c001fa43:	90                   	nop

c001fa44 <CPU::setupGlobalPages()>:
c001fa44:	0f 20 e0             	mov    eax,cr4
c001fa47:	0c 80                	or     al,0x80
c001fa49:	0f 22 e0             	mov    cr4,eax
c001fa4c:	c3                   	ret    
c001fa4d:	90                   	nop

c001fa4e <CPU::allowUsermodeDataAccess()>:
c001fa4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa52:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001fa59:	74 03                	je     c001fa5e <CPU::allowUsermodeDataAccess()+0x10>
c001fa5b:	0f 01 cb             	stac   
c001fa5e:	c3                   	ret    
c001fa5f:	90                   	nop

c001fa60 <CPU::prohibitUsermodeDataAccess()>:
c001fa60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa64:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001fa6b:	74 03                	je     c001fa70 <CPU::prohibitUsermodeDataAccess()+0x10>
c001fa6d:	0f 01 ca             	clac   
c001fa70:	c3                   	ret    
c001fa71:	90                   	nop

c001fa72 <CPU::setupSMAP()>:
c001fa72:	0f 20 e0             	mov    eax,cr4
c001fa75:	0d 00 00 20 00       	or     eax,0x200000
c001fa7a:	0f 22 e0             	mov    cr4,eax
c001fa7d:	eb e1                	jmp    c001fa60 <CPU::prohibitUsermodeDataAccess()>
c001fa7f:	90                   	nop

c001fa80 <CPU::setupFeatures()>:
c001fa80:	53                   	push   ebx
c001fa81:	83 ec 08             	sub    esp,0x8
c001fa84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fa88:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001fa8f:	74 18                	je     c001faa9 <CPU::setupFeatures()+0x29>
c001fa91:	83 ec 0c             	sub    esp,0xc
c001fa94:	68 79 2a 03 c0       	push   0xc0032a79
c001fa99:	e8 33 9a ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001fa9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001faa1:	e8 42 ff ff ff       	call   c001f9e8 <CPU::setupUMIP()>
c001faa6:	83 c4 10             	add    esp,0x10
c001faa9:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001fab0:	74 18                	je     c001faca <CPU::setupFeatures()+0x4a>
c001fab2:	83 ec 0c             	sub    esp,0xc
c001fab5:	68 83 2a 03 c0       	push   0xc0032a83
c001faba:	e8 12 9a ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001fabf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fac2:	e8 2b ff ff ff       	call   c001f9f2 <CPU::setupTSC()>
c001fac7:	83 c4 10             	add    esp,0x10
c001faca:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001fad1:	74 18                	je     c001faeb <CPU::setupFeatures()+0x6b>
c001fad3:	83 ec 0c             	sub    esp,0xc
c001fad6:	68 8c 2a 03 c0       	push   0xc0032a8c
c001fadb:	e8 f1 99 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001fae0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fae3:	e8 14 ff ff ff       	call   c001f9fc <CPU::setupLargePages()>
c001fae8:	83 c4 10             	add    esp,0x10
c001faeb:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001faf2:	74 18                	je     c001fb0c <CPU::setupFeatures()+0x8c>
c001faf4:	83 ec 0c             	sub    esp,0xc
c001faf7:	68 95 2a 03 c0       	push   0xc0032a95
c001fafc:	e8 d0 99 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001fb01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb04:	e8 3b ff ff ff       	call   c001fa44 <CPU::setupGlobalPages()>
c001fb09:	83 c4 10             	add    esp,0x10
c001fb0c:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001fb13:	74 18                	je     c001fb2d <CPU::setupFeatures()+0xad>
c001fb15:	83 ec 0c             	sub    esp,0xc
c001fb18:	68 a7 2a 03 c0       	push   0xc0032aa7
c001fb1d:	e8 af 99 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001fb22:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb25:	e8 dc fe ff ff       	call   c001fa06 <CPU::setupPAT()>
c001fb2a:	83 c4 10             	add    esp,0x10
c001fb2d:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001fb34:	74 11                	je     c001fb47 <CPU::setupFeatures()+0xc7>
c001fb36:	c7 44 24 10 b0 2a 03 c0 	mov    DWORD PTR [esp+0x10],0xc0032ab0
c001fb3e:	83 c4 08             	add    esp,0x8
c001fb41:	5b                   	pop    ebx
c001fb42:	e9 8a 99 ff ff       	jmp    c00194d1 <Dbg::kprintf(char const*, ...)>
c001fb47:	83 c4 08             	add    esp,0x8
c001fb4a:	5b                   	pop    ebx
c001fb4b:	c3                   	ret    

c001fb4c <CPU::open(int, int, void*)>:
c001fb4c:	55                   	push   ebp
c001fb4d:	57                   	push   edi
c001fb4e:	56                   	push   esi
c001fb4f:	53                   	push   ebx
c001fb50:	83 ec 18             	sub    esp,0x18
c001fb53:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001fb57:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001fb5b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001fb5f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001fb65:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001fb6b:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c001fb71:	50                   	push   eax
c001fb72:	e8 e7 62 ff ff       	call   c0015e5e <GDT::setup()>
c001fb77:	83 c4 0c             	add    esp,0xc
c001fb7a:	6a 00                	push   0x0
c001fb7c:	68 ef be ad de       	push   0xdeadbeef
c001fb81:	55                   	push   ebp
c001fb82:	e8 8d 7f ff ff       	call   c0017b14 <TSS::setup(unsigned long, unsigned long)>
c001fb87:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001fb8a:	e8 65 7f ff ff       	call   c0017af4 <TSS::flush()>
c001fb8f:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001fb95:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb98:	e8 25 65 ff ff       	call   c00160c2 <IDT::setup()>
c001fb9d:	b8 00 04 00 00       	mov    eax,0x400
c001fba2:	0f 23 f8             	mov    db7,eax
c001fba5:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001fbaf:	e8 98 6d ff ff       	call   c001694c <Phys::allocatePage()>
c001fbb4:	83 c4 10             	add    esp,0x10
c001fbb7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001fbbd:	85 f6                	test   esi,esi
c001fbbf:	89 38                	mov    DWORD PTR [eax],edi
c001fbc1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fbc7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001fbca:	74 10                	je     c001fbdc <CPU::open(int, int, void*)+0x90>
c001fbcc:	50                   	push   eax
c001fbcd:	50                   	push   eax
c001fbce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fbd4:	56                   	push   esi
c001fbd5:	e8 60 88 ff ff       	call   c001843a <VAS::setCPUSpecific(unsigned long)>
c001fbda:	eb 0d                	jmp    c001fbe9 <CPU::open(int, int, void*)+0x9d>
c001fbdc:	83 ec 0c             	sub    esp,0xc
c001fbdf:	68 ba 2a 03 c0       	push   0xc0032aba
c001fbe4:	e8 01 09 00 00       	call   c00204ea <KePanic(char const*)>
c001fbe9:	83 c4 10             	add    esp,0x10
c001fbec:	83 ec 0c             	sub    esp,0xc
c001fbef:	68 c8 2a 03 c0       	push   0xc0032ac8
c001fbf4:	e8 8e 01 00 00       	call   c001fd87 <KeSetBootMessage(char const*)>
c001fbf9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fbfc:	e8 07 f7 ff ff       	call   c001f308 <CPU::detectFeatures()>
c001fc01:	c7 04 24 eb 2a 03 c0 	mov    DWORD PTR [esp],0xc0032aeb
c001fc08:	e8 7a 01 00 00       	call   c001fd87 <KeSetBootMessage(char const*)>
c001fc0d:	e8 17 77 00 00       	call   c0027329 <HalInitialise()>
c001fc12:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001fc17:	83 e0 10             	and    eax,0x10
c001fc1a:	83 f8 01             	cmp    eax,0x1
c001fc1d:	19 c0                	sbb    eax,eax
c001fc1f:	83 e0 46             	and    eax,0x46
c001fc22:	83 c0 1e             	add    eax,0x1e
c001fc25:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc28:	e8 5c d3 ff ff       	call   c001cf89 <setupTimer(int)>
c001fc2d:	83 c4 10             	add    esp,0x10
c001fc30:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001fc36:	f6 05 d4 a9 03 c0 20 	test   BYTE PTR ds:0xc003a9d4,0x20
c001fc3d:	74 0c                	je     c001fc4b <CPU::open(int, int, void*)+0xff>
c001fc3f:	83 ec 0c             	sub    esp,0xc
c001fc42:	53                   	push   ebx
c001fc43:	e8 38 fe ff ff       	call   c001fa80 <CPU::setupFeatures()>
c001fc48:	83 c4 10             	add    esp,0x10
c001fc4b:	83 c4 0c             	add    esp,0xc
c001fc4e:	31 c0                	xor    eax,eax
c001fc50:	5b                   	pop    ebx
c001fc51:	5e                   	pop    esi
c001fc52:	5f                   	pop    edi
c001fc53:	5d                   	pop    ebp
c001fc54:	c3                   	ret    

c001fc55 <KeInitialiseAtexit()>:
c001fc55:	83 ec 10             	sub    esp,0x10
c001fc58:	c7 05 a0 f8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f8a0,0x0
c001fc62:	6a 60                	push   0x60
c001fc64:	6a 00                	push   0x0
c001fc66:	68 20 f9 03 c0       	push   0xc003f920
c001fc6b:	e8 80 08 fe ff       	call   c00004f0 <memset>
c001fc70:	83 c4 1c             	add    esp,0x1c
c001fc73:	c3                   	ret    

c001fc74 <KeRegisterAtexit(void (*)(void*), void*)>:
c001fc74:	a1 a0 f8 03 c0       	mov    eax,ds:0xc003f8a0
c001fc79:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fc7d:	89 14 85 20 f9 03 c0 	mov    DWORD PTR [eax*4-0x3ffc06e0],edx
c001fc84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fc88:	89 14 85 c0 f8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0740],edx
c001fc8f:	40                   	inc    eax
c001fc90:	a3 a0 f8 03 c0       	mov    ds:0xc003f8a0,eax
c001fc95:	83 f8 17             	cmp    eax,0x17
c001fc98:	7e 0d                	jle    c001fca7 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c001fc9a:	c7 44 24 04 2c 2b 03 c0 	mov    DWORD PTR [esp+0x4],0xc0032b2c
c001fca2:	e9 43 08 00 00       	jmp    c00204ea <KePanic(char const*)>
c001fca7:	c3                   	ret    

c001fca8 <KeExecuteAtexit()>:
c001fca8:	53                   	push   ebx
c001fca9:	31 db                	xor    ebx,ebx
c001fcab:	83 ec 08             	sub    esp,0x8
c001fcae:	39 1d a0 f8 03 c0    	cmp    DWORD PTR ds:0xc003f8a0,ebx
c001fcb4:	7e 50                	jle    c001fd06 <KeExecuteAtexit()+0x5e>
c001fcb6:	8b 04 9d 20 f9 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc06e0]
c001fcbd:	85 c0                	test   eax,eax
c001fcbf:	74 42                	je     c001fd03 <KeExecuteAtexit()+0x5b>
c001fcc1:	51                   	push   ecx
c001fcc2:	50                   	push   eax
c001fcc3:	53                   	push   ebx
c001fcc4:	68 45 2b 03 c0       	push   0xc0032b45
c001fcc9:	e8 03 98 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001fcce:	58                   	pop    eax
c001fccf:	ff 34 9d c0 f8 03 c0 	push   DWORD PTR [ebx*4-0x3ffc0740]
c001fcd6:	ff 14 9d 20 f9 03 c0 	call   DWORD PTR [ebx*4-0x3ffc06e0]
c001fcdd:	c7 04 24 67 2b 03 c0 	mov    DWORD PTR [esp],0xc0032b67
c001fce4:	e8 e8 97 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001fce9:	c7 04 24 46 14 03 c0 	mov    DWORD PTR [esp],0xc0031446
c001fcf0:	c7 04 9d 20 f9 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffc06e0],0x0
c001fcfb:	e8 d1 97 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001fd00:	83 c4 10             	add    esp,0x10
c001fd03:	43                   	inc    ebx
c001fd04:	eb a8                	jmp    c001fcae <KeExecuteAtexit()+0x6>
c001fd06:	83 c4 08             	add    esp,0x8
c001fd09:	5b                   	pop    ebx
c001fd0a:	c3                   	ret    

c001fd0b <KeDisplaySplashScreen()>:
c001fd0b:	55                   	push   ebp
c001fd0c:	bd 05 00 00 00       	mov    ebp,0x5
c001fd11:	57                   	push   edi
c001fd12:	bf 0a 00 00 00       	mov    edi,0xa
c001fd17:	56                   	push   esi
c001fd18:	31 f6                	xor    esi,esi
c001fd1a:	53                   	push   ebx
c001fd1b:	31 db                	xor    ebx,ebx
c001fd1d:	83 ec 0c             	sub    esp,0xc
c001fd20:	0f b6 96 80 3f 03 c0 	movzx  edx,BYTE PTR [esi-0x3ffcc080]
c001fd27:	89 d0                	mov    eax,edx
c001fd29:	85 d2                	test   edx,edx
c001fd2b:	74 52                	je     c001fd7f <KeDisplaySplashScreen()+0x74>
c001fd2d:	80 bb b6 3f 03 c0 db 	cmp    BYTE PTR [ebx-0x3ffcc04a],0xdb
c001fd34:	75 13                	jne    c001fd49 <KeDisplaySplashScreen()+0x3e>
c001fd36:	0f b6 8b b5 3f 03 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffcc04b]
c001fd3d:	83 e1 fe             	and    ecx,0xfffffffe
c001fd40:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c001fd46:	75 01                	jne    c001fd49 <KeDisplaySplashScreen()+0x3e>
c001fd48:	47                   	inc    edi
c001fd49:	83 fa 0d             	cmp    edx,0xd
c001fd4c:	74 28                	je     c001fd76 <KeDisplaySplashScreen()+0x6b>
c001fd4e:	83 fa 0a             	cmp    edx,0xa
c001fd51:	75 0a                	jne    c001fd5d <KeDisplaySplashScreen()+0x52>
c001fd53:	45                   	inc    ebp
c001fd54:	bf 0a 00 00 00       	mov    edi,0xa
c001fd59:	31 db                	xor    ebx,ebx
c001fd5b:	eb 19                	jmp    c001fd76 <KeDisplaySplashScreen()+0x6b>
c001fd5d:	83 ec 0c             	sub    esp,0xc
c001fd60:	8d 14 1f             	lea    edx,[edi+ebx*1]
c001fd63:	55                   	push   ebp
c001fd64:	0f be c0             	movsx  eax,al
c001fd67:	52                   	push   edx
c001fd68:	43                   	inc    ebx
c001fd69:	6a 00                	push   0x0
c001fd6b:	6a 0e                	push   0xe
c001fd6d:	50                   	push   eax
c001fd6e:	e8 35 82 00 00       	call   c0027fa8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001fd73:	83 c4 20             	add    esp,0x20
c001fd76:	46                   	inc    esi
c001fd77:	81 fe 42 01 00 00    	cmp    esi,0x142
c001fd7d:	75 a1                	jne    c001fd20 <KeDisplaySplashScreen()+0x15>
c001fd7f:	83 c4 0c             	add    esp,0xc
c001fd82:	5b                   	pop    ebx
c001fd83:	5e                   	pop    esi
c001fd84:	5f                   	pop    edi
c001fd85:	5d                   	pop    ebp
c001fd86:	c3                   	ret    

c001fd87 <KeSetBootMessage(char const*)>:
c001fd87:	57                   	push   edi
c001fd88:	56                   	push   esi
c001fd89:	53                   	push   ebx
c001fd8a:	81 ec a4 00 00 00    	sub    esp,0xa4
c001fd90:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c001fd97:	68 9e 00 00 00       	push   0x9e
c001fd9c:	6a 00                	push   0x0
c001fd9e:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fda2:	56                   	push   esi
c001fda3:	e8 48 07 fe ff       	call   c00004f0 <memset>
c001fda8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fdab:	e8 c0 07 fe ff       	call   c0000570 <strlen>
c001fdb0:	ba 50 00 00 00       	mov    edx,0x50
c001fdb5:	83 c4 10             	add    esp,0x10
c001fdb8:	29 c2                	sub    edx,eax
c001fdba:	31 c9                	xor    ecx,ecx
c001fdbc:	83 e2 fe             	and    edx,0xfffffffe
c001fdbf:	01 f2                	add    edx,esi
c001fdc1:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c001fdc6:	84 c0                	test   al,al
c001fdc8:	74 0a                	je     c001fdd4 <KeSetBootMessage(char const*)+0x4d>
c001fdca:	80 cc 0f             	or     ah,0xf
c001fdcd:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001fdd1:	41                   	inc    ecx
c001fdd2:	eb ed                	jmp    c001fdc1 <KeSetBootMessage(char const*)+0x3a>
c001fdd4:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c001fdd9:	b9 9e 00 00 00       	mov    ecx,0x9e
c001fdde:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fde0:	81 c4 a0 00 00 00    	add    esp,0xa0
c001fde6:	5b                   	pop    ebx
c001fde7:	5e                   	pop    esi
c001fde8:	5f                   	pop    edi
c001fde9:	c3                   	ret    
c001fdea:	66 90                	xchg   ax,ax

c001fdec <CUnlockScheduler>:
c001fdec:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fdf1:	83 e8 01             	sub    eax,0x1
c001fdf4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fdf9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fdfe:	85 c0                	test   eax,eax
c001fe00:	75 02                	jne    c001fe04 <CUnlockScheduler+0x18>
c001fe02:	fb                   	sti    
c001fe03:	90                   	nop
c001fe04:	90                   	nop
c001fe05:	c3                   	ret    
c001fe06:	66 90                	xchg   ax,ax

c001fe08 <CLockScheduler>:
c001fe08:	fa                   	cli    
c001fe09:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fe0e:	83 c0 01             	add    eax,0x1
c001fe11:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fe16:	90                   	nop
c001fe17:	c3                   	ret    

c001fe18 <CPrintf>:
c001fe18:	83 ec 0c             	sub    esp,0xc
c001fe1b:	83 ec 08             	sub    esp,0x8
c001fe1e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fe22:	68 b0 fd 02 c0       	push   0xc002fdb0
c001fe27:	e8 a5 96 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c001fe2c:	83 c4 10             	add    esp,0x10
c001fe2f:	90                   	nop
c001fe30:	83 c4 0c             	add    esp,0xc
c001fe33:	c3                   	ret    

c001fe34 <Krnl::handlePowerButton()>:
c001fe34:	83 ec 0c             	sub    esp,0xc
c001fe37:	e8 09 07 00 00       	call   c0020545 <KeHandlePowerButton()>
c001fe3c:	90                   	nop
c001fe3d:	83 c4 0c             	add    esp,0xc
c001fe40:	c3                   	ret    
c001fe41:	8d 76 00             	lea    esi,[esi+0x0]

c001fe44 <Krnl::handleSleepButton()>:
c001fe44:	83 ec 0c             	sub    esp,0xc
c001fe47:	e8 2e 07 00 00       	call   c002057a <KeHandleSleepButton()>
c001fe4c:	90                   	nop
c001fe4d:	83 c4 0c             	add    esp,0xc
c001fe50:	c3                   	ret    

c001fe51 <KeCalculateCRC32(unsigned char*, int)>:
c001fe51:	53                   	push   ebx
c001fe52:	83 c8 ff             	or     eax,0xffffffff
c001fe55:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fe59:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fe5d:	01 cb                	add    ebx,ecx
c001fe5f:	39 d9                	cmp    ecx,ebx
c001fe61:	74 15                	je     c001fe78 <KeCalculateCRC32(unsigned char*, int)+0x27>
c001fe63:	41                   	inc    ecx
c001fe64:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c001fe67:	31 c2                	xor    edx,eax
c001fe69:	c1 e8 08             	shr    eax,0x8
c001fe6c:	0f b6 d2             	movzx  edx,dl
c001fe6f:	33 04 95 e0 40 03 c0 	xor    eax,DWORD PTR [edx*4-0x3ffcbf20]
c001fe76:	eb e7                	jmp    c001fe5f <KeCalculateCRC32(unsigned char*, int)+0xe>
c001fe78:	f7 d0                	not    eax
c001fe7a:	5b                   	pop    ebx
c001fe7b:	c3                   	ret    

c001fe7c <EnvVarContainer::getEnv(char const*)>:
c001fe7c:	57                   	push   edi
c001fe7d:	56                   	push   esi
c001fe7e:	53                   	push   ebx
c001fe7f:	31 db                	xor    ebx,ebx
c001fe81:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fe85:	39 1e                	cmp    DWORD PTR [esi],ebx
c001fe87:	7e 2b                	jle    c001feb4 <EnvVarContainer::getEnv(char const*)+0x38>
c001fe89:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001fe90:	50                   	push   eax
c001fe91:	50                   	push   eax
c001fe92:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fe95:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001fe98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fe9c:	e8 af 08 fe ff       	call   c0000750 <strcmp>
c001fea1:	83 c4 10             	add    esp,0x10
c001fea4:	85 c0                	test   eax,eax
c001fea6:	75 09                	jne    c001feb1 <EnvVarContainer::getEnv(char const*)+0x35>
c001fea8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001feab:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001feaf:	eb 05                	jmp    c001feb6 <EnvVarContainer::getEnv(char const*)+0x3a>
c001feb1:	43                   	inc    ebx
c001feb2:	eb d1                	jmp    c001fe85 <EnvVarContainer::getEnv(char const*)+0x9>
c001feb4:	31 c0                	xor    eax,eax
c001feb6:	5b                   	pop    ebx
c001feb7:	5e                   	pop    esi
c001feb8:	5f                   	pop    edi
c001feb9:	c3                   	ret    

c001feba <EnvVarContainer::setEnv(char const*, char const*)>:
c001feba:	55                   	push   ebp
c001febb:	57                   	push   edi
c001febc:	56                   	push   esi
c001febd:	53                   	push   ebx
c001febe:	83 ec 28             	sub    esp,0x28
c001fec1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001fec5:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001fec9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001fecd:	56                   	push   esi
c001fece:	e8 9d 06 fe ff       	call   c0000570 <strlen>
c001fed3:	40                   	inc    eax
c001fed4:	89 04 24             	mov    DWORD PTR [esp],eax
c001fed7:	e8 67 67 ff ff       	call   c0016643 <malloc>
c001fedc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fedf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fee3:	e8 88 06 fe ff       	call   c0000570 <strlen>
c001fee8:	40                   	inc    eax
c001fee9:	89 04 24             	mov    DWORD PTR [esp],eax
c001feec:	e8 52 67 ff ff       	call   c0016643 <malloc>
c001fef1:	89 34 24             	mov    DWORD PTR [esp],esi
c001fef4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fef8:	e8 73 06 fe ff       	call   c0000570 <strlen>
c001fefd:	83 c4 0c             	add    esp,0xc
c001ff00:	40                   	inc    eax
c001ff01:	50                   	push   eax
c001ff02:	6a 00                	push   0x0
c001ff04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff08:	e8 e3 05 fe ff       	call   c00004f0 <memset>
c001ff0d:	89 34 24             	mov    DWORD PTR [esp],esi
c001ff10:	e8 5b 06 fe ff       	call   c0000570 <strlen>
c001ff15:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ff19:	8d 48 01             	lea    ecx,[eax+0x1]
c001ff1c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ff1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ff21:	89 de                	mov    esi,ebx
c001ff23:	e8 48 06 fe ff       	call   c0000570 <strlen>
c001ff28:	83 c4 0c             	add    esp,0xc
c001ff2b:	40                   	inc    eax
c001ff2c:	50                   	push   eax
c001ff2d:	6a 00                	push   0x0
c001ff2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ff33:	e8 b8 05 fe ff       	call   c00004f0 <memset>
c001ff38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ff3b:	e8 30 06 fe ff       	call   c0000570 <strlen>
c001ff40:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ff44:	8d 48 01             	lea    ecx,[eax+0x1]
c001ff47:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ff49:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ff4c:	40                   	inc    eax
c001ff4d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001ff50:	c1 e0 03             	shl    eax,0x3
c001ff53:	5a                   	pop    edx
c001ff54:	59                   	pop    ecx
c001ff55:	50                   	push   eax
c001ff56:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001ff59:	e8 d1 66 ff ff       	call   c001662f <realloc>
c001ff5e:	8d 74 24 18          	lea    esi,[esp+0x18]
c001ff62:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ff65:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001ff68:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001ff6c:	b9 08 00 00 00       	mov    ecx,0x8
c001ff71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ff73:	83 c4 2c             	add    esp,0x2c
c001ff76:	5b                   	pop    ebx
c001ff77:	5e                   	pop    esi
c001ff78:	5f                   	pop    edi
c001ff79:	5d                   	pop    ebp
c001ff7a:	c3                   	ret    
c001ff7b:	90                   	nop

c001ff7c <EnvVarContainer::deleteEnv(char const*)>:
c001ff7c:	c3                   	ret    
c001ff7d:	90                   	nop

c001ff7e <EnvVarContainer::loadFrom(char const*, char const*)>:
c001ff7e:	55                   	push   ebp
c001ff7f:	57                   	push   edi
c001ff80:	56                   	push   esi
c001ff81:	53                   	push   ebx
c001ff82:	81 ec 38 01 00 00    	sub    esp,0x138
c001ff88:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001ff8f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001ff96:	68 14 01 00 00       	push   0x114
c001ff9b:	e8 a3 66 ff ff       	call   c0016643 <malloc>
c001ffa0:	83 c4 0c             	add    esp,0xc
c001ffa3:	89 c3                	mov    ebx,eax
c001ffa5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ffa8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ffaf:	50                   	push   eax
c001ffb0:	e8 23 a7 ff ff       	call   c001a6d8 <File::File(char const*, Process*)>
c001ffb5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ffb8:	e8 fd a9 ff ff       	call   c001a9ba <File::exists()>
c001ffbd:	83 c4 10             	add    esp,0x10
c001ffc0:	84 c0                	test   al,al
c001ffc2:	75 31                	jne    c001fff5 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001ffc4:	50                   	push   eax
c001ffc5:	50                   	push   eax
c001ffc6:	6a 12                	push   0x12
c001ffc8:	53                   	push   ebx
c001ffc9:	e8 28 a7 ff ff       	call   c001a6f6 <File::open(FileOpenMode)>
c001ffce:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ffd0:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001ffd3:	89 34 24             	mov    DWORD PTR [esp],esi
c001ffd6:	e8 95 05 fe ff       	call   c0000570 <strlen>
c001ffdb:	5a                   	pop    edx
c001ffdc:	31 d2                	xor    edx,edx
c001ffde:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ffe2:	51                   	push   ecx
c001ffe3:	56                   	push   esi
c001ffe4:	52                   	push   edx
c001ffe5:	50                   	push   eax
c001ffe6:	53                   	push   ebx
c001ffe7:	ff d7                	call   edi
c001ffe9:	83 c4 14             	add    esp,0x14
c001ffec:	53                   	push   ebx
c001ffed:	e8 62 a7 ff ff       	call   c001a754 <File::close()>
c001fff2:	83 c4 10             	add    esp,0x10
c001fff5:	56                   	push   esi
c001fff6:	31 f6                	xor    esi,esi
c001fff8:	68 00 01 00 00       	push   0x100
c001fffd:	6a 00                	push   0x0
c001ffff:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0020003:	50                   	push   eax
c0020004:	e8 e7 04 fe ff       	call   c00004f0 <memset>
c0020009:	5f                   	pop    edi
c002000a:	58                   	pop    eax
c002000b:	6a 01                	push   0x1
c002000d:	53                   	push   ebx
c002000e:	e8 e3 a6 ff ff       	call   c001a6f6 <File::open(FileOpenMode)>
c0020013:	83 c4 10             	add    esp,0x10
c0020016:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002001e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0020026:	83 ec 0c             	sub    esp,0xc
c0020029:	8b 03                	mov    eax,DWORD PTR [ebx]
c002002b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c002002f:	51                   	push   ecx
c0020030:	8d 54 24 23          	lea    edx,[esp+0x23]
c0020034:	52                   	push   edx
c0020035:	6a 00                	push   0x0
c0020037:	6a 01                	push   0x1
c0020039:	53                   	push   ebx
c002003a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c002003d:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0020042:	83 c4 20             	add    esp,0x20
c0020045:	89 c2                	mov    edx,eax
c0020047:	85 c0                	test   eax,eax
c0020049:	0f 84 36 01 00 00    	je     c0020185 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c002004f:	83 f8 0d             	cmp    eax,0xd
c0020052:	0f 84 22 01 00 00    	je     c002017a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0020058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002005d:	0f 84 f0 00 00 00    	je     c0020153 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0020063:	83 f8 0a             	cmp    eax,0xa
c0020066:	74 13                	je     c002007b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0020068:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002006d:	74 0c                	je     c002007b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c002006f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0020075:	0f 8e f6 00 00 00    	jle    c0020171 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c002007b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002007f:	83 ec 0c             	sub    esp,0xc
c0020082:	8d 78 01             	lea    edi,[eax+0x1]
c0020085:	57                   	push   edi
c0020086:	e8 b8 65 ff ff       	call   c0016643 <malloc>
c002008b:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c002008f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0020093:	8d 56 04             	lea    edx,[esi+0x4]
c0020096:	89 14 24             	mov    DWORD PTR [esp],edx
c0020099:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002009d:	e8 a1 65 ff ff       	call   c0016643 <malloc>
c00200a2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00200a6:	83 c4 0c             	add    esp,0xc
c00200a9:	57                   	push   edi
c00200aa:	6a 00                	push   0x0
c00200ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00200b0:	e8 3b 04 fe ff       	call   c00004f0 <memset>
c00200b5:	8d 74 24 30          	lea    esi,[esp+0x30]
c00200b9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00200bd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00200c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00200c3:	83 c4 0c             	add    esp,0xc
c00200c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00200ca:	52                   	push   edx
c00200cb:	6a 00                	push   0x0
c00200cd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00200d1:	e8 1a 04 fe ff       	call   c00004f0 <memset>
c00200d6:	8d 74 24 30          	lea    esi,[esp+0x30]
c00200da:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00200de:	89 34 24             	mov    DWORD PTR [esp],esi
c00200e1:	e8 8a 04 fe ff       	call   c0000570 <strlen>
c00200e6:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00200ea:	89 c1                	mov    ecx,eax
c00200ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00200ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00200f1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00200f4:	40                   	inc    eax
c00200f5:	83 c4 10             	add    esp,0x10
c00200f8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00200fb:	85 d2                	test   edx,edx
c00200fd:	75 0c                	jne    c002010b <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c00200ff:	83 ec 0c             	sub    esp,0xc
c0020102:	6a 08                	push   0x8
c0020104:	e8 3a 65 ff ff       	call   c0016643 <malloc>
c0020109:	eb 0c                	jmp    c0020117 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c002010b:	c1 e0 03             	shl    eax,0x3
c002010e:	51                   	push   ecx
c002010f:	51                   	push   ecx
c0020110:	50                   	push   eax
c0020111:	52                   	push   edx
c0020112:	e8 18 65 ff ff       	call   c001662f <realloc>
c0020117:	83 c4 10             	add    esp,0x10
c002011a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c002011d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0020120:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0020123:	8d 74 24 18          	lea    esi,[esp+0x18]
c0020127:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c002012b:	b9 08 00 00 00       	mov    ecx,0x8
c0020130:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020132:	31 f6                	xor    esi,esi
c0020134:	50                   	push   eax
c0020135:	68 00 01 00 00       	push   0x100
c002013a:	6a 00                	push   0x0
c002013c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0020140:	50                   	push   eax
c0020141:	e8 aa 03 fe ff       	call   c00004f0 <memset>
c0020146:	83 c4 10             	add    esp,0x10
c0020149:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020151:	eb 27                	jmp    c002017a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0020153:	83 f8 3d             	cmp    eax,0x3d
c0020156:	74 1e                	je     c0020176 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0020158:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002015e:	7f 07                	jg     c0020167 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0020160:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0020164:	46                   	inc    esi
c0020165:	eb 13                	jmp    c002017a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0020167:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002016f:	eb 09                	jmp    c002017a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0020171:	83 f8 3d             	cmp    eax,0x3d
c0020174:	75 ea                	jne    c0020160 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0020176:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c002017a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002017f:	0f 85 99 fe ff ff    	jne    c002001e <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0020185:	83 ec 0c             	sub    esp,0xc
c0020188:	53                   	push   ebx
c0020189:	e8 c6 a5 ff ff       	call   c001a754 <File::close()>
c002018e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020190:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020193:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0020196:	81 c4 3c 01 00 00    	add    esp,0x13c
c002019c:	5b                   	pop    ebx
c002019d:	5e                   	pop    esi
c002019e:	5f                   	pop    edi
c002019f:	5d                   	pop    ebp
c00201a0:	c3                   	ret    
c00201a1:	90                   	nop

c00201a2 <EnvVarContainer::__loadSystem()>:
c00201a2:	83 ec 10             	sub    esp,0x10
c00201a5:	68 e0 44 03 c0       	push   0xc00344e0
c00201aa:	68 6c 2b 03 c0       	push   0xc0032b6c
c00201af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201b3:	e8 c6 fd ff ff       	call   c001ff7e <EnvVarContainer::loadFrom(char const*, char const*)>
c00201b8:	83 c4 1c             	add    esp,0x1c
c00201bb:	c3                   	ret    

c00201bc <EnvVarContainer::__loadUser()>:
c00201bc:	c3                   	ret    
c00201bd:	90                   	nop

c00201be <EnvVarContainer::EnvVarContainer(Process*)>:
c00201be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00201c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00201d0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00201d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00201de:	90                   	nop
c00201df:	c3                   	ret    

c00201e0 <EnvVarContainer::~EnvVarContainer()>:
c00201e0:	83 ec 0c             	sub    esp,0xc
c00201e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00201ea:	85 c0                	test   eax,eax
c00201ec:	74 1d                	je     c002020b <EnvVarContainer::~EnvVarContainer()+0x2b>
c00201ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00201f4:	85 c0                	test   eax,eax
c00201f6:	74 13                	je     c002020b <EnvVarContainer::~EnvVarContainer()+0x2b>
c00201f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00201ff:	83 ec 0c             	sub    esp,0xc
c0020202:	50                   	push   eax
c0020203:	e8 4b 64 ff ff       	call   c0016653 <free>
c0020208:	83 c4 10             	add    esp,0x10
c002020b:	90                   	nop
c002020c:	83 c4 0c             	add    esp,0xc
c002020f:	c3                   	ret    

c0020210 <KeGetEnv(Process*, char const*)>:
c0020210:	53                   	push   ebx
c0020211:	83 ec 08             	sub    esp,0x8
c0020214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020218:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002021c:	39 05 f8 01 04 c0    	cmp    DWORD PTR ds:0xc00401f8,eax
c0020222:	74 04                	je     c0020228 <KeGetEnv(Process*, char const*)+0x18>
c0020224:	85 c0                	test   eax,eax
c0020226:	75 0b                	jne    c0020233 <KeGetEnv(Process*, char const*)+0x23>
c0020228:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c002022d:	85 c0                	test   eax,eax
c002022f:	75 19                	jne    c002024a <KeGetEnv(Process*, char const*)+0x3a>
c0020231:	eb 27                	jmp    c002025a <KeGetEnv(Process*, char const*)+0x4a>
c0020233:	52                   	push   edx
c0020234:	52                   	push   edx
c0020235:	53                   	push   ebx
c0020236:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c002023c:	e8 3b fc ff ff       	call   c001fe7c <EnvVarContainer::getEnv(char const*)>
c0020241:	83 c4 10             	add    esp,0x10
c0020244:	85 c0                	test   eax,eax
c0020246:	75 28                	jne    c0020270 <KeGetEnv(Process*, char const*)+0x60>
c0020248:	eb de                	jmp    c0020228 <KeGetEnv(Process*, char const*)+0x18>
c002024a:	52                   	push   edx
c002024b:	52                   	push   edx
c002024c:	53                   	push   ebx
c002024d:	50                   	push   eax
c002024e:	e8 29 fc ff ff       	call   c001fe7c <EnvVarContainer::getEnv(char const*)>
c0020253:	83 c4 10             	add    esp,0x10
c0020256:	85 c0                	test   eax,eax
c0020258:	75 16                	jne    c0020270 <KeGetEnv(Process*, char const*)+0x60>
c002025a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002025e:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c0020263:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020267:	83 c4 08             	add    esp,0x8
c002026a:	5b                   	pop    ebx
c002026b:	e9 0c fc ff ff       	jmp    c001fe7c <EnvVarContainer::getEnv(char const*)>
c0020270:	83 c4 08             	add    esp,0x8
c0020273:	5b                   	pop    ebx
c0020274:	c3                   	ret    

c0020275 <KeSetEnvSystem(char const*, char const*)>:
c0020275:	83 ec 10             	sub    esp,0x10
c0020278:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002027c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020280:	ff 35 84 f9 03 c0    	push   DWORD PTR ds:0xc003f984
c0020286:	e8 2f fc ff ff       	call   c001feba <EnvVarContainer::setEnv(char const*, char const*)>
c002028b:	83 c4 1c             	add    esp,0x1c
c002028e:	c3                   	ret    

c002028f <KeSetEnvUser(char const*, char const*)>:
c002028f:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c0020294:	85 c0                	test   eax,eax
c0020296:	74 15                	je     c00202ad <KeSetEnvUser(char const*, char const*)+0x1e>
c0020298:	83 ec 10             	sub    esp,0x10
c002029b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002029f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00202a3:	50                   	push   eax
c00202a4:	e8 11 fc ff ff       	call   c001feba <EnvVarContainer::setEnv(char const*, char const*)>
c00202a9:	83 c4 1c             	add    esp,0x1c
c00202ac:	c3                   	ret    
c00202ad:	c3                   	ret    

c00202ae <KeSetEnvProcess(Process*, char const*, char const*)>:
c00202ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00202b2:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00202b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00202bc:	e9 f9 fb ff ff       	jmp    c001feba <EnvVarContainer::setEnv(char const*, char const*)>

c00202c1 <KeDeleteEnvSystem(char const*)>:
c00202c1:	c3                   	ret    

c00202c2 <KeDeleteEnvUser(char const*)>:
c00202c2:	c3                   	ret    

c00202c3 <KeDeleteEnvProcess(Process*, char const*)>:
c00202c3:	c3                   	ret    

c00202c4 <KeNewProcessEnv(Process*)>:
c00202c4:	83 ec 28             	sub    esp,0x28
c00202c7:	6a 0c                	push   0xc
c00202c9:	e8 75 63 ff ff       	call   c0016643 <malloc>
c00202ce:	5a                   	pop    edx
c00202cf:	59                   	pop    ecx
c00202d0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00202d4:	50                   	push   eax
c00202d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00202d9:	e8 e0 fe ff ff       	call   c00201be <EnvVarContainer::EnvVarContainer(Process*)>
c00202de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00202e2:	83 c4 2c             	add    esp,0x2c
c00202e5:	c3                   	ret    

c00202e6 <KeCopyProcessEnv(Process*, Process*)>:
c00202e6:	57                   	push   edi
c00202e7:	56                   	push   esi
c00202e8:	53                   	push   ebx
c00202e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ed:	83 ec 0c             	sub    esp,0xc
c00202f0:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00202f6:	6a 0c                	push   0xc
c00202f8:	e8 46 63 ff ff       	call   c0016643 <malloc>
c00202fd:	89 c3                	mov    ebx,eax
c00202ff:	58                   	pop    eax
c0020300:	5a                   	pop    edx
c0020301:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020305:	53                   	push   ebx
c0020306:	e8 b3 fe ff ff       	call   c00201be <EnvVarContainer::EnvVarContainer(Process*)>
c002030b:	8b 07                	mov    eax,DWORD PTR [edi]
c002030d:	89 03                	mov    DWORD PTR [ebx],eax
c002030f:	c1 e0 03             	shl    eax,0x3
c0020312:	89 04 24             	mov    DWORD PTR [esp],eax
c0020315:	e8 29 63 ff ff       	call   c0016643 <malloc>
c002031a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c002031d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c002031f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0020322:	c1 e1 03             	shl    ecx,0x3
c0020325:	89 c7                	mov    edi,eax
c0020327:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020329:	83 c4 10             	add    esp,0x10
c002032c:	89 d8                	mov    eax,ebx
c002032e:	5b                   	pop    ebx
c002032f:	5e                   	pop    esi
c0020330:	5f                   	pop    edi
c0020331:	c3                   	ret    

c0020332 <KeLoadSystemEnv()>:
c0020332:	53                   	push   ebx
c0020333:	83 ec 14             	sub    esp,0x14
c0020336:	6a 0c                	push   0xc
c0020338:	e8 06 63 ff ff       	call   c0016643 <malloc>
c002033d:	89 c3                	mov    ebx,eax
c002033f:	58                   	pop    eax
c0020340:	5a                   	pop    edx
c0020341:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0020347:	53                   	push   ebx
c0020348:	e8 71 fe ff ff       	call   c00201be <EnvVarContainer::EnvVarContainer(Process*)>
c002034d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020350:	89 1d 84 f9 03 c0    	mov    DWORD PTR ds:0xc003f984,ebx
c0020356:	e8 47 fe ff ff       	call   c00201a2 <EnvVarContainer::__loadSystem()>
c002035b:	83 c4 18             	add    esp,0x18
c002035e:	5b                   	pop    ebx
c002035f:	c3                   	ret    

c0020360 <KeLoadUserEnv()>:
c0020360:	53                   	push   ebx
c0020361:	83 ec 14             	sub    esp,0x14
c0020364:	6a 0c                	push   0xc
c0020366:	e8 d8 62 ff ff       	call   c0016643 <malloc>
c002036b:	89 c3                	mov    ebx,eax
c002036d:	58                   	pop    eax
c002036e:	5a                   	pop    edx
c002036f:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0020375:	53                   	push   ebx
c0020376:	e8 43 fe ff ff       	call   c00201be <EnvVarContainer::EnvVarContainer(Process*)>
c002037b:	89 1d 80 f9 03 c0    	mov    DWORD PTR ds:0xc003f980,ebx
c0020381:	83 c4 18             	add    esp,0x18
c0020384:	5b                   	pop    ebx
c0020385:	c3                   	ret    

c0020386 <KeFlushEnv()>:
c0020386:	c3                   	ret    

c0020387 <KeGetProcessTotalEnvCount(Process*)>:
c0020387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002038b:	8b 15 80 f9 03 c0    	mov    edx,DWORD PTR ds:0xc003f980
c0020391:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0020397:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c002039c:	8b 00                	mov    eax,DWORD PTR [eax]
c002039e:	03 01                	add    eax,DWORD PTR [ecx]
c00203a0:	85 d2                	test   edx,edx
c00203a2:	74 02                	je     c00203a6 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00203a4:	03 02                	add    eax,DWORD PTR [edx]
c00203a6:	c3                   	ret    

c00203a7 <KeGetProcessEnvPair(Process*, int)>:
c00203a7:	57                   	push   edi
c00203a8:	56                   	push   esi
c00203a9:	8b 35 80 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f980
c00203af:	53                   	push   ebx
c00203b0:	85 f6                	test   esi,esi
c00203b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00203b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00203ba:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00203c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00203c4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00203c6:	75 16                	jne    c00203de <KeGetProcessEnvPair(Process*, int)+0x37>
c00203c8:	39 c2                	cmp    edx,eax
c00203ca:	7c 16                	jl     c00203e2 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00203cc:	8b 0d 84 f9 03 c0    	mov    ecx,DWORD PTR ds:0xc003f984
c00203d2:	8b 31                	mov    esi,DWORD PTR [ecx]
c00203d4:	01 c6                	add    esi,eax
c00203d6:	39 d6                	cmp    esi,edx
c00203d8:	7e 3c                	jle    c0020416 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00203da:	29 c2                	sub    edx,eax
c00203dc:	eb 04                	jmp    c00203e2 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00203de:	39 c2                	cmp    edx,eax
c00203e0:	7d 05                	jge    c00203e7 <KeGetProcessEnvPair(Process*, int)+0x40>
c00203e2:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00203e5:	eb 20                	jmp    c0020407 <KeGetProcessEnvPair(Process*, int)+0x60>
c00203e7:	8b 3e                	mov    edi,DWORD PTR [esi]
c00203e9:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00203ec:	39 d1                	cmp    ecx,edx
c00203ee:	7e 04                	jle    c00203f4 <KeGetProcessEnvPair(Process*, int)+0x4d>
c00203f0:	29 c2                	sub    edx,eax
c00203f2:	eb 10                	jmp    c0020404 <KeGetProcessEnvPair(Process*, int)+0x5d>
c00203f4:	8b 35 84 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f984
c00203fa:	03 0e                	add    ecx,DWORD PTR [esi]
c00203fc:	39 d1                	cmp    ecx,edx
c00203fe:	7e 16                	jle    c0020416 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0020400:	29 c2                	sub    edx,eax
c0020402:	29 fa                	sub    edx,edi
c0020404:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0020407:	8d 14 d0             	lea    edx,[eax+edx*8]
c002040a:	8b 02                	mov    eax,DWORD PTR [edx]
c002040c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c002040f:	89 03                	mov    DWORD PTR [ebx],eax
c0020411:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0020414:	eb 1d                	jmp    c0020433 <KeGetProcessEnvPair(Process*, int)+0x8c>
c0020416:	83 ec 0c             	sub    esp,0xc
c0020419:	68 8e 2b 03 c0       	push   0xc0032b8e
c002041e:	e8 c7 00 00 00       	call   c00204ea <KePanic(char const*)>
c0020423:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020429:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020430:	83 c4 10             	add    esp,0x10
c0020433:	89 d8                	mov    eax,ebx
c0020435:	5b                   	pop    ebx
c0020436:	5e                   	pop    esi
c0020437:	5f                   	pop    edi
c0020438:	c2 04 00             	ret    0x4

c002043b <CPU::current()>:
c002043b:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0020440:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020446:	c3                   	ret    

c0020447 <operator new(unsigned long)>:
c0020447:	e9 f7 61 ff ff       	jmp    c0016643 <malloc>

c002044c <operator delete(void*)>:
c002044c:	e9 12 62 ff ff       	jmp    c0016663 <rfree>

c0020451 <disableIRQs()>:
c0020451:	fa                   	cli    
c0020452:	c3                   	ret    

c0020453 <enableIRQs()>:
c0020453:	fb                   	sti    
c0020454:	c3                   	ret    

c0020455 <lockScheduler()>:
c0020455:	fa                   	cli    
c0020456:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002045c:	c3                   	ret    

c002045d <unlockScheduler()>:
c002045d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020462:	48                   	dec    eax
c0020463:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020468:	75 01                	jne    c002046b <unlockScheduler()+0xe>
c002046a:	fb                   	sti    
c002046b:	c3                   	ret    

c002046c <lockStuff()>:
c002046c:	fa                   	cli    
c002046d:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0020473:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c0020479:	c3                   	ret    

c002047a <unlockStuff()>:
c002047a:	83 ec 0c             	sub    esp,0xc
c002047d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020482:	48                   	dec    eax
c0020483:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020488:	75 18                	jne    c00204a2 <unlockStuff()+0x28>
c002048a:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c0020491:	74 0f                	je     c00204a2 <unlockStuff()+0x28>
c0020493:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c002049d:	e8 5e 50 00 00       	call   c0025500 <schedule()>
c00204a2:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00204a7:	48                   	dec    eax
c00204a8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00204ad:	75 01                	jne    c00204b0 <unlockStuff()+0x36>
c00204af:	fb                   	sti    
c00204b0:	83 c4 0c             	add    esp,0xc
c00204b3:	c3                   	ret    

c00204b4 <Virt::getAKernelVAS()>:
c00204b4:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c00204b9:	c3                   	ret    

c00204ba <__not_memcpy>:
c00204ba:	57                   	push   edi
c00204bb:	56                   	push   esi
c00204bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00204c0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00204c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00204c8:	89 c7                	mov    edi,eax
c00204ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00204cc:	5e                   	pop    esi
c00204cd:	5f                   	pop    edi
c00204ce:	c3                   	ret    
c00204cf:	90                   	nop

c00204d0 <Mutex::Mutex()>:
c00204d0:	83 ec 0c             	sub    esp,0xc
c00204d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204d7:	83 ec 08             	sub    esp,0x8
c00204da:	6a 01                	push   0x1
c00204dc:	50                   	push   eax
c00204dd:	e8 b2 03 00 00       	call   c0020894 <Semaphore::Semaphore(int)>
c00204e2:	83 c4 10             	add    esp,0x10
c00204e5:	90                   	nop
c00204e6:	83 c4 0c             	add    esp,0xc
c00204e9:	c3                   	ret    

c00204ea <KePanic(char const*)>:
c00204ea:	c6 05 88 f9 03 c0 01 	mov    BYTE PTR ds:0xc003f988,0x1
c00204f1:	e9 04 6d 00 00       	jmp    c00271fa <HalPanic(char const*)>

c00204f6 <KePowerThread(void*)>:
c00204f6:	83 ec 0c             	sub    esp,0xc
c00204f9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00204fe:	48                   	dec    eax
c00204ff:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020504:	75 01                	jne    c0020507 <KePowerThread(void*)+0x11>
c0020506:	fb                   	sti    
c0020507:	83 ec 0c             	sub    esp,0xc
c002050a:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c0020511:	6a 0a                	push   0xa
c0020513:	e8 d4 51 00 00       	call   c00256ec <sleep(unsigned int)>
c0020518:	83 05 e4 f9 03 c0 0a 	add    DWORD PTR ds:0xc003f9e4,0xa
c002051f:	83 c4 10             	add    esp,0x10
c0020522:	eb e3                	jmp    c0020507 <KePowerThread(void*)+0x11>

c0020524 <KeChangePowerSettings(PowerSettings)>:
c0020524:	57                   	push   edi
c0020525:	b9 09 00 00 00       	mov    ecx,0x9
c002052a:	56                   	push   esi
c002052b:	bf c0 f9 03 c0       	mov    edi,0xc003f9c0
c0020530:	fc                   	cld    
c0020531:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0020535:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020537:	5e                   	pop    esi
c0020538:	5f                   	pop    edi
c0020539:	c3                   	ret    

c002053a <KeUserIOReceived()>:
c002053a:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c0020544:	c3                   	ret    

c0020545 <KeHandlePowerButton()>:
c0020545:	83 ec 0c             	sub    esp,0xc
c0020548:	a1 c0 f9 03 c0       	mov    eax,ds:0xc003f9c0
c002054d:	83 f8 02             	cmp    eax,0x2
c0020550:	75 10                	jne    c0020562 <KeHandlePowerButton()+0x1d>
c0020552:	83 ec 0c             	sub    esp,0xc
c0020555:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002055b:	e8 68 56 ff ff       	call   c0015bc8 <Computer::shutdown()>
c0020560:	eb 11                	jmp    c0020573 <KeHandlePowerButton()+0x2e>
c0020562:	48                   	dec    eax
c0020563:	75 11                	jne    c0020576 <KeHandlePowerButton()+0x31>
c0020565:	83 ec 0c             	sub    esp,0xc
c0020568:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002056e:	e8 85 56 ff ff       	call   c0015bf8 <Computer::sleep()>
c0020573:	83 c4 10             	add    esp,0x10
c0020576:	83 c4 0c             	add    esp,0xc
c0020579:	c3                   	ret    

c002057a <KeHandleSleepButton()>:
c002057a:	83 ec 0c             	sub    esp,0xc
c002057d:	a1 c4 f9 03 c0       	mov    eax,ds:0xc003f9c4
c0020582:	83 f8 02             	cmp    eax,0x2
c0020585:	75 10                	jne    c0020597 <KeHandleSleepButton()+0x1d>
c0020587:	83 ec 0c             	sub    esp,0xc
c002058a:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0020590:	e8 33 56 ff ff       	call   c0015bc8 <Computer::shutdown()>
c0020595:	eb 11                	jmp    c00205a8 <KeHandleSleepButton()+0x2e>
c0020597:	48                   	dec    eax
c0020598:	75 11                	jne    c00205ab <KeHandleSleepButton()+0x31>
c002059a:	83 ec 0c             	sub    esp,0xc
c002059d:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00205a3:	e8 50 56 ff ff       	call   c0015bf8 <Computer::sleep()>
c00205a8:	83 c4 10             	add    esp,0x10
c00205ab:	83 c4 0c             	add    esp,0xc
c00205ae:	c3                   	ret    

c00205af <KeSetupPowerManager()>:
c00205af:	83 ec 0c             	sub    esp,0xc
c00205b2:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c00205bc:	68 f0 00 00 00       	push   0xf0
c00205c1:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c00205c8:	6a 00                	push   0x0
c00205ca:	68 f6 04 02 c0       	push   0xc00204f6
c00205cf:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00205d5:	e8 d6 4c 00 00       	call   c00252b0 <Process::createThread(void (*)(void*), void*, int)>
c00205da:	c7 05 c0 f9 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc003f9c0,0x2
c00205e4:	c7 05 c4 f9 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003f9c4,0x1
c00205ee:	c7 05 c8 f9 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc003f9c8,0x3
c00205f8:	c7 05 cc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9cc,0x0
c0020602:	c7 05 d8 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d8,0x0
c002060c:	c7 05 d0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d0,0x0
c0020616:	c7 05 dc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9dc,0x0
c0020620:	c7 05 d4 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9d4,0x3c
c002062a:	c7 05 e0 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9e0,0x3c
c0020634:	83 c4 1c             	add    esp,0x1c
c0020637:	c3                   	ret    

c0020638 <KeRand()>:
c0020638:	69 05 e8 f9 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc003f9e8,0x2875
c0020642:	69 0d ec f9 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc003f9ec,0xa2e7b175
c002064c:	53                   	push   ebx
c002064d:	01 c1                	add    ecx,eax
c002064f:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0020654:	f7 25 e8 f9 03 c0    	mul    DWORD PTR ds:0xc003f9e8
c002065a:	01 ca                	add    edx,ecx
c002065c:	05 ef 04 b5 00       	add    eax,0xb504ef
c0020661:	83 d2 00             	adc    edx,0x0
c0020664:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c0020669:	0f b7 da             	movzx  ebx,dx
c002066c:	89 da                	mov    edx,ebx
c002066e:	89 1d ec f9 03 c0    	mov    DWORD PTR ds:0xc003f9ec,ebx
c0020674:	0f ac d0 0e          	shrd   eax,edx,0xe
c0020678:	5b                   	pop    ebx
c0020679:	c3                   	ret    

c002067a <KeSeedRand(unsigned int)>:
c002067a:	53                   	push   ebx
c002067b:	83 ec 08             	sub    esp,0x8
c002067e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020682:	e8 92 6e 00 00       	call   c0027519 <HalGetRand()>
c0020687:	c7 05 ec f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9ec,0x0
c0020691:	31 d8                	xor    eax,ebx
c0020693:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c0020698:	e8 9b ff ff ff       	call   c0020638 <KeRand()>
c002069d:	83 c4 08             	add    esp,0x8
c00206a0:	5b                   	pop    ebx
c00206a1:	eb 95                	jmp    c0020638 <KeRand()>

c00206a3 <KeInitRand()>:
c00206a3:	83 ec 0c             	sub    esp,0xc
c00206a6:	e8 63 6c 00 00       	call   c002730e <HalQueryPerformanceCounter()>
c00206ab:	0f 20 da             	mov    edx,cr3
c00206ae:	0f 22 da             	mov    cr3,edx
c00206b1:	0f 20 da             	mov    edx,cr3
c00206b4:	0f 22 da             	mov    cr3,edx
c00206b7:	0f 20 da             	mov    edx,cr3
c00206ba:	0f 22 da             	mov    cr3,edx
c00206bd:	0f 20 da             	mov    edx,cr3
c00206c0:	0f 22 da             	mov    cr3,edx
c00206c3:	83 ec 0c             	sub    esp,0xc
c00206c6:	35 03 8a 95 38       	xor    eax,0x38958a03
c00206cb:	50                   	push   eax
c00206cc:	e8 a9 ff ff ff       	call   c002067a <KeSeedRand(unsigned int)>
c00206d1:	83 c4 1c             	add    esp,0x1c
c00206d4:	c3                   	ret    
c00206d5:	66 90                	xchg   ax,ax
c00206d7:	90                   	nop

c00206d8 <KeResolveCompatibilitySymbol(char*)>:
c00206d8:	83 ec 0c             	sub    esp,0xc
c00206db:	83 ec 08             	sub    esp,0x8
c00206de:	68 a8 2b 03 c0       	push   0xc0032ba8
c00206e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206e7:	e8 64 00 fe ff       	call   c0000750 <strcmp>
c00206ec:	83 c4 10             	add    esp,0x10
c00206ef:	85 c0                	test   eax,eax
c00206f1:	0f 94 c0             	sete   al
c00206f4:	0f b6 c0             	movzx  eax,al
c00206f7:	85 c0                	test   eax,eax
c00206f9:	74 0d                	je     c0020708 <KeResolveCompatibilitySymbol(char*)+0x30>
c00206fb:	b8 bc a9 03 c0       	mov    eax,0xc003a9bc
c0020700:	e9 8b 01 00 00       	jmp    c0020890 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020705:	8d 76 00             	lea    esi,[esi+0x0]
c0020708:	83 ec 08             	sub    esp,0x8
c002070b:	68 b1 2b 03 c0       	push   0xc0032bb1
c0020710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020714:	e8 37 00 fe ff       	call   c0000750 <strcmp>
c0020719:	83 c4 10             	add    esp,0x10
c002071c:	85 c0                	test   eax,eax
c002071e:	0f 94 c0             	sete   al
c0020721:	0f b6 c0             	movzx  eax,al
c0020724:	85 c0                	test   eax,eax
c0020726:	74 0c                	je     c0020734 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0020728:	b8 00 e9 02 c0       	mov    eax,0xc002e900
c002072d:	e9 5e 01 00 00       	jmp    c0020890 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020732:	66 90                	xchg   ax,ax
c0020734:	83 ec 08             	sub    esp,0x8
c0020737:	68 bb 2b 03 c0       	push   0xc0032bbb
c002073c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020740:	e8 0b 00 fe ff       	call   c0000750 <strcmp>
c0020745:	83 c4 10             	add    esp,0x10
c0020748:	85 c0                	test   eax,eax
c002074a:	0f 94 c0             	sete   al
c002074d:	0f b6 c0             	movzx  eax,al
c0020750:	85 c0                	test   eax,eax
c0020752:	74 0c                	je     c0020760 <KeResolveCompatibilitySymbol(char*)+0x88>
c0020754:	b8 34 e6 02 c0       	mov    eax,0xc002e634
c0020759:	e9 32 01 00 00       	jmp    c0020890 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002075e:	66 90                	xchg   ax,ax
c0020760:	83 ec 08             	sub    esp,0x8
c0020763:	68 c4 2b 03 c0       	push   0xc0032bc4
c0020768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002076c:	e8 df ff fd ff       	call   c0000750 <strcmp>
c0020771:	83 c4 10             	add    esp,0x10
c0020774:	85 c0                	test   eax,eax
c0020776:	0f 94 c0             	sete   al
c0020779:	0f b6 c0             	movzx  eax,al
c002077c:	85 c0                	test   eax,eax
c002077e:	74 0c                	je     c002078c <KeResolveCompatibilitySymbol(char*)+0xb4>
c0020780:	b8 ea 04 02 c0       	mov    eax,0xc00204ea
c0020785:	e9 06 01 00 00       	jmp    c0020890 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002078a:	66 90                	xchg   ax,ax
c002078c:	83 ec 08             	sub    esp,0x8
c002078f:	68 d7 2b 03 c0       	push   0xc0032bd7
c0020794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020798:	e8 b3 ff fd ff       	call   c0000750 <strcmp>
c002079d:	83 c4 10             	add    esp,0x10
c00207a0:	85 c0                	test   eax,eax
c00207a2:	0f 94 c0             	sete   al
c00207a5:	0f b6 c0             	movzx  eax,al
c00207a8:	85 c0                	test   eax,eax
c00207aa:	74 0c                	je     c00207b8 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00207ac:	b8 87 fd 01 c0       	mov    eax,0xc001fd87
c00207b1:	e9 da 00 00 00       	jmp    c0020890 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00207b6:	66 90                	xchg   ax,ax
c00207b8:	83 ec 08             	sub    esp,0x8
c00207bb:	68 f4 2b 03 c0       	push   0xc0032bf4
c00207c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207c4:	e8 87 ff fd ff       	call   c0000750 <strcmp>
c00207c9:	83 c4 10             	add    esp,0x10
c00207cc:	85 c0                	test   eax,eax
c00207ce:	0f 94 c0             	sete   al
c00207d1:	0f b6 c0             	movzx  eax,al
c00207d4:	85 c0                	test   eax,eax
c00207d6:	74 0c                	je     c00207e4 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00207d8:	b8 00 ea 02 c0       	mov    eax,0xc002ea00
c00207dd:	e9 ae 00 00 00       	jmp    c0020890 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00207e2:	66 90                	xchg   ax,ax
c00207e4:	83 ec 08             	sub    esp,0x8
c00207e7:	68 fe 2b 03 c0       	push   0xc0032bfe
c00207ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207f0:	e8 5b ff fd ff       	call   c0000750 <strcmp>
c00207f5:	83 c4 10             	add    esp,0x10
c00207f8:	85 c0                	test   eax,eax
c00207fa:	0f 94 c0             	sete   al
c00207fd:	0f b6 c0             	movzx  eax,al
c0020800:	85 c0                	test   eax,eax
c0020802:	74 0c                	je     c0020810 <KeResolveCompatibilitySymbol(char*)+0x138>
c0020804:	b8 80 e7 02 c0       	mov    eax,0xc002e780
c0020809:	e9 82 00 00 00       	jmp    c0020890 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002080e:	66 90                	xchg   ax,ax
c0020810:	83 ec 08             	sub    esp,0x8
c0020813:	68 07 2c 03 c0       	push   0xc0032c07
c0020818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002081c:	e8 2f ff fd ff       	call   c0000750 <strcmp>
c0020821:	83 c4 10             	add    esp,0x10
c0020824:	85 c0                	test   eax,eax
c0020826:	0f 94 c0             	sete   al
c0020829:	0f b6 c0             	movzx  eax,al
c002082c:	85 c0                	test   eax,eax
c002082e:	74 08                	je     c0020838 <KeResolveCompatibilitySymbol(char*)+0x160>
c0020830:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c0020835:	eb 59                	jmp    c0020890 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020837:	90                   	nop
c0020838:	83 ec 08             	sub    esp,0x8
c002083b:	68 1f 2c 03 c0       	push   0xc0032c1f
c0020840:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020844:	e8 07 ff fd ff       	call   c0000750 <strcmp>
c0020849:	83 c4 10             	add    esp,0x10
c002084c:	85 c0                	test   eax,eax
c002084e:	0f 94 c0             	sete   al
c0020851:	0f b6 c0             	movzx  eax,al
c0020854:	85 c0                	test   eax,eax
c0020856:	74 08                	je     c0020860 <KeResolveCompatibilitySymbol(char*)+0x188>
c0020858:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c002085d:	eb 31                	jmp    c0020890 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002085f:	90                   	nop
c0020860:	83 ec 08             	sub    esp,0x8
c0020863:	68 2c 2c 03 c0       	push   0xc0032c2c
c0020868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002086c:	e8 df fe fd ff       	call   c0000750 <strcmp>
c0020871:	83 c4 10             	add    esp,0x10
c0020874:	85 c0                	test   eax,eax
c0020876:	0f 94 c0             	sete   al
c0020879:	0f b6 c0             	movzx  eax,al
c002087c:	85 c0                	test   eax,eax
c002087e:	74 08                	je     c0020888 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0020880:	b8 c1 a9 03 c0       	mov    eax,0xc003a9c1
c0020885:	eb 09                	jmp    c0020890 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020887:	90                   	nop
c0020888:	b8 00 00 00 00       	mov    eax,0x0
c002088d:	8d 76 00             	lea    esi,[esi+0x0]
c0020890:	83 c4 0c             	add    esp,0xc
c0020893:	c3                   	ret    

c0020894 <Semaphore::Semaphore(int)>:
c0020894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020898:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002089c:	89 10                	mov    DWORD PTR [eax],edx
c002089e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208a2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00208a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00208b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208b8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00208bf:	90                   	nop
c00208c0:	c3                   	ret    
c00208c1:	90                   	nop
c00208c2:	66 90                	xchg   ax,ax

c00208c4 <Semaphore::tryAcquire()>:
c00208c4:	83 ec 0c             	sub    esp,0xc
c00208c7:	fa                   	cli    
c00208c8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00208cd:	83 c0 01             	add    eax,0x1
c00208d0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00208d5:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00208da:	83 c0 01             	add    eax,0x1
c00208dd:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00208e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208e6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00208e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00208ef:	39 c2                	cmp    edx,eax
c00208f1:	7d 5d                	jge    c0020950 <Semaphore::tryAcquire()+0x8c>
c00208f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00208fa:	8d 50 01             	lea    edx,[eax+0x1]
c00208fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020901:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020904:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020909:	83 e8 01             	sub    eax,0x1
c002090c:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020911:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020916:	85 c0                	test   eax,eax
c0020918:	75 1a                	jne    c0020934 <Semaphore::tryAcquire()+0x70>
c002091a:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c002091f:	85 c0                	test   eax,eax
c0020921:	74 11                	je     c0020934 <Semaphore::tryAcquire()+0x70>
c0020923:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c002092d:	e8 ce 4b 00 00       	call   c0025500 <schedule()>
c0020932:	66 90                	xchg   ax,ax
c0020934:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020939:	83 e8 01             	sub    eax,0x1
c002093c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020941:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020946:	85 c0                	test   eax,eax
c0020948:	75 02                	jne    c002094c <Semaphore::tryAcquire()+0x88>
c002094a:	fb                   	sti    
c002094b:	90                   	nop
c002094c:	b0 01                	mov    al,0x1
c002094e:	eb 4c                	jmp    c002099c <Semaphore::tryAcquire()+0xd8>
c0020950:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020955:	83 e8 01             	sub    eax,0x1
c0020958:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002095d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020962:	85 c0                	test   eax,eax
c0020964:	75 1a                	jne    c0020980 <Semaphore::tryAcquire()+0xbc>
c0020966:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c002096b:	85 c0                	test   eax,eax
c002096d:	74 11                	je     c0020980 <Semaphore::tryAcquire()+0xbc>
c002096f:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020979:	e8 82 4b 00 00       	call   c0025500 <schedule()>
c002097e:	66 90                	xchg   ax,ax
c0020980:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020985:	83 e8 01             	sub    eax,0x1
c0020988:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002098d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020992:	85 c0                	test   eax,eax
c0020994:	75 02                	jne    c0020998 <Semaphore::tryAcquire()+0xd4>
c0020996:	fb                   	sti    
c0020997:	90                   	nop
c0020998:	b0 00                	mov    al,0x0
c002099a:	66 90                	xchg   ax,ax
c002099c:	83 c4 0c             	add    esp,0xc
c002099f:	c3                   	ret    

c00209a0 <Semaphore::assertLocked(char const*)>:
c00209a0:	83 ec 0c             	sub    esp,0xc
c00209a3:	fa                   	cli    
c00209a4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00209a9:	83 c0 01             	add    eax,0x1
c00209ac:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00209b1:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00209b6:	83 c0 01             	add    eax,0x1
c00209b9:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00209be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209c2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00209c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00209cb:	39 c2                	cmp    edx,eax
c00209cd:	7d 11                	jge    c00209e0 <Semaphore::assertLocked(char const*)+0x40>
c00209cf:	83 ec 0c             	sub    esp,0xc
c00209d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00209d6:	e8 0f fb ff ff       	call   c00204ea <KePanic(char const*)>
c00209db:	83 c4 10             	add    esp,0x10
c00209de:	66 90                	xchg   ax,ax
c00209e0:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00209e5:	83 e8 01             	sub    eax,0x1
c00209e8:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00209ed:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00209f2:	85 c0                	test   eax,eax
c00209f4:	75 1a                	jne    c0020a10 <Semaphore::assertLocked(char const*)+0x70>
c00209f6:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00209fb:	85 c0                	test   eax,eax
c00209fd:	74 11                	je     c0020a10 <Semaphore::assertLocked(char const*)+0x70>
c00209ff:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020a09:	e8 f2 4a 00 00       	call   c0025500 <schedule()>
c0020a0e:	66 90                	xchg   ax,ax
c0020a10:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020a15:	83 e8 01             	sub    eax,0x1
c0020a18:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020a1d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020a22:	85 c0                	test   eax,eax
c0020a24:	75 02                	jne    c0020a28 <Semaphore::assertLocked(char const*)+0x88>
c0020a26:	fb                   	sti    
c0020a27:	90                   	nop
c0020a28:	90                   	nop
c0020a29:	83 c4 0c             	add    esp,0xc
c0020a2c:	c3                   	ret    
c0020a2d:	90                   	nop
c0020a2e:	66 90                	xchg   ax,ax

c0020a30 <Semaphore::acquire(int)>:
c0020a30:	83 ec 1c             	sub    esp,0x1c
c0020a33:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020a38:	0f 84 9a 00 00 00    	je     c0020ad8 <Semaphore::acquire(int)+0xa8>
c0020a3e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020a46:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0020a4b:	90                   	nop
c0020a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0020a51:	85 c0                	test   eax,eax
c0020a53:	74 77                	je     c0020acc <Semaphore::acquire(int)+0x9c>
c0020a55:	83 ec 0c             	sub    esp,0xc
c0020a58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020a5c:	e8 63 fe ff ff       	call   c00208c4 <Semaphore::tryAcquire()>
c0020a61:	83 c4 10             	add    esp,0x10
c0020a64:	83 f0 01             	xor    eax,0x1
c0020a67:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0020a6b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0020a6f:	83 f0 01             	xor    eax,0x1
c0020a72:	0f b6 c0             	movzx  eax,al
c0020a75:	85 c0                	test   eax,eax
c0020a77:	75 4f                	jne    c0020ac8 <Semaphore::acquire(int)+0x98>
c0020a79:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0020a7e:	7f 2c                	jg     c0020aac <Semaphore::acquire(int)+0x7c>
c0020a80:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020a84:	89 d0                	mov    eax,edx
c0020a86:	c1 e0 02             	shl    eax,0x2
c0020a89:	01 d0                	add    eax,edx
c0020a8b:	01 c0                	add    eax,eax
c0020a8d:	83 ec 0c             	sub    esp,0xc
c0020a90:	50                   	push   eax
c0020a91:	e8 42 4c 00 00       	call   c00256d8 <milliTenthSleep(unsigned int)>
c0020a96:	83 c4 10             	add    esp,0x10
c0020a99:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020a9d:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0020aa1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0020aa9:	eb a1                	jmp    c0020a4c <Semaphore::acquire(int)+0x1c>
c0020aab:	90                   	nop
c0020aac:	83 ec 0c             	sub    esp,0xc
c0020aaf:	68 90 01 00 00       	push   0x190
c0020ab4:	e8 1f 4c 00 00       	call   c00256d8 <milliTenthSleep(unsigned int)>
c0020ab9:	83 c4 10             	add    esp,0x10
c0020abc:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0020ac1:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0020ac6:	eb 84                	jmp    c0020a4c <Semaphore::acquire(int)+0x1c>
c0020ac8:	90                   	nop
c0020ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0020acc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ad0:	e9 ff 00 00 00       	jmp    c0020bd4 <Semaphore::acquire(int)+0x1a4>
c0020ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0020ad8:	fa                   	cli    
c0020ad9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020ade:	83 c0 01             	add    eax,0x1
c0020ae1:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020ae6:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020aeb:	83 c0 01             	add    eax,0x1
c0020aee:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020af3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020af7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020afa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020afe:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b00:	39 c2                	cmp    edx,eax
c0020b02:	7d 14                	jge    c0020b18 <Semaphore::acquire(int)+0xe8>
c0020b04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020b0b:	8d 50 01             	lea    edx,[eax+0x1]
c0020b0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b12:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020b15:	eb 6d                	jmp    c0020b84 <Semaphore::acquire(int)+0x154>
c0020b17:	90                   	nop
c0020b18:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020b1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b1f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020b26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020b2d:	85 c0                	test   eax,eax
c0020b2f:	75 13                	jne    c0020b44 <Semaphore::acquire(int)+0x114>
c0020b31:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020b36:	8b 10                	mov    edx,DWORD PTR [eax]
c0020b38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b3c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020b3f:	eb 17                	jmp    c0020b58 <Semaphore::acquire(int)+0x128>
c0020b41:	8d 76 00             	lea    esi,[esi+0x0]
c0020b44:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0020b49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b4d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020b50:	8b 12                	mov    edx,DWORD PTR [edx]
c0020b52:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0020b55:	8d 76 00             	lea    esi,[esi+0x0]
c0020b58:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020b5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0020b5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b63:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020b66:	83 ec 0c             	sub    esp,0xc
c0020b69:	68 3c 2c 03 c0       	push   0xc0032c3c
c0020b6e:	e8 5e 89 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0020b73:	83 c4 10             	add    esp,0x10
c0020b76:	83 ec 0c             	sub    esp,0xc
c0020b79:	6a 05                	push   0x5
c0020b7b:	e8 3c 4a 00 00       	call   c00255bc <blockTask(TaskState)>
c0020b80:	83 c4 10             	add    esp,0x10
c0020b83:	90                   	nop
c0020b84:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020b89:	83 e8 01             	sub    eax,0x1
c0020b8c:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020b91:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020b96:	85 c0                	test   eax,eax
c0020b98:	75 1a                	jne    c0020bb4 <Semaphore::acquire(int)+0x184>
c0020b9a:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020b9f:	85 c0                	test   eax,eax
c0020ba1:	74 11                	je     c0020bb4 <Semaphore::acquire(int)+0x184>
c0020ba3:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020bad:	e8 4e 49 00 00       	call   c0025500 <schedule()>
c0020bb2:	66 90                	xchg   ax,ax
c0020bb4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020bb9:	83 e8 01             	sub    eax,0x1
c0020bbc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020bc1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020bc6:	85 c0                	test   eax,eax
c0020bc8:	75 02                	jne    c0020bcc <Semaphore::acquire(int)+0x19c>
c0020bca:	fb                   	sti    
c0020bcb:	90                   	nop
c0020bcc:	b8 00 00 00 00       	mov    eax,0x0
c0020bd1:	8d 76 00             	lea    esi,[esi+0x0]
c0020bd4:	83 c4 1c             	add    esp,0x1c
c0020bd7:	c3                   	ret    

c0020bd8 <Semaphore::acquire()>:
c0020bd8:	83 ec 0c             	sub    esp,0xc
c0020bdb:	83 ec 08             	sub    esp,0x8
c0020bde:	6a 00                	push   0x0
c0020be0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020be4:	e8 47 fe ff ff       	call   c0020a30 <Semaphore::acquire(int)>
c0020be9:	83 c4 10             	add    esp,0x10
c0020bec:	90                   	nop
c0020bed:	83 c4 0c             	add    esp,0xc
c0020bf0:	c3                   	ret    
c0020bf1:	90                   	nop
c0020bf2:	66 90                	xchg   ax,ax

c0020bf4 <Semaphore::release()>:
c0020bf4:	83 ec 1c             	sub    esp,0x1c
c0020bf7:	fa                   	cli    
c0020bf8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020bfd:	83 c0 01             	add    eax,0x1
c0020c00:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020c05:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020c0a:	83 c0 01             	add    eax,0x1
c0020c0d:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020c12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020c19:	85 c0                	test   eax,eax
c0020c1b:	74 2b                	je     c0020c48 <Semaphore::release()+0x54>
c0020c1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c21:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020c24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c2c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0020c2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020c36:	83 ec 0c             	sub    esp,0xc
c0020c39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020c3d:	e8 b6 4b 00 00       	call   c00257f8 <unblockTask(ThreadControlBlock*)>
c0020c42:	83 c4 10             	add    esp,0x10
c0020c45:	eb 15                	jmp    c0020c5c <Semaphore::release()+0x68>
c0020c47:	90                   	nop
c0020c48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c4c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020c4f:	8d 50 ff             	lea    edx,[eax-0x1]
c0020c52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c56:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020c59:	8d 76 00             	lea    esi,[esi+0x0]
c0020c5c:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020c61:	83 e8 01             	sub    eax,0x1
c0020c64:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020c69:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020c6e:	85 c0                	test   eax,eax
c0020c70:	75 1a                	jne    c0020c8c <Semaphore::release()+0x98>
c0020c72:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020c77:	85 c0                	test   eax,eax
c0020c79:	74 11                	je     c0020c8c <Semaphore::release()+0x98>
c0020c7b:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020c85:	e8 76 48 00 00       	call   c0025500 <schedule()>
c0020c8a:	66 90                	xchg   ax,ax
c0020c8c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020c91:	83 e8 01             	sub    eax,0x1
c0020c94:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020c99:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020c9e:	85 c0                	test   eax,eax
c0020ca0:	75 02                	jne    c0020ca4 <Semaphore::release()+0xb0>
c0020ca2:	fb                   	sti    
c0020ca3:	90                   	nop
c0020ca4:	90                   	nop
c0020ca5:	83 c4 1c             	add    esp,0x1c
c0020ca8:	c3                   	ret    

c0020ca9 <KiSigKill(int)>:
c0020ca9:	83 ec 0c             	sub    esp,0xc
c0020cac:	6a 00                	push   0x0
c0020cae:	6a 00                	push   0x0
c0020cb0:	6a ff                	push   0xffffffff
c0020cb2:	6a 01                	push   0x1
c0020cb4:	e8 99 43 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020cb9:	83 c4 1c             	add    esp,0x1c
c0020cbc:	c3                   	ret    

c0020cbd <KiDefaultSignalHandlerIgnore(int)>:
c0020cbd:	c3                   	ret    

c0020cbe <KiDefaultSignalHandlerPause(int)>:
c0020cbe:	57                   	push   edi
c0020cbf:	b9 07 00 00 00       	mov    ecx,0x7
c0020cc4:	56                   	push   esi
c0020cc5:	be 97 2c 03 c0       	mov    esi,0xc0032c97
c0020cca:	83 ec 24             	sub    esp,0x24
c0020ccd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020cd1:	fc                   	cld    
c0020cd2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020cd4:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020cd8:	50                   	push   eax
c0020cd9:	6a 00                	push   0x0
c0020cdb:	6a 00                	push   0x0
c0020cdd:	6a 27                	push   0x27
c0020cdf:	e8 6e 43 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020ce4:	83 c4 34             	add    esp,0x34
c0020ce7:	5e                   	pop    esi
c0020ce8:	5f                   	pop    edi
c0020ce9:	c3                   	ret    

c0020cea <KiDefaultSignalHandlerResume(int)>:
c0020cea:	57                   	push   edi
c0020ceb:	b9 1d 00 00 00       	mov    ecx,0x1d
c0020cf0:	56                   	push   esi
c0020cf1:	be b3 2c 03 c0       	mov    esi,0xc0032cb3
c0020cf6:	83 ec 24             	sub    esp,0x24
c0020cf9:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0020cfd:	fc                   	cld    
c0020cfe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020d00:	8d 44 24 03          	lea    eax,[esp+0x3]
c0020d04:	50                   	push   eax
c0020d05:	6a 00                	push   0x0
c0020d07:	6a 00                	push   0x0
c0020d09:	6a 27                	push   0x27
c0020d0b:	e8 42 43 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020d10:	83 c4 34             	add    esp,0x34
c0020d13:	5e                   	pop    esi
c0020d14:	5f                   	pop    edi
c0020d15:	c3                   	ret    

c0020d16 <KeDeinitSignals(SigHandlerBlock*)>:
c0020d16:	e9 38 59 ff ff       	jmp    c0016653 <free>

c0020d1b <KeInitSignals()>:
c0020d1b:	53                   	push   ebx
c0020d1c:	83 ec 14             	sub    esp,0x14
c0020d1f:	68 c8 00 00 00       	push   0xc8
c0020d24:	e8 1a 59 ff ff       	call   c0016643 <malloc>
c0020d29:	83 c4 0c             	add    esp,0xc
c0020d2c:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0020d36:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0020d40:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0020d47:	89 c3                	mov    ebx,eax
c0020d49:	6a 20                	push   0x20
c0020d4b:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0020d51:	6a 00                	push   0x0
c0020d53:	50                   	push   eax
c0020d54:	e8 97 f7 fd ff       	call   c00004f0 <memset>
c0020d59:	83 c4 0c             	add    esp,0xc
c0020d5c:	6a 44                	push   0x44
c0020d5e:	6a 00                	push   0x0
c0020d60:	53                   	push   ebx
c0020d61:	e8 8a f7 fd ff       	call   c00004f0 <memset>
c0020d66:	89 d8                	mov    eax,ebx
c0020d68:	83 c4 18             	add    esp,0x18
c0020d6b:	5b                   	pop    ebx
c0020d6c:	c3                   	ret    

c0020d6d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0020d6d:	53                   	push   ebx
c0020d6e:	b8 01 00 00 00       	mov    eax,0x1
c0020d73:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020d77:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020d7b:	83 f9 10             	cmp    ecx,0x10
c0020d7e:	7f 21                	jg     c0020da1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0020d80:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0020d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d87:	89 03                	mov    DWORD PTR [ebx],eax
c0020d89:	b8 01 00 00 00       	mov    eax,0x1
c0020d8e:	d3 e0                	shl    eax,cl
c0020d90:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0020d94:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0020d97:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0020d9f:	31 c0                	xor    eax,eax
c0020da1:	5b                   	pop    ebx
c0020da2:	c3                   	ret    

c0020da3 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0020da3:	55                   	push   ebp
c0020da4:	57                   	push   edi
c0020da5:	bf 08 00 00 00       	mov    edi,0x8
c0020daa:	56                   	push   esi
c0020dab:	53                   	push   ebx
c0020dac:	83 ec 18             	sub    esp,0x18
c0020daf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020db3:	68 d0 2c 03 c0       	push   0xc0032cd0
c0020db8:	e8 14 87 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0020dbd:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020dc4:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0020dca:	83 c4 10             	add    esp,0x10
c0020dcd:	31 c9                	xor    ecx,ecx
c0020dcf:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020dd3:	99                   	cdq    
c0020dd4:	f7 ff                	idiv   edi
c0020dd6:	8d 42 24             	lea    eax,[edx+0x24]
c0020dd9:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0020ddd:	85 f6                	test   esi,esi
c0020ddf:	75 1a                	jne    c0020dfb <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0020de1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020de5:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0020de9:	50                   	push   eax
c0020dea:	50                   	push   eax
c0020deb:	52                   	push   edx
c0020dec:	68 e1 2c 03 c0       	push   0xc0032ce1
c0020df1:	e8 db 86 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0020df6:	83 c4 10             	add    esp,0x10
c0020df9:	eb 1b                	jmp    c0020e16 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0020dfb:	41                   	inc    ecx
c0020dfc:	83 f9 08             	cmp    ecx,0x8
c0020dff:	75 ce                	jne    c0020dcf <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0020e01:	83 ec 0c             	sub    esp,0xc
c0020e04:	be 01 00 00 00       	mov    esi,0x1
c0020e09:	68 02 2d 03 c0       	push   0xc0032d02
c0020e0e:	e8 be 86 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0020e13:	83 c4 10             	add    esp,0x10
c0020e16:	83 c4 0c             	add    esp,0xc
c0020e19:	89 f0                	mov    eax,esi
c0020e1b:	5b                   	pop    ebx
c0020e1c:	5e                   	pop    esi
c0020e1d:	5f                   	pop    edi
c0020e1e:	5d                   	pop    ebp
c0020e1f:	c3                   	ret    

c0020e20 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0020e20:	55                   	push   ebp
c0020e21:	57                   	push   edi
c0020e22:	56                   	push   esi
c0020e23:	53                   	push   ebx
c0020e24:	51                   	push   ecx
c0020e25:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020e29:	85 db                	test   ebx,ebx
c0020e2b:	0f 84 bc 00 00 00    	je     c0020eed <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020e31:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0020e38:	0f 84 af 00 00 00    	je     c0020eed <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020e3e:	31 c9                	xor    ecx,ecx
c0020e40:	bf 08 00 00 00       	mov    edi,0x8
c0020e45:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0020e4b:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0020e4e:	99                   	cdq    
c0020e4f:	f7 ff                	idiv   edi
c0020e51:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0020e58:	85 ed                	test   ebp,ebp
c0020e5a:	0f 84 9e 00 00 00    	je     c0020efe <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0020e60:	89 e9                	mov    ecx,ebp
c0020e62:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0020e68:	bf 01 00 00 00       	mov    edi,0x1
c0020e6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e70:	d3 e7                	shl    edi,cl
c0020e72:	31 c9                	xor    ecx,ecx
c0020e74:	b8 01 00 00 00       	mov    eax,0x1
c0020e79:	d3 e0                	shl    eax,cl
c0020e7b:	85 04 24             	test   DWORD PTR [esp],eax
c0020e7e:	74 06                	je     c0020e86 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0020e80:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0020e84:	75 67                	jne    c0020eed <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020e86:	41                   	inc    ecx
c0020e87:	83 f9 11             	cmp    ecx,0x11
c0020e8a:	75 e8                	jne    c0020e74 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0020e8c:	46                   	inc    esi
c0020e8d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020e90:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020e96:	09 f8                	or     eax,edi
c0020e98:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0020ea3:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0020ea9:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0020eb0:	31 c0                	xor    eax,eax
c0020eb2:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0020eba:	74 09                	je     c0020ec5 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0020ebc:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020ec3:	eb 06                	jmp    c0020ecb <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0020ec5:	40                   	inc    eax
c0020ec6:	83 f8 08             	cmp    eax,0x8
c0020ec9:	75 e7                	jne    c0020eb2 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0020ecb:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0020ece:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020ed2:	83 fd 09             	cmp    ebp,0x9
c0020ed5:	89 2a                	mov    DWORD PTR [edx],ebp
c0020ed7:	75 07                	jne    c0020ee0 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0020ed9:	b8 a9 0c 02 c0       	mov    eax,0xc0020ca9
c0020ede:	eb 31                	jmp    c0020f11 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020ee0:	83 f8 01             	cmp    eax,0x1
c0020ee3:	75 0c                	jne    c0020ef1 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0020ee5:	f7 d7                	not    edi
c0020ee7:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0020eed:	31 c0                	xor    eax,eax
c0020eef:	eb 20                	jmp    c0020f11 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020ef1:	85 c0                	test   eax,eax
c0020ef3:	75 1c                	jne    c0020f11 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020ef5:	8b 04 ad 40 45 03 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffcbac0]
c0020efc:	eb 13                	jmp    c0020f11 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020efe:	46                   	inc    esi
c0020eff:	41                   	inc    ecx
c0020f00:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020f06:	83 f9 08             	cmp    ecx,0x8
c0020f09:	0f 85 36 ff ff ff    	jne    c0020e45 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0020f0f:	eb dc                	jmp    c0020eed <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020f11:	5a                   	pop    edx
c0020f12:	5b                   	pop    ebx
c0020f13:	5e                   	pop    esi
c0020f14:	5f                   	pop    edi
c0020f15:	5d                   	pop    ebp
c0020f16:	c3                   	ret    

c0020f17 <KiCheckSignalZ>:
c0020f17:	83 ec 10             	sub    esp,0x10
c0020f1a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020f1e:	50                   	push   eax
c0020f1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020f24:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020f27:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020f2d:	e8 ee fe ff ff       	call   c0020e20 <KeCheckSignal(SigHandlerBlock*, int*)>
c0020f32:	5a                   	pop    edx
c0020f33:	31 d2                	xor    edx,edx
c0020f35:	59                   	pop    ecx
c0020f36:	85 c0                	test   eax,eax
c0020f38:	74 19                	je     c0020f53 <KiCheckSignalZ+0x3c>
c0020f3a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0020f40:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020f43:	89 02                	mov    DWORD PTR [edx],eax
c0020f45:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0020f4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f50:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0020f53:	89 d0                	mov    eax,edx
c0020f55:	83 c4 10             	add    esp,0x10
c0020f58:	c3                   	ret    

c0020f59 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0020f59:	56                   	push   esi
c0020f5a:	53                   	push   ebx
c0020f5b:	bb 01 00 00 00       	mov    ebx,0x1
c0020f60:	52                   	push   edx
c0020f61:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020f65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020f69:	d3 e3                	shl    ebx,cl
c0020f6b:	83 f9 10             	cmp    ecx,0x10
c0020f6e:	7f 08                	jg     c0020f78 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0020f70:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0020f76:	75 10                	jne    c0020f88 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0020f78:	83 ec 0c             	sub    esp,0xc
c0020f7b:	68 13 2d 03 c0       	push   0xc0032d13
c0020f80:	e8 65 f5 ff ff       	call   c00204ea <KePanic(char const*)>
c0020f85:	83 c4 10             	add    esp,0x10
c0020f88:	f7 d3                	not    ebx
c0020f8a:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0020f90:	58                   	pop    eax
c0020f91:	5b                   	pop    ebx
c0020f92:	5e                   	pop    esi
c0020f93:	c3                   	ret    

c0020f94 <KiFinishSignalZ>:
c0020f94:	53                   	push   ebx
c0020f95:	83 ec 10             	sub    esp,0x10
c0020f98:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020f9c:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0020f9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020fa4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020fa7:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020fad:	e8 a7 ff ff ff       	call   c0020f59 <KeCompleteSignal(SigHandlerBlock*, int)>
c0020fb2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020fb8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020fbf:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0020fc6:	83 c4 18             	add    esp,0x18
c0020fc9:	5b                   	pop    ebx
c0020fca:	c3                   	ret    

c0020fcb <SysSeekDir(regs*)>:
c0020fcb:	31 c0                	xor    eax,eax
c0020fcd:	31 d2                	xor    edx,edx
c0020fcf:	c3                   	ret    

c0020fd0 <SysTellDir(regs*)>:
c0020fd0:	31 c0                	xor    eax,eax
c0020fd2:	31 d2                	xor    edx,edx
c0020fd4:	c3                   	ret    

c0020fd5 <SysVerify(regs*)>:
c0020fd5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020fd9:	31 d2                	xor    edx,edx
c0020fdb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020fde:	c3                   	ret    

c0020fdf <SysGetArgc(regs*)>:
c0020fdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020fe4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020fe7:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0020fed:	89 c2                	mov    edx,eax
c0020fef:	c1 fa 1f             	sar    edx,0x1f
c0020ff2:	c3                   	ret    

c0020ff3 <SysTTYName(regs*)>:
c0020ff3:	b8 01 00 00 00       	mov    eax,0x1
c0020ff8:	31 d2                	xor    edx,edx
c0020ffa:	c3                   	ret    

c0020ffb <SysFormatDisk(regs*)>:
c0020ffb:	56                   	push   esi
c0020ffc:	53                   	push   ebx
c0020ffd:	83 ec 04             	sub    esp,0x4
c0021000:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021004:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c002100a:	eb 28                	jmp    c0021034 <SysFormatDisk(regs*)+0x39>
c002100c:	83 ec 0c             	sub    esp,0xc
c002100f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0021012:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0021015:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021017:	51                   	push   ecx
c0021018:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c002101b:	51                   	push   ecx
c002101c:	50                   	push   eax
c002101d:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0021024:	50                   	push   eax
c0021025:	53                   	push   ebx
c0021026:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0021029:	83 c4 20             	add    esp,0x20
c002102c:	83 f8 08             	cmp    eax,0x8
c002102f:	75 14                	jne    c0021045 <SysFormatDisk(regs*)+0x4a>
c0021031:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0021034:	85 db                	test   ebx,ebx
c0021036:	75 d4                	jne    c002100c <SysFormatDisk(regs*)+0x11>
c0021038:	83 c4 04             	add    esp,0x4
c002103b:	b8 03 00 00 00       	mov    eax,0x3
c0021040:	31 d2                	xor    edx,edx
c0021042:	5b                   	pop    ebx
c0021043:	5e                   	pop    esi
c0021044:	c3                   	ret    
c0021045:	85 c0                	test   eax,eax
c0021047:	74 1f                	je     c0021068 <SysFormatDisk(regs*)+0x6d>
c0021049:	83 f8 09             	cmp    eax,0x9
c002104c:	74 0d                	je     c002105b <SysFormatDisk(regs*)+0x60>
c002104e:	83 c4 04             	add    esp,0x4
c0021051:	b8 02 00 00 00       	mov    eax,0x2
c0021056:	31 d2                	xor    edx,edx
c0021058:	5b                   	pop    ebx
c0021059:	5e                   	pop    esi
c002105a:	c3                   	ret    
c002105b:	83 c4 04             	add    esp,0x4
c002105e:	b8 01 00 00 00       	mov    eax,0x1
c0021063:	31 d2                	xor    edx,edx
c0021065:	5b                   	pop    ebx
c0021066:	5e                   	pop    esi
c0021067:	c3                   	ret    
c0021068:	83 c4 04             	add    esp,0x4
c002106b:	31 c0                	xor    eax,eax
c002106d:	31 d2                	xor    edx,edx
c002106f:	5b                   	pop    ebx
c0021070:	5e                   	pop    esi
c0021071:	c3                   	ret    

c0021072 <SysSetDiskVolumeLabel(regs*)>:
c0021072:	56                   	push   esi
c0021073:	53                   	push   ebx
c0021074:	83 ec 04             	sub    esp,0x4
c0021077:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002107b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c002107e:	83 f8 19             	cmp    eax,0x19
c0021081:	77 33                	ja     c00210b6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0021083:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c002108a:	85 c9                	test   ecx,ecx
c002108c:	74 28                	je     c00210b6 <SysSetDiskVolumeLabel(regs*)+0x44>
c002108e:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0021091:	85 db                	test   ebx,ebx
c0021093:	74 21                	je     c00210b6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0021095:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c002109b:	85 d2                	test   edx,edx
c002109d:	74 17                	je     c00210b6 <SysSetDiskVolumeLabel(regs*)+0x44>
c002109f:	8b 32                	mov    esi,DWORD PTR [edx]
c00210a1:	53                   	push   ebx
c00210a2:	50                   	push   eax
c00210a3:	51                   	push   ecx
c00210a4:	52                   	push   edx
c00210a5:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c00210a8:	83 c4 10             	add    esp,0x10
c00210ab:	89 c2                	mov    edx,eax
c00210ad:	83 c4 04             	add    esp,0x4
c00210b0:	c1 fa 1f             	sar    edx,0x1f
c00210b3:	5b                   	pop    ebx
c00210b4:	5e                   	pop    esi
c00210b5:	c3                   	ret    
c00210b6:	83 c4 04             	add    esp,0x4
c00210b9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00210be:	ba ff ff ff ff       	mov    edx,0xffffffff
c00210c3:	5b                   	pop    ebx
c00210c4:	5e                   	pop    esi
c00210c5:	c3                   	ret    

c00210c6 <SysGetDiskVolumeLabel(regs*)>:
c00210c6:	57                   	push   edi
c00210c7:	56                   	push   esi
c00210c8:	53                   	push   ebx
c00210c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210cd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00210d0:	83 fa 19             	cmp    edx,0x19
c00210d3:	77 3c                	ja     c0021111 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00210d5:	8b 0c 95 80 f3 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc0c80]
c00210dc:	85 c9                	test   ecx,ecx
c00210de:	74 31                	je     c0021111 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00210e0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00210e3:	85 db                	test   ebx,ebx
c00210e5:	74 2a                	je     c0021111 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00210e7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00210ea:	85 f6                	test   esi,esi
c00210ec:	74 23                	je     c0021111 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00210ee:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c00210f4:	85 c0                	test   eax,eax
c00210f6:	74 19                	je     c0021111 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00210f8:	83 ec 0c             	sub    esp,0xc
c00210fb:	8b 38                	mov    edi,DWORD PTR [eax]
c00210fd:	56                   	push   esi
c00210fe:	53                   	push   ebx
c00210ff:	52                   	push   edx
c0021100:	51                   	push   ecx
c0021101:	50                   	push   eax
c0021102:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0021105:	83 c4 20             	add    esp,0x20
c0021108:	89 c2                	mov    edx,eax
c002110a:	5b                   	pop    ebx
c002110b:	c1 fa 1f             	sar    edx,0x1f
c002110e:	5e                   	pop    esi
c002110f:	5f                   	pop    edi
c0021110:	c3                   	ret    
c0021111:	5b                   	pop    ebx
c0021112:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0021117:	ba ff ff ff ff       	mov    edx,0xffffffff
c002111c:	5e                   	pop    esi
c002111d:	5f                   	pop    edi
c002111e:	c3                   	ret    

c002111f <SysShutdown(regs*)>:
c002111f:	83 ec 0c             	sub    esp,0xc
c0021122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021126:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021129:	85 c0                	test   eax,eax
c002112b:	74 18                	je     c0021145 <SysShutdown(regs*)+0x26>
c002112d:	83 f8 01             	cmp    eax,0x1
c0021130:	74 38                	je     c002116a <SysShutdown(regs*)+0x4b>
c0021132:	83 f8 02             	cmp    eax,0x2
c0021135:	74 24                	je     c002115b <SysShutdown(regs*)+0x3c>
c0021137:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002113c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021141:	83 c4 0c             	add    esp,0xc
c0021144:	c3                   	ret    
c0021145:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002114a:	8b 10                	mov    edx,DWORD PTR [eax]
c002114c:	6a 00                	push   0x0
c002114e:	6a 00                	push   0x0
c0021150:	6a 00                	push   0x0
c0021152:	50                   	push   eax
c0021153:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021156:	83 c4 10             	add    esp,0x10
c0021159:	eb dc                	jmp    c0021137 <SysShutdown(regs*)+0x18>
c002115b:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0021160:	8b 10                	mov    edx,DWORD PTR [eax]
c0021162:	6a 00                	push   0x0
c0021164:	6a 00                	push   0x0
c0021166:	6a 01                	push   0x1
c0021168:	eb e8                	jmp    c0021152 <SysShutdown(regs*)+0x33>
c002116a:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c002116f:	85 c0                	test   eax,eax
c0021171:	74 02                	je     c0021175 <SysShutdown(regs*)+0x56>
c0021173:	ff d0                	call   eax
c0021175:	31 c0                	xor    eax,eax
c0021177:	31 d2                	xor    edx,edx
c0021179:	83 c4 0c             	add    esp,0xc
c002117c:	c3                   	ret    

c002117d <SysRealpath(regs*)>:
c002117d:	83 ec 0c             	sub    esp,0xc
c0021180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021184:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0021187:	85 d2                	test   edx,edx
c0021189:	74 07                	je     c0021192 <SysRealpath(regs*)+0x15>
c002118b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c002118e:	85 c0                	test   eax,eax
c0021190:	75 0b                	jne    c002119d <SysRealpath(regs*)+0x20>
c0021192:	b8 01 00 00 00       	mov    eax,0x1
c0021197:	31 d2                	xor    edx,edx
c0021199:	83 c4 0c             	add    esp,0xc
c002119c:	c3                   	ret    
c002119d:	6a 00                	push   0x0
c002119f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00211a5:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00211a8:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00211ae:	51                   	push   ecx
c00211af:	52                   	push   edx
c00211b0:	50                   	push   eax
c00211b1:	e8 2a 92 ff ff       	call   c001a3e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00211b6:	83 c4 10             	add    esp,0x10
c00211b9:	31 c0                	xor    eax,eax
c00211bb:	31 d2                	xor    edx,edx
c00211bd:	83 c4 0c             	add    esp,0xc
c00211c0:	c3                   	ret    

c00211c1 <SysReadDir(regs*)>:
c00211c1:	53                   	push   ebx
c00211c2:	83 ec 18             	sub    esp,0x18
c00211c5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00211c9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00211cc:	83 f8 02             	cmp    eax,0x2
c00211cf:	76 61                	jbe    c0021232 <SysReadDir(regs*)+0x71>
c00211d1:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00211d8:	77 49                	ja     c0021223 <SysReadDir(regs*)+0x62>
c00211da:	83 ec 0c             	sub    esp,0xc
c00211dd:	50                   	push   eax
c00211de:	e8 5c 6e ff ff       	call   c001803f <KeGetFileFromDescriptor(int)>
c00211e3:	83 c4 10             	add    esp,0x10
c00211e6:	85 c0                	test   eax,eax
c00211e8:	74 39                	je     c0021223 <SysReadDir(regs*)+0x62>
c00211ea:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00211f2:	83 ec 0c             	sub    esp,0xc
c00211f5:	8b 10                	mov    edx,DWORD PTR [eax]
c00211f7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00211fb:	51                   	push   ecx
c00211fc:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00211ff:	51                   	push   ecx
c0021200:	6a 00                	push   0x0
c0021202:	68 10 01 00 00       	push   0x110
c0021207:	50                   	push   eax
c0021208:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002120b:	83 c4 20             	add    esp,0x20
c002120e:	85 c0                	test   eax,eax
c0021210:	74 29                	je     c002123b <SysReadDir(regs*)+0x7a>
c0021212:	83 f8 07             	cmp    eax,0x7
c0021215:	74 1b                	je     c0021232 <SysReadDir(regs*)+0x71>
c0021217:	b8 02 00 00 00       	mov    eax,0x2
c002121c:	31 d2                	xor    edx,edx
c002121e:	83 c4 18             	add    esp,0x18
c0021221:	5b                   	pop    ebx
c0021222:	c3                   	ret    
c0021223:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021228:	ba ff ff ff ff       	mov    edx,0xffffffff
c002122d:	83 c4 18             	add    esp,0x18
c0021230:	5b                   	pop    ebx
c0021231:	c3                   	ret    
c0021232:	b8 01 00 00 00       	mov    eax,0x1
c0021237:	31 d2                	xor    edx,edx
c0021239:	eb e3                	jmp    c002121e <SysReadDir(regs*)+0x5d>
c002123b:	31 c0                	xor    eax,eax
c002123d:	31 d2                	xor    edx,edx
c002123f:	eb dd                	jmp    c002121e <SysReadDir(regs*)+0x5d>

c0021241 <SysIsATTY(regs*)>:
c0021241:	83 ec 0c             	sub    esp,0xc
c0021244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021248:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002124b:	83 f8 02             	cmp    eax,0x2
c002124e:	76 07                	jbe    c0021257 <SysIsATTY(regs*)+0x16>
c0021250:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0021255:	75 26                	jne    c002127d <SysIsATTY(regs*)+0x3c>
c0021257:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002125c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002125f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0021265:	85 c0                	test   eax,eax
c0021267:	74 24                	je     c002128d <SysIsATTY(regs*)+0x4c>
c0021269:	83 ec 0c             	sub    esp,0xc
c002126c:	8b 10                	mov    edx,DWORD PTR [eax]
c002126e:	50                   	push   eax
c002126f:	ff 12                	call   DWORD PTR [edx]
c0021271:	31 d2                	xor    edx,edx
c0021273:	0f b6 c0             	movzx  eax,al
c0021276:	83 c4 10             	add    esp,0x10
c0021279:	83 c4 0c             	add    esp,0xc
c002127c:	c3                   	ret    
c002127d:	83 ec 0c             	sub    esp,0xc
c0021280:	50                   	push   eax
c0021281:	e8 b9 6d ff ff       	call   c001803f <KeGetFileFromDescriptor(int)>
c0021286:	83 c4 10             	add    esp,0x10
c0021289:	85 c0                	test   eax,eax
c002128b:	75 dc                	jne    c0021269 <SysIsATTY(regs*)+0x28>
c002128d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021292:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021297:	83 c4 0c             	add    esp,0xc
c002129a:	c3                   	ret    

c002129b <SysSeek(regs*)>:
c002129b:	53                   	push   ebx
c002129c:	83 ec 08             	sub    esp,0x8
c002129f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00212a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00212a6:	8d 50 fd             	lea    edx,[eax-0x3]
c00212a9:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00212af:	77 32                	ja     c00212e3 <SysSeek(regs*)+0x48>
c00212b1:	83 ec 0c             	sub    esp,0xc
c00212b4:	50                   	push   eax
c00212b5:	e8 85 6d ff ff       	call   c001803f <KeGetFileFromDescriptor(int)>
c00212ba:	83 c4 0c             	add    esp,0xc
c00212bd:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00212c0:	31 db                	xor    ebx,ebx
c00212c2:	53                   	push   ebx
c00212c3:	51                   	push   ecx
c00212c4:	50                   	push   eax
c00212c5:	e8 ea 94 ff ff       	call   c001a7b4 <File::seek(unsigned long long)>
c00212ca:	83 c4 10             	add    esp,0x10
c00212cd:	85 c0                	test   eax,eax
c00212cf:	0f 95 c0             	setne  al
c00212d2:	31 d2                	xor    edx,edx
c00212d4:	0f b6 c0             	movzx  eax,al
c00212d7:	f7 d8                	neg    eax
c00212d9:	83 d2 00             	adc    edx,0x0
c00212dc:	83 c4 08             	add    esp,0x8
c00212df:	f7 da                	neg    edx
c00212e1:	5b                   	pop    ebx
c00212e2:	c3                   	ret    
c00212e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00212e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00212ed:	83 c4 08             	add    esp,0x8
c00212f0:	5b                   	pop    ebx
c00212f1:	c3                   	ret    

c00212f2 <SysTell(regs*)>:
c00212f2:	53                   	push   ebx
c00212f3:	83 ec 08             	sub    esp,0x8
c00212f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00212fa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00212fd:	83 f8 02             	cmp    eax,0x2
c0021300:	76 4e                	jbe    c0021350 <SysTell(regs*)+0x5e>
c0021302:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021307:	76 19                	jbe    c0021322 <SysTell(regs*)+0x30>
c0021309:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c002130c:	31 d2                	xor    edx,edx
c002130e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021314:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002131b:	31 c0                	xor    eax,eax
c002131d:	83 c4 08             	add    esp,0x8
c0021320:	5b                   	pop    ebx
c0021321:	c3                   	ret    
c0021322:	83 ec 0c             	sub    esp,0xc
c0021325:	50                   	push   eax
c0021326:	e8 14 6d ff ff       	call   c001803f <KeGetFileFromDescriptor(int)>
c002132b:	5a                   	pop    edx
c002132c:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c002132f:	59                   	pop    ecx
c0021330:	53                   	push   ebx
c0021331:	50                   	push   eax
c0021332:	e8 29 95 ff ff       	call   c001a860 <File::tell(unsigned long long*)>
c0021337:	83 c4 10             	add    esp,0x10
c002133a:	85 c0                	test   eax,eax
c002133c:	0f 95 c0             	setne  al
c002133f:	31 d2                	xor    edx,edx
c0021341:	0f b6 c0             	movzx  eax,al
c0021344:	f7 d8                	neg    eax
c0021346:	83 d2 00             	adc    edx,0x0
c0021349:	83 c4 08             	add    esp,0x8
c002134c:	f7 da                	neg    edx
c002134e:	5b                   	pop    ebx
c002134f:	c3                   	ret    
c0021350:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021355:	ba ff ff ff ff       	mov    edx,0xffffffff
c002135a:	83 c4 08             	add    esp,0x8
c002135d:	5b                   	pop    ebx
c002135e:	c3                   	ret    

c002135f <SysSize(regs*)>:
c002135f:	53                   	push   ebx
c0021360:	83 ec 18             	sub    esp,0x18
c0021363:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021367:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002136a:	83 f8 02             	cmp    eax,0x2
c002136d:	76 54                	jbe    c00213c3 <SysSize(regs*)+0x64>
c002136f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021374:	76 19                	jbe    c002138f <SysSize(regs*)+0x30>
c0021376:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0021379:	31 d2                	xor    edx,edx
c002137b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021381:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021388:	31 c0                	xor    eax,eax
c002138a:	83 c4 18             	add    esp,0x18
c002138d:	5b                   	pop    ebx
c002138e:	c3                   	ret    
c002138f:	83 ec 0c             	sub    esp,0xc
c0021392:	50                   	push   eax
c0021393:	e8 a7 6c ff ff       	call   c001803f <KeGetFileFromDescriptor(int)>
c0021398:	83 c4 0c             	add    esp,0xc
c002139b:	8d 54 24 13          	lea    edx,[esp+0x13]
c002139f:	52                   	push   edx
c00213a0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00213a3:	52                   	push   edx
c00213a4:	50                   	push   eax
c00213a5:	e8 4e 96 ff ff       	call   c001a9f8 <File::stat(unsigned long long*, bool*)>
c00213aa:	83 c4 10             	add    esp,0x10
c00213ad:	85 c0                	test   eax,eax
c00213af:	0f 95 c0             	setne  al
c00213b2:	31 d2                	xor    edx,edx
c00213b4:	0f b6 c0             	movzx  eax,al
c00213b7:	f7 d8                	neg    eax
c00213b9:	83 d2 00             	adc    edx,0x0
c00213bc:	83 c4 18             	add    esp,0x18
c00213bf:	f7 da                	neg    edx
c00213c1:	5b                   	pop    ebx
c00213c2:	c3                   	ret    
c00213c3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00213c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00213cd:	83 c4 18             	add    esp,0x18
c00213d0:	5b                   	pop    ebx
c00213d1:	c3                   	ret    

c00213d2 <SysSizeFromFilename(regs*)>:
c00213d2:	55                   	push   ebp
c00213d3:	57                   	push   edi
c00213d4:	56                   	push   esi
c00213d5:	53                   	push   ebx
c00213d6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00213dc:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00213e3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00213e6:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00213e9:	85 f6                	test   esi,esi
c00213eb:	74 34                	je     c0021421 <SysSizeFromFilename(regs*)+0x4f>
c00213ed:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00213f3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00213f6:	83 f8 02             	cmp    eax,0x2
c00213f9:	76 2d                	jbe    c0021428 <SysSizeFromFilename(regs*)+0x56>
c00213fb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021400:	76 3b                	jbe    c002143d <SysSizeFromFilename(regs*)+0x6b>
c0021402:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0021405:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002140b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021412:	81 c4 5c 02 00 00    	add    esp,0x25c
c0021418:	31 c0                	xor    eax,eax
c002141a:	5b                   	pop    ebx
c002141b:	31 d2                	xor    edx,edx
c002141d:	5e                   	pop    esi
c002141e:	5f                   	pop    edi
c002141f:	5d                   	pop    ebp
c0021420:	c3                   	ret    
c0021421:	89 f8                	mov    eax,edi
c0021423:	83 f8 02             	cmp    eax,0x2
c0021426:	77 d3                	ja     c00213fb <SysSizeFromFilename(regs*)+0x29>
c0021428:	81 c4 5c 02 00 00    	add    esp,0x25c
c002142e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021433:	5b                   	pop    ebx
c0021434:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021439:	5e                   	pop    esi
c002143a:	5f                   	pop    edi
c002143b:	5d                   	pop    ebp
c002143c:	c3                   	ret    
c002143d:	83 ec 0c             	sub    esp,0xc
c0021440:	68 14 01 00 00       	push   0x114
c0021445:	e8 f9 51 ff ff       	call   c0016643 <malloc>
c002144a:	6a 01                	push   0x1
c002144c:	89 c5                	mov    ebp,eax
c002144e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021453:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021456:	51                   	push   ecx
c0021457:	57                   	push   edi
c0021458:	55                   	push   ebp
c0021459:	e8 9c 91 ff ff       	call   c001a5fa <File::File(char const*, Process*, bool)>
c002145e:	83 c4 1c             	add    esp,0x1c
c0021461:	8d 44 24 23          	lea    eax,[esp+0x23]
c0021465:	50                   	push   eax
c0021466:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0021469:	53                   	push   ebx
c002146a:	55                   	push   ebp
c002146b:	e8 88 95 ff ff       	call   c001a9f8 <File::stat(unsigned long long*, bool*)>
c0021470:	83 c4 10             	add    esp,0x10
c0021473:	85 ed                	test   ebp,ebp
c0021475:	74 15                	je     c002148c <SysSizeFromFilename(regs*)+0xba>
c0021477:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002147b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002147e:	83 ec 0c             	sub    esp,0xc
c0021481:	55                   	push   ebp
c0021482:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021485:	83 c4 10             	add    esp,0x10
c0021488:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002148c:	85 c0                	test   eax,eax
c002148e:	75 98                	jne    c0021428 <SysSizeFromFilename(regs*)+0x56>
c0021490:	6a 00                	push   0x0
c0021492:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021497:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002149a:	05 0c 01 00 00       	add    eax,0x10c
c002149f:	50                   	push   eax
c00214a0:	57                   	push   edi
c00214a1:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c00214a8:	53                   	push   ebx
c00214a9:	e8 32 8f ff ff       	call   c001a3e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00214ae:	58                   	pop    eax
c00214af:	5a                   	pop    edx
c00214b0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00214b4:	50                   	push   eax
c00214b5:	53                   	push   ebx
c00214b6:	e8 8d 89 ff ff       	call   c0019e48 <KeDereferenceSymlink(char const*, char*)>
c00214bb:	83 c4 10             	add    esp,0x10
c00214be:	83 f8 01             	cmp    eax,0x1
c00214c1:	74 1a                	je     c00214dd <SysSizeFromFilename(regs*)+0x10b>
c00214c3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00214c8:	74 26                	je     c00214f0 <SysSizeFromFilename(regs*)+0x11e>
c00214ca:	85 f6                	test   esi,esi
c00214cc:	0f 84 40 ff ff ff    	je     c0021412 <SysSizeFromFilename(regs*)+0x40>
c00214d2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00214d8:	e9 35 ff ff ff       	jmp    c0021412 <SysSizeFromFilename(regs*)+0x40>
c00214dd:	85 f6                	test   esi,esi
c00214df:	0f 84 2d ff ff ff    	je     c0021412 <SysSizeFromFilename(regs*)+0x40>
c00214e5:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00214eb:	e9 22 ff ff ff       	jmp    c0021412 <SysSizeFromFilename(regs*)+0x40>
c00214f0:	85 f6                	test   esi,esi
c00214f2:	0f 84 1a ff ff ff    	je     c0021412 <SysSizeFromFilename(regs*)+0x40>
c00214f8:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00214fe:	e9 0f ff ff ff       	jmp    c0021412 <SysSizeFromFilename(regs*)+0x40>

c0021503 <SysSizeFromFilenameNoSymlink(regs*)>:
c0021503:	55                   	push   ebp
c0021504:	57                   	push   edi
c0021505:	56                   	push   esi
c0021506:	53                   	push   ebx
c0021507:	81 ec 5c 02 00 00    	sub    esp,0x25c
c002150d:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0021514:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021517:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c002151a:	85 f6                	test   esi,esi
c002151c:	74 34                	je     c0021552 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c002151e:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0021524:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021527:	83 f8 02             	cmp    eax,0x2
c002152a:	76 2d                	jbe    c0021559 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c002152c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021531:	76 3b                	jbe    c002156e <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0021533:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0021536:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002153c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021543:	81 c4 5c 02 00 00    	add    esp,0x25c
c0021549:	31 c0                	xor    eax,eax
c002154b:	5b                   	pop    ebx
c002154c:	31 d2                	xor    edx,edx
c002154e:	5e                   	pop    esi
c002154f:	5f                   	pop    edi
c0021550:	5d                   	pop    ebp
c0021551:	c3                   	ret    
c0021552:	89 f8                	mov    eax,edi
c0021554:	83 f8 02             	cmp    eax,0x2
c0021557:	77 d3                	ja     c002152c <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0021559:	81 c4 5c 02 00 00    	add    esp,0x25c
c002155f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021564:	5b                   	pop    ebx
c0021565:	ba ff ff ff ff       	mov    edx,0xffffffff
c002156a:	5e                   	pop    esi
c002156b:	5f                   	pop    edi
c002156c:	5d                   	pop    ebp
c002156d:	c3                   	ret    
c002156e:	83 ec 0c             	sub    esp,0xc
c0021571:	68 14 01 00 00       	push   0x114
c0021576:	e8 c8 50 ff ff       	call   c0016643 <malloc>
c002157b:	6a 00                	push   0x0
c002157d:	89 c5                	mov    ebp,eax
c002157f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021584:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021587:	51                   	push   ecx
c0021588:	57                   	push   edi
c0021589:	55                   	push   ebp
c002158a:	e8 6b 90 ff ff       	call   c001a5fa <File::File(char const*, Process*, bool)>
c002158f:	83 c4 1c             	add    esp,0x1c
c0021592:	8d 44 24 23          	lea    eax,[esp+0x23]
c0021596:	50                   	push   eax
c0021597:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c002159a:	53                   	push   ebx
c002159b:	55                   	push   ebp
c002159c:	e8 57 94 ff ff       	call   c001a9f8 <File::stat(unsigned long long*, bool*)>
c00215a1:	83 c4 10             	add    esp,0x10
c00215a4:	85 ed                	test   ebp,ebp
c00215a6:	74 15                	je     c00215bd <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c00215a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00215ac:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00215af:	83 ec 0c             	sub    esp,0xc
c00215b2:	55                   	push   ebp
c00215b3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00215b6:	83 c4 10             	add    esp,0x10
c00215b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00215bd:	85 c0                	test   eax,eax
c00215bf:	75 98                	jne    c0021559 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00215c1:	6a 00                	push   0x0
c00215c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00215c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00215cb:	05 0c 01 00 00       	add    eax,0x10c
c00215d0:	50                   	push   eax
c00215d1:	57                   	push   edi
c00215d2:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c00215d9:	53                   	push   ebx
c00215da:	e8 01 8e ff ff       	call   c001a3e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00215df:	58                   	pop    eax
c00215e0:	5a                   	pop    edx
c00215e1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00215e5:	50                   	push   eax
c00215e6:	53                   	push   ebx
c00215e7:	e8 5c 88 ff ff       	call   c0019e48 <KeDereferenceSymlink(char const*, char*)>
c00215ec:	83 c4 10             	add    esp,0x10
c00215ef:	83 f8 01             	cmp    eax,0x1
c00215f2:	74 1a                	je     c002160e <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c00215f4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00215f9:	74 26                	je     c0021621 <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c00215fb:	85 f6                	test   esi,esi
c00215fd:	0f 84 40 ff ff ff    	je     c0021543 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0021603:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0021609:	e9 35 ff ff ff       	jmp    c0021543 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c002160e:	85 f6                	test   esi,esi
c0021610:	0f 84 2d ff ff ff    	je     c0021543 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0021616:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c002161c:	e9 22 ff ff ff       	jmp    c0021543 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0021621:	85 f6                	test   esi,esi
c0021623:	0f 84 1a ff ff ff    	je     c0021543 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0021629:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c002162f:	e9 0f ff ff ff       	jmp    c0021543 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0021634 <SysClose(regs*)>:
c0021634:	53                   	push   ebx
c0021635:	83 ec 08             	sub    esp,0x8
c0021638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002163c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002163f:	83 f8 02             	cmp    eax,0x2
c0021642:	76 41                	jbe    c0021685 <SysClose(regs*)+0x51>
c0021644:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c002164a:	83 fa 01             	cmp    edx,0x1
c002164d:	76 2d                	jbe    c002167c <SysClose(regs*)+0x48>
c002164f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021654:	77 2f                	ja     c0021685 <SysClose(regs*)+0x51>
c0021656:	83 ec 0c             	sub    esp,0xc
c0021659:	50                   	push   eax
c002165a:	e8 e0 69 ff ff       	call   c001803f <KeGetFileFromDescriptor(int)>
c002165f:	89 c3                	mov    ebx,eax
c0021661:	89 04 24             	mov    DWORD PTR [esp],eax
c0021664:	e8 eb 90 ff ff       	call   c001a754 <File::close()>
c0021669:	83 c4 10             	add    esp,0x10
c002166c:	85 db                	test   ebx,ebx
c002166e:	74 0c                	je     c002167c <SysClose(regs*)+0x48>
c0021670:	83 ec 0c             	sub    esp,0xc
c0021673:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021675:	53                   	push   ebx
c0021676:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021679:	83 c4 10             	add    esp,0x10
c002167c:	31 c0                	xor    eax,eax
c002167e:	31 d2                	xor    edx,edx
c0021680:	83 c4 08             	add    esp,0x8
c0021683:	5b                   	pop    ebx
c0021684:	c3                   	ret    
c0021685:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002168a:	ba ff ff ff ff       	mov    edx,0xffffffff
c002168f:	83 c4 08             	add    esp,0x8
c0021692:	5b                   	pop    ebx
c0021693:	c3                   	ret    

c0021694 <SysOpenDir(regs*)>:
c0021694:	56                   	push   esi
c0021695:	53                   	push   ebx
c0021696:	83 ec 04             	sub    esp,0x4
c0021699:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002169d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00216a0:	85 c9                	test   ecx,ecx
c00216a2:	74 5d                	je     c0021701 <SysOpenDir(regs*)+0x6d>
c00216a4:	83 ec 0c             	sub    esp,0xc
c00216a7:	68 14 01 00 00       	push   0x114
c00216ac:	e8 92 4f ff ff       	call   c0016643 <malloc>
c00216b1:	83 c4 0c             	add    esp,0xc
c00216b4:	89 c6                	mov    esi,eax
c00216b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00216bb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00216be:	50                   	push   eax
c00216bf:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00216c2:	52                   	push   edx
c00216c3:	56                   	push   esi
c00216c4:	e8 ef 94 ff ff       	call   c001abb8 <Directory::Directory(char const*, Process*)>
c00216c9:	83 c4 10             	add    esp,0x10
c00216cc:	85 f6                	test   esi,esi
c00216ce:	74 31                	je     c0021701 <SysOpenDir(regs*)+0x6d>
c00216d0:	83 ec 0c             	sub    esp,0xc
c00216d3:	56                   	push   esi
c00216d4:	e8 a7 95 ff ff       	call   c001ac80 <Directory::open()>
c00216d9:	83 c4 10             	add    esp,0x10
c00216dc:	85 c0                	test   eax,eax
c00216de:	75 21                	jne    c0021701 <SysOpenDir(regs*)+0x6d>
c00216e0:	83 ec 0c             	sub    esp,0xc
c00216e3:	56                   	push   esi
c00216e4:	e8 59 66 ff ff       	call   c0017d42 <UnixFile::getFileDescriptor()>
c00216e9:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00216ec:	83 c4 10             	add    esp,0x10
c00216ef:	89 02                	mov    DWORD PTR [edx],eax
c00216f1:	c1 f8 1f             	sar    eax,0x1f
c00216f4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00216f7:	83 c4 04             	add    esp,0x4
c00216fa:	31 c0                	xor    eax,eax
c00216fc:	31 d2                	xor    edx,edx
c00216fe:	5b                   	pop    ebx
c00216ff:	5e                   	pop    esi
c0021700:	c3                   	ret    
c0021701:	83 c4 04             	add    esp,0x4
c0021704:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021709:	ba ff ff ff ff       	mov    edx,0xffffffff
c002170e:	5b                   	pop    ebx
c002170f:	5e                   	pop    esi
c0021710:	c3                   	ret    

c0021711 <SysMakeDir(regs*)>:
c0021711:	56                   	push   esi
c0021712:	53                   	push   ebx
c0021713:	83 ec 10             	sub    esp,0x10
c0021716:	68 14 01 00 00       	push   0x114
c002171b:	e8 23 4f ff ff       	call   c0016643 <malloc>
c0021720:	83 c4 0c             	add    esp,0xc
c0021723:	89 c3                	mov    ebx,eax
c0021725:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002172a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002172d:	50                   	push   eax
c002172e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021732:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0021735:	52                   	push   edx
c0021736:	53                   	push   ebx
c0021737:	e8 7c 94 ff ff       	call   c001abb8 <Directory::Directory(char const*, Process*)>
c002173c:	83 c4 10             	add    esp,0x10
c002173f:	85 db                	test   ebx,ebx
c0021741:	74 2c                	je     c002176f <SysMakeDir(regs*)+0x5e>
c0021743:	83 ec 0c             	sub    esp,0xc
c0021746:	53                   	push   ebx
c0021747:	e8 14 97 ff ff       	call   c001ae60 <Directory::create()>
c002174c:	89 c6                	mov    esi,eax
c002174e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021750:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021753:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021756:	83 c4 10             	add    esp,0x10
c0021759:	31 c0                	xor    eax,eax
c002175b:	85 f6                	test   esi,esi
c002175d:	0f 95 c0             	setne  al
c0021760:	31 d2                	xor    edx,edx
c0021762:	f7 d8                	neg    eax
c0021764:	83 d2 00             	adc    edx,0x0
c0021767:	83 c4 04             	add    esp,0x4
c002176a:	f7 da                	neg    edx
c002176c:	5b                   	pop    ebx
c002176d:	5e                   	pop    esi
c002176e:	c3                   	ret    
c002176f:	83 c4 04             	add    esp,0x4
c0021772:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021777:	ba ff ff ff ff       	mov    edx,0xffffffff
c002177c:	5b                   	pop    ebx
c002177d:	5e                   	pop    esi
c002177e:	c3                   	ret    

c002177f <SysCloseDir(regs*)>:
c002177f:	53                   	push   ebx
c0021780:	83 ec 08             	sub    esp,0x8
c0021783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021787:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002178a:	8d 50 fd             	lea    edx,[eax-0x3]
c002178d:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0021793:	77 2f                	ja     c00217c4 <SysCloseDir(regs*)+0x45>
c0021795:	83 ec 0c             	sub    esp,0xc
c0021798:	50                   	push   eax
c0021799:	e8 a1 68 ff ff       	call   c001803f <KeGetFileFromDescriptor(int)>
c002179e:	89 c3                	mov    ebx,eax
c00217a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00217a3:	e8 34 95 ff ff       	call   c001acdc <Directory::close()>
c00217a8:	83 c4 10             	add    esp,0x10
c00217ab:	85 db                	test   ebx,ebx
c00217ad:	74 0c                	je     c00217bb <SysCloseDir(regs*)+0x3c>
c00217af:	83 ec 0c             	sub    esp,0xc
c00217b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00217b4:	53                   	push   ebx
c00217b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00217b8:	83 c4 10             	add    esp,0x10
c00217bb:	31 c0                	xor    eax,eax
c00217bd:	31 d2                	xor    edx,edx
c00217bf:	83 c4 08             	add    esp,0x8
c00217c2:	5b                   	pop    ebx
c00217c3:	c3                   	ret    
c00217c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00217c9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00217ce:	83 c4 08             	add    esp,0x8
c00217d1:	5b                   	pop    ebx
c00217d2:	c3                   	ret    

c00217d3 <SysWait(regs*)>:
c00217d3:	83 ec 10             	sub    esp,0x10
c00217d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00217da:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00217dd:	52                   	push   edx
c00217de:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00217e1:	51                   	push   ecx
c00217e2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00217e5:	50                   	push   eax
c00217e6:	e8 09 3e 00 00       	call   c00255f4 <waitTask(int, int*, int)>
c00217eb:	83 c4 1c             	add    esp,0x1c
c00217ee:	89 c2                	mov    edx,eax
c00217f0:	c1 fa 1f             	sar    edx,0x1f
c00217f3:	c3                   	ret    

c00217f4 <SysNotImpl(regs*)>:
c00217f4:	83 ec 18             	sub    esp,0x18
c00217f7:	68 24 2d 03 c0       	push   0xc0032d24
c00217fc:	e8 e9 ec ff ff       	call   c00204ea <KePanic(char const*)>
c0021801:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021806:	ba ff ff ff ff       	mov    edx,0xffffffff
c002180b:	83 c4 1c             	add    esp,0x1c
c002180e:	c3                   	ret    

c002180f <SysPanic(regs*)>:
c002180f:	83 ec 18             	sub    esp,0x18
c0021812:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021816:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021819:	50                   	push   eax
c002181a:	e8 cb ec ff ff       	call   c00204ea <KePanic(char const*)>
c002181f:	b8 01 00 00 00       	mov    eax,0x1
c0021824:	31 d2                	xor    edx,edx
c0021826:	83 c4 1c             	add    esp,0x1c
c0021829:	c3                   	ret    

c002182a <SysRmdir(regs*)>:
c002182a:	56                   	push   esi
c002182b:	53                   	push   ebx
c002182c:	83 ec 20             	sub    esp,0x20
c002182f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021833:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0021836:	68 14 01 00 00       	push   0x114
c002183b:	e8 03 4e ff ff       	call   c0016643 <malloc>
c0021840:	6a 00                	push   0x0
c0021842:	89 c3                	mov    ebx,eax
c0021844:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021849:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002184c:	50                   	push   eax
c002184d:	56                   	push   esi
c002184e:	53                   	push   ebx
c002184f:	e8 a6 8d ff ff       	call   c001a5fa <File::File(char const*, Process*, bool)>
c0021854:	83 c4 14             	add    esp,0x14
c0021857:	53                   	push   ebx
c0021858:	e8 67 90 ff ff       	call   c001a8c4 <File::unlink()>
c002185d:	83 c4 10             	add    esp,0x10
c0021860:	85 db                	test   ebx,ebx
c0021862:	74 14                	je     c0021878 <SysRmdir(regs*)+0x4e>
c0021864:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021868:	8b 13                	mov    edx,DWORD PTR [ebx]
c002186a:	83 ec 0c             	sub    esp,0xc
c002186d:	53                   	push   ebx
c002186e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021871:	83 c4 10             	add    esp,0x10
c0021874:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021878:	85 c0                	test   eax,eax
c002187a:	0f 95 c0             	setne  al
c002187d:	31 d2                	xor    edx,edx
c002187f:	0f b6 c0             	movzx  eax,al
c0021882:	f7 d8                	neg    eax
c0021884:	83 d2 00             	adc    edx,0x0
c0021887:	83 c4 14             	add    esp,0x14
c002188a:	f7 da                	neg    edx
c002188c:	5b                   	pop    ebx
c002188d:	5e                   	pop    esi
c002188e:	c3                   	ret    

c002188f <SysUnlink(regs*)>:
c002188f:	56                   	push   esi
c0021890:	53                   	push   ebx
c0021891:	83 ec 20             	sub    esp,0x20
c0021894:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021898:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c002189b:	68 14 01 00 00       	push   0x114
c00218a0:	e8 9e 4d ff ff       	call   c0016643 <malloc>
c00218a5:	6a 00                	push   0x0
c00218a7:	89 c3                	mov    ebx,eax
c00218a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00218ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00218b1:	50                   	push   eax
c00218b2:	56                   	push   esi
c00218b3:	53                   	push   ebx
c00218b4:	e8 41 8d ff ff       	call   c001a5fa <File::File(char const*, Process*, bool)>
c00218b9:	83 c4 14             	add    esp,0x14
c00218bc:	53                   	push   ebx
c00218bd:	e8 02 90 ff ff       	call   c001a8c4 <File::unlink()>
c00218c2:	83 c4 10             	add    esp,0x10
c00218c5:	85 db                	test   ebx,ebx
c00218c7:	74 14                	je     c00218dd <SysUnlink(regs*)+0x4e>
c00218c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00218cd:	8b 13                	mov    edx,DWORD PTR [ebx]
c00218cf:	83 ec 0c             	sub    esp,0xc
c00218d2:	53                   	push   ebx
c00218d3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00218d6:	83 c4 10             	add    esp,0x10
c00218d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218dd:	85 c0                	test   eax,eax
c00218df:	0f 95 c0             	setne  al
c00218e2:	31 d2                	xor    edx,edx
c00218e4:	0f b6 c0             	movzx  eax,al
c00218e7:	f7 d8                	neg    eax
c00218e9:	83 d2 00             	adc    edx,0x0
c00218ec:	83 c4 14             	add    esp,0x14
c00218ef:	f7 da                	neg    edx
c00218f1:	5b                   	pop    ebx
c00218f2:	5e                   	pop    esi
c00218f3:	c3                   	ret    

c00218f4 <SysGetArgv(regs*)>:
c00218f4:	83 ec 0c             	sub    esp,0xc
c00218f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00218fb:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00218fe:	85 c0                	test   eax,eax
c0021900:	78 2c                	js     c002192e <SysGetArgv(regs*)+0x3a>
c0021902:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0021908:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c002190b:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0021911:	7d 1b                	jge    c002192e <SysGetArgv(regs*)+0x3a>
c0021913:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c002191a:	85 c0                	test   eax,eax
c002191c:	74 18                	je     c0021936 <SysGetArgv(regs*)+0x42>
c002191e:	83 ec 08             	sub    esp,0x8
c0021921:	50                   	push   eax
c0021922:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0021925:	50                   	push   eax
c0021926:	e8 15 ed fd ff       	call   c0000640 <strcpy>
c002192b:	83 c4 10             	add    esp,0x10
c002192e:	31 c0                	xor    eax,eax
c0021930:	31 d2                	xor    edx,edx
c0021932:	83 c4 0c             	add    esp,0xc
c0021935:	c3                   	ret    
c0021936:	b8 01 00 00 00       	mov    eax,0x1
c002193b:	31 d2                	xor    edx,edx
c002193d:	83 c4 0c             	add    esp,0xc
c0021940:	c3                   	ret    

c0021941 <SysUSleep(regs*)>:
c0021941:	83 ec 1c             	sub    esp,0x1c
c0021944:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0021948:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c002194b:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c002194e:	6a 00                	push   0x0
c0021950:	6a 64                	push   0x64
c0021952:	52                   	push   edx
c0021953:	50                   	push   eax
c0021954:	e8 a7 cf 00 00       	call   c002e900 <__udivdi3>
c0021959:	83 c4 14             	add    esp,0x14
c002195c:	50                   	push   eax
c002195d:	e8 76 3d 00 00       	call   c00256d8 <milliTenthSleep(unsigned int)>
c0021962:	31 c0                	xor    eax,eax
c0021964:	31 d2                	xor    edx,edx
c0021966:	83 c4 1c             	add    esp,0x1c
c0021969:	c3                   	ret    

c002196a <SysSpawn(regs*)>:
c002196a:	56                   	push   esi
c002196b:	53                   	push   ebx
c002196c:	83 ec 04             	sub    esp,0x4
c002196f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021973:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021976:	85 f6                	test   esi,esi
c0021978:	75 0a                	jne    c0021984 <SysSpawn(regs*)+0x1a>
c002197a:	83 c4 04             	add    esp,0x4
c002197d:	31 c0                	xor    eax,eax
c002197f:	31 d2                	xor    edx,edx
c0021981:	5b                   	pop    ebx
c0021982:	5e                   	pop    esi
c0021983:	c3                   	ret    
c0021984:	83 ec 0c             	sub    esp,0xc
c0021987:	68 24 07 00 00       	push   0x724
c002198c:	e8 b2 4c ff ff       	call   c0016643 <malloc>
c0021991:	83 c4 10             	add    esp,0x10
c0021994:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0021997:	89 c6                	mov    esi,eax
c0021999:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c002199c:	85 c9                	test   ecx,ecx
c002199e:	75 39                	jne    c00219d9 <SysSpawn(regs*)+0x6f>
c00219a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00219a5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00219a8:	52                   	push   edx
c00219a9:	50                   	push   eax
c00219aa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00219ad:	50                   	push   eax
c00219ae:	56                   	push   esi
c00219af:	e8 c8 34 00 00       	call   c0024e7c <Process::Process(char const*, Process*, char**)>
c00219b4:	83 c4 10             	add    esp,0x10
c00219b7:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00219be:	75 ba                	jne    c002197a <SysSpawn(regs*)+0x10>
c00219c0:	83 ec 0c             	sub    esp,0xc
c00219c3:	56                   	push   esi
c00219c4:	e8 f3 39 00 00       	call   c00253bc <Process::createUserThread()>
c00219c9:	8b 06                	mov    eax,DWORD PTR [esi]
c00219cb:	83 c4 10             	add    esp,0x10
c00219ce:	89 c2                	mov    edx,eax
c00219d0:	83 c4 04             	add    esp,0x4
c00219d3:	c1 fa 1f             	sar    edx,0x1f
c00219d6:	5b                   	pop    ebx
c00219d7:	5e                   	pop    esi
c00219d8:	c3                   	ret    
c00219d9:	31 c0                	xor    eax,eax
c00219db:	eb cb                	jmp    c00219a8 <SysSpawn(regs*)+0x3e>

c00219dd <SysGetEnv(regs*)>:
c00219dd:	57                   	push   edi
c00219de:	56                   	push   esi
c00219df:	53                   	push   ebx
c00219e0:	83 ec 1c             	sub    esp,0x1c
c00219e3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00219e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00219ec:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00219ef:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00219f2:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00219f5:	51                   	push   ecx
c00219f6:	e8 8c e9 ff ff       	call   c0020387 <KeGetProcessTotalEnvCount(Process*)>
c00219fb:	83 c4 10             	add    esp,0x10
c00219fe:	39 c7                	cmp    edi,eax
c0021a00:	7c 14                	jl     c0021a16 <SysGetEnv(regs*)+0x39>
c0021a02:	85 f6                	test   esi,esi
c0021a04:	75 0b                	jne    c0021a11 <SysGetEnv(regs*)+0x34>
c0021a06:	83 c4 10             	add    esp,0x10
c0021a09:	31 c0                	xor    eax,eax
c0021a0b:	5b                   	pop    ebx
c0021a0c:	31 d2                	xor    edx,edx
c0021a0e:	5e                   	pop    esi
c0021a0f:	5f                   	pop    edi
c0021a10:	c3                   	ret    
c0021a11:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021a14:	eb f0                	jmp    c0021a06 <SysGetEnv(regs*)+0x29>
c0021a16:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021a1a:	83 ec 04             	sub    esp,0x4
c0021a1d:	57                   	push   edi
c0021a1e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0021a24:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0021a27:	57                   	push   edi
c0021a28:	50                   	push   eax
c0021a29:	e8 79 e9 ff ff       	call   c00203a7 <KeGetProcessEnvPair(Process*, int)>
c0021a2e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021a31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021a35:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0021a39:	83 c4 0c             	add    esp,0xc
c0021a3c:	85 d2                	test   edx,edx
c0021a3e:	75 23                	jne    c0021a63 <SysGetEnv(regs*)+0x86>
c0021a40:	83 ec 0c             	sub    esp,0xc
c0021a43:	50                   	push   eax
c0021a44:	e8 27 eb fd ff       	call   c0000570 <strlen>
c0021a49:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021a4c:	89 c3                	mov    ebx,eax
c0021a4e:	e8 1d eb fd ff       	call   c0000570 <strlen>
c0021a53:	83 c4 10             	add    esp,0x10
c0021a56:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0021a5a:	83 c4 10             	add    esp,0x10
c0021a5d:	31 d2                	xor    edx,edx
c0021a5f:	5b                   	pop    ebx
c0021a60:	5e                   	pop    esi
c0021a61:	5f                   	pop    edi
c0021a62:	c3                   	ret    
c0021a63:	83 ec 08             	sub    esp,0x8
c0021a66:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021a69:	50                   	push   eax
c0021a6a:	56                   	push   esi
c0021a6b:	e8 d0 eb fd ff       	call   c0000640 <strcpy>
c0021a70:	58                   	pop    eax
c0021a71:	5a                   	pop    edx
c0021a72:	68 3e 2d 03 c0       	push   0xc0032d3e
c0021a77:	56                   	push   esi
c0021a78:	e8 c3 ed fd ff       	call   c0000840 <strcat>
c0021a7d:	59                   	pop    ecx
c0021a7e:	5b                   	pop    ebx
c0021a7f:	57                   	push   edi
c0021a80:	56                   	push   esi
c0021a81:	e8 ba ed fd ff       	call   c0000840 <strcat>
c0021a86:	83 c4 10             	add    esp,0x10
c0021a89:	e9 78 ff ff ff       	jmp    c0021a06 <SysGetEnv(regs*)+0x29>

c0021a8e <SysSetFatAttrib(regs*)>:
c0021a8e:	57                   	push   edi
c0021a8f:	56                   	push   esi
c0021a90:	53                   	push   ebx
c0021a91:	83 ec 1c             	sub    esp,0x1c
c0021a94:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021a98:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0021a9b:	68 14 01 00 00       	push   0x114
c0021aa0:	e8 9e 4b ff ff       	call   c0016643 <malloc>
c0021aa5:	83 c4 0c             	add    esp,0xc
c0021aa8:	89 c3                	mov    ebx,eax
c0021aaa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021aaf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021ab2:	50                   	push   eax
c0021ab3:	57                   	push   edi
c0021ab4:	53                   	push   ebx
c0021ab5:	e8 1e 8c ff ff       	call   c001a6d8 <File::File(char const*, Process*)>
c0021aba:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0021abd:	83 c4 0c             	add    esp,0xc
c0021ac0:	0f b6 d4             	movzx  edx,ah
c0021ac3:	0f b6 c0             	movzx  eax,al
c0021ac6:	52                   	push   edx
c0021ac7:	50                   	push   eax
c0021ac8:	53                   	push   ebx
c0021ac9:	e8 90 8e ff ff       	call   c001a95e <File::chfatattr(unsigned char, unsigned char)>
c0021ace:	83 c4 10             	add    esp,0x10
c0021ad1:	85 db                	test   ebx,ebx
c0021ad3:	74 14                	je     c0021ae9 <SysSetFatAttrib(regs*)+0x5b>
c0021ad5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021ad9:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021adb:	83 ec 0c             	sub    esp,0xc
c0021ade:	53                   	push   ebx
c0021adf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021ae2:	83 c4 10             	add    esp,0x10
c0021ae5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ae9:	85 c0                	test   eax,eax
c0021aeb:	0f 95 c0             	setne  al
c0021aee:	31 d2                	xor    edx,edx
c0021af0:	0f b6 c0             	movzx  eax,al
c0021af3:	f7 d8                	neg    eax
c0021af5:	83 d2 00             	adc    edx,0x0
c0021af8:	83 c4 10             	add    esp,0x10
c0021afb:	f7 da                	neg    edx
c0021afd:	5b                   	pop    ebx
c0021afe:	5e                   	pop    esi
c0021aff:	5f                   	pop    edi
c0021b00:	c3                   	ret    

c0021b01 <SysPipe(regs*)>:
c0021b01:	57                   	push   edi
c0021b02:	56                   	push   esi
c0021b03:	53                   	push   ebx
c0021b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b08:	83 ec 0c             	sub    esp,0xc
c0021b0b:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0021b0e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0021b11:	6a 20                	push   0x20
c0021b13:	e8 2b 4b ff ff       	call   c0016643 <malloc>
c0021b18:	89 c3                	mov    ebx,eax
c0021b1a:	58                   	pop    eax
c0021b1b:	5a                   	pop    edx
c0021b1c:	68 00 50 00 00       	push   0x5000
c0021b21:	53                   	push   ebx
c0021b22:	e8 8d 54 ff ff       	call   c0016fb4 <Pipe::Pipe(int)>
c0021b27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021b2a:	e8 13 62 ff ff       	call   c0017d42 <UnixFile::getFileDescriptor()>
c0021b2f:	89 07                	mov    DWORD PTR [edi],eax
c0021b31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021b34:	e8 09 62 ff ff       	call   c0017d42 <UnixFile::getFileDescriptor()>
c0021b39:	83 c4 10             	add    esp,0x10
c0021b3c:	89 06                	mov    DWORD PTR [esi],eax
c0021b3e:	31 d2                	xor    edx,edx
c0021b40:	5b                   	pop    ebx
c0021b41:	31 c0                	xor    eax,eax
c0021b43:	5e                   	pop    esi
c0021b44:	5f                   	pop    edi
c0021b45:	c3                   	ret    

c0021b46 <SysGetUnixTime(regs*)>:
c0021b46:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0021b4b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021b51:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021b55:	e9 4c 95 ff ff       	jmp    c001b0a6 <Clock::timeInSecondsLocal()>

c0021b5a <string_ends_with(char const*, char const*)>:
c0021b5a:	57                   	push   edi
c0021b5b:	56                   	push   esi
c0021b5c:	53                   	push   ebx
c0021b5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021b61:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021b65:	83 ec 0c             	sub    esp,0xc
c0021b68:	53                   	push   ebx
c0021b69:	e8 02 ea fd ff       	call   c0000570 <strlen>
c0021b6e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021b71:	89 c6                	mov    esi,eax
c0021b73:	e8 f8 e9 fd ff       	call   c0000570 <strlen>
c0021b78:	83 c4 10             	add    esp,0x10
c0021b7b:	39 c6                	cmp    esi,eax
c0021b7d:	7d 06                	jge    c0021b85 <string_ends_with(char const*, char const*)+0x2b>
c0021b7f:	5b                   	pop    ebx
c0021b80:	31 c0                	xor    eax,eax
c0021b82:	5e                   	pop    esi
c0021b83:	5f                   	pop    edi
c0021b84:	c3                   	ret    
c0021b85:	83 ec 08             	sub    esp,0x8
c0021b88:	29 c6                	sub    esi,eax
c0021b8a:	57                   	push   edi
c0021b8b:	01 f3                	add    ebx,esi
c0021b8d:	53                   	push   ebx
c0021b8e:	e8 bd eb fd ff       	call   c0000750 <strcmp>
c0021b93:	83 c4 10             	add    esp,0x10
c0021b96:	85 c0                	test   eax,eax
c0021b98:	5b                   	pop    ebx
c0021b99:	0f 94 c0             	sete   al
c0021b9c:	5e                   	pop    esi
c0021b9d:	0f b6 c0             	movzx  eax,al
c0021ba0:	5f                   	pop    edi
c0021ba1:	c3                   	ret    

c0021ba2 <SysOpen(regs*)>:
c0021ba2:	56                   	push   esi
c0021ba3:	53                   	push   ebx
c0021ba4:	81 ec 04 01 00 00    	sub    esp,0x104
c0021baa:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0021bb1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021bb4:	85 c0                	test   eax,eax
c0021bb6:	0f 84 bc 01 00 00    	je     c0021d78 <SysOpen(regs*)+0x1d6>
c0021bbc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021bbf:	85 c0                	test   eax,eax
c0021bc1:	0f 84 b1 01 00 00    	je     c0021d78 <SysOpen(regs*)+0x1d6>
c0021bc7:	6a 00                	push   0x0
c0021bc9:	68 40 2d 03 c0       	push   0xc0032d40
c0021bce:	50                   	push   eax
c0021bcf:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0021bd3:	56                   	push   esi
c0021bd4:	e8 07 88 ff ff       	call   c001a3e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021bd9:	89 34 24             	mov    DWORD PTR [esp],esi
c0021bdc:	e8 8f e9 fd ff       	call   c0000570 <strlen>
c0021be1:	83 c4 10             	add    esp,0x10
c0021be4:	83 e8 01             	sub    eax,0x1
c0021be7:	74 21                	je     c0021c0a <SysOpen(regs*)+0x68>
c0021be9:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0021bed:	eb 12                	jmp    c0021c01 <SysOpen(regs*)+0x5f>
c0021bef:	83 fa 3a             	cmp    edx,0x3a
c0021bf2:	74 12                	je     c0021c06 <SysOpen(regs*)+0x64>
c0021bf4:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0021bf8:	83 e8 01             	sub    eax,0x1
c0021bfb:	74 0d                	je     c0021c0a <SysOpen(regs*)+0x68>
c0021bfd:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0021c01:	83 fa 2e             	cmp    edx,0x2e
c0021c04:	75 e9                	jne    c0021bef <SysOpen(regs*)+0x4d>
c0021c06:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0021c0a:	83 ec 08             	sub    esp,0x8
c0021c0d:	68 44 2d 03 c0       	push   0xc0032d44
c0021c12:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021c15:	50                   	push   eax
c0021c16:	e8 3f ff ff ff       	call   c0021b5a <string_ends_with(char const*, char const*)>
c0021c1b:	83 c4 10             	add    esp,0x10
c0021c1e:	85 c0                	test   eax,eax
c0021c20:	74 1d                	je     c0021c3f <SysOpen(regs*)+0x9d>
c0021c22:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021c25:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0021c2b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021c32:	81 c4 04 01 00 00    	add    esp,0x104
c0021c38:	31 c0                	xor    eax,eax
c0021c3a:	31 d2                	xor    edx,edx
c0021c3c:	5b                   	pop    ebx
c0021c3d:	5e                   	pop    esi
c0021c3e:	c3                   	ret    
c0021c3f:	83 ec 08             	sub    esp,0x8
c0021c42:	68 49 2d 03 c0       	push   0xc0032d49
c0021c47:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021c4a:	50                   	push   eax
c0021c4b:	e8 0a ff ff ff       	call   c0021b5a <string_ends_with(char const*, char const*)>
c0021c50:	83 c4 10             	add    esp,0x10
c0021c53:	85 c0                	test   eax,eax
c0021c55:	75 cb                	jne    c0021c22 <SysOpen(regs*)+0x80>
c0021c57:	83 ec 08             	sub    esp,0x8
c0021c5a:	68 45 2d 03 c0       	push   0xc0032d45
c0021c5f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021c62:	50                   	push   eax
c0021c63:	e8 e8 ea fd ff       	call   c0000750 <strcmp>
c0021c68:	83 c4 10             	add    esp,0x10
c0021c6b:	85 c0                	test   eax,eax
c0021c6d:	74 b3                	je     c0021c22 <SysOpen(regs*)+0x80>
c0021c6f:	83 ec 08             	sub    esp,0x8
c0021c72:	68 44 2d 03 c0       	push   0xc0032d44
c0021c77:	56                   	push   esi
c0021c78:	e8 dd fe ff ff       	call   c0021b5a <string_ends_with(char const*, char const*)>
c0021c7d:	83 c4 10             	add    esp,0x10
c0021c80:	85 c0                	test   eax,eax
c0021c82:	75 9e                	jne    c0021c22 <SysOpen(regs*)+0x80>
c0021c84:	83 ec 08             	sub    esp,0x8
c0021c87:	68 4e 2d 03 c0       	push   0xc0032d4e
c0021c8c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021c8f:	50                   	push   eax
c0021c90:	e8 c5 fe ff ff       	call   c0021b5a <string_ends_with(char const*, char const*)>
c0021c95:	83 c4 10             	add    esp,0x10
c0021c98:	85 c0                	test   eax,eax
c0021c9a:	0f 85 eb 00 00 00    	jne    c0021d8b <SysOpen(regs*)+0x1e9>
c0021ca0:	83 ec 08             	sub    esp,0x8
c0021ca3:	68 53 2d 03 c0       	push   0xc0032d53
c0021ca8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021cab:	50                   	push   eax
c0021cac:	e8 a9 fe ff ff       	call   c0021b5a <string_ends_with(char const*, char const*)>
c0021cb1:	83 c4 10             	add    esp,0x10
c0021cb4:	85 c0                	test   eax,eax
c0021cb6:	0f 85 cf 00 00 00    	jne    c0021d8b <SysOpen(regs*)+0x1e9>
c0021cbc:	83 ec 08             	sub    esp,0x8
c0021cbf:	68 4f 2d 03 c0       	push   0xc0032d4f
c0021cc4:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0021cc7:	51                   	push   ecx
c0021cc8:	e8 83 ea fd ff       	call   c0000750 <strcmp>
c0021ccd:	83 c4 10             	add    esp,0x10
c0021cd0:	85 c0                	test   eax,eax
c0021cd2:	0f 84 b3 00 00 00    	je     c0021d8b <SysOpen(regs*)+0x1e9>
c0021cd8:	83 ec 08             	sub    esp,0x8
c0021cdb:	68 4e 2d 03 c0       	push   0xc0032d4e
c0021ce0:	56                   	push   esi
c0021ce1:	e8 74 fe ff ff       	call   c0021b5a <string_ends_with(char const*, char const*)>
c0021ce6:	83 c4 10             	add    esp,0x10
c0021ce9:	85 c0                	test   eax,eax
c0021ceb:	0f 85 9a 00 00 00    	jne    c0021d8b <SysOpen(regs*)+0x1e9>
c0021cf1:	83 ec 0c             	sub    esp,0xc
c0021cf4:	68 14 01 00 00       	push   0x114
c0021cf9:	e8 45 49 ff ff       	call   c0016643 <malloc>
c0021cfe:	83 c4 0c             	add    esp,0xc
c0021d01:	89 c6                	mov    esi,eax
c0021d03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021d08:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021d0b:	50                   	push   eax
c0021d0c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0021d0f:	52                   	push   edx
c0021d10:	56                   	push   esi
c0021d11:	e8 c2 89 ff ff       	call   c001a6d8 <File::File(char const*, Process*)>
c0021d16:	83 c4 10             	add    esp,0x10
c0021d19:	85 f6                	test   esi,esi
c0021d1b:	74 5b                	je     c0021d78 <SysOpen(regs*)+0x1d6>
c0021d1d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021d20:	0f b6 c2             	movzx  eax,dl
c0021d23:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0021d26:	89 d0                	mov    eax,edx
c0021d28:	83 e0 01             	and    eax,0x1
c0021d2b:	f6 c2 02             	test   dl,0x2
c0021d2e:	74 03                	je     c0021d33 <SysOpen(regs*)+0x191>
c0021d30:	83 c8 02             	or     eax,0x2
c0021d33:	f6 c2 04             	test   dl,0x4
c0021d36:	74 03                	je     c0021d3b <SysOpen(regs*)+0x199>
c0021d38:	83 c8 04             	or     eax,0x4
c0021d3b:	f6 c2 08             	test   dl,0x8
c0021d3e:	74 03                	je     c0021d43 <SysOpen(regs*)+0x1a1>
c0021d40:	83 c8 0a             	or     eax,0xa
c0021d43:	80 e2 10             	and    dl,0x10
c0021d46:	74 03                	je     c0021d4b <SysOpen(regs*)+0x1a9>
c0021d48:	83 c8 12             	or     eax,0x12
c0021d4b:	83 ec 08             	sub    esp,0x8
c0021d4e:	50                   	push   eax
c0021d4f:	56                   	push   esi
c0021d50:	e8 a1 89 ff ff       	call   c001a6f6 <File::open(FileOpenMode)>
c0021d55:	83 c4 10             	add    esp,0x10
c0021d58:	85 c0                	test   eax,eax
c0021d5a:	75 1c                	jne    c0021d78 <SysOpen(regs*)+0x1d6>
c0021d5c:	83 ec 0c             	sub    esp,0xc
c0021d5f:	56                   	push   esi
c0021d60:	e8 dd 5f ff ff       	call   c0017d42 <UnixFile::getFileDescriptor()>
c0021d65:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0021d68:	83 c4 10             	add    esp,0x10
c0021d6b:	89 02                	mov    DWORD PTR [edx],eax
c0021d6d:	c1 f8 1f             	sar    eax,0x1f
c0021d70:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0021d73:	e9 ba fe ff ff       	jmp    c0021c32 <SysOpen(regs*)+0x90>
c0021d78:	81 c4 04 01 00 00    	add    esp,0x104
c0021d7e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021d83:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021d88:	5b                   	pop    ebx
c0021d89:	5e                   	pop    esi
c0021d8a:	c3                   	ret    
c0021d8b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021d8e:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0021d94:	e9 92 fe ff ff       	jmp    c0021c2b <SysOpen(regs*)+0x89>

c0021d99 <KeSystemCall(regs*, void*)>:
c0021d99:	53                   	push   ebx
c0021d9a:	83 ec 08             	sub    esp,0x8
c0021d9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021da1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0021da4:	83 f8 3e             	cmp    eax,0x3e
c0021da7:	77 16                	ja     c0021dbf <KeSystemCall(regs*, void*)+0x26>
c0021da9:	8b 14 85 a0 45 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcba60]
c0021db0:	85 d2                	test   edx,edx
c0021db2:	74 0b                	je     c0021dbf <KeSystemCall(regs*, void*)+0x26>
c0021db4:	83 ec 0c             	sub    esp,0xc
c0021db7:	53                   	push   ebx
c0021db8:	ff d2                	call   edx
c0021dba:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0021dbd:	eb 0d                	jmp    c0021dcc <KeSystemCall(regs*, void*)+0x33>
c0021dbf:	52                   	push   edx
c0021dc0:	52                   	push   edx
c0021dc1:	50                   	push   eax
c0021dc2:	68 58 2d 03 c0       	push   0xc0032d58
c0021dc7:	e8 05 77 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0021dcc:	83 c4 10             	add    esp,0x10
c0021dcf:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0021dd4:	31 d2                	xor    edx,edx
c0021dd6:	83 c4 08             	add    esp,0x8
c0021dd9:	5b                   	pop    ebx
c0021dda:	c3                   	ret    
c0021ddb:	90                   	nop

c0021ddc <KeSwitchEndian16(unsigned short)>:
c0021ddc:	83 ec 04             	sub    esp,0x4
c0021ddf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021de3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0021de7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021deb:	c1 f8 08             	sar    eax,0x8
c0021dee:	89 c2                	mov    edx,eax
c0021df0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021df4:	c1 e0 08             	shl    eax,0x8
c0021df7:	09 d0                	or     eax,edx
c0021df9:	83 c4 04             	add    esp,0x4
c0021dfc:	c3                   	ret    
c0021dfd:	8d 76 00             	lea    esi,[esi+0x0]

c0021e00 <KeSwitchEndian32(unsigned int)>:
c0021e00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e04:	c1 e8 18             	shr    eax,0x18
c0021e07:	89 c2                	mov    edx,eax
c0021e09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e0d:	c1 e0 08             	shl    eax,0x8
c0021e10:	25 00 00 ff 00       	and    eax,0xff0000
c0021e15:	09 c2                	or     edx,eax
c0021e17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e1b:	c1 e8 08             	shr    eax,0x8
c0021e1e:	25 00 ff 00 00       	and    eax,0xff00
c0021e23:	09 c2                	or     edx,eax
c0021e25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e29:	c1 e0 18             	shl    eax,0x18
c0021e2c:	09 d0                	or     eax,edx
c0021e2e:	c3                   	ret    
c0021e2f:	90                   	nop

c0021e30 <EthernetCRC32(unsigned char*, int)>:
c0021e30:	83 ec 10             	sub    esp,0x10
c0021e33:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021e38:	75 0a                	jne    c0021e44 <EthernetCRC32(unsigned char*, int)+0x14>
c0021e3a:	b8 00 00 00 00       	mov    eax,0x0
c0021e3f:	e9 8c 00 00 00       	jmp    c0021ed0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0021e44:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0021e49:	7f 09                	jg     c0021e54 <EthernetCRC32(unsigned char*, int)+0x24>
c0021e4b:	b8 00 00 00 00       	mov    eax,0x0
c0021e50:	eb 7e                	jmp    c0021ed0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0021e52:	66 90                	xchg   ax,ax
c0021e54:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0021e5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021e64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e68:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0021e6c:	7d 5a                	jge    c0021ec8 <EthernetCRC32(unsigned char*, int)+0x98>
c0021e6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021e72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021e76:	01 d0                	add    eax,edx
c0021e78:	8a 00                	mov    al,BYTE PTR [eax]
c0021e7a:	0f b6 c0             	movzx  eax,al
c0021e7d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0021e81:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021e89:	8d 76 00             	lea    esi,[esi+0x0]
c0021e8c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0021e91:	7f 2d                	jg     c0021ec0 <EthernetCRC32(unsigned char*, int)+0x90>
c0021e93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e97:	83 e0 01             	and    eax,0x1
c0021e9a:	74 10                	je     c0021eac <EthernetCRC32(unsigned char*, int)+0x7c>
c0021e9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ea0:	d1 e8                	shr    eax,1
c0021ea2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0021ea7:	eb 0b                	jmp    c0021eb4 <EthernetCRC32(unsigned char*, int)+0x84>
c0021ea9:	8d 76 00             	lea    esi,[esi+0x0]
c0021eac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021eb0:	d1 e8                	shr    eax,1
c0021eb2:	66 90                	xchg   ax,ax
c0021eb4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021eb8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0021ebd:	eb cd                	jmp    c0021e8c <EthernetCRC32(unsigned char*, int)+0x5c>
c0021ebf:	90                   	nop
c0021ec0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0021ec5:	eb 9d                	jmp    c0021e64 <EthernetCRC32(unsigned char*, int)+0x34>
c0021ec7:	90                   	nop
c0021ec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ecc:	f7 d0                	not    eax
c0021ece:	66 90                	xchg   ax,ax
c0021ed0:	83 c4 10             	add    esp,0x10
c0021ed3:	c3                   	ret    

c0021ed4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0021ed4:	83 ec 2c             	sub    esp,0x2c
c0021ed7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021edb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0021ee0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021ee4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021ee8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021eec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021eef:	0f b7 c0             	movzx  eax,ax
c0021ef2:	3d 06 08 00 00       	cmp    eax,0x806
c0021ef7:	75 13                	jne    c0021f0c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0021ef9:	83 ec 0c             	sub    esp,0xc
c0021efc:	68 6c 2d 03 c0       	push   0xc0032d6c
c0021f01:	e8 cb 75 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0021f06:	83 c4 10             	add    esp,0x10
c0021f09:	eb 25                	jmp    c0021f30 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021f0b:	90                   	nop
c0021f0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021f10:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021f13:	0f b7 c0             	movzx  eax,ax
c0021f16:	3d 00 08 00 00       	cmp    eax,0x800
c0021f1b:	75 13                	jne    c0021f30 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021f1d:	83 ec 0c             	sub    esp,0xc
c0021f20:	68 82 2d 03 c0       	push   0xc0032d82
c0021f25:	e8 a7 75 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0021f2a:	83 c4 10             	add    esp,0x10
c0021f2d:	8d 76 00             	lea    esi,[esi+0x0]
c0021f30:	90                   	nop
c0021f31:	83 c4 2c             	add    esp,0x2c
c0021f34:	c3                   	ret    
c0021f35:	66 90                	xchg   ax,ax
c0021f37:	90                   	nop

c0021f38 <KeNetCreateSemaphore>:
c0021f38:	53                   	push   ebx
c0021f39:	83 ec 18             	sub    esp,0x18
c0021f3c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0021f44:	83 ec 0c             	sub    esp,0xc
c0021f47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f4b:	e8 f3 46 ff ff       	call   c0016643 <malloc>
c0021f50:	83 c4 10             	add    esp,0x10
c0021f53:	89 c3                	mov    ebx,eax
c0021f55:	83 ec 08             	sub    esp,0x8
c0021f58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021f5c:	53                   	push   ebx
c0021f5d:	e8 32 e9 ff ff       	call   c0020894 <Semaphore::Semaphore(int)>
c0021f62:	83 c4 10             	add    esp,0x10
c0021f65:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021f69:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f71:	89 10                	mov    DWORD PTR [eax],edx
c0021f73:	90                   	nop
c0021f74:	83 c4 18             	add    esp,0x18
c0021f77:	5b                   	pop    ebx
c0021f78:	c3                   	ret    
c0021f79:	8d 76 00             	lea    esi,[esi+0x0]

c0021f7c <KeNetFreeSemaphore>:
c0021f7c:	83 ec 0c             	sub    esp,0xc
c0021f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f83:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f85:	83 ec 08             	sub    esp,0x8
c0021f88:	6a 10                	push   0x10
c0021f8a:	50                   	push   eax
c0021f8b:	e8 14 74 ff ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c0021f90:	83 c4 10             	add    esp,0x10
c0021f93:	90                   	nop
c0021f94:	83 c4 0c             	add    esp,0xc
c0021f97:	c3                   	ret    

c0021f98 <KeNetSignalSemaphore>:
c0021f98:	83 ec 0c             	sub    esp,0xc
c0021f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fa1:	83 ec 0c             	sub    esp,0xc
c0021fa4:	50                   	push   eax
c0021fa5:	e8 4a ec ff ff       	call   c0020bf4 <Semaphore::release()>
c0021faa:	83 c4 10             	add    esp,0x10
c0021fad:	90                   	nop
c0021fae:	83 c4 0c             	add    esp,0xc
c0021fb1:	c3                   	ret    
c0021fb2:	66 90                	xchg   ax,ax

c0021fb4 <KeNetWaitSemaphore>:
c0021fb4:	83 ec 0c             	sub    esp,0xc
c0021fb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fbd:	83 ec 08             	sub    esp,0x8
c0021fc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fc4:	50                   	push   eax
c0021fc5:	e8 66 ea ff ff       	call   c0020a30 <Semaphore::acquire(int)>
c0021fca:	83 c4 10             	add    esp,0x10
c0021fcd:	83 c4 0c             	add    esp,0xc
c0021fd0:	c3                   	ret    
c0021fd1:	8d 76 00             	lea    esi,[esi+0x0]

c0021fd4 <KeNetCreateThread>:
c0021fd4:	83 ec 0c             	sub    esp,0xc
c0021fd7:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0021fdc:	68 80 00 00 00       	push   0x80
c0021fe1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021fe5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021fe9:	50                   	push   eax
c0021fea:	e8 c1 32 00 00       	call   c00252b0 <Process::createThread(void (*)(void*), void*, int)>
c0021fef:	83 c4 10             	add    esp,0x10
c0021ff2:	90                   	nop
c0021ff3:	83 c4 0c             	add    esp,0xc
c0021ff6:	c3                   	ret    
c0021ff7:	90                   	nop

c0021ff8 <KeCPanic>:
c0021ff8:	83 ec 0c             	sub    esp,0xc
c0021ffb:	83 ec 0c             	sub    esp,0xc
c0021ffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022002:	e8 e3 e4 ff ff       	call   c00204ea <KePanic(char const*)>
c0022007:	83 c4 10             	add    esp,0x10
c002200a:	90                   	nop
c002200b:	83 c4 0c             	add    esp,0xc
c002200e:	c3                   	ret    
c002200f:	90                   	nop

c0022010 <KeCPuts>:
c0022010:	83 ec 0c             	sub    esp,0xc
c0022013:	83 ec 08             	sub    esp,0x8
c0022016:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002201a:	68 36 34 03 c0       	push   0xc0033436
c002201f:	e8 ad 74 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0022024:	83 c4 10             	add    esp,0x10
c0022027:	90                   	nop
c0022028:	83 c4 0c             	add    esp,0xc
c002202b:	c3                   	ret    

c002202c <CmOpen(char const*)>:
c002202c:	57                   	push   edi
c002202d:	56                   	push   esi
c002202e:	53                   	push   ebx
c002202f:	83 ec 1c             	sub    esp,0x1c
c0022032:	6a 30                	push   0x30
c0022034:	e8 0a 46 ff ff       	call   c0016643 <malloc>
c0022039:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0022040:	89 c3                	mov    ebx,eax
c0022042:	e8 fc 45 ff ff       	call   c0016643 <malloc>
c0022047:	83 c4 0c             	add    esp,0xc
c002204a:	89 c6                	mov    esi,eax
c002204c:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0022052:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022056:	50                   	push   eax
c0022057:	e8 7c 86 ff ff       	call   c001a6d8 <File::File(char const*, Process*)>
c002205c:	83 c4 0c             	add    esp,0xc
c002205f:	89 33                	mov    DWORD PTR [ebx],esi
c0022061:	8d 44 24 07          	lea    eax,[esp+0x7]
c0022065:	50                   	push   eax
c0022066:	8d 44 24 10          	lea    eax,[esp+0x10]
c002206a:	50                   	push   eax
c002206b:	56                   	push   esi
c002206c:	e8 87 89 ff ff       	call   c001a9f8 <File::stat(unsigned long long*, bool*)>
c0022071:	5a                   	pop    edx
c0022072:	59                   	pop    ecx
c0022073:	6a 01                	push   0x1
c0022075:	ff 33                	push   DWORD PTR [ebx]
c0022077:	e8 7a 86 ff ff       	call   c001a6f6 <File::open(FileOpenMode)>
c002207c:	5e                   	pop    esi
c002207d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022081:	e8 bd 45 ff ff       	call   c0016643 <malloc>
c0022086:	5a                   	pop    edx
c0022087:	89 c7                	mov    edi,eax
c0022089:	8d 74 24 10          	lea    esi,[esp+0x10]
c002208d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002208f:	8b 10                	mov    edx,DWORD PTR [eax]
c0022091:	56                   	push   esi
c0022092:	57                   	push   edi
c0022093:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022097:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002209b:	50                   	push   eax
c002209c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002209f:	83 c4 14             	add    esp,0x14
c00220a2:	ff 33                	push   DWORD PTR [ebx]
c00220a4:	e8 ab 86 ff ff       	call   c001a754 <File::close()>
c00220a9:	59                   	pop    ecx
c00220aa:	58                   	pop    eax
c00220ab:	6a 13                	push   0x13
c00220ad:	ff 33                	push   DWORD PTR [ebx]
c00220af:	e8 42 86 ff ff       	call   c001a6f6 <File::open(FileOpenMode)>
c00220b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00220b6:	8b 10                	mov    edx,DWORD PTR [eax]
c00220b8:	89 34 24             	mov    DWORD PTR [esp],esi
c00220bb:	57                   	push   edi
c00220bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00220c0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00220c4:	50                   	push   eax
c00220c5:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00220c8:	83 c4 14             	add    esp,0x14
c00220cb:	57                   	push   edi
c00220cc:	e8 82 45 ff ff       	call   c0016653 <free>
c00220d1:	83 c4 10             	add    esp,0x10
c00220d4:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00220d7:	75 10                	jne    c00220e9 <CmOpen(char const*)+0xbd>
c00220d9:	83 ec 0c             	sub    esp,0xc
c00220dc:	68 97 2d 03 c0       	push   0xc0032d97
c00220e1:	e8 04 e4 ff ff       	call   c00204ea <KePanic(char const*)>
c00220e6:	83 c4 10             	add    esp,0x10
c00220e9:	8d 7b 05             	lea    edi,[ebx+0x5]
c00220ec:	50                   	push   eax
c00220ed:	6a 00                	push   0x0
c00220ef:	6a 00                	push   0x0
c00220f1:	ff 33                	push   DWORD PTR [ebx]
c00220f3:	e8 bc 86 ff ff       	call   c001a7b4 <File::seek(unsigned long long)>
c00220f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00220fa:	8b 10                	mov    edx,DWORD PTR [eax]
c00220fc:	89 34 24             	mov    DWORD PTR [esp],esi
c00220ff:	57                   	push   edi
c0022100:	6a 00                	push   0x0
c0022102:	6a 2b                	push   0x2b
c0022104:	50                   	push   eax
c0022105:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022108:	83 c4 1c             	add    esp,0x1c
c002210b:	6a 00                	push   0x0
c002210d:	6a 00                	push   0x0
c002210f:	ff 33                	push   DWORD PTR [ebx]
c0022111:	e8 9e 86 ff ff       	call   c001a7b4 <File::seek(unsigned long long)>
c0022116:	83 c4 0c             	add    esp,0xc
c0022119:	6a 08                	push   0x8
c002211b:	68 a8 2d 03 c0       	push   0xc0032da8
c0022120:	57                   	push   edi
c0022121:	e8 5a e2 fd ff       	call   c0000380 <memcmp>
c0022126:	83 c4 10             	add    esp,0x10
c0022129:	85 c0                	test   eax,eax
c002212b:	74 10                	je     c002213d <CmOpen(char const*)+0x111>
c002212d:	83 ec 0c             	sub    esp,0xc
c0022130:	68 b1 2d 03 c0       	push   0xc0032db1
c0022135:	e8 b0 e3 ff ff       	call   c00204ea <KePanic(char const*)>
c002213a:	83 c4 10             	add    esp,0x10
c002213d:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0022141:	89 d8                	mov    eax,ebx
c0022143:	83 c4 10             	add    esp,0x10
c0022146:	5b                   	pop    ebx
c0022147:	5e                   	pop    esi
c0022148:	5f                   	pop    edi
c0022149:	c3                   	ret    

c002214a <CmClose(Reghive_Tag*)>:
c002214a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002214e:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0022152:	74 0b                	je     c002215f <CmClose(Reghive_Tag*)+0x15>
c0022154:	8b 00                	mov    eax,DWORD PTR [eax]
c0022156:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002215a:	e9 f5 85 ff ff       	jmp    c001a754 <File::close()>
c002215f:	c3                   	ret    

c0022160 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0022160:	53                   	push   ebx
c0022161:	83 ec 18             	sub    esp,0x18
c0022164:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022168:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c002216c:	74 29                	je     c0022197 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c002216e:	50                   	push   eax
c002216f:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0022174:	99                   	cdq    
c0022175:	52                   	push   edx
c0022176:	50                   	push   eax
c0022177:	ff 33                	push   DWORD PTR [ebx]
c0022179:	e8 36 86 ff ff       	call   c001a7b4 <File::seek(unsigned long long)>
c002217e:	5a                   	pop    edx
c002217f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022181:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0022185:	8b 10                	mov    edx,DWORD PTR [eax]
c0022187:	51                   	push   ecx
c0022188:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002218c:	6a 00                	push   0x0
c002218e:	6a 2b                	push   0x2b
c0022190:	50                   	push   eax
c0022191:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022194:	83 c4 20             	add    esp,0x20
c0022197:	83 c4 18             	add    esp,0x18
c002219a:	5b                   	pop    ebx
c002219b:	c3                   	ret    

c002219c <CmGetString(Reghive_Tag*, int, char*)>:
c002219c:	55                   	push   ebp
c002219d:	57                   	push   edi
c002219e:	56                   	push   esi
c002219f:	53                   	push   ebx
c00221a0:	31 db                	xor    ebx,ebx
c00221a2:	83 ec 70             	sub    esp,0x70
c00221a5:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c00221ac:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00221b0:	50                   	push   eax
c00221b1:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00221b8:	55                   	push   ebp
c00221b9:	e8 a2 ff ff ff       	call   c0022160 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00221be:	83 c4 10             	add    esp,0x10
c00221c1:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c00221c6:	c1 e0 08             	shl    eax,0x8
c00221c9:	89 c2                	mov    edx,eax
c00221cb:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c00221d0:	09 d0                	or     eax,edx
c00221d2:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c00221d7:	c1 e0 08             	shl    eax,0x8
c00221da:	09 d0                	or     eax,edx
c00221dc:	74 25                	je     c0022203 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c00221de:	6b fb 0d             	imul   edi,ebx,0xd
c00221e1:	52                   	push   edx
c00221e2:	8d 54 24 39          	lea    edx,[esp+0x39]
c00221e6:	52                   	push   edx
c00221e7:	50                   	push   eax
c00221e8:	55                   	push   ebp
c00221e9:	e8 72 ff ff ff       	call   c0022160 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00221ee:	8d 74 24 49          	lea    esi,[esp+0x49]
c00221f2:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c00221f9:	b9 27 00 00 00       	mov    ecx,0x27
c00221fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022200:	83 c4 10             	add    esp,0x10
c0022203:	83 c3 03             	add    ebx,0x3
c0022206:	83 fb 15             	cmp    ebx,0x15
c0022209:	75 b6                	jne    c00221c1 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c002220b:	83 c4 6c             	add    esp,0x6c
c002220e:	5b                   	pop    ebx
c002220f:	5e                   	pop    esi
c0022210:	5f                   	pop    edi
c0022211:	5d                   	pop    ebp
c0022212:	c3                   	ret    

c0022213 <CmEnterDirectory(Reghive_Tag*, int)>:
c0022213:	83 ec 40             	sub    esp,0x40
c0022216:	8d 44 24 09          	lea    eax,[esp+0x9]
c002221a:	50                   	push   eax
c002221b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002221f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022223:	e8 38 ff ff ff       	call   c0022160 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022228:	83 c4 10             	add    esp,0x10
c002222b:	83 c8 ff             	or     eax,0xffffffff
c002222e:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0022233:	75 19                	jne    c002224e <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0022235:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c002223a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c002223f:	c1 e0 08             	shl    eax,0x8
c0022242:	09 c2                	or     edx,eax
c0022244:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0022249:	c1 e0 10             	shl    eax,0x10
c002224c:	09 d0                	or     eax,edx
c002224e:	83 c4 3c             	add    esp,0x3c
c0022251:	c3                   	ret    

c0022252 <CmGetNext(Reghive_Tag*, int)>:
c0022252:	83 ec 40             	sub    esp,0x40
c0022255:	8d 44 24 09          	lea    eax,[esp+0x9]
c0022259:	50                   	push   eax
c002225a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002225e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022262:	e8 f9 fe ff ff       	call   c0022160 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022267:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c002226c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0022271:	c1 e0 08             	shl    eax,0x8
c0022274:	09 c2                	or     edx,eax
c0022276:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c002227b:	83 c4 4c             	add    esp,0x4c
c002227e:	c1 e0 10             	shl    eax,0x10
c0022281:	09 d0                	or     eax,edx
c0022283:	c3                   	ret    

c0022284 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0022284:	53                   	push   ebx
c0022285:	83 ec 18             	sub    esp,0x18
c0022288:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002228c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0022290:	74 29                	je     c00222bb <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0022292:	50                   	push   eax
c0022293:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0022298:	99                   	cdq    
c0022299:	52                   	push   edx
c002229a:	50                   	push   eax
c002229b:	ff 33                	push   DWORD PTR [ebx]
c002229d:	e8 12 85 ff ff       	call   c001a7b4 <File::seek(unsigned long long)>
c00222a2:	5a                   	pop    edx
c00222a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00222a5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00222a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00222ab:	51                   	push   ecx
c00222ac:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00222b0:	6a 00                	push   0x0
c00222b2:	6a 2b                	push   0x2b
c00222b4:	50                   	push   eax
c00222b5:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00222b8:	83 c4 20             	add    esp,0x20
c00222bb:	83 c4 18             	add    esp,0x18
c00222be:	5b                   	pop    ebx
c00222bf:	c3                   	ret    

c00222c0 <CmFreeExtent(Reghive_Tag*, int)>:
c00222c0:	53                   	push   ebx
c00222c1:	83 ec 3c             	sub    esp,0x3c
c00222c4:	6a 2b                	push   0x2b
c00222c6:	6a 00                	push   0x0
c00222c8:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00222cc:	53                   	push   ebx
c00222cd:	e8 1e e2 fd ff       	call   c00004f0 <memset>
c00222d2:	83 c4 0c             	add    esp,0xc
c00222d5:	53                   	push   ebx
c00222d6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00222da:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00222de:	e8 a1 ff ff ff       	call   c0022284 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00222e3:	83 c4 48             	add    esp,0x48
c00222e6:	5b                   	pop    ebx
c00222e7:	c3                   	ret    

c00222e8 <CmUpdateHeader(Reghive_Tag*)>:
c00222e8:	83 ec 0c             	sub    esp,0xc
c00222eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222ef:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00222f3:	74 10                	je     c0022305 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c00222f5:	52                   	push   edx
c00222f6:	8d 50 05             	lea    edx,[eax+0x5]
c00222f9:	52                   	push   edx
c00222fa:	6a 00                	push   0x0
c00222fc:	50                   	push   eax
c00222fd:	e8 82 ff ff ff       	call   c0022284 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022302:	83 c4 10             	add    esp,0x10
c0022305:	83 c4 0c             	add    esp,0xc
c0022308:	c3                   	ret    

c0022309 <CmExpand(Reghive_Tag*, int)>:
c0022309:	57                   	push   edi
c002230a:	56                   	push   esi
c002230b:	83 ce ff             	or     esi,0xffffffff
c002230e:	53                   	push   ebx
c002230f:	83 ec 30             	sub    esp,0x30
c0022312:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0022316:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c002231a:	74 5f                	je     c002237b <CmExpand(Reghive_Tag*, int)+0x72>
c002231c:	31 d2                	xor    edx,edx
c002231e:	31 f6                	xor    esi,esi
c0022320:	50                   	push   eax
c0022321:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0022325:	52                   	push   edx
c0022326:	50                   	push   eax
c0022327:	ff 33                	push   DWORD PTR [ebx]
c0022329:	e8 86 84 ff ff       	call   c001a7b4 <File::seek(unsigned long long)>
c002232e:	83 c4 0c             	add    esp,0xc
c0022331:	6a 2b                	push   0x2b
c0022333:	6a 00                	push   0x0
c0022335:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0022339:	57                   	push   edi
c002233a:	e8 b1 e1 fd ff       	call   c00004f0 <memset>
c002233f:	83 c4 10             	add    esp,0x10
c0022342:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0022346:	7d 1b                	jge    c0022363 <CmExpand(Reghive_Tag*, int)+0x5a>
c0022348:	83 ec 0c             	sub    esp,0xc
c002234b:	8b 03                	mov    eax,DWORD PTR [ebx]
c002234d:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0022351:	8b 10                	mov    edx,DWORD PTR [eax]
c0022353:	46                   	inc    esi
c0022354:	51                   	push   ecx
c0022355:	57                   	push   edi
c0022356:	6a 00                	push   0x0
c0022358:	6a 2b                	push   0x2b
c002235a:	50                   	push   eax
c002235b:	ff 52 10             	call   DWORD PTR [edx+0x10]
c002235e:	83 c4 20             	add    esp,0x20
c0022361:	eb df                	jmp    c0022342 <CmExpand(Reghive_Tag*, int)+0x39>
c0022363:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0022367:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c002236a:	83 ec 0c             	sub    esp,0xc
c002236d:	01 f2                	add    edx,esi
c002236f:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0022372:	53                   	push   ebx
c0022373:	e8 70 ff ff ff       	call   c00222e8 <CmUpdateHeader(Reghive_Tag*)>
c0022378:	83 c4 10             	add    esp,0x10
c002237b:	83 c4 30             	add    esp,0x30
c002237e:	89 f0                	mov    eax,esi
c0022380:	5b                   	pop    ebx
c0022381:	5e                   	pop    esi
c0022382:	5f                   	pop    edi
c0022383:	c3                   	ret    

c0022384 <CmFindUnusedExtent(Reghive_Tag*)>:
c0022384:	55                   	push   ebp
c0022385:	57                   	push   edi
c0022386:	56                   	push   esi
c0022387:	53                   	push   ebx
c0022388:	83 cb ff             	or     ebx,0xffffffff
c002238b:	83 ec 1c             	sub    esp,0x1c
c002238e:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0022392:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0022396:	74 68                	je     c0022400 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0022398:	be 2b 00 00 00       	mov    esi,0x2b
c002239d:	51                   	push   ecx
c002239e:	31 ff                	xor    edi,edi
c00223a0:	6a 00                	push   0x0
c00223a2:	31 db                	xor    ebx,ebx
c00223a4:	6a 00                	push   0x0
c00223a6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00223a9:	e8 06 84 ff ff       	call   c001a7b4 <File::seek(unsigned long long)>
c00223ae:	83 c4 10             	add    esp,0x10
c00223b1:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c00223b4:	76 3b                	jbe    c00223f1 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c00223b6:	83 ec 0c             	sub    esp,0xc
c00223b9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00223bc:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00223c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00223c2:	51                   	push   ecx
c00223c3:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c00223c7:	51                   	push   ecx
c00223c8:	6a 00                	push   0x0
c00223ca:	6a 01                	push   0x1
c00223cc:	50                   	push   eax
c00223cd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00223d0:	83 c4 20             	add    esp,0x20
c00223d3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00223d8:	74 26                	je     c0022400 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00223da:	43                   	inc    ebx
c00223db:	52                   	push   edx
c00223dc:	57                   	push   edi
c00223dd:	56                   	push   esi
c00223de:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00223e1:	e8 ce 83 ff ff       	call   c001a7b4 <File::seek(unsigned long long)>
c00223e6:	83 c6 2b             	add    esi,0x2b
c00223e9:	83 d7 00             	adc    edi,0x0
c00223ec:	83 c4 10             	add    esp,0x10
c00223ef:	eb c0                	jmp    c00223b1 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c00223f1:	50                   	push   eax
c00223f2:	50                   	push   eax
c00223f3:	6a 40                	push   0x40
c00223f5:	55                   	push   ebp
c00223f6:	e8 0e ff ff ff       	call   c0022309 <CmExpand(Reghive_Tag*, int)>
c00223fb:	83 c4 10             	add    esp,0x10
c00223fe:	89 c3                	mov    ebx,eax
c0022400:	83 c4 1c             	add    esp,0x1c
c0022403:	89 d8                	mov    eax,ebx
c0022405:	5b                   	pop    ebx
c0022406:	5e                   	pop    esi
c0022407:	5f                   	pop    edi
c0022408:	5d                   	pop    ebp
c0022409:	c3                   	ret    

c002240a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c002240a:	55                   	push   ebp
c002240b:	57                   	push   edi
c002240c:	56                   	push   esi
c002240d:	53                   	push   ebx
c002240e:	81 ec 88 00 00 00    	sub    esp,0x88
c0022414:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c002241b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022422:	e8 5d ff ff ff       	call   c0022384 <CmFindUnusedExtent(Reghive_Tag*)>
c0022427:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002242b:	83 c4 0c             	add    esp,0xc
c002242e:	6a 2b                	push   0x2b
c0022430:	6a 00                	push   0x0
c0022432:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0022436:	55                   	push   ebp
c0022437:	e8 b4 e0 fd ff       	call   c00004f0 <memset>
c002243c:	83 c4 10             	add    esp,0x10
c002243f:	85 db                	test   ebx,ebx
c0022441:	74 12                	je     c0022455 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0022443:	51                   	push   ecx
c0022444:	55                   	push   ebp
c0022445:	53                   	push   ebx
c0022446:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002244d:	e8 0e fd ff ff       	call   c0022160 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022452:	83 c4 10             	add    esp,0x10
c0022455:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0022459:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0022460:	b9 2b 00 00 00       	mov    ecx,0x2b
c0022465:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022467:	85 db                	test   ebx,ebx
c0022469:	74 49                	je     c00224b4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c002246b:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0022470:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0022475:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022479:	c1 e0 08             	shl    eax,0x8
c002247c:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0022482:	09 c8                	or     eax,ecx
c0022484:	74 11                	je     c0022497 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0022486:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c002248a:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c002248e:	c1 e8 10             	shr    eax,0x10
c0022491:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0022495:	eb 0f                	jmp    c00224a6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0022497:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c002249c:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00224a1:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00224a6:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c00224aa:	c1 ea 08             	shr    edx,0x8
c00224ad:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c00224b2:	eb 0f                	jmp    c00224c3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c00224b4:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00224b9:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00224be:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00224c3:	52                   	push   edx
c00224c4:	8d 44 24 49          	lea    eax,[esp+0x49]
c00224c8:	50                   	push   eax
c00224c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00224cd:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00224d4:	e8 ab fd ff ff       	call   c0022284 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00224d9:	83 c4 10             	add    esp,0x10
c00224dc:	85 db                	test   ebx,ebx
c00224de:	74 12                	je     c00224f2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c00224e0:	50                   	push   eax
c00224e1:	55                   	push   ebp
c00224e2:	53                   	push   ebx
c00224e3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00224ea:	e8 95 fd ff ff       	call   c0022284 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00224ef:	83 c4 10             	add    esp,0x10
c00224f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224f6:	83 c4 7c             	add    esp,0x7c
c00224f9:	5b                   	pop    ebx
c00224fa:	5e                   	pop    esi
c00224fb:	5f                   	pop    edi
c00224fc:	5d                   	pop    ebp
c00224fd:	c3                   	ret    

c00224fe <CmSetString(Reghive_Tag*, int, char const*)>:
c00224fe:	55                   	push   ebp
c00224ff:	57                   	push   edi
c0022500:	56                   	push   esi
c0022501:	53                   	push   ebx
c0022502:	bb 27 00 00 00       	mov    ebx,0x27
c0022507:	81 ec 88 00 00 00    	sub    esp,0x88
c002250d:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0022514:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c002251b:	e8 50 e0 fd ff       	call   c0000570 <strlen>
c0022520:	8d 48 26             	lea    ecx,[eax+0x26]
c0022523:	89 c8                	mov    eax,ecx
c0022525:	99                   	cdq    
c0022526:	f7 fb                	idiv   ebx
c0022528:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002252c:	83 c4 10             	add    esp,0x10
c002252f:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0022535:	7e 10                	jle    c0022547 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0022537:	83 ec 0c             	sub    esp,0xc
c002253a:	68 c2 2d 03 c0       	push   0xc0032dc2
c002253f:	e8 a6 df ff ff       	call   c00204ea <KePanic(char const*)>
c0022544:	83 c4 10             	add    esp,0x10
c0022547:	31 ff                	xor    edi,edi
c0022549:	50                   	push   eax
c002254a:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c002254e:	53                   	push   ebx
c002254f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022556:	56                   	push   esi
c0022557:	e8 04 fc ff ff       	call   c0022160 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002255c:	83 c4 10             	add    esp,0x10
c002255f:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0022563:	89 d0                	mov    eax,edx
c0022565:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0022569:	c1 e0 08             	shl    eax,0x8
c002256c:	09 c2                	or     edx,eax
c002256e:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0022572:	c1 e2 08             	shl    edx,0x8
c0022575:	09 c2                	or     edx,eax
c0022577:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002257b:	7e 76                	jle    c00225f3 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c002257d:	85 d2                	test   edx,edx
c002257f:	75 25                	jne    c00225a6 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0022581:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0022586:	8d 44 24 45          	lea    eax,[esp+0x45]
c002258a:	50                   	push   eax
c002258b:	6a 00                	push   0x0
c002258d:	6a 00                	push   0x0
c002258f:	56                   	push   esi
c0022590:	e8 75 fe ff ff       	call   c002240a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022595:	83 c4 10             	add    esp,0x10
c0022598:	89 c2                	mov    edx,eax
c002259a:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c002259d:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00225a0:	c1 f8 10             	sar    eax,0x10
c00225a3:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c00225a6:	55                   	push   ebp
c00225a7:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c00225ab:	55                   	push   ebp
c00225ac:	52                   	push   edx
c00225ad:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00225b1:	56                   	push   esi
c00225b2:	e8 a9 fb ff ff       	call   c0022160 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00225b7:	83 c4 0c             	add    esp,0xc
c00225ba:	6a 27                	push   0x27
c00225bc:	6a 00                	push   0x0
c00225be:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00225c2:	51                   	push   ecx
c00225c3:	e8 28 df fd ff       	call   c00004f0 <memset>
c00225c8:	83 c4 0c             	add    esp,0xc
c00225cb:	6b c7 27             	imul   eax,edi,0x27
c00225ce:	6a 27                	push   0x27
c00225d0:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c00225d7:	50                   	push   eax
c00225d8:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00225dc:	51                   	push   ecx
c00225dd:	e8 9e e0 fd ff       	call   c0000680 <strncpy>
c00225e2:	83 c4 0c             	add    esp,0xc
c00225e5:	55                   	push   ebp
c00225e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00225ea:	52                   	push   edx
c00225eb:	56                   	push   esi
c00225ec:	e8 93 fc ff ff       	call   c0022284 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00225f1:	eb 19                	jmp    c002260c <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c00225f3:	85 d2                	test   edx,edx
c00225f5:	74 18                	je     c002260f <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c00225f7:	51                   	push   ecx
c00225f8:	51                   	push   ecx
c00225f9:	52                   	push   edx
c00225fa:	56                   	push   esi
c00225fb:	e8 c0 fc ff ff       	call   c00222c0 <CmFreeExtent(Reghive_Tag*, int)>
c0022600:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0022604:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0022608:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002260c:	83 c4 10             	add    esp,0x10
c002260f:	47                   	inc    edi
c0022610:	83 c3 03             	add    ebx,0x3
c0022613:	83 ff 07             	cmp    edi,0x7
c0022616:	0f 85 43 ff ff ff    	jne    c002255f <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c002261c:	50                   	push   eax
c002261d:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0022621:	50                   	push   eax
c0022622:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022629:	56                   	push   esi
c002262a:	e8 55 fc ff ff       	call   c0022284 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002262f:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022635:	5b                   	pop    ebx
c0022636:	5e                   	pop    esi
c0022637:	5f                   	pop    edi
c0022638:	5d                   	pop    ebp
c0022639:	c3                   	ret    

c002263a <CmGetMatch(char*, char*, bool, bool*)>:
c002263a:	56                   	push   esi
c002263b:	53                   	push   ebx
c002263c:	50                   	push   eax
c002263d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022641:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022646:	74 25                	je     c002266d <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0022648:	c6 06 01             	mov    BYTE PTR [esi],0x1
c002264b:	31 db                	xor    ebx,ebx
c002264d:	50                   	push   eax
c002264e:	50                   	push   eax
c002264f:	8d 04 9d a0 46 03 c0 	lea    eax,[ebx*4-0x3ffcb960]
c0022656:	50                   	push   eax
c0022657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002265b:	e8 f0 e0 fd ff       	call   c0000750 <strcmp>
c0022660:	83 c4 10             	add    esp,0x10
c0022663:	85 c0                	test   eax,eax
c0022665:	74 2e                	je     c0022695 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0022667:	43                   	inc    ebx
c0022668:	83 fb 3f             	cmp    ebx,0x3f
c002266b:	75 e0                	jne    c002264d <CmGetMatch(char*, char*, bool, bool*)+0x13>
c002266d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022670:	31 db                	xor    ebx,ebx
c0022672:	8d 04 9d a0 46 03 c0 	lea    eax,[ebx*4-0x3ffcb960]
c0022679:	51                   	push   ecx
c002267a:	51                   	push   ecx
c002267b:	50                   	push   eax
c002267c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022680:	e8 cb e0 fd ff       	call   c0000750 <strcmp>
c0022685:	83 c4 10             	add    esp,0x10
c0022688:	85 c0                	test   eax,eax
c002268a:	74 09                	je     c0022695 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c002268c:	43                   	inc    ebx
c002268d:	83 fb 3f             	cmp    ebx,0x3f
c0022690:	75 e0                	jne    c0022672 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0022692:	83 cb ff             	or     ebx,0xffffffff
c0022695:	89 d8                	mov    eax,ebx
c0022697:	5a                   	pop    edx
c0022698:	5b                   	pop    ebx
c0022699:	5e                   	pop    esi
c002269a:	c3                   	ret    

c002269b <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c002269b:	55                   	push   ebp
c002269c:	31 c0                	xor    eax,eax
c002269e:	57                   	push   edi
c002269f:	56                   	push   esi
c00226a0:	53                   	push   ebx
c00226a1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00226a5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00226a9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00226ab:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00226af:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00226b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00226b6:	83 fd 1f             	cmp    ebp,0x1f
c00226b9:	7f 0b                	jg     c00226c6 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00226bb:	0f b6 c2             	movzx  eax,dl
c00226be:	d3 e0                	shl    eax,cl
c00226c0:	09 07                	or     DWORD PTR [edi],eax
c00226c2:	b0 01                	mov    al,0x1
c00226c4:	01 33                	add    DWORD PTR [ebx],esi
c00226c6:	5b                   	pop    ebx
c00226c7:	5e                   	pop    esi
c00226c8:	5f                   	pop    edi
c00226c9:	5d                   	pop    ebp
c00226ca:	c3                   	ret    

c00226cb <CmGetShift(unsigned int*, int*, int, bool*)>:
c00226cb:	57                   	push   edi
c00226cc:	56                   	push   esi
c00226cd:	53                   	push   ebx
c00226ce:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00226d2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00226d6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00226da:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00226de:	39 0b                	cmp    DWORD PTR [ebx],ecx
c00226e0:	7c 17                	jl     c00226f9 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c00226e2:	8b 17                	mov    edx,DWORD PTR [edi]
c00226e4:	b8 01 00 00 00       	mov    eax,0x1
c00226e9:	d3 e0                	shl    eax,cl
c00226eb:	48                   	dec    eax
c00226ec:	21 d0                	and    eax,edx
c00226ee:	d3 ea                	shr    edx,cl
c00226f0:	89 17                	mov    DWORD PTR [edi],edx
c00226f2:	29 0b                	sub    DWORD PTR [ebx],ecx
c00226f4:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00226f7:	eb 05                	jmp    c00226fe <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c00226f9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00226fc:	31 c0                	xor    eax,eax
c00226fe:	5b                   	pop    ebx
c00226ff:	5e                   	pop    esi
c0022700:	5f                   	pop    edi
c0022701:	c3                   	ret    

c0022702 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0022702:	83 ec 40             	sub    esp,0x40
c0022705:	8d 44 24 09          	lea    eax,[esp+0x9]
c0022709:	50                   	push   eax
c002270a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002270e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022712:	e8 49 fa ff ff       	call   c0022160 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022717:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002271b:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c002271f:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0022723:	89 10                	mov    DWORD PTR [eax],edx
c0022725:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0022728:	83 c4 4c             	add    esp,0x4c
c002272b:	c3                   	ret    

c002272c <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c002272c:	55                   	push   ebp
c002272d:	57                   	push   edi
c002272e:	56                   	push   esi
c002272f:	53                   	push   ebx
c0022730:	83 ec 40             	sub    esp,0x40
c0022733:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0022737:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c002273b:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c002273f:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0022743:	53                   	push   ebx
c0022744:	56                   	push   esi
c0022745:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022749:	e8 12 fa ff ff       	call   c0022160 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002274e:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0022752:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0022756:	83 c4 0c             	add    esp,0xc
c0022759:	53                   	push   ebx
c002275a:	56                   	push   esi
c002275b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002275f:	e8 20 fb ff ff       	call   c0022284 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022764:	83 c4 4c             	add    esp,0x4c
c0022767:	5b                   	pop    ebx
c0022768:	5e                   	pop    esi
c0022769:	5f                   	pop    edi
c002276a:	5d                   	pop    ebp
c002276b:	c3                   	ret    

c002276c <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c002276c:	55                   	push   ebp
c002276d:	57                   	push   edi
c002276e:	56                   	push   esi
c002276f:	31 f6                	xor    esi,esi
c0022771:	53                   	push   ebx
c0022772:	31 db                	xor    ebx,ebx
c0022774:	83 ec 40             	sub    esp,0x40
c0022777:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c002277f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0022787:	6a 12                	push   0x12
c0022789:	68 ee 00 00 00       	push   0xee
c002278e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0022792:	e8 59 dd fd ff       	call   c00004f0 <memset>
c0022797:	83 c4 10             	add    esp,0x10
c002279a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002279e:	6a 08                	push   0x8
c00227a0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00227a4:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00227a8:	50                   	push   eax
c00227a9:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00227ad:	55                   	push   ebp
c00227ae:	57                   	push   edi
c00227af:	e8 e7 fe ff ff       	call   c002269b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00227b4:	83 c4 10             	add    esp,0x10
c00227b7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00227bb:	50                   	push   eax
c00227bc:	6a 06                	push   0x6
c00227be:	55                   	push   ebp
c00227bf:	57                   	push   edi
c00227c0:	e8 06 ff ff ff       	call   c00226cb <CmGetShift(unsigned int*, int*, int, bool*)>
c00227c5:	83 c4 10             	add    esp,0x10
c00227c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00227cd:	74 07                	je     c00227d6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c00227cf:	46                   	inc    esi
c00227d0:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c00227d4:	eb e1                	jmp    c00227b7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c00227d6:	43                   	inc    ebx
c00227d7:	83 fb 12             	cmp    ebx,0x12
c00227da:	75 c2                	jne    c002279e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c00227dc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00227e0:	31 db                	xor    ebx,ebx
c00227e2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00227e5:	50                   	push   eax
c00227e6:	50                   	push   eax
c00227e7:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c00227ec:	43                   	inc    ebx
c00227ed:	8d 04 85 a0 46 03 c0 	lea    eax,[eax*4-0x3ffcb960]
c00227f4:	50                   	push   eax
c00227f5:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00227f9:	e8 42 e0 fd ff       	call   c0000840 <strcat>
c00227fe:	83 c4 10             	add    esp,0x10
c0022801:	83 fb 18             	cmp    ebx,0x18
c0022804:	75 df                	jne    c00227e5 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0022806:	83 c4 3c             	add    esp,0x3c
c0022809:	31 c0                	xor    eax,eax
c002280b:	5b                   	pop    ebx
c002280c:	5e                   	pop    esi
c002280d:	5f                   	pop    edi
c002280e:	5d                   	pop    ebp
c002280f:	c3                   	ret    

c0022810 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0022810:	83 ec 40             	sub    esp,0x40
c0022813:	8d 44 24 09          	lea    eax,[esp+0x9]
c0022817:	50                   	push   eax
c0022818:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002281c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022820:	e8 3b f9 ff ff       	call   c0022160 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022825:	58                   	pop    eax
c0022826:	5a                   	pop    edx
c0022827:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002282b:	8d 44 24 15          	lea    eax,[esp+0x15]
c002282f:	50                   	push   eax
c0022830:	e8 37 ff ff ff       	call   c002276c <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0022835:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c002283a:	83 c4 4c             	add    esp,0x4c
c002283d:	c3                   	ret    

c002283e <CmConvertToInternalFilename(char const*, unsigned char*)>:
c002283e:	55                   	push   ebp
c002283f:	57                   	push   edi
c0022840:	56                   	push   esi
c0022841:	53                   	push   ebx
c0022842:	31 db                	xor    ebx,ebx
c0022844:	83 ec 70             	sub    esp,0x70
c0022847:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c002284e:	6a 30                	push   0x30
c0022850:	6a 00                	push   0x0
c0022852:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0022856:	56                   	push   esi
c0022857:	e8 94 dc fd ff       	call   c00004f0 <memset>
c002285c:	83 c4 10             	add    esp,0x10
c002285f:	83 ec 0c             	sub    esp,0xc
c0022862:	57                   	push   edi
c0022863:	e8 08 dd fd ff       	call   c0000570 <strlen>
c0022868:	83 c4 10             	add    esp,0x10
c002286b:	39 d8                	cmp    eax,ebx
c002286d:	76 16                	jbe    c0022885 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c002286f:	83 ec 0c             	sub    esp,0xc
c0022872:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0022876:	50                   	push   eax
c0022877:	e8 b4 e0 fd ff       	call   c0000930 <toupper>
c002287c:	83 c4 10             	add    esp,0x10
c002287f:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022882:	43                   	inc    ebx
c0022883:	eb da                	jmp    c002285f <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0022885:	31 f6                	xor    esi,esi
c0022887:	52                   	push   edx
c0022888:	31 ff                	xor    edi,edi
c002288a:	6a 18                	push   0x18
c002288c:	6a 3f                	push   0x3f
c002288e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022892:	50                   	push   eax
c0022893:	e8 58 dc fd ff       	call   c00004f0 <memset>
c0022898:	83 c4 10             	add    esp,0x10
c002289b:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c002289f:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c00228a3:	84 c0                	test   al,al
c00228a5:	0f 84 b0 00 00 00    	je     c002295b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00228ab:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00228af:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00228b4:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00228b8:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c00228bd:	8d 6e 01             	lea    ebp,[esi+0x1]
c00228c0:	83 ec 0c             	sub    esp,0xc
c00228c3:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00228c7:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00228cb:	53                   	push   ebx
c00228cc:	e8 9f dc fd ff       	call   c0000570 <strlen>
c00228d1:	83 c4 10             	add    esp,0x10
c00228d4:	85 c0                	test   eax,eax
c00228d6:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00228da:	74 0b                	je     c00228e7 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00228dc:	50                   	push   eax
c00228dd:	6a 01                	push   0x1
c00228df:	53                   	push   ebx
c00228e0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00228e4:	50                   	push   eax
c00228e5:	eb 0a                	jmp    c00228f1 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00228e7:	50                   	push   eax
c00228e8:	6a 00                	push   0x0
c00228ea:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00228ee:	50                   	push   eax
c00228ef:	6a 00                	push   0x0
c00228f1:	e8 44 fd ff ff       	call   c002263a <CmGetMatch(char*, char*, bool, bool*)>
c00228f6:	83 c4 10             	add    esp,0x10
c00228f9:	83 f8 ff             	cmp    eax,0xffffffff
c00228fc:	75 1a                	jne    c0022918 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00228fe:	83 ec 0c             	sub    esp,0xc
c0022901:	68 d7 2d 03 c0       	push   0xc0032dd7
c0022906:	e8 df db ff ff       	call   c00204ea <KePanic(char const*)>
c002290b:	83 c4 10             	add    esp,0x10
c002290e:	b8 02 00 00 00       	mov    eax,0x2
c0022913:	e9 bc 00 00 00       	jmp    c00229d4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0022918:	83 ff 18             	cmp    edi,0x18
c002291b:	75 1a                	jne    c0022937 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c002291d:	83 ec 0c             	sub    esp,0xc
c0022920:	68 ec 2d 03 c0       	push   0xc0032dec
c0022925:	e8 c0 db ff ff       	call   c00204ea <KePanic(char const*)>
c002292a:	83 c4 10             	add    esp,0x10
c002292d:	b8 01 00 00 00       	mov    eax,0x1
c0022932:	e9 9d 00 00 00       	jmp    c00229d4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0022937:	47                   	inc    edi
c0022938:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002293d:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0022941:	74 02                	je     c0022945 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0022943:	89 ee                	mov    esi,ebp
c0022945:	83 ec 0c             	sub    esp,0xc
c0022948:	53                   	push   ebx
c0022949:	e8 22 dc fd ff       	call   c0000570 <strlen>
c002294e:	83 c4 10             	add    esp,0x10
c0022951:	85 c0                	test   eax,eax
c0022953:	74 06                	je     c002295b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0022955:	46                   	inc    esi
c0022956:	e9 40 ff ff ff       	jmp    c002289b <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c002295b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022963:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c002296b:	31 f6                	xor    esi,esi
c002296d:	50                   	push   eax
c002296e:	31 ff                	xor    edi,edi
c0022970:	6a 12                	push   0x12
c0022972:	68 ee 00 00 00       	push   0xee
c0022977:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002297e:	e8 6d db fd ff       	call   c00004f0 <memset>
c0022983:	83 c4 10             	add    esp,0x10
c0022986:	83 fe 17             	cmp    esi,0x17
c0022989:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c002298d:	7e 26                	jle    c00229b5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c002298f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022993:	50                   	push   eax
c0022994:	6a 08                	push   0x8
c0022996:	55                   	push   ebp
c0022997:	53                   	push   ebx
c0022998:	e8 2e fd ff ff       	call   c00226cb <CmGetShift(unsigned int*, int*, int, bool*)>
c002299d:	83 c4 10             	add    esp,0x10
c00229a0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00229a5:	74 26                	je     c00229cd <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c00229a7:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00229ae:	4e                   	dec    esi
c00229af:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00229b2:	47                   	inc    edi
c00229b3:	eb 1c                	jmp    c00229d1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00229b5:	6a 06                	push   0x6
c00229b7:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c00229bc:	50                   	push   eax
c00229bd:	55                   	push   ebp
c00229be:	53                   	push   ebx
c00229bf:	e8 d7 fc ff ff       	call   c002269b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00229c4:	83 c4 10             	add    esp,0x10
c00229c7:	84 c0                	test   al,al
c00229c9:	75 06                	jne    c00229d1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00229cb:	eb c2                	jmp    c002298f <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c00229cd:	31 c0                	xor    eax,eax
c00229cf:	eb 03                	jmp    c00229d4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00229d1:	46                   	inc    esi
c00229d2:	eb b2                	jmp    c0022986 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c00229d4:	83 c4 6c             	add    esp,0x6c
c00229d7:	5b                   	pop    ebx
c00229d8:	5e                   	pop    esi
c00229d9:	5f                   	pop    edi
c00229da:	5d                   	pop    ebp
c00229db:	c3                   	ret    

c00229dc <CmCreateString(Reghive_Tag*, int, char const*)>:
c00229dc:	53                   	push   ebx
c00229dd:	83 ec 3c             	sub    esp,0x3c
c00229e0:	6a 2b                	push   0x2b
c00229e2:	6a 00                	push   0x0
c00229e4:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00229e8:	53                   	push   ebx
c00229e9:	e8 02 db fd ff       	call   c00004f0 <memset>
c00229ee:	58                   	pop    eax
c00229ef:	5a                   	pop    edx
c00229f0:	8d 44 24 11          	lea    eax,[esp+0x11]
c00229f4:	50                   	push   eax
c00229f5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00229f9:	e8 40 fe ff ff       	call   c002283e <CmConvertToInternalFilename(char const*, unsigned char*)>
c00229fe:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0022a03:	83 c4 0c             	add    esp,0xc
c0022a06:	6a 15                	push   0x15
c0022a08:	6a 00                	push   0x0
c0022a0a:	8d 44 24 27          	lea    eax,[esp+0x27]
c0022a0e:	50                   	push   eax
c0022a0f:	e8 dc da fd ff       	call   c00004f0 <memset>
c0022a14:	53                   	push   ebx
c0022a15:	6a 00                	push   0x0
c0022a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022a1b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022a1f:	e8 e6 f9 ff ff       	call   c002240a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022a24:	83 c4 58             	add    esp,0x58
c0022a27:	5b                   	pop    ebx
c0022a28:	c3                   	ret    

c0022a29 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0022a29:	56                   	push   esi
c0022a2a:	53                   	push   ebx
c0022a2b:	83 ec 48             	sub    esp,0x48
c0022a2e:	6a 12                	push   0x12
c0022a30:	68 ff 00 00 00       	push   0xff
c0022a35:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0022a39:	56                   	push   esi
c0022a3a:	e8 b1 da fd ff       	call   c00004f0 <memset>
c0022a3f:	5a                   	pop    edx
c0022a40:	59                   	pop    ecx
c0022a41:	56                   	push   esi
c0022a42:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0022a46:	e8 f3 fd ff ff       	call   c002283e <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022a4b:	83 c4 10             	add    esp,0x10
c0022a4e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022a52:	85 db                	test   ebx,ebx
c0022a54:	74 42                	je     c0022a98 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0022a56:	50                   	push   eax
c0022a57:	8d 44 24 19          	lea    eax,[esp+0x19]
c0022a5b:	50                   	push   eax
c0022a5c:	53                   	push   ebx
c0022a5d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022a61:	e8 fa f6 ff ff       	call   c0022160 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022a66:	83 c4 0c             	add    esp,0xc
c0022a69:	6a 12                	push   0x12
c0022a6b:	8d 44 24 21          	lea    eax,[esp+0x21]
c0022a6f:	50                   	push   eax
c0022a70:	56                   	push   esi
c0022a71:	e8 0a d9 fd ff       	call   c0000380 <memcmp>
c0022a76:	83 c4 10             	add    esp,0x10
c0022a79:	85 c0                	test   eax,eax
c0022a7b:	74 1e                	je     c0022a9b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0022a7d:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0022a82:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0022a87:	c1 e3 08             	shl    ebx,0x8
c0022a8a:	09 d8                	or     eax,ebx
c0022a8c:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0022a91:	c1 e3 10             	shl    ebx,0x10
c0022a94:	09 c3                	or     ebx,eax
c0022a96:	eb ba                	jmp    c0022a52 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0022a98:	83 cb ff             	or     ebx,0xffffffff
c0022a9b:	89 d8                	mov    eax,ebx
c0022a9d:	83 c4 44             	add    esp,0x44
c0022aa0:	5b                   	pop    ebx
c0022aa1:	5e                   	pop    esi
c0022aa2:	c3                   	ret    

c0022aa3 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0022aa3:	57                   	push   edi
c0022aa4:	56                   	push   esi
c0022aa5:	53                   	push   ebx
c0022aa6:	83 ec 34             	sub    esp,0x34
c0022aa9:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0022aad:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0022ab1:	6a 2b                	push   0x2b
c0022ab3:	6a 00                	push   0x0
c0022ab5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022ab9:	53                   	push   ebx
c0022aba:	e8 31 da fd ff       	call   c00004f0 <memset>
c0022abf:	58                   	pop    eax
c0022ac0:	5a                   	pop    edx
c0022ac1:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022ac5:	50                   	push   eax
c0022ac6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022aca:	e8 6f fd ff ff       	call   c002283e <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022acf:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0022ad3:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0022ad7:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0022adb:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0022adf:	53                   	push   ebx
c0022ae0:	6a 00                	push   0x0
c0022ae2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022ae6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022aea:	e8 1b f9 ff ff       	call   c002240a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022aef:	83 c4 50             	add    esp,0x50
c0022af2:	5b                   	pop    ebx
c0022af3:	5e                   	pop    esi
c0022af4:	5f                   	pop    edi
c0022af5:	c3                   	ret    

c0022af6 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0022af6:	55                   	push   ebp
c0022af7:	57                   	push   edi
c0022af8:	56                   	push   esi
c0022af9:	53                   	push   ebx
c0022afa:	83 ec 40             	sub    esp,0x40
c0022afd:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0022b01:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022b05:	6a 2b                	push   0x2b
c0022b07:	6a 00                	push   0x0
c0022b09:	8d 74 24 11          	lea    esi,[esp+0x11]
c0022b0d:	56                   	push   esi
c0022b0e:	e8 dd d9 fd ff       	call   c00004f0 <memset>
c0022b13:	5f                   	pop    edi
c0022b14:	89 ef                	mov    edi,ebp
c0022b16:	58                   	pop    eax
c0022b17:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022b1b:	50                   	push   eax
c0022b1c:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0022b20:	e8 19 fd ff ff       	call   c002283e <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022b25:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0022b2a:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0022b2f:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0022b34:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0022b39:	83 c4 10             	add    esp,0x10
c0022b3c:	85 ed                	test   ebp,ebp
c0022b3e:	74 14                	je     c0022b54 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0022b40:	51                   	push   ecx
c0022b41:	51                   	push   ecx
c0022b42:	57                   	push   edi
c0022b43:	53                   	push   ebx
c0022b44:	e8 09 f7 ff ff       	call   c0022252 <CmGetNext(Reghive_Tag*, int)>
c0022b49:	83 c4 10             	add    esp,0x10
c0022b4c:	85 c0                	test   eax,eax
c0022b4e:	74 04                	je     c0022b54 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0022b50:	89 c7                	mov    edi,eax
c0022b52:	eb e8                	jmp    c0022b3c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0022b54:	56                   	push   esi
c0022b55:	6a 00                	push   0x0
c0022b57:	57                   	push   edi
c0022b58:	53                   	push   ebx
c0022b59:	e8 ac f8 ff ff       	call   c002240a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022b5e:	83 c4 0c             	add    esp,0xc
c0022b61:	89 c7                	mov    edi,eax
c0022b63:	56                   	push   esi
c0022b64:	50                   	push   eax
c0022b65:	53                   	push   ebx
c0022b66:	e8 f5 f5 ff ff       	call   c0022160 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022b6b:	58                   	pop    eax
c0022b6c:	5a                   	pop    edx
c0022b6d:	6a 6c                	push   0x6c
c0022b6f:	6a 00                	push   0x0
c0022b71:	6a 00                	push   0x0
c0022b73:	68 fd 2d 03 c0       	push   0xc0032dfd
c0022b78:	57                   	push   edi
c0022b79:	53                   	push   ebx
c0022b7a:	e8 24 ff ff ff       	call   c0022aa3 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0022b7f:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0022b83:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0022b87:	c1 e8 10             	shr    eax,0x10
c0022b8a:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0022b8e:	83 c4 1c             	add    esp,0x1c
c0022b91:	56                   	push   esi
c0022b92:	57                   	push   edi
c0022b93:	53                   	push   ebx
c0022b94:	e8 eb f6 ff ff       	call   c0022284 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022b99:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0022b9e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ba3:	c1 e0 08             	shl    eax,0x8
c0022ba6:	09 c2                	or     edx,eax
c0022ba8:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0022bad:	83 c4 4c             	add    esp,0x4c
c0022bb0:	c1 e0 10             	shl    eax,0x10
c0022bb3:	5b                   	pop    ebx
c0022bb4:	09 d0                	or     eax,edx
c0022bb6:	5e                   	pop    esi
c0022bb7:	5f                   	pop    edi
c0022bb8:	5d                   	pop    ebp
c0022bb9:	c3                   	ret    

c0022bba <zStrtok(char*, char const*)>:
c0022bba:	55                   	push   ebp
c0022bbb:	57                   	push   edi
c0022bbc:	56                   	push   esi
c0022bbd:	53                   	push   ebx
c0022bbe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022bc2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022bc6:	85 db                	test   ebx,ebx
c0022bc8:	74 2f                	je     c0022bf9 <zStrtok(char*, char const*)+0x3f>
c0022bca:	85 c0                	test   eax,eax
c0022bcc:	75 09                	jne    c0022bd7 <zStrtok(char*, char const*)+0x1d>
c0022bce:	a1 f0 f9 03 c0       	mov    eax,ds:0xc003f9f0
c0022bd3:	85 c0                	test   eax,eax
c0022bd5:	74 50                	je     c0022c27 <zStrtok(char*, char const*)+0x6d>
c0022bd7:	31 c9                	xor    ecx,ecx
c0022bd9:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0022bdd:	74 03                	je     c0022be2 <zStrtok(char*, char const*)+0x28>
c0022bdf:	41                   	inc    ecx
c0022be0:	eb f7                	jmp    c0022bd9 <zStrtok(char*, char const*)+0x1f>
c0022be2:	31 d2                	xor    edx,edx
c0022be4:	39 ca                	cmp    edx,ecx
c0022be6:	74 15                	je     c0022bfd <zStrtok(char*, char const*)+0x43>
c0022be8:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0022bec:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0022bef:	8d 3c 10             	lea    edi,[eax+edx*1]
c0022bf2:	39 ee                	cmp    esi,ebp
c0022bf4:	74 13                	je     c0022c09 <zStrtok(char*, char const*)+0x4f>
c0022bf6:	42                   	inc    edx
c0022bf7:	eb eb                	jmp    c0022be4 <zStrtok(char*, char const*)+0x2a>
c0022bf9:	31 c0                	xor    eax,eax
c0022bfb:	eb 2a                	jmp    c0022c27 <zStrtok(char*, char const*)+0x6d>
c0022bfd:	c7 05 f0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9f0,0x0
c0022c07:	eb 1e                	jmp    c0022c27 <zStrtok(char*, char const*)+0x6d>
c0022c09:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0022c0c:	39 ce                	cmp    esi,ecx
c0022c0e:	75 0a                	jne    c0022c1a <zStrtok(char*, char const*)+0x60>
c0022c10:	40                   	inc    eax
c0022c11:	a3 f0 f9 03 c0       	mov    ds:0xc003f9f0,eax
c0022c16:	89 d8                	mov    eax,ebx
c0022c18:	eb 0d                	jmp    c0022c27 <zStrtok(char*, char const*)+0x6d>
c0022c1a:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0022c1e:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0022c21:	89 15 f0 f9 03 c0    	mov    DWORD PTR ds:0xc003f9f0,edx
c0022c27:	5b                   	pop    ebx
c0022c28:	5e                   	pop    esi
c0022c29:	5f                   	pop    edi
c0022c2a:	5d                   	pop    ebp
c0022c2b:	c3                   	ret    

c0022c2c <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0022c2c:	57                   	push   edi
c0022c2d:	56                   	push   esi
c0022c2e:	53                   	push   ebx
c0022c2f:	81 ec 08 01 00 00    	sub    esp,0x108
c0022c35:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0022c3c:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0022c43:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0022c47:	53                   	push   ebx
c0022c48:	e8 f3 d9 fd ff       	call   c0000640 <strcpy>
c0022c4d:	59                   	pop    ecx
c0022c4e:	5e                   	pop    esi
c0022c4f:	68 9f 31 03 c0       	push   0xc003319f
c0022c54:	53                   	push   ebx
c0022c55:	bb 01 00 00 00       	mov    ebx,0x1
c0022c5a:	e8 5b ff ff ff       	call   c0022bba <zStrtok(char*, char const*)>
c0022c5f:	83 c4 10             	add    esp,0x10
c0022c62:	85 c0                	test   eax,eax
c0022c64:	74 3b                	je     c0022ca1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022c66:	52                   	push   edx
c0022c67:	50                   	push   eax
c0022c68:	6a 01                	push   0x1
c0022c6a:	57                   	push   edi
c0022c6b:	e8 b9 fd ff ff       	call   c0022a29 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0022c70:	59                   	pop    ecx
c0022c71:	89 c3                	mov    ebx,eax
c0022c73:	5e                   	pop    esi
c0022c74:	68 9f 31 03 c0       	push   0xc003319f
c0022c79:	6a 00                	push   0x0
c0022c7b:	e8 3a ff ff ff       	call   c0022bba <zStrtok(char*, char const*)>
c0022c80:	83 c4 10             	add    esp,0x10
c0022c83:	89 c6                	mov    esi,eax
c0022c85:	85 c0                	test   eax,eax
c0022c87:	74 18                	je     c0022ca1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022c89:	52                   	push   edx
c0022c8a:	52                   	push   edx
c0022c8b:	53                   	push   ebx
c0022c8c:	57                   	push   edi
c0022c8d:	e8 81 f5 ff ff       	call   c0022213 <CmEnterDirectory(Reghive_Tag*, int)>
c0022c92:	83 c4 10             	add    esp,0x10
c0022c95:	89 c3                	mov    ebx,eax
c0022c97:	83 f8 ff             	cmp    eax,0xffffffff
c0022c9a:	74 05                	je     c0022ca1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022c9c:	50                   	push   eax
c0022c9d:	56                   	push   esi
c0022c9e:	53                   	push   ebx
c0022c9f:	eb c9                	jmp    c0022c6a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0022ca1:	81 c4 00 01 00 00    	add    esp,0x100
c0022ca7:	89 d8                	mov    eax,ebx
c0022ca9:	5b                   	pop    ebx
c0022caa:	5e                   	pop    esi
c0022cab:	5f                   	pop    edi
c0022cac:	c3                   	ret    

c0022cad <CmDisplayTree(Reghive_Tag*, int, int)>:
c0022cad:	55                   	push   ebp
c0022cae:	57                   	push   edi
c0022caf:	56                   	push   esi
c0022cb0:	53                   	push   ebx
c0022cb1:	83 ec 5c             	sub    esp,0x5c
c0022cb4:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0022cb8:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0022cbc:	85 db                	test   ebx,ebx
c0022cbe:	0f 8e 84 00 00 00    	jle    c0022d48 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0022cc4:	31 ed                	xor    ebp,ebp
c0022cc6:	57                   	push   edi
c0022cc7:	6a 32                	push   0x32
c0022cc9:	6a 00                	push   0x0
c0022ccb:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0022ccf:	57                   	push   edi
c0022cd0:	e8 1b d8 fd ff       	call   c00004f0 <memset>
c0022cd5:	83 c4 0c             	add    esp,0xc
c0022cd8:	57                   	push   edi
c0022cd9:	53                   	push   ebx
c0022cda:	56                   	push   esi
c0022cdb:	e8 30 fb ff ff       	call   c0022810 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0022ce0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022ce4:	83 c4 10             	add    esp,0x10
c0022ce7:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0022ceb:	7d 13                	jge    c0022d00 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0022ced:	83 ec 0c             	sub    esp,0xc
c0022cf0:	45                   	inc    ebp
c0022cf1:	68 23 35 03 c0       	push   0xc0033523
c0022cf6:	e8 d6 67 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0022cfb:	83 c4 10             	add    esp,0x10
c0022cfe:	eb e7                	jmp    c0022ce7 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0022d00:	51                   	push   ecx
c0022d01:	57                   	push   edi
c0022d02:	53                   	push   ebx
c0022d03:	68 03 2e 03 c0       	push   0xc0032e03
c0022d08:	e8 c4 67 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0022d0d:	83 c4 10             	add    esp,0x10
c0022d10:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0022d15:	75 1e                	jne    c0022d35 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0022d17:	52                   	push   edx
c0022d18:	52                   	push   edx
c0022d19:	53                   	push   ebx
c0022d1a:	56                   	push   esi
c0022d1b:	e8 f3 f4 ff ff       	call   c0022213 <CmEnterDirectory(Reghive_Tag*, int)>
c0022d20:	83 c4 0c             	add    esp,0xc
c0022d23:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0022d27:	8d 51 04             	lea    edx,[ecx+0x4]
c0022d2a:	52                   	push   edx
c0022d2b:	50                   	push   eax
c0022d2c:	56                   	push   esi
c0022d2d:	e8 7b ff ff ff       	call   c0022cad <CmDisplayTree(Reghive_Tag*, int, int)>
c0022d32:	83 c4 10             	add    esp,0x10
c0022d35:	50                   	push   eax
c0022d36:	50                   	push   eax
c0022d37:	53                   	push   ebx
c0022d38:	56                   	push   esi
c0022d39:	e8 14 f5 ff ff       	call   c0022252 <CmGetNext(Reghive_Tag*, int)>
c0022d3e:	83 c4 10             	add    esp,0x10
c0022d41:	89 c3                	mov    ebx,eax
c0022d43:	e9 74 ff ff ff       	jmp    c0022cbc <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0022d48:	83 c4 5c             	add    esp,0x5c
c0022d4b:	5b                   	pop    ebx
c0022d4c:	5e                   	pop    esi
c0022d4d:	5f                   	pop    edi
c0022d4e:	5d                   	pop    ebp
c0022d4f:	c3                   	ret    

c0022d50 <CmSplitFinalSlashInPlace(char*)>:
c0022d50:	53                   	push   ebx
c0022d51:	83 ec 14             	sub    esp,0x14
c0022d54:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022d58:	53                   	push   ebx
c0022d59:	e8 12 d8 fd ff       	call   c0000570 <strlen>
c0022d5e:	83 c4 10             	add    esp,0x10
c0022d61:	48                   	dec    eax
c0022d62:	85 c0                	test   eax,eax
c0022d64:	74 15                	je     c0022d7b <CmSplitFinalSlashInPlace(char*)+0x2b>
c0022d66:	8d 14 03             	lea    edx,[ebx+eax*1]
c0022d69:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0022d6d:	75 09                	jne    c0022d78 <CmSplitFinalSlashInPlace(char*)+0x28>
c0022d6f:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0022d72:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0022d76:	eb 05                	jmp    c0022d7d <CmSplitFinalSlashInPlace(char*)+0x2d>
c0022d78:	48                   	dec    eax
c0022d79:	eb e7                	jmp    c0022d62 <CmSplitFinalSlashInPlace(char*)+0x12>
c0022d7b:	31 c0                	xor    eax,eax
c0022d7d:	83 c4 08             	add    esp,0x8
c0022d80:	5b                   	pop    ebx
c0022d81:	c3                   	ret    

c0022d82 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0022d82:	55                   	push   ebp
c0022d83:	57                   	push   edi
c0022d84:	56                   	push   esi
c0022d85:	53                   	push   ebx
c0022d86:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022d8c:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0022d93:	8a 13                	mov    dl,BYTE PTR [ebx]
c0022d95:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0022d98:	80 fa 40             	cmp    dl,0x40
c0022d9b:	75 1c                	jne    c0022db9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0022d9d:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0022da0:	85 c9                	test   ecx,ecx
c0022da2:	0f 84 09 01 00 00    	je     c0022eb1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022da8:	8d 43 01             	lea    eax,[ebx+0x1]
c0022dab:	83 f9 3a             	cmp    ecx,0x3a
c0022dae:	74 04                	je     c0022db4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0022db0:	89 c3                	mov    ebx,eax
c0022db2:	eb e9                	jmp    c0022d9d <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0022db4:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0022db7:	89 c3                	mov    ebx,eax
c0022db9:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0022dbd:	50                   	push   eax
c0022dbe:	6a 40                	push   0x40
c0022dc0:	6a 00                	push   0x0
c0022dc2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022dc6:	50                   	push   eax
c0022dc7:	e8 24 d7 fd ff       	call   c00004f0 <memset>
c0022dcc:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0022dd3:	31 c0                	xor    eax,eax
c0022dd5:	83 c4 10             	add    esp,0x10
c0022dd8:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0022ddd:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0022de0:	89 d1                	mov    ecx,edx
c0022de2:	85 d2                	test   edx,edx
c0022de4:	0f 84 c7 00 00 00    	je     c0022eb1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022dea:	3d c7 00 00 00       	cmp    eax,0xc7
c0022def:	0f 8f bc 00 00 00    	jg     c0022eb1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022df5:	83 fa 0a             	cmp    edx,0xa
c0022df8:	0f 85 a4 00 00 00    	jne    c0022ea2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0022dfe:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0022e03:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0022e08:	89 c8                	mov    eax,ecx
c0022e0a:	a8 df                	test   al,0xdf
c0022e0c:	0f 94 c2             	sete   dl
c0022e0f:	83 f9 23             	cmp    ecx,0x23
c0022e12:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0022e17:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0022e1b:	80 e2 01             	and    dl,0x1
c0022e1e:	75 4a                	jne    c0022e6a <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022e20:	83 e8 09             	sub    eax,0x9
c0022e23:	3c 01                	cmp    al,0x1
c0022e25:	76 43                	jbe    c0022e6a <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022e27:	83 f9 5b             	cmp    ecx,0x5b
c0022e2a:	75 42                	jne    c0022e6e <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0022e2c:	83 fe 40             	cmp    esi,0x40
c0022e2f:	75 39                	jne    c0022e6a <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022e31:	83 ec 0c             	sub    esp,0xc
c0022e34:	8d 54 24 65          	lea    edx,[esp+0x65]
c0022e38:	52                   	push   edx
c0022e39:	e8 32 d7 fd ff       	call   c0000570 <strlen>
c0022e3e:	83 c4 10             	add    esp,0x10
c0022e41:	83 f8 3f             	cmp    eax,0x3f
c0022e44:	77 6b                	ja     c0022eb1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022e46:	50                   	push   eax
c0022e47:	50                   	push   eax
c0022e48:	8d 54 24 61          	lea    edx,[esp+0x61]
c0022e4c:	52                   	push   edx
c0022e4d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0022e51:	52                   	push   edx
c0022e52:	e8 e9 d7 fd ff       	call   c0000640 <strcpy>
c0022e57:	58                   	pop    eax
c0022e58:	8d 54 24 24          	lea    edx,[esp+0x24]
c0022e5c:	52                   	push   edx
c0022e5d:	e8 0e d7 fd ff       	call   c0000570 <strlen>
c0022e62:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0022e67:	83 c4 10             	add    esp,0x10
c0022e6a:	31 d2                	xor    edx,edx
c0022e6c:	eb 3b                	jmp    c0022ea9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0022e6e:	83 fe 40             	cmp    esi,0x40
c0022e71:	74 06                	je     c0022e79 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0022e73:	8d 44 24 58          	lea    eax,[esp+0x58]
c0022e77:	eb 20                	jmp    c0022e99 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0022e79:	50                   	push   eax
c0022e7a:	50                   	push   eax
c0022e7b:	55                   	push   ebp
c0022e7c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022e80:	50                   	push   eax
c0022e81:	e8 ca d8 fd ff       	call   c0000750 <strcmp>
c0022e86:	83 c4 10             	add    esp,0x10
c0022e89:	85 c0                	test   eax,eax
c0022e8b:	75 dd                	jne    c0022e6a <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022e8d:	eb e4                	jmp    c0022e73 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0022e8f:	8d 50 01             	lea    edx,[eax+0x1]
c0022e92:	83 f9 3d             	cmp    ecx,0x3d
c0022e95:	74 1e                	je     c0022eb5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0022e97:	89 d0                	mov    eax,edx
c0022e99:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0022e9c:	85 c9                	test   ecx,ecx
c0022e9e:	75 ef                	jne    c0022e8f <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0022ea0:	eb 0f                	jmp    c0022eb1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022ea2:	8d 50 01             	lea    edx,[eax+0x1]
c0022ea5:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0022ea9:	47                   	inc    edi
c0022eaa:	89 d0                	mov    eax,edx
c0022eac:	e9 2c ff ff ff       	jmp    c0022ddd <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0022eb1:	31 c0                	xor    eax,eax
c0022eb3:	eb 33                	jmp    c0022ee8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0022eb5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022eb9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022ebc:	50                   	push   eax
c0022ebd:	50                   	push   eax
c0022ebe:	8d 44 24 60          	lea    eax,[esp+0x60]
c0022ec2:	50                   	push   eax
c0022ec3:	53                   	push   ebx
c0022ec4:	e8 87 d8 fd ff       	call   c0000750 <strcmp>
c0022ec9:	83 c4 10             	add    esp,0x10
c0022ecc:	85 c0                	test   eax,eax
c0022ece:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022ed2:	75 96                	jne    c0022e6a <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022ed4:	51                   	push   ecx
c0022ed5:	51                   	push   ecx
c0022ed6:	52                   	push   edx
c0022ed7:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0022ede:	e8 5d d7 fd ff       	call   c0000640 <strcpy>
c0022ee3:	83 c4 10             	add    esp,0x10
c0022ee6:	b0 01                	mov    al,0x1
c0022ee8:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022eee:	5b                   	pop    ebx
c0022eef:	5e                   	pop    esi
c0022ef0:	5f                   	pop    edi
c0022ef1:	5d                   	pop    ebp
c0022ef2:	c3                   	ret    

c0022ef3 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0022ef3:	57                   	push   edi
c0022ef4:	56                   	push   esi
c0022ef5:	53                   	push   ebx
c0022ef6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022efc:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0022f03:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0022f0a:	53                   	push   ebx
c0022f0b:	e8 60 d6 fd ff       	call   c0000570 <strlen>
c0022f10:	89 34 24             	mov    DWORD PTR [esp],esi
c0022f13:	89 c7                	mov    edi,eax
c0022f15:	e8 56 d6 fd ff       	call   c0000570 <strlen>
c0022f1a:	83 c4 10             	add    esp,0x10
c0022f1d:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0022f21:	3d ff 00 00 00       	cmp    eax,0xff
c0022f26:	0f 87 d3 00 00 00    	ja     c0022fff <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022f2c:	57                   	push   edi
c0022f2d:	57                   	push   edi
c0022f2e:	56                   	push   esi
c0022f2f:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0022f33:	56                   	push   esi
c0022f34:	e8 07 d7 fd ff       	call   c0000640 <strcpy>
c0022f39:	58                   	pop    eax
c0022f3a:	5a                   	pop    edx
c0022f3b:	68 9f 31 03 c0       	push   0xc003319f
c0022f40:	56                   	push   esi
c0022f41:	e8 fa d8 fd ff       	call   c0000840 <strcat>
c0022f46:	59                   	pop    ecx
c0022f47:	5f                   	pop    edi
c0022f48:	53                   	push   ebx
c0022f49:	56                   	push   esi
c0022f4a:	e8 f1 d8 fd ff       	call   c0000840 <strcat>
c0022f4f:	58                   	pop    eax
c0022f50:	5a                   	pop    edx
c0022f51:	68 0d 2e 03 c0       	push   0xc0032e0d
c0022f56:	56                   	push   esi
c0022f57:	e8 e4 d8 fd ff       	call   c0000840 <strcat>
c0022f5c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0022f63:	e8 db 36 ff ff       	call   c0016643 <malloc>
c0022f68:	83 c4 0c             	add    esp,0xc
c0022f6b:	89 c3                	mov    ebx,eax
c0022f6d:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0022f73:	56                   	push   esi
c0022f74:	50                   	push   eax
c0022f75:	e8 5e 77 ff ff       	call   c001a6d8 <File::File(char const*, Process*)>
c0022f7a:	83 c4 10             	add    esp,0x10
c0022f7d:	85 db                	test   ebx,ebx
c0022f7f:	74 7e                	je     c0022fff <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022f81:	51                   	push   ecx
c0022f82:	51                   	push   ecx
c0022f83:	6a 01                	push   0x1
c0022f85:	53                   	push   ebx
c0022f86:	e8 6b 77 ff ff       	call   c001a6f6 <File::open(FileOpenMode)>
c0022f8b:	83 c4 10             	add    esp,0x10
c0022f8e:	85 c0                	test   eax,eax
c0022f90:	74 08                	je     c0022f9a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0022f92:	83 ec 0c             	sub    esp,0xc
c0022f95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022f97:	53                   	push   ebx
c0022f98:	eb 5f                	jmp    c0022ff9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0022f9a:	52                   	push   edx
c0022f9b:	8d 44 24 17          	lea    eax,[esp+0x17]
c0022f9f:	50                   	push   eax
c0022fa0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0022fa4:	50                   	push   eax
c0022fa5:	53                   	push   ebx
c0022fa6:	e8 4d 7a ff ff       	call   c001a9f8 <File::stat(unsigned long long*, bool*)>
c0022fab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0022faf:	83 c4 10             	add    esp,0x10
c0022fb2:	89 c1                	mov    ecx,eax
c0022fb4:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0022fb8:	74 31                	je     c0022feb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022fba:	83 ec 0c             	sub    esp,0xc
c0022fbd:	50                   	push   eax
c0022fbe:	e8 80 36 ff ff       	call   c0016643 <malloc>
c0022fc3:	89 c6                	mov    esi,eax
c0022fc5:	58                   	pop    eax
c0022fc6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022fc8:	8d 54 24 20          	lea    edx,[esp+0x20]
c0022fcc:	52                   	push   edx
c0022fcd:	56                   	push   esi
c0022fce:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022fd2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022fd6:	53                   	push   ebx
c0022fd7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0022fda:	83 c4 20             	add    esp,0x20
c0022fdd:	85 c0                	test   eax,eax
c0022fdf:	75 0a                	jne    c0022feb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022fe1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022fe5:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0022fe9:	74 18                	je     c0023003 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0022feb:	83 ec 0c             	sub    esp,0xc
c0022fee:	53                   	push   ebx
c0022fef:	e8 60 77 ff ff       	call   c001a754 <File::close()>
c0022ff4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022ff6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022ff9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022ffc:	83 c4 10             	add    esp,0x10
c0022fff:	31 c0                	xor    eax,eax
c0023001:	eb 3b                	jmp    c002303e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0023003:	83 ec 0c             	sub    esp,0xc
c0023006:	53                   	push   ebx
c0023007:	e8 48 77 ff ff       	call   c001a754 <File::close()>
c002300c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002300e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023011:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023014:	83 c4 0c             	add    esp,0xc
c0023017:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c002301e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0023025:	56                   	push   esi
c0023026:	e8 57 fd ff ff       	call   c0022d82 <Reg::findLineFromLoadedData(char*, char*, char*)>
c002302b:	89 34 24             	mov    DWORD PTR [esp],esi
c002302e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023032:	e8 1c 36 ff ff       	call   c0016653 <free>
c0023037:	83 c4 10             	add    esp,0x10
c002303a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002303e:	81 c4 20 01 00 00    	add    esp,0x120
c0023044:	5b                   	pop    ebx
c0023045:	5e                   	pop    esi
c0023046:	5f                   	pop    edi
c0023047:	c3                   	ret    

c0023048 <Reg::getLine(char*, char*, char*)>:
c0023048:	57                   	push   edi
c0023049:	56                   	push   esi
c002304a:	53                   	push   ebx
c002304b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002304f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0023053:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023057:	57                   	push   edi
c0023058:	56                   	push   esi
c0023059:	53                   	push   ebx
c002305a:	68 12 2e 03 c0       	push   0xc0032e12
c002305f:	e8 8f fe ff ff       	call   c0022ef3 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0023064:	83 c4 10             	add    esp,0x10
c0023067:	84 c0                	test   al,al
c0023069:	75 10                	jne    c002307b <Reg::getLine(char*, char*, char*)+0x33>
c002306b:	57                   	push   edi
c002306c:	56                   	push   esi
c002306d:	53                   	push   ebx
c002306e:	68 37 2e 03 c0       	push   0xc0032e37
c0023073:	e8 7b fe ff ff       	call   c0022ef3 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	5b                   	pop    ebx
c002307c:	5e                   	pop    esi
c002307d:	5f                   	pop    edi
c002307e:	c3                   	ret    

c002307f <Reg::readInt(char*, char*, int*)>:
c002307f:	55                   	push   ebp
c0023080:	57                   	push   edi
c0023081:	56                   	push   esi
c0023082:	53                   	push   ebx
c0023083:	81 ec f0 00 00 00    	sub    esp,0xf0
c0023089:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c002308d:	55                   	push   ebp
c002308e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0023095:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c002309c:	e8 a7 ff ff ff       	call   c0023048 <Reg::getLine(char*, char*, char*)>
c00230a1:	83 c4 10             	add    esp,0x10
c00230a4:	84 c0                	test   al,al
c00230a6:	0f 84 b6 00 00 00    	je     c0023162 <Reg::readInt(char*, char*, int*)+0xe3>
c00230ac:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c00230b1:	83 fa 2b             	cmp    edx,0x2b
c00230b4:	74 0c                	je     c00230c2 <Reg::readInt(char*, char*, int*)+0x43>
c00230b6:	83 fa 2d             	cmp    edx,0x2d
c00230b9:	75 0e                	jne    c00230c9 <Reg::readInt(char*, char*, int*)+0x4a>
c00230bb:	ba 01 00 00 00       	mov    edx,0x1
c00230c0:	eb 0b                	jmp    c00230cd <Reg::readInt(char*, char*, int*)+0x4e>
c00230c2:	ba 01 00 00 00       	mov    edx,0x1
c00230c7:	eb 02                	jmp    c00230cb <Reg::readInt(char*, char*, int*)+0x4c>
c00230c9:	31 d2                	xor    edx,edx
c00230cb:	31 c0                	xor    eax,eax
c00230cd:	be 0a 00 00 00       	mov    esi,0xa
c00230d2:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00230d7:	75 21                	jne    c00230fa <Reg::readInt(char*, char*, int*)+0x7b>
c00230d9:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c00230de:	83 f9 78             	cmp    ecx,0x78
c00230e1:	75 0a                	jne    c00230ed <Reg::readInt(char*, char*, int*)+0x6e>
c00230e3:	83 c2 02             	add    edx,0x2
c00230e6:	be 10 00 00 00       	mov    esi,0x10
c00230eb:	eb 0d                	jmp    c00230fa <Reg::readInt(char*, char*, int*)+0x7b>
c00230ed:	83 f9 62             	cmp    ecx,0x62
c00230f0:	75 08                	jne    c00230fa <Reg::readInt(char*, char*, int*)+0x7b>
c00230f2:	83 c2 02             	add    edx,0x2
c00230f5:	be 02 00 00 00       	mov    esi,0x2
c00230fa:	01 d5                	add    ebp,edx
c00230fc:	31 d2                	xor    edx,edx
c00230fe:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0023102:	83 f9 0d             	cmp    ecx,0xd
c0023105:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0023109:	0f 94 c3             	sete   bl
c002310c:	85 c9                	test   ecx,ecx
c002310e:	89 df                	mov    edi,ebx
c0023110:	0f 94 c3             	sete   bl
c0023113:	09 df                	or     edi,ebx
c0023115:	89 fb                	mov    ebx,edi
c0023117:	83 e7 01             	and    edi,0x1
c002311a:	75 35                	jne    c0023151 <Reg::readInt(char*, char*, int*)+0xd2>
c002311c:	0f af d6             	imul   edx,esi
c002311f:	83 fe 10             	cmp    esi,0x10
c0023122:	75 26                	jne    c002314a <Reg::readInt(char*, char*, int*)+0xcb>
c0023124:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023128:	83 ef 41             	sub    edi,0x41
c002312b:	89 fb                	mov    ebx,edi
c002312d:	80 fb 05             	cmp    bl,0x5
c0023130:	77 06                	ja     c0023138 <Reg::readInt(char*, char*, int*)+0xb9>
c0023132:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0023136:	eb 16                	jmp    c002314e <Reg::readInt(char*, char*, int*)+0xcf>
c0023138:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002313c:	83 eb 61             	sub    ebx,0x61
c002313f:	80 fb 05             	cmp    bl,0x5
c0023142:	77 06                	ja     c002314a <Reg::readInt(char*, char*, int*)+0xcb>
c0023144:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0023148:	eb 04                	jmp    c002314e <Reg::readInt(char*, char*, int*)+0xcf>
c002314a:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c002314e:	45                   	inc    ebp
c002314f:	eb ad                	jmp    c00230fe <Reg::readInt(char*, char*, int*)+0x7f>
c0023151:	84 c0                	test   al,al
c0023153:	74 02                	je     c0023157 <Reg::readInt(char*, char*, int*)+0xd8>
c0023155:	f7 da                	neg    edx
c0023157:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c002315e:	89 10                	mov    DWORD PTR [eax],edx
c0023160:	88 d8                	mov    al,bl
c0023162:	81 c4 ec 00 00 00    	add    esp,0xec
c0023168:	5b                   	pop    ebx
c0023169:	5e                   	pop    esi
c002316a:	5f                   	pop    edi
c002316b:	5d                   	pop    ebp
c002316c:	c3                   	ret    

c002316d <Reg::readString(char*, char*, char*, int)>:
c002316d:	57                   	push   edi
c002316e:	56                   	push   esi
c002316f:	53                   	push   ebx
c0023170:	81 ec d4 00 00 00    	sub    esp,0xd4
c0023176:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c002317d:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0023181:	57                   	push   edi
c0023182:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0023189:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0023190:	e8 b3 fe ff ff       	call   c0023048 <Reg::getLine(char*, char*, char*)>
c0023195:	83 c4 10             	add    esp,0x10
c0023198:	89 c6                	mov    esi,eax
c002319a:	84 c0                	test   al,al
c002319c:	74 44                	je     c00231e2 <Reg::readString(char*, char*, char*, int)+0x75>
c002319e:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00231a5:	31 c0                	xor    eax,eax
c00231a7:	4a                   	dec    edx
c00231a8:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00231ab:	84 c9                	test   cl,cl
c00231ad:	74 0f                	je     c00231be <Reg::readString(char*, char*, char*, int)+0x51>
c00231af:	39 c2                	cmp    edx,eax
c00231b1:	7e 0b                	jle    c00231be <Reg::readString(char*, char*, char*, int)+0x51>
c00231b3:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00231b6:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00231bb:	40                   	inc    eax
c00231bc:	eb ea                	jmp    c00231a8 <Reg::readString(char*, char*, char*, int)+0x3b>
c00231be:	83 ec 0c             	sub    esp,0xc
c00231c1:	53                   	push   ebx
c00231c2:	e8 a9 d3 fd ff       	call   c0000570 <strlen>
c00231c7:	83 c4 10             	add    esp,0x10
c00231ca:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00231cf:	75 11                	jne    c00231e2 <Reg::readString(char*, char*, char*, int)+0x75>
c00231d1:	83 ec 0c             	sub    esp,0xc
c00231d4:	53                   	push   ebx
c00231d5:	e8 96 d3 fd ff       	call   c0000570 <strlen>
c00231da:	83 c4 10             	add    esp,0x10
c00231dd:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00231e2:	81 c4 d0 00 00 00    	add    esp,0xd0
c00231e8:	89 f0                	mov    eax,esi
c00231ea:	5b                   	pop    ebx
c00231eb:	5e                   	pop    esi
c00231ec:	5f                   	pop    edi
c00231ed:	c3                   	ret    

c00231ee <Reg::readBool(char*, char*, bool*)>:
c00231ee:	83 ec 20             	sub    esp,0x20
c00231f1:	8d 44 24 10          	lea    eax,[esp+0x10]
c00231f5:	50                   	push   eax
c00231f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00231fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00231fe:	e8 7c fe ff ff       	call   c002307f <Reg::readInt(char*, char*, int*)>
c0023203:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0023208:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002320c:	0f 95 02             	setne  BYTE PTR [edx]
c002320f:	83 c4 2c             	add    esp,0x2c
c0023212:	c3                   	ret    

c0023213 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0023213:	53                   	push   ebx
c0023214:	83 ec 1c             	sub    esp,0x1c
c0023217:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c002321b:	8d 44 24 13          	lea    eax,[esp+0x13]
c002321f:	50                   	push   eax
c0023220:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023224:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023228:	e8 c1 ff ff ff       	call   c00231ee <Reg::readBool(char*, char*, bool*)>
c002322d:	83 c4 10             	add    esp,0x10
c0023230:	84 c0                	test   al,al
c0023232:	74 04                	je     c0023238 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0023234:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0023238:	88 d8                	mov    al,bl
c002323a:	83 c4 18             	add    esp,0x18
c002323d:	5b                   	pop    ebx
c002323e:	c3                   	ret    

c002323f <Reg::readIntWithDefault(char*, char*, int)>:
c002323f:	53                   	push   ebx
c0023240:	83 ec 1c             	sub    esp,0x1c
c0023243:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023247:	8d 44 24 10          	lea    eax,[esp+0x10]
c002324b:	50                   	push   eax
c002324c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023250:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023254:	e8 26 fe ff ff       	call   c002307f <Reg::readInt(char*, char*, int*)>
c0023259:	83 c4 10             	add    esp,0x10
c002325c:	84 c0                	test   al,al
c002325e:	74 04                	je     c0023264 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0023260:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0023264:	89 d8                	mov    eax,ebx
c0023266:	83 c4 18             	add    esp,0x18
c0023269:	5b                   	pop    ebx
c002326a:	c3                   	ret    

c002326b <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c002326b:	57                   	push   edi
c002326c:	56                   	push   esi
c002326d:	56                   	push   esi
c002326e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023272:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0023276:	56                   	push   esi
c0023277:	57                   	push   edi
c0023278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002327c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023280:	e8 e8 fe ff ff       	call   c002316d <Reg::readString(char*, char*, char*, int)>
c0023285:	83 c4 10             	add    esp,0x10
c0023288:	84 c0                	test   al,al
c002328a:	75 1a                	jne    c00232a6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c002328c:	51                   	push   ecx
c002328d:	56                   	push   esi
c002328e:	6a 00                	push   0x0
c0023290:	57                   	push   edi
c0023291:	e8 5a d2 fd ff       	call   c00004f0 <memset>
c0023296:	8d 4e ff             	lea    ecx,[esi-0x1]
c0023299:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002329d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002329f:	83 c4 10             	add    esp,0x10
c00232a2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00232a6:	89 f8                	mov    eax,edi
c00232a8:	5a                   	pop    edx
c00232a9:	5e                   	pop    esi
c00232aa:	5f                   	pop    edi
c00232ab:	c3                   	ret    

c00232ac <SysEject(regs*)>:
c00232ac:	83 ec 0c             	sub    esp,0xc
c00232af:	83 ca ff             	or     edx,0xffffffff
c00232b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232b6:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00232b9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00232be:	83 e9 41             	sub    ecx,0x41
c00232c1:	83 f9 19             	cmp    ecx,0x19
c00232c4:	77 18                	ja     c00232de <SysEject(regs*)+0x32>
c00232c6:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c00232cd:	85 c9                	test   ecx,ecx
c00232cf:	74 0d                	je     c00232de <SysEject(regs*)+0x32>
c00232d1:	83 ec 0c             	sub    esp,0xc
c00232d4:	51                   	push   ecx
c00232d5:	e8 00 96 ff ff       	call   c001c8da <LogicalDisk::eject()>
c00232da:	83 c4 10             	add    esp,0x10
c00232dd:	99                   	cdq    
c00232de:	83 c4 0c             	add    esp,0xc
c00232e1:	c3                   	ret    

c00232e2 <SysExit(regs*)>:
c00232e2:	83 ec 18             	sub    esp,0x18
c00232e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00232e9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00232ec:	e8 8f 29 00 00       	call   c0025c80 <terminateTask(int)>
c00232f1:	83 c8 ff             	or     eax,0xffffffff
c00232f4:	83 c4 1c             	add    esp,0x1c
c00232f7:	89 c2                	mov    edx,eax
c00232f9:	c3                   	ret    

c00232fa <SysGetCwd(regs*)>:
c00232fa:	83 ec 10             	sub    esp,0x10
c00232fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023301:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0023304:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023307:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002330c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c002330f:	e8 78 70 ff ff       	call   c001a38c <Fs::getcwd(Process*, char*, int)>
c0023314:	83 c4 1c             	add    esp,0x1c
c0023317:	99                   	cdq    
c0023318:	c3                   	ret    

c0023319 <SysGetPID(regs*)>:
c0023319:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002331e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023321:	8b 00                	mov    eax,DWORD PTR [eax]
c0023323:	99                   	cdq    
c0023324:	c3                   	ret    

c0023325 <SysGetRAMData(regs*)>:
c0023325:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c002332b:	69 05 e8 a9 03 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc003a9e8,0xc8
c0023335:	99                   	cdq    
c0023336:	f7 f9                	idiv   ecx
c0023338:	c1 e0 18             	shl    eax,0x18
c002333b:	09 c8                	or     eax,ecx
c002333d:	99                   	cdq    
c002333e:	c3                   	ret    

c002333f <SysGetVGAPtr(regs*)>:
c002333f:	55                   	push   ebp
c0023340:	57                   	push   edi
c0023341:	56                   	push   esi
c0023342:	53                   	push   ebx
c0023343:	83 ec 18             	sub    esp,0x18
c0023346:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002334a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002334d:	e8 fa 23 00 00       	call   c002574c <Thr::processFromPID(int)>
c0023352:	83 c4 10             	add    esp,0x10
c0023355:	89 c1                	mov    ecx,eax
c0023357:	b8 01 00 00 00       	mov    eax,0x1
c002335c:	85 c9                	test   ecx,ecx
c002335e:	74 57                	je     c00233b7 <SysGetVGAPtr(regs*)+0x78>
c0023360:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0023366:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c002336a:	74 0c                	je     c0023378 <SysGetVGAPtr(regs*)+0x39>
c002336c:	83 ec 0c             	sub    esp,0xc
c002336f:	55                   	push   ebp
c0023370:	e8 70 3f ff ff       	call   c00172e5 <setActiveTerminal(VgaText*)>
c0023375:	83 c4 10             	add    esp,0x10
c0023378:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002337b:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c002337e:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0023383:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023385:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0023388:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002338b:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0023391:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023394:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0023397:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c002339d:	50                   	push   eax
c002339e:	50                   	push   eax
c002339f:	68 52 2e 03 c0       	push   0xc0032e52
c00233a4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00233a7:	05 a8 0f 00 00       	add    eax,0xfa8
c00233ac:	50                   	push   eax
c00233ad:	e8 8e d2 fd ff       	call   c0000640 <strcpy>
c00233b2:	83 c4 10             	add    esp,0x10
c00233b5:	31 c0                	xor    eax,eax
c00233b7:	83 c4 0c             	add    esp,0xc
c00233ba:	31 d2                	xor    edx,edx
c00233bc:	5b                   	pop    ebx
c00233bd:	5e                   	pop    esi
c00233be:	5f                   	pop    edi
c00233bf:	5d                   	pop    ebp
c00233c0:	c3                   	ret    
c00233c1:	66 90                	xchg   ax,ax
c00233c3:	90                   	nop

c00233c4 <SysKill(regs*)>:
c00233c4:	53                   	push   ebx
c00233c5:	83 ec 08             	sub    esp,0x8
c00233c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00233cc:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00233d0:	75 16                	jne    c00233e8 <SysKill(regs*)+0x24>
c00233d2:	83 ec 0c             	sub    esp,0xc
c00233d5:	68 5c 2e 03 c0       	push   0xc0032e5c
c00233da:	e8 0b d1 ff ff       	call   c00204ea <KePanic(char const*)>
c00233df:	83 c4 10             	add    esp,0x10
c00233e2:	e9 89 00 00 00       	jmp    c0023470 <SysKill(regs*)+0xac>
c00233e7:	90                   	nop
c00233e8:	83 ec 0c             	sub    esp,0xc
c00233eb:	68 ec 01 04 c0       	push   0xc00401ec
c00233f0:	e8 f7 ba 00 00       	call   c002eeec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00233f5:	8d 76 00             	lea    esi,[esi+0x0]
c00233f8:	83 c4 10             	add    esp,0x10
c00233fb:	85 c0                	test   eax,eax
c00233fd:	74 19                	je     c0023418 <SysKill(regs*)+0x54>
c00233ff:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0023402:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0023405:	39 0a                	cmp    DWORD PTR [edx],ecx
c0023407:	74 33                	je     c002343c <SysKill(regs*)+0x78>
c0023409:	52                   	push   edx
c002340a:	52                   	push   edx
c002340b:	50                   	push   eax
c002340c:	68 ec 01 04 c0       	push   0xc00401ec
c0023411:	e8 f6 bd 00 00       	call   c002f20c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0023416:	eb e0                	jmp    c00233f8 <SysKill(regs*)+0x34>
c0023418:	83 ec 0c             	sub    esp,0xc
c002341b:	68 e0 01 04 c0       	push   0xc00401e0
c0023420:	e8 c7 ba 00 00       	call   c002eeec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0023425:	8d 76 00             	lea    esi,[esi+0x0]
c0023428:	83 c4 10             	add    esp,0x10
c002342b:	85 c0                	test   eax,eax
c002342d:	74 41                	je     c0023470 <SysKill(regs*)+0xac>
c002342f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0023432:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0023435:	39 0a                	cmp    DWORD PTR [edx],ecx
c0023437:	75 27                	jne    c0023460 <SysKill(regs*)+0x9c>
c0023439:	8d 76 00             	lea    esi,[esi+0x0]
c002343c:	51                   	push   ecx
c002343d:	51                   	push   ecx
c002343e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023441:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023446:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023449:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c002344f:	e8 4f d9 ff ff       	call   c0020da3 <KeRaiseSignal(SigHandlerBlock*, int)>
c0023454:	83 c4 10             	add    esp,0x10
c0023457:	31 c0                	xor    eax,eax
c0023459:	31 d2                	xor    edx,edx
c002345b:	eb 1b                	jmp    c0023478 <SysKill(regs*)+0xb4>
c002345d:	8d 76 00             	lea    esi,[esi+0x0]
c0023460:	52                   	push   edx
c0023461:	52                   	push   edx
c0023462:	50                   	push   eax
c0023463:	68 e0 01 04 c0       	push   0xc00401e0
c0023468:	e8 9f bd 00 00       	call   c002f20c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c002346d:	eb b9                	jmp    c0023428 <SysKill(regs*)+0x64>
c002346f:	90                   	nop
c0023470:	83 c8 ff             	or     eax,0xffffffff
c0023473:	89 c2                	mov    edx,eax
c0023475:	8d 76 00             	lea    esi,[esi+0x0]
c0023478:	83 c4 08             	add    esp,0x8
c002347b:	5b                   	pop    ebx
c002347c:	c3                   	ret    

c002347d <SysLoadDLL(regs*)>:
c002347d:	56                   	push   esi
c002347e:	53                   	push   ebx
c002347f:	31 d2                	xor    edx,edx
c0023481:	51                   	push   ecx
c0023482:	b8 01 00 00 00       	mov    eax,0x1
c0023487:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002348b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c002348f:	0f 84 8c 00 00 00    	je     c0023521 <SysLoadDLL(regs*)+0xa4>
c0023495:	83 ec 0c             	sub    esp,0xc
c0023498:	68 14 01 00 00       	push   0x114
c002349d:	e8 a1 31 ff ff       	call   c0016643 <malloc>
c00234a2:	83 c4 0c             	add    esp,0xc
c00234a5:	89 c3                	mov    ebx,eax
c00234a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00234ac:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00234af:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00234b2:	53                   	push   ebx
c00234b3:	e8 20 72 ff ff       	call   c001a6d8 <File::File(char const*, Process*)>
c00234b8:	83 c4 10             	add    esp,0x10
c00234bb:	31 d2                	xor    edx,edx
c00234bd:	b8 02 00 00 00       	mov    eax,0x2
c00234c2:	85 db                	test   ebx,ebx
c00234c4:	74 5b                	je     c0023521 <SysLoadDLL(regs*)+0xa4>
c00234c6:	83 ec 0c             	sub    esp,0xc
c00234c9:	53                   	push   ebx
c00234ca:	e8 eb 74 ff ff       	call   c001a9ba <File::exists()>
c00234cf:	83 c4 10             	add    esp,0x10
c00234d2:	84 c0                	test   al,al
c00234d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00234d6:	75 11                	jne    c00234e9 <SysLoadDLL(regs*)+0x6c>
c00234d8:	83 ec 0c             	sub    esp,0xc
c00234db:	53                   	push   ebx
c00234dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00234df:	83 c4 10             	add    esp,0x10
c00234e2:	b8 03 00 00 00       	mov    eax,0x3
c00234e7:	eb 36                	jmp    c002351f <SysLoadDLL(regs*)+0xa2>
c00234e9:	83 ec 0c             	sub    esp,0xc
c00234ec:	53                   	push   ebx
c00234ed:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00234f0:	58                   	pop    eax
c00234f1:	5a                   	pop    edx
c00234f2:	6a 00                	push   0x0
c00234f4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00234f7:	e8 81 15 00 00       	call   c0024a7d <Thr::loadDLL(char const*, bool)>
c00234fc:	83 c4 10             	add    esp,0x10
c00234ff:	89 c1                	mov    ecx,eax
c0023501:	31 d2                	xor    edx,edx
c0023503:	b8 04 00 00 00       	mov    eax,0x4
c0023508:	85 c9                	test   ecx,ecx
c002350a:	74 15                	je     c0023521 <SysLoadDLL(regs*)+0xa4>
c002350c:	53                   	push   ebx
c002350d:	53                   	push   ebx
c002350e:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0023514:	51                   	push   ecx
c0023515:	e8 b5 17 00 00       	call   c0024ccf <Thr::executeDLL(unsigned long, void*)>
c002351a:	83 c4 10             	add    esp,0x10
c002351d:	31 c0                	xor    eax,eax
c002351f:	31 d2                	xor    edx,edx
c0023521:	59                   	pop    ecx
c0023522:	5b                   	pop    ebx
c0023523:	5e                   	pop    esi
c0023524:	c3                   	ret    

c0023525 <SysRead(regs*)>:
c0023525:	57                   	push   edi
c0023526:	56                   	push   esi
c0023527:	53                   	push   ebx
c0023528:	83 ec 10             	sub    esp,0x10
c002352b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002352f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023532:	83 f8 02             	cmp    eax,0x2
c0023535:	77 10                	ja     c0023547 <SysRead(regs*)+0x22>
c0023537:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002353c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002353f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0023545:	eb 0e                	jmp    c0023555 <SysRead(regs*)+0x30>
c0023547:	83 ec 0c             	sub    esp,0xc
c002354a:	50                   	push   eax
c002354b:	e8 ef 4a ff ff       	call   c001803f <KeGetFileFromDescriptor(int)>
c0023550:	83 c4 10             	add    esp,0x10
c0023553:	89 c1                	mov    ecx,eax
c0023555:	83 c8 ff             	or     eax,0xffffffff
c0023558:	85 c9                	test   ecx,ecx
c002355a:	89 c2                	mov    edx,eax
c002355c:	74 28                	je     c0023586 <SysRead(regs*)+0x61>
c002355e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0023566:	31 ff                	xor    edi,edi
c0023568:	83 ec 0c             	sub    esp,0xc
c002356b:	8b 01                	mov    eax,DWORD PTR [ecx]
c002356d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0023571:	52                   	push   edx
c0023572:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023575:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0023578:	57                   	push   edi
c0023579:	56                   	push   esi
c002357a:	51                   	push   ecx
c002357b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c002357e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0023582:	83 c4 20             	add    esp,0x20
c0023585:	99                   	cdq    
c0023586:	83 c4 10             	add    esp,0x10
c0023589:	5b                   	pop    ebx
c002358a:	5e                   	pop    esi
c002358b:	5f                   	pop    edi
c002358c:	c3                   	ret    

c002358d <SysRegisterSignal(regs*)>:
c002358d:	83 ec 18             	sub    esp,0x18
c0023590:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023594:	6a 00                	push   0x0
c0023596:	6a 00                	push   0x0
c0023598:	ff 70 24             	push   DWORD PTR [eax+0x24]
c002359b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c002359e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00235a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00235a6:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00235ac:	e8 bc d7 ff ff       	call   c0020d6d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00235b1:	83 c4 2c             	add    esp,0x2c
c00235b4:	99                   	cdq    
c00235b5:	c3                   	ret    

c00235b6 <SysRegistryGetTypeFromPath(regs*)>:
c00235b6:	57                   	push   edi
c00235b7:	56                   	push   esi
c00235b8:	53                   	push   ebx
c00235b9:	81 ec 38 01 00 00    	sub    esp,0x138
c00235bf:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00235c6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00235c9:	68 7d 2e 03 c0       	push   0xc0032e7d
c00235ce:	e8 fe 5e ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c00235d3:	5a                   	pop    edx
c00235d4:	59                   	pop    ecx
c00235d5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00235d8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00235db:	e8 4c f6 ff ff       	call   c0022c2c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00235e0:	5f                   	pop    edi
c00235e1:	89 c6                	mov    esi,eax
c00235e3:	5a                   	pop    edx
c00235e4:	50                   	push   eax
c00235e5:	68 9d 2e 03 c0       	push   0xc0032e9d
c00235ea:	e8 e2 5e ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c00235ef:	83 c4 10             	add    esp,0x10
c00235f2:	85 f6                	test   esi,esi
c00235f4:	74 28                	je     c002361e <SysRegistryGetTypeFromPath(regs*)+0x68>
c00235f6:	50                   	push   eax
c00235f7:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00235fb:	57                   	push   edi
c00235fc:	56                   	push   esi
c00235fd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023600:	e8 0b f2 ff ff       	call   c0022810 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0023605:	83 c4 0c             	add    esp,0xc
c0023608:	89 c3                	mov    ebx,eax
c002360a:	57                   	push   edi
c002360b:	50                   	push   eax
c002360c:	68 a5 2e 03 c0       	push   0xc0032ea5
c0023611:	e8 bb 5e ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0023616:	89 d8                	mov    eax,ebx
c0023618:	83 c4 10             	add    esp,0x10
c002361b:	99                   	cdq    
c002361c:	eb 05                	jmp    c0023623 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c002361e:	83 c8 ff             	or     eax,0xffffffff
c0023621:	89 c2                	mov    edx,eax
c0023623:	81 c4 30 01 00 00    	add    esp,0x130
c0023629:	5b                   	pop    ebx
c002362a:	5e                   	pop    esi
c002362b:	5f                   	pop    edi
c002362c:	c3                   	ret    

c002362d <SysRegistryReadExtent(regs*)>:
c002362d:	83 ec 1c             	sub    esp,0x1c
c0023630:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0023634:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0023637:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c002363a:	85 c0                	test   eax,eax
c002363c:	79 1f                	jns    c002365d <SysRegistryReadExtent(regs*)+0x30>
c002363e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023643:	52                   	push   edx
c0023644:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0023648:	52                   	push   edx
c0023649:	50                   	push   eax
c002364a:	51                   	push   ecx
c002364b:	e8 b2 f0 ff ff       	call   c0022702 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0023650:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023654:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023658:	83 c4 10             	add    esp,0x10
c002365b:	eb 14                	jmp    c0023671 <SysRegistryReadExtent(regs*)+0x44>
c002365d:	83 ec 04             	sub    esp,0x4
c0023660:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0023663:	50                   	push   eax
c0023664:	51                   	push   ecx
c0023665:	e8 32 eb ff ff       	call   c002219c <CmGetString(Reghive_Tag*, int, char*)>
c002366a:	83 c4 10             	add    esp,0x10
c002366d:	31 c0                	xor    eax,eax
c002366f:	31 d2                	xor    edx,edx
c0023671:	83 c4 1c             	add    esp,0x1c
c0023674:	c3                   	ret    

c0023675 <SysRegistryPathToExtentLookup(regs*)>:
c0023675:	53                   	push   ebx
c0023676:	83 ec 10             	sub    esp,0x10
c0023679:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002367d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023680:	68 bb 2e 03 c0       	push   0xc0032ebb
c0023685:	e8 47 5e ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c002368a:	58                   	pop    eax
c002368b:	5a                   	pop    edx
c002368c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c002368f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023692:	e8 95 f5 ff ff       	call   c0022c2c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0023697:	83 c4 18             	add    esp,0x18
c002369a:	99                   	cdq    
c002369b:	5b                   	pop    ebx
c002369c:	c3                   	ret    

c002369d <SysRegistryEnterDirectory(regs*)>:
c002369d:	53                   	push   ebx
c002369e:	83 ec 10             	sub    esp,0x10
c00236a1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00236a5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00236a8:	68 de 2e 03 c0       	push   0xc0032ede
c00236ad:	e8 1f 5e ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c00236b2:	58                   	pop    eax
c00236b3:	5a                   	pop    edx
c00236b4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00236b7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00236ba:	e8 54 eb ff ff       	call   c0022213 <CmEnterDirectory(Reghive_Tag*, int)>
c00236bf:	83 c4 18             	add    esp,0x18
c00236c2:	99                   	cdq    
c00236c3:	5b                   	pop    ebx
c00236c4:	c3                   	ret    

c00236c5 <SysRegistryGetNext(regs*)>:
c00236c5:	53                   	push   ebx
c00236c6:	83 ec 10             	sub    esp,0x10
c00236c9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00236cd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00236d0:	68 fc 2e 03 c0       	push   0xc0032efc
c00236d5:	e8 f7 5d ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c00236da:	58                   	pop    eax
c00236db:	5a                   	pop    edx
c00236dc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00236df:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00236e2:	e8 6b eb ff ff       	call   c0022252 <CmGetNext(Reghive_Tag*, int)>
c00236e7:	83 c4 18             	add    esp,0x18
c00236ea:	99                   	cdq    
c00236eb:	5b                   	pop    ebx
c00236ec:	c3                   	ret    

c00236ed <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00236ed:	57                   	push   edi
c00236ee:	56                   	push   esi
c00236ef:	53                   	push   ebx
c00236f0:	81 ec 34 01 00 00    	sub    esp,0x134
c00236f6:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00236fd:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0023701:	57                   	push   edi
c0023702:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0023705:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023708:	e8 03 f1 ff ff       	call   c0022810 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c002370d:	89 c3                	mov    ebx,eax
c002370f:	58                   	pop    eax
c0023710:	5a                   	pop    edx
c0023711:	57                   	push   edi
c0023712:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0023715:	e8 26 cf fd ff       	call   c0000640 <strcpy>
c002371a:	89 d8                	mov    eax,ebx
c002371c:	81 c4 40 01 00 00    	add    esp,0x140
c0023722:	99                   	cdq    
c0023723:	5b                   	pop    ebx
c0023724:	5e                   	pop    esi
c0023725:	5f                   	pop    edi
c0023726:	c3                   	ret    

c0023727 <SysRegistryOpen(regs*)>:
c0023727:	83 ec 18             	sub    esp,0x18
c002372a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002372e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0023731:	e8 f6 e8 ff ff       	call   c002202c <CmOpen(char const*)>
c0023736:	83 c4 1c             	add    esp,0x1c
c0023739:	99                   	cdq    
c002373a:	c3                   	ret    

c002373b <SysRegistryClose(regs*)>:
c002373b:	83 ec 18             	sub    esp,0x18
c002373e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023742:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023745:	e8 00 ea ff ff       	call   c002214a <CmClose(Reghive_Tag*)>
c002374a:	31 c0                	xor    eax,eax
c002374c:	31 d2                	xor    edx,edx
c002374e:	83 c4 1c             	add    esp,0x1c
c0023751:	c3                   	ret    

c0023752 <SysSbrk(regs*)>:
c0023752:	56                   	push   esi
c0023753:	53                   	push   ebx
c0023754:	50                   	push   eax
c0023755:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002375a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002375e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023761:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0023764:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c002376a:	85 db                	test   ebx,ebx
c002376c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c002376f:	74 02                	je     c0023773 <SysSbrk(regs*)+0x21>
c0023771:	79 06                	jns    c0023779 <SysSbrk(regs*)+0x27>
c0023773:	89 f0                	mov    eax,esi
c0023775:	31 d2                	xor    edx,edx
c0023777:	eb 2a                	jmp    c00237a3 <SysSbrk(regs*)+0x51>
c0023779:	83 c8 ff             	or     eax,0xffffffff
c002377c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0023782:	89 c2                	mov    edx,eax
c0023784:	77 1d                	ja     c00237a3 <SysSbrk(regs*)+0x51>
c0023786:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c002378c:	50                   	push   eax
c002378d:	c1 ea 0c             	shr    edx,0xc
c0023790:	68 07 0c 00 00       	push   0xc07
c0023795:	52                   	push   edx
c0023796:	51                   	push   ecx
c0023797:	e8 14 52 ff ff       	call   c00189b0 <VAS::allocatePages(int, int)>
c002379c:	89 f0                	mov    eax,esi
c002379e:	31 d2                	xor    edx,edx
c00237a0:	83 c4 10             	add    esp,0x10
c00237a3:	59                   	pop    ecx
c00237a4:	5b                   	pop    ebx
c00237a5:	5e                   	pop    esi
c00237a6:	c3                   	ret    

c00237a7 <SysSetCwd(regs*)>:
c00237a7:	83 ec 14             	sub    esp,0x14
c00237aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00237ae:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00237b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00237b6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00237b9:	e8 9b 72 ff ff       	call   c001aa59 <Fs::setcwd(Process*, char*)>
c00237be:	83 c4 1c             	add    esp,0x1c
c00237c1:	99                   	cdq    
c00237c2:	c3                   	ret    

c00237c3 <SysSetTime(regs*)>:
c00237c3:	55                   	push   ebp
c00237c4:	31 c9                	xor    ecx,ecx
c00237c6:	57                   	push   edi
c00237c7:	bd 0c 00 00 00       	mov    ebp,0xc
c00237cc:	56                   	push   esi
c00237cd:	53                   	push   ebx
c00237ce:	31 db                	xor    ebx,ebx
c00237d0:	83 ec 10             	sub    esp,0x10
c00237d3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00237d7:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00237da:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00237dd:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00237e0:	89 c2                	mov    edx,eax
c00237e2:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00237e8:	83 e2 1f             	and    edx,0x1f
c00237eb:	c1 e7 10             	shl    edi,0x10
c00237ee:	42                   	inc    edx
c00237ef:	c1 e8 05             	shr    eax,0x5
c00237f2:	88 d1                	mov    cl,dl
c00237f4:	31 d2                	xor    edx,edx
c00237f6:	f7 f5                	div    ebp
c00237f8:	89 dd                	mov    ebp,ebx
c00237fa:	88 d5                	mov    ch,dl
c00237fc:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0023802:	0f b7 c1             	movzx  eax,cx
c0023805:	31 d2                	xor    edx,edx
c0023807:	09 f8                	or     eax,edi
c0023809:	bf 3c 00 00 00       	mov    edi,0x3c
c002380e:	89 c1                	mov    ecx,eax
c0023810:	89 f0                	mov    eax,esi
c0023812:	f7 f7                	div    edi
c0023814:	c1 e2 10             	shl    edx,0x10
c0023817:	09 d5                	or     ebp,edx
c0023819:	31 d2                	xor    edx,edx
c002381b:	89 eb                	mov    ebx,ebp
c002381d:	f7 f7                	div    edi
c002381f:	bf 10 0e 00 00       	mov    edi,0xe10
c0023824:	88 d7                	mov    bh,dl
c0023826:	89 f0                	mov    eax,esi
c0023828:	31 d2                	xor    edx,edx
c002382a:	f7 f7                	div    edi
c002382c:	bf 18 00 00 00       	mov    edi,0x18
c0023831:	31 d2                	xor    edx,edx
c0023833:	f7 f7                	div    edi
c0023835:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002383a:	88 d3                	mov    bl,dl
c002383c:	53                   	push   ebx
c002383d:	51                   	push   ecx
c002383e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0023844:	e8 1d 7a ff ff       	call   c001b266 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0023849:	83 c4 1c             	add    esp,0x1c
c002384c:	83 f0 01             	xor    eax,0x1
c002384f:	5b                   	pop    ebx
c0023850:	0f b6 c0             	movzx  eax,al
c0023853:	5e                   	pop    esi
c0023854:	31 d2                	xor    edx,edx
c0023856:	5f                   	pop    edi
c0023857:	5d                   	pop    ebp
c0023858:	c3                   	ret    

c0023859 <SysSymlink(regs*)>:
c0023859:	56                   	push   esi
c002385a:	83 c8 ff             	or     eax,0xffffffff
c002385d:	53                   	push   ebx
c002385e:	89 c2                	mov    edx,eax
c0023860:	81 ec 34 02 00 00    	sub    esp,0x234
c0023866:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c002386d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0023871:	74 50                	je     c00238c3 <SysSymlink(regs*)+0x6a>
c0023873:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0023876:	85 c9                	test   ecx,ecx
c0023878:	74 49                	je     c00238c3 <SysSymlink(regs*)+0x6a>
c002387a:	6a 01                	push   0x1
c002387c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023881:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023884:	05 0c 01 00 00       	add    eax,0x10c
c0023889:	50                   	push   eax
c002388a:	51                   	push   ecx
c002388b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c002388f:	56                   	push   esi
c0023890:	e8 4b 6b ff ff       	call   c001a3e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023895:	6a 01                	push   0x1
c0023897:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002389c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002389f:	05 0c 01 00 00       	add    eax,0x10c
c00238a4:	50                   	push   eax
c00238a5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00238a8:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00238af:	53                   	push   ebx
c00238b0:	e8 2b 6b ff ff       	call   c001a3e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00238b5:	83 c4 18             	add    esp,0x18
c00238b8:	56                   	push   esi
c00238b9:	53                   	push   ebx
c00238ba:	e8 30 67 ff ff       	call   c0019fef <KeCreateSymlink(char const*, char const*)>
c00238bf:	83 c4 10             	add    esp,0x10
c00238c2:	99                   	cdq    
c00238c3:	81 c4 34 02 00 00    	add    esp,0x234
c00238c9:	5b                   	pop    ebx
c00238ca:	5e                   	pop    esi
c00238cb:	c3                   	ret    

c00238cc <SysTimezone(regs*)>:
c00238cc:	53                   	push   ebx
c00238cd:	83 ec 08             	sub    esp,0x8
c00238d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00238d4:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00238d8:	75 17                	jne    c00238f1 <SysTimezone(regs*)+0x25>
c00238da:	83 ec 0c             	sub    esp,0xc
c00238dd:	68 13 2f 03 c0       	push   0xc0032f13
c00238e2:	e8 ea 5b ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c00238e7:	83 c8 ff             	or     eax,0xffffffff
c00238ea:	83 c4 10             	add    esp,0x10
c00238ed:	89 c2                	mov    edx,eax
c00238ef:	eb 20                	jmp    c0023911 <SysTimezone(regs*)+0x45>
c00238f1:	83 ec 0c             	sub    esp,0xc
c00238f4:	68 28 2f 03 c0       	push   0xc0032f28
c00238f9:	e8 d3 5b ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c00238fe:	58                   	pop    eax
c00238ff:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023902:	e8 c9 76 ff ff       	call   c001afd0 <User::loadClockSettings(int)>
c0023907:	83 c4 10             	add    esp,0x10
c002390a:	b8 01 00 00 00       	mov    eax,0x1
c002390f:	31 d2                	xor    edx,edx
c0023911:	83 c4 08             	add    esp,0x8
c0023914:	5b                   	pop    ebx
c0023915:	c3                   	ret    

c0023916 <SysTruncate(regs*)>:
c0023916:	55                   	push   ebp
c0023917:	57                   	push   edi
c0023918:	31 ff                	xor    edi,edi
c002391a:	56                   	push   esi
c002391b:	53                   	push   ebx
c002391c:	83 ec 0c             	sub    esp,0xc
c002391f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023923:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0023926:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0023929:	89 ce                	mov    esi,ecx
c002392b:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c002392f:	0f 84 9a 00 00 00    	je     c00239cf <SysTruncate(regs*)+0xb9>
c0023935:	83 ec 0c             	sub    esp,0xc
c0023938:	68 14 01 00 00       	push   0x114
c002393d:	e8 01 2d ff ff       	call   c0016643 <malloc>
c0023942:	83 c4 0c             	add    esp,0xc
c0023945:	89 c3                	mov    ebx,eax
c0023947:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002394c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c002394f:	55                   	push   ebp
c0023950:	53                   	push   ebx
c0023951:	e8 82 6d ff ff       	call   c001a6d8 <File::File(char const*, Process*)>
c0023956:	83 c4 10             	add    esp,0x10
c0023959:	31 d2                	xor    edx,edx
c002395b:	b8 03 00 00 00       	mov    eax,0x3
c0023960:	85 db                	test   ebx,ebx
c0023962:	0f 84 a2 00 00 00    	je     c0023a0a <SysTruncate(regs*)+0xf4>
c0023968:	51                   	push   ecx
c0023969:	51                   	push   ecx
c002396a:	6a 02                	push   0x2
c002396c:	53                   	push   ebx
c002396d:	e8 84 6d ff ff       	call   c001a6f6 <File::open(FileOpenMode)>
c0023972:	83 c4 10             	add    esp,0x10
c0023975:	85 c0                	test   eax,eax
c0023977:	74 13                	je     c002398c <SysTruncate(regs*)+0x76>
c0023979:	83 ec 0c             	sub    esp,0xc
c002397c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002397e:	53                   	push   ebx
c002397f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023982:	83 c4 10             	add    esp,0x10
c0023985:	b8 04 00 00 00       	mov    eax,0x4
c002398a:	eb 7c                	jmp    c0023a08 <SysTruncate(regs*)+0xf2>
c002398c:	52                   	push   edx
c002398d:	57                   	push   edi
c002398e:	56                   	push   esi
c002398f:	53                   	push   ebx
c0023990:	e8 75 6e ff ff       	call   c001a80a <File::truncate(unsigned long long)>
c0023995:	83 c4 10             	add    esp,0x10
c0023998:	85 c0                	test   eax,eax
c002399a:	74 1b                	je     c00239b7 <SysTruncate(regs*)+0xa1>
c002399c:	83 ec 0c             	sub    esp,0xc
c002399f:	53                   	push   ebx
c00239a0:	e8 af 6d ff ff       	call   c001a754 <File::close()>
c00239a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00239a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00239aa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00239ad:	83 c4 10             	add    esp,0x10
c00239b0:	b8 05 00 00 00       	mov    eax,0x5
c00239b5:	eb 51                	jmp    c0023a08 <SysTruncate(regs*)+0xf2>
c00239b7:	83 ec 0c             	sub    esp,0xc
c00239ba:	53                   	push   ebx
c00239bb:	e8 94 6d ff ff       	call   c001a754 <File::close()>
c00239c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00239c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00239c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00239c8:	83 c4 10             	add    esp,0x10
c00239cb:	31 c0                	xor    eax,eax
c00239cd:	eb 39                	jmp    c0023a08 <SysTruncate(regs*)+0xf2>
c00239cf:	31 d2                	xor    edx,edx
c00239d1:	b8 01 00 00 00       	mov    eax,0x1
c00239d6:	83 fd 02             	cmp    ebp,0x2
c00239d9:	7e 2f                	jle    c0023a0a <SysTruncate(regs*)+0xf4>
c00239db:	83 ec 0c             	sub    esp,0xc
c00239de:	51                   	push   ecx
c00239df:	e8 5b 46 ff ff       	call   c001803f <KeGetFileFromDescriptor(int)>
c00239e4:	83 c4 10             	add    esp,0x10
c00239e7:	89 c1                	mov    ecx,eax
c00239e9:	31 d2                	xor    edx,edx
c00239eb:	b8 02 00 00 00       	mov    eax,0x2
c00239f0:	85 c9                	test   ecx,ecx
c00239f2:	74 16                	je     c0023a0a <SysTruncate(regs*)+0xf4>
c00239f4:	50                   	push   eax
c00239f5:	57                   	push   edi
c00239f6:	56                   	push   esi
c00239f7:	51                   	push   ecx
c00239f8:	e8 0d 6e ff ff       	call   c001a80a <File::truncate(unsigned long long)>
c00239fd:	83 c4 10             	add    esp,0x10
c0023a00:	85 c0                	test   eax,eax
c0023a02:	0f 95 c0             	setne  al
c0023a05:	0f b6 c0             	movzx  eax,al
c0023a08:	31 d2                	xor    edx,edx
c0023a0a:	83 c4 0c             	add    esp,0xc
c0023a0d:	5b                   	pop    ebx
c0023a0e:	5e                   	pop    esi
c0023a0f:	5f                   	pop    edi
c0023a10:	5d                   	pop    ebp
c0023a11:	c3                   	ret    

c0023a12 <SysWrite(regs*)>:
c0023a12:	57                   	push   edi
c0023a13:	56                   	push   esi
c0023a14:	53                   	push   ebx
c0023a15:	83 ec 10             	sub    esp,0x10
c0023a18:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023a1c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023a1f:	83 f8 02             	cmp    eax,0x2
c0023a22:	77 10                	ja     c0023a34 <SysWrite(regs*)+0x22>
c0023a24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023a29:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023a2c:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0023a32:	eb 0e                	jmp    c0023a42 <SysWrite(regs*)+0x30>
c0023a34:	83 ec 0c             	sub    esp,0xc
c0023a37:	50                   	push   eax
c0023a38:	e8 02 46 ff ff       	call   c001803f <KeGetFileFromDescriptor(int)>
c0023a3d:	83 c4 10             	add    esp,0x10
c0023a40:	89 c1                	mov    ecx,eax
c0023a42:	83 c8 ff             	or     eax,0xffffffff
c0023a45:	85 c9                	test   ecx,ecx
c0023a47:	89 c2                	mov    edx,eax
c0023a49:	74 28                	je     c0023a73 <SysWrite(regs*)+0x61>
c0023a4b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0023a53:	31 ff                	xor    edi,edi
c0023a55:	83 ec 0c             	sub    esp,0xc
c0023a58:	8b 01                	mov    eax,DWORD PTR [ecx]
c0023a5a:	8d 54 24 18          	lea    edx,[esp+0x18]
c0023a5e:	52                   	push   edx
c0023a5f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023a62:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0023a65:	57                   	push   edi
c0023a66:	56                   	push   esi
c0023a67:	51                   	push   ecx
c0023a68:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0023a6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0023a6f:	83 c4 20             	add    esp,0x20
c0023a72:	99                   	cdq    
c0023a73:	83 c4 10             	add    esp,0x10
c0023a76:	5b                   	pop    ebx
c0023a77:	5e                   	pop    esi
c0023a78:	5f                   	pop    edi
c0023a79:	c3                   	ret    

c0023a7a <SysWsbe(regs*)>:
c0023a7a:	57                   	push   edi
c0023a7b:	b9 0b 00 00 00       	mov    ecx,0xb
c0023a80:	56                   	push   esi
c0023a81:	be 67 2f 03 c0       	mov    esi,0xc0032f67
c0023a86:	53                   	push   ebx
c0023a87:	83 ec 30             	sub    esp,0x30
c0023a8a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023a8e:	fc                   	cld    
c0023a8f:	83 ec 0c             	sub    esp,0xc
c0023a92:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023a94:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023a98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023a9d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023aa0:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0023aa6:	8b 06                	mov    eax,DWORD PTR [esi]
c0023aa8:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0023aab:	57                   	push   edi
c0023aac:	e8 bf ca fd ff       	call   c0000570 <strlen>
c0023ab1:	5a                   	pop    edx
c0023ab2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0023ab6:	52                   	push   edx
c0023ab7:	31 d2                	xor    edx,edx
c0023ab9:	57                   	push   edi
c0023aba:	52                   	push   edx
c0023abb:	50                   	push   eax
c0023abc:	56                   	push   esi
c0023abd:	ff d3                	call   ebx
c0023abf:	83 c4 14             	add    esp,0x14
c0023ac2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0023ac6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0023ac9:	e8 b2 21 00 00       	call   c0025c80 <terminateTask(int)>
c0023ace:	83 c4 40             	add    esp,0x40
c0023ad1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0023ad6:	5b                   	pop    ebx
c0023ad7:	31 d2                	xor    edx,edx
c0023ad9:	5e                   	pop    esi
c0023ada:	5f                   	pop    edi
c0023adb:	c3                   	ret    

c0023adc <SysYield(regs*)>:
c0023adc:	83 ec 0c             	sub    esp,0xc
c0023adf:	fa                   	cli    
c0023ae0:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023ae6:	e8 15 1a 00 00       	call   c0025500 <schedule()>
c0023aeb:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023af0:	48                   	dec    eax
c0023af1:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023af6:	75 01                	jne    c0023af9 <SysYield(regs*)+0x1d>
c0023af8:	fb                   	sti    
c0023af9:	31 c0                	xor    eax,eax
c0023afb:	31 d2                	xor    edx,edx
c0023afd:	83 c4 0c             	add    esp,0xc
c0023b00:	c3                   	ret    

c0023b01 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0023b01:	55                   	push   ebp
c0023b02:	57                   	push   edi
c0023b03:	56                   	push   esi
c0023b04:	53                   	push   ebx
c0023b05:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0023b0b:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0023b13:	0f 95 c0             	setne  al
c0023b16:	31 d2                	xor    edx,edx
c0023b18:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0023b20:	0f 94 c2             	sete   dl
c0023b23:	85 c2                	test   edx,eax
c0023b25:	74 34                	je     c0023b5b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0023b27:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0023b32:	74 27                	je     c0023b5b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0023b34:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0023b3b:	05 00 10 00 00       	add    eax,0x1000
c0023b40:	89 c1                	mov    ecx,eax
c0023b42:	25 00 f0 ff ff       	and    eax,0xfffff000
c0023b47:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0023b4d:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0023b54:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0023b5b:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0023b62:	83 ec 0c             	sub    esp,0xc
c0023b65:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023b6b:	6a 01                	push   0x1
c0023b6d:	e8 27 46 ff ff       	call   c0018199 <Virt::allocateKernelVirtualPages(int)>
c0023b72:	83 c4 10             	add    esp,0x10
c0023b75:	89 c3                	mov    ebx,eax
c0023b77:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023b7d:	0f 86 25 01 00 00    	jbe    c0023ca8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0023b83:	c1 ee 0c             	shr    esi,0xc
c0023b86:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023b8d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0023b91:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023b99:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0023ba0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023ba4:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0023bab:	29 ef                	sub    edi,ebp
c0023bad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0023bb1:	0f 83 f8 00 00 00    	jae    c0023caf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0023bb7:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0023bbd:	76 05                	jbe    c0023bc4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0023bbf:	bf 00 10 00 00       	mov    edi,0x1000
c0023bc4:	83 ec 0c             	sub    esp,0xc
c0023bc7:	31 d2                	xor    edx,edx
c0023bc9:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023bd0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023bd2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0023bd6:	50                   	push   eax
c0023bd7:	8d 74 24 30          	lea    esi,[esp+0x30]
c0023bdb:	56                   	push   esi
c0023bdc:	52                   	push   edx
c0023bdd:	57                   	push   edi
c0023bde:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0023be5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023be8:	83 c4 20             	add    esp,0x20
c0023beb:	85 c0                	test   eax,eax
c0023bed:	75 06                	jne    c0023bf5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0023bef:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0023bf3:	74 13                	je     c0023c08 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0023bf5:	83 ec 0c             	sub    esp,0xc
c0023bf8:	53                   	push   ebx
c0023bf9:	e8 b9 48 ff ff       	call   c00184b7 <Virt::freeKernelVirtualPages(unsigned long)>
c0023bfe:	83 c4 10             	add    esp,0x10
c0023c01:	31 c0                	xor    eax,eax
c0023c03:	e9 7c 01 00 00       	jmp    c0023d84 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0023c08:	fa                   	cli    
c0023c09:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023c0f:	e8 38 2d ff ff       	call   c001694c <Phys::allocatePage()>
c0023c14:	6a 07                	push   0x7
c0023c16:	89 c7                	mov    edi,eax
c0023c18:	53                   	push   ebx
c0023c19:	50                   	push   eax
c0023c1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023c1f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023c22:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023c28:	e8 7f 4c ff ff       	call   c00188ac <VAS::mapPage(unsigned long, unsigned long, int)>
c0023c2d:	83 c4 0c             	add    esp,0xc
c0023c30:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023c37:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023c3d:	6a 00                	push   0x0
c0023c3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023c44:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023c47:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023c4d:	e8 c0 4a ff ff       	call   c0018712 <VAS::mapOtherVASIn(bool, VAS*)>
c0023c52:	58                   	pop    eax
c0023c53:	5a                   	pop    edx
c0023c54:	68 07 0c 00 00       	push   0xc07
c0023c59:	55                   	push   ebp
c0023c5a:	57                   	push   edi
c0023c5b:	89 df                	mov    edi,ebx
c0023c5d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0023c64:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023c6a:	6a 00                	push   0x0
c0023c6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023c71:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023c74:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023c7a:	e8 7f 4e ff ff       	call   c0018afe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023c7f:	b9 00 10 00 00       	mov    ecx,0x1000
c0023c84:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023c86:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023c8b:	83 c4 20             	add    esp,0x20
c0023c8e:	48                   	dec    eax
c0023c8f:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023c94:	85 c0                	test   eax,eax
c0023c96:	75 01                	jne    c0023c99 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0023c98:	fb                   	sti    
c0023c99:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023c9f:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0023ca3:	e9 f1 fe ff ff       	jmp    c0023b99 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0023ca8:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023caf:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023cb6:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023cbc:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023cc2:	0f 86 ae 00 00 00    	jbe    c0023d76 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0023cc8:	fa                   	cli    
c0023cc9:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023ccf:	c1 ee 0c             	shr    esi,0xc
c0023cd2:	51                   	push   ecx
c0023cd3:	31 ff                	xor    edi,edi
c0023cd5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023cdc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023ce2:	6a 00                	push   0x0
c0023ce4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023ce9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023cec:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023cf2:	e8 1b 4a ff ff       	call   c0018712 <VAS::mapOtherVASIn(bool, VAS*)>
c0023cf7:	83 c4 10             	add    esp,0x10
c0023cfa:	e8 4d 2c ff ff       	call   c001694c <Phys::allocatePage()>
c0023cff:	47                   	inc    edi
c0023d00:	6a 07                	push   0x7
c0023d02:	53                   	push   ebx
c0023d03:	50                   	push   eax
c0023d04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023d08:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0023d0e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0023d11:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0023d17:	e8 90 4b ff ff       	call   c00188ac <VAS::mapPage(unsigned long, unsigned long, int)>
c0023d1c:	58                   	pop    eax
c0023d1d:	5a                   	pop    edx
c0023d1e:	68 07 0c 00 00       	push   0xc07
c0023d23:	55                   	push   ebp
c0023d24:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023d2a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023d2e:	50                   	push   eax
c0023d2f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0023d36:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023d3c:	6a 00                	push   0x0
c0023d3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023d43:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023d46:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023d4c:	e8 ad 4d ff ff       	call   c0018afe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023d51:	83 c4 1c             	add    esp,0x1c
c0023d54:	68 00 10 00 00       	push   0x1000
c0023d59:	6a 00                	push   0x0
c0023d5b:	53                   	push   ebx
c0023d5c:	e8 8f c7 fd ff       	call   c00004f0 <memset>
c0023d61:	83 c4 10             	add    esp,0x10
c0023d64:	39 fe                	cmp    esi,edi
c0023d66:	77 92                	ja     c0023cfa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0023d68:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023d6d:	48                   	dec    eax
c0023d6e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023d73:	75 01                	jne    c0023d76 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0023d75:	fb                   	sti    
c0023d76:	83 ec 0c             	sub    esp,0xc
c0023d79:	53                   	push   ebx
c0023d7a:	e8 38 47 ff ff       	call   c00184b7 <Virt::freeKernelVirtualPages(unsigned long)>
c0023d7f:	83 c4 10             	add    esp,0x10
c0023d82:	b0 01                	mov    al,0x1
c0023d84:	81 c4 2c 10 00 00    	add    esp,0x102c
c0023d8a:	5b                   	pop    ebx
c0023d8b:	5e                   	pop    esi
c0023d8c:	5f                   	pop    edi
c0023d8d:	5d                   	pop    ebp
c0023d8e:	c3                   	ret    

c0023d8f <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0023d8f:	55                   	push   ebp
c0023d90:	57                   	push   edi
c0023d91:	56                   	push   esi
c0023d92:	53                   	push   ebx
c0023d93:	83 ec 48             	sub    esp,0x48
c0023d96:	68 14 01 00 00       	push   0x114
c0023d9b:	e8 a3 28 ff ff       	call   c0016643 <malloc>
c0023da0:	83 c4 0c             	add    esp,0xc
c0023da3:	89 c6                	mov    esi,eax
c0023da5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0023da9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0023dad:	50                   	push   eax
c0023dae:	e8 25 69 ff ff       	call   c001a6d8 <File::File(char const*, Process*)>
c0023db3:	58                   	pop    eax
c0023db4:	5a                   	pop    edx
c0023db5:	6a 01                	push   0x1
c0023db7:	56                   	push   esi
c0023db8:	e8 39 69 ff ff       	call   c001a6f6 <File::open(FileOpenMode)>
c0023dbd:	83 c4 10             	add    esp,0x10
c0023dc0:	85 c0                	test   eax,eax
c0023dc2:	0f 85 43 01 00 00    	jne    c0023f0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023dc8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0023dd0:	83 ec 0c             	sub    esp,0xc
c0023dd3:	6a 34                	push   0x34
c0023dd5:	e8 69 28 ff ff       	call   c0016643 <malloc>
c0023dda:	89 c3                	mov    ebx,eax
c0023ddc:	58                   	pop    eax
c0023ddd:	8b 06                	mov    eax,DWORD PTR [esi]
c0023ddf:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0023de3:	57                   	push   edi
c0023de4:	53                   	push   ebx
c0023de5:	6a 00                	push   0x0
c0023de7:	6a 34                	push   0x34
c0023de9:	56                   	push   esi
c0023dea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023ded:	83 c4 20             	add    esp,0x20
c0023df0:	85 c0                	test   eax,eax
c0023df2:	0f 85 13 01 00 00    	jne    c0023f0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023df8:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0023dfe:	0f 85 07 01 00 00    	jne    c0023f0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023e04:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023e07:	85 c0                	test   eax,eax
c0023e09:	0f 84 fc 00 00 00    	je     c0023f0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023e0f:	31 d2                	xor    edx,edx
c0023e11:	55                   	push   ebp
c0023e12:	52                   	push   edx
c0023e13:	50                   	push   eax
c0023e14:	56                   	push   esi
c0023e15:	e8 9a 69 ff ff       	call   c001a7b4 <File::seek(unsigned long long)>
c0023e1a:	83 c4 10             	add    esp,0x10
c0023e1d:	85 c0                	test   eax,eax
c0023e1f:	0f 85 e6 00 00 00    	jne    c0023f0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023e25:	83 ec 0c             	sub    esp,0xc
c0023e28:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0023e2b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023e2f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0023e33:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023e37:	0f af c2             	imul   eax,edx
c0023e3a:	50                   	push   eax
c0023e3b:	e8 03 28 ff ff       	call   c0016643 <malloc>
c0023e40:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0023e42:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023e46:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023e49:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023e4d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023e51:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023e55:	0f af c2             	imul   eax,edx
c0023e58:	99                   	cdq    
c0023e59:	52                   	push   edx
c0023e5a:	50                   	push   eax
c0023e5b:	56                   	push   esi
c0023e5c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023e5f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0023e62:	83 c4 20             	add    esp,0x20
c0023e65:	85 c0                	test   eax,eax
c0023e67:	0f 84 9e 00 00 00    	je     c0023f0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023e6d:	31 d2                	xor    edx,edx
c0023e6f:	51                   	push   ecx
c0023e70:	52                   	push   edx
c0023e71:	50                   	push   eax
c0023e72:	56                   	push   esi
c0023e73:	e8 3c 69 ff ff       	call   c001a7b4 <File::seek(unsigned long long)>
c0023e78:	83 c4 10             	add    esp,0x10
c0023e7b:	85 c0                	test   eax,eax
c0023e7d:	0f 85 88 00 00 00    	jne    c0023f0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023e83:	83 ec 0c             	sub    esp,0xc
c0023e86:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023e8a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023e8e:	31 ed                	xor    ebp,ebp
c0023e90:	0f af c2             	imul   eax,edx
c0023e93:	50                   	push   eax
c0023e94:	e8 aa 27 ff ff       	call   c0016643 <malloc>
c0023e99:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0023e9b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e9f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023ea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ea6:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023eaa:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023eae:	0f af c2             	imul   eax,edx
c0023eb1:	99                   	cdq    
c0023eb2:	52                   	push   edx
c0023eb3:	50                   	push   eax
c0023eb4:	56                   	push   esi
c0023eb5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023eb8:	83 c4 20             	add    esp,0x20
c0023ebb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023ec3:	0f b7 fd             	movzx  edi,bp
c0023ec6:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0023eca:	73 7d                	jae    c0023f49 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0023ecc:	c1 e7 05             	shl    edi,0x5
c0023ecf:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0023ed3:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0023ed6:	75 6b                	jne    c0023f43 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0023ed8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0023edb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023edf:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0023ee2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023ee6:	52                   	push   edx
c0023ee7:	31 d2                	xor    edx,edx
c0023ee9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0023eec:	52                   	push   edx
c0023eed:	50                   	push   eax
c0023eee:	56                   	push   esi
c0023eef:	e8 c0 68 ff ff       	call   c001a7b4 <File::seek(unsigned long long)>
c0023ef4:	83 c4 10             	add    esp,0x10
c0023ef7:	85 c0                	test   eax,eax
c0023ef9:	74 17                	je     c0023f12 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0023efb:	83 ec 0c             	sub    esp,0xc
c0023efe:	68 93 2f 03 c0       	push   0xc0032f93
c0023f03:	e8 c9 55 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0023f08:	83 c4 10             	add    esp,0x10
c0023f0b:	31 c0                	xor    eax,eax
c0023f0d:	e9 87 00 00 00       	jmp    c0023f99 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0023f12:	83 ec 0c             	sub    esp,0xc
c0023f15:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0023f18:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0023f1b:	50                   	push   eax
c0023f1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0023f20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023f24:	56                   	push   esi
c0023f25:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0023f29:	e8 d3 fb ff ff       	call   c0023b01 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0023f2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0023f32:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0023f36:	83 c4 20             	add    esp,0x20
c0023f39:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0023f3d:	73 04                	jae    c0023f43 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0023f3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023f43:	45                   	inc    ebp
c0023f44:	e9 7a ff ff ff       	jmp    c0023ec3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0023f49:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0023f4d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023f51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023f55:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0023f5b:	83 ec 0c             	sub    esp,0xc
c0023f5e:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0023f64:	25 00 f0 ff ff       	and    eax,0xfffff000
c0023f69:	05 00 10 00 00       	add    eax,0x1000
c0023f6e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0023f71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023f75:	e8 d9 26 ff ff       	call   c0016653 <free>
c0023f7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f7d:	e8 d1 26 ff ff       	call   c0016653 <free>
c0023f82:	58                   	pop    eax
c0023f83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023f87:	e8 c7 26 ff ff       	call   c0016653 <free>
c0023f8c:	89 34 24             	mov    DWORD PTR [esp],esi
c0023f8f:	e8 c0 67 ff ff       	call   c001a754 <File::close()>
c0023f94:	83 c4 10             	add    esp,0x10
c0023f97:	b0 01                	mov    al,0x1
c0023f99:	83 c4 3c             	add    esp,0x3c
c0023f9c:	5b                   	pop    ebx
c0023f9d:	5e                   	pop    esi
c0023f9e:	5f                   	pop    edi
c0023f9f:	5d                   	pop    ebp
c0023fa0:	c3                   	ret    

c0023fa1 <Thr::runtimeReferenceHelper()>:
c0023fa1:	83 ec 18             	sub    esp,0x18
c0023fa4:	68 9b 2f 03 c0       	push   0xc0032f9b
c0023fa9:	e8 23 55 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0023fae:	fa                   	cli    
c0023faf:	83 c4 10             	add    esp,0x10
c0023fb2:	eb fe                	jmp    c0023fb2 <Thr::runtimeReferenceHelper()+0x11>

c0023fb4 <Thr::getAddressOfKernelSymbol(char const*)>:
c0023fb4:	57                   	push   edi
c0023fb5:	56                   	push   esi
c0023fb6:	53                   	push   ebx
c0023fb7:	31 db                	xor    ebx,ebx
c0023fb9:	39 1d a0 01 04 c0    	cmp    DWORD PTR ds:0xc00401a0,ebx
c0023fbf:	7e 3c                	jle    c0023ffd <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0023fc1:	8b 34 9d 20 01 04 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffbfee0]
c0023fc8:	31 ff                	xor    edi,edi
c0023fca:	39 3c 9d 20 00 04 c0 	cmp    DWORD PTR [ebx*4-0x3ffbffe0],edi
c0023fd1:	7e 27                	jle    c0023ffa <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0023fd3:	50                   	push   eax
c0023fd4:	50                   	push   eax
c0023fd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023fd9:	8b 06                	mov    eax,DWORD PTR [esi]
c0023fdb:	03 04 9d a0 00 04 c0 	add    eax,DWORD PTR [ebx*4-0x3ffbff60]
c0023fe2:	50                   	push   eax
c0023fe3:	e8 68 c7 fd ff       	call   c0000750 <strcmp>
c0023fe8:	83 c4 10             	add    esp,0x10
c0023feb:	85 c0                	test   eax,eax
c0023fed:	75 05                	jne    c0023ff4 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0023fef:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0023ff2:	eb 0b                	jmp    c0023fff <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0023ff4:	83 c6 10             	add    esi,0x10
c0023ff7:	47                   	inc    edi
c0023ff8:	eb d0                	jmp    c0023fca <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0023ffa:	43                   	inc    ebx
c0023ffb:	eb bc                	jmp    c0023fb9 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0023ffd:	31 c0                	xor    eax,eax
c0023fff:	5b                   	pop    ebx
c0024000:	5e                   	pop    esi
c0024001:	5f                   	pop    edi
c0024002:	c3                   	ret    

c0024003 <Thr::loadKernelSymbolTable(char const*)>:
c0024003:	55                   	push   ebp
c0024004:	57                   	push   edi
c0024005:	56                   	push   esi
c0024006:	53                   	push   ebx
c0024007:	83 ec 68             	sub    esp,0x68
c002400a:	8b 35 f8 01 04 c0    	mov    esi,DWORD PTR ds:0xc00401f8
c0024010:	68 14 01 00 00       	push   0x114
c0024015:	e8 29 26 ff ff       	call   c0016643 <malloc>
c002401a:	83 c4 0c             	add    esp,0xc
c002401d:	89 c3                	mov    ebx,eax
c002401f:	56                   	push   esi
c0024020:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0024024:	50                   	push   eax
c0024025:	e8 ae 66 ff ff       	call   c001a6d8 <File::File(char const*, Process*)>
c002402a:	5e                   	pop    esi
c002402b:	5f                   	pop    edi
c002402c:	6a 01                	push   0x1
c002402e:	53                   	push   ebx
c002402f:	e8 c2 66 ff ff       	call   c001a6f6 <File::open(FileOpenMode)>
c0024034:	83 c4 10             	add    esp,0x10
c0024037:	85 c0                	test   eax,eax
c0024039:	74 0a                	je     c0024045 <Thr::loadKernelSymbolTable(char const*)+0x42>
c002403b:	83 ec 0c             	sub    esp,0xc
c002403e:	68 bd 2f 03 c0       	push   0xc0032fbd
c0024043:	eb 34                	jmp    c0024079 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0024045:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c002404d:	83 ec 0c             	sub    esp,0xc
c0024050:	6a 34                	push   0x34
c0024052:	e8 ec 25 ff ff       	call   c0016643 <malloc>
c0024057:	59                   	pop    ecx
c0024058:	89 c7                	mov    edi,eax
c002405a:	8d 74 24 34          	lea    esi,[esp+0x34]
c002405e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024060:	56                   	push   esi
c0024061:	57                   	push   edi
c0024062:	6a 00                	push   0x0
c0024064:	6a 34                	push   0x34
c0024066:	53                   	push   ebx
c0024067:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c002406a:	83 c4 20             	add    esp,0x20
c002406d:	85 c0                	test   eax,eax
c002406f:	74 17                	je     c0024088 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0024071:	83 ec 0c             	sub    esp,0xc
c0024074:	68 d4 2f 03 c0       	push   0xc0032fd4
c0024079:	e8 6c c4 ff ff       	call   c00204ea <KePanic(char const*)>
c002407e:	83 c4 10             	add    esp,0x10
c0024081:	31 c0                	xor    eax,eax
c0024083:	e9 31 02 00 00       	jmp    c00242b9 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0024088:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c002408e:	75 e1                	jne    c0024071 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0024090:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0024093:	85 c0                	test   eax,eax
c0024095:	74 da                	je     c0024071 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0024097:	52                   	push   edx
c0024098:	31 d2                	xor    edx,edx
c002409a:	52                   	push   edx
c002409b:	50                   	push   eax
c002409c:	53                   	push   ebx
c002409d:	e8 12 67 ff ff       	call   c001a7b4 <File::seek(unsigned long long)>
c00240a2:	83 c4 10             	add    esp,0x10
c00240a5:	85 c0                	test   eax,eax
c00240a7:	75 c8                	jne    c0024071 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00240a9:	83 ec 0c             	sub    esp,0xc
c00240ac:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00240b0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00240b4:	31 ed                	xor    ebp,ebp
c00240b6:	0f af c2             	imul   eax,edx
c00240b9:	50                   	push   eax
c00240ba:	e8 84 25 ff ff       	call   c0016643 <malloc>
c00240bf:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00240c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00240c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00240c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00240cc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00240d0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00240d4:	0f af c2             	imul   eax,edx
c00240d7:	99                   	cdq    
c00240d8:	52                   	push   edx
c00240d9:	50                   	push   eax
c00240da:	53                   	push   ebx
c00240db:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00240de:	83 c4 20             	add    esp,0x20
c00240e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00240e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00240f1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00240f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0024101:	0f b7 f5             	movzx  esi,bp
c0024104:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0024108:	0f 83 a7 00 00 00    	jae    c00241b5 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c002410e:	6b f6 28             	imul   esi,esi,0x28
c0024111:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024115:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0024118:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002411c:	50                   	push   eax
c002411d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024121:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0024125:	8b 16                	mov    edx,DWORD PTR [esi]
c0024127:	6b c0 28             	imul   eax,eax,0x28
c002412a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c002412e:	89 d0                	mov    eax,edx
c0024130:	31 d2                	xor    edx,edx
c0024132:	52                   	push   edx
c0024133:	50                   	push   eax
c0024134:	53                   	push   ebx
c0024135:	e8 7a 66 ff ff       	call   c001a7b4 <File::seek(unsigned long long)>
c002413a:	83 c4 0c             	add    esp,0xc
c002413d:	6a 20                	push   0x20
c002413f:	6a 00                	push   0x0
c0024141:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0024145:	52                   	push   edx
c0024146:	e8 a5 c3 fd ff       	call   c00004f0 <memset>
c002414b:	58                   	pop    eax
c002414c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002414e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0024152:	51                   	push   ecx
c0024153:	8d 54 24 40          	lea    edx,[esp+0x40]
c0024157:	52                   	push   edx
c0024158:	6a 00                	push   0x0
c002415a:	6a 1f                	push   0x1f
c002415c:	53                   	push   ebx
c002415d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024160:	83 c4 18             	add    esp,0x18
c0024163:	68 eb 2f 03 c0       	push   0xc0032feb
c0024168:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c002416c:	52                   	push   edx
c002416d:	e8 de c5 fd ff       	call   c0000750 <strcmp>
c0024172:	83 c4 10             	add    esp,0x10
c0024175:	85 c0                	test   eax,eax
c0024177:	75 0f                	jne    c0024188 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0024179:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c002417c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024180:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024184:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024188:	50                   	push   eax
c0024189:	50                   	push   eax
c002418a:	68 f3 2f 03 c0       	push   0xc0032ff3
c002418f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0024193:	50                   	push   eax
c0024194:	e8 b7 c5 fd ff       	call   c0000750 <strcmp>
c0024199:	83 c4 10             	add    esp,0x10
c002419c:	85 c0                	test   eax,eax
c002419e:	75 0f                	jne    c00241af <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00241a0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00241a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00241a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00241ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00241af:	45                   	inc    ebp
c00241b0:	e9 4c ff ff ff       	jmp    c0024101 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00241b5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00241ba:	75 10                	jne    c00241cc <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00241bc:	83 ec 0c             	sub    esp,0xc
c00241bf:	68 fb 2f 03 c0       	push   0xc0032ffb
c00241c4:	e8 21 c3 ff ff       	call   c00204ea <KePanic(char const*)>
c00241c9:	83 c4 10             	add    esp,0x10
c00241cc:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00241d1:	75 10                	jne    c00241e3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00241d3:	83 ec 0c             	sub    esp,0xc
c00241d6:	68 fb 2f 03 c0       	push   0xc0032ffb
c00241db:	e8 0a c3 ff ff       	call   c00204ea <KePanic(char const*)>
c00241e0:	83 c4 10             	add    esp,0x10
c00241e3:	31 d2                	xor    edx,edx
c00241e5:	50                   	push   eax
c00241e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241ea:	52                   	push   edx
c00241eb:	50                   	push   eax
c00241ec:	53                   	push   ebx
c00241ed:	e8 c2 65 ff ff       	call   c001a7b4 <File::seek(unsigned long long)>
c00241f2:	5a                   	pop    edx
c00241f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00241f7:	e8 47 24 ff ff       	call   c0016643 <malloc>
c00241fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024200:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024204:	31 c9                	xor    ecx,ecx
c0024206:	5e                   	pop    esi
c0024207:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024209:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c002420d:	55                   	push   ebp
c002420e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024212:	51                   	push   ecx
c0024213:	52                   	push   edx
c0024214:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0024218:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c002421c:	53                   	push   ebx
c002421d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024220:	83 c4 14             	add    esp,0x14
c0024223:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0024227:	e8 17 24 ff ff       	call   c0016643 <malloc>
c002422c:	89 c6                	mov    esi,eax
c002422e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024230:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024233:	56                   	push   esi
c0024234:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0024238:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002423c:	51                   	push   ecx
c002423d:	52                   	push   edx
c002423e:	53                   	push   ebx
c002423f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024242:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024246:	8b 15 a0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401a0
c002424c:	83 c4 1c             	add    esp,0x1c
c002424f:	c1 e8 04             	shr    eax,0x4
c0024252:	89 04 95 20 00 04 c0 	mov    DWORD PTR [edx*4-0x3ffbffe0],eax
c0024259:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002425d:	31 d2                	xor    edx,edx
c002425f:	52                   	push   edx
c0024260:	50                   	push   eax
c0024261:	53                   	push   ebx
c0024262:	e8 4d 65 ff ff       	call   c001a7b4 <File::seek(unsigned long long)>
c0024267:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0024269:	31 d2                	xor    edx,edx
c002426b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c002426e:	56                   	push   esi
c002426f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024273:	52                   	push   edx
c0024274:	50                   	push   eax
c0024275:	53                   	push   ebx
c0024276:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024279:	83 c4 14             	add    esp,0x14
c002427c:	53                   	push   ebx
c002427d:	e8 d2 64 ff ff       	call   c001a754 <File::close()>
c0024282:	5d                   	pop    ebp
c0024283:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024287:	e8 c7 23 ff ff       	call   c0016653 <free>
c002428c:	89 3c 24             	mov    DWORD PTR [esp],edi
c002428f:	e8 bf 23 ff ff       	call   c0016653 <free>
c0024294:	a1 a0 01 04 c0       	mov    eax,ds:0xc00401a0
c0024299:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002429d:	8d 50 01             	lea    edx,[eax+0x1]
c00242a0:	89 0c 85 20 01 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfee0],ecx
c00242a7:	89 34 85 a0 00 04 c0 	mov    DWORD PTR [eax*4-0x3ffbff60],esi
c00242ae:	89 15 a0 01 04 c0    	mov    DWORD PTR ds:0xc00401a0,edx
c00242b4:	83 c4 10             	add    esp,0x10
c00242b7:	b0 01                	mov    al,0x1
c00242b9:	83 c4 5c             	add    esp,0x5c
c00242bc:	5b                   	pop    ebx
c00242bd:	5e                   	pop    esi
c00242be:	5f                   	pop    edi
c00242bf:	5d                   	pop    ebp
c00242c0:	c3                   	ret    

c00242c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00242c1:	55                   	push   ebp
c00242c2:	57                   	push   edi
c00242c3:	56                   	push   esi
c00242c4:	53                   	push   ebx
c00242c5:	81 ec 68 03 00 00    	sub    esp,0x368
c00242cb:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00242d2:	8b 1d f8 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401f8
c00242d8:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00242dc:	68 14 01 00 00       	push   0x114
c00242e1:	e8 5d 23 ff ff       	call   c0016643 <malloc>
c00242e6:	83 c4 0c             	add    esp,0xc
c00242e9:	89 c5                	mov    ebp,eax
c00242eb:	53                   	push   ebx
c00242ec:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00242f3:	50                   	push   eax
c00242f4:	e8 df 63 ff ff       	call   c001a6d8 <File::File(char const*, Process*)>
c00242f9:	5e                   	pop    esi
c00242fa:	5f                   	pop    edi
c00242fb:	6a 01                	push   0x1
c00242fd:	55                   	push   ebp
c00242fe:	e8 f3 63 ff ff       	call   c001a6f6 <File::open(FileOpenMode)>
c0024303:	83 c4 10             	add    esp,0x10
c0024306:	85 c0                	test   eax,eax
c0024308:	0f 85 aa 06 00 00    	jne    c00249b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c002430e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0024316:	83 ec 0c             	sub    esp,0xc
c0024319:	6a 34                	push   0x34
c002431b:	e8 23 23 ff ff       	call   c0016643 <malloc>
c0024320:	5b                   	pop    ebx
c0024321:	89 c7                	mov    edi,eax
c0024323:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0024327:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002432a:	53                   	push   ebx
c002432b:	57                   	push   edi
c002432c:	6a 00                	push   0x0
c002432e:	6a 34                	push   0x34
c0024330:	55                   	push   ebp
c0024331:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024334:	83 c4 20             	add    esp,0x20
c0024337:	85 c0                	test   eax,eax
c0024339:	0f 85 79 06 00 00    	jne    c00249b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c002433f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0024345:	0f 85 6d 06 00 00    	jne    c00249b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c002434b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c002434e:	85 c0                	test   eax,eax
c0024350:	0f 84 62 06 00 00    	je     c00249b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0024356:	31 d2                	xor    edx,edx
c0024358:	51                   	push   ecx
c0024359:	52                   	push   edx
c002435a:	50                   	push   eax
c002435b:	55                   	push   ebp
c002435c:	e8 53 64 ff ff       	call   c001a7b4 <File::seek(unsigned long long)>
c0024361:	83 c4 10             	add    esp,0x10
c0024364:	85 c0                	test   eax,eax
c0024366:	0f 85 4c 06 00 00    	jne    c00249b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c002436c:	83 ec 0c             	sub    esp,0xc
c002436f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0024372:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0024376:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002437a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c002437e:	0f af c2             	imul   eax,edx
c0024381:	50                   	push   eax
c0024382:	e8 bc 22 ff ff       	call   c0016643 <malloc>
c0024387:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c002438a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002438e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024391:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024395:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0024399:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c002439d:	0f af c2             	imul   eax,edx
c00243a0:	99                   	cdq    
c00243a1:	52                   	push   edx
c00243a2:	50                   	push   eax
c00243a3:	55                   	push   ebp
c00243a4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00243a7:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00243aa:	83 c4 20             	add    esp,0x20
c00243ad:	85 c0                	test   eax,eax
c00243af:	0f 84 03 06 00 00    	je     c00249b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00243b5:	52                   	push   edx
c00243b6:	31 d2                	xor    edx,edx
c00243b8:	52                   	push   edx
c00243b9:	50                   	push   eax
c00243ba:	55                   	push   ebp
c00243bb:	e8 f4 63 ff ff       	call   c001a7b4 <File::seek(unsigned long long)>
c00243c0:	83 c4 10             	add    esp,0x10
c00243c3:	85 c0                	test   eax,eax
c00243c5:	0f 85 ed 05 00 00    	jne    c00249b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00243cb:	83 ec 0c             	sub    esp,0xc
c00243ce:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00243d2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00243d6:	31 f6                	xor    esi,esi
c00243d8:	0f af c2             	imul   eax,edx
c00243db:	50                   	push   eax
c00243dc:	e8 62 22 ff ff       	call   c0016643 <malloc>
c00243e1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00243e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00243e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00243eb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00243ef:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00243f3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00243f7:	0f af c2             	imul   eax,edx
c00243fa:	99                   	cdq    
c00243fb:	52                   	push   edx
c00243fc:	50                   	push   eax
c00243fd:	55                   	push   ebp
c00243fe:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024401:	83 c4 20             	add    esp,0x20
c0024404:	0f b7 de             	movzx  ebx,si
c0024407:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c002440b:	0f 83 87 00 00 00    	jae    c0024498 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0024411:	c1 e3 05             	shl    ebx,0x5
c0024414:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024418:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c002441b:	75 75                	jne    c0024492 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c002441d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0024420:	31 d2                	xor    edx,edx
c0024422:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024426:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0024429:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002442d:	50                   	push   eax
c002442e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0024431:	52                   	push   edx
c0024432:	50                   	push   eax
c0024433:	55                   	push   ebp
c0024434:	e8 7b 63 ff ff       	call   c001a7b4 <File::seek(unsigned long long)>
c0024439:	83 c4 10             	add    esp,0x10
c002443c:	85 c0                	test   eax,eax
c002443e:	0f 85 74 05 00 00    	jne    c00249b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0024444:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002444b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c002444e:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0024452:	31 d2                	xor    edx,edx
c0024454:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0024458:	83 ec 0c             	sub    esp,0xc
c002445b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002445f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024466:	50                   	push   eax
c0024467:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002446b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002446f:	52                   	push   edx
c0024470:	50                   	push   eax
c0024471:	55                   	push   ebp
c0024472:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024475:	83 c4 1c             	add    esp,0x1c
c0024478:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002447b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c002447e:	50                   	push   eax
c002447f:	6a 00                	push   0x0
c0024481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024485:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0024489:	50                   	push   eax
c002448a:	e8 61 c0 fd ff       	call   c00004f0 <memset>
c002448f:	83 c4 10             	add    esp,0x10
c0024492:	46                   	inc    esi
c0024493:	e9 6c ff ff ff       	jmp    c0024404 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0024498:	53                   	push   ebx
c0024499:	31 db                	xor    ebx,ebx
c002449b:	68 00 01 00 00       	push   0x100
c00244a0:	6a 00                	push   0x0
c00244a2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00244a6:	50                   	push   eax
c00244a7:	e8 44 c0 fd ff       	call   c00004f0 <memset>
c00244ac:	83 c4 0c             	add    esp,0xc
c00244af:	68 00 01 00 00       	push   0x100
c00244b4:	6a 00                	push   0x0
c00244b6:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00244bd:	50                   	push   eax
c00244be:	e8 2d c0 fd ff       	call   c00004f0 <memset>
c00244c3:	83 c4 10             	add    esp,0x10
c00244c6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00244ce:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00244d6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00244de:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00244e6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00244ee:	0f b7 f3             	movzx  esi,bx
c00244f1:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c00244f5:	0f 83 2d 01 00 00    	jae    c0024628 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00244fb:	6b f6 28             	imul   esi,esi,0x28
c00244fe:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024502:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0024505:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024509:	52                   	push   edx
c002450a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002450e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0024512:	8b 06                	mov    eax,DWORD PTR [esi]
c0024514:	6b d2 28             	imul   edx,edx,0x28
c0024517:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c002451b:	31 d2                	xor    edx,edx
c002451d:	52                   	push   edx
c002451e:	50                   	push   eax
c002451f:	55                   	push   ebp
c0024520:	e8 8f 62 ff ff       	call   c001a7b4 <File::seek(unsigned long long)>
c0024525:	83 c4 0c             	add    esp,0xc
c0024528:	6a 20                	push   0x20
c002452a:	6a 00                	push   0x0
c002452c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0024533:	51                   	push   ecx
c0024534:	e8 b7 bf fd ff       	call   c00004f0 <memset>
c0024539:	59                   	pop    ecx
c002453a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002453d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0024541:	52                   	push   edx
c0024542:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0024549:	51                   	push   ecx
c002454a:	6a 00                	push   0x0
c002454c:	6a 1f                	push   0x1f
c002454e:	55                   	push   ebp
c002454f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024552:	83 c4 1c             	add    esp,0x1c
c0024555:	6a 09                	push   0x9
c0024557:	68 15 30 03 c0       	push   0xc0033015
c002455c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0024563:	51                   	push   ecx
c0024564:	e8 17 be fd ff       	call   c0000380 <memcmp>
c0024569:	83 c4 10             	add    esp,0x10
c002456c:	85 c0                	test   eax,eax
c002456e:	75 21                	jne    c0024591 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0024570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024574:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024578:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c002457c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024580:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024583:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c002458a:	89 d0                	mov    eax,edx
c002458c:	40                   	inc    eax
c002458d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024591:	50                   	push   eax
c0024592:	6a 09                	push   0x9
c0024594:	68 1f 30 03 c0       	push   0xc003301f
c0024599:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00245a0:	50                   	push   eax
c00245a1:	e8 da bd fd ff       	call   c0000380 <memcmp>
c00245a6:	83 c4 10             	add    esp,0x10
c00245a9:	85 c0                	test   eax,eax
c00245ab:	75 21                	jne    c00245ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00245ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00245b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00245b5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00245b9:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c00245bd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00245c0:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00245c7:	89 d0                	mov    eax,edx
c00245c9:	40                   	inc    eax
c00245ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00245ce:	50                   	push   eax
c00245cf:	50                   	push   eax
c00245d0:	68 eb 2f 03 c0       	push   0xc0032feb
c00245d5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00245dc:	50                   	push   eax
c00245dd:	e8 6e c1 fd ff       	call   c0000750 <strcmp>
c00245e2:	83 c4 10             	add    esp,0x10
c00245e5:	85 c0                	test   eax,eax
c00245e7:	75 0f                	jne    c00245f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00245e9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00245ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00245f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00245f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00245f8:	50                   	push   eax
c00245f9:	50                   	push   eax
c00245fa:	68 f3 2f 03 c0       	push   0xc0032ff3
c00245ff:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024606:	50                   	push   eax
c0024607:	e8 44 c1 fd ff       	call   c0000750 <strcmp>
c002460c:	83 c4 10             	add    esp,0x10
c002460f:	85 c0                	test   eax,eax
c0024611:	75 0f                	jne    c0024622 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0024613:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024616:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002461e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024622:	43                   	inc    ebx
c0024623:	e9 c6 fe ff ff       	jmp    c00244ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0024628:	31 d2                	xor    edx,edx
c002462a:	50                   	push   eax
c002462b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002462f:	52                   	push   edx
c0024630:	50                   	push   eax
c0024631:	55                   	push   ebp
c0024632:	e8 7d 61 ff ff       	call   c001a7b4 <File::seek(unsigned long long)>
c0024637:	58                   	pop    eax
c0024638:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002463c:	e8 02 20 ff ff       	call   c0016643 <malloc>
c0024641:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0024644:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0024648:	31 d2                	xor    edx,edx
c002464a:	58                   	pop    eax
c002464b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c002464f:	53                   	push   ebx
c0024650:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0024654:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024658:	52                   	push   edx
c0024659:	50                   	push   eax
c002465a:	55                   	push   ebp
c002465b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002465e:	83 c4 14             	add    esp,0x14
c0024661:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0024665:	e8 d9 1f ff ff       	call   c0016643 <malloc>
c002466a:	31 d2                	xor    edx,edx
c002466c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0024670:	83 c4 0c             	add    esp,0xc
c0024673:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024677:	52                   	push   edx
c0024678:	50                   	push   eax
c0024679:	55                   	push   ebp
c002467a:	e8 35 61 ff ff       	call   c001a7b4 <File::seek(unsigned long long)>
c002467f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0024682:	31 d2                	xor    edx,edx
c0024684:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024687:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002468b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002468f:	52                   	push   edx
c0024690:	50                   	push   eax
c0024691:	55                   	push   ebp
c0024692:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024695:	83 c4 20             	add    esp,0x20
c0024698:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c002469d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00246a5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00246a9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00246ad:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00246b1:	0f 84 05 03 00 00    	je     c00249bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c00246b7:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00246be:	31 d2                	xor    edx,edx
c00246c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00246c4:	c1 e8 03             	shr    eax,0x3
c00246c7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00246cb:	51                   	push   ecx
c00246cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00246d0:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00246d4:	52                   	push   edx
c00246d5:	50                   	push   eax
c00246d6:	55                   	push   ebp
c00246d7:	e8 d8 60 ff ff       	call   c001a7b4 <File::seek(unsigned long long)>
c00246dc:	5b                   	pop    ebx
c00246dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00246e1:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00246e8:	e8 56 1f ff ff       	call   c0016643 <malloc>
c00246ed:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00246f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00246f4:	31 d2                	xor    edx,edx
c00246f6:	5e                   	pop    esi
c00246f7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00246fb:	50                   	push   eax
c00246fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024700:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024704:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c002470b:	52                   	push   edx
c002470c:	50                   	push   eax
c002470d:	55                   	push   ebp
c002470e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024711:	83 c4 20             	add    esp,0x20
c0024714:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c002471c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024720:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0024724:	0f 8d 76 02 00 00    	jge    c00249a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c002472a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002472e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024732:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0024737:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c002473a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002473e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024742:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0024746:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002474a:	c1 e8 08             	shr    eax,0x8
c002474d:	89 c6                	mov    esi,eax
c002474f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0024753:	c1 e6 04             	shl    esi,0x4
c0024756:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c002475a:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c002475d:	85 db                	test   ebx,ebx
c002475f:	0f 85 b3 00 00 00    	jne    c0024818 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0024765:	83 ec 0c             	sub    esp,0xc
c0024768:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002476c:	03 06                	add    eax,DWORD PTR [esi]
c002476e:	50                   	push   eax
c002476f:	e8 40 f8 ff ff       	call   c0023fb4 <Thr::getAddressOfKernelSymbol(char const*)>
c0024774:	83 c4 10             	add    esp,0x10
c0024777:	89 c3                	mov    ebx,eax
c0024779:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c002477e:	85 c0                	test   eax,eax
c0024780:	0f 85 92 00 00 00    	jne    c0024818 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0024786:	83 ec 0c             	sub    esp,0xc
c0024789:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002478d:	03 06                	add    eax,DWORD PTR [esi]
c002478f:	50                   	push   eax
c0024790:	e8 43 bf ff ff       	call   c00206d8 <KeResolveCompatibilitySymbol(char*)>
c0024795:	83 c4 10             	add    esp,0x10
c0024798:	89 c3                	mov    ebx,eax
c002479a:	85 c0                	test   eax,eax
c002479c:	75 7a                	jne    c0024818 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c002479e:	51                   	push   ecx
c002479f:	51                   	push   ecx
c00247a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00247a4:	03 06                	add    eax,DWORD PTR [esi]
c00247a6:	50                   	push   eax
c00247a7:	68 29 30 03 c0       	push   0xc0033029
c00247ac:	e8 20 4d ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c00247b1:	58                   	pop    eax
c00247b2:	5a                   	pop    edx
c00247b3:	68 43 30 03 c0       	push   0xc0033043
c00247b8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00247bf:	50                   	push   eax
c00247c0:	e8 7b be fd ff       	call   c0000640 <strcpy>
c00247c5:	59                   	pop    ecx
c00247c6:	58                   	pop    eax
c00247c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00247cb:	03 06                	add    eax,DWORD PTR [esi]
c00247cd:	50                   	push   eax
c00247ce:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00247d5:	50                   	push   eax
c00247d6:	e8 65 c0 fd ff       	call   c0000840 <strcat>
c00247db:	58                   	pop    eax
c00247dc:	5a                   	pop    edx
c00247dd:	68 dd 30 03 c0       	push   0xc00330dd
c00247e2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00247e9:	50                   	push   eax
c00247ea:	e8 51 c0 fd ff       	call   c0000840 <strcat>
c00247ef:	83 c4 10             	add    esp,0x10
c00247f2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00247f7:	0f 84 5d 01 00 00    	je     c002495a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00247fd:	83 ec 0c             	sub    esp,0xc
c0024800:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024807:	50                   	push   eax
c0024808:	e8 dd bc ff ff       	call   c00204ea <KePanic(char const*)>
c002480d:	83 c4 10             	add    esp,0x10
c0024810:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0024814:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0024818:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c002481d:	83 f8 01             	cmp    eax,0x1
c0024820:	0f 85 8f 00 00 00    	jne    c00248b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0024826:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c002482d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0024831:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0024835:	01 ce                	add    esi,ecx
c0024837:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c002483f:	0f 94 c0             	sete   al
c0024842:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c002484a:	0f 94 c2             	sete   dl
c002484d:	09 c2                	or     edx,eax
c002484f:	8b 06                	mov    eax,DWORD PTR [esi]
c0024851:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0024856:	0f b6 d2             	movzx  edx,dl
c0024859:	74 41                	je     c002489c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c002485b:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c002485e:	85 d2                	test   edx,edx
c0024860:	75 15                	jne    c0024877 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0024862:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0024866:	66 83 f8 0c          	cmp    ax,0xc
c002486a:	76 05                	jbe    c0024871 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c002486c:	b8 0c 00 00 00       	mov    eax,0xc
c0024871:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0024875:	76 37                	jbe    c00248ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0024877:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c002487b:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0024880:	0f 84 d4 00 00 00    	je     c002495a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0024886:	83 ec 0c             	sub    esp,0xc
c0024889:	68 5a 30 03 c0       	push   0xc003305a
c002488e:	e8 57 bc ff ff       	call   c00204ea <KePanic(char const*)>
c0024893:	83 c4 10             	add    esp,0x10
c0024896:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002489a:	eb 12                	jmp    c00248ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c002489c:	01 c1                	add    ecx,eax
c002489e:	85 d2                	test   edx,edx
c00248a0:	75 0c                	jne    c00248ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00248a2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00248a6:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00248aa:	77 02                	ja     c00248ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00248ac:	01 d9                	add    ecx,ebx
c00248ae:	89 0e                	mov    DWORD PTR [esi],ecx
c00248b0:	e9 e2 00 00 00       	jmp    c0024997 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00248b5:	83 f8 02             	cmp    eax,0x2
c00248b8:	75 77                	jne    c0024931 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c00248ba:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00248c1:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c00248c5:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c00248c9:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00248d1:	74 21                	je     c00248f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00248d3:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00248db:	74 17                	je     c00248f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00248dd:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c00248e1:	b8 0a 00 00 00       	mov    eax,0xa
c00248e6:	83 fa 0e             	cmp    edx,0xe
c00248e9:	77 03                	ja     c00248ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c00248eb:	8d 42 fc             	lea    eax,[edx-0x4]
c00248ee:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00248f2:	76 17                	jbe    c002490b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c00248f4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00248f9:	74 5f                	je     c002495a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00248fb:	83 ec 0c             	sub    esp,0xc
c00248fe:	68 76 30 03 c0       	push   0xc0033076
c0024903:	e8 e2 bb ff ff       	call   c00204ea <KePanic(char const*)>
c0024908:	83 c4 10             	add    esp,0x10
c002490b:	8b 06                	mov    eax,DWORD PTR [esi]
c002490d:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0024912:	74 13                	je     c0024927 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0024914:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024918:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c002491f:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0024923:	01 d0                	add    eax,edx
c0024925:	eb 04                	jmp    c002492b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0024927:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c002492b:	01 c3                	add    ebx,eax
c002492d:	89 1e                	mov    DWORD PTR [esi],ebx
c002492f:	eb 66                	jmp    c0024997 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0024931:	52                   	push   edx
c0024932:	52                   	push   edx
c0024933:	50                   	push   eax
c0024934:	68 92 30 03 c0       	push   0xc0033092
c0024939:	e8 93 4b ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c002493e:	83 c4 10             	add    esp,0x10
c0024941:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0024946:	74 12                	je     c002495a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0024948:	83 ec 0c             	sub    esp,0xc
c002494b:	68 9d 30 03 c0       	push   0xc003309d
c0024950:	e8 95 bb ff ff       	call   c00204ea <KePanic(char const*)>
c0024955:	83 c4 10             	add    esp,0x10
c0024958:	eb 3d                	jmp    c0024997 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c002495a:	83 ec 0c             	sub    esp,0xc
c002495d:	55                   	push   ebp
c002495e:	e8 f1 5d ff ff       	call   c001a754 <File::close()>
c0024963:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024966:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024969:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002496c:	59                   	pop    ecx
c002496d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024971:	e8 dd 1c ff ff       	call   c0016653 <free>
c0024976:	5b                   	pop    ebx
c0024977:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002497b:	e8 d3 1c ff ff       	call   c0016653 <free>
c0024980:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024983:	e8 cb 1c ff ff       	call   c0016653 <free>
c0024988:	5e                   	pop    esi
c0024989:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002498d:	e8 c1 1c ff ff       	call   c0016653 <free>
c0024992:	83 c4 10             	add    esp,0x10
c0024995:	eb 21                	jmp    c00249b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0024997:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c002499b:	e9 7c fd ff ff       	jmp    c002471c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c00249a0:	83 ec 0c             	sub    esp,0xc
c00249a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00249a7:	e8 a7 1c ff ff       	call   c0016653 <free>
c00249ac:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00249b0:	83 c4 10             	add    esp,0x10
c00249b3:	e9 f1 fc ff ff       	jmp    c00246a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c00249b8:	31 c0                	xor    eax,eax
c00249ba:	eb 33                	jmp    c00249ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c00249bc:	83 ec 0c             	sub    esp,0xc
c00249bf:	55                   	push   ebp
c00249c0:	e8 8f 5d ff ff       	call   c001a754 <File::close()>
c00249c5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00249c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00249cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00249ce:	58                   	pop    eax
c00249cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00249d3:	e8 7b 1c ff ff       	call   c0016653 <free>
c00249d8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00249db:	e8 73 1c ff ff       	call   c0016653 <free>
c00249e0:	5a                   	pop    edx
c00249e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00249e5:	e8 69 1c ff ff       	call   c0016653 <free>
c00249ea:	83 c4 10             	add    esp,0x10
c00249ed:	b0 01                	mov    al,0x1
c00249ef:	81 c4 5c 03 00 00    	add    esp,0x35c
c00249f5:	5b                   	pop    ebx
c00249f6:	5e                   	pop    esi
c00249f7:	5f                   	pop    edi
c00249f8:	5d                   	pop    ebp
c00249f9:	c3                   	ret    

c00249fa <Thr::getDriverBaseFromAddress(unsigned long)>:
c00249fa:	56                   	push   esi
c00249fb:	31 d2                	xor    edx,edx
c00249fd:	53                   	push   ebx
c00249fe:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c0024a04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024a08:	39 d3                	cmp    ebx,edx
c0024a0a:	7e 1b                	jle    c0024a27 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0024a0c:	8b 04 95 20 fc 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc03e0]
c0024a13:	39 c8                	cmp    eax,ecx
c0024a15:	77 0d                	ja     c0024a24 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0024a17:	8b 34 95 20 fa 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffc05e0]
c0024a1e:	01 c6                	add    esi,eax
c0024a20:	39 ce                	cmp    esi,ecx
c0024a22:	77 05                	ja     c0024a29 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0024a24:	42                   	inc    edx
c0024a25:	eb e1                	jmp    c0024a08 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0024a27:	31 c0                	xor    eax,eax
c0024a29:	5b                   	pop    ebx
c0024a2a:	5e                   	pop    esi
c0024a2b:	c3                   	ret    

c0024a2c <Thr::getDriverNameFromAddress(unsigned long)>:
c0024a2c:	53                   	push   ebx
c0024a2d:	31 c0                	xor    eax,eax
c0024a2f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024a33:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c0024a39:	39 c3                	cmp    ebx,eax
c0024a3b:	7e 22                	jle    c0024a5f <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0024a3d:	8b 14 85 20 fc 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc03e0]
c0024a44:	39 ca                	cmp    edx,ecx
c0024a46:	77 14                	ja     c0024a5c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0024a48:	03 14 85 20 fa 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffc05e0]
c0024a4f:	39 ca                	cmp    edx,ecx
c0024a51:	76 09                	jbe    c0024a5c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0024a53:	8b 04 85 20 fe 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc01e0]
c0024a5a:	eb 05                	jmp    c0024a61 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0024a5c:	40                   	inc    eax
c0024a5d:	eb da                	jmp    c0024a39 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0024a5f:	31 c0                	xor    eax,eax
c0024a61:	5b                   	pop    ebx
c0024a62:	c3                   	ret    

c0024a63 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0024a63:	53                   	push   ebx
c0024a64:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0024a68:	53                   	push   ebx
c0024a69:	e8 8c ff ff ff       	call   c00249fa <Thr::getDriverBaseFromAddress(unsigned long)>
c0024a6e:	5a                   	pop    edx
c0024a6f:	31 d2                	xor    edx,edx
c0024a71:	85 c0                	test   eax,eax
c0024a73:	74 04                	je     c0024a79 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0024a75:	89 da                	mov    edx,ebx
c0024a77:	29 c2                	sub    edx,eax
c0024a79:	89 d0                	mov    eax,edx
c0024a7b:	5b                   	pop    ebx
c0024a7c:	c3                   	ret    

c0024a7d <Thr::loadDLL(char const*, bool)>:
c0024a7d:	55                   	push   ebp
c0024a7e:	57                   	push   edi
c0024a7f:	56                   	push   esi
c0024a80:	53                   	push   ebx
c0024a81:	81 ec 34 01 00 00    	sub    esp,0x134
c0024a87:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0024a8e:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0024a95:	56                   	push   esi
c0024a96:	68 b5 30 03 c0       	push   0xc00330b5
c0024a9b:	e8 31 4a ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0024aa0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0024aa7:	e8 97 1b ff ff       	call   c0016643 <malloc>
c0024aac:	83 c4 0c             	add    esp,0xc
c0024aaf:	89 c3                	mov    ebx,eax
c0024ab1:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0024ab7:	56                   	push   esi
c0024ab8:	50                   	push   eax
c0024ab9:	e8 1a 5c ff ff       	call   c001a6d8 <File::File(char const*, Process*)>
c0024abe:	83 c4 10             	add    esp,0x10
c0024ac1:	85 db                	test   ebx,ebx
c0024ac3:	75 3c                	jne    c0024b01 <Thr::loadDLL(char const*, bool)+0x84>
c0024ac5:	89 f8                	mov    eax,edi
c0024ac7:	84 c0                	test   al,al
c0024ac9:	0f 84 f3 01 00 00    	je     c0024cc2 <Thr::loadDLL(char const*, bool)+0x245>
c0024acf:	55                   	push   ebp
c0024ad0:	55                   	push   ebp
c0024ad1:	68 c6 30 03 c0       	push   0xc00330c6
c0024ad6:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0024ada:	55                   	push   ebp
c0024adb:	e8 60 bb fd ff       	call   c0000640 <strcpy>
c0024ae0:	58                   	pop    eax
c0024ae1:	5a                   	pop    edx
c0024ae2:	56                   	push   esi
c0024ae3:	55                   	push   ebp
c0024ae4:	e8 57 bd fd ff       	call   c0000840 <strcat>
c0024ae9:	59                   	pop    ecx
c0024aea:	58                   	pop    eax
c0024aeb:	68 dd 30 03 c0       	push   0xc00330dd
c0024af0:	55                   	push   ebp
c0024af1:	e8 4a bd fd ff       	call   c0000840 <strcat>
c0024af6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024af9:	e8 ec b9 ff ff       	call   c00204ea <KePanic(char const*)>
c0024afe:	83 c4 10             	add    esp,0x10
c0024b01:	51                   	push   ecx
c0024b02:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0024b06:	50                   	push   eax
c0024b07:	8d 44 24 20          	lea    eax,[esp+0x20]
c0024b0b:	50                   	push   eax
c0024b0c:	53                   	push   ebx
c0024b0d:	e8 e6 5e ff ff       	call   c001a9f8 <File::stat(unsigned long long*, bool*)>
c0024b12:	83 c4 10             	add    esp,0x10
c0024b15:	89 c5                	mov    ebp,eax
c0024b17:	85 db                	test   ebx,ebx
c0024b19:	74 0c                	je     c0024b27 <Thr::loadDLL(char const*, bool)+0xaa>
c0024b1b:	83 ec 0c             	sub    esp,0xc
c0024b1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024b20:	53                   	push   ebx
c0024b21:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024b24:	83 c4 10             	add    esp,0x10
c0024b27:	83 ec 0c             	sub    esp,0xc
c0024b2a:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0024b2f:	50                   	push   eax
c0024b30:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024b34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024b38:	55                   	push   ebp
c0024b39:	68 df 30 03 c0       	push   0xc00330df
c0024b3e:	e8 8e 49 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0024b43:	83 c4 20             	add    esp,0x20
c0024b46:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0024b4b:	75 0a                	jne    c0024b57 <Thr::loadDLL(char const*, bool)+0xda>
c0024b4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024b51:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0024b55:	75 3c                	jne    c0024b93 <Thr::loadDLL(char const*, bool)+0x116>
c0024b57:	89 f8                	mov    eax,edi
c0024b59:	84 c0                	test   al,al
c0024b5b:	0f 84 49 01 00 00    	je     c0024caa <Thr::loadDLL(char const*, bool)+0x22d>
c0024b61:	51                   	push   ecx
c0024b62:	51                   	push   ecx
c0024b63:	68 00 31 03 c0       	push   0xc0033100
c0024b68:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0024b6c:	53                   	push   ebx
c0024b6d:	e8 ce ba fd ff       	call   c0000640 <strcpy>
c0024b72:	5d                   	pop    ebp
c0024b73:	58                   	pop    eax
c0024b74:	56                   	push   esi
c0024b75:	53                   	push   ebx
c0024b76:	e8 c5 bc fd ff       	call   c0000840 <strcat>
c0024b7b:	58                   	pop    eax
c0024b7c:	5a                   	pop    edx
c0024b7d:	68 dd 30 03 c0       	push   0xc00330dd
c0024b82:	53                   	push   ebx
c0024b83:	e8 b8 bc fd ff       	call   c0000840 <strcat>
c0024b88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024b8b:	e8 5a b9 ff ff       	call   c00204ea <KePanic(char const*)>
c0024b90:	83 c4 10             	add    esp,0x10
c0024b93:	52                   	push   edx
c0024b94:	6a 03                	push   0x3
c0024b96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b9a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024b9e:	05 ff 0f 00 00       	add    eax,0xfff
c0024ba3:	83 d2 00             	adc    edx,0x0
c0024ba6:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024baa:	50                   	push   eax
c0024bab:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0024bb1:	e8 fa 3d ff ff       	call   c00189b0 <VAS::allocatePages(int, int)>
c0024bb6:	59                   	pop    ecx
c0024bb7:	89 c3                	mov    ebx,eax
c0024bb9:	5d                   	pop    ebp
c0024bba:	50                   	push   eax
c0024bbb:	68 26 15 03 c0       	push   0xc0031526
c0024bc0:	e8 0c 49 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0024bc5:	89 34 24             	mov    DWORD PTR [esp],esi
c0024bc8:	e8 a3 b9 fd ff       	call   c0000570 <strlen>
c0024bcd:	8b 2d 00 fa 03 c0    	mov    ebp,DWORD PTR ds:0xc003fa00
c0024bd3:	40                   	inc    eax
c0024bd4:	89 04 24             	mov    DWORD PTR [esp],eax
c0024bd7:	e8 67 1a ff ff       	call   c0016643 <malloc>
c0024bdc:	89 04 ad 20 fe 03 c0 	mov    DWORD PTR [ebp*4-0x3ffc01e0],eax
c0024be3:	58                   	pop    eax
c0024be4:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c0024be9:	5a                   	pop    edx
c0024bea:	56                   	push   esi
c0024beb:	ff 34 85 20 fe 03 c0 	push   DWORD PTR [eax*4-0x3ffc01e0]
c0024bf2:	e8 49 ba fd ff       	call   c0000640 <strcpy>
c0024bf7:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c0024bfc:	8d 50 01             	lea    edx,[eax+0x1]
c0024bff:	89 1c 85 20 fc 03 c0 	mov    DWORD PTR [eax*4-0x3ffc03e0],ebx
c0024c06:	89 15 00 fa 03 c0    	mov    DWORD PTR ds:0xc003fa00,edx
c0024c0c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024c10:	83 c4 0c             	add    esp,0xc
c0024c13:	89 14 85 20 fa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc05e0],edx
c0024c1a:	6a 01                	push   0x1
c0024c1c:	53                   	push   ebx
c0024c1d:	56                   	push   esi
c0024c1e:	e8 9e f6 ff ff       	call   c00242c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0024c23:	83 c4 10             	add    esp,0x10
c0024c26:	0f b6 c0             	movzx  eax,al
c0024c29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024c2d:	85 c0                	test   eax,eax
c0024c2f:	0f 85 89 00 00 00    	jne    c0024cbe <Thr::loadDLL(char const*, bool)+0x241>
c0024c35:	89 f8                	mov    eax,edi
c0024c37:	84 c0                	test   al,al
c0024c39:	74 73                	je     c0024cae <Thr::loadDLL(char const*, bool)+0x231>
c0024c3b:	83 ec 0c             	sub    esp,0xc
c0024c3e:	68 19 31 03 c0       	push   0xc0033119
c0024c43:	e8 a2 b8 ff ff       	call   c00204ea <KePanic(char const*)>
c0024c48:	83 c4 10             	add    esp,0x10
c0024c4b:	eb 61                	jmp    c0024cae <Thr::loadDLL(char const*, bool)+0x231>
c0024c4d:	50                   	push   eax
c0024c4e:	50                   	push   eax
c0024c4f:	89 e8                	mov    eax,ebp
c0024c51:	c1 e0 0c             	shl    eax,0xc
c0024c54:	01 d8                	add    eax,ebx
c0024c56:	50                   	push   eax
c0024c57:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0024c5d:	e8 36 38 ff ff       	call   c0018498 <VAS::getPageTableEntry(unsigned long)>
c0024c62:	83 c4 10             	add    esp,0x10
c0024c65:	8b 00                	mov    eax,DWORD PTR [eax]
c0024c67:	a8 60                	test   al,0x60
c0024c69:	75 11                	jne    c0024c7c <Thr::loadDLL(char const*, bool)+0x1ff>
c0024c6b:	83 ec 0c             	sub    esp,0xc
c0024c6e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024c73:	50                   	push   eax
c0024c74:	e8 6a 1c ff ff       	call   c00168e3 <Phys::freePage(unsigned long)>
c0024c79:	83 c4 10             	add    esp,0x10
c0024c7c:	45                   	inc    ebp
c0024c7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024c81:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024c85:	05 ff 0f 00 00       	add    eax,0xfff
c0024c8a:	bf 00 00 00 00       	mov    edi,0x0
c0024c8f:	83 d2 00             	adc    edx,0x0
c0024c92:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024c96:	c1 ea 0c             	shr    edx,0xc
c0024c99:	39 c5                	cmp    ebp,eax
c0024c9b:	89 d1                	mov    ecx,edx
c0024c9d:	89 f8                	mov    eax,edi
c0024c9f:	19 c8                	sbb    eax,ecx
c0024ca1:	72 aa                	jb     c0024c4d <Thr::loadDLL(char const*, bool)+0x1d0>
c0024ca3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0024ca8:	75 18                	jne    c0024cc2 <Thr::loadDLL(char const*, bool)+0x245>
c0024caa:	31 db                	xor    ebx,ebx
c0024cac:	eb 14                	jmp    c0024cc2 <Thr::loadDLL(char const*, bool)+0x245>
c0024cae:	83 ec 0c             	sub    esp,0xc
c0024cb1:	68 38 31 03 c0       	push   0xc0033138
c0024cb6:	e8 2f b8 ff ff       	call   c00204ea <KePanic(char const*)>
c0024cbb:	83 c4 10             	add    esp,0x10
c0024cbe:	31 ed                	xor    ebp,ebp
c0024cc0:	eb bb                	jmp    c0024c7d <Thr::loadDLL(char const*, bool)+0x200>
c0024cc2:	81 c4 2c 01 00 00    	add    esp,0x12c
c0024cc8:	89 d8                	mov    eax,ebx
c0024cca:	5b                   	pop    ebx
c0024ccb:	5e                   	pop    esi
c0024ccc:	5f                   	pop    edi
c0024ccd:	5d                   	pop    ebp
c0024cce:	c3                   	ret    

c0024ccf <Thr::executeDLL(unsigned long, void*)>:
c0024ccf:	56                   	push   esi
c0024cd0:	53                   	push   ebx
c0024cd1:	52                   	push   edx
c0024cd2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024cd6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0024cda:	85 db                	test   ebx,ebx
c0024cdc:	75 10                	jne    c0024cee <Thr::executeDLL(unsigned long, void*)+0x1f>
c0024cde:	83 ec 0c             	sub    esp,0xc
c0024ce1:	68 54 31 03 c0       	push   0xc0033154
c0024ce6:	e8 ff b7 ff ff       	call   c00204ea <KePanic(char const*)>
c0024ceb:	83 c4 10             	add    esp,0x10
c0024cee:	50                   	push   eax
c0024cef:	50                   	push   eax
c0024cf0:	53                   	push   ebx
c0024cf1:	68 7e 31 03 c0       	push   0xc003317e
c0024cf6:	e8 d6 47 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0024cfb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0024cff:	89 d8                	mov    eax,ebx
c0024d01:	83 c4 14             	add    esp,0x14
c0024d04:	5b                   	pop    ebx
c0024d05:	5e                   	pop    esi
c0024d06:	ff e0                	jmp    eax

c0024d08 <userModeEntryPoint(void*)>:
c0024d08:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024d0d:	83 e8 01             	sub    eax,0x1
c0024d10:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024d15:	75 01                	jne    c0024d18 <userModeEntryPoint(void*)+0x10>
c0024d17:	fb                   	sti    
c0024d18:	fb                   	sti    
c0024d19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024d1e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0024d21:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0024d27:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024d2b:	e9 0f b5 fd ff       	jmp    c000023f <goToUsermode>

c0024d30 <changeTSS>:
c0024d30:	83 ec 14             	sub    esp,0x14
c0024d33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024d38:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0024d3b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0024d40:	c1 e2 15             	shl    edx,0x15
c0024d43:	29 d0                	sub    eax,edx
c0024d45:	50                   	push   eax
c0024d46:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0024d4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d51:	05 7c 11 00 00       	add    eax,0x117c
c0024d56:	50                   	push   eax
c0024d57:	e8 84 2d ff ff       	call   c0017ae0 <TSS::setESP(unsigned long)>
c0024d5c:	83 c4 1c             	add    esp,0x1c
c0024d5f:	c3                   	ret    

c0024d60 <switchToThread(ThreadControlBlock*)>:
c0024d60:	57                   	push   edi
c0024d61:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0024d67:	56                   	push   esi
c0024d68:	85 c9                	test   ecx,ecx
c0024d6a:	53                   	push   ebx
c0024d6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024d6f:	0f 85 8b 00 00 00    	jne    c0024e00 <switchToThread(ThreadControlBlock*)+0xa0>
c0024d75:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0024d79:	81 fa ff 00 00 00    	cmp    edx,0xff
c0024d7f:	74 7b                	je     c0024dfc <switchToThread(ThreadControlBlock*)+0x9c>
c0024d81:	b8 00 04 00 00       	mov    eax,0x400
c0024d86:	29 d0                	sub    eax,edx
c0024d88:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0024d8b:	d1 f8                	sar    eax,1
c0024d8d:	01 d0                	add    eax,edx
c0024d8f:	90                   	nop
c0024d90:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0024d93:	e8 76 25 00 00       	call   c002730e <HalQueryPerformanceCounter()>
c0024d98:	a3 10 02 04 c0       	mov    ds:0xc0040210,eax
c0024d9d:	89 15 14 02 04 c0    	mov    DWORD PTR ds:0xc0040214,edx
c0024da3:	89 c6                	mov    esi,eax
c0024da5:	89 d7                	mov    edi,edx
c0024da7:	2b 35 00 02 04 c0    	sub    esi,DWORD PTR ds:0xc0040200
c0024dad:	a3 00 02 04 c0       	mov    ds:0xc0040200,eax
c0024db2:	1b 3d 04 02 04 c0    	sbb    edi,DWORD PTR ds:0xc0040204
c0024db8:	89 35 08 02 04 c0    	mov    DWORD PTR ds:0xc0040208,esi
c0024dbe:	89 3d 0c 02 04 c0    	mov    DWORD PTR ds:0xc004020c,edi
c0024dc4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0024dca:	89 15 04 02 04 c0    	mov    DWORD PTR ds:0xc0040204,edx
c0024dd0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0024dd3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0024dd6:	01 c6                	add    esi,eax
c0024dd8:	11 d7                	adc    edi,edx
c0024dda:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0024ddd:	83 ec 0c             	sub    esp,0xc
c0024de0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0024de3:	53                   	push   ebx
c0024de4:	e8 8e b4 fd ff       	call   c0000277 <switchToThreadASM>
c0024de9:	0f 20 c0             	mov    eax,cr0
c0024dec:	83 c8 08             	or     eax,0x8
c0024def:	0f 22 c0             	mov    cr0,eax
c0024df2:	83 c4 10             	add    esp,0x10
c0024df5:	5b                   	pop    ebx
c0024df6:	5e                   	pop    esi
c0024df7:	5f                   	pop    edi
c0024df8:	c3                   	ret    
c0024df9:	8d 76 00             	lea    esi,[esi+0x0]
c0024dfc:	31 c0                	xor    eax,eax
c0024dfe:	eb 90                	jmp    c0024d90 <switchToThread(ThreadControlBlock*)+0x30>
c0024e00:	5b                   	pop    ebx
c0024e01:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c0024e0b:	5e                   	pop    esi
c0024e0c:	5f                   	pop    edi
c0024e0d:	c3                   	ret    
c0024e0e:	66 90                	xchg   ax,ax

c0024e10 <Process::addArgs(char**)>:
c0024e10:	57                   	push   edi
c0024e11:	56                   	push   esi
c0024e12:	53                   	push   ebx
c0024e13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024e17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0024e1b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0024e25:	85 ff                	test   edi,edi
c0024e27:	74 4f                	je     c0024e78 <Process::addArgs(char**)+0x68>
c0024e29:	8b 07                	mov    eax,DWORD PTR [edi]
c0024e2b:	85 c0                	test   eax,eax
c0024e2d:	74 49                	je     c0024e78 <Process::addArgs(char**)+0x68>
c0024e2f:	31 db                	xor    ebx,ebx
c0024e31:	8d 76 00             	lea    esi,[esi+0x0]
c0024e34:	83 ec 0c             	sub    esp,0xc
c0024e37:	50                   	push   eax
c0024e38:	e8 33 b7 fd ff       	call   c0000570 <strlen>
c0024e3d:	83 c0 01             	add    eax,0x1
c0024e40:	89 04 24             	mov    DWORD PTR [esp],eax
c0024e43:	e8 fb 17 ff ff       	call   c0016643 <malloc>
c0024e48:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0024e4f:	5a                   	pop    edx
c0024e50:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0024e53:	59                   	pop    ecx
c0024e54:	83 c3 01             	add    ebx,0x1
c0024e57:	52                   	push   edx
c0024e58:	50                   	push   eax
c0024e59:	e8 e2 b7 fd ff       	call   c0000640 <strcpy>
c0024e5e:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0024e64:	83 c4 10             	add    esp,0x10
c0024e67:	83 c1 01             	add    ecx,0x1
c0024e6a:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0024e70:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0024e73:	85 c0                	test   eax,eax
c0024e75:	75 bd                	jne    c0024e34 <Process::addArgs(char**)+0x24>
c0024e77:	90                   	nop
c0024e78:	5b                   	pop    ebx
c0024e79:	5e                   	pop    esi
c0024e7a:	5f                   	pop    edi
c0024e7b:	c3                   	ret    

c0024e7c <Process::Process(char const*, Process*, char**)>:
c0024e7c:	56                   	push   esi
c0024e7d:	53                   	push   ebx
c0024e7e:	83 ec 14             	sub    esp,0x14
c0024e81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024e85:	05 0c 02 00 00       	add    eax,0x20c
c0024e8a:	bb 07 00 00 00       	mov    ebx,0x7
c0024e8f:	89 c6                	mov    esi,eax
c0024e91:	8d 76 00             	lea    esi,[esi+0x0]
c0024e94:	85 db                	test   ebx,ebx
c0024e96:	78 14                	js     c0024eac <Process::Process(char const*, Process*, char**)+0x30>
c0024e98:	83 ec 0c             	sub    esp,0xc
c0024e9b:	56                   	push   esi
c0024e9c:	e8 77 a3 00 00       	call   c002f218 <ThreadControlBlock::ThreadControlBlock()>
c0024ea1:	83 c4 10             	add    esp,0x10
c0024ea4:	83 c6 5f             	add    esi,0x5f
c0024ea7:	83 eb 01             	sub    ebx,0x1
c0024eaa:	eb e8                	jmp    c0024e94 <Process::Process(char const*, Process*, char**)+0x18>
c0024eac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024eb0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024eb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ebb:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0024ec2:	83 ec 0c             	sub    esp,0xc
c0024ec5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024ec9:	e8 f6 b3 ff ff       	call   c00202c4 <KeNewProcessEnv(Process*)>
c0024ece:	83 c4 10             	add    esp,0x10
c0024ed1:	89 c2                	mov    edx,eax
c0024ed3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ed7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ee1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0024eea:	a1 a0 47 03 c0       	mov    eax,ds:0xc00347a0
c0024eef:	8d 50 01             	lea    edx,[eax+0x1]
c0024ef2:	89 15 a0 47 03 c0    	mov    DWORD PTR ds:0xc00347a0,edx
c0024ef8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024efc:	89 02                	mov    DWORD PTR [edx],eax
c0024efe:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0024f06:	83 ec 0c             	sub    esp,0xc
c0024f09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024f0d:	e8 31 17 ff ff       	call   c0016643 <malloc>
c0024f12:	83 c4 10             	add    esp,0x10
c0024f15:	89 c3                	mov    ebx,eax
c0024f17:	83 ec 08             	sub    esp,0x8
c0024f1a:	6a 00                	push   0x0
c0024f1c:	53                   	push   ebx
c0024f1d:	e8 d2 3c ff ff       	call   c0018bf4 <VAS::VAS(bool)>
c0024f22:	83 c4 10             	add    esp,0x10
c0024f25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f29:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0024f2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f33:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024f3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f41:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024f45:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0024f4b:	e8 cb bd ff ff       	call   c0020d1b <KeInitSignals()>
c0024f50:	89 c2                	mov    edx,eax
c0024f52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f56:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0024f5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f60:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024f66:	85 c0                	test   eax,eax
c0024f68:	74 42                	je     c0024fac <Process::Process(char const*, Process*, char**)+0x130>
c0024f6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f6e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024f74:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0024f7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f7e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0024f84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f88:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024f8e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024f94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f98:	05 0c 01 00 00       	add    eax,0x10c
c0024f9d:	83 ec 08             	sub    esp,0x8
c0024fa0:	52                   	push   edx
c0024fa1:	50                   	push   eax
c0024fa2:	e8 99 b6 fd ff       	call   c0000640 <strcpy>
c0024fa7:	83 c4 10             	add    esp,0x10
c0024faa:	eb 64                	jmp    c0025010 <Process::Process(char const*, Process*, char**)+0x194>
c0024fac:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0024fb4:	83 ec 0c             	sub    esp,0xc
c0024fb7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024fbb:	e8 83 16 ff ff       	call   c0016643 <malloc>
c0024fc0:	83 c4 10             	add    esp,0x10
c0024fc3:	89 c3                	mov    ebx,eax
c0024fc5:	83 ec 08             	sub    esp,0x8
c0024fc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024fcc:	53                   	push   ebx
c0024fcd:	e8 20 28 ff ff       	call   c00177f2 <VgaText::VgaText(char const*)>
c0024fd2:	83 c4 10             	add    esp,0x10
c0024fd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024fd9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0024fdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024fe3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0024fe9:	83 ec 0c             	sub    esp,0xc
c0024fec:	50                   	push   eax
c0024fed:	e8 9e 20 ff ff       	call   c0017090 <addToTerminalCycle(VgaText*)>
c0024ff2:	83 c4 10             	add    esp,0x10
c0024ff5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ff9:	05 0c 01 00 00       	add    eax,0x10c
c0024ffe:	83 ec 08             	sub    esp,0x8
c0025001:	68 9d 31 03 c0       	push   0xc003319d
c0025006:	50                   	push   eax
c0025007:	e8 34 b6 fd ff       	call   c0000640 <strcpy>
c002500c:	83 c4 10             	add    esp,0x10
c002500f:	90                   	nop
c0025010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025014:	83 c0 0c             	add    eax,0xc
c0025017:	83 ec 08             	sub    esp,0x8
c002501a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002501e:	50                   	push   eax
c002501f:	e8 1c b6 fd ff       	call   c0000640 <strcpy>
c0025024:	83 c4 10             	add    esp,0x10
c0025027:	83 ec 08             	sub    esp,0x8
c002502a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002502e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025032:	e8 d9 fd ff ff       	call   c0024e10 <Process::addArgs(char**)>
c0025037:	83 c4 10             	add    esp,0x10
c002503a:	83 ec 08             	sub    esp,0x8
c002503d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025041:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025045:	e8 45 ed ff ff       	call   c0023d8f <Thr::loadProgramIntoMemory(Process*, char const*)>
c002504a:	83 c4 10             	add    esp,0x10
c002504d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025051:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025055:	83 f0 01             	xor    eax,0x1
c0025058:	88 c2                	mov    dl,al
c002505a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002505e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0025064:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025069:	83 ec 04             	sub    esp,0x4
c002506c:	50                   	push   eax
c002506d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025071:	68 f4 31 03 c0       	push   0xc00331f4
c0025076:	e8 56 44 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c002507b:	83 c4 10             	add    esp,0x10
c002507e:	90                   	nop
c002507f:	83 c4 14             	add    esp,0x14
c0025082:	5b                   	pop    ebx
c0025083:	5e                   	pop    esi
c0025084:	c3                   	ret    
c0025085:	90                   	nop
c0025086:	66 90                	xchg   ax,ax

c0025088 <Process::Process(bool, char const*, Process*, char**)>:
c0025088:	56                   	push   esi
c0025089:	53                   	push   ebx
c002508a:	83 ec 24             	sub    esp,0x24
c002508d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0025091:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0025095:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025099:	05 0c 02 00 00       	add    eax,0x20c
c002509e:	bb 07 00 00 00       	mov    ebx,0x7
c00250a3:	89 c6                	mov    esi,eax
c00250a5:	8d 76 00             	lea    esi,[esi+0x0]
c00250a8:	85 db                	test   ebx,ebx
c00250aa:	78 14                	js     c00250c0 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00250ac:	83 ec 0c             	sub    esp,0xc
c00250af:	56                   	push   esi
c00250b0:	e8 63 a1 00 00       	call   c002f218 <ThreadControlBlock::ThreadControlBlock()>
c00250b5:	83 c4 10             	add    esp,0x10
c00250b8:	83 c6 5f             	add    esi,0x5f
c00250bb:	83 eb 01             	sub    ebx,0x1
c00250be:	eb e8                	jmp    c00250a8 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00250c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00250c4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00250cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00250cf:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00250d6:	83 ec 0c             	sub    esp,0xc
c00250d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00250dd:	e8 e2 b1 ff ff       	call   c00202c4 <KeNewProcessEnv(Process*)>
c00250e2:	83 c4 10             	add    esp,0x10
c00250e5:	89 c2                	mov    edx,eax
c00250e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00250eb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00250f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00250f5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00250fe:	a1 a0 47 03 c0       	mov    eax,ds:0xc00347a0
c0025103:	8d 50 01             	lea    edx,[eax+0x1]
c0025106:	89 15 a0 47 03 c0    	mov    DWORD PTR ds:0xc00347a0,edx
c002510c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0025110:	89 02                	mov    DWORD PTR [edx],eax
c0025112:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c002511a:	83 ec 0c             	sub    esp,0xc
c002511d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0025121:	e8 1d 15 ff ff       	call   c0016643 <malloc>
c0025126:	83 c4 10             	add    esp,0x10
c0025129:	89 c3                	mov    ebx,eax
c002512b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0025130:	83 ec 08             	sub    esp,0x8
c0025133:	50                   	push   eax
c0025134:	53                   	push   ebx
c0025135:	e8 ba 3a ff ff       	call   c0018bf4 <VAS::VAS(bool)>
c002513a:	83 c4 10             	add    esp,0x10
c002513d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025141:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0025147:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002514b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0025155:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025159:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002515d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0025163:	e8 b3 bb ff ff       	call   c0020d1b <KeInitSignals()>
c0025168:	89 c2                	mov    edx,eax
c002516a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002516e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0025174:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025178:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c002517e:	85 c0                	test   eax,eax
c0025180:	74 42                	je     c00251c4 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0025182:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025186:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c002518c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0025192:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025196:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c002519c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00251a0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00251a6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00251ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00251b0:	05 0c 01 00 00       	add    eax,0x10c
c00251b5:	83 ec 08             	sub    esp,0x8
c00251b8:	52                   	push   edx
c00251b9:	50                   	push   eax
c00251ba:	e8 81 b4 fd ff       	call   c0000640 <strcpy>
c00251bf:	83 c4 10             	add    esp,0x10
c00251c2:	eb 64                	jmp    c0025228 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c00251c4:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00251cc:	83 ec 0c             	sub    esp,0xc
c00251cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00251d3:	e8 6b 14 ff ff       	call   c0016643 <malloc>
c00251d8:	83 c4 10             	add    esp,0x10
c00251db:	89 c3                	mov    ebx,eax
c00251dd:	83 ec 08             	sub    esp,0x8
c00251e0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00251e4:	53                   	push   ebx
c00251e5:	e8 08 26 ff ff       	call   c00177f2 <VgaText::VgaText(char const*)>
c00251ea:	83 c4 10             	add    esp,0x10
c00251ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00251f1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00251f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00251fb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0025201:	83 ec 0c             	sub    esp,0xc
c0025204:	50                   	push   eax
c0025205:	e8 86 1e ff ff       	call   c0017090 <addToTerminalCycle(VgaText*)>
c002520a:	83 c4 10             	add    esp,0x10
c002520d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025211:	05 0c 01 00 00       	add    eax,0x10c
c0025216:	83 ec 08             	sub    esp,0x8
c0025219:	68 9d 31 03 c0       	push   0xc003319d
c002521e:	50                   	push   eax
c002521f:	e8 1c b4 fd ff       	call   c0000640 <strcpy>
c0025224:	83 c4 10             	add    esp,0x10
c0025227:	90                   	nop
c0025228:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002522c:	83 c0 0c             	add    eax,0xc
c002522f:	83 ec 08             	sub    esp,0x8
c0025232:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025236:	50                   	push   eax
c0025237:	e8 04 b4 fd ff       	call   c0000640 <strcpy>
c002523c:	83 c4 10             	add    esp,0x10
c002523f:	83 ec 08             	sub    esp,0x8
c0025242:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025246:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002524a:	e8 c1 fb ff ff       	call   c0024e10 <Process::addArgs(char**)>
c002524f:	83 c4 10             	add    esp,0x10
c0025252:	90                   	nop
c0025253:	83 c4 24             	add    esp,0x24
c0025256:	5b                   	pop    ebx
c0025257:	5e                   	pop    esi
c0025258:	c3                   	ret    
c0025259:	8d 76 00             	lea    esi,[esi+0x0]

c002525c <taskStartupFunction>:
c002525c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025261:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0025264:	c3                   	ret    
c0025265:	8d 76 00             	lea    esi,[esi+0x0]

c0025268 <KeDisablePreemption()>:
c0025268:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c002526d:	85 c0                	test   eax,eax
c002526f:	75 13                	jne    c0025284 <KeDisablePreemption()+0x1c>
c0025271:	8a 15 c0 a9 03 c0    	mov    dl,BYTE PTR ds:0xc003a9c0
c0025277:	c6 05 c0 a9 03 c0 00 	mov    BYTE PTR ds:0xc003a9c0,0x0
c002527e:	88 15 a8 01 04 c0    	mov    BYTE PTR ds:0xc00401a8,dl
c0025284:	83 c0 01             	add    eax,0x1
c0025287:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c002528c:	c3                   	ret    
c002528d:	8d 76 00             	lea    esi,[esi+0x0]

c0025290 <KeRestorePreemption()>:
c0025290:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c0025295:	83 e8 01             	sub    eax,0x1
c0025298:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c002529d:	75 0d                	jne    c00252ac <KeRestorePreemption()+0x1c>
c002529f:	a0 a8 01 04 c0       	mov    al,ds:0xc00401a8
c00252a4:	a2 c0 a9 03 c0       	mov    ds:0xc003a9c0,al
c00252a9:	8d 76 00             	lea    esi,[esi+0x0]
c00252ac:	c3                   	ret    
c00252ad:	90                   	nop
c00252ae:	66 90                	xchg   ax,ax

c00252b0 <Process::createThread(void (*)(void*), void*, int)>:
c00252b0:	57                   	push   edi
c00252b1:	31 c9                	xor    ecx,ecx
c00252b3:	56                   	push   esi
c00252b4:	53                   	push   ebx
c00252b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00252b9:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00252c0:	89 f2                	mov    edx,esi
c00252c2:	66 90                	xchg   ax,ax
c00252c4:	0f b7 c2             	movzx  eax,dx
c00252c7:	80 e2 01             	and    dl,0x1
c00252ca:	74 14                	je     c00252e0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00252cc:	d1 f8                	sar    eax,1
c00252ce:	83 c1 01             	add    ecx,0x1
c00252d1:	89 c2                	mov    edx,eax
c00252d3:	83 f9 10             	cmp    ecx,0x10
c00252d6:	75 ec                	jne    c00252c4 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00252d8:	31 db                	xor    ebx,ebx
c00252da:	89 d8                	mov    eax,ebx
c00252dc:	5b                   	pop    ebx
c00252dd:	5e                   	pop    esi
c00252de:	5f                   	pop    edi
c00252df:	c3                   	ret    
c00252e0:	b8 01 00 00 00       	mov    eax,0x1
c00252e5:	d3 e0                	shl    eax,cl
c00252e7:	09 c6                	or     esi,eax
c00252e9:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00252ec:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00252f3:	01 c0                	add    eax,eax
c00252f5:	01 c8                	add    eax,ecx
c00252f7:	8d 04 80             	lea    eax,[eax+eax*4]
c00252fa:	01 d8                	add    eax,ebx
c00252fc:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0025303:	75 0b                	jne    c0025310 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0025305:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c002530f:	90                   	nop
c0025310:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0025316:	83 ec 0c             	sub    esp,0xc
c0025319:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c002531c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c002531f:	01 c0                	add    eax,eax
c0025321:	01 c8                	add    eax,ecx
c0025323:	8d 3c 80             	lea    edi,[eax+eax*4]
c0025326:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0025329:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c002532f:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0025335:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025339:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c002533f:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0025345:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c002534b:	89 ca                	mov    edx,ecx
c002534d:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0025354:	f7 da                	neg    edx
c0025356:	c1 e2 15             	shl    edx,0x15
c0025359:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c002535f:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0025365:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0025369:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0025373:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0025379:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002537d:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0025383:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c002538d:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0025397:	68 00 01 00 00       	push   0x100
c002539c:	e8 a2 12 ff ff       	call   c0016643 <malloc>
c00253a1:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00253a4:	58                   	pop    eax
c00253a5:	5a                   	pop    edx
c00253a6:	53                   	push   ebx
c00253a7:	68 ec 01 04 c0       	push   0xc00401ec
c00253ac:	e8 ff 9b 00 00       	call   c002efb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00253b1:	83 c4 10             	add    esp,0x10
c00253b4:	89 d8                	mov    eax,ebx
c00253b6:	5b                   	pop    ebx
c00253b7:	5e                   	pop    esi
c00253b8:	5f                   	pop    edi
c00253b9:	c3                   	ret    
c00253ba:	66 90                	xchg   ax,ax

c00253bc <Process::createUserThread()>:
c00253bc:	83 ec 0c             	sub    esp,0xc
c00253bf:	68 80 00 00 00       	push   0x80
c00253c4:	6a 00                	push   0x0
c00253c6:	68 08 4d 02 c0       	push   0xc0024d08
c00253cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00253cf:	50                   	push   eax
c00253d0:	e8 db fe ff ff       	call   c00252b0 <Process::createThread(void (*)(void*), void*, int)>
c00253d5:	83 c4 1c             	add    esp,0x1c
c00253d8:	c3                   	ret    
c00253d9:	8d 76 00             	lea    esi,[esi+0x0]

c00253dc <setupMultitasking(void (*)())>:
c00253dc:	56                   	push   esi
c00253dd:	53                   	push   ebx
c00253de:	83 ec 04             	sub    esp,0x4
c00253e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00253e5:	eb 11                	jmp    c00253f8 <setupMultitasking(void (*)())+0x1c>
c00253e7:	90                   	nop
c00253e8:	83 ec 0c             	sub    esp,0xc
c00253eb:	68 ec 01 04 c0       	push   0xc00401ec
c00253f0:	e8 ff 9a 00 00       	call   c002eef4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00253f5:	83 c4 10             	add    esp,0x10
c00253f8:	83 ec 0c             	sub    esp,0xc
c00253fb:	68 ec 01 04 c0       	push   0xc00401ec
c0025400:	e8 cb 9a 00 00       	call   c002eed0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025405:	83 c4 10             	add    esp,0x10
c0025408:	84 c0                	test   al,al
c002540a:	74 dc                	je     c00253e8 <setupMultitasking(void (*)())+0xc>
c002540c:	83 ec 0c             	sub    esp,0xc
c002540f:	68 24 07 00 00       	push   0x724
c0025414:	e8 2a 12 ff ff       	call   c0016643 <malloc>
c0025419:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0025420:	89 c3                	mov    ebx,eax
c0025422:	6a 00                	push   0x0
c0025424:	68 a1 31 03 c0       	push   0xc00331a1
c0025429:	6a 01                	push   0x1
c002542b:	50                   	push   eax
c002542c:	e8 57 fc ff ff       	call   c0025088 <Process::Process(bool, char const*, Process*, char**)>
c0025431:	83 c4 14             	add    esp,0x14
c0025434:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c002543a:	89 1d f8 01 04 c0    	mov    DWORD PTR ds:0xc00401f8,ebx
c0025440:	50                   	push   eax
c0025441:	e8 9f 1e ff ff       	call   c00172e5 <setActiveTerminal(VgaText*)>
c0025446:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c002544d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0025457:	83 c8 01             	or     eax,0x1
c002545a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0025461:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0025467:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002546a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0025474:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c002547a:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0025480:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c002548a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0025494:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c002549e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00254a4:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00254ae:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00254b4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00254be:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00254c5:	e8 79 11 ff ff       	call   c0016643 <malloc>
c00254ca:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00254d0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00254d6:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00254dc:	5a                   	pop    edx
c00254dd:	59                   	pop    ecx
c00254de:	68 9d 31 03 c0       	push   0xc003319d
c00254e3:	50                   	push   eax
c00254e4:	e8 57 b1 fd ff       	call   c0000640 <strcpy>
c00254e9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00254f0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00254f4:	83 c4 14             	add    esp,0x14
c00254f7:	5b                   	pop    ebx
c00254f8:	5e                   	pop    esi
c00254f9:	e9 6b ad fd ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00254fe:	66 90                	xchg   ax,ax

c0025500 <schedule()>:
c0025500:	8b 15 cc 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401cc
c0025506:	85 d2                	test   edx,edx
c0025508:	74 0e                	je     c0025518 <schedule()+0x18>
c002550a:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c0025514:	c3                   	ret    
c0025515:	8d 76 00             	lea    esi,[esi+0x0]
c0025518:	53                   	push   ebx
c0025519:	83 ec 14             	sub    esp,0x14
c002551c:	68 ec 01 04 c0       	push   0xc00401ec
c0025521:	e8 aa 99 00 00       	call   c002eed0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025526:	83 c4 10             	add    esp,0x10
c0025529:	84 c0                	test   al,al
c002552b:	75 3f                	jne    c002556c <schedule()+0x6c>
c002552d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025532:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0025535:	83 fa 01             	cmp    edx,0x1
c0025538:	74 3a                	je     c0025574 <schedule()+0x74>
c002553a:	66 90                	xchg   ax,ax
c002553c:	83 ec 0c             	sub    esp,0xc
c002553f:	68 ec 01 04 c0       	push   0xc00401ec
c0025544:	e8 a3 99 00 00       	call   c002eeec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025549:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025550:	89 c3                	mov    ebx,eax
c0025552:	e8 9d 99 00 00       	call   c002eef4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025557:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c002555e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025561:	e8 fa f7 ff ff       	call   c0024d60 <switchToThread(ThreadControlBlock*)>
c0025566:	83 c4 10             	add    esp,0x10
c0025569:	8d 76 00             	lea    esi,[esi+0x0]
c002556c:	83 c4 08             	add    esp,0x8
c002556f:	5b                   	pop    ebx
c0025570:	c3                   	ret    
c0025571:	8d 76 00             	lea    esi,[esi+0x0]
c0025574:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c002557b:	83 ec 08             	sub    esp,0x8
c002557e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025583:	50                   	push   eax
c0025584:	68 ec 01 04 c0       	push   0xc00401ec
c0025589:	e8 22 9a 00 00       	call   c002efb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002558e:	83 c4 10             	add    esp,0x10
c0025591:	eb a9                	jmp    c002553c <schedule()+0x3c>
c0025593:	90                   	nop

c0025594 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0025594:	83 ec 0c             	sub    esp,0xc
c0025597:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002559c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00255a0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00255a3:	e8 58 ff ff ff       	call   c0025500 <schedule()>
c00255a8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00255ad:	83 e8 01             	sub    eax,0x1
c00255b0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00255b5:	75 01                	jne    c00255b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00255b7:	fb                   	sti    
c00255b8:	83 c4 0c             	add    esp,0xc
c00255bb:	c3                   	ret    

c00255bc <blockTask(TaskState)>:
c00255bc:	83 ec 0c             	sub    esp,0xc
c00255bf:	fa                   	cli    
c00255c0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00255c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00255c9:	83 c0 01             	add    eax,0x1
c00255cc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00255d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00255d6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00255d9:	e8 22 ff ff ff       	call   c0025500 <schedule()>
c00255de:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00255e3:	83 e8 01             	sub    eax,0x1
c00255e6:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00255eb:	75 03                	jne    c00255f0 <blockTask(TaskState)+0x34>
c00255ed:	fb                   	sti    
c00255ee:	66 90                	xchg   ax,ax
c00255f0:	83 c4 0c             	add    esp,0xc
c00255f3:	c3                   	ret    

c00255f4 <waitTask(int, int*, int)>:
c00255f4:	83 ec 18             	sub    esp,0x18
c00255f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00255fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025600:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0025603:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0025607:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002560c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c002560f:	6a 07                	push   0x7
c0025611:	e8 a6 ff ff ff       	call   c00255bc <blockTask(TaskState)>
c0025616:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002561b:	83 c4 10             	add    esp,0x10
c002561e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0025621:	85 d2                	test   edx,edx
c0025623:	74 0b                	je     c0025630 <waitTask(int, int*, int)+0x3c>
c0025625:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0025628:	89 02                	mov    DWORD PTR [edx],eax
c002562a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002562f:	90                   	nop
c0025630:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0025633:	83 c4 0c             	add    esp,0xc
c0025636:	c3                   	ret    
c0025637:	90                   	nop

c0025638 <milliTenthSleepUntil(unsigned int)>:
c0025638:	83 ec 0c             	sub    esp,0xc
c002563b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002563f:	39 05 ec f3 03 c0    	cmp    DWORD PTR ds:0xc003f3ec,eax
c0025645:	76 05                	jbe    c002564c <milliTenthSleepUntil(unsigned int)+0x14>
c0025647:	90                   	nop
c0025648:	83 c4 0c             	add    esp,0xc
c002564b:	c3                   	ret    
c002564c:	fa                   	cli    
c002564d:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0025653:	83 ec 08             	sub    esp,0x8
c0025656:	83 c2 01             	add    edx,0x1
c0025659:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c002565f:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025665:	83 c1 01             	add    ecx,0x1
c0025668:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c002566e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0025674:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0025677:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002567c:	50                   	push   eax
c002567d:	68 e0 01 04 c0       	push   0xc00401e0
c0025682:	e8 29 99 00 00       	call   c002efb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025687:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c002568e:	e8 29 ff ff ff       	call   c00255bc <blockTask(TaskState)>
c0025693:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025698:	83 c4 10             	add    esp,0x10
c002569b:	83 e8 01             	sub    eax,0x1
c002569e:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00256a3:	85 c0                	test   eax,eax
c00256a5:	75 09                	jne    c00256b0 <milliTenthSleepUntil(unsigned int)+0x78>
c00256a7:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00256ac:	85 c0                	test   eax,eax
c00256ae:	75 14                	jne    c00256c4 <milliTenthSleepUntil(unsigned int)+0x8c>
c00256b0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00256b5:	83 e8 01             	sub    eax,0x1
c00256b8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00256bd:	75 89                	jne    c0025648 <milliTenthSleepUntil(unsigned int)+0x10>
c00256bf:	fb                   	sti    
c00256c0:	83 c4 0c             	add    esp,0xc
c00256c3:	c3                   	ret    
c00256c4:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00256ce:	e8 2d fe ff ff       	call   c0025500 <schedule()>
c00256d3:	eb db                	jmp    c00256b0 <milliTenthSleepUntil(unsigned int)+0x78>
c00256d5:	8d 76 00             	lea    esi,[esi+0x0]

c00256d8 <milliTenthSleep(unsigned int)>:
c00256d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00256dc:	a1 ec f3 03 c0       	mov    eax,ds:0xc003f3ec
c00256e1:	01 c2                	add    edx,eax
c00256e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00256e7:	e9 4c ff ff ff       	jmp    c0025638 <milliTenthSleepUntil(unsigned int)>

c00256ec <sleep(unsigned int)>:
c00256ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256f0:	8d 04 80             	lea    eax,[eax+eax*4]
c00256f3:	8d 04 80             	lea    eax,[eax+eax*4]
c00256f6:	8d 04 80             	lea    eax,[eax+eax*4]
c00256f9:	8d 04 80             	lea    eax,[eax+eax*4]
c00256fc:	c1 e0 04             	shl    eax,0x4
c00256ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0025703:	eb d3                	jmp    c00256d8 <milliTenthSleep(unsigned int)>
c0025705:	8d 76 00             	lea    esi,[esi+0x0]

c0025708 <taskReturned>:
c0025708:	83 ec 18             	sub    esp,0x18
c002570b:	68 20 32 03 c0       	push   0xc0033220
c0025710:	e8 d5 ad ff ff       	call   c00204ea <KePanic(char const*)>
c0025715:	83 c4 10             	add    esp,0x10
c0025718:	83 ec 0c             	sub    esp,0xc
c002571b:	6a 02                	push   0x2
c002571d:	e8 9a fe ff ff       	call   c00255bc <blockTask(TaskState)>
c0025722:	fa                   	cli    
c0025723:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025728:	83 c0 01             	add    eax,0x1
c002572b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025730:	e8 cb fd ff ff       	call   c0025500 <schedule()>
c0025735:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002573a:	83 c4 10             	add    esp,0x10
c002573d:	83 e8 01             	sub    eax,0x1
c0025740:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025745:	85 c0                	test   eax,eax
c0025747:	75 cf                	jne    c0025718 <taskReturned+0x10>
c0025749:	fb                   	sti    
c002574a:	eb cc                	jmp    c0025718 <taskReturned+0x10>

c002574c <Thr::processFromPID(int)>:
c002574c:	57                   	push   edi
c002574d:	56                   	push   esi
c002574e:	53                   	push   ebx
c002574f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0025753:	fa                   	cli    
c0025754:	8b 0d d0 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401d0
c002575a:	83 ec 0c             	sub    esp,0xc
c002575d:	83 c1 01             	add    ecx,0x1
c0025760:	68 ec 01 04 c0       	push   0xc00401ec
c0025765:	89 0d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ecx
c002576b:	e8 7c 97 00 00       	call   c002eeec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025770:	83 c4 10             	add    esp,0x10
c0025773:	89 c7                	mov    edi,eax
c0025775:	eb 15                	jmp    c002578c <Thr::processFromPID(int)+0x40>
c0025777:	90                   	nop
c0025778:	83 ec 0c             	sub    esp,0xc
c002577b:	68 ec 01 04 c0       	push   0xc00401ec
c0025780:	e8 67 97 00 00       	call   c002eeec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025785:	83 c4 10             	add    esp,0x10
c0025788:	39 f8                	cmp    eax,edi
c002578a:	74 50                	je     c00257dc <Thr::processFromPID(int)+0x90>
c002578c:	83 ec 0c             	sub    esp,0xc
c002578f:	68 ec 01 04 c0       	push   0xc00401ec
c0025794:	e8 53 97 00 00       	call   c002eeec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025799:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00257a0:	89 c3                	mov    ebx,eax
c00257a2:	e8 4d 97 00 00       	call   c002eef4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00257a7:	58                   	pop    eax
c00257a8:	5a                   	pop    edx
c00257a9:	53                   	push   ebx
c00257aa:	68 ec 01 04 c0       	push   0xc00401ec
c00257af:	e8 fc 97 00 00       	call   c002efb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00257b4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00257b7:	83 c4 10             	add    esp,0x10
c00257ba:	39 30                	cmp    DWORD PTR [eax],esi
c00257bc:	75 ba                	jne    c0025778 <Thr::processFromPID(int)+0x2c>
c00257be:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00257c3:	83 e8 01             	sub    eax,0x1
c00257c6:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00257cb:	74 0b                	je     c00257d8 <Thr::processFromPID(int)+0x8c>
c00257cd:	8d 76 00             	lea    esi,[esi+0x0]
c00257d0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00257d3:	5b                   	pop    ebx
c00257d4:	5e                   	pop    esi
c00257d5:	5f                   	pop    edi
c00257d6:	c3                   	ret    
c00257d7:	90                   	nop
c00257d8:	fb                   	sti    
c00257d9:	eb f5                	jmp    c00257d0 <Thr::processFromPID(int)+0x84>
c00257db:	90                   	nop
c00257dc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00257e1:	83 e8 01             	sub    eax,0x1
c00257e4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00257e9:	75 05                	jne    c00257f0 <Thr::processFromPID(int)+0xa4>
c00257eb:	fb                   	sti    
c00257ec:	5b                   	pop    ebx
c00257ed:	5e                   	pop    esi
c00257ee:	5f                   	pop    edi
c00257ef:	c3                   	ret    
c00257f0:	5b                   	pop    ebx
c00257f1:	31 c0                	xor    eax,eax
c00257f3:	5e                   	pop    esi
c00257f4:	5f                   	pop    edi
c00257f5:	c3                   	ret    
c00257f6:	66 90                	xchg   ax,ax

c00257f8 <unblockTask(ThreadControlBlock*)>:
c00257f8:	53                   	push   ebx
c00257f9:	83 ec 08             	sub    esp,0x8
c00257fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025800:	fa                   	cli    
c0025801:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025806:	83 c0 01             	add    eax,0x1
c0025809:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002580e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0025811:	85 c0                	test   eax,eax
c0025813:	74 67                	je     c002587c <unblockTask(ThreadControlBlock*)+0x84>
c0025815:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0025818:	83 f8 01             	cmp    eax,0x1
c002581b:	74 37                	je     c0025854 <unblockTask(ThreadControlBlock*)+0x5c>
c002581d:	83 ec 0c             	sub    esp,0xc
c0025820:	68 ec 01 04 c0       	push   0xc00401ec
c0025825:	e8 c2 96 00 00       	call   c002eeec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c002582a:	83 c4 10             	add    esp,0x10
c002582d:	85 c0                	test   eax,eax
c002582f:	75 1b                	jne    c002584c <unblockTask(ThreadControlBlock*)+0x54>
c0025831:	eb 5d                	jmp    c0025890 <unblockTask(ThreadControlBlock*)+0x98>
c0025833:	90                   	nop
c0025834:	83 ec 08             	sub    esp,0x8
c0025837:	50                   	push   eax
c0025838:	68 ec 01 04 c0       	push   0xc00401ec
c002583d:	e8 ca 99 00 00       	call   c002f20c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0025842:	83 c4 10             	add    esp,0x10
c0025845:	85 c0                	test   eax,eax
c0025847:	74 47                	je     c0025890 <unblockTask(ThreadControlBlock*)+0x98>
c0025849:	8d 76 00             	lea    esi,[esi+0x0]
c002584c:	39 c3                	cmp    ebx,eax
c002584e:	75 e4                	jne    c0025834 <unblockTask(ThreadControlBlock*)+0x3c>
c0025850:	eb 12                	jmp    c0025864 <unblockTask(ThreadControlBlock*)+0x6c>
c0025852:	66 90                	xchg   ax,ax
c0025854:	83 ec 0c             	sub    esp,0xc
c0025857:	68 bf 31 03 c0       	push   0xc00331bf
c002585c:	e8 70 3c ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0025861:	83 c4 10             	add    esp,0x10
c0025864:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025869:	83 e8 01             	sub    eax,0x1
c002586c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025871:	75 01                	jne    c0025874 <unblockTask(ThreadControlBlock*)+0x7c>
c0025873:	fb                   	sti    
c0025874:	83 c4 08             	add    esp,0x8
c0025877:	5b                   	pop    ebx
c0025878:	c3                   	ret    
c0025879:	8d 76 00             	lea    esi,[esi+0x0]
c002587c:	83 ec 0c             	sub    esp,0xc
c002587f:	68 a8 31 03 c0       	push   0xc00331a8
c0025884:	e8 48 3c ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0025889:	83 c4 10             	add    esp,0x10
c002588c:	eb d6                	jmp    c0025864 <unblockTask(ThreadControlBlock*)+0x6c>
c002588e:	66 90                	xchg   ax,ax
c0025890:	83 ec 08             	sub    esp,0x8
c0025893:	53                   	push   ebx
c0025894:	68 ec 01 04 c0       	push   0xc00401ec
c0025899:	e8 12 97 00 00       	call   c002efb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002589e:	83 c4 10             	add    esp,0x10
c00258a1:	eb c1                	jmp    c0025864 <unblockTask(ThreadControlBlock*)+0x6c>
c00258a3:	90                   	nop

c00258a4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00258a4:	55                   	push   ebp
c00258a5:	57                   	push   edi
c00258a6:	56                   	push   esi
c00258a7:	53                   	push   ebx
c00258a8:	83 ec 1c             	sub    esp,0x1c
c00258ab:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00258af:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00258b2:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00258b8:	85 ed                	test   ebp,ebp
c00258ba:	7e 28                	jle    c00258e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00258bc:	31 f6                	xor    esi,esi
c00258be:	66 90                	xchg   ax,ax
c00258c0:	83 ec 0c             	sub    esp,0xc
c00258c3:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00258ca:	83 c6 01             	add    esi,0x1
c00258cd:	57                   	push   edi
c00258ce:	e8 80 0d ff ff       	call   c0016653 <free>
c00258d3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00258d6:	83 c4 10             	add    esp,0x10
c00258d9:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00258df:	7f df                	jg     c00258c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00258e1:	8d 76 00             	lea    esi,[esi+0x0]
c00258e4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00258ee:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00258f3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00258f6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00258f9:	d3 c0                	rol    eax,cl
c00258fb:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0025902:	21 c8                	and    eax,ecx
c0025904:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c002590b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c002590e:	89 f7                	mov    edi,esi
c0025910:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0025918:	0f 85 72 01 00 00    	jne    c0025a90 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c002591e:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0025924:	85 ed                	test   ebp,ebp
c0025926:	74 1c                	je     c0025944 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0025928:	83 ec 0c             	sub    esp,0xc
c002592b:	55                   	push   ebp
c002592c:	e8 af a8 ff ff       	call   c00201e0 <EnvVarContainer::~EnvVarContainer()>
c0025931:	59                   	pop    ecx
c0025932:	5e                   	pop    esi
c0025933:	6a 0c                	push   0xc
c0025935:	55                   	push   ebp
c0025936:	e8 69 3a ff ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c002593b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c002593e:	83 c4 10             	add    esp,0x10
c0025941:	89 f7                	mov    edi,esi
c0025943:	90                   	nop
c0025944:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c002594a:	85 c0                	test   eax,eax
c002594c:	0f 84 b2 00 00 00    	je     c0025a04 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0025952:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0025955:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025959:	31 c9                	xor    ecx,ecx
c002595b:	eb 17                	jmp    c0025974 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c002595d:	8d 76 00             	lea    esi,[esi+0x0]
c0025960:	83 c1 01             	add    ecx,0x1
c0025963:	83 f9 10             	cmp    ecx,0x10
c0025966:	0f 84 98 00 00 00    	je     c0025a04 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c002596c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025972:	66 90                	xchg   ax,ax
c0025974:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c002597b:	d3 fa                	sar    edx,cl
c002597d:	80 e2 01             	and    dl,0x1
c0025980:	74 de                	je     c0025960 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025982:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0025985:	01 d2                	add    edx,edx
c0025987:	01 ca                	add    edx,ecx
c0025989:	8d 14 92             	lea    edx,[edx+edx*4]
c002598c:	01 d0                	add    eax,edx
c002598e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0025994:	83 fd 07             	cmp    ebp,0x7
c0025997:	75 c7                	jne    c0025960 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025999:	05 40 02 00 00       	add    eax,0x240
c002599e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00259a1:	83 fd ff             	cmp    ebp,0xffffffff
c00259a4:	0f 8c ee 00 00 00    	jl     c0025a98 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00259aa:	0f 84 ac 01 00 00    	je     c0025b5c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00259b0:	85 ed                	test   ebp,ebp
c00259b2:	0f 84 90 01 00 00    	je     c0025b48 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00259b8:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00259ba:	75 a4                	jne    c0025960 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00259bc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00259c2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00259c6:	01 d0                	add    eax,edx
c00259c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00259cc:	83 ec 0c             	sub    esp,0xc
c00259cf:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00259d5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00259d8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00259de:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00259e5:	50                   	push   eax
c00259e6:	e8 0d fe ff ff       	call   c00257f8 <unblockTask(ThreadControlBlock*)>
c00259eb:	83 c4 10             	add    esp,0x10
c00259ee:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00259f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00259f5:	89 f7                	mov    edi,esi
c00259f7:	83 c1 01             	add    ecx,0x1
c00259fa:	83 f9 10             	cmp    ecx,0x10
c00259fd:	0f 85 69 ff ff ff    	jne    c002596c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0025a03:	90                   	nop
c0025a04:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0025a0a:	85 c0                	test   eax,eax
c0025a0c:	74 62                	je     c0025a70 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0025a0e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0025a14:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0025a1a:	74 54                	je     c0025a70 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0025a1c:	83 ec 0c             	sub    esp,0xc
c0025a1f:	68 ec 01 04 c0       	push   0xc00401ec
c0025a24:	e8 c3 94 00 00       	call   c002eeec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025a29:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025a30:	89 c7                	mov    edi,eax
c0025a32:	e8 99 94 00 00       	call   c002eed0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025a37:	83 c4 10             	add    esp,0x10
c0025a3a:	84 c0                	test   al,al
c0025a3c:	0f 84 ce 00 00 00    	je     c0025b10 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0025a42:	66 90                	xchg   ax,ax
c0025a44:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025a47:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0025a4d:	85 d2                	test   edx,edx
c0025a4f:	74 0f                	je     c0025a60 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0025a51:	83 ec 0c             	sub    esp,0xc
c0025a54:	8b 02                	mov    eax,DWORD PTR [edx]
c0025a56:	52                   	push   edx
c0025a57:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0025a5a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025a5d:	83 c4 10             	add    esp,0x10
c0025a60:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0025a6a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0025a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0025a70:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0025a76:	85 db                	test   ebx,ebx
c0025a78:	74 16                	je     c0025a90 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0025a7a:	83 ec 0c             	sub    esp,0xc
c0025a7d:	53                   	push   ebx
c0025a7e:	e8 bb 2c ff ff       	call   c001873e <VAS::~VAS()>
c0025a83:	58                   	pop    eax
c0025a84:	5a                   	pop    edx
c0025a85:	6a 14                	push   0x14
c0025a87:	53                   	push   ebx
c0025a88:	e8 17 39 ff ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c0025a8d:	83 c4 10             	add    esp,0x10
c0025a90:	83 c4 1c             	add    esp,0x1c
c0025a93:	5b                   	pop    ebx
c0025a94:	5e                   	pop    esi
c0025a95:	5f                   	pop    edi
c0025a96:	5d                   	pop    ebp
c0025a97:	c3                   	ret    
c0025a98:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025a9c:	83 ec 0c             	sub    esp,0xc
c0025a9f:	68 54 32 03 c0       	push   0xc0033254
c0025aa4:	e8 41 aa ff ff       	call   c00204ea <KePanic(char const*)>
c0025aa9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025aac:	83 c4 10             	add    esp,0x10
c0025aaf:	89 f7                	mov    edi,esi
c0025ab1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025ab5:	e9 a6 fe ff ff       	jmp    c0025960 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025aba:	66 90                	xchg   ax,ax
c0025abc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0025ac2:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0025ac8:	75 1e                	jne    c0025ae8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025aca:	83 ec 0c             	sub    esp,0xc
c0025acd:	68 bc 32 03 c0       	push   0xc00332bc
c0025ad2:	e8 fa 39 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0025ad7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0025ade:	e8 d9 fa ff ff       	call   c00255bc <blockTask(TaskState)>
c0025ae3:	83 c4 10             	add    esp,0x10
c0025ae6:	66 90                	xchg   ax,ax
c0025ae8:	83 ec 08             	sub    esp,0x8
c0025aeb:	56                   	push   esi
c0025aec:	68 ec 01 04 c0       	push   0xc00401ec
c0025af1:	e8 ba 94 00 00       	call   c002efb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025af6:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025afd:	e8 ea 93 00 00       	call   c002eeec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025b02:	83 c4 10             	add    esp,0x10
c0025b05:	39 f8                	cmp    eax,edi
c0025b07:	0f 84 37 ff ff ff    	je     c0025a44 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0025b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0025b10:	83 ec 0c             	sub    esp,0xc
c0025b13:	68 ec 01 04 c0       	push   0xc00401ec
c0025b18:	e8 cf 93 00 00       	call   c002eeec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025b1d:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025b24:	89 c6                	mov    esi,eax
c0025b26:	e8 c9 93 00 00       	call   c002eef4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025b2b:	83 c4 10             	add    esp,0x10
c0025b2e:	39 f3                	cmp    ebx,esi
c0025b30:	74 b6                	je     c0025ae8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025b32:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0025b35:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025b38:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0025b3e:	75 a8                	jne    c0025ae8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025b40:	e9 77 ff ff ff       	jmp    c0025abc <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0025b45:	8d 76 00             	lea    esi,[esi+0x0]
c0025b48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025b4c:	83 ec 0c             	sub    esp,0xc
c0025b4f:	68 88 32 03 c0       	push   0xc0033288
c0025b54:	e9 4b ff ff ff       	jmp    c0025aa4 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0025b59:	8d 76 00             	lea    esi,[esi+0x0]
c0025b5c:	8b 36                	mov    esi,DWORD PTR [esi]
c0025b5e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025b62:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0025b65:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025b68:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0025b6e:	01 d7                	add    edi,edx
c0025b70:	89 f8                	mov    eax,edi
c0025b72:	e9 51 fe ff ff       	jmp    c00259c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0025b77:	90                   	nop

c0025b78 <cleanerTaskFunction(void*)>:
c0025b78:	53                   	push   ebx
c0025b79:	83 ec 08             	sub    esp,0x8
c0025b7c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025b81:	83 e8 01             	sub    eax,0x1
c0025b84:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025b89:	75 01                	jne    c0025b8c <cleanerTaskFunction(void*)+0x14>
c0025b8b:	fb                   	sti    
c0025b8c:	fa                   	cli    
c0025b8d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025b92:	80 3d b4 01 04 c0 00 	cmp    BYTE PTR ds:0xc00401b4,0x0
c0025b99:	8d 50 01             	lea    edx,[eax+0x1]
c0025b9c:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025ba2:	0f 84 c4 00 00 00    	je     c0025c6c <cleanerTaskFunction(void*)+0xf4>
c0025ba8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025bad:	85 c0                	test   eax,eax
c0025baf:	75 03                	jne    c0025bb4 <cleanerTaskFunction(void*)+0x3c>
c0025bb1:	fb                   	sti    
c0025bb2:	66 90                	xchg   ax,ax
c0025bb4:	c6 05 b4 01 04 c0 00 	mov    BYTE PTR ds:0xc00401b4,0x0
c0025bbb:	fa                   	cli    
c0025bbc:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0025bc2:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025bc8:	83 c2 01             	add    edx,0x1
c0025bcb:	83 c1 01             	add    ecx,0x1
c0025bce:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025bd4:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0025bda:	fa                   	cli    
c0025bdb:	8b 1d d0 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401d0
c0025be1:	83 c3 01             	add    ebx,0x1
c0025be4:	89 1d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ebx
c0025bea:	eb 28                	jmp    c0025c14 <cleanerTaskFunction(void*)+0x9c>
c0025bec:	83 ec 0c             	sub    esp,0xc
c0025bef:	68 d4 01 04 c0       	push   0xc00401d4
c0025bf4:	e8 f3 92 00 00       	call   c002eeec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025bf9:	c7 04 24 d4 01 04 c0 	mov    DWORD PTR [esp],0xc00401d4
c0025c00:	89 c3                	mov    ebx,eax
c0025c02:	e8 ed 92 00 00       	call   c002eef4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025c07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025c0a:	e8 95 fc ff ff       	call   c00258a4 <cleanupTerminatedTask(ThreadControlBlock*)>
c0025c0f:	83 c4 10             	add    esp,0x10
c0025c12:	66 90                	xchg   ax,ax
c0025c14:	83 ec 0c             	sub    esp,0xc
c0025c17:	68 d4 01 04 c0       	push   0xc00401d4
c0025c1c:	e8 af 92 00 00       	call   c002eed0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025c21:	83 c4 10             	add    esp,0x10
c0025c24:	84 c0                	test   al,al
c0025c26:	74 c4                	je     c0025bec <cleanerTaskFunction(void*)+0x74>
c0025c28:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025c2d:	83 e8 01             	sub    eax,0x1
c0025c30:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025c35:	75 01                	jne    c0025c38 <cleanerTaskFunction(void*)+0xc0>
c0025c37:	fb                   	sti    
c0025c38:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025c3d:	83 e8 01             	sub    eax,0x1
c0025c40:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0025c45:	0f 85 31 ff ff ff    	jne    c0025b7c <cleanerTaskFunction(void*)+0x4>
c0025c4b:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0025c50:	85 c0                	test   eax,eax
c0025c52:	0f 84 24 ff ff ff    	je     c0025b7c <cleanerTaskFunction(void*)+0x4>
c0025c58:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0025c62:	e8 99 f8 ff ff       	call   c0025500 <schedule()>
c0025c67:	e9 10 ff ff ff       	jmp    c0025b7c <cleanerTaskFunction(void*)+0x4>
c0025c6c:	83 ec 0c             	sub    esp,0xc
c0025c6f:	6a 02                	push   0x2
c0025c71:	e8 1e f9 ff ff       	call   c0025594 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025c76:	83 c4 10             	add    esp,0x10
c0025c79:	e9 36 ff ff ff       	jmp    c0025bb4 <cleanerTaskFunction(void*)+0x3c>
c0025c7e:	66 90                	xchg   ax,ax

c0025c80 <terminateTask(int)>:
c0025c80:	83 ec 14             	sub    esp,0x14
c0025c83:	fa                   	cli    
c0025c84:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0025c8a:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025c90:	83 c2 01             	add    edx,0x1
c0025c93:	83 c1 01             	add    ecx,0x1
c0025c96:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025c9c:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0025ca2:	fa                   	cli    
c0025ca3:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025ca8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025cac:	83 c0 01             	add    eax,0x1
c0025caf:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025cb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025cb9:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0025cbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025cc1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025cc4:	50                   	push   eax
c0025cc5:	68 d4 01 04 c0       	push   0xc00401d4
c0025cca:	e8 e1 92 00 00       	call   c002efb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025ccf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025cd4:	83 c4 10             	add    esp,0x10
c0025cd7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0025cde:	a1 b0 01 04 c0       	mov    eax,ds:0xc00401b0
c0025ce3:	85 c0                	test   eax,eax
c0025ce5:	74 65                	je     c0025d4c <terminateTask(int)+0xcc>
c0025ce7:	83 ec 0c             	sub    esp,0xc
c0025cea:	c6 05 b4 01 04 c0 01 	mov    BYTE PTR ds:0xc00401b4,0x1
c0025cf1:	50                   	push   eax
c0025cf2:	e8 01 fb ff ff       	call   c00257f8 <unblockTask(ThreadControlBlock*)>
c0025cf7:	83 c4 10             	add    esp,0x10
c0025cfa:	66 90                	xchg   ax,ax
c0025cfc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025d01:	83 e8 01             	sub    eax,0x1
c0025d04:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025d09:	75 01                	jne    c0025d0c <terminateTask(int)+0x8c>
c0025d0b:	fb                   	sti    
c0025d0c:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025d11:	83 e8 01             	sub    eax,0x1
c0025d14:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0025d19:	75 09                	jne    c0025d24 <terminateTask(int)+0xa4>
c0025d1b:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c0025d22:	75 3c                	jne    c0025d60 <terminateTask(int)+0xe0>
c0025d24:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025d29:	83 e8 01             	sub    eax,0x1
c0025d2c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025d31:	75 01                	jne    c0025d34 <terminateTask(int)+0xb4>
c0025d33:	fb                   	sti    
c0025d34:	fa                   	cli    
c0025d35:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025d3a:	83 c0 01             	add    eax,0x1
c0025d3d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025d42:	66 90                	xchg   ax,ax
c0025d44:	e8 b7 f7 ff ff       	call   c0025500 <schedule()>
c0025d49:	eb d9                	jmp    c0025d24 <terminateTask(int)+0xa4>
c0025d4b:	90                   	nop
c0025d4c:	83 ec 0c             	sub    esp,0xc
c0025d4f:	68 d6 31 03 c0       	push   0xc00331d6
c0025d54:	e8 78 37 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0025d59:	83 c4 10             	add    esp,0x10
c0025d5c:	eb 9e                	jmp    c0025cfc <terminateTask(int)+0x7c>
c0025d5e:	66 90                	xchg   ax,ax
c0025d60:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0025d6a:	eb d8                	jmp    c0025d44 <terminateTask(int)+0xc4>

c0025d6c <Thr::terminateFromIRQ(int)>:
c0025d6c:	83 ec 18             	sub    esp,0x18
c0025d6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025d73:	50                   	push   eax
c0025d74:	e8 07 ff ff ff       	call   c0025c80 <terminateTask(int)>
c0025d79:	8d 76 00             	lea    esi,[esi+0x0]

c0025d7c <__static_initialization_and_destruction_0(int, int)>:
c0025d7c:	83 ec 0c             	sub    esp,0xc
c0025d7f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0025d84:	0f 85 8e 00 00 00    	jne    c0025e18 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025d8a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0025d92:	0f 85 80 00 00 00    	jne    c0025e18 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025d98:	83 ec 0c             	sub    esp,0xc
c0025d9b:	68 ec 01 04 c0       	push   0xc00401ec
c0025da0:	e8 bf 94 00 00       	call   c002f264 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025da5:	83 c4 10             	add    esp,0x10
c0025da8:	83 ec 04             	sub    esp,0x4
c0025dab:	68 98 3e 03 c0       	push   0xc0033e98
c0025db0:	68 ec 01 04 c0       	push   0xc00401ec
c0025db5:	68 14 f2 02 c0       	push   0xc002f214
c0025dba:	e8 95 35 ff ff       	call   c0019354 <__cxa_atexit>
c0025dbf:	83 c4 10             	add    esp,0x10
c0025dc2:	83 ec 0c             	sub    esp,0xc
c0025dc5:	68 e0 01 04 c0       	push   0xc00401e0
c0025dca:	e8 95 94 00 00       	call   c002f264 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025dcf:	83 c4 10             	add    esp,0x10
c0025dd2:	83 ec 04             	sub    esp,0x4
c0025dd5:	68 98 3e 03 c0       	push   0xc0033e98
c0025dda:	68 e0 01 04 c0       	push   0xc00401e0
c0025ddf:	68 14 f2 02 c0       	push   0xc002f214
c0025de4:	e8 6b 35 ff ff       	call   c0019354 <__cxa_atexit>
c0025de9:	83 c4 10             	add    esp,0x10
c0025dec:	83 ec 0c             	sub    esp,0xc
c0025def:	68 d4 01 04 c0       	push   0xc00401d4
c0025df4:	e8 6b 94 00 00       	call   c002f264 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025df9:	83 c4 10             	add    esp,0x10
c0025dfc:	83 ec 04             	sub    esp,0x4
c0025dff:	68 98 3e 03 c0       	push   0xc0033e98
c0025e04:	68 d4 01 04 c0       	push   0xc00401d4
c0025e09:	68 14 f2 02 c0       	push   0xc002f214
c0025e0e:	e8 41 35 ff ff       	call   c0019354 <__cxa_atexit>
c0025e13:	83 c4 10             	add    esp,0x10
c0025e16:	66 90                	xchg   ax,ax
c0025e18:	90                   	nop
c0025e19:	83 c4 0c             	add    esp,0xc
c0025e1c:	c3                   	ret    
c0025e1d:	8d 76 00             	lea    esi,[esi+0x0]

c0025e20 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0025e20:	83 ec 0c             	sub    esp,0xc
c0025e23:	83 ec 08             	sub    esp,0x8
c0025e26:	68 ff ff 00 00       	push   0xffff
c0025e2b:	6a 01                	push   0x1
c0025e2d:	e8 4a ff ff ff       	call   c0025d7c <__static_initialization_and_destruction_0(int, int)>
c0025e32:	83 c4 10             	add    esp,0x10
c0025e35:	83 c4 0c             	add    esp,0xc
c0025e38:	c3                   	ret    

c0025e39 <Vm::inbv(unsigned short)>:
c0025e39:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025e3d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025e42:	75 06                	jne    c0025e4a <Vm::inbv(unsigned short)+0x11>
c0025e44:	a0 2c 02 04 c0       	mov    al,ds:0xc004022c
c0025e49:	c3                   	ret    
c0025e4a:	ec                   	in     al,dx
c0025e4b:	c3                   	ret    

c0025e4c <Vm::outbv(unsigned short, unsigned char)>:
c0025e4c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025e50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025e54:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025e59:	75 25                	jne    c0025e80 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0025e5b:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025e61:	8d 51 01             	lea    edx,[ecx+0x1]
c0025e64:	88 81 40 02 04 c0    	mov    BYTE PTR [ecx-0x3ffbfdc0],al
c0025e6a:	89 15 2c 02 04 c0    	mov    DWORD PTR ds:0xc004022c,edx
c0025e70:	83 fa 20             	cmp    edx,0x20
c0025e73:	75 0c                	jne    c0025e81 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0025e75:	c7 05 2c 02 04 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x1f
c0025e7f:	c3                   	ret    
c0025e80:	ee                   	out    dx,al
c0025e81:	c3                   	ret    

c0025e82 <Vm::realToLinear(unsigned short, unsigned short)>:
c0025e82:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025e87:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025e8c:	c1 e0 04             	shl    eax,0x4
c0025e8f:	01 d0                	add    eax,edx
c0025e91:	c3                   	ret    

c0025e92 <Vm::getSegment(unsigned int)>:
c0025e92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025e96:	c1 e8 10             	shr    eax,0x10
c0025e99:	c3                   	ret    

c0025e9a <Vm::getOffset(unsigned int)>:
c0025e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025e9e:	c3                   	ret    

c0025e9f <Vm::mainloop2()>:
c0025e9f:	83 ec 18             	sub    esp,0x18
c0025ea2:	fa                   	cli    
c0025ea3:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025ea9:	6a 02                	push   0x2
c0025eab:	c6 05 25 02 04 c0 01 	mov    BYTE PTR ds:0xc0040225,0x1
c0025eb2:	e8 dd f6 ff ff       	call   c0025594 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025eb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025ebc:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0025ec0:	52                   	push   edx
c0025ec1:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0025ec5:	52                   	push   edx
c0025ec6:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0025eca:	52                   	push   edx
c0025ecb:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0025ecf:	50                   	push   eax
c0025ed0:	e8 3a a3 fd ff       	call   c000020f <goToVM86>
c0025ed5:	83 c4 2c             	add    esp,0x2c
c0025ed8:	c3                   	ret    

c0025ed9 <Vm::mainVm8086Loop(void*)>:
c0025ed9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025ede:	48                   	dec    eax
c0025edf:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025ee4:	75 01                	jne    c0025ee7 <Vm::mainVm8086Loop(void*)+0xe>
c0025ee6:	fb                   	sti    
c0025ee7:	eb b6                	jmp    c0025e9f <Vm::mainloop2()>

c0025ee9 <Vm::mainloop3(unsigned long)>:
c0025ee9:	83 ec 18             	sub    esp,0x18
c0025eec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ef0:	fa                   	cli    
c0025ef1:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025ef7:	6a 02                	push   0x2
c0025ef9:	c6 05 24 02 04 c0 01 	mov    BYTE PTR ds:0xc0040224,0x1
c0025f00:	a3 20 02 04 c0       	mov    ds:0xc0040220,eax
c0025f05:	e8 8a f6 ff ff       	call   c0025594 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025f0a:	83 c4 1c             	add    esp,0x1c
c0025f0d:	eb 90                	jmp    c0025e9f <Vm::mainloop2()>

c0025f0f <Vm::initialise8086()>:
c0025f0f:	83 ec 0c             	sub    esp,0xc
c0025f12:	68 80 00 00 00       	push   0x80
c0025f17:	6a 00                	push   0x0
c0025f19:	68 d9 5e 02 c0       	push   0xc0025ed9
c0025f1e:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025f24:	e8 87 f3 ff ff       	call   c00252b0 <Process::createThread(void (*)(void*), void*, int)>
c0025f29:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0025f30:	a3 28 02 04 c0       	mov    ds:0xc0040228,eax
c0025f35:	68 00 01 00 00       	push   0x100
c0025f3a:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0025f3f:	6a 00                	push   0x0
c0025f41:	6a 00                	push   0x0
c0025f43:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0025f49:	e8 58 2b ff ff       	call   c0018aa6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0025f4e:	83 c4 2c             	add    esp,0x2c
c0025f51:	c3                   	ret    

c0025f52 <Vm::finish8086()>:
c0025f52:	53                   	push   ebx
c0025f53:	83 ec 08             	sub    esp,0x8
c0025f56:	fa                   	cli    
c0025f57:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025f5d:	80 3d 24 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040224,0x0
c0025f64:	75 15                	jne    c0025f7b <Vm::finish8086()+0x29>
c0025f66:	e8 95 f5 ff ff       	call   c0025500 <schedule()>
c0025f6b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025f70:	48                   	dec    eax
c0025f71:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025f76:	75 de                	jne    c0025f56 <Vm::finish8086()+0x4>
c0025f78:	fb                   	sti    
c0025f79:	eb db                	jmp    c0025f56 <Vm::finish8086()+0x4>
c0025f7b:	83 ec 0c             	sub    esp,0xc
c0025f7e:	8b 1d 20 02 04 c0    	mov    ebx,DWORD PTR ds:0xc0040220
c0025f84:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025f8a:	c6 05 24 02 04 c0 00 	mov    BYTE PTR ds:0xc0040224,0x0
c0025f91:	e8 62 f8 ff ff       	call   c00257f8 <unblockTask(ThreadControlBlock*)>
c0025f96:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025f9b:	83 c4 10             	add    esp,0x10
c0025f9e:	8d 50 ff             	lea    edx,[eax-0x1]
c0025fa1:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025fa7:	85 d2                	test   edx,edx
c0025fa9:	75 01                	jne    c0025fac <Vm::finish8086()+0x5a>
c0025fab:	fb                   	sti    
c0025fac:	89 d8                	mov    eax,ebx
c0025fae:	83 c4 08             	add    esp,0x8
c0025fb1:	5b                   	pop    ebx
c0025fb2:	c3                   	ret    

c0025fb3 <Vm::getOutput8086(unsigned char*)>:
c0025fb3:	57                   	push   edi
c0025fb4:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025fba:	56                   	push   esi
c0025fbb:	be 40 02 04 c0       	mov    esi,0xc0040240
c0025fc0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0025fc4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025fc6:	a1 2c 02 04 c0       	mov    eax,ds:0xc004022c
c0025fcb:	5e                   	pop    esi
c0025fcc:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025fd6:	5f                   	pop    edi
c0025fd7:	c3                   	ret    

c0025fd8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0025fd8:	55                   	push   ebp
c0025fd9:	57                   	push   edi
c0025fda:	56                   	push   esi
c0025fdb:	53                   	push   ebx
c0025fdc:	83 ec 0c             	sub    esp,0xc
c0025fdf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025fe3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0025fe7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025feb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025fef:	fa                   	cli    
c0025ff0:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025ff6:	80 3d 25 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040225,0x0
c0025ffd:	75 15                	jne    c0026014 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0025fff:	e8 fc f4 ff ff       	call   c0025500 <schedule()>
c0026004:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0026009:	48                   	dec    eax
c002600a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002600f:	75 de                	jne    c0025fef <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0026011:	fb                   	sti    
c0026012:	eb db                	jmp    c0025fef <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0026014:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c0026019:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0026023:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0026027:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c002602b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c002602f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0026033:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0026037:	0f b7 ff             	movzx  edi,di
c002603a:	0f b7 f6             	movzx  esi,si
c002603d:	50                   	push   eax
c002603e:	6a 20                	push   0x20
c0026040:	6a 00                	push   0x0
c0026042:	68 40 02 04 c0       	push   0xc0040240
c0026047:	e8 a4 a4 fd ff       	call   c00004f0 <memset>
c002604c:	5a                   	pop    edx
c002604d:	59                   	pop    ecx
c002604e:	57                   	push   edi
c002604f:	56                   	push   esi
c0026050:	e8 2d fe ff ff       	call   c0025e82 <Vm::realToLinear(unsigned short, unsigned short)>
c0026055:	83 c4 10             	add    esp,0x10
c0026058:	89 c7                	mov    edi,eax
c002605a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002605e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0026062:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0026064:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0026069:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0026070:	48                   	dec    eax
c0026071:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0026076:	75 01                	jne    c0026079 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0026078:	fb                   	sti    
c0026079:	83 ec 0c             	sub    esp,0xc
c002607c:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0026082:	e8 71 f7 ff ff       	call   c00257f8 <unblockTask(ThreadControlBlock*)>
c0026087:	83 c4 1c             	add    esp,0x1c
c002608a:	b0 01                	mov    al,0x1
c002608c:	5b                   	pop    ebx
c002608d:	5e                   	pop    esi
c002608e:	5f                   	pop    edi
c002608f:	5d                   	pop    ebp
c0026090:	c3                   	ret    

c0026091 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0026091:	55                   	push   ebp
c0026092:	57                   	push   edi
c0026093:	56                   	push   esi
c0026094:	53                   	push   ebx
c0026095:	83 ec 34             	sub    esp,0x34
c0026098:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002609c:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00260a0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00260a4:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c00260a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00260ac:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00260b0:	68 e4 32 03 c0       	push   0xc00332e4
c00260b5:	e8 17 34 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c00260ba:	83 c4 10             	add    esp,0x10
c00260bd:	fa                   	cli    
c00260be:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c00260c4:	8a 1d 25 02 04 c0    	mov    bl,BYTE PTR ds:0xc0040225
c00260ca:	84 db                	test   bl,bl
c00260cc:	75 15                	jne    c00260e3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c00260ce:	e8 2d f4 ff ff       	call   c0025500 <schedule()>
c00260d3:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00260d8:	48                   	dec    eax
c00260d9:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00260de:	75 dd                	jne    c00260bd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c00260e0:	fb                   	sti    
c00260e1:	eb da                	jmp    c00260bd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c00260e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00260e7:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c00260ec:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c00260f6:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00260fa:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00260fe:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0026102:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0026106:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c002610a:	50                   	push   eax
c002610b:	6a 20                	push   0x20
c002610d:	6a 00                	push   0x0
c002610f:	68 40 02 04 c0       	push   0xc0040240
c0026114:	e8 d7 a3 fd ff       	call   c00004f0 <memset>
c0026119:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0026120:	e8 1e 05 ff ff       	call   c0016643 <malloc>
c0026125:	83 c4 0c             	add    esp,0xc
c0026128:	89 c5                	mov    ebp,eax
c002612a:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0026130:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0026134:	50                   	push   eax
c0026135:	e8 9e 45 ff ff       	call   c001a6d8 <File::File(char const*, Process*)>
c002613a:	83 c4 10             	add    esp,0x10
c002613d:	85 ed                	test   ebp,ebp
c002613f:	75 0a                	jne    c002614b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0026141:	83 ec 0c             	sub    esp,0xc
c0026144:	68 06 33 03 c0       	push   0xc0033306
c0026149:	eb 2b                	jmp    c0026176 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c002614b:	50                   	push   eax
c002614c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0026150:	50                   	push   eax
c0026151:	8d 44 24 20          	lea    eax,[esp+0x20]
c0026155:	50                   	push   eax
c0026156:	55                   	push   ebp
c0026157:	e8 9c 48 ff ff       	call   c001a9f8 <File::stat(unsigned long long*, bool*)>
c002615c:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0026160:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0026164:	83 c4 10             	add    esp,0x10
c0026167:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002616c:	74 27                	je     c0026195 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c002616e:	83 ec 0c             	sub    esp,0xc
c0026171:	68 1a 33 03 c0       	push   0xc003331a
c0026176:	e8 6f a3 ff ff       	call   c00204ea <KePanic(char const*)>
c002617b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0026180:	83 c4 10             	add    esp,0x10
c0026183:	48                   	dec    eax
c0026184:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0026189:	85 c0                	test   eax,eax
c002618b:	75 01                	jne    c002618e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c002618d:	fb                   	sti    
c002618e:	31 db                	xor    ebx,ebx
c0026190:	e9 90 00 00 00       	jmp    c0026225 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0026195:	51                   	push   ecx
c0026196:	51                   	push   ecx
c0026197:	6a 01                	push   0x1
c0026199:	55                   	push   ebp
c002619a:	e8 57 45 ff ff       	call   c001a6f6 <File::open(FileOpenMode)>
c002619f:	83 c4 10             	add    esp,0x10
c00261a2:	85 c0                	test   eax,eax
c00261a4:	74 26                	je     c00261cc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c00261a6:	83 ec 0c             	sub    esp,0xc
c00261a9:	68 33 33 03 c0       	push   0xc0033333
c00261ae:	e8 37 a3 ff ff       	call   c00204ea <KePanic(char const*)>
c00261b3:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00261b8:	83 c4 10             	add    esp,0x10
c00261bb:	48                   	dec    eax
c00261bc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00261c1:	85 c0                	test   eax,eax
c00261c3:	75 c9                	jne    c002618e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c00261c5:	fb                   	sti    
c00261c6:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00261ca:	eb 59                	jmp    c0026225 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00261cc:	0f b7 ff             	movzx  edi,di
c00261cf:	50                   	push   eax
c00261d0:	0f b7 f6             	movzx  esi,si
c00261d3:	50                   	push   eax
c00261d4:	57                   	push   edi
c00261d5:	56                   	push   esi
c00261d6:	e8 a7 fc ff ff       	call   c0025e82 <Vm::realToLinear(unsigned short, unsigned short)>
c00261db:	5a                   	pop    edx
c00261dc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00261df:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00261e3:	51                   	push   ecx
c00261e4:	50                   	push   eax
c00261e5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00261e9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00261ed:	55                   	push   ebp
c00261ee:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00261f1:	83 c4 14             	add    esp,0x14
c00261f4:	55                   	push   ebp
c00261f5:	e8 5a 45 ff ff       	call   c001a754 <File::close()>
c00261fa:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00261ff:	83 c4 10             	add    esp,0x10
c0026202:	48                   	dec    eax
c0026203:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c002620a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002620f:	85 c0                	test   eax,eax
c0026211:	75 01                	jne    c0026214 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0026213:	fb                   	sti    
c0026214:	83 ec 0c             	sub    esp,0xc
c0026217:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c002621d:	e8 d6 f5 ff ff       	call   c00257f8 <unblockTask(ThreadControlBlock*)>
c0026222:	83 c4 10             	add    esp,0x10
c0026225:	83 c4 2c             	add    esp,0x2c
c0026228:	88 d8                	mov    al,bl
c002622a:	5b                   	pop    ebx
c002622b:	5e                   	pop    esi
c002622c:	5f                   	pop    edi
c002622d:	5d                   	pop    ebp
c002622e:	c3                   	ret    

c002622f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c002622f:	57                   	push   edi
c0026230:	56                   	push   esi
c0026231:	53                   	push   ebx
c0026232:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0026236:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002623a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002623e:	83 e8 06             	sub    eax,0x6
c0026241:	0f b7 c0             	movzx  eax,ax
c0026244:	50                   	push   eax
c0026245:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c002624a:	50                   	push   eax
c002624b:	e8 32 fc ff ff       	call   c0025e82 <Vm::realToLinear(unsigned short, unsigned short)>
c0026250:	5a                   	pop    edx
c0026251:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0026254:	59                   	pop    ecx
c0026255:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0026258:	8d 51 fa             	lea    edx,[ecx-0x6]
c002625b:	81 e2 ff ff 00 00    	and    edx,0xffff
c0026261:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0026264:	8d 56 02             	lea    edx,[esi+0x2]
c0026267:	66 89 10             	mov    WORD PTR [eax],dx
c002626a:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c002626e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0026272:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0026275:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0026279:	0f b6 f1             	movzx  esi,cl
c002627c:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0026280:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0026286:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c002628a:	0f b6 d5             	movzx  edx,ch
c002628d:	74 0a                	je     c0026299 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c002628f:	c1 e2 08             	shl    edx,0x8
c0026292:	09 f2                	or     edx,esi
c0026294:	80 ce 02             	or     dh,0x2
c0026297:	eb 08                	jmp    c00262a1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0026299:	c1 e2 08             	shl    edx,0x8
c002629c:	09 f2                	or     edx,esi
c002629e:	80 e6 fd             	and    dh,0xfd
c00262a1:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00262a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00262aa:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00262ae:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00262b6:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c00262b9:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00262c1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00262c4:	5b                   	pop    ebx
c00262c5:	5e                   	pop    esi
c00262c6:	5f                   	pop    edi
c00262c7:	c3                   	ret    

c00262c8 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00262c8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00262cd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00262d2:	c1 e0 04             	shl    eax,0x4
c00262d5:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00262d8:	c3                   	ret    

c00262d9 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00262d9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00262de:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00262e3:	c1 e0 04             	shl    eax,0x4
c00262e6:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00262ea:	c3                   	ret    

c00262eb <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00262eb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00262f0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00262f5:	c1 e0 04             	shl    eax,0x4
c00262f8:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00262fb:	c3                   	ret    

c00262fc <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00262fc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026301:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026306:	c1 e0 04             	shl    eax,0x4
c0026309:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002630d:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0026310:	c3                   	ret    

c0026311 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0026311:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026316:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c002631b:	c1 e0 04             	shl    eax,0x4
c002631e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0026322:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0026326:	c3                   	ret    

c0026327 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0026327:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c002632c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026331:	c1 e0 04             	shl    eax,0x4
c0026334:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0026338:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c002633b:	c3                   	ret    

c002633c <Vm::faultHandler(regs*)>:
c002633c:	55                   	push   ebp
c002633d:	57                   	push   edi
c002633e:	56                   	push   esi
c002633f:	53                   	push   ebx
c0026340:	83 ec 2c             	sub    esp,0x2c
c0026343:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0026347:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002634a:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c002634e:	0f b7 f8             	movzx  edi,ax
c0026351:	52                   	push   edx
c0026352:	0f b7 c0             	movzx  eax,ax
c0026355:	50                   	push   eax
c0026356:	e8 27 fb ff ff       	call   c0025e82 <Vm::realToLinear(unsigned short, unsigned short)>
c002635b:	5a                   	pop    edx
c002635c:	59                   	pop    ecx
c002635d:	89 c1                	mov    ecx,eax
c002635f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0026362:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026366:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c002636b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002636f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0026372:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0026376:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c002637b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002637f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0026383:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0026387:	e8 f6 fa ff ff       	call   c0025e82 <Vm::realToLinear(unsigned short, unsigned short)>
c002638c:	5e                   	pop    esi
c002638d:	be 06 00 00 00       	mov    esi,0x6
c0026392:	5d                   	pop    ebp
c0026393:	31 ed                	xor    ebp,ebp
c0026395:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002639a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c002639d:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00263a3:	0f 84 74 02 00 00    	je     c002661d <Vm::faultHandler(regs*)+0x2e1>
c00263a9:	0f 87 94 00 00 00    	ja     c0026443 <Vm::faultHandler(regs*)+0x107>
c00263af:	83 fa 66             	cmp    edx,0x66
c00263b2:	0f 84 e2 01 00 00    	je     c002659a <Vm::faultHandler(regs*)+0x25e>
c00263b8:	77 47                	ja     c0026401 <Vm::faultHandler(regs*)+0xc5>
c00263ba:	83 fa 36             	cmp    edx,0x36
c00263bd:	0f 84 ca 01 00 00    	je     c002658d <Vm::faultHandler(regs*)+0x251>
c00263c3:	77 1a                	ja     c00263df <Vm::faultHandler(regs*)+0xa3>
c00263c5:	83 fa 26             	cmp    edx,0x26
c00263c8:	0f 84 98 01 00 00    	je     c0026566 <Vm::faultHandler(regs*)+0x22a>
c00263ce:	83 fa 2e             	cmp    edx,0x2e
c00263d1:	0f 85 21 06 00 00    	jne    c00269f8 <Vm::faultHandler(regs*)+0x6bc>
c00263d7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00263da:	31 f6                	xor    esi,esi
c00263dc:	41                   	inc    ecx
c00263dd:	eb bb                	jmp    c002639a <Vm::faultHandler(regs*)+0x5e>
c00263df:	83 fa 64             	cmp    edx,0x64
c00263e2:	0f 84 8b 01 00 00    	je     c0026573 <Vm::faultHandler(regs*)+0x237>
c00263e8:	0f 87 92 01 00 00    	ja     c0026580 <Vm::faultHandler(regs*)+0x244>
c00263ee:	83 fa 3e             	cmp    edx,0x3e
c00263f1:	0f 85 01 06 00 00    	jne    c00269f8 <Vm::faultHandler(regs*)+0x6bc>
c00263f7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00263fa:	be 01 00 00 00       	mov    esi,0x1
c00263ff:	eb db                	jmp    c00263dc <Vm::faultHandler(regs*)+0xa0>
c0026401:	83 fa 6d             	cmp    edx,0x6d
c0026404:	0f 84 34 03 00 00    	je     c002673e <Vm::faultHandler(regs*)+0x402>
c002640a:	77 17                	ja     c0026423 <Vm::faultHandler(regs*)+0xe7>
c002640c:	83 fa 67             	cmp    edx,0x67
c002640f:	0f 84 92 01 00 00    	je     c00265a7 <Vm::faultHandler(regs*)+0x26b>
c0026415:	83 fa 6c             	cmp    edx,0x6c
c0026418:	0f 84 b1 02 00 00    	je     c00266cf <Vm::faultHandler(regs*)+0x393>
c002641e:	e9 d5 05 00 00       	jmp    c00269f8 <Vm::faultHandler(regs*)+0x6bc>
c0026423:	83 fa 6f             	cmp    edx,0x6f
c0026426:	0f 84 3d 04 00 00    	je     c0026869 <Vm::faultHandler(regs*)+0x52d>
c002642c:	0f 82 9f 03 00 00    	jb     c00267d1 <Vm::faultHandler(regs*)+0x495>
c0026432:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0026438:	0f 84 76 01 00 00    	je     c00265b4 <Vm::faultHandler(regs*)+0x278>
c002643e:	e9 b5 05 00 00       	jmp    c00269f8 <Vm::faultHandler(regs*)+0x6bc>
c0026443:	81 fa ec 00 00 00    	cmp    edx,0xec
c0026449:	0f 84 51 05 00 00    	je     c00269a0 <Vm::faultHandler(regs*)+0x664>
c002644f:	0f 87 a9 00 00 00    	ja     c00264fe <Vm::faultHandler(regs*)+0x1c2>
c0026455:	81 fa e4 00 00 00    	cmp    edx,0xe4
c002645b:	0f 84 d0 04 00 00    	je     c0026931 <Vm::faultHandler(regs*)+0x5f5>
c0026461:	77 78                	ja     c00264db <Vm::faultHandler(regs*)+0x19f>
c0026463:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0026469:	0f 84 0e 02 00 00    	je     c002667d <Vm::faultHandler(regs*)+0x341>
c002646f:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0026475:	0f 85 7d 05 00 00    	jne    c00269f8 <Vm::faultHandler(regs*)+0x6bc>
c002647b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c002647f:	89 d1                	mov    ecx,edx
c0026481:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0026484:	c1 e1 08             	shl    ecx,0x8
c0026487:	09 ca                	or     edx,ecx
c0026489:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c002648c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0026490:	89 d1                	mov    ecx,edx
c0026492:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0026496:	c1 e1 08             	shl    ecx,0x8
c0026499:	09 ca                	or     edx,ecx
c002649b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c002649e:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00264a2:	89 d1                	mov    ecx,edx
c00264a4:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00264a8:	c1 e1 08             	shl    ecx,0x8
c00264ab:	09 ca                	or     edx,ecx
c00264ad:	81 ca 00 02 02 00    	or     edx,0x20200
c00264b3:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00264b6:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00264ba:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00264c0:	d1 e8                	shr    eax,1
c00264c2:	83 e0 01             	and    eax,0x1
c00264c5:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00264c8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00264cb:	83 c0 06             	add    eax,0x6
c00264ce:	25 ff ff 00 00       	and    eax,0xffff
c00264d3:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00264d6:	e9 19 05 00 00       	jmp    c00269f4 <Vm::faultHandler(regs*)+0x6b8>
c00264db:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00264e1:	0f 84 8f 04 00 00    	je     c0026976 <Vm::faultHandler(regs*)+0x63a>
c00264e7:	0f 82 60 04 00 00    	jb     c002694d <Vm::faultHandler(regs*)+0x611>
c00264ed:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00264f3:	0f 84 94 04 00 00    	je     c002698d <Vm::faultHandler(regs*)+0x651>
c00264f9:	e9 fa 04 00 00       	jmp    c00269f8 <Vm::faultHandler(regs*)+0x6bc>
c00264fe:	81 fa ef 00 00 00    	cmp    edx,0xef
c0026504:	0f 84 d7 04 00 00    	je     c00269e1 <Vm::faultHandler(regs*)+0x6a5>
c002650a:	77 2e                	ja     c002653a <Vm::faultHandler(regs*)+0x1fe>
c002650c:	81 fa ed 00 00 00    	cmp    edx,0xed
c0026512:	0f 84 a4 04 00 00    	je     c00269bc <Vm::faultHandler(regs*)+0x680>
c0026518:	81 fa ee 00 00 00    	cmp    edx,0xee
c002651e:	0f 85 d4 04 00 00    	jne    c00269f8 <Vm::faultHandler(regs*)+0x6bc>
c0026524:	50                   	push   eax
c0026525:	50                   	push   eax
c0026526:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c002652a:	50                   	push   eax
c002652b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c002652f:	50                   	push   eax
c0026530:	e8 17 f9 ff ff       	call   c0025e4c <Vm::outbv(unsigned short, unsigned char)>
c0026535:	e9 9f 04 00 00       	jmp    c00269d9 <Vm::faultHandler(regs*)+0x69d>
c002653a:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0026540:	0f 84 6d 01 00 00    	je     c00266b3 <Vm::faultHandler(regs*)+0x377>
c0026546:	81 fa fb 00 00 00    	cmp    edx,0xfb
c002654c:	0f 84 6f 01 00 00    	je     c00266c1 <Vm::faultHandler(regs*)+0x385>
c0026552:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0026558:	0f 85 9a 04 00 00    	jne    c00269f8 <Vm::faultHandler(regs*)+0x6bc>
c002655e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026561:	e9 76 fe ff ff       	jmp    c00263dc <Vm::faultHandler(regs*)+0xa0>
c0026566:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026569:	be 02 00 00 00       	mov    esi,0x2
c002656e:	e9 69 fe ff ff       	jmp    c00263dc <Vm::faultHandler(regs*)+0xa0>
c0026573:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026576:	be 03 00 00 00       	mov    esi,0x3
c002657b:	e9 5c fe ff ff       	jmp    c00263dc <Vm::faultHandler(regs*)+0xa0>
c0026580:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026583:	be 04 00 00 00       	mov    esi,0x4
c0026588:	e9 4f fe ff ff       	jmp    c00263dc <Vm::faultHandler(regs*)+0xa0>
c002658d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026590:	be 05 00 00 00       	mov    esi,0x5
c0026595:	e9 42 fe ff ff       	jmp    c00263dc <Vm::faultHandler(regs*)+0xa0>
c002659a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002659d:	bd 01 00 00 00       	mov    ebp,0x1
c00265a2:	e9 35 fe ff ff       	jmp    c00263dc <Vm::faultHandler(regs*)+0xa0>
c00265a7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00265aa:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00265af:	e9 28 fe ff ff       	jmp    c00263dc <Vm::faultHandler(regs*)+0xa0>
c00265b4:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00265b7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00265bb:	83 e5 01             	and    ebp,0x1
c00265be:	74 30                	je     c00265f0 <Vm::faultHandler(regs*)+0x2b4>
c00265c0:	83 e9 04             	sub    ecx,0x4
c00265c3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00265c9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00265cf:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00265d2:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00265d5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00265db:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00265df:	0f 84 0c 04 00 00    	je     c00269f1 <Vm::faultHandler(regs*)+0x6b5>
c00265e5:	80 ce 02             	or     dh,0x2
c00265e8:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00265eb:	e9 01 04 00 00       	jmp    c00269f1 <Vm::faultHandler(regs*)+0x6b5>
c00265f0:	83 e9 02             	sub    ecx,0x2
c00265f3:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00265f9:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00265fc:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0026600:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0026606:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c002660a:	74 05                	je     c0026611 <Vm::faultHandler(regs*)+0x2d5>
c002660c:	80 ce 02             	or     dh,0x2
c002660f:	eb 03                	jmp    c0026614 <Vm::faultHandler(regs*)+0x2d8>
c0026611:	80 e6 fd             	and    dh,0xfd
c0026614:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0026618:	e9 d4 03 00 00       	jmp    c00269f1 <Vm::faultHandler(regs*)+0x6b5>
c002661d:	83 e5 01             	and    ebp,0x1
c0026620:	74 2a                	je     c002664c <Vm::faultHandler(regs*)+0x310>
c0026622:	8b 10                	mov    edx,DWORD PTR [eax]
c0026624:	81 e2 ff 0d 00 00    	and    edx,0xdff
c002662a:	81 ca 00 02 02 00    	or     edx,0x20200
c0026630:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0026633:	8b 00                	mov    eax,DWORD PTR [eax]
c0026635:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c002663b:	c1 e8 09             	shr    eax,0x9
c002663e:	83 e0 01             	and    eax,0x1
c0026641:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0026644:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0026647:	83 c0 04             	add    eax,0x4
c002664a:	eb 24                	jmp    c0026670 <Vm::faultHandler(regs*)+0x334>
c002664c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c002664f:	81 ca 00 02 02 00    	or     edx,0x20200
c0026655:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0026658:	0f b7 00             	movzx  eax,WORD PTR [eax]
c002665b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0026661:	c1 e8 09             	shr    eax,0x9
c0026664:	83 e0 01             	and    eax,0x1
c0026667:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c002666a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c002666d:	83 c0 02             	add    eax,0x2
c0026670:	25 ff ff 00 00       	and    eax,0xffff
c0026675:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0026678:	e9 74 03 00 00       	jmp    c00269f1 <Vm::faultHandler(regs*)+0x6b5>
c002667d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026681:	3d ee 00 00 00       	cmp    eax,0xee
c0026686:	75 10                	jne    c0026698 <Vm::faultHandler(regs*)+0x35c>
c0026688:	83 ec 0c             	sub    esp,0xc
c002668b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c002668e:	e8 56 f8 ff ff       	call   c0025ee9 <Vm::mainloop3(unsigned long)>
c0026693:	e9 44 03 00 00       	jmp    c00269dc <Vm::faultHandler(regs*)+0x6a0>
c0026698:	83 ec 0c             	sub    esp,0xc
c002669b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002669f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00266a3:	51                   	push   ecx
c00266a4:	50                   	push   eax
c00266a5:	53                   	push   ebx
c00266a6:	e8 84 fb ff ff       	call   c002622f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00266ab:	83 c4 20             	add    esp,0x20
c00266ae:	e9 41 03 00 00       	jmp    c00269f4 <Vm::faultHandler(regs*)+0x6b8>
c00266b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00266b8:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00266bc:	e9 30 03 00 00       	jmp    c00269f1 <Vm::faultHandler(regs*)+0x6b5>
c00266c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00266c6:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00266ca:	e9 22 03 00 00       	jmp    c00269f1 <Vm::faultHandler(regs*)+0x6b5>
c00266cf:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00266d2:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00266d7:	74 2b                	je     c0026704 <Vm::faultHandler(regs*)+0x3c8>
c00266d9:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00266e0:	76 22                	jbe    c0026704 <Vm::faultHandler(regs*)+0x3c8>
c00266e2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00266e6:	50                   	push   eax
c00266e7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00266eb:	50                   	push   eax
c00266ec:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00266f0:	50                   	push   eax
c00266f1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00266f5:	50                   	push   eax
c00266f6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00266fa:	50                   	push   eax
c00266fb:	6a 6c                	push   0x6c
c00266fd:	6a 6c                	push   0x6c
c00266ff:	e9 bd 01 00 00       	jmp    c00268c1 <Vm::faultHandler(regs*)+0x585>
c0026704:	83 ec 0c             	sub    esp,0xc
c0026707:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c002670b:	0f b7 f6             	movzx  esi,si
c002670e:	50                   	push   eax
c002670f:	e8 25 f7 ff ff       	call   c0025e39 <Vm::inbv(unsigned short)>
c0026714:	83 c4 0c             	add    esp,0xc
c0026717:	0f b6 c0             	movzx  eax,al
c002671a:	50                   	push   eax
c002671b:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c002671f:	50                   	push   eax
c0026720:	56                   	push   esi
c0026721:	e8 d6 fb ff ff       	call   c00262fc <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0026726:	83 c4 10             	add    esp,0x10
c0026729:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002672c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026730:	74 03                	je     c0026735 <Vm::faultHandler(regs*)+0x3f9>
c0026732:	48                   	dec    eax
c0026733:	eb 01                	jmp    c0026736 <Vm::faultHandler(regs*)+0x3fa>
c0026735:	40                   	inc    eax
c0026736:	0f b7 c0             	movzx  eax,ax
c0026739:	e9 8b 00 00 00       	jmp    c00267c9 <Vm::faultHandler(regs*)+0x48d>
c002673e:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0026741:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026744:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026749:	74 29                	je     c0026774 <Vm::faultHandler(regs*)+0x438>
c002674b:	3d ff ff 00 00       	cmp    eax,0xffff
c0026750:	76 22                	jbe    c0026774 <Vm::faultHandler(regs*)+0x438>
c0026752:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026756:	50                   	push   eax
c0026757:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c002675b:	50                   	push   eax
c002675c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026760:	50                   	push   eax
c0026761:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026765:	50                   	push   eax
c0026766:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002676a:	50                   	push   eax
c002676b:	6a 6d                	push   0x6d
c002676d:	6a 6d                	push   0x6d
c002676f:	e9 4d 01 00 00       	jmp    c00268c1 <Vm::faultHandler(regs*)+0x585>
c0026774:	0f b7 c8             	movzx  ecx,ax
c0026777:	0f b7 f6             	movzx  esi,si
c002677a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c002677d:	83 e5 01             	and    ebp,0x1
c0026780:	74 20                	je     c00267a2 <Vm::faultHandler(regs*)+0x466>
c0026782:	ed                   	in     eax,dx
c0026783:	55                   	push   ebp
c0026784:	50                   	push   eax
c0026785:	51                   	push   ecx
c0026786:	56                   	push   esi
c0026787:	e8 9b fb ff ff       	call   c0026327 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c002678c:	83 c4 10             	add    esp,0x10
c002678f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026792:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026796:	74 05                	je     c002679d <Vm::faultHandler(regs*)+0x461>
c0026798:	83 e8 04             	sub    eax,0x4
c002679b:	eb 27                	jmp    c00267c4 <Vm::faultHandler(regs*)+0x488>
c002679d:	83 c0 04             	add    eax,0x4
c00267a0:	eb 22                	jmp    c00267c4 <Vm::faultHandler(regs*)+0x488>
c00267a2:	66 ed                	in     ax,dx
c00267a4:	0f b7 c0             	movzx  eax,ax
c00267a7:	57                   	push   edi
c00267a8:	50                   	push   eax
c00267a9:	51                   	push   ecx
c00267aa:	56                   	push   esi
c00267ab:	e8 61 fb ff ff       	call   c0026311 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00267b0:	83 c4 10             	add    esp,0x10
c00267b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00267b6:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00267ba:	74 05                	je     c00267c1 <Vm::faultHandler(regs*)+0x485>
c00267bc:	83 e8 02             	sub    eax,0x2
c00267bf:	eb 03                	jmp    c00267c4 <Vm::faultHandler(regs*)+0x488>
c00267c1:	83 c0 02             	add    eax,0x2
c00267c4:	25 ff ff 00 00       	and    eax,0xffff
c00267c9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00267cc:	e9 20 02 00 00       	jmp    c00269f1 <Vm::faultHandler(regs*)+0x6b5>
c00267d1:	8d 46 ff             	lea    eax,[esi-0x1]
c00267d4:	0f b6 f0             	movzx  esi,al
c00267d7:	83 fe 05             	cmp    esi,0x5
c00267da:	77 23                	ja     c00267ff <Vm::faultHandler(regs*)+0x4c3>
c00267dc:	ff 24 b5 a8 33 03 c0 	jmp    DWORD PTR [esi*4-0x3ffccc58]
c00267e3:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00267e8:	eb 15                	jmp    c00267ff <Vm::faultHandler(regs*)+0x4c3>
c00267ea:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00267ee:	eb 0f                	jmp    c00267ff <Vm::faultHandler(regs*)+0x4c3>
c00267f0:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00267f4:	eb 09                	jmp    c00267ff <Vm::faultHandler(regs*)+0x4c3>
c00267f6:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00267fa:	eb 03                	jmp    c00267ff <Vm::faultHandler(regs*)+0x4c3>
c00267fc:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00267ff:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0026802:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026807:	74 29                	je     c0026832 <Vm::faultHandler(regs*)+0x4f6>
c0026809:	3d ff ff 00 00       	cmp    eax,0xffff
c002680e:	76 22                	jbe    c0026832 <Vm::faultHandler(regs*)+0x4f6>
c0026810:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026814:	50                   	push   eax
c0026815:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026819:	50                   	push   eax
c002681a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c002681e:	50                   	push   eax
c002681f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026823:	50                   	push   eax
c0026824:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026828:	50                   	push   eax
c0026829:	6a 6e                	push   0x6e
c002682b:	6a 6e                	push   0x6e
c002682d:	e9 8f 00 00 00       	jmp    c00268c1 <Vm::faultHandler(regs*)+0x585>
c0026832:	0f b7 c0             	movzx  eax,ax
c0026835:	52                   	push   edx
c0026836:	52                   	push   edx
c0026837:	50                   	push   eax
c0026838:	57                   	push   edi
c0026839:	e8 8a fa ff ff       	call   c00262c8 <Vm::readByteFromReal(unsigned short, unsigned short)>
c002683e:	59                   	pop    ecx
c002683f:	0f b6 c0             	movzx  eax,al
c0026842:	5e                   	pop    esi
c0026843:	50                   	push   eax
c0026844:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026848:	50                   	push   eax
c0026849:	e8 fe f5 ff ff       	call   c0025e4c <Vm::outbv(unsigned short, unsigned char)>
c002684e:	83 c4 10             	add    esp,0x10
c0026851:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0026854:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026858:	74 03                	je     c002685d <Vm::faultHandler(regs*)+0x521>
c002685a:	48                   	dec    eax
c002685b:	eb 01                	jmp    c002685e <Vm::faultHandler(regs*)+0x522>
c002685d:	40                   	inc    eax
c002685e:	0f b7 c0             	movzx  eax,ax
c0026861:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0026864:	e9 88 01 00 00       	jmp    c00269f1 <Vm::faultHandler(regs*)+0x6b5>
c0026869:	8d 46 ff             	lea    eax,[esi-0x1]
c002686c:	0f b6 f0             	movzx  esi,al
c002686f:	83 fe 05             	cmp    esi,0x5
c0026872:	77 1e                	ja     c0026892 <Vm::faultHandler(regs*)+0x556>
c0026874:	ff 24 b5 c0 33 03 c0 	jmp    DWORD PTR [esi*4-0x3ffccc40]
c002687b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002687f:	eb 11                	jmp    c0026892 <Vm::faultHandler(regs*)+0x556>
c0026881:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0026884:	eb 0c                	jmp    c0026892 <Vm::faultHandler(regs*)+0x556>
c0026886:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0026889:	eb 07                	jmp    c0026892 <Vm::faultHandler(regs*)+0x556>
c002688b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c002688e:	eb 02                	jmp    c0026892 <Vm::faultHandler(regs*)+0x556>
c0026890:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0026892:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0026895:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c002689a:	74 37                	je     c00268d3 <Vm::faultHandler(regs*)+0x597>
c002689c:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00268a2:	76 2f                	jbe    c00268d3 <Vm::faultHandler(regs*)+0x597>
c00268a4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00268a8:	50                   	push   eax
c00268a9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00268ad:	50                   	push   eax
c00268ae:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00268b2:	50                   	push   eax
c00268b3:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00268b7:	50                   	push   eax
c00268b8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00268bc:	50                   	push   eax
c00268bd:	6a 6f                	push   0x6f
c00268bf:	6a 6f                	push   0x6f
c00268c1:	68 4c 33 03 c0       	push   0xc003334c
c00268c6:	e8 06 2c ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c00268cb:	83 c4 20             	add    esp,0x20
c00268ce:	e9 83 01 00 00       	jmp    c0026a56 <Vm::faultHandler(regs*)+0x71a>
c00268d3:	0f b7 d7             	movzx  edx,di
c00268d6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00268d9:	0f b7 c6             	movzx  eax,si
c00268dc:	81 e1 00 04 00 00    	and    ecx,0x400
c00268e2:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00268e5:	83 e5 01             	and    ebp,0x1
c00268e8:	74 1d                	je     c0026907 <Vm::faultHandler(regs*)+0x5cb>
c00268ea:	55                   	push   ebp
c00268eb:	55                   	push   ebp
c00268ec:	50                   	push   eax
c00268ed:	52                   	push   edx
c00268ee:	e8 f8 f9 ff ff       	call   c00262eb <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00268f3:	83 c4 10             	add    esp,0x10
c00268f6:	89 fa                	mov    edx,edi
c00268f8:	ef                   	out    dx,eax
c00268f9:	85 c9                	test   ecx,ecx
c00268fb:	74 05                	je     c0026902 <Vm::faultHandler(regs*)+0x5c6>
c00268fd:	83 ee 04             	sub    esi,0x4
c0026900:	eb 21                	jmp    c0026923 <Vm::faultHandler(regs*)+0x5e7>
c0026902:	83 c6 04             	add    esi,0x4
c0026905:	eb 1c                	jmp    c0026923 <Vm::faultHandler(regs*)+0x5e7>
c0026907:	55                   	push   ebp
c0026908:	55                   	push   ebp
c0026909:	50                   	push   eax
c002690a:	52                   	push   edx
c002690b:	e8 c9 f9 ff ff       	call   c00262d9 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0026910:	83 c4 10             	add    esp,0x10
c0026913:	89 fa                	mov    edx,edi
c0026915:	66 ef                	out    dx,ax
c0026917:	85 c9                	test   ecx,ecx
c0026919:	74 05                	je     c0026920 <Vm::faultHandler(regs*)+0x5e4>
c002691b:	83 ee 02             	sub    esi,0x2
c002691e:	eb 03                	jmp    c0026923 <Vm::faultHandler(regs*)+0x5e7>
c0026920:	83 c6 02             	add    esi,0x2
c0026923:	81 e6 ff ff 00 00    	and    esi,0xffff
c0026929:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c002692c:	e9 c0 00 00 00       	jmp    c00269f1 <Vm::faultHandler(regs*)+0x6b5>
c0026931:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0026938:	83 ec 0c             	sub    esp,0xc
c002693b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002693f:	50                   	push   eax
c0026940:	e8 f4 f4 ff ff       	call   c0025e39 <Vm::inbv(unsigned short)>
c0026945:	0f b6 c0             	movzx  eax,al
c0026948:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c002694b:	eb 3a                	jmp    c0026987 <Vm::faultHandler(regs*)+0x64b>
c002694d:	83 e5 01             	and    ebp,0x1
c0026950:	74 07                	je     c0026959 <Vm::faultHandler(regs*)+0x61d>
c0026952:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026956:	ed                   	in     eax,dx
c0026957:	eb 14                	jmp    c002696d <Vm::faultHandler(regs*)+0x631>
c0026959:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c002695c:	66 31 f6             	xor    si,si
c002695f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0026962:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026966:	66 ed                	in     ax,dx
c0026968:	0f b7 c0             	movzx  eax,ax
c002696b:	09 f0                	or     eax,esi
c002696d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0026970:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0026974:	eb 7e                	jmp    c00269f4 <Vm::faultHandler(regs*)+0x6b8>
c0026976:	52                   	push   edx
c0026977:	52                   	push   edx
c0026978:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c002697c:	50                   	push   eax
c002697d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026981:	50                   	push   eax
c0026982:	e8 c5 f4 ff ff       	call   c0025e4c <Vm::outbv(unsigned short, unsigned char)>
c0026987:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002698b:	eb 4f                	jmp    c00269dc <Vm::faultHandler(regs*)+0x6a0>
c002698d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026990:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026994:	83 e5 01             	and    ebp,0x1
c0026997:	74 03                	je     c002699c <Vm::faultHandler(regs*)+0x660>
c0026999:	ef                   	out    dx,eax
c002699a:	eb d4                	jmp    c0026970 <Vm::faultHandler(regs*)+0x634>
c002699c:	66 ef                	out    dx,ax
c002699e:	eb d0                	jmp    c0026970 <Vm::faultHandler(regs*)+0x634>
c00269a0:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00269a7:	83 ec 0c             	sub    esp,0xc
c00269aa:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00269ae:	50                   	push   eax
c00269af:	e8 85 f4 ff ff       	call   c0025e39 <Vm::inbv(unsigned short)>
c00269b4:	0f b6 c0             	movzx  eax,al
c00269b7:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00269ba:	eb 1d                	jmp    c00269d9 <Vm::faultHandler(regs*)+0x69d>
c00269bc:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00269bf:	83 e5 01             	and    ebp,0x1
c00269c2:	74 03                	je     c00269c7 <Vm::faultHandler(regs*)+0x68b>
c00269c4:	ed                   	in     eax,dx
c00269c5:	eb 0d                	jmp    c00269d4 <Vm::faultHandler(regs*)+0x698>
c00269c7:	66 ed                	in     ax,dx
c00269c9:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00269cc:	0f b7 c0             	movzx  eax,ax
c00269cf:	66 31 d2             	xor    dx,dx
c00269d2:	09 d0                	or     eax,edx
c00269d4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00269d7:	eb 18                	jmp    c00269f1 <Vm::faultHandler(regs*)+0x6b5>
c00269d9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00269dc:	83 c4 10             	add    esp,0x10
c00269df:	eb 13                	jmp    c00269f4 <Vm::faultHandler(regs*)+0x6b8>
c00269e1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00269e4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00269e7:	83 e5 01             	and    ebp,0x1
c00269ea:	74 03                	je     c00269ef <Vm::faultHandler(regs*)+0x6b3>
c00269ec:	ef                   	out    dx,eax
c00269ed:	eb 02                	jmp    c00269f1 <Vm::faultHandler(regs*)+0x6b5>
c00269ef:	66 ef                	out    dx,ax
c00269f1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00269f4:	b0 01                	mov    al,0x1
c00269f6:	eb 60                	jmp    c0026a58 <Vm::faultHandler(regs*)+0x71c>
c00269f8:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00269fc:	50                   	push   eax
c00269fd:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026a01:	50                   	push   eax
c0026a02:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026a06:	50                   	push   eax
c0026a07:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026a0b:	50                   	push   eax
c0026a0c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026a10:	50                   	push   eax
c0026a11:	52                   	push   edx
c0026a12:	52                   	push   edx
c0026a13:	68 79 33 03 c0       	push   0xc0033379
c0026a18:	e8 b4 2a ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0026a1d:	83 c4 20             	add    esp,0x20
c0026a20:	83 ec 0c             	sub    esp,0xc
c0026a23:	6a 60                	push   0x60
c0026a25:	e8 0f f4 ff ff       	call   c0025e39 <Vm::inbv(unsigned short)>
c0026a2a:	83 c4 10             	add    esp,0x10
c0026a2d:	0f b6 d0             	movzx  edx,al
c0026a30:	83 fa 1c             	cmp    edx,0x1c
c0026a33:	74 05                	je     c0026a3a <Vm::faultHandler(regs*)+0x6fe>
c0026a35:	83 fa 5a             	cmp    edx,0x5a
c0026a38:	75 e6                	jne    c0026a20 <Vm::faultHandler(regs*)+0x6e4>
c0026a3a:	0f b6 c0             	movzx  eax,al
c0026a3d:	83 f8 1c             	cmp    eax,0x1c
c0026a40:	74 05                	je     c0026a47 <Vm::faultHandler(regs*)+0x70b>
c0026a42:	83 f8 5a             	cmp    eax,0x5a
c0026a45:	75 0f                	jne    c0026a56 <Vm::faultHandler(regs*)+0x71a>
c0026a47:	83 ec 0c             	sub    esp,0xc
c0026a4a:	6a 60                	push   0x60
c0026a4c:	e8 e8 f3 ff ff       	call   c0025e39 <Vm::inbv(unsigned short)>
c0026a51:	83 c4 10             	add    esp,0x10
c0026a54:	eb e4                	jmp    c0026a3a <Vm::faultHandler(regs*)+0x6fe>
c0026a56:	31 c0                	xor    eax,eax
c0026a58:	83 c4 2c             	add    esp,0x2c
c0026a5b:	5b                   	pop    ebx
c0026a5c:	5e                   	pop    esi
c0026a5d:	5f                   	pop    edi
c0026a5e:	5d                   	pop    ebp
c0026a5f:	c3                   	ret    

c0026a60 <noCopro(unsigned long)>:
c0026a60:	c3                   	ret    

c0026a61 <nmiHandler(regs*, void*)>:
c0026a61:	83 ec 0c             	sub    esp,0xc
c0026a64:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026a69:	83 ec 0c             	sub    esp,0xc
c0026a6c:	50                   	push   eax
c0026a6d:	e8 e4 f2 fe ff       	call   c0015d56 <Computer::handleNMI()>
c0026a72:	83 c4 10             	add    esp,0x10
c0026a75:	90                   	nop
c0026a76:	83 c4 0c             	add    esp,0xc
c0026a79:	c3                   	ret    

c0026a7a <doubleFault(regs*, void*)>:
c0026a7a:	55                   	push   ebp
c0026a7b:	89 e5                	mov    ebp,esp
c0026a7d:	83 ec 08             	sub    esp,0x8
c0026a80:	83 ec 0c             	sub    esp,0xc
c0026a83:	68 d8 33 03 c0       	push   0xc00333d8
c0026a88:	e8 5d 9a ff ff       	call   c00204ea <KePanic(char const*)>
c0026a8d:	83 c4 10             	add    esp,0x10
c0026a90:	90                   	nop
c0026a91:	c9                   	leave  
c0026a92:	c3                   	ret    

c0026a93 <displayDebugInfo(regs*)>:
c0026a93:	83 ec 1c             	sub    esp,0x1c
c0026a96:	0f 20 c0             	mov    eax,cr0
c0026a99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026a9d:	0f 20 d0             	mov    eax,cr2
c0026aa0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026aa4:	0f 20 d8             	mov    eax,cr3
c0026aa7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026aab:	0f 20 e0             	mov    eax,cr4
c0026aae:	89 04 24             	mov    DWORD PTR [esp],eax
c0026ab1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026ab5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0026ab8:	83 ec 08             	sub    esp,0x8
c0026abb:	50                   	push   eax
c0026abc:	68 f4 33 03 c0       	push   0xc00333f4
c0026ac1:	e8 0b 2a ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0026ac6:	83 c4 10             	add    esp,0x10
c0026ac9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026acd:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0026ad0:	83 ec 08             	sub    esp,0x8
c0026ad3:	50                   	push   eax
c0026ad4:	68 e5 33 03 c0       	push   0xc00333e5
c0026ad9:	e8 f3 29 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0026ade:	83 c4 10             	add    esp,0x10
c0026ae1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026ae5:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0026ae8:	83 ec 08             	sub    esp,0x8
c0026aeb:	50                   	push   eax
c0026aec:	68 f0 33 03 c0       	push   0xc00333f0
c0026af1:	e8 db 29 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0026af6:	83 c4 10             	add    esp,0x10
c0026af9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026afd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026b00:	83 ec 08             	sub    esp,0x8
c0026b03:	50                   	push   eax
c0026b04:	68 ff 33 03 c0       	push   0xc00333ff
c0026b09:	e8 c3 29 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0026b0e:	83 c4 10             	add    esp,0x10
c0026b11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026b15:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0026b18:	83 ec 08             	sub    esp,0x8
c0026b1b:	50                   	push   eax
c0026b1c:	68 0a 34 03 c0       	push   0xc003340a
c0026b21:	e8 ab 29 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0026b26:	83 c4 10             	add    esp,0x10
c0026b29:	83 ec 08             	sub    esp,0x8
c0026b2c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026b30:	68 15 34 03 c0       	push   0xc0033415
c0026b35:	e8 97 29 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0026b3a:	83 c4 10             	add    esp,0x10
c0026b3d:	83 ec 08             	sub    esp,0x8
c0026b40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0026b44:	68 20 34 03 c0       	push   0xc0033420
c0026b49:	e8 83 29 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0026b4e:	83 c4 10             	add    esp,0x10
c0026b51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026b55:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0026b58:	c1 e0 05             	shl    eax,0x5
c0026b5b:	8d 90 c0 47 03 c0    	lea    edx,[eax-0x3ffcb840]
c0026b61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026b65:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0026b68:	83 ec 04             	sub    esp,0x4
c0026b6b:	52                   	push   edx
c0026b6c:	50                   	push   eax
c0026b6d:	68 2b 34 03 c0       	push   0xc003342b
c0026b72:	e8 5a 29 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0026b77:	83 c4 10             	add    esp,0x10
c0026b7a:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b7f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b85:	83 ec 0c             	sub    esp,0xc
c0026b88:	50                   	push   eax
c0026b89:	e8 57 07 ff ff       	call   c00172e5 <setActiveTerminal(VgaText*)>
c0026b8e:	83 c4 10             	add    esp,0x10
c0026b91:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b96:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b9c:	83 ec 08             	sub    esp,0x8
c0026b9f:	68 3a 34 03 c0       	push   0xc003343a
c0026ba4:	50                   	push   eax
c0026ba5:	e8 88 0a ff ff       	call   c0017632 <VgaText::puts(char const*)>
c0026baa:	83 c4 10             	add    esp,0x10
c0026bad:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026bb2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026bb8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026bbc:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0026bbf:	83 ec 08             	sub    esp,0x8
c0026bc2:	52                   	push   edx
c0026bc3:	50                   	push   eax
c0026bc4:	e8 23 0a ff ff       	call   c00175ec <VgaText::putx(unsigned int)>
c0026bc9:	83 c4 10             	add    esp,0x10
c0026bcc:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026bd1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026bd7:	83 ec 08             	sub    esp,0x8
c0026bda:	68 48 34 03 c0       	push   0xc0033448
c0026bdf:	50                   	push   eax
c0026be0:	e8 4d 0a ff ff       	call   c0017632 <VgaText::puts(char const*)>
c0026be5:	83 c4 10             	add    esp,0x10
c0026be8:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026bed:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026bf3:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0026bf8:	8b 12                	mov    edx,DWORD PTR [edx]
c0026bfa:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026bfd:	83 c2 0c             	add    edx,0xc
c0026c00:	83 ec 08             	sub    esp,0x8
c0026c03:	52                   	push   edx
c0026c04:	50                   	push   eax
c0026c05:	e8 28 0a ff ff       	call   c0017632 <VgaText::puts(char const*)>
c0026c0a:	83 c4 10             	add    esp,0x10
c0026c0d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026c12:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c18:	83 ec 08             	sub    esp,0x8
c0026c1b:	68 51 34 03 c0       	push   0xc0033451
c0026c20:	50                   	push   eax
c0026c21:	e8 0c 0a ff ff       	call   c0017632 <VgaText::puts(char const*)>
c0026c26:	83 c4 10             	add    esp,0x10
c0026c29:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026c2e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c34:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026c38:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0026c3b:	83 ec 08             	sub    esp,0x8
c0026c3e:	52                   	push   edx
c0026c3f:	50                   	push   eax
c0026c40:	e8 a7 09 ff ff       	call   c00175ec <VgaText::putx(unsigned int)>
c0026c45:	83 c4 10             	add    esp,0x10
c0026c48:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026c4d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c53:	83 ec 08             	sub    esp,0x8
c0026c56:	68 59 34 03 c0       	push   0xc0033459
c0026c5b:	50                   	push   eax
c0026c5c:	e8 d1 09 ff ff       	call   c0017632 <VgaText::puts(char const*)>
c0026c61:	83 c4 10             	add    esp,0x10
c0026c64:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026c69:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c6f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026c73:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0026c76:	83 ec 08             	sub    esp,0x8
c0026c79:	52                   	push   edx
c0026c7a:	50                   	push   eax
c0026c7b:	e8 6c 09 ff ff       	call   c00175ec <VgaText::putx(unsigned int)>
c0026c80:	83 c4 10             	add    esp,0x10
c0026c83:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026c88:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c8e:	83 ec 08             	sub    esp,0x8
c0026c91:	68 61 34 03 c0       	push   0xc0033461
c0026c96:	50                   	push   eax
c0026c97:	e8 96 09 ff ff       	call   c0017632 <VgaText::puts(char const*)>
c0026c9c:	83 c4 10             	add    esp,0x10
c0026c9f:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026ca4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026caa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026cae:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0026cb1:	83 ec 08             	sub    esp,0x8
c0026cb4:	52                   	push   edx
c0026cb5:	50                   	push   eax
c0026cb6:	e8 31 09 ff ff       	call   c00175ec <VgaText::putx(unsigned int)>
c0026cbb:	83 c4 10             	add    esp,0x10
c0026cbe:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026cc3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026cc9:	83 ec 08             	sub    esp,0x8
c0026ccc:	68 69 34 03 c0       	push   0xc0033469
c0026cd1:	50                   	push   eax
c0026cd2:	e8 5b 09 ff ff       	call   c0017632 <VgaText::puts(char const*)>
c0026cd7:	83 c4 10             	add    esp,0x10
c0026cda:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026cdf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026ce5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026ce9:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026cec:	83 ec 08             	sub    esp,0x8
c0026cef:	52                   	push   edx
c0026cf0:	50                   	push   eax
c0026cf1:	e8 f6 08 ff ff       	call   c00175ec <VgaText::putx(unsigned int)>
c0026cf6:	83 c4 10             	add    esp,0x10
c0026cf9:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026cfe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d04:	83 ec 08             	sub    esp,0x8
c0026d07:	68 71 34 03 c0       	push   0xc0033471
c0026d0c:	50                   	push   eax
c0026d0d:	e8 20 09 ff ff       	call   c0017632 <VgaText::puts(char const*)>
c0026d12:	83 c4 10             	add    esp,0x10
c0026d15:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d1a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d20:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026d24:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0026d27:	83 ec 08             	sub    esp,0x8
c0026d2a:	52                   	push   edx
c0026d2b:	50                   	push   eax
c0026d2c:	e8 bb 08 ff ff       	call   c00175ec <VgaText::putx(unsigned int)>
c0026d31:	83 c4 10             	add    esp,0x10
c0026d34:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d39:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d3f:	83 ec 08             	sub    esp,0x8
c0026d42:	68 79 34 03 c0       	push   0xc0033479
c0026d47:	50                   	push   eax
c0026d48:	e8 e5 08 ff ff       	call   c0017632 <VgaText::puts(char const*)>
c0026d4d:	83 c4 10             	add    esp,0x10
c0026d50:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d55:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d5b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026d5f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0026d62:	83 ec 08             	sub    esp,0x8
c0026d65:	52                   	push   edx
c0026d66:	50                   	push   eax
c0026d67:	e8 80 08 ff ff       	call   c00175ec <VgaText::putx(unsigned int)>
c0026d6c:	83 c4 10             	add    esp,0x10
c0026d6f:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d74:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d7a:	83 ec 08             	sub    esp,0x8
c0026d7d:	68 81 34 03 c0       	push   0xc0033481
c0026d82:	50                   	push   eax
c0026d83:	e8 aa 08 ff ff       	call   c0017632 <VgaText::puts(char const*)>
c0026d88:	83 c4 10             	add    esp,0x10
c0026d8b:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d90:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d96:	83 ec 08             	sub    esp,0x8
c0026d99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0026d9d:	50                   	push   eax
c0026d9e:	e8 49 08 ff ff       	call   c00175ec <VgaText::putx(unsigned int)>
c0026da3:	83 c4 10             	add    esp,0x10
c0026da6:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026dab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026db1:	83 ec 08             	sub    esp,0x8
c0026db4:	68 8a 34 03 c0       	push   0xc003348a
c0026db9:	50                   	push   eax
c0026dba:	e8 73 08 ff ff       	call   c0017632 <VgaText::puts(char const*)>
c0026dbf:	83 c4 10             	add    esp,0x10
c0026dc2:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026dc7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026dcd:	83 ec 08             	sub    esp,0x8
c0026dd0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026dd4:	50                   	push   eax
c0026dd5:	e8 12 08 ff ff       	call   c00175ec <VgaText::putx(unsigned int)>
c0026dda:	83 c4 10             	add    esp,0x10
c0026ddd:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026de2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026de8:	83 ec 08             	sub    esp,0x8
c0026deb:	68 92 34 03 c0       	push   0xc0033492
c0026df0:	50                   	push   eax
c0026df1:	e8 3c 08 ff ff       	call   c0017632 <VgaText::puts(char const*)>
c0026df6:	83 c4 10             	add    esp,0x10
c0026df9:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026dfe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026e04:	83 ec 08             	sub    esp,0x8
c0026e07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0026e0b:	50                   	push   eax
c0026e0c:	e8 db 07 ff ff       	call   c00175ec <VgaText::putx(unsigned int)>
c0026e11:	83 c4 10             	add    esp,0x10
c0026e14:	fa                   	cli    
c0026e15:	f4                   	hlt    
c0026e16:	eb fe                	jmp    c0026e16 <displayDebugInfo(regs*)+0x383>

c0026e18 <HalSystemIdle()>:
c0026e18:	56                   	push   esi
c0026e19:	53                   	push   ebx
c0026e1a:	83 ec 14             	sub    esp,0x14
c0026e1d:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026e22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026e28:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0026e2e:	83 e0 04             	and    eax,0x4
c0026e31:	0f b6 c0             	movzx  eax,al
c0026e34:	85 c0                	test   eax,eax
c0026e36:	0f 95 c0             	setne  al
c0026e39:	0f b6 c0             	movzx  eax,al
c0026e3c:	85 c0                	test   eax,eax
c0026e3e:	74 4c                	je     c0026e8c <HalSystemIdle()+0x74>
c0026e40:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026e45:	83 ec 08             	sub    esp,0x8
c0026e48:	68 e1 00 00 00       	push   0xe1
c0026e4d:	50                   	push   eax
c0026e4e:	e8 0d ed fe ff       	call   c0015b60 <Computer::rdmsr(unsigned int)>
c0026e53:	83 c4 10             	add    esp,0x10
c0026e56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026e5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026e5e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026e63:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026e67:	83 e2 02             	and    edx,0x2
c0026e6a:	89 d3                	mov    ebx,edx
c0026e6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026e70:	83 e2 00             	and    edx,0x0
c0026e73:	89 d6                	mov    esi,edx
c0026e75:	56                   	push   esi
c0026e76:	53                   	push   ebx
c0026e77:	68 e1 00 00 00       	push   0xe1
c0026e7c:	50                   	push   eax
c0026e7d:	e8 0a ed fe ff       	call   c0015b8c <Computer::wrmsr(unsigned int, unsigned long long)>
c0026e82:	83 c4 10             	add    esp,0x10
c0026e85:	e8 0a 93 fd ff       	call   c0000194 <doTPAUSE>
c0026e8a:	eb 01                	jmp    c0026e8d <HalSystemIdle()+0x75>
c0026e8c:	f4                   	hlt    
c0026e8d:	90                   	nop
c0026e8e:	83 c4 14             	add    esp,0x14
c0026e91:	5b                   	pop    ebx
c0026e92:	5e                   	pop    esi
c0026e93:	c3                   	ret    

c0026e94 <displayProgramFault(char const*)>:
c0026e94:	83 ec 0c             	sub    esp,0xc
c0026e97:	83 ec 0c             	sub    esp,0xc
c0026e9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e9e:	e8 2e 26 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0026ea3:	83 c4 10             	add    esp,0x10
c0026ea6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026eab:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ead:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026eb0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026eb6:	85 c0                	test   eax,eax
c0026eb8:	74 21                	je     c0026edb <displayProgramFault(char const*)+0x47>
c0026eba:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026ebf:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ec1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026ec4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026eca:	6a 04                	push   0x4
c0026ecc:	6a 0f                	push   0xf
c0026ece:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0026ed2:	50                   	push   eax
c0026ed3:	e8 cc 07 ff ff       	call   c00176a4 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0026ed8:	83 c4 10             	add    esp,0x10
c0026edb:	90                   	nop
c0026edc:	83 c4 0c             	add    esp,0xc
c0026edf:	c3                   	ret    

c0026ee0 <gpFault(regs*, void*)>:
c0026ee0:	83 ec 1c             	sub    esp,0x1c
c0026ee3:	c7 05 74 02 04 c0 3c 63 02 c0 	mov    DWORD PTR ds:0xc0040274,0xc002633c
c0026eed:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026ef2:	85 c0                	test   eax,eax
c0026ef4:	74 1e                	je     c0026f14 <gpFault(regs*, void*)+0x34>
c0026ef6:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026efb:	83 ec 0c             	sub    esp,0xc
c0026efe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026f02:	ff d0                	call   eax
c0026f04:	83 c4 10             	add    esp,0x10
c0026f07:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0026f0b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0026f10:	85 c0                	test   eax,eax
c0026f12:	75 2e                	jne    c0026f42 <gpFault(regs*, void*)+0x62>
c0026f14:	83 ec 0c             	sub    esp,0xc
c0026f17:	68 9a 34 03 c0       	push   0xc003349a
c0026f1c:	e8 73 ff ff ff       	call   c0026e94 <displayProgramFault(char const*)>
c0026f21:	83 c4 10             	add    esp,0x10
c0026f24:	83 ec 0c             	sub    esp,0xc
c0026f27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026f2b:	e8 63 fb ff ff       	call   c0026a93 <displayDebugInfo(regs*)>
c0026f30:	83 c4 10             	add    esp,0x10
c0026f33:	83 ec 0c             	sub    esp,0xc
c0026f36:	6a 00                	push   0x0
c0026f38:	e8 2f ee ff ff       	call   c0025d6c <Thr::terminateFromIRQ(int)>
c0026f3d:	83 c4 10             	add    esp,0x10
c0026f40:	eb 01                	jmp    c0026f43 <gpFault(regs*, void*)+0x63>
c0026f42:	90                   	nop
c0026f43:	83 c4 1c             	add    esp,0x1c
c0026f46:	c3                   	ret    

c0026f47 <pgFault(regs*, void*)>:
c0026f47:	83 ec 1c             	sub    esp,0x1c
c0026f4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026f4e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0026f51:	0f 20 d0             	mov    eax,cr2
c0026f54:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026f58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026f5c:	83 ec 04             	sub    esp,0x4
c0026f5f:	52                   	push   edx
c0026f60:	50                   	push   eax
c0026f61:	68 78 35 03 c0       	push   0xc0033578
c0026f66:	e8 66 25 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0026f6b:	83 c4 10             	add    esp,0x10
c0026f6e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026f73:	8b 00                	mov    eax,DWORD PTR [eax]
c0026f75:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026f78:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0026f7e:	0f 20 d2             	mov    edx,cr2
c0026f81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026f85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026f89:	83 ec 08             	sub    esp,0x8
c0026f8c:	52                   	push   edx
c0026f8d:	50                   	push   eax
c0026f8e:	e8 89 1f ff ff       	call   c0018f1c <VAS::tryLoadBackOffDisk(unsigned long)>
c0026f93:	83 c4 10             	add    esp,0x10
c0026f96:	0f b6 c0             	movzx  eax,al
c0026f99:	85 c0                	test   eax,eax
c0026f9b:	75 2e                	jne    c0026fcb <pgFault(regs*, void*)+0x84>
c0026f9d:	83 ec 0c             	sub    esp,0xc
c0026fa0:	68 b3 34 03 c0       	push   0xc00334b3
c0026fa5:	e8 ea fe ff ff       	call   c0026e94 <displayProgramFault(char const*)>
c0026faa:	83 c4 10             	add    esp,0x10
c0026fad:	83 ec 0c             	sub    esp,0xc
c0026fb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026fb4:	e8 da fa ff ff       	call   c0026a93 <displayDebugInfo(regs*)>
c0026fb9:	83 c4 10             	add    esp,0x10
c0026fbc:	83 ec 0c             	sub    esp,0xc
c0026fbf:	6a 00                	push   0x0
c0026fc1:	e8 a6 ed ff ff       	call   c0025d6c <Thr::terminateFromIRQ(int)>
c0026fc6:	83 c4 10             	add    esp,0x10
c0026fc9:	eb 01                	jmp    c0026fcc <pgFault(regs*, void*)+0x85>
c0026fcb:	90                   	nop
c0026fcc:	83 c4 1c             	add    esp,0x1c
c0026fcf:	c3                   	ret    

c0026fd0 <otherISRHandler(regs*, void*)>:
c0026fd0:	83 ec 0c             	sub    esp,0xc
c0026fd3:	83 ec 0c             	sub    esp,0xc
c0026fd6:	68 a0 35 03 c0       	push   0xc00335a0
c0026fdb:	e8 b4 fe ff ff       	call   c0026e94 <displayProgramFault(char const*)>
c0026fe0:	83 c4 10             	add    esp,0x10
c0026fe3:	83 ec 0c             	sub    esp,0xc
c0026fe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026fea:	e8 a4 fa ff ff       	call   c0026a93 <displayDebugInfo(regs*)>
c0026fef:	83 c4 10             	add    esp,0x10
c0026ff2:	83 ec 0c             	sub    esp,0xc
c0026ff5:	6a 00                	push   0x0
c0026ff7:	e8 70 ed ff ff       	call   c0025d6c <Thr::terminateFromIRQ(int)>
c0026ffc:	83 c4 10             	add    esp,0x10
c0026fff:	90                   	nop
c0027000:	83 c4 0c             	add    esp,0xc
c0027003:	c3                   	ret    

c0027004 <opcodeFault(regs*, void*)>:
c0027004:	55                   	push   ebp
c0027005:	89 e5                	mov    ebp,esp
c0027007:	83 ec 08             	sub    esp,0x8
c002700a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002700d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0027010:	83 ec 08             	sub    esp,0x8
c0027013:	50                   	push   eax
c0027014:	68 be 34 03 c0       	push   0xc00334be
c0027019:	e8 b3 24 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c002701e:	83 c4 10             	add    esp,0x10
c0027021:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027026:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002702c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0027032:	0f b6 c0             	movzx  eax,al
c0027035:	85 c0                	test   eax,eax
c0027037:	74 21                	je     c002705a <opcodeFault(regs*, void*)+0x56>
c0027039:	83 ec 0c             	sub    esp,0xc
c002703c:	68 c8 35 03 c0       	push   0xc00335c8
c0027041:	e8 8b 24 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0027046:	83 c4 10             	add    esp,0x10
c0027049:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002704c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002704f:	8d 50 19             	lea    edx,[eax+0x19]
c0027052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027055:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0027058:	eb 2b                	jmp    c0027085 <opcodeFault(regs*, void*)+0x81>
c002705a:	83 ec 0c             	sub    esp,0xc
c002705d:	68 cc 34 03 c0       	push   0xc00334cc
c0027062:	e8 2d fe ff ff       	call   c0026e94 <displayProgramFault(char const*)>
c0027067:	83 c4 10             	add    esp,0x10
c002706a:	83 ec 0c             	sub    esp,0xc
c002706d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027070:	e8 1e fa ff ff       	call   c0026a93 <displayDebugInfo(regs*)>
c0027075:	83 c4 10             	add    esp,0x10
c0027078:	83 ec 0c             	sub    esp,0xc
c002707b:	6a 00                	push   0x0
c002707d:	e8 ea ec ff ff       	call   c0025d6c <Thr::terminateFromIRQ(int)>
c0027082:	83 c4 10             	add    esp,0x10
c0027085:	c9                   	leave  
c0027086:	c3                   	ret    

c0027087 <i386SaveCoprocessor(void*)>:
c0027087:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002708b:	83 c0 3f             	add    eax,0x3f
c002708e:	83 e0 c0             	and    eax,0xffffffc0
c0027091:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027095:	ff 25 70 02 04 c0    	jmp    DWORD PTR ds:0xc0040270

c002709b <i386LoadCoprocessor(void*)>:
c002709b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002709f:	83 c0 3f             	add    eax,0x3f
c00270a2:	83 e0 c0             	and    eax,0xffffffc0
c00270a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00270a9:	ff 25 6c 02 04 c0    	jmp    DWORD PTR ds:0xc004026c

c00270af <x87EmulHandler(regs*, void*)>:
c00270af:	53                   	push   ebx
c00270b0:	83 ec 08             	sub    esp,0x8
c00270b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00270b8:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00270bc:	74 10                	je     c00270ce <x87EmulHandler(regs*, void*)+0x1f>
c00270be:	83 ec 0c             	sub    esp,0xc
c00270c1:	68 d9 34 03 c0       	push   0xc00334d9
c00270c6:	e8 1f 94 ff ff       	call   c00204ea <KePanic(char const*)>
c00270cb:	83 c4 10             	add    esp,0x10
c00270ce:	0f 20 c0             	mov    eax,cr0
c00270d1:	a8 08                	test   al,0x8
c00270d3:	74 59                	je     c002712e <x87EmulHandler(regs*, void*)+0x7f>
c00270d5:	0f 06                	clts   
c00270d7:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c00270dc:	85 c0                	test   eax,eax
c00270de:	74 0e                	je     c00270ee <x87EmulHandler(regs*, void*)+0x3f>
c00270e0:	83 ec 0c             	sub    esp,0xc
c00270e3:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00270e6:	e8 9c ff ff ff       	call   c0027087 <i386SaveCoprocessor(void*)>
c00270eb:	83 c4 10             	add    esp,0x10
c00270ee:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00270f4:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00270f8:	75 12                	jne    c002710c <x87EmulHandler(regs*, void*)+0x5d>
c00270fa:	83 ec 0c             	sub    esp,0xc
c00270fd:	68 40 02 00 00       	push   0x240
c0027102:	e8 3c f5 fe ff       	call   c0016643 <malloc>
c0027107:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c002710a:	eb 10                	jmp    c002711c <x87EmulHandler(regs*, void*)+0x6d>
c002710c:	83 ec 0c             	sub    esp,0xc
c002710f:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0027114:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0027117:	e8 7f ff ff ff       	call   c002709b <i386LoadCoprocessor(void*)>
c002711c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0027121:	83 c4 10             	add    esp,0x10
c0027124:	a3 68 02 04 c0       	mov    ds:0xc0040268,eax
c0027129:	83 c4 08             	add    esp,0x8
c002712c:	5b                   	pop    ebx
c002712d:	c3                   	ret    
c002712e:	83 ec 0c             	sub    esp,0xc
c0027131:	68 ed 34 03 c0       	push   0xc00334ed
c0027136:	e8 96 23 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c002713b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0027143:	83 c4 18             	add    esp,0x18
c0027146:	5b                   	pop    ebx
c0027147:	e9 20 ec ff ff       	jmp    c0025d6c <Thr::terminateFromIRQ(int)>

c002714c <HalInitialiseCoprocessor()>:
c002714c:	83 ec 10             	sub    esp,0x10
c002714f:	c7 05 68 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040268,0x0
c0027159:	6a 00                	push   0x0
c002715b:	68 af 70 02 c0       	push   0xc00270af
c0027160:	6a 07                	push   0x7
c0027162:	e8 37 49 ff ff       	call   c001ba9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027167:	e8 a4 70 00 00       	call   c002e210 <avxDetect>
c002716c:	83 c4 10             	add    esp,0x10
c002716f:	85 c0                	test   eax,eax
c0027171:	74 1c                	je     c002718f <HalInitialiseCoprocessor()+0x43>
c0027173:	c7 05 70 02 04 c0 3a e2 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e23a
c002717d:	c7 05 6c 02 04 c0 4b e2 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e24b
c0027187:	83 c4 0c             	add    esp,0xc
c002718a:	e9 cd 70 00 00       	jmp    c002e25c <avxInit>
c002718f:	e8 ec 73 00 00       	call   c002e580 <sseDetect>
c0027194:	85 c0                	test   eax,eax
c0027196:	74 1c                	je     c00271b4 <HalInitialiseCoprocessor()+0x68>
c0027198:	c7 05 70 02 04 c0 98 e5 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e598
c00271a2:	c7 05 6c 02 04 c0 a0 e5 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e5a0
c00271ac:	83 c4 0c             	add    esp,0xc
c00271af:	e9 f4 73 00 00       	jmp    c002e5a8 <sseInit>
c00271b4:	e8 0d 74 00 00       	call   c002e5c6 <x87Detect>
c00271b9:	85 c0                	test   eax,eax
c00271bb:	74 1c                	je     c00271d9 <HalInitialiseCoprocessor()+0x8d>
c00271bd:	c7 05 70 02 04 c0 e1 e5 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e5e1
c00271c7:	c7 05 6c 02 04 c0 e8 e5 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e5e8
c00271d1:	83 c4 0c             	add    esp,0xc
c00271d4:	e9 16 74 00 00       	jmp    c002e5ef <x87Init>
c00271d9:	c7 05 70 02 04 c0 60 6a 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc0026a60
c00271e3:	c7 05 6c 02 04 c0 60 6a 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc0026a60
c00271ed:	0f 20 c0             	mov    eax,cr0
c00271f0:	83 c8 04             	or     eax,0x4
c00271f3:	0f 22 c0             	mov    cr0,eax
c00271f6:	83 c4 0c             	add    esp,0xc
c00271f9:	c3                   	ret    

c00271fa <HalPanic(char const*)>:
c00271fa:	53                   	push   ebx
c00271fb:	83 ec 10             	sub    esp,0x10
c00271fe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0027202:	fa                   	cli    
c0027203:	53                   	push   ebx
c0027204:	68 03 35 03 c0       	push   0xc0033503
c0027209:	e8 c3 22 ff ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c002720e:	a1 64 02 04 c0       	mov    eax,ds:0xc0040264
c0027213:	83 c4 10             	add    esp,0x10
c0027216:	85 c0                	test   eax,eax
c0027218:	74 09                	je     c0027223 <HalPanic(char const*)+0x29>
c002721a:	83 ec 0c             	sub    esp,0xc
c002721d:	53                   	push   ebx
c002721e:	ff d0                	call   eax
c0027220:	83 c4 10             	add    esp,0x10
c0027223:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c0027228:	85 c0                	test   eax,eax
c002722a:	0f 84 dc 00 00 00    	je     c002730c <HalPanic(char const*)+0x112>
c0027230:	52                   	push   edx
c0027231:	6a 01                	push   0x1
c0027233:	6a 0f                	push   0xf
c0027235:	50                   	push   eax
c0027236:	e8 05 ff fe ff       	call   c0017140 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c002723b:	59                   	pop    ecx
c002723c:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027242:	e8 e9 00 ff ff       	call   c0017330 <VgaText::clearScreen()>
c0027247:	58                   	pop    eax
c0027248:	5a                   	pop    edx
c0027249:	68 d8 15 03 c0       	push   0xc00315d8
c002724e:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027254:	e8 1f ff fe ff       	call   c0017178 <VgaText::setTitle(char*)>
c0027259:	83 c4 0c             	add    esp,0xc
c002725c:	6a 01                	push   0x1
c002725e:	6a 0f                	push   0xf
c0027260:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027266:	e8 d5 fe fe ff       	call   c0017140 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c002726b:	59                   	pop    ecx
c002726c:	58                   	pop    eax
c002726d:	68 1c 35 03 c0       	push   0xc003351c
c0027272:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027278:	e8 b5 03 ff ff       	call   c0017632 <VgaText::puts(char const*)>
c002727d:	83 c4 0c             	add    esp,0xc
c0027280:	6a 0f                	push   0xf
c0027282:	6a 01                	push   0x1
c0027284:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002728a:	e8 b1 fe fe ff       	call   c0017140 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c002728f:	58                   	pop    eax
c0027290:	5a                   	pop    edx
c0027291:	68 25 35 03 c0       	push   0xc0033525
c0027296:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002729c:	e8 91 03 ff ff       	call   c0017632 <VgaText::puts(char const*)>
c00272a1:	83 c4 0c             	add    esp,0xc
c00272a4:	6a 01                	push   0x1
c00272a6:	6a 0f                	push   0xf
c00272a8:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c00272ae:	e8 8d fe fe ff       	call   c0017140 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00272b3:	59                   	pop    ecx
c00272b4:	58                   	pop    eax
c00272b5:	68 69 35 03 c0       	push   0xc0033569
c00272ba:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c00272c0:	e8 6d 03 ff ff       	call   c0017632 <VgaText::puts(char const*)>
c00272c5:	58                   	pop    eax
c00272c6:	5a                   	pop    edx
c00272c7:	68 32 35 03 c0       	push   0xc0033532
c00272cc:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c00272d2:	e8 5b 03 ff ff       	call   c0017632 <VgaText::puts(char const*)>
c00272d7:	59                   	pop    ecx
c00272d8:	58                   	pop    eax
c00272d9:	68 6c 35 03 c0       	push   0xc003356c
c00272de:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c00272e4:	e8 49 03 ff ff       	call   c0017632 <VgaText::puts(char const*)>
c00272e9:	58                   	pop    eax
c00272ea:	5a                   	pop    edx
c00272eb:	53                   	push   ebx
c00272ec:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c00272f2:	e8 3b 03 ff ff       	call   c0017632 <VgaText::puts(char const*)>
c00272f7:	59                   	pop    ecx
c00272f8:	5b                   	pop    ebx
c00272f9:	68 69 35 03 c0       	push   0xc0033569
c00272fe:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027304:	e8 29 03 ff ff       	call   c0017632 <VgaText::puts(char const*)>
c0027309:	83 c4 10             	add    esp,0x10
c002730c:	eb fe                	jmp    c002730c <HalPanic(char const*)+0x112>

c002730e <HalQueryPerformanceCounter()>:
c002730e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027313:	31 d2                	xor    edx,edx
c0027315:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c002731b:	31 c0                	xor    eax,eax
c002731d:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0027324:	74 02                	je     c0027328 <HalQueryPerformanceCounter()+0x1a>
c0027326:	0f 31                	rdtsc  
c0027328:	c3                   	ret    

c0027329 <HalInitialise()>:
c0027329:	53                   	push   ebx
c002732a:	83 ec 08             	sub    esp,0x8
c002732d:	e8 9c 49 ff ff       	call   c001bcce <setupINTS()>
c0027332:	80 3d e0 f6 03 c0 00 	cmp    BYTE PTR ds:0xc003f6e0,0x0
c0027339:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002733e:	75 0f                	jne    c002734f <HalInitialise()+0x26>
c0027340:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0027346:	83 e2 fe             	and    edx,0xfffffffe
c0027349:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c002734f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0027355:	c6 05 60 02 04 c0 00 	mov    BYTE PTR ds:0xc0040260,0x0
c002735c:	83 e2 fe             	and    edx,0xfffffffe
c002735f:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0027365:	e8 9e 02 00 00       	call   c0027608 <picOpen()>
c002736a:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c0027371:	74 0a                	je     c002737d <HalInitialise()+0x54>
c0027373:	e8 e0 01 00 00       	call   c0027558 <picDisable()>
c0027378:	e8 03 68 00 00       	call   c002db80 <apicOpen()>
c002737d:	bb 0f 00 00 00       	mov    ebx,0xf
c0027382:	50                   	push   eax
c0027383:	6a 00                	push   0x0
c0027385:	68 d0 6f 02 c0       	push   0xc0026fd0
c002738a:	6a 00                	push   0x0
c002738c:	e8 0d 47 ff ff       	call   c001ba9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027391:	83 c4 0c             	add    esp,0xc
c0027394:	6a 00                	push   0x0
c0027396:	68 d0 6f 02 c0       	push   0xc0026fd0
c002739b:	6a 01                	push   0x1
c002739d:	e8 fc 46 ff ff       	call   c001ba9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00273a2:	83 c4 0c             	add    esp,0xc
c00273a5:	6a 00                	push   0x0
c00273a7:	68 61 6a 02 c0       	push   0xc0026a61
c00273ac:	6a 02                	push   0x2
c00273ae:	e8 eb 46 ff ff       	call   c001ba9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00273b3:	83 c4 0c             	add    esp,0xc
c00273b6:	6a 00                	push   0x0
c00273b8:	68 d0 6f 02 c0       	push   0xc0026fd0
c00273bd:	6a 03                	push   0x3
c00273bf:	e8 da 46 ff ff       	call   c001ba9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00273c4:	83 c4 0c             	add    esp,0xc
c00273c7:	6a 00                	push   0x0
c00273c9:	68 d0 6f 02 c0       	push   0xc0026fd0
c00273ce:	6a 04                	push   0x4
c00273d0:	e8 c9 46 ff ff       	call   c001ba9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00273d5:	83 c4 0c             	add    esp,0xc
c00273d8:	6a 00                	push   0x0
c00273da:	68 d0 6f 02 c0       	push   0xc0026fd0
c00273df:	6a 05                	push   0x5
c00273e1:	e8 b8 46 ff ff       	call   c001ba9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00273e6:	83 c4 0c             	add    esp,0xc
c00273e9:	6a 00                	push   0x0
c00273eb:	68 04 70 02 c0       	push   0xc0027004
c00273f0:	6a 06                	push   0x6
c00273f2:	e8 a7 46 ff ff       	call   c001ba9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00273f7:	83 c4 0c             	add    esp,0xc
c00273fa:	6a 00                	push   0x0
c00273fc:	68 7a 6a 02 c0       	push   0xc0026a7a
c0027401:	6a 08                	push   0x8
c0027403:	e8 96 46 ff ff       	call   c001ba9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027408:	83 c4 0c             	add    esp,0xc
c002740b:	6a 00                	push   0x0
c002740d:	68 d0 6f 02 c0       	push   0xc0026fd0
c0027412:	6a 09                	push   0x9
c0027414:	e8 85 46 ff ff       	call   c001ba9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027419:	83 c4 0c             	add    esp,0xc
c002741c:	6a 00                	push   0x0
c002741e:	68 d0 6f 02 c0       	push   0xc0026fd0
c0027423:	6a 0a                	push   0xa
c0027425:	e8 74 46 ff ff       	call   c001ba9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c002742a:	83 c4 0c             	add    esp,0xc
c002742d:	6a 00                	push   0x0
c002742f:	68 d0 6f 02 c0       	push   0xc0026fd0
c0027434:	6a 0b                	push   0xb
c0027436:	e8 63 46 ff ff       	call   c001ba9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c002743b:	83 c4 0c             	add    esp,0xc
c002743e:	6a 00                	push   0x0
c0027440:	68 e0 6e 02 c0       	push   0xc0026ee0
c0027445:	6a 0d                	push   0xd
c0027447:	e8 52 46 ff ff       	call   c001ba9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c002744c:	83 c4 0c             	add    esp,0xc
c002744f:	6a 00                	push   0x0
c0027451:	68 47 6f 02 c0       	push   0xc0026f47
c0027456:	6a 0e                	push   0xe
c0027458:	e8 41 46 ff ff       	call   c001ba9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c002745d:	83 c4 10             	add    esp,0x10
c0027460:	50                   	push   eax
c0027461:	6a 00                	push   0x0
c0027463:	68 d0 6f 02 c0       	push   0xc0026fd0
c0027468:	53                   	push   ebx
c0027469:	43                   	inc    ebx
c002746a:	e8 2f 46 ff ff       	call   c001ba9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c002746f:	83 c4 10             	add    esp,0x10
c0027472:	83 fb 1e             	cmp    ebx,0x1e
c0027475:	75 e9                	jne    c0027460 <HalInitialise()+0x137>
c0027477:	50                   	push   eax
c0027478:	6a 00                	push   0x0
c002747a:	68 99 1d 02 c0       	push   0xc0021d99
c002747f:	6a 60                	push   0x60
c0027481:	e8 18 46 ff ff       	call   c001ba9e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027486:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002748b:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0027495:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c002749c:	e8 a2 f1 fe ff       	call   c0016643 <malloc>
c00274a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00274a4:	89 c3                	mov    ebx,eax
c00274a6:	e8 3b 09 00 00       	call   c0027de6 <RTC::RTC()>
c00274ab:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00274b5:	5a                   	pop    edx
c00274b6:	59                   	pop    ecx
c00274b7:	53                   	push   ebx
c00274b8:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00274be:	e8 8f 40 ff ff       	call   c001b552 <Device::addChild(Device*)>
c00274c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00274c5:	6a 00                	push   0x0
c00274c7:	6a 00                	push   0x0
c00274c9:	6a 00                	push   0x0
c00274cb:	53                   	push   ebx
c00274cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00274cf:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00274d4:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00274da:	83 c4 28             	add    esp,0x28
c00274dd:	5b                   	pop    ebx
c00274de:	c3                   	ret    

c00274df <HalMakeBeep(int)>:
c00274df:	53                   	push   ebx
c00274e0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00274e4:	85 db                	test   ebx,ebx
c00274e6:	75 07                	jne    c00274ef <HalMakeBeep(int)+0x10>
c00274e8:	e4 61                	in     al,0x61
c00274ea:	83 e0 fc             	and    eax,0xfffffffc
c00274ed:	eb 26                	jmp    c0027515 <HalMakeBeep(int)+0x36>
c00274ef:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00274f4:	99                   	cdq    
c00274f5:	f7 fb                	idiv   ebx
c00274f7:	89 c1                	mov    ecx,eax
c00274f9:	b0 b6                	mov    al,0xb6
c00274fb:	e6 43                	out    0x43,al
c00274fd:	88 c8                	mov    al,cl
c00274ff:	e6 42                	out    0x42,al
c0027501:	89 c8                	mov    eax,ecx
c0027503:	c1 e8 08             	shr    eax,0x8
c0027506:	e6 42                	out    0x42,al
c0027508:	e4 61                	in     al,0x61
c002750a:	89 c2                	mov    edx,eax
c002750c:	83 ca 03             	or     edx,0x3
c002750f:	38 d0                	cmp    al,dl
c0027511:	74 04                	je     c0027517 <HalMakeBeep(int)+0x38>
c0027513:	88 d0                	mov    al,dl
c0027515:	e6 61                	out    0x61,al
c0027517:	5b                   	pop    ebx
c0027518:	c3                   	ret    

c0027519 <HalGetRand()>:
c0027519:	31 c0                	xor    eax,eax
c002751b:	c3                   	ret    

c002751c <HalEndOfInterrupt(int)>:
c002751c:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c0027523:	74 23                	je     c0027548 <HalEndOfInterrupt(int)+0x2c>
c0027525:	83 ec 14             	sub    esp,0x14
c0027528:	6a 1b                	push   0x1b
c002752a:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027530:	e8 2b e6 fe ff       	call   c0015b60 <Computer::rdmsr(unsigned int)>
c0027535:	25 00 f0 ff ff       	and    eax,0xfffff000
c002753a:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0027544:	83 c4 1c             	add    esp,0x1c
c0027547:	c3                   	ret    
c0027548:	e9 3f 02 00 00       	jmp    c002778c <picEOI(int)>

c002754d <HalRestart()>:
c002754d:	c3                   	ret    

c002754e <HalShutdown()>:
c002754e:	c3                   	ret    

c002754f <HalSleep()>:
c002754f:	c3                   	ret    

c0027550 <picIoWait()>:
c0027550:	eb 00                	jmp    c0027552 <picIoWait()+0x2>
c0027552:	eb 00                	jmp    c0027554 <picIoWait()+0x4>
c0027554:	90                   	nop
c0027555:	c3                   	ret    
c0027556:	66 90                	xchg   ax,ax

c0027558 <picDisable()>:
c0027558:	83 ec 10             	sub    esp,0x10
c002755b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0027562:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0027567:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002756b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0027570:	ee                   	out    dx,al
c0027571:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0027578:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c002757d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0027581:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0027586:	ee                   	out    dx,al
c0027587:	90                   	nop
c0027588:	83 c4 10             	add    esp,0x10
c002758b:	c3                   	ret    

c002758c <picGetIRQReg(int)>:
c002758c:	83 ec 10             	sub    esp,0x10
c002758f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027593:	0f b6 c0             	movzx  eax,al
c0027596:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c002759d:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00275a1:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00275a5:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00275aa:	ee                   	out    dx,al
c00275ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00275af:	0f b6 c0             	movzx  eax,al
c00275b2:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00275b9:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00275bd:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00275c1:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00275c6:	ee                   	out    dx,al
c00275c7:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00275ce:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00275d3:	89 c2                	mov    edx,eax
c00275d5:	ec                   	in     al,dx
c00275d6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00275da:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00275de:	0f b6 c0             	movzx  eax,al
c00275e1:	c1 e0 08             	shl    eax,0x8
c00275e4:	89 c1                	mov    ecx,eax
c00275e6:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00275ed:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00275f2:	89 c2                	mov    edx,eax
c00275f4:	ec                   	in     al,dx
c00275f5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00275f9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00275fd:	0f b6 c0             	movzx  eax,al
c0027600:	09 c8                	or     eax,ecx
c0027602:	83 c4 10             	add    esp,0x10
c0027605:	c3                   	ret    
c0027606:	66 90                	xchg   ax,ax

c0027608 <picOpen()>:
c0027608:	83 ec 50             	sub    esp,0x50
c002760b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0027612:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0027617:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002761b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002761f:	ee                   	out    dx,al
c0027620:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0027627:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002762c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0027630:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027634:	ee                   	out    dx,al
c0027635:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c002763d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0027645:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c002764c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027650:	89 c2                	mov    edx,eax
c0027652:	ec                   	in     al,dx
c0027653:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0027657:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c002765b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c002765f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0027666:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002766a:	89 c2                	mov    edx,eax
c002766c:	ec                   	in     al,dx
c002766d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0027671:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0027675:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0027679:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0027680:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0027685:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0027689:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002768d:	ee                   	out    dx,al
c002768e:	e8 bd fe ff ff       	call   c0027550 <picIoWait()>
c0027693:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c002769a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c002769f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00276a3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00276a7:	ee                   	out    dx,al
c00276a8:	e8 a3 fe ff ff       	call   c0027550 <picIoWait()>
c00276ad:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00276b1:	0f b6 c0             	movzx  eax,al
c00276b4:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00276bb:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00276bf:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00276c3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00276c7:	ee                   	out    dx,al
c00276c8:	e8 83 fe ff ff       	call   c0027550 <picIoWait()>
c00276cd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00276d1:	0f b6 c0             	movzx  eax,al
c00276d4:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00276db:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00276df:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00276e3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00276e7:	ee                   	out    dx,al
c00276e8:	e8 63 fe ff ff       	call   c0027550 <picIoWait()>
c00276ed:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00276f4:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00276f9:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00276fd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0027701:	ee                   	out    dx,al
c0027702:	e8 49 fe ff ff       	call   c0027550 <picIoWait()>
c0027707:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c002770e:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0027713:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0027717:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002771b:	ee                   	out    dx,al
c002771c:	e8 2f fe ff ff       	call   c0027550 <picIoWait()>
c0027721:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0027728:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c002772d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0027731:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0027735:	ee                   	out    dx,al
c0027736:	e8 15 fe ff ff       	call   c0027550 <picIoWait()>
c002773b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0027742:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0027747:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c002774b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002774f:	ee                   	out    dx,al
c0027750:	e8 fb fd ff ff       	call   c0027550 <picIoWait()>
c0027755:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c002775a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0027761:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0027765:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0027769:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c002776d:	ee                   	out    dx,al
c002776e:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0027773:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c002777a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002777e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0027782:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0027786:	ee                   	out    dx,al
c0027787:	90                   	nop
c0027788:	83 c4 50             	add    esp,0x50
c002778b:	c3                   	ret    

c002778c <picEOI(int)>:
c002778c:	83 ec 10             	sub    esp,0x10
c002778f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0027794:	75 1e                	jne    c00277b4 <picEOI(int)+0x28>
c0027796:	6a 0b                	push   0xb
c0027798:	e8 ef fd ff ff       	call   c002758c <picGetIRQReg(int)>
c002779d:	83 c4 04             	add    esp,0x4
c00277a0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00277a5:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00277aa:	25 80 00 00 00       	and    eax,0x80
c00277af:	74 73                	je     c0027824 <picEOI(int)+0x98>
c00277b1:	8d 76 00             	lea    esi,[esi+0x0]
c00277b4:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00277b9:	75 31                	jne    c00277ec <picEOI(int)+0x60>
c00277bb:	6a 0b                	push   0xb
c00277bd:	e8 ca fd ff ff       	call   c002758c <picGetIRQReg(int)>
c00277c2:	83 c4 04             	add    esp,0x4
c00277c5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00277ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00277ce:	98                   	cwde   
c00277cf:	85 c0                	test   eax,eax
c00277d1:	78 19                	js     c00277ec <picEOI(int)+0x60>
c00277d3:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00277da:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00277df:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00277e3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00277e8:	ee                   	out    dx,al
c00277e9:	eb 3d                	jmp    c0027828 <picEOI(int)+0x9c>
c00277eb:	90                   	nop
c00277ec:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00277f1:	7e 19                	jle    c002780c <picEOI(int)+0x80>
c00277f3:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00277fa:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00277ff:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0027803:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0027808:	ee                   	out    dx,al
c0027809:	8d 76 00             	lea    esi,[esi+0x0]
c002780c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0027813:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0027818:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002781c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0027821:	ee                   	out    dx,al
c0027822:	eb 04                	jmp    c0027828 <picEOI(int)+0x9c>
c0027824:	90                   	nop
c0027825:	8d 76 00             	lea    esi,[esi+0x0]
c0027828:	83 c4 10             	add    esp,0x10
c002782b:	c3                   	ret    

c002782c <RTC::open(int, int, void*)>:
c002782c:	31 c0                	xor    eax,eax
c002782e:	c3                   	ret    
c002782f:	90                   	nop

c0027830 <RTC::close(int, int, void*)>:
c0027830:	31 c0                	xor    eax,eax
c0027832:	c3                   	ret    
c0027833:	90                   	nop

c0027834 <RTC::timeInSecondsUTC()>:
c0027834:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027838:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002783e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0027844:	c3                   	ret    
c0027845:	90                   	nop

c0027846 <RTC::timeInDatetimeUTC()>:
c0027846:	53                   	push   ebx
c0027847:	83 ec 14             	sub    esp,0x14
c002784a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002784e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027852:	8b 10                	mov    edx,DWORD PTR [eax]
c0027854:	50                   	push   eax
c0027855:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0027858:	83 c4 0c             	add    esp,0xc
c002785b:	52                   	push   edx
c002785c:	50                   	push   eax
c002785d:	53                   	push   ebx
c002785e:	e8 63 3a ff ff       	call   c001b2c6 <secondsToDatetime(unsigned long long)>
c0027863:	89 d8                	mov    eax,ebx
c0027865:	83 c4 14             	add    esp,0x14
c0027868:	5b                   	pop    ebx
c0027869:	c2 04 00             	ret    0x4

c002786c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c002786c:	56                   	push   esi
c002786d:	53                   	push   ebx
c002786e:	83 ec 14             	sub    esp,0x14
c0027871:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0027875:	8b 03                	mov    eax,DWORD PTR [ebx]
c0027877:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c002787a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002787e:	52                   	push   edx
c002787f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027883:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027887:	50                   	push   eax
c0027888:	e8 39 3a ff ff       	call   c001b2c6 <secondsToDatetime(unsigned long long)>
c002788d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027891:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027895:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0027899:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c002789d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00278a1:	89 f0                	mov    eax,esi
c00278a3:	83 c4 20             	add    esp,0x20
c00278a6:	5b                   	pop    ebx
c00278a7:	5e                   	pop    esi
c00278a8:	ff e0                	jmp    eax

c00278aa <RTC::~RTC()>:
c00278aa:	83 ec 0c             	sub    esp,0xc
c00278ad:	ba 08 36 03 c0       	mov    edx,0xc0033608
c00278b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278b6:	89 10                	mov    DWORD PTR [eax],edx
c00278b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278bc:	83 ec 0c             	sub    esp,0xc
c00278bf:	50                   	push   eax
c00278c0:	e8 93 37 ff ff       	call   c001b058 <Clock::~Clock()>
c00278c5:	83 c4 10             	add    esp,0x10
c00278c8:	90                   	nop
c00278c9:	83 c4 0c             	add    esp,0xc
c00278cc:	c3                   	ret    
c00278cd:	90                   	nop

c00278ce <RTC::~RTC()>:
c00278ce:	83 ec 0c             	sub    esp,0xc
c00278d1:	83 ec 0c             	sub    esp,0xc
c00278d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278d8:	e8 cd ff ff ff       	call   c00278aa <RTC::~RTC()>
c00278dd:	83 c4 10             	add    esp,0x10
c00278e0:	83 ec 08             	sub    esp,0x8
c00278e3:	68 60 01 00 00       	push   0x160
c00278e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278ec:	e8 b3 1a ff ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c00278f1:	83 c4 10             	add    esp,0x10
c00278f4:	83 c4 0c             	add    esp,0xc
c00278f7:	c3                   	ret    

c00278f8 <RTC::get_update_in_progress_flag()>:
c00278f8:	83 ec 14             	sub    esp,0x14
c00278fb:	6a 0a                	push   0xa
c00278fd:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027903:	e8 10 e3 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027908:	83 c4 1c             	add    esp,0x1c
c002790b:	0f b6 c0             	movzx  eax,al
c002790e:	c1 e8 07             	shr    eax,0x7
c0027911:	c3                   	ret    

c0027912 <RTC::completeRTCRefresh()>:
c0027912:	55                   	push   ebp
c0027913:	57                   	push   edi
c0027914:	56                   	push   esi
c0027915:	53                   	push   ebx
c0027916:	83 ec 3c             	sub    esp,0x3c
c0027919:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c002791f:	83 ec 0c             	sub    esp,0xc
c0027922:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0027926:	e8 cd ff ff ff       	call   c00278f8 <RTC::get_update_in_progress_flag()>
c002792b:	83 c4 10             	add    esp,0x10
c002792e:	84 c0                	test   al,al
c0027930:	74 0e                	je     c0027940 <RTC::completeRTCRefresh()+0x2e>
c0027932:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027938:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c002793e:	73 df                	jae    c002791f <RTC::completeRTCRefresh()+0xd>
c0027940:	51                   	push   ecx
c0027941:	51                   	push   ecx
c0027942:	6a 00                	push   0x0
c0027944:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002794a:	e8 c9 e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c002794f:	5b                   	pop    ebx
c0027950:	89 c7                	mov    edi,eax
c0027952:	5e                   	pop    esi
c0027953:	6a 02                	push   0x2
c0027955:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002795b:	e8 b8 e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027960:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0027964:	5d                   	pop    ebp
c0027965:	58                   	pop    eax
c0027966:	6a 04                	push   0x4
c0027968:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002796e:	e8 a5 e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027973:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0027977:	58                   	pop    eax
c0027978:	5a                   	pop    edx
c0027979:	6a 07                	push   0x7
c002797b:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027981:	e8 92 e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027986:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c002798a:	59                   	pop    ecx
c002798b:	5b                   	pop    ebx
c002798c:	6a 08                	push   0x8
c002798e:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027994:	e8 7f e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027999:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c002799d:	5e                   	pop    esi
c002799e:	5d                   	pop    ebp
c002799f:	6a 09                	push   0x9
c00279a1:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279a7:	e8 6c e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c00279ac:	0f b6 c0             	movzx  eax,al
c00279af:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00279b3:	83 c4 10             	add    esp,0x10
c00279b6:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c00279bc:	83 ec 0c             	sub    esp,0xc
c00279bf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00279c3:	e8 30 ff ff ff       	call   c00278f8 <RTC::get_update_in_progress_flag()>
c00279c8:	83 c4 10             	add    esp,0x10
c00279cb:	84 c0                	test   al,al
c00279cd:	74 0e                	je     c00279dd <RTC::completeRTCRefresh()+0xcb>
c00279cf:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00279d5:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c00279db:	73 df                	jae    c00279bc <RTC::completeRTCRefresh()+0xaa>
c00279dd:	51                   	push   ecx
c00279de:	51                   	push   ecx
c00279df:	6a 00                	push   0x0
c00279e1:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279e7:	e8 2c e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c00279ec:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00279f0:	5b                   	pop    ebx
c00279f1:	5e                   	pop    esi
c00279f2:	6a 02                	push   0x2
c00279f4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279fa:	e8 19 e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c00279ff:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0027a03:	5d                   	pop    ebp
c0027a04:	58                   	pop    eax
c0027a05:	6a 04                	push   0x4
c0027a07:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a0d:	e8 06 e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027a12:	88 c3                	mov    bl,al
c0027a14:	58                   	pop    eax
c0027a15:	5a                   	pop    edx
c0027a16:	6a 07                	push   0x7
c0027a18:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a1e:	e8 f5 e1 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027a23:	59                   	pop    ecx
c0027a24:	89 c6                	mov    esi,eax
c0027a26:	5d                   	pop    ebp
c0027a27:	6a 08                	push   0x8
c0027a29:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a2f:	e8 e4 e1 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027a34:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0027a38:	58                   	pop    eax
c0027a39:	5a                   	pop    edx
c0027a3a:	6a 09                	push   0x9
c0027a3c:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a42:	e8 d1 e1 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027a47:	89 f9                	mov    ecx,edi
c0027a49:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0027a4d:	0f b6 e8             	movzx  ebp,al
c0027a50:	83 c4 10             	add    esp,0x10
c0027a53:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0027a57:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027a5c:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0027a61:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0027a65:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0027a69:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0027a6d:	0f 94 c0             	sete   al
c0027a70:	0f b6 fb             	movzx  edi,bl
c0027a73:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0027a77:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0027a7c:	0f 94 c2             	sete   dl
c0027a7f:	21 d0                	and    eax,edx
c0027a81:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0027a85:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0027a89:	0f 94 c2             	sete   dl
c0027a8c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0027a90:	21 c2                	and    edx,eax
c0027a92:	89 f0                	mov    eax,esi
c0027a94:	0f b6 c0             	movzx  eax,al
c0027a97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027a9b:	89 f0                	mov    eax,esi
c0027a9d:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0027aa1:	0f 94 c0             	sete   al
c0027aa4:	21 d0                	and    eax,edx
c0027aa6:	31 d2                	xor    edx,edx
c0027aa8:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0027aac:	0f 94 c2             	sete   dl
c0027aaf:	85 c2                	test   edx,eax
c0027ab1:	75 27                	jne    c0027ada <RTC::completeRTCRefresh()+0x1c8>
c0027ab3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0027ab7:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0027abb:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0027abf:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0027ac3:	89 f0                	mov    eax,esi
c0027ac5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0027ac9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0027acd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027ad1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027ad5:	e9 dc fe ff ff       	jmp    c00279b6 <RTC::completeRTCRefresh()+0xa4>
c0027ada:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0027ade:	75 d3                	jne    c0027ab3 <RTC::completeRTCRefresh()+0x1a1>
c0027ae0:	52                   	push   edx
c0027ae1:	52                   	push   edx
c0027ae2:	6a 0b                	push   0xb
c0027ae4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027aea:	e8 29 e1 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027aef:	83 c4 10             	add    esp,0x10
c0027af2:	a8 04                	test   al,0x4
c0027af4:	75 7a                	jne    c0027b70 <RTC::completeRTCRefresh()+0x25e>
c0027af6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027afa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027afe:	83 e1 0f             	and    ecx,0xf
c0027b01:	c1 ea 04             	shr    edx,0x4
c0027b04:	c1 ef 04             	shr    edi,0x4
c0027b07:	6b d2 0a             	imul   edx,edx,0xa
c0027b0a:	83 e6 0f             	and    esi,0xf
c0027b0d:	01 d1                	add    ecx,edx
c0027b0f:	c1 ed 04             	shr    ebp,0x4
c0027b12:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0027b16:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0027b1a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027b1e:	c1 ea 04             	shr    edx,0x4
c0027b21:	83 e1 0f             	and    ecx,0xf
c0027b24:	6b d2 0a             	imul   edx,edx,0xa
c0027b27:	6b ed 0a             	imul   ebp,ebp,0xa
c0027b2a:	01 d1                	add    ecx,edx
c0027b2c:	89 fa                	mov    edx,edi
c0027b2e:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0027b32:	83 e2 07             	and    edx,0x7
c0027b35:	89 d9                	mov    ecx,ebx
c0027b37:	6b d2 0a             	imul   edx,edx,0xa
c0027b3a:	83 e1 0f             	and    ecx,0xf
c0027b3d:	83 e3 80             	and    ebx,0xffffff80
c0027b40:	01 d1                	add    ecx,edx
c0027b42:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027b46:	09 cb                	or     ebx,ecx
c0027b48:	c1 ea 04             	shr    edx,0x4
c0027b4b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0027b4f:	6b d2 0a             	imul   edx,edx,0xa
c0027b52:	83 e1 0f             	and    ecx,0xf
c0027b55:	01 d6                	add    esi,edx
c0027b57:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027b5b:	c1 ea 04             	shr    edx,0x4
c0027b5e:	6b d2 0a             	imul   edx,edx,0xa
c0027b61:	01 d1                	add    ecx,edx
c0027b63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027b67:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0027b6b:	83 e2 0f             	and    edx,0xf
c0027b6e:	01 d5                	add    ebp,edx
c0027b70:	a8 02                	test   al,0x2
c0027b72:	75 15                	jne    c0027b89 <RTC::completeRTCRefresh()+0x277>
c0027b74:	f6 c3 80             	test   bl,0x80
c0027b77:	74 10                	je     c0027b89 <RTC::completeRTCRefresh()+0x277>
c0027b79:	83 e3 7f             	and    ebx,0x7f
c0027b7c:	b9 18 00 00 00       	mov    ecx,0x18
c0027b81:	8d 43 0c             	lea    eax,[ebx+0xc]
c0027b84:	99                   	cdq    
c0027b85:	f7 f9                	idiv   ecx
c0027b87:	88 d3                	mov    bl,dl
c0027b89:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0027b8f:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0027b95:	77 06                	ja     c0027b9d <RTC::completeRTCRefresh()+0x28b>
c0027b97:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0027b9d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027ba2:	31 c9                	xor    ecx,ecx
c0027ba4:	c1 e0 10             	shl    eax,0x10
c0027ba7:	89 cd                	mov    ebp,ecx
c0027ba9:	c1 e7 10             	shl    edi,0x10
c0027bac:	31 d2                	xor    edx,edx
c0027bae:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0027bb4:	09 c5                	or     ebp,eax
c0027bb6:	89 f0                	mov    eax,esi
c0027bb8:	89 e9                	mov    ecx,ebp
c0027bba:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0027bbe:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0027bc2:	88 c2                	mov    dl,al
c0027bc4:	88 d9                	mov    cl,bl
c0027bc6:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0027bca:	0f b7 c2             	movzx  eax,dx
c0027bcd:	09 f8                	or     eax,edi
c0027bcf:	89 c2                	mov    edx,eax
c0027bd1:	50                   	push   eax
c0027bd2:	50                   	push   eax
c0027bd3:	51                   	push   ecx
c0027bd4:	52                   	push   edx
c0027bd5:	e8 6d 35 ff ff       	call   c001b147 <datetimeToSeconds(datetime_t)>
c0027bda:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0027bde:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0027be4:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0027bea:	83 c4 4c             	add    esp,0x4c
c0027bed:	5b                   	pop    ebx
c0027bee:	5e                   	pop    esi
c0027bef:	5f                   	pop    edi
c0027bf0:	5d                   	pop    ebp
c0027bf1:	c3                   	ret    

c0027bf2 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0027bf2:	55                   	push   ebp
c0027bf3:	57                   	push   edi
c0027bf4:	56                   	push   esi
c0027bf5:	53                   	push   ebx
c0027bf6:	83 ec 30             	sub    esp,0x30
c0027bf9:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0027bfd:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0027c01:	6a 00                	push   0x0
c0027c03:	6a 00                	push   0x0
c0027c05:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027c0b:	e8 22 e1 fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027c10:	83 c4 0c             	add    esp,0xc
c0027c13:	6a 00                	push   0x0
c0027c15:	6a 02                	push   0x2
c0027c17:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027c1d:	e8 10 e1 fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027c22:	31 d2                	xor    edx,edx
c0027c24:	89 f9                	mov    ecx,edi
c0027c26:	89 f8                	mov    eax,edi
c0027c28:	c1 e9 10             	shr    ecx,0x10
c0027c2b:	0f b6 c4             	movzx  eax,ah
c0027c2e:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0027c32:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0027c36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027c3a:	b9 64 00 00 00       	mov    ecx,0x64
c0027c3f:	89 f0                	mov    eax,esi
c0027c41:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0027c45:	89 f0                	mov    eax,esi
c0027c47:	0f b6 c4             	movzx  eax,ah
c0027c4a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027c4e:	89 f0                	mov    eax,esi
c0027c50:	c1 e8 10             	shr    eax,0x10
c0027c53:	f7 f1                	div    ecx
c0027c55:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0027c59:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0027c5d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0027c61:	59                   	pop    ecx
c0027c62:	5b                   	pop    ebx
c0027c63:	89 fb                	mov    ebx,edi
c0027c65:	6a 0b                	push   0xb
c0027c67:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027c6d:	e8 a6 df fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027c72:	83 c4 10             	add    esp,0x10
c0027c75:	89 c5                	mov    ebp,eax
c0027c77:	a8 04                	test   al,0x4
c0027c79:	75 6e                	jne    c0027ce9 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0027c7b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0027c7f:	31 d2                	xor    edx,edx
c0027c81:	0f b6 c1             	movzx  eax,cl
c0027c84:	b9 0a 00 00 00       	mov    ecx,0xa
c0027c89:	f7 f1                	div    ecx
c0027c8b:	c1 e0 04             	shl    eax,0x4
c0027c8e:	09 d0                	or     eax,edx
c0027c90:	31 d2                	xor    edx,edx
c0027c92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027c96:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0027c9b:	f7 f1                	div    ecx
c0027c9d:	c1 e0 04             	shl    eax,0x4
c0027ca0:	09 d0                	or     eax,edx
c0027ca2:	31 d2                	xor    edx,edx
c0027ca4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027ca8:	0f b6 c3             	movzx  eax,bl
c0027cab:	f7 f1                	div    ecx
c0027cad:	c1 e0 04             	shl    eax,0x4
c0027cb0:	09 d0                	or     eax,edx
c0027cb2:	31 d2                	xor    edx,edx
c0027cb4:	89 c3                	mov    ebx,eax
c0027cb6:	89 f0                	mov    eax,esi
c0027cb8:	0f b6 c0             	movzx  eax,al
c0027cbb:	f7 f1                	div    ecx
c0027cbd:	c1 e0 04             	shl    eax,0x4
c0027cc0:	09 d0                	or     eax,edx
c0027cc2:	31 d2                	xor    edx,edx
c0027cc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0027cc8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027ccd:	f7 f1                	div    ecx
c0027ccf:	c1 e0 04             	shl    eax,0x4
c0027cd2:	09 d0                	or     eax,edx
c0027cd4:	31 d2                	xor    edx,edx
c0027cd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027cda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027cde:	f7 f1                	div    ecx
c0027ce0:	c1 e0 04             	shl    eax,0x4
c0027ce3:	09 d0                	or     eax,edx
c0027ce5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027ce9:	83 e5 02             	and    ebp,0x2
c0027cec:	75 1e                	jne    c0027d0c <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027cee:	0f b6 c3             	movzx  eax,bl
c0027cf1:	83 f8 0b             	cmp    eax,0xb
c0027cf4:	76 10                	jbe    c0027d06 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0027cf6:	8d 53 f4             	lea    edx,[ebx-0xc]
c0027cf9:	88 d3                	mov    bl,dl
c0027cfb:	84 d2                	test   dl,dl
c0027cfd:	75 02                	jne    c0027d01 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0027cff:	b3 0c                	mov    bl,0xc
c0027d01:	83 cb 80             	or     ebx,0xffffff80
c0027d04:	eb 06                	jmp    c0027d0c <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027d06:	85 c0                	test   eax,eax
c0027d08:	75 02                	jne    c0027d0c <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027d0a:	b3 0c                	mov    bl,0xc
c0027d0c:	0f b6 db             	movzx  ebx,bl
c0027d0f:	50                   	push   eax
c0027d10:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0027d15:	52                   	push   edx
c0027d16:	6a 00                	push   0x0
c0027d18:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027d1e:	e8 0f e0 fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027d23:	83 c4 0c             	add    esp,0xc
c0027d26:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027d2b:	50                   	push   eax
c0027d2c:	6a 02                	push   0x2
c0027d2e:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027d34:	e8 f9 df fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027d39:	83 c4 0c             	add    esp,0xc
c0027d3c:	53                   	push   ebx
c0027d3d:	6a 04                	push   0x4
c0027d3f:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027d45:	e8 e8 df fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027d4a:	83 c4 0c             	add    esp,0xc
c0027d4d:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0027d52:	52                   	push   edx
c0027d53:	6a 07                	push   0x7
c0027d55:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027d5b:	e8 d2 df fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027d60:	83 c4 0c             	add    esp,0xc
c0027d63:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0027d68:	50                   	push   eax
c0027d69:	6a 08                	push   0x8
c0027d6b:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027d71:	e8 bc df fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027d76:	83 c4 0c             	add    esp,0xc
c0027d79:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0027d7e:	55                   	push   ebp
c0027d7f:	6a 09                	push   0x9
c0027d81:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027d87:	e8 a6 df fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027d8c:	5a                   	pop    edx
c0027d8d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0027d91:	e8 7c fb ff ff       	call   c0027912 <RTC::completeRTCRefresh()>
c0027d96:	83 c4 3c             	add    esp,0x3c
c0027d99:	b0 01                	mov    al,0x1
c0027d9b:	5b                   	pop    ebx
c0027d9c:	5e                   	pop    esi
c0027d9d:	5f                   	pop    edi
c0027d9e:	5d                   	pop    ebp
c0027d9f:	c3                   	ret    

c0027da0 <rtcIRQHandler(regs*, void*)>:
c0027da0:	53                   	push   ebx
c0027da1:	83 ec 10             	sub    esp,0x10
c0027da4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027da8:	6a 0c                	push   0xc
c0027daa:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027db0:	e8 63 de fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027db5:	83 c4 10             	add    esp,0x10
c0027db8:	a8 80                	test   al,0x80
c0027dba:	74 24                	je     c0027de0 <rtcIRQHandler(regs*, void*)+0x40>
c0027dbc:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0027dc3:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0027dca:	66 ff 05 78 02 04 c0 	inc    WORD PTR ds:0xc0040278
c0027dd1:	75 0d                	jne    c0027de0 <rtcIRQHandler(regs*, void*)+0x40>
c0027dd3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0027dd7:	83 c4 08             	add    esp,0x8
c0027dda:	5b                   	pop    ebx
c0027ddb:	e9 32 fb ff ff       	jmp    c0027912 <RTC::completeRTCRefresh()>
c0027de0:	83 c4 08             	add    esp,0x8
c0027de3:	5b                   	pop    ebx
c0027de4:	c3                   	ret    
c0027de5:	90                   	nop

c0027de6 <RTC::RTC()>:
c0027de6:	83 ec 1c             	sub    esp,0x1c
c0027de9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027ded:	83 ec 08             	sub    esp,0x8
c0027df0:	68 eb 35 03 c0       	push   0xc00335eb
c0027df5:	50                   	push   eax
c0027df6:	e8 27 32 ff ff       	call   c001b022 <Clock::Clock(char const*)>
c0027dfb:	83 c4 10             	add    esp,0x10
c0027dfe:	ba 08 36 03 c0       	mov    edx,0xc0033608
c0027e03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027e07:	89 10                	mov    DWORD PTR [eax],edx
c0027e09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027e0d:	83 ec 0c             	sub    esp,0xc
c0027e10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027e14:	6a 01                	push   0x1
c0027e16:	68 a0 7d 02 c0       	push   0xc0027da0
c0027e1b:	6a 08                	push   0x8
c0027e1d:	50                   	push   eax
c0027e1e:	e8 db 36 ff ff       	call   c001b4fe <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0027e23:	83 c4 20             	add    esp,0x20
c0027e26:	89 c2                	mov    edx,eax
c0027e28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027e2c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0027e32:	fa                   	cli    
c0027e33:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027e38:	83 c0 01             	add    eax,0x1
c0027e3b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027e40:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027e45:	83 ec 08             	sub    esp,0x8
c0027e48:	6a 0b                	push   0xb
c0027e4a:	50                   	push   eax
c0027e4b:	e8 c8 dd fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027e50:	83 c4 10             	add    esp,0x10
c0027e53:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0027e57:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027e5c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0027e60:	83 ca 10             	or     edx,0x10
c0027e63:	0f b6 d2             	movzx  edx,dl
c0027e66:	83 ec 04             	sub    esp,0x4
c0027e69:	52                   	push   edx
c0027e6a:	6a 0b                	push   0xb
c0027e6c:	50                   	push   eax
c0027e6d:	e8 c0 de fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027e72:	83 c4 10             	add    esp,0x10
c0027e75:	83 ec 0c             	sub    esp,0xc
c0027e78:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027e7c:	e8 91 fa ff ff       	call   c0027912 <RTC::completeRTCRefresh()>
c0027e81:	83 c4 10             	add    esp,0x10
c0027e84:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027e89:	83 e8 01             	sub    eax,0x1
c0027e8c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027e91:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027e96:	85 c0                	test   eax,eax
c0027e98:	75 01                	jne    c0027e9b <RTC::RTC()+0xb5>
c0027e9a:	fb                   	sti    
c0027e9b:	90                   	nop
c0027e9c:	83 c4 1c             	add    esp,0x1c
c0027e9f:	c3                   	ret    

c0027ea0 <HalConsoleScroll(int, int)>:
c0027ea0:	83 ec 10             	sub    esp,0x10
c0027ea3:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0027eab:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0027eb3:	90                   	nop
c0027eb4:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027eb9:	0f 8f e1 00 00 00    	jg     c0027fa0 <HalConsoleScroll(int, int)+0x100>
c0027ebf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027ec7:	90                   	nop
c0027ec8:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0027ed0:	0f 8f be 00 00 00    	jg     c0027f94 <HalConsoleScroll(int, int)+0xf4>
c0027ed6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027eda:	89 d0                	mov    eax,edx
c0027edc:	c1 e0 02             	shl    eax,0x2
c0027edf:	01 d0                	add    eax,edx
c0027ee1:	c1 e0 05             	shl    eax,0x5
c0027ee4:	89 c2                	mov    edx,eax
c0027ee6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027eea:	01 d0                	add    eax,edx
c0027eec:	89 c2                	mov    edx,eax
c0027eee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027ef2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0027ef5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027ef9:	89 d0                	mov    eax,edx
c0027efb:	c1 e0 02             	shl    eax,0x2
c0027efe:	01 d0                	add    eax,edx
c0027f00:	c1 e0 05             	shl    eax,0x5
c0027f03:	89 c2                	mov    edx,eax
c0027f05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027f09:	01 d0                	add    eax,edx
c0027f0b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0027f11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027f15:	01 c2                	add    edx,eax
c0027f17:	8a 01                	mov    al,BYTE PTR [ecx]
c0027f19:	88 02                	mov    BYTE PTR [edx],al
c0027f1b:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027f20:	75 66                	jne    c0027f88 <HalConsoleScroll(int, int)+0xe8>
c0027f22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027f26:	83 e0 01             	and    eax,0x1
c0027f29:	74 39                	je     c0027f64 <HalConsoleScroll(int, int)+0xc4>
c0027f2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027f2f:	83 e0 0f             	and    eax,0xf
c0027f32:	88 c2                	mov    dl,al
c0027f34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027f38:	c1 e0 04             	shl    eax,0x4
c0027f3b:	09 d0                	or     eax,edx
c0027f3d:	88 c1                	mov    cl,al
c0027f3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027f43:	89 d0                	mov    eax,edx
c0027f45:	c1 e0 02             	shl    eax,0x2
c0027f48:	01 d0                	add    eax,edx
c0027f4a:	c1 e0 05             	shl    eax,0x5
c0027f4d:	89 c2                	mov    edx,eax
c0027f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027f53:	01 d0                	add    eax,edx
c0027f55:	89 c2                	mov    edx,eax
c0027f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027f5b:	01 d0                	add    eax,edx
c0027f5d:	88 ca                	mov    dl,cl
c0027f5f:	88 10                	mov    BYTE PTR [eax],dl
c0027f61:	eb 25                	jmp    c0027f88 <HalConsoleScroll(int, int)+0xe8>
c0027f63:	90                   	nop
c0027f64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027f68:	89 d0                	mov    eax,edx
c0027f6a:	c1 e0 02             	shl    eax,0x2
c0027f6d:	01 d0                	add    eax,edx
c0027f6f:	c1 e0 05             	shl    eax,0x5
c0027f72:	89 c2                	mov    edx,eax
c0027f74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027f78:	01 d0                	add    eax,edx
c0027f7a:	89 c2                	mov    edx,eax
c0027f7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027f80:	01 d0                	add    eax,edx
c0027f82:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0027f85:	8d 76 00             	lea    esi,[esi+0x0]
c0027f88:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0027f8d:	e9 36 ff ff ff       	jmp    c0027ec8 <HalConsoleScroll(int, int)+0x28>
c0027f92:	66 90                	xchg   ax,ax
c0027f94:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0027f99:	e9 16 ff ff ff       	jmp    c0027eb4 <HalConsoleScroll(int, int)+0x14>
c0027f9e:	66 90                	xchg   ax,ax
c0027fa0:	90                   	nop
c0027fa1:	83 c4 10             	add    esp,0x10
c0027fa4:	c3                   	ret    
c0027fa5:	8d 76 00             	lea    esi,[esi+0x0]

c0027fa8 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0027fa8:	83 ec 14             	sub    esp,0x14
c0027fab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027faf:	88 04 24             	mov    BYTE PTR [esp],al
c0027fb2:	8a 04 24             	mov    al,BYTE PTR [esp]
c0027fb5:	0f b6 c0             	movzx  eax,al
c0027fb8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027fbc:	89 d1                	mov    ecx,edx
c0027fbe:	83 e1 0f             	and    ecx,0xf
c0027fc1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027fc5:	c1 e2 04             	shl    edx,0x4
c0027fc8:	0f b6 d2             	movzx  edx,dl
c0027fcb:	09 ca                	or     edx,ecx
c0027fcd:	c1 e2 08             	shl    edx,0x8
c0027fd0:	09 d0                	or     eax,edx
c0027fd2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0027fd7:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0027fdf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027fe3:	89 d0                	mov    eax,edx
c0027fe5:	c1 e0 02             	shl    eax,0x2
c0027fe8:	01 d0                	add    eax,edx
c0027fea:	c1 e0 04             	shl    eax,0x4
c0027fed:	89 c2                	mov    edx,eax
c0027fef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027ff3:	01 d0                	add    eax,edx
c0027ff5:	01 c0                	add    eax,eax
c0027ff7:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0027ffb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027fff:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0028004:	66 89 02             	mov    WORD PTR [edx],ax
c0028007:	90                   	nop
c0028008:	83 c4 14             	add    esp,0x14
c002800b:	c3                   	ret    

c002800c <HalConsoleCursorUpdate(int, int)>:
c002800c:	83 ec 20             	sub    esp,0x20
c002800f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028013:	89 c2                	mov    edx,eax
c0028015:	c1 e2 02             	shl    edx,0x2
c0028018:	01 d0                	add    eax,edx
c002801a:	c1 e0 04             	shl    eax,0x4
c002801d:	89 c2                	mov    edx,eax
c002801f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0028023:	01 d0                	add    eax,edx
c0028025:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c002802a:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0028031:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0028036:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002803a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002803e:	ee                   	out    dx,al
c002803f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0028044:	0f b6 c0             	movzx  eax,al
c0028047:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c002804e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0028052:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0028056:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002805a:	ee                   	out    dx,al
c002805b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0028062:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0028067:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c002806b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002806f:	ee                   	out    dx,al
c0028070:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0028075:	c1 e8 08             	shr    eax,0x8
c0028078:	0f b6 c0             	movzx  eax,al
c002807b:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0028082:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0028086:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c002808a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002808e:	ee                   	out    dx,al
c002808f:	90                   	nop
c0028090:	83 c4 20             	add    esp,0x20
c0028093:	c3                   	ret    

c0028094 <FAT::getName()>:
c0028094:	b8 3c 36 03 c0       	mov    eax,0xc003363c
c0028099:	c3                   	ret    
c002809a:	66 90                	xchg   ax,ax

c002809c <FAT::tell(void*, unsigned long long*)>:
c002809c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00280a1:	75 09                	jne    c00280ac <FAT::tell(void*, unsigned long long*)+0x10>
c00280a3:	b8 04 00 00 00       	mov    eax,0x4
c00280a8:	c3                   	ret    
c00280a9:	8d 76 00             	lea    esi,[esi+0x0]
c00280ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00280b1:	75 09                	jne    c00280bc <FAT::tell(void*, unsigned long long*)+0x20>
c00280b3:	b8 04 00 00 00       	mov    eax,0x4
c00280b8:	c3                   	ret    
c00280b9:	8d 76 00             	lea    esi,[esi+0x0]
c00280bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00280c0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00280c3:	ba 00 00 00 00       	mov    edx,0x0
c00280c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00280cc:	89 01                	mov    DWORD PTR [ecx],eax
c00280ce:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00280d1:	b8 00 00 00 00       	mov    eax,0x0
c00280d6:	c3                   	ret    
c00280d7:	90                   	nop

c00280d8 <FAT::stat(void*, unsigned long long*)>:
c00280d8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00280dd:	75 09                	jne    c00280e8 <FAT::stat(void*, unsigned long long*)+0x10>
c00280df:	b8 04 00 00 00       	mov    eax,0x4
c00280e4:	c3                   	ret    
c00280e5:	8d 76 00             	lea    esi,[esi+0x0]
c00280e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00280ed:	75 09                	jne    c00280f8 <FAT::stat(void*, unsigned long long*)+0x20>
c00280ef:	b8 04 00 00 00       	mov    eax,0x4
c00280f4:	c3                   	ret    
c00280f5:	8d 76 00             	lea    esi,[esi+0x0]
c00280f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00280fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00280ff:	ba 00 00 00 00       	mov    edx,0x0
c0028104:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0028108:	89 01                	mov    DWORD PTR [ecx],eax
c002810a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002810d:	b8 00 00 00 00       	mov    eax,0x0
c0028112:	c3                   	ret    
c0028113:	90                   	nop

c0028114 <FAT::~FAT()>:
c0028114:	83 ec 0c             	sub    esp,0xc
c0028117:	ba 88 36 03 c0       	mov    edx,0xc0033688
c002811c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028120:	89 10                	mov    DWORD PTR [eax],edx
c0028122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028126:	83 ec 0c             	sub    esp,0xc
c0028129:	50                   	push   eax
c002812a:	e8 2b 22 ff ff       	call   c001a35a <Filesystem::~Filesystem()>
c002812f:	83 c4 10             	add    esp,0x10
c0028132:	90                   	nop
c0028133:	83 c4 0c             	add    esp,0xc
c0028136:	c3                   	ret    
c0028137:	90                   	nop

c0028138 <FAT::~FAT()>:
c0028138:	83 ec 0c             	sub    esp,0xc
c002813b:	83 ec 0c             	sub    esp,0xc
c002813e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028142:	e8 cd ff ff ff       	call   c0028114 <FAT::~FAT()>
c0028147:	83 c4 10             	add    esp,0x10
c002814a:	83 ec 08             	sub    esp,0x8
c002814d:	6a 08                	push   0x8
c002814f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028153:	e8 4c 12 ff ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c0028158:	83 c4 10             	add    esp,0x10
c002815b:	83 c4 0c             	add    esp,0xc
c002815e:	c3                   	ret    
c002815f:	90                   	nop

c0028160 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0028160:	83 ec 1c             	sub    esp,0x1c
c0028163:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002816a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002816f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028173:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c002817a:	83 f8 ff             	cmp    eax,0xffffffff
c002817d:	75 35                	jne    c00281b4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c002817f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0028183:	88 c2                	mov    dl,al
c0028185:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002818a:	01 d0                	add    eax,edx
c002818c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0028190:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0028196:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002819a:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c00281a1:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00281a6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00281aa:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c00281b1:	eb 19                	jmp    c00281cc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00281b3:	90                   	nop
c00281b4:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00281b8:	88 c2                	mov    dl,al
c00281ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00281be:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c00281c5:	01 d0                	add    eax,edx
c00281c7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00281cb:	90                   	nop
c00281cc:	83 ec 04             	sub    esp,0x4
c00281cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00281d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00281d7:	8d 44 24 15          	lea    eax,[esp+0x15]
c00281db:	50                   	push   eax
c00281dc:	e8 3a d1 fd ff       	call   c000531b <f_getlabel>
c00281e1:	83 c4 10             	add    esp,0x10
c00281e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00281e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00281ed:	75 09                	jne    c00281f8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00281ef:	b8 00 00 00 00       	mov    eax,0x0
c00281f4:	eb 0a                	jmp    c0028200 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00281f6:	66 90                	xchg   ax,ax
c00281f8:	b8 01 00 00 00       	mov    eax,0x1
c00281fd:	8d 76 00             	lea    esi,[esi+0x0]
c0028200:	83 c4 1c             	add    esp,0x1c
c0028203:	c3                   	ret    

c0028204 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0028204:	57                   	push   edi
c0028205:	83 ec 58             	sub    esp,0x58
c0028208:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0028210:	8d 54 24 10          	lea    edx,[esp+0x10]
c0028214:	b8 00 00 00 00       	mov    eax,0x0
c0028219:	b9 0f 00 00 00       	mov    ecx,0xf
c002821e:	fc                   	cld    
c002821f:	89 d7                	mov    edi,edx
c0028221:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0028223:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0028227:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c002822e:	83 f8 ff             	cmp    eax,0xffffffff
c0028231:	75 35                	jne    c0028268 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0028233:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0028237:	88 c2                	mov    dl,al
c0028239:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002823e:	01 d0                	add    eax,edx
c0028240:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028244:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c002824a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002824e:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0028255:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002825a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c002825e:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0028265:	eb 19                	jmp    c0028280 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0028267:	90                   	nop
c0028268:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002826c:	88 c2                	mov    dl,al
c002826e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0028272:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028279:	01 d0                	add    eax,edx
c002827b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002827f:	90                   	nop
c0028280:	83 ec 08             	sub    esp,0x8
c0028283:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0028287:	8d 44 24 18          	lea    eax,[esp+0x18]
c002828b:	50                   	push   eax
c002828c:	e8 af 85 fd ff       	call   c0000840 <strcat>
c0028291:	83 c4 10             	add    esp,0x10
c0028294:	83 ec 0c             	sub    esp,0xc
c0028297:	8d 44 24 18          	lea    eax,[esp+0x18]
c002829b:	50                   	push   eax
c002829c:	e8 cb d1 fd ff       	call   c000546c <f_setlabel>
c00282a1:	83 c4 10             	add    esp,0x10
c00282a4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00282a8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00282ad:	75 09                	jne    c00282b8 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00282af:	b8 00 00 00 00       	mov    eax,0x0
c00282b4:	eb 0a                	jmp    c00282c0 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00282b6:	66 90                	xchg   ax,ax
c00282b8:	b8 01 00 00 00       	mov    eax,0x1
c00282bd:	8d 76 00             	lea    esi,[esi+0x0]
c00282c0:	83 c4 58             	add    esp,0x58
c00282c3:	5f                   	pop    edi
c00282c4:	c3                   	ret    
c00282c5:	90                   	nop
c00282c6:	66 90                	xchg   ax,ax

c00282c8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00282c8:	83 ec 2c             	sub    esp,0x2c
c00282cb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00282d3:	83 ec 08             	sub    esp,0x8
c00282d6:	68 60 36 03 c0       	push   0xc0033660
c00282db:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00282df:	e8 6c 84 fd ff       	call   c0000750 <strcmp>
c00282e4:	83 c4 10             	add    esp,0x10
c00282e7:	85 c0                	test   eax,eax
c00282e9:	0f 94 c0             	sete   al
c00282ec:	0f b6 c0             	movzx  eax,al
c00282ef:	85 c0                	test   eax,eax
c00282f1:	74 0d                	je     c0028300 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00282f3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00282fb:	e9 c0 00 00 00       	jmp    c00283c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028300:	83 ec 08             	sub    esp,0x8
c0028303:	68 52 36 03 c0       	push   0xc0033652
c0028308:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002830c:	e8 3f 84 fd ff       	call   c0000750 <strcmp>
c0028311:	83 c4 10             	add    esp,0x10
c0028314:	85 c0                	test   eax,eax
c0028316:	0f 94 c0             	sete   al
c0028319:	0f b6 c0             	movzx  eax,al
c002831c:	85 c0                	test   eax,eax
c002831e:	74 10                	je     c0028330 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0028320:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0028328:	e9 93 00 00 00       	jmp    c00283c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c002832d:	8d 76 00             	lea    esi,[esi+0x0]
c0028330:	83 ec 08             	sub    esp,0x8
c0028333:	68 58 36 03 c0       	push   0xc0033658
c0028338:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002833c:	e8 0f 84 fd ff       	call   c0000750 <strcmp>
c0028341:	83 c4 10             	add    esp,0x10
c0028344:	85 c0                	test   eax,eax
c0028346:	0f 94 c0             	sete   al
c0028349:	0f b6 c0             	movzx  eax,al
c002834c:	85 c0                	test   eax,eax
c002834e:	74 0c                	je     c002835c <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0028350:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0028358:	eb 66                	jmp    c00283c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c002835a:	66 90                	xchg   ax,ax
c002835c:	83 ec 08             	sub    esp,0x8
c002835f:	68 b8 f7 02 c0       	push   0xc002f7b8
c0028364:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028368:	e8 e3 83 fd ff       	call   c0000750 <strcmp>
c002836d:	83 c4 10             	add    esp,0x10
c0028370:	85 c0                	test   eax,eax
c0028372:	0f 94 c0             	sete   al
c0028375:	0f b6 c0             	movzx  eax,al
c0028378:	85 c0                	test   eax,eax
c002837a:	74 0c                	je     c0028388 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c002837c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0028384:	eb 3a                	jmp    c00283c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028386:	66 90                	xchg   ax,ax
c0028388:	83 ec 08             	sub    esp,0x8
c002838b:	68 5e 36 03 c0       	push   0xc003365e
c0028390:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028394:	e8 b7 83 fd ff       	call   c0000750 <strcmp>
c0028399:	83 c4 10             	add    esp,0x10
c002839c:	85 c0                	test   eax,eax
c002839e:	0f 94 c0             	sete   al
c00283a1:	0f b6 c0             	movzx  eax,al
c00283a4:	85 c0                	test   eax,eax
c00283a6:	74 0c                	je     c00283b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00283a8:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00283b0:	eb 0e                	jmp    c00283c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00283b2:	66 90                	xchg   ax,ax
c00283b4:	b8 08 00 00 00       	mov    eax,0x8
c00283b9:	e9 ea 00 00 00       	jmp    c00284a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00283be:	66 90                	xchg   ax,ax
c00283c0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00283c7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00283cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00283d0:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c00283d7:	83 f8 ff             	cmp    eax,0xffffffff
c00283da:	75 34                	jne    c0028410 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c00283dc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00283e0:	88 c2                	mov    dl,al
c00283e2:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00283e7:	01 d0                	add    eax,edx
c00283e9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00283ed:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c00283f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00283f7:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c00283fe:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028403:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0028407:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c002840e:	eb 18                	jmp    c0028428 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0028410:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0028414:	88 c2                	mov    dl,al
c0028416:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002841a:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028421:	01 d0                	add    eax,edx
c0028423:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0028427:	90                   	nop
c0028428:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002842c:	88 04 24             	mov    BYTE PTR [esp],al
c002842f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0028433:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028437:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002843f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0028444:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002844c:	83 ec 0c             	sub    esp,0xc
c002844f:	68 00 20 00 00       	push   0x2000
c0028454:	e8 ea e1 fe ff       	call   c0016643 <malloc>
c0028459:	83 c4 10             	add    esp,0x10
c002845c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028460:	68 00 20 00 00       	push   0x2000
c0028465:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028469:	8d 44 24 08          	lea    eax,[esp+0x8]
c002846d:	50                   	push   eax
c002846e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0028472:	50                   	push   eax
c0028473:	e8 f1 d2 fd ff       	call   c0005769 <f_mkfs>
c0028478:	83 c4 10             	add    esp,0x10
c002847b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002847f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028484:	75 0a                	jne    c0028490 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0028486:	b8 00 00 00 00       	mov    eax,0x0
c002848b:	eb 1b                	jmp    c00284a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c002848d:	8d 76 00             	lea    esi,[esi+0x0]
c0028490:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0028495:	75 09                	jne    c00284a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0028497:	b8 09 00 00 00       	mov    eax,0x9
c002849c:	eb 0a                	jmp    c00284a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c002849e:	66 90                	xchg   ax,ax
c00284a0:	b8 01 00 00 00       	mov    eax,0x1
c00284a5:	8d 76 00             	lea    esi,[esi+0x0]
c00284a8:	83 c4 2c             	add    esp,0x2c
c00284ab:	c3                   	ret    

c00284ac <FAT::tryMount(LogicalDisk*, int)>:
c00284ac:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00284b2:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00284b7:	83 f8 14             	cmp    eax,0x14
c00284ba:	75 18                	jne    c00284d4 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00284bc:	83 ec 0c             	sub    esp,0xc
c00284bf:	68 64 36 03 c0       	push   0xc0033664
c00284c4:	e8 21 80 ff ff       	call   c00204ea <KePanic(char const*)>
c00284c9:	83 c4 10             	add    esp,0x10
c00284cc:	b0 00                	mov    al,0x0
c00284ce:	e9 ed 01 00 00       	jmp    c00286c0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00284d3:	90                   	nop
c00284d4:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00284db:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00284e1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00284e7:	3d 00 02 00 00       	cmp    eax,0x200
c00284ec:	74 0a                	je     c00284f8 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00284ee:	b0 00                	mov    al,0x0
c00284f0:	e9 cb 01 00 00       	jmp    c00286c0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00284f5:	8d 76 00             	lea    esi,[esi+0x0]
c00284f8:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0028500:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0028507:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c002850e:	83 f8 ff             	cmp    eax,0xffffffff
c0028511:	74 09                	je     c002851c <FAT::tryMount(LogicalDisk*, int)+0x70>
c0028513:	b0 01                	mov    al,0x1
c0028515:	e9 a6 01 00 00       	jmp    c00286c0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c002851a:	66 90                	xchg   ax,ax
c002851c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0028526:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c002852e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0028535:	88 c2                	mov    dl,al
c0028537:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002853c:	01 d0                	add    eax,edx
c002853e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0028545:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c002854b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0028552:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0028559:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002855e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0028565:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c002856c:	83 ec 0c             	sub    esp,0xc
c002856f:	68 34 02 00 00       	push   0x234
c0028574:	e8 ca e0 fe ff       	call   c0016643 <malloc>
c0028579:	83 c4 10             	add    esp,0x10
c002857c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0028583:	83 ec 04             	sub    esp,0x4
c0028586:	6a 00                	push   0x0
c0028588:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c002858f:	50                   	push   eax
c0028590:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0028597:	e8 a8 b9 fd ff       	call   c0003f44 <f_mount>
c002859c:	83 c4 10             	add    esp,0x10
c002859f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00285a6:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00285ae:	74 1c                	je     c00285cc <FAT::tryMount(LogicalDisk*, int)+0x120>
c00285b0:	83 ec 0c             	sub    esp,0xc
c00285b3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00285ba:	e8 a4 e0 fe ff       	call   c0016663 <rfree>
c00285bf:	83 c4 10             	add    esp,0x10
c00285c2:	b0 00                	mov    al,0x0
c00285c4:	e9 f7 00 00 00       	jmp    c00286c0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00285c9:	8d 76 00             	lea    esi,[esi+0x0]
c00285cc:	83 ec 04             	sub    esp,0x4
c00285cf:	68 00 01 00 00       	push   0x100
c00285d4:	6a 00                	push   0x0
c00285d6:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00285dd:	50                   	push   eax
c00285de:	e8 0d 7f fd ff       	call   c00004f0 <memset>
c00285e3:	83 c4 10             	add    esp,0x10
c00285e6:	83 ec 08             	sub    esp,0x8
c00285e9:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00285f0:	50                   	push   eax
c00285f1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00285f8:	50                   	push   eax
c00285f9:	e8 42 82 fd ff       	call   c0000840 <strcat>
c00285fe:	83 c4 10             	add    esp,0x10
c0028601:	83 ec 08             	sub    esp,0x8
c0028604:	68 72 36 03 c0       	push   0xc0033672
c0028609:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028610:	50                   	push   eax
c0028611:	e8 2a 82 fd ff       	call   c0000840 <strcat>
c0028616:	83 c4 10             	add    esp,0x10
c0028619:	83 ec 04             	sub    esp,0x4
c002861c:	6a 01                	push   0x1
c002861e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0028625:	50                   	push   eax
c0028626:	8d 44 24 14          	lea    eax,[esp+0x14]
c002862a:	50                   	push   eax
c002862b:	e8 76 b9 fd ff       	call   c0003fa6 <f_open>
c0028630:	83 c4 10             	add    esp,0x10
c0028633:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c002863a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0028641:	85 c0                	test   eax,eax
c0028643:	74 0b                	je     c0028650 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0028645:	78 31                	js     c0028678 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0028647:	83 e8 04             	sub    eax,0x4
c002864a:	83 f8 01             	cmp    eax,0x1
c002864d:	77 29                	ja     c0028678 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c002864f:	90                   	nop
c0028650:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0028658:	83 ec 0c             	sub    esp,0xc
c002865b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002865f:	50                   	push   eax
c0028660:	e8 10 c1 fd ff       	call   c0004775 <f_close>
c0028665:	83 c4 10             	add    esp,0x10
c0028668:	90                   	nop
c0028669:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0028671:	85 c0                	test   eax,eax
c0028673:	74 43                	je     c00286b8 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0028675:	eb 31                	jmp    c00286a8 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0028677:	90                   	nop
c0028678:	83 ec 0c             	sub    esp,0xc
c002867b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0028682:	e8 dc df fe ff       	call   c0016663 <rfree>
c0028687:	83 c4 10             	add    esp,0x10
c002868a:	83 ec 04             	sub    esp,0x4
c002868d:	6a 00                	push   0x0
c002868f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0028696:	50                   	push   eax
c0028697:	6a 00                	push   0x0
c0028699:	e8 a6 b8 fd ff       	call   c0003f44 <f_mount>
c002869e:	83 c4 10             	add    esp,0x10
c00286a1:	b0 00                	mov    al,0x0
c00286a3:	eb 1b                	jmp    c00286c0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00286a5:	8d 76 00             	lea    esi,[esi+0x0]
c00286a8:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00286ad:	83 c0 01             	add    eax,0x1
c00286b0:	a3 80 02 04 c0       	mov    ds:0xc0040280,eax
c00286b5:	8d 76 00             	lea    esi,[esi+0x0]
c00286b8:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00286bf:	90                   	nop
c00286c0:	81 c4 4c 03 00 00    	add    esp,0x34c
c00286c6:	c3                   	ret    
c00286c7:	90                   	nop

c00286c8 <FAT::allocateSwapfile(char const*, int)>:
c00286c8:	55                   	push   ebp
c00286c9:	57                   	push   edi
c00286ca:	56                   	push   esi
c00286cb:	53                   	push   ebx
c00286cc:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00286d2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00286dd:	83 ec 0c             	sub    esp,0xc
c00286e0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00286e7:	e8 57 df fe ff       	call   c0016643 <malloc>
c00286ec:	83 c4 10             	add    esp,0x10
c00286ef:	89 c7                	mov    edi,eax
c00286f1:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00286f6:	83 ec 04             	sub    esp,0x4
c00286f9:	50                   	push   eax
c00286fa:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0028701:	57                   	push   edi
c0028702:	e8 d1 1f ff ff       	call   c001a6d8 <File::File(char const*, Process*)>
c0028707:	83 c4 10             	add    esp,0x10
c002870a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0028711:	83 ec 04             	sub    esp,0x4
c0028714:	8d 44 24 13          	lea    eax,[esp+0x13]
c0028718:	50                   	push   eax
c0028719:	8d 44 24 18          	lea    eax,[esp+0x18]
c002871d:	50                   	push   eax
c002871e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028725:	e8 ce 22 ff ff       	call   c001a9f8 <File::stat(unsigned long long*, bool*)>
c002872a:	83 c4 10             	add    esp,0x10
c002872d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0028734:	c1 e0 14             	shl    eax,0x14
c0028737:	89 c7                	mov    edi,eax
c0028739:	89 c5                	mov    ebp,eax
c002873b:	c1 fd 1f             	sar    ebp,0x1f
c002873e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028742:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028746:	89 f9                	mov    ecx,edi
c0028748:	31 c1                	xor    ecx,eax
c002874a:	89 cb                	mov    ebx,ecx
c002874c:	89 e9                	mov    ecx,ebp
c002874e:	31 d1                	xor    ecx,edx
c0028750:	89 ce                	mov    esi,ecx
c0028752:	89 f0                	mov    eax,esi
c0028754:	09 d8                	or     eax,ebx
c0028756:	0f 84 9c 00 00 00    	je     c00287f8 <FAT::allocateSwapfile(char const*, int)+0x130>
c002875c:	83 ec 0c             	sub    esp,0xc
c002875f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028766:	e8 59 21 ff ff       	call   c001a8c4 <File::unlink()>
c002876b:	83 c4 10             	add    esp,0x10
c002876e:	83 ec 08             	sub    esp,0x8
c0028771:	6a 12                	push   0x12
c0028773:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c002877a:	e8 77 1f ff ff       	call   c001a6f6 <File::open(FileOpenMode)>
c002877f:	83 c4 10             	add    esp,0x10
c0028782:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028789:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002878f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0028796:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c002879d:	c1 e0 14             	shl    eax,0x14
c00287a0:	83 ec 04             	sub    esp,0x4
c00287a3:	6a 01                	push   0x1
c00287a5:	50                   	push   eax
c00287a6:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00287ad:	e8 4a ce fd ff       	call   c00055fc <f_expand>
c00287b2:	83 c4 10             	add    esp,0x10
c00287b5:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00287bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00287be:	83 c0 10             	add    eax,0x10
c00287c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00287c3:	83 ec 0c             	sub    esp,0xc
c00287c6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00287ca:	52                   	push   edx
c00287cb:	8d 54 24 30          	lea    edx,[esp+0x30]
c00287cf:	52                   	push   edx
c00287d0:	6a 00                	push   0x0
c00287d2:	68 00 04 00 00       	push   0x400
c00287d7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00287de:	ff d0                	call   eax
c00287e0:	83 c4 20             	add    esp,0x20
c00287e3:	83 ec 0c             	sub    esp,0xc
c00287e6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00287ed:	e8 62 1f ff ff       	call   c001a754 <File::close()>
c00287f2:	83 c4 10             	add    esp,0x10
c00287f5:	8d 76 00             	lea    esi,[esi+0x0]
c00287f8:	83 ec 08             	sub    esp,0x8
c00287fb:	6a 01                	push   0x1
c00287fd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028804:	e8 ed 1e ff ff       	call   c001a6f6 <File::open(FileOpenMode)>
c0028809:	83 c4 10             	add    esp,0x10
c002880c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028813:	8b 00                	mov    eax,DWORD PTR [eax]
c0028815:	83 c0 0c             	add    eax,0xc
c0028818:	8b 00                	mov    eax,DWORD PTR [eax]
c002881a:	83 ec 0c             	sub    esp,0xc
c002881d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0028821:	52                   	push   edx
c0028822:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0028826:	52                   	push   edx
c0028827:	6a 00                	push   0x0
c0028829:	6a 04                	push   0x4
c002882b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0028832:	ff d0                	call   eax
c0028834:	83 c4 20             	add    esp,0x20
c0028837:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c002883e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0028844:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c002884b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0028852:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0028855:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c002885c:	83 ec 0c             	sub    esp,0xc
c002885f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028866:	e8 e9 1e ff ff       	call   c001a754 <File::close()>
c002886b:	83 c4 10             	add    esp,0x10
c002886e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0028875:	ba 00 00 00 00       	mov    edx,0x0
c002887a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0028880:	5b                   	pop    ebx
c0028881:	5e                   	pop    esi
c0028882:	5f                   	pop    edi
c0028883:	5d                   	pop    ebp
c0028884:	c3                   	ret    
c0028885:	90                   	nop
c0028886:	66 90                	xchg   ax,ax

c0028888 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0028888:	57                   	push   edi
c0028889:	56                   	push   esi
c002888a:	53                   	push   ebx
c002888b:	81 ec 50 02 00 00    	sub    esp,0x250
c0028891:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0028899:	74 0d                	je     c00288a8 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c002889b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00288a3:	75 0f                	jne    c00288b4 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00288a5:	8d 76 00             	lea    esi,[esi+0x0]
c00288a8:	b8 04 00 00 00       	mov    eax,0x4
c00288ad:	e9 3a 01 00 00       	jmp    c00289ec <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00288b2:	66 90                	xchg   ax,ax
c00288b4:	83 ec 08             	sub    esp,0x8
c00288b7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00288be:	50                   	push   eax
c00288bf:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00288c6:	e8 77 c1 fd ff       	call   c0004a42 <f_readdir>
c00288cb:	83 c4 10             	add    esp,0x10
c00288ce:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00288d5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00288dc:	83 ec 0c             	sub    esp,0xc
c00288df:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00288e6:	83 c0 16             	add    eax,0x16
c00288e9:	50                   	push   eax
c00288ea:	e8 81 7c fd ff       	call   c0000570 <strlen>
c00288ef:	83 c4 10             	add    esp,0x10
c00288f2:	ba 00 00 00 00       	mov    edx,0x0
c00288f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00288fb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00288ff:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0028906:	0f b6 c0             	movzx  eax,al
c0028909:	83 e0 10             	and    eax,0x10
c002890c:	74 0a                	je     c0028918 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c002890e:	b8 02 00 00 00       	mov    eax,0x2
c0028913:	eb 0b                	jmp    c0028920 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0028915:	8d 76 00             	lea    esi,[esi+0x0]
c0028918:	b8 01 00 00 00       	mov    eax,0x1
c002891d:	8d 76 00             	lea    esi,[esi+0x0]
c0028920:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028924:	83 ec 08             	sub    esp,0x8
c0028927:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002892e:	83 c0 16             	add    eax,0x16
c0028931:	50                   	push   eax
c0028932:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028936:	83 c0 10             	add    eax,0x10
c0028939:	50                   	push   eax
c002893a:	e8 01 7d fd ff       	call   c0000640 <strcpy>
c002893f:	83 c4 10             	add    esp,0x10
c0028942:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0028949:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0028950:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028954:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c002895b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0028962:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0028969:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0028970:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0028977:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c002897e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0028985:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c002898c:	89 c6                	mov    esi,eax
c002898e:	89 d7                	mov    edi,edx
c0028990:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0028992:	89 c8                	mov    eax,ecx
c0028994:	89 fa                	mov    edx,edi
c0028996:	89 f3                	mov    ebx,esi
c0028998:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c002899f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00289a6:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00289ad:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00289b4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00289ba:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00289c1:	0f be c0             	movsx  eax,al
c00289c4:	85 c0                	test   eax,eax
c00289c6:	75 08                	jne    c00289d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00289c8:	b8 07 00 00 00       	mov    eax,0x7
c00289cd:	eb 1d                	jmp    c00289ec <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00289cf:	90                   	nop
c00289d0:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00289d7:	85 c0                	test   eax,eax
c00289d9:	75 09                	jne    c00289e4 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00289db:	b8 00 00 00 00       	mov    eax,0x0
c00289e0:	eb 0a                	jmp    c00289ec <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00289e2:	66 90                	xchg   ax,ax
c00289e4:	b8 01 00 00 00       	mov    eax,0x1
c00289e9:	8d 76 00             	lea    esi,[esi+0x0]
c00289ec:	81 c4 50 02 00 00    	add    esp,0x250
c00289f2:	5b                   	pop    ebx
c00289f3:	5e                   	pop    esi
c00289f4:	5f                   	pop    edi
c00289f5:	c3                   	ret    
c00289f6:	66 90                	xchg   ax,ax

c00289f8 <FAT::read(void*, unsigned long, void*, int*)>:
c00289f8:	83 ec 1c             	sub    esp,0x1c
c00289fb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028a00:	74 0a                	je     c0028a0c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0028a02:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0028a07:	75 0b                	jne    c0028a14 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0028a09:	8d 76 00             	lea    esi,[esi+0x0]
c0028a0c:	b8 04 00 00 00       	mov    eax,0x4
c0028a11:	eb 41                	jmp    c0028a54 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0028a13:	90                   	nop
c0028a14:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028a18:	50                   	push   eax
c0028a19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028a1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028a21:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028a25:	e8 3f b8 fd ff       	call   c0004269 <f_read>
c0028a2a:	83 c4 10             	add    esp,0x10
c0028a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028a31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028a35:	89 c2                	mov    edx,eax
c0028a37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028a3b:	89 10                	mov    DWORD PTR [eax],edx
c0028a3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028a41:	85 c0                	test   eax,eax
c0028a43:	75 07                	jne    c0028a4c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0028a45:	b8 00 00 00 00       	mov    eax,0x0
c0028a4a:	eb 08                	jmp    c0028a54 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0028a4c:	b8 01 00 00 00       	mov    eax,0x1
c0028a51:	8d 76 00             	lea    esi,[esi+0x0]
c0028a54:	83 c4 1c             	add    esp,0x1c
c0028a57:	c3                   	ret    

c0028a58 <FAT::write(void*, unsigned long, void*, int*)>:
c0028a58:	83 ec 1c             	sub    esp,0x1c
c0028a5b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028a60:	74 0a                	je     c0028a6c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0028a62:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0028a67:	75 0b                	jne    c0028a74 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0028a69:	8d 76 00             	lea    esi,[esi+0x0]
c0028a6c:	b8 04 00 00 00       	mov    eax,0x4
c0028a71:	eb 41                	jmp    c0028ab4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028a73:	90                   	nop
c0028a74:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028a78:	50                   	push   eax
c0028a79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028a7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028a81:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028a85:	e8 de b9 fd ff       	call   c0004468 <f_write>
c0028a8a:	83 c4 10             	add    esp,0x10
c0028a8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028a91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028a95:	89 c2                	mov    edx,eax
c0028a97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028a9b:	89 10                	mov    DWORD PTR [eax],edx
c0028a9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028aa1:	85 c0                	test   eax,eax
c0028aa3:	75 07                	jne    c0028aac <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0028aa5:	b8 00 00 00 00       	mov    eax,0x0
c0028aaa:	eb 08                	jmp    c0028ab4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028aac:	b8 01 00 00 00       	mov    eax,0x1
c0028ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0028ab4:	83 c4 1c             	add    esp,0x1c
c0028ab7:	c3                   	ret    

c0028ab8 <FAT::close(void*)>:
c0028ab8:	83 ec 1c             	sub    esp,0x1c
c0028abb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028ac0:	75 0a                	jne    c0028acc <FAT::close(void*)+0x14>
c0028ac2:	b8 04 00 00 00       	mov    eax,0x4
c0028ac7:	eb 3f                	jmp    c0028b08 <FAT::close(void*)+0x50>
c0028ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0028acc:	83 ec 0c             	sub    esp,0xc
c0028acf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028ad3:	e8 9d bc fd ff       	call   c0004775 <f_close>
c0028ad8:	83 c4 10             	add    esp,0x10
c0028adb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028adf:	83 ec 0c             	sub    esp,0xc
c0028ae2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028ae6:	e8 68 db fe ff       	call   c0016653 <free>
c0028aeb:	83 c4 10             	add    esp,0x10
c0028aee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028af2:	85 c0                	test   eax,eax
c0028af4:	75 0a                	jne    c0028b00 <FAT::close(void*)+0x48>
c0028af6:	b8 00 00 00 00       	mov    eax,0x0
c0028afb:	eb 0b                	jmp    c0028b08 <FAT::close(void*)+0x50>
c0028afd:	8d 76 00             	lea    esi,[esi+0x0]
c0028b00:	b8 01 00 00 00       	mov    eax,0x1
c0028b05:	8d 76 00             	lea    esi,[esi+0x0]
c0028b08:	83 c4 1c             	add    esp,0x1c
c0028b0b:	c3                   	ret    

c0028b0c <FAT::closeDir(void*)>:
c0028b0c:	83 ec 1c             	sub    esp,0x1c
c0028b0f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028b14:	75 0a                	jne    c0028b20 <FAT::closeDir(void*)+0x14>
c0028b16:	b8 04 00 00 00       	mov    eax,0x4
c0028b1b:	eb 3f                	jmp    c0028b5c <FAT::closeDir(void*)+0x50>
c0028b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0028b20:	83 ec 0c             	sub    esp,0xc
c0028b23:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028b27:	e8 f4 be fd ff       	call   c0004a20 <f_closedir>
c0028b2c:	83 c4 10             	add    esp,0x10
c0028b2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028b33:	83 ec 0c             	sub    esp,0xc
c0028b36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028b3a:	e8 14 db fe ff       	call   c0016653 <free>
c0028b3f:	83 c4 10             	add    esp,0x10
c0028b42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028b46:	85 c0                	test   eax,eax
c0028b48:	75 0a                	jne    c0028b54 <FAT::closeDir(void*)+0x48>
c0028b4a:	b8 00 00 00 00       	mov    eax,0x0
c0028b4f:	eb 0b                	jmp    c0028b5c <FAT::closeDir(void*)+0x50>
c0028b51:	8d 76 00             	lea    esi,[esi+0x0]
c0028b54:	b8 01 00 00 00       	mov    eax,0x1
c0028b59:	8d 76 00             	lea    esi,[esi+0x0]
c0028b5c:	83 c4 1c             	add    esp,0x1c
c0028b5f:	c3                   	ret    

c0028b60 <FAT::truncate(void*, unsigned long long)>:
c0028b60:	83 ec 2c             	sub    esp,0x2c
c0028b63:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028b67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028b6b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028b6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028b73:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028b78:	75 0a                	jne    c0028b84 <FAT::truncate(void*, unsigned long long)+0x24>
c0028b7a:	b8 04 00 00 00       	mov    eax,0x4
c0028b7f:	eb 47                	jmp    c0028bc8 <FAT::truncate(void*, unsigned long long)+0x68>
c0028b81:	8d 76 00             	lea    esi,[esi+0x0]
c0028b84:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028b88:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0028b8b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028b8f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0028b97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b9b:	83 ec 08             	sub    esp,0x8
c0028b9e:	50                   	push   eax
c0028b9f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028ba3:	e8 fc bb fd ff       	call   c00047a4 <f_lseek>
c0028ba8:	83 c4 10             	add    esp,0x10
c0028bab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028baf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028bb3:	85 c0                	test   eax,eax
c0028bb5:	75 09                	jne    c0028bc0 <FAT::truncate(void*, unsigned long long)+0x60>
c0028bb7:	b8 00 00 00 00       	mov    eax,0x0
c0028bbc:	eb 0a                	jmp    c0028bc8 <FAT::truncate(void*, unsigned long long)+0x68>
c0028bbe:	66 90                	xchg   ax,ax
c0028bc0:	b8 01 00 00 00       	mov    eax,0x1
c0028bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0028bc8:	83 c4 2c             	add    esp,0x2c
c0028bcb:	c3                   	ret    

c0028bcc <FAT::seek(void*, unsigned long long)>:
c0028bcc:	83 ec 2c             	sub    esp,0x2c
c0028bcf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028bd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028bd7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028bdf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028be4:	75 0a                	jne    c0028bf0 <FAT::seek(void*, unsigned long long)+0x24>
c0028be6:	b8 04 00 00 00       	mov    eax,0x4
c0028beb:	eb 33                	jmp    c0028c20 <FAT::seek(void*, unsigned long long)+0x54>
c0028bed:	8d 76 00             	lea    esi,[esi+0x0]
c0028bf0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028bf4:	83 ec 08             	sub    esp,0x8
c0028bf7:	50                   	push   eax
c0028bf8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028bfc:	e8 a3 bb fd ff       	call   c00047a4 <f_lseek>
c0028c01:	83 c4 10             	add    esp,0x10
c0028c04:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028c08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028c0c:	85 c0                	test   eax,eax
c0028c0e:	75 08                	jne    c0028c18 <FAT::seek(void*, unsigned long long)+0x4c>
c0028c10:	b8 00 00 00 00       	mov    eax,0x0
c0028c15:	eb 09                	jmp    c0028c20 <FAT::seek(void*, unsigned long long)+0x54>
c0028c17:	90                   	nop
c0028c18:	b8 01 00 00 00       	mov    eax,0x1
c0028c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0028c20:	83 c4 2c             	add    esp,0x2c
c0028c23:	c3                   	ret    

c0028c24 <fatWrapperReadDisk>:
c0028c24:	53                   	push   ebx
c0028c25:	83 ec 18             	sub    esp,0x18
c0028c28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028c2c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028c30:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028c35:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0028c3c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0028c40:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028c44:	ba 00 00 00 00       	mov    edx,0x0
c0028c49:	83 ec 0c             	sub    esp,0xc
c0028c4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028c50:	53                   	push   ebx
c0028c51:	52                   	push   edx
c0028c52:	50                   	push   eax
c0028c53:	51                   	push   ecx
c0028c54:	e8 eb 3c ff ff       	call   c001c944 <LogicalDisk::read(unsigned long long, int, void*)>
c0028c59:	83 c4 20             	add    esp,0x20
c0028c5c:	83 c4 18             	add    esp,0x18
c0028c5f:	5b                   	pop    ebx
c0028c60:	c3                   	ret    
c0028c61:	8d 76 00             	lea    esi,[esi+0x0]

c0028c64 <fatWrapperWriteDisk>:
c0028c64:	53                   	push   ebx
c0028c65:	83 ec 18             	sub    esp,0x18
c0028c68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028c6c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028c70:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028c75:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0028c7c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0028c80:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028c84:	ba 00 00 00 00       	mov    edx,0x0
c0028c89:	83 ec 0c             	sub    esp,0xc
c0028c8c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028c90:	53                   	push   ebx
c0028c91:	52                   	push   edx
c0028c92:	50                   	push   eax
c0028c93:	51                   	push   ecx
c0028c94:	e8 17 3d ff ff       	call   c001c9b0 <LogicalDisk::write(unsigned long long, int, void*)>
c0028c99:	83 c4 20             	add    esp,0x20
c0028c9c:	83 c4 18             	add    esp,0x18
c0028c9f:	5b                   	pop    ebx
c0028ca0:	c3                   	ret    
c0028ca1:	8d 76 00             	lea    esi,[esi+0x0]

c0028ca4 <fatWrapperIoctl>:
c0028ca4:	53                   	push   ebx
c0028ca5:	83 ec 28             	sub    esp,0x28
c0028ca8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0028cac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028cb0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0028cb4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028cb8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028cbd:	83 f8 02             	cmp    eax,0x2
c0028cc0:	75 32                	jne    c0028cf4 <fatWrapperIoctl+0x50>
c0028cc2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028cc6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028cca:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028ccf:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028cd6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028cdc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0028ce2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0028ce6:	66 89 02             	mov    WORD PTR [edx],ax
c0028ce9:	b8 00 00 00 00       	mov    eax,0x0
c0028cee:	e9 c5 00 00 00       	jmp    c0028db8 <fatWrapperIoctl+0x114>
c0028cf3:	90                   	nop
c0028cf4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028cf9:	83 f8 01             	cmp    eax,0x1
c0028cfc:	75 6a                	jne    c0028d68 <fatWrapperIoctl+0xc4>
c0028cfe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028d02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028d06:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028d0b:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028d12:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028d18:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0028d1e:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0028d24:	89 c8                	mov    eax,ecx
c0028d26:	89 da                	mov    edx,ebx
c0028d28:	0f a4 c2 0a          	shld   edx,eax,0xa
c0028d2c:	c1 e0 0a             	shl    eax,0xa
c0028d2f:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0028d34:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c0028d3b:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0028d41:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0028d47:	89 cb                	mov    ebx,ecx
c0028d49:	c1 fb 1f             	sar    ebx,0x1f
c0028d4c:	53                   	push   ebx
c0028d4d:	51                   	push   ecx
c0028d4e:	52                   	push   edx
c0028d4f:	50                   	push   eax
c0028d50:	e8 ab 5b 00 00       	call   c002e900 <__udivdi3>
c0028d55:	83 c4 10             	add    esp,0x10
c0028d58:	89 c2                	mov    edx,eax
c0028d5a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0028d5e:	89 10                	mov    DWORD PTR [eax],edx
c0028d60:	b8 00 00 00 00       	mov    eax,0x0
c0028d65:	eb 51                	jmp    c0028db8 <fatWrapperIoctl+0x114>
c0028d67:	90                   	nop
c0028d68:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028d6d:	85 c0                	test   eax,eax
c0028d6f:	75 07                	jne    c0028d78 <fatWrapperIoctl+0xd4>
c0028d71:	b8 00 00 00 00       	mov    eax,0x0
c0028d76:	eb 40                	jmp    c0028db8 <fatWrapperIoctl+0x114>
c0028d78:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028d7d:	83 f8 03             	cmp    eax,0x3
c0028d80:	75 1a                	jne    c0028d9c <fatWrapperIoctl+0xf8>
c0028d82:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028d86:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028d8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028d8e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0028d94:	b8 00 00 00 00       	mov    eax,0x0
c0028d99:	eb 1d                	jmp    c0028db8 <fatWrapperIoctl+0x114>
c0028d9b:	90                   	nop
c0028d9c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028da1:	83 f8 04             	cmp    eax,0x4
c0028da4:	75 0a                	jne    c0028db0 <fatWrapperIoctl+0x10c>
c0028da6:	b8 00 00 00 00       	mov    eax,0x0
c0028dab:	eb 0b                	jmp    c0028db8 <fatWrapperIoctl+0x114>
c0028dad:	8d 76 00             	lea    esi,[esi+0x0]
c0028db0:	b8 04 00 00 00       	mov    eax,0x4
c0028db5:	8d 76 00             	lea    esi,[esi+0x0]
c0028db8:	83 c4 28             	add    esp,0x28
c0028dbb:	5b                   	pop    ebx
c0028dbc:	c3                   	ret    
c0028dbd:	90                   	nop
c0028dbe:	66 90                	xchg   ax,ax

c0028dc0 <FAT::FAT()>:
c0028dc0:	83 ec 1c             	sub    esp,0x1c
c0028dc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028dc7:	83 ec 0c             	sub    esp,0xc
c0028dca:	50                   	push   eax
c0028dcb:	e8 66 15 ff ff       	call   c001a336 <Filesystem::Filesystem()>
c0028dd0:	83 c4 10             	add    esp,0x10
c0028dd3:	ba 88 36 03 c0       	mov    edx,0xc0033688
c0028dd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028ddc:	89 10                	mov    DWORD PTR [eax],edx
c0028dde:	c7 05 80 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040280,0x0
c0028de8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0028df0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0028df5:	7f 19                	jg     c0028e10 <FAT::FAT()+0x50>
c0028df7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028dfb:	c7 04 85 a0 02 04 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffbfd60],0xffffffff
c0028e06:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0028e0b:	eb e3                	jmp    c0028df0 <FAT::FAT()+0x30>
c0028e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0028e10:	90                   	nop
c0028e11:	83 c4 1c             	add    esp,0x1c
c0028e14:	c3                   	ret    
c0028e15:	90                   	nop
c0028e16:	66 90                	xchg   ax,ax

c0028e18 <FAT::fixFilepath(char*)>:
c0028e18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028e1c:	8a 00                	mov    al,BYTE PTR [eax]
c0028e1e:	0f be c0             	movsx  eax,al
c0028e21:	83 f8 40             	cmp    eax,0x40
c0028e24:	7e 2e                	jle    c0028e54 <FAT::fixFilepath(char*)+0x3c>
c0028e26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028e2a:	8a 00                	mov    al,BYTE PTR [eax]
c0028e2c:	83 e8 41             	sub    eax,0x41
c0028e2f:	88 c2                	mov    dl,al
c0028e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028e35:	88 10                	mov    BYTE PTR [eax],dl
c0028e37:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028e3b:	8a 00                	mov    al,BYTE PTR [eax]
c0028e3d:	0f be c0             	movsx  eax,al
c0028e40:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028e47:	83 c0 30             	add    eax,0x30
c0028e4a:	88 c2                	mov    dl,al
c0028e4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028e50:	88 10                	mov    BYTE PTR [eax],dl
c0028e52:	66 90                	xchg   ax,ax
c0028e54:	90                   	nop
c0028e55:	c3                   	ret    
c0028e56:	66 90                	xchg   ax,ax

c0028e58 <FAT::open(char const*, void**, FileOpenMode)>:
c0028e58:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028e5e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028e66:	74 0c                	je     c0028e74 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0028e68:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028e70:	75 0e                	jne    c0028e80 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0028e72:	66 90                	xchg   ax,ax
c0028e74:	b8 04 00 00 00       	mov    eax,0x4
c0028e79:	e9 46 01 00 00       	jmp    c0028fc4 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028e7e:	66 90                	xchg   ax,ax
c0028e80:	83 ec 08             	sub    esp,0x8
c0028e83:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028e8a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028e8e:	50                   	push   eax
c0028e8f:	e8 ac 77 fd ff       	call   c0000640 <strcpy>
c0028e94:	83 c4 10             	add    esp,0x10
c0028e97:	83 ec 08             	sub    esp,0x8
c0028e9a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0028e9e:	50                   	push   eax
c0028e9f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028ea6:	e8 6d ff ff ff       	call   c0028e18 <FAT::fixFilepath(char*)>
c0028eab:	83 c4 10             	add    esp,0x10
c0028eae:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0028eb6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028ebd:	83 e0 01             	and    eax,0x1
c0028ec0:	74 12                	je     c0028ed4 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0028ec2:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028ec9:	83 c8 01             	or     eax,0x1
c0028ecc:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028ed3:	90                   	nop
c0028ed4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028edb:	83 e0 04             	and    eax,0x4
c0028ede:	74 24                	je     c0028f04 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0028ee0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028ee7:	83 c8 30             	or     eax,0x30
c0028eea:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028ef1:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028ef8:	83 c8 02             	or     eax,0x2
c0028efb:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028f02:	66 90                	xchg   ax,ax
c0028f04:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028f0b:	83 e0 02             	and    eax,0x2
c0028f0e:	74 14                	je     c0028f24 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0028f10:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028f17:	83 c8 02             	or     eax,0x2
c0028f1a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028f21:	8d 76 00             	lea    esi,[esi+0x0]
c0028f24:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028f2b:	83 e0 08             	and    eax,0x8
c0028f2e:	74 14                	je     c0028f44 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0028f30:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028f37:	83 c8 04             	or     eax,0x4
c0028f3a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028f41:	8d 76 00             	lea    esi,[esi+0x0]
c0028f44:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028f4b:	83 e0 10             	and    eax,0x10
c0028f4e:	74 14                	je     c0028f64 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0028f50:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028f57:	83 c8 08             	or     eax,0x8
c0028f5a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028f61:	8d 76 00             	lea    esi,[esi+0x0]
c0028f64:	83 ec 0c             	sub    esp,0xc
c0028f67:	68 28 02 00 00       	push   0x228
c0028f6c:	e8 d2 d6 fe ff       	call   c0016643 <malloc>
c0028f71:	83 c4 10             	add    esp,0x10
c0028f74:	89 c2                	mov    edx,eax
c0028f76:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028f7d:	89 10                	mov    DWORD PTR [eax],edx
c0028f7f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0028f87:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028f8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f90:	83 ec 04             	sub    esp,0x4
c0028f93:	52                   	push   edx
c0028f94:	8d 54 24 10          	lea    edx,[esp+0x10]
c0028f98:	52                   	push   edx
c0028f99:	50                   	push   eax
c0028f9a:	e8 07 b0 fd ff       	call   c0003fa6 <f_open>
c0028f9f:	83 c4 10             	add    esp,0x10
c0028fa2:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0028fa9:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0028fb1:	74 09                	je     c0028fbc <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0028fb3:	b8 01 00 00 00       	mov    eax,0x1
c0028fb8:	eb 0a                	jmp    c0028fc4 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028fba:	66 90                	xchg   ax,ax
c0028fbc:	b8 00 00 00 00       	mov    eax,0x0
c0028fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0028fc4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028fca:	c3                   	ret    
c0028fcb:	90                   	nop

c0028fcc <FAT::openDir(char const*, void**)>:
c0028fcc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028fd2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028fda:	74 0c                	je     c0028fe8 <FAT::openDir(char const*, void**)+0x1c>
c0028fdc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028fe4:	75 0e                	jne    c0028ff4 <FAT::openDir(char const*, void**)+0x28>
c0028fe6:	66 90                	xchg   ax,ax
c0028fe8:	b8 04 00 00 00       	mov    eax,0x4
c0028fed:	e9 82 00 00 00       	jmp    c0029074 <FAT::openDir(char const*, void**)+0xa8>
c0028ff2:	66 90                	xchg   ax,ax
c0028ff4:	83 ec 08             	sub    esp,0x8
c0028ff7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028ffe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029002:	50                   	push   eax
c0029003:	e8 38 76 fd ff       	call   c0000640 <strcpy>
c0029008:	83 c4 10             	add    esp,0x10
c002900b:	83 ec 08             	sub    esp,0x8
c002900e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029012:	50                   	push   eax
c0029013:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002901a:	e8 f9 fd ff ff       	call   c0028e18 <FAT::fixFilepath(char*)>
c002901f:	83 c4 10             	add    esp,0x10
c0029022:	83 ec 0c             	sub    esp,0xc
c0029025:	6a 30                	push   0x30
c0029027:	e8 17 d6 fe ff       	call   c0016643 <malloc>
c002902c:	83 c4 10             	add    esp,0x10
c002902f:	89 c2                	mov    edx,eax
c0029031:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0029038:	89 10                	mov    DWORD PTR [eax],edx
c002903a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0029041:	8b 00                	mov    eax,DWORD PTR [eax]
c0029043:	83 ec 08             	sub    esp,0x8
c0029046:	8d 54 24 14          	lea    edx,[esp+0x14]
c002904a:	52                   	push   edx
c002904b:	50                   	push   eax
c002904c:	e8 04 b9 fd ff       	call   c0004955 <f_opendir>
c0029051:	83 c4 10             	add    esp,0x10
c0029054:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002905b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0029063:	74 07                	je     c002906c <FAT::openDir(char const*, void**)+0xa0>
c0029065:	b8 01 00 00 00       	mov    eax,0x1
c002906a:	eb 08                	jmp    c0029074 <FAT::openDir(char const*, void**)+0xa8>
c002906c:	b8 00 00 00 00       	mov    eax,0x0
c0029071:	8d 76 00             	lea    esi,[esi+0x0]
c0029074:	81 c4 1c 01 00 00    	add    esp,0x11c
c002907a:	c3                   	ret    
c002907b:	90                   	nop

c002907c <FAT::stat(char const*, unsigned long long*, bool*)>:
c002907c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0029082:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002908a:	75 0c                	jne    c0029098 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c002908c:	b8 04 00 00 00       	mov    eax,0x4
c0029091:	e9 d6 00 00 00       	jmp    c002916c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0029096:	66 90                	xchg   ax,ax
c0029098:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00290a0:	75 0a                	jne    c00290ac <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00290a2:	b8 04 00 00 00       	mov    eax,0x4
c00290a7:	e9 c0 00 00 00       	jmp    c002916c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00290ac:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00290b4:	75 0a                	jne    c00290c0 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00290b6:	b8 04 00 00 00       	mov    eax,0x4
c00290bb:	e9 ac 00 00 00       	jmp    c002916c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00290c0:	83 ec 08             	sub    esp,0x8
c00290c3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00290ca:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00290d1:	50                   	push   eax
c00290d2:	e8 69 75 fd ff       	call   c0000640 <strcpy>
c00290d7:	83 c4 10             	add    esp,0x10
c00290da:	83 ec 08             	sub    esp,0x8
c00290dd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00290e4:	50                   	push   eax
c00290e5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00290ec:	e8 27 fd ff ff       	call   c0028e18 <FAT::fixFilepath(char*)>
c00290f1:	83 c4 10             	add    esp,0x10
c00290f4:	83 ec 08             	sub    esp,0x8
c00290f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00290fb:	50                   	push   eax
c00290fc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0029103:	50                   	push   eax
c0029104:	e8 cb b9 fd ff       	call   c0004ad4 <f_stat>
c0029109:	83 c4 10             	add    esp,0x10
c002910c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0029113:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002911a:	85 c0                	test   eax,eax
c002911c:	74 0a                	je     c0029128 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c002911e:	83 f8 04             	cmp    eax,0x4
c0029121:	74 39                	je     c002915c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0029123:	eb 3f                	jmp    c0029164 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0029125:	8d 76 00             	lea    esi,[esi+0x0]
c0029128:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002912c:	0f b6 c0             	movzx  eax,al
c002912f:	83 e0 10             	and    eax,0x10
c0029132:	0f 95 c2             	setne  dl
c0029135:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002913c:	88 10                	mov    BYTE PTR [eax],dl
c002913e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029142:	ba 00 00 00 00       	mov    edx,0x0
c0029147:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002914e:	89 01                	mov    DWORD PTR [ecx],eax
c0029150:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0029153:	b8 00 00 00 00       	mov    eax,0x0
c0029158:	eb 12                	jmp    c002916c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c002915a:	66 90                	xchg   ax,ax
c002915c:	b8 02 00 00 00       	mov    eax,0x2
c0029161:	eb 09                	jmp    c002916c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0029163:	90                   	nop
c0029164:	b8 01 00 00 00       	mov    eax,0x1
c0029169:	8d 76 00             	lea    esi,[esi+0x0]
c002916c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0029172:	c3                   	ret    
c0029173:	90                   	nop

c0029174 <FAT::unlink(char const*)>:
c0029174:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002917a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0029182:	75 08                	jne    c002918c <FAT::unlink(char const*)+0x18>
c0029184:	b8 04 00 00 00       	mov    eax,0x4
c0029189:	eb 61                	jmp    c00291ec <FAT::unlink(char const*)+0x78>
c002918b:	90                   	nop
c002918c:	83 ec 08             	sub    esp,0x8
c002918f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029196:	8d 44 24 18          	lea    eax,[esp+0x18]
c002919a:	50                   	push   eax
c002919b:	e8 a0 74 fd ff       	call   c0000640 <strcpy>
c00291a0:	83 c4 10             	add    esp,0x10
c00291a3:	83 ec 08             	sub    esp,0x8
c00291a6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00291aa:	50                   	push   eax
c00291ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00291b2:	e8 61 fc ff ff       	call   c0028e18 <FAT::fixFilepath(char*)>
c00291b7:	83 c4 10             	add    esp,0x10
c00291ba:	83 ec 0c             	sub    esp,0xc
c00291bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00291c1:	50                   	push   eax
c00291c2:	e8 7f bb fd ff       	call   c0004d46 <f_unlink>
c00291c7:	83 c4 10             	add    esp,0x10
c00291ca:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00291d1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00291d8:	85 c0                	test   eax,eax
c00291da:	75 08                	jne    c00291e4 <FAT::unlink(char const*)+0x70>
c00291dc:	b8 00 00 00 00       	mov    eax,0x0
c00291e1:	eb 09                	jmp    c00291ec <FAT::unlink(char const*)+0x78>
c00291e3:	90                   	nop
c00291e4:	b8 01 00 00 00       	mov    eax,0x1
c00291e9:	8d 76 00             	lea    esi,[esi+0x0]
c00291ec:	81 c4 1c 01 00 00    	add    esp,0x11c
c00291f2:	c3                   	ret    
c00291f3:	90                   	nop

c00291f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00291f4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00291fa:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0029201:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0029208:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002920c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0029210:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0029218:	75 0a                	jne    c0029224 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c002921a:	b8 04 00 00 00       	mov    eax,0x4
c002921f:	e9 7c 01 00 00       	jmp    c00293a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0029224:	83 ec 08             	sub    esp,0x8
c0029227:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002922e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0029232:	50                   	push   eax
c0029233:	e8 08 74 fd ff       	call   c0000640 <strcpy>
c0029238:	83 c4 10             	add    esp,0x10
c002923b:	83 ec 08             	sub    esp,0x8
c002923e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0029242:	50                   	push   eax
c0029243:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002924a:	e8 c9 fb ff ff       	call   c0028e18 <FAT::fixFilepath(char*)>
c002924f:	83 c4 10             	add    esp,0x10
c0029252:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002925a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0029262:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029267:	83 e0 01             	and    eax,0x1
c002926a:	74 14                	je     c0029280 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c002926c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029273:	83 c8 01             	or     eax,0x1
c0029276:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c002927d:	8d 76 00             	lea    esi,[esi+0x0]
c0029280:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029285:	83 e0 02             	and    eax,0x2
c0029288:	74 12                	je     c002929c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c002928a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029291:	83 c8 20             	or     eax,0x20
c0029294:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c002929b:	90                   	nop
c002929c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00292a1:	83 e0 04             	and    eax,0x4
c00292a4:	74 12                	je     c00292b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c00292a6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00292ad:	83 c8 04             	or     eax,0x4
c00292b0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c00292b7:	90                   	nop
c00292b8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00292bd:	83 e0 08             	and    eax,0x8
c00292c0:	74 12                	je     c00292d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c00292c2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00292c9:	83 c8 02             	or     eax,0x2
c00292cc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c00292d3:	90                   	nop
c00292d4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00292d9:	83 e0 01             	and    eax,0x1
c00292dc:	74 12                	je     c00292f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00292de:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00292e5:	83 c8 01             	or     eax,0x1
c00292e8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00292ef:	90                   	nop
c00292f0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00292f5:	83 e0 02             	and    eax,0x2
c00292f8:	74 12                	je     c002930c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c00292fa:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029301:	83 c8 20             	or     eax,0x20
c0029304:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c002930b:	90                   	nop
c002930c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029311:	83 e0 04             	and    eax,0x4
c0029314:	74 12                	je     c0029328 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0029316:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c002931d:	83 c8 04             	or     eax,0x4
c0029320:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0029327:	90                   	nop
c0029328:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002932d:	83 e0 08             	and    eax,0x8
c0029330:	74 12                	je     c0029344 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c0029332:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029339:	83 c8 02             	or     eax,0x2
c002933c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0029343:	90                   	nop
c0029344:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c002934b:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029352:	09 d0                	or     eax,edx
c0029354:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c002935b:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0029363:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002936b:	83 ec 04             	sub    esp,0x4
c002936e:	52                   	push   edx
c002936f:	50                   	push   eax
c0029370:	8d 44 24 24          	lea    eax,[esp+0x24]
c0029374:	50                   	push   eax
c0029375:	e8 41 be fd ff       	call   c00051bb <f_chmod>
c002937a:	83 c4 10             	add    esp,0x10
c002937d:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0029384:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002938b:	85 c0                	test   eax,eax
c002938d:	75 09                	jne    c0029398 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c002938f:	b8 00 00 00 00       	mov    eax,0x0
c0029394:	eb 0a                	jmp    c00293a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0029396:	66 90                	xchg   ax,ax
c0029398:	b8 01 00 00 00       	mov    eax,0x1
c002939d:	8d 76 00             	lea    esi,[esi+0x0]
c00293a0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00293a6:	c3                   	ret    
c00293a7:	90                   	nop

c00293a8 <FAT::rename(char const*, char const*)>:
c00293a8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00293ae:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00293b6:	74 0c                	je     c00293c4 <FAT::rename(char const*, char const*)+0x1c>
c00293b8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00293c0:	75 0e                	jne    c00293d0 <FAT::rename(char const*, char const*)+0x28>
c00293c2:	66 90                	xchg   ax,ax
c00293c4:	b8 04 00 00 00       	mov    eax,0x4
c00293c9:	e9 9e 00 00 00       	jmp    c002946c <FAT::rename(char const*, char const*)+0xc4>
c00293ce:	66 90                	xchg   ax,ax
c00293d0:	83 ec 08             	sub    esp,0x8
c00293d3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00293da:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00293e1:	50                   	push   eax
c00293e2:	e8 59 72 fd ff       	call   c0000640 <strcpy>
c00293e7:	83 c4 10             	add    esp,0x10
c00293ea:	83 ec 08             	sub    esp,0x8
c00293ed:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00293f4:	50                   	push   eax
c00293f5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00293fc:	e8 17 fa ff ff       	call   c0028e18 <FAT::fixFilepath(char*)>
c0029401:	83 c4 10             	add    esp,0x10
c0029404:	83 ec 08             	sub    esp,0x8
c0029407:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002940e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029412:	50                   	push   eax
c0029413:	e8 28 72 fd ff       	call   c0000640 <strcpy>
c0029418:	83 c4 10             	add    esp,0x10
c002941b:	83 ec 08             	sub    esp,0x8
c002941e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029422:	50                   	push   eax
c0029423:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002942a:	e8 e9 f9 ff ff       	call   c0028e18 <FAT::fixFilepath(char*)>
c002942f:	83 c4 10             	add    esp,0x10
c0029432:	83 ec 08             	sub    esp,0x8
c0029435:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029439:	50                   	push   eax
c002943a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0029441:	50                   	push   eax
c0029442:	e8 bc bb fd ff       	call   c0005003 <f_rename>
c0029447:	83 c4 10             	add    esp,0x10
c002944a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0029451:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0029458:	85 c0                	test   eax,eax
c002945a:	75 08                	jne    c0029464 <FAT::rename(char const*, char const*)+0xbc>
c002945c:	b8 00 00 00 00       	mov    eax,0x0
c0029461:	eb 09                	jmp    c002946c <FAT::rename(char const*, char const*)+0xc4>
c0029463:	90                   	nop
c0029464:	b8 01 00 00 00       	mov    eax,0x1
c0029469:	8d 76 00             	lea    esi,[esi+0x0]
c002946c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0029472:	c3                   	ret    
c0029473:	90                   	nop

c0029474 <FAT::mkdir(char const*)>:
c0029474:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002947a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0029482:	75 08                	jne    c002948c <FAT::mkdir(char const*)+0x18>
c0029484:	b8 04 00 00 00       	mov    eax,0x4
c0029489:	eb 61                	jmp    c00294ec <FAT::mkdir(char const*)+0x78>
c002948b:	90                   	nop
c002948c:	83 ec 08             	sub    esp,0x8
c002948f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029496:	8d 44 24 18          	lea    eax,[esp+0x18]
c002949a:	50                   	push   eax
c002949b:	e8 a0 71 fd ff       	call   c0000640 <strcpy>
c00294a0:	83 c4 10             	add    esp,0x10
c00294a3:	83 ec 08             	sub    esp,0x8
c00294a6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00294aa:	50                   	push   eax
c00294ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00294b2:	e8 61 f9 ff ff       	call   c0028e18 <FAT::fixFilepath(char*)>
c00294b7:	83 c4 10             	add    esp,0x10
c00294ba:	83 ec 0c             	sub    esp,0xc
c00294bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00294c1:	50                   	push   eax
c00294c2:	e8 a1 b9 fd ff       	call   c0004e68 <f_mkdir>
c00294c7:	83 c4 10             	add    esp,0x10
c00294ca:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00294d1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00294d8:	85 c0                	test   eax,eax
c00294da:	75 08                	jne    c00294e4 <FAT::mkdir(char const*)+0x70>
c00294dc:	b8 00 00 00 00       	mov    eax,0x0
c00294e1:	eb 09                	jmp    c00294ec <FAT::mkdir(char const*)+0x78>
c00294e3:	90                   	nop
c00294e4:	b8 01 00 00 00       	mov    eax,0x1
c00294e9:	8d 76 00             	lea    esi,[esi+0x0]
c00294ec:	81 c4 1c 01 00 00    	add    esp,0x11c
c00294f2:	c3                   	ret    
c00294f3:	90                   	nop

c00294f4 <FAT::exists(char const*)>:
c00294f4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00294fa:	83 ec 08             	sub    esp,0x8
c00294fd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0029504:	8d 44 24 10          	lea    eax,[esp+0x10]
c0029508:	50                   	push   eax
c0029509:	e8 32 71 fd ff       	call   c0000640 <strcpy>
c002950e:	83 c4 10             	add    esp,0x10
c0029511:	83 ec 08             	sub    esp,0x8
c0029514:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0029518:	50                   	push   eax
c0029519:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0029520:	e8 f3 f8 ff ff       	call   c0028e18 <FAT::fixFilepath(char*)>
c0029525:	83 c4 10             	add    esp,0x10
c0029528:	83 ec 08             	sub    esp,0x8
c002952b:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0029532:	50                   	push   eax
c0029533:	8d 44 24 10          	lea    eax,[esp+0x10]
c0029537:	50                   	push   eax
c0029538:	e8 97 b5 fd ff       	call   c0004ad4 <f_stat>
c002953d:	83 c4 10             	add    esp,0x10
c0029540:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0029547:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002954e:	85 c0                	test   eax,eax
c0029550:	75 06                	jne    c0029558 <FAT::exists(char const*)+0x64>
c0029552:	b0 01                	mov    al,0x1
c0029554:	eb 06                	jmp    c002955c <FAT::exists(char const*)+0x68>
c0029556:	66 90                	xchg   ax,ax
c0029558:	b0 00                	mov    al,0x0
c002955a:	66 90                	xchg   ax,ax
c002955c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0029562:	c3                   	ret    
c0029563:	90                   	nop

c0029564 <isoReadDiscSectorHelper>:
c0029564:	83 ec 2c             	sub    esp,0x2c
c0029567:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002956b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002956f:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0029574:	83 e8 41             	sub    eax,0x41
c0029577:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c002957e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0029582:	ba 00 00 00 00       	mov    edx,0x0
c0029587:	83 ec 0c             	sub    esp,0xc
c002958a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002958e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0029592:	52                   	push   edx
c0029593:	50                   	push   eax
c0029594:	51                   	push   ecx
c0029595:	e8 aa 33 ff ff       	call   c001c944 <LogicalDisk::read(unsigned long long, int, void*)>
c002959a:	83 c4 20             	add    esp,0x20
c002959d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00295a1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00295a6:	74 0c                	je     c00295b4 <isoReadDiscSectorHelper+0x50>
c00295a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00295ac:	c1 e0 0b             	shl    eax,0xb
c00295af:	eb 0b                	jmp    c00295bc <isoReadDiscSectorHelper+0x58>
c00295b1:	8d 76 00             	lea    esi,[esi+0x0]
c00295b4:	b8 00 00 00 00       	mov    eax,0x0
c00295b9:	8d 76 00             	lea    esi,[esi+0x0]
c00295bc:	83 c4 2c             	add    esp,0x2c
c00295bf:	c3                   	ret    

c00295c0 <iso_kprintf>:
c00295c0:	83 ec 0c             	sub    esp,0xc
c00295c3:	83 ec 08             	sub    esp,0x8
c00295c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00295ca:	68 36 34 03 c0       	push   0xc0033436
c00295cf:	e8 fd fe fe ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c00295d4:	83 c4 10             	add    esp,0x10
c00295d7:	90                   	nop
c00295d8:	83 c4 0c             	add    esp,0xc
c00295db:	c3                   	ret    

c00295dc <iso_kprintfd>:
c00295dc:	83 ec 0c             	sub    esp,0xc
c00295df:	83 ec 08             	sub    esp,0x8
c00295e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00295e6:	68 6e 1a 03 c0       	push   0xc0031a6e
c00295eb:	e8 e1 fe fe ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c00295f0:	83 c4 10             	add    esp,0x10
c00295f3:	90                   	nop
c00295f4:	83 c4 0c             	add    esp,0xc
c00295f7:	c3                   	ret    

c00295f8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00295f8:	b8 08 00 00 00       	mov    eax,0x8
c00295fd:	c3                   	ret    

c00295fe <ISO9660::truncate(void*, unsigned long long)>:
c00295fe:	b8 01 00 00 00       	mov    eax,0x1
c0029603:	c3                   	ret    

c0029604 <ISO9660::getName()>:
c0029604:	b8 ec 36 03 c0       	mov    eax,0xc00336ec
c0029609:	c3                   	ret    

c002960a <ISO9660::closeDir(void*)>:
c002960a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002960e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029610:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0029613:	90                   	nop

c0029614 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0029614:	b8 01 00 00 00       	mov    eax,0x1
c0029619:	c3                   	ret    

c002961a <ISO9660::unlink(char const*)>:
c002961a:	b8 01 00 00 00       	mov    eax,0x1
c002961f:	c3                   	ret    

c0029620 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0029620:	b8 03 00 00 00       	mov    eax,0x3
c0029625:	c3                   	ret    

c0029626 <ISO9660::rename(char const*, char const*)>:
c0029626:	b8 01 00 00 00       	mov    eax,0x1
c002962b:	c3                   	ret    

c002962c <ISO9660::mkdir(char const*)>:
c002962c:	b8 01 00 00 00       	mov    eax,0x1
c0029631:	c3                   	ret    

c0029632 <ISO9660::~ISO9660()>:
c0029632:	83 ec 0c             	sub    esp,0xc
c0029635:	ba 2c 38 03 c0       	mov    edx,0xc003382c
c002963a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002963e:	89 10                	mov    DWORD PTR [eax],edx
c0029640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029644:	83 ec 0c             	sub    esp,0xc
c0029647:	50                   	push   eax
c0029648:	e8 0d 0d ff ff       	call   c001a35a <Filesystem::~Filesystem()>
c002964d:	83 c4 10             	add    esp,0x10
c0029650:	90                   	nop
c0029651:	83 c4 0c             	add    esp,0xc
c0029654:	c3                   	ret    
c0029655:	90                   	nop

c0029656 <ISO9660::~ISO9660()>:
c0029656:	83 ec 0c             	sub    esp,0xc
c0029659:	83 ec 0c             	sub    esp,0xc
c002965c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029660:	e8 cd ff ff ff       	call   c0029632 <ISO9660::~ISO9660()>
c0029665:	83 c4 10             	add    esp,0x10
c0029668:	83 ec 08             	sub    esp,0x8
c002966b:	6a 08                	push   0x8
c002966d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029671:	e8 2e fd fe ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c0029676:	83 c4 10             	add    esp,0x10
c0029679:	83 c4 0c             	add    esp,0xc
c002967c:	c3                   	ret    
c002967d:	90                   	nop

c002967e <ISO9660::exists(char const*)>:
c002967e:	83 ec 18             	sub    esp,0x18
c0029681:	68 07 37 03 c0       	push   0xc0033707
c0029686:	e8 5f 6e ff ff       	call   c00204ea <KePanic(char const*)>
c002968b:	31 c0                	xor    eax,eax
c002968d:	83 c4 1c             	add    esp,0x1c
c0029690:	c3                   	ret    
c0029691:	90                   	nop

c0029692 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0029692:	56                   	push   esi
c0029693:	53                   	push   ebx
c0029694:	53                   	push   ebx
c0029695:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0029699:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002969d:	85 db                	test   ebx,ebx
c002969f:	0f 84 ca 00 00 00    	je     c002976f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c00296a5:	85 f6                	test   esi,esi
c00296a7:	0f 84 c2 00 00 00    	je     c002976f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c00296ad:	b8 03 00 00 00       	mov    eax,0x3
c00296b2:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00296b7:	0f 85 b7 00 00 00    	jne    c0029774 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00296bd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00296bf:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00296c6:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c00296cc:	74 1b                	je     c00296e9 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c00296ce:	85 c0                	test   eax,eax
c00296d0:	74 10                	je     c00296e2 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c00296d2:	83 ec 0c             	sub    esp,0xc
c00296d5:	68 25 37 03 c0       	push   0xc0033725
c00296da:	e8 0b 6e ff ff       	call   c00204ea <KePanic(char const*)>
c00296df:	83 c4 10             	add    esp,0x10
c00296e2:	8a 03                	mov    al,BYTE PTR [ebx]
c00296e4:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c00296e9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00296ec:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00296f3:	85 c0                	test   eax,eax
c00296f5:	74 09                	je     c0029700 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c00296f7:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00296fe:	74 48                	je     c0029748 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0029700:	83 ec 0c             	sub    esp,0xc
c0029703:	68 35 37 03 c0       	push   0xc0033735
c0029708:	e8 c4 fd fe ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c002970d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029710:	83 c4 10             	add    esp,0x10
c0029713:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c002971a:	85 c0                	test   eax,eax
c002971c:	74 17                	je     c0029735 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c002971e:	83 ec 0c             	sub    esp,0xc
c0029721:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029728:	68 55 37 03 c0       	push   0xc0033755
c002972d:	e8 9f fd fe ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0029732:	83 c4 10             	add    esp,0x10
c0029735:	83 ec 0c             	sub    esp,0xc
c0029738:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c002973f:	50                   	push   eax
c0029740:	e8 4d d6 fd ff       	call   c0006d92 <init_percd>
c0029745:	83 c4 10             	add    esp,0x10
c0029748:	83 c3 03             	add    ebx,0x3
c002974b:	51                   	push   ecx
c002974c:	51                   	push   ecx
c002974d:	6a 00                	push   0x0
c002974f:	53                   	push   ebx
c0029750:	e8 04 d1 fd ff       	call   c0006859 <iso_open>
c0029755:	83 c4 10             	add    esp,0x10
c0029758:	89 c2                	mov    edx,eax
c002975a:	b8 01 00 00 00       	mov    eax,0x1
c002975f:	83 fa ff             	cmp    edx,0xffffffff
c0029762:	74 10                	je     c0029774 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029764:	83 c2 32             	add    edx,0x32
c0029767:	31 c0                	xor    eax,eax
c0029769:	01 d2                	add    edx,edx
c002976b:	89 16                	mov    DWORD PTR [esi],edx
c002976d:	eb 05                	jmp    c0029774 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c002976f:	b8 04 00 00 00       	mov    eax,0x4
c0029774:	5a                   	pop    edx
c0029775:	5b                   	pop    ebx
c0029776:	5e                   	pop    esi
c0029777:	c3                   	ret    

c0029778 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0029778:	53                   	push   ebx
c0029779:	83 ec 08             	sub    esp,0x8
c002977c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0029780:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029784:	85 c0                	test   eax,eax
c0029786:	74 2d                	je     c00297b5 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0029788:	85 db                	test   ebx,ebx
c002978a:	74 29                	je     c00297b5 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c002978c:	b9 02 00 00 00       	mov    ecx,0x2
c0029791:	52                   	push   edx
c0029792:	99                   	cdq    
c0029793:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029797:	f7 f9                	idiv   ecx
c0029799:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002979d:	83 e8 32             	sub    eax,0x32
c00297a0:	50                   	push   eax
c00297a1:	e8 5b d1 fd ff       	call   c0006901 <iso_read>
c00297a6:	83 c4 10             	add    esp,0x10
c00297a9:	89 03                	mov    DWORD PTR [ebx],eax
c00297ab:	09 d0                	or     eax,edx
c00297ad:	0f 94 c0             	sete   al
c00297b0:	0f b6 c0             	movzx  eax,al
c00297b3:	eb 05                	jmp    c00297ba <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c00297b5:	b8 04 00 00 00       	mov    eax,0x4
c00297ba:	83 c4 08             	add    esp,0x8
c00297bd:	5b                   	pop    ebx
c00297be:	c3                   	ret    
c00297bf:	90                   	nop

c00297c0 <ISO9660::seek(void*, unsigned long long)>:
c00297c0:	57                   	push   edi
c00297c1:	56                   	push   esi
c00297c2:	b8 04 00 00 00       	mov    eax,0x4
c00297c7:	51                   	push   ecx
c00297c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00297cc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00297d0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00297d4:	85 d2                	test   edx,edx
c00297d6:	74 26                	je     c00297fe <ISO9660::seek(void*, unsigned long long)+0x3e>
c00297d8:	6a 00                	push   0x0
c00297da:	b9 02 00 00 00       	mov    ecx,0x2
c00297df:	57                   	push   edi
c00297e0:	89 d0                	mov    eax,edx
c00297e2:	56                   	push   esi
c00297e3:	99                   	cdq    
c00297e4:	f7 f9                	idiv   ecx
c00297e6:	83 e8 32             	sub    eax,0x32
c00297e9:	50                   	push   eax
c00297ea:	e8 28 d2 fd ff       	call   c0006a17 <iso_seek>
c00297ef:	83 c4 10             	add    esp,0x10
c00297f2:	31 f0                	xor    eax,esi
c00297f4:	31 fa                	xor    edx,edi
c00297f6:	09 d0                	or     eax,edx
c00297f8:	0f 95 c0             	setne  al
c00297fb:	0f b6 c0             	movzx  eax,al
c00297fe:	5a                   	pop    edx
c00297ff:	5e                   	pop    esi
c0029800:	5f                   	pop    edi
c0029801:	c3                   	ret    

c0029802 <ISO9660::tell(void*, unsigned long long*)>:
c0029802:	53                   	push   ebx
c0029803:	83 ec 08             	sub    esp,0x8
c0029806:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002980a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002980e:	85 c0                	test   eax,eax
c0029810:	74 24                	je     c0029836 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0029812:	85 db                	test   ebx,ebx
c0029814:	74 20                	je     c0029836 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0029816:	83 ec 0c             	sub    esp,0xc
c0029819:	b9 02 00 00 00       	mov    ecx,0x2
c002981e:	99                   	cdq    
c002981f:	f7 f9                	idiv   ecx
c0029821:	83 e8 32             	sub    eax,0x32
c0029824:	50                   	push   eax
c0029825:	e8 71 d2 fd ff       	call   c0006a9b <iso_tell>
c002982a:	83 c4 10             	add    esp,0x10
c002982d:	89 03                	mov    DWORD PTR [ebx],eax
c002982f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0029832:	31 c0                	xor    eax,eax
c0029834:	eb 05                	jmp    c002983b <ISO9660::tell(void*, unsigned long long*)+0x39>
c0029836:	b8 04 00 00 00       	mov    eax,0x4
c002983b:	83 c4 08             	add    esp,0x8
c002983e:	5b                   	pop    ebx
c002983f:	c3                   	ret    

c0029840 <ISO9660::stat(void*, unsigned long long*)>:
c0029840:	53                   	push   ebx
c0029841:	83 ec 14             	sub    esp,0x14
c0029844:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0029848:	68 79 37 03 c0       	push   0xc0033779
c002984d:	e8 7f fc fe ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0029852:	83 c4 10             	add    esp,0x10
c0029855:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002985a:	74 2c                	je     c0029888 <ISO9660::stat(void*, unsigned long long*)+0x48>
c002985c:	85 db                	test   ebx,ebx
c002985e:	74 28                	je     c0029888 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0029860:	83 ec 0c             	sub    esp,0xc
c0029863:	b9 02 00 00 00       	mov    ecx,0x2
c0029868:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002986c:	99                   	cdq    
c002986d:	f7 f9                	idiv   ecx
c002986f:	83 e8 32             	sub    eax,0x32
c0029872:	50                   	push   eax
c0029873:	e8 54 d2 fd ff       	call   c0006acc <iso_total>
c0029878:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002987f:	89 03                	mov    DWORD PTR [ebx],eax
c0029881:	83 c4 10             	add    esp,0x10
c0029884:	31 c0                	xor    eax,eax
c0029886:	eb 05                	jmp    c002988d <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0029888:	b8 04 00 00 00       	mov    eax,0x4
c002988d:	83 c4 08             	add    esp,0x8
c0029890:	5b                   	pop    ebx
c0029891:	c3                   	ret    

c0029892 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0029892:	55                   	push   ebp
c0029893:	57                   	push   edi
c0029894:	56                   	push   esi
c0029895:	53                   	push   ebx
c0029896:	83 ec 18             	sub    esp,0x18
c0029899:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002989d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00298a1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00298a5:	68 81 37 03 c0       	push   0xc0033781
c00298aa:	e8 22 fc fe ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c00298af:	83 c4 10             	add    esp,0x10
c00298b2:	85 ff                	test   edi,edi
c00298b4:	0f 94 c0             	sete   al
c00298b7:	85 f6                	test   esi,esi
c00298b9:	0f 94 c2             	sete   dl
c00298bc:	09 d0                	or     eax,edx
c00298be:	a8 01                	test   al,0x1
c00298c0:	0f 85 dd 00 00 00    	jne    c00299a3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c00298c6:	85 db                	test   ebx,ebx
c00298c8:	0f 84 d5 00 00 00    	je     c00299a3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c00298ce:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00298d1:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00298d7:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00298de:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00298e5:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00298e7:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c00298ed:	74 1b                	je     c002990a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c00298ef:	85 c0                	test   eax,eax
c00298f1:	74 10                	je     c0029903 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c00298f3:	83 ec 0c             	sub    esp,0xc
c00298f6:	68 25 37 03 c0       	push   0xc0033725
c00298fb:	e8 ea 6b ff ff       	call   c00204ea <KePanic(char const*)>
c0029900:	83 c4 10             	add    esp,0x10
c0029903:	8a 03                	mov    al,BYTE PTR [ebx]
c0029905:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c002990a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c002990d:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029914:	85 c0                	test   eax,eax
c0029916:	74 09                	je     c0029921 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c0029918:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c002991f:	74 51                	je     c0029972 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0029921:	83 ec 0c             	sub    esp,0xc
c0029924:	68 89 37 03 c0       	push   0xc0033789
c0029929:	e8 a3 fb fe ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c002992e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029931:	83 c4 10             	add    esp,0x10
c0029934:	83 3c 85 7c f2 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffc0d84],0x0
c002993c:	74 21                	je     c002995f <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c002993e:	83 ec 0c             	sub    esp,0xc
c0029941:	68 a9 37 03 c0       	push   0xc00337a9
c0029946:	e8 86 fb fe ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c002994b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c002994e:	83 c4 10             	add    esp,0x10
c0029951:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029958:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c002995f:	83 ec 0c             	sub    esp,0xc
c0029962:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029969:	50                   	push   eax
c002996a:	e8 23 d4 fd ff       	call   c0006d92 <init_percd>
c002996f:	83 c4 10             	add    esp,0x10
c0029972:	83 c3 03             	add    ebx,0x3
c0029975:	52                   	push   edx
c0029976:	52                   	push   edx
c0029977:	6a 00                	push   0x0
c0029979:	53                   	push   ebx
c002997a:	e8 da ce fd ff       	call   c0006859 <iso_open>
c002997f:	83 c4 10             	add    esp,0x10
c0029982:	89 c5                	mov    ebp,eax
c0029984:	83 f8 ff             	cmp    eax,0xffffffff
c0029987:	75 21                	jne    c00299aa <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c0029989:	50                   	push   eax
c002998a:	50                   	push   eax
c002998b:	6a 01                	push   0x1
c002998d:	53                   	push   ebx
c002998e:	e8 c6 ce fd ff       	call   c0006859 <iso_open>
c0029993:	83 c4 10             	add    esp,0x10
c0029996:	ba 02 00 00 00       	mov    edx,0x2
c002999b:	40                   	inc    eax
c002999c:	74 2b                	je     c00299c9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c002999e:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00299a1:	eb 24                	jmp    c00299c7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c00299a3:	ba 04 00 00 00       	mov    edx,0x4
c00299a8:	eb 1f                	jmp    c00299c9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c00299aa:	83 ec 0c             	sub    esp,0xc
c00299ad:	50                   	push   eax
c00299ae:	e8 19 d1 fd ff       	call   c0006acc <iso_total>
c00299b3:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00299ba:	89 07                	mov    DWORD PTR [edi],eax
c00299bc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00299bf:	e8 1f cf fd ff       	call   c00068e3 <iso_close>
c00299c4:	83 c4 10             	add    esp,0x10
c00299c7:	31 d2                	xor    edx,edx
c00299c9:	83 c4 0c             	add    esp,0xc
c00299cc:	89 d0                	mov    eax,edx
c00299ce:	5b                   	pop    ebx
c00299cf:	5e                   	pop    esi
c00299d0:	5f                   	pop    edi
c00299d1:	5d                   	pop    ebp
c00299d2:	c3                   	ret    
c00299d3:	90                   	nop

c00299d4 <ISO9660::close(void*)>:
c00299d4:	83 ec 0c             	sub    esp,0xc
c00299d7:	b8 04 00 00 00       	mov    eax,0x4
c00299dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00299e0:	85 d2                	test   edx,edx
c00299e2:	74 1b                	je     c00299ff <ISO9660::close(void*)+0x2b>
c00299e4:	83 ec 0c             	sub    esp,0xc
c00299e7:	b9 02 00 00 00       	mov    ecx,0x2
c00299ec:	89 d0                	mov    eax,edx
c00299ee:	99                   	cdq    
c00299ef:	f7 f9                	idiv   ecx
c00299f1:	83 e8 32             	sub    eax,0x32
c00299f4:	50                   	push   eax
c00299f5:	e8 e9 ce fd ff       	call   c00068e3 <iso_close>
c00299fa:	83 c4 10             	add    esp,0x10
c00299fd:	31 c0                	xor    eax,eax
c00299ff:	83 c4 0c             	add    esp,0xc
c0029a02:	c3                   	ret    
c0029a03:	90                   	nop

c0029a04 <ISO9660::openDir(char const*, void**)>:
c0029a04:	56                   	push   esi
c0029a05:	53                   	push   ebx
c0029a06:	50                   	push   eax
c0029a07:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0029a0b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029a0f:	85 db                	test   ebx,ebx
c0029a11:	0f 84 bd 00 00 00    	je     c0029ad4 <ISO9660::openDir(char const*, void**)+0xd0>
c0029a17:	85 f6                	test   esi,esi
c0029a19:	0f 84 b5 00 00 00    	je     c0029ad4 <ISO9660::openDir(char const*, void**)+0xd0>
c0029a1f:	8a 13                	mov    dl,BYTE PTR [ebx]
c0029a21:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029a28:	38 15 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,dl
c0029a2e:	74 1b                	je     c0029a4b <ISO9660::openDir(char const*, void**)+0x47>
c0029a30:	85 c0                	test   eax,eax
c0029a32:	74 10                	je     c0029a44 <ISO9660::openDir(char const*, void**)+0x40>
c0029a34:	83 ec 0c             	sub    esp,0xc
c0029a37:	68 25 37 03 c0       	push   0xc0033725
c0029a3c:	e8 a9 6a ff ff       	call   c00204ea <KePanic(char const*)>
c0029a41:	83 c4 10             	add    esp,0x10
c0029a44:	8a 03                	mov    al,BYTE PTR [ebx]
c0029a46:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c0029a4b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029a4e:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029a55:	85 c0                	test   eax,eax
c0029a57:	74 10                	je     c0029a69 <ISO9660::openDir(char const*, void**)+0x65>
c0029a59:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0029a60:	74 1a                	je     c0029a7c <ISO9660::openDir(char const*, void**)+0x78>
c0029a62:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029a69:	83 ec 0c             	sub    esp,0xc
c0029a6c:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029a73:	50                   	push   eax
c0029a74:	e8 19 d3 fd ff       	call   c0006d92 <init_percd>
c0029a79:	83 c4 10             	add    esp,0x10
c0029a7c:	83 c3 03             	add    ebx,0x3
c0029a7f:	50                   	push   eax
c0029a80:	50                   	push   eax
c0029a81:	6a 01                	push   0x1
c0029a83:	53                   	push   ebx
c0029a84:	e8 d0 cd fd ff       	call   c0006859 <iso_open>
c0029a89:	83 c4 10             	add    esp,0x10
c0029a8c:	89 c3                	mov    ebx,eax
c0029a8e:	83 f8 ff             	cmp    eax,0xffffffff
c0029a91:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029a96:	75 1c                	jne    c0029ab4 <ISO9660::openDir(char const*, void**)+0xb0>
c0029a98:	53                   	push   ebx
c0029a99:	53                   	push   ebx
c0029a9a:	68 cd 37 03 c0       	push   0xc00337cd
c0029a9f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029aa5:	e8 88 db fe ff       	call   c0017632 <VgaText::puts(char const*)>
c0029aaa:	83 c4 10             	add    esp,0x10
c0029aad:	b8 01 00 00 00       	mov    eax,0x1
c0029ab2:	eb 25                	jmp    c0029ad9 <ISO9660::openDir(char const*, void**)+0xd5>
c0029ab4:	01 db                	add    ebx,ebx
c0029ab6:	51                   	push   ecx
c0029ab7:	83 c3 65             	add    ebx,0x65
c0029aba:	51                   	push   ecx
c0029abb:	68 e0 37 03 c0       	push   0xc00337e0
c0029ac0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029ac6:	e8 67 db fe ff       	call   c0017632 <VgaText::puts(char const*)>
c0029acb:	89 1e                	mov    DWORD PTR [esi],ebx
c0029acd:	83 c4 10             	add    esp,0x10
c0029ad0:	31 c0                	xor    eax,eax
c0029ad2:	eb 05                	jmp    c0029ad9 <ISO9660::openDir(char const*, void**)+0xd5>
c0029ad4:	b8 04 00 00 00       	mov    eax,0x4
c0029ad9:	5a                   	pop    edx
c0029ada:	5b                   	pop    ebx
c0029adb:	5e                   	pop    esi
c0029adc:	c3                   	ret    
c0029add:	90                   	nop

c0029ade <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0029ade:	55                   	push   ebp
c0029adf:	57                   	push   edi
c0029ae0:	56                   	push   esi
c0029ae1:	53                   	push   ebx
c0029ae2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0029ae8:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0029aef:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0029af6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0029afe:	0f 84 e7 00 00 00    	je     c0029beb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0029b04:	85 db                	test   ebx,ebx
c0029b06:	0f 84 df 00 00 00    	je     c0029beb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0029b0c:	83 ec 0c             	sub    esp,0xc
c0029b0f:	68 f3 37 03 c0       	push   0xc00337f3
c0029b14:	e8 b8 f9 fe ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c0029b19:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0029b20:	b9 02 00 00 00       	mov    ecx,0x2
c0029b25:	99                   	cdq    
c0029b26:	f7 f9                	idiv   ecx
c0029b28:	83 e8 32             	sub    eax,0x32
c0029b2b:	89 04 24             	mov    DWORD PTR [esp],eax
c0029b2e:	e8 eb cf fd ff       	call   c0006b1e <iso_readdir>
c0029b33:	83 c4 10             	add    esp,0x10
c0029b36:	89 c6                	mov    esi,eax
c0029b38:	85 c0                	test   eax,eax
c0029b3a:	75 37                	jne    c0029b73 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c0029b3c:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029b41:	56                   	push   esi
c0029b42:	56                   	push   esi
c0029b43:	68 fe 37 03 c0       	push   0xc00337fe
c0029b48:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029b4e:	e8 df da fe ff       	call   c0017632 <VgaText::puts(char const*)>
c0029b53:	83 c4 0c             	add    esp,0xc
c0029b56:	68 10 01 00 00       	push   0x110
c0029b5b:	6a 00                	push   0x0
c0029b5d:	57                   	push   edi
c0029b5e:	e8 8d 69 fd ff       	call   c00004f0 <memset>
c0029b63:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0029b69:	83 c4 10             	add    esp,0x10
c0029b6c:	b8 01 00 00 00       	mov    eax,0x1
c0029b71:	eb 7d                	jmp    c0029bf0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0029b73:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0029b79:	8d 68 08             	lea    ebp,[eax+0x8]
c0029b7c:	83 ec 0c             	sub    esp,0xc
c0029b7f:	55                   	push   ebp
c0029b80:	e8 eb 69 fd ff       	call   c0000570 <strlen>
c0029b85:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0029b8d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0029b91:	83 c4 10             	add    esp,0x10
c0029b94:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0029b98:	75 0a                	jne    c0029ba4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0029b9a:	b8 02 00 00 00       	mov    eax,0x2
c0029b9f:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0029ba2:	74 05                	je     c0029ba9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c0029ba4:	b8 01 00 00 00       	mov    eax,0x1
c0029ba9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0029bad:	50                   	push   eax
c0029bae:	50                   	push   eax
c0029baf:	55                   	push   ebp
c0029bb0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0029bb4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0029bb8:	50                   	push   eax
c0029bb9:	e8 82 6a fd ff       	call   c0000640 <strcpy>
c0029bbe:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0029bc5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029bc7:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0029bcd:	5a                   	pop    edx
c0029bce:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029bd3:	59                   	pop    ecx
c0029bd4:	68 11 38 03 c0       	push   0xc0033811
c0029bd9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029bdf:	e8 4e da fe ff       	call   c0017632 <VgaText::puts(char const*)>
c0029be4:	83 c4 10             	add    esp,0x10
c0029be7:	31 c0                	xor    eax,eax
c0029be9:	eb 05                	jmp    c0029bf0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0029beb:	b8 04 00 00 00       	mov    eax,0x4
c0029bf0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0029bf6:	5b                   	pop    ebx
c0029bf7:	5e                   	pop    esi
c0029bf8:	5f                   	pop    edi
c0029bf9:	5d                   	pop    ebp
c0029bfa:	c3                   	ret    

c0029bfb <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0029bfb:	57                   	push   edi
c0029bfc:	56                   	push   esi
c0029bfd:	53                   	push   ebx
c0029bfe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0029c02:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029c06:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0029c0a:	39 35 84 03 04 c0    	cmp    DWORD PTR ds:0xc0040384,esi
c0029c10:	0f be cb             	movsx  ecx,bl
c0029c13:	75 0b                	jne    c0029c20 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0029c15:	0f be 05 60 4a 03 c0 	movsx  eax,BYTE PTR ds:0xc0034a60
c0029c1c:	39 c8                	cmp    eax,ecx
c0029c1e:	74 47                	je     c0029c67 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029c20:	83 ec 0c             	sub    esp,0xc
c0029c23:	31 d2                	xor    edx,edx
c0029c25:	68 a0 03 04 c0       	push   0xc00403a0
c0029c2a:	6a 01                	push   0x1
c0029c2c:	52                   	push   edx
c0029c2d:	56                   	push   esi
c0029c2e:	ff 34 8d 7c f2 03 c0 	push   DWORD PTR [ecx*4-0x3ffc0d84]
c0029c35:	e8 0a 2d ff ff       	call   c001c944 <LogicalDisk::read(unsigned long long, int, void*)>
c0029c3a:	83 c4 20             	add    esp,0x20
c0029c3d:	85 c0                	test   eax,eax
c0029c3f:	75 0e                	jne    c0029c4f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0029c41:	89 35 84 03 04 c0    	mov    DWORD PTR ds:0xc0040384,esi
c0029c47:	88 1d 60 4a 03 c0    	mov    BYTE PTR ds:0xc0034a60,bl
c0029c4d:	eb 18                	jmp    c0029c67 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029c4f:	50                   	push   eax
c0029c50:	68 00 08 00 00       	push   0x800
c0029c55:	6a 00                	push   0x0
c0029c57:	57                   	push   edi
c0029c58:	e8 93 68 fd ff       	call   c00004f0 <memset>
c0029c5d:	83 c4 10             	add    esp,0x10
c0029c60:	b8 01 00 00 00       	mov    eax,0x1
c0029c65:	eb 0e                	jmp    c0029c75 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0029c67:	be a0 03 04 c0       	mov    esi,0xc00403a0
c0029c6c:	b9 00 08 00 00       	mov    ecx,0x800
c0029c71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029c73:	31 c0                	xor    eax,eax
c0029c75:	5b                   	pop    ebx
c0029c76:	5e                   	pop    esi
c0029c77:	5f                   	pop    edi
c0029c78:	c3                   	ret    
c0029c79:	90                   	nop

c0029c7a <ISO9660::tryMount(LogicalDisk*, int)>:
c0029c7a:	53                   	push   ebx
c0029c7b:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0029c81:	c7 05 84 03 04 c0 ef be ad de 	mov    DWORD PTR ds:0xc0040384,0xdeadbeef
c0029c8b:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0029c92:	8d 58 41             	lea    ebx,[eax+0x41]
c0029c95:	0f be db             	movsx  ebx,bl
c0029c98:	53                   	push   ebx
c0029c99:	8d 44 24 08          	lea    eax,[esp+0x8]
c0029c9d:	50                   	push   eax
c0029c9e:	6a 10                	push   0x10
c0029ca0:	e8 56 ff ff ff       	call   c0029bfb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0029ca5:	83 c4 10             	add    esp,0x10
c0029ca8:	31 d2                	xor    edx,edx
c0029caa:	85 c0                	test   eax,eax
c0029cac:	75 33                	jne    c0029ce1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029cae:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0029cb3:	75 2c                	jne    c0029ce1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029cb5:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0029cba:	75 25                	jne    c0029ce1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029cbc:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0029cc1:	75 1e                	jne    c0029ce1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029cc3:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0029cc8:	75 17                	jne    c0029ce1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029cca:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0029ccf:	75 10                	jne    c0029ce1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029cd1:	83 ec 0c             	sub    esp,0xc
c0029cd4:	53                   	push   ebx
c0029cd5:	e8 b8 d0 fd ff       	call   c0006d92 <init_percd>
c0029cda:	83 c4 10             	add    esp,0x10
c0029cdd:	40                   	inc    eax
c0029cde:	0f 95 c2             	setne  dl
c0029ce1:	88 d0                	mov    al,dl
c0029ce3:	81 c4 08 08 00 00    	add    esp,0x808
c0029ce9:	5b                   	pop    ebx
c0029cea:	c3                   	ret    
c0029ceb:	90                   	nop

c0029cec <ISO9660::ISO9660()>:
c0029cec:	83 ec 0c             	sub    esp,0xc
c0029cef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cf3:	83 ec 0c             	sub    esp,0xc
c0029cf6:	50                   	push   eax
c0029cf7:	e8 3a 06 ff ff       	call   c001a336 <Filesystem::Filesystem()>
c0029cfc:	83 c4 10             	add    esp,0x10
c0029cff:	ba 2c 38 03 c0       	mov    edx,0xc003382c
c0029d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d08:	89 10                	mov    DWORD PTR [eax],edx
c0029d0a:	e8 95 d1 fd ff       	call   c0006ea4 <fs_iso9660_init>
c0029d0f:	90                   	nop
c0029d10:	83 c4 0c             	add    esp,0xc
c0029d13:	c3                   	ret    

c0029d14 <SoundCard::beginPlayback()>:
c0029d14:	c7 44 24 04 90 38 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033890
c0029d1c:	e9 c9 67 ff ff       	jmp    c00204ea <KePanic(char const*)>
c0029d21:	90                   	nop

c0029d22 <SoundCard::stopPlayback()>:
c0029d22:	c7 44 24 04 90 38 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033890
c0029d2a:	e9 bb 67 ff ff       	jmp    c00204ea <KePanic(char const*)>
c0029d2f:	90                   	nop

c0029d30 <SoundCard::SoundCard(char const*)>:
c0029d30:	83 ec 1c             	sub    esp,0x1c
c0029d33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029d37:	83 ec 08             	sub    esp,0x8
c0029d3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029d3e:	50                   	push   eax
c0029d3f:	e8 70 19 ff ff       	call   c001b6b4 <Device::Device(char const*)>
c0029d44:	83 c4 10             	add    esp,0x10
c0029d47:	ba dc 38 03 c0       	mov    edx,0xc00338dc
c0029d4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029d50:	89 10                	mov    DWORD PTR [eax],edx
c0029d52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029d56:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029d5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029d61:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0029d6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029d6f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0029d79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029d7d:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0029d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029d8b:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0029d95:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0029d9d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0029da2:	7f 1a                	jg     c0029dbe <SoundCard::SoundCard(char const*)+0x8e>
c0029da4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029da8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0029dac:	83 c2 54             	add    edx,0x54
c0029daf:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0029db7:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0029dbc:	eb df                	jmp    c0029d9d <SoundCard::SoundCard(char const*)+0x6d>
c0029dbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029dc2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029dc9:	90                   	nop
c0029dca:	83 c4 1c             	add    esp,0x1c
c0029dcd:	c3                   	ret    

c0029dce <SoundCard::~SoundCard()>:
c0029dce:	83 ec 0c             	sub    esp,0xc
c0029dd1:	ba dc 38 03 c0       	mov    edx,0xc00338dc
c0029dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029dda:	89 10                	mov    DWORD PTR [eax],edx
c0029ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029de0:	83 ec 0c             	sub    esp,0xc
c0029de3:	50                   	push   eax
c0029de4:	e8 6b 16 ff ff       	call   c001b454 <Device::~Device()>
c0029de9:	83 c4 10             	add    esp,0x10
c0029dec:	90                   	nop
c0029ded:	83 c4 0c             	add    esp,0xc
c0029df0:	c3                   	ret    
c0029df1:	90                   	nop

c0029df2 <SoundCard::~SoundCard()>:
c0029df2:	83 ec 0c             	sub    esp,0xc
c0029df5:	83 ec 0c             	sub    esp,0xc
c0029df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029dfc:	e8 cd ff ff ff       	call   c0029dce <SoundCard::~SoundCard()>
c0029e01:	83 c4 10             	add    esp,0x10
c0029e04:	83 ec 08             	sub    esp,0x8
c0029e07:	68 e8 01 00 00       	push   0x1e8
c0029e0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e10:	e8 8f f5 fe ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c0029e15:	83 c4 10             	add    esp,0x10
c0029e18:	83 c4 0c             	add    esp,0xc
c0029e1b:	c3                   	ret    

c0029e1c <SoundCard::configureRates(int, int, int)>:
c0029e1c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0029e20:	31 c0                	xor    eax,eax
c0029e22:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0029e29:	75 20                	jne    c0029e4b <SoundCard::configureRates(int, int, int)+0x2f>
c0029e2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029e2f:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0029e35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029e39:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0029e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e43:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0029e49:	b0 01                	mov    al,0x1
c0029e4b:	c3                   	ret    

c0029e4c <SoundCard::getSamples16(int, short*)>:
c0029e4c:	55                   	push   ebp
c0029e4d:	57                   	push   edi
c0029e4e:	31 ff                	xor    edi,edi
c0029e50:	56                   	push   esi
c0029e51:	53                   	push   ebx
c0029e52:	31 db                	xor    ebx,ebx
c0029e54:	83 ec 10             	sub    esp,0x10
c0029e57:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0029e5b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029e5f:	8d 04 36             	lea    eax,[esi+esi*1]
c0029e62:	50                   	push   eax
c0029e63:	6a 00                	push   0x0
c0029e65:	55                   	push   ebp
c0029e66:	e8 85 66 fd ff       	call   c00004f0 <memset>
c0029e6b:	83 c4 10             	add    esp,0x10
c0029e6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029e72:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0029e79:	85 c0                	test   eax,eax
c0029e7b:	74 1b                	je     c0029e98 <SoundCard::getSamples16(int, short*)+0x4c>
c0029e7d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029e81:	75 15                	jne    c0029e98 <SoundCard::getSamples16(int, short*)+0x4c>
c0029e83:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0029e87:	55                   	push   ebp
c0029e88:	56                   	push   esi
c0029e89:	50                   	push   eax
c0029e8a:	e8 f1 02 00 00       	call   c002a180 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0029e8f:	83 c4 10             	add    esp,0x10
c0029e92:	39 c7                	cmp    edi,eax
c0029e94:	7d 02                	jge    c0029e98 <SoundCard::getSamples16(int, short*)+0x4c>
c0029e96:	89 c7                	mov    edi,eax
c0029e98:	43                   	inc    ebx
c0029e99:	83 fb 20             	cmp    ebx,0x20
c0029e9c:	75 d0                	jne    c0029e6e <SoundCard::getSamples16(int, short*)+0x22>
c0029e9e:	83 c4 0c             	add    esp,0xc
c0029ea1:	89 f8                	mov    eax,edi
c0029ea3:	5b                   	pop    ebx
c0029ea4:	5e                   	pop    esi
c0029ea5:	5f                   	pop    edi
c0029ea6:	5d                   	pop    ebp
c0029ea7:	c3                   	ret    

c0029ea8 <SoundCard::getSamples32(int, int*)>:
c0029ea8:	55                   	push   ebp
c0029ea9:	57                   	push   edi
c0029eaa:	31 ff                	xor    edi,edi
c0029eac:	56                   	push   esi
c0029ead:	31 f6                	xor    esi,esi
c0029eaf:	53                   	push   ebx
c0029eb0:	83 ec 10             	sub    esp,0x10
c0029eb3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0029eb7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0029ebb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029ebf:	c1 e0 02             	shl    eax,0x2
c0029ec2:	50                   	push   eax
c0029ec3:	6a 00                	push   0x0
c0029ec5:	55                   	push   ebp
c0029ec6:	e8 25 66 fd ff       	call   c00004f0 <memset>
c0029ecb:	83 c4 10             	add    esp,0x10
c0029ece:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0029ed5:	85 c0                	test   eax,eax
c0029ed7:	74 1b                	je     c0029ef4 <SoundCard::getSamples32(int, int*)+0x4c>
c0029ed9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029edd:	75 15                	jne    c0029ef4 <SoundCard::getSamples32(int, int*)+0x4c>
c0029edf:	53                   	push   ebx
c0029ee0:	55                   	push   ebp
c0029ee1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029ee5:	50                   	push   eax
c0029ee6:	e8 61 03 00 00       	call   c002a24c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0029eeb:	83 c4 10             	add    esp,0x10
c0029eee:	39 c6                	cmp    esi,eax
c0029ef0:	7d 02                	jge    c0029ef4 <SoundCard::getSamples32(int, int*)+0x4c>
c0029ef2:	89 c6                	mov    esi,eax
c0029ef4:	47                   	inc    edi
c0029ef5:	83 ff 20             	cmp    edi,0x20
c0029ef8:	75 d4                	jne    c0029ece <SoundCard::getSamples32(int, int*)+0x26>
c0029efa:	85 f6                	test   esi,esi
c0029efc:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0029f03:	75 0f                	jne    c0029f14 <SoundCard::getSamples32(int, int*)+0x6c>
c0029f05:	85 c0                	test   eax,eax
c0029f07:	74 1b                	je     c0029f24 <SoundCard::getSamples32(int, int*)+0x7c>
c0029f09:	83 ec 0c             	sub    esp,0xc
c0029f0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029f0e:	53                   	push   ebx
c0029f0f:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0029f12:	eb 0d                	jmp    c0029f21 <SoundCard::getSamples32(int, int*)+0x79>
c0029f14:	85 c0                	test   eax,eax
c0029f16:	75 0c                	jne    c0029f24 <SoundCard::getSamples32(int, int*)+0x7c>
c0029f18:	83 ec 0c             	sub    esp,0xc
c0029f1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029f1d:	53                   	push   ebx
c0029f1e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0029f21:	83 c4 10             	add    esp,0x10
c0029f24:	83 c4 0c             	add    esp,0xc
c0029f27:	89 f0                	mov    eax,esi
c0029f29:	5b                   	pop    ebx
c0029f2a:	5e                   	pop    esi
c0029f2b:	5f                   	pop    edi
c0029f2c:	5d                   	pop    ebp
c0029f2d:	c3                   	ret    

c0029f2e <SoundCard::addChannel(SoundPort*)>:
c0029f2e:	83 ec 0c             	sub    esp,0xc
c0029f31:	31 c0                	xor    eax,eax
c0029f33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0029f37:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0029f3f:	74 1b                	je     c0029f5c <SoundCard::addChannel(SoundPort*)+0x2e>
c0029f41:	40                   	inc    eax
c0029f42:	83 f8 20             	cmp    eax,0x20
c0029f45:	75 f0                	jne    c0029f37 <SoundCard::addChannel(SoundPort*)+0x9>
c0029f47:	83 ec 0c             	sub    esp,0xc
c0029f4a:	68 b5 38 03 c0       	push   0xc00338b5
c0029f4f:	e8 96 65 ff ff       	call   c00204ea <KePanic(char const*)>
c0029f54:	83 c4 10             	add    esp,0x10
c0029f57:	83 c8 ff             	or     eax,0xffffffff
c0029f5a:	eb 0b                	jmp    c0029f67 <SoundCard::addChannel(SoundPort*)+0x39>
c0029f5c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0029f60:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0029f67:	83 c4 0c             	add    esp,0xc
c0029f6a:	c3                   	ret    
c0029f6b:	90                   	nop

c0029f6c <SoundCard::removeChannel(int)>:
c0029f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029f70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029f74:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0029f7f:	c3                   	ret    

c0029f80 <SoundPort::SoundPort(int, int, int, int)>:
c0029f80:	83 ec 0c             	sub    esp,0xc
c0029f83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f87:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029f8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f92:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f9a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029f9e:	89 10                	mov    DWORD PTR [eax],edx
c0029fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fa4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029fa8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029faf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0029fb3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029fb6:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0029fbb:	75 13                	jne    c0029fd0 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0029fbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0029fc3:	05 a0 0f 00 00       	add    eax,0xfa0
c0029fc8:	01 c0                	add    eax,eax
c0029fca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0029fce:	66 90                	xchg   ax,ax
c0029fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fd4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0029fd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0029fdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fdf:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0029fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029fed:	c1 e0 02             	shl    eax,0x2
c0029ff0:	83 ec 0c             	sub    esp,0xc
c0029ff3:	50                   	push   eax
c0029ff4:	e8 4a c6 fe ff       	call   c0016643 <malloc>
c0029ff9:	83 c4 10             	add    esp,0x10
c0029ffc:	89 c2                	mov    edx,eax
c0029ffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a002:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002a005:	90                   	nop
c002a006:	83 c4 0c             	add    esp,0xc
c002a009:	c3                   	ret    
c002a00a:	66 90                	xchg   ax,ax

c002a00c <SoundPort::~SoundPort()>:
c002a00c:	83 ec 0c             	sub    esp,0xc
c002a00f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a013:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002a016:	85 c0                	test   eax,eax
c002a018:	74 1e                	je     c002a038 <SoundPort::~SoundPort()+0x2c>
c002a01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a01e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002a021:	83 ec 0c             	sub    esp,0xc
c002a024:	50                   	push   eax
c002a025:	e8 29 c6 fe ff       	call   c0016653 <free>
c002a02a:	83 c4 10             	add    esp,0x10
c002a02d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a031:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002a038:	90                   	nop
c002a039:	83 c4 0c             	add    esp,0xc
c002a03c:	c3                   	ret    
c002a03d:	90                   	nop
c002a03e:	66 90                	xchg   ax,ax

c002a040 <SoundPort::unpause()>:
c002a040:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a044:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c002a048:	c3                   	ret    
c002a049:	90                   	nop
c002a04a:	66 90                	xchg   ax,ax

c002a04c <SoundPort::pause()>:
c002a04c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a050:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c002a054:	c3                   	ret    
c002a055:	90                   	nop
c002a056:	66 90                	xchg   ax,ax

c002a058 <SoundPort::getBufferUsed()>:
c002a058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a05c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002a05f:	c3                   	ret    

c002a060 <SoundPort::getBufferSize()>:
c002a060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a064:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002a067:	c3                   	ret    

c002a068 <SoundPort::buffer16(short*, int)>:
c002a068:	55                   	push   ebp
c002a069:	57                   	push   edi
c002a06a:	56                   	push   esi
c002a06b:	53                   	push   ebx
c002a06c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002a070:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002a074:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c002a077:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c002a07a:	74 68                	je     c002a0e4 <SoundPort::buffer16(short*, int)+0x7c>
c002a07c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a080:	85 c9                	test   ecx,ecx
c002a082:	7e 60                	jle    c002a0e4 <SoundPort::buffer16(short*, int)+0x7c>
c002a084:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c002a088:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c002a08b:	c1 e1 0f             	shl    ecx,0xf
c002a08e:	8d 70 01             	lea    esi,[eax+0x1]
c002a091:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c002a094:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c002a097:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a09a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a09d:	74 4d                	je     c002a0ec <SoundPort::buffer16(short*, int)+0x84>
c002a09f:	31 f6                	xor    esi,esi
c002a0a1:	eb 21                	jmp    c002a0c4 <SoundPort::buffer16(short*, int)+0x5c>
c002a0a3:	90                   	nop
c002a0a4:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c002a0a9:	8d 79 01             	lea    edi,[ecx+0x1]
c002a0ac:	c1 e3 0f             	shl    ebx,0xf
c002a0af:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c002a0b2:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c002a0b5:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c002a0b8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a0bb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a0be:	74 1c                	je     c002a0dc <SoundPort::buffer16(short*, int)+0x74>
c002a0c0:	89 c6                	mov    esi,eax
c002a0c2:	66 90                	xchg   ax,ax
c002a0c4:	8d 46 01             	lea    eax,[esi+0x1]
c002a0c7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c002a0cb:	75 d7                	jne    c002a0a4 <SoundPort::buffer16(short*, int)+0x3c>
c002a0cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a0d1:	8d 76 00             	lea    esi,[esi+0x0]
c002a0d4:	5b                   	pop    ebx
c002a0d5:	5e                   	pop    esi
c002a0d6:	5f                   	pop    edi
c002a0d7:	5d                   	pop    ebp
c002a0d8:	c3                   	ret    
c002a0d9:	8d 76 00             	lea    esi,[esi+0x0]
c002a0dc:	5b                   	pop    ebx
c002a0dd:	8d 46 02             	lea    eax,[esi+0x2]
c002a0e0:	5e                   	pop    esi
c002a0e1:	5f                   	pop    edi
c002a0e2:	5d                   	pop    ebp
c002a0e3:	c3                   	ret    
c002a0e4:	5b                   	pop    ebx
c002a0e5:	31 c0                	xor    eax,eax
c002a0e7:	5e                   	pop    esi
c002a0e8:	5f                   	pop    edi
c002a0e9:	5d                   	pop    ebp
c002a0ea:	c3                   	ret    
c002a0eb:	90                   	nop
c002a0ec:	b8 01 00 00 00       	mov    eax,0x1
c002a0f1:	eb e1                	jmp    c002a0d4 <SoundPort::buffer16(short*, int)+0x6c>
c002a0f3:	90                   	nop

c002a0f4 <SoundPort::buffer32(int*, int)>:
c002a0f4:	55                   	push   ebp
c002a0f5:	57                   	push   edi
c002a0f6:	56                   	push   esi
c002a0f7:	53                   	push   ebx
c002a0f8:	83 ec 04             	sub    esp,0x4
c002a0fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a0ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a103:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a106:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002a10a:	89 04 24             	mov    DWORD PTR [esp],eax
c002a10d:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a110:	74 5a                	je     c002a16c <SoundPort::buffer32(int*, int)+0x78>
c002a112:	85 c0                	test   eax,eax
c002a114:	7e 56                	jle    c002a16c <SoundPort::buffer32(int*, int)+0x78>
c002a116:	8d 71 01             	lea    esi,[ecx+0x1]
c002a119:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c002a11c:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c002a11f:	8b 37                	mov    esi,DWORD PTR [edi]
c002a121:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c002a124:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a127:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a12a:	74 4c                	je     c002a178 <SoundPort::buffer32(int*, int)+0x84>
c002a12c:	31 f6                	xor    esi,esi
c002a12e:	eb 1c                	jmp    c002a14c <SoundPort::buffer32(int*, int)+0x58>
c002a130:	8d 69 01             	lea    ebp,[ecx+0x1]
c002a133:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c002a136:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c002a139:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c002a13c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c002a140:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a143:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a146:	74 18                	je     c002a160 <SoundPort::buffer32(int*, int)+0x6c>
c002a148:	89 de                	mov    esi,ebx
c002a14a:	66 90                	xchg   ax,ax
c002a14c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002a14f:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c002a152:	75 dc                	jne    c002a130 <SoundPort::buffer32(int*, int)+0x3c>
c002a154:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002a157:	90                   	nop
c002a158:	83 c4 04             	add    esp,0x4
c002a15b:	5b                   	pop    ebx
c002a15c:	5e                   	pop    esi
c002a15d:	5f                   	pop    edi
c002a15e:	5d                   	pop    ebp
c002a15f:	c3                   	ret    
c002a160:	83 c4 04             	add    esp,0x4
c002a163:	8d 46 02             	lea    eax,[esi+0x2]
c002a166:	5b                   	pop    ebx
c002a167:	5e                   	pop    esi
c002a168:	5f                   	pop    edi
c002a169:	5d                   	pop    ebp
c002a16a:	c3                   	ret    
c002a16b:	90                   	nop
c002a16c:	83 c4 04             	add    esp,0x4
c002a16f:	31 c0                	xor    eax,eax
c002a171:	5b                   	pop    ebx
c002a172:	5e                   	pop    esi
c002a173:	5f                   	pop    edi
c002a174:	5d                   	pop    ebp
c002a175:	c3                   	ret    
c002a176:	66 90                	xchg   ax,ax
c002a178:	b8 01 00 00 00       	mov    eax,0x1
c002a17d:	eb d9                	jmp    c002a158 <SoundPort::buffer32(int*, int)+0x64>
c002a17f:	90                   	nop

c002a180 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c002a180:	57                   	push   edi
c002a181:	56                   	push   esi
c002a182:	53                   	push   ebx
c002a183:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002a187:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002a18b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c002a191:	39 03                	cmp    DWORD PTR [ebx],eax
c002a193:	74 13                	je     c002a1a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c002a195:	83 ec 0c             	sub    esp,0xc
c002a198:	68 08 39 03 c0       	push   0xc0033908
c002a19d:	e8 48 63 ff ff       	call   c00204ea <KePanic(char const*)>
c002a1a2:	83 c4 10             	add    esp,0x10
c002a1a5:	8d 76 00             	lea    esi,[esi+0x0]
c002a1a8:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c002a1ae:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c002a1b1:	74 11                	je     c002a1c4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c002a1b3:	83 ec 0c             	sub    esp,0xc
c002a1b6:	68 47 39 03 c0       	push   0xc0033947
c002a1bb:	e8 2a 63 ff ff       	call   c00204ea <KePanic(char const*)>
c002a1c0:	83 c4 10             	add    esp,0x10
c002a1c3:	90                   	nop
c002a1c4:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c002a1ca:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c002a1cd:	74 11                	je     c002a1e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c002a1cf:	83 ec 0c             	sub    esp,0xc
c002a1d2:	68 47 39 03 c0       	push   0xc0033947
c002a1d7:	e8 0e 63 ff ff       	call   c00204ea <KePanic(char const*)>
c002a1dc:	83 c4 10             	add    esp,0x10
c002a1df:	90                   	nop
c002a1e0:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c002a1e3:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c002a1e7:	7e 07                	jle    c002a1f0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c002a1e9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002a1ed:	8d 76 00             	lea    esi,[esi+0x0]
c002a1f0:	85 f6                	test   esi,esi
c002a1f2:	7e 2c                	jle    c002a220 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c002a1f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a1f8:	8d 3c 36             	lea    edi,[esi+esi*1]
c002a1fb:	31 c9                	xor    ecx,ecx
c002a1fd:	01 d7                	add    edi,edx
c002a1ff:	90                   	nop
c002a200:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c002a203:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c002a206:	85 c0                	test   eax,eax
c002a208:	79 06                	jns    c002a210 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c002a20a:	05 ff 7f 00 00       	add    eax,0x7fff
c002a20f:	90                   	nop
c002a210:	c1 f8 0f             	sar    eax,0xf
c002a213:	83 c1 04             	add    ecx,0x4
c002a216:	66 01 02             	add    WORD PTR [edx],ax
c002a219:	83 c2 02             	add    edx,0x2
c002a21c:	39 d7                	cmp    edi,edx
c002a21e:	75 e0                	jne    c002a200 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c002a220:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c002a223:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002a226:	83 ec 04             	sub    esp,0x4
c002a229:	29 f0                	sub    eax,esi
c002a22b:	c1 e0 02             	shl    eax,0x2
c002a22e:	50                   	push   eax
c002a22f:	8d 04 b2             	lea    eax,[edx+esi*4]
c002a232:	50                   	push   eax
c002a233:	52                   	push   edx
c002a234:	e8 97 61 fd ff       	call   c00003d0 <memmove>
c002a239:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002a23c:	83 c4 10             	add    esp,0x10
c002a23f:	29 f0                	sub    eax,esi
c002a241:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c002a244:	89 f0                	mov    eax,esi
c002a246:	5b                   	pop    ebx
c002a247:	5e                   	pop    esi
c002a248:	5f                   	pop    edi
c002a249:	c3                   	ret    
c002a24a:	66 90                	xchg   ax,ax

c002a24c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c002a24c:	57                   	push   edi
c002a24d:	56                   	push   esi
c002a24e:	53                   	push   ebx
c002a24f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002a253:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002a257:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002a25b:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c002a261:	39 06                	cmp    DWORD PTR [esi],eax
c002a263:	74 13                	je     c002a278 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c002a265:	83 ec 0c             	sub    esp,0xc
c002a268:	68 28 39 03 c0       	push   0xc0033928
c002a26d:	e8 78 62 ff ff       	call   c00204ea <KePanic(char const*)>
c002a272:	83 c4 10             	add    esp,0x10
c002a275:	8d 76 00             	lea    esi,[esi+0x0]
c002a278:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c002a27e:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c002a281:	74 11                	je     c002a294 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c002a283:	83 ec 0c             	sub    esp,0xc
c002a286:	68 63 39 03 c0       	push   0xc0033963
c002a28b:	e8 5a 62 ff ff       	call   c00204ea <KePanic(char const*)>
c002a290:	83 c4 10             	add    esp,0x10
c002a293:	90                   	nop
c002a294:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c002a29a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c002a29d:	74 11                	je     c002a2b0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c002a29f:	83 ec 0c             	sub    esp,0xc
c002a2a2:	68 63 39 03 c0       	push   0xc0033963
c002a2a7:	e8 3e 62 ff ff       	call   c00204ea <KePanic(char const*)>
c002a2ac:	83 c4 10             	add    esp,0x10
c002a2af:	90                   	nop
c002a2b0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c002a2b3:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c002a2b7:	7e 07                	jle    c002a2c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c002a2b9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002a2bd:	8d 76 00             	lea    esi,[esi+0x0]
c002a2c0:	85 ff                	test   edi,edi
c002a2c2:	7e 1c                	jle    c002a2e0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c002a2c4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c002a2cb:	31 c0                	xor    eax,eax
c002a2cd:	8d 76 00             	lea    esi,[esi+0x0]
c002a2d0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002a2d3:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c002a2d6:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c002a2d9:	83 c0 04             	add    eax,0x4
c002a2dc:	39 c1                	cmp    ecx,eax
c002a2de:	75 f0                	jne    c002a2d0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c002a2e0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002a2e3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002a2e6:	83 ec 04             	sub    esp,0x4
c002a2e9:	29 f8                	sub    eax,edi
c002a2eb:	c1 e0 02             	shl    eax,0x2
c002a2ee:	50                   	push   eax
c002a2ef:	8d 04 ba             	lea    eax,[edx+edi*4]
c002a2f2:	50                   	push   eax
c002a2f3:	52                   	push   edx
c002a2f4:	e8 d7 60 fd ff       	call   c00003d0 <memmove>
c002a2f9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c002a2fc:	83 c4 10             	add    esp,0x10
c002a2ff:	29 f8                	sub    eax,edi
c002a301:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c002a304:	89 f8                	mov    eax,edi
c002a306:	5b                   	pop    ebx
c002a307:	5e                   	pop    esi
c002a308:	5f                   	pop    edi
c002a309:	c3                   	ret    

c002a30a <PCI::open(int, int, void*)>:
c002a30a:	83 ec 18             	sub    esp,0x18
c002a30d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a311:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002a315:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002a31b:	8b 10                	mov    edx,DWORD PTR [eax]
c002a31d:	50                   	push   eax
c002a31e:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002a321:	31 c0                	xor    eax,eax
c002a323:	83 c4 1c             	add    esp,0x1c
c002a326:	c3                   	ret    
c002a327:	90                   	nop

c002a328 <PCI::close(int, int, void*)>:
c002a328:	31 c0                	xor    eax,eax
c002a32a:	c3                   	ret    
c002a32b:	90                   	nop

c002a32c <PCI::PCI()>:
c002a32c:	83 ec 0c             	sub    esp,0xc
c002a32f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a333:	83 ec 08             	sub    esp,0x8
c002a336:	68 7f 39 03 c0       	push   0xc003397f
c002a33b:	50                   	push   eax
c002a33c:	e8 73 0b ff ff       	call   c001aeb4 <Bus::Bus(char const*)>
c002a341:	83 c4 10             	add    esp,0x10
c002a344:	ba 28 3a 03 c0       	mov    edx,0xc0033a28
c002a349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a34d:	89 10                	mov    DWORD PTR [eax],edx
c002a34f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a353:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c002a35d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a361:	a3 a0 0b 04 c0       	mov    ds:0xc0040ba0,eax
c002a366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a36a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a370:	0f b6 d0             	movzx  edx,al
c002a373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a377:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002a37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a382:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a388:	0f b6 d0             	movzx  edx,al
c002a38b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a38f:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002a394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a398:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a39e:	8d 50 01             	lea    edx,[eax+0x1]
c002a3a1:	88 d1                	mov    cl,dl
c002a3a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002a3a7:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002a3ad:	0f b6 d0             	movzx  edx,al
c002a3b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a3b4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002a3b8:	83 c9 c0             	or     ecx,0xffffffc0
c002a3bb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002a3bf:	90                   	nop
c002a3c0:	83 c4 0c             	add    esp,0xc
c002a3c3:	c3                   	ret    

c002a3c4 <PCI::readBAR8(unsigned int, int)>:
c002a3c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a3c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a3cc:	f6 c2 01             	test   dl,0x1
c002a3cf:	74 07                	je     c002a3d8 <PCI::readBAR8(unsigned int, int)+0x14>
c002a3d1:	83 e2 fc             	and    edx,0xfffffffc
c002a3d4:	01 c2                	add    edx,eax
c002a3d6:	ec                   	in     al,dx
c002a3d7:	c3                   	ret    
c002a3d8:	83 e2 f0             	and    edx,0xfffffff0
c002a3db:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002a3de:	c3                   	ret    
c002a3df:	90                   	nop

c002a3e0 <PCI::readBAR16(unsigned int, int)>:
c002a3e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a3e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a3e8:	f6 c2 01             	test   dl,0x1
c002a3eb:	74 08                	je     c002a3f5 <PCI::readBAR16(unsigned int, int)+0x15>
c002a3ed:	83 e2 fc             	and    edx,0xfffffffc
c002a3f0:	01 c2                	add    edx,eax
c002a3f2:	66 ed                	in     ax,dx
c002a3f4:	c3                   	ret    
c002a3f5:	83 e2 f0             	and    edx,0xfffffff0
c002a3f8:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002a3fc:	c3                   	ret    
c002a3fd:	90                   	nop

c002a3fe <PCI::readBAR32(unsigned int, int)>:
c002a3fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a402:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a406:	f6 c2 01             	test   dl,0x1
c002a409:	74 07                	je     c002a412 <PCI::readBAR32(unsigned int, int)+0x14>
c002a40b:	83 e2 fc             	and    edx,0xfffffffc
c002a40e:	01 c2                	add    edx,eax
c002a410:	ed                   	in     eax,dx
c002a411:	c3                   	ret    
c002a412:	83 e2 f0             	and    edx,0xfffffff0
c002a415:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002a418:	c3                   	ret    
c002a419:	90                   	nop

c002a41a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002a41a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a41e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a422:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a426:	f6 c2 01             	test   dl,0x1
c002a429:	74 07                	je     c002a432 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002a42b:	83 e2 fc             	and    edx,0xfffffffc
c002a42e:	01 ca                	add    edx,ecx
c002a430:	ee                   	out    dx,al
c002a431:	c3                   	ret    
c002a432:	83 e2 f0             	and    edx,0xfffffff0
c002a435:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002a438:	c3                   	ret    
c002a439:	90                   	nop

c002a43a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002a43a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a43e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a442:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a446:	f6 c2 01             	test   dl,0x1
c002a449:	74 08                	je     c002a453 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002a44b:	83 e2 fc             	and    edx,0xfffffffc
c002a44e:	01 ca                	add    edx,ecx
c002a450:	66 ef                	out    dx,ax
c002a452:	c3                   	ret    
c002a453:	83 e2 f0             	and    edx,0xfffffff0
c002a456:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002a45a:	c3                   	ret    
c002a45b:	90                   	nop

c002a45c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002a45c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a460:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a464:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a468:	f6 c2 01             	test   dl,0x1
c002a46b:	74 07                	je     c002a474 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002a46d:	83 e2 fc             	and    edx,0xfffffffc
c002a470:	01 ca                	add    edx,ecx
c002a472:	ef                   	out    dx,eax
c002a473:	c3                   	ret    
c002a474:	83 e2 f0             	and    edx,0xfffffff0
c002a477:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002a47a:	c3                   	ret    
c002a47b:	90                   	nop

c002a47c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a47c:	55                   	push   ebp
c002a47d:	57                   	push   edi
c002a47e:	56                   	push   esi
c002a47f:	53                   	push   ebx
c002a480:	83 ec 0c             	sub    esp,0xc
c002a483:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c002a488:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002a48c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002a490:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002a494:	83 fe 07             	cmp    esi,0x7
c002a497:	76 10                	jbe    c002a4a9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002a499:	83 ec 0c             	sub    esp,0xc
c002a49c:	68 87 39 03 c0       	push   0xc0033987
c002a4a1:	e8 44 60 ff ff       	call   c00204ea <KePanic(char const*)>
c002a4a6:	83 c4 10             	add    esp,0x10
c002a4a9:	0f b6 db             	movzx  ebx,bl
c002a4ac:	83 fb 0f             	cmp    ebx,0xf
c002a4af:	76 10                	jbe    c002a4c1 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c002a4b1:	83 ec 0c             	sub    esp,0xc
c002a4b4:	68 b7 39 03 c0       	push   0xc00339b7
c002a4b9:	e8 2c 60 ff ff       	call   c00204ea <KePanic(char const*)>
c002a4be:	83 c4 10             	add    esp,0x10
c002a4c1:	8d 04 36             	lea    eax,[esi+esi*1]
c002a4c4:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a4c9:	83 c8 f0             	or     eax,0xfffffff0
c002a4cc:	ee                   	out    dx,al
c002a4cd:	ba fa 0c 00 00       	mov    edx,0xcfa
c002a4d2:	89 e8                	mov    eax,ebp
c002a4d4:	ee                   	out    dx,al
c002a4d5:	83 c4 0c             	add    esp,0xc
c002a4d8:	89 d8                	mov    eax,ebx
c002a4da:	89 f9                	mov    ecx,edi
c002a4dc:	c1 e0 08             	shl    eax,0x8
c002a4df:	0f b6 d9             	movzx  ebx,cl
c002a4e2:	83 e3 fc             	and    ebx,0xfffffffc
c002a4e5:	09 d8                	or     eax,ebx
c002a4e7:	5b                   	pop    ebx
c002a4e8:	0d 00 c0 ff ff       	or     eax,0xffffc000
c002a4ed:	5e                   	pop    esi
c002a4ee:	5f                   	pop    edi
c002a4ef:	5d                   	pop    ebp
c002a4f0:	c3                   	ret    
c002a4f1:	90                   	nop

c002a4f2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a4f2:	57                   	push   edi
c002a4f3:	56                   	push   esi
c002a4f4:	53                   	push   ebx
c002a4f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002a4f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002a4fd:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002a503:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a507:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a50b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a50f:	83 ff 01             	cmp    edi,0x1
c002a512:	75 3f                	jne    c002a553 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c002a514:	89 de                	mov    esi,ebx
c002a516:	0f b6 c0             	movzx  eax,al
c002a519:	81 e6 fc 00 00 00    	and    esi,0xfc
c002a51f:	c1 e0 10             	shl    eax,0x10
c002a522:	0f b6 c9             	movzx  ecx,cl
c002a525:	09 f0                	or     eax,esi
c002a527:	c1 e1 08             	shl    ecx,0x8
c002a52a:	0f b6 d2             	movzx  edx,dl
c002a52d:	09 c8                	or     eax,ecx
c002a52f:	c1 e2 0b             	shl    edx,0xb
c002a532:	09 d0                	or     eax,edx
c002a534:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a539:	0d 00 00 00 80       	or     eax,0x80000000
c002a53e:	ef                   	out    dx,eax
c002a53f:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a544:	ed                   	in     eax,dx
c002a545:	83 e3 02             	and    ebx,0x2
c002a548:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a54f:	d3 e8                	shr    eax,cl
c002a551:	eb 44                	jmp    c002a597 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a553:	83 ff 02             	cmp    edi,0x2
c002a556:	75 2d                	jne    c002a585 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c002a558:	83 ec 0c             	sub    esp,0xc
c002a55b:	0f b6 c9             	movzx  ecx,cl
c002a55e:	0f b6 d2             	movzx  edx,dl
c002a561:	0f b6 fb             	movzx  edi,bl
c002a564:	0f b6 c0             	movzx  eax,al
c002a567:	57                   	push   edi
c002a568:	51                   	push   ecx
c002a569:	52                   	push   edx
c002a56a:	50                   	push   eax
c002a56b:	56                   	push   esi
c002a56c:	e8 0b ff ff ff       	call   c002a47c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a571:	89 c2                	mov    edx,eax
c002a573:	ed                   	in     eax,dx
c002a574:	83 e3 02             	and    ebx,0x2
c002a577:	83 c4 20             	add    esp,0x20
c002a57a:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a581:	d3 e8                	shr    eax,cl
c002a583:	eb 12                	jmp    c002a597 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a585:	83 ec 0c             	sub    esp,0xc
c002a588:	68 e7 39 03 c0       	push   0xc00339e7
c002a58d:	e8 58 5f ff ff       	call   c00204ea <KePanic(char const*)>
c002a592:	83 c4 10             	add    esp,0x10
c002a595:	31 c0                	xor    eax,eax
c002a597:	5b                   	pop    ebx
c002a598:	5e                   	pop    esi
c002a599:	5f                   	pop    edi
c002a59a:	c3                   	ret    
c002a59b:	90                   	nop

c002a59c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002a59c:	83 ec 18             	sub    esp,0x18
c002a59f:	6a 00                	push   0x0
c002a5a1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a5a6:	50                   	push   eax
c002a5a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a5ac:	50                   	push   eax
c002a5ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a5b2:	50                   	push   eax
c002a5b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a5b7:	e8 36 ff ff ff       	call   c002a4f2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a5bc:	83 c4 2c             	add    esp,0x2c
c002a5bf:	c3                   	ret    

c002a5c0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002a5c0:	83 ec 18             	sub    esp,0x18
c002a5c3:	6a 0e                	push   0xe
c002a5c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a5ca:	50                   	push   eax
c002a5cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a5d0:	50                   	push   eax
c002a5d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a5d6:	50                   	push   eax
c002a5d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a5db:	e8 12 ff ff ff       	call   c002a4f2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a5e0:	83 c4 2c             	add    esp,0x2c
c002a5e3:	0f b6 c0             	movzx  eax,al
c002a5e6:	c3                   	ret    
c002a5e7:	90                   	nop

c002a5e8 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002a5e8:	55                   	push   ebp
c002a5e9:	57                   	push   edi
c002a5ea:	56                   	push   esi
c002a5eb:	53                   	push   ebx
c002a5ec:	83 ec 18             	sub    esp,0x18
c002a5ef:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002a5f4:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002a5f9:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002a5fe:	6a 0a                	push   0xa
c002a600:	56                   	push   esi
c002a601:	55                   	push   ebp
c002a602:	57                   	push   edi
c002a603:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a607:	e8 e6 fe ff ff       	call   c002a4f2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a60c:	83 c4 14             	add    esp,0x14
c002a60f:	89 c3                	mov    ebx,eax
c002a611:	6a 0a                	push   0xa
c002a613:	0f b6 db             	movzx  ebx,bl
c002a616:	56                   	push   esi
c002a617:	55                   	push   ebp
c002a618:	57                   	push   edi
c002a619:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a61d:	e8 d0 fe ff ff       	call   c002a4f2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a622:	83 c4 2c             	add    esp,0x2c
c002a625:	25 00 ff 00 00       	and    eax,0xff00
c002a62a:	09 d8                	or     eax,ebx
c002a62c:	5b                   	pop    ebx
c002a62d:	5e                   	pop    esi
c002a62e:	5f                   	pop    edi
c002a62f:	5d                   	pop    ebp
c002a630:	c3                   	ret    
c002a631:	90                   	nop

c002a632 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002a632:	83 ec 18             	sub    esp,0x18
c002a635:	6a 08                	push   0x8
c002a637:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a63c:	50                   	push   eax
c002a63d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a642:	50                   	push   eax
c002a643:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a648:	50                   	push   eax
c002a649:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a64d:	e8 a0 fe ff ff       	call   c002a4f2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a652:	83 c4 2c             	add    esp,0x2c
c002a655:	0f b6 c4             	movzx  eax,ah
c002a658:	c3                   	ret    
c002a659:	90                   	nop

c002a65a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002a65a:	83 ec 18             	sub    esp,0x18
c002a65d:	6a 08                	push   0x8
c002a65f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a664:	50                   	push   eax
c002a665:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a66a:	50                   	push   eax
c002a66b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a670:	50                   	push   eax
c002a671:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a675:	e8 78 fe ff ff       	call   c002a4f2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a67a:	83 c4 2c             	add    esp,0x2c
c002a67d:	c3                   	ret    

c002a67e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002a67e:	83 ec 18             	sub    esp,0x18
c002a681:	6a 3c                	push   0x3c
c002a683:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a688:	50                   	push   eax
c002a689:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a68e:	50                   	push   eax
c002a68f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a694:	50                   	push   eax
c002a695:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a699:	e8 54 fe ff ff       	call   c002a4f2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a69e:	83 c4 2c             	add    esp,0x2c
c002a6a1:	c3                   	ret    

c002a6a2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002a6a2:	83 ec 18             	sub    esp,0x18
c002a6a5:	6a 18                	push   0x18
c002a6a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a6ac:	50                   	push   eax
c002a6ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a6b2:	50                   	push   eax
c002a6b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a6b8:	50                   	push   eax
c002a6b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a6bd:	e8 30 fe ff ff       	call   c002a4f2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a6c2:	83 c4 2c             	add    esp,0x2c
c002a6c5:	0f b6 c4             	movzx  eax,ah
c002a6c8:	c3                   	ret    
c002a6c9:	90                   	nop

c002a6ca <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a6ca:	55                   	push   ebp
c002a6cb:	57                   	push   edi
c002a6cc:	56                   	push   esi
c002a6cd:	53                   	push   ebx
c002a6ce:	83 ec 28             	sub    esp,0x28
c002a6d1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002a6d5:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002a6da:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002a6df:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002a6e4:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002a6eb:	8d 43 12             	lea    eax,[ebx+0x12]
c002a6ee:	83 c3 10             	add    ebx,0x10
c002a6f1:	0f b6 c0             	movzx  eax,al
c002a6f4:	0f b6 db             	movzx  ebx,bl
c002a6f7:	50                   	push   eax
c002a6f8:	51                   	push   ecx
c002a6f9:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002a6fd:	57                   	push   edi
c002a6fe:	55                   	push   ebp
c002a6ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a703:	e8 ea fd ff ff       	call   c002a4f2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a708:	83 c4 14             	add    esp,0x14
c002a70b:	89 c6                	mov    esi,eax
c002a70d:	53                   	push   ebx
c002a70e:	c1 e6 10             	shl    esi,0x10
c002a711:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a715:	51                   	push   ecx
c002a716:	57                   	push   edi
c002a717:	55                   	push   ebp
c002a718:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a71c:	e8 d1 fd ff ff       	call   c002a4f2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a721:	83 c4 3c             	add    esp,0x3c
c002a724:	0f b7 c0             	movzx  eax,ax
c002a727:	5b                   	pop    ebx
c002a728:	09 f0                	or     eax,esi
c002a72a:	5e                   	pop    esi
c002a72b:	5f                   	pop    edi
c002a72c:	5d                   	pop    ebp
c002a72d:	c3                   	ret    

c002a72e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002a72e:	55                   	push   ebp
c002a72f:	57                   	push   edi
c002a730:	56                   	push   esi
c002a731:	53                   	push   ebx
c002a732:	83 ec 0c             	sub    esp,0xc
c002a735:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002a739:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002a73d:	89 f5                	mov    ebp,esi
c002a73f:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c002a745:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002a749:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002a74d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002a751:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002a755:	83 f9 01             	cmp    ecx,0x1
c002a758:	75 5d                	jne    c002a7b7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c002a75a:	0f b6 c8             	movzx  ecx,al
c002a75d:	0f b6 d2             	movzx  edx,dl
c002a760:	c1 e1 10             	shl    ecx,0x10
c002a763:	c1 e2 0b             	shl    edx,0xb
c002a766:	89 f0                	mov    eax,esi
c002a768:	25 fc 00 00 00       	and    eax,0xfc
c002a76d:	09 c1                	or     ecx,eax
c002a76f:	89 e8                	mov    eax,ebp
c002a771:	0f b6 c0             	movzx  eax,al
c002a774:	c1 e0 08             	shl    eax,0x8
c002a777:	09 c1                	or     ecx,eax
c002a779:	09 d1                	or     ecx,edx
c002a77b:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a780:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002a786:	89 c8                	mov    eax,ecx
c002a788:	ef                   	out    dx,eax
c002a789:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a78e:	ed                   	in     eax,dx
c002a78f:	0f b7 db             	movzx  ebx,bx
c002a792:	83 e6 02             	and    esi,0x2
c002a795:	74 0a                	je     c002a7a1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c002a797:	0f b7 d0             	movzx  edx,ax
c002a79a:	c1 e3 10             	shl    ebx,0x10
c002a79d:	09 d3                	or     ebx,edx
c002a79f:	eb 05                	jmp    c002a7a6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c002a7a1:	66 31 c0             	xor    ax,ax
c002a7a4:	09 c3                	or     ebx,eax
c002a7a6:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a7ab:	89 c8                	mov    eax,ecx
c002a7ad:	ef                   	out    dx,eax
c002a7ae:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a7b3:	89 d8                	mov    eax,ebx
c002a7b5:	eb 41                	jmp    c002a7f8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002a7b7:	83 f9 02             	cmp    ecx,0x2
c002a7ba:	75 45                	jne    c002a801 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c002a7bc:	83 ec 0c             	sub    esp,0xc
c002a7bf:	0f b6 d2             	movzx  edx,dl
c002a7c2:	89 f1                	mov    ecx,esi
c002a7c4:	0f b6 c0             	movzx  eax,al
c002a7c7:	0f b6 f1             	movzx  esi,cl
c002a7ca:	89 e9                	mov    ecx,ebp
c002a7cc:	56                   	push   esi
c002a7cd:	0f b6 c9             	movzx  ecx,cl
c002a7d0:	51                   	push   ecx
c002a7d1:	52                   	push   edx
c002a7d2:	50                   	push   eax
c002a7d3:	57                   	push   edi
c002a7d4:	e8 a3 fc ff ff       	call   c002a47c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a7d9:	89 c2                	mov    edx,eax
c002a7db:	ed                   	in     eax,dx
c002a7dc:	83 c4 20             	add    esp,0x20
c002a7df:	0f b7 db             	movzx  ebx,bx
c002a7e2:	f6 c2 02             	test   dl,0x2
c002a7e5:	74 0c                	je     c002a7f3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c002a7e7:	0f b7 c8             	movzx  ecx,ax
c002a7ea:	89 d8                	mov    eax,ebx
c002a7ec:	c1 e0 10             	shl    eax,0x10
c002a7ef:	09 c8                	or     eax,ecx
c002a7f1:	eb 05                	jmp    c002a7f8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002a7f3:	66 31 c0             	xor    ax,ax
c002a7f6:	09 d8                	or     eax,ebx
c002a7f8:	ef                   	out    dx,eax
c002a7f9:	83 c4 0c             	add    esp,0xc
c002a7fc:	5b                   	pop    ebx
c002a7fd:	5e                   	pop    esi
c002a7fe:	5f                   	pop    edi
c002a7ff:	5d                   	pop    ebp
c002a800:	c3                   	ret    
c002a801:	c7 44 24 20 e7 39 03 c0 	mov    DWORD PTR [esp+0x20],0xc00339e7
c002a809:	83 c4 0c             	add    esp,0xc
c002a80c:	5b                   	pop    ebx
c002a80d:	5e                   	pop    esi
c002a80e:	5f                   	pop    edi
c002a80f:	5d                   	pop    ebp
c002a810:	e9 d5 5c ff ff       	jmp    c00204ea <KePanic(char const*)>
c002a815:	90                   	nop

c002a816 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002a816:	55                   	push   ebp
c002a817:	57                   	push   edi
c002a818:	56                   	push   esi
c002a819:	53                   	push   ebx
c002a81a:	81 ec 4c 01 00 00    	sub    esp,0x14c
c002a820:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c002a827:	80 3d ac 0b 04 c0 00 	cmp    BYTE PTR ds:0xc0040bac,0x0
c002a82e:	0f 85 bd 00 00 00    	jne    c002a8f1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c002a834:	83 ec 0c             	sub    esp,0xc
c002a837:	68 14 01 00 00       	push   0x114
c002a83c:	e8 02 be fe ff       	call   c0016643 <malloc>
c002a841:	83 c4 0c             	add    esp,0xc
c002a844:	89 c3                	mov    ebx,eax
c002a846:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002a84c:	68 ed 39 03 c0       	push   0xc00339ed
c002a851:	50                   	push   eax
c002a852:	e8 81 fe fe ff       	call   c001a6d8 <File::File(char const*, Process*)>
c002a857:	83 c4 10             	add    esp,0x10
c002a85a:	85 db                	test   ebx,ebx
c002a85c:	0f 84 67 02 00 00    	je     c002aac9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a862:	56                   	push   esi
c002a863:	56                   	push   esi
c002a864:	6a 01                	push   0x1
c002a866:	53                   	push   ebx
c002a867:	e8 8a fe fe ff       	call   c001a6f6 <File::open(FileOpenMode)>
c002a86c:	83 c4 10             	add    esp,0x10
c002a86f:	85 c0                	test   eax,eax
c002a871:	0f 85 52 02 00 00    	jne    c002aac9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a877:	52                   	push   edx
c002a878:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c002a87c:	50                   	push   eax
c002a87d:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a881:	50                   	push   eax
c002a882:	53                   	push   ebx
c002a883:	e8 70 01 ff ff       	call   c001a9f8 <File::stat(unsigned long long*, bool*)>
c002a888:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a88c:	40                   	inc    eax
c002a88d:	89 04 24             	mov    DWORD PTR [esp],eax
c002a890:	e8 ae bd fe ff       	call   c0016643 <malloc>
c002a895:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c002a899:	a3 a8 0b 04 c0       	mov    ds:0xc0040ba8,eax
c002a89e:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c002a8a2:	59                   	pop    ecx
c002a8a3:	8b 13                	mov    edx,DWORD PTR [ebx]
c002a8a5:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c002a8a9:	51                   	push   ecx
c002a8aa:	50                   	push   eax
c002a8ab:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a8af:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a8b3:	53                   	push   ebx
c002a8b4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002a8b7:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c002a8bb:	83 c4 20             	add    esp,0x20
c002a8be:	89 c8                	mov    eax,ecx
c002a8c0:	99                   	cdq    
c002a8c1:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c002a8c5:	0f 85 fe 01 00 00    	jne    c002aac9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a8cb:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c002a8cf:	0f 85 f4 01 00 00    	jne    c002aac9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a8d5:	83 ec 0c             	sub    esp,0xc
c002a8d8:	53                   	push   ebx
c002a8d9:	e8 76 fe fe ff       	call   c001a754 <File::close()>
c002a8de:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a8e2:	c6 05 ac 0b 04 c0 01 	mov    BYTE PTR ds:0xc0040bac,0x1
c002a8e9:	a3 a4 0b 04 c0       	mov    ds:0xc0040ba4,eax
c002a8ee:	83 c4 10             	add    esp,0x10
c002a8f1:	a1 a4 0b 04 c0       	mov    eax,ds:0xc0040ba4
c002a8f6:	8b 1d a8 0b 04 c0    	mov    ebx,DWORD PTR ds:0xc0040ba8
c002a8fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002a900:	31 f6                	xor    esi,esi
c002a902:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002a90a:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c002a911:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c002a916:	31 c9                	xor    ecx,ecx
c002a918:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c002a920:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c002a925:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c002a92d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002a931:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c002a939:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002a93d:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c002a941:	0f 8e 82 01 00 00    	jle    c002aac9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a947:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c002a94a:	d4 40                	aam    0x40
c002a94c:	d5 39                	aad    0x39
c002a94e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002a952:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c002a956:	d4 40                	aam    0x40
c002a958:	d5 39                	aad    0x39
c002a95a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002a95e:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c002a962:	d4 40                	aam    0x40
c002a964:	d5 39                	aad    0x39
c002a966:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c002a96a:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c002a96e:	d4 40                	aam    0x40
c002a970:	d5 39                	aad    0x39
c002a972:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c002a976:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c002a97a:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002a97e:	3c 56                	cmp    al,0x56
c002a980:	74 43                	je     c002a9c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c002a982:	d4 40                	aam    0x40
c002a984:	d5 39                	aad    0x39
c002a986:	8d 48 d0             	lea    ecx,[eax-0x30]
c002a989:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c002a98d:	0f b6 c9             	movzx  ecx,cl
c002a990:	c1 e1 04             	shl    ecx,0x4
c002a993:	d4 40                	aam    0x40
c002a995:	d5 39                	aad    0x39
c002a997:	83 e8 30             	sub    eax,0x30
c002a99a:	0f b6 c0             	movzx  eax,al
c002a99d:	09 c1                	or     ecx,eax
c002a99f:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c002a9a3:	c1 e1 04             	shl    ecx,0x4
c002a9a6:	d4 40                	aam    0x40
c002a9a8:	d5 39                	aad    0x39
c002a9aa:	83 e8 30             	sub    eax,0x30
c002a9ad:	0f b6 c0             	movzx  eax,al
c002a9b0:	09 c1                	or     ecx,eax
c002a9b2:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c002a9b6:	c1 e1 04             	shl    ecx,0x4
c002a9b9:	d4 40                	aam    0x40
c002a9bb:	d5 39                	aad    0x39
c002a9bd:	83 e8 30             	sub    eax,0x30
c002a9c0:	0f b6 c0             	movzx  eax,al
c002a9c3:	09 c1                	or     ecx,eax
c002a9c5:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c002a9c9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002a9cd:	3c 58                	cmp    al,0x58
c002a9cf:	74 47                	je     c002aa18 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c002a9d1:	d4 40                	aam    0x40
c002a9d3:	d5 39                	aad    0x39
c002a9d5:	8d 50 d0             	lea    edx,[eax-0x30]
c002a9d8:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c002a9dc:	0f b6 d2             	movzx  edx,dl
c002a9df:	c1 e2 04             	shl    edx,0x4
c002a9e2:	d4 40                	aam    0x40
c002a9e4:	d5 39                	aad    0x39
c002a9e6:	83 e8 30             	sub    eax,0x30
c002a9e9:	0f b6 c0             	movzx  eax,al
c002a9ec:	09 c2                	or     edx,eax
c002a9ee:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c002a9f2:	c1 e2 04             	shl    edx,0x4
c002a9f5:	d4 40                	aam    0x40
c002a9f7:	d5 39                	aad    0x39
c002a9f9:	83 e8 30             	sub    eax,0x30
c002a9fc:	0f b6 c0             	movzx  eax,al
c002a9ff:	09 c2                	or     edx,eax
c002aa01:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c002aa05:	c1 e2 04             	shl    edx,0x4
c002aa08:	d4 40                	aam    0x40
c002aa0a:	d5 39                	aad    0x39
c002aa0c:	83 e8 30             	sub    eax,0x30
c002aa0f:	0f b6 c0             	movzx  eax,al
c002aa12:	09 c2                	or     edx,eax
c002aa14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002aa18:	83 c6 10             	add    esi,0x10
c002aa1b:	8d 7c 24 40          	lea    edi,[esp+0x40]
c002aa1f:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c002aa23:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c002aa27:	83 fa 0a             	cmp    edx,0xa
c002aa2a:	74 0b                	je     c002aa37 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c002aa2c:	47                   	inc    edi
c002aa2d:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c002aa31:	75 19                	jne    c002aa4c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c002aa33:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c002aa37:	31 c0                	xor    eax,eax
c002aa39:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c002aa3e:	0f 94 c0             	sete   al
c002aa41:	01 c6                	add    esi,eax
c002aa43:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c002aa48:	75 0b                	jne    c002aa55 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c002aa4a:	eb 14                	jmp    c002aa60 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c002aa4c:	46                   	inc    esi
c002aa4d:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c002aa50:	c6 07 00             	mov    BYTE PTR [edi],0x0
c002aa53:	eb ca                	jmp    c002aa1f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c002aa55:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c002aa5a:	0f 85 dd fe ff ff    	jne    c002a93d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002aa60:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c002aa65:	74 10                	je     c002aa77 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c002aa67:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c002aa6c:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c002aa71:	0f 85 c6 fe ff ff    	jne    c002a93d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002aa77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002aa7b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002aa7f:	83 e8 30             	sub    eax,0x30
c002aa82:	83 ef 30             	sub    edi,0x30
c002aa85:	c1 e0 04             	shl    eax,0x4
c002aa88:	09 f8                	or     eax,edi
c002aa8a:	0f b6 c0             	movzx  eax,al
c002aa8d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c002aa91:	0f 85 a6 fe ff ff    	jne    c002a93d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002aa97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002aa9b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c002aa9f:	83 e8 30             	sub    eax,0x30
c002aaa2:	83 ef 30             	sub    edi,0x30
c002aaa5:	c1 e0 04             	shl    eax,0x4
c002aaa8:	09 f8                	or     eax,edi
c002aaaa:	0f b6 c0             	movzx  eax,al
c002aaad:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c002aab1:	0f 85 86 fe ff ff    	jne    c002a93d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002aab7:	50                   	push   eax
c002aab8:	50                   	push   eax
c002aab9:	8d 44 24 48          	lea    eax,[esp+0x48]
c002aabd:	50                   	push   eax
c002aabe:	55                   	push   ebp
c002aabf:	e8 7c 5b fd ff       	call   c0000640 <strcpy>
c002aac4:	83 c4 10             	add    esp,0x10
c002aac7:	eb 06                	jmp    c002aacf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c002aac9:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c002aacd:	31 ed                	xor    ebp,ebp
c002aacf:	81 c4 4c 01 00 00    	add    esp,0x14c
c002aad5:	89 e8                	mov    eax,ebp
c002aad7:	5b                   	pop    ebx
c002aad8:	5e                   	pop    esi
c002aad9:	5f                   	pop    edi
c002aada:	5d                   	pop    ebp
c002aadb:	c3                   	ret    

c002aadc <PCI::checkBus(unsigned char)>:
c002aadc:	56                   	push   esi
c002aadd:	53                   	push   ebx
c002aade:	31 db                	xor    ebx,ebx
c002aae0:	51                   	push   ecx
c002aae1:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002aae6:	52                   	push   edx
c002aae7:	53                   	push   ebx
c002aae8:	43                   	inc    ebx
c002aae9:	56                   	push   esi
c002aaea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002aaee:	e8 03 03 00 00       	call   c002adf6 <PCI::checkDevice(unsigned char, unsigned char)>
c002aaf3:	83 c4 10             	add    esp,0x10
c002aaf6:	83 fb 20             	cmp    ebx,0x20
c002aaf9:	75 eb                	jne    c002aae6 <PCI::checkBus(unsigned char)+0xa>
c002aafb:	58                   	pop    eax
c002aafc:	5b                   	pop    ebx
c002aafd:	5e                   	pop    esi
c002aafe:	c3                   	ret    
c002aaff:	90                   	nop

c002ab00 <PCI::foundDevice(PCIDeviceInfo)>:
c002ab00:	55                   	push   ebp
c002ab01:	57                   	push   edi
c002ab02:	56                   	push   esi
c002ab03:	53                   	push   ebx
c002ab04:	83 ec 1c             	sub    esp,0x1c
c002ab07:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002ab0c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002ab10:	3d ff ff 00 00       	cmp    eax,0xffff
c002ab15:	0f 84 57 01 00 00    	je     c002ac72 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c002ab1b:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c002ab20:	66 3d 06 04          	cmp    ax,0x406
c002ab24:	75 2c                	jne    c002ab52 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c002ab26:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002ab2b:	50                   	push   eax
c002ab2c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002ab31:	50                   	push   eax
c002ab32:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002ab37:	50                   	push   eax
c002ab38:	53                   	push   ebx
c002ab39:	e8 64 fb ff ff       	call   c002a6a2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002ab3e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c002ab42:	0f b6 c0             	movzx  eax,al
c002ab45:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002ab49:	83 c4 2c             	add    esp,0x2c
c002ab4c:	5b                   	pop    ebx
c002ab4d:	5e                   	pop    esi
c002ab4e:	5f                   	pop    edi
c002ab4f:	5d                   	pop    ebp
c002ab50:	eb 8a                	jmp    c002aadc <PCI::checkBus(unsigned char)>
c002ab52:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002ab56:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c002ab5c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002ab60:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002ab64:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c002ab69:	85 d2                	test   edx,edx
c002ab6b:	74 36                	je     c002aba3 <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c002ab6d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c002ab70:	85 c9                	test   ecx,ecx
c002ab72:	74 2b                	je     c002ab9f <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002ab74:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c002ab7a:	31 ee                	xor    esi,ebp
c002ab7c:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c002ab82:	75 1b                	jne    c002ab9f <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002ab84:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c002ab88:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c002ab8e:	75 0f                	jne    c002ab9f <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002ab90:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c002ab97:	39 f9                	cmp    ecx,edi
c002ab99:	0f 84 d3 00 00 00    	je     c002ac72 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c002ab9f:	8b 12                	mov    edx,DWORD PTR [edx]
c002aba1:	eb c6                	jmp    c002ab69 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c002aba3:	3d 01 06 00 00       	cmp    eax,0x601
c002aba8:	75 19                	jne    c002abc3 <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c002abaa:	83 ec 0c             	sub    esp,0xc
c002abad:	68 64 01 00 00       	push   0x164
c002abb2:	e8 8c ba fe ff       	call   c0016643 <malloc>
c002abb7:	89 c5                	mov    ebp,eax
c002abb9:	89 04 24             	mov    DWORD PTR [esp],eax
c002abbc:	e8 a1 0e 00 00       	call   c002ba62 <SATABus::SATABus()>
c002abc1:	eb 1e                	jmp    c002abe1 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c002abc3:	3d 01 01 00 00       	cmp    eax,0x101
c002abc8:	75 62                	jne    c002ac2c <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c002abca:	83 ec 0c             	sub    esp,0xc
c002abcd:	68 70 02 00 00       	push   0x270
c002abd2:	e8 6c ba fe ff       	call   c0016643 <malloc>
c002abd7:	89 c5                	mov    ebp,eax
c002abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c002abdc:	e8 e5 02 00 00       	call   c002aec6 <IDE::IDE()>
c002abe1:	5f                   	pop    edi
c002abe2:	58                   	pop    eax
c002abe3:	55                   	push   ebp
c002abe4:	53                   	push   ebx
c002abe5:	e8 68 09 ff ff       	call   c001b552 <Device::addChild(Device*)>
c002abea:	83 ec 1c             	sub    esp,0x1c
c002abed:	b9 09 00 00 00       	mov    ecx,0x9
c002abf2:	fc                   	cld    
c002abf3:	89 e7                	mov    edi,esp
c002abf5:	8d 74 24 60          	lea    esi,[esp+0x60]
c002abf9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002abfb:	55                   	push   ebp
c002abfc:	e8 97 08 ff ff       	call   c001b498 <Device::preOpenPCI(PCIDeviceInfo)>
c002ac01:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002ac04:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002ac08:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002ac10:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002ac18:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002ac20:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c002ac23:	83 c4 4c             	add    esp,0x4c
c002ac26:	5b                   	pop    ebx
c002ac27:	5e                   	pop    esi
c002ac28:	5f                   	pop    edi
c002ac29:	5d                   	pop    ebp
c002ac2a:	ff e0                	jmp    eax
c002ac2c:	83 ec 0c             	sub    esp,0xc
c002ac2f:	68 58 01 00 00       	push   0x158
c002ac34:	e8 0a ba fe ff       	call   c0016643 <malloc>
c002ac39:	89 c5                	mov    ebp,eax
c002ac3b:	58                   	pop    eax
c002ac3c:	5a                   	pop    edx
c002ac3d:	68 06 3a 03 c0       	push   0xc0033a06
c002ac42:	55                   	push   ebp
c002ac43:	e8 be 0b ff ff       	call   c001b806 <DriverlessDevice::DriverlessDevice(char const*)>
c002ac48:	59                   	pop    ecx
c002ac49:	5e                   	pop    esi
c002ac4a:	55                   	push   ebp
c002ac4b:	53                   	push   ebx
c002ac4c:	e8 01 09 ff ff       	call   c001b552 <Device::addChild(Device*)>
c002ac51:	83 c4 10             	add    esp,0x10
c002ac54:	b9 09 00 00 00       	mov    ecx,0x9
c002ac59:	fc                   	cld    
c002ac5a:	8d 7c 24 34          	lea    edi,[esp+0x34]
c002ac5e:	89 fe                	mov    esi,edi
c002ac60:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002ac62:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c002ac66:	83 c4 1c             	add    esp,0x1c
c002ac69:	5b                   	pop    ebx
c002ac6a:	5e                   	pop    esi
c002ac6b:	5f                   	pop    edi
c002ac6c:	5d                   	pop    ebp
c002ac6d:	e9 26 08 ff ff       	jmp    c001b498 <Device::preOpenPCI(PCIDeviceInfo)>
c002ac72:	83 c4 1c             	add    esp,0x1c
c002ac75:	5b                   	pop    ebx
c002ac76:	5e                   	pop    esi
c002ac77:	5f                   	pop    edi
c002ac78:	5d                   	pop    ebp
c002ac79:	c3                   	ret    

c002ac7a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002ac7a:	55                   	push   ebp
c002ac7b:	57                   	push   edi
c002ac7c:	56                   	push   esi
c002ac7d:	53                   	push   ebx
c002ac7e:	83 ec 68             	sub    esp,0x68
c002ac81:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c002ac85:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c002ac8c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002ac90:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002ac97:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002ac9c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002aca0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002aca7:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c002acac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002acb0:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c002acb5:	6a 0c                	push   0xc
c002acb7:	57                   	push   edi
c002acb8:	53                   	push   ebx
c002acb9:	56                   	push   esi
c002acba:	55                   	push   ebp
c002acbb:	e8 32 f8 ff ff       	call   c002a4f2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002acc0:	83 c4 20             	add    esp,0x20
c002acc3:	57                   	push   edi
c002acc4:	53                   	push   ebx
c002acc5:	56                   	push   esi
c002acc6:	55                   	push   ebp
c002acc7:	e8 1c f9 ff ff       	call   c002a5e8 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002accc:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c002acd1:	57                   	push   edi
c002acd2:	53                   	push   ebx
c002acd3:	56                   	push   esi
c002acd4:	55                   	push   ebp
c002acd5:	e8 a4 f9 ff ff       	call   c002a67e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002acda:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002acde:	83 c4 14             	add    esp,0x14
c002ace1:	6a 3c                	push   0x3c
c002ace3:	57                   	push   edi
c002ace4:	53                   	push   ebx
c002ace5:	56                   	push   esi
c002ace6:	55                   	push   ebp
c002ace7:	e8 06 f8 ff ff       	call   c002a4f2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002acec:	0f b6 c4             	movzx  eax,ah
c002acef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002acf3:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002acf7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002acfb:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002ad00:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c002ad06:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c002ad0c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002ad10:	83 c4 20             	add    esp,0x20
c002ad13:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c002ad18:	74 30                	je     c002ad4a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002ad1a:	31 c0                	xor    eax,eax
c002ad1c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c002ad20:	7e 28                	jle    c002ad4a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002ad22:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c002ad2a:	39 cb                	cmp    ebx,ecx
c002ad2c:	75 19                	jne    c002ad47 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002ad2e:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c002ad36:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c002ad3a:	75 0b                	jne    c002ad47 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002ad3c:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c002ad43:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002ad47:	40                   	inc    eax
c002ad48:	eb d2                	jmp    c002ad1c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c002ad4a:	31 d2                	xor    edx,edx
c002ad4c:	83 ec 0c             	sub    esp,0xc
c002ad4f:	57                   	push   edi
c002ad50:	53                   	push   ebx
c002ad51:	56                   	push   esi
c002ad52:	52                   	push   edx
c002ad53:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c002ad57:	55                   	push   ebp
c002ad58:	e8 6d f9 ff ff       	call   c002a6ca <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002ad5d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002ad61:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002ad65:	42                   	inc    edx
c002ad66:	83 c4 20             	add    esp,0x20
c002ad69:	83 fa 06             	cmp    edx,0x6
c002ad6c:	75 de                	jne    c002ad4c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c002ad6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002ad72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002ad76:	c1 e2 08             	shl    edx,0x8
c002ad79:	83 ec 0c             	sub    esp,0xc
c002ad7c:	0f b6 c4             	movzx  eax,ah
c002ad7f:	09 d0                	or     eax,edx
c002ad81:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c002ad86:	6a 02                	push   0x2
c002ad88:	57                   	push   edi
c002ad89:	53                   	push   ebx
c002ad8a:	56                   	push   esi
c002ad8b:	55                   	push   ebp
c002ad8c:	e8 61 f7 ff ff       	call   c002a4f2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002ad91:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c002ad96:	83 c4 20             	add    esp,0x20
c002ad99:	57                   	push   edi
c002ad9a:	53                   	push   ebx
c002ad9b:	56                   	push   esi
c002ad9c:	55                   	push   ebp
c002ad9d:	e8 90 f8 ff ff       	call   c002a632 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002ada2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002ada6:	57                   	push   edi
c002ada7:	53                   	push   ebx
c002ada8:	56                   	push   esi
c002ada9:	55                   	push   ebp
c002adaa:	e8 ed f7 ff ff       	call   c002a59c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002adaf:	b9 09 00 00 00       	mov    ecx,0x9
c002adb4:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c002adb9:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002adbd:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002adc1:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c002adc5:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c002adc9:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c002adcd:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002add1:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002add5:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c002add9:	83 ec 0c             	sub    esp,0xc
c002addc:	fc                   	cld    
c002addd:	89 e7                	mov    edi,esp
c002addf:	8d 74 24 58          	lea    esi,[esp+0x58]
c002ade3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002ade5:	55                   	push   ebp
c002ade6:	e8 15 fd ff ff       	call   c002ab00 <PCI::foundDevice(PCIDeviceInfo)>
c002adeb:	81 c4 8c 00 00 00    	add    esp,0x8c
c002adf1:	5b                   	pop    ebx
c002adf2:	5e                   	pop    esi
c002adf3:	5f                   	pop    edi
c002adf4:	5d                   	pop    ebp
c002adf5:	c3                   	ret    

c002adf6 <PCI::checkDevice(unsigned char, unsigned char)>:
c002adf6:	55                   	push   ebp
c002adf7:	57                   	push   edi
c002adf8:	56                   	push   esi
c002adf9:	53                   	push   ebx
c002adfa:	83 ec 0c             	sub    esp,0xc
c002adfd:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002ae01:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002ae06:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002ae0b:	6a 00                	push   0x0
c002ae0d:	56                   	push   esi
c002ae0e:	57                   	push   edi
c002ae0f:	55                   	push   ebp
c002ae10:	e8 87 f7 ff ff       	call   c002a59c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ae15:	6a 00                	push   0x0
c002ae17:	56                   	push   esi
c002ae18:	57                   	push   edi
c002ae19:	55                   	push   ebp
c002ae1a:	e8 5b fe ff ff       	call   c002ac7a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002ae1f:	83 c4 20             	add    esp,0x20
c002ae22:	6a 00                	push   0x0
c002ae24:	56                   	push   esi
c002ae25:	57                   	push   edi
c002ae26:	55                   	push   ebp
c002ae27:	e8 94 f7 ff ff       	call   c002a5c0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002ae2c:	83 c4 10             	add    esp,0x10
c002ae2f:	a8 80                	test   al,0x80
c002ae31:	74 2d                	je     c002ae60 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c002ae33:	bb 01 00 00 00       	mov    ebx,0x1
c002ae38:	53                   	push   ebx
c002ae39:	56                   	push   esi
c002ae3a:	57                   	push   edi
c002ae3b:	55                   	push   ebp
c002ae3c:	e8 5b f7 ff ff       	call   c002a59c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ae41:	83 c4 10             	add    esp,0x10
c002ae44:	0f b7 c0             	movzx  eax,ax
c002ae47:	3d ff ff 00 00       	cmp    eax,0xffff
c002ae4c:	74 0c                	je     c002ae5a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002ae4e:	53                   	push   ebx
c002ae4f:	56                   	push   esi
c002ae50:	57                   	push   edi
c002ae51:	55                   	push   ebp
c002ae52:	e8 23 fe ff ff       	call   c002ac7a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002ae57:	83 c4 10             	add    esp,0x10
c002ae5a:	43                   	inc    ebx
c002ae5b:	83 fb 08             	cmp    ebx,0x8
c002ae5e:	75 d8                	jne    c002ae38 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002ae60:	83 c4 0c             	add    esp,0xc
c002ae63:	5b                   	pop    ebx
c002ae64:	5e                   	pop    esi
c002ae65:	5f                   	pop    edi
c002ae66:	5d                   	pop    ebp
c002ae67:	c3                   	ret    

c002ae68 <PCI::detect()>:
c002ae68:	56                   	push   esi
c002ae69:	53                   	push   ebx
c002ae6a:	53                   	push   ebx
c002ae6b:	31 db                	xor    ebx,ebx
c002ae6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002ae71:	6a 00                	push   0x0
c002ae73:	6a 00                	push   0x0
c002ae75:	6a 00                	push   0x0
c002ae77:	56                   	push   esi
c002ae78:	e8 43 f7 ff ff       	call   c002a5c0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002ae7d:	83 c4 10             	add    esp,0x10
c002ae80:	a8 80                	test   al,0x80
c002ae82:	75 21                	jne    c002aea5 <PCI::detect()+0x3d>
c002ae84:	51                   	push   ecx
c002ae85:	51                   	push   ecx
c002ae86:	6a 00                	push   0x0
c002ae88:	56                   	push   esi
c002ae89:	e8 4e fc ff ff       	call   c002aadc <PCI::checkBus(unsigned char)>
c002ae8e:	83 c4 10             	add    esp,0x10
c002ae91:	eb 2a                	jmp    c002aebd <PCI::detect()+0x55>
c002ae93:	52                   	push   edx
c002ae94:	52                   	push   edx
c002ae95:	53                   	push   ebx
c002ae96:	43                   	inc    ebx
c002ae97:	56                   	push   esi
c002ae98:	e8 3f fc ff ff       	call   c002aadc <PCI::checkBus(unsigned char)>
c002ae9d:	83 c4 10             	add    esp,0x10
c002aea0:	83 fb 08             	cmp    ebx,0x8
c002aea3:	74 18                	je     c002aebd <PCI::detect()+0x55>
c002aea5:	53                   	push   ebx
c002aea6:	6a 00                	push   0x0
c002aea8:	6a 00                	push   0x0
c002aeaa:	56                   	push   esi
c002aeab:	e8 ec f6 ff ff       	call   c002a59c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002aeb0:	83 c4 10             	add    esp,0x10
c002aeb3:	0f b7 c0             	movzx  eax,ax
c002aeb6:	3d ff ff 00 00       	cmp    eax,0xffff
c002aebb:	74 d6                	je     c002ae93 <PCI::detect()+0x2b>
c002aebd:	58                   	pop    eax
c002aebe:	5b                   	pop    ebx
c002aebf:	5e                   	pop    esi
c002aec0:	c3                   	ret    
c002aec1:	90                   	nop

c002aec2 <IDE::close(int, int, void*)>:
c002aec2:	83 c8 ff             	or     eax,0xffffffff
c002aec5:	c3                   	ret    

c002aec6 <IDE::IDE()>:
c002aec6:	83 ec 0c             	sub    esp,0xc
c002aec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002aecd:	83 ec 08             	sub    esp,0x8
c002aed0:	68 4c 3a 03 c0       	push   0xc0033a4c
c002aed5:	50                   	push   eax
c002aed6:	e8 d1 09 ff ff       	call   c001b8ac <HardDiskController::HardDiskController(char const*)>
c002aedb:	83 c4 10             	add    esp,0x10
c002aede:	ba dc 3a 03 c0       	mov    edx,0xc0033adc
c002aee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002aee7:	89 10                	mov    DWORD PTR [eax],edx
c002aee9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002aeed:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002aef4:	90                   	nop
c002aef5:	83 c4 0c             	add    esp,0xc
c002aef8:	c3                   	ret    
c002aef9:	90                   	nop

c002aefa <IDE::prepareInterrupt(unsigned char)>:
c002aefa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002aeff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002af03:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002af0b:	c3                   	ret    

c002af0c <selectDrive(unsigned char, unsigned char)>:
c002af0c:	c3                   	ret    
c002af0d:	90                   	nop

c002af0e <IDE::getBase(unsigned char)>:
c002af0e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002af13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002af17:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002af1f:	c3                   	ret    

c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002af20:	55                   	push   ebp
c002af21:	57                   	push   edi
c002af22:	56                   	push   esi
c002af23:	53                   	push   ebx
c002af24:	83 ec 1c             	sub    esp,0x1c
c002af27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002af2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002af2f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002af32:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002af36:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002af3a:	80 f9 03             	cmp    cl,0x3
c002af3d:	77 4f                	ja     c002af8e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c002af3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002af43:	0f b6 fa             	movzx  edi,dl
c002af46:	0f b6 db             	movzx  ebx,bl
c002af49:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c002af4c:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c002af51:	80 ca 80             	or     dl,0x80
c002af54:	52                   	push   edx
c002af55:	6a 0c                	push   0xc
c002af57:	57                   	push   edi
c002af58:	56                   	push   esi
c002af59:	e8 c2 ff ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002af5e:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002af63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002af67:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002af6b:	ee                   	out    dx,al
c002af6c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002af71:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c002af75:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002af79:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002af7d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002af85:	83 c4 2c             	add    esp,0x2c
c002af88:	5b                   	pop    ebx
c002af89:	5e                   	pop    esi
c002af8a:	5f                   	pop    edi
c002af8b:	5d                   	pop    ebp
c002af8c:	eb 92                	jmp    c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002af8e:	0f b6 cb             	movzx  ecx,bl
c002af91:	83 f9 07             	cmp    ecx,0x7
c002af94:	77 12                	ja     c002afa8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c002af96:	0f b6 d2             	movzx  edx,dl
c002af99:	0f b6 db             	movzx  ebx,bl
c002af9c:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c002afa4:	01 da                	add    edx,ebx
c002afa6:	eb 2f                	jmp    c002afd7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002afa8:	83 f9 0d             	cmp    ecx,0xd
c002afab:	77 13                	ja     c002afc0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c002afad:	0f b6 d2             	movzx  edx,dl
c002afb0:	0f b6 db             	movzx  ebx,bl
c002afb3:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c002afba:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002afbe:	eb 17                	jmp    c002afd7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002afc0:	83 f9 15             	cmp    ecx,0x15
c002afc3:	77 13                	ja     c002afd8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c002afc5:	0f b6 d2             	movzx  edx,dl
c002afc8:	0f b6 db             	movzx  ebx,bl
c002afcb:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c002afd3:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002afd7:	ee                   	out    dx,al
c002afd8:	83 c4 1c             	add    esp,0x1c
c002afdb:	5b                   	pop    ebx
c002afdc:	5e                   	pop    esi
c002afdd:	5f                   	pop    edi
c002afde:	5d                   	pop    ebp
c002afdf:	c3                   	ret    

c002afe0 <IDE::read(unsigned char, unsigned char)>:
c002afe0:	55                   	push   ebp
c002afe1:	57                   	push   edi
c002afe2:	56                   	push   esi
c002afe3:	53                   	push   ebx
c002afe4:	83 ec 1c             	sub    esp,0x1c
c002afe7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002afeb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002afef:	8d 43 f8             	lea    eax,[ebx-0x8]
c002aff2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002aff6:	3c 03                	cmp    al,0x3
c002aff8:	77 40                	ja     c002b03a <IDE::read(unsigned char, unsigned char)+0x5a>
c002affa:	0f b6 f9             	movzx  edi,cl
c002affd:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c002b000:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b005:	0c 80                	or     al,0x80
c002b007:	50                   	push   eax
c002b008:	6a 0c                	push   0xc
c002b00a:	57                   	push   edi
c002b00b:	56                   	push   esi
c002b00c:	e8 0f ff ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b011:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002b016:	0f b6 d3             	movzx  edx,bl
c002b019:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002b01d:	ec                   	in     al,dx
c002b01e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002b022:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c002b027:	52                   	push   edx
c002b028:	6a 0c                	push   0xc
c002b02a:	57                   	push   edi
c002b02b:	56                   	push   esi
c002b02c:	e8 ef fe ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b031:	83 c4 20             	add    esp,0x20
c002b034:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002b038:	eb 4c                	jmp    c002b086 <IDE::read(unsigned char, unsigned char)+0xa6>
c002b03a:	0f b6 d3             	movzx  edx,bl
c002b03d:	83 fa 07             	cmp    edx,0x7
c002b040:	77 12                	ja     c002b054 <IDE::read(unsigned char, unsigned char)+0x74>
c002b042:	0f b6 c9             	movzx  ecx,cl
c002b045:	0f b6 d3             	movzx  edx,bl
c002b048:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c002b050:	01 c2                	add    edx,eax
c002b052:	eb 31                	jmp    c002b085 <IDE::read(unsigned char, unsigned char)+0xa5>
c002b054:	83 fa 0d             	cmp    edx,0xd
c002b057:	77 13                	ja     c002b06c <IDE::read(unsigned char, unsigned char)+0x8c>
c002b059:	0f b6 c9             	movzx  ecx,cl
c002b05c:	0f b6 d3             	movzx  edx,bl
c002b05f:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c002b066:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002b06a:	eb 19                	jmp    c002b085 <IDE::read(unsigned char, unsigned char)+0xa5>
c002b06c:	31 c0                	xor    eax,eax
c002b06e:	83 fa 15             	cmp    edx,0x15
c002b071:	77 13                	ja     c002b086 <IDE::read(unsigned char, unsigned char)+0xa6>
c002b073:	0f b6 c9             	movzx  ecx,cl
c002b076:	0f b6 d3             	movzx  edx,bl
c002b079:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c002b081:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002b085:	ec                   	in     al,dx
c002b086:	83 c4 1c             	add    esp,0x1c
c002b089:	5b                   	pop    ebx
c002b08a:	5e                   	pop    esi
c002b08b:	5f                   	pop    edi
c002b08c:	5d                   	pop    ebp
c002b08d:	c3                   	ret    

c002b08e <IDE::waitInterrupt(unsigned char)>:
c002b08e:	55                   	push   ebp
c002b08f:	57                   	push   edi
c002b090:	56                   	push   esi
c002b091:	53                   	push   ebx
c002b092:	31 db                	xor    ebx,ebx
c002b094:	83 ec 0c             	sub    esp,0xc
c002b097:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002b09b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002b0a0:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002b0a8:	89 e8                	mov    eax,ebp
c002b0aa:	84 c0                	test   al,al
c002b0ac:	75 30                	jne    c002b0de <IDE::waitInterrupt(unsigned char)+0x50>
c002b0ae:	50                   	push   eax
c002b0af:	6a 0c                	push   0xc
c002b0b1:	56                   	push   esi
c002b0b2:	57                   	push   edi
c002b0b3:	e8 28 ff ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002b0b8:	83 c4 10             	add    esp,0x10
c002b0bb:	a8 01                	test   al,0x1
c002b0bd:	75 27                	jne    c002b0e6 <IDE::waitInterrupt(unsigned char)+0x58>
c002b0bf:	f6 c3 04             	test   bl,0x4
c002b0c2:	75 12                	jne    c002b0d6 <IDE::waitInterrupt(unsigned char)+0x48>
c002b0c4:	83 fb 32             	cmp    ebx,0x32
c002b0c7:	7e 0d                	jle    c002b0d6 <IDE::waitInterrupt(unsigned char)+0x48>
c002b0c9:	83 ec 0c             	sub    esp,0xc
c002b0cc:	6a 64                	push   0x64
c002b0ce:	e8 05 a6 ff ff       	call   c00256d8 <milliTenthSleep(unsigned int)>
c002b0d3:	83 c4 10             	add    esp,0x10
c002b0d6:	83 fb 3c             	cmp    ebx,0x3c
c002b0d9:	74 0b                	je     c002b0e6 <IDE::waitInterrupt(unsigned char)+0x58>
c002b0db:	43                   	inc    ebx
c002b0dc:	eb c2                	jmp    c002b0a0 <IDE::waitInterrupt(unsigned char)+0x12>
c002b0de:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002b0e6:	83 c4 0c             	add    esp,0xc
c002b0e9:	89 e8                	mov    eax,ebp
c002b0eb:	5b                   	pop    ebx
c002b0ec:	5e                   	pop    esi
c002b0ed:	5f                   	pop    edi
c002b0ee:	5d                   	pop    ebp
c002b0ef:	c3                   	ret    

c002b0f0 <ideChannel0IRQHandler(regs*, void*)>:
c002b0f0:	83 ec 10             	sub    esp,0x10
c002b0f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002b0f7:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002b0fe:	6a 07                	push   0x7
c002b100:	6a 00                	push   0x0
c002b102:	50                   	push   eax
c002b103:	e8 d8 fe ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002b108:	83 c4 1c             	add    esp,0x1c
c002b10b:	c3                   	ret    

c002b10c <ideChannel1IRQHandler(regs*, void*)>:
c002b10c:	83 ec 10             	sub    esp,0x10
c002b10f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002b113:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002b11a:	6a 07                	push   0x7
c002b11c:	6a 01                	push   0x1
c002b11e:	50                   	push   eax
c002b11f:	e8 bc fe ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002b124:	83 c4 1c             	add    esp,0x1c
c002b127:	c3                   	ret    

c002b128 <IDE::enableIRQs(unsigned char, bool)>:
c002b128:	57                   	push   edi
c002b129:	b8 02 00 00 00       	mov    eax,0x2
c002b12e:	56                   	push   esi
c002b12f:	53                   	push   ebx
c002b130:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002b134:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002b138:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002b13d:	74 02                	je     c002b141 <IDE::enableIRQs(unsigned char, bool)+0x19>
c002b13f:	31 c0                	xor    eax,eax
c002b141:	0f b6 db             	movzx  ebx,bl
c002b144:	bf 04 00 00 00       	mov    edi,0x4
c002b149:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c002b150:	50                   	push   eax
c002b151:	6a 0c                	push   0xc
c002b153:	53                   	push   ebx
c002b154:	56                   	push   esi
c002b155:	e8 c6 fd ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b15a:	83 c4 10             	add    esp,0x10
c002b15d:	50                   	push   eax
c002b15e:	6a 0c                	push   0xc
c002b160:	53                   	push   ebx
c002b161:	56                   	push   esi
c002b162:	e8 79 fe ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002b167:	83 c4 10             	add    esp,0x10
c002b16a:	4f                   	dec    edi
c002b16b:	75 f0                	jne    c002b15d <IDE::enableIRQs(unsigned char, bool)+0x35>
c002b16d:	5b                   	pop    ebx
c002b16e:	5e                   	pop    esi
c002b16f:	5f                   	pop    edi
c002b170:	c3                   	ret    
c002b171:	90                   	nop

c002b172 <IDE::open(int, int, void*)>:
c002b172:	55                   	push   ebp
c002b173:	57                   	push   edi
c002b174:	56                   	push   esi
c002b175:	53                   	push   ebx
c002b176:	83 ec 1c             	sub    esp,0x1c
c002b179:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002b17d:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002b186:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002b18f:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002b196:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002b19d:	0f 85 de 02 00 00    	jne    c002b481 <IDE::open(int, int, void*)+0x30f>
c002b1a3:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002b1a9:	88 04 24             	mov    BYTE PTR [esp],al
c002b1ac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002b1af:	83 e0 7f             	and    eax,0x7f
c002b1b2:	83 f8 05             	cmp    eax,0x5
c002b1b5:	74 05                	je     c002b1bc <IDE::open(int, int, void*)+0x4a>
c002b1b7:	83 f8 0f             	cmp    eax,0xf
c002b1ba:	75 32                	jne    c002b1ee <IDE::open(int, int, void*)+0x7c>
c002b1bc:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002b1c2:	83 e0 fc             	and    eax,0xfffffffc
c002b1c5:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b1cc:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002b1d2:	83 e0 fc             	and    eax,0xfffffffc
c002b1d5:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b1dc:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002b1e2:	83 e0 fc             	and    eax,0xfffffffc
c002b1e5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b1ec:	eb 14                	jmp    c002b202 <IDE::open(int, int, void*)+0x90>
c002b1ee:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002b1f8:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002b202:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002b209:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002b210:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002b214:	89 c6                	mov    esi,eax
c002b216:	bf f8 0c 00 00       	mov    edi,0xcf8
c002b21b:	c1 e6 10             	shl    esi,0x10
c002b21e:	89 e8                	mov    eax,ebp
c002b220:	89 fa                	mov    edx,edi
c002b222:	c1 e0 0b             	shl    eax,0xb
c002b225:	09 f0                	or     eax,esi
c002b227:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002b22e:	c1 e6 08             	shl    esi,0x8
c002b231:	09 c6                	or     esi,eax
c002b233:	89 f0                	mov    eax,esi
c002b235:	0d 08 00 00 80       	or     eax,0x80000008
c002b23a:	ef                   	out    dx,eax
c002b23b:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002b240:	89 ca                	mov    edx,ecx
c002b242:	ed                   	in     eax,dx
c002b243:	c1 e8 10             	shr    eax,0x10
c002b246:	3d ff ff 00 00       	cmp    eax,0xffff
c002b24b:	0f 84 f9 00 00 00    	je     c002b34a <IDE::open(int, int, void*)+0x1d8>
c002b251:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002b257:	89 fa                	mov    edx,edi
c002b259:	89 f0                	mov    eax,esi
c002b25b:	ef                   	out    dx,eax
c002b25c:	b0 fe                	mov    al,0xfe
c002b25e:	89 ca                	mov    edx,ecx
c002b260:	ee                   	out    dx,al
c002b261:	89 f0                	mov    eax,esi
c002b263:	89 fa                	mov    edx,edi
c002b265:	ef                   	out    dx,eax
c002b266:	89 ca                	mov    edx,ecx
c002b268:	ed                   	in     eax,dx
c002b269:	3c fe                	cmp    al,0xfe
c002b26b:	0f 85 a9 00 00 00    	jne    c002b31a <IDE::open(int, int, void*)+0x1a8>
c002b271:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c002b277:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c002b27e:	74 33                	je     c002b2b3 <IDE::open(int, int, void*)+0x141>
c002b280:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002b286:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002b28a:	40                   	inc    eax
c002b28b:	83 ec 0c             	sub    esp,0xc
c002b28e:	0f b6 c0             	movzx  eax,al
c002b291:	50                   	push   eax
c002b292:	55                   	push   ebp
c002b293:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002b297:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c002b29d:	51                   	push   ecx
c002b29e:	e8 fd 34 ff ff       	call   c001e7a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002b2a3:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002b2a8:	83 c4 1c             	add    esp,0x1c
c002b2ab:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b2b1:	eb 0a                	jmp    c002b2bd <IDE::open(int, int, void*)+0x14b>
c002b2b3:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002b2bd:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002b2c4:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002b2cb:	c1 e1 10             	shl    ecx,0x10
c002b2ce:	c1 e0 08             	shl    eax,0x8
c002b2d1:	bf f8 0c 00 00       	mov    edi,0xcf8
c002b2d6:	09 c1                	or     ecx,eax
c002b2d8:	89 fa                	mov    edx,edi
c002b2da:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002b2e1:	c1 e0 0b             	shl    eax,0xb
c002b2e4:	09 c1                	or     ecx,eax
c002b2e6:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002b2ec:	89 c8                	mov    eax,ecx
c002b2ee:	ef                   	out    dx,eax
c002b2ef:	be fc 0c 00 00       	mov    esi,0xcfc
c002b2f4:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002b2fa:	89 f2                	mov    edx,esi
c002b2fc:	ee                   	out    dx,al
c002b2fd:	89 c8                	mov    eax,ecx
c002b2ff:	89 fa                	mov    edx,edi
c002b301:	ef                   	out    dx,eax
c002b302:	89 f2                	mov    edx,esi
c002b304:	ed                   	in     eax,dx
c002b305:	0f b6 c0             	movzx  eax,al
c002b308:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002b30e:	74 4a                	je     c002b35a <IDE::open(int, int, void*)+0x1e8>
c002b310:	83 ec 0c             	sub    esp,0xc
c002b313:	68 64 3a 03 c0       	push   0xc0033a64
c002b318:	eb 38                	jmp    c002b352 <IDE::open(int, int, void*)+0x1e0>
c002b31a:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002b323:	75 1b                	jne    c002b340 <IDE::open(int, int, void*)+0x1ce>
c002b325:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c002b329:	3d 80 00 00 00       	cmp    eax,0x80
c002b32e:	74 07                	je     c002b337 <IDE::open(int, int, void*)+0x1c5>
c002b330:	3d 8a 00 00 00       	cmp    eax,0x8a
c002b335:	75 09                	jne    c002b340 <IDE::open(int, int, void*)+0x1ce>
c002b337:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b33e:	eb 1a                	jmp    c002b35a <IDE::open(int, int, void*)+0x1e8>
c002b340:	83 ec 0c             	sub    esp,0xc
c002b343:	68 6c 3a 03 c0       	push   0xc0033a6c
c002b348:	eb 08                	jmp    c002b352 <IDE::open(int, int, void*)+0x1e0>
c002b34a:	83 ec 0c             	sub    esp,0xc
c002b34d:	68 9d 3a 03 c0       	push   0xc0033a9d
c002b352:	e8 93 51 ff ff       	call   c00204ea <KePanic(char const*)>
c002b357:	83 c4 10             	add    esp,0x10
c002b35a:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c002b361:	74 1a                	je     c002b37d <IDE::open(int, int, void*)+0x20b>
c002b363:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002b369:	83 e0 fc             	and    eax,0xfffffffc
c002b36c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002b373:	83 c0 08             	add    eax,0x8
c002b376:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002b37d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002b383:	89 c2                	mov    edx,eax
c002b385:	83 e2 0f             	and    edx,0xf
c002b388:	83 fa 08             	cmp    edx,0x8
c002b38b:	75 0a                	jne    c002b397 <IDE::open(int, int, void*)+0x225>
c002b38d:	83 e8 02             	sub    eax,0x2
c002b390:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b397:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002b39d:	89 c2                	mov    edx,eax
c002b39f:	83 e2 0f             	and    edx,0xf
c002b3a2:	83 fa 08             	cmp    edx,0x8
c002b3a5:	75 0a                	jne    c002b3b1 <IDE::open(int, int, void*)+0x23f>
c002b3a7:	83 e8 02             	sub    eax,0x2
c002b3aa:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b3b1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002b3b8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002b3bf:	89 d0                	mov    eax,edx
c002b3c1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b3c4:	8d 7a 01             	lea    edi,[edx+0x1]
c002b3c7:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b3cb:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002b3cf:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b3d3:	83 e1 3f             	and    ecx,0x3f
c002b3d6:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b3da:	89 f9                	mov    ecx,edi
c002b3dc:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002b3e3:	0f b6 c9             	movzx  ecx,cl
c002b3e6:	8d 78 02             	lea    edi,[eax+0x2]
c002b3e9:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b3ec:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b3f0:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002b3f4:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b3f8:	83 e2 3f             	and    edx,0x3f
c002b3fb:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b3ff:	89 f9                	mov    ecx,edi
c002b401:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002b407:	0f b6 d1             	movzx  edx,cl
c002b40a:	8d 78 03             	lea    edi,[eax+0x3]
c002b40d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b410:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b414:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002b418:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b41c:	83 e1 3f             	and    ecx,0x3f
c002b41f:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b423:	89 f9                	mov    ecx,edi
c002b425:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002b42b:	0f b6 c9             	movzx  ecx,cl
c002b42e:	8d 78 04             	lea    edi,[eax+0x4]
c002b431:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b434:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b438:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002b43c:	89 fa                	mov    edx,edi
c002b43e:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002b444:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b448:	83 e2 3f             	and    edx,0x3f
c002b44b:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b44f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002b456:	66 85 f6             	test   si,si
c002b459:	74 65                	je     c002b4c0 <IDE::open(int, int, void*)+0x34e>
c002b45b:	89 f9                	mov    ecx,edi
c002b45d:	83 c0 05             	add    eax,0x5
c002b460:	0f b6 d1             	movzx  edx,cl
c002b463:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b466:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b46a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002b46e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002b474:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c002b478:	83 e0 3f             	and    eax,0x3f
c002b47b:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c002b47f:	eb 3f                	jmp    c002b4c0 <IDE::open(int, int, void*)+0x34e>
c002b481:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002b487:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b48e:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b495:	05 06 02 00 00       	add    eax,0x206
c002b49a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b4a1:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002b4a8:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b4af:	05 06 02 00 00       	add    eax,0x206
c002b4b4:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b4bb:	e9 bd fe ff ff       	jmp    c002b37d <IDE::open(int, int, void*)+0x20b>
c002b4c0:	50                   	push   eax
c002b4c1:	50                   	push   eax
c002b4c2:	6a 00                	push   0x0
c002b4c4:	53                   	push   ebx
c002b4c5:	e8 30 fa ff ff       	call   c002aefa <IDE::prepareInterrupt(unsigned char)>
c002b4ca:	5a                   	pop    edx
c002b4cb:	59                   	pop    ecx
c002b4cc:	6a 01                	push   0x1
c002b4ce:	53                   	push   ebx
c002b4cf:	e8 26 fa ff ff       	call   c002aefa <IDE::prepareInterrupt(unsigned char)>
c002b4d4:	83 c4 0c             	add    esp,0xc
c002b4d7:	6a 00                	push   0x0
c002b4d9:	6a 00                	push   0x0
c002b4db:	53                   	push   ebx
c002b4dc:	e8 47 fc ff ff       	call   c002b128 <IDE::enableIRQs(unsigned char, bool)>
c002b4e1:	83 c4 0c             	add    esp,0xc
c002b4e4:	6a 00                	push   0x0
c002b4e6:	6a 01                	push   0x1
c002b4e8:	53                   	push   ebx
c002b4e9:	e8 3a fc ff ff       	call   c002b128 <IDE::enableIRQs(unsigned char, bool)>
c002b4ee:	83 c4 10             	add    esp,0x10
c002b4f1:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002b4f8:	74 34                	je     c002b52e <IDE::open(int, int, void*)+0x3bc>
c002b4fa:	83 ec 0c             	sub    esp,0xc
c002b4fd:	53                   	push   ebx
c002b4fe:	6a 01                	push   0x1
c002b500:	68 f0 b0 02 c0       	push   0xc002b0f0
c002b505:	6a 0e                	push   0xe
c002b507:	53                   	push   ebx
c002b508:	e8 f1 ff fe ff       	call   c001b4fe <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b50d:	83 c4 14             	add    esp,0x14
c002b510:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b516:	53                   	push   ebx
c002b517:	6a 01                	push   0x1
c002b519:	68 0c b1 02 c0       	push   0xc002b10c
c002b51e:	6a 0f                	push   0xf
c002b520:	53                   	push   ebx
c002b521:	e8 d8 ff fe ff       	call   c001b4fe <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b526:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002b52c:	eb 38                	jmp    c002b566 <IDE::open(int, int, void*)+0x3f4>
c002b52e:	83 ec 0c             	sub    esp,0xc
c002b531:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002b53b:	53                   	push   ebx
c002b53c:	6a 00                	push   0x0
c002b53e:	68 f0 b0 02 c0       	push   0xc002b0f0
c002b543:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002b549:	53                   	push   ebx
c002b54a:	e8 af ff fe ff       	call   c001b4fe <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b54f:	83 c4 14             	add    esp,0x14
c002b552:	53                   	push   ebx
c002b553:	6a 00                	push   0x0
c002b555:	68 0c b1 02 c0       	push   0xc002b10c
c002b55a:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002b560:	53                   	push   ebx
c002b561:	e8 98 ff fe ff       	call   c001b4fe <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b566:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b568:	83 c4 20             	add    esp,0x20
c002b56b:	83 ec 0c             	sub    esp,0xc
c002b56e:	53                   	push   ebx
c002b56f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002b572:	83 c4 0c             	add    esp,0xc
c002b575:	6a 07                	push   0x7
c002b577:	6a 00                	push   0x0
c002b579:	53                   	push   ebx
c002b57a:	e8 61 fa ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002b57f:	83 c4 0c             	add    esp,0xc
c002b582:	6a 07                	push   0x7
c002b584:	6a 01                	push   0x1
c002b586:	53                   	push   ebx
c002b587:	e8 54 fa ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002b58c:	83 c4 0c             	add    esp,0xc
c002b58f:	6a 01                	push   0x1
c002b591:	6a 00                	push   0x0
c002b593:	53                   	push   ebx
c002b594:	e8 8f fb ff ff       	call   c002b128 <IDE::enableIRQs(unsigned char, bool)>
c002b599:	83 c4 0c             	add    esp,0xc
c002b59c:	6a 01                	push   0x1
c002b59e:	6a 01                	push   0x1
c002b5a0:	53                   	push   ebx
c002b5a1:	e8 82 fb ff ff       	call   c002b128 <IDE::enableIRQs(unsigned char, bool)>
c002b5a6:	83 c4 2c             	add    esp,0x2c
c002b5a9:	31 c0                	xor    eax,eax
c002b5ab:	5b                   	pop    ebx
c002b5ac:	5e                   	pop    esi
c002b5ad:	5f                   	pop    edi
c002b5ae:	5d                   	pop    ebp
c002b5af:	c3                   	ret    

c002b5b0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002b5b0:	55                   	push   ebp
c002b5b1:	57                   	push   edi
c002b5b2:	56                   	push   esi
c002b5b3:	53                   	push   ebx
c002b5b4:	83 ec 1c             	sub    esp,0x1c
c002b5b7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002b5bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b5bf:	8d 42 f8             	lea    eax,[edx-0x8]
c002b5c2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b5c6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002b5ca:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002b5ce:	3c 03                	cmp    al,0x3
c002b5d0:	77 5a                	ja     c002b62c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c002b5d2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002b5d6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002b5da:	0f b6 db             	movzx  ebx,bl
c002b5dd:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002b5e0:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b5e5:	0c 80                	or     al,0x80
c002b5e7:	50                   	push   eax
c002b5e8:	6a 0c                	push   0xc
c002b5ea:	53                   	push   ebx
c002b5eb:	56                   	push   esi
c002b5ec:	e8 2f f9 ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b5f1:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002b5f6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002b5fa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002b5fe:	0f b6 d2             	movzx  edx,dl
c002b601:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002b605:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b607:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b60c:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002b610:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002b614:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002b618:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002b620:	83 c4 2c             	add    esp,0x2c
c002b623:	5b                   	pop    ebx
c002b624:	5e                   	pop    esi
c002b625:	5f                   	pop    edi
c002b626:	5d                   	pop    ebp
c002b627:	e9 f4 f8 ff ff       	jmp    c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b62c:	0f b6 c2             	movzx  eax,dl
c002b62f:	83 f8 07             	cmp    eax,0x7
c002b632:	77 12                	ja     c002b646 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c002b634:	0f b6 c2             	movzx  eax,dl
c002b637:	0f b6 db             	movzx  ebx,bl
c002b63a:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c002b642:	01 c2                	add    edx,eax
c002b644:	eb 2f                	jmp    c002b675 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b646:	83 f8 0d             	cmp    eax,0xd
c002b649:	77 13                	ja     c002b65e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c002b64b:	0f b6 db             	movzx  ebx,bl
c002b64e:	0f b6 d2             	movzx  edx,dl
c002b651:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c002b658:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002b65c:	eb 17                	jmp    c002b675 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b65e:	83 f8 15             	cmp    eax,0x15
c002b661:	77 14                	ja     c002b677 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c002b663:	0f b6 db             	movzx  ebx,bl
c002b666:	0f b6 d2             	movzx  edx,dl
c002b669:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c002b671:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002b675:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b677:	83 c4 1c             	add    esp,0x1c
c002b67a:	5b                   	pop    ebx
c002b67b:	5e                   	pop    esi
c002b67c:	5f                   	pop    edi
c002b67d:	5d                   	pop    ebp
c002b67e:	c3                   	ret    
c002b67f:	90                   	nop

c002b680 <IDE::detect()>:
c002b680:	55                   	push   ebp
c002b681:	57                   	push   edi
c002b682:	56                   	push   esi
c002b683:	53                   	push   ebx
c002b684:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002b68a:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002b691:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002b698:	0f 85 a4 02 00 00    	jne    c002b942 <IDE::detect()+0x2c2>
c002b69e:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002b6a5:	31 f6                	xor    esi,esi
c002b6a7:	31 ed                	xor    ebp,ebp
c002b6a9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002b6b1:	89 e8                	mov    eax,ebp
c002b6b3:	c1 e0 06             	shl    eax,0x6
c002b6b6:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002b6be:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002b6c2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002b6c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b6ca:	c1 e0 04             	shl    eax,0x4
c002b6cd:	83 c8 a0             	or     eax,0xffffffa0
c002b6d0:	0f b6 c0             	movzx  eax,al
c002b6d3:	50                   	push   eax
c002b6d4:	6a 06                	push   0x6
c002b6d6:	56                   	push   esi
c002b6d7:	53                   	push   ebx
c002b6d8:	e8 43 f8 ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b6dd:	83 c4 0c             	add    esp,0xc
c002b6e0:	6a 0c                	push   0xc
c002b6e2:	56                   	push   esi
c002b6e3:	53                   	push   ebx
c002b6e4:	e8 f7 f8 ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002b6e9:	83 c4 0c             	add    esp,0xc
c002b6ec:	6a 0c                	push   0xc
c002b6ee:	56                   	push   esi
c002b6ef:	53                   	push   ebx
c002b6f0:	e8 eb f8 ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002b6f5:	83 c4 0c             	add    esp,0xc
c002b6f8:	6a 0c                	push   0xc
c002b6fa:	56                   	push   esi
c002b6fb:	53                   	push   ebx
c002b6fc:	e8 df f8 ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002b701:	83 c4 0c             	add    esp,0xc
c002b704:	6a 0c                	push   0xc
c002b706:	56                   	push   esi
c002b707:	53                   	push   ebx
c002b708:	e8 d3 f8 ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002b70d:	68 ec 00 00 00       	push   0xec
c002b712:	6a 07                	push   0x7
c002b714:	56                   	push   esi
c002b715:	53                   	push   ebx
c002b716:	e8 05 f8 ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b71b:	83 c4 1c             	add    esp,0x1c
c002b71e:	6a 0c                	push   0xc
c002b720:	56                   	push   esi
c002b721:	53                   	push   ebx
c002b722:	e8 b9 f8 ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002b727:	83 c4 0c             	add    esp,0xc
c002b72a:	6a 0c                	push   0xc
c002b72c:	56                   	push   esi
c002b72d:	53                   	push   ebx
c002b72e:	e8 ad f8 ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002b733:	83 c4 0c             	add    esp,0xc
c002b736:	6a 0c                	push   0xc
c002b738:	56                   	push   esi
c002b739:	53                   	push   ebx
c002b73a:	e8 a1 f8 ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002b73f:	83 c4 0c             	add    esp,0xc
c002b742:	6a 0c                	push   0xc
c002b744:	56                   	push   esi
c002b745:	53                   	push   ebx
c002b746:	e8 95 f8 ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002b74b:	83 c4 0c             	add    esp,0xc
c002b74e:	6a 0c                	push   0xc
c002b750:	56                   	push   esi
c002b751:	53                   	push   ebx
c002b752:	e8 89 f8 ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002b757:	83 c4 10             	add    esp,0x10
c002b75a:	84 c0                	test   al,al
c002b75c:	0f 84 60 01 00 00    	je     c002b8c2 <IDE::detect()+0x242>
c002b762:	31 ff                	xor    edi,edi
c002b764:	50                   	push   eax
c002b765:	6a 0c                	push   0xc
c002b767:	56                   	push   esi
c002b768:	53                   	push   ebx
c002b769:	e8 72 f8 ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002b76e:	83 c4 10             	add    esp,0x10
c002b771:	a8 01                	test   al,0x1
c002b773:	0f 85 6a 01 00 00    	jne    c002b8e3 <IDE::detect()+0x263>
c002b779:	a8 80                	test   al,0x80
c002b77b:	75 04                	jne    c002b781 <IDE::detect()+0x101>
c002b77d:	a8 08                	test   al,0x8
c002b77f:	75 23                	jne    c002b7a4 <IDE::detect()+0x124>
c002b781:	47                   	inc    edi
c002b782:	81 ff 17 01 00 00    	cmp    edi,0x117
c002b788:	7e da                	jle    c002b764 <IDE::detect()+0xe4>
c002b78a:	83 ec 0c             	sub    esp,0xc
c002b78d:	6a 32                	push   0x32
c002b78f:	e8 44 9f ff ff       	call   c00256d8 <milliTenthSleep(unsigned int)>
c002b794:	83 c4 10             	add    esp,0x10
c002b797:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002b79d:	75 c5                	jne    c002b764 <IDE::detect()+0xe4>
c002b79f:	e9 3f 01 00 00       	jmp    c002b8e3 <IDE::detect()+0x263>
c002b7a4:	31 c9                	xor    ecx,ecx
c002b7a6:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002b7aa:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002b7ae:	83 ec 0c             	sub    esp,0xc
c002b7b1:	68 80 00 00 00       	push   0x80
c002b7b6:	57                   	push   edi
c002b7b7:	6a 00                	push   0x0
c002b7b9:	56                   	push   esi
c002b7ba:	53                   	push   ebx
c002b7bb:	e8 f0 fd ff ff       	call   c002b5b0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002b7c0:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002b7c5:	89 e8                	mov    eax,ebp
c002b7c7:	89 d1                	mov    ecx,edx
c002b7c9:	c1 e0 06             	shl    eax,0x6
c002b7cc:	01 d8                	add    eax,ebx
c002b7ce:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002b7d5:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002b7dc:	89 f2                	mov    edx,esi
c002b7de:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002b7e4:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002b7e8:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002b7ee:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002b7f2:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002b7f9:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002b801:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002b808:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002b810:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002b816:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002b81d:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002b823:	8d 54 24 58          	lea    edx,[esp+0x58]
c002b827:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002b82b:	83 c4 20             	add    esp,0x20
c002b82e:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002b831:	83 c0 02             	add    eax,0x2
c002b834:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002b83a:	83 c7 02             	add    edi,0x2
c002b83d:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002b840:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002b846:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002b84a:	75 e2                	jne    c002b82e <IDE::detect()+0x1ae>
c002b84c:	89 e8                	mov    eax,ebp
c002b84e:	c1 e0 06             	shl    eax,0x6
c002b851:	01 d8                	add    eax,ebx
c002b853:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c002b85a:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002b861:	c1 ea 09             	shr    edx,0x9
c002b864:	83 e2 01             	and    edx,0x1
c002b867:	80 e1 01             	and    cl,0x1
c002b86a:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002b870:	75 22                	jne    c002b894 <IDE::detect()+0x214>
c002b872:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002b879:	74 46                	je     c002b8c1 <IDE::detect()+0x241>
c002b87b:	83 ec 0c             	sub    esp,0xc
c002b87e:	68 7c 01 00 00       	push   0x17c
c002b883:	e8 bb ad fe ff       	call   c0016643 <malloc>
c002b888:	89 c7                	mov    edi,eax
c002b88a:	89 04 24             	mov    DWORD PTR [esp],eax
c002b88d:	e8 2e 05 00 00       	call   c002bdc0 <ATA::ATA()>
c002b892:	eb 17                	jmp    c002b8ab <IDE::detect()+0x22b>
c002b894:	83 ec 0c             	sub    esp,0xc
c002b897:	68 84 01 00 00       	push   0x184
c002b89c:	e8 a2 ad fe ff       	call   c0016643 <malloc>
c002b8a1:	89 c7                	mov    edi,eax
c002b8a3:	89 04 24             	mov    DWORD PTR [esp],eax
c002b8a6:	e8 59 0e 00 00       	call   c002c704 <ATAPI::ATAPI()>
c002b8ab:	5a                   	pop    edx
c002b8ac:	59                   	pop    ecx
c002b8ad:	57                   	push   edi
c002b8ae:	53                   	push   ebx
c002b8af:	e8 9e fc fe ff       	call   c001b552 <Device::addChild(Device*)>
c002b8b4:	8b 07                	mov    eax,DWORD PTR [edi]
c002b8b6:	53                   	push   ebx
c002b8b7:	55                   	push   ebp
c002b8b8:	6a 00                	push   0x0
c002b8ba:	57                   	push   edi
c002b8bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002b8be:	83 c4 20             	add    esp,0x20
c002b8c1:	45                   	inc    ebp
c002b8c2:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002b8c7:	74 0d                	je     c002b8d6 <IDE::detect()+0x256>
c002b8c9:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c002b8d1:	e9 db fd ff ff       	jmp    c002b6b1 <IDE::detect()+0x31>
c002b8d6:	4e                   	dec    esi
c002b8d7:	74 69                	je     c002b942 <IDE::detect()+0x2c2>
c002b8d9:	be 01 00 00 00       	mov    esi,0x1
c002b8de:	e9 c6 fd ff ff       	jmp    c002b6a9 <IDE::detect()+0x29>
c002b8e3:	50                   	push   eax
c002b8e4:	6a 04                	push   0x4
c002b8e6:	56                   	push   esi
c002b8e7:	53                   	push   ebx
c002b8e8:	e8 f3 f6 ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002b8ed:	83 c4 0c             	add    esp,0xc
c002b8f0:	89 c7                	mov    edi,eax
c002b8f2:	6a 05                	push   0x5
c002b8f4:	56                   	push   esi
c002b8f5:	53                   	push   ebx
c002b8f6:	e8 e5 f6 ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002b8fb:	83 c4 10             	add    esp,0x10
c002b8fe:	89 f9                	mov    ecx,edi
c002b900:	0f b6 c0             	movzx  eax,al
c002b903:	0f b6 f9             	movzx  edi,cl
c002b906:	83 ff 14             	cmp    edi,0x14
c002b909:	75 07                	jne    c002b912 <IDE::detect()+0x292>
c002b90b:	3d eb 00 00 00       	cmp    eax,0xeb
c002b910:	eb 0a                	jmp    c002b91c <IDE::detect()+0x29c>
c002b912:	3d 96 00 00 00       	cmp    eax,0x96
c002b917:	75 a9                	jne    c002b8c2 <IDE::detect()+0x242>
c002b919:	83 ff 69             	cmp    edi,0x69
c002b91c:	75 a4                	jne    c002b8c2 <IDE::detect()+0x242>
c002b91e:	68 a1 00 00 00       	push   0xa1
c002b923:	6a 07                	push   0x7
c002b925:	56                   	push   esi
c002b926:	53                   	push   ebx
c002b927:	e8 f4 f5 ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b92c:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c002b933:	e8 a0 9d ff ff       	call   c00256d8 <milliTenthSleep(unsigned int)>
c002b938:	83 c4 10             	add    esp,0x10
c002b93b:	b1 01                	mov    cl,0x1
c002b93d:	e9 64 fe ff ff       	jmp    c002b7a6 <IDE::detect()+0x126>
c002b942:	81 c4 1c 02 00 00    	add    esp,0x21c
c002b948:	5b                   	pop    ebx
c002b949:	5e                   	pop    esi
c002b94a:	5f                   	pop    edi
c002b94b:	5d                   	pop    ebp
c002b94c:	c3                   	ret    
c002b94d:	90                   	nop

c002b94e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002b94e:	55                   	push   ebp
c002b94f:	57                   	push   edi
c002b950:	56                   	push   esi
c002b951:	53                   	push   ebx
c002b952:	83 ec 1c             	sub    esp,0x1c
c002b955:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002b959:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002b95d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002b961:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002b965:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002b969:	88 c3                	mov    bl,al
c002b96b:	25 ff 00 00 00       	and    eax,0xff
c002b970:	0f 84 88 00 00 00    	je     c002b9fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b976:	83 ec 0c             	sub    esp,0xc
c002b979:	89 c7                	mov    edi,eax
c002b97b:	68 c7 3a 03 c0       	push   0xc0033ac7
c002b980:	e8 4c db fe ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c002b985:	83 c4 10             	add    esp,0x10
c002b988:	83 ff 01             	cmp    edi,0x1
c002b98b:	74 6b                	je     c002b9f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c002b98d:	83 ff 02             	cmp    edi,0x2
c002b990:	75 58                	jne    c002b9ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c002b992:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c002b997:	01 ff                	add    edi,edi
c002b999:	50                   	push   eax
c002b99a:	09 fe                	or     esi,edi
c002b99c:	6a 01                	push   0x1
c002b99e:	89 f0                	mov    eax,esi
c002b9a0:	0f b6 f0             	movzx  esi,al
c002b9a3:	c1 e6 06             	shl    esi,0x6
c002b9a6:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c002b9ae:	50                   	push   eax
c002b9af:	55                   	push   ebp
c002b9b0:	e8 2b f6 ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002b9b5:	83 c4 10             	add    esp,0x10
c002b9b8:	a8 01                	test   al,0x1
c002b9ba:	74 02                	je     c002b9be <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c002b9bc:	b3 07                	mov    bl,0x7
c002b9be:	a8 02                	test   al,0x2
c002b9c0:	74 02                	je     c002b9c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c002b9c2:	b3 03                	mov    bl,0x3
c002b9c4:	a8 04                	test   al,0x4
c002b9c6:	74 02                	je     c002b9ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c002b9c8:	b3 14                	mov    bl,0x14
c002b9ca:	a8 08                	test   al,0x8
c002b9cc:	74 02                	je     c002b9d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c002b9ce:	b3 03                	mov    bl,0x3
c002b9d0:	a8 10                	test   al,0x10
c002b9d2:	74 02                	je     c002b9d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c002b9d4:	b3 15                	mov    bl,0x15
c002b9d6:	a8 20                	test   al,0x20
c002b9d8:	74 02                	je     c002b9dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c002b9da:	b3 03                	mov    bl,0x3
c002b9dc:	a8 40                	test   al,0x40
c002b9de:	74 02                	je     c002b9e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002b9e0:	b3 16                	mov    bl,0x16
c002b9e2:	a8 80                	test   al,0x80
c002b9e4:	74 18                	je     c002b9fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b9e6:	b3 0d                	mov    bl,0xd
c002b9e8:	eb 14                	jmp    c002b9fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b9ea:	83 ff 03             	cmp    edi,0x3
c002b9ed:	74 0d                	je     c002b9fc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c002b9ef:	83 ff 04             	cmp    edi,0x4
c002b9f2:	75 0a                	jne    c002b9fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b9f4:	b3 08                	mov    bl,0x8
c002b9f6:	eb 06                	jmp    c002b9fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b9f8:	b3 13                	mov    bl,0x13
c002b9fa:	eb 02                	jmp    c002b9fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b9fc:	b3 17                	mov    bl,0x17
c002b9fe:	83 c4 1c             	add    esp,0x1c
c002ba01:	88 d8                	mov    al,bl
c002ba03:	5b                   	pop    ebx
c002ba04:	5e                   	pop    esi
c002ba05:	5f                   	pop    edi
c002ba06:	5d                   	pop    ebp
c002ba07:	c3                   	ret    

c002ba08 <IDE::polling(unsigned char, unsigned int)>:
c002ba08:	57                   	push   edi
c002ba09:	56                   	push   esi
c002ba0a:	53                   	push   ebx
c002ba0b:	bb 04 00 00 00       	mov    ebx,0x4
c002ba10:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002ba14:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002ba19:	52                   	push   edx
c002ba1a:	6a 0c                	push   0xc
c002ba1c:	56                   	push   esi
c002ba1d:	57                   	push   edi
c002ba1e:	e8 bd f5 ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002ba23:	83 c4 10             	add    esp,0x10
c002ba26:	4b                   	dec    ebx
c002ba27:	75 f0                	jne    c002ba19 <IDE::polling(unsigned char, unsigned int)+0x11>
c002ba29:	bb a0 86 01 00       	mov    ebx,0x186a0
c002ba2e:	50                   	push   eax
c002ba2f:	6a 0c                	push   0xc
c002ba31:	56                   	push   esi
c002ba32:	57                   	push   edi
c002ba33:	e8 a8 f5 ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002ba38:	83 c4 10             	add    esp,0x10
c002ba3b:	a8 01                	test   al,0x1
c002ba3d:	75 17                	jne    c002ba56 <IDE::polling(unsigned char, unsigned int)+0x4e>
c002ba3f:	a8 20                	test   al,0x20
c002ba41:	75 0f                	jne    c002ba52 <IDE::polling(unsigned char, unsigned int)+0x4a>
c002ba43:	4b                   	dec    ebx
c002ba44:	74 10                	je     c002ba56 <IDE::polling(unsigned char, unsigned int)+0x4e>
c002ba46:	a8 80                	test   al,0x80
c002ba48:	75 e4                	jne    c002ba2e <IDE::polling(unsigned char, unsigned int)+0x26>
c002ba4a:	a8 08                	test   al,0x8
c002ba4c:	74 e0                	je     c002ba2e <IDE::polling(unsigned char, unsigned int)+0x26>
c002ba4e:	31 c0                	xor    eax,eax
c002ba50:	eb 06                	jmp    c002ba58 <IDE::polling(unsigned char, unsigned int)+0x50>
c002ba52:	b0 01                	mov    al,0x1
c002ba54:	eb 02                	jmp    c002ba58 <IDE::polling(unsigned char, unsigned int)+0x50>
c002ba56:	b0 02                	mov    al,0x2
c002ba58:	5b                   	pop    ebx
c002ba59:	5e                   	pop    esi
c002ba5a:	5f                   	pop    edi
c002ba5b:	c3                   	ret    

c002ba5c <SATABus::close(int, int, void*)>:
c002ba5c:	31 c0                	xor    eax,eax
c002ba5e:	c3                   	ret    
c002ba5f:	90                   	nop

c002ba60 <SATABus::detect()>:
c002ba60:	c3                   	ret    
c002ba61:	90                   	nop

c002ba62 <SATABus::SATABus()>:
c002ba62:	83 ec 0c             	sub    esp,0xc
c002ba65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ba69:	83 ec 08             	sub    esp,0x8
c002ba6c:	68 00 3b 03 c0       	push   0xc0033b00
c002ba71:	50                   	push   eax
c002ba72:	e8 35 fe fe ff       	call   c001b8ac <HardDiskController::HardDiskController(char const*)>
c002ba77:	83 c4 10             	add    esp,0x10
c002ba7a:	ba 2c 3b 03 c0       	mov    edx,0xc0033b2c
c002ba7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ba83:	89 10                	mov    DWORD PTR [eax],edx
c002ba85:	83 ec 0c             	sub    esp,0xc
c002ba88:	6a 50                	push   0x50
c002ba8a:	e8 8c af fe ff       	call   c0016a1b <Phys::allocateContiguousPages(int)>
c002ba8f:	83 c4 10             	add    esp,0x10
c002ba92:	89 c2                	mov    edx,eax
c002ba94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ba98:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002ba9e:	83 ec 0c             	sub    esp,0xc
c002baa1:	6a 50                	push   0x50
c002baa3:	e8 f1 c6 fe ff       	call   c0018199 <Virt::allocateKernelVirtualPages(int)>
c002baa8:	83 c4 10             	add    esp,0x10
c002baab:	89 c2                	mov    edx,eax
c002baad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bab1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002bab7:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c002babc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002bac0:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002bac6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002baca:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002bad0:	83 ec 0c             	sub    esp,0xc
c002bad3:	6a 03                	push   0x3
c002bad5:	6a 50                	push   0x50
c002bad7:	51                   	push   ecx
c002bad8:	52                   	push   edx
c002bad9:	50                   	push   eax
c002bada:	e8 c7 cf fe ff       	call   c0018aa6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002badf:	83 c4 20             	add    esp,0x20
c002bae2:	90                   	nop
c002bae3:	83 c4 0c             	add    esp,0xc
c002bae6:	c3                   	ret    
c002bae7:	90                   	nop

c002bae8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002bae8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002baec:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002baef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002baf2:	09 c2                	or     edx,eax
c002baf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002baf8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002bafe:	8b 08                	mov    ecx,DWORD PTR [eax]
c002bb00:	31 c0                	xor    eax,eax
c002bb02:	c1 e9 08             	shr    ecx,0x8
c002bb05:	83 e1 0f             	and    ecx,0xf
c002bb08:	39 c8                	cmp    eax,ecx
c002bb0a:	74 0a                	je     c002bb16 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c002bb0c:	f6 c2 01             	test   dl,0x1
c002bb0f:	74 08                	je     c002bb19 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002bb11:	d1 ea                	shr    edx,1
c002bb13:	40                   	inc    eax
c002bb14:	eb f2                	jmp    c002bb08 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c002bb16:	83 c8 ff             	or     eax,0xffffffff
c002bb19:	c3                   	ret    

c002bb1a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002bb1a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002bb1e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002bb21:	89 c2                	mov    edx,eax
c002bb23:	c1 ea 08             	shr    edx,0x8
c002bb26:	83 e2 0f             	and    edx,0xf
c002bb29:	4a                   	dec    edx
c002bb2a:	75 32                	jne    c002bb5e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002bb2c:	83 e0 0f             	and    eax,0xf
c002bb2f:	83 f8 03             	cmp    eax,0x3
c002bb32:	75 2a                	jne    c002bb5e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002bb34:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002bb37:	b8 02 00 00 00       	mov    eax,0x2
c002bb3c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002bb42:	74 1c                	je     c002bb60 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002bb44:	b8 04 00 00 00       	mov    eax,0x4
c002bb49:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002bb4f:	74 0f                	je     c002bb60 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002bb51:	31 c0                	xor    eax,eax
c002bb53:	83 fa 03             	cmp    edx,0x3
c002bb56:	0f 94 c0             	sete   al
c002bb59:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002bb5d:	c3                   	ret    
c002bb5e:	31 c0                	xor    eax,eax
c002bb60:	c3                   	ret    
c002bb61:	90                   	nop

c002bb62 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002bb62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002bb66:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bb69:	0f ba e2 0f          	bt     edx,0xf
c002bb6d:	72 f7                	jb     c002bb66 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002bb6f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bb72:	83 ca 10             	or     edx,0x10
c002bb75:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bb78:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bb7b:	83 ca 01             	or     edx,0x1
c002bb7e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bb81:	c3                   	ret    

c002bb82 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002bb82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002bb86:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bb89:	83 e2 fe             	and    edx,0xfffffffe
c002bb8c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bb8f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bb92:	83 e2 ef             	and    edx,0xffffffef
c002bb95:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bb98:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bb9b:	0f ba e2 0e          	bt     edx,0xe
c002bb9f:	72 f7                	jb     c002bb98 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002bba1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bba4:	0f ba e2 0f          	bt     edx,0xf
c002bba8:	72 ee                	jb     c002bb98 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002bbaa:	c3                   	ret    
c002bbab:	90                   	nop

c002bbac <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002bbac:	55                   	push   ebp
c002bbad:	57                   	push   edi
c002bbae:	56                   	push   esi
c002bbaf:	53                   	push   ebx
c002bbb0:	83 ec 1c             	sub    esp,0x1c
c002bbb3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002bbb7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002bbbb:	53                   	push   ebx
c002bbbc:	56                   	push   esi
c002bbbd:	e8 c0 ff ff ff       	call   c002bb82 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002bbc2:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002bbc6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002bbcc:	83 ec 0c             	sub    esp,0xc
c002bbcf:	c1 e5 0a             	shl    ebp,0xa
c002bbd2:	01 e8                	add    eax,ebp
c002bbd4:	89 03                	mov    DWORD PTR [ebx],eax
c002bbd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c002bbd8:	68 00 04 00 00       	push   0x400
c002bbdd:	6a 00                	push   0x0
c002bbdf:	50                   	push   eax
c002bbe0:	e8 0b 49 fd ff       	call   c00004f0 <memset>
c002bbe5:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c002bbeb:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002bbef:	01 e8                	add    eax,ebp
c002bbf1:	83 c4 1c             	add    esp,0x1c
c002bbf4:	89 03                	mov    DWORD PTR [ebx],eax
c002bbf6:	c1 e2 08             	shl    edx,0x8
c002bbf9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002bc00:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c002bc06:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002bc0c:	01 f8                	add    eax,edi
c002bc0e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002bc11:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002bc14:	68 00 01 00 00       	push   0x100
c002bc19:	6a 00                	push   0x0
c002bc1b:	50                   	push   eax
c002bc1c:	e8 cf 48 fd ff       	call   c00004f0 <memset>
c002bc21:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c002bc27:	01 fa                	add    edx,edi
c002bc29:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002bc2d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c002bc30:	c1 e7 0d             	shl    edi,0xd
c002bc33:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002bc3a:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c002bc40:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c002bc46:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002bc4a:	31 ff                	xor    edi,edi
c002bc4c:	83 c4 10             	add    esp,0x10
c002bc4f:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c002bc55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002bc59:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002bc5f:	83 c5 20             	add    ebp,0x20
c002bc62:	01 f8                	add    eax,edi
c002bc64:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002bc67:	52                   	push   edx
c002bc68:	68 00 01 00 00       	push   0x100
c002bc6d:	6a 00                	push   0x0
c002bc6f:	50                   	push   eax
c002bc70:	e8 7b 48 fd ff       	call   c00004f0 <memset>
c002bc75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002bc79:	83 c4 10             	add    esp,0x10
c002bc7c:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002bc82:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002bc89:	01 f8                	add    eax,edi
c002bc8b:	81 c7 00 01 00 00    	add    edi,0x100
c002bc91:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002bc94:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002bc9a:	75 b3                	jne    c002bc4f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c002bc9c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002bca3:	50                   	push   eax
c002bca4:	50                   	push   eax
c002bca5:	53                   	push   ebx
c002bca6:	56                   	push   esi
c002bca7:	e8 b6 fe ff ff       	call   c002bb62 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002bcac:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002bcb3:	83 c4 2c             	add    esp,0x2c
c002bcb6:	5b                   	pop    ebx
c002bcb7:	5e                   	pop    esi
c002bcb8:	5f                   	pop    edi
c002bcb9:	5d                   	pop    ebp
c002bcba:	c3                   	ret    
c002bcbb:	90                   	nop

c002bcbc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002bcbc:	55                   	push   ebp
c002bcbd:	57                   	push   edi
c002bcbe:	56                   	push   esi
c002bcbf:	53                   	push   ebx
c002bcc0:	31 db                	xor    ebx,ebx
c002bcc2:	83 ec 0c             	sub    esp,0xc
c002bcc5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002bcc9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002bccd:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002bcd0:	f7 c7 01 00 00 00    	test   edi,0x1
c002bcd6:	74 7a                	je     c002bd52 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002bcd8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002bcdc:	89 d8                	mov    eax,ebx
c002bcde:	c1 e0 07             	shl    eax,0x7
c002bce1:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c002bce8:	55                   	push   ebp
c002bce9:	56                   	push   esi
c002bcea:	e8 2b fe ff ff       	call   c002bb1a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002bcef:	5a                   	pop    edx
c002bcf0:	83 f8 01             	cmp    eax,0x1
c002bcf3:	59                   	pop    ecx
c002bcf4:	75 21                	jne    c002bd17 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c002bcf6:	50                   	push   eax
c002bcf7:	53                   	push   ebx
c002bcf8:	55                   	push   ebp
c002bcf9:	56                   	push   esi
c002bcfa:	e8 ad fe ff ff       	call   c002bbac <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002bcff:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002bd06:	e8 38 a9 fe ff       	call   c0016643 <malloc>
c002bd0b:	89 c5                	mov    ebp,eax
c002bd0d:	89 04 24             	mov    DWORD PTR [esp],eax
c002bd10:	e8 bb 10 00 00       	call   c002cdd0 <SATA::SATA()>
c002bd15:	eb 24                	jmp    c002bd3b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c002bd17:	83 f8 04             	cmp    eax,0x4
c002bd1a:	75 36                	jne    c002bd52 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002bd1c:	51                   	push   ecx
c002bd1d:	53                   	push   ebx
c002bd1e:	55                   	push   ebp
c002bd1f:	56                   	push   esi
c002bd20:	e8 87 fe ff ff       	call   c002bbac <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002bd25:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c002bd2c:	e8 12 a9 fe ff       	call   c0016643 <malloc>
c002bd31:	89 c5                	mov    ebp,eax
c002bd33:	89 04 24             	mov    DWORD PTR [esp],eax
c002bd36:	e8 2b 18 00 00       	call   c002d566 <SATAPI::SATAPI()>
c002bd3b:	58                   	pop    eax
c002bd3c:	5a                   	pop    edx
c002bd3d:	55                   	push   ebp
c002bd3e:	56                   	push   esi
c002bd3f:	e8 0e f8 fe ff       	call   c001b552 <Device::addChild(Device*)>
c002bd44:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002bd47:	56                   	push   esi
c002bd48:	6a 00                	push   0x0
c002bd4a:	53                   	push   ebx
c002bd4b:	55                   	push   ebp
c002bd4c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002bd4f:	83 c4 20             	add    esp,0x20
c002bd52:	d1 ef                	shr    edi,1
c002bd54:	43                   	inc    ebx
c002bd55:	83 fb 20             	cmp    ebx,0x20
c002bd58:	0f 85 72 ff ff ff    	jne    c002bcd0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002bd5e:	83 c4 0c             	add    esp,0xc
c002bd61:	5b                   	pop    ebx
c002bd62:	5e                   	pop    esi
c002bd63:	5f                   	pop    edi
c002bd64:	5d                   	pop    ebp
c002bd65:	c3                   	ret    

c002bd66 <SATABus::open(int, int, void*)>:
c002bd66:	53                   	push   ebx
c002bd67:	83 ec 08             	sub    esp,0x8
c002bd6a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bd6e:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c002bd74:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002bd7a:	e8 e9 94 ff ff       	call   c0025268 <KeDisablePreemption()>
c002bd7f:	52                   	push   edx
c002bd80:	52                   	push   edx
c002bd81:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c002bd87:	53                   	push   ebx
c002bd88:	e8 2f ff ff ff       	call   c002bcbc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002bd8d:	e8 fe 94 ff ff       	call   c0025290 <KeRestorePreemption()>
c002bd92:	31 c0                	xor    eax,eax
c002bd94:	83 c4 18             	add    esp,0x18
c002bd97:	5b                   	pop    ebx
c002bd98:	c3                   	ret    
c002bd99:	90                   	nop

c002bd9a <ATA::close(int, int, void*)>:
c002bd9a:	83 ec 0c             	sub    esp,0xc
c002bd9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bda1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002bda7:	85 c0                	test   eax,eax
c002bda9:	74 0c                	je     c002bdb7 <ATA::close(int, int, void*)+0x1d>
c002bdab:	83 ec 0c             	sub    esp,0xc
c002bdae:	8b 10                	mov    edx,DWORD PTR [eax]
c002bdb0:	50                   	push   eax
c002bdb1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002bdb4:	83 c4 10             	add    esp,0x10
c002bdb7:	31 c0                	xor    eax,eax
c002bdb9:	83 c4 0c             	add    esp,0xc
c002bdbc:	c3                   	ret    
c002bdbd:	90                   	nop

c002bdbe <ATA::powerSaving(PowerSavingLevel)>:
c002bdbe:	c3                   	ret    
c002bdbf:	90                   	nop

c002bdc0 <ATA::ATA()>:
c002bdc0:	83 ec 0c             	sub    esp,0xc
c002bdc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bdc7:	83 ec 04             	sub    esp,0x4
c002bdca:	68 00 02 00 00       	push   0x200
c002bdcf:	68 05 3c 03 c0       	push   0xc0033c05
c002bdd4:	50                   	push   eax
c002bdd5:	e8 5c fb fe ff       	call   c001b936 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002bdda:	83 c4 10             	add    esp,0x10
c002bddd:	ba 6c 3b 03 c0       	mov    edx,0xc0033b6c
c002bde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bde6:	89 10                	mov    DWORD PTR [eax],edx
c002bde8:	90                   	nop
c002bde9:	83 c4 0c             	add    esp,0xc
c002bdec:	c3                   	ret    
c002bded:	90                   	nop

c002bdee <ATA::flush(bool)>:
c002bdee:	53                   	push   ebx
c002bdef:	83 ec 08             	sub    esp,0x8
c002bdf2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bdf6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002bdfb:	83 f8 01             	cmp    eax,0x1
c002bdfe:	19 c0                	sbb    eax,eax
c002be00:	83 e0 fd             	and    eax,0xfffffffd
c002be03:	05 ea 00 00 00       	add    eax,0xea
c002be08:	50                   	push   eax
c002be09:	6a 07                	push   0x7
c002be0b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be12:	50                   	push   eax
c002be13:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be19:	e8 02 f1 ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be1e:	83 c4 0c             	add    esp,0xc
c002be21:	6a 00                	push   0x0
c002be23:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be2a:	50                   	push   eax
c002be2b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be31:	e8 d2 fb ff ff       	call   c002ba08 <IDE::polling(unsigned char, unsigned int)>
c002be36:	83 c4 18             	add    esp,0x18
c002be39:	5b                   	pop    ebx
c002be3a:	c3                   	ret    
c002be3b:	90                   	nop

c002be3c <ATA::readyForCommand()>:
c002be3c:	56                   	push   esi
c002be3d:	53                   	push   ebx
c002be3e:	53                   	push   ebx
c002be3f:	31 db                	xor    ebx,ebx
c002be41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002be45:	51                   	push   ecx
c002be46:	6a 0c                	push   0xc
c002be48:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002be4f:	50                   	push   eax
c002be50:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002be56:	e8 85 f1 ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002be5b:	83 c4 10             	add    esp,0x10
c002be5e:	a8 88                	test   al,0x88
c002be60:	74 1f                	je     c002be81 <ATA::readyForCommand()+0x45>
c002be62:	43                   	inc    ebx
c002be63:	83 fb 63             	cmp    ebx,0x63
c002be66:	7e dd                	jle    c002be45 <ATA::readyForCommand()+0x9>
c002be68:	83 ec 0c             	sub    esp,0xc
c002be6b:	6a 0a                	push   0xa
c002be6d:	e8 66 98 ff ff       	call   c00256d8 <milliTenthSleep(unsigned int)>
c002be72:	83 c4 10             	add    esp,0x10
c002be75:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002be7b:	75 c8                	jne    c002be45 <ATA::readyForCommand()+0x9>
c002be7d:	31 c0                	xor    eax,eax
c002be7f:	eb 02                	jmp    c002be83 <ATA::readyForCommand()+0x47>
c002be81:	b0 01                	mov    al,0x1
c002be83:	5a                   	pop    edx
c002be84:	5b                   	pop    ebx
c002be85:	5e                   	pop    esi
c002be86:	c3                   	ret    
c002be87:	90                   	nop

c002be88 <ATA::access(unsigned long long, int, void*, bool)>:
c002be88:	55                   	push   ebp
c002be89:	57                   	push   edi
c002be8a:	56                   	push   esi
c002be8b:	53                   	push   ebx
c002be8c:	83 ec 2c             	sub    esp,0x2c
c002be8f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002be93:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002be97:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002be9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002be9f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002bea3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002bea7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002beab:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002beb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002beb5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002bebb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002bebf:	c1 e0 06             	shl    eax,0x6
c002bec2:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002beca:	74 5d                	je     c002bf29 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002becc:	89 fa                	mov    edx,edi
c002bece:	89 f0                	mov    eax,esi
c002bed0:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002bed4:	c1 ea 1c             	shr    edx,0x1c
c002bed7:	89 d1                	mov    ecx,edx
c002bed9:	09 c1                	or     ecx,eax
c002bedb:	74 25                	je     c002bf02 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002bedd:	31 ed                	xor    ebp,ebp
c002bedf:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002bee6:	89 fa                	mov    edx,edi
c002bee8:	89 f0                	mov    eax,esi
c002beea:	0f ad d0             	shrd   eax,edx,cl
c002beed:	d3 ea                	shr    edx,cl
c002beef:	f6 c1 20             	test   cl,0x20
c002bef2:	74 02                	je     c002bef6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002bef4:	89 d0                	mov    eax,edx
c002bef6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002befa:	45                   	inc    ebp
c002befb:	83 fd 06             	cmp    ebp,0x6
c002befe:	75 df                	jne    c002bedf <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002bf00:	eb 76                	jmp    c002bf78 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002bf02:	89 f0                	mov    eax,esi
c002bf04:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002bf09:	89 fa                	mov    edx,edi
c002bf0b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bf12:	0f ac d0 10          	shrd   eax,edx,0x10
c002bf16:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002bf1b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002bf1f:	c1 ee 18             	shr    esi,0x18
c002bf22:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002bf27:	eb 56                	jmp    c002bf7f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002bf29:	6a 00                	push   0x0
c002bf2b:	6a 3f                	push   0x3f
c002bf2d:	57                   	push   edi
c002bf2e:	56                   	push   esi
c002bf2f:	e8 cc 2a 00 00       	call   c002ea00 <__umoddi3>
c002bf34:	83 c4 10             	add    esp,0x10
c002bf37:	40                   	inc    eax
c002bf38:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002bf3c:	6a 00                	push   0x0
c002bf3e:	68 f0 03 00 00       	push   0x3f0
c002bf43:	57                   	push   edi
c002bf44:	56                   	push   esi
c002bf45:	e8 b6 29 00 00       	call   c002e900 <__udivdi3>
c002bf4a:	83 c4 10             	add    esp,0x10
c002bf4d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002bf52:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bf59:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002bf5e:	6a 00                	push   0x0
c002bf60:	6a 3f                	push   0x3f
c002bf62:	57                   	push   edi
c002bf63:	56                   	push   esi
c002bf64:	e8 97 29 00 00       	call   c002e900 <__udivdi3>
c002bf69:	83 c4 10             	add    esp,0x10
c002bf6c:	83 e0 0f             	and    eax,0xf
c002bf6f:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002bf74:	89 c6                	mov    esi,eax
c002bf76:	eb 07                	jmp    c002bf7f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002bf78:	31 f6                	xor    esi,esi
c002bf7a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002bf7f:	bf 01 00 00 00       	mov    edi,0x1
c002bf84:	50                   	push   eax
c002bf85:	6a 00                	push   0x0
c002bf87:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bf8e:	50                   	push   eax
c002bf8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002bf93:	e8 90 f1 ff ff       	call   c002b128 <IDE::enableIRQs(unsigned char, bool)>
c002bf98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002bf9b:	e8 9c fe ff ff       	call   c002be3c <ATA::readyForCommand()>
c002bfa0:	83 c4 10             	add    esp,0x10
c002bfa3:	84 c0                	test   al,al
c002bfa5:	0f 84 69 02 00 00    	je     c002c214 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c002bfab:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002bfb1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002bfb7:	c1 e0 04             	shl    eax,0x4
c002bfba:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002bfc1:	09 c6                	or     esi,eax
c002bfc3:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c002bfc8:	75 05                	jne    c002bfcf <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002bfca:	83 ce a0             	or     esi,0xffffffa0
c002bfcd:	eb 03                	jmp    c002bfd2 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002bfcf:	83 ce e0             	or     esi,0xffffffe0
c002bfd2:	89 f0                	mov    eax,esi
c002bfd4:	0f b6 f0             	movzx  esi,al
c002bfd7:	56                   	push   esi
c002bfd8:	6a 06                	push   0x6
c002bfda:	51                   	push   ecx
c002bfdb:	52                   	push   edx
c002bfdc:	e8 3f ef ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bfe1:	83 c4 10             	add    esp,0x10
c002bfe4:	6a 00                	push   0x0
c002bfe6:	6a 01                	push   0x1
c002bfe8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bfef:	50                   	push   eax
c002bff0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bff6:	e8 25 ef ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bffb:	83 c4 10             	add    esp,0x10
c002bffe:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c002c003:	83 f8 02             	cmp    eax,0x2
c002c006:	75 6e                	jne    c002c076 <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c002c008:	6a 00                	push   0x0
c002c00a:	6a 08                	push   0x8
c002c00c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c013:	50                   	push   eax
c002c014:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c01a:	e8 01 ef ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c01f:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002c024:	50                   	push   eax
c002c025:	6a 09                	push   0x9
c002c027:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c02e:	50                   	push   eax
c002c02f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c035:	e8 e6 ee ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c03a:	83 c4 20             	add    esp,0x20
c002c03d:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002c042:	50                   	push   eax
c002c043:	6a 0a                	push   0xa
c002c045:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c04c:	50                   	push   eax
c002c04d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c053:	e8 c8 ee ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c058:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002c05d:	50                   	push   eax
c002c05e:	6a 0b                	push   0xb
c002c060:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c067:	50                   	push   eax
c002c068:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c06e:	e8 ad ee ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c073:	83 c4 20             	add    esp,0x20
c002c076:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002c07b:	50                   	push   eax
c002c07c:	6a 02                	push   0x2
c002c07e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c085:	50                   	push   eax
c002c086:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c08c:	e8 8f ee ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c091:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002c096:	50                   	push   eax
c002c097:	6a 03                	push   0x3
c002c099:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c0a0:	50                   	push   eax
c002c0a1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c0a7:	e8 74 ee ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c0ac:	83 c4 20             	add    esp,0x20
c002c0af:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002c0b4:	50                   	push   eax
c002c0b5:	6a 04                	push   0x4
c002c0b7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c0be:	50                   	push   eax
c002c0bf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c0c5:	e8 56 ee ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c0ca:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002c0cf:	50                   	push   eax
c002c0d0:	6a 05                	push   0x5
c002c0d2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c0d9:	50                   	push   eax
c002c0da:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c0e0:	e8 3b ee ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c0e5:	83 c4 20             	add    esp,0x20
c002c0e8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002c0ed:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c002c0f2:	74 11                	je     c002c105 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c002c0f4:	b8 30 00 00 00       	mov    eax,0x30
c002c0f9:	83 fa 02             	cmp    edx,0x2
c002c0fc:	75 16                	jne    c002c114 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002c0fe:	b8 34 00 00 00       	mov    eax,0x34
c002c103:	eb 0f                	jmp    c002c114 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002c105:	b8 20 00 00 00       	mov    eax,0x20
c002c10a:	83 fa 02             	cmp    edx,0x2
c002c10d:	75 05                	jne    c002c114 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002c10f:	b8 24 00 00 00       	mov    eax,0x24
c002c114:	50                   	push   eax
c002c115:	6a 07                	push   0x7
c002c117:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c11e:	50                   	push   eax
c002c11f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c125:	e8 f6 ed ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c12a:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002c12e:	83 c4 10             	add    esp,0x10
c002c131:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c002c136:	85 f6                	test   esi,esi
c002c138:	0f 84 b3 00 00 00    	je     c002c1f1 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c002c13e:	50                   	push   eax
c002c13f:	6a 01                	push   0x1
c002c141:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c148:	50                   	push   eax
c002c149:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c14f:	e8 b4 f8 ff ff       	call   c002ba08 <IDE::polling(unsigned char, unsigned int)>
c002c154:	83 c4 10             	add    esp,0x10
c002c157:	0f b6 f8             	movzx  edi,al
c002c15a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002c160:	85 ff                	test   edi,edi
c002c162:	74 1d                	je     c002c181 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c002c164:	57                   	push   edi
c002c165:	0f b6 d2             	movzx  edx,dl
c002c168:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002c16f:	50                   	push   eax
c002c170:	52                   	push   edx
c002c171:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c177:	e8 d2 f7 ff ff       	call   c002b94e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002c17c:	e9 90 00 00 00       	jmp    c002c211 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c002c181:	85 ed                	test   ebp,ebp
c002c183:	74 3b                	je     c002c1c0 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c002c185:	31 c9                	xor    ecx,ecx
c002c187:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002c18b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002c18f:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c002c193:	50                   	push   eax
c002c194:	50                   	push   eax
c002c195:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c19c:	50                   	push   eax
c002c19d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c1a3:	e8 66 ed ff ff       	call   c002af0e <IDE::getBase(unsigned char)>
c002c1a8:	89 c2                	mov    edx,eax
c002c1aa:	89 f8                	mov    eax,edi
c002c1ac:	66 ef                	out    dx,ax
c002c1ae:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002c1b2:	83 c4 10             	add    esp,0x10
c002c1b5:	41                   	inc    ecx
c002c1b6:	81 f9 00 01 00 00    	cmp    ecx,0x100
c002c1bc:	75 c9                	jne    c002c187 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c002c1be:	eb 23                	jmp    c002c1e3 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c002c1c0:	0f b6 d2             	movzx  edx,dl
c002c1c3:	51                   	push   ecx
c002c1c4:	51                   	push   ecx
c002c1c5:	52                   	push   edx
c002c1c6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c1cc:	e8 3d ed ff ff       	call   c002af0e <IDE::getBase(unsigned char)>
c002c1d1:	b9 00 01 00 00       	mov    ecx,0x100
c002c1d6:	89 c2                	mov    edx,eax
c002c1d8:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002c1dc:	fc                   	cld    
c002c1dd:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002c1e0:	83 c4 10             	add    esp,0x10
c002c1e3:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002c1eb:	4e                   	dec    esi
c002c1ec:	e9 45 ff ff ff       	jmp    c002c136 <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c002c1f1:	31 ff                	xor    edi,edi
c002c1f3:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002c1f8:	74 1a                	je     c002c214 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c002c1fa:	50                   	push   eax
c002c1fb:	50                   	push   eax
c002c1fc:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c002c201:	83 f8 02             	cmp    eax,0x2
c002c204:	0f 94 c0             	sete   al
c002c207:	0f b6 c0             	movzx  eax,al
c002c20a:	50                   	push   eax
c002c20b:	53                   	push   ebx
c002c20c:	e8 dd fb ff ff       	call   c002bdee <ATA::flush(bool)>
c002c211:	83 c4 10             	add    esp,0x10
c002c214:	83 c4 2c             	add    esp,0x2c
c002c217:	89 f8                	mov    eax,edi
c002c219:	5b                   	pop    ebx
c002c21a:	5e                   	pop    esi
c002c21b:	5f                   	pop    edi
c002c21c:	5d                   	pop    ebp
c002c21d:	c3                   	ret    

c002c21e <ATA::detectCHS()>:
c002c21e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002c222:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002c228:	c1 e0 06             	shl    eax,0x6
c002c22b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002c231:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002c23b:	c7 44 24 04 50 3b 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033b50
c002c243:	e9 a2 42 ff ff       	jmp    c00204ea <KePanic(char const*)>

c002c248 <ATA::open(int, int, void*)>:
c002c248:	53                   	push   ebx
c002c249:	83 ec 08             	sub    esp,0x8
c002c24c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002c254:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c258:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002c25e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002c264:	c1 e0 06             	shl    eax,0x6
c002c267:	01 d0                	add    eax,edx
c002c269:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002c270:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002c276:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002c27d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002c287:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002c28d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002c294:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002c29b:	75 0c                	jne    c002c2a9 <ATA::open(int, int, void*)+0x61>
c002c29d:	83 ec 0c             	sub    esp,0xc
c002c2a0:	53                   	push   ebx
c002c2a1:	e8 78 ff ff ff       	call   c002c21e <ATA::detectCHS()>
c002c2a6:	83 c4 10             	add    esp,0x10
c002c2a9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002c2af:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002c2b5:	c1 e0 06             	shl    eax,0x6
c002c2b8:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002c2bf:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002c2c9:	d1 e8                	shr    eax,1
c002c2cb:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002c2d1:	6a 04                	push   0x4
c002c2d3:	6a 0c                	push   0xc
c002c2d5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c2dc:	50                   	push   eax
c002c2dd:	52                   	push   edx
c002c2de:	e8 3d ec ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c2e3:	90                   	nop
c002c2e4:	90                   	nop
c002c2e5:	6a 00                	push   0x0
c002c2e7:	6a 0c                	push   0xc
c002c2e9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c2f0:	50                   	push   eax
c002c2f1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c2f7:	e8 24 ec ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c2fc:	83 c4 14             	add    esp,0x14
c002c2ff:	53                   	push   ebx
c002c300:	e8 99 f6 fe ff       	call   c001b99e <PhysicalDisk::startCache()>
c002c305:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c308:	e8 cd 08 ff ff       	call   c001cbda <createPartitionsForDisk(PhysicalDisk*)>
c002c30d:	31 c0                	xor    eax,eax
c002c30f:	83 c4 18             	add    esp,0x18
c002c312:	5b                   	pop    ebx
c002c313:	c3                   	ret    

c002c314 <combineCharAndColour(char, unsigned char)>:
c002c314:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c319:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002c31f:	c1 e0 08             	shl    eax,0x8
c002c322:	09 d0                	or     eax,edx
c002c324:	c3                   	ret    

c002c325 <combineColours(unsigned char, unsigned char)>:
c002c325:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c32a:	c1 e0 04             	shl    eax,0x4
c002c32d:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c002c331:	c3                   	ret    

c002c332 <ATA::read(unsigned long long, int, void*)>:
c002c332:	55                   	push   ebp
c002c333:	57                   	push   edi
c002c334:	56                   	push   esi
c002c335:	be 04 00 00 00       	mov    esi,0x4
c002c33a:	53                   	push   ebx
c002c33b:	83 ec 0c             	sub    esp,0xc
c002c33e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c342:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c346:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c349:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c34d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c351:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c357:	0f 87 a1 01 00 00    	ja     c002c4fe <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c35d:	be 06 00 00 00       	mov    esi,0x6
c002c362:	85 c9                	test   ecx,ecx
c002c364:	0f 84 94 01 00 00    	je     c002c4fe <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c36a:	55                   	push   ebp
c002c36b:	55                   	push   ebp
c002c36c:	6a 00                	push   0x0
c002c36e:	51                   	push   ecx
c002c36f:	53                   	push   ebx
c002c370:	52                   	push   edx
c002c371:	50                   	push   eax
c002c372:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c376:	e8 0d fb ff ff       	call   c002be88 <ATA::access(unsigned long long, int, void*, bool)>
c002c37b:	83 c4 20             	add    esp,0x20
c002c37e:	89 c6                	mov    esi,eax
c002c380:	85 c0                	test   eax,eax
c002c382:	0f 85 71 01 00 00    	jne    c002c4f9 <ATA::read(unsigned long long, int, void*)+0x1c7>
c002c388:	03 1d b4 0b 04 c0    	add    ebx,DWORD PTR ds:0xc0040bb4
c002c38e:	89 da                	mov    edx,ebx
c002c390:	50                   	push   eax
c002c391:	bd 10 27 00 00       	mov    ebp,0x2710
c002c396:	50                   	push   eax
c002c397:	89 1d b4 0b 04 c0    	mov    DWORD PTR ds:0xc0040bb4,ebx
c002c39d:	6a 0f                	push   0xf
c002c39f:	6a 00                	push   0x0
c002c3a1:	e8 7f ff ff ff       	call   c002c325 <combineColours(unsigned char, unsigned char)>
c002c3a6:	59                   	pop    ecx
c002c3a7:	b9 0a 00 00 00       	mov    ecx,0xa
c002c3ac:	5b                   	pop    ebx
c002c3ad:	0f b6 d8             	movzx  ebx,al
c002c3b0:	89 d0                	mov    eax,edx
c002c3b2:	53                   	push   ebx
c002c3b3:	99                   	cdq    
c002c3b4:	f7 fd                	idiv   ebp
c002c3b6:	99                   	cdq    
c002c3b7:	f7 f9                	idiv   ecx
c002c3b9:	83 c2 30             	add    edx,0x30
c002c3bc:	0f b6 d2             	movzx  edx,dl
c002c3bf:	52                   	push   edx
c002c3c0:	e8 4f ff ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002c3c5:	5f                   	pop    edi
c002c3c6:	bf e8 03 00 00       	mov    edi,0x3e8
c002c3cb:	5a                   	pop    edx
c002c3cc:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c3d2:	53                   	push   ebx
c002c3d3:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c3d8:	99                   	cdq    
c002c3d9:	f7 ff                	idiv   edi
c002c3db:	99                   	cdq    
c002c3dc:	f7 f9                	idiv   ecx
c002c3de:	8d 42 30             	lea    eax,[edx+0x30]
c002c3e1:	0f b6 c0             	movzx  eax,al
c002c3e4:	50                   	push   eax
c002c3e5:	e8 2a ff ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002c3ea:	5f                   	pop    edi
c002c3eb:	bf 64 00 00 00       	mov    edi,0x64
c002c3f0:	5a                   	pop    edx
c002c3f1:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c3f7:	53                   	push   ebx
c002c3f8:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c3fd:	99                   	cdq    
c002c3fe:	f7 ff                	idiv   edi
c002c400:	99                   	cdq    
c002c401:	f7 f9                	idiv   ecx
c002c403:	8d 42 30             	lea    eax,[edx+0x30]
c002c406:	0f b6 c0             	movzx  eax,al
c002c409:	50                   	push   eax
c002c40a:	e8 05 ff ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002c40f:	5a                   	pop    edx
c002c410:	5a                   	pop    edx
c002c411:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c417:	53                   	push   ebx
c002c418:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c41d:	99                   	cdq    
c002c41e:	f7 f9                	idiv   ecx
c002c420:	99                   	cdq    
c002c421:	f7 f9                	idiv   ecx
c002c423:	8d 42 30             	lea    eax,[edx+0x30]
c002c426:	0f b6 c0             	movzx  eax,al
c002c429:	50                   	push   eax
c002c42a:	e8 e5 fe ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002c42f:	5a                   	pop    edx
c002c430:	5a                   	pop    edx
c002c431:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c437:	53                   	push   ebx
c002c438:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c43d:	99                   	cdq    
c002c43e:	f7 f9                	idiv   ecx
c002c440:	83 c2 30             	add    edx,0x30
c002c443:	0f b6 d2             	movzx  edx,dl
c002c446:	52                   	push   edx
c002c447:	e8 c8 fe ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002c44c:	5a                   	pop    edx
c002c44d:	5a                   	pop    edx
c002c44e:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c454:	53                   	push   ebx
c002c455:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c45a:	99                   	cdq    
c002c45b:	f7 fd                	idiv   ebp
c002c45d:	99                   	cdq    
c002c45e:	f7 f9                	idiv   ecx
c002c460:	8d 42 30             	lea    eax,[edx+0x30]
c002c463:	0f b6 c0             	movzx  eax,al
c002c466:	50                   	push   eax
c002c467:	e8 a8 fe ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002c46c:	5d                   	pop    ebp
c002c46d:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c472:	5a                   	pop    edx
c002c473:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c479:	53                   	push   ebx
c002c47a:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c47f:	99                   	cdq    
c002c480:	f7 fd                	idiv   ebp
c002c482:	99                   	cdq    
c002c483:	f7 f9                	idiv   ecx
c002c485:	8d 42 30             	lea    eax,[edx+0x30]
c002c488:	0f b6 c0             	movzx  eax,al
c002c48b:	50                   	push   eax
c002c48c:	e8 83 fe ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002c491:	5d                   	pop    ebp
c002c492:	5a                   	pop    edx
c002c493:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c499:	53                   	push   ebx
c002c49a:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c49f:	99                   	cdq    
c002c4a0:	f7 ff                	idiv   edi
c002c4a2:	99                   	cdq    
c002c4a3:	f7 f9                	idiv   ecx
c002c4a5:	8d 42 30             	lea    eax,[edx+0x30]
c002c4a8:	0f b6 c0             	movzx  eax,al
c002c4ab:	50                   	push   eax
c002c4ac:	e8 63 fe ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002c4b1:	5f                   	pop    edi
c002c4b2:	5d                   	pop    ebp
c002c4b3:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c4b9:	53                   	push   ebx
c002c4ba:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c4bf:	99                   	cdq    
c002c4c0:	f7 f9                	idiv   ecx
c002c4c2:	99                   	cdq    
c002c4c3:	f7 f9                	idiv   ecx
c002c4c5:	8d 42 30             	lea    eax,[edx+0x30]
c002c4c8:	0f b6 c0             	movzx  eax,al
c002c4cb:	50                   	push   eax
c002c4cc:	e8 43 fe ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002c4d1:	5a                   	pop    edx
c002c4d2:	5f                   	pop    edi
c002c4d3:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c4d9:	53                   	push   ebx
c002c4da:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c4df:	99                   	cdq    
c002c4e0:	f7 f9                	idiv   ecx
c002c4e2:	83 c2 30             	add    edx,0x30
c002c4e5:	0f b6 d2             	movzx  edx,dl
c002c4e8:	52                   	push   edx
c002c4e9:	e8 26 fe ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002c4ee:	83 c4 10             	add    esp,0x10
c002c4f1:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c4f7:	eb 05                	jmp    c002c4fe <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c4f9:	be 01 00 00 00       	mov    esi,0x1
c002c4fe:	83 c4 0c             	add    esp,0xc
c002c501:	89 f0                	mov    eax,esi
c002c503:	5b                   	pop    ebx
c002c504:	5e                   	pop    esi
c002c505:	5f                   	pop    edi
c002c506:	5d                   	pop    ebp
c002c507:	c3                   	ret    

c002c508 <ATA::write(unsigned long long, int, void*)>:
c002c508:	55                   	push   ebp
c002c509:	57                   	push   edi
c002c50a:	56                   	push   esi
c002c50b:	be 04 00 00 00       	mov    esi,0x4
c002c510:	53                   	push   ebx
c002c511:	83 ec 0c             	sub    esp,0xc
c002c514:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c518:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c51c:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c51f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c523:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c527:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c52d:	0f 87 9c 01 00 00    	ja     c002c6cf <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c533:	be 06 00 00 00       	mov    esi,0x6
c002c538:	85 c9                	test   ecx,ecx
c002c53a:	0f 84 8f 01 00 00    	je     c002c6cf <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c540:	55                   	push   ebp
c002c541:	55                   	push   ebp
c002c542:	6a 01                	push   0x1
c002c544:	51                   	push   ecx
c002c545:	53                   	push   ebx
c002c546:	52                   	push   edx
c002c547:	50                   	push   eax
c002c548:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c54c:	e8 37 f9 ff ff       	call   c002be88 <ATA::access(unsigned long long, int, void*, bool)>
c002c551:	83 c4 20             	add    esp,0x20
c002c554:	89 c6                	mov    esi,eax
c002c556:	85 c0                	test   eax,eax
c002c558:	0f 85 6c 01 00 00    	jne    c002c6ca <ATA::write(unsigned long long, int, void*)+0x1c2>
c002c55e:	01 1d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebx
c002c564:	bd 10 27 00 00       	mov    ebp,0x2710
c002c569:	50                   	push   eax
c002c56a:	50                   	push   eax
c002c56b:	6a 0f                	push   0xf
c002c56d:	6a 00                	push   0x0
c002c56f:	e8 b1 fd ff ff       	call   c002c325 <combineColours(unsigned char, unsigned char)>
c002c574:	5a                   	pop    edx
c002c575:	0f b6 d8             	movzx  ebx,al
c002c578:	59                   	pop    ecx
c002c579:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c57e:	53                   	push   ebx
c002c57f:	b9 0a 00 00 00       	mov    ecx,0xa
c002c584:	99                   	cdq    
c002c585:	f7 fd                	idiv   ebp
c002c587:	99                   	cdq    
c002c588:	f7 f9                	idiv   ecx
c002c58a:	8d 42 30             	lea    eax,[edx+0x30]
c002c58d:	0f b6 c0             	movzx  eax,al
c002c590:	50                   	push   eax
c002c591:	e8 7e fd ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002c596:	5f                   	pop    edi
c002c597:	bf e8 03 00 00       	mov    edi,0x3e8
c002c59c:	5a                   	pop    edx
c002c59d:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c5a3:	53                   	push   ebx
c002c5a4:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c5a9:	99                   	cdq    
c002c5aa:	f7 ff                	idiv   edi
c002c5ac:	99                   	cdq    
c002c5ad:	f7 f9                	idiv   ecx
c002c5af:	8d 42 30             	lea    eax,[edx+0x30]
c002c5b2:	0f b6 c0             	movzx  eax,al
c002c5b5:	50                   	push   eax
c002c5b6:	e8 59 fd ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002c5bb:	5f                   	pop    edi
c002c5bc:	bf 64 00 00 00       	mov    edi,0x64
c002c5c1:	5a                   	pop    edx
c002c5c2:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c5c8:	53                   	push   ebx
c002c5c9:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c5ce:	99                   	cdq    
c002c5cf:	f7 ff                	idiv   edi
c002c5d1:	99                   	cdq    
c002c5d2:	f7 f9                	idiv   ecx
c002c5d4:	8d 42 30             	lea    eax,[edx+0x30]
c002c5d7:	0f b6 c0             	movzx  eax,al
c002c5da:	50                   	push   eax
c002c5db:	e8 34 fd ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002c5e0:	5a                   	pop    edx
c002c5e1:	5a                   	pop    edx
c002c5e2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c5e8:	53                   	push   ebx
c002c5e9:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c5ee:	99                   	cdq    
c002c5ef:	f7 f9                	idiv   ecx
c002c5f1:	99                   	cdq    
c002c5f2:	f7 f9                	idiv   ecx
c002c5f4:	8d 42 30             	lea    eax,[edx+0x30]
c002c5f7:	0f b6 c0             	movzx  eax,al
c002c5fa:	50                   	push   eax
c002c5fb:	e8 14 fd ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002c600:	5a                   	pop    edx
c002c601:	5a                   	pop    edx
c002c602:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c608:	53                   	push   ebx
c002c609:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c60e:	99                   	cdq    
c002c60f:	f7 f9                	idiv   ecx
c002c611:	8d 42 30             	lea    eax,[edx+0x30]
c002c614:	0f b6 c0             	movzx  eax,al
c002c617:	50                   	push   eax
c002c618:	e8 f7 fc ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002c61d:	5a                   	pop    edx
c002c61e:	5a                   	pop    edx
c002c61f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c625:	53                   	push   ebx
c002c626:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c62b:	99                   	cdq    
c002c62c:	f7 fd                	idiv   ebp
c002c62e:	99                   	cdq    
c002c62f:	f7 f9                	idiv   ecx
c002c631:	8d 42 30             	lea    eax,[edx+0x30]
c002c634:	0f b6 c0             	movzx  eax,al
c002c637:	50                   	push   eax
c002c638:	e8 d7 fc ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002c63d:	5d                   	pop    ebp
c002c63e:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c643:	5a                   	pop    edx
c002c644:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c64a:	53                   	push   ebx
c002c64b:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c650:	99                   	cdq    
c002c651:	f7 fd                	idiv   ebp
c002c653:	99                   	cdq    
c002c654:	f7 f9                	idiv   ecx
c002c656:	8d 42 30             	lea    eax,[edx+0x30]
c002c659:	0f b6 c0             	movzx  eax,al
c002c65c:	50                   	push   eax
c002c65d:	e8 b2 fc ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002c662:	5d                   	pop    ebp
c002c663:	5a                   	pop    edx
c002c664:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c66a:	53                   	push   ebx
c002c66b:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c670:	99                   	cdq    
c002c671:	f7 ff                	idiv   edi
c002c673:	99                   	cdq    
c002c674:	f7 f9                	idiv   ecx
c002c676:	8d 42 30             	lea    eax,[edx+0x30]
c002c679:	0f b6 c0             	movzx  eax,al
c002c67c:	50                   	push   eax
c002c67d:	e8 92 fc ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002c682:	5f                   	pop    edi
c002c683:	5d                   	pop    ebp
c002c684:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c68a:	53                   	push   ebx
c002c68b:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c690:	99                   	cdq    
c002c691:	f7 f9                	idiv   ecx
c002c693:	99                   	cdq    
c002c694:	f7 f9                	idiv   ecx
c002c696:	8d 42 30             	lea    eax,[edx+0x30]
c002c699:	0f b6 c0             	movzx  eax,al
c002c69c:	50                   	push   eax
c002c69d:	e8 72 fc ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002c6a2:	5a                   	pop    edx
c002c6a3:	5f                   	pop    edi
c002c6a4:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c6aa:	53                   	push   ebx
c002c6ab:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c6b0:	99                   	cdq    
c002c6b1:	f7 f9                	idiv   ecx
c002c6b3:	83 c2 30             	add    edx,0x30
c002c6b6:	0f b6 d2             	movzx  edx,dl
c002c6b9:	52                   	push   edx
c002c6ba:	e8 55 fc ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002c6bf:	83 c4 10             	add    esp,0x10
c002c6c2:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c6c8:	eb 05                	jmp    c002c6cf <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c6ca:	be 01 00 00 00       	mov    esi,0x1
c002c6cf:	83 c4 0c             	add    esp,0xc
c002c6d2:	89 f0                	mov    eax,esi
c002c6d4:	5b                   	pop    ebx
c002c6d5:	5e                   	pop    esi
c002c6d6:	5f                   	pop    edi
c002c6d7:	5d                   	pop    ebp
c002c6d8:	c3                   	ret    
c002c6d9:	90                   	nop

c002c6da <ATAPI::write(unsigned long long, int, void*)>:
c002c6da:	b8 03 00 00 00       	mov    eax,0x3
c002c6df:	c3                   	ret    

c002c6e0 <ATAPI::close(int, int, void*)>:
c002c6e0:	83 ec 0c             	sub    esp,0xc
c002c6e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c6e7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c6ed:	85 c0                	test   eax,eax
c002c6ef:	74 0c                	je     c002c6fd <ATAPI::close(int, int, void*)+0x1d>
c002c6f1:	83 ec 0c             	sub    esp,0xc
c002c6f4:	8b 10                	mov    edx,DWORD PTR [eax]
c002c6f6:	50                   	push   eax
c002c6f7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c6fa:	83 c4 10             	add    esp,0x10
c002c6fd:	31 c0                	xor    eax,eax
c002c6ff:	83 c4 0c             	add    esp,0xc
c002c702:	c3                   	ret    
c002c703:	90                   	nop

c002c704 <ATAPI::ATAPI()>:
c002c704:	83 ec 0c             	sub    esp,0xc
c002c707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c70b:	83 ec 04             	sub    esp,0x4
c002c70e:	68 00 08 00 00       	push   0x800
c002c713:	68 a5 3c 03 c0       	push   0xc0033ca5
c002c718:	50                   	push   eax
c002c719:	e8 18 f2 fe ff       	call   c001b936 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002c71e:	83 c4 10             	add    esp,0x10
c002c721:	ba b4 3b 03 c0       	mov    edx,0xc0033bb4
c002c726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c72a:	89 10                	mov    DWORD PTR [eax],edx
c002c72c:	90                   	nop
c002c72d:	83 c4 0c             	add    esp,0xc
c002c730:	c3                   	ret    
c002c731:	90                   	nop

c002c732 <ATAPI::readyForCommand()>:
c002c732:	56                   	push   esi
c002c733:	53                   	push   ebx
c002c734:	53                   	push   ebx
c002c735:	31 db                	xor    ebx,ebx
c002c737:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002c73b:	51                   	push   ecx
c002c73c:	6a 0c                	push   0xc
c002c73e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002c745:	50                   	push   eax
c002c746:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002c74c:	e8 8f e8 ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002c751:	83 c4 10             	add    esp,0x10
c002c754:	a8 88                	test   al,0x88
c002c756:	74 25                	je     c002c77d <ATAPI::readyForCommand()+0x4b>
c002c758:	43                   	inc    ebx
c002c759:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002c75f:	7e da                	jle    c002c73b <ATAPI::readyForCommand()+0x9>
c002c761:	83 ec 0c             	sub    esp,0xc
c002c764:	68 5e 01 00 00       	push   0x15e
c002c769:	e8 6a 8f ff ff       	call   c00256d8 <milliTenthSleep(unsigned int)>
c002c76e:	83 c4 10             	add    esp,0x10
c002c771:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c002c777:	75 c2                	jne    c002c73b <ATAPI::readyForCommand()+0x9>
c002c779:	31 c0                	xor    eax,eax
c002c77b:	eb 02                	jmp    c002c77f <ATAPI::readyForCommand()+0x4d>
c002c77d:	b0 01                	mov    al,0x1
c002c77f:	5a                   	pop    edx
c002c780:	5b                   	pop    ebx
c002c781:	5e                   	pop    esi
c002c782:	c3                   	ret    
c002c783:	90                   	nop

c002c784 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002c784:	55                   	push   ebp
c002c785:	57                   	push   edi
c002c786:	56                   	push   esi
c002c787:	53                   	push   ebx
c002c788:	83 ec 20             	sub    esp,0x20
c002c78b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002c78f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002c793:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002c797:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002c79b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002c79f:	6a 01                	push   0x1
c002c7a1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c7a8:	50                   	push   eax
c002c7a9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c7af:	e8 74 e9 ff ff       	call   c002b128 <IDE::enableIRQs(unsigned char, bool)>
c002c7b4:	5e                   	pop    esi
c002c7b5:	58                   	pop    eax
c002c7b6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c7bd:	50                   	push   eax
c002c7be:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c7c4:	e8 31 e7 ff ff       	call   c002aefa <IDE::prepareInterrupt(unsigned char)>
c002c7c9:	89 3c 24             	mov    DWORD PTR [esp],edi
c002c7cc:	e8 61 ff ff ff       	call   c002c732 <ATAPI::readyForCommand()>
c002c7d1:	83 c4 10             	add    esp,0x10
c002c7d4:	84 c0                	test   al,al
c002c7d6:	75 0a                	jne    c002c7e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002c7d8:	bb 01 00 00 00       	mov    ebx,0x1
c002c7dd:	e9 60 02 00 00       	jmp    c002ca42 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c7e2:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c002c7e8:	c1 e0 04             	shl    eax,0x4
c002c7eb:	0f b6 c0             	movzx  eax,al
c002c7ee:	50                   	push   eax
c002c7ef:	6a 06                	push   0x6
c002c7f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c7f8:	50                   	push   eax
c002c7f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c7ff:	e8 1c e7 ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c804:	6a 00                	push   0x0
c002c806:	6a 01                	push   0x1
c002c808:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c80f:	50                   	push   eax
c002c810:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c816:	e8 05 e7 ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c81b:	83 c4 20             	add    esp,0x20
c002c81e:	0f b6 c3             	movzx  eax,bl
c002c821:	0f b6 df             	movzx  ebx,bh
c002c824:	50                   	push   eax
c002c825:	6a 04                	push   0x4
c002c827:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c82e:	50                   	push   eax
c002c82f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c835:	e8 e6 e6 ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c83a:	53                   	push   ebx
c002c83b:	6a 05                	push   0x5
c002c83d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c844:	50                   	push   eax
c002c845:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c84b:	e8 d0 e6 ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c850:	83 c4 20             	add    esp,0x20
c002c853:	68 a0 00 00 00       	push   0xa0
c002c858:	6a 07                	push   0x7
c002c85a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c861:	50                   	push   eax
c002c862:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c868:	e8 b3 e6 ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c86d:	83 c4 0c             	add    esp,0xc
c002c870:	6a 01                	push   0x1
c002c872:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c879:	50                   	push   eax
c002c87a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c880:	e8 83 f1 ff ff       	call   c002ba08 <IDE::polling(unsigned char, unsigned int)>
c002c885:	83 c4 10             	add    esp,0x10
c002c888:	0f b6 d8             	movzx  ebx,al
c002c88b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c002c891:	85 db                	test   ebx,ebx
c002c893:	74 20                	je     c002c8b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002c895:	53                   	push   ebx
c002c896:	0f b6 c0             	movzx  eax,al
c002c899:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c002c8a0:	52                   	push   edx
c002c8a1:	50                   	push   eax
c002c8a2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c8a8:	e8 a1 f0 ff ff       	call   c002b94e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002c8ad:	83 c4 10             	add    esp,0x10
c002c8b0:	e9 8d 01 00 00       	jmp    c002ca42 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c8b5:	0f b6 c0             	movzx  eax,al
c002c8b8:	53                   	push   ebx
c002c8b9:	53                   	push   ebx
c002c8ba:	50                   	push   eax
c002c8bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c8c1:	e8 48 e6 ff ff       	call   c002af0e <IDE::getBase(unsigned char)>
c002c8c6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002c8ca:	b9 06 00 00 00       	mov    ecx,0x6
c002c8cf:	89 c2                	mov    edx,eax
c002c8d1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002c8d4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002c8d8:	83 c4 10             	add    esp,0x10
c002c8db:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c002c8e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002c8e4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c8ea:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c8f1:	85 db                	test   ebx,ebx
c002c8f3:	0f 84 ec 00 00 00    	je     c002c9e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c002c8f9:	51                   	push   ecx
c002c8fa:	51                   	push   ecx
c002c8fb:	52                   	push   edx
c002c8fc:	50                   	push   eax
c002c8fd:	e8 8c e7 ff ff       	call   c002b08e <IDE::waitInterrupt(unsigned char)>
c002c902:	83 c4 10             	add    esp,0x10
c002c905:	84 c0                	test   al,al
c002c907:	0f 84 cb fe ff ff    	je     c002c7d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002c90d:	56                   	push   esi
c002c90e:	56                   	push   esi
c002c90f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c916:	50                   	push   eax
c002c917:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c91d:	e8 d8 e5 ff ff       	call   c002aefa <IDE::prepareInterrupt(unsigned char)>
c002c922:	83 c4 0c             	add    esp,0xc
c002c925:	6a 04                	push   0x4
c002c927:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c92e:	50                   	push   eax
c002c92f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c935:	e8 a6 e6 ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002c93a:	83 c4 0c             	add    esp,0xc
c002c93d:	89 c6                	mov    esi,eax
c002c93f:	6a 05                	push   0x5
c002c941:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c948:	50                   	push   eax
c002c949:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c94f:	e8 8c e6 ff ff       	call   c002afe0 <IDE::read(unsigned char, unsigned char)>
c002c954:	89 f1                	mov    ecx,esi
c002c956:	0f b6 c0             	movzx  eax,al
c002c959:	0f b6 f1             	movzx  esi,cl
c002c95c:	c1 e0 08             	shl    eax,0x8
c002c95f:	09 c6                	or     esi,eax
c002c961:	d1 fe                	sar    esi,1
c002c963:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002c967:	83 c4 10             	add    esp,0x10
c002c96a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002c96f:	74 41                	je     c002c9b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c002c971:	31 c9                	xor    ecx,ecx
c002c973:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c979:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c980:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002c984:	75 0a                	jne    c002c990 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c002c986:	01 c9                	add    ecx,ecx
c002c988:	01 cd                	add    ebp,ecx
c002c98a:	4b                   	dec    ebx
c002c98b:	e9 54 ff ff ff       	jmp    c002c8e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c002c990:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002c995:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002c999:	51                   	push   ecx
c002c99a:	51                   	push   ecx
c002c99b:	52                   	push   edx
c002c99c:	50                   	push   eax
c002c99d:	e8 6c e5 ff ff       	call   c002af0e <IDE::getBase(unsigned char)>
c002c9a2:	89 c2                	mov    edx,eax
c002c9a4:	89 f0                	mov    eax,esi
c002c9a6:	66 ef                	out    dx,ax
c002c9a8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002c9ac:	83 c4 10             	add    esp,0x10
c002c9af:	41                   	inc    ecx
c002c9b0:	eb c1                	jmp    c002c973 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c002c9b2:	31 f6                	xor    esi,esi
c002c9b4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c9ba:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c9c1:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002c9c5:	75 06                	jne    c002c9cd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c002c9c7:	01 f6                	add    esi,esi
c002c9c9:	01 f5                	add    ebp,esi
c002c9cb:	eb bd                	jmp    c002c98a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c002c9cd:	51                   	push   ecx
c002c9ce:	51                   	push   ecx
c002c9cf:	52                   	push   edx
c002c9d0:	50                   	push   eax
c002c9d1:	e8 38 e5 ff ff       	call   c002af0e <IDE::getBase(unsigned char)>
c002c9d6:	89 c2                	mov    edx,eax
c002c9d8:	66 ed                	in     ax,dx
c002c9da:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002c9df:	83 c4 10             	add    esp,0x10
c002c9e2:	46                   	inc    esi
c002c9e3:	eb cf                	jmp    c002c9b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c002c9e5:	51                   	push   ecx
c002c9e6:	51                   	push   ecx
c002c9e7:	52                   	push   edx
c002c9e8:	50                   	push   eax
c002c9e9:	e8 a0 e6 ff ff       	call   c002b08e <IDE::waitInterrupt(unsigned char)>
c002c9ee:	83 c4 10             	add    esp,0x10
c002c9f1:	84 c0                	test   al,al
c002c9f3:	0f 84 df fd ff ff    	je     c002c7d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002c9f9:	bb a0 86 01 00       	mov    ebx,0x186a0
c002c9fe:	52                   	push   edx
c002c9ff:	52                   	push   edx
c002ca00:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002ca07:	50                   	push   eax
c002ca08:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002ca0e:	e8 e7 e4 ff ff       	call   c002aefa <IDE::prepareInterrupt(unsigned char)>
c002ca13:	83 c4 10             	add    esp,0x10
c002ca16:	50                   	push   eax
c002ca17:	50                   	push   eax
c002ca18:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002ca1f:	50                   	push   eax
c002ca20:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002ca26:	e8 e3 e4 ff ff       	call   c002af0e <IDE::getBase(unsigned char)>
c002ca2b:	8d 50 07             	lea    edx,[eax+0x7]
c002ca2e:	ec                   	in     al,dx
c002ca2f:	83 c4 10             	add    esp,0x10
c002ca32:	a8 88                	test   al,0x88
c002ca34:	74 0a                	je     c002ca40 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c002ca36:	4b                   	dec    ebx
c002ca37:	75 dd                	jne    c002ca16 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c002ca39:	bb 02 00 00 00       	mov    ebx,0x2
c002ca3e:	eb 02                	jmp    c002ca42 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002ca40:	31 db                	xor    ebx,ebx
c002ca42:	83 c4 1c             	add    esp,0x1c
c002ca45:	89 d8                	mov    eax,ebx
c002ca47:	5b                   	pop    ebx
c002ca48:	5e                   	pop    esi
c002ca49:	5f                   	pop    edi
c002ca4a:	5d                   	pop    ebp
c002ca4b:	c3                   	ret    

c002ca4c <ATAPI::diskRemoved()>:
c002ca4c:	53                   	push   ebx
c002ca4d:	83 ec 14             	sub    esp,0x14
c002ca50:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002ca54:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002ca5b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c002ca61:	e8 64 fe fe ff       	call   c001c8ca <LogicalDisk::unmount()>
c002ca66:	58                   	pop    eax
c002ca67:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002ca6d:	e8 36 08 ff ff       	call   c001d2a8 <VCache::writeWriteBuffer()>
c002ca72:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002ca78:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002ca7c:	83 c4 18             	add    esp,0x18
c002ca7f:	5b                   	pop    ebx
c002ca80:	e9 13 08 ff ff       	jmp    c001d298 <VCache::invalidateReadBuffer()>
c002ca85:	90                   	nop

c002ca86 <ATAPI::eject()>:
c002ca86:	57                   	push   edi
c002ca87:	b9 03 00 00 00       	mov    ecx,0x3
c002ca8c:	53                   	push   ebx
c002ca8d:	83 ec 14             	sub    esp,0x14
c002ca90:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002ca94:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002ca98:	fc                   	cld    
c002ca99:	31 c0                	xor    eax,eax
c002ca9b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002ca9d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002caa2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002caa7:	50                   	push   eax
c002caa8:	50                   	push   eax
c002caa9:	6a 00                	push   0x0
c002caab:	6a 00                	push   0x0
c002caad:	6a 00                	push   0x0
c002caaf:	6a 02                	push   0x2
c002cab1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002cab5:	50                   	push   eax
c002cab6:	53                   	push   ebx
c002cab7:	e8 c8 fc ff ff       	call   c002c784 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002cabc:	83 c4 14             	add    esp,0x14
c002cabf:	53                   	push   ebx
c002cac0:	e8 87 ff ff ff       	call   c002ca4c <ATAPI::diskRemoved()>
c002cac5:	83 c4 24             	add    esp,0x24
c002cac8:	31 c0                	xor    eax,eax
c002caca:	5b                   	pop    ebx
c002cacb:	5f                   	pop    edi
c002cacc:	c3                   	ret    
c002cacd:	90                   	nop

c002cace <ATAPI::diskInserted()>:
c002cace:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002cad2:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c002cad9:	c3                   	ret    

c002cada <ATAPI::detectMedia()>:
c002cada:	56                   	push   esi
c002cadb:	53                   	push   ebx
c002cadc:	83 ec 28             	sub    esp,0x28
c002cadf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002cae3:	6a 0c                	push   0xc
c002cae5:	6a 00                	push   0x0
c002cae7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002caeb:	56                   	push   esi
c002caec:	e8 ff 39 fd ff       	call   c00004f0 <memset>
c002caf1:	58                   	pop    eax
c002caf2:	5a                   	pop    edx
c002caf3:	6a 00                	push   0x0
c002caf5:	6a 00                	push   0x0
c002caf7:	6a 00                	push   0x0
c002caf9:	6a 00                	push   0x0
c002cafb:	56                   	push   esi
c002cafc:	53                   	push   ebx
c002cafd:	e8 82 fc ff ff       	call   c002c784 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002cb02:	83 c4 1c             	add    esp,0x1c
c002cb05:	6a 0c                	push   0xc
c002cb07:	6a 00                	push   0x0
c002cb09:	56                   	push   esi
c002cb0a:	e8 e1 39 fd ff       	call   c00004f0 <memset>
c002cb0f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002cb14:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002cb19:	59                   	pop    ecx
c002cb1a:	58                   	pop    eax
c002cb1b:	6a 01                	push   0x1
c002cb1d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002cb21:	50                   	push   eax
c002cb22:	6a 00                	push   0x0
c002cb24:	6a 12                	push   0x12
c002cb26:	56                   	push   esi
c002cb27:	53                   	push   ebx
c002cb28:	e8 57 fc ff ff       	call   c002c784 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002cb2d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002cb31:	83 c4 20             	add    esp,0x20
c002cb34:	83 e0 7f             	and    eax,0x7f
c002cb37:	83 f8 70             	cmp    eax,0x70
c002cb3a:	74 15                	je     c002cb51 <ATAPI::detectMedia()+0x77>
c002cb3c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cb43:	75 0c                	jne    c002cb51 <ATAPI::detectMedia()+0x77>
c002cb45:	83 ec 0c             	sub    esp,0xc
c002cb48:	53                   	push   ebx
c002cb49:	e8 80 ff ff ff       	call   c002cace <ATAPI::diskInserted()>
c002cb4e:	83 c4 10             	add    esp,0x10
c002cb51:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002cb55:	83 e0 0f             	and    eax,0xf
c002cb58:	83 f8 02             	cmp    eax,0x2
c002cb5b:	75 1b                	jne    c002cb78 <ATAPI::detectMedia()+0x9e>
c002cb5d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002cb62:	75 2d                	jne    c002cb91 <ATAPI::detectMedia()+0xb7>
c002cb64:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cb6b:	74 24                	je     c002cb91 <ATAPI::detectMedia()+0xb7>
c002cb6d:	83 ec 0c             	sub    esp,0xc
c002cb70:	53                   	push   ebx
c002cb71:	e8 d6 fe ff ff       	call   c002ca4c <ATAPI::diskRemoved()>
c002cb76:	eb 16                	jmp    c002cb8e <ATAPI::detectMedia()+0xb4>
c002cb78:	85 c0                	test   eax,eax
c002cb7a:	75 15                	jne    c002cb91 <ATAPI::detectMedia()+0xb7>
c002cb7c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cb83:	75 0c                	jne    c002cb91 <ATAPI::detectMedia()+0xb7>
c002cb85:	83 ec 0c             	sub    esp,0xc
c002cb88:	53                   	push   ebx
c002cb89:	e8 40 ff ff ff       	call   c002cace <ATAPI::diskInserted()>
c002cb8e:	83 c4 10             	add    esp,0x10
c002cb91:	83 c4 24             	add    esp,0x24
c002cb94:	5b                   	pop    ebx
c002cb95:	5e                   	pop    esi
c002cb96:	c3                   	ret    
c002cb97:	90                   	nop

c002cb98 <ATAPI::open(int, int, void*)>:
c002cb98:	56                   	push   esi
c002cb99:	53                   	push   ebx
c002cb9a:	50                   	push   eax
c002cb9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002cb9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002cba3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002cba7:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002cbad:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002cbb3:	c1 e0 06             	shl    eax,0x6
c002cbb6:	01 d0                	add    eax,edx
c002cbb8:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002cbbf:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002cbc5:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002cbcc:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002cbd6:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002cbdc:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002cbe3:	6a 04                	push   0x4
c002cbe5:	6a 0c                	push   0xc
c002cbe7:	51                   	push   ecx
c002cbe8:	52                   	push   edx
c002cbe9:	e8 32 e3 ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cbee:	90                   	nop
c002cbef:	90                   	nop
c002cbf0:	6a 00                	push   0x0
c002cbf2:	6a 0c                	push   0xc
c002cbf4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002cbfb:	50                   	push   eax
c002cbfc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002cc02:	e8 19 e3 ff ff       	call   c002af20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cc07:	83 c4 14             	add    esp,0x14
c002cc0a:	68 78 01 00 00       	push   0x178
c002cc0f:	e8 2f 9a fe ff       	call   c0016643 <malloc>
c002cc14:	83 c4 0c             	add    esp,0xc
c002cc17:	89 c6                	mov    esi,eax
c002cc19:	6a 00                	push   0x0
c002cc1b:	68 ff ff ff 7f       	push   0x7fffffff
c002cc20:	6a 00                	push   0x0
c002cc22:	6a 00                	push   0x0
c002cc24:	53                   	push   ebx
c002cc25:	68 57 3d 03 c0       	push   0xc0033d57
c002cc2a:	50                   	push   eax
c002cc2b:	e8 d8 fa fe ff       	call   c001c708 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002cc30:	83 c4 14             	add    esp,0x14
c002cc33:	56                   	push   esi
c002cc34:	e8 8f fb fe ff       	call   c001c7c8 <LogicalDisk::assignDriveLetter()>
c002cc39:	5a                   	pop    edx
c002cc3a:	0f be c0             	movsx  eax,al
c002cc3d:	59                   	pop    ecx
c002cc3e:	50                   	push   eax
c002cc3f:	68 9c 3b 03 c0       	push   0xc0033b9c
c002cc44:	e8 88 c8 fe ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c002cc49:	58                   	pop    eax
c002cc4a:	5a                   	pop    edx
c002cc4b:	56                   	push   esi
c002cc4c:	53                   	push   ebx
c002cc4d:	e8 00 e9 fe ff       	call   c001b552 <Device::addChild(Device*)>
c002cc52:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002cc58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002cc5b:	e8 3e ed fe ff       	call   c001b99e <PhysicalDisk::startCache()>
c002cc60:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002cc67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002cc6a:	e8 6b fe ff ff       	call   c002cada <ATAPI::detectMedia()>
c002cc6f:	83 c4 14             	add    esp,0x14
c002cc72:	31 c0                	xor    eax,eax
c002cc74:	5b                   	pop    ebx
c002cc75:	5e                   	pop    esi
c002cc76:	c3                   	ret    
c002cc77:	90                   	nop

c002cc78 <ATAPI::read(unsigned long long, int, void*)>:
c002cc78:	55                   	push   ebp
c002cc79:	57                   	push   edi
c002cc7a:	56                   	push   esi
c002cc7b:	53                   	push   ebx
c002cc7c:	83 ec 1c             	sub    esp,0x1c
c002cc7f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002cc83:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002cc87:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002cc8b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cc92:	74 3c                	je     c002ccd0 <ATAPI::read(unsigned long long, int, void*)+0x58>
c002cc94:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002cc98:	b9 03 00 00 00       	mov    ecx,0x3
c002cc9d:	fc                   	cld    
c002cc9e:	31 c0                	xor    eax,eax
c002cca0:	0f ce                	bswap  esi
c002cca2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002cca4:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002cca9:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c002ccad:	89 e8                	mov    eax,ebp
c002ccaf:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002ccb3:	50                   	push   eax
c002ccb4:	50                   	push   eax
c002ccb5:	55                   	push   ebp
c002ccb6:	c1 e5 0b             	shl    ebp,0xb
c002ccb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002ccbd:	6a 00                	push   0x0
c002ccbf:	55                   	push   ebp
c002ccc0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002ccc4:	50                   	push   eax
c002ccc5:	53                   	push   ebx
c002ccc6:	e8 b9 fa ff ff       	call   c002c784 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002cccb:	83 c4 20             	add    esp,0x20
c002ccce:	eb 1a                	jmp    c002ccea <ATAPI::read(unsigned long long, int, void*)+0x72>
c002ccd0:	83 ec 0c             	sub    esp,0xc
c002ccd3:	53                   	push   ebx
c002ccd4:	e8 01 fe ff ff       	call   c002cada <ATAPI::detectMedia()>
c002ccd9:	83 c4 10             	add    esp,0x10
c002ccdc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cce3:	75 af                	jne    c002cc94 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002cce5:	b8 02 00 00 00       	mov    eax,0x2
c002ccea:	83 c4 1c             	add    esp,0x1c
c002cced:	5b                   	pop    ebx
c002ccee:	5e                   	pop    esi
c002ccef:	5f                   	pop    edi
c002ccf0:	5d                   	pop    ebp
c002ccf1:	c3                   	ret    

c002ccf2 <SATA::close(int, int, void*)>:
c002ccf2:	83 ec 0c             	sub    esp,0xc
c002ccf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ccf9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002ccff:	85 c0                	test   eax,eax
c002cd01:	74 0c                	je     c002cd0f <SATA::close(int, int, void*)+0x1d>
c002cd03:	83 ec 0c             	sub    esp,0xc
c002cd06:	8b 10                	mov    edx,DWORD PTR [eax]
c002cd08:	50                   	push   eax
c002cd09:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002cd0c:	83 c4 10             	add    esp,0x10
c002cd0f:	31 c0                	xor    eax,eax
c002cd11:	83 c4 0c             	add    esp,0xc
c002cd14:	c3                   	ret    
c002cd15:	90                   	nop

c002cd16 <SATA::powerSaving(PowerSavingLevel)>:
c002cd16:	c3                   	ret    
c002cd17:	90                   	nop

c002cd18 <SATA::open(int, int, void*)>:
c002cd18:	56                   	push   esi
c002cd19:	53                   	push   ebx
c002cd1a:	83 ec 10             	sub    esp,0x10
c002cd1d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002cd21:	68 e4 3b 03 c0       	push   0xc0033be4
c002cd26:	e8 a6 c7 fe ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c002cd2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002cd2f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002cd39:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002cd3f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002cd49:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002cd4d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002cd57:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002cd5d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002cd64:	e8 e3 9b fe ff       	call   c001694c <Phys::allocatePage()>
c002cd69:	89 c6                	mov    esi,eax
c002cd6b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002cd71:	81 c6 00 10 00 00    	add    esi,0x1000
c002cd77:	e8 d0 9b fe ff       	call   c001694c <Phys::allocatePage()>
c002cd7c:	83 c4 10             	add    esp,0x10
c002cd7f:	39 c6                	cmp    esi,eax
c002cd81:	74 10                	je     c002cd93 <SATA::open(int, int, void*)+0x7b>
c002cd83:	83 ec 0c             	sub    esp,0xc
c002cd86:	68 f0 3b 03 c0       	push   0xc0033bf0
c002cd8b:	e8 5a 37 ff ff       	call   c00204ea <KePanic(char const*)>
c002cd90:	83 c4 10             	add    esp,0x10
c002cd93:	83 ec 0c             	sub    esp,0xc
c002cd96:	6a 02                	push   0x2
c002cd98:	e8 fc b3 fe ff       	call   c0018199 <Virt::allocateKernelVirtualPages(int)>
c002cd9d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002cda3:	6a 03                	push   0x3
c002cda5:	50                   	push   eax
c002cda6:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002cdac:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002cdb2:	e8 f5 ba fe ff       	call   c00188ac <VAS::mapPage(unsigned long, unsigned long, int)>
c002cdb7:	83 c4 14             	add    esp,0x14
c002cdba:	53                   	push   ebx
c002cdbb:	e8 de eb fe ff       	call   c001b99e <PhysicalDisk::startCache()>
c002cdc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002cdc3:	e8 12 fe fe ff       	call   c001cbda <createPartitionsForDisk(PhysicalDisk*)>
c002cdc8:	83 c4 14             	add    esp,0x14
c002cdcb:	31 c0                	xor    eax,eax
c002cdcd:	5b                   	pop    ebx
c002cdce:	5e                   	pop    esi
c002cdcf:	c3                   	ret    

c002cdd0 <SATA::SATA()>:
c002cdd0:	83 ec 0c             	sub    esp,0xc
c002cdd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cdd7:	83 ec 04             	sub    esp,0x4
c002cdda:	68 00 02 00 00       	push   0x200
c002cddf:	68 04 3c 03 c0       	push   0xc0033c04
c002cde4:	50                   	push   eax
c002cde5:	e8 4c eb fe ff       	call   c001b936 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002cdea:	83 c4 10             	add    esp,0x10
c002cded:	ba 74 3c 03 c0       	mov    edx,0xc0033c74
c002cdf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cdf6:	89 10                	mov    DWORD PTR [eax],edx
c002cdf8:	90                   	nop
c002cdf9:	83 c4 0c             	add    esp,0xc
c002cdfc:	c3                   	ret    
c002cdfd:	90                   	nop

c002cdfe <SATA::access(unsigned long long, int, void*, bool)>:
c002cdfe:	55                   	push   ebp
c002cdff:	57                   	push   edi
c002ce00:	56                   	push   esi
c002ce01:	53                   	push   ebx
c002ce02:	83 ec 2c             	sub    esp,0x2c
c002ce05:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002ce09:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002ce0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002ce11:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002ce15:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002ce19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002ce1d:	fa                   	cli    
c002ce1e:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002ce24:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002ce29:	7e 10                	jle    c002ce3b <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c002ce2b:	83 ec 0c             	sub    esp,0xc
c002ce2e:	68 14 3c 03 c0       	push   0xc0033c14
c002ce33:	e8 b2 36 ff ff       	call   c00204ea <KePanic(char const*)>
c002ce38:	83 c4 10             	add    esp,0x10
c002ce3b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002ce41:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002ce47:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002ce4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002ce51:	89 d0                	mov    eax,edx
c002ce53:	c1 e0 07             	shl    eax,0x7
c002ce56:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002ce5a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002ce64:	51                   	push   ecx
c002ce65:	8d 42 02             	lea    eax,[edx+0x2]
c002ce68:	51                   	push   ecx
c002ce69:	c1 e0 07             	shl    eax,0x7
c002ce6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002ce70:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002ce74:	50                   	push   eax
c002ce75:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002ce7b:	e8 68 ec ff ff       	call   c002bae8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002ce80:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002ce84:	83 c4 10             	add    esp,0x10
c002ce87:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002ce8c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ce90:	0f 84 aa 01 00 00    	je     c002d040 <SATA::access(unsigned long long, int, void*, bool)+0x242>
c002ce96:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002ce9a:	c1 e0 09             	shl    eax,0x9
c002ce9d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002cea2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002cea6:	74 0e                	je     c002ceb6 <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c002cea8:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002ceae:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002ceb2:	89 c1                	mov    ecx,eax
c002ceb4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002ceb6:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002cebc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002cec0:	8d 42 02             	lea    eax,[edx+0x2]
c002cec3:	c1 e0 07             	shl    eax,0x7
c002cec6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002ceca:	8b 00                	mov    eax,DWORD PTR [eax]
c002cecc:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002ced2:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002ced8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002cedc:	c1 e1 05             	shl    ecx,0x5
c002cedf:	01 c8                	add    eax,ecx
c002cee1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002cee5:	83 e1 01             	and    ecx,0x1
c002cee8:	89 ce                	mov    esi,ecx
c002ceea:	8a 08                	mov    cl,BYTE PTR [eax]
c002ceec:	c1 e6 06             	shl    esi,0x6
c002ceef:	83 e1 bf             	and    ecx,0xffffffbf
c002cef2:	09 f1                	or     ecx,esi
c002cef4:	88 08                	mov    BYTE PTR [eax],cl
c002cef6:	8b 08                	mov    ecx,DWORD PTR [eax]
c002cef8:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002cefe:	81 c9 05 00 01 00    	or     ecx,0x10005
c002cf04:	89 08                	mov    DWORD PTR [eax],ecx
c002cf06:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002cf0c:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002cf12:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002cf18:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002cf1b:	50                   	push   eax
c002cf1c:	68 90 00 00 00       	push   0x90
c002cf21:	6a 00                	push   0x0
c002cf23:	56                   	push   esi
c002cf24:	e8 c7 35 fd ff       	call   c00004f0 <memset>
c002cf29:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002cf2f:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002cf35:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002cf39:	83 c4 10             	add    esp,0x10
c002cf3c:	48                   	dec    eax
c002cf3d:	25 ff ff 3f 00       	and    eax,0x3fffff
c002cf42:	89 c1                	mov    ecx,eax
c002cf44:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002cf4a:	25 00 00 c0 ff       	and    eax,0xffc00000
c002cf4f:	09 c8                	or     eax,ecx
c002cf51:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002cf57:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c002cf5d:	83 c8 80             	or     eax,0xffffff80
c002cf60:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002cf66:	66 8b 06             	mov    ax,WORD PTR [esi]
c002cf69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002cf6d:	25 00 7f 00 00       	and    eax,0x7f00
c002cf72:	0d 27 80 ff ff       	or     eax,0xffff8027
c002cf77:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002cf7c:	66 89 06             	mov    WORD PTR [esi],ax
c002cf7f:	b0 35                	mov    al,0x35
c002cf81:	75 02                	jne    c002cf85 <SATA::access(unsigned long long, int, void*, bool)+0x187>
c002cf83:	b0 25                	mov    al,0x25
c002cf85:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002cf88:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c002cf8c:	89 e8                	mov    eax,ebp
c002cf8e:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002cf92:	c1 e8 10             	shr    eax,0x10
c002cf95:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002cf98:	89 e8                	mov    eax,ebp
c002cf9a:	c1 e8 18             	shr    eax,0x18
c002cf9d:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002cfa0:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002cfa4:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002cfa7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002cfab:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002cfae:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002cfb2:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002cfb6:	89 d6                	mov    esi,edx
c002cfb8:	31 c0                	xor    eax,eax
c002cfba:	c1 e6 07             	shl    esi,0x7
c002cfbd:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002cfc1:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002cfc7:	80 e1 88             	and    cl,0x88
c002cfca:	74 0a                	je     c002cfd6 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c002cfcc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002cfd1:	74 0a                	je     c002cfdd <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002cfd3:	40                   	inc    eax
c002cfd4:	eb eb                	jmp    c002cfc1 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c002cfd6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002cfdb:	75 0a                	jne    c002cfe7 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c002cfdd:	83 ec 0c             	sub    esp,0xc
c002cfe0:	68 4d 3c 03 c0       	push   0xc0033c4d
c002cfe5:	eb 36                	jmp    c002d01d <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c002cfe7:	b8 01 00 00 00       	mov    eax,0x1
c002cfec:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002cff0:	c1 e2 07             	shl    edx,0x7
c002cff3:	d3 e0                	shl    eax,cl
c002cff5:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c002cff9:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002cfff:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002d005:	85 c8                	test   eax,ecx
c002d007:	74 2b                	je     c002d034 <SATA::access(unsigned long long, int, void*, bool)+0x236>
c002d009:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002d00f:	0f ba e1 1e          	bt     ecx,0x1e
c002d013:	73 ea                	jae    c002cfff <SATA::access(unsigned long long, int, void*, bool)+0x201>
c002d015:	83 ec 0c             	sub    esp,0xc
c002d018:	68 5b 3c 03 c0       	push   0xc0033c5b
c002d01d:	e8 af c4 fe ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c002d022:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002d027:	83 c4 10             	add    esp,0x10
c002d02a:	48                   	dec    eax
c002d02b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002d030:	85 c0                	test   eax,eax
c002d032:	eb 17                	jmp    c002d04b <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c002d034:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002d03a:	0f ba e0 1e          	bt     eax,0x1e
c002d03e:	73 15                	jae    c002d055 <SATA::access(unsigned long long, int, void*, bool)+0x257>
c002d040:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002d045:	48                   	dec    eax
c002d046:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002d04b:	75 01                	jne    c002d04e <SATA::access(unsigned long long, int, void*, bool)+0x250>
c002d04d:	fb                   	sti    
c002d04e:	b8 01 00 00 00       	mov    eax,0x1
c002d053:	eb 29                	jmp    c002d07e <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002d055:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002d05a:	75 10                	jne    c002d06c <SATA::access(unsigned long long, int, void*, bool)+0x26e>
c002d05c:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002d062:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002d066:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002d06a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d06c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002d071:	48                   	dec    eax
c002d072:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002d077:	75 03                	jne    c002d07c <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002d079:	fb                   	sti    
c002d07a:	eb 02                	jmp    c002d07e <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002d07c:	31 c0                	xor    eax,eax
c002d07e:	83 c4 2c             	add    esp,0x2c
c002d081:	5b                   	pop    ebx
c002d082:	5e                   	pop    esi
c002d083:	5f                   	pop    edi
c002d084:	5d                   	pop    ebp
c002d085:	c3                   	ret    

c002d086 <SATA::read(unsigned long long, int, void*)>:
c002d086:	55                   	push   ebp
c002d087:	57                   	push   edi
c002d088:	56                   	push   esi
c002d089:	be 04 00 00 00       	mov    esi,0x4
c002d08e:	53                   	push   ebx
c002d08f:	83 ec 0c             	sub    esp,0xc
c002d092:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002d096:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002d09a:	8d 7b ff             	lea    edi,[ebx-0x1]
c002d09d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002d0a1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002d0a5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002d0ab:	0f 87 1a 02 00 00    	ja     c002d2cb <SATA::read(unsigned long long, int, void*)+0x245>
c002d0b1:	be 06 00 00 00       	mov    esi,0x6
c002d0b6:	85 c9                	test   ecx,ecx
c002d0b8:	0f 84 0d 02 00 00    	je     c002d2cb <SATA::read(unsigned long long, int, void*)+0x245>
c002d0be:	56                   	push   esi
c002d0bf:	56                   	push   esi
c002d0c0:	6a 00                	push   0x0
c002d0c2:	51                   	push   ecx
c002d0c3:	53                   	push   ebx
c002d0c4:	52                   	push   edx
c002d0c5:	50                   	push   eax
c002d0c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d0ca:	e8 2f fd ff ff       	call   c002cdfe <SATA::access(unsigned long long, int, void*, bool)>
c002d0cf:	83 c4 20             	add    esp,0x20
c002d0d2:	89 c6                	mov    esi,eax
c002d0d4:	85 c0                	test   eax,eax
c002d0d6:	0f 85 ea 01 00 00    	jne    c002d2c6 <SATA::read(unsigned long long, int, void*)+0x240>
c002d0dc:	01 1d b4 0b 04 c0    	add    DWORD PTR ds:0xc0040bb4,ebx
c002d0e2:	bb 0a 00 00 00       	mov    ebx,0xa
c002d0e7:	50                   	push   eax
c002d0e8:	50                   	push   eax
c002d0e9:	6a 0f                	push   0xf
c002d0eb:	6a 00                	push   0x0
c002d0ed:	e8 33 f2 ff ff       	call   c002c325 <combineColours(unsigned char, unsigned char)>
c002d0f2:	5a                   	pop    edx
c002d0f3:	0f b6 c0             	movzx  eax,al
c002d0f6:	59                   	pop    ecx
c002d0f7:	b9 10 27 00 00       	mov    ecx,0x2710
c002d0fc:	50                   	push   eax
c002d0fd:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d102:	99                   	cdq    
c002d103:	f7 f9                	idiv   ecx
c002d105:	99                   	cdq    
c002d106:	f7 fb                	idiv   ebx
c002d108:	8d 42 30             	lea    eax,[edx+0x30]
c002d10b:	0f b6 c0             	movzx  eax,al
c002d10e:	50                   	push   eax
c002d10f:	e8 00 f2 ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002d114:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002d11a:	5f                   	pop    edi
c002d11b:	5d                   	pop    ebp
c002d11c:	bd e8 03 00 00       	mov    ebp,0x3e8
c002d121:	6a 0f                	push   0xf
c002d123:	6a 00                	push   0x0
c002d125:	e8 fb f1 ff ff       	call   c002c325 <combineColours(unsigned char, unsigned char)>
c002d12a:	5a                   	pop    edx
c002d12b:	0f b6 c0             	movzx  eax,al
c002d12e:	59                   	pop    ecx
c002d12f:	50                   	push   eax
c002d130:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d135:	99                   	cdq    
c002d136:	f7 fd                	idiv   ebp
c002d138:	99                   	cdq    
c002d139:	f7 fb                	idiv   ebx
c002d13b:	8d 42 30             	lea    eax,[edx+0x30]
c002d13e:	0f b6 c0             	movzx  eax,al
c002d141:	50                   	push   eax
c002d142:	e8 cd f1 ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002d147:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d14d:	5f                   	pop    edi
c002d14e:	bf 64 00 00 00       	mov    edi,0x64
c002d153:	58                   	pop    eax
c002d154:	6a 0f                	push   0xf
c002d156:	6a 00                	push   0x0
c002d158:	e8 c8 f1 ff ff       	call   c002c325 <combineColours(unsigned char, unsigned char)>
c002d15d:	5a                   	pop    edx
c002d15e:	0f b6 c0             	movzx  eax,al
c002d161:	59                   	pop    ecx
c002d162:	50                   	push   eax
c002d163:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d168:	99                   	cdq    
c002d169:	f7 ff                	idiv   edi
c002d16b:	99                   	cdq    
c002d16c:	f7 fb                	idiv   ebx
c002d16e:	8d 42 30             	lea    eax,[edx+0x30]
c002d171:	0f b6 c0             	movzx  eax,al
c002d174:	50                   	push   eax
c002d175:	e8 9a f1 ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002d17a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d180:	58                   	pop    eax
c002d181:	5a                   	pop    edx
c002d182:	6a 0f                	push   0xf
c002d184:	6a 00                	push   0x0
c002d186:	e8 9a f1 ff ff       	call   c002c325 <combineColours(unsigned char, unsigned char)>
c002d18b:	59                   	pop    ecx
c002d18c:	0f b6 c0             	movzx  eax,al
c002d18f:	5a                   	pop    edx
c002d190:	50                   	push   eax
c002d191:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d196:	99                   	cdq    
c002d197:	f7 fb                	idiv   ebx
c002d199:	99                   	cdq    
c002d19a:	f7 fb                	idiv   ebx
c002d19c:	8d 42 30             	lea    eax,[edx+0x30]
c002d19f:	0f b6 c0             	movzx  eax,al
c002d1a2:	50                   	push   eax
c002d1a3:	e8 6c f1 ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002d1a8:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d1ae:	59                   	pop    ecx
c002d1af:	58                   	pop    eax
c002d1b0:	6a 0f                	push   0xf
c002d1b2:	6a 00                	push   0x0
c002d1b4:	e8 6c f1 ff ff       	call   c002c325 <combineColours(unsigned char, unsigned char)>
c002d1b9:	5a                   	pop    edx
c002d1ba:	0f b6 c0             	movzx  eax,al
c002d1bd:	59                   	pop    ecx
c002d1be:	50                   	push   eax
c002d1bf:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d1c4:	99                   	cdq    
c002d1c5:	f7 fb                	idiv   ebx
c002d1c7:	8d 42 30             	lea    eax,[edx+0x30]
c002d1ca:	0f b6 c0             	movzx  eax,al
c002d1cd:	50                   	push   eax
c002d1ce:	e8 41 f1 ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002d1d3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d1d9:	58                   	pop    eax
c002d1da:	5a                   	pop    edx
c002d1db:	6a 0f                	push   0xf
c002d1dd:	6a 00                	push   0x0
c002d1df:	e8 41 f1 ff ff       	call   c002c325 <combineColours(unsigned char, unsigned char)>
c002d1e4:	59                   	pop    ecx
c002d1e5:	0f b6 c0             	movzx  eax,al
c002d1e8:	5a                   	pop    edx
c002d1e9:	b9 10 27 00 00       	mov    ecx,0x2710
c002d1ee:	50                   	push   eax
c002d1ef:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d1f4:	99                   	cdq    
c002d1f5:	f7 f9                	idiv   ecx
c002d1f7:	99                   	cdq    
c002d1f8:	f7 fb                	idiv   ebx
c002d1fa:	8d 42 30             	lea    eax,[edx+0x30]
c002d1fd:	0f b6 c0             	movzx  eax,al
c002d200:	50                   	push   eax
c002d201:	e8 0e f1 ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002d206:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d20c:	59                   	pop    ecx
c002d20d:	58                   	pop    eax
c002d20e:	6a 0f                	push   0xf
c002d210:	6a 00                	push   0x0
c002d212:	e8 0e f1 ff ff       	call   c002c325 <combineColours(unsigned char, unsigned char)>
c002d217:	5a                   	pop    edx
c002d218:	0f b6 c0             	movzx  eax,al
c002d21b:	59                   	pop    ecx
c002d21c:	50                   	push   eax
c002d21d:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d222:	99                   	cdq    
c002d223:	f7 fd                	idiv   ebp
c002d225:	99                   	cdq    
c002d226:	f7 fb                	idiv   ebx
c002d228:	8d 42 30             	lea    eax,[edx+0x30]
c002d22b:	0f b6 c0             	movzx  eax,al
c002d22e:	50                   	push   eax
c002d22f:	e8 e0 f0 ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002d234:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d23a:	5d                   	pop    ebp
c002d23b:	58                   	pop    eax
c002d23c:	6a 0f                	push   0xf
c002d23e:	6a 00                	push   0x0
c002d240:	e8 e0 f0 ff ff       	call   c002c325 <combineColours(unsigned char, unsigned char)>
c002d245:	5a                   	pop    edx
c002d246:	0f b6 c0             	movzx  eax,al
c002d249:	59                   	pop    ecx
c002d24a:	50                   	push   eax
c002d24b:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d250:	99                   	cdq    
c002d251:	f7 ff                	idiv   edi
c002d253:	99                   	cdq    
c002d254:	f7 fb                	idiv   ebx
c002d256:	8d 42 30             	lea    eax,[edx+0x30]
c002d259:	0f b6 c0             	movzx  eax,al
c002d25c:	50                   	push   eax
c002d25d:	e8 b2 f0 ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002d262:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d268:	5f                   	pop    edi
c002d269:	5d                   	pop    ebp
c002d26a:	6a 0f                	push   0xf
c002d26c:	6a 00                	push   0x0
c002d26e:	e8 b2 f0 ff ff       	call   c002c325 <combineColours(unsigned char, unsigned char)>
c002d273:	5a                   	pop    edx
c002d274:	0f b6 c0             	movzx  eax,al
c002d277:	59                   	pop    ecx
c002d278:	50                   	push   eax
c002d279:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d27e:	99                   	cdq    
c002d27f:	f7 fb                	idiv   ebx
c002d281:	99                   	cdq    
c002d282:	f7 fb                	idiv   ebx
c002d284:	8d 42 30             	lea    eax,[edx+0x30]
c002d287:	0f b6 c0             	movzx  eax,al
c002d28a:	50                   	push   eax
c002d28b:	e8 84 f0 ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002d290:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d296:	5f                   	pop    edi
c002d297:	5d                   	pop    ebp
c002d298:	6a 0f                	push   0xf
c002d29a:	6a 00                	push   0x0
c002d29c:	e8 84 f0 ff ff       	call   c002c325 <combineColours(unsigned char, unsigned char)>
c002d2a1:	5a                   	pop    edx
c002d2a2:	0f b6 c0             	movzx  eax,al
c002d2a5:	59                   	pop    ecx
c002d2a6:	50                   	push   eax
c002d2a7:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d2ac:	99                   	cdq    
c002d2ad:	f7 fb                	idiv   ebx
c002d2af:	83 c2 30             	add    edx,0x30
c002d2b2:	0f b6 d2             	movzx  edx,dl
c002d2b5:	52                   	push   edx
c002d2b6:	e8 59 f0 ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002d2bb:	83 c4 10             	add    esp,0x10
c002d2be:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d2c4:	eb 05                	jmp    c002d2cb <SATA::read(unsigned long long, int, void*)+0x245>
c002d2c6:	be 01 00 00 00       	mov    esi,0x1
c002d2cb:	83 c4 0c             	add    esp,0xc
c002d2ce:	89 f0                	mov    eax,esi
c002d2d0:	5b                   	pop    ebx
c002d2d1:	5e                   	pop    esi
c002d2d2:	5f                   	pop    edi
c002d2d3:	5d                   	pop    ebp
c002d2d4:	c3                   	ret    
c002d2d5:	90                   	nop

c002d2d6 <SATA::write(unsigned long long, int, void*)>:
c002d2d6:	55                   	push   ebp
c002d2d7:	b8 04 00 00 00       	mov    eax,0x4
c002d2dc:	57                   	push   edi
c002d2dd:	56                   	push   esi
c002d2de:	53                   	push   ebx
c002d2df:	83 ec 1c             	sub    esp,0x1c
c002d2e2:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002d2e6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002d2ea:	8d 75 ff             	lea    esi,[ebp-0x1]
c002d2ed:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002d2f1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c002d2f5:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002d2fb:	0f 87 32 02 00 00    	ja     c002d533 <SATA::write(unsigned long long, int, void*)+0x25d>
c002d301:	b8 06 00 00 00       	mov    eax,0x6
c002d306:	85 ff                	test   edi,edi
c002d308:	0f 84 25 02 00 00    	je     c002d533 <SATA::write(unsigned long long, int, void*)+0x25d>
c002d30e:	89 ee                	mov    esi,ebp
c002d310:	c1 e6 09             	shl    esi,0x9
c002d313:	01 fe                	add    esi,edi
c002d315:	89 c8                	mov    eax,ecx
c002d317:	89 da                	mov    edx,ebx
c002d319:	83 c0 01             	add    eax,0x1
c002d31c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d320:	83 d2 00             	adc    edx,0x0
c002d323:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002d327:	50                   	push   eax
c002d328:	50                   	push   eax
c002d329:	6a 01                	push   0x1
c002d32b:	57                   	push   edi
c002d32c:	81 c7 00 02 00 00    	add    edi,0x200
c002d332:	6a 01                	push   0x1
c002d334:	53                   	push   ebx
c002d335:	51                   	push   ecx
c002d336:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002d33a:	e8 bf fa ff ff       	call   c002cdfe <SATA::access(unsigned long long, int, void*, bool)>
c002d33f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002d343:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002d347:	83 c4 20             	add    esp,0x20
c002d34a:	39 f7                	cmp    edi,esi
c002d34c:	75 c7                	jne    c002d315 <SATA::write(unsigned long long, int, void*)+0x3f>
c002d34e:	bb 0a 00 00 00       	mov    ebx,0xa
c002d353:	01 2d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebp
c002d359:	bd 10 27 00 00       	mov    ebp,0x2710
c002d35e:	50                   	push   eax
c002d35f:	50                   	push   eax
c002d360:	6a 0f                	push   0xf
c002d362:	6a 00                	push   0x0
c002d364:	e8 bc ef ff ff       	call   c002c325 <combineColours(unsigned char, unsigned char)>
c002d369:	5a                   	pop    edx
c002d36a:	0f b6 c0             	movzx  eax,al
c002d36d:	59                   	pop    ecx
c002d36e:	50                   	push   eax
c002d36f:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d374:	99                   	cdq    
c002d375:	f7 fd                	idiv   ebp
c002d377:	99                   	cdq    
c002d378:	f7 fb                	idiv   ebx
c002d37a:	8d 42 30             	lea    eax,[edx+0x30]
c002d37d:	0f b6 c0             	movzx  eax,al
c002d380:	50                   	push   eax
c002d381:	e8 8e ef ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002d386:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002d38c:	5e                   	pop    esi
c002d38d:	5f                   	pop    edi
c002d38e:	bf e8 03 00 00       	mov    edi,0x3e8
c002d393:	6a 0f                	push   0xf
c002d395:	6a 00                	push   0x0
c002d397:	e8 89 ef ff ff       	call   c002c325 <combineColours(unsigned char, unsigned char)>
c002d39c:	5a                   	pop    edx
c002d39d:	0f b6 c0             	movzx  eax,al
c002d3a0:	59                   	pop    ecx
c002d3a1:	50                   	push   eax
c002d3a2:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d3a7:	99                   	cdq    
c002d3a8:	f7 ff                	idiv   edi
c002d3aa:	99                   	cdq    
c002d3ab:	f7 fb                	idiv   ebx
c002d3ad:	8d 42 30             	lea    eax,[edx+0x30]
c002d3b0:	0f b6 c0             	movzx  eax,al
c002d3b3:	50                   	push   eax
c002d3b4:	e8 5b ef ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002d3b9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d3bf:	5e                   	pop    esi
c002d3c0:	be 64 00 00 00       	mov    esi,0x64
c002d3c5:	58                   	pop    eax
c002d3c6:	6a 0f                	push   0xf
c002d3c8:	6a 00                	push   0x0
c002d3ca:	e8 56 ef ff ff       	call   c002c325 <combineColours(unsigned char, unsigned char)>
c002d3cf:	5a                   	pop    edx
c002d3d0:	0f b6 c0             	movzx  eax,al
c002d3d3:	59                   	pop    ecx
c002d3d4:	50                   	push   eax
c002d3d5:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d3da:	99                   	cdq    
c002d3db:	f7 fe                	idiv   esi
c002d3dd:	99                   	cdq    
c002d3de:	f7 fb                	idiv   ebx
c002d3e0:	8d 42 30             	lea    eax,[edx+0x30]
c002d3e3:	0f b6 c0             	movzx  eax,al
c002d3e6:	50                   	push   eax
c002d3e7:	e8 28 ef ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002d3ec:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d3f2:	58                   	pop    eax
c002d3f3:	5a                   	pop    edx
c002d3f4:	6a 0f                	push   0xf
c002d3f6:	6a 00                	push   0x0
c002d3f8:	e8 28 ef ff ff       	call   c002c325 <combineColours(unsigned char, unsigned char)>
c002d3fd:	59                   	pop    ecx
c002d3fe:	0f b6 c0             	movzx  eax,al
c002d401:	5a                   	pop    edx
c002d402:	50                   	push   eax
c002d403:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d408:	99                   	cdq    
c002d409:	f7 fb                	idiv   ebx
c002d40b:	99                   	cdq    
c002d40c:	f7 fb                	idiv   ebx
c002d40e:	8d 42 30             	lea    eax,[edx+0x30]
c002d411:	0f b6 c0             	movzx  eax,al
c002d414:	50                   	push   eax
c002d415:	e8 fa ee ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002d41a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d420:	59                   	pop    ecx
c002d421:	58                   	pop    eax
c002d422:	6a 0f                	push   0xf
c002d424:	6a 00                	push   0x0
c002d426:	e8 fa ee ff ff       	call   c002c325 <combineColours(unsigned char, unsigned char)>
c002d42b:	5a                   	pop    edx
c002d42c:	0f b6 c0             	movzx  eax,al
c002d42f:	59                   	pop    ecx
c002d430:	50                   	push   eax
c002d431:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d436:	99                   	cdq    
c002d437:	f7 fb                	idiv   ebx
c002d439:	83 c2 30             	add    edx,0x30
c002d43c:	0f b6 d2             	movzx  edx,dl
c002d43f:	52                   	push   edx
c002d440:	e8 cf ee ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002d445:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d44b:	58                   	pop    eax
c002d44c:	5a                   	pop    edx
c002d44d:	6a 0f                	push   0xf
c002d44f:	6a 00                	push   0x0
c002d451:	e8 cf ee ff ff       	call   c002c325 <combineColours(unsigned char, unsigned char)>
c002d456:	59                   	pop    ecx
c002d457:	0f b6 c0             	movzx  eax,al
c002d45a:	5a                   	pop    edx
c002d45b:	50                   	push   eax
c002d45c:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d461:	99                   	cdq    
c002d462:	f7 fd                	idiv   ebp
c002d464:	99                   	cdq    
c002d465:	f7 fb                	idiv   ebx
c002d467:	8d 42 30             	lea    eax,[edx+0x30]
c002d46a:	0f b6 c0             	movzx  eax,al
c002d46d:	50                   	push   eax
c002d46e:	e8 a1 ee ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002d473:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d479:	59                   	pop    ecx
c002d47a:	5d                   	pop    ebp
c002d47b:	6a 0f                	push   0xf
c002d47d:	6a 00                	push   0x0
c002d47f:	e8 a1 ee ff ff       	call   c002c325 <combineColours(unsigned char, unsigned char)>
c002d484:	5a                   	pop    edx
c002d485:	0f b6 c0             	movzx  eax,al
c002d488:	59                   	pop    ecx
c002d489:	50                   	push   eax
c002d48a:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d48f:	99                   	cdq    
c002d490:	f7 ff                	idiv   edi
c002d492:	99                   	cdq    
c002d493:	f7 fb                	idiv   ebx
c002d495:	8d 42 30             	lea    eax,[edx+0x30]
c002d498:	0f b6 c0             	movzx  eax,al
c002d49b:	50                   	push   eax
c002d49c:	e8 73 ee ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002d4a1:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d4a7:	5f                   	pop    edi
c002d4a8:	5d                   	pop    ebp
c002d4a9:	6a 0f                	push   0xf
c002d4ab:	6a 00                	push   0x0
c002d4ad:	e8 73 ee ff ff       	call   c002c325 <combineColours(unsigned char, unsigned char)>
c002d4b2:	5a                   	pop    edx
c002d4b3:	0f b6 c0             	movzx  eax,al
c002d4b6:	59                   	pop    ecx
c002d4b7:	50                   	push   eax
c002d4b8:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d4bd:	99                   	cdq    
c002d4be:	f7 fe                	idiv   esi
c002d4c0:	99                   	cdq    
c002d4c1:	f7 fb                	idiv   ebx
c002d4c3:	8d 42 30             	lea    eax,[edx+0x30]
c002d4c6:	0f b6 c0             	movzx  eax,al
c002d4c9:	50                   	push   eax
c002d4ca:	e8 45 ee ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002d4cf:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d4d5:	5e                   	pop    esi
c002d4d6:	5f                   	pop    edi
c002d4d7:	6a 0f                	push   0xf
c002d4d9:	6a 00                	push   0x0
c002d4db:	e8 45 ee ff ff       	call   c002c325 <combineColours(unsigned char, unsigned char)>
c002d4e0:	5d                   	pop    ebp
c002d4e1:	0f b6 c0             	movzx  eax,al
c002d4e4:	5a                   	pop    edx
c002d4e5:	50                   	push   eax
c002d4e6:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d4eb:	99                   	cdq    
c002d4ec:	f7 fb                	idiv   ebx
c002d4ee:	99                   	cdq    
c002d4ef:	f7 fb                	idiv   ebx
c002d4f1:	8d 42 30             	lea    eax,[edx+0x30]
c002d4f4:	0f b6 c0             	movzx  eax,al
c002d4f7:	50                   	push   eax
c002d4f8:	e8 17 ee ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002d4fd:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d503:	59                   	pop    ecx
c002d504:	5e                   	pop    esi
c002d505:	6a 0f                	push   0xf
c002d507:	6a 00                	push   0x0
c002d509:	e8 17 ee ff ff       	call   c002c325 <combineColours(unsigned char, unsigned char)>
c002d50e:	5f                   	pop    edi
c002d50f:	0f b6 c0             	movzx  eax,al
c002d512:	5d                   	pop    ebp
c002d513:	50                   	push   eax
c002d514:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d519:	99                   	cdq    
c002d51a:	f7 fb                	idiv   ebx
c002d51c:	83 c2 30             	add    edx,0x30
c002d51f:	0f b6 d2             	movzx  edx,dl
c002d522:	52                   	push   edx
c002d523:	e8 ec ed ff ff       	call   c002c314 <combineCharAndColour(char, unsigned char)>
c002d528:	83 c4 10             	add    esp,0x10
c002d52b:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d531:	31 c0                	xor    eax,eax
c002d533:	83 c4 1c             	add    esp,0x1c
c002d536:	5b                   	pop    ebx
c002d537:	5e                   	pop    esi
c002d538:	5f                   	pop    edi
c002d539:	5d                   	pop    ebp
c002d53a:	c3                   	ret    
c002d53b:	90                   	nop

c002d53c <SATAPI::write(unsigned long long, int, void*)>:
c002d53c:	b8 03 00 00 00       	mov    eax,0x3
c002d541:	c3                   	ret    

c002d542 <SATAPI::close(int, int, void*)>:
c002d542:	83 ec 0c             	sub    esp,0xc
c002d545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d549:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d54f:	85 c0                	test   eax,eax
c002d551:	74 0c                	je     c002d55f <SATAPI::close(int, int, void*)+0x1d>
c002d553:	83 ec 0c             	sub    esp,0xc
c002d556:	8b 10                	mov    edx,DWORD PTR [eax]
c002d558:	50                   	push   eax
c002d559:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002d55c:	83 c4 10             	add    esp,0x10
c002d55f:	31 c0                	xor    eax,eax
c002d561:	83 c4 0c             	add    esp,0xc
c002d564:	c3                   	ret    
c002d565:	90                   	nop

c002d566 <SATAPI::SATAPI()>:
c002d566:	83 ec 0c             	sub    esp,0xc
c002d569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d56d:	83 ec 04             	sub    esp,0x4
c002d570:	68 00 08 00 00       	push   0x800
c002d575:	68 a4 3c 03 c0       	push   0xc0033ca4
c002d57a:	50                   	push   eax
c002d57b:	e8 b6 e3 fe ff       	call   c001b936 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002d580:	83 c4 10             	add    esp,0x10
c002d583:	ba 98 3d 03 c0       	mov    edx,0xc0033d98
c002d588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d58c:	89 10                	mov    DWORD PTR [eax],edx
c002d58e:	90                   	nop
c002d58f:	83 c4 0c             	add    esp,0xc
c002d592:	c3                   	ret    
c002d593:	90                   	nop

c002d594 <SATAPI::diskRemoved()>:
c002d594:	c3                   	ret    
c002d595:	90                   	nop

c002d596 <SATAPI::diskInserted()>:
c002d596:	83 ec 18             	sub    esp,0x18
c002d599:	68 b0 3c 03 c0       	push   0xc0033cb0
c002d59e:	e8 2e bf fe ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c002d5a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d5a7:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002d5ae:	83 c4 1c             	add    esp,0x1c
c002d5b1:	c3                   	ret    

c002d5b2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002d5b2:	55                   	push   ebp
c002d5b3:	57                   	push   edi
c002d5b4:	56                   	push   esi
c002d5b5:	53                   	push   ebx
c002d5b6:	83 ec 34             	sub    esp,0x34
c002d5b9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002d5bd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d5c1:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c002d5c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d5c9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002d5cd:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002d5d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002d5d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002d5dd:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002d5e3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002d5e7:	83 c0 02             	add    eax,0x2
c002d5ea:	c1 e0 07             	shl    eax,0x7
c002d5ed:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d5f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002d5f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d5f9:	c1 e0 07             	shl    eax,0x7
c002d5fc:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d600:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002d604:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002d60e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d612:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d618:	e8 cb e4 ff ff       	call   c002bae8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002d61d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d621:	83 c4 10             	add    esp,0x10
c002d624:	b8 01 00 00 00       	mov    eax,0x1
c002d629:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002d62e:	0f 84 53 02 00 00    	je     c002d887 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c002d634:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d63a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002d63e:	8b 00                	mov    eax,DWORD PTR [eax]
c002d640:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002d646:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002d64c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002d650:	c1 e1 05             	shl    ecx,0x5
c002d653:	01 c8                	add    eax,ecx
c002d655:	8b 08                	mov    ecx,DWORD PTR [eax]
c002d657:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002d65d:	81 c9 25 00 01 00    	or     ecx,0x10025
c002d663:	89 08                	mov    DWORD PTR [eax],ecx
c002d665:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d66b:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002d671:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002d677:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002d67a:	8d 7b 40             	lea    edi,[ebx+0x40]
c002d67d:	50                   	push   eax
c002d67e:	68 90 00 00 00       	push   0x90
c002d683:	6a 00                	push   0x0
c002d685:	53                   	push   ebx
c002d686:	e8 65 2e fd ff       	call   c00004f0 <memset>
c002d68b:	b9 0c 00 00 00       	mov    ecx,0xc
c002d690:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002d694:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d696:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002d69c:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002d6a0:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002d6a6:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002d6aa:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d6ae:	48                   	dec    eax
c002d6af:	25 ff ff 3f 00       	and    eax,0x3fffff
c002d6b4:	89 c1                	mov    ecx,eax
c002d6b6:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002d6bc:	25 00 00 c0 ff       	and    eax,0xffc00000
c002d6c1:	09 c8                	or     eax,ecx
c002d6c3:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002d6c9:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c002d6cf:	83 c8 80             	or     eax,0xffffff80
c002d6d2:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c002d6d8:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002d6db:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002d6df:	25 00 7f 00 00       	and    eax,0x7f00
c002d6e4:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c002d6e8:	0d 27 80 ff ff       	or     eax,0xffff8027
c002d6ed:	66 89 03             	mov    WORD PTR [ebx],ax
c002d6f0:	89 d0                	mov    eax,edx
c002d6f2:	c1 ea 18             	shr    edx,0x18
c002d6f5:	c1 e8 10             	shr    eax,0x10
c002d6f8:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002d6fb:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002d6fe:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002d702:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002d705:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002d709:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002d70c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002d710:	83 c4 10             	add    esp,0x10
c002d713:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002d717:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002d71b:	31 c0                	xor    eax,eax
c002d71d:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002d723:	80 e1 88             	and    cl,0x88
c002d726:	74 0a                	je     c002d732 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c002d728:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d72d:	74 0a                	je     c002d739 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c002d72f:	40                   	inc    eax
c002d730:	eb eb                	jmp    c002d71d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002d732:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d737:	75 43                	jne    c002d77c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c002d739:	83 ec 0c             	sub    esp,0xc
c002d73c:	68 c8 3c 03 c0       	push   0xc0033cc8
c002d741:	e8 8b bd fe ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c002d746:	58                   	pop    eax
c002d747:	5a                   	pop    edx
c002d748:	68 dd 3c 03 c0       	push   0xc0033cdd
c002d74d:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002d753:	e8 da 9e fe ff       	call   c0017632 <VgaText::puts(char const*)>
c002d758:	59                   	pop    ecx
c002d759:	5b                   	pop    ebx
c002d75a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d75e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d764:	e8 19 e4 ff ff       	call   c002bb82 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002d769:	5e                   	pop    esi
c002d76a:	5f                   	pop    edi
c002d76b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d76f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d775:	e8 e8 e3 ff ff       	call   c002bb62 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002d77a:	eb 48                	jmp    c002d7c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c002d77c:	be 01 00 00 00       	mov    esi,0x1
c002d781:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002d785:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002d789:	d3 e6                	shl    esi,cl
c002d78b:	c1 e7 07             	shl    edi,0x7
c002d78e:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c002d794:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c002d799:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002d79d:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c002d7a3:	85 c6                	test   esi,eax
c002d7a5:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002d7ab:	0f 84 a3 00 00 00    	je     c002d854 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c002d7b1:	0f ba e0 1e          	bt     eax,0x1e
c002d7b5:	73 1a                	jae    c002d7d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c002d7b7:	83 ec 0c             	sub    esp,0xc
c002d7ba:	68 ef 3c 03 c0       	push   0xc0033cef
c002d7bf:	e8 0d bd fe ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c002d7c4:	83 c4 10             	add    esp,0x10
c002d7c7:	b8 01 00 00 00       	mov    eax,0x1
c002d7cc:	e9 b6 00 00 00       	jmp    c002d887 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c002d7d1:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c002d7d7:	83 f8 0d             	cmp    eax,0xd
c002d7da:	77 0a                	ja     c002d7e6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c002d7dc:	83 ec 0c             	sub    esp,0xc
c002d7df:	68 c8 00 00 00       	push   0xc8
c002d7e4:	eb 28                	jmp    c002d80e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c002d7e6:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c002d7ec:	83 f8 0d             	cmp    eax,0xd
c002d7ef:	77 0a                	ja     c002d7fb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c002d7f1:	83 ec 0c             	sub    esp,0xc
c002d7f4:	68 58 02 00 00       	push   0x258
c002d7f9:	eb 13                	jmp    c002d80e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c002d7fb:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c002d801:	83 f8 06             	cmp    eax,0x6
c002d804:	77 10                	ja     c002d816 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002d806:	83 ec 0c             	sub    esp,0xc
c002d809:	68 dc 05 00 00       	push   0x5dc
c002d80e:	e8 c5 7e ff ff       	call   c00256d8 <milliTenthSleep(unsigned int)>
c002d813:	83 c4 10             	add    esp,0x10
c002d816:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d81a:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002d81d:	75 06                	jne    c002d825 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c002d81f:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c002d823:	74 15                	je     c002d83a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c002d825:	83 fb 06             	cmp    ebx,0x6
c002d828:	77 10                	ja     c002d83a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c002d82a:	83 ec 0c             	sub    esp,0xc
c002d82d:	68 c4 09 00 00       	push   0x9c4
c002d832:	e8 a1 7e ff ff       	call   c00256d8 <milliTenthSleep(unsigned int)>
c002d837:	83 c4 10             	add    esp,0x10
c002d83a:	43                   	inc    ebx
c002d83b:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c002d841:	0f 85 56 ff ff ff    	jne    c002d79d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c002d847:	83 ec 0c             	sub    esp,0xc
c002d84a:	68 02 3d 03 c0       	push   0xc0033d02
c002d84f:	e9 6b ff ff ff       	jmp    c002d7bf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002d854:	0f ba e0 1e          	bt     eax,0x1e
c002d858:	73 0d                	jae    c002d867 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c002d85a:	83 ec 0c             	sub    esp,0xc
c002d85d:	68 16 3d 03 c0       	push   0xc0033d16
c002d862:	e9 58 ff ff ff       	jmp    c002d7bf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002d867:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002d86c:	74 17                	je     c002d885 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c002d86e:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002d873:	74 10                	je     c002d885 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c002d875:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002d87b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002d87f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002d883:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d885:	31 c0                	xor    eax,eax
c002d887:	83 c4 2c             	add    esp,0x2c
c002d88a:	5b                   	pop    ebx
c002d88b:	5e                   	pop    esi
c002d88c:	5f                   	pop    edi
c002d88d:	5d                   	pop    ebp
c002d88e:	c3                   	ret    
c002d88f:	90                   	nop

c002d890 <SATAPI::eject()>:
c002d890:	57                   	push   edi
c002d891:	b9 03 00 00 00       	mov    ecx,0x3
c002d896:	83 ec 18             	sub    esp,0x18
c002d899:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002d89d:	fc                   	cld    
c002d89e:	31 c0                	xor    eax,eax
c002d8a0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d8a2:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002d8a7:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002d8ac:	50                   	push   eax
c002d8ad:	6a 00                	push   0x0
c002d8af:	6a 00                	push   0x0
c002d8b1:	6a 00                	push   0x0
c002d8b3:	6a 00                	push   0x0
c002d8b5:	6a 02                	push   0x2
c002d8b7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002d8bb:	50                   	push   eax
c002d8bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d8c0:	e8 ed fc ff ff       	call   c002d5b2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d8c5:	31 c0                	xor    eax,eax
c002d8c7:	83 c4 38             	add    esp,0x38
c002d8ca:	5f                   	pop    edi
c002d8cb:	c3                   	ret    

c002d8cc <SATAPI::detectMedia()>:
c002d8cc:	53                   	push   ebx
c002d8cd:	83 ec 14             	sub    esp,0x14
c002d8d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002d8d4:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d8da:	e8 c9 f9 fe ff       	call   c001d2a8 <VCache::writeWriteBuffer()>
c002d8df:	59                   	pop    ecx
c002d8e0:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d8e6:	e8 ad f9 fe ff       	call   c001d298 <VCache::invalidateReadBuffer()>
c002d8eb:	c7 04 24 2b 3d 03 c0 	mov    DWORD PTR [esp],0xc0033d2b
c002d8f2:	e8 da bb fe ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c002d8f7:	83 c4 10             	add    esp,0x10
c002d8fa:	31 c0                	xor    eax,eax
c002d8fc:	8b 14 85 80 f3 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0c80]
c002d903:	85 d2                	test   edx,edx
c002d905:	74 0f                	je     c002d916 <SATAPI::detectMedia()+0x4a>
c002d907:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002d90d:	75 07                	jne    c002d916 <SATAPI::detectMedia()+0x4a>
c002d90f:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c002d916:	40                   	inc    eax
c002d917:	83 f8 1a             	cmp    eax,0x1a
c002d91a:	75 e0                	jne    c002d8fc <SATAPI::detectMedia()+0x30>
c002d91c:	83 c4 08             	add    esp,0x8
c002d91f:	5b                   	pop    ebx
c002d920:	c3                   	ret    
c002d921:	90                   	nop

c002d922 <SATAPI::open(int, int, void*)>:
c002d922:	56                   	push   esi
c002d923:	53                   	push   ebx
c002d924:	51                   	push   ecx
c002d925:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002d929:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002d92d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002d937:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002d93d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002d947:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d94b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002d955:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002d95b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002d962:	e8 e5 8f fe ff       	call   c001694c <Phys::allocatePage()>
c002d967:	89 c6                	mov    esi,eax
c002d969:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002d96f:	81 c6 00 10 00 00    	add    esi,0x1000
c002d975:	e8 d2 8f fe ff       	call   c001694c <Phys::allocatePage()>
c002d97a:	39 c6                	cmp    esi,eax
c002d97c:	74 10                	je     c002d98e <SATAPI::open(int, int, void*)+0x6c>
c002d97e:	83 ec 0c             	sub    esp,0xc
c002d981:	68 40 3d 03 c0       	push   0xc0033d40
c002d986:	e8 5f 2b ff ff       	call   c00204ea <KePanic(char const*)>
c002d98b:	83 c4 10             	add    esp,0x10
c002d98e:	83 ec 0c             	sub    esp,0xc
c002d991:	6a 02                	push   0x2
c002d993:	e8 01 a8 fe ff       	call   c0018199 <Virt::allocateKernelVirtualPages(int)>
c002d998:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002d99e:	6a 03                	push   0x3
c002d9a0:	50                   	push   eax
c002d9a1:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002d9a7:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002d9ad:	e8 fa ae fe ff       	call   c00188ac <VAS::mapPage(unsigned long, unsigned long, int)>
c002d9b2:	83 c4 14             	add    esp,0x14
c002d9b5:	68 78 01 00 00       	push   0x178
c002d9ba:	e8 84 8c fe ff       	call   c0016643 <malloc>
c002d9bf:	83 c4 0c             	add    esp,0xc
c002d9c2:	89 c6                	mov    esi,eax
c002d9c4:	6a 00                	push   0x0
c002d9c6:	68 ff ff ff 7f       	push   0x7fffffff
c002d9cb:	6a 00                	push   0x0
c002d9cd:	6a 00                	push   0x0
c002d9cf:	53                   	push   ebx
c002d9d0:	68 56 3d 03 c0       	push   0xc0033d56
c002d9d5:	50                   	push   eax
c002d9d6:	e8 2d ed fe ff       	call   c001c708 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002d9db:	83 c4 14             	add    esp,0x14
c002d9de:	56                   	push   esi
c002d9df:	e8 e4 ed fe ff       	call   c001c7c8 <LogicalDisk::assignDriveLetter()>
c002d9e4:	5a                   	pop    edx
c002d9e5:	0f be c0             	movsx  eax,al
c002d9e8:	59                   	pop    ecx
c002d9e9:	50                   	push   eax
c002d9ea:	68 9c 3b 03 c0       	push   0xc0033b9c
c002d9ef:	e8 dd ba fe ff       	call   c00194d1 <Dbg::kprintf(char const*, ...)>
c002d9f4:	58                   	pop    eax
c002d9f5:	5a                   	pop    edx
c002d9f6:	56                   	push   esi
c002d9f7:	53                   	push   ebx
c002d9f8:	e8 55 db fe ff       	call   c001b552 <Device::addChild(Device*)>
c002d9fd:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002da03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002da06:	e8 93 df fe ff       	call   c001b99e <PhysicalDisk::startCache()>
c002da0b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002da12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002da15:	e8 b2 fe ff ff       	call   c002d8cc <SATAPI::detectMedia()>
c002da1a:	83 c4 14             	add    esp,0x14
c002da1d:	31 c0                	xor    eax,eax
c002da1f:	5b                   	pop    ebx
c002da20:	5e                   	pop    esi
c002da21:	c3                   	ret    

c002da22 <SATAPI::read(unsigned long long, int, void*)>:
c002da22:	57                   	push   edi
c002da23:	56                   	push   esi
c002da24:	53                   	push   ebx
c002da25:	83 ec 30             	sub    esp,0x30
c002da28:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002da2c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c002da30:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c002da34:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002da38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002da3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002da40:	83 fe 04             	cmp    esi,0x4
c002da43:	7e 10                	jle    c002da55 <SATAPI::read(unsigned long long, int, void*)+0x33>
c002da45:	83 ec 0c             	sub    esp,0xc
c002da48:	68 64 3d 03 c0       	push   0xc0033d64
c002da4d:	e8 98 2a ff ff       	call   c00204ea <KePanic(char const*)>
c002da52:	83 c4 10             	add    esp,0x10
c002da55:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002da5b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002da61:	51                   	push   ecx
c002da62:	50                   	push   eax
c002da63:	83 c0 02             	add    eax,0x2
c002da66:	c1 e0 07             	shl    eax,0x7
c002da69:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c002da6f:	50                   	push   eax
c002da70:	52                   	push   edx
c002da71:	e8 36 e1 ff ff       	call   c002bbac <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002da76:	8d 7c 24 28          	lea    edi,[esp+0x28]
c002da7a:	b9 03 00 00 00       	mov    ecx,0x3
c002da7f:	fc                   	cld    
c002da80:	31 c0                	xor    eax,eax
c002da82:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002da84:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002da89:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c002da8e:	83 c4 0c             	add    esp,0xc
c002da91:	6a 00                	push   0x0
c002da93:	6a 00                	push   0x0
c002da95:	6a 00                	push   0x0
c002da97:	6a 00                	push   0x0
c002da99:	6a 02                	push   0x2
c002da9b:	8d 44 24 30          	lea    eax,[esp+0x30]
c002da9f:	50                   	push   eax
c002daa0:	53                   	push   ebx
c002daa1:	e8 0c fb ff ff       	call   c002d5b2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002daa6:	83 c4 20             	add    esp,0x20
c002daa9:	85 c0                	test   eax,eax
c002daab:	75 44                	jne    c002daf1 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c002daad:	8d 7c 24 24          	lea    edi,[esp+0x24]
c002dab1:	b9 03 00 00 00       	mov    ecx,0x3
c002dab6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002dab8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002dabc:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c002dac1:	0f c8                	bswap  eax
c002dac3:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c002dac7:	89 f0                	mov    eax,esi
c002dac9:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002dacd:	50                   	push   eax
c002dace:	56                   	push   esi
c002dacf:	c1 e6 0b             	shl    esi,0xb
c002dad2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002dad6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002dada:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002dade:	56                   	push   esi
c002dadf:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002dae3:	50                   	push   eax
c002dae4:	53                   	push   ebx
c002dae5:	e8 c8 fa ff ff       	call   c002d5b2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002daea:	83 c4 20             	add    esp,0x20
c002daed:	85 c0                	test   eax,eax
c002daef:	74 14                	je     c002db05 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c002daf1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002daf5:	83 ec 0c             	sub    esp,0xc
c002daf8:	53                   	push   ebx
c002daf9:	e8 ce fd ff ff       	call   c002d8cc <SATAPI::detectMedia()>
c002dafe:	83 c4 10             	add    esp,0x10
c002db01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002db05:	83 c4 30             	add    esp,0x30
c002db08:	5b                   	pop    ebx
c002db09:	5e                   	pop    esi
c002db0a:	5f                   	pop    edi
c002db0b:	c3                   	ret    

c002db0c <IOAPIC::close(int, int, void*)>:
c002db0c:	b8 00 00 00 00       	mov    eax,0x0
c002db11:	c3                   	ret    

c002db12 <apicGetBase()>:
c002db12:	55                   	push   ebp
c002db13:	89 e5                	mov    ebp,esp
c002db15:	83 ec 18             	sub    esp,0x18
c002db18:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002db1d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c002db23:	83 e0 08             	and    eax,0x8
c002db26:	0f b6 c0             	movzx  eax,al
c002db29:	85 c0                	test   eax,eax
c002db2b:	75 07                	jne    c002db34 <apicGetBase()+0x22>
c002db2d:	b8 00 00 00 00       	mov    eax,0x0
c002db32:	eb 21                	jmp    c002db55 <apicGetBase()+0x43>
c002db34:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002db39:	83 ec 08             	sub    esp,0x8
c002db3c:	6a 1b                	push   0x1b
c002db3e:	50                   	push   eax
c002db3f:	e8 1c 80 fe ff       	call   c0015b60 <Computer::rdmsr(unsigned int)>
c002db44:	83 c4 10             	add    esp,0x10
c002db47:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002db4a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002db4d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002db50:	25 00 00 ff ff       	and    eax,0xffff0000
c002db55:	c9                   	leave  
c002db56:	c3                   	ret    
c002db57:	90                   	nop

c002db58 <IOAPIC::IOAPIC()>:
c002db58:	83 ec 0c             	sub    esp,0xc
c002db5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002db5f:	83 ec 08             	sub    esp,0x8
c002db62:	68 c8 3d 03 c0       	push   0xc0033dc8
c002db67:	50                   	push   eax
c002db68:	e8 47 db fe ff       	call   c001b6b4 <Device::Device(char const*)>
c002db6d:	83 c4 10             	add    esp,0x10
c002db70:	ba d8 3d 03 c0       	mov    edx,0xc0033dd8
c002db75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002db79:	89 10                	mov    DWORD PTR [eax],edx
c002db7b:	90                   	nop
c002db7c:	83 c4 0c             	add    esp,0xc
c002db7f:	c3                   	ret    

c002db80 <apicOpen()>:
c002db80:	55                   	push   ebp
c002db81:	89 e5                	mov    ebp,esp
c002db83:	53                   	push   ebx
c002db84:	83 ec 34             	sub    esp,0x34
c002db87:	a0 00 0c 04 c0       	mov    al,ds:0xc0040c00
c002db8c:	83 f0 01             	xor    eax,0x1
c002db8f:	0f b6 c0             	movzx  eax,al
c002db92:	85 c0                	test   eax,eax
c002db94:	0f 84 a3 00 00 00    	je     c002dc3d <apicOpen()+0xbd>
c002db9a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c002db9e:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c002dba3:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002dba7:	0f b6 c0             	movzx  eax,al
c002dbaa:	39 c2                	cmp    edx,eax
c002dbac:	0f 83 84 00 00 00    	jae    c002dc36 <apicOpen()+0xb6>
c002dbb2:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c002dbb9:	83 ec 0c             	sub    esp,0xc
c002dbbc:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002dbbf:	e8 7f 8a fe ff       	call   c0016643 <malloc>
c002dbc4:	83 c4 10             	add    esp,0x10
c002dbc7:	89 c3                	mov    ebx,eax
c002dbc9:	83 ec 0c             	sub    esp,0xc
c002dbcc:	53                   	push   ebx
c002dbcd:	e8 86 ff ff ff       	call   c002db58 <IOAPIC::IOAPIC()>
c002dbd2:	83 c4 10             	add    esp,0x10
c002dbd5:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002dbd8:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c002dbdc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002dbdf:	89 14 85 e0 0b 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf420],edx
c002dbe6:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c002dbeb:	83 c0 01             	add    eax,0x1
c002dbee:	a3 c0 0b 04 c0       	mov    ds:0xc0040bc0,eax
c002dbf3:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002dbf8:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c002dbfe:	83 ec 08             	sub    esp,0x8
c002dc01:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002dc04:	50                   	push   eax
c002dc05:	e8 48 d9 fe ff       	call   c001b552 <Device::addChild(Device*)>
c002dc0a:	83 c4 10             	add    esp,0x10
c002dc0d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002dc10:	8b 00                	mov    eax,DWORD PTR [eax]
c002dc12:	83 c0 08             	add    eax,0x8
c002dc15:	8b 00                	mov    eax,DWORD PTR [eax]
c002dc17:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002dc1b:	6a 00                	push   0x0
c002dc1d:	6a 00                	push   0x0
c002dc1f:	52                   	push   edx
c002dc20:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002dc23:	ff d0                	call   eax
c002dc25:	83 c4 10             	add    esp,0x10
c002dc28:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c002dc2b:	83 c0 01             	add    eax,0x1
c002dc2e:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c002dc31:	e9 68 ff ff ff       	jmp    c002db9e <apicOpen()+0x1e>
c002dc36:	c6 05 00 0c 04 c0 01 	mov    BYTE PTR ds:0xc0040c00,0x1
c002dc3d:	e8 d0 fe ff ff       	call   c002db12 <apicGetBase()>
c002dc42:	05 f0 00 00 00       	add    eax,0xf0
c002dc47:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002dc4a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002dc4d:	8b 00                	mov    eax,DWORD PTR [eax]
c002dc4f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002dc52:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c002dc59:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c002dc60:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002dc63:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002dc66:	89 10                	mov    DWORD PTR [eax],edx
c002dc68:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c002dc6f:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c002dc74:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c002dc77:	7d 7c                	jge    c002dcf5 <apicOpen()+0x175>
c002dc79:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dc7c:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002dc83:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c002dc86:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dc89:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002dc90:	c1 e8 08             	shr    eax,0x8
c002dc93:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c002dc97:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dc9a:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002dca1:	c1 e8 18             	shr    eax,0x18
c002dca4:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c002dca7:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c002dcab:	3d ff 00 00 00       	cmp    eax,0xff
c002dcb0:	75 3a                	jne    c002dcec <apicOpen()+0x16c>
c002dcb2:	e8 5b fe ff ff       	call   c002db12 <apicGetBase()>
c002dcb7:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c002dcbb:	83 fa 01             	cmp    edx,0x1
c002dcbe:	75 07                	jne    c002dcc7 <apicOpen()+0x147>
c002dcc0:	ba 60 03 00 00       	mov    edx,0x360
c002dcc5:	eb 05                	jmp    c002dccc <apicOpen()+0x14c>
c002dcc7:	ba 50 03 00 00       	mov    edx,0x350
c002dccc:	01 d0                	add    eax,edx
c002dcce:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002dcd1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002dcd4:	8b 00                	mov    eax,DWORD PTR [eax]
c002dcd6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002dcd9:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c002dce0:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c002dce4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002dce7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002dcea:	89 10                	mov    DWORD PTR [eax],edx
c002dcec:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c002dcf0:	e9 7a ff ff ff       	jmp    c002dc6f <apicOpen()+0xef>
c002dcf5:	90                   	nop
c002dcf6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002dcf9:	c9                   	leave  
c002dcfa:	c3                   	ret    
c002dcfb:	90                   	nop

c002dcfc <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002dcfc:	55                   	push   ebp
c002dcfd:	89 e5                	mov    ebp,esp
c002dcff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dd02:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002dd08:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002dd0b:	72 1d                	jb     c002dd2a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002dd0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dd10:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002dd16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dd19:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002dd1f:	01 d0                	add    eax,edx
c002dd21:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002dd24:	73 04                	jae    c002dd2a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002dd26:	b0 01                	mov    al,0x1
c002dd28:	eb 02                	jmp    c002dd2c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002dd2a:	b0 00                	mov    al,0x0
c002dd2c:	5d                   	pop    ebp
c002dd2d:	c3                   	ret    

c002dd2e <IOAPIC::read(int)>:
c002dd2e:	55                   	push   ebp
c002dd2f:	89 e5                	mov    ebp,esp
c002dd31:	83 ec 10             	sub    esp,0x10
c002dd34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dd37:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002dd3d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002dd40:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002dd43:	0f b6 d0             	movzx  edx,al
c002dd46:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dd49:	89 10                	mov    DWORD PTR [eax],edx
c002dd4b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dd4e:	83 c0 10             	add    eax,0x10
c002dd51:	8b 00                	mov    eax,DWORD PTR [eax]
c002dd53:	c9                   	leave  
c002dd54:	c3                   	ret    
c002dd55:	90                   	nop

c002dd56 <IOAPIC::open(int, int, void*)>:
c002dd56:	55                   	push   ebp
c002dd57:	89 e5                	mov    ebp,esp
c002dd59:	57                   	push   edi
c002dd5a:	56                   	push   esi
c002dd5b:	53                   	push   ebx
c002dd5c:	83 ec 04             	sub    esp,0x4
c002dd5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dd62:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002dd65:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002dd6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dd6e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002dd74:	8b 14 85 20 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc08e0]
c002dd7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dd7e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002dd84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dd87:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002dd8d:	8b 14 85 a0 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0860]
c002dd94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dd97:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002dd9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dda0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002dda6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dda9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002ddaf:	0f b6 f0             	movzx  esi,al
c002ddb2:	89 d0                	mov    eax,edx
c002ddb4:	ba 00 00 00 00       	mov    edx,0x0
c002ddb9:	89 c7                	mov    edi,eax
c002ddbb:	83 e7 ff             	and    edi,0xffffffff
c002ddbe:	89 f9                	mov    ecx,edi
c002ddc0:	0f b6 da             	movzx  ebx,dl
c002ddc3:	89 c8                	mov    eax,ecx
c002ddc5:	89 da                	mov    edx,ebx
c002ddc7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002ddca:	8d 5e 08             	lea    ebx,[esi+0x8]
c002ddcd:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002ddd1:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002ddd5:	83 e0 00             	and    eax,0x0
c002ddd8:	09 d0                	or     eax,edx
c002ddda:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002ddde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dde1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002dde7:	8d 50 01             	lea    edx,[eax+0x1]
c002ddea:	88 d1                	mov    cl,dl
c002ddec:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002ddef:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c002ddf5:	0f b6 d0             	movzx  edx,al
c002ddf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002ddfb:	83 c2 08             	add    edx,0x8
c002ddfe:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002de02:	0f b6 c9             	movzx  ecx,cl
c002de05:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002de0b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002de0f:	6a 01                	push   0x1
c002de11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002de14:	e8 15 ff ff ff       	call   c002dd2e <IOAPIC::read(int)>
c002de19:	83 c4 08             	add    esp,0x8
c002de1c:	c1 f8 10             	sar    eax,0x10
c002de1f:	0f b6 c0             	movzx  eax,al
c002de22:	8d 50 01             	lea    edx,[eax+0x1]
c002de25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002de28:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002de2e:	b8 00 00 00 00       	mov    eax,0x0
c002de33:	8d 65 f4             	lea    esp,[ebp-0xc]
c002de36:	5b                   	pop    ebx
c002de37:	5e                   	pop    esi
c002de38:	5f                   	pop    edi
c002de39:	5d                   	pop    ebp
c002de3a:	c3                   	ret    
c002de3b:	90                   	nop

c002de3c <IOAPIC::write(int, int)>:
c002de3c:	55                   	push   ebp
c002de3d:	89 e5                	mov    ebp,esp
c002de3f:	83 ec 10             	sub    esp,0x10
c002de42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002de45:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002de4b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002de4e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002de51:	0f b6 d0             	movzx  edx,al
c002de54:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002de57:	89 10                	mov    DWORD PTR [eax],edx
c002de59:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002de5c:	8d 50 10             	lea    edx,[eax+0x10]
c002de5f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002de62:	89 02                	mov    DWORD PTR [edx],eax
c002de64:	90                   	nop
c002de65:	c9                   	leave  
c002de66:	c3                   	ret    
c002de67:	90                   	nop

c002de68 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002de68:	55                   	push   ebp
c002de69:	89 e5                	mov    ebp,esp
c002de6b:	53                   	push   ebx
c002de6c:	83 ec 2c             	sub    esp,0x2c
c002de6f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002de72:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002de75:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002de78:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002de7b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002de7e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002de81:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002de84:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002de87:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002de8a:	88 d8                	mov    al,bl
c002de8c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002de8f:	88 c8                	mov    al,cl
c002de91:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002de94:	88 d0                	mov    al,dl
c002de96:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002de99:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002de9d:	83 c0 08             	add    eax,0x8
c002dea0:	01 c0                	add    eax,eax
c002dea2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002dea5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002dea9:	83 c0 08             	add    eax,0x8
c002deac:	01 c0                	add    eax,eax
c002deae:	83 c0 01             	add    eax,0x1
c002deb1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002deb4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002deb7:	50                   	push   eax
c002deb8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002debb:	e8 6e fe ff ff       	call   c002dd2e <IOAPIC::read(int)>
c002dec0:	83 c4 08             	add    esp,0x8
c002dec3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002dec6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002decd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002ded0:	c1 e0 18             	shl    eax,0x18
c002ded3:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002ded6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002ded9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002dedc:	52                   	push   edx
c002dedd:	50                   	push   eax
c002dede:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dee1:	e8 56 ff ff ff       	call   c002de3c <IOAPIC::write(int, int)>
c002dee6:	83 c4 0c             	add    esp,0xc
c002dee9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002deec:	50                   	push   eax
c002deed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002def0:	e8 39 fe ff ff       	call   c002dd2e <IOAPIC::read(int)>
c002def5:	83 c4 08             	add    esp,0x8
c002def8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002defb:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002df02:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002df09:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002df10:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c002df14:	85 c0                	test   eax,eax
c002df16:	74 09                	je     c002df21 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c002df18:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002df1f:	eb 07                	jmp    c002df28 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c002df21:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002df28:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c002df2c:	85 c0                	test   eax,eax
c002df2e:	74 09                	je     c002df39 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c002df30:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002df37:	eb 07                	jmp    c002df40 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c002df39:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002df40:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002df47:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002df4b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002df4e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002df51:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002df54:	52                   	push   edx
c002df55:	50                   	push   eax
c002df56:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002df59:	e8 de fe ff ff       	call   c002de3c <IOAPIC::write(int, int)>
c002df5e:	83 c4 0c             	add    esp,0xc
c002df61:	90                   	nop
c002df62:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002df65:	c9                   	leave  
c002df66:	c3                   	ret    
c002df67:	90                   	nop

c002df68 <APICTimer::close(int, int, void*)>:
c002df68:	b8 00 00 00 00       	mov    eax,0x0
c002df6d:	c3                   	ret    
c002df6e:	66 90                	xchg   ax,ax

c002df70 <apicTimerHandler(regs*, void*)>:
c002df70:	83 ec 0c             	sub    esp,0xc
c002df73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002df77:	8b 08                	mov    ecx,DWORD PTR [eax]
c002df79:	b8 10 27 00 00       	mov    eax,0x2710
c002df7e:	ba 00 00 00 00       	mov    edx,0x0
c002df83:	f7 f1                	div    ecx
c002df85:	83 ec 0c             	sub    esp,0xc
c002df88:	50                   	push   eax
c002df89:	e8 36 f0 fe ff       	call   c001cfc4 <timerHandler(unsigned int)>
c002df8e:	83 c4 10             	add    esp,0x10
c002df91:	90                   	nop
c002df92:	83 c4 0c             	add    esp,0xc
c002df95:	c3                   	ret    
c002df96:	66 90                	xchg   ax,ax

c002df98 <APICTimer::open(int, int, void*)>:
c002df98:	83 ec 0c             	sub    esp,0xc
c002df9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df9f:	8b 00                	mov    eax,DWORD PTR [eax]
c002dfa1:	83 c0 24             	add    eax,0x24
c002dfa4:	8b 00                	mov    eax,DWORD PTR [eax]
c002dfa6:	83 ec 08             	sub    esp,0x8
c002dfa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002dfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002dfb1:	ff d0                	call   eax
c002dfb3:	83 c4 10             	add    esp,0x10
c002dfb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dfba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002dfbe:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002dfc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dfc8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002dfcc:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002dfd2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002dfd6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002dfdc:	83 ec 0c             	sub    esp,0xc
c002dfdf:	51                   	push   ecx
c002dfe0:	6a 01                	push   0x1
c002dfe2:	68 70 df 02 c0       	push   0xc002df70
c002dfe7:	52                   	push   edx
c002dfe8:	50                   	push   eax
c002dfe9:	e8 10 d5 fe ff       	call   c001b4fe <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002dfee:	83 c4 20             	add    esp,0x20
c002dff1:	89 c2                	mov    edx,eax
c002dff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dff7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002dffd:	b8 00 00 00 00       	mov    eax,0x0
c002e002:	83 c4 0c             	add    esp,0xc
c002e005:	c3                   	ret    
c002e006:	66 90                	xchg   ax,ax

c002e008 <APICTimer::write(int)>:
c002e008:	83 ec 0c             	sub    esp,0xc
c002e00b:	83 ec 0c             	sub    esp,0xc
c002e00e:	68 fc 3d 03 c0       	push   0xc0033dfc
c002e013:	e8 d2 24 ff ff       	call   c00204ea <KePanic(char const*)>
c002e018:	83 c4 10             	add    esp,0x10
c002e01b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e01f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e023:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002e029:	90                   	nop
c002e02a:	83 c4 0c             	add    esp,0xc
c002e02d:	c3                   	ret    
c002e02e:	66 90                	xchg   ax,ax

c002e030 <APICTimer::APICTimer()>:
c002e030:	83 ec 0c             	sub    esp,0xc
c002e033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e037:	83 ec 08             	sub    esp,0x8
c002e03a:	68 0c 3e 03 c0       	push   0xc0033e0c
c002e03f:	50                   	push   eax
c002e040:	e8 b3 ee fe ff       	call   c001cef8 <Timer::Timer(char const*)>
c002e045:	83 c4 10             	add    esp,0x10
c002e048:	ba 20 3e 03 c0       	mov    edx,0xc0033e20
c002e04d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e051:	89 10                	mov    DWORD PTR [eax],edx
c002e053:	90                   	nop
c002e054:	83 c4 0c             	add    esp,0xc
c002e057:	c3                   	ret    

c002e058 <PIT::write(int)>:
c002e058:	83 ec 10             	sub    esp,0x10
c002e05b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e05f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002e063:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002e069:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002e06d:	a3 04 0c 04 c0       	mov    ds:0xc0040c04,eax
c002e072:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002e077:	89 c2                	mov    edx,eax
c002e079:	c1 fa 1f             	sar    edx,0x1f
c002e07c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002e080:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e084:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002e08b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002e090:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002e094:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002e099:	ee                   	out    dx,al
c002e09a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e09e:	0f b6 c0             	movzx  eax,al
c002e0a1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002e0a8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002e0ac:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002e0b0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002e0b5:	ee                   	out    dx,al
c002e0b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e0ba:	c1 f8 08             	sar    eax,0x8
c002e0bd:	0f b6 c0             	movzx  eax,al
c002e0c0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002e0c7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002e0cb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002e0cf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002e0d4:	ee                   	out    dx,al
c002e0d5:	90                   	nop
c002e0d6:	83 c4 10             	add    esp,0x10
c002e0d9:	c3                   	ret    
c002e0da:	66 90                	xchg   ax,ax

c002e0dc <pitHandler(regs*, void*)>:
c002e0dc:	83 ec 0c             	sub    esp,0xc
c002e0df:	8b 0d 04 0c 04 c0    	mov    ecx,DWORD PTR ds:0xc0040c04
c002e0e5:	b8 10 27 00 00       	mov    eax,0x2710
c002e0ea:	89 c2                	mov    edx,eax
c002e0ec:	c1 fa 1f             	sar    edx,0x1f
c002e0ef:	f7 f9                	idiv   ecx
c002e0f1:	83 ec 0c             	sub    esp,0xc
c002e0f4:	50                   	push   eax
c002e0f5:	e8 ca ee fe ff       	call   c001cfc4 <timerHandler(unsigned int)>
c002e0fa:	83 c4 10             	add    esp,0x10
c002e0fd:	90                   	nop
c002e0fe:	83 c4 0c             	add    esp,0xc
c002e101:	c3                   	ret    
c002e102:	66 90                	xchg   ax,ax

c002e104 <PIT::open(int, int, void*)>:
c002e104:	83 ec 0c             	sub    esp,0xc
c002e107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e10b:	8b 00                	mov    eax,DWORD PTR [eax]
c002e10d:	83 c0 24             	add    eax,0x24
c002e110:	8b 00                	mov    eax,DWORD PTR [eax]
c002e112:	83 ec 08             	sub    esp,0x8
c002e115:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e119:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e11d:	ff d0                	call   eax
c002e11f:	83 c4 10             	add    esp,0x10
c002e122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e126:	83 ec 0c             	sub    esp,0xc
c002e129:	6a 00                	push   0x0
c002e12b:	6a 01                	push   0x1
c002e12d:	68 dc e0 02 c0       	push   0xc002e0dc
c002e132:	6a 00                	push   0x0
c002e134:	50                   	push   eax
c002e135:	e8 c4 d3 fe ff       	call   c001b4fe <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002e13a:	83 c4 20             	add    esp,0x20
c002e13d:	89 c2                	mov    edx,eax
c002e13f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e143:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002e149:	b8 00 00 00 00       	mov    eax,0x0
c002e14e:	83 c4 0c             	add    esp,0xc
c002e151:	c3                   	ret    
c002e152:	66 90                	xchg   ax,ax

c002e154 <PIT::close(int, int, void*)>:
c002e154:	83 ec 0c             	sub    esp,0xc
c002e157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e15b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002e165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e169:	6a 01                	push   0x1
c002e16b:	68 dc e0 02 c0       	push   0xc002e0dc
c002e170:	6a 00                	push   0x0
c002e172:	50                   	push   eax
c002e173:	e8 bc d3 fe ff       	call   c001b534 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002e178:	83 c4 10             	add    esp,0x10
c002e17b:	b8 00 00 00 00       	mov    eax,0x0
c002e180:	83 c4 0c             	add    esp,0xc
c002e183:	c3                   	ret    

c002e184 <PIT::PIT()>:
c002e184:	83 ec 0c             	sub    esp,0xc
c002e187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e18b:	83 ec 08             	sub    esp,0x8
c002e18e:	68 48 3e 03 c0       	push   0xc0033e48
c002e193:	50                   	push   eax
c002e194:	e8 5f ed fe ff       	call   c001cef8 <Timer::Timer(char const*)>
c002e199:	83 c4 10             	add    esp,0x10
c002e19c:	ba 70 3e 03 c0       	mov    edx,0xc0033e70
c002e1a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e1a5:	89 10                	mov    DWORD PTR [eax],edx
c002e1a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e1ab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e1b1:	0f b6 d0             	movzx  edx,al
c002e1b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e1b8:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002e1bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e1c3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e1c9:	0f b6 d0             	movzx  edx,al
c002e1cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e1d0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002e1d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e1d9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e1df:	8d 50 01             	lea    edx,[eax+0x1]
c002e1e2:	88 d1                	mov    cl,dl
c002e1e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002e1e8:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002e1ee:	0f b6 d0             	movzx  edx,al
c002e1f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e1f5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002e1f9:	83 e1 3f             	and    ecx,0x3f
c002e1fc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002e200:	90                   	nop
c002e201:	83 c4 0c             	add    esp,0xc
c002e204:	c3                   	ret    
c002e205:	66 90                	xchg   ax,ax
c002e207:	66 90                	xchg   ax,ax
c002e209:	66 90                	xchg   ax,ax
c002e20b:	66 90                	xchg   ax,ax
c002e20d:	66 90                	xchg   ax,ax
c002e20f:	90                   	nop

c002e210 <avxDetect>:
c002e210:	b8 01 00 00 00       	mov    eax,0x1
c002e215:	0f a2                	cpuid  
c002e217:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002e21d:	74 15                	je     c002e234 <avxDetect.noAVX>
c002e21f:	b8 01 00 00 00       	mov    eax,0x1
c002e224:	0f a2                	cpuid  
c002e226:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002e22c:	74 06                	je     c002e234 <avxDetect.noAVX>
c002e22e:	b8 01 00 00 00       	mov    eax,0x1
c002e233:	c3                   	ret    

c002e234 <avxDetect.noAVX>:
c002e234:	b8 00 00 00 00       	mov    eax,0x0
c002e239:	c3                   	ret    

c002e23a <avxSave>:
c002e23a:	53                   	push   ebx
c002e23b:	52                   	push   edx
c002e23c:	31 c0                	xor    eax,eax
c002e23e:	48                   	dec    eax
c002e23f:	89 c2                	mov    edx,eax
c002e241:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e245:	0f ae 23             	xsave  [ebx]
c002e248:	5a                   	pop    edx
c002e249:	5b                   	pop    ebx
c002e24a:	c3                   	ret    

c002e24b <avxLoad>:
c002e24b:	53                   	push   ebx
c002e24c:	52                   	push   edx
c002e24d:	31 c0                	xor    eax,eax
c002e24f:	48                   	dec    eax
c002e250:	89 c2                	mov    edx,eax
c002e252:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e256:	0f ae 2b             	xrstor [ebx]
c002e259:	5a                   	pop    edx
c002e25a:	5b                   	pop    ebx
c002e25b:	c3                   	ret    

c002e25c <avxInit>:
c002e25c:	e8 47 03 00 00       	call   c002e5a8 <sseInit>
c002e261:	50                   	push   eax
c002e262:	51                   	push   ecx
c002e263:	0f 20 e0             	mov    eax,cr4
c002e266:	0d 00 00 04 00       	or     eax,0x40000
c002e26b:	0f 22 e0             	mov    cr4,eax
c002e26e:	31 c9                	xor    ecx,ecx
c002e270:	0f 01 d0             	xgetbv 
c002e273:	0d 07 00 00 00       	or     eax,0x7
c002e278:	0f 01 d1             	xsetbv 
c002e27b:	59                   	pop    ecx
c002e27c:	58                   	pop    eax
c002e27d:	c3                   	ret    

c002e27e <avxClose>:
c002e27e:	c3                   	ret    
c002e27f:	90                   	nop

c002e280 <isr0>:
c002e280:	fa                   	cli    
c002e281:	68 00 00 00 00       	push   0x0
c002e286:	68 00 00 00 00       	push   0x0
c002e28b:	e9 56 01 00 00       	jmp    c002e3e6 <int_common_stub>

c002e290 <isr1>:
c002e290:	fa                   	cli    
c002e291:	6a 00                	push   0x0
c002e293:	6a 01                	push   0x1
c002e295:	e9 4c 01 00 00       	jmp    c002e3e6 <int_common_stub>

c002e29a <isr2>:
c002e29a:	fa                   	cli    
c002e29b:	6a 00                	push   0x0
c002e29d:	6a 02                	push   0x2
c002e29f:	e9 42 01 00 00       	jmp    c002e3e6 <int_common_stub>

c002e2a4 <isr3>:
c002e2a4:	fa                   	cli    
c002e2a5:	6a 00                	push   0x0
c002e2a7:	6a 03                	push   0x3
c002e2a9:	e9 38 01 00 00       	jmp    c002e3e6 <int_common_stub>

c002e2ae <isr4>:
c002e2ae:	fa                   	cli    
c002e2af:	6a 00                	push   0x0
c002e2b1:	6a 04                	push   0x4
c002e2b3:	e9 2e 01 00 00       	jmp    c002e3e6 <int_common_stub>

c002e2b8 <isr5>:
c002e2b8:	fa                   	cli    
c002e2b9:	6a 00                	push   0x0
c002e2bb:	6a 05                	push   0x5
c002e2bd:	e9 24 01 00 00       	jmp    c002e3e6 <int_common_stub>

c002e2c2 <isr6>:
c002e2c2:	fa                   	cli    
c002e2c3:	6a 00                	push   0x0
c002e2c5:	6a 06                	push   0x6
c002e2c7:	e9 1a 01 00 00       	jmp    c002e3e6 <int_common_stub>

c002e2cc <isr7>:
c002e2cc:	fa                   	cli    
c002e2cd:	6a 00                	push   0x0
c002e2cf:	6a 07                	push   0x7
c002e2d1:	e9 10 01 00 00       	jmp    c002e3e6 <int_common_stub>

c002e2d6 <isr8>:
c002e2d6:	fa                   	cli    
c002e2d7:	6a 08                	push   0x8
c002e2d9:	e9 08 01 00 00       	jmp    c002e3e6 <int_common_stub>

c002e2de <isr9>:
c002e2de:	fa                   	cli    
c002e2df:	6a 00                	push   0x0
c002e2e1:	6a 09                	push   0x9
c002e2e3:	e9 fe 00 00 00       	jmp    c002e3e6 <int_common_stub>

c002e2e8 <isr10>:
c002e2e8:	fa                   	cli    
c002e2e9:	6a 0a                	push   0xa
c002e2eb:	e9 f6 00 00 00       	jmp    c002e3e6 <int_common_stub>

c002e2f0 <isr11>:
c002e2f0:	fa                   	cli    
c002e2f1:	6a 0b                	push   0xb
c002e2f3:	e9 ee 00 00 00       	jmp    c002e3e6 <int_common_stub>

c002e2f8 <isr12>:
c002e2f8:	fa                   	cli    
c002e2f9:	6a 0c                	push   0xc
c002e2fb:	e9 e6 00 00 00       	jmp    c002e3e6 <int_common_stub>

c002e300 <isr13>:
c002e300:	fa                   	cli    
c002e301:	6a 0d                	push   0xd
c002e303:	53                   	push   ebx
c002e304:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e308:	81 fb d6 e4 02 c0    	cmp    ebx,0xc002e4d6
c002e30e:	5b                   	pop    ebx
c002e30f:	0f 84 c3 01 00 00    	je     c002e4d8 <finishSignal2>
c002e315:	e9 cc 00 00 00       	jmp    c002e3e6 <int_common_stub>

c002e31a <isr14>:
c002e31a:	fa                   	cli    
c002e31b:	6a 0e                	push   0xe
c002e31d:	e9 c4 00 00 00       	jmp    c002e3e6 <int_common_stub>

c002e322 <isr15>:
c002e322:	fa                   	cli    
c002e323:	6a 00                	push   0x0
c002e325:	6a 0f                	push   0xf
c002e327:	e9 ba 00 00 00       	jmp    c002e3e6 <int_common_stub>

c002e32c <isr16>:
c002e32c:	fa                   	cli    
c002e32d:	6a 00                	push   0x0
c002e32f:	6a 10                	push   0x10
c002e331:	e9 b0 00 00 00       	jmp    c002e3e6 <int_common_stub>

c002e336 <isr17>:
c002e336:	fa                   	cli    
c002e337:	6a 00                	push   0x0
c002e339:	6a 11                	push   0x11
c002e33b:	e9 a6 00 00 00       	jmp    c002e3e6 <int_common_stub>

c002e340 <isr18>:
c002e340:	fa                   	cli    
c002e341:	6a 00                	push   0x0
c002e343:	6a 12                	push   0x12
c002e345:	e9 9c 00 00 00       	jmp    c002e3e6 <int_common_stub>

c002e34a <irq3>:
c002e34a:	fa                   	cli    
c002e34b:	6a 00                	push   0x0
c002e34d:	6a 23                	push   0x23
c002e34f:	e9 92 00 00 00       	jmp    c002e3e6 <int_common_stub>

c002e354 <irq4>:
c002e354:	fa                   	cli    
c002e355:	6a 00                	push   0x0
c002e357:	6a 24                	push   0x24
c002e359:	e9 88 00 00 00       	jmp    c002e3e6 <int_common_stub>

c002e35e <irq5>:
c002e35e:	fa                   	cli    
c002e35f:	6a 00                	push   0x0
c002e361:	6a 25                	push   0x25
c002e363:	e9 7e 00 00 00       	jmp    c002e3e6 <int_common_stub>

c002e368 <irq6>:
c002e368:	fa                   	cli    
c002e369:	6a 00                	push   0x0
c002e36b:	6a 26                	push   0x26
c002e36d:	e9 74 00 00 00       	jmp    c002e3e6 <int_common_stub>

c002e372 <irq7>:
c002e372:	fa                   	cli    
c002e373:	6a 00                	push   0x0
c002e375:	6a 27                	push   0x27
c002e377:	e9 6a 00 00 00       	jmp    c002e3e6 <int_common_stub>

c002e37c <irq8>:
c002e37c:	fa                   	cli    
c002e37d:	6a 00                	push   0x0
c002e37f:	6a 28                	push   0x28
c002e381:	e9 60 00 00 00       	jmp    c002e3e6 <int_common_stub>

c002e386 <irq9>:
c002e386:	fa                   	cli    
c002e387:	6a 00                	push   0x0
c002e389:	6a 29                	push   0x29
c002e38b:	e9 56 00 00 00       	jmp    c002e3e6 <int_common_stub>

c002e390 <irq10>:
c002e390:	fa                   	cli    
c002e391:	6a 00                	push   0x0
c002e393:	6a 2a                	push   0x2a
c002e395:	e9 4c 00 00 00       	jmp    c002e3e6 <int_common_stub>

c002e39a <irq11>:
c002e39a:	fa                   	cli    
c002e39b:	6a 00                	push   0x0
c002e39d:	6a 2b                	push   0x2b
c002e39f:	e9 42 00 00 00       	jmp    c002e3e6 <int_common_stub>

c002e3a4 <irq12>:
c002e3a4:	fa                   	cli    
c002e3a5:	6a 00                	push   0x0
c002e3a7:	6a 2c                	push   0x2c
c002e3a9:	e9 38 00 00 00       	jmp    c002e3e6 <int_common_stub>

c002e3ae <irq13>:
c002e3ae:	fa                   	cli    
c002e3af:	6a 00                	push   0x0
c002e3b1:	6a 2d                	push   0x2d
c002e3b3:	e9 2e 00 00 00       	jmp    c002e3e6 <int_common_stub>

c002e3b8 <irq14>:
c002e3b8:	fa                   	cli    
c002e3b9:	6a 00                	push   0x0
c002e3bb:	6a 2e                	push   0x2e
c002e3bd:	e9 24 00 00 00       	jmp    c002e3e6 <int_common_stub>

c002e3c2 <irq15>:
c002e3c2:	fa                   	cli    
c002e3c3:	6a 00                	push   0x0
c002e3c5:	6a 2f                	push   0x2f
c002e3c7:	e9 1a 00 00 00       	jmp    c002e3e6 <int_common_stub>

c002e3cc <irq1>:
c002e3cc:	fa                   	cli    
c002e3cd:	6a 00                	push   0x0
c002e3cf:	6a 21                	push   0x21
c002e3d1:	eb 13                	jmp    c002e3e6 <int_common_stub>

c002e3d3 <irq2>:
c002e3d3:	fa                   	cli    
c002e3d4:	6a 00                	push   0x0
c002e3d6:	6a 22                	push   0x22
c002e3d8:	eb 0c                	jmp    c002e3e6 <int_common_stub>

c002e3da <isr96>:
c002e3da:	6a 00                	push   0x0
c002e3dc:	6a 60                	push   0x60
c002e3de:	fb                   	sti    
c002e3df:	eb 37                	jmp    c002e418 <syscall_common_stub>

c002e3e1 <irq0>:
c002e3e1:	fa                   	cli    
c002e3e2:	6a 00                	push   0x0
c002e3e4:	6a 20                	push   0x20

c002e3e6 <int_common_stub>:
c002e3e6:	60                   	pusha  
c002e3e7:	1e                   	push   ds
c002e3e8:	06                   	push   es
c002e3e9:	0f a0                	push   fs
c002e3eb:	0f a8                	push   gs
c002e3ed:	66 b8 10 00          	mov    ax,0x10
c002e3f1:	66 8e d8             	mov    ds,ax
c002e3f4:	66 8e c0             	mov    es,ax
c002e3f7:	66 8e e0             	mov    fs,ax
c002e3fa:	66 8e e8             	mov    gs,ax
c002e3fd:	54                   	push   esp
c002e3fe:	fc                   	cld    
c002e3ff:	e8 10 d6 fe ff       	call   c001ba14 <int_handler>
c002e404:	81 c4 04 00 00 00    	add    esp,0x4
c002e40a:	0f a9                	pop    gs
c002e40c:	0f a1                	pop    fs
c002e40e:	07                   	pop    es
c002e40f:	1f                   	pop    ds
c002e410:	61                   	popa   
c002e411:	81 c4 08 00 00 00    	add    esp,0x8
c002e417:	cf                   	iret   

c002e418 <syscall_common_stub>:
c002e418:	60                   	pusha  
c002e419:	1e                   	push   ds
c002e41a:	06                   	push   es
c002e41b:	0f a0                	push   fs
c002e41d:	0f a8                	push   gs
c002e41f:	66 b8 10 00          	mov    ax,0x10
c002e423:	66 8e d8             	mov    ds,ax
c002e426:	66 8e c0             	mov    es,ax
c002e429:	66 8e e0             	mov    fs,ax
c002e42c:	66 8e e8             	mov    gs,ax
c002e42f:	54                   	push   esp
c002e430:	fc                   	cld    
c002e431:	e8 de d5 fe ff       	call   c001ba14 <int_handler>
c002e436:	81 c4 04 00 00 00    	add    esp,0x4
c002e43c:	0f a9                	pop    gs
c002e43e:	0f a1                	pop    fs
c002e440:	07                   	pop    es
c002e441:	1f                   	pop    ds
c002e442:	e8 d0 2a ff ff       	call   c0020f17 <KiCheckSignalZ>
c002e447:	3d 00 00 00 00       	cmp    eax,0x0
c002e44c:	0f 84 c0 00 00 00    	je     c002e512 <skipSignals>
c002e452:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c002e457:	61                   	popa   
c002e458:	53                   	push   ebx
c002e459:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002e45f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c002e462:	5b                   	pop    ebx
c002e463:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c002e468:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002e46b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002e46e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002e471:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c002e474:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c002e477:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002e47a:	81 c4 08 00 00 00    	add    esp,0x8
c002e480:	5e                   	pop    esi
c002e481:	5b                   	pop    ebx
c002e482:	59                   	pop    ecx
c002e483:	5a                   	pop    edx
c002e484:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c002e487:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002e48a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002e48d:	52                   	push   edx
c002e48e:	51                   	push   ecx
c002e48f:	53                   	push   ebx
c002e490:	56                   	push   esi
c002e491:	81 ec 08 00 00 00    	sub    esp,0x8
c002e497:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002e49a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002e49d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002e4a0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002e4a3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002e4a6:	60                   	pusha  
c002e4a7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002e4ad:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002e4b0:	89 e3                	mov    ebx,esp
c002e4b2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c002e4b5:	52                   	push   edx
c002e4b6:	68 d6 e4 02 c0       	push   0xc002e4d6
c002e4bb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002e4be:	89 dc                	mov    esp,ebx
c002e4c0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c002e4c3:	68 23 00 00 00       	push   0x23
c002e4c8:	51                   	push   ecx
c002e4c9:	68 02 02 00 00       	push   0x202
c002e4ce:	68 1b 00 00 00       	push   0x1b
c002e4d3:	ff 36                	push   DWORD PTR [esi]
c002e4d5:	cf                   	iret   

c002e4d6 <finishSignal>:
c002e4d6:	cd 0f                	int    0xf

c002e4d8 <finishSignal2>:
c002e4d8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002e4de:	e8 b1 2a ff ff       	call   c0020f94 <KiFinishSignalZ>
c002e4e3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c002e4e9:	68 23 00 00 00       	push   0x23
c002e4ee:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c002e4f1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c002e4f4:	68 1b 00 00 00       	push   0x1b
c002e4f9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002e4fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e4ff:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002e502:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002e505:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002e508:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002e50b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002e50e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c002e511:	cf                   	iret   

c002e512 <skipSignals>:
c002e512:	61                   	popa   
c002e513:	81 c4 08 00 00 00    	add    esp,0x8
c002e519:	cf                   	iret   
c002e51a:	90                   	nop
c002e51b:	90                   	nop

c002e51c <irq16>:
c002e51c:	fa                   	cli    
c002e51d:	6a 00                	push   0x0
c002e51f:	6a 30                	push   0x30
c002e521:	e9 c0 fe ff ff       	jmp    c002e3e6 <int_common_stub>

c002e526 <irq17>:
c002e526:	fa                   	cli    
c002e527:	6a 00                	push   0x0
c002e529:	6a 31                	push   0x31
c002e52b:	e9 b6 fe ff ff       	jmp    c002e3e6 <int_common_stub>

c002e530 <irq18>:
c002e530:	fa                   	cli    
c002e531:	6a 00                	push   0x0
c002e533:	6a 32                	push   0x32
c002e535:	e9 ac fe ff ff       	jmp    c002e3e6 <int_common_stub>

c002e53a <irq19>:
c002e53a:	fa                   	cli    
c002e53b:	6a 00                	push   0x0
c002e53d:	6a 33                	push   0x33
c002e53f:	e9 a2 fe ff ff       	jmp    c002e3e6 <int_common_stub>

c002e544 <irq20>:
c002e544:	fa                   	cli    
c002e545:	6a 00                	push   0x0
c002e547:	6a 34                	push   0x34
c002e549:	e9 98 fe ff ff       	jmp    c002e3e6 <int_common_stub>

c002e54e <irq21>:
c002e54e:	fa                   	cli    
c002e54f:	6a 00                	push   0x0
c002e551:	6a 35                	push   0x35
c002e553:	e9 8e fe ff ff       	jmp    c002e3e6 <int_common_stub>

c002e558 <irq22>:
c002e558:	fa                   	cli    
c002e559:	6a 00                	push   0x0
c002e55b:	6a 36                	push   0x36
c002e55d:	e9 84 fe ff ff       	jmp    c002e3e6 <int_common_stub>

c002e562 <irq23>:
c002e562:	fa                   	cli    
c002e563:	6a 00                	push   0x0
c002e565:	6a 37                	push   0x37
c002e567:	e9 7a fe ff ff       	jmp    c002e3e6 <int_common_stub>
c002e56c:	66 90                	xchg   ax,ax
c002e56e:	66 90                	xchg   ax,ax

c002e570 <i386GetRDRAND>:
c002e570:	b9 64 00 00 00       	mov    ecx,0x64

c002e575 <retry>:
c002e575:	0f c7 f0             	rdrand eax
c002e578:	72 05                	jb     c002e57f <retry.done>
c002e57a:	e2 f9                	loop   c002e575 <retry>

c002e57c <retry.fail>:
c002e57c:	31 c0                	xor    eax,eax
c002e57e:	c3                   	ret    

c002e57f <retry.done>:
c002e57f:	c3                   	ret    

c002e580 <sseDetect>:
c002e580:	b8 01 00 00 00       	mov    eax,0x1
c002e585:	0f a2                	cpuid  
c002e587:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002e58d:	74 06                	je     c002e595 <sseDetect.noSSE>
c002e58f:	b8 01 00 00 00       	mov    eax,0x1
c002e594:	c3                   	ret    

c002e595 <sseDetect.noSSE>:
c002e595:	31 c0                	xor    eax,eax
c002e597:	c3                   	ret    

c002e598 <sseSave>:
c002e598:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e59c:	0f ae 00             	fxsave [eax]
c002e59f:	c3                   	ret    

c002e5a0 <sseLoad>:
c002e5a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e5a4:	0f ae 08             	fxrstor [eax]
c002e5a7:	c3                   	ret    

c002e5a8 <sseInit>:
c002e5a8:	e8 42 00 00 00       	call   c002e5ef <x87Init>
c002e5ad:	0f 20 e0             	mov    eax,cr4
c002e5b0:	66 0d 00 06          	or     ax,0x600
c002e5b4:	0f 22 e0             	mov    cr4,eax
c002e5b7:	c3                   	ret    

c002e5b8 <sseClose>:
c002e5b8:	c3                   	ret    
c002e5b9:	66 90                	xchg   ax,ax
c002e5bb:	66 90                	xchg   ax,ax
c002e5bd:	66 90                	xchg   ax,ax
c002e5bf:	90                   	nop

c002e5c0 <value_37F>:
c002e5c0:	7f 03                	jg     c002e5c5 <value_37A+0x1>

c002e5c2 <value_37E>:
c002e5c2:	7e 03                	jle    c002e5c7 <x87Detect+0x1>

c002e5c4 <value_37A>:
c002e5c4:	7a 03                	jp     c002e5c9 <x87Detect+0x3>

c002e5c6 <x87Detect>:
c002e5c6:	b8 01 00 00 00       	mov    eax,0x1
c002e5cb:	0f a2                	cpuid  
c002e5cd:	f7 c2 01 00 00 00    	test   edx,0x1
c002e5d3:	74 06                	je     c002e5db <x87Detect.nox87>
c002e5d5:	b8 01 00 00 00       	mov    eax,0x1
c002e5da:	c3                   	ret    

c002e5db <x87Detect.nox87>:
c002e5db:	b8 00 00 00 00       	mov    eax,0x0
c002e5e0:	c3                   	ret    

c002e5e1 <x87Save>:
c002e5e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e5e5:	dd 30                	fnsave [eax]
c002e5e7:	c3                   	ret    

c002e5e8 <x87Load>:
c002e5e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e5ec:	dd 20                	frstor [eax]
c002e5ee:	c3                   	ret    

c002e5ef <x87Init>:
c002e5ef:	0f 20 c0             	mov    eax,cr0
c002e5f2:	66 25 fb ff          	and    ax,0xfffb
c002e5f6:	66 0d 22 00          	or     ax,0x22
c002e5fa:	0f 22 c0             	mov    cr0,eax
c002e5fd:	db e3                	fninit 
c002e5ff:	0f 06                	clts   
c002e601:	d9 2d c4 e5 02 c0    	fldcw  WORD PTR ds:0xc002e5c4
c002e607:	c3                   	ret    

c002e608 <x87Close>:
c002e608:	c3                   	ret    
c002e609:	66 90                	xchg   ax,ax
c002e60b:	90                   	nop

c002e60c <__do_global_ctors_aux>:
c002e60c:	a1 c0 f5 02 c0       	mov    eax,ds:0xc002f5c0
c002e611:	83 f8 ff             	cmp    eax,0xffffffff
c002e614:	74 1a                	je     c002e630 <__do_global_ctors_aux+0x24>
c002e616:	55                   	push   ebp
c002e617:	89 e5                	mov    ebp,esp
c002e619:	53                   	push   ebx
c002e61a:	52                   	push   edx
c002e61b:	bb c0 f5 02 c0       	mov    ebx,0xc002f5c0
c002e620:	ff d0                	call   eax
c002e622:	83 eb 04             	sub    ebx,0x4
c002e625:	8b 03                	mov    eax,DWORD PTR [ebx]
c002e627:	83 f8 ff             	cmp    eax,0xffffffff
c002e62a:	75 f4                	jne    c002e620 <__do_global_ctors_aux+0x14>
c002e62c:	58                   	pop    eax
c002e62d:	5b                   	pop    ebx
c002e62e:	5d                   	pop    ebp
c002e62f:	c3                   	ret    
c002e630:	c3                   	ret    
c002e631:	66 90                	xchg   ax,ax
c002e633:	90                   	nop

c002e634 <__divdi3>:
c002e634:	55                   	push   ebp
c002e635:	57                   	push   edi
c002e636:	56                   	push   esi
c002e637:	53                   	push   ebx
c002e638:	83 ec 1c             	sub    esp,0x1c
c002e63b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002e63f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e643:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e646:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e64a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002e64e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e652:	85 db                	test   ebx,ebx
c002e654:	0f 88 8e 00 00 00    	js     c002e6e8 <__divdi3+0xb4>
c002e65a:	89 dd                	mov    ebp,ebx
c002e65c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002e664:	89 d3                	mov    ebx,edx
c002e666:	85 d2                	test   edx,edx
c002e668:	79 0d                	jns    c002e677 <__divdi3+0x43>
c002e66a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002e66e:	f7 d8                	neg    eax
c002e670:	83 d2 00             	adc    edx,0x0
c002e673:	f7 da                	neg    edx
c002e675:	89 d3                	mov    ebx,edx
c002e677:	89 c7                	mov    edi,eax
c002e679:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e67c:	85 db                	test   ebx,ebx
c002e67e:	75 48                	jne    c002e6c8 <__divdi3+0x94>
c002e680:	39 ef                	cmp    edi,ebp
c002e682:	76 24                	jbe    c002e6a8 <__divdi3+0x74>
c002e684:	89 ea                	mov    edx,ebp
c002e686:	f7 f7                	div    edi
c002e688:	89 c1                	mov    ecx,eax
c002e68a:	31 f6                	xor    esi,esi
c002e68c:	89 c8                	mov    eax,ecx
c002e68e:	89 f2                	mov    edx,esi
c002e690:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e694:	85 c9                	test   ecx,ecx
c002e696:	74 07                	je     c002e69f <__divdi3+0x6b>
c002e698:	f7 d8                	neg    eax
c002e69a:	83 d2 00             	adc    edx,0x0
c002e69d:	f7 da                	neg    edx
c002e69f:	83 c4 1c             	add    esp,0x1c
c002e6a2:	5b                   	pop    ebx
c002e6a3:	5e                   	pop    esi
c002e6a4:	5f                   	pop    edi
c002e6a5:	5d                   	pop    ebp
c002e6a6:	c3                   	ret    
c002e6a7:	90                   	nop
c002e6a8:	85 ff                	test   edi,edi
c002e6aa:	75 0b                	jne    c002e6b7 <__divdi3+0x83>
c002e6ac:	b8 01 00 00 00       	mov    eax,0x1
c002e6b1:	31 d2                	xor    edx,edx
c002e6b3:	f7 f3                	div    ebx
c002e6b5:	89 c7                	mov    edi,eax
c002e6b7:	31 d2                	xor    edx,edx
c002e6b9:	89 e8                	mov    eax,ebp
c002e6bb:	f7 f7                	div    edi
c002e6bd:	89 c6                	mov    esi,eax
c002e6bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e6c2:	f7 f7                	div    edi
c002e6c4:	89 c1                	mov    ecx,eax
c002e6c6:	eb c4                	jmp    c002e68c <__divdi3+0x58>
c002e6c8:	39 eb                	cmp    ebx,ebp
c002e6ca:	77 3c                	ja     c002e708 <__divdi3+0xd4>
c002e6cc:	0f bd f3             	bsr    esi,ebx
c002e6cf:	83 f6 1f             	xor    esi,0x1f
c002e6d2:	75 40                	jne    c002e714 <__divdi3+0xe0>
c002e6d4:	39 eb                	cmp    ebx,ebp
c002e6d6:	72 09                	jb     c002e6e1 <__divdi3+0xad>
c002e6d8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002e6db:	0f 87 97 00 00 00    	ja     c002e778 <__divdi3+0x144>
c002e6e1:	b9 01 00 00 00       	mov    ecx,0x1
c002e6e6:	eb a4                	jmp    c002e68c <__divdi3+0x58>
c002e6e8:	f7 d9                	neg    ecx
c002e6ea:	83 d3 00             	adc    ebx,0x0
c002e6ed:	f7 db                	neg    ebx
c002e6ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e6f2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e6f6:	89 dd                	mov    ebp,ebx
c002e6f8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002e700:	e9 5f ff ff ff       	jmp    c002e664 <__divdi3+0x30>
c002e705:	8d 76 00             	lea    esi,[esi+0x0]
c002e708:	31 f6                	xor    esi,esi
c002e70a:	31 c9                	xor    ecx,ecx
c002e70c:	e9 7b ff ff ff       	jmp    c002e68c <__divdi3+0x58>
c002e711:	8d 76 00             	lea    esi,[esi+0x0]
c002e714:	b8 20 00 00 00       	mov    eax,0x20
c002e719:	29 f0                	sub    eax,esi
c002e71b:	89 f1                	mov    ecx,esi
c002e71d:	d3 e3                	shl    ebx,cl
c002e71f:	89 fa                	mov    edx,edi
c002e721:	88 c1                	mov    cl,al
c002e723:	d3 ea                	shr    edx,cl
c002e725:	09 da                	or     edx,ebx
c002e727:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002e72b:	89 f1                	mov    ecx,esi
c002e72d:	d3 e7                	shl    edi,cl
c002e72f:	89 eb                	mov    ebx,ebp
c002e731:	88 c1                	mov    cl,al
c002e733:	d3 eb                	shr    ebx,cl
c002e735:	89 f1                	mov    ecx,esi
c002e737:	d3 e5                	shl    ebp,cl
c002e739:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002e73c:	88 c1                	mov    cl,al
c002e73e:	d3 ea                	shr    edx,cl
c002e740:	09 d5                	or     ebp,edx
c002e742:	89 e8                	mov    eax,ebp
c002e744:	89 da                	mov    edx,ebx
c002e746:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002e74a:	89 d3                	mov    ebx,edx
c002e74c:	89 c5                	mov    ebp,eax
c002e74e:	f7 e7                	mul    edi
c002e750:	39 d3                	cmp    ebx,edx
c002e752:	72 18                	jb     c002e76c <__divdi3+0x138>
c002e754:	74 0a                	je     c002e760 <__divdi3+0x12c>
c002e756:	89 e9                	mov    ecx,ebp
c002e758:	31 f6                	xor    esi,esi
c002e75a:	e9 2d ff ff ff       	jmp    c002e68c <__divdi3+0x58>
c002e75f:	90                   	nop
c002e760:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002e763:	89 f1                	mov    ecx,esi
c002e765:	d3 e7                	shl    edi,cl
c002e767:	39 c7                	cmp    edi,eax
c002e769:	73 eb                	jae    c002e756 <__divdi3+0x122>
c002e76b:	90                   	nop
c002e76c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002e76f:	31 f6                	xor    esi,esi
c002e771:	e9 16 ff ff ff       	jmp    c002e68c <__divdi3+0x58>
c002e776:	66 90                	xchg   ax,ax
c002e778:	31 c9                	xor    ecx,ecx
c002e77a:	e9 0d ff ff ff       	jmp    c002e68c <__divdi3+0x58>
c002e77f:	90                   	nop

c002e780 <__moddi3>:
c002e780:	55                   	push   ebp
c002e781:	57                   	push   edi
c002e782:	56                   	push   esi
c002e783:	53                   	push   ebx
c002e784:	83 ec 2c             	sub    esp,0x2c
c002e787:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002e78b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002e78f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002e793:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002e797:	85 db                	test   ebx,ebx
c002e799:	0f 88 85 00 00 00    	js     c002e824 <__moddi3+0xa4>
c002e79f:	89 de                	mov    esi,ebx
c002e7a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002e7a9:	89 d7                	mov    edi,edx
c002e7ab:	85 d2                	test   edx,edx
c002e7ad:	79 09                	jns    c002e7b8 <__moddi3+0x38>
c002e7af:	f7 d8                	neg    eax
c002e7b1:	83 d2 00             	adc    edx,0x0
c002e7b4:	f7 da                	neg    edx
c002e7b6:	89 d7                	mov    edi,edx
c002e7b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e7bc:	89 cd                	mov    ebp,ecx
c002e7be:	85 ff                	test   edi,edi
c002e7c0:	75 52                	jne    c002e814 <__moddi3+0x94>
c002e7c2:	89 c3                	mov    ebx,eax
c002e7c4:	39 f0                	cmp    eax,esi
c002e7c6:	76 24                	jbe    c002e7ec <__moddi3+0x6c>
c002e7c8:	89 c8                	mov    eax,ecx
c002e7ca:	89 f2                	mov    edx,esi
c002e7cc:	f7 f3                	div    ebx
c002e7ce:	89 d6                	mov    esi,edx
c002e7d0:	89 f0                	mov    eax,esi
c002e7d2:	31 d2                	xor    edx,edx
c002e7d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002e7d8:	85 c9                	test   ecx,ecx
c002e7da:	74 07                	je     c002e7e3 <__moddi3+0x63>
c002e7dc:	f7 d8                	neg    eax
c002e7de:	83 d2 00             	adc    edx,0x0
c002e7e1:	f7 da                	neg    edx
c002e7e3:	83 c4 2c             	add    esp,0x2c
c002e7e6:	5b                   	pop    ebx
c002e7e7:	5e                   	pop    esi
c002e7e8:	5f                   	pop    edi
c002e7e9:	5d                   	pop    ebp
c002e7ea:	c3                   	ret    
c002e7eb:	90                   	nop
c002e7ec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e7f0:	85 db                	test   ebx,ebx
c002e7f2:	75 0d                	jne    c002e801 <__moddi3+0x81>
c002e7f4:	b8 01 00 00 00       	mov    eax,0x1
c002e7f9:	31 d2                	xor    edx,edx
c002e7fb:	f7 f7                	div    edi
c002e7fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e801:	89 f0                	mov    eax,esi
c002e803:	31 d2                	xor    edx,edx
c002e805:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e809:	f7 f7                	div    edi
c002e80b:	89 e8                	mov    eax,ebp
c002e80d:	f7 f7                	div    edi
c002e80f:	89 d6                	mov    esi,edx
c002e811:	eb bd                	jmp    c002e7d0 <__moddi3+0x50>
c002e813:	90                   	nop
c002e814:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e818:	39 f7                	cmp    edi,esi
c002e81a:	76 20                	jbe    c002e83c <__moddi3+0xbc>
c002e81c:	89 c8                	mov    eax,ecx
c002e81e:	89 f2                	mov    edx,esi
c002e820:	eb b2                	jmp    c002e7d4 <__moddi3+0x54>
c002e822:	66 90                	xchg   ax,ax
c002e824:	f7 d9                	neg    ecx
c002e826:	83 d3 00             	adc    ebx,0x0
c002e829:	f7 db                	neg    ebx
c002e82b:	89 de                	mov    esi,ebx
c002e82d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c002e835:	e9 6f ff ff ff       	jmp    c002e7a9 <__moddi3+0x29>
c002e83a:	66 90                	xchg   ax,ax
c002e83c:	0f bd c7             	bsr    eax,edi
c002e83f:	83 f0 1f             	xor    eax,0x1f
c002e842:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002e846:	75 24                	jne    c002e86c <__moddi3+0xec>
c002e848:	39 f7                	cmp    edi,esi
c002e84a:	72 06                	jb     c002e852 <__moddi3+0xd2>
c002e84c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002e850:	77 0c                	ja     c002e85e <__moddi3+0xde>
c002e852:	89 e9                	mov    ecx,ebp
c002e854:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002e858:	19 fe                	sbb    esi,edi
c002e85a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e85e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e862:	89 f2                	mov    edx,esi
c002e864:	e9 6b ff ff ff       	jmp    c002e7d4 <__moddi3+0x54>
c002e869:	8d 76 00             	lea    esi,[esi+0x0]
c002e86c:	b8 20 00 00 00       	mov    eax,0x20
c002e871:	89 c2                	mov    edx,eax
c002e873:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002e877:	29 da                	sub    edx,ebx
c002e879:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002e87d:	88 d9                	mov    cl,bl
c002e87f:	d3 e7                	shl    edi,cl
c002e881:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e885:	88 d1                	mov    cl,dl
c002e887:	d3 e8                	shr    eax,cl
c002e889:	09 c7                	or     edi,eax
c002e88b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002e88f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e893:	89 d8                	mov    eax,ebx
c002e895:	88 d9                	mov    cl,bl
c002e897:	d3 e7                	shl    edi,cl
c002e899:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e89d:	89 f3                	mov    ebx,esi
c002e89f:	88 d1                	mov    cl,dl
c002e8a1:	d3 eb                	shr    ebx,cl
c002e8a3:	89 c7                	mov    edi,eax
c002e8a5:	88 c1                	mov    cl,al
c002e8a7:	d3 e6                	shl    esi,cl
c002e8a9:	89 e8                	mov    eax,ebp
c002e8ab:	88 d1                	mov    cl,dl
c002e8ad:	d3 e8                	shr    eax,cl
c002e8af:	09 f0                	or     eax,esi
c002e8b1:	89 f9                	mov    ecx,edi
c002e8b3:	d3 e5                	shl    ebp,cl
c002e8b5:	89 da                	mov    edx,ebx
c002e8b7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002e8bb:	89 d3                	mov    ebx,edx
c002e8bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e8c1:	89 c6                	mov    esi,eax
c002e8c3:	89 d1                	mov    ecx,edx
c002e8c5:	39 d3                	cmp    ebx,edx
c002e8c7:	72 27                	jb     c002e8f0 <__moddi3+0x170>
c002e8c9:	74 21                	je     c002e8ec <__moddi3+0x16c>
c002e8cb:	29 f5                	sub    ebp,esi
c002e8cd:	19 cb                	sbb    ebx,ecx
c002e8cf:	89 de                	mov    esi,ebx
c002e8d1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c002e8d5:	d3 e6                	shl    esi,cl
c002e8d7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002e8db:	89 f9                	mov    ecx,edi
c002e8dd:	d3 ed                	shr    ebp,cl
c002e8df:	09 ee                	or     esi,ebp
c002e8e1:	89 f0                	mov    eax,esi
c002e8e3:	d3 eb                	shr    ebx,cl
c002e8e5:	89 da                	mov    edx,ebx
c002e8e7:	e9 e8 fe ff ff       	jmp    c002e7d4 <__moddi3+0x54>
c002e8ec:	39 c5                	cmp    ebp,eax
c002e8ee:	73 db                	jae    c002e8cb <__moddi3+0x14b>
c002e8f0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e8f4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002e8f8:	89 d1                	mov    ecx,edx
c002e8fa:	89 c6                	mov    esi,eax
c002e8fc:	eb cd                	jmp    c002e8cb <__moddi3+0x14b>
c002e8fe:	66 90                	xchg   ax,ax

c002e900 <__udivdi3>:
c002e900:	55                   	push   ebp
c002e901:	57                   	push   edi
c002e902:	56                   	push   esi
c002e903:	53                   	push   ebx
c002e904:	83 ec 1c             	sub    esp,0x1c
c002e907:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002e90b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002e90f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e913:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e917:	85 d2                	test   edx,edx
c002e919:	75 41                	jne    c002e95c <__udivdi3+0x5c>
c002e91b:	39 f7                	cmp    edi,esi
c002e91d:	76 15                	jbe    c002e934 <__udivdi3+0x34>
c002e91f:	89 e8                	mov    eax,ebp
c002e921:	89 f2                	mov    edx,esi
c002e923:	f7 f7                	div    edi
c002e925:	31 db                	xor    ebx,ebx
c002e927:	89 da                	mov    edx,ebx
c002e929:	83 c4 1c             	add    esp,0x1c
c002e92c:	5b                   	pop    ebx
c002e92d:	5e                   	pop    esi
c002e92e:	5f                   	pop    edi
c002e92f:	5d                   	pop    ebp
c002e930:	c3                   	ret    
c002e931:	8d 76 00             	lea    esi,[esi+0x0]
c002e934:	89 f9                	mov    ecx,edi
c002e936:	85 ff                	test   edi,edi
c002e938:	75 0b                	jne    c002e945 <__udivdi3+0x45>
c002e93a:	b8 01 00 00 00       	mov    eax,0x1
c002e93f:	31 d2                	xor    edx,edx
c002e941:	f7 f7                	div    edi
c002e943:	89 c1                	mov    ecx,eax
c002e945:	31 d2                	xor    edx,edx
c002e947:	89 f0                	mov    eax,esi
c002e949:	f7 f1                	div    ecx
c002e94b:	89 c3                	mov    ebx,eax
c002e94d:	89 e8                	mov    eax,ebp
c002e94f:	f7 f1                	div    ecx
c002e951:	89 da                	mov    edx,ebx
c002e953:	83 c4 1c             	add    esp,0x1c
c002e956:	5b                   	pop    ebx
c002e957:	5e                   	pop    esi
c002e958:	5f                   	pop    edi
c002e959:	5d                   	pop    ebp
c002e95a:	c3                   	ret    
c002e95b:	90                   	nop
c002e95c:	39 f2                	cmp    edx,esi
c002e95e:	77 1c                	ja     c002e97c <__udivdi3+0x7c>
c002e960:	0f bd da             	bsr    ebx,edx
c002e963:	83 f3 1f             	xor    ebx,0x1f
c002e966:	75 24                	jne    c002e98c <__udivdi3+0x8c>
c002e968:	39 f2                	cmp    edx,esi
c002e96a:	72 08                	jb     c002e974 <__udivdi3+0x74>
c002e96c:	39 ef                	cmp    edi,ebp
c002e96e:	0f 87 84 00 00 00    	ja     c002e9f8 <__udivdi3+0xf8>
c002e974:	b8 01 00 00 00       	mov    eax,0x1
c002e979:	eb ac                	jmp    c002e927 <__udivdi3+0x27>
c002e97b:	90                   	nop
c002e97c:	31 db                	xor    ebx,ebx
c002e97e:	31 c0                	xor    eax,eax
c002e980:	89 da                	mov    edx,ebx
c002e982:	83 c4 1c             	add    esp,0x1c
c002e985:	5b                   	pop    ebx
c002e986:	5e                   	pop    esi
c002e987:	5f                   	pop    edi
c002e988:	5d                   	pop    ebp
c002e989:	c3                   	ret    
c002e98a:	66 90                	xchg   ax,ax
c002e98c:	b8 20 00 00 00       	mov    eax,0x20
c002e991:	29 d8                	sub    eax,ebx
c002e993:	88 d9                	mov    cl,bl
c002e995:	d3 e2                	shl    edx,cl
c002e997:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002e99b:	89 fa                	mov    edx,edi
c002e99d:	88 c1                	mov    cl,al
c002e99f:	d3 ea                	shr    edx,cl
c002e9a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e9a5:	09 d1                	or     ecx,edx
c002e9a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e9ab:	88 d9                	mov    cl,bl
c002e9ad:	d3 e7                	shl    edi,cl
c002e9af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e9b3:	89 f7                	mov    edi,esi
c002e9b5:	88 c1                	mov    cl,al
c002e9b7:	d3 ef                	shr    edi,cl
c002e9b9:	88 d9                	mov    cl,bl
c002e9bb:	d3 e6                	shl    esi,cl
c002e9bd:	89 ea                	mov    edx,ebp
c002e9bf:	88 c1                	mov    cl,al
c002e9c1:	d3 ea                	shr    edx,cl
c002e9c3:	09 d6                	or     esi,edx
c002e9c5:	89 f0                	mov    eax,esi
c002e9c7:	89 fa                	mov    edx,edi
c002e9c9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e9cd:	89 d7                	mov    edi,edx
c002e9cf:	89 c6                	mov    esi,eax
c002e9d1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e9d5:	39 d7                	cmp    edi,edx
c002e9d7:	72 13                	jb     c002e9ec <__udivdi3+0xec>
c002e9d9:	74 09                	je     c002e9e4 <__udivdi3+0xe4>
c002e9db:	89 f0                	mov    eax,esi
c002e9dd:	31 db                	xor    ebx,ebx
c002e9df:	e9 43 ff ff ff       	jmp    c002e927 <__udivdi3+0x27>
c002e9e4:	88 d9                	mov    cl,bl
c002e9e6:	d3 e5                	shl    ebp,cl
c002e9e8:	39 c5                	cmp    ebp,eax
c002e9ea:	73 ef                	jae    c002e9db <__udivdi3+0xdb>
c002e9ec:	8d 46 ff             	lea    eax,[esi-0x1]
c002e9ef:	31 db                	xor    ebx,ebx
c002e9f1:	e9 31 ff ff ff       	jmp    c002e927 <__udivdi3+0x27>
c002e9f6:	66 90                	xchg   ax,ax
c002e9f8:	31 c0                	xor    eax,eax
c002e9fa:	e9 28 ff ff ff       	jmp    c002e927 <__udivdi3+0x27>
c002e9ff:	90                   	nop

c002ea00 <__umoddi3>:
c002ea00:	55                   	push   ebp
c002ea01:	57                   	push   edi
c002ea02:	56                   	push   esi
c002ea03:	53                   	push   ebx
c002ea04:	83 ec 1c             	sub    esp,0x1c
c002ea07:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002ea0b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002ea0f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002ea13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002ea17:	89 da                	mov    edx,ebx
c002ea19:	85 c0                	test   eax,eax
c002ea1b:	75 37                	jne    c002ea54 <__umoddi3+0x54>
c002ea1d:	39 df                	cmp    edi,ebx
c002ea1f:	76 13                	jbe    c002ea34 <__umoddi3+0x34>
c002ea21:	89 f0                	mov    eax,esi
c002ea23:	f7 f7                	div    edi
c002ea25:	89 d0                	mov    eax,edx
c002ea27:	31 d2                	xor    edx,edx
c002ea29:	83 c4 1c             	add    esp,0x1c
c002ea2c:	5b                   	pop    ebx
c002ea2d:	5e                   	pop    esi
c002ea2e:	5f                   	pop    edi
c002ea2f:	5d                   	pop    ebp
c002ea30:	c3                   	ret    
c002ea31:	8d 76 00             	lea    esi,[esi+0x0]
c002ea34:	89 fd                	mov    ebp,edi
c002ea36:	85 ff                	test   edi,edi
c002ea38:	75 0b                	jne    c002ea45 <__umoddi3+0x45>
c002ea3a:	b8 01 00 00 00       	mov    eax,0x1
c002ea3f:	31 d2                	xor    edx,edx
c002ea41:	f7 f7                	div    edi
c002ea43:	89 c5                	mov    ebp,eax
c002ea45:	89 d8                	mov    eax,ebx
c002ea47:	31 d2                	xor    edx,edx
c002ea49:	f7 f5                	div    ebp
c002ea4b:	89 f0                	mov    eax,esi
c002ea4d:	f7 f5                	div    ebp
c002ea4f:	89 d0                	mov    eax,edx
c002ea51:	eb d4                	jmp    c002ea27 <__umoddi3+0x27>
c002ea53:	90                   	nop
c002ea54:	89 f1                	mov    ecx,esi
c002ea56:	39 d8                	cmp    eax,ebx
c002ea58:	76 0a                	jbe    c002ea64 <__umoddi3+0x64>
c002ea5a:	89 f0                	mov    eax,esi
c002ea5c:	83 c4 1c             	add    esp,0x1c
c002ea5f:	5b                   	pop    ebx
c002ea60:	5e                   	pop    esi
c002ea61:	5f                   	pop    edi
c002ea62:	5d                   	pop    ebp
c002ea63:	c3                   	ret    
c002ea64:	0f bd e8             	bsr    ebp,eax
c002ea67:	83 f5 1f             	xor    ebp,0x1f
c002ea6a:	75 1c                	jne    c002ea88 <__umoddi3+0x88>
c002ea6c:	39 d8                	cmp    eax,ebx
c002ea6e:	72 04                	jb     c002ea74 <__umoddi3+0x74>
c002ea70:	39 f7                	cmp    edi,esi
c002ea72:	77 08                	ja     c002ea7c <__umoddi3+0x7c>
c002ea74:	89 da                	mov    edx,ebx
c002ea76:	29 fe                	sub    esi,edi
c002ea78:	19 c2                	sbb    edx,eax
c002ea7a:	89 f1                	mov    ecx,esi
c002ea7c:	89 c8                	mov    eax,ecx
c002ea7e:	83 c4 1c             	add    esp,0x1c
c002ea81:	5b                   	pop    ebx
c002ea82:	5e                   	pop    esi
c002ea83:	5f                   	pop    edi
c002ea84:	5d                   	pop    ebp
c002ea85:	c3                   	ret    
c002ea86:	66 90                	xchg   ax,ax
c002ea88:	ba 20 00 00 00       	mov    edx,0x20
c002ea8d:	29 ea                	sub    edx,ebp
c002ea8f:	89 e9                	mov    ecx,ebp
c002ea91:	d3 e0                	shl    eax,cl
c002ea93:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002ea97:	89 f8                	mov    eax,edi
c002ea99:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002ea9d:	88 d1                	mov    cl,dl
c002ea9f:	d3 e8                	shr    eax,cl
c002eaa1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002eaa5:	09 c1                	or     ecx,eax
c002eaa7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002eaab:	89 e9                	mov    ecx,ebp
c002eaad:	d3 e7                	shl    edi,cl
c002eaaf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002eab3:	89 d8                	mov    eax,ebx
c002eab5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002eab9:	88 d1                	mov    cl,dl
c002eabb:	d3 e8                	shr    eax,cl
c002eabd:	89 c7                	mov    edi,eax
c002eabf:	89 e9                	mov    ecx,ebp
c002eac1:	d3 e3                	shl    ebx,cl
c002eac3:	89 f0                	mov    eax,esi
c002eac5:	88 d1                	mov    cl,dl
c002eac7:	d3 e8                	shr    eax,cl
c002eac9:	09 d8                	or     eax,ebx
c002eacb:	89 e9                	mov    ecx,ebp
c002eacd:	d3 e6                	shl    esi,cl
c002eacf:	89 f3                	mov    ebx,esi
c002ead1:	89 fa                	mov    edx,edi
c002ead3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002ead7:	89 d1                	mov    ecx,edx
c002ead9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002eadd:	89 c6                	mov    esi,eax
c002eadf:	89 d7                	mov    edi,edx
c002eae1:	39 d1                	cmp    ecx,edx
c002eae3:	72 27                	jb     c002eb0c <__umoddi3+0x10c>
c002eae5:	74 21                	je     c002eb08 <__umoddi3+0x108>
c002eae7:	89 ca                	mov    edx,ecx
c002eae9:	29 f3                	sub    ebx,esi
c002eaeb:	19 fa                	sbb    edx,edi
c002eaed:	89 d0                	mov    eax,edx
c002eaef:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002eaf3:	d3 e0                	shl    eax,cl
c002eaf5:	89 e9                	mov    ecx,ebp
c002eaf7:	d3 eb                	shr    ebx,cl
c002eaf9:	09 d8                	or     eax,ebx
c002eafb:	d3 ea                	shr    edx,cl
c002eafd:	83 c4 1c             	add    esp,0x1c
c002eb00:	5b                   	pop    ebx
c002eb01:	5e                   	pop    esi
c002eb02:	5f                   	pop    edi
c002eb03:	5d                   	pop    ebp
c002eb04:	c3                   	ret    
c002eb05:	8d 76 00             	lea    esi,[esi+0x0]
c002eb08:	39 c3                	cmp    ebx,eax
c002eb0a:	73 db                	jae    c002eae7 <__umoddi3+0xe7>
c002eb0c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002eb10:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c002eb14:	89 d7                	mov    edi,edx
c002eb16:	89 c6                	mov    esi,eax
c002eb18:	eb cd                	jmp    c002eae7 <__umoddi3+0xe7>

Disassembly of section .init:

c002eb1a <_init>:
c002eb1a:	55                   	push   ebp
c002eb1b:	89 e5                	mov    ebp,esp
c002eb1d:	e8 d2 15 fd ff       	call   c00000f4 <frame_dummy>
c002eb22:	e8 e5 fa ff ff       	call   c002e60c <__do_global_ctors_aux>
c002eb27:	5d                   	pop    ebp
c002eb28:	c3                   	ret    

Disassembly of section .fini:

c002eb29 <_fini>:
c002eb29:	55                   	push   ebp
c002eb2a:	89 e5                	mov    ebp,esp
c002eb2c:	e8 53 15 fd ff       	call   c0000084 <__do_global_dtors_aux>
c002eb31:	5d                   	pop    ebp
c002eb32:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c002eb34 <Computer::~Computer()>:
c002eb34:	83 ec 0c             	sub    esp,0xc
c002eb37:	ba a4 13 03 c0       	mov    edx,0xc00313a4
c002eb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb40:	89 10                	mov    DWORD PTR [eax],edx
c002eb42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb46:	83 ec 0c             	sub    esp,0xc
c002eb49:	50                   	push   eax
c002eb4a:	e8 05 c9 fe ff       	call   c001b454 <Device::~Device()>
c002eb4f:	83 c4 10             	add    esp,0x10
c002eb52:	90                   	nop
c002eb53:	83 c4 0c             	add    esp,0xc
c002eb56:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002eb58 <Computer::~Computer()>:
c002eb58:	83 ec 0c             	sub    esp,0xc
c002eb5b:	83 ec 0c             	sub    esp,0xc
c002eb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eb62:	e8 cd ff ff ff       	call   c002eb34 <Computer::~Computer()>
c002eb67:	83 c4 10             	add    esp,0x10
c002eb6a:	83 ec 08             	sub    esp,0x8
c002eb6d:	68 70 01 00 00       	push   0x170
c002eb72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eb76:	e8 29 a8 fe ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c002eb7b:	83 c4 10             	add    esp,0x10
c002eb7e:	83 c4 0c             	add    esp,0xc
c002eb81:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c002eb82 <idleCommon()>:
c002eb82:	83 ec 0c             	sub    esp,0xc
c002eb85:	fa                   	cli    
c002eb86:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002eb8c:	e8 6f 69 ff ff       	call   c0025500 <schedule()>
c002eb91:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002eb96:	48                   	dec    eax
c002eb97:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002eb9c:	75 01                	jne    c002eb9f <idleCommon()+0x1d>
c002eb9e:	fb                   	sti    
c002eb9f:	83 c4 0c             	add    esp,0xc
c002eba2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002eba4 <LinkedList<UnixFile>::~LinkedList()>:
c002eba4:	90                   	nop
c002eba5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002eba6 <LinkedList<UnixFile>::LinkedList()>:
c002eba6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebaa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebb4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ebbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebbf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ebc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ebd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebd4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ebdb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebdf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ebe6:	90                   	nop
c002ebe7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002ebe8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002ebe8:	83 ec 0c             	sub    esp,0xc
c002ebeb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002ebf0:	75 10                	jne    c002ec02 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002ebf2:	83 ec 0c             	sub    esp,0xc
c002ebf5:	68 fc 15 03 c0       	push   0xc00315fc
c002ebfa:	e8 eb 18 ff ff       	call   c00204ea <KePanic(char const*)>
c002ebff:	83 c4 10             	add    esp,0x10
c002ec02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec06:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec08:	85 c0                	test   eax,eax
c002ec0a:	74 34                	je     c002ec40 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002ec0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec13:	85 c0                	test   eax,eax
c002ec15:	74 29                	je     c002ec40 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002ec17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec1e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ec22:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ec25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec29:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ec2d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ec30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec37:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ec3e:	eb 65                	jmp    c002eca5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002ec40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec44:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec46:	85 c0                	test   eax,eax
c002ec48:	75 4b                	jne    c002ec95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002ec4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec51:	85 c0                	test   eax,eax
c002ec53:	75 40                	jne    c002ec95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002ec55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ec5d:	89 10                	mov    DWORD PTR [eax],edx
c002ec5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ec67:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ec6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec71:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ec78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ec7f:	85 c0                	test   eax,eax
c002ec81:	74 22                	je     c002eca5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002ec83:	83 ec 0c             	sub    esp,0xc
c002ec86:	68 1e 16 03 c0       	push   0xc003161e
c002ec8b:	e8 5a 18 ff ff       	call   c00204ea <KePanic(char const*)>
c002ec90:	83 c4 10             	add    esp,0x10
c002ec93:	eb 10                	jmp    c002eca5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002ec95:	83 ec 0c             	sub    esp,0xc
c002ec98:	68 28 16 03 c0       	push   0xc0031628
c002ec9d:	e8 48 18 ff ff       	call   c00204ea <KePanic(char const*)>
c002eca2:	83 c4 10             	add    esp,0x10
c002eca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eca9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ecac:	8d 50 01             	lea    edx,[eax+0x1]
c002ecaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecb3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ecb6:	90                   	nop
c002ecb7:	83 c4 0c             	add    esp,0xc
c002ecba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002ecbc <LinkedList<UnixFile>::getFirstElement()>:
c002ecbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ecc0:	8b 00                	mov    eax,DWORD PTR [eax]
c002ecc2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002ecc4 <LinkedList<UnixFile>::removeFirst()>:
c002ecc4:	83 ec 0c             	sub    esp,0xc
c002ecc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eccb:	8b 00                	mov    eax,DWORD PTR [eax]
c002eccd:	85 c0                	test   eax,eax
c002eccf:	75 12                	jne    c002ece3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002ecd1:	83 ec 0c             	sub    esp,0xc
c002ecd4:	68 34 16 03 c0       	push   0xc0031634
c002ecd9:	e8 0c 18 ff ff       	call   c00204ea <KePanic(char const*)>
c002ecde:	83 c4 10             	add    esp,0x10
c002ece1:	eb 7e                	jmp    c002ed61 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002ece3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ece7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ecea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eced:	85 c0                	test   eax,eax
c002ecef:	74 10                	je     c002ed01 <LinkedList<UnixFile>::removeFirst()+0x3d>
c002ecf1:	83 ec 0c             	sub    esp,0xc
c002ecf4:	68 7f 16 03 c0       	push   0xc003167f
c002ecf9:	e8 ec 17 ff ff       	call   c00204ea <KePanic(char const*)>
c002ecfe:	83 c4 10             	add    esp,0x10
c002ed01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed05:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed07:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ed0a:	85 c0                	test   eax,eax
c002ed0c:	75 33                	jne    c002ed41 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002ed0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ed18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ed23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ed2a:	83 f8 01             	cmp    eax,0x1
c002ed2d:	74 21                	je     c002ed50 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002ed2f:	83 ec 0c             	sub    esp,0xc
c002ed32:	68 58 16 03 c0       	push   0xc0031658
c002ed37:	e8 ae 17 ff ff       	call   c00204ea <KePanic(char const*)>
c002ed3c:	83 c4 10             	add    esp,0x10
c002ed3f:	eb 0f                	jmp    c002ed50 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002ed41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed45:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed47:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002ed4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed4e:	89 10                	mov    DWORD PTR [eax],edx
c002ed50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ed57:	8d 50 ff             	lea    edx,[eax-0x1]
c002ed5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed5e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ed61:	83 c4 0c             	add    esp,0xc
c002ed64:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002ed66 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002ed66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002ed6a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ed6d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002ed6e <DriverlessDevice::~DriverlessDevice()>:
c002ed6e:	ba a8 22 03 c0       	mov    edx,0xc00322a8
c002ed73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ed77:	89 10                	mov    DWORD PTR [eax],edx
c002ed79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ed7d:	50                   	push   eax
c002ed7e:	e8 d1 c6 fe ff       	call   c001b454 <Device::~Device()>
c002ed83:	83 c4 04             	add    esp,0x4
c002ed86:	90                   	nop
c002ed87:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002ed88 <DriverlessDevice::~DriverlessDevice()>:
c002ed88:	83 ec 0c             	sub    esp,0xc
c002ed8b:	83 ec 0c             	sub    esp,0xc
c002ed8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ed92:	e8 d7 ff ff ff       	call   c002ed6e <DriverlessDevice::~DriverlessDevice()>
c002ed97:	83 c4 10             	add    esp,0x10
c002ed9a:	83 ec 08             	sub    esp,0x8
c002ed9d:	68 58 01 00 00       	push   0x158
c002eda2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eda6:	e8 f9 a5 fe ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c002edab:	83 c4 10             	add    esp,0x10
c002edae:	83 c4 0c             	add    esp,0xc
c002edb1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002edb2 <LinkedList<Device>::addElement(Device*)>:
c002edb2:	83 ec 0c             	sub    esp,0xc
c002edb5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002edba:	75 10                	jne    c002edcc <LinkedList<Device>::addElement(Device*)+0x1a>
c002edbc:	83 ec 0c             	sub    esp,0xc
c002edbf:	68 fc 15 03 c0       	push   0xc00315fc
c002edc4:	e8 21 17 ff ff       	call   c00204ea <KePanic(char const*)>
c002edc9:	83 c4 10             	add    esp,0x10
c002edcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edd0:	8b 00                	mov    eax,DWORD PTR [eax]
c002edd2:	85 c0                	test   eax,eax
c002edd4:	74 3a                	je     c002ee10 <LinkedList<Device>::addElement(Device*)+0x5e>
c002edd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eddd:	85 c0                	test   eax,eax
c002eddf:	74 2f                	je     c002ee10 <LinkedList<Device>::addElement(Device*)+0x5e>
c002ede1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ede5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ede8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002edec:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002edf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edf6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002edfa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002edfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee04:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002ee0e:	eb 68                	jmp    c002ee78 <LinkedList<Device>::addElement(Device*)+0xc6>
c002ee10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee14:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee16:	85 c0                	test   eax,eax
c002ee18:	75 4e                	jne    c002ee68 <LinkedList<Device>::addElement(Device*)+0xb6>
c002ee1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee21:	85 c0                	test   eax,eax
c002ee23:	75 43                	jne    c002ee68 <LinkedList<Device>::addElement(Device*)+0xb6>
c002ee25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee29:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ee2d:	89 10                	mov    DWORD PTR [eax],edx
c002ee2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ee37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ee3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee41:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002ee4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee4f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ee52:	85 c0                	test   eax,eax
c002ee54:	74 22                	je     c002ee78 <LinkedList<Device>::addElement(Device*)+0xc6>
c002ee56:	83 ec 0c             	sub    esp,0xc
c002ee59:	68 1e 16 03 c0       	push   0xc003161e
c002ee5e:	e8 87 16 ff ff       	call   c00204ea <KePanic(char const*)>
c002ee63:	83 c4 10             	add    esp,0x10
c002ee66:	eb 10                	jmp    c002ee78 <LinkedList<Device>::addElement(Device*)+0xc6>
c002ee68:	83 ec 0c             	sub    esp,0xc
c002ee6b:	68 28 16 03 c0       	push   0xc0031628
c002ee70:	e8 75 16 ff ff       	call   c00204ea <KePanic(char const*)>
c002ee75:	83 c4 10             	add    esp,0x10
c002ee78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ee7f:	8d 50 01             	lea    edx,[eax+0x1]
c002ee82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee86:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ee89:	90                   	nop
c002ee8a:	83 c4 0c             	add    esp,0xc
c002ee8d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002ee8e <LinkedList<Device>::LinkedList()>:
c002ee8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee92:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ee98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee9c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eea3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eea7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002eeae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eeb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eeb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eebc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eec3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eec7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002eece:	90                   	nop
c002eecf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002eed0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002eed0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eed4:	8b 00                	mov    eax,DWORD PTR [eax]
c002eed6:	85 c0                	test   eax,eax
c002eed8:	75 0e                	jne    c002eee8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002eeda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eede:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eee1:	85 c0                	test   eax,eax
c002eee3:	75 03                	jne    c002eee8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002eee5:	b0 01                	mov    al,0x1
c002eee7:	c3                   	ret    
c002eee8:	b0 00                	mov    al,0x0
c002eeea:	90                   	nop
c002eeeb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002eeec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002eeec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eef0:	8b 00                	mov    eax,DWORD PTR [eax]
c002eef2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002eef4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002eef4:	83 ec 0c             	sub    esp,0xc
c002eef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eefb:	8b 00                	mov    eax,DWORD PTR [eax]
c002eefd:	85 c0                	test   eax,eax
c002eeff:	75 17                	jne    c002ef18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002ef01:	83 ec 0c             	sub    esp,0xc
c002ef04:	68 34 16 03 c0       	push   0xc0031634
c002ef09:	e8 dc 15 ff ff       	call   c00204ea <KePanic(char const*)>
c002ef0e:	83 c4 10             	add    esp,0x10
c002ef11:	e9 96 00 00 00       	jmp    c002efac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c002ef16:	66 90                	xchg   ax,ax
c002ef18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ef1f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002ef22:	85 c0                	test   eax,eax
c002ef24:	0f 95 c0             	setne  al
c002ef27:	0f b6 c0             	movzx  eax,al
c002ef2a:	85 c0                	test   eax,eax
c002ef2c:	74 12                	je     c002ef40 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002ef2e:	83 ec 0c             	sub    esp,0xc
c002ef31:	68 7f 16 03 c0       	push   0xc003167f
c002ef36:	e8 af 15 ff ff       	call   c00204ea <KePanic(char const*)>
c002ef3b:	83 c4 10             	add    esp,0x10
c002ef3e:	66 90                	xchg   ax,ax
c002ef40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef44:	8b 00                	mov    eax,DWORD PTR [eax]
c002ef46:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002ef49:	85 c0                	test   eax,eax
c002ef4b:	0f 94 c0             	sete   al
c002ef4e:	0f b6 c0             	movzx  eax,al
c002ef51:	85 c0                	test   eax,eax
c002ef53:	74 33                	je     c002ef88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c002ef55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef59:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ef5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef63:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ef6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef6e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ef71:	83 f8 01             	cmp    eax,0x1
c002ef74:	74 22                	je     c002ef98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002ef76:	83 ec 0c             	sub    esp,0xc
c002ef79:	68 58 16 03 c0       	push   0xc0031658
c002ef7e:	e8 67 15 ff ff       	call   c00204ea <KePanic(char const*)>
c002ef83:	83 c4 10             	add    esp,0x10
c002ef86:	eb 10                	jmp    c002ef98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002ef88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef8c:	8b 00                	mov    eax,DWORD PTR [eax]
c002ef8e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002ef91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef95:	89 10                	mov    DWORD PTR [eax],edx
c002ef97:	90                   	nop
c002ef98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ef9f:	8d 50 ff             	lea    edx,[eax-0x1]
c002efa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efa6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002efa9:	8d 76 00             	lea    esi,[esi+0x0]
c002efac:	83 c4 0c             	add    esp,0xc
c002efaf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002efb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002efb0:	83 ec 0c             	sub    esp,0xc
c002efb3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002efb8:	75 12                	jne    c002efcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002efba:	83 ec 0c             	sub    esp,0xc
c002efbd:	68 fc 15 03 c0       	push   0xc00315fc
c002efc2:	e8 23 15 ff ff       	call   c00204ea <KePanic(char const*)>
c002efc7:	83 c4 10             	add    esp,0x10
c002efca:	66 90                	xchg   ax,ax
c002efcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efd0:	8b 00                	mov    eax,DWORD PTR [eax]
c002efd2:	85 c0                	test   eax,eax
c002efd4:	74 36                	je     c002f00c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002efd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002efdd:	85 c0                	test   eax,eax
c002efdf:	74 2b                	je     c002f00c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002efe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efe5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002efe8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002efec:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002efef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eff3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eff7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002effa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002effe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f001:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002f008:	eb 6a                	jmp    c002f074 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002f00a:	66 90                	xchg   ax,ax
c002f00c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f010:	8b 00                	mov    eax,DWORD PTR [eax]
c002f012:	85 c0                	test   eax,eax
c002f014:	75 4e                	jne    c002f064 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002f016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f01a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f01d:	85 c0                	test   eax,eax
c002f01f:	75 43                	jne    c002f064 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002f021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f025:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f029:	89 10                	mov    DWORD PTR [eax],edx
c002f02b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f02f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f033:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f03a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f03d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002f044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f048:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f04b:	85 c0                	test   eax,eax
c002f04d:	74 25                	je     c002f074 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002f04f:	83 ec 0c             	sub    esp,0xc
c002f052:	68 1e 16 03 c0       	push   0xc003161e
c002f057:	e8 8e 14 ff ff       	call   c00204ea <KePanic(char const*)>
c002f05c:	83 c4 10             	add    esp,0x10
c002f05f:	eb 13                	jmp    c002f074 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002f061:	8d 76 00             	lea    esi,[esi+0x0]
c002f064:	83 ec 0c             	sub    esp,0xc
c002f067:	68 28 16 03 c0       	push   0xc0031628
c002f06c:	e8 79 14 ff ff       	call   c00204ea <KePanic(char const*)>
c002f071:	83 c4 10             	add    esp,0x10
c002f074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f078:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f07b:	8d 50 01             	lea    edx,[eax+0x1]
c002f07e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f082:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f085:	90                   	nop
c002f086:	83 c4 0c             	add    esp,0xc
c002f089:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002f08c <ACPI::~ACPI()>:
c002f08c:	83 ec 0c             	sub    esp,0xc
c002f08f:	ba 60 29 03 c0       	mov    edx,0xc0032960
c002f094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f098:	89 10                	mov    DWORD PTR [eax],edx
c002f09a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f09e:	83 ec 0c             	sub    esp,0xc
c002f0a1:	50                   	push   eax
c002f0a2:	e8 ad c3 fe ff       	call   c001b454 <Device::~Device()>
c002f0a7:	83 c4 10             	add    esp,0x10
c002f0aa:	90                   	nop
c002f0ab:	83 c4 0c             	add    esp,0xc
c002f0ae:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002f0b0 <ACPI::~ACPI()>:
c002f0b0:	83 ec 0c             	sub    esp,0xc
c002f0b3:	83 ec 0c             	sub    esp,0xc
c002f0b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f0ba:	e8 cd ff ff ff       	call   c002f08c <ACPI::~ACPI()>
c002f0bf:	83 c4 10             	add    esp,0x10
c002f0c2:	83 ec 08             	sub    esp,0x8
c002f0c5:	68 64 12 00 00       	push   0x1264
c002f0ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f0ce:	e8 d1 a2 fe ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c002f0d3:	83 c4 10             	add    esp,0x10
c002f0d6:	83 c4 0c             	add    esp,0xc
c002f0d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002f0dc <LinkedList<Device>::~LinkedList()>:
c002f0dc:	90                   	nop
c002f0dd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002f0e0 <LinkedList<Device>::isEmpty()>:
c002f0e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f0e4:	8b 00                	mov    eax,DWORD PTR [eax]
c002f0e6:	85 c0                	test   eax,eax
c002f0e8:	75 0e                	jne    c002f0f8 <LinkedList<Device>::isEmpty()+0x18>
c002f0ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f0ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f0f1:	85 c0                	test   eax,eax
c002f0f3:	75 03                	jne    c002f0f8 <LinkedList<Device>::isEmpty()+0x18>
c002f0f5:	b0 01                	mov    al,0x1
c002f0f7:	c3                   	ret    
c002f0f8:	b0 00                	mov    al,0x0
c002f0fa:	90                   	nop
c002f0fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002f0fc <LinkedList<Device>::getFirstElement()>:
c002f0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f100:	8b 00                	mov    eax,DWORD PTR [eax]
c002f102:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c002f104 <LinkedList<Device>::removeFirst()>:
c002f104:	83 ec 0c             	sub    esp,0xc
c002f107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f10b:	8b 00                	mov    eax,DWORD PTR [eax]
c002f10d:	85 c0                	test   eax,eax
c002f10f:	75 17                	jne    c002f128 <LinkedList<Device>::removeFirst()+0x24>
c002f111:	83 ec 0c             	sub    esp,0xc
c002f114:	68 34 16 03 c0       	push   0xc0031634
c002f119:	e8 cc 13 ff ff       	call   c00204ea <KePanic(char const*)>
c002f11e:	83 c4 10             	add    esp,0x10
c002f121:	e9 92 00 00 00       	jmp    c002f1b8 <LinkedList<Device>::removeFirst()+0xb4>
c002f126:	66 90                	xchg   ax,ax
c002f128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f12c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f12f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002f135:	85 c0                	test   eax,eax
c002f137:	74 13                	je     c002f14c <LinkedList<Device>::removeFirst()+0x48>
c002f139:	83 ec 0c             	sub    esp,0xc
c002f13c:	68 7f 16 03 c0       	push   0xc003167f
c002f141:	e8 a4 13 ff ff       	call   c00204ea <KePanic(char const*)>
c002f146:	83 c4 10             	add    esp,0x10
c002f149:	8d 76 00             	lea    esi,[esi+0x0]
c002f14c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f150:	8b 00                	mov    eax,DWORD PTR [eax]
c002f152:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002f158:	85 c0                	test   eax,eax
c002f15a:	75 34                	jne    c002f190 <LinkedList<Device>::removeFirst()+0x8c>
c002f15c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f160:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f16a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f171:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f175:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f178:	83 f8 01             	cmp    eax,0x1
c002f17b:	74 27                	je     c002f1a4 <LinkedList<Device>::removeFirst()+0xa0>
c002f17d:	83 ec 0c             	sub    esp,0xc
c002f180:	68 58 16 03 c0       	push   0xc0031658
c002f185:	e8 60 13 ff ff       	call   c00204ea <KePanic(char const*)>
c002f18a:	83 c4 10             	add    esp,0x10
c002f18d:	eb 15                	jmp    c002f1a4 <LinkedList<Device>::removeFirst()+0xa0>
c002f18f:	90                   	nop
c002f190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f194:	8b 00                	mov    eax,DWORD PTR [eax]
c002f196:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002f19c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1a0:	89 10                	mov    DWORD PTR [eax],edx
c002f1a2:	66 90                	xchg   ax,ax
c002f1a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f1ab:	8d 50 ff             	lea    edx,[eax-0x1]
c002f1ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f1b5:	8d 76 00             	lea    esi,[esi+0x0]
c002f1b8:	83 c4 0c             	add    esp,0xc
c002f1bb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002f1bc <CPU::~CPU()>:
c002f1bc:	83 ec 0c             	sub    esp,0xc
c002f1bf:	ba 08 2b 03 c0       	mov    edx,0xc0032b08
c002f1c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1c8:	89 10                	mov    DWORD PTR [eax],edx
c002f1ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1ce:	83 ec 0c             	sub    esp,0xc
c002f1d1:	50                   	push   eax
c002f1d2:	e8 7d c2 fe ff       	call   c001b454 <Device::~Device()>
c002f1d7:	83 c4 10             	add    esp,0x10
c002f1da:	90                   	nop
c002f1db:	83 c4 0c             	add    esp,0xc
c002f1de:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002f1e0 <CPU::~CPU()>:
c002f1e0:	83 ec 0c             	sub    esp,0xc
c002f1e3:	83 ec 0c             	sub    esp,0xc
c002f1e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1ea:	e8 cd ff ff ff       	call   c002f1bc <CPU::~CPU()>
c002f1ef:	83 c4 10             	add    esp,0x10
c002f1f2:	83 ec 08             	sub    esp,0x8
c002f1f5:	68 94 11 00 00       	push   0x1194
c002f1fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1fe:	e8 a1 a1 fe ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c002f203:	83 c4 10             	add    esp,0x10
c002f206:	83 c4 0c             	add    esp,0xc
c002f209:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002f20c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002f20c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002f210:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002f213:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002f214 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002f214:	90                   	nop
c002f215:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002f218 <ThreadControlBlock::ThreadControlBlock()>:
c002f218:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f21c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002f223:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f227:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002f22e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f232:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002f239:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f23d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002f244:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f248:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002f24f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f253:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002f257:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f25b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002f25f:	90                   	nop
c002f260:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002f264 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002f264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f268:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f26e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f272:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f279:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f27d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f284:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f288:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f28e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f292:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f299:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f29d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f2a4:	90                   	nop
c002f2a5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002f2a6 <PCI::~PCI()>:
c002f2a6:	83 ec 0c             	sub    esp,0xc
c002f2a9:	ba 28 3a 03 c0       	mov    edx,0xc0033a28
c002f2ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2b2:	89 10                	mov    DWORD PTR [eax],edx
c002f2b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2b8:	83 ec 0c             	sub    esp,0xc
c002f2bb:	50                   	push   eax
c002f2bc:	e8 2b bc fe ff       	call   c001aeec <Bus::~Bus()>
c002f2c1:	83 c4 10             	add    esp,0x10
c002f2c4:	90                   	nop
c002f2c5:	83 c4 0c             	add    esp,0xc
c002f2c8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002f2ca <PCI::~PCI()>:
c002f2ca:	83 ec 0c             	sub    esp,0xc
c002f2cd:	83 ec 0c             	sub    esp,0xc
c002f2d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f2d4:	e8 cd ff ff ff       	call   c002f2a6 <PCI::~PCI()>
c002f2d9:	83 c4 10             	add    esp,0x10
c002f2dc:	83 ec 08             	sub    esp,0x8
c002f2df:	68 5c 01 00 00       	push   0x15c
c002f2e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f2e8:	e8 b7 a0 fe ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c002f2ed:	83 c4 10             	add    esp,0x10
c002f2f0:	83 c4 0c             	add    esp,0xc
c002f2f3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002f2f4 <IDE::~IDE()>:
c002f2f4:	83 ec 0c             	sub    esp,0xc
c002f2f7:	ba dc 3a 03 c0       	mov    edx,0xc0033adc
c002f2fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f300:	89 10                	mov    DWORD PTR [eax],edx
c002f302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f306:	83 ec 0c             	sub    esp,0xc
c002f309:	50                   	push   eax
c002f30a:	e8 d5 c5 fe ff       	call   c001b8e4 <HardDiskController::~HardDiskController()>
c002f30f:	83 c4 10             	add    esp,0x10
c002f312:	90                   	nop
c002f313:	83 c4 0c             	add    esp,0xc
c002f316:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002f318 <IDE::~IDE()>:
c002f318:	83 ec 0c             	sub    esp,0xc
c002f31b:	83 ec 0c             	sub    esp,0xc
c002f31e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f322:	e8 cd ff ff ff       	call   c002f2f4 <IDE::~IDE()>
c002f327:	83 c4 10             	add    esp,0x10
c002f32a:	83 ec 08             	sub    esp,0x8
c002f32d:	68 70 02 00 00       	push   0x270
c002f332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f336:	e8 69 a0 fe ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c002f33b:	83 c4 10             	add    esp,0x10
c002f33e:	83 c4 0c             	add    esp,0xc
c002f341:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002f342 <SATABus::~SATABus()>:
c002f342:	83 ec 0c             	sub    esp,0xc
c002f345:	ba 2c 3b 03 c0       	mov    edx,0xc0033b2c
c002f34a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f34e:	89 10                	mov    DWORD PTR [eax],edx
c002f350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f354:	83 ec 0c             	sub    esp,0xc
c002f357:	50                   	push   eax
c002f358:	e8 87 c5 fe ff       	call   c001b8e4 <HardDiskController::~HardDiskController()>
c002f35d:	83 c4 10             	add    esp,0x10
c002f360:	90                   	nop
c002f361:	83 c4 0c             	add    esp,0xc
c002f364:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002f366 <SATABus::~SATABus()>:
c002f366:	83 ec 0c             	sub    esp,0xc
c002f369:	83 ec 0c             	sub    esp,0xc
c002f36c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f370:	e8 cd ff ff ff       	call   c002f342 <SATABus::~SATABus()>
c002f375:	83 c4 10             	add    esp,0x10
c002f378:	83 ec 08             	sub    esp,0x8
c002f37b:	68 64 01 00 00       	push   0x164
c002f380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f384:	e8 1b a0 fe ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c002f389:	83 c4 10             	add    esp,0x10
c002f38c:	83 c4 0c             	add    esp,0xc
c002f38f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002f390 <ATA::~ATA()>:
c002f390:	83 ec 0c             	sub    esp,0xc
c002f393:	ba 6c 3b 03 c0       	mov    edx,0xc0033b6c
c002f398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f39c:	89 10                	mov    DWORD PTR [eax],edx
c002f39e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3a2:	83 ec 0c             	sub    esp,0xc
c002f3a5:	50                   	push   eax
c002f3a6:	e8 1b c6 fe ff       	call   c001b9c6 <PhysicalDisk::~PhysicalDisk()>
c002f3ab:	83 c4 10             	add    esp,0x10
c002f3ae:	90                   	nop
c002f3af:	83 c4 0c             	add    esp,0xc
c002f3b2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002f3b4 <ATA::~ATA()>:
c002f3b4:	83 ec 0c             	sub    esp,0xc
c002f3b7:	83 ec 0c             	sub    esp,0xc
c002f3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f3be:	e8 cd ff ff ff       	call   c002f390 <ATA::~ATA()>
c002f3c3:	83 c4 10             	add    esp,0x10
c002f3c6:	83 ec 08             	sub    esp,0x8
c002f3c9:	68 7c 01 00 00       	push   0x17c
c002f3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f3d2:	e8 cd 9f fe ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c002f3d7:	83 c4 10             	add    esp,0x10
c002f3da:	83 c4 0c             	add    esp,0xc
c002f3dd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002f3de <ATAPI::~ATAPI()>:
c002f3de:	83 ec 0c             	sub    esp,0xc
c002f3e1:	ba b4 3b 03 c0       	mov    edx,0xc0033bb4
c002f3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3ea:	89 10                	mov    DWORD PTR [eax],edx
c002f3ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3f0:	83 ec 0c             	sub    esp,0xc
c002f3f3:	50                   	push   eax
c002f3f4:	e8 cd c5 fe ff       	call   c001b9c6 <PhysicalDisk::~PhysicalDisk()>
c002f3f9:	83 c4 10             	add    esp,0x10
c002f3fc:	90                   	nop
c002f3fd:	83 c4 0c             	add    esp,0xc
c002f400:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002f402 <ATAPI::~ATAPI()>:
c002f402:	83 ec 0c             	sub    esp,0xc
c002f405:	83 ec 0c             	sub    esp,0xc
c002f408:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f40c:	e8 cd ff ff ff       	call   c002f3de <ATAPI::~ATAPI()>
c002f411:	83 c4 10             	add    esp,0x10
c002f414:	83 ec 08             	sub    esp,0x8
c002f417:	68 84 01 00 00       	push   0x184
c002f41c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f420:	e8 7f 9f fe ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c002f425:	83 c4 10             	add    esp,0x10
c002f428:	83 c4 0c             	add    esp,0xc
c002f42b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002f42c <SATA::~SATA()>:
c002f42c:	83 ec 0c             	sub    esp,0xc
c002f42f:	ba 74 3c 03 c0       	mov    edx,0xc0033c74
c002f434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f438:	89 10                	mov    DWORD PTR [eax],edx
c002f43a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f43e:	83 ec 0c             	sub    esp,0xc
c002f441:	50                   	push   eax
c002f442:	e8 7f c5 fe ff       	call   c001b9c6 <PhysicalDisk::~PhysicalDisk()>
c002f447:	83 c4 10             	add    esp,0x10
c002f44a:	90                   	nop
c002f44b:	83 c4 0c             	add    esp,0xc
c002f44e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002f450 <SATA::~SATA()>:
c002f450:	83 ec 0c             	sub    esp,0xc
c002f453:	83 ec 0c             	sub    esp,0xc
c002f456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f45a:	e8 cd ff ff ff       	call   c002f42c <SATA::~SATA()>
c002f45f:	83 c4 10             	add    esp,0x10
c002f462:	83 ec 08             	sub    esp,0x8
c002f465:	68 7c 01 00 00       	push   0x17c
c002f46a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f46e:	e8 31 9f fe ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c002f473:	83 c4 10             	add    esp,0x10
c002f476:	83 c4 0c             	add    esp,0xc
c002f479:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002f47a <SATAPI::~SATAPI()>:
c002f47a:	83 ec 0c             	sub    esp,0xc
c002f47d:	ba 98 3d 03 c0       	mov    edx,0xc0033d98
c002f482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f486:	89 10                	mov    DWORD PTR [eax],edx
c002f488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f48c:	83 ec 0c             	sub    esp,0xc
c002f48f:	50                   	push   eax
c002f490:	e8 31 c5 fe ff       	call   c001b9c6 <PhysicalDisk::~PhysicalDisk()>
c002f495:	83 c4 10             	add    esp,0x10
c002f498:	90                   	nop
c002f499:	83 c4 0c             	add    esp,0xc
c002f49c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002f49e <SATAPI::~SATAPI()>:
c002f49e:	83 ec 0c             	sub    esp,0xc
c002f4a1:	83 ec 0c             	sub    esp,0xc
c002f4a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f4a8:	e8 cd ff ff ff       	call   c002f47a <SATAPI::~SATAPI()>
c002f4ad:	83 c4 10             	add    esp,0x10
c002f4b0:	83 ec 08             	sub    esp,0x8
c002f4b3:	68 84 01 00 00       	push   0x184
c002f4b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f4bc:	e8 e3 9e fe ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c002f4c1:	83 c4 10             	add    esp,0x10
c002f4c4:	83 c4 0c             	add    esp,0xc
c002f4c7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002f4c8 <IOAPIC::~IOAPIC()>:
c002f4c8:	83 ec 0c             	sub    esp,0xc
c002f4cb:	ba d8 3d 03 c0       	mov    edx,0xc0033dd8
c002f4d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f4d4:	89 10                	mov    DWORD PTR [eax],edx
c002f4d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f4da:	83 ec 0c             	sub    esp,0xc
c002f4dd:	50                   	push   eax
c002f4de:	e8 71 bf fe ff       	call   c001b454 <Device::~Device()>
c002f4e3:	83 c4 10             	add    esp,0x10
c002f4e6:	90                   	nop
c002f4e7:	83 c4 0c             	add    esp,0xc
c002f4ea:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002f4ec <IOAPIC::~IOAPIC()>:
c002f4ec:	83 ec 0c             	sub    esp,0xc
c002f4ef:	83 ec 0c             	sub    esp,0xc
c002f4f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f4f6:	e8 cd ff ff ff       	call   c002f4c8 <IOAPIC::~IOAPIC()>
c002f4fb:	83 c4 10             	add    esp,0x10
c002f4fe:	83 ec 08             	sub    esp,0x8
c002f501:	68 68 01 00 00       	push   0x168
c002f506:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f50a:	e8 95 9e fe ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c002f50f:	83 c4 10             	add    esp,0x10
c002f512:	83 c4 0c             	add    esp,0xc
c002f515:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002f518 <APICTimer::~APICTimer()>:
c002f518:	83 ec 0c             	sub    esp,0xc
c002f51b:	ba 20 3e 03 c0       	mov    edx,0xc0033e20
c002f520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f524:	89 10                	mov    DWORD PTR [eax],edx
c002f526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f52a:	83 ec 0c             	sub    esp,0xc
c002f52d:	50                   	push   eax
c002f52e:	e8 fd d9 fe ff       	call   c001cf30 <Timer::~Timer()>
c002f533:	83 c4 10             	add    esp,0x10
c002f536:	90                   	nop
c002f537:	83 c4 0c             	add    esp,0xc
c002f53a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002f53c <APICTimer::~APICTimer()>:
c002f53c:	83 ec 0c             	sub    esp,0xc
c002f53f:	83 ec 0c             	sub    esp,0xc
c002f542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f546:	e8 cd ff ff ff       	call   c002f518 <APICTimer::~APICTimer()>
c002f54b:	83 c4 10             	add    esp,0x10
c002f54e:	83 ec 08             	sub    esp,0x8
c002f551:	68 60 01 00 00       	push   0x160
c002f556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f55a:	e8 45 9e fe ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c002f55f:	83 c4 10             	add    esp,0x10
c002f562:	83 c4 0c             	add    esp,0xc
c002f565:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002f568 <PIT::~PIT()>:
c002f568:	83 ec 0c             	sub    esp,0xc
c002f56b:	ba 70 3e 03 c0       	mov    edx,0xc0033e70
c002f570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f574:	89 10                	mov    DWORD PTR [eax],edx
c002f576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f57a:	83 ec 0c             	sub    esp,0xc
c002f57d:	50                   	push   eax
c002f57e:	e8 ad d9 fe ff       	call   c001cf30 <Timer::~Timer()>
c002f583:	83 c4 10             	add    esp,0x10
c002f586:	90                   	nop
c002f587:	83 c4 0c             	add    esp,0xc
c002f58a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002f58c <PIT::~PIT()>:
c002f58c:	83 ec 0c             	sub    esp,0xc
c002f58f:	83 ec 0c             	sub    esp,0xc
c002f592:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f596:	e8 cd ff ff ff       	call   c002f568 <PIT::~PIT()>
c002f59b:	83 c4 10             	add    esp,0x10
c002f59e:	83 ec 08             	sub    esp,0x8
c002f5a1:	68 5c 01 00 00       	push   0x15c
c002f5a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f5aa:	e8 f5 9d fe ff       	call   c00193a4 <operator delete(void*, unsigned long)>
c002f5af:	83 c4 10             	add    esp,0x10
c002f5b2:	83 c4 0c             	add    esp,0xc
c002f5b5:	c3                   	ret    

Disassembly of section userkernel:

c0035000 <KiDefaultSignalHandlerAbort(int)>:
c0035000:	57                   	push   edi
c0035001:	b9 07 00 00 00       	mov    ecx,0x7
c0035006:	56                   	push   esi
c0035007:	be 5b 2c 03 c0       	mov    esi,0xc0032c5b
c003500c:	83 ec 24             	sub    esp,0x24
c003500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0035013:	fc                   	cld    
c0035014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035016:	8d 44 24 04          	lea    eax,[esp+0x4]
c003501a:	50                   	push   eax
c003501b:	6a 00                	push   0x0
c003501d:	6a 38                	push   0x38
c003501f:	6a 01                	push   0x1
c0035021:	e8 2c 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0035026:	83 c4 34             	add    esp,0x34
c0035029:	5e                   	pop    esi
c003502a:	5f                   	pop    edi
c003502b:	c3                   	ret    

c003502c <KiDefaultSignalHandlerTerminate(int)>:
c003502c:	57                   	push   edi
c003502d:	b9 08 00 00 00       	mov    ecx,0x8
c0035032:	56                   	push   esi
c0035033:	be 77 2c 03 c0       	mov    esi,0xc0032c77
c0035038:	83 ec 24             	sub    esp,0x24
c003503b:	89 e7                	mov    edi,esp
c003503d:	fc                   	cld    
c003503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035040:	54                   	push   esp
c0035041:	6a 00                	push   0x0
c0035043:	6a 37                	push   0x37
c0035045:	6a 01                	push   0x1
c0035047:	e8 06 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c003504c:	83 c4 34             	add    esp,0x34
c003504f:	5e                   	pop    esi
c0035050:	5f                   	pop    edi
c0035051:	c3                   	ret    

c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0035052:	53                   	push   ebx
c0035053:	83 ec 10             	sub    esp,0x10
c0035056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c003505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c003505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0035062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0035066:	cd 60                	int    0x60
c0035068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c003506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0035070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0035074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0035078:	83 c4 10             	add    esp,0x10
c003507b:	5b                   	pop    ebx
c003507c:	c3                   	ret    

Disassembly of section align_previous:

c0036000 <DO_NOT_DELETE()>:
c0036000:	c3                   	ret    
