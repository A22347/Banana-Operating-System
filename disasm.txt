
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 e3 86 02 00       	call   c0028708 <_init>
c0000025:	c3                   	ret    
c0000026:	bb b2 92 02 c0       	mov    ebx,0xc00292b2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb c0 92 02 c0    	cmp    ebx,0xc00292c0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 db 02 c0       	mov    eax,0xc002dbd8
c0000049:	3d d8 db 02 c0       	cmp    eax,0xc002dbd8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 db 02 c0       	push   0xc002dbd8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 db 02 c0       	mov    eax,0xc002dbd8
c0000075:	2d d8 db 02 c0       	sub    eax,0xc002dbd8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 db 02 c0       	push   0xc002dbd8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 08 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e208,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb c8 92 02 c0       	mov    ebx,0xc00292c8
c00000bb:	81 eb c4 92 02 c0    	sub    ebx,0xc00292c4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be c4 92 02 c0       	mov    esi,0xc00292c4
c00000ca:	a1 0c e2 02 c0       	mov    eax,ds:0xc002e20c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 0c e2 02 c0       	mov    ds:0xc002e20c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 0c e2 02 c0       	mov    eax,ds:0xc002e20c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 db 02 c0       	push   0xc002dbd8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 08 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e208,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 10 e2 02 c0       	push   0xc002e210
c000012c:	68 d8 db 02 c0       	push   0xc002dbd8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 bf d6 01 00       	call   c001da5a <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 f8 29 01 00       	call   c0012dab <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 9d d6 01 00       	call   c001da5a <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 eb da 01 00       	call   c001dec7 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 99 e0 01 00       	call   c001e47e <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 50 e6 02 c0 	lgdtd  ds:0xc002e650
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 d6 46 01 00       	call   c0014caf <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 28 e2 02 c0       	mov    ds:0xc002e228,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 28 e2 02 c0    	mov    DWORD PTR ds:0xc002e228,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 28 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e228
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 e0 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6d20],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 e0 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d20],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 e0 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6d20],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 e0 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6d20],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 e0 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d20],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 40 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e240
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 40 e2 02 c0    	mov    DWORD PTR ds:0xc002e240,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 44 e2 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1dbc]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 44 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1dbc],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 40 e2 02 c0    	mov    DWORD PTR ds:0xc002e240,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 6c e2 02 c0    	cmp    DWORD PTR ds:0xc002e26c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 7c e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e27c
c0000e60:	c7 42 0c 74 e2 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e274
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 7c e2 02 c0    	mov    DWORD PTR ds:0xc002e27c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 6c e2 02 c0    	mov    DWORD PTR ds:0xc002e26c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 40 e2 02 c0 02 	test   BYTE PTR ds:0xc002e240,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 40 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e240
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 44 e2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1dbc]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 44 e2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1dbc],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 74 e2 02 c0 	lea    edx,[eax*8-0x3ffd1d8c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 80 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e280
c00011e2:	81 fb 74 e2 02 c0    	cmp    ebx,0xc002e274
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 74 e2 02 c0       	cmp    eax,0xc002e274
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 70 e2 02 c0    	cmp    DWORD PTR ds:0xc002e270,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 7c e2 02 c0       	mov    ds:0xc002e27c,eax
c000121e:	a3 80 e2 02 c0       	mov    ds:0xc002e280,eax
c0001223:	a3 70 e2 02 c0       	mov    ds:0xc002e270,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 74 e2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e274
c0001231:	c7 40 0c 74 e2 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e274
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 80 e2 02 c0       	mov    ds:0xc002e280,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 74 e2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e274
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 38 e2 02 c0 	lea    ebp,[edx*4-0x3ffd1dc8]
c0001282:	8b 14 95 40 e2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1dc0]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 40 e2 02 c0 	lea    ecx,[edx*4-0x3ffd1dc0]
c000129d:	8b 14 95 40 e2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1dc0]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 74 e5 02 c0 	or     DWORD PTR [edi*4-0x3ffd1a8c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 74 e2 02 c0 	lea    eax,[eax*8-0x3ffd1d8c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 7c e2 02 c0    	mov    DWORD PTR ds:0xc002e27c,ecx
c0001357:	89 0d 80 e2 02 c0    	mov    DWORD PTR ds:0xc002e280,ecx
c000135d:	c7 41 08 74 e2 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e274
c0001364:	c7 41 0c 74 e2 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e274
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 6c e2 02 c0 	lea    edx,[ecx*8-0x3ffd1d94]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 74 e5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1a8c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 74 e5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1a8c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 6c e2 02 c0 	lea    edx,[eax*4-0x3ffd1d94]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 74 e5 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1a8c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 7c e2 02 c0    	mov    DWORD PTR ds:0xc002e27c,edi
c000142a:	89 3d 80 e2 02 c0    	mov    DWORD PTR ds:0xc002e280,edi
c0001430:	c7 47 08 74 e2 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e274
c0001437:	c7 47 0c 74 e2 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e274
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 70 e2 02 c0    	mov    DWORD PTR ds:0xc002e270,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 6c e2 02 c0       	mov    eax,ds:0xc002e26c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 6c e2 02 c0    	mov    DWORD PTR ds:0xc002e26c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 40 e2 02 c0       	mov    edx,0xc002e240
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 40 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e240,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 94 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e594
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 94 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e594,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 94 e5 02 c0    	mov    DWORD PTR ds:0xc002e594,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 6c e2 02 c0    	cmp    DWORD PTR ds:0xc002e26c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 6c e2 02 c0    	mov    DWORD PTR ds:0xc002e26c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 40 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e240,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 9c e5 02 c0    	push   DWORD PTR ds:0xc002e59c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 40 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e240,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 9c e5 02 c0       	mov    eax,ds:0xc002e59c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 6c e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e26c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 6c e2 02 c0       	mov    eax,ds:0xc002e26c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 44 e2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1dbc]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 74 e2 02 c0       	mov    eax,0xc002e274
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 6c e5 02 c0       	cmp    eax,0xc002e56c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 90 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e590
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 a4 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5a4
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 b4 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5b4
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 e4 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6c1c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 40 e2 02 c0       	mov    eax,ds:0xc002e240
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 40 e2 02 c0       	mov    ds:0xc002e240,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 84 e5 02 c0    	mov    DWORD PTR ds:0xc002e584,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 88 e5 02 c0    	mov    DWORD PTR ds:0xc002e588,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 8c e5 02 c0    	mov    DWORD PTR ds:0xc002e58c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 94 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e594,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 20 1d 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce2e0]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 4a f2 01 00       	jmp    c0020e76 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 20 1d 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce2e0]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 7b f2 01 00       	jmp    c0020ebd <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 20 1d 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce2e0]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 a3 f2 01 00       	jmp    c0020f04 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 28 4b 02 00       	call   c0026a6c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 00 95 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6b00]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 00 95 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6b00]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 00 94 02 c0       	mov    edx,0xc0029400
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 20 95 02 c0       	mov    edx,0xc0029520
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 60 ca 02 c0       	mov    edx,0xc002ca60
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 2c 95 02 c0       	mov    edx,0xc002952c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 10 95 02 c0       	mov    edx,0xc0029510
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 e0 e5 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1a20]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 c0 e5 02 c0    	mov    ax,ds:0xc002e5c0
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 c0 e5 02 c0    	mov    ds:0xc002e5c0,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 25 39 02 00       	call   c0026a6c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 32 95 02 c0       	mov    eax,0xc0029532
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 80 94 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6b80]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 3b 95 02 c0       	mov    eax,0xc002953b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 00 95 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6b00]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 f0 22 02 00       	call   c0026a6c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 10 95 02 c0       	mov    edx,0xc0029510
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 00 94 02 c0       	mov    edx,0xc0029400
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 10 94 02 c0       	mov    edx,0xc0029410
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 e0 e5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1a20]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 e0 e5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1a20],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 b7 0c 02 00       	call   c0026a6c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 9d 0c 02 00       	call   c0026a6c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 57 94 02 c0       	mov    eax,0xc0029457
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 50 94 02 c0       	mov    eax,0xc0029450
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 e0 e5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1a20]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 40 94 02 c0       	mov    esi,0xc0029440
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 e0 f3 01 00       	call   c0026a6c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 20 95 02 c0       	mov    edx,0xc0029520
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 20 94 02 c0       	mov    edx,0xc0029420
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 30 94 02 c0       	mov    edx,0xc0029430
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 42 95 02 c0       	mov    edx,0xc0029542
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 4e 95 02 c0       	mov    edx,0xc002954e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 62 95 02 c0       	mov    edx,0xc0029562
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 80 98 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029880
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 80 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029880
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 80 96 02 c0       	mov    eax,0xc0029680
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 c0 95 02 c0       	mov    eax,0xc00295c0
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 80 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6a80]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 34 fd 01 00       	call   c002853f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 f7 fc 01 00       	call   c0028521 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 cb fc 01 00       	call   c002853f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 7e f3 01 00       	call   c0027c44 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 f8 fd 01 00       	call   c00286d0 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 45 fc 01 00       	call   c002853f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 87 fb 01 00       	call   c002853f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 54 fb 01 00       	call   c0028521 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 41 fa 01 00       	call   c002853f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 09 fa 01 00       	call   c0028521 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 80 99 02 c0       	mov    eax,0xc0029980
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 15 f8 01 00       	call   c002853f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 da f7 01 00       	call   c0028521 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 e0 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6220]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 ea f4 01 00       	call   c00282d3 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 68 ee 01 00       	call   c0027c70 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 24 f7 01 00       	call   c0028543 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 12 f8 01 00       	call   c0028667 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 fc ed 01 00       	call   c0027c70 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 a7 f6 01 00       	call   c002853d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 88 f6 01 00       	call   c0028541 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 16 f8 01 00       	call   c00286f0 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 c8 f3 01 00       	call   c00282d3 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 46 ed 01 00       	call   c0027c70 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 02 f6 01 00       	call   c0028543 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 f0 f6 01 00       	call   c0028667 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 da ec 01 00       	call   c0027c70 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 85 f5 01 00       	call   c002853d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 65 f5 01 00       	call   c0028541 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 f2 f6 01 00       	call   c00286f0 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 a0 f4 01 00       	call   c002853f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 5e f4 01 00       	call   c0028521 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 46 f4 01 00       	call   c002853f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 b8 f1 01 00       	call   c00282d3 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 ba e4 01 00       	call   c00275f3 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 1d eb 01 00       	call   c0027c70 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 6f f1 01 00       	call   c00282d3 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 75 e4 01 00       	call   c00275f3 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 44 f1 01 00       	call   c00282d3 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 94 f3 01 00       	call   c002853d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 71 ea 01 00       	call   c0027c44 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 eb f4 01 00       	call   c00286d0 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 1a f3 01 00       	call   c0028521 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 15 ea 01 00       	call   c0027c44 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 93 f0 01 00       	call   c00282d3 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 16 ea 01 00       	call   c0027c70 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 68 f0 01 00       	call   c00282d3 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 cf ec 01 00       	call   c0027f54 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 4e e3 01 00       	call   c00275f3 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 ae dc 01 00       	call   c0026f88 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 85 f3 01 00       	call   c0028667 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 6e e9 01 00       	call   c0027c70 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 55 f3 01 00       	call   c0028667 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 c7 e2 01 00       	call   c00275f3 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 00 f2 01 00       	call   c0028543 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 e8 eb 01 00       	call   c0027f54 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 6e e2 01 00       	call   c00275f3 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 54 f3 01 00       	call   c00286f0 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 2e ef 01 00       	call   c00282d3 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 85 e8 01 00       	call   c0027c44 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 64 f1 01 00       	call   c002853f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 fd e1 01 00       	call   c00275f3 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 29 e8 01 00       	call   c0027c44 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 c3 f2 01 00       	call   c00286f0 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 7c ee 01 00       	call   c00282d3 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 f9 e7 01 00       	call   c0027c70 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 4c ee 01 00       	call   c00282d3 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 52 e1 01 00       	call   c00275f3 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 22 ee 01 00       	call   c00282d3 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 74 f0 01 00       	call   c002853f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 4b e7 01 00       	call   c0027c44 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 c5 f1 01 00       	call   c00286d0 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 f4 ef 01 00       	call   c0028521 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 ee e6 01 00       	call   c0027c44 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 6c ed 01 00       	call   c00282d3 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 ef e6 01 00       	call   c0027c70 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 41 ed 01 00       	call   c00282d3 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 a8 e9 01 00       	call   c0027f54 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 27 e0 01 00       	call   c00275f3 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 77 d9 01 00       	call   c0026f88 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 4e f0 01 00       	call   c0028667 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 37 e6 01 00       	call   c0027c70 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 1e f0 01 00       	call   c0028667 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 90 df 01 00       	call   c00275f3 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 c9 ee 01 00       	call   c0028543 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 b0 e8 01 00       	call   c0027f54 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 2f df 01 00       	call   c00275f3 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 15 f0 01 00       	call   c00286f0 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 ef eb 01 00       	call   c00282d3 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 46 e5 01 00       	call   c0027c44 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 25 ee 01 00       	call   c002853f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 be de 01 00       	call   c00275f3 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 ea e4 01 00       	call   c0027c44 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 5f eb 01 00       	call   c00282d3 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 65 de 01 00       	call   c00275f3 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 40 9e 02 c0       	mov    eax,0xc0029e40
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 54 9e 02 c0       	mov    eax,0xc0029e54
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 da e9 01 00       	call   c00282d3 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 58 e3 01 00       	call   c0027c70 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 ea d5 01 00       	call   c0026f88 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 c1 ec 01 00       	call   c0028667 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 aa e2 01 00       	call   c0027c70 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 8d ec 01 00       	call   c0028667 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 ff db 01 00       	call   c00275f3 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 5f ec 01 00       	call   c0028667 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 4e e2 01 00       	call   c0027c70 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 b7 db 01 00       	call   c00275f3 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 d8 d4 01 00       	call   c0026f88 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 af eb 01 00       	call   c0028667 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 98 e1 01 00       	call   c0027c70 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 7b eb 01 00       	call   c0028667 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 ed da 01 00       	call   c00275f3 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 4d eb 01 00       	call   c0028667 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 3c e1 01 00       	call   c0027c70 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 a5 da 01 00       	call   c00275f3 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 83 da 01 00       	call   c00275f3 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 5f d3 01 00       	call   c0026f88 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 36 ea 01 00       	call   c0028667 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 1f e0 01 00       	call   c0027c70 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 02 ea 01 00       	call   c0028667 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 74 d9 01 00       	call   c00275f3 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 d4 e9 01 00       	call   c0028667 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 bd df 01 00       	call   c0027c70 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 26 d9 01 00       	call   c00275f3 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 86 e9 01 00       	call   c0028667 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 6f df 01 00       	call   c0027c70 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 d8 d8 01 00       	call   c00275f3 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 ed d1 01 00       	call   c0026f88 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 c4 e8 01 00       	call   c0028667 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 ad de 01 00       	call   c0027c70 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 94 e8 01 00       	call   c0028667 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 06 d8 01 00       	call   c00275f3 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 66 e8 01 00       	call   c0028667 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 4f de 01 00       	call   c0027c70 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 b8 d7 01 00       	call   c00275f3 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 18 e8 01 00       	call   c0028667 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 01 de 01 00       	call   c0027c70 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 6a d7 01 00       	call   c00275f3 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 3e d7 01 00       	call   c00275f3 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 9b dd 01 00       	call   c0027c70 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 57 e6 01 00       	call   c0028543 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 e6 d6 01 00       	call   c00275f3 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 43 dd 01 00       	call   c0027c70 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 ff e5 01 00       	call   c0028543 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 79 cf 01 00       	call   c0026f88 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 50 e6 01 00       	call   c0028667 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 39 dc 01 00       	call   c0027c70 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 1c e6 01 00       	call   c0028667 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 8e d5 01 00       	call   c00275f3 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 ee e5 01 00       	call   c0028667 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 d7 db 01 00       	call   c0027c70 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 40 d5 01 00       	call   c00275f3 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 a0 e5 01 00       	call   c0028667 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 89 db 01 00       	call   c0027c70 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 f2 d4 01 00       	call   c00275f3 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 52 e5 01 00       	call   c0028667 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 3b db 01 00       	call   c0027c70 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 a4 d4 01 00       	call   c00275f3 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 04 e5 01 00       	call   c0028667 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 ed da 01 00       	call   c0027c70 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 56 d4 01 00       	call   c00275f3 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 58 cd 01 00       	call   c0026f88 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 2f e4 01 00       	call   c0028667 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 18 da 01 00       	call   c0027c70 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 ff e3 01 00       	call   c0028667 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 71 d3 01 00       	call   c00275f3 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 d1 e3 01 00       	call   c0028667 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 ba d9 01 00       	call   c0027c70 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 23 d3 01 00       	call   c00275f3 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 83 e3 01 00       	call   c0028667 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 6c d9 01 00       	call   c0027c70 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 d5 d2 01 00       	call   c00275f3 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 35 e3 01 00       	call   c0028667 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 1e d9 01 00       	call   c0027c70 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 87 d2 01 00       	call   c00275f3 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 e7 e2 01 00       	call   c0028667 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 d0 d8 01 00       	call   c0027c70 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 39 d2 01 00       	call   c00275f3 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 0d d2 01 00       	call   c00275f3 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 6a d8 01 00       	call   c0027c70 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 26 e1 01 00       	call   c0028543 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 b5 d1 01 00       	call   c00275f3 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 12 d8 01 00       	call   c0027c70 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 ce e0 01 00       	call   c0028543 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 5c d1 01 00       	call   c00275f3 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 b9 d7 01 00       	call   c0027c70 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 75 e0 01 00       	call   c0028543 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 03 d1 01 00       	call   c00275f3 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 60 d7 01 00       	call   c0027c70 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 1c e0 01 00       	call   c0028543 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 7a c9 01 00       	call   c0026f88 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 51 e0 01 00       	call   c0028667 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 3a d6 01 00       	call   c0027c70 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 1d e0 01 00       	call   c0028667 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 8f cf 01 00       	call   c00275f3 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 ef df 01 00       	call   c0028667 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 d8 d5 01 00       	call   c0027c70 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 41 cf 01 00       	call   c00275f3 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 a1 df 01 00       	call   c0028667 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 8a d5 01 00       	call   c0027c70 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 f3 ce 01 00       	call   c00275f3 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 53 df 01 00       	call   c0028667 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 3c d5 01 00       	call   c0027c70 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 a5 ce 01 00       	call   c00275f3 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 05 df 01 00       	call   c0028667 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 ee d4 01 00       	call   c0027c70 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 57 ce 01 00       	call   c00275f3 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 b7 de 01 00       	call   c0028667 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 a0 d4 01 00       	call   c0027c70 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 06 ce 01 00       	call   c00275f3 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 66 de 01 00       	call   c0028667 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 4f d4 01 00       	call   c0027c70 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 b8 cd 01 00       	call   c00275f3 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 b2 c6 01 00       	call   c0026f88 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 89 dd 01 00       	call   c0028667 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 72 d3 01 00       	call   c0027c70 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 52 dd 01 00       	call   c0028667 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 c4 cc 01 00       	call   c00275f3 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 24 dd 01 00       	call   c0028667 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 0d d3 01 00       	call   c0027c70 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 76 cc 01 00       	call   c00275f3 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 d6 dc 01 00       	call   c0028667 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 bf d2 01 00       	call   c0027c70 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 28 cc 01 00       	call   c00275f3 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 88 dc 01 00       	call   c0028667 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 71 d2 01 00       	call   c0027c70 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 da cb 01 00       	call   c00275f3 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 3a dc 01 00       	call   c0028667 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 23 d2 01 00       	call   c0027c70 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 8c cb 01 00       	call   c00275f3 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 ec db 01 00       	call   c0028667 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 d5 d1 01 00       	call   c0027c70 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 3b cb 01 00       	call   c00275f3 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 9b db 01 00       	call   c0028667 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 84 d1 01 00       	call   c0027c70 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 f3 ca 01 00       	call   c00275f3 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 cc ca 01 00       	call   c00275f3 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 2a d1 01 00       	call   c0027c70 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 e6 d9 01 00       	call   c0028543 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 75 ca 01 00       	call   c00275f3 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 d3 d0 01 00       	call   c0027c70 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 8f d9 01 00       	call   c0028543 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 1d ca 01 00       	call   c00275f3 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 7b d0 01 00       	call   c0027c70 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 37 d9 01 00       	call   c0028543 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 c5 c9 01 00       	call   c00275f3 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 23 d0 01 00       	call   c0027c70 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 df d8 01 00       	call   c0028543 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 6d c9 01 00       	call   c00275f3 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 cb cf 01 00       	call   c0027c70 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 87 d8 01 00       	call   c0028543 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 1b c9 01 00       	call   c00275f3 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 79 cf 01 00       	call   c0027c70 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 35 d8 01 00       	call   c0028543 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 49 c1 01 00       	call   c0026f88 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 20 d8 01 00       	call   c0028667 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 09 ce 01 00       	call   c0027c70 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 f0 d7 01 00       	call   c0028667 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 62 c7 01 00       	call   c00275f3 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 84 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd617c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 96 d7 01 00       	call   c0028667 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 7f cd 01 00       	call   c0027c70 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 ea c6 01 00       	call   c00275f3 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 37 d7 01 00       	call   c0028667 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 20 cd 01 00       	call   c0027c70 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 8b c6 01 00       	call   c00275f3 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 d8 d6 01 00       	call   c0028667 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 c1 cc 01 00       	call   c0027c70 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 2c c6 01 00       	call   c00275f3 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 79 d6 01 00       	call   c0028667 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 62 cc 01 00       	call   c0027c70 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 cd c5 01 00       	call   c00275f3 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 1a d6 01 00       	call   c0028667 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 03 cc 01 00       	call   c0027c70 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 6e c5 01 00       	call   c00275f3 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 bb d5 01 00       	call   c0028667 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 a4 cb 01 00       	call   c0027c70 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 0f c5 01 00       	call   c00275f3 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 5c d5 01 00       	call   c0028667 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 45 cb 01 00       	call   c0027c70 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 b0 c4 01 00       	call   c00275f3 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 fd d4 01 00       	call   c0028667 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 e6 ca 01 00       	call   c0027c70 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 51 c4 01 00       	call   c00275f3 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 5b bd 01 00       	call   c0026f88 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 32 d4 01 00       	call   c0028667 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 1b ca 01 00       	call   c0027c70 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 02 d4 01 00       	call   c0028667 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 74 c3 01 00       	call   c00275f3 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 a0 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6160]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 a7 d3 01 00       	call   c0028667 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 90 c9 01 00       	call   c0027c70 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 fb c2 01 00       	call   c00275f3 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 47 d3 01 00       	call   c0028667 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 30 c9 01 00       	call   c0027c70 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 9b c2 01 00       	call   c00275f3 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 e7 d2 01 00       	call   c0028667 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 d0 c8 01 00       	call   c0027c70 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 3b c2 01 00       	call   c00275f3 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 87 d2 01 00       	call   c0028667 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 70 c8 01 00       	call   c0027c70 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 db c1 01 00       	call   c00275f3 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 27 d2 01 00       	call   c0028667 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 10 c8 01 00       	call   c0027c70 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 7b c1 01 00       	call   c00275f3 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 c7 d1 01 00       	call   c0028667 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 b0 c7 01 00       	call   c0027c70 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 1b c1 01 00       	call   c00275f3 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 67 d1 01 00       	call   c0028667 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 50 c7 01 00       	call   c0027c70 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 bb c0 01 00       	call   c00275f3 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 07 d1 01 00       	call   c0028667 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 f0 c6 01 00       	call   c0027c70 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 5b c0 01 00       	call   c00275f3 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 bc 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6144]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 00 c0 01 00       	call   c00275f3 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 5d c6 01 00       	call   c0027c70 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 19 cf 01 00       	call   c0028543 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 a3 bf 01 00       	call   c00275f3 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 00 c6 01 00       	call   c0027c70 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 bc ce 01 00       	call   c0028543 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 46 bf 01 00       	call   c00275f3 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 a3 c5 01 00       	call   c0027c70 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 5f ce 01 00       	call   c0028543 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 e9 be 01 00       	call   c00275f3 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 46 c5 01 00       	call   c0027c70 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 02 ce 01 00       	call   c0028543 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 8c be 01 00       	call   c00275f3 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 e9 c4 01 00       	call   c0027c70 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 a5 cd 01 00       	call   c0028543 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 2f be 01 00       	call   c00275f3 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 8c c4 01 00       	call   c0027c70 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 48 cd 01 00       	call   c0028543 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 d2 bd 01 00       	call   c00275f3 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 2f c4 01 00       	call   c0027c70 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 eb cc 01 00       	call   c0028543 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 75 bd 01 00       	call   c00275f3 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 d2 c3 01 00       	call   c0027c70 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 8e cc 01 00       	call   c0028543 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 8a c3 01 00       	call   c0027c70 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 fa cd 01 00       	jmp    c00286f0 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 6c ca 01 00       	call   c002853f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 2a ca 01 00       	call   c0028521 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 c1 c7 01 00       	call   c00282d3 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 c2 ba 01 00       	call   c00275f3 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 91 c7 01 00       	call   c00282d3 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 f8 c3 01 00       	call   c0027f54 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 97 c9 01 00       	call   c0028521 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 9a c9 01 00       	call   c002853f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 6d c9 01 00       	call   c002853f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 66 c3 01 00       	call   c0027f54 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 e8 ca 01 00       	call   c00286f0 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 c3 ca 01 00       	call   c00286f0 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 9d c6 01 00       	call   c00282d3 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 f4 bf 01 00       	call   c0027c44 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 d3 c8 01 00       	call   c002853f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 6c b9 01 00       	call   c00275f3 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 90 bf 01 00       	call   c0027c44 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 2a ca 01 00       	call   c00286f0 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 6a c2 01 00       	call   c0027f54 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 e7 b8 01 00       	call   c00275f3 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 13 c5 01 00       	call   c00282d3 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 13 b8 01 00       	call   c00275f3 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 f3 b7 01 00       	call   c00275f3 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 c3 c4 01 00       	call   c00282d3 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 13 c7 01 00       	call   c002853d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 f2 bd 01 00       	call   c0027c44 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 6c c8 01 00       	call   c00286d0 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 9b c6 01 00       	call   c0028521 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 99 bd 01 00       	call   c0027c44 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 17 c4 01 00       	call   c00282d3 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 9a bd 01 00       	call   c0027c70 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 ec c3 01 00       	call   c00282d3 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 53 c0 01 00       	call   c0027f54 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 d2 b6 01 00       	call   c00275f3 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 9c c3 01 00       	call   c00282d3 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 e8 c5 01 00       	call   c002853f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 dd bc 01 00       	call   c0027c70 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 af bc 01 00       	call   c0027c70 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 e8 c2 01 00       	call   c00282d3 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 4c bf 01 00       	call   c0027f54 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 14 bf 01 00       	call   c0027f54 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 93 b5 01 00       	call   c00275f3 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 78 c6 01 00       	call   c00286f0 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 52 c2 01 00       	call   c00282d3 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 a9 bb 01 00       	call   c0027c44 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 88 c4 01 00       	call   c002853f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 20 b5 01 00       	call   c00275f3 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 44 bb 01 00       	call   c0027c44 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 de c5 01 00       	call   c00286f0 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 a7 c3 01 00       	call   c002853f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 65 c3 01 00       	call   c0028521 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 fc c0 01 00       	call   c00282d3 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 fd b3 01 00       	call   c00275f3 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 cc c0 01 00       	call   c00282d3 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 33 bd 01 00       	call   c0027f54 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 d2 c2 01 00       	call   c0028521 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 d5 c2 01 00       	call   c002853f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 a8 c2 01 00       	call   c002853f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 a1 bc 01 00       	call   c0027f54 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 23 c4 01 00       	call   c00286f0 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 fe c3 01 00       	call   c00286f0 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 d8 bf 01 00       	call   c00282d3 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 2f b9 01 00       	call   c0027c44 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 0e c2 01 00       	call   c002853f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 a7 b2 01 00       	call   c00275f3 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 cb b8 01 00       	call   c0027c44 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 65 c3 01 00       	call   c00286f0 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 a5 bb 01 00       	call   c0027f54 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 22 b2 01 00       	call   c00275f3 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 4d be 01 00       	call   c00282d3 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 4d b1 01 00       	call   c00275f3 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 2d b1 01 00       	call   c00275f3 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 fd bd 01 00       	call   c00282d3 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 4d c0 01 00       	call   c002853d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 2b b7 01 00       	call   c0027c44 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 a5 c1 01 00       	call   c00286d0 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 d4 bf 01 00       	call   c0028521 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 d1 b6 01 00       	call   c0027c44 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 4f bd 01 00       	call   c00282d3 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 d2 b6 01 00       	call   c0027c70 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 24 bd 01 00       	call   c00282d3 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 8b b9 01 00       	call   c0027f54 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 0a b0 01 00       	call   c00275f3 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 d4 bc 01 00       	call   c00282d3 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 20 bf 01 00       	call   c002853f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 15 b6 01 00       	call   c0027c70 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 e7 b5 01 00       	call   c0027c70 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 1e bc 01 00       	call   c00282d3 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 82 b8 01 00       	call   c0027f54 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 4f b8 01 00       	call   c0027f54 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 ce ae 01 00       	call   c00275f3 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 b3 bf 01 00       	call   c00286f0 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 8d bb 01 00       	call   c00282d3 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 e4 b4 01 00       	call   c0027c44 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 c3 bd 01 00       	call   c002853f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 5b ae 01 00       	call   c00275f3 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 7f b4 01 00       	call   c0027c44 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 19 bf 01 00       	call   c00286f0 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 e2 bc 01 00       	call   c002853f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 a0 bc 01 00       	call   c0028521 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 37 ba 01 00       	call   c00282d3 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 38 ad 01 00       	call   c00275f3 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 07 ba 01 00       	call   c00282d3 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 6e b6 01 00       	call   c0027f54 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 0d bc 01 00       	call   c0028521 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 10 bc 01 00       	call   c002853f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 e3 bb 01 00       	call   c002853f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 dc b5 01 00       	call   c0027f54 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 5e bd 01 00       	call   c00286f0 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 39 bd 01 00       	call   c00286f0 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 13 b9 01 00       	call   c00282d3 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 6a b2 01 00       	call   c0027c44 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 49 bb 01 00       	call   c002853f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 e2 ab 01 00       	call   c00275f3 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 06 b2 01 00       	call   c0027c44 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 a0 bc 01 00       	call   c00286f0 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 e0 b4 01 00       	call   c0027f54 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 5d ab 01 00       	call   c00275f3 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 88 b7 01 00       	call   c00282d3 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 88 aa 01 00       	call   c00275f3 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 68 aa 01 00       	call   c00275f3 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 38 b7 01 00       	call   c00282d3 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 88 b9 01 00       	call   c002853d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 66 b0 01 00       	call   c0027c44 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 e0 ba 01 00       	call   c00286d0 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 0f b9 01 00       	call   c0028521 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 0c b0 01 00       	call   c0027c44 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 8a b6 01 00       	call   c00282d3 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 0d b0 01 00       	call   c0027c70 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 5f b6 01 00       	call   c00282d3 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 c6 b2 01 00       	call   c0027f54 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 45 a9 01 00       	call   c00275f3 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 0f b6 01 00       	call   c00282d3 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 5b b8 01 00       	call   c002853f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 50 af 01 00       	call   c0027c70 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 22 af 01 00       	call   c0027c70 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 59 b5 01 00       	call   c00282d3 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 bd b1 01 00       	call   c0027f54 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 8a b1 01 00       	call   c0027f54 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 09 a8 01 00       	call   c00275f3 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 ee b8 01 00       	call   c00286f0 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 c8 b4 01 00       	call   c00282d3 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 1f ae 01 00       	call   c0027c44 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 fe b6 01 00       	call   c002853f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 96 a7 01 00       	call   c00275f3 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 ba ad 01 00       	call   c0027c44 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 54 b8 01 00       	call   c00286f0 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 1d b6 01 00       	call   c002853f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 db b5 01 00       	call   c0028521 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 72 b3 01 00       	call   c00282d3 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 73 a6 01 00       	call   c00275f3 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 42 b3 01 00       	call   c00282d3 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 a9 af 01 00       	call   c0027f54 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 48 b5 01 00       	call   c0028521 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 4b b5 01 00       	call   c002853f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 1e b5 01 00       	call   c002853f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 17 af 01 00       	call   c0027f54 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 99 b6 01 00       	call   c00286f0 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 74 b6 01 00       	call   c00286f0 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 4e b2 01 00       	call   c00282d3 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 a5 ab 01 00       	call   c0027c44 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 84 b4 01 00       	call   c002853f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 1d a5 01 00       	call   c00275f3 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 41 ab 01 00       	call   c0027c44 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 db b5 01 00       	call   c00286f0 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 1b ae 01 00       	call   c0027f54 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 98 a4 01 00       	call   c00275f3 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 c3 b0 01 00       	call   c00282d3 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 c3 a3 01 00       	call   c00275f3 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 a3 a3 01 00       	call   c00275f3 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 73 b0 01 00       	call   c00282d3 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 c3 b2 01 00       	call   c002853d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 a1 a9 01 00       	call   c0027c44 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 1b b4 01 00       	call   c00286d0 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 4a b2 01 00       	call   c0028521 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 47 a9 01 00       	call   c0027c44 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 c5 af 01 00       	call   c00282d3 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 48 a9 01 00       	call   c0027c70 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 9a af 01 00       	call   c00282d3 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 01 ac 01 00       	call   c0027f54 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 80 a2 01 00       	call   c00275f3 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 4a af 01 00       	call   c00282d3 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 96 b1 01 00       	call   c002853f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 8b a8 01 00       	call   c0027c70 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 5d a8 01 00       	call   c0027c70 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 94 ae 01 00       	call   c00282d3 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 f8 aa 01 00       	call   c0027f54 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 c5 aa 01 00       	call   c0027f54 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 44 a1 01 00       	call   c00275f3 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 29 b2 01 00       	call   c00286f0 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 03 ae 01 00       	call   c00282d3 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 5a a7 01 00       	call   c0027c44 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 39 b0 01 00       	call   c002853f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 d1 a0 01 00       	call   c00275f3 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 f5 a6 01 00       	call   c0027c44 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 8f b1 01 00       	call   c00286f0 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 55 af 01 00       	call   c002853f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 13 af 01 00       	call   c0028521 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 aa ac 01 00       	call   c00282d3 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 ab 9f 01 00       	call   c00275f3 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 7a ac 01 00       	call   c00282d3 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 e1 a8 01 00       	call   c0027f54 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 80 ae 01 00       	call   c0028521 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 83 ae 01 00       	call   c002853f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 56 ae 01 00       	call   c002853f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 4f a8 01 00       	call   c0027f54 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 d1 af 01 00       	call   c00286f0 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 a8 af 01 00       	call   c00286f0 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 82 ab 01 00       	call   c00282d3 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 d9 a4 01 00       	call   c0027c44 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 b8 ad 01 00       	call   c002853f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 51 9e 01 00       	call   c00275f3 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 79 a4 01 00       	call   c0027c44 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 13 af 01 00       	call   c00286f0 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 54 a7 01 00       	call   c0027f54 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 d1 9d 01 00       	call   c00275f3 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 fd a9 01 00       	call   c00282d3 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 fd 9c 01 00       	call   c00275f3 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 dd 9c 01 00       	call   c00275f3 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 ad a9 01 00       	call   c00282d3 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 e1 ab 01 00       	call   c0028521 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 d8 a2 01 00       	call   c0027c44 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 52 ad 01 00       	call   c00286d0 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 81 ab 01 00       	call   c0028521 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 7b a2 01 00       	call   c0027c44 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 f9 a8 01 00       	call   c00282d3 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 7c a2 01 00       	call   c0027c70 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 ce a8 01 00       	call   c00282d3 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 35 a5 01 00       	call   c0027f54 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 b4 9b 01 00       	call   c00275f3 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 7e a8 01 00       	call   c00282d3 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 ca aa 01 00       	call   c002853f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 bf a1 01 00       	call   c0027c70 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 91 a1 01 00       	call   c0027c70 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 d5 a7 01 00       	call   c00282d3 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 3c a4 01 00       	call   c0027f54 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 25 a1 01 00       	call   c0027c70 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 e1 a9 01 00       	call   c0028543 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 d4 a3 01 00       	call   c0027f54 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 53 9a 01 00       	call   c00275f3 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 38 ab 01 00       	call   c00286f0 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 12 a7 01 00       	call   c00282d3 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 69 a0 01 00       	call   c0027c44 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 48 a9 01 00       	call   c002853f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 e0 99 01 00       	call   c00275f3 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 08 a0 01 00       	call   c0027c44 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 a2 aa 01 00       	call   c00286f0 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 e4 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd611c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 d8 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6128]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 5d a7 01 00       	call   c002853f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 1b a7 01 00       	call   c0028521 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 07 a7 01 00       	call   c002853f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 79 a4 01 00       	call   c00282d3 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 f7 9d 01 00       	call   c0027c70 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 49 a4 01 00       	call   c00282d3 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 4f 97 01 00       	call   c00275f3 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 1e a4 01 00       	call   c00282d3 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 6e a6 01 00       	call   c002853d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 4f 9d 01 00       	call   c0027c44 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 c9 a7 01 00       	call   c00286d0 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 f8 a5 01 00       	call   c0028521 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 f7 9c 01 00       	call   c0027c44 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 75 a3 01 00       	call   c00282d3 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 f8 9c 01 00       	call   c0027c70 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 4a a3 01 00       	call   c00282d3 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 b1 9f 01 00       	call   c0027f54 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 30 96 01 00       	call   c00275f3 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 58 9f 01 00       	call   c0027f54 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 de 95 01 00       	call   c00275f3 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 c4 a6 01 00       	call   c00286f0 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 9e a2 01 00       	call   c00282d3 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 f5 9b 01 00       	call   c0027c44 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 d4 a4 01 00       	call   c002853f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 6d 95 01 00       	call   c00275f3 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 99 9b 01 00       	call   c0027c44 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 33 a6 01 00       	call   c00286f0 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 e8 a1 01 00       	call   c00282d3 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 65 9b 01 00       	call   c0027c70 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 b6 a1 01 00       	call   c00282d3 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 bc 94 01 00       	call   c00275f3 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 8c a1 01 00       	call   c00282d3 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 e0 a3 01 00       	call   c0028541 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 b9 9a 01 00       	call   c0027c44 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 33 a5 01 00       	call   c00286d0 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 62 a3 01 00       	call   c0028521 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 60 9a 01 00       	call   c0027c44 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 de a0 01 00       	call   c00282d3 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 61 9a 01 00       	call   c0027c70 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 b3 a0 01 00       	call   c00282d3 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 1a 9d 01 00       	call   c0027f54 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 99 93 01 00       	call   c00275f3 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 b5 9c 01 00       	call   c0027f54 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 34 93 01 00       	call   c00275f3 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 1a a4 01 00       	call   c00286f0 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 f4 9f 01 00       	call   c00282d3 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 4b 99 01 00       	call   c0027c44 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 2a a2 01 00       	call   c002853f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 c3 92 01 00       	call   c00275f3 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 ef 98 01 00       	call   c0027c44 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 60 9f 01 00       	call   c00282d3 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 66 92 01 00       	call   c00275f3 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 fe 9f 02 c0       	mov    eax,0xc0029ffe
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 0f a0 02 c0       	mov    eax,0xc002a00f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 46 a0 02 c0       	push   0xc002a046
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 48 e6 02 c0       	mov    eax,0xc002e648
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 4f a0 02 c0       	push   0xc002a04f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 6c 6a 02 c0       	mov    eax,0xc0026a6c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 59 a0 02 c0       	push   0xc002a059
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 a0 67 02 c0       	mov    eax,0xc00267a0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 62 a0 02 c0       	push   0xc002a062
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 6c 6b 02 c0       	mov    eax,0xc0026b6c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 6c a0 02 c0       	push   0xc002a06c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 ec 68 02 c0       	mov    eax,0xc00268ec
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 75 a0 02 c0       	push   0xc002a075
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 4c e6 02 c0       	mov    eax,0xc002e64c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 82 a0 02 c0       	push   0xc002a082
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 4d e6 02 c0       	mov    eax,0xc002e64d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 47 5f 00 00       	call   c001456a <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 b4 1b 03 c0    	push   DWORD PTR ds:0xc0031bb4
c000e668:	68 8f a0 02 c0       	push   0xc002a08f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 53 f6 00 00       	call   c001dcc8 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 3c f9 00 00       	call   c001dfc6 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 24 e8 01 c0       	push   0xc001e824
c000e693:	ff 35 b4 1b 03 c0    	push   DWORD PTR ds:0xc0031bb4
c000e699:	e8 28 f9 00 00       	call   c001dfc6 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 68 1b 03 c0       	mov    ds:0xc0031b68,eax
c000e6a6:	c6 05 4d e6 02 c0 01 	mov    BYTE PTR ds:0xc002e64d,0x1
c000e6ad:	e8 f3 04 01 00       	call   c001eba5 <Vm::initialise8086()>
c000e6b2:	e8 9b 4c 00 00       	call   c0013352 <Fs::initVFS()>
c000e6b7:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 85 df 00 00       	call   c001c658 <Sys::loadSyscalls()>
c000e6d3:	e8 5e be 00 00       	call   c001a536 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 9c a0 02 c0       	push   0xc002a09c
c000e6e2:	68 a5 a0 02 c0       	push   0xc002a0a5
c000e6e7:	e8 70 cb 00 00       	call   c001b25c <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 46 57 00 00       	call   c0013e3a <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 39 5e 00 00       	call   c001453e <Device::loadDriversForAll()>
c000e705:	e8 72 b9 00 00       	call   c001a07c <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 48 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e648
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 ad a0 02 c0       	push   0xc002a0ad
c000e719:	e8 ce f0 00 00       	call   c001d7ec <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 f9 f2 00 00       	call   c001da20 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 f6 fb 00 00       	call   c001e32a <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 c9 a0 02 c0       	push   0xc002a0c9
c000e749:	50                   	push   eax
c000e74a:	e8 95 5e 00 00       	call   c00145e4 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 68 a2 02 c0       	mov    edx,0xc002a268
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 61 e6 02 c0 04 	test   BYTE PTR ds:0xc002e661,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 53 7e 01 00       	call   c0026736 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 70 a4 00 00       	call   c0018d8e <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 49 a4 00 00       	call   c0018d8e <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 27 a4 00 00       	call   c0018d8e <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 05 a4 00 00       	call   c0018d8e <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 60 e6 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e660,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 13 a3 00 00       	call   c0018d0a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 ee a2 00 00       	call   c0018d0a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 bd 7c 01 00       	call   c00266f0 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 7a 7c 01 00       	call   c00266d0 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 0a a3 00 00       	call   c0018d8e <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 d9 a0 02 c0       	push   0xc002a0d9
c000eaaf:	e8 19 45 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 ec a0 02 c0       	push   0xc002a0ec
c000ead2:	e8 f6 44 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 fd a0 02 c0       	push   0xc002a0fd
c000eaf5:	e8 d3 44 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 0e a1 02 c0       	push   0xc002a10e
c000eb18:	e8 b0 44 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 1f a1 02 c0       	push   0xc002a11f
c000eb3b:	e8 8d 44 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 30 a1 02 c0       	push   0xc002a130
c000eb5e:	e8 6a 44 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 41 a1 02 c0       	push   0xc002a141
c000eb81:	e8 47 44 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 52 a1 02 c0       	push   0xc002a152
c000eba4:	e8 24 44 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 63 a1 02 c0       	push   0xc002a163
c000ebc7:	e8 01 44 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 74 a1 02 c0       	push   0xc002a174
c000ebea:	e8 de 43 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 85 a1 02 c0       	push   0xc002a185
c000ec0d:	e8 bb 43 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 96 a1 02 c0       	push   0xc002a196
c000ec30:	e8 98 43 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 a7 a1 02 c0       	push   0xc002a1a7
c000ec53:	e8 75 43 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 b8 a1 02 c0       	push   0xc002a1b8
c000ec76:	e8 52 43 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 c9 a1 02 c0       	push   0xc002a1c9
c000ec99:	e8 2f 43 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 da a1 02 c0       	push   0xc002a1da
c000ecbc:	e8 0c 43 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 eb a1 02 c0       	push   0xc002a1eb
c000ecdf:	e8 e9 42 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 fc a1 02 c0       	push   0xc002a1fc
c000ed02:	e8 c6 42 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 0d a2 02 c0       	push   0xc002a20d
c000ed21:	e8 a7 42 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 d0 bc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bcd0
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 96 42 00 00       	jmp    c0012fcd <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 1e a2 02 c0       	push   0xc002a21e
c000ee0a:	e8 60 b8 00 00       	call   c001a66f <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 24 a2 02 c0       	push   0xc002a224
c000ee42:	e8 28 b8 00 00       	call   c001a66f <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 60 e6 02 c0 04 	test   BYTE PTR ds:0xc002e660,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 84 d5 02 c0 	sete   BYTE PTR ds:0xc002d584
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 a9 93 00 00       	call   c001825e <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 30 55 00 00       	call   c00143f4 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 52 9f 00 00       	call   c0018e46 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 f1 54 00 00       	call   c00143f4 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 5b 5a 00 00       	call   c001497a <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 c1 54 00 00       	call   c00143f4 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 71 f1 00 00       	call   c001e0c6 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 2a a2 02 c0       	push   0xc002a22a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 2a 40 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 3b a2 02 c0       	push   0xc002a23b
c000efc0:	e8 aa b6 00 00       	call   c001a66f <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 48 a2 02 c0       	push   0xc002a248
c000efd5:	e8 95 b6 00 00       	call   c001a66f <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 52 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a252
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 7e b6 00 00       	jmp    c001a66f <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 8c a2 02 c0       	push   0xc002a28c
c000f086:	e8 42 3f 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 52 e6 02 c0       	mov    ds:0xc002e652,eax
c000f0c7:	66 89 15 50 e6 02 c0 	mov    WORD PTR ds:0xc002e650,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 b8 ec 00 00       	call   c001de96 <unlockScheduler()>
c000f1de:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 48 e6 02 c0    	push   DWORD PTR ds:0xc002e648
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 44 95 01 00       	call   c0028770 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 3b 95 01 00       	call   c0028770 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 58 e6 02 c0 ff 07 	mov    WORD PTR ds:0xc002e658,0x7ff
c000f323:	a3 5a e6 02 c0       	mov    ds:0xc002e65a,eax
c000f328:	0f 01 1d 58 e6 02 c0 	lidtd  ds:0xc002e658
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 43 28 00 00       	call   c0011e58 <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 74 2e 00 00       	call   c0012494 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 b0 1e 00 00       	call   c00114ee <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 e1 1e 00 00       	call   c001152e <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 48 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e648
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 74 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d574
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 74 d5 02 c0       	mov    eax,ds:0xc002d574
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 a8 a2 02 c0       	push   0xc002a2a8
c000f6f4:	e8 d4 38 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 74 d5 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d574,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 39 27 00 00       	call   c0011e58 <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 74 d5 02 c0    	mov    ebp,DWORD PTR ds:0xc002d574
c000f727:	e8 b6 07 00 00       	call   c000fee2 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 5b 2c 00 00       	call   c0012394 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 74 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d574
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 d8 a2 02 c0       	push   0xc002a2d8
c000f7ad:	e8 bd ae 00 00       	call   c001a66f <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 dd a2 02 c0       	push   0xc002a2dd
c000f7c3:	e8 a7 ae 00 00       	call   c001a66f <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 bb e6 00 00       	call   c001de94 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 ac e6 00 00       	call   c001de96 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 5d 26 00 00       	call   c0011e58 <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 8a 2c 00 00       	call   c0012494 <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 42 26 00 00       	call   c0011e58 <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 2d 29 00 00       	call   c0012150 <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 80 d5 02 c0       	mov    eax,ds:0xc002d580
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d e0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6e0,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 80 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d580
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d e0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6e0,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d e0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6e0,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d e0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6e0,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d e0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6e0,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 80 d5 02 c0       	mov    eax,ds:0xc002d580
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 d0 0c 00 00       	call   c00107c0 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d e0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6e0,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 92 0c 00 00       	call   c00107c0 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 29 0d 00 00       	call   c0010866 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 80 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d580
c000fb46:	80 3d e0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6e0,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d 80 d5 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d580,0x8000
c000fba0:	c6 05 e0 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e6e0,0x1
c000fba7:	c7 05 18 e7 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e718,0xc000fa13
c000fbb1:	c7 05 04 e7 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e704,0xc000f89a
c000fbbb:	c7 05 00 e7 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e700,0xc000f8e5
c000fbc5:	c7 05 0c e7 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e70c,0xc000fa59
c000fbcf:	c7 05 14 e7 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e714,0xc000f963
c000fbd9:	c7 05 08 e7 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e708,0xc000f9c1
c000fbe3:	c7 05 10 e7 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e710,0xc000f9c2
c000fbed:	c7 05 1c e7 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e71c,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 10             	sub    esp,0x10
c000fc05:	e8 10 0a 00 00       	call   c001061a <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 e4 a2 02 c0       	push   0xc002a2e4
c000fc4a:	e8 7e 33 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 70 04 00 00       	call   c00100d6 <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 11 21 00 00       	call   c0011d7c <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 d1 bc 02 c0       	push   0xc002bcd1
c000fc92:	e8 d8 a9 00 00       	call   c001a66f <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d 60 e6 02 c0    	mov    DWORD PTR ds:0xc002e660,ebx
c000fca3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca7:	53                   	push   ebx
c000fca8:	e8 e1 22 00 00       	call   c0011f8e <VAS::VAS()>
c000fcad:	89 1d c8 e7 02 c0    	mov    DWORD PTR ds:0xc002e7c8,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 fb a2 02 c0 	mov    DWORD PTR [esp],0xc002a2fb
c000fcbf:	e8 09 33 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000fcc4:	e8 32 21 00 00       	call   c0011dfb <Virt::swappingSetup()>
c000fcc9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd0:	e8 6b fb ff ff       	call   c000f840 <malloc>
c000fcd5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd8:	89 c6                	mov    esi,eax
c000fcda:	e8 5b ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdf:	58                   	pop    eax
c000fce0:	89 35 48 e6 02 c0    	mov    DWORD PTR ds:0xc002e648,esi
c000fce6:	5a                   	pop    edx
c000fce7:	56                   	push   esi
c000fce8:	68 18 a3 02 c0       	push   0xc002a318
c000fced:	e8 db 32 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000fcf2:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c000fcf7:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf9:	6a 00                	push   0x0
c000fcfb:	6a 00                	push   0x0
c000fcfd:	6a 00                	push   0x0
c000fcff:	50                   	push   eax
c000fd00:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd03:	83 c4 14             	add    esp,0x14
c000fd06:	53                   	push   ebx
c000fd07:	e8 1c 25 00 00       	call   c0012228 <VAS::~VAS()>
c000fd0c:	c7 04 24 2b a3 02 c0 	mov    DWORD PTR [esp],0xc002a32b
c000fd13:	e8 57 a9 00 00       	call   c001a66f <Krnl::panic(char const*)>
c000fd18:	83 c4 20             	add    esp,0x20
c000fd1b:	5b                   	pop    ebx
c000fd1c:	5e                   	pop    esi
c000fd1d:	5f                   	pop    edi
c000fd1e:	c3                   	ret    

c000fd1f <Phys::allocateDMA(unsigned long)>:
c000fd1f:	55                   	push   ebp
c000fd20:	31 d2                	xor    edx,edx
c000fd22:	57                   	push   edi
c000fd23:	31 ed                	xor    ebp,ebp
c000fd25:	56                   	push   esi
c000fd26:	31 c9                	xor    ecx,ecx
c000fd28:	53                   	push   ebx
c000fd29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd33:	31 c0                	xor    eax,eax
c000fd35:	c1 ee 0c             	shr    esi,0xc
c000fd38:	eb 17                	jmp    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3a:	85 c9                	test   ecx,ecx
c000fd3c:	75 04                	jne    c000fd42 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3e:	89 d5                	mov    ebp,edx
c000fd40:	89 d0                	mov    eax,edx
c000fd42:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd45:	39 de                	cmp    esi,ebx
c000fd47:	74 20                	je     c000fd69 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd49:	42                   	inc    edx
c000fd4a:	89 d9                	mov    ecx,ebx
c000fd4c:	83 fa 2f             	cmp    edx,0x2f
c000fd4f:	7f 11                	jg     c000fd62 <Phys::allocateDMA(unsigned long)+0x43>
c000fd51:	80 ba a0 e6 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1960],0x0
c000fd58:	74 e0                	je     c000fd3a <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5a:	31 c9                	xor    ecx,ecx
c000fd5c:	42                   	inc    edx
c000fd5d:	83 fa 2f             	cmp    edx,0x2f
c000fd60:	7e ef                	jle    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd62:	5b                   	pop    ebx
c000fd63:	31 c0                	xor    eax,eax
c000fd65:	5e                   	pop    esi
c000fd66:	5f                   	pop    edi
c000fd67:	5d                   	pop    ebp
c000fd68:	c3                   	ret    
c000fd69:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6c:	89 d7                	mov    edi,edx
c000fd6e:	4f                   	dec    edi
c000fd6f:	79 03                	jns    c000fd74 <Phys::allocateDMA(unsigned long)+0x55>
c000fd71:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd74:	c1 ff 04             	sar    edi,0x4
c000fd77:	89 c2                	mov    edx,eax
c000fd79:	c1 fa 04             	sar    edx,0x4
c000fd7c:	39 fa                	cmp    edx,edi
c000fd7e:	75 2f                	jne    c000fdaf <Phys::allocateDMA(unsigned long)+0x90>
c000fd80:	85 db                	test   ebx,ebx
c000fd82:	74 1a                	je     c000fd9e <Phys::allocateDMA(unsigned long)+0x7f>
c000fd84:	be a0 e6 02 c0       	mov    esi,0xc002e6a0
c000fd89:	8d 90 a0 e6 02 c0    	lea    edx,[eax-0x3ffd1960]
c000fd8f:	f7 d6                	not    esi
c000fd91:	29 c6                	sub    esi,eax
c000fd93:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd96:	42                   	inc    edx
c000fd97:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9a:	39 d9                	cmp    ecx,ebx
c000fd9c:	7f f5                	jg     c000fd93 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9e:	85 ff                	test   edi,edi
c000fda0:	74 13                	je     c000fdb5 <Phys::allocateDMA(unsigned long)+0x96>
c000fda2:	5b                   	pop    ebx
c000fda3:	05 50 20 0c 00       	add    eax,0xc2050
c000fda8:	5e                   	pop    esi
c000fda9:	c1 e0 0c             	shl    eax,0xc
c000fdac:	5f                   	pop    edi
c000fdad:	5d                   	pop    ebp
c000fdae:	c3                   	ret    
c000fdaf:	89 ea                	mov    edx,ebp
c000fdb1:	31 c9                	xor    ecx,ecx
c000fdb3:	eb a7                	jmp    c000fd5c <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb5:	5b                   	pop    ebx
c000fdb6:	c1 e0 0c             	shl    eax,0xc
c000fdb9:	5e                   	pop    esi
c000fdba:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbf:	5f                   	pop    edi
c000fdc0:	5d                   	pop    ebp
c000fdc1:	c3                   	ret    

c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdca:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd0:	c1 e9 0c             	shr    ecx,0xc
c000fdd3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd8:	76 25                	jbe    c000fdff <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdda:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddf:	c1 e8 0c             	shr    eax,0xc
c000fde2:	8d 50 10             	lea    edx,[eax+0x10]
c000fde5:	85 c9                	test   ecx,ecx
c000fde7:	74 15                	je     c000fdfe <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde9:	8d 82 a0 e6 02 c0    	lea    eax,[edx-0x3ffd1960]
c000fdef:	8d 94 11 a0 e6 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1960]
c000fdf6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf9:	40                   	inc    eax
c000fdfa:	39 d0                	cmp    eax,edx
c000fdfc:	75 f8                	jne    c000fdf6 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfe:	c3                   	ret    
c000fdff:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe05:	c1 ea 0c             	shr    edx,0xc
c000fe08:	eb db                	jmp    c000fde5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0a <Phys::setPageState(unsigned long, bool)>:
c000fe0a:	56                   	push   esi
c000fe0b:	ba 01 00 00 00       	mov    edx,0x1
c000fe10:	53                   	push   ebx
c000fe11:	8b 35 78 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d578
c000fe17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1f:	89 c8                	mov    eax,ecx
c000fe21:	83 e1 07             	and    ecx,0x7
c000fe24:	c1 e8 03             	shr    eax,0x3
c000fe27:	d3 e3                	shl    ebx,cl
c000fe29:	01 c6                	add    esi,eax
c000fe2b:	d3 e2                	shl    edx,cl
c000fe2d:	f7 d2                	not    edx
c000fe2f:	20 16                	and    BYTE PTR [esi],dl
c000fe31:	03 05 78 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d578
c000fe37:	08 18                	or     BYTE PTR [eax],bl
c000fe39:	5b                   	pop    ebx
c000fe3a:	5e                   	pop    esi
c000fe3b:	c3                   	ret    

c000fe3c <Phys::getPageState(unsigned long)>:
c000fe3c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe40:	8b 15 78 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d578
c000fe46:	89 c8                	mov    eax,ecx
c000fe48:	83 e1 07             	and    ecx,0x7
c000fe4b:	c1 e8 03             	shr    eax,0x3
c000fe4e:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe52:	d3 f8                	sar    eax,cl
c000fe54:	83 e0 01             	and    eax,0x1
c000fe57:	c3                   	ret    

c000fe58 <Phys::freePage(unsigned long)>:
c000fe58:	53                   	push   ebx
c000fe59:	83 ec 08             	sub    esp,0x8
c000fe5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe60:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe66:	76 57                	jbe    c000febf <Phys::freePage(unsigned long)+0x67>
c000fe68:	c1 eb 0c             	shr    ebx,0xc
c000fe6b:	53                   	push   ebx
c000fe6c:	e8 cb ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000fe71:	5a                   	pop    edx
c000fe72:	84 c0                	test   al,al
c000fe74:	74 5b                	je     c000fed1 <Phys::freePage(unsigned long)+0x79>
c000fe76:	a1 90 e6 02 c0       	mov    eax,ds:0xc002e690
c000fe7b:	48                   	dec    eax
c000fe7c:	a3 90 e6 02 c0       	mov    ds:0xc002e690,eax
c000fe81:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	c1 e0 02             	shl    eax,0x2
c000fe8a:	99                   	cdq    
c000fe8b:	f7 3d 94 e6 02 c0    	idiv   DWORD PTR ds:0xc002e694
c000fe91:	39 05 8c e6 02 c0    	cmp    DWORD PTR ds:0xc002e68c,eax
c000fe97:	75 13                	jne    c000feac <Phys::freePage(unsigned long)+0x54>
c000fe99:	83 ec 08             	sub    esp,0x8
c000fe9c:	6a 00                	push   0x0
c000fe9e:	53                   	push   ebx
c000fe9f:	e8 66 ff ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000fea4:	83 c4 10             	add    esp,0x10
c000fea7:	83 c4 08             	add    esp,0x8
c000feaa:	5b                   	pop    ebx
c000feab:	c3                   	ret    
c000feac:	83 ec 0c             	sub    esp,0xc
c000feaf:	a3 8c e6 02 c0       	mov    ds:0xc002e68c,eax
c000feb4:	50                   	push   eax
c000feb5:	e8 f4 0a 00 00       	call   c00109ae <VgaText::updateRAMUsageDisplay(int)>
c000feba:	83 c4 10             	add    esp,0x10
c000febd:	eb da                	jmp    c000fe99 <Phys::freePage(unsigned long)+0x41>
c000febf:	68 00 10 00 00       	push   0x1000
c000fec4:	53                   	push   ebx
c000fec5:	e8 f8 fe ff ff       	call   c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>
c000feca:	59                   	pop    ecx
c000fecb:	5b                   	pop    ebx
c000fecc:	83 c4 08             	add    esp,0x8
c000fecf:	5b                   	pop    ebx
c000fed0:	c3                   	ret    
c000fed1:	c7 44 24 10 46 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a346
c000fed9:	83 c4 08             	add    esp,0x8
c000fedc:	5b                   	pop    ebx
c000fedd:	e9 8d a7 00 00       	jmp    c001a66f <Krnl::panic(char const*)>

c000fee2 <Phys::allocatePage()>:
c000fee2:	56                   	push   esi
c000fee3:	53                   	push   ebx
c000fee4:	83 ec 14             	sub    esp,0x14
c000fee7:	8b 35 84 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e684
c000feed:	89 f3                	mov    ebx,esi
c000feef:	eb 0a                	jmp    c000fefb <Phys::allocatePage()+0x19>
c000fef1:	89 1d 84 e6 02 c0    	mov    DWORD PTR ds:0xc002e684,ebx
c000fef7:	39 de                	cmp    esi,ebx
c000fef9:	74 24                	je     c000ff1f <Phys::allocatePage()+0x3d>
c000fefb:	53                   	push   ebx
c000fefc:	e8 3b ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff01:	5a                   	pop    edx
c000ff02:	84 c0                	test   al,al
c000ff04:	74 5e                	je     c000ff64 <Phys::allocatePage()+0x82>
c000ff06:	43                   	inc    ebx
c000ff07:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff0d:	75 e2                	jne    c000fef1 <Phys::allocatePage()+0xf>
c000ff0f:	31 db                	xor    ebx,ebx
c000ff11:	c7 05 84 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e684,0x0
c000ff1b:	39 de                	cmp    esi,ebx
c000ff1d:	75 dc                	jne    c000fefb <Phys::allocatePage()+0x19>
c000ff1f:	83 ec 0c             	sub    esp,0xc
c000ff22:	68 70 a3 02 c0       	push   0xc002a370
c000ff27:	e8 a1 30 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000ff2c:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff33:	e8 e7 fd ff ff       	call   c000fd1f <Phys::allocateDMA(unsigned long)>
c000ff38:	83 c4 10             	add    esp,0x10
c000ff3b:	85 c0                	test   eax,eax
c000ff3d:	0f 85 c5 00 00 00    	jne    c0010008 <Phys::allocatePage()+0x126>
c000ff43:	83 ec 0c             	sub    esp,0xc
c000ff46:	68 81 a3 02 c0       	push   0xc002a381
c000ff4b:	e8 1f a7 00 00       	call   c001a66f <Krnl::panic(char const*)>
c000ff50:	83 c4 10             	add    esp,0x10
c000ff53:	8b 1d 84 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e684
c000ff59:	53                   	push   ebx
c000ff5a:	e8 dd fe ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff5f:	5a                   	pop    edx
c000ff60:	84 c0                	test   al,al
c000ff62:	75 a2                	jne    c000ff06 <Phys::allocatePage()+0x24>
c000ff64:	6a 01                	push   0x1
c000ff66:	53                   	push   ebx
c000ff67:	e8 9e fe ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000ff6c:	a1 90 e6 02 c0       	mov    eax,ds:0xc002e690
c000ff71:	40                   	inc    eax
c000ff72:	a3 90 e6 02 c0       	mov    ds:0xc002e690,eax
c000ff77:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7a:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7d:	c1 e0 02             	shl    eax,0x2
c000ff80:	99                   	cdq    
c000ff81:	f7 3d 94 e6 02 c0    	idiv   DWORD PTR ds:0xc002e694
c000ff87:	5a                   	pop    edx
c000ff88:	39 05 8c e6 02 c0    	cmp    DWORD PTR ds:0xc002e68c,eax
c000ff8e:	59                   	pop    ecx
c000ff8f:	75 7d                	jne    c001000e <Phys::allocatePage()+0x12c>
c000ff91:	83 f8 32             	cmp    eax,0x32
c000ff94:	7e 6a                	jle    c0010000 <Phys::allocatePage()+0x11e>
c000ff96:	80 3d 80 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e680,0x0
c000ff9d:	75 61                	jne    c0010000 <Phys::allocatePage()+0x11e>
c000ff9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffa4:	85 c0                	test   eax,eax
c000ffa6:	74 3b                	je     c000ffe3 <Phys::allocatePage()+0x101>
c000ffa8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffab:	85 c0                	test   eax,eax
c000ffad:	74 34                	je     c000ffe3 <Phys::allocatePage()+0x101>
c000ffaf:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000ffb5:	85 c0                	test   eax,eax
c000ffb7:	74 2a                	je     c000ffe3 <Phys::allocatePage()+0x101>
c000ffb9:	83 ec 0c             	sub    esp,0xc
c000ffbc:	68 5c a3 02 c0       	push   0xc002a35c
c000ffc1:	e8 07 30 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c000ffc6:	83 c4 0c             	add    esp,0xc
c000ffc9:	6a 04                	push   0x4
c000ffcb:	6a 08                	push   0x8
c000ffcd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffd2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffd5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ffdb:	e8 ca 2c 00 00       	call   c0012caa <VAS::scanForEviction(int, int)>
c000ffe0:	83 c4 10             	add    esp,0x10
c000ffe3:	a1 90 e6 02 c0       	mov    eax,ds:0xc002e690
c000ffe8:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffeb:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffee:	c1 e0 02             	shl    eax,0x2
c000fff1:	99                   	cdq    
c000fff2:	f7 3d 94 e6 02 c0    	idiv   DWORD PTR ds:0xc002e694
c000fff8:	39 05 8c e6 02 c0    	cmp    DWORD PTR ds:0xc002e68c,eax
c000fffe:	75 31                	jne    c0010031 <Phys::allocatePage()+0x14f>
c0010000:	a1 84 e6 02 c0       	mov    eax,ds:0xc002e684
c0010005:	c1 e0 0c             	shl    eax,0xc
c0010008:	83 c4 14             	add    esp,0x14
c001000b:	5b                   	pop    ebx
c001000c:	5e                   	pop    esi
c001000d:	c3                   	ret    
c001000e:	83 ec 0c             	sub    esp,0xc
c0010011:	a3 8c e6 02 c0       	mov    ds:0xc002e68c,eax
c0010016:	50                   	push   eax
c0010017:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001001b:	e8 8e 09 00 00       	call   c00109ae <VgaText::updateRAMUsageDisplay(int)>
c0010020:	83 c4 10             	add    esp,0x10
c0010023:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010027:	83 f8 32             	cmp    eax,0x32
c001002a:	7e d4                	jle    c0010000 <Phys::allocatePage()+0x11e>
c001002c:	e9 65 ff ff ff       	jmp    c000ff96 <Phys::allocatePage()+0xb4>
c0010031:	83 ec 0c             	sub    esp,0xc
c0010034:	a3 8c e6 02 c0       	mov    ds:0xc002e68c,eax
c0010039:	50                   	push   eax
c001003a:	e8 6f 09 00 00       	call   c00109ae <VgaText::updateRAMUsageDisplay(int)>
c001003f:	83 c4 10             	add    esp,0x10
c0010042:	eb bc                	jmp    c0010000 <Phys::allocatePage()+0x11e>

c0010044 <Phys::allocateContiguousPages(int)>:
c0010044:	57                   	push   edi
c0010045:	56                   	push   esi
c0010046:	53                   	push   ebx
c0010047:	31 db                	xor    ebx,ebx
c0010049:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001004d:	e8 42 de 00 00       	call   c001de94 <lockScheduler()>
c0010052:	85 db                	test   ebx,ebx
c0010054:	75 11                	jne    c0010067 <Phys::allocateContiguousPages(int)+0x23>
c0010056:	e8 87 fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c001005b:	83 ff 01             	cmp    edi,0x1
c001005e:	89 c6                	mov    esi,eax
c0010060:	74 21                	je     c0010083 <Phys::allocateContiguousPages(int)+0x3f>
c0010062:	bb 01 00 00 00       	mov    ebx,0x1
c0010067:	e8 76 fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c001006c:	89 da                	mov    edx,ebx
c001006e:	c1 e2 0c             	shl    edx,0xc
c0010071:	01 f2                	add    edx,esi
c0010073:	39 c2                	cmp    edx,eax
c0010075:	74 17                	je     c001008e <Phys::allocateContiguousPages(int)+0x4a>
c0010077:	bb 01 00 00 00       	mov    ebx,0x1
c001007c:	89 c6                	mov    esi,eax
c001007e:	83 ff 01             	cmp    edi,0x1
c0010081:	75 e4                	jne    c0010067 <Phys::allocateContiguousPages(int)+0x23>
c0010083:	e8 0e de 00 00       	call   c001de96 <unlockScheduler()>
c0010088:	89 f0                	mov    eax,esi
c001008a:	5b                   	pop    ebx
c001008b:	5e                   	pop    esi
c001008c:	5f                   	pop    edi
c001008d:	c3                   	ret    
c001008e:	43                   	inc    ebx
c001008f:	39 fb                	cmp    ebx,edi
c0010091:	75 bf                	jne    c0010052 <Phys::allocateContiguousPages(int)+0xe>
c0010093:	e8 fe dd 00 00       	call   c001de96 <unlockScheduler()>
c0010098:	89 f0                	mov    eax,esi
c001009a:	5b                   	pop    ebx
c001009b:	5e                   	pop    esi
c001009c:	5f                   	pop    edi
c001009d:	c3                   	ret    

c001009e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001009e:	56                   	push   esi
c001009f:	53                   	push   ebx
c00100a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100a4:	39 1d 88 e6 02 c0    	cmp    DWORD PTR ds:0xc002e688,ebx
c00100aa:	73 06                	jae    c00100b2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c00100ac:	89 1d 88 e6 02 c0    	mov    DWORD PTR ds:0xc002e688,ebx
c00100b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100b6:	c1 eb 0c             	shr    ebx,0xc
c00100b9:	c1 e8 0c             	shr    eax,0xc
c00100bc:	39 d8                	cmp    eax,ebx
c00100be:	73 13                	jae    c00100d3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00100c0:	6a 00                	push   0x0
c00100c2:	8d 70 01             	lea    esi,[eax+0x1]
c00100c5:	50                   	push   eax
c00100c6:	e8 3f fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100cb:	5a                   	pop    edx
c00100cc:	89 f0                	mov    eax,esi
c00100ce:	59                   	pop    ecx
c00100cf:	39 f3                	cmp    ebx,esi
c00100d1:	75 ed                	jne    c00100c0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100d3:	5b                   	pop    ebx
c00100d4:	5e                   	pop    esi
c00100d5:	c3                   	ret    

c00100d6 <Phys::physicalMemorySetup(unsigned int)>:
c00100d6:	55                   	push   ebp
c00100d7:	57                   	push   edi
c00100d8:	56                   	push   esi
c00100d9:	53                   	push   ebx
c00100da:	31 db                	xor    ebx,ebx
c00100dc:	83 ec 40             	sub    esp,0x40
c00100df:	6a 30                	push   0x30
c00100e1:	6a 00                	push   0x0
c00100e3:	68 a0 e6 02 c0       	push   0xc002e6a0
c00100e8:	e8 8b 06 ff ff       	call   c0000778 <memset>
c00100ed:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100f1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100f6:	05 00 10 00 00       	add    eax,0x1000
c00100fb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100ff:	83 c4 10             	add    esp,0x10
c0010102:	83 ec 08             	sub    esp,0x8
c0010105:	6a 01                	push   0x1
c0010107:	53                   	push   ebx
c0010108:	43                   	inc    ebx
c0010109:	e8 fc fc ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c001010e:	83 c4 10             	add    esp,0x10
c0010111:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010117:	75 e9                	jne    c0010102 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c0010119:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010120:	66 85 c0             	test   ax,ax
c0010123:	0f 84 8e 01 00 00    	je     c00102b7 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c0010129:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001012d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010135:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010139:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c001013e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010142:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001014a:	eb 15                	jmp    c0010161 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c001014c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010150:	83 c3 18             	add    ebx,0x18
c0010153:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010157:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001015b:	0f 84 66 01 00 00    	je     c00102c7 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010161:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010164:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010167:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001016a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001016e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010172:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010174:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010177:	01 f0                	add    eax,esi
c0010179:	55                   	push   ebp
c001017a:	11 fa                	adc    edx,edi
c001017c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010180:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010184:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010188:	56                   	push   esi
c0010189:	68 bc a3 02 c0       	push   0xc002a3bc
c001018e:	e8 3a 2e 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0010193:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010197:	83 c4 10             	add    esp,0x10
c001019a:	09 f8                	or     eax,edi
c001019c:	0f 85 25 01 00 00    	jne    c00102c7 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00101a2:	4d                   	dec    ebp
c00101a3:	75 a7                	jne    c001014c <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101a5:	ba 00 00 08 00       	mov    edx,0x80000
c00101aa:	89 c1                	mov    ecx,eax
c00101ac:	39 f2                	cmp    edx,esi
c00101ae:	19 f9                	sbb    ecx,edi
c00101b0:	0f 82 a7 00 00 00    	jb     c001025d <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101b6:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00101ba:	89 c1                	mov    ecx,eax
c00101bc:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00101c0:	0f 83 97 00 00 00    	jae    c001025d <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101c6:	ba 00 00 0a 00       	mov    edx,0xa0000
c00101cb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101cf:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101d3:	39 fa                	cmp    edx,edi
c00101d5:	19 e8                	sbb    eax,ebp
c00101d7:	0f 82 14 01 00 00    	jb     c00102f1 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101dd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101e1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101e5:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101eb:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101f0:	83 d5 ff             	adc    ebp,0xffffffff
c00101f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101f7:	31 c0                	xor    eax,eax
c00101f9:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101fd:	39 fa                	cmp    edx,edi
c00101ff:	89 c1                	mov    ecx,eax
c0010201:	19 e9                	sbb    ecx,ebp
c0010203:	0f 83 43 ff ff ff    	jae    c001014c <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010209:	be 00 00 08 00       	mov    esi,0x80000
c001020e:	50                   	push   eax
c001020f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010213:	57                   	push   edi
c0010214:	56                   	push   esi
c0010215:	68 e0 a3 02 c0       	push   0xc002a3e0
c001021a:	e8 ae 2d 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001021f:	5a                   	pop    edx
c0010220:	59                   	pop    ecx
c0010221:	57                   	push   edi
c0010222:	56                   	push   esi
c0010223:	e8 76 fe ff ff       	call   c001009e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010228:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001022c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010230:	83 c4 0c             	add    esp,0xc
c0010233:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010237:	03 05 94 e6 02 c0    	add    eax,DWORD PTR ds:0xc002e694
c001023d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010244:	a3 94 e6 02 c0       	mov    ds:0xc002e694,eax
c0010249:	52                   	push   edx
c001024a:	50                   	push   eax
c001024b:	68 9d a3 02 c0       	push   0xc002a39d
c0010250:	e8 78 2d 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0010255:	83 c4 10             	add    esp,0x10
c0010258:	e9 ef fe ff ff       	jmp    c001014c <Phys::physicalMemorySetup(unsigned int)+0x76>
c001025d:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010265:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010269:	39 ea                	cmp    edx,ebp
c001026b:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c001026f:	0f 82 d7 fe ff ff    	jb     c001014c <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010275:	ba ff 1f 00 00       	mov    edx,0x1fff
c001027a:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c001027e:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010282:	0f 83 c4 fe ff ff    	jae    c001014c <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010288:	39 ee                	cmp    esi,ebp
c001028a:	89 f8                	mov    eax,edi
c001028c:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010290:	0f 83 78 ff ff ff    	jae    c001020e <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001029a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001029e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00102a2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00102a6:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c00102aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00102b2:	e9 57 ff ff ff       	jmp    c001020e <Phys::physicalMemorySetup(unsigned int)+0x138>
c00102b7:	83 ec 0c             	sub    esp,0xc
c00102ba:	68 8f a3 02 c0       	push   0xc002a38f
c00102bf:	e8 ab a3 00 00       	call   c001a66f <Krnl::panic(char const*)>
c00102c4:	83 c4 10             	add    esp,0x10
c00102c7:	bb 40 01 00 00       	mov    ebx,0x140
c00102cc:	83 ec 08             	sub    esp,0x8
c00102cf:	6a 00                	push   0x0
c00102d1:	53                   	push   ebx
c00102d2:	43                   	inc    ebx
c00102d3:	e8 32 fb ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00102d8:	ff 05 94 e6 02 c0    	inc    DWORD PTR ds:0xc002e694
c00102de:	83 c4 10             	add    esp,0x10
c00102e1:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102e7:	75 e3                	jne    c00102cc <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102e9:	83 c4 3c             	add    esp,0x3c
c00102ec:	5b                   	pop    ebx
c00102ed:	5e                   	pop    esi
c00102ee:	5f                   	pop    edi
c00102ef:	5d                   	pop    ebp
c00102f0:	c3                   	ret    
c00102f1:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010301:	e9 d7 fe ff ff       	jmp    c00101dd <Phys::physicalMemorySetup(unsigned int)+0x107>

c0010306 <Pipe::isAtty()>:
c0010306:	31 c0                	xor    eax,eax
c0010308:	c3                   	ret    
c0010309:	90                   	nop

c001030a <Pipe::~Pipe()>:
c001030a:	83 ec 0c             	sub    esp,0xc
c001030d:	ba 4c a4 02 c0       	mov    edx,0xc002a44c
c0010312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010316:	89 10                	mov    DWORD PTR [eax],edx
c0010318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001031c:	83 ec 0c             	sub    esp,0xc
c001031f:	50                   	push   eax
c0010320:	e8 37 16 00 00       	call   c001195c <UnixFile::~UnixFile()>
c0010325:	83 c4 10             	add    esp,0x10
c0010328:	90                   	nop
c0010329:	83 c4 0c             	add    esp,0xc
c001032c:	c3                   	ret    
c001032d:	90                   	nop

c001032e <Pipe::~Pipe()>:
c001032e:	83 ec 0c             	sub    esp,0xc
c0010331:	83 ec 0c             	sub    esp,0xc
c0010334:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010338:	e8 cd ff ff ff       	call   c001030a <Pipe::~Pipe()>
c001033d:	83 c4 10             	add    esp,0x10
c0010340:	83 ec 08             	sub    esp,0x8
c0010343:	6a 20                	push   0x20
c0010345:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010349:	e8 9f 2b 00 00       	call   c0012eed <operator delete(void*, unsigned long)>
c001034e:	83 c4 10             	add    esp,0x10
c0010351:	83 c4 0c             	add    esp,0xc
c0010354:	c3                   	ret    
c0010355:	90                   	nop

c0010356 <Pipe::read(unsigned long long, void*, int*)>:
c0010356:	55                   	push   ebp
c0010357:	57                   	push   edi
c0010358:	56                   	push   esi
c0010359:	53                   	push   ebx
c001035a:	83 ec 1c             	sub    esp,0x1c
c001035d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010361:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010365:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010369:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001036c:	89 c8                	mov    eax,ecx
c001036e:	99                   	cdq    
c001036f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010373:	74 19                	je     c001038e <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010375:	39 f9                	cmp    ecx,edi
c0010377:	89 d1                	mov    ecx,edx
c0010379:	19 f1                	sbb    ecx,esi
c001037b:	73 11                	jae    c001038e <Pipe::read(unsigned long long, void*, int*)+0x38>
c001037d:	e8 12 db 00 00       	call   c001de94 <lockScheduler()>
c0010382:	e8 49 de 00 00       	call   c001e1d0 <schedule()>
c0010387:	e8 0a db 00 00       	call   c001de96 <unlockScheduler()>
c001038c:	eb db                	jmp    c0010369 <Pipe::read(unsigned long long, void*, int*)+0x13>
c001038e:	39 f8                	cmp    eax,edi
c0010390:	89 d1                	mov    ecx,edx
c0010392:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010396:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001039a:	19 f1                	sbb    ecx,esi
c001039c:	73 08                	jae    c00103a6 <Pipe::read(unsigned long long, void*, int*)+0x50>
c001039e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00103a2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00103a6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103a9:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103ac:	29 c6                	sub    esi,eax
c00103ae:	89 f1                	mov    ecx,esi
c00103b0:	c1 f9 1f             	sar    ecx,0x1f
c00103b3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00103b7:	89 ca                	mov    edx,ecx
c00103b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00103bd:	19 d1                	sbb    ecx,edx
c00103bf:	73 04                	jae    c00103c5 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c00103c1:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00103c5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00103c9:	89 fd                	mov    ebp,edi
c00103cb:	29 f5                	sub    ebp,esi
c00103cd:	85 f6                	test   esi,esi
c00103cf:	74 12                	je     c00103e3 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c00103d1:	52                   	push   edx
c00103d2:	56                   	push   esi
c00103d3:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00103d6:	50                   	push   eax
c00103d7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00103db:	e8 64 03 ff ff       	call   c0000744 <memcpy>
c00103e0:	83 c4 10             	add    esp,0x10
c00103e3:	85 ed                	test   ebp,ebp
c00103e5:	74 12                	je     c00103f9 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103e7:	50                   	push   eax
c00103e8:	55                   	push   ebp
c00103e9:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103ec:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103f0:	56                   	push   esi
c00103f1:	e8 4e 03 ff ff       	call   c0000744 <memcpy>
c00103f6:	83 c4 10             	add    esp,0x10
c00103f9:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103fc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103ff:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010402:	99                   	cdq    
c0010403:	89 f7                	mov    edi,esi
c0010405:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010409:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001040d:	c1 ff 1f             	sar    edi,0x1f
c0010410:	57                   	push   edi
c0010411:	56                   	push   esi
c0010412:	52                   	push   edx
c0010413:	50                   	push   eax
c0010414:	e8 53 67 01 00       	call   c0026b6c <__umoddi3>
c0010419:	83 c4 10             	add    esp,0x10
c001041c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001041f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010424:	75 10                	jne    c0010436 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c0010426:	83 ec 0c             	sub    esp,0xc
c0010429:	68 09 a4 02 c0       	push   0xc002a409
c001042e:	e8 3c a2 00 00       	call   c001a66f <Krnl::panic(char const*)>
c0010433:	83 c4 10             	add    esp,0x10
c0010436:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001043a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001043e:	89 10                	mov    DWORD PTR [eax],edx
c0010440:	83 c4 1c             	add    esp,0x1c
c0010443:	31 c0                	xor    eax,eax
c0010445:	5b                   	pop    ebx
c0010446:	5e                   	pop    esi
c0010447:	5f                   	pop    edi
c0010448:	5d                   	pop    ebp
c0010449:	c3                   	ret    

c001044a <Pipe::write(unsigned long long, void*, int*)>:
c001044a:	55                   	push   ebp
c001044b:	57                   	push   edi
c001044c:	56                   	push   esi
c001044d:	53                   	push   ebx
c001044e:	83 ec 1c             	sub    esp,0x1c
c0010451:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010455:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010459:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001045d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010460:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010463:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010466:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001046a:	89 de                	mov    esi,ebx
c001046c:	89 df                	mov    edi,ebx
c001046e:	c1 ff 1f             	sar    edi,0x1f
c0010471:	01 c6                	add    esi,eax
c0010473:	89 c8                	mov    eax,ecx
c0010475:	11 d7                	adc    edi,edx
c0010477:	99                   	cdq    
c0010478:	39 f1                	cmp    ecx,esi
c001047a:	89 d0                	mov    eax,edx
c001047c:	19 f8                	sbb    eax,edi
c001047e:	b8 01 00 00 00       	mov    eax,0x1
c0010483:	0f 82 80 00 00 00    	jb     c0010509 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010489:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001048c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001048f:	01 d8                	add    eax,ebx
c0010491:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010495:	99                   	cdq    
c0010496:	f7 f9                	idiv   ecx
c0010498:	29 d1                	sub    ecx,edx
c001049a:	89 d7                	mov    edi,edx
c001049c:	89 c8                	mov    eax,ecx
c001049e:	99                   	cdq    
c001049f:	39 ce                	cmp    esi,ecx
c00104a1:	19 d3                	sbb    ebx,edx
c00104a3:	bb 00 00 00 00       	mov    ebx,0x0
c00104a8:	72 04                	jb     c00104ae <Pipe::write(unsigned long long, void*, int*)+0x64>
c00104aa:	89 f3                	mov    ebx,esi
c00104ac:	29 cb                	sub    ebx,ecx
c00104ae:	89 f1                	mov    ecx,esi
c00104b0:	29 d9                	sub    ecx,ebx
c00104b2:	74 1a                	je     c00104ce <Pipe::write(unsigned long long, void*, int*)+0x84>
c00104b4:	52                   	push   edx
c00104b5:	51                   	push   ecx
c00104b6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00104ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00104be:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00104c1:	57                   	push   edi
c00104c2:	e8 7d 02 ff ff       	call   c0000744 <memcpy>
c00104c7:	83 c4 10             	add    esp,0x10
c00104ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00104ce:	85 db                	test   ebx,ebx
c00104d0:	74 12                	je     c00104e4 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00104d2:	50                   	push   eax
c00104d3:	53                   	push   ebx
c00104d4:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00104d8:	51                   	push   ecx
c00104d9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00104dc:	e8 63 02 ff ff       	call   c0000744 <memcpy>
c00104e1:	83 c4 10             	add    esp,0x10
c00104e4:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104e7:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104ec:	75 10                	jne    c00104fe <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104ee:	83 ec 0c             	sub    esp,0xc
c00104f1:	68 25 a4 02 c0       	push   0xc002a425
c00104f6:	e8 74 a1 00 00       	call   c001a66f <Krnl::panic(char const*)>
c00104fb:	83 c4 10             	add    esp,0x10
c00104fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010502:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010505:	89 38                	mov    DWORD PTR [eax],edi
c0010507:	31 c0                	xor    eax,eax
c0010509:	83 c4 1c             	add    esp,0x1c
c001050c:	5b                   	pop    ebx
c001050d:	5e                   	pop    esi
c001050e:	5f                   	pop    edi
c001050f:	5d                   	pop    ebp
c0010510:	c3                   	ret    
c0010511:	90                   	nop

c0010512 <Pipe::Pipe(int)>:
c0010512:	83 ec 0c             	sub    esp,0xc
c0010515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010519:	83 ec 08             	sub    esp,0x8
c001051c:	6a 00                	push   0x0
c001051e:	50                   	push   eax
c001051f:	e8 56 12 00 00       	call   c001177a <UnixFile::UnixFile(int)>
c0010524:	83 c4 10             	add    esp,0x10
c0010527:	ba 4c a4 02 c0       	mov    edx,0xc002a44c
c001052c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010530:	89 10                	mov    DWORD PTR [eax],edx
c0010532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010536:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001053a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001053d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010541:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010553:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010557:	83 ec 0c             	sub    esp,0xc
c001055a:	50                   	push   eax
c001055b:	e8 e0 f2 ff ff       	call   c000f840 <malloc>
c0010560:	83 c4 10             	add    esp,0x10
c0010563:	89 c2                	mov    edx,eax
c0010565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010569:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001056c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010570:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010574:	90                   	nop
c0010575:	83 c4 0c             	add    esp,0xc
c0010578:	c3                   	ret    
c0010579:	90                   	nop

c001057a <VgaText::isAtty()>:
c001057a:	b0 01                	mov    al,0x1
c001057c:	c3                   	ret    
c001057d:	90                   	nop

c001057e <VgaText::~VgaText()>:
c001057e:	83 ec 0c             	sub    esp,0xc
c0010581:	ba 08 a5 02 c0       	mov    edx,0xc002a508
c0010586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001058a:	89 10                	mov    DWORD PTR [eax],edx
c001058c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010590:	83 ec 0c             	sub    esp,0xc
c0010593:	50                   	push   eax
c0010594:	e8 c3 13 00 00       	call   c001195c <UnixFile::~UnixFile()>
c0010599:	83 c4 10             	add    esp,0x10
c001059c:	90                   	nop
c001059d:	83 c4 0c             	add    esp,0xc
c00105a0:	c3                   	ret    
c00105a1:	90                   	nop

c00105a2 <VgaText::~VgaText()>:
c00105a2:	83 ec 0c             	sub    esp,0xc
c00105a5:	83 ec 0c             	sub    esp,0xc
c00105a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105ac:	e8 cd ff ff ff       	call   c001057e <VgaText::~VgaText()>
c00105b1:	83 c4 10             	add    esp,0x10
c00105b4:	83 ec 08             	sub    esp,0x8
c00105b7:	68 60 12 00 00       	push   0x1260
c00105bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105c0:	e8 28 29 00 00       	call   c0012eed <operator delete(void*, unsigned long)>
c00105c5:	83 c4 10             	add    esp,0x10
c00105c8:	83 c4 0c             	add    esp,0xc
c00105cb:	c3                   	ret    

c00105cc <VgaText::read(unsigned long long, void*, int*)>:
c00105cc:	83 ec 10             	sub    esp,0x10
c00105cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105db:	e8 90 5d 00 00       	call   c0016370 <readKeyboard(VgaText*, char*, unsigned long)>
c00105e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105e4:	89 02                	mov    DWORD PTR [edx],eax
c00105e6:	31 c0                	xor    eax,eax
c00105e8:	83 c4 1c             	add    esp,0x1c
c00105eb:	c3                   	ret    

c00105ec <setTerminalScrollLock(bool)>:
c00105ec:	c3                   	ret    

c00105ed <addToTerminalCycle(VgaText*)>:
c00105ed:	8b 15 20 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e720
c00105f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105f7:	85 d2                	test   edx,edx
c00105f9:	75 0c                	jne    c0010607 <addToTerminalCycle(VgaText*)+0x1a>
c00105fb:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010601:	a3 20 e7 02 c0       	mov    ds:0xc002e720,eax
c0010606:	c3                   	ret    
c0010607:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c001060d:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010613:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c0010619:	c3                   	ret    

c001061a <installVgaTextImplementation()>:
c001061a:	83 ec 10             	sub    esp,0x10
c001061d:	6a 20                	push   0x20
c001061f:	6a 00                	push   0x0
c0010621:	68 00 e7 02 c0       	push   0xc002e700
c0010626:	e8 4d 01 ff ff       	call   c0000778 <memset>
c001062b:	83 c4 1c             	add    esp,0x1c
c001062e:	c3                   	ret    

c001062f <scrollTerminalScrollLock(int)>:
c001062f:	c3                   	ret    

c0010630 <VgaText::load()>:
c0010630:	53                   	push   ebx
c0010631:	31 c0                	xor    eax,eax
c0010633:	83 ec 58             	sub    esp,0x58
c0010636:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001063a:	89 e2                	mov    edx,esp
c001063c:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010640:	40                   	inc    eax
c0010641:	83 f8 50             	cmp    eax,0x50
c0010644:	75 f6                	jne    c001063c <VgaText::load()+0xc>
c0010646:	31 c0                	xor    eax,eax
c0010648:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c001064f:	84 c9                	test   cl,cl
c0010651:	74 06                	je     c0010659 <VgaText::load()+0x29>
c0010653:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010656:	40                   	inc    eax
c0010657:	eb ef                	jmp    c0010648 <VgaText::load()+0x18>
c0010659:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c001065f:	85 c0                	test   eax,eax
c0010661:	74 09                	je     c001066c <VgaText::load()+0x3c>
c0010663:	51                   	push   ecx
c0010664:	51                   	push   ecx
c0010665:	52                   	push   edx
c0010666:	53                   	push   ebx
c0010667:	ff d0                	call   eax
c0010669:	83 c4 10             	add    esp,0x10
c001066c:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010672:	85 c0                	test   eax,eax
c0010674:	74 09                	je     c001067f <VgaText::load()+0x4f>
c0010676:	83 ec 0c             	sub    esp,0xc
c0010679:	53                   	push   ebx
c001067a:	ff d0                	call   eax
c001067c:	83 c4 10             	add    esp,0x10
c001067f:	83 c4 58             	add    esp,0x58
c0010682:	5b                   	pop    ebx
c0010683:	c3                   	ret    

c0010684 <VgaText::updateCursor()>:
c0010684:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010688:	39 05 24 e7 02 c0    	cmp    DWORD PTR ds:0xc002e724,eax
c001068e:	75 0c                	jne    c001069c <VgaText::updateCursor()+0x18>
c0010690:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010696:	85 c0                	test   eax,eax
c0010698:	74 02                	je     c001069c <VgaText::updateCursor()+0x18>
c001069a:	ff e0                	jmp    eax
c001069c:	c3                   	ret    
c001069d:	90                   	nop

c001069e <VgaText::showCursor(bool)>:
c001069e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106a6:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c00106ac:	c3                   	ret    
c00106ad:	90                   	nop

c00106ae <VgaText::disableBlink(bool)>:
c00106ae:	56                   	push   esi
c00106af:	53                   	push   ebx
c00106b0:	51                   	push   ecx
c00106b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106b5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00106b9:	39 1d 24 e7 02 c0    	cmp    DWORD PTR ds:0xc002e724,ebx
c00106bf:	75 18                	jne    c00106d9 <VgaText::disableBlink(bool)+0x2b>
c00106c1:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00106c7:	85 c0                	test   eax,eax
c00106c9:	74 0e                	je     c00106d9 <VgaText::disableBlink(bool)+0x2b>
c00106cb:	89 f1                	mov    ecx,esi
c00106cd:	52                   	push   edx
c00106ce:	52                   	push   edx
c00106cf:	0f b6 d1             	movzx  edx,cl
c00106d2:	52                   	push   edx
c00106d3:	53                   	push   ebx
c00106d4:	ff d0                	call   eax
c00106d6:	83 c4 10             	add    esp,0x10
c00106d9:	89 f0                	mov    eax,esi
c00106db:	83 f0 01             	xor    eax,0x1
c00106de:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106e4:	58                   	pop    eax
c00106e5:	5b                   	pop    ebx
c00106e6:	5e                   	pop    esi
c00106e7:	c3                   	ret    

c00106e8 <VgaText::doANSI_SGR(int)>:
c00106e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f0:	85 d2                	test   edx,edx
c00106f2:	75 14                	jne    c0010708 <VgaText::doANSI_SGR(int)+0x20>
c00106f4:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106fa:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010700:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010706:	eb 65                	jmp    c001076d <VgaText::doANSI_SGR(int)+0x85>
c0010708:	83 fa 07             	cmp    edx,0x7
c001070b:	75 14                	jne    c0010721 <VgaText::doANSI_SGR(int)+0x39>
c001070d:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010713:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010719:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c001071f:	eb 4c                	jmp    c001076d <VgaText::doANSI_SGR(int)+0x85>
c0010721:	83 fa 1b             	cmp    edx,0x1b
c0010724:	74 ce                	je     c00106f4 <VgaText::doANSI_SGR(int)+0xc>
c0010726:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010729:	83 f9 07             	cmp    ecx,0x7
c001072c:	77 09                	ja     c0010737 <VgaText::doANSI_SGR(int)+0x4f>
c001072e:	8b 14 8d a0 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2a60]
c0010735:	eb 20                	jmp    c0010757 <VgaText::doANSI_SGR(int)+0x6f>
c0010737:	8d 4a d8             	lea    ecx,[edx-0x28]
c001073a:	83 f9 07             	cmp    ecx,0x7
c001073d:	77 09                	ja     c0010748 <VgaText::doANSI_SGR(int)+0x60>
c001073f:	8b 14 8d a0 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2a60]
c0010746:	eb 25                	jmp    c001076d <VgaText::doANSI_SGR(int)+0x85>
c0010748:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001074b:	83 f9 07             	cmp    ecx,0x7
c001074e:	77 0e                	ja     c001075e <VgaText::doANSI_SGR(int)+0x76>
c0010750:	8b 14 95 58 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2ba8]
c0010757:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001075d:	c3                   	ret    
c001075e:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010761:	83 f9 07             	cmp    ecx,0x7
c0010764:	77 0d                	ja     c0010773 <VgaText::doANSI_SGR(int)+0x8b>
c0010766:	8b 14 95 30 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2bd0]
c001076d:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010773:	c3                   	ret    

c0010774 <VgaText::setDefaultBgColour(VgaColour)>:
c0010774:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010778:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001077c:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010782:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010788:	c3                   	ret    
c0010789:	90                   	nop

c001078a <VgaText::setDefaultFgColour(VgaColour)>:
c001078a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001078e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010792:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010798:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001079e:	c3                   	ret    
c001079f:	90                   	nop

c00107a0 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00107a0:	53                   	push   ebx
c00107a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00107a5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00107a9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00107ad:	51                   	push   ecx
c00107ae:	e8 c1 ff ff ff       	call   c0010774 <VgaText::setDefaultBgColour(VgaColour)>
c00107b3:	58                   	pop    eax
c00107b4:	5a                   	pop    edx
c00107b5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00107b9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00107bd:	5b                   	pop    ebx
c00107be:	eb ca                	jmp    c001078a <VgaText::setDefaultFgColour(VgaColour)>

c00107c0 <VgaText::combineColours(unsigned char, unsigned char)>:
c00107c0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00107c4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00107c9:	83 e0 0f             	and    eax,0xf
c00107cc:	c1 e2 04             	shl    edx,0x4
c00107cf:	09 d0                	or     eax,edx
c00107d1:	c3                   	ret    

c00107d2 <VgaText::scrollScreen()>:
c00107d2:	57                   	push   edi
c00107d3:	56                   	push   esi
c00107d4:	be 01 00 00 00       	mov    esi,0x1
c00107d9:	53                   	push   ebx
c00107da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107de:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107e4:	31 ff                	xor    edi,edi
c00107e6:	01 d9                	add    ecx,ebx
c00107e8:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107eb:	83 fe 17             	cmp    esi,0x17
c00107ee:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107f4:	75 28                	jne    c001081e <VgaText::scrollScreen()+0x4c>
c00107f6:	f7 c7 01 00 00 00    	test   edi,0x1
c00107fc:	74 1c                	je     c001081a <VgaText::scrollScreen()+0x48>
c00107fe:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010805:	50                   	push   eax
c0010806:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c001080d:	50                   	push   eax
c001080e:	e8 ad ff ff ff       	call   c00107c0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010813:	5a                   	pop    edx
c0010814:	5a                   	pop    edx
c0010815:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010818:	eb 04                	jmp    c001081e <VgaText::scrollScreen()+0x4c>
c001081a:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c001081e:	47                   	inc    edi
c001081f:	41                   	inc    ecx
c0010820:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010826:	75 c0                	jne    c00107e8 <VgaText::scrollScreen()+0x16>
c0010828:	46                   	inc    esi
c0010829:	83 fe 18             	cmp    esi,0x18
c001082c:	75 b0                	jne    c00107de <VgaText::scrollScreen()+0xc>
c001082e:	39 1d 24 e7 02 c0    	cmp    DWORD PTR ds:0xc002e724,ebx
c0010834:	75 24                	jne    c001085a <VgaText::scrollScreen()+0x88>
c0010836:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001083d:	74 08                	je     c0010847 <VgaText::scrollScreen()+0x75>
c001083f:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010845:	eb 13                	jmp    c001085a <VgaText::scrollScreen()+0x88>
c0010847:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001084d:	85 c0                	test   eax,eax
c001084f:	74 09                	je     c001085a <VgaText::scrollScreen()+0x88>
c0010851:	83 ec 0c             	sub    esp,0xc
c0010854:	53                   	push   ebx
c0010855:	ff d0                	call   eax
c0010857:	83 c4 10             	add    esp,0x10
c001085a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001085e:	5b                   	pop    ebx
c001085f:	5e                   	pop    esi
c0010860:	5f                   	pop    edi
c0010861:	e9 1e fe ff ff       	jmp    c0010684 <VgaText::updateCursor()>

c0010866 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010866:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001086b:	c1 e0 08             	shl    eax,0x8
c001086e:	89 c2                	mov    edx,eax
c0010870:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010875:	09 d0                	or     eax,edx
c0010877:	c3                   	ret    

c0010878 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010878:	53                   	push   ebx
c0010879:	83 ec 08             	sub    esp,0x8
c001087c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010880:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010885:	50                   	push   eax
c0010886:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001088b:	50                   	push   eax
c001088c:	e8 2f ff ff ff       	call   c00107c0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010891:	5a                   	pop    edx
c0010892:	0f b6 c0             	movzx  eax,al
c0010895:	5b                   	pop    ebx
c0010896:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001089b:	50                   	push   eax
c001089c:	53                   	push   ebx
c001089d:	e8 c4 ff ff ff       	call   c0010866 <VgaText::combineCharAndColour(char, unsigned char)>
c00108a2:	5a                   	pop    edx
c00108a3:	5a                   	pop    edx
c00108a4:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00108aa:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00108ae:	0f b7 d2             	movzx  edx,dx
c00108b1:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c00108b6:	39 0d 24 e7 02 c0    	cmp    DWORD PTR ds:0xc002e724,ecx
c00108bc:	75 14                	jne    c00108d2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108be:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00108c4:	85 c0                	test   eax,eax
c00108c6:	74 0a                	je     c00108d2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108c8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00108cc:	83 c4 08             	add    esp,0x8
c00108cf:	5b                   	pop    ebx
c00108d0:	ff e0                	jmp    eax
c00108d2:	83 c4 08             	add    esp,0x8
c00108d5:	5b                   	pop    ebx
c00108d6:	c3                   	ret    
c00108d7:	90                   	nop

c00108d8 <VgaText::getCursorX()>:
c00108d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108dc:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108e2:	c3                   	ret    
c00108e3:	90                   	nop

c00108e4 <VgaText::getCursorY()>:
c00108e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108e8:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108ee:	c3                   	ret    
c00108ef:	90                   	nop

c00108f0 <VgaText::setCursor(int, int)>:
c00108f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108f8:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010902:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010908:	e9 77 fd ff ff       	jmp    c0010684 <VgaText::updateCursor()>
c001090d:	90                   	nop

c001090e <VgaText::setCursorX(int)>:
c001090e:	83 ec 10             	sub    esp,0x10
c0010911:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010915:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c001091b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001091f:	50                   	push   eax
c0010920:	e8 cb ff ff ff       	call   c00108f0 <VgaText::setCursor(int, int)>
c0010925:	83 c4 1c             	add    esp,0x1c
c0010928:	c3                   	ret    
c0010929:	90                   	nop

c001092a <VgaText::setCursorY(int)>:
c001092a:	83 ec 10             	sub    esp,0x10
c001092d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010931:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010935:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001093b:	50                   	push   eax
c001093c:	e8 af ff ff ff       	call   c00108f0 <VgaText::setCursor(int, int)>
c0010941:	83 c4 1c             	add    esp,0x1c
c0010944:	c3                   	ret    
c0010945:	90                   	nop

c0010946 <VgaText::incrementCursor(bool)>:
c0010946:	56                   	push   esi
c0010947:	53                   	push   ebx
c0010948:	51                   	push   ecx
c0010949:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001094d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010951:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010957:	40                   	inc    eax
c0010958:	83 f8 50             	cmp    eax,0x50
c001095b:	74 08                	je     c0010965 <VgaText::incrementCursor(bool)+0x1f>
c001095d:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010963:	eb 33                	jmp    c0010998 <VgaText::incrementCursor(bool)+0x52>
c0010965:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001096b:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010975:	8d 50 01             	lea    edx,[eax+0x1]
c0010978:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001097e:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010984:	75 12                	jne    c0010998 <VgaText::incrementCursor(bool)+0x52>
c0010986:	83 ec 0c             	sub    esp,0xc
c0010989:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001098f:	53                   	push   ebx
c0010990:	e8 3d fe ff ff       	call   c00107d2 <VgaText::scrollScreen()>
c0010995:	83 c4 10             	add    esp,0x10
c0010998:	89 f0                	mov    eax,esi
c001099a:	84 c0                	test   al,al
c001099c:	74 0c                	je     c00109aa <VgaText::incrementCursor(bool)+0x64>
c001099e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00109a2:	5a                   	pop    edx
c00109a3:	5b                   	pop    ebx
c00109a4:	5e                   	pop    esi
c00109a5:	e9 da fc ff ff       	jmp    c0010684 <VgaText::updateCursor()>
c00109aa:	58                   	pop    eax
c00109ab:	5b                   	pop    ebx
c00109ac:	5e                   	pop    esi
c00109ad:	c3                   	ret    

c00109ae <VgaText::updateRAMUsageDisplay(int)>:
c00109ae:	56                   	push   esi
c00109af:	8b 35 80 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d580
c00109b5:	53                   	push   ebx
c00109b6:	bb 0a 00 00 00       	mov    ebx,0xa
c00109bb:	6a 0f                	push   0xf
c00109bd:	6a 00                	push   0x0
c00109bf:	e8 fc fd ff ff       	call   c00107c0 <VgaText::combineColours(unsigned char, unsigned char)>
c00109c4:	5a                   	pop    edx
c00109c5:	59                   	pop    ecx
c00109c6:	0f b6 c8             	movzx  ecx,al
c00109c9:	51                   	push   ecx
c00109ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ce:	99                   	cdq    
c00109cf:	f7 fb                	idiv   ebx
c00109d1:	89 d3                	mov    ebx,edx
c00109d3:	83 c0 30             	add    eax,0x30
c00109d6:	83 c3 30             	add    ebx,0x30
c00109d9:	0f be c0             	movsx  eax,al
c00109dc:	0f b6 db             	movzx  ebx,bl
c00109df:	50                   	push   eax
c00109e0:	e8 81 fe ff ff       	call   c0010866 <VgaText::combineCharAndColour(char, unsigned char)>
c00109e5:	5a                   	pop    edx
c00109e6:	5a                   	pop    edx
c00109e7:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109ee:	51                   	push   ecx
c00109ef:	53                   	push   ebx
c00109f0:	e8 71 fe ff ff       	call   c0010866 <VgaText::combineCharAndColour(char, unsigned char)>
c00109f5:	5b                   	pop    ebx
c00109f6:	5a                   	pop    edx
c00109f7:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109fe:	51                   	push   ecx
c00109ff:	6a 25                	push   0x25
c0010a01:	e8 60 fe ff ff       	call   c0010866 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a06:	59                   	pop    ecx
c0010a07:	5b                   	pop    ebx
c0010a08:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010a0f:	5b                   	pop    ebx
c0010a10:	5e                   	pop    esi
c0010a11:	c3                   	ret    

c0010a12 <VgaText::updateDiskUsage()>:
c0010a12:	55                   	push   ebp
c0010a13:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a18:	57                   	push   edi
c0010a19:	8b 3d 80 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d580
c0010a1f:	56                   	push   esi
c0010a20:	53                   	push   ebx
c0010a21:	6a 0f                	push   0xf
c0010a23:	6a 00                	push   0x0
c0010a25:	e8 96 fd ff ff       	call   c00107c0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010a2a:	5a                   	pop    edx
c0010a2b:	0f b6 d8             	movzx  ebx,al
c0010a2e:	59                   	pop    ecx
c0010a2f:	8b 35 a8 29 03 c0    	mov    esi,DWORD PTR ds:0xc00329a8
c0010a35:	53                   	push   ebx
c0010a36:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a3b:	89 f0                	mov    eax,esi
c0010a3d:	99                   	cdq    
c0010a3e:	f7 fd                	idiv   ebp
c0010a40:	99                   	cdq    
c0010a41:	f7 f9                	idiv   ecx
c0010a43:	8d 42 30             	lea    eax,[edx+0x30]
c0010a46:	0f b6 c0             	movzx  eax,al
c0010a49:	50                   	push   eax
c0010a4a:	e8 17 fe ff ff       	call   c0010866 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a4f:	5d                   	pop    ebp
c0010a50:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a55:	5a                   	pop    edx
c0010a56:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a5a:	53                   	push   ebx
c0010a5b:	89 f0                	mov    eax,esi
c0010a5d:	99                   	cdq    
c0010a5e:	f7 fd                	idiv   ebp
c0010a60:	99                   	cdq    
c0010a61:	f7 f9                	idiv   ecx
c0010a63:	8d 42 30             	lea    eax,[edx+0x30]
c0010a66:	0f b6 c0             	movzx  eax,al
c0010a69:	50                   	push   eax
c0010a6a:	e8 f7 fd ff ff       	call   c0010866 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a6f:	5d                   	pop    ebp
c0010a70:	bd 64 00 00 00       	mov    ebp,0x64
c0010a75:	5a                   	pop    edx
c0010a76:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a7d:	53                   	push   ebx
c0010a7e:	89 f0                	mov    eax,esi
c0010a80:	99                   	cdq    
c0010a81:	f7 fd                	idiv   ebp
c0010a83:	99                   	cdq    
c0010a84:	f7 f9                	idiv   ecx
c0010a86:	8d 42 30             	lea    eax,[edx+0x30]
c0010a89:	0f b6 c0             	movzx  eax,al
c0010a8c:	50                   	push   eax
c0010a8d:	e8 d4 fd ff ff       	call   c0010866 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a92:	5d                   	pop    ebp
c0010a93:	5a                   	pop    edx
c0010a94:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a9b:	53                   	push   ebx
c0010a9c:	89 f0                	mov    eax,esi
c0010a9e:	99                   	cdq    
c0010a9f:	f7 f9                	idiv   ecx
c0010aa1:	89 d6                	mov    esi,edx
c0010aa3:	99                   	cdq    
c0010aa4:	f7 f9                	idiv   ecx
c0010aa6:	8d 42 30             	lea    eax,[edx+0x30]
c0010aa9:	0f b6 c0             	movzx  eax,al
c0010aac:	50                   	push   eax
c0010aad:	e8 b4 fd ff ff       	call   c0010866 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab2:	5d                   	pop    ebp
c0010ab3:	5a                   	pop    edx
c0010ab4:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010abb:	53                   	push   ebx
c0010abc:	8d 46 30             	lea    eax,[esi+0x30]
c0010abf:	0f b6 f0             	movzx  esi,al
c0010ac2:	56                   	push   esi
c0010ac3:	e8 9e fd ff ff       	call   c0010866 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ac8:	5e                   	pop    esi
c0010ac9:	8b 35 a4 29 03 c0    	mov    esi,DWORD PTR ds:0xc00329a4
c0010acf:	5d                   	pop    ebp
c0010ad0:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010ad7:	bd 10 27 00 00       	mov    ebp,0x2710
c0010adc:	53                   	push   ebx
c0010add:	89 f0                	mov    eax,esi
c0010adf:	99                   	cdq    
c0010ae0:	f7 fd                	idiv   ebp
c0010ae2:	99                   	cdq    
c0010ae3:	f7 f9                	idiv   ecx
c0010ae5:	8d 42 30             	lea    eax,[edx+0x30]
c0010ae8:	0f b6 c0             	movzx  eax,al
c0010aeb:	50                   	push   eax
c0010aec:	e8 75 fd ff ff       	call   c0010866 <VgaText::combineCharAndColour(char, unsigned char)>
c0010af1:	5a                   	pop    edx
c0010af2:	5d                   	pop    ebp
c0010af3:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010afa:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010aff:	53                   	push   ebx
c0010b00:	89 f0                	mov    eax,esi
c0010b02:	99                   	cdq    
c0010b03:	f7 fd                	idiv   ebp
c0010b05:	99                   	cdq    
c0010b06:	f7 f9                	idiv   ecx
c0010b08:	8d 42 30             	lea    eax,[edx+0x30]
c0010b0b:	0f b6 c0             	movzx  eax,al
c0010b0e:	50                   	push   eax
c0010b0f:	e8 52 fd ff ff       	call   c0010866 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b14:	5a                   	pop    edx
c0010b15:	5d                   	pop    ebp
c0010b16:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010b1d:	bd 64 00 00 00       	mov    ebp,0x64
c0010b22:	53                   	push   ebx
c0010b23:	89 f0                	mov    eax,esi
c0010b25:	99                   	cdq    
c0010b26:	f7 fd                	idiv   ebp
c0010b28:	99                   	cdq    
c0010b29:	f7 f9                	idiv   ecx
c0010b2b:	83 c2 30             	add    edx,0x30
c0010b2e:	0f b6 d2             	movzx  edx,dl
c0010b31:	52                   	push   edx
c0010b32:	e8 2f fd ff ff       	call   c0010866 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b37:	5a                   	pop    edx
c0010b38:	5d                   	pop    ebp
c0010b39:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b40:	53                   	push   ebx
c0010b41:	89 f0                	mov    eax,esi
c0010b43:	99                   	cdq    
c0010b44:	f7 f9                	idiv   ecx
c0010b46:	89 d6                	mov    esi,edx
c0010b48:	99                   	cdq    
c0010b49:	f7 f9                	idiv   ecx
c0010b4b:	8d 42 30             	lea    eax,[edx+0x30]
c0010b4e:	0f b6 c0             	movzx  eax,al
c0010b51:	50                   	push   eax
c0010b52:	e8 0f fd ff ff       	call   c0010866 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b57:	5a                   	pop    edx
c0010b58:	59                   	pop    ecx
c0010b59:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b60:	53                   	push   ebx
c0010b61:	8d 46 30             	lea    eax,[esi+0x30]
c0010b64:	0f b6 f0             	movzx  esi,al
c0010b67:	56                   	push   esi
c0010b68:	e8 f9 fc ff ff       	call   c0010866 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b6d:	5b                   	pop    ebx
c0010b6e:	5e                   	pop    esi
c0010b6f:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b76:	5b                   	pop    ebx
c0010b77:	5e                   	pop    esi
c0010b78:	5f                   	pop    edi
c0010b79:	5d                   	pop    ebp
c0010b7a:	c3                   	ret    
c0010b7b:	90                   	nop

c0010b7c <VgaText::updateTitle()>:
c0010b7c:	53                   	push   ebx
c0010b7d:	31 c0                	xor    eax,eax
c0010b7f:	83 ec 58             	sub    esp,0x58
c0010b82:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b86:	89 e1                	mov    ecx,esp
c0010b88:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b8c:	40                   	inc    eax
c0010b8d:	83 f8 50             	cmp    eax,0x50
c0010b90:	75 f6                	jne    c0010b88 <VgaText::updateTitle()+0xc>
c0010b92:	31 c0                	xor    eax,eax
c0010b94:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b9b:	84 db                	test   bl,bl
c0010b9d:	74 06                	je     c0010ba5 <VgaText::updateTitle()+0x29>
c0010b9f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010ba2:	40                   	inc    eax
c0010ba3:	eb ef                	jmp    c0010b94 <VgaText::updateTitle()+0x18>
c0010ba5:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010bab:	85 c0                	test   eax,eax
c0010bad:	74 09                	je     c0010bb8 <VgaText::updateTitle()+0x3c>
c0010baf:	53                   	push   ebx
c0010bb0:	53                   	push   ebx
c0010bb1:	51                   	push   ecx
c0010bb2:	52                   	push   edx
c0010bb3:	ff d0                	call   eax
c0010bb5:	83 c4 10             	add    esp,0x10
c0010bb8:	e8 55 fe ff ff       	call   c0010a12 <VgaText::updateDiskUsage()>
c0010bbd:	83 c4 58             	add    esp,0x58
c0010bc0:	5b                   	pop    ebx
c0010bc1:	c3                   	ret    

c0010bc2 <VgaText::setTitleTextColour(VgaColour)>:
c0010bc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bca:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010bd0:	eb aa                	jmp    c0010b7c <VgaText::updateTitle()>

c0010bd2 <VgaText::setTitleColour(VgaColour)>:
c0010bd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bda:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010be0:	eb 9a                	jmp    c0010b7c <VgaText::updateTitle()>

c0010be2 <VgaText::setTitle(char*)>:
c0010be2:	53                   	push   ebx
c0010be3:	83 ec 10             	sub    esp,0x10
c0010be6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bee:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bf4:	50                   	push   eax
c0010bf5:	e8 3a fc fe ff       	call   c0000834 <strcpy>
c0010bfa:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010bfe:	83 c4 18             	add    esp,0x18
c0010c01:	5b                   	pop    ebx
c0010c02:	e9 75 ff ff ff       	jmp    c0010b7c <VgaText::updateTitle()>
c0010c07:	90                   	nop

c0010c08 <VgaText::decrementCursor(bool)>:
c0010c08:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010c0c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010c10:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010c16:	85 c0                	test   eax,eax
c0010c18:	74 07                	je     c0010c21 <VgaText::decrementCursor(bool)+0x19>
c0010c1a:	48                   	dec    eax
c0010c1b:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010c21:	84 c9                	test   cl,cl
c0010c23:	74 09                	je     c0010c2e <VgaText::decrementCursor(bool)+0x26>
c0010c25:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010c29:	e9 56 fa ff ff       	jmp    c0010684 <VgaText::updateCursor()>
c0010c2e:	c3                   	ret    
c0010c2f:	90                   	nop

c0010c30 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010c30:	53                   	push   ebx
c0010c31:	83 ec 08             	sub    esp,0x8
c0010c34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c3c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c44:	3c 07                	cmp    al,0x7
c0010c46:	75 2a                	jne    c0010c72 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c48:	a1 d0 e7 02 c0       	mov    eax,ds:0xc002e7d0
c0010c4d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c55:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c5d:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c65:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c69:	83 c4 08             	add    esp,0x8
c0010c6c:	5b                   	pop    ebx
c0010c6d:	e9 5a 31 00 00       	jmp    c0013dcc <Buzzer::beep(int, int, bool)>
c0010c72:	3c 0d                	cmp    al,0xd
c0010c74:	75 0c                	jne    c0010c82 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c76:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c80:	eb 3b                	jmp    c0010cbd <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c82:	3c 0a                	cmp    al,0xa
c0010c84:	75 40                	jne    c0010cc6 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c86:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c8c:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c96:	8d 50 01             	lea    edx,[eax+0x1]
c0010c99:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c9f:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010ca5:	75 12                	jne    c0010cb9 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010ca7:	83 ec 0c             	sub    esp,0xc
c0010caa:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010cb0:	53                   	push   ebx
c0010cb1:	e8 1c fb ff ff       	call   c00107d2 <VgaText::scrollScreen()>
c0010cb6:	83 c4 10             	add    esp,0x10
c0010cb9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010cbd:	83 c4 08             	add    esp,0x8
c0010cc0:	5b                   	pop    ebx
c0010cc1:	e9 be f9 ff ff       	jmp    c0010684 <VgaText::updateCursor()>
c0010cc6:	3c 08                	cmp    al,0x8
c0010cc8:	75 31                	jne    c0010cfb <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010cca:	50                   	push   eax
c0010ccb:	50                   	push   eax
c0010ccc:	6a 01                	push   0x1
c0010cce:	53                   	push   ebx
c0010ccf:	e8 34 ff ff ff       	call   c0010c08 <VgaText::decrementCursor(bool)>
c0010cd4:	5a                   	pop    edx
c0010cd5:	59                   	pop    ecx
c0010cd6:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cdc:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010ce2:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010ce8:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cee:	6a 20                	push   0x20
c0010cf0:	53                   	push   ebx
c0010cf1:	e8 82 fb ff ff       	call   c0010878 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cf6:	83 c4 28             	add    esp,0x28
c0010cf9:	5b                   	pop    ebx
c0010cfa:	c3                   	ret    
c0010cfb:	83 ec 08             	sub    esp,0x8
c0010cfe:	0f be c0             	movsx  eax,al
c0010d01:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d07:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d0d:	51                   	push   ecx
c0010d0e:	52                   	push   edx
c0010d0f:	50                   	push   eax
c0010d10:	53                   	push   ebx
c0010d11:	e8 62 fb ff ff       	call   c0010878 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010d16:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010d1a:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010d22:	83 c4 28             	add    esp,0x28
c0010d25:	5b                   	pop    ebx
c0010d26:	e9 1b fc ff ff       	jmp    c0010946 <VgaText::incrementCursor(bool)>
c0010d2b:	90                   	nop

c0010d2c <VgaText::isShowingCursor()>:
c0010d2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d30:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010d36:	c3                   	ret    
c0010d37:	90                   	nop

c0010d38 <VgaText::isBlinkDisabled()>:
c0010d38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d3c:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d42:	83 f0 01             	xor    eax,0x1
c0010d45:	c3                   	ret    

c0010d46 <VgaText::setCursorHeight(int)>:
c0010d46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d4e:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d54:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d5f:	e9 3a f9 ff ff       	jmp    c001069e <VgaText::showCursor(bool)>

c0010d64 <VgaText::getCursorHeight()>:
c0010d64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d68:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d6e:	c3                   	ret    

c0010d6f <setActiveTerminal(VgaText*)>:
c0010d6f:	53                   	push   ebx
c0010d70:	83 ec 08             	sub    esp,0x8
c0010d73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d77:	85 db                	test   ebx,ebx
c0010d79:	75 11                	jne    c0010d8c <setActiveTerminal(VgaText*)+0x1d>
c0010d7b:	c7 44 24 10 60 a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a460
c0010d83:	83 c4 08             	add    esp,0x8
c0010d86:	5b                   	pop    ebx
c0010d87:	e9 e3 98 00 00       	jmp    c001a66f <Krnl::panic(char const*)>
c0010d8c:	50                   	push   eax
c0010d8d:	50                   	push   eax
c0010d8e:	53                   	push   ebx
c0010d8f:	68 6e a4 02 c0       	push   0xc002a46e
c0010d94:	e8 34 22 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0010d99:	a1 24 e7 02 c0       	mov    eax,ds:0xc002e724
c0010d9e:	83 c4 10             	add    esp,0x10
c0010da1:	85 c0                	test   eax,eax
c0010da3:	74 0c                	je     c0010db1 <setActiveTerminal(VgaText*)+0x42>
c0010da5:	83 ec 0c             	sub    esp,0xc
c0010da8:	50                   	push   eax
c0010da9:	e8 d6 f8 ff ff       	call   c0010684 <VgaText::updateCursor()>
c0010dae:	83 c4 10             	add    esp,0x10
c0010db1:	89 1d 24 e7 02 c0    	mov    DWORD PTR ds:0xc002e724,ebx
c0010db7:	51                   	push   ecx
c0010db8:	51                   	push   ecx
c0010db9:	53                   	push   ebx
c0010dba:	68 86 a4 02 c0       	push   0xc002a486
c0010dbf:	e8 09 22 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0010dc4:	83 c4 0c             	add    esp,0xc
c0010dc7:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010dcd:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010dd3:	53                   	push   ebx
c0010dd4:	e8 17 fb ff ff       	call   c00108f0 <VgaText::setCursor(int, int)>
c0010dd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ddc:	e8 57 ff ff ff       	call   c0010d38 <VgaText::isBlinkDisabled()>
c0010de1:	5a                   	pop    edx
c0010de2:	0f b6 c0             	movzx  eax,al
c0010de5:	59                   	pop    ecx
c0010de6:	50                   	push   eax
c0010de7:	53                   	push   ebx
c0010de8:	e8 c1 f8 ff ff       	call   c00106ae <VgaText::disableBlink(bool)>
c0010ded:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010df0:	e8 6f ff ff ff       	call   c0010d64 <VgaText::getCursorHeight()>
c0010df5:	5a                   	pop    edx
c0010df6:	59                   	pop    ecx
c0010df7:	50                   	push   eax
c0010df8:	53                   	push   ebx
c0010df9:	e8 48 ff ff ff       	call   c0010d46 <VgaText::setCursorHeight(int)>
c0010dfe:	83 c4 10             	add    esp,0x10
c0010e01:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010e08:	75 0a                	jne    c0010e14 <setActiveTerminal(VgaText*)+0xa5>
c0010e0a:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010e14:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010e18:	83 c4 08             	add    esp,0x8
c0010e1b:	5b                   	pop    ebx
c0010e1c:	e9 0f f8 ff ff       	jmp    c0010630 <VgaText::load()>

c0010e21 <doTerminalCycle()>:
c0010e21:	83 ec 18             	sub    esp,0x18
c0010e24:	a1 20 e7 02 c0       	mov    eax,ds:0xc002e720
c0010e29:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010e2f:	50                   	push   eax
c0010e30:	a3 20 e7 02 c0       	mov    ds:0xc002e720,eax
c0010e35:	e8 35 ff ff ff       	call   c0010d6f <setActiveTerminal(VgaText*)>
c0010e3a:	83 c4 1c             	add    esp,0x1c
c0010e3d:	c3                   	ret    

c0010e3e <VgaText::doUpdate()>:
c0010e3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e42:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e48:	85 c0                	test   eax,eax
c0010e4a:	74 02                	je     c0010e4e <VgaText::doUpdate()+0x10>
c0010e4c:	ff e0                	jmp    eax
c0010e4e:	c3                   	ret    
c0010e4f:	90                   	nop

c0010e50 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e50:	55                   	push   ebp
c0010e51:	57                   	push   edi
c0010e52:	56                   	push   esi
c0010e53:	53                   	push   ebx
c0010e54:	83 ec 1c             	sub    esp,0x1c
c0010e57:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e5b:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e60:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e67:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e6a:	50                   	push   eax
c0010e6b:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e70:	50                   	push   eax
c0010e71:	e8 4a f9 ff ff       	call   c00107c0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010e76:	59                   	pop    ecx
c0010e77:	0f b6 c0             	movzx  eax,al
c0010e7a:	5b                   	pop    ebx
c0010e7b:	31 c9                	xor    ecx,ecx
c0010e7d:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e85:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e89:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e93:	0f b7 db             	movzx  ebx,bx
c0010e96:	01 db                	add    ebx,ebx
c0010e98:	01 fb                	add    ebx,edi
c0010e9a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e9d:	84 c0                	test   al,al
c0010e9f:	0f 84 38 01 00 00    	je     c0010fdd <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010ea5:	3c 0d                	cmp    al,0xd
c0010ea7:	75 0f                	jne    c0010eb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010ea9:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010eb3:	e9 1f 01 00 00       	jmp    c0010fd7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010eb8:	3c 0a                	cmp    al,0xa
c0010eba:	75 5b                	jne    c0010f17 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010ebc:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010ec2:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010ecc:	8d 48 01             	lea    ecx,[eax+0x1]
c0010ecf:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010ed5:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010edb:	75 12                	jne    c0010eef <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010edd:	83 ec 0c             	sub    esp,0xc
c0010ee0:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010ee6:	55                   	push   ebp
c0010ee7:	e8 e6 f8 ff ff       	call   c00107d2 <VgaText::scrollScreen()>
c0010eec:	83 c4 10             	add    esp,0x10
c0010eef:	83 ec 0c             	sub    esp,0xc
c0010ef2:	55                   	push   ebp
c0010ef3:	e8 8c f7 ff ff       	call   c0010684 <VgaText::updateCursor()>
c0010ef8:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f00:	83 c4 10             	add    esp,0x10
c0010f03:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f09:	31 c9                	xor    ecx,ecx
c0010f0b:	0f b7 db             	movzx  ebx,bx
c0010f0e:	01 db                	add    ebx,ebx
c0010f10:	01 fb                	add    ebx,edi
c0010f12:	e9 c0 00 00 00       	jmp    c0010fd7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f17:	3c 08                	cmp    al,0x8
c0010f19:	75 4e                	jne    c0010f69 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010f1b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f1f:	53                   	push   ebx
c0010f20:	53                   	push   ebx
c0010f21:	6a 01                	push   0x1
c0010f23:	55                   	push   ebp
c0010f24:	e8 df fc ff ff       	call   c0010c08 <VgaText::decrementCursor(bool)>
c0010f29:	58                   	pop    eax
c0010f2a:	5a                   	pop    edx
c0010f2b:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f31:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f37:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010f3d:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f43:	6a 20                	push   0x20
c0010f45:	55                   	push   ebp
c0010f46:	e8 2d f9 ff ff       	call   c0010878 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f4b:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f53:	83 c4 20             	add    esp,0x20
c0010f56:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f5c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f60:	0f b7 db             	movzx  ebx,bx
c0010f63:	01 db                	add    ebx,ebx
c0010f65:	01 fb                	add    ebx,edi
c0010f67:	eb 6e                	jmp    c0010fd7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f69:	51                   	push   ecx
c0010f6a:	51                   	push   ecx
c0010f6b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f6f:	50                   	push   eax
c0010f70:	e8 f1 f8 ff ff       	call   c0010866 <VgaText::combineCharAndColour(char, unsigned char)>
c0010f75:	83 c4 10             	add    esp,0x10
c0010f78:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f7b:	39 2d 24 e7 02 c0    	cmp    DWORD PTR ds:0xc002e724,ebp
c0010f81:	75 2a                	jne    c0010fad <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f83:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f89:	85 c0                	test   eax,eax
c0010f8b:	74 20                	je     c0010fad <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f8d:	52                   	push   edx
c0010f8e:	52                   	push   edx
c0010f8f:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f95:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f9b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f9f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010fa3:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010fa6:	51                   	push   ecx
c0010fa7:	55                   	push   ebp
c0010fa8:	ff d0                	call   eax
c0010faa:	83 c4 20             	add    esp,0x20
c0010fad:	83 c3 02             	add    ebx,0x2
c0010fb0:	50                   	push   eax
c0010fb1:	50                   	push   eax
c0010fb2:	6a 00                	push   0x0
c0010fb4:	55                   	push   ebp
c0010fb5:	e8 8c f9 ff ff       	call   c0010946 <VgaText::incrementCursor(bool)>
c0010fba:	83 c4 10             	add    esp,0x10
c0010fbd:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010fc4:	75 0f                	jne    c0010fd5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010fc6:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010fce:	0f b7 db             	movzx  ebx,bx
c0010fd1:	01 db                	add    ebx,ebx
c0010fd3:	01 fb                	add    ebx,edi
c0010fd5:	b1 01                	mov    cl,0x1
c0010fd7:	46                   	inc    esi
c0010fd8:	e9 bd fe ff ff       	jmp    c0010e9a <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010fdd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010fe1:	83 ec 0c             	sub    esp,0xc
c0010fe4:	55                   	push   ebp
c0010fe5:	e8 9a f6 ff ff       	call   c0010684 <VgaText::updateCursor()>
c0010fea:	83 c4 10             	add    esp,0x10
c0010fed:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010ff1:	84 c9                	test   cl,cl
c0010ff3:	74 0c                	je     c0011001 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010ff5:	83 ec 0c             	sub    esp,0xc
c0010ff8:	55                   	push   ebp
c0010ff9:	e8 40 fe ff ff       	call   c0010e3e <VgaText::doUpdate()>
c0010ffe:	83 c4 10             	add    esp,0x10
c0011001:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0011008:	83 c4 1c             	add    esp,0x1c
c001100b:	5b                   	pop    ebx
c001100c:	5e                   	pop    esi
c001100d:	5f                   	pop    edi
c001100e:	5d                   	pop    ebp
c001100f:	c3                   	ret    

c0011010 <VgaText::clearScreen()>:
c0011010:	57                   	push   edi
c0011011:	56                   	push   esi
c0011012:	31 f6                	xor    esi,esi
c0011014:	53                   	push   ebx
c0011015:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011019:	52                   	push   edx
c001101a:	6a 00                	push   0x0
c001101c:	6a 00                	push   0x0
c001101e:	53                   	push   ebx
c001101f:	e8 cc f8 ff ff       	call   c00108f0 <VgaText::setCursor(int, int)>
c0011024:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c001102b:	83 c4 10             	add    esp,0x10
c001102e:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0011034:	7e 26                	jle    c001105c <VgaText::clearScreen()+0x4c>
c0011036:	31 ff                	xor    edi,edi
c0011038:	50                   	push   eax
c0011039:	50                   	push   eax
c001103a:	56                   	push   esi
c001103b:	57                   	push   edi
c001103c:	47                   	inc    edi
c001103d:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011043:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011049:	6a 20                	push   0x20
c001104b:	53                   	push   ebx
c001104c:	e8 27 f8 ff ff       	call   c0010878 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011051:	83 c4 20             	add    esp,0x20
c0011054:	83 ff 50             	cmp    edi,0x50
c0011057:	75 df                	jne    c0011038 <VgaText::clearScreen()+0x28>
c0011059:	46                   	inc    esi
c001105a:	eb d2                	jmp    c001102e <VgaText::clearScreen()+0x1e>
c001105c:	83 ec 0c             	sub    esp,0xc
c001105f:	53                   	push   ebx
c0011060:	e8 d9 fd ff ff       	call   c0010e3e <VgaText::doUpdate()>
c0011065:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c001106c:	83 c4 10             	add    esp,0x10
c001106f:	5b                   	pop    ebx
c0011070:	5e                   	pop    esi
c0011071:	5f                   	pop    edi
c0011072:	c3                   	ret    
c0011073:	90                   	nop

c0011074 <VgaText::putchar(char)>:
c0011074:	56                   	push   esi
c0011075:	53                   	push   ebx
c0011076:	83 ec 14             	sub    esp,0x14
c0011079:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001107d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011081:	3c 5b                	cmp    al,0x5b
c0011083:	75 21                	jne    c00110a6 <VgaText::putchar(char)+0x32>
c0011085:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001108c:	74 28                	je     c00110b6 <VgaText::putchar(char)+0x42>
c001108e:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011097:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c00110a1:	e9 e2 00 00 00       	jmp    c0011188 <VgaText::putchar(char)+0x114>
c00110a6:	3c 1b                	cmp    al,0x1b
c00110a8:	75 0c                	jne    c00110b6 <VgaText::putchar(char)+0x42>
c00110aa:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c00110b1:	e9 d2 00 00 00       	jmp    c0011188 <VgaText::putchar(char)+0x114>
c00110b6:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00110bc:	84 c9                	test   cl,cl
c00110be:	0f 84 ab 00 00 00    	je     c001116f <VgaText::putchar(char)+0xfb>
c00110c4:	8d 50 c0             	lea    edx,[eax-0x40]
c00110c7:	80 fa 3e             	cmp    dl,0x3e
c00110ca:	0f 87 82 00 00 00    	ja     c0011152 <VgaText::putchar(char)+0xde>
c00110d0:	3c 6d                	cmp    al,0x6d
c00110d2:	75 4d                	jne    c0011121 <VgaText::putchar(char)+0xad>
c00110d4:	31 f6                	xor    esi,esi
c00110d6:	31 d2                	xor    edx,edx
c00110d8:	31 c0                	xor    eax,eax
c00110da:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00110e0:	7e 30                	jle    c0011112 <VgaText::putchar(char)+0x9e>
c00110e2:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110ea:	80 fa 3b             	cmp    dl,0x3b
c00110ed:	75 17                	jne    c0011106 <VgaText::putchar(char)+0x92>
c00110ef:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110f3:	50                   	push   eax
c00110f4:	53                   	push   ebx
c00110f5:	e8 ee f5 ff ff       	call   c00106e8 <VgaText::doANSI_SGR(int)>
c00110fa:	59                   	pop    ecx
c00110fb:	31 d2                	xor    edx,edx
c00110fd:	58                   	pop    eax
c00110fe:	31 c0                	xor    eax,eax
c0011100:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011104:	eb 09                	jmp    c001110f <VgaText::putchar(char)+0x9b>
c0011106:	6b c0 0a             	imul   eax,eax,0xa
c0011109:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001110d:	88 ca                	mov    dl,cl
c001110f:	46                   	inc    esi
c0011110:	eb c8                	jmp    c00110da <VgaText::putchar(char)+0x66>
c0011112:	84 d2                	test   dl,dl
c0011114:	74 31                	je     c0011147 <VgaText::putchar(char)+0xd3>
c0011116:	50                   	push   eax
c0011117:	53                   	push   ebx
c0011118:	e8 cb f5 ff ff       	call   c00106e8 <VgaText::doANSI_SGR(int)>
c001111d:	58                   	pop    eax
c001111e:	5a                   	pop    edx
c001111f:	eb 26                	jmp    c0011147 <VgaText::putchar(char)+0xd3>
c0011121:	3c 4a                	cmp    al,0x4a
c0011123:	75 22                	jne    c0011147 <VgaText::putchar(char)+0xd3>
c0011125:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c001112c:	75 19                	jne    c0011147 <VgaText::putchar(char)+0xd3>
c001112e:	83 ec 0c             	sub    esp,0xc
c0011131:	53                   	push   ebx
c0011132:	e8 d9 fe ff ff       	call   c0011010 <VgaText::clearScreen()>
c0011137:	83 c4 0c             	add    esp,0xc
c001113a:	6a 00                	push   0x0
c001113c:	6a 00                	push   0x0
c001113e:	53                   	push   ebx
c001113f:	e8 ac f7 ff ff       	call   c00108f0 <VgaText::setCursor(int, int)>
c0011144:	83 c4 10             	add    esp,0x10
c0011147:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0011150:	eb 36                	jmp    c0011188 <VgaText::putchar(char)+0x114>
c0011152:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0011158:	83 fa 0e             	cmp    edx,0xe
c001115b:	7f 2b                	jg     c0011188 <VgaText::putchar(char)+0x114>
c001115d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011160:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0011166:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c001116d:	eb 19                	jmp    c0011188 <VgaText::putchar(char)+0x114>
c001116f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011175:	0f be c0             	movsx  eax,al
c0011178:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001117e:	50                   	push   eax
c001117f:	53                   	push   ebx
c0011180:	e8 ab fa ff ff       	call   c0010c30 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011185:	83 c4 10             	add    esp,0x10
c0011188:	83 c4 14             	add    esp,0x14
c001118b:	5b                   	pop    ebx
c001118c:	5e                   	pop    esi
c001118d:	c3                   	ret    

c001118e <VgaText::puts(char const*)>:
c001118e:	53                   	push   ebx
c001118f:	83 ec 08             	sub    esp,0x8
c0011192:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011196:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011199:	84 c0                	test   al,al
c001119b:	74 12                	je     c00111af <VgaText::puts(char const*)+0x21>
c001119d:	43                   	inc    ebx
c001119e:	51                   	push   ecx
c001119f:	51                   	push   ecx
c00111a0:	50                   	push   eax
c00111a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111a5:	e8 ca fe ff ff       	call   c0011074 <VgaText::putchar(char)>
c00111aa:	83 c4 10             	add    esp,0x10
c00111ad:	eb e7                	jmp    c0011196 <VgaText::puts(char const*)+0x8>
c00111af:	83 c4 08             	add    esp,0x8
c00111b2:	5b                   	pop    ebx
c00111b3:	c3                   	ret    

c00111b4 <VgaText::putx(unsigned int)>:
c00111b4:	57                   	push   edi
c00111b5:	b9 11 00 00 00       	mov    ecx,0x11
c00111ba:	56                   	push   esi
c00111bb:	be a2 a4 02 c0       	mov    esi,0xc002a4a2
c00111c0:	53                   	push   ebx
c00111c1:	83 ec 20             	sub    esp,0x20
c00111c4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00111c8:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00111cc:	fc                   	cld    
c00111cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111cf:	be 08 00 00 00       	mov    esi,0x8
c00111d4:	50                   	push   eax
c00111d5:	50                   	push   eax
c00111d6:	89 d8                	mov    eax,ebx
c00111d8:	c1 e3 04             	shl    ebx,0x4
c00111db:	c1 e8 1c             	shr    eax,0x1c
c00111de:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111e3:	50                   	push   eax
c00111e4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111e8:	e8 87 fe ff ff       	call   c0011074 <VgaText::putchar(char)>
c00111ed:	83 c4 10             	add    esp,0x10
c00111f0:	4e                   	dec    esi
c00111f1:	75 e1                	jne    c00111d4 <VgaText::putx(unsigned int)+0x20>
c00111f3:	83 c4 20             	add    esp,0x20
c00111f6:	5b                   	pop    ebx
c00111f7:	5e                   	pop    esi
c00111f8:	5f                   	pop    edi
c00111f9:	c3                   	ret    

c00111fa <VgaText::VgaText(char const*)>:
c00111fa:	57                   	push   edi
c00111fb:	56                   	push   esi
c00111fc:	53                   	push   ebx
c00111fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011201:	83 ec 08             	sub    esp,0x8
c0011204:	6a 00                	push   0x0
c0011206:	50                   	push   eax
c0011207:	e8 6e 05 00 00       	call   c001177a <UnixFile::UnixFile(int)>
c001120c:	83 c4 10             	add    esp,0x10
c001120f:	ba 08 a5 02 c0       	mov    edx,0xc002a508
c0011214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011218:	89 10                	mov    DWORD PTR [eax],edx
c001121a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121e:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0011228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122c:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0011236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001123a:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0011241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011245:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c001124c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011250:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c001125a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001125e:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0011268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001126c:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011277:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c001127e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011282:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011288:	bb 00 e7 02 c0       	mov    ebx,0xc002e700
c001128d:	b8 08 00 00 00       	mov    eax,0x8
c0011292:	fc                   	cld    
c0011293:	89 d7                	mov    edi,edx
c0011295:	89 de                	mov    esi,ebx
c0011297:	89 c1                	mov    ecx,eax
c0011299:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001129b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001129f:	05 1e 10 00 00       	add    eax,0x101e
c00112a4:	83 ec 08             	sub    esp,0x8
c00112a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ab:	50                   	push   eax
c00112ac:	e8 83 f5 fe ff       	call   c0000834 <strcpy>
c00112b1:	83 c4 10             	add    esp,0x10
c00112b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112b8:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00112c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112c6:	83 c0 0c             	add    eax,0xc
c00112c9:	83 ec 04             	sub    esp,0x4
c00112cc:	68 00 0f 00 00       	push   0xf00
c00112d1:	6a 00                	push   0x0
c00112d3:	50                   	push   eax
c00112d4:	e8 9f f4 fe ff       	call   c0000778 <memset>
c00112d9:	83 c4 10             	add    esp,0x10
c00112dc:	83 ec 04             	sub    esp,0x4
c00112df:	6a 00                	push   0x0
c00112e1:	6a 07                	push   0x7
c00112e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112e7:	e8 b4 f4 ff ff       	call   c00107a0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112ec:	83 c4 10             	add    esp,0x10
c00112ef:	83 ec 08             	sub    esp,0x8
c00112f2:	6a 02                	push   0x2
c00112f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112f8:	e8 49 fa ff ff       	call   c0010d46 <VgaText::setCursorHeight(int)>
c00112fd:	83 c4 10             	add    esp,0x10
c0011300:	83 ec 04             	sub    esp,0x4
c0011303:	6a 00                	push   0x0
c0011305:	6a 00                	push   0x0
c0011307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001130b:	e8 e0 f5 ff ff       	call   c00108f0 <VgaText::setCursor(int, int)>
c0011310:	83 c4 10             	add    esp,0x10
c0011313:	83 ec 08             	sub    esp,0x8
c0011316:	6a 01                	push   0x1
c0011318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001131c:	e8 7d f3 ff ff       	call   c001069e <VgaText::showCursor(bool)>
c0011321:	83 c4 10             	add    esp,0x10
c0011324:	83 ec 08             	sub    esp,0x8
c0011327:	6a 01                	push   0x1
c0011329:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001132d:	e8 7c f3 ff ff       	call   c00106ae <VgaText::disableBlink(bool)>
c0011332:	83 c4 10             	add    esp,0x10
c0011335:	83 ec 0c             	sub    esp,0xc
c0011338:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001133c:	e8 cf fc ff ff       	call   c0011010 <VgaText::clearScreen()>
c0011341:	83 c4 10             	add    esp,0x10
c0011344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011348:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c001134f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011353:	05 9e 10 00 00       	add    eax,0x109e
c0011358:	83 ec 04             	sub    esp,0x4
c001135b:	68 96 00 00 00       	push   0x96
c0011360:	6a 00                	push   0x0
c0011362:	50                   	push   eax
c0011363:	e8 10 f4 fe ff       	call   c0000778 <memset>
c0011368:	83 c4 10             	add    esp,0x10
c001136b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001136f:	05 34 11 00 00       	add    eax,0x1134
c0011374:	83 ec 04             	sub    esp,0x4
c0011377:	68 2c 01 00 00       	push   0x12c
c001137c:	6a 00                	push   0x0
c001137e:	50                   	push   eax
c001137f:	e8 f4 f3 fe ff       	call   c0000778 <memset>
c0011384:	83 c4 10             	add    esp,0x10
c0011387:	90                   	nop
c0011388:	5b                   	pop    ebx
c0011389:	5e                   	pop    esi
c001138a:	5f                   	pop    edi
c001138b:	c3                   	ret    

c001138c <VgaText::receiveKey(unsigned char)>:
c001138c:	55                   	push   ebp
c001138d:	57                   	push   edi
c001138e:	56                   	push   esi
c001138f:	53                   	push   ebx
c0011390:	83 ec 1c             	sub    esp,0x1c
c0011393:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011397:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001139b:	84 db                	test   bl,bl
c001139d:	0f 84 c9 00 00 00    	je     c001146c <VgaText::receiveKey(unsigned char)+0xe0>
c00113a3:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c00113a9:	80 fb 08             	cmp    bl,0x8
c00113ac:	75 2c                	jne    c00113da <VgaText::receiveKey(unsigned char)+0x4e>
c00113ae:	83 ec 0c             	sub    esp,0xc
c00113b1:	57                   	push   edi
c00113b2:	e8 dd f3 fe ff       	call   c0000794 <strlen>
c00113b7:	83 c4 10             	add    esp,0x10
c00113ba:	85 c0                	test   eax,eax
c00113bc:	74 41                	je     c00113ff <VgaText::receiveKey(unsigned char)+0x73>
c00113be:	50                   	push   eax
c00113bf:	50                   	push   eax
c00113c0:	6a 08                	push   0x8
c00113c2:	56                   	push   esi
c00113c3:	e8 ac fc ff ff       	call   c0011074 <VgaText::putchar(char)>
c00113c8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113cb:	e8 c4 f3 fe ff       	call   c0000794 <strlen>
c00113d0:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c00113d8:	eb 22                	jmp    c00113fc <VgaText::receiveKey(unsigned char)+0x70>
c00113da:	0f be c3             	movsx  eax,bl
c00113dd:	52                   	push   edx
c00113de:	52                   	push   edx
c00113df:	50                   	push   eax
c00113e0:	56                   	push   esi
c00113e1:	e8 8e fc ff ff       	call   c0011074 <VgaText::putchar(char)>
c00113e6:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113ea:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113ef:	59                   	pop    ecx
c00113f0:	5d                   	pop    ebp
c00113f1:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113f5:	50                   	push   eax
c00113f6:	57                   	push   edi
c00113f7:	e8 78 f5 fe ff       	call   c0000974 <strcat>
c00113fc:	83 c4 10             	add    esp,0x10
c00113ff:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0011406:	75 05                	jne    c001140d <VgaText::receiveKey(unsigned char)+0x81>
c0011408:	80 fb 0a             	cmp    bl,0xa
c001140b:	75 53                	jne    c0011460 <VgaText::receiveKey(unsigned char)+0xd4>
c001140d:	83 ec 0c             	sub    esp,0xc
c0011410:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0011416:	53                   	push   ebx
c0011417:	e8 78 f3 fe ff       	call   c0000794 <strlen>
c001141c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001141f:	89 c5                	mov    ebp,eax
c0011421:	e8 6e f3 fe ff       	call   c0000794 <strlen>
c0011426:	83 c4 10             	add    esp,0x10
c0011429:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c001142d:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011432:	76 10                	jbe    c0011444 <VgaText::receiveKey(unsigned char)+0xb8>
c0011434:	83 ec 0c             	sub    esp,0xc
c0011437:	68 b3 a4 02 c0       	push   0xc002a4b3
c001143c:	e8 2e 92 00 00       	call   c001a66f <Krnl::panic(char const*)>
c0011441:	83 c4 10             	add    esp,0x10
c0011444:	50                   	push   eax
c0011445:	50                   	push   eax
c0011446:	57                   	push   edi
c0011447:	53                   	push   ebx
c0011448:	e8 27 f5 fe ff       	call   c0000974 <strcat>
c001144d:	83 c4 0c             	add    esp,0xc
c0011450:	68 96 00 00 00       	push   0x96
c0011455:	6a 00                	push   0x0
c0011457:	57                   	push   edi
c0011458:	e8 1b f3 fe ff       	call   c0000778 <memset>
c001145d:	83 c4 10             	add    esp,0x10
c0011460:	83 ec 0c             	sub    esp,0xc
c0011463:	56                   	push   esi
c0011464:	e8 d5 f9 ff ff       	call   c0010e3e <VgaText::doUpdate()>
c0011469:	83 c4 10             	add    esp,0x10
c001146c:	83 c4 1c             	add    esp,0x1c
c001146f:	5b                   	pop    ebx
c0011470:	5e                   	pop    esi
c0011471:	5f                   	pop    edi
c0011472:	5d                   	pop    ebp
c0011473:	c3                   	ret    

c0011474 <VgaText::write(unsigned long long, void*, int*)>:
c0011474:	55                   	push   ebp
c0011475:	57                   	push   edi
c0011476:	56                   	push   esi
c0011477:	53                   	push   ebx
c0011478:	83 ec 0c             	sub    esp,0xc
c001147b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001147f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011483:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011487:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c001148e:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011491:	39 eb                	cmp    ebx,ebp
c0011493:	74 13                	je     c00114a8 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011495:	43                   	inc    ebx
c0011496:	50                   	push   eax
c0011497:	50                   	push   eax
c0011498:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001149c:	50                   	push   eax
c001149d:	56                   	push   esi
c001149e:	e8 d1 fb ff ff       	call   c0011074 <VgaText::putchar(char)>
c00114a3:	83 c4 10             	add    esp,0x10
c00114a6:	eb e9                	jmp    c0011491 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00114a8:	83 ec 0c             	sub    esp,0xc
c00114ab:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c00114b2:	56                   	push   esi
c00114b3:	e8 86 f9 ff ff       	call   c0010e3e <VgaText::doUpdate()>
c00114b8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00114bc:	89 38                	mov    DWORD PTR [eax],edi
c00114be:	83 c4 1c             	add    esp,0x1c
c00114c1:	31 c0                	xor    eax,eax
c00114c3:	5b                   	pop    ebx
c00114c4:	5e                   	pop    esi
c00114c5:	5f                   	pop    edi
c00114c6:	5d                   	pop    ebp
c00114c7:	c3                   	ret    

c00114c8 <newTerminal(char*)>:
c00114c8:	83 ec 28             	sub    esp,0x28
c00114cb:	68 60 12 00 00       	push   0x1260
c00114d0:	e8 6b e3 ff ff       	call   c000f840 <malloc>
c00114d5:	5a                   	pop    edx
c00114d6:	59                   	pop    ecx
c00114d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00114db:	50                   	push   eax
c00114dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114e0:	e8 15 fd ff ff       	call   c00111fa <VgaText::VgaText(char const*)>
c00114e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114e9:	83 c4 2c             	add    esp,0x2c
c00114ec:	c3                   	ret    
c00114ed:	90                   	nop

c00114ee <TSS::TSS()>:
c00114ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114f2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114f9:	90                   	nop
c00114fa:	c3                   	ret    
c00114fb:	90                   	nop

c00114fc <TSS::setESP(unsigned long)>:
c00114fc:	55                   	push   ebp
c00114fd:	89 e5                	mov    ebp,esp
c00114ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011502:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011505:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011508:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001150b:	90                   	nop
c001150c:	5d                   	pop    ebp
c001150d:	c3                   	ret    

c001150e <TSS::flush()>:
c001150e:	55                   	push   ebp
c001150f:	89 e5                	mov    ebp,esp
c0011511:	83 ec 10             	sub    esp,0x10
c0011514:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011517:	8b 00                	mov    eax,DWORD PTR [eax]
c0011519:	83 c8 03             	or     eax,0x3
c001151c:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011520:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011524:	66 89 d0             	mov    ax,dx
c0011527:	0f 00 d8             	ltr    ax
c001152a:	90                   	nop
c001152b:	c9                   	leave  
c001152c:	c3                   	ret    
c001152d:	90                   	nop

c001152e <TSS::setup(unsigned long, unsigned long)>:
c001152e:	55                   	push   ebp
c001152f:	89 e5                	mov    ebp,esp
c0011531:	83 ec 18             	sub    esp,0x18
c0011534:	83 ec 0c             	sub    esp,0xc
c0011537:	6a 68                	push   0x68
c0011539:	e8 02 e3 ff ff       	call   c000f840 <malloc>
c001153e:	83 c4 10             	add    esp,0x10
c0011541:	89 c2                	mov    edx,eax
c0011543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011546:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001154c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154f:	83 ec 04             	sub    esp,0x4
c0011552:	6a 68                	push   0x68
c0011554:	6a 00                	push   0x0
c0011556:	50                   	push   eax
c0011557:	e8 1c f2 fe ff       	call   c0000778 <memset>
c001155c:	83 c4 10             	add    esp,0x10
c001155f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011562:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011565:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001156b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011571:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011577:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001157a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001157d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011580:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011586:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011589:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001158f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011592:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011595:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001159b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001159e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115a1:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00115a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ad:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00115b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b9:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00115bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c5:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00115cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00115d4:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00115d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115dd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115e0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115e9:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115f6:	0f 20 da             	mov    edx,cr3
c00115f9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115fc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115ff:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011602:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011605:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011608:	83 ec 08             	sub    esp,0x8
c001160b:	50                   	push   eax
c001160c:	8d 45 ec             	lea    eax,[ebp-0x14]
c001160f:	50                   	push   eax
c0011610:	e8 09 da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c0011615:	83 c4 10             	add    esp,0x10
c0011618:	83 ec 08             	sub    esp,0x8
c001161b:	6a 68                	push   0x68
c001161d:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011620:	50                   	push   eax
c0011621:	e8 14 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c0011626:	83 c4 10             	add    esp,0x10
c0011629:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001162d:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011630:	83 e0 0f             	and    eax,0xf
c0011633:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011636:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011639:	83 c8 40             	or     eax,0x40
c001163c:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001163f:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0011644:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001164a:	05 78 01 00 00       	add    eax,0x178
c001164f:	83 ec 04             	sub    esp,0x4
c0011652:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011655:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011658:	50                   	push   eax
c0011659:	e8 10 da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c001165e:	83 c4 10             	add    esp,0x10
c0011661:	89 c2                	mov    edx,eax
c0011663:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011666:	89 10                	mov    DWORD PTR [eax],edx
c0011668:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001166d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011673:	05 78 01 00 00       	add    eax,0x178
c0011678:	83 ec 0c             	sub    esp,0xc
c001167b:	50                   	push   eax
c001167c:	e8 31 da ff ff       	call   c000f0b2 <GDT::flush()>
c0011681:	83 c4 10             	add    esp,0x10
c0011684:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011687:	8b 00                	mov    eax,DWORD PTR [eax]
c0011689:	83 ec 08             	sub    esp,0x8
c001168c:	50                   	push   eax
c001168d:	68 1c a5 02 c0       	push   0xc002a51c
c0011692:	e8 36 19 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0011697:	83 c4 10             	add    esp,0x10
c001169a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001169d:	8b 00                	mov    eax,DWORD PTR [eax]
c001169f:	c9                   	leave  
c00116a0:	c3                   	ret    
c00116a1:	90                   	nop

c00116a2 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00116a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116ad:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116b2:	75 08                	jne    c00116bc <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00116b4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116ba:	eb 38                	jmp    c00116f4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00116bc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116c1:	75 17                	jne    c00116da <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00116c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116cb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116d1:	8b 10                	mov    edx,DWORD PTR [eax]
c00116d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116d7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00116da:	89 c1                	mov    ecx,eax
c00116dc:	83 e1 fd             	and    ecx,0xfffffffd
c00116df:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116e5:	74 cd                	je     c00116b4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116e7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116ec:	83 e0 ef             	and    eax,0xffffffef
c00116ef:	83 f8 08             	cmp    eax,0x8
c00116f2:	76 c0                	jbe    c00116b4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116f4:	31 c0                	xor    eax,eax
c00116f6:	c3                   	ret    
c00116f7:	90                   	nop

c00116f8 <ReservedFilename::isAtty()>:
c00116f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116fc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116ff:	31 c0                	xor    eax,eax
c0011701:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011707:	74 09                	je     c0011712 <ReservedFilename::isAtty()+0x1a>
c0011709:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001170f:	0f 94 c0             	sete   al
c0011712:	c3                   	ret    
c0011713:	90                   	nop

c0011714 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011714:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011718:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001171c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001171f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011723:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011728:	75 08                	jne    c0011732 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001172a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011730:	eb 3d                	jmp    c001176f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011732:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011737:	75 17                	jne    c0011750 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011739:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001173e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011741:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011747:	8b 10                	mov    edx,DWORD PTR [eax]
c0011749:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001174d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011750:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011755:	75 04                	jne    c001175b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011757:	89 0a                	mov    DWORD PTR [edx],ecx
c0011759:	eb 14                	jmp    c001176f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001175b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011760:	74 c8                	je     c001172a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011762:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011767:	83 e0 ef             	and    eax,0xffffffef
c001176a:	83 f8 08             	cmp    eax,0x8
c001176d:	76 bb                	jbe    c001172a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001176f:	31 c0                	xor    eax,eax
c0011771:	c3                   	ret    

c0011772 <UnixFile::getFileDescriptor()>:
c0011772:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011776:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011779:	c3                   	ret    

c001177a <UnixFile::UnixFile(int)>:
c001177a:	53                   	push   ebx
c001177b:	83 ec 28             	sub    esp,0x28
c001177e:	ba 08 a6 02 c0       	mov    edx,0xc002a608
c0011783:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011787:	89 10                	mov    DWORD PTR [eax],edx
c0011789:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011791:	0f 8f 8c 01 00 00    	jg     c0011923 <UnixFile::UnixFile(int)+0x1a9>
c0011797:	a1 e0 d5 02 c0       	mov    eax,ds:0xc002d5e0
c001179c:	8d 50 01             	lea    edx,[eax+0x1]
c001179f:	89 15 e0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e0,edx
c00117a5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00117a9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00117ac:	83 ec 08             	sub    esp,0x8
c00117af:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00117b3:	68 b8 e7 02 c0       	push   0xc002e7b8
c00117b8:	e8 23 70 01 00       	call   c00287e0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00117bd:	83 c4 10             	add    esp,0x10
c00117c0:	a0 b4 e7 02 c0       	mov    al,ds:0xc002e7b4
c00117c5:	83 f0 01             	xor    eax,0x1
c00117c8:	84 c0                	test   al,al
c00117ca:	0f 84 54 01 00 00    	je     c0011924 <UnixFile::UnixFile(int)+0x1aa>
c00117d0:	c6 05 b4 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e7b4,0x1
c00117d7:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00117df:	83 ec 0c             	sub    esp,0xc
c00117e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117e6:	e8 55 e0 ff ff       	call   c000f840 <malloc>
c00117eb:	83 c4 10             	add    esp,0x10
c00117ee:	89 c3                	mov    ebx,eax
c00117f0:	83 ec 08             	sub    esp,0x8
c00117f3:	68 03 ff ff 0f       	push   0xfffff03
c00117f8:	53                   	push   ebx
c00117f9:	e8 2c 01 00 00       	call   c001192a <ReservedFilename::ReservedFilename(int)>
c00117fe:	83 c4 10             	add    esp,0x10
c0011801:	89 1d ac e7 02 c0    	mov    DWORD PTR ds:0xc002e7ac,ebx
c0011807:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001180f:	83 ec 0c             	sub    esp,0xc
c0011812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011816:	e8 25 e0 ff ff       	call   c000f840 <malloc>
c001181b:	83 c4 10             	add    esp,0x10
c001181e:	89 c3                	mov    ebx,eax
c0011820:	83 ec 08             	sub    esp,0x8
c0011823:	68 01 ff ff 0f       	push   0xfffff01
c0011828:	53                   	push   ebx
c0011829:	e8 fc 00 00 00       	call   c001192a <ReservedFilename::ReservedFilename(int)>
c001182e:	83 c4 10             	add    esp,0x10
c0011831:	89 1d b0 e7 02 c0    	mov    DWORD PTR ds:0xc002e7b0,ebx
c0011837:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001183f:	83 ec 0c             	sub    esp,0xc
c0011842:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011846:	e8 f5 df ff ff       	call   c000f840 <malloc>
c001184b:	83 c4 10             	add    esp,0x10
c001184e:	89 c3                	mov    ebx,eax
c0011850:	83 ec 08             	sub    esp,0x8
c0011853:	68 00 ff ff 0f       	push   0xfffff00
c0011858:	53                   	push   ebx
c0011859:	e8 cc 00 00 00       	call   c001192a <ReservedFilename::ReservedFilename(int)>
c001185e:	83 c4 10             	add    esp,0x10
c0011861:	89 1d a4 e7 02 c0    	mov    DWORD PTR ds:0xc002e7a4,ebx
c0011867:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001186f:	83 ec 0c             	sub    esp,0xc
c0011872:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011876:	e8 c5 df ff ff       	call   c000f840 <malloc>
c001187b:	83 c4 10             	add    esp,0x10
c001187e:	89 c3                	mov    ebx,eax
c0011880:	83 ec 08             	sub    esp,0x8
c0011883:	68 02 ff ff 0f       	push   0xfffff02
c0011888:	53                   	push   ebx
c0011889:	e8 9c 00 00 00       	call   c001192a <ReservedFilename::ReservedFilename(int)>
c001188e:	83 c4 10             	add    esp,0x10
c0011891:	89 1d a8 e7 02 c0    	mov    DWORD PTR ds:0xc002e7a8,ebx
c0011897:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001189f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00118a4:	7f 7e                	jg     c0011924 <UnixFile::UnixFile(int)+0x1aa>
c00118a6:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00118ae:	83 ec 0c             	sub    esp,0xc
c00118b1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00118b5:	e8 86 df ff ff       	call   c000f840 <malloc>
c00118ba:	83 c4 10             	add    esp,0x10
c00118bd:	89 c3                	mov    ebx,eax
c00118bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118c3:	05 10 ff ff 0f       	add    eax,0xfffff10
c00118c8:	83 ec 08             	sub    esp,0x8
c00118cb:	50                   	push   eax
c00118cc:	53                   	push   ebx
c00118cd:	e8 58 00 00 00       	call   c001192a <ReservedFilename::ReservedFilename(int)>
c00118d2:	83 c4 10             	add    esp,0x10
c00118d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118d9:	89 1c 85 80 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1880],ebx
c00118e0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118e8:	83 ec 0c             	sub    esp,0xc
c00118eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118ef:	e8 4c df ff ff       	call   c000f840 <malloc>
c00118f4:	83 c4 10             	add    esp,0x10
c00118f7:	89 c3                	mov    ebx,eax
c00118f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118fd:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011902:	83 ec 08             	sub    esp,0x8
c0011905:	50                   	push   eax
c0011906:	53                   	push   ebx
c0011907:	e8 1e 00 00 00       	call   c001192a <ReservedFilename::ReservedFilename(int)>
c001190c:	83 c4 10             	add    esp,0x10
c001190f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011913:	89 1c 85 40 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd18c0],ebx
c001191a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001191e:	e9 7c ff ff ff       	jmp    c001189f <UnixFile::UnixFile(int)+0x125>
c0011923:	90                   	nop
c0011924:	83 c4 28             	add    esp,0x28
c0011927:	5b                   	pop    ebx
c0011928:	c3                   	ret    
c0011929:	90                   	nop

c001192a <ReservedFilename::ReservedFilename(int)>:
c001192a:	83 ec 0c             	sub    esp,0xc
c001192d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011931:	83 ec 08             	sub    esp,0x8
c0011934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011938:	50                   	push   eax
c0011939:	e8 3c fe ff ff       	call   c001177a <UnixFile::UnixFile(int)>
c001193e:	83 c4 10             	add    esp,0x10
c0011941:	ba 24 a6 02 c0       	mov    edx,0xc002a624
c0011946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001194a:	89 10                	mov    DWORD PTR [eax],edx
c001194c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011950:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011954:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011957:	90                   	nop
c0011958:	83 c4 0c             	add    esp,0xc
c001195b:	c3                   	ret    

c001195c <UnixFile::~UnixFile()>:
c001195c:	83 ec 1c             	sub    esp,0x1c
c001195f:	ba 08 a6 02 c0       	mov    edx,0xc002a608
c0011964:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011968:	89 10                	mov    DWORD PTR [eax],edx
c001196a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001196e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011971:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011976:	7f 73                	jg     c00119eb <UnixFile::~UnixFile()+0x8f>
c0011978:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011980:	83 ec 0c             	sub    esp,0xc
c0011983:	68 b8 e7 02 c0       	push   0xc002e7b8
c0011988:	e8 27 6f 01 00       	call   c00288b4 <LinkedList<UnixFile>::getFirstElement()>
c001198d:	83 c4 10             	add    esp,0x10
c0011990:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011994:	83 ec 0c             	sub    esp,0xc
c0011997:	68 b8 e7 02 c0       	push   0xc002e7b8
c001199c:	e8 1b 6f 01 00       	call   c00288bc <LinkedList<UnixFile>::removeFirst()>
c00119a1:	83 c4 10             	add    esp,0x10
c00119a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00119a8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00119ac:	74 40                	je     c00119ee <UnixFile::~UnixFile()+0x92>
c00119ae:	83 ec 08             	sub    esp,0x8
c00119b1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00119b5:	68 b8 e7 02 c0       	push   0xc002e7b8
c00119ba:	e8 21 6e 01 00       	call   c00287e0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00119bf:	83 c4 10             	add    esp,0x10
c00119c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119c6:	8d 50 01             	lea    edx,[eax+0x1]
c00119c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119cd:	3d 88 13 00 00       	cmp    eax,0x1388
c00119d2:	0f 94 c0             	sete   al
c00119d5:	84 c0                	test   al,al
c00119d7:	74 a7                	je     c0011980 <UnixFile::~UnixFile()+0x24>
c00119d9:	83 ec 0c             	sub    esp,0xc
c00119dc:	68 e0 a5 02 c0       	push   0xc002a5e0
c00119e1:	e8 89 8c 00 00       	call   c001a66f <Krnl::panic(char const*)>
c00119e6:	83 c4 10             	add    esp,0x10
c00119e9:	eb 95                	jmp    c0011980 <UnixFile::~UnixFile()+0x24>
c00119eb:	90                   	nop
c00119ec:	eb 01                	jmp    c00119ef <UnixFile::~UnixFile()+0x93>
c00119ee:	90                   	nop
c00119ef:	90                   	nop
c00119f0:	83 c4 1c             	add    esp,0x1c
c00119f3:	c3                   	ret    

c00119f4 <UnixFile::~UnixFile()>:
c00119f4:	83 ec 0c             	sub    esp,0xc
c00119f7:	83 ec 0c             	sub    esp,0xc
c00119fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119fe:	e8 59 ff ff ff       	call   c001195c <UnixFile::~UnixFile()>
c0011a03:	83 c4 10             	add    esp,0x10
c0011a06:	83 ec 08             	sub    esp,0x8
c0011a09:	6a 0c                	push   0xc
c0011a0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a0f:	e8 d9 14 00 00       	call   c0012eed <operator delete(void*, unsigned long)>
c0011a14:	83 c4 10             	add    esp,0x10
c0011a17:	83 c4 0c             	add    esp,0xc
c0011a1a:	c3                   	ret    
c0011a1b:	90                   	nop

c0011a1c <ReservedFilename::~ReservedFilename()>:
c0011a1c:	83 ec 0c             	sub    esp,0xc
c0011a1f:	ba 24 a6 02 c0       	mov    edx,0xc002a624
c0011a24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a28:	89 10                	mov    DWORD PTR [eax],edx
c0011a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a2e:	83 ec 0c             	sub    esp,0xc
c0011a31:	50                   	push   eax
c0011a32:	e8 25 ff ff ff       	call   c001195c <UnixFile::~UnixFile()>
c0011a37:	83 c4 10             	add    esp,0x10
c0011a3a:	90                   	nop
c0011a3b:	83 c4 0c             	add    esp,0xc
c0011a3e:	c3                   	ret    
c0011a3f:	90                   	nop

c0011a40 <ReservedFilename::~ReservedFilename()>:
c0011a40:	83 ec 0c             	sub    esp,0xc
c0011a43:	83 ec 0c             	sub    esp,0xc
c0011a46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a4a:	e8 cd ff ff ff       	call   c0011a1c <ReservedFilename::~ReservedFilename()>
c0011a4f:	83 c4 10             	add    esp,0x10
c0011a52:	83 ec 08             	sub    esp,0x8
c0011a55:	6a 0c                	push   0xc
c0011a57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a5b:	e8 8d 14 00 00       	call   c0012eed <operator delete(void*, unsigned long)>
c0011a60:	83 c4 10             	add    esp,0x10
c0011a63:	83 c4 0c             	add    esp,0xc
c0011a66:	c3                   	ret    

c0011a67 <getFromFileDescriptor(int)>:
c0011a67:	53                   	push   ebx
c0011a68:	83 ec 08             	sub    esp,0x8
c0011a6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a6f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a75:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a7b:	7f 2c                	jg     c0011aa9 <getFromFileDescriptor(int)+0x42>
c0011a7d:	83 ec 0c             	sub    esp,0xc
c0011a80:	68 b8 e7 02 c0       	push   0xc002e7b8
c0011a85:	e8 2a 6e 01 00       	call   c00288b4 <LinkedList<UnixFile>::getFirstElement()>
c0011a8a:	83 c4 10             	add    esp,0x10
c0011a8d:	85 c0                	test   eax,eax
c0011a8f:	75 04                	jne    c0011a95 <getFromFileDescriptor(int)+0x2e>
c0011a91:	31 c0                	xor    eax,eax
c0011a93:	eb 6e                	jmp    c0011b03 <getFromFileDescriptor(int)+0x9c>
c0011a95:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a98:	74 69                	je     c0011b03 <getFromFileDescriptor(int)+0x9c>
c0011a9a:	52                   	push   edx
c0011a9b:	52                   	push   edx
c0011a9c:	50                   	push   eax
c0011a9d:	68 b8 e7 02 c0       	push   0xc002e7b8
c0011aa2:	e8 b7 6e 01 00       	call   c002895e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011aa7:	eb e1                	jmp    c0011a8a <getFromFileDescriptor(int)+0x23>
c0011aa9:	a1 ac e7 02 c0       	mov    eax,ds:0xc002e7ac
c0011aae:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011ab4:	74 4d                	je     c0011b03 <getFromFileDescriptor(int)+0x9c>
c0011ab6:	a1 b0 e7 02 c0       	mov    eax,ds:0xc002e7b0
c0011abb:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011ac1:	74 40                	je     c0011b03 <getFromFileDescriptor(int)+0x9c>
c0011ac3:	a1 a8 e7 02 c0       	mov    eax,ds:0xc002e7a8
c0011ac8:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011ace:	74 33                	je     c0011b03 <getFromFileDescriptor(int)+0x9c>
c0011ad0:	a1 a4 e7 02 c0       	mov    eax,ds:0xc002e7a4
c0011ad5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011adb:	74 26                	je     c0011b03 <getFromFileDescriptor(int)+0x9c>
c0011add:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011ae3:	83 f8 08             	cmp    eax,0x8
c0011ae6:	77 09                	ja     c0011af1 <getFromFileDescriptor(int)+0x8a>
c0011ae8:	8b 04 85 80 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1880]
c0011aef:	eb 12                	jmp    c0011b03 <getFromFileDescriptor(int)+0x9c>
c0011af1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011af7:	83 fb 08             	cmp    ebx,0x8
c0011afa:	77 95                	ja     c0011a91 <getFromFileDescriptor(int)+0x2a>
c0011afc:	8b 04 9d 40 e7 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd18c0]
c0011b03:	83 c4 08             	add    esp,0x8
c0011b06:	5b                   	pop    ebx
c0011b07:	c3                   	ret    

c0011b08 <__static_initialization_and_destruction_0(int, int)>:
c0011b08:	83 ec 0c             	sub    esp,0xc
c0011b0b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011b10:	75 34                	jne    c0011b46 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011b12:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011b1a:	75 2a                	jne    c0011b46 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011b1c:	83 ec 0c             	sub    esp,0xc
c0011b1f:	68 b8 e7 02 c0       	push   0xc002e7b8
c0011b24:	e8 5f 6c 01 00       	call   c0028788 <LinkedList<UnixFile>::LinkedList()>
c0011b29:	83 c4 10             	add    esp,0x10
c0011b2c:	83 ec 04             	sub    esp,0x4
c0011b2f:	68 70 d5 02 c0       	push   0xc002d570
c0011b34:	68 b8 e7 02 c0       	push   0xc002e7b8
c0011b39:	68 86 87 02 c0       	push   0xc0028786
c0011b3e:	e8 24 13 00 00       	call   c0012e67 <__cxa_atexit>
c0011b43:	83 c4 10             	add    esp,0x10
c0011b46:	90                   	nop
c0011b47:	83 c4 0c             	add    esp,0xc
c0011b4a:	c3                   	ret    

c0011b4b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b4b:	83 ec 0c             	sub    esp,0xc
c0011b4e:	83 ec 08             	sub    esp,0x8
c0011b51:	68 ff ff 00 00       	push   0xffff
c0011b56:	6a 01                	push   0x1
c0011b58:	e8 ab ff ff ff       	call   c0011b08 <__static_initialization_and_destruction_0(int, int)>
c0011b5d:	83 c4 10             	add    esp,0x10
c0011b60:	83 c4 0c             	add    esp,0xc
c0011b63:	c3                   	ret    

c0011b64 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b64:	53                   	push   ebx
c0011b65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b69:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b6d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b73:	89 c8                	mov    eax,ecx
c0011b75:	d1 e8                	shr    eax,1
c0011b77:	03 05 e8 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d5e8
c0011b7d:	83 e1 01             	and    ecx,0x1
c0011b80:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b82:	75 09                	jne    c0011b8d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b84:	83 e2 f0             	and    edx,0xfffffff0
c0011b87:	09 da                	or     edx,ebx
c0011b89:	88 10                	mov    BYTE PTR [eax],dl
c0011b8b:	5b                   	pop    ebx
c0011b8c:	c3                   	ret    
c0011b8d:	c1 e3 04             	shl    ebx,0x4
c0011b90:	83 e2 0f             	and    edx,0xf
c0011b93:	09 da                	or     edx,ebx
c0011b95:	88 10                	mov    BYTE PTR [eax],dl
c0011b97:	5b                   	pop    ebx
c0011b98:	c3                   	ret    

c0011b99 <Virt::getPageState(unsigned long)>:
c0011b99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b9d:	8b 0d e8 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5e8
c0011ba3:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011ba9:	89 d0                	mov    eax,edx
c0011bab:	d1 e8                	shr    eax,1
c0011bad:	83 e2 01             	and    edx,0x1
c0011bb0:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011bb3:	75 04                	jne    c0011bb9 <Virt::getPageState(unsigned long)+0x20>
c0011bb5:	83 e0 0f             	and    eax,0xf
c0011bb8:	c3                   	ret    
c0011bb9:	c0 e8 04             	shr    al,0x4
c0011bbc:	c3                   	ret    

c0011bbd <Virt::allocateKernelVirtualPages(int)>:
c0011bbd:	55                   	push   ebp
c0011bbe:	31 ed                	xor    ebp,ebp
c0011bc0:	57                   	push   edi
c0011bc1:	56                   	push   esi
c0011bc2:	53                   	push   ebx
c0011bc3:	31 db                	xor    ebx,ebx
c0011bc5:	83 ec 1c             	sub    esp,0x1c
c0011bc8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011bcc:	8b 3d e4 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d5e4
c0011bd2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011bd7:	57                   	push   edi
c0011bd8:	e8 bc ff ff ff       	call   c0011b99 <Virt::getPageState(unsigned long)>
c0011bdd:	5a                   	pop    edx
c0011bde:	84 c0                	test   al,al
c0011be0:	75 3a                	jne    c0011c1c <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011be2:	85 db                	test   ebx,ebx
c0011be4:	75 02                	jne    c0011be8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011be6:	89 fd                	mov    ebp,edi
c0011be8:	43                   	inc    ebx
c0011be9:	39 f3                	cmp    ebx,esi
c0011beb:	74 5a                	je     c0011c47 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011bed:	47                   	inc    edi
c0011bee:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bf4:	76 31                	jbe    c0011c27 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bf6:	c7 05 e4 d5 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d5e4,0xc8000
c0011c00:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011c05:	75 28                	jne    c0011c2f <Virt::allocateKernelVirtualPages(int)+0x72>
c0011c07:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011c0c:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011c11:	57                   	push   edi
c0011c12:	e8 82 ff ff ff       	call   c0011b99 <Virt::getPageState(unsigned long)>
c0011c17:	5a                   	pop    edx
c0011c18:	84 c0                	test   al,al
c0011c1a:	74 c6                	je     c0011be2 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011c1c:	31 db                	xor    ebx,ebx
c0011c1e:	47                   	inc    edi
c0011c1f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011c25:	77 cf                	ja     c0011bf6 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011c27:	89 3d e4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e4,edi
c0011c2d:	eb a8                	jmp    c0011bd7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c2f:	83 ec 0c             	sub    esp,0xc
c0011c32:	68 38 a6 02 c0       	push   0xc002a638
c0011c37:	e8 33 8a 00 00       	call   c001a66f <Krnl::panic(char const*)>
c0011c3c:	8b 3d e4 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d5e4
c0011c42:	83 c4 10             	add    esp,0x10
c0011c45:	eb 90                	jmp    c0011bd7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c47:	89 2d e4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e4,ebp
c0011c4d:	4b                   	dec    ebx
c0011c4e:	74 5f                	je     c0011caf <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c50:	85 f6                	test   esi,esi
c0011c52:	74 3d                	je     c0011c91 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c54:	89 e8                	mov    eax,ebp
c0011c56:	31 db                	xor    ebx,ebx
c0011c58:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c5b:	eb 14                	jmp    c0011c71 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c5d:	6a 01                	push   0x1
c0011c5f:	43                   	inc    ebx
c0011c60:	50                   	push   eax
c0011c61:	e8 fe fe ff ff       	call   c0011b64 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c66:	58                   	pop    eax
c0011c67:	39 f3                	cmp    ebx,esi
c0011c69:	5a                   	pop    edx
c0011c6a:	74 25                	je     c0011c91 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c6c:	a1 e4 d5 02 c0       	mov    eax,ds:0xc002d5e4
c0011c71:	8d 50 01             	lea    edx,[eax+0x1]
c0011c74:	85 db                	test   ebx,ebx
c0011c76:	89 15 e4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e4,edx
c0011c7c:	74 20                	je     c0011c9e <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c7e:	39 df                	cmp    edi,ebx
c0011c80:	75 db                	jne    c0011c5d <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c82:	6a 03                	push   0x3
c0011c84:	43                   	inc    ebx
c0011c85:	50                   	push   eax
c0011c86:	e8 d9 fe ff ff       	call   c0011b64 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c8b:	59                   	pop    ecx
c0011c8c:	39 f3                	cmp    ebx,esi
c0011c8e:	58                   	pop    eax
c0011c8f:	75 db                	jne    c0011c6c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c91:	83 c4 1c             	add    esp,0x1c
c0011c94:	89 e8                	mov    eax,ebp
c0011c96:	5b                   	pop    ebx
c0011c97:	c1 e0 0c             	shl    eax,0xc
c0011c9a:	5e                   	pop    esi
c0011c9b:	5f                   	pop    edi
c0011c9c:	5d                   	pop    ebp
c0011c9d:	c3                   	ret    
c0011c9e:	6a 02                	push   0x2
c0011ca0:	bb 01 00 00 00       	mov    ebx,0x1
c0011ca5:	50                   	push   eax
c0011ca6:	e8 b9 fe ff ff       	call   c0011b64 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cab:	58                   	pop    eax
c0011cac:	5a                   	pop    edx
c0011cad:	eb bd                	jmp    c0011c6c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011caf:	6a 04                	push   0x4
c0011cb1:	8d 45 01             	lea    eax,[ebp+0x1]
c0011cb4:	55                   	push   ebp
c0011cb5:	a3 e4 d5 02 c0       	mov    ds:0xc002d5e4,eax
c0011cba:	e8 a5 fe ff ff       	call   c0011b64 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cbf:	59                   	pop    ecx
c0011cc0:	89 e8                	mov    eax,ebp
c0011cc2:	5b                   	pop    ebx
c0011cc3:	c1 e0 0c             	shl    eax,0xc
c0011cc6:	83 c4 1c             	add    esp,0x1c
c0011cc9:	5b                   	pop    ebx
c0011cca:	5e                   	pop    esi
c0011ccb:	5f                   	pop    edi
c0011ccc:	5d                   	pop    ebp
c0011ccd:	c3                   	ret    

c0011cce <Virt::freeSwapfilePage(unsigned long)>:
c0011cce:	53                   	push   ebx
c0011ccf:	8b 15 c4 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e7c4
c0011cd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011cd9:	b8 01 00 00 00       	mov    eax,0x1
c0011cde:	89 cb                	mov    ebx,ecx
c0011ce0:	d3 e0                	shl    eax,cl
c0011ce2:	c1 eb 05             	shr    ebx,0x5
c0011ce5:	f7 d0                	not    eax
c0011ce7:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011cea:	5b                   	pop    ebx
c0011ceb:	c3                   	ret    

c0011cec <Virt::swapIDToSector(unsigned long)>:
c0011cec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cf0:	0f af 05 ec d5 02 c0 	imul   eax,DWORD PTR ds:0xc002d5ec
c0011cf7:	03 05 f4 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d5f4
c0011cfd:	c3                   	ret    

c0011cfe <Virt::allocateSwapfilePage()>:
c0011cfe:	55                   	push   ebp
c0011cff:	31 d2                	xor    edx,edx
c0011d01:	57                   	push   edi
c0011d02:	56                   	push   esi
c0011d03:	53                   	push   ebx
c0011d04:	83 ec 0c             	sub    esp,0xc
c0011d07:	8b 0d ec d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5ec
c0011d0d:	a1 f0 d5 02 c0       	mov    eax,ds:0xc002d5f0
c0011d12:	f7 f1                	div    ecx
c0011d14:	39 0d f0 d5 02 c0    	cmp    DWORD PTR ds:0xc002d5f0,ecx
c0011d1a:	72 2d                	jb     c0011d49 <Virt::allocateSwapfilePage()+0x4b>
c0011d1c:	8b 35 c4 e7 02 c0    	mov    esi,DWORD PTR ds:0xc002e7c4
c0011d22:	8b 16                	mov    edx,DWORD PTR [esi]
c0011d24:	f6 c2 01             	test   dl,0x1
c0011d27:	74 3c                	je     c0011d65 <Virt::allocateSwapfilePage()+0x67>
c0011d29:	31 c9                	xor    ecx,ecx
c0011d2b:	bf 01 00 00 00       	mov    edi,0x1
c0011d30:	eb 12                	jmp    c0011d44 <Virt::allocateSwapfilePage()+0x46>
c0011d32:	89 fd                	mov    ebp,edi
c0011d34:	89 ca                	mov    edx,ecx
c0011d36:	d3 e5                	shl    ebp,cl
c0011d38:	c1 ea 05             	shr    edx,0x5
c0011d3b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011d3e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d40:	85 ea                	test   edx,ebp
c0011d42:	74 2a                	je     c0011d6e <Virt::allocateSwapfilePage()+0x70>
c0011d44:	41                   	inc    ecx
c0011d45:	39 c8                	cmp    eax,ecx
c0011d47:	77 e9                	ja     c0011d32 <Virt::allocateSwapfilePage()+0x34>
c0011d49:	83 ec 0c             	sub    esp,0xc
c0011d4c:	68 8a a8 02 c0       	push   0xc002a88a
c0011d51:	e8 19 89 00 00       	call   c001a66f <Krnl::panic(char const*)>
c0011d56:	83 c4 10             	add    esp,0x10
c0011d59:	31 c9                	xor    ecx,ecx
c0011d5b:	83 c4 0c             	add    esp,0xc
c0011d5e:	89 c8                	mov    eax,ecx
c0011d60:	5b                   	pop    ebx
c0011d61:	5e                   	pop    esi
c0011d62:	5f                   	pop    edi
c0011d63:	5d                   	pop    ebp
c0011d64:	c3                   	ret    
c0011d65:	89 f3                	mov    ebx,esi
c0011d67:	bd 01 00 00 00       	mov    ebp,0x1
c0011d6c:	31 c9                	xor    ecx,ecx
c0011d6e:	09 ea                	or     edx,ebp
c0011d70:	89 c8                	mov    eax,ecx
c0011d72:	89 13                	mov    DWORD PTR [ebx],edx
c0011d74:	83 c4 0c             	add    esp,0xc
c0011d77:	5b                   	pop    ebx
c0011d78:	5e                   	pop    esi
c0011d79:	5f                   	pop    edi
c0011d7a:	5d                   	pop    ebp
c0011d7b:	c3                   	ret    

c0011d7c <Virt::virtualMemorySetup()>:
c0011d7c:	53                   	push   ebx
c0011d7d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d82:	83 ec 08             	sub    esp,0x8
c0011d85:	6a 0f                	push   0xf
c0011d87:	53                   	push   ebx
c0011d88:	43                   	inc    ebx
c0011d89:	e8 d6 fd ff ff       	call   c0011b64 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d8e:	59                   	pop    ecx
c0011d8f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d95:	58                   	pop    eax
c0011d96:	75 ed                	jne    c0011d85 <Virt::virtualMemorySetup()+0x9>
c0011d98:	83 ec 08             	sub    esp,0x8
c0011d9b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011da0:	68 00 00 00 c8       	push   0xc8000000
c0011da5:	68 a1 a8 02 c0       	push   0xc002a8a1
c0011daa:	e8 1e 12 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0011daf:	58                   	pop    eax
c0011db0:	5a                   	pop    edx
c0011db1:	68 00 f0 ff ef       	push   0xeffff000
c0011db6:	68 b5 a8 02 c0       	push   0xc002a8b5
c0011dbb:	e8 0d 12 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0011dc0:	83 c4 10             	add    esp,0x10
c0011dc3:	83 ec 08             	sub    esp,0x8
c0011dc6:	6a 00                	push   0x0
c0011dc8:	53                   	push   ebx
c0011dc9:	43                   	inc    ebx
c0011dca:	e8 95 fd ff ff       	call   c0011b64 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011dcf:	83 c4 10             	add    esp,0x10
c0011dd2:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011dd8:	75 e9                	jne    c0011dc3 <Virt::virtualMemorySetup()+0x47>
c0011dda:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011ddf:	83 ec 08             	sub    esp,0x8
c0011de2:	6a 0f                	push   0xf
c0011de4:	53                   	push   ebx
c0011de5:	43                   	inc    ebx
c0011de6:	e8 79 fd ff ff       	call   c0011b64 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011deb:	83 c4 10             	add    esp,0x10
c0011dee:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011df4:	75 e9                	jne    c0011ddf <Virt::virtualMemorySetup()+0x63>
c0011df6:	83 c4 08             	add    esp,0x8
c0011df9:	5b                   	pop    ebx
c0011dfa:	c3                   	ret    

c0011dfb <Virt::swappingSetup()>:
c0011dfb:	83 ec 14             	sub    esp,0x14
c0011dfe:	31 d2                	xor    edx,edx
c0011e00:	a1 f0 d5 02 c0       	mov    eax,ds:0xc002d5f0
c0011e05:	f7 35 ec d5 02 c0    	div    DWORD PTR ds:0xc002d5ec
c0011e0b:	c1 e8 05             	shr    eax,0x5
c0011e0e:	50                   	push   eax
c0011e0f:	68 c9 a8 02 c0       	push   0xc002a8c9
c0011e14:	e8 b4 11 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0011e19:	a1 f0 d5 02 c0       	mov    eax,ds:0xc002d5f0
c0011e1e:	31 d2                	xor    edx,edx
c0011e20:	f7 35 ec d5 02 c0    	div    DWORD PTR ds:0xc002d5ec
c0011e26:	c1 e8 05             	shr    eax,0x5
c0011e29:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e2c:	e8 0f da ff ff       	call   c000f840 <malloc>
c0011e31:	83 c4 0c             	add    esp,0xc
c0011e34:	89 c1                	mov    ecx,eax
c0011e36:	a3 c4 e7 02 c0       	mov    ds:0xc002e7c4,eax
c0011e3b:	31 d2                	xor    edx,edx
c0011e3d:	a1 f0 d5 02 c0       	mov    eax,ds:0xc002d5f0
c0011e42:	f7 35 ec d5 02 c0    	div    DWORD PTR ds:0xc002d5ec
c0011e48:	c1 e8 05             	shr    eax,0x5
c0011e4b:	50                   	push   eax
c0011e4c:	6a 00                	push   0x0
c0011e4e:	51                   	push   ecx
c0011e4f:	e8 24 e9 fe ff       	call   c0000778 <memset>
c0011e54:	83 c4 1c             	add    esp,0x1c
c0011e57:	c3                   	ret    

c0011e58 <Virt::getAKernelVAS()>:
c0011e58:	a1 c8 e7 02 c0       	mov    eax,ds:0xc002e7c8
c0011e5d:	c3                   	ret    

c0011e5e <Virt::setupPageSwapping(int)>:
c0011e5e:	57                   	push   edi
c0011e5f:	56                   	push   esi
c0011e60:	53                   	push   ebx
c0011e61:	83 ec 1c             	sub    esp,0x1c
c0011e64:	68 14 01 00 00       	push   0x114
c0011e69:	e8 d2 d9 ff ff       	call   c000f840 <malloc>
c0011e6e:	83 c4 0c             	add    esp,0xc
c0011e71:	89 c6                	mov    esi,eax
c0011e73:	ff 35 b4 1b 03 c0    	push   DWORD PTR ds:0xc0031bb4
c0011e79:	68 e4 a8 02 c0       	push   0xc002a8e4
c0011e7e:	50                   	push   eax
c0011e7f:	e8 a2 16 00 00       	call   c0013526 <File::File(char const*, Process*)>
c0011e84:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e87:	e8 76 18 00 00       	call   c0013702 <File::unlink()>
c0011e8c:	58                   	pop    eax
c0011e8d:	5a                   	pop    edx
c0011e8e:	6a 12                	push   0x12
c0011e90:	56                   	push   esi
c0011e91:	e8 f4 16 00 00       	call   c001358a <File::open(FileOpenMode)>
c0011e96:	83 c4 10             	add    esp,0x10
c0011e99:	85 c0                	test   eax,eax
c0011e9b:	0f 85 ca 00 00 00    	jne    c0011f6b <Virt::setupPageSwapping(int)+0x10d>
c0011ea1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ead:	c1 e3 08             	shl    ebx,0x8
c0011eb0:	83 ec 0c             	sub    esp,0xc
c0011eb3:	68 00 00 01 00       	push   0x10000
c0011eb8:	e8 83 d9 ff ff       	call   c000f840 <malloc>
c0011ebd:	83 c4 0c             	add    esp,0xc
c0011ec0:	89 c7                	mov    edi,eax
c0011ec2:	68 00 00 01 00       	push   0x10000
c0011ec7:	6a 00                	push   0x0
c0011ec9:	50                   	push   eax
c0011eca:	e8 a9 e8 fe ff       	call   c0000778 <memset>
c0011ecf:	83 c4 10             	add    esp,0x10
c0011ed2:	85 db                	test   ebx,ebx
c0011ed4:	79 03                	jns    c0011ed9 <Virt::setupPageSwapping(int)+0x7b>
c0011ed6:	83 c3 0f             	add    ebx,0xf
c0011ed9:	c1 fb 04             	sar    ebx,0x4
c0011edc:	4b                   	dec    ebx
c0011edd:	83 fb ff             	cmp    ebx,0xffffffff
c0011ee0:	74 4b                	je     c0011f2d <Virt::setupPageSwapping(int)+0xcf>
c0011ee2:	83 ec 0c             	sub    esp,0xc
c0011ee5:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ee7:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011eeb:	52                   	push   edx
c0011eec:	57                   	push   edi
c0011eed:	6a 00                	push   0x0
c0011eef:	68 00 00 01 00       	push   0x10000
c0011ef4:	56                   	push   esi
c0011ef5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011ef8:	83 c4 20             	add    esp,0x20
c0011efb:	85 c0                	test   eax,eax
c0011efd:	75 59                	jne    c0011f58 <Virt::setupPageSwapping(int)+0xfa>
c0011eff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f03:	3d 00 00 01 00       	cmp    eax,0x10000
c0011f08:	74 d2                	je     c0011edc <Virt::setupPageSwapping(int)+0x7e>
c0011f0a:	83 ec 08             	sub    esp,0x8
c0011f0d:	4b                   	dec    ebx
c0011f0e:	50                   	push   eax
c0011f0f:	68 37 a9 02 c0       	push   0xc002a937
c0011f14:	e8 b4 10 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0011f19:	c7 04 24 40 a9 02 c0 	mov    DWORD PTR [esp],0xc002a940
c0011f20:	e8 4a 87 00 00       	call   c001a66f <Krnl::panic(char const*)>
c0011f25:	83 c4 10             	add    esp,0x10
c0011f28:	83 fb ff             	cmp    ebx,0xffffffff
c0011f2b:	75 b5                	jne    c0011ee2 <Virt::setupPageSwapping(int)+0x84>
c0011f2d:	83 ec 0c             	sub    esp,0xc
c0011f30:	56                   	push   esi
c0011f31:	e8 b2 16 00 00       	call   c00135e8 <File::close()>
c0011f36:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f39:	e8 22 d9 ff ff       	call   c000f860 <rfree>
c0011f3e:	83 c4 10             	add    esp,0x10
c0011f41:	85 f6                	test   esi,esi
c0011f43:	74 0c                	je     c0011f51 <Virt::setupPageSwapping(int)+0xf3>
c0011f45:	83 ec 0c             	sub    esp,0xc
c0011f48:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f4a:	56                   	push   esi
c0011f4b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f4e:	83 c4 10             	add    esp,0x10
c0011f51:	83 c4 10             	add    esp,0x10
c0011f54:	5b                   	pop    ebx
c0011f55:	5e                   	pop    esi
c0011f56:	5f                   	pop    edi
c0011f57:	c3                   	ret    
c0011f58:	83 ec 08             	sub    esp,0x8
c0011f5b:	50                   	push   eax
c0011f5c:	68 1f a9 02 c0       	push   0xc002a91f
c0011f61:	e8 67 10 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0011f66:	83 c4 10             	add    esp,0x10
c0011f69:	eb 94                	jmp    c0011eff <Virt::setupPageSwapping(int)+0xa1>
c0011f6b:	83 ec 08             	sub    esp,0x8
c0011f6e:	50                   	push   eax
c0011f6f:	68 fb a8 02 c0       	push   0xc002a8fb
c0011f74:	e8 54 10 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0011f79:	c7 04 24 04 a9 02 c0 	mov    DWORD PTR [esp],0xc002a904
c0011f80:	e8 ea 86 00 00       	call   c001a66f <Krnl::panic(char const*)>
c0011f85:	83 c4 10             	add    esp,0x10
c0011f88:	e9 14 ff ff ff       	jmp    c0011ea1 <Virt::setupPageSwapping(int)+0x43>
c0011f8d:	90                   	nop

c0011f8e <VAS::VAS()>:
c0011f8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f92:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f9d:	a3 c8 e7 02 c0       	mov    ds:0xc002e7c8,eax
c0011fa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fa6:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011faa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fae:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011fb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fb5:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011fbc:	90                   	nop
c0011fbd:	c3                   	ret    

c0011fbe <VAS::VAS(VAS*)>:
c0011fbe:	83 ec 0c             	sub    esp,0xc
c0011fc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fc5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fcc:	83 ec 0c             	sub    esp,0xc
c0011fcf:	68 58 a6 02 c0       	push   0xc002a658
c0011fd4:	e8 96 86 00 00       	call   c001a66f <Krnl::panic(char const*)>
c0011fd9:	83 c4 10             	add    esp,0x10
c0011fdc:	90                   	nop
c0011fdd:	83 c4 0c             	add    esp,0xc
c0011fe0:	c3                   	ret    
c0011fe1:	90                   	nop

c0011fe2 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fe2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fe6:	89 c2                	mov    edx,eax
c0011fe8:	c1 e8 0a             	shr    eax,0xa
c0011feb:	c1 ea 16             	shr    edx,0x16
c0011fee:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011ff3:	19 c9                	sbb    ecx,ecx
c0011ff5:	c1 e2 0c             	shl    edx,0xc
c0011ff8:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011ffe:	25 fc 0f 00 00       	and    eax,0xffc
c0012003:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c001200a:	01 d0                	add    eax,edx
c001200c:	c3                   	ret    
c001200d:	90                   	nop

c001200e <VAS::getPageTableEntry(unsigned long)>:
c001200e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012012:	89 ca                	mov    edx,ecx
c0012014:	c1 e9 0a             	shr    ecx,0xa
c0012017:	c1 ea 16             	shr    edx,0x16
c001201a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012020:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0012026:	c1 e0 0c             	shl    eax,0xc
c0012029:	8d 04 08             	lea    eax,[eax+ecx*1]
c001202c:	c3                   	ret    

c001202d <Virt::freeKernelVirtualPages(unsigned long)>:
c001202d:	57                   	push   edi
c001202e:	56                   	push   esi
c001202f:	be 01 00 00 00       	mov    esi,0x1
c0012034:	53                   	push   ebx
c0012035:	83 ec 10             	sub    esp,0x10
c0012038:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001203c:	c1 eb 0c             	shr    ebx,0xc
c001203f:	eb 3f                	jmp    c0012080 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0012041:	e8 12 fe ff ff       	call   c0011e58 <Virt::getAKernelVAS()>
c0012046:	83 ec 08             	sub    esp,0x8
c0012049:	57                   	push   edi
c001204a:	50                   	push   eax
c001204b:	e8 be ff ff ff       	call   c001200e <VAS::getPageTableEntry(unsigned long)>
c0012050:	83 c4 10             	add    esp,0x10
c0012053:	8b 00                	mov    eax,DWORD PTR [eax]
c0012055:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012059:	f6 c4 04             	test   ah,0x4
c001205c:	75 5f                	jne    c00120bd <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001205e:	80 fa 04             	cmp    dl,0x4
c0012061:	74 78                	je     c00120db <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0012063:	80 fa 02             	cmp    dl,0x2
c0012066:	0f 84 88 00 00 00    	je     c00120f4 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001206c:	80 fa 03             	cmp    dl,0x3
c001206f:	0f 84 ad 00 00 00    	je     c0012122 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0012075:	fe ca                	dec    dl
c0012077:	0f 84 92 00 00 00    	je     c001210f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001207d:	43                   	inc    ebx
c001207e:	31 f6                	xor    esi,esi
c0012080:	53                   	push   ebx
c0012081:	e8 13 fb ff ff       	call   c0011b99 <Virt::getPageState(unsigned long)>
c0012086:	5f                   	pop    edi
c0012087:	89 df                	mov    edi,ebx
c0012089:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001208d:	c1 e7 0c             	shl    edi,0xc
c0012090:	84 c0                	test   al,al
c0012092:	75 ad                	jne    c0012041 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012094:	83 ec 0c             	sub    esp,0xc
c0012097:	68 46 a9 02 c0       	push   0xc002a946
c001209c:	e8 ce 85 00 00       	call   c001a66f <Krnl::panic(char const*)>
c00120a1:	e8 b2 fd ff ff       	call   c0011e58 <Virt::getAKernelVAS()>
c00120a6:	5a                   	pop    edx
c00120a7:	59                   	pop    ecx
c00120a8:	57                   	push   edi
c00120a9:	50                   	push   eax
c00120aa:	e8 5f ff ff ff       	call   c001200e <VAS::getPageTableEntry(unsigned long)>
c00120af:	83 c4 10             	add    esp,0x10
c00120b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00120b4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120b8:	f6 c4 04             	test   ah,0x4
c00120bb:	74 c0                	je     c001207d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120bd:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00120c1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120c6:	83 ec 0c             	sub    esp,0xc
c00120c9:	50                   	push   eax
c00120ca:	e8 89 dd ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00120cf:	83 c4 10             	add    esp,0x10
c00120d2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120d6:	80 fa 04             	cmp    dl,0x4
c00120d9:	75 88                	jne    c0012063 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00120db:	89 f0                	mov    eax,esi
c00120dd:	84 c0                	test   al,al
c00120df:	75 47                	jne    c0012128 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120e1:	c7 44 24 20 7c a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a67c
c00120e9:	83 c4 10             	add    esp,0x10
c00120ec:	5b                   	pop    ebx
c00120ed:	5e                   	pop    esi
c00120ee:	5f                   	pop    edi
c00120ef:	e9 7b 85 00 00       	jmp    c001a66f <Krnl::panic(char const*)>
c00120f4:	89 f0                	mov    eax,esi
c00120f6:	84 c0                	test   al,al
c00120f8:	75 15                	jne    c001210f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120fa:	83 ec 0c             	sub    esp,0xc
c00120fd:	68 62 a9 02 c0       	push   0xc002a962
c0012102:	e8 68 85 00 00       	call   c001a66f <Krnl::panic(char const*)>
c0012107:	83 c4 10             	add    esp,0x10
c001210a:	e9 6e ff ff ff       	jmp    c001207d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001210f:	83 ec 08             	sub    esp,0x8
c0012112:	6a 00                	push   0x0
c0012114:	53                   	push   ebx
c0012115:	e8 4a fa ff ff       	call   c0011b64 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001211a:	83 c4 10             	add    esp,0x10
c001211d:	e9 5b ff ff ff       	jmp    c001207d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012122:	89 f0                	mov    eax,esi
c0012124:	84 c0                	test   al,al
c0012126:	75 15                	jne    c001213d <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0012128:	83 ec 08             	sub    esp,0x8
c001212b:	6a 00                	push   0x0
c001212d:	53                   	push   ebx
c001212e:	e8 31 fa ff ff       	call   c0011b64 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012133:	83 c4 10             	add    esp,0x10
c0012136:	83 c4 10             	add    esp,0x10
c0012139:	5b                   	pop    ebx
c001213a:	5e                   	pop    esi
c001213b:	5f                   	pop    edi
c001213c:	c3                   	ret    
c001213d:	c7 44 24 20 7e a9 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a97e
c0012145:	83 c4 10             	add    esp,0x10
c0012148:	5b                   	pop    ebx
c0012149:	5e                   	pop    esi
c001214a:	5f                   	pop    edi
c001214b:	e9 1f 85 00 00       	jmp    c001a66f <Krnl::panic(char const*)>

c0012150 <VAS::freeAllocatedPages(unsigned long)>:
c0012150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012154:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012158:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001215c:	74 09                	je     c0012167 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001215e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012162:	e9 c6 fe ff ff       	jmp    c001202d <Virt::freeKernelVirtualPages(unsigned long)>
c0012167:	c7 44 24 04 a0 a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a6a0
c001216f:	e9 59 0e 00 00       	jmp    c0012fcd <Dbg::kprintf(char const*, ...)>

c0012174 <VAS::virtualToPhysical(unsigned long)>:
c0012174:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012178:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001217c:	e8 8d fe ff ff       	call   c001200e <VAS::getPageTableEntry(unsigned long)>
c0012181:	5a                   	pop    edx
c0012182:	8b 00                	mov    eax,DWORD PTR [eax]
c0012184:	59                   	pop    ecx
c0012185:	25 00 f0 ff ff       	and    eax,0xfffff000
c001218a:	c3                   	ret    
c001218b:	90                   	nop

c001218c <VAS::reflagRange(unsigned long, int, int, int)>:
c001218c:	55                   	push   ebp
c001218d:	57                   	push   edi
c001218e:	56                   	push   esi
c001218f:	53                   	push   ebx
c0012190:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012194:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012198:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001219c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00121a0:	85 db                	test   ebx,ebx
c00121a2:	7e 22                	jle    c00121c6 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00121a4:	c1 e3 0c             	shl    ebx,0xc
c00121a7:	01 f3                	add    ebx,esi
c00121a9:	56                   	push   esi
c00121aa:	81 c6 00 10 00 00    	add    esi,0x1000
c00121b0:	55                   	push   ebp
c00121b1:	e8 58 fe ff ff       	call   c001200e <VAS::getPageTableEntry(unsigned long)>
c00121b6:	5a                   	pop    edx
c00121b7:	59                   	pop    ecx
c00121b8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00121ba:	21 f9                	and    ecx,edi
c00121bc:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00121c0:	39 f3                	cmp    ebx,esi
c00121c2:	89 08                	mov    DWORD PTR [eax],ecx
c00121c4:	75 e3                	jne    c00121a9 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00121c6:	5b                   	pop    ebx
c00121c7:	5e                   	pop    esi
c00121c8:	5f                   	pop    edi
c00121c9:	5d                   	pop    ebp
c00121ca:	c3                   	ret    
c00121cb:	90                   	nop

c00121cc <VAS::setToWriteCombining(unsigned long, int)>:
c00121cc:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c00121d1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121d7:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121de:	75 01                	jne    c00121e1 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121e0:	c3                   	ret    
c00121e1:	68 80 00 00 00       	push   0x80
c00121e6:	6a ff                	push   0xffffffff
c00121e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121f4:	e8 93 ff ff ff       	call   c001218c <VAS::reflagRange(unsigned long, int, int, int)>
c00121f9:	83 c4 14             	add    esp,0x14
c00121fc:	c3                   	ret    
c00121fd:	90                   	nop

c00121fe <VAS::mapOtherVASIn(bool, VAS*)>:
c00121fe:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012203:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012207:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001220a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001220e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0012211:	19 c0                	sbb    eax,eax
c0012213:	83 ca 03             	or     edx,0x3
c0012216:	83 e0 fc             	and    eax,0xfffffffc
c0012219:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012220:	0f 20 d8             	mov    eax,cr3
c0012223:	0f 22 d8             	mov    cr3,eax
c0012226:	c3                   	ret    
c0012227:	90                   	nop

c0012228 <VAS::~VAS()>:
c0012228:	83 ec 2c             	sub    esp,0x2c
c001222b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012233:	e8 5c bc 00 00       	call   c001de94 <lockScheduler()>
c0012238:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001223d:	8b 00                	mov    eax,DWORD PTR [eax]
c001223f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012242:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012248:	83 ec 04             	sub    esp,0x4
c001224b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001224f:	6a 01                	push   0x1
c0012251:	50                   	push   eax
c0012252:	e8 a7 ff ff ff       	call   c00121fe <VAS::mapOtherVASIn(bool, VAS*)>
c0012257:	83 c4 10             	add    esp,0x10
c001225a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012262:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001226a:	0f 8f d7 00 00 00    	jg     c0012347 <VAS::~VAS()+0x11f>
c0012270:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012274:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012277:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001227b:	c1 e2 02             	shl    edx,0x2
c001227e:	01 d0                	add    eax,edx
c0012280:	8b 00                	mov    eax,DWORD PTR [eax]
c0012282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001228a:	83 e0 01             	and    eax,0x1
c001228d:	0f 84 ab 00 00 00    	je     c001233e <VAS::~VAS()+0x116>
c0012293:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001229b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00122a3:	7f 75                	jg     c001231a <VAS::~VAS()+0xf2>
c00122a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122a9:	c1 e0 0a             	shl    eax,0xa
c00122ac:	89 c2                	mov    edx,eax
c00122ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122b2:	01 d0                	add    eax,edx
c00122b4:	c1 e0 0c             	shl    eax,0xc
c00122b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00122c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00122c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00122c5:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00122cb:	83 ec 04             	sub    esp,0x4
c00122ce:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122d2:	6a 01                	push   0x1
c00122d4:	50                   	push   eax
c00122d5:	e8 08 fd ff ff       	call   c0011fe2 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00122da:	83 c4 10             	add    esp,0x10
c00122dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00122e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122ef:	25 01 04 00 00       	and    eax,0x401
c00122f4:	3d 01 04 00 00       	cmp    eax,0x401
c00122f9:	75 19                	jne    c0012314 <VAS::~VAS()+0xec>
c00122fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122ff:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012304:	83 ec 0c             	sub    esp,0xc
c0012307:	50                   	push   eax
c0012308:	e8 4b db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001230d:	83 c4 10             	add    esp,0x10
c0012310:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012314:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0012318:	eb 81                	jmp    c001229b <VAS::~VAS()+0x73>
c001231a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001231e:	25 00 04 00 00       	and    eax,0x400
c0012323:	74 19                	je     c001233e <VAS::~VAS()+0x116>
c0012325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012329:	25 00 f0 ff ff       	and    eax,0xfffff000
c001232e:	83 ec 0c             	sub    esp,0xc
c0012331:	50                   	push   eax
c0012332:	e8 21 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012337:	83 c4 10             	add    esp,0x10
c001233a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001233e:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012342:	e9 1b ff ff ff       	jmp    c0012262 <VAS::~VAS()+0x3a>
c0012347:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001234b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001234e:	83 ec 0c             	sub    esp,0xc
c0012351:	50                   	push   eax
c0012352:	e8 d6 fc ff ff       	call   c001202d <Virt::freeKernelVirtualPages(unsigned long)>
c0012357:	83 c4 10             	add    esp,0x10
c001235a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001235e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012361:	83 ec 0c             	sub    esp,0xc
c0012364:	50                   	push   eax
c0012365:	e8 ee da ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001236a:	83 c4 10             	add    esp,0x10
c001236d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012371:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012375:	c1 e0 02             	shl    eax,0x2
c0012378:	83 ec 08             	sub    esp,0x8
c001237b:	50                   	push   eax
c001237c:	68 c4 a6 02 c0       	push   0xc002a6c4
c0012381:	e8 47 0c 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0012386:	83 c4 10             	add    esp,0x10
c0012389:	e8 08 bb 00 00       	call   c001de96 <unlockScheduler()>
c001238e:	90                   	nop
c001238f:	83 c4 2c             	add    esp,0x2c
c0012392:	c3                   	ret    
c0012393:	90                   	nop

c0012394 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012394:	55                   	push   ebp
c0012395:	57                   	push   edi
c0012396:	56                   	push   esi
c0012397:	53                   	push   ebx
c0012398:	83 ec 1c             	sub    esp,0x1c
c001239b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001239f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00123a3:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00123a9:	77 08                	ja     c00123b3 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00123ab:	0f 20 d8             	mov    eax,cr3
c00123ae:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c00123b1:	75 47                	jne    c00123fa <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00123b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123b7:	09 d8                	or     eax,ebx
c00123b9:	a9 ff 0f 00 00       	test   eax,0xfff
c00123be:	75 57                	jne    c0012417 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00123c0:	89 de                	mov    esi,ebx
c00123c2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00123c5:	c1 ee 16             	shr    esi,0x16
c00123c8:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00123cf:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123d3:	74 54                	je     c0012429 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123d5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123d9:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123df:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123e3:	c1 e6 0c             	shl    esi,0xc
c00123e6:	c1 eb 0a             	shr    ebx,0xa
c00123e9:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123ef:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123f2:	83 c4 1c             	add    esp,0x1c
c00123f5:	5b                   	pop    ebx
c00123f6:	5e                   	pop    esi
c00123f7:	5f                   	pop    edi
c00123f8:	5d                   	pop    ebp
c00123f9:	c3                   	ret    
c00123fa:	83 ec 0c             	sub    esp,0xc
c00123fd:	68 e4 a6 02 c0       	push   0xc002a6e4
c0012402:	e8 c6 0b 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0012407:	83 c4 10             	add    esp,0x10
c001240a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001240e:	09 d8                	or     eax,ebx
c0012410:	a9 ff 0f 00 00       	test   eax,0xfff
c0012415:	74 a9                	je     c00123c0 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012417:	83 ec 0c             	sub    esp,0xc
c001241a:	68 4c a7 02 c0       	push   0xc002a74c
c001241f:	e8 4b 82 00 00       	call   c001a66f <Krnl::panic(char const*)>
c0012424:	83 c4 10             	add    esp,0x10
c0012427:	eb 97                	jmp    c00123c0 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012429:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001242d:	e8 b0 da ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012432:	89 c5                	mov    ebp,eax
c0012434:	e8 1f fa ff ff       	call   c0011e58 <Virt::getAKernelVAS()>
c0012439:	83 ec 0c             	sub    esp,0xc
c001243c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012440:	6a 01                	push   0x1
c0012442:	e8 76 f7 ff ff       	call   c0011bbd <Virt::allocateKernelVirtualPages(int)>
c0012447:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001244e:	6a 01                	push   0x1
c0012450:	50                   	push   eax
c0012451:	55                   	push   ebp
c0012452:	81 cd 07 04 00 00    	or     ebp,0x407
c0012458:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001245c:	51                   	push   ecx
c001245d:	e8 26 02 00 00       	call   c0012688 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012462:	83 c4 1c             	add    esp,0x1c
c0012465:	68 00 10 00 00       	push   0x1000
c001246a:	6a 00                	push   0x0
c001246c:	50                   	push   eax
c001246d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012471:	e8 02 e3 fe ff       	call   c0000778 <memset>
c0012476:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001247a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001247d:	e8 ab fb ff ff       	call   c001202d <Virt::freeKernelVirtualPages(unsigned long)>
c0012482:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012486:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012489:	83 c4 10             	add    esp,0x10
c001248c:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001248f:	e9 41 ff ff ff       	jmp    c00123d5 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012494 <VAS::allocatePages(int, int)>:
c0012494:	55                   	push   ebp
c0012495:	57                   	push   edi
c0012496:	56                   	push   esi
c0012497:	53                   	push   ebx
c0012498:	83 ec 1c             	sub    esp,0x1c
c001249b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001249f:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c00124a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124aa:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00124b0:	83 e0 01             	and    eax,0x1
c00124b3:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00124b7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00124bb:	0f 85 cc 00 00 00    	jne    c001258d <VAS::allocatePages(int, int)+0xf9>
c00124c1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00124c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124c8:	85 c0                	test   eax,eax
c00124ca:	0f 84 a1 00 00 00    	je     c0012571 <VAS::allocatePages(int, int)+0xdd>
c00124d0:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124d8:	c1 e6 0c             	shl    esi,0xc
c00124db:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124df:	85 c0                	test   eax,eax
c00124e1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124e4:	7e 33                	jle    c0012519 <VAS::allocatePages(int, int)+0x85>
c00124e6:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124ee:	81 cd 00 04 00 00    	or     ebp,0x400
c00124f4:	e8 e9 d9 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00124f9:	55                   	push   ebp
c00124fa:	53                   	push   ebx
c00124fb:	50                   	push   eax
c00124fc:	57                   	push   edi
c00124fd:	e8 92 fe ff ff       	call   c0012394 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012502:	83 c4 10             	add    esp,0x10
c0012505:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001250a:	74 03                	je     c001250f <VAS::allocatePages(int, int)+0x7b>
c001250c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001250f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012515:	39 de                	cmp    esi,ebx
c0012517:	75 db                	jne    c00124f4 <VAS::allocatePages(int, int)+0x60>
c0012519:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001251e:	75 12                	jne    c0012532 <VAS::allocatePages(int, int)+0x9e>
c0012520:	0f 20 d8             	mov    eax,cr3
c0012523:	0f 22 d8             	mov    cr3,eax
c0012526:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001252a:	83 c4 1c             	add    esp,0x1c
c001252d:	5b                   	pop    ebx
c001252e:	5e                   	pop    esi
c001252f:	5f                   	pop    edi
c0012530:	5d                   	pop    ebp
c0012531:	c3                   	ret    
c0012532:	c1 ee 0a             	shr    esi,0xa
c0012535:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012539:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001253f:	c1 eb 0a             	shr    ebx,0xa
c0012542:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012548:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001254e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012554:	39 c3                	cmp    ebx,eax
c0012556:	77 ce                	ja     c0012526 <VAS::allocatePages(int, int)+0x92>
c0012558:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001255b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012561:	39 d8                	cmp    eax,ebx
c0012563:	73 f3                	jae    c0012558 <VAS::allocatePages(int, int)+0xc4>
c0012565:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012569:	83 c4 1c             	add    esp,0x1c
c001256c:	5b                   	pop    ebx
c001256d:	5e                   	pop    esi
c001256e:	5f                   	pop    edi
c001256f:	5d                   	pop    ebp
c0012570:	c3                   	ret    
c0012571:	83 ec 0c             	sub    esp,0xc
c0012574:	68 70 a7 02 c0       	push   0xc002a770
c0012579:	e8 f1 80 00 00       	call   c001a66f <Krnl::panic(char const*)>
c001257e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012581:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012585:	83 c4 10             	add    esp,0x10
c0012588:	e9 43 ff ff ff       	jmp    c00124d0 <VAS::allocatePages(int, int)+0x3c>
c001258d:	83 ec 0c             	sub    esp,0xc
c0012590:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012594:	e8 24 f6 ff ff       	call   c0011bbd <Virt::allocateKernelVirtualPages(int)>
c0012599:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001259d:	83 c4 10             	add    esp,0x10
c00125a0:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00125a5:	0f 87 9b 00 00 00    	ja     c0012646 <VAS::allocatePages(int, int)+0x1b2>
c00125ab:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00125af:	85 d2                	test   edx,edx
c00125b1:	7e 3c                	jle    c00125ef <VAS::allocatePages(int, int)+0x15b>
c00125b3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00125b7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00125bb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00125bf:	c1 e5 0c             	shl    ebp,0xc
c00125c2:	81 ce 00 04 00 00    	or     esi,0x400
c00125c8:	01 dd                	add    ebp,ebx
c00125ca:	e8 13 d9 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00125cf:	56                   	push   esi
c00125d0:	53                   	push   ebx
c00125d1:	50                   	push   eax
c00125d2:	57                   	push   edi
c00125d3:	e8 bc fd ff ff       	call   c0012394 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125d8:	83 c4 10             	add    esp,0x10
c00125db:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125e0:	74 03                	je     c00125e5 <VAS::allocatePages(int, int)+0x151>
c00125e2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125e5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125eb:	39 dd                	cmp    ebp,ebx
c00125ed:	75 db                	jne    c00125ca <VAS::allocatePages(int, int)+0x136>
c00125ef:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125f4:	0f 84 26 ff ff ff    	je     c0012520 <VAS::allocatePages(int, int)+0x8c>
c00125fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125fe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012602:	89 d3                	mov    ebx,edx
c0012604:	c1 e0 0c             	shl    eax,0xc
c0012607:	c1 eb 0a             	shr    ebx,0xa
c001260a:	01 d0                	add    eax,edx
c001260c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012612:	c1 e8 0a             	shr    eax,0xa
c0012615:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001261b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012620:	2d 00 00 40 00       	sub    eax,0x400000
c0012625:	39 c3                	cmp    ebx,eax
c0012627:	0f 87 f9 fe ff ff    	ja     c0012526 <VAS::allocatePages(int, int)+0x92>
c001262d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012630:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012636:	39 d8                	cmp    eax,ebx
c0012638:	73 f3                	jae    c001262d <VAS::allocatePages(int, int)+0x199>
c001263a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001263e:	83 c4 1c             	add    esp,0x1c
c0012641:	5b                   	pop    ebx
c0012642:	5e                   	pop    esi
c0012643:	5f                   	pop    edi
c0012644:	5d                   	pop    ebp
c0012645:	c3                   	ret    
c0012646:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001264b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012651:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012658:	0f 84 4d ff ff ff    	je     c00125ab <VAS::allocatePages(int, int)+0x117>
c001265e:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012666:	e9 40 ff ff ff       	jmp    c00125ab <VAS::allocatePages(int, int)+0x117>
c001266b:	90                   	nop

c001266c <VAS::setCPUSpecific(unsigned long)>:
c001266c:	83 ec 0c             	sub    esp,0xc
c001266f:	6a 05                	push   0x5
c0012671:	68 00 00 40 c2       	push   0xc2400000
c0012676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001267a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001267e:	e8 11 fd ff ff       	call   c0012394 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012683:	83 c4 1c             	add    esp,0x1c
c0012686:	c3                   	ret    
c0012687:	90                   	nop

c0012688 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012688:	55                   	push   ebp
c0012689:	57                   	push   edi
c001268a:	56                   	push   esi
c001268b:	53                   	push   ebx
c001268c:	83 ec 1c             	sub    esp,0x1c
c001268f:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0012694:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012698:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001269e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00126a2:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00126a8:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00126ac:	83 e0 01             	and    eax,0x1
c00126af:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00126b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126b7:	85 c0                	test   eax,eax
c00126b9:	7e 39                	jle    c00126f4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00126bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126bf:	89 f3                	mov    ebx,esi
c00126c1:	c1 e0 0c             	shl    eax,0xc
c00126c4:	01 f0                	add    eax,esi
c00126c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126ca:	55                   	push   ebp
c00126cb:	53                   	push   ebx
c00126cc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126d0:	29 f0                	sub    eax,esi
c00126d2:	01 d8                	add    eax,ebx
c00126d4:	50                   	push   eax
c00126d5:	57                   	push   edi
c00126d6:	e8 b9 fc ff ff       	call   c0012394 <VAS::mapPage(unsigned long, unsigned long, int)>
c00126db:	83 c4 10             	add    esp,0x10
c00126de:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126e3:	74 03                	je     c00126e8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126e5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126e8:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126ee:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126f2:	75 d6                	jne    c00126ca <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126f4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126f9:	75 10                	jne    c001270b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126fb:	0f 20 d8             	mov    eax,cr3
c00126fe:	0f 22 d8             	mov    cr3,eax
c0012701:	83 c4 1c             	add    esp,0x1c
c0012704:	89 f0                	mov    eax,esi
c0012706:	5b                   	pop    ebx
c0012707:	5e                   	pop    esi
c0012708:	5f                   	pop    edi
c0012709:	5d                   	pop    ebp
c001270a:	c3                   	ret    
c001270b:	89 f3                	mov    ebx,esi
c001270d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012711:	c1 eb 0a             	shr    ebx,0xa
c0012714:	c1 e0 0c             	shl    eax,0xc
c0012717:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001271d:	01 f0                	add    eax,esi
c001271f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012725:	c1 e8 0a             	shr    eax,0xa
c0012728:	25 00 f0 ff ff       	and    eax,0xfffff000
c001272d:	2d 00 00 40 00       	sub    eax,0x400000
c0012732:	39 c3                	cmp    ebx,eax
c0012734:	77 cb                	ja     c0012701 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012736:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012739:	81 c3 00 10 00 00    	add    ebx,0x1000
c001273f:	39 d8                	cmp    eax,ebx
c0012741:	73 f3                	jae    c0012736 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012743:	83 c4 1c             	add    esp,0x1c
c0012746:	89 f0                	mov    eax,esi
c0012748:	5b                   	pop    ebx
c0012749:	5e                   	pop    esi
c001274a:	5f                   	pop    edi
c001274b:	5d                   	pop    ebp
c001274c:	c3                   	ret    
c001274d:	90                   	nop

c001274e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001274e:	55                   	push   ebp
c001274f:	57                   	push   edi
c0012750:	56                   	push   esi
c0012751:	53                   	push   ebx
c0012752:	83 ec 1c             	sub    esp,0x1c
c0012755:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012759:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001275d:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012761:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012765:	a9 ff 0f 00 00       	test   eax,0xfff
c001276a:	75 4a                	jne    c00127b6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001276c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012770:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012773:	c1 eb 16             	shr    ebx,0x16
c0012776:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001277d:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012781:	74 4d                	je     c00127d0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012783:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012787:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001278b:	c1 e8 0a             	shr    eax,0xa
c001278e:	80 fa 01             	cmp    dl,0x1
c0012791:	19 d2                	sbb    edx,edx
c0012793:	c1 e3 0c             	shl    ebx,0xc
c0012796:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001279a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00127a0:	25 fc 0f 00 00       	and    eax,0xffc
c00127a5:	01 d8                	add    eax,ebx
c00127a7:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00127ae:	83 c4 1c             	add    esp,0x1c
c00127b1:	5b                   	pop    ebx
c00127b2:	5e                   	pop    esi
c00127b3:	5f                   	pop    edi
c00127b4:	5d                   	pop    ebp
c00127b5:	c3                   	ret    
c00127b6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00127ba:	83 ec 0c             	sub    esp,0xc
c00127bd:	68 9c a7 02 c0       	push   0xc002a79c
c00127c2:	e8 a8 7e 00 00       	call   c001a66f <Krnl::panic(char const*)>
c00127c7:	83 c4 10             	add    esp,0x10
c00127ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127ce:	eb 9c                	jmp    c001276c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00127d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127d4:	e8 09 d7 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00127d9:	89 c5                	mov    ebp,eax
c00127db:	e8 78 f6 ff ff       	call   c0011e58 <Virt::getAKernelVAS()>
c00127e0:	83 ec 0c             	sub    esp,0xc
c00127e3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127e7:	6a 01                	push   0x1
c00127e9:	e8 cf f3 ff ff       	call   c0011bbd <Virt::allocateKernelVirtualPages(int)>
c00127ee:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127f5:	6a 01                	push   0x1
c00127f7:	50                   	push   eax
c00127f8:	55                   	push   ebp
c00127f9:	81 cd 07 04 00 00    	or     ebp,0x407
c00127ff:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012803:	51                   	push   ecx
c0012804:	e8 7f fe ff ff       	call   c0012688 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012809:	83 c4 1c             	add    esp,0x1c
c001280c:	68 00 10 00 00       	push   0x1000
c0012811:	6a 00                	push   0x0
c0012813:	50                   	push   eax
c0012814:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012818:	e8 5b df fe ff       	call   c0000778 <memset>
c001281d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012821:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012824:	e8 04 f8 ff ff       	call   c001202d <Virt::freeKernelVirtualPages(unsigned long)>
c0012829:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001282c:	83 c4 10             	add    esp,0x10
c001282f:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012832:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012836:	e9 48 ff ff ff       	jmp    c0012783 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c001283b:	90                   	nop

c001283c <VAS::VAS(bool)>:
c001283c:	53                   	push   ebx
c001283d:	83 ec 28             	sub    esp,0x28
c0012840:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012844:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012848:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001284c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012853:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012857:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001285b:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001285e:	e8 7f d6 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012863:	89 c2                	mov    edx,eax
c0012865:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012869:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001286c:	e8 e7 f5 ff ff       	call   c0011e58 <Virt::getAKernelVAS()>
c0012871:	89 c3                	mov    ebx,eax
c0012873:	83 ec 0c             	sub    esp,0xc
c0012876:	6a 01                	push   0x1
c0012878:	e8 40 f3 ff ff       	call   c0011bbd <Virt::allocateKernelVirtualPages(int)>
c001287d:	83 c4 10             	add    esp,0x10
c0012880:	89 c2                	mov    edx,eax
c0012882:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012886:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012889:	83 ec 0c             	sub    esp,0xc
c001288c:	6a 03                	push   0x3
c001288e:	6a 01                	push   0x1
c0012890:	52                   	push   edx
c0012891:	50                   	push   eax
c0012892:	53                   	push   ebx
c0012893:	e8 f0 fd ff ff       	call   c0012688 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012898:	83 c4 20             	add    esp,0x20
c001289b:	89 c2                	mov    edx,eax
c001289d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128a1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00128a4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00128ac:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00128b4:	7f 1c                	jg     c00128d2 <VAS::VAS(bool)+0x96>
c00128b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128bd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00128c1:	c1 e2 02             	shl    edx,0x2
c00128c4:	01 d0                	add    eax,edx
c00128c6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128cc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00128d0:	eb da                	jmp    c00128ac <VAS::VAS(bool)+0x70>
c00128d2:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128da:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128e2:	7f 7a                	jg     c001295e <VAS::VAS(bool)+0x122>
c00128e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128e8:	2d 00 02 00 00       	sub    eax,0x200
c00128ed:	c1 e0 0c             	shl    eax,0xc
c00128f0:	83 c8 03             	or     eax,0x3
c00128f3:	89 c2                	mov    edx,eax
c00128f5:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c00128fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012900:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012906:	83 e0 10             	and    eax,0x10
c0012909:	84 c0                	test   al,al
c001290b:	74 07                	je     c0012914 <VAS::VAS(bool)+0xd8>
c001290d:	b8 00 01 00 00       	mov    eax,0x100
c0012912:	eb 05                	jmp    c0012919 <VAS::VAS(bool)+0xdd>
c0012914:	b8 00 00 00 00       	mov    eax,0x0
c0012919:	09 d0                	or     eax,edx
c001291b:	89 c1                	mov    ecx,eax
c001291d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012921:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012924:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012928:	c1 e2 02             	shl    edx,0x2
c001292b:	01 d0                	add    eax,edx
c001292d:	89 ca                	mov    edx,ecx
c001292f:	89 10                	mov    DWORD PTR [eax],edx
c0012931:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012935:	2d 40 03 00 00       	sub    eax,0x340
c001293a:	83 f8 7f             	cmp    eax,0x7f
c001293d:	77 16                	ja     c0012955 <VAS::VAS(bool)+0x119>
c001293f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012943:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012946:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001294a:	c1 e2 02             	shl    edx,0x2
c001294d:	01 d0                	add    eax,edx
c001294f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012955:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012959:	e9 7c ff ff ff       	jmp    c00128da <VAS::VAS(bool)+0x9e>
c001295e:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0012963:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012969:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001296f:	83 e0 10             	and    eax,0x10
c0012972:	84 c0                	test   al,al
c0012974:	74 07                	je     c001297d <VAS::VAS(bool)+0x141>
c0012976:	b8 03 41 00 00       	mov    eax,0x4103
c001297b:	eb 05                	jmp    c0012982 <VAS::VAS(bool)+0x146>
c001297d:	b8 03 40 00 00       	mov    eax,0x4003
c0012982:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012986:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012989:	81 c2 20 0c 00 00    	add    edx,0xc20
c001298f:	89 02                	mov    DWORD PTR [edx],eax
c0012991:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0012996:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001299c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00129a2:	83 ec 08             	sub    esp,0x8
c00129a5:	50                   	push   eax
c00129a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00129aa:	e8 bd fc ff ff       	call   c001266c <VAS::setCPUSpecific(unsigned long)>
c00129af:	83 c4 10             	add    esp,0x10
c00129b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129b6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00129b9:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c00129be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129c4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129ca:	83 e0 10             	and    eax,0x10
c00129cd:	84 c0                	test   al,al
c00129cf:	74 07                	je     c00129d8 <VAS::VAS(bool)+0x19c>
c00129d1:	b8 00 01 00 00       	mov    eax,0x100
c00129d6:	eb 05                	jmp    c00129dd <VAS::VAS(bool)+0x1a1>
c00129d8:	b8 00 00 00 00       	mov    eax,0x0
c00129dd:	09 c2                	or     edx,eax
c00129df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129e6:	05 fc 0f 00 00       	add    eax,0xffc
c00129eb:	83 ca 03             	or     edx,0x3
c00129ee:	89 10                	mov    DWORD PTR [eax],edx
c00129f0:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c00129f5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129fb:	83 ec 0c             	sub    esp,0xc
c00129fe:	50                   	push   eax
c00129ff:	e8 dc 1c 00 00       	call   c00146e0 <Device::getName()>
c0012a04:	83 c4 10             	add    esp,0x10
c0012a07:	83 ec 08             	sub    esp,0x8
c0012a0a:	68 98 a9 02 c0       	push   0xc002a998
c0012a0f:	50                   	push   eax
c0012a10:	e8 ab de fe ff       	call   c00008c0 <strcmp>
c0012a15:	83 c4 10             	add    esp,0x10
c0012a18:	85 c0                	test   eax,eax
c0012a1a:	0f 94 c0             	sete   al
c0012a1d:	84 c0                	test   al,al
c0012a1f:	74 70                	je     c0012a91 <VAS::VAS(bool)+0x255>
c0012a21:	e8 51 b4 00 00       	call   c001de77 <disableIRQs()>
c0012a26:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0012a2b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a31:	05 7c 09 00 00       	add    eax,0x97c
c0012a36:	83 ec 0c             	sub    esp,0xc
c0012a39:	50                   	push   eax
c0012a3a:	e8 7d c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a3f:	83 c4 10             	add    esp,0x10
c0012a42:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a47:	89 c3                	mov    ebx,eax
c0012a49:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0012a4e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a54:	05 7c 09 00 00       	add    eax,0x97c
c0012a59:	83 ec 0c             	sub    esp,0xc
c0012a5c:	50                   	push   eax
c0012a5d:	e8 5a c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a62:	83 c4 10             	add    esp,0x10
c0012a65:	83 ec 08             	sub    esp,0x8
c0012a68:	50                   	push   eax
c0012a69:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a6d:	e8 9c f5 ff ff       	call   c001200e <VAS::getPageTableEntry(unsigned long)>
c0012a72:	83 c4 10             	add    esp,0x10
c0012a75:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a77:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a7c:	6a 11                	push   0x11
c0012a7e:	53                   	push   ebx
c0012a7f:	50                   	push   eax
c0012a80:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a84:	e8 0b f9 ff ff       	call   c0012394 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a89:	83 c4 10             	add    esp,0x10
c0012a8c:	e8 f4 b3 00 00       	call   c001de85 <enableIRQs()>
c0012a91:	90                   	nop
c0012a92:	83 c4 28             	add    esp,0x28
c0012a95:	5b                   	pop    ebx
c0012a96:	c3                   	ret    
c0012a97:	90                   	nop

c0012a98 <VAS::evict(unsigned long)>:
c0012a98:	55                   	push   ebp
c0012a99:	57                   	push   edi
c0012a9a:	56                   	push   esi
c0012a9b:	53                   	push   ebx
c0012a9c:	83 ec 1c             	sub    esp,0x1c
c0012a9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012aa3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012aa7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012aab:	e8 e4 b3 00 00       	call   c001de94 <lockScheduler()>
c0012ab0:	83 ec 08             	sub    esp,0x8
c0012ab3:	55                   	push   ebp
c0012ab4:	68 c0 a7 02 c0       	push   0xc002a7c0
c0012ab9:	e8 0f 05 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0012abe:	e8 3b f2 ff ff       	call   c0011cfe <Virt::allocateSwapfilePage()>
c0012ac3:	83 c4 0c             	add    esp,0xc
c0012ac6:	89 c7                	mov    edi,eax
c0012ac8:	50                   	push   eax
c0012ac9:	50                   	push   eax
c0012aca:	68 a6 a9 02 c0       	push   0xc002a9a6
c0012acf:	e8 f9 04 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0012ad4:	83 c4 10             	add    esp,0x10
c0012ad7:	a1 ec d5 02 c0       	mov    eax,ds:0xc002d5ec
c0012adc:	85 c0                	test   eax,eax
c0012ade:	7e 3d                	jle    c0012b1d <VAS::evict(unsigned long)+0x85>
c0012ae0:	89 ee                	mov    esi,ebp
c0012ae2:	31 db                	xor    ebx,ebx
c0012ae4:	83 ec 0c             	sub    esp,0xc
c0012ae7:	57                   	push   edi
c0012ae8:	e8 ff f1 ff ff       	call   c0011cec <Virt::swapIDToSector(unsigned long)>
c0012aed:	89 34 24             	mov    DWORD PTR [esp],esi
c0012af0:	01 d8                	add    eax,ebx
c0012af2:	6a 01                	push   0x1
c0012af4:	31 d2                	xor    edx,edx
c0012af6:	43                   	inc    ebx
c0012af7:	52                   	push   edx
c0012af8:	81 c6 00 02 00 00    	add    esi,0x200
c0012afe:	50                   	push   eax
c0012aff:	0f be 05 f8 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d5f8
c0012b06:	ff 34 85 5c eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd14a4]
c0012b0d:	e8 38 3d 00 00       	call   c001684a <LogicalDisk::write(unsigned long long, int, void*)>
c0012b12:	83 c4 20             	add    esp,0x20
c0012b15:	39 1d ec d5 02 c0    	cmp    DWORD PTR ds:0xc002d5ec,ebx
c0012b1b:	7f c7                	jg     c0012ae4 <VAS::evict(unsigned long)+0x4c>
c0012b1d:	83 ec 08             	sub    esp,0x8
c0012b20:	c1 e7 0b             	shl    edi,0xb
c0012b23:	55                   	push   ebp
c0012b24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012b28:	e8 e1 f4 ff ff       	call   c001200e <VAS::getPageTableEntry(unsigned long)>
c0012b2d:	89 c3                	mov    ebx,eax
c0012b2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b31:	c1 e8 0c             	shr    eax,0xc
c0012b34:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b37:	e8 1c d3 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012b3c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012b3e:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012b44:	09 d7                	or     edi,edx
c0012b46:	89 3b                	mov    DWORD PTR [ebx],edi
c0012b48:	c7 04 24 b6 a9 02 c0 	mov    DWORD PTR [esp],0xc002a9b6
c0012b4f:	e8 79 04 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0012b54:	83 c4 2c             	add    esp,0x2c
c0012b57:	5b                   	pop    ebx
c0012b58:	5e                   	pop    esi
c0012b59:	5f                   	pop    edi
c0012b5a:	5d                   	pop    ebp
c0012b5b:	e9 36 b3 00 00       	jmp    c001de96 <unlockScheduler()>

c0012b60 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012b60:	57                   	push   edi
c0012b61:	56                   	push   esi
c0012b62:	53                   	push   ebx
c0012b63:	83 ec 18             	sub    esp,0x18
c0012b66:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012b6a:	53                   	push   ebx
c0012b6b:	68 c6 a9 02 c0       	push   0xc002a9c6
c0012b70:	e8 58 04 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0012b75:	e8 1a b3 00 00       	call   c001de94 <lockScheduler()>
c0012b7a:	5e                   	pop    esi
c0012b7b:	5f                   	pop    edi
c0012b7c:	53                   	push   ebx
c0012b7d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012b83:	68 e0 a7 02 c0       	push   0xc002a7e0
c0012b88:	e8 40 04 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0012b8d:	58                   	pop    eax
c0012b8e:	5a                   	pop    edx
c0012b8f:	53                   	push   ebx
c0012b90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b94:	e8 75 f4 ff ff       	call   c001200e <VAS::getPageTableEntry(unsigned long)>
c0012b99:	59                   	pop    ecx
c0012b9a:	5e                   	pop    esi
c0012b9b:	89 c6                	mov    esi,eax
c0012b9d:	50                   	push   eax
c0012b9e:	68 d9 a9 02 c0       	push   0xc002a9d9
c0012ba3:	e8 25 04 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0012ba8:	83 c4 10             	add    esp,0x10
c0012bab:	85 f6                	test   esi,esi
c0012bad:	74 08                	je     c0012bb7 <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c0012baf:	f7 06 00 04 00 00    	test   DWORD PTR [esi],0x400
c0012bb5:	75 1e                	jne    c0012bd5 <VAS::tryLoadBackOffDisk(unsigned long)+0x75>
c0012bb7:	83 ec 0c             	sub    esp,0xc
c0012bba:	68 51 aa 02 c0       	push   0xc002aa51
c0012bbf:	e8 09 04 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0012bc4:	e8 cd b2 00 00       	call   c001de96 <unlockScheduler()>
c0012bc9:	83 c4 10             	add    esp,0x10
c0012bcc:	31 c0                	xor    eax,eax
c0012bce:	83 c4 10             	add    esp,0x10
c0012bd1:	5b                   	pop    ebx
c0012bd2:	5e                   	pop    esi
c0012bd3:	5f                   	pop    edi
c0012bd4:	c3                   	ret    
c0012bd5:	83 ec 0c             	sub    esp,0xc
c0012bd8:	68 e7 a9 02 c0       	push   0xc002a9e7
c0012bdd:	e8 eb 03 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0012be2:	c6 05 80 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e680,0x1
c0012be9:	8b 3e                	mov    edi,DWORD PTR [esi]
c0012beb:	e8 f2 d2 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012bf0:	c1 ef 0b             	shr    edi,0xb
c0012bf3:	5a                   	pop    edx
c0012bf4:	c6 05 80 e6 02 c0 00 	mov    BYTE PTR ds:0xc002e680,0x0
c0012bfb:	59                   	pop    ecx
c0012bfc:	50                   	push   eax
c0012bfd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012c01:	68 ff a9 02 c0       	push   0xc002a9ff
c0012c06:	e8 c2 03 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0012c0b:	58                   	pop    eax
c0012c0c:	5a                   	pop    edx
c0012c0d:	ff 36                	push   DWORD PTR [esi]
c0012c0f:	68 19 aa 02 c0       	push   0xc002aa19
c0012c14:	e8 b4 03 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0012c19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c1d:	8b 16                	mov    edx,DWORD PTR [esi]
c0012c1f:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012c25:	09 d0                	or     eax,edx
c0012c27:	0d 01 08 00 00       	or     eax,0x801
c0012c2c:	89 06                	mov    DWORD PTR [esi],eax
c0012c2e:	59                   	pop    ecx
c0012c2f:	5e                   	pop    esi
c0012c30:	50                   	push   eax
c0012c31:	68 2c aa 02 c0       	push   0xc002aa2c
c0012c36:	e8 92 03 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0012c3b:	58                   	pop    eax
c0012c3c:	5a                   	pop    edx
c0012c3d:	53                   	push   ebx
c0012c3e:	68 3f aa 02 c0       	push   0xc002aa3f
c0012c43:	e8 85 03 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0012c48:	83 c4 10             	add    esp,0x10
c0012c4b:	8b 0d ec d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5ec
c0012c51:	85 c9                	test   ecx,ecx
c0012c53:	7e 3b                	jle    c0012c90 <VAS::tryLoadBackOffDisk(unsigned long)+0x130>
c0012c55:	31 f6                	xor    esi,esi
c0012c57:	83 ec 0c             	sub    esp,0xc
c0012c5a:	57                   	push   edi
c0012c5b:	e8 8c f0 ff ff       	call   c0011cec <Virt::swapIDToSector(unsigned long)>
c0012c60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012c63:	01 f0                	add    eax,esi
c0012c65:	6a 01                	push   0x1
c0012c67:	31 d2                	xor    edx,edx
c0012c69:	46                   	inc    esi
c0012c6a:	52                   	push   edx
c0012c6b:	81 c3 00 02 00 00    	add    ebx,0x200
c0012c71:	50                   	push   eax
c0012c72:	0f be 05 f8 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d5f8
c0012c79:	ff 34 85 5c eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd14a4]
c0012c80:	e8 59 3b 00 00       	call   c00167de <LogicalDisk::read(unsigned long long, int, void*)>
c0012c85:	83 c4 20             	add    esp,0x20
c0012c88:	39 35 ec d5 02 c0    	cmp    DWORD PTR ds:0xc002d5ec,esi
c0012c8e:	7f c7                	jg     c0012c57 <VAS::tryLoadBackOffDisk(unsigned long)+0xf7>
c0012c90:	83 ec 0c             	sub    esp,0xc
c0012c93:	57                   	push   edi
c0012c94:	e8 35 f0 ff ff       	call   c0011cce <Virt::freeSwapfilePage(unsigned long)>
c0012c99:	e8 f8 b1 00 00       	call   c001de96 <unlockScheduler()>
c0012c9e:	83 c4 10             	add    esp,0x10
c0012ca1:	b0 01                	mov    al,0x1
c0012ca3:	83 c4 10             	add    esp,0x10
c0012ca6:	5b                   	pop    ebx
c0012ca7:	5e                   	pop    esi
c0012ca8:	5f                   	pop    edi
c0012ca9:	c3                   	ret    

c0012caa <VAS::scanForEviction(int, int)>:
c0012caa:	55                   	push   ebp
c0012cab:	57                   	push   edi
c0012cac:	56                   	push   esi
c0012cad:	53                   	push   ebx
c0012cae:	83 ec 1c             	sub    esp,0x1c
c0012cb1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012cb5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012cb9:	85 c9                	test   ecx,ecx
c0012cbb:	75 08                	jne    c0012cc5 <VAS::scanForEviction(int, int)+0x1b>
c0012cbd:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012cc5:	83 ec 0c             	sub    esp,0xc
c0012cc8:	bb 00 00 40 00       	mov    ebx,0x400000
c0012ccd:	68 0c a8 02 c0       	push   0xc002a80c
c0012cd2:	31 ff                	xor    edi,edi
c0012cd4:	e8 f4 02 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0012cd9:	83 c4 10             	add    esp,0x10
c0012cdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012ce4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012cec:	eb 17                	jmp    c0012d05 <VAS::scanForEviction(int, int)+0x5b>
c0012cee:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0012cf3:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012cf9:	81 fb 00 00 40 c0    	cmp    ebx,0xc0400000
c0012cff:	0f 84 88 00 00 00    	je     c0012d8d <VAS::scanForEviction(int, int)+0xe3>
c0012d05:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0012d08:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012d0c:	f6 04 08 01          	test   BYTE PTR [eax+ecx*1],0x1
c0012d10:	74 dc                	je     c0012cee <VAS::scanForEviction(int, int)+0x44>
c0012d12:	8d ab 00 00 c0 ff    	lea    ebp,[ebx-0x400000]
c0012d18:	eb 0a                	jmp    c0012d24 <VAS::scanForEviction(int, int)+0x7a>
c0012d1a:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012d20:	39 eb                	cmp    ebx,ebp
c0012d22:	74 ca                	je     c0012cee <VAS::scanForEviction(int, int)+0x44>
c0012d24:	83 ec 08             	sub    esp,0x8
c0012d27:	55                   	push   ebp
c0012d28:	56                   	push   esi
c0012d29:	e8 e0 f2 ff ff       	call   c001200e <VAS::getPageTableEntry(unsigned long)>
c0012d2e:	83 c4 10             	add    esp,0x10
c0012d31:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d33:	89 c2                	mov    edx,eax
c0012d35:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012d3b:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012d41:	75 d7                	jne    c0012d1a <VAS::scanForEviction(int, int)+0x70>
c0012d43:	a8 01                	test   al,0x1
c0012d45:	74 4e                	je     c0012d95 <VAS::scanForEviction(int, int)+0xeb>
c0012d47:	83 ec 08             	sub    esp,0x8
c0012d4a:	55                   	push   ebp
c0012d4b:	68 30 a8 02 c0       	push   0xc002a830
c0012d50:	e8 78 02 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0012d55:	89 f8                	mov    eax,edi
c0012d57:	99                   	cdq    
c0012d58:	f7 7c 24 44          	idiv   DWORD PTR [esp+0x44]
c0012d5c:	83 c4 10             	add    esp,0x10
c0012d5f:	85 d2                	test   edx,edx
c0012d61:	74 03                	je     c0012d66 <VAS::scanForEviction(int, int)+0xbc>
c0012d63:	47                   	inc    edi
c0012d64:	eb b4                	jmp    c0012d1a <VAS::scanForEviction(int, int)+0x70>
c0012d66:	83 ec 0c             	sub    esp,0xc
c0012d69:	68 6a aa 02 c0       	push   0xc002aa6a
c0012d6e:	e8 5a 02 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0012d73:	58                   	pop    eax
c0012d74:	5a                   	pop    edx
c0012d75:	55                   	push   ebp
c0012d76:	56                   	push   esi
c0012d77:	e8 1c fd ff ff       	call   c0012a98 <VAS::evict(unsigned long)>
c0012d7c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012d80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d84:	83 c4 10             	add    esp,0x10
c0012d87:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c0012d8b:	75 d6                	jne    c0012d63 <VAS::scanForEviction(int, int)+0xb9>
c0012d8d:	83 c4 1c             	add    esp,0x1c
c0012d90:	5b                   	pop    ebx
c0012d91:	5e                   	pop    esi
c0012d92:	5f                   	pop    edi
c0012d93:	5d                   	pop    ebp
c0012d94:	c3                   	ret    
c0012d95:	83 ec 08             	sub    esp,0x8
c0012d98:	55                   	push   ebp
c0012d99:	68 5c a8 02 c0       	push   0xc002a85c
c0012d9e:	e8 2a 02 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0012da3:	83 c4 10             	add    esp,0x10
c0012da6:	e9 6f ff ff ff       	jmp    c0012d1a <VAS::scanForEviction(int, int)+0x70>

c0012dab <mapVASFirstTime>:
c0012dab:	55                   	push   ebp
c0012dac:	57                   	push   edi
c0012dad:	56                   	push   esi
c0012dae:	53                   	push   ebx
c0012daf:	83 ec 0c             	sub    esp,0xc
c0012db2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012db7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012dba:	4a                   	dec    edx
c0012dbb:	0f 84 8e 00 00 00    	je     c0012e4f <mapVASFirstTime+0xa4>
c0012dc1:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012dc4:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012dc7:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012dcc:	c1 e5 15             	shl    ebp,0x15
c0012dcf:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012dd4:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012dda:	29 eb                	sub    ebx,ebp
c0012ddc:	29 ee                	sub    esi,ebp
c0012dde:	e8 ff d0 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012de3:	83 ec 0c             	sub    esp,0xc
c0012de6:	68 03 04 00 00       	push   0x403
c0012deb:	6a 01                	push   0x1
c0012ded:	53                   	push   ebx
c0012dee:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012df4:	50                   	push   eax
c0012df5:	57                   	push   edi
c0012df6:	e8 8d f8 ff ff       	call   c0012688 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012dfb:	83 c4 20             	add    esp,0x20
c0012dfe:	39 f3                	cmp    ebx,esi
c0012e00:	75 dc                	jne    c0012dde <mapVASFirstTime+0x33>
c0012e02:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012e07:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012e0c:	29 ee                	sub    esi,ebp
c0012e0e:	29 e8                	sub    eax,ebp
c0012e10:	89 c5                	mov    ebp,eax
c0012e12:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012e16:	19 db                	sbb    ebx,ebx
c0012e18:	e8 c5 d0 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012e1d:	83 e3 04             	and    ebx,0x4
c0012e20:	83 ec 0c             	sub    esp,0xc
c0012e23:	81 c3 03 04 00 00    	add    ebx,0x403
c0012e29:	53                   	push   ebx
c0012e2a:	6a 01                	push   0x1
c0012e2c:	56                   	push   esi
c0012e2d:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012e33:	50                   	push   eax
c0012e34:	57                   	push   edi
c0012e35:	e8 4e f8 ff ff       	call   c0012688 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012e3a:	83 c4 20             	add    esp,0x20
c0012e3d:	39 f5                	cmp    ebp,esi
c0012e3f:	75 d1                	jne    c0012e12 <mapVASFirstTime+0x67>
c0012e41:	0f 20 d8             	mov    eax,cr3
c0012e44:	0f 22 d8             	mov    cr3,eax
c0012e47:	83 c4 0c             	add    esp,0xc
c0012e4a:	5b                   	pop    ebx
c0012e4b:	5e                   	pop    esi
c0012e4c:	5f                   	pop    edi
c0012e4d:	5d                   	pop    ebp
c0012e4e:	c3                   	ret    
c0012e4f:	83 ec 0c             	sub    esp,0xc
c0012e52:	68 75 aa 02 c0       	push   0xc002aa75
c0012e57:	e8 71 01 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0012e5c:	83 c4 10             	add    esp,0x10
c0012e5f:	83 c4 0c             	add    esp,0xc
c0012e62:	5b                   	pop    ebx
c0012e63:	5e                   	pop    esi
c0012e64:	5f                   	pop    edi
c0012e65:	5d                   	pop    ebp
c0012e66:	c3                   	ret    

c0012e67 <__cxa_atexit>:
c0012e67:	31 c0                	xor    eax,eax
c0012e69:	c3                   	ret    

c0012e6a <__cxa_finalize>:
c0012e6a:	c3                   	ret    

c0012e6b <__stack_chk_fail>:
c0012e6b:	55                   	push   ebp
c0012e6c:	89 e5                	mov    ebp,esp
c0012e6e:	83 ec 14             	sub    esp,0x14
c0012e71:	68 8e aa 02 c0       	push   0xc002aa8e
c0012e76:	e8 52 01 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0012e7b:	58                   	pop    eax
c0012e7c:	5a                   	pop    edx
c0012e7d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012e80:	68 de aa 02 c0       	push   0xc002aade
c0012e85:	e8 43 01 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0012e8a:	59                   	pop    ecx
c0012e8b:	58                   	pop    eax
c0012e8c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e8f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e92:	68 de aa 02 c0       	push   0xc002aade
c0012e97:	e8 31 01 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0012e9c:	5a                   	pop    edx
c0012e9d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ea0:	59                   	pop    ecx
c0012ea1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ea3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012ea6:	68 de aa 02 c0       	push   0xc002aade
c0012eab:	e8 1d 01 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0012eb0:	5a                   	pop    edx
c0012eb1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012eb4:	59                   	pop    ecx
c0012eb5:	8b 00                	mov    eax,DWORD PTR [eax]
c0012eb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0012eb9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012ebc:	68 de aa 02 c0       	push   0xc002aade
c0012ec1:	e8 07 01 00 00       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0012ec6:	c7 04 24 e6 aa 02 c0 	mov    DWORD PTR [esp],0xc002aae6
c0012ecd:	e8 9d 77 00 00       	call   c001a66f <Krnl::panic(char const*)>
c0012ed2:	83 c4 10             	add    esp,0x10
c0012ed5:	c9                   	leave  
c0012ed6:	c3                   	ret    

c0012ed7 <__cxa_pure_virtual>:
c0012ed7:	83 ec 18             	sub    esp,0x18
c0012eda:	68 fe aa 02 c0       	push   0xc002aafe
c0012edf:	e8 8b 77 00 00       	call   c001a66f <Krnl::panic(char const*)>
c0012ee4:	83 c4 1c             	add    esp,0x1c
c0012ee7:	c3                   	ret    

c0012ee8 <operator new[](unsigned long)>:
c0012ee8:	e9 53 c9 ff ff       	jmp    c000f840 <malloc>

c0012eed <operator delete(void*, unsigned long)>:
c0012eed:	e9 6e c9 ff ff       	jmp    c000f860 <rfree>

c0012ef2 <operator delete[](void*)>:
c0012ef2:	e9 69 c9 ff ff       	jmp    c000f860 <rfree>

c0012ef7 <operator delete[](void*, unsigned long)>:
c0012ef7:	e9 64 c9 ff ff       	jmp    c000f860 <rfree>

c0012efc <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012efc:	57                   	push   edi
c0012efd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012f02:	56                   	push   esi
c0012f03:	be 14 ab 02 c0       	mov    esi,0xc002ab14
c0012f08:	53                   	push   ebx
c0012f09:	83 ec 40             	sub    esp,0x40
c0012f0c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012f10:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012f14:	fc                   	cld    
c0012f15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f17:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012f1b:	83 f9 3e             	cmp    ecx,0x3e
c0012f1e:	7e 05                	jle    c0012f25 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012f20:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012f25:	89 df                	mov    edi,ebx
c0012f27:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012f2b:	eb 02                	jmp    c0012f2f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012f2d:	89 c7                	mov    edi,eax
c0012f2f:	31 d2                	xor    edx,edx
c0012f31:	46                   	inc    esi
c0012f32:	89 f8                	mov    eax,edi
c0012f34:	f7 f1                	div    ecx
c0012f36:	39 cf                	cmp    edi,ecx
c0012f38:	73 f3                	jae    c0012f2d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012f3a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012f3d:	eb 02                	jmp    c0012f41 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012f3f:	89 c3                	mov    ebx,eax
c0012f41:	31 d2                	xor    edx,edx
c0012f43:	4e                   	dec    esi
c0012f44:	89 d8                	mov    eax,ebx
c0012f46:	f7 f1                	div    ecx
c0012f48:	39 cb                	cmp    ebx,ecx
c0012f4a:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012f4e:	88 16                	mov    BYTE PTR [esi],dl
c0012f50:	73 ed                	jae    c0012f3f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012f52:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012f56:	83 c4 40             	add    esp,0x40
c0012f59:	5b                   	pop    ebx
c0012f5a:	5e                   	pop    esi
c0012f5b:	5f                   	pop    edi
c0012f5c:	c3                   	ret    

c0012f5d <Dbg::logc(char)>:
c0012f5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f61:	ba fd 03 00 00       	mov    edx,0x3fd
c0012f66:	ec                   	in     al,dx
c0012f67:	a8 20                	test   al,0x20
c0012f69:	74 fb                	je     c0012f66 <Dbg::logc(char)+0x9>
c0012f6b:	ba f8 03 00 00       	mov    edx,0x3f8
c0012f70:	88 c8                	mov    al,cl
c0012f72:	ee                   	out    dx,al
c0012f73:	c3                   	ret    

c0012f74 <Dbg::logs(char*)>:
c0012f74:	53                   	push   ebx
c0012f75:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012f79:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f7c:	84 c0                	test   al,al
c0012f7e:	74 0f                	je     c0012f8f <Dbg::logs(char*)+0x1b>
c0012f80:	50                   	push   eax
c0012f81:	43                   	inc    ebx
c0012f82:	e8 d6 ff ff ff       	call   c0012f5d <Dbg::logc(char)>
c0012f87:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f8a:	5a                   	pop    edx
c0012f8b:	84 c0                	test   al,al
c0012f8d:	75 f1                	jne    c0012f80 <Dbg::logs(char*)+0xc>
c0012f8f:	5b                   	pop    ebx
c0012f90:	c3                   	ret    

c0012f91 <Dbg::logWriteInt(unsigned int)>:
c0012f91:	83 ec 10             	sub    esp,0x10
c0012f94:	6a 0a                	push   0xa
c0012f96:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f9a:	50                   	push   eax
c0012f9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f9f:	e8 58 ff ff ff       	call   c0012efc <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012fa4:	50                   	push   eax
c0012fa5:	e8 ca ff ff ff       	call   c0012f74 <Dbg::logs(char*)>
c0012faa:	83 c4 20             	add    esp,0x20
c0012fad:	c3                   	ret    

c0012fae <Dbg::logWriteIntBase(unsigned int, int)>:
c0012fae:	83 ec 10             	sub    esp,0x10
c0012fb1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012fb5:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012fb9:	50                   	push   eax
c0012fba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fbe:	e8 39 ff ff ff       	call   c0012efc <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012fc3:	50                   	push   eax
c0012fc4:	e8 ab ff ff ff       	call   c0012f74 <Dbg::logs(char*)>
c0012fc9:	83 c4 20             	add    esp,0x20
c0012fcc:	c3                   	ret    

c0012fcd <Dbg::kprintf(char const*, ...)>:
c0012fcd:	55                   	push   ebp
c0012fce:	57                   	push   edi
c0012fcf:	56                   	push   esi
c0012fd0:	53                   	push   ebx
c0012fd1:	83 ec 0c             	sub    esp,0xc
c0012fd4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012fd8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012fdc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012fe0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012fe3:	84 c0                	test   al,al
c0012fe5:	74 4a                	je     c0013031 <Dbg::kprintf(char const*, ...)+0x64>
c0012fe7:	31 db                	xor    ebx,ebx
c0012fe9:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012fec:	3c 25                	cmp    al,0x25
c0012fee:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012ff1:	0f 85 e4 00 00 00    	jne    c00130db <Dbg::kprintf(char const*, ...)+0x10e>
c0012ff7:	83 c3 02             	add    ebx,0x2
c0012ffa:	8a 07                	mov    al,BYTE PTR [edi]
c0012ffc:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012fff:	83 e8 25             	sub    eax,0x25
c0013002:	3c 53                	cmp    al,0x53
c0013004:	0f 87 ba 00 00 00    	ja     c00130c4 <Dbg::kprintf(char const*, ...)+0xf7>
c001300a:	0f b6 c0             	movzx  eax,al
c001300d:	ff 24 85 54 ab 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd54ac]
c0013014:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013018:	89 c8                	mov    eax,ecx
c001301a:	83 c1 04             	add    ecx,0x4
c001301d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013021:	ff 30                	push   DWORD PTR [eax]
c0013023:	e8 4c ff ff ff       	call   c0012f74 <Dbg::logs(char*)>
c0013028:	58                   	pop    eax
c0013029:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001302d:	84 c0                	test   al,al
c001302f:	75 b8                	jne    c0012fe9 <Dbg::kprintf(char const*, ...)+0x1c>
c0013031:	83 c4 0c             	add    esp,0xc
c0013034:	5b                   	pop    ebx
c0013035:	5e                   	pop    esi
c0013036:	5f                   	pop    edi
c0013037:	5d                   	pop    ebp
c0013038:	c3                   	ret    
c0013039:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001303d:	89 d0                	mov    eax,edx
c001303f:	83 c2 04             	add    edx,0x4
c0013042:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013046:	ff 30                	push   DWORD PTR [eax]
c0013048:	e8 44 ff ff ff       	call   c0012f91 <Dbg::logWriteInt(unsigned int)>
c001304d:	58                   	pop    eax
c001304e:	eb d9                	jmp    c0013029 <Dbg::kprintf(char const*, ...)+0x5c>
c0013050:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013054:	89 d0                	mov    eax,edx
c0013056:	83 c2 04             	add    edx,0x4
c0013059:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001305c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013060:	50                   	push   eax
c0013061:	e8 f7 fe ff ff       	call   c0012f5d <Dbg::logc(char)>
c0013066:	58                   	pop    eax
c0013067:	eb c0                	jmp    c0013029 <Dbg::kprintf(char const*, ...)+0x5c>
c0013069:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001306d:	89 c8                	mov    eax,ecx
c001306f:	83 c1 04             	add    ecx,0x4
c0013072:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013076:	ff 30                	push   DWORD PTR [eax]
c0013078:	e8 14 ff ff ff       	call   c0012f91 <Dbg::logWriteInt(unsigned int)>
c001307d:	5f                   	pop    edi
c001307e:	eb a9                	jmp    c0013029 <Dbg::kprintf(char const*, ...)+0x5c>
c0013080:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013084:	89 c8                	mov    eax,ecx
c0013086:	83 c1 04             	add    ecx,0x4
c0013089:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001308d:	6a 10                	push   0x10
c001308f:	ff 30                	push   DWORD PTR [eax]
c0013091:	e8 18 ff ff ff       	call   c0012fae <Dbg::logWriteIntBase(unsigned int, int)>
c0013096:	59                   	pop    ecx
c0013097:	5f                   	pop    edi
c0013098:	eb 8f                	jmp    c0013029 <Dbg::kprintf(char const*, ...)+0x5c>
c001309a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001309e:	89 d0                	mov    eax,edx
c00130a0:	83 c2 08             	add    edx,0x8
c00130a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00130a7:	6a 10                	push   0x10
c00130a9:	ff 30                	push   DWORD PTR [eax]
c00130ab:	e8 fe fe ff ff       	call   c0012fae <Dbg::logWriteIntBase(unsigned int, int)>
c00130b0:	58                   	pop    eax
c00130b1:	5a                   	pop    edx
c00130b2:	e9 72 ff ff ff       	jmp    c0013029 <Dbg::kprintf(char const*, ...)+0x5c>
c00130b7:	6a 25                	push   0x25
c00130b9:	e8 9f fe ff ff       	call   c0012f5d <Dbg::logc(char)>
c00130be:	58                   	pop    eax
c00130bf:	e9 65 ff ff ff       	jmp    c0013029 <Dbg::kprintf(char const*, ...)+0x5c>
c00130c4:	6a 25                	push   0x25
c00130c6:	e8 92 fe ff ff       	call   c0012f5d <Dbg::logc(char)>
c00130cb:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00130ce:	50                   	push   eax
c00130cf:	e8 89 fe ff ff       	call   c0012f5d <Dbg::logc(char)>
c00130d4:	5a                   	pop    edx
c00130d5:	59                   	pop    ecx
c00130d6:	e9 4e ff ff ff       	jmp    c0013029 <Dbg::kprintf(char const*, ...)+0x5c>
c00130db:	50                   	push   eax
c00130dc:	89 eb                	mov    ebx,ebp
c00130de:	e8 7a fe ff ff       	call   c0012f5d <Dbg::logc(char)>
c00130e3:	89 fd                	mov    ebp,edi
c00130e5:	58                   	pop    eax
c00130e6:	e9 3e ff ff ff       	jmp    c0013029 <Dbg::kprintf(char const*, ...)+0x5c>
c00130eb:	90                   	nop

c00130ec <File::read(unsigned long long, void*, int*)>:
c00130ec:	53                   	push   ebx
c00130ed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130f5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130fc:	3c 19                	cmp    al,0x19
c00130fe:	77 35                	ja     c0013135 <File::read(unsigned long long, void*, int*)+0x49>
c0013100:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c0013107:	85 c0                	test   eax,eax
c0013109:	74 2a                	je     c0013135 <File::read(unsigned long long, void*, int*)+0x49>
c001310b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013111:	85 c0                	test   eax,eax
c0013113:	74 20                	je     c0013135 <File::read(unsigned long long, void*, int*)+0x49>
c0013115:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013119:	74 21                	je     c001313c <File::read(unsigned long long, void*, int*)+0x50>
c001311b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001311d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013121:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013127:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001312b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001312f:	5b                   	pop    ebx
c0013130:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0013133:	ff e0                	jmp    eax
c0013135:	b8 0b 00 00 00       	mov    eax,0xb
c001313a:	eb 05                	jmp    c0013141 <File::read(unsigned long long, void*, int*)+0x55>
c001313c:	b8 05 00 00 00       	mov    eax,0x5
c0013141:	5b                   	pop    ebx
c0013142:	c3                   	ret    
c0013143:	90                   	nop

c0013144 <File::write(unsigned long long, void*, int*)>:
c0013144:	53                   	push   ebx
c0013145:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013149:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001314d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013154:	3c 19                	cmp    al,0x19
c0013156:	77 35                	ja     c001318d <File::write(unsigned long long, void*, int*)+0x49>
c0013158:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c001315f:	85 c0                	test   eax,eax
c0013161:	74 2a                	je     c001318d <File::write(unsigned long long, void*, int*)+0x49>
c0013163:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013169:	85 c0                	test   eax,eax
c001316b:	74 20                	je     c001318d <File::write(unsigned long long, void*, int*)+0x49>
c001316d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013171:	74 21                	je     c0013194 <File::write(unsigned long long, void*, int*)+0x50>
c0013173:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013175:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013179:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001317f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013183:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013187:	5b                   	pop    ebx
c0013188:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001318b:	ff e0                	jmp    eax
c001318d:	b8 0b 00 00 00       	mov    eax,0xb
c0013192:	eb 05                	jmp    c0013199 <File::write(unsigned long long, void*, int*)+0x55>
c0013194:	b8 05 00 00 00       	mov    eax,0x5
c0013199:	5b                   	pop    ebx
c001319a:	c3                   	ret    
c001319b:	90                   	nop

c001319c <Directory::read(unsigned long long, void*, int*)>:
c001319c:	53                   	push   ebx
c001319d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00131a5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00131ac:	3c 19                	cmp    al,0x19
c00131ae:	77 35                	ja     c00131e5 <Directory::read(unsigned long long, void*, int*)+0x49>
c00131b0:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c00131b7:	85 c0                	test   eax,eax
c00131b9:	74 2a                	je     c00131e5 <Directory::read(unsigned long long, void*, int*)+0x49>
c00131bb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00131c1:	85 c0                	test   eax,eax
c00131c3:	74 20                	je     c00131e5 <Directory::read(unsigned long long, void*, int*)+0x49>
c00131c5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131c9:	74 21                	je     c00131ec <Directory::read(unsigned long long, void*, int*)+0x50>
c00131cb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00131cd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00131d1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00131d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00131db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00131df:	5b                   	pop    ebx
c00131e0:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00131e3:	ff e0                	jmp    eax
c00131e5:	b8 0b 00 00 00       	mov    eax,0xb
c00131ea:	eb 05                	jmp    c00131f1 <Directory::read(unsigned long long, void*, int*)+0x55>
c00131ec:	b8 05 00 00 00       	mov    eax,0x5
c00131f1:	5b                   	pop    ebx
c00131f2:	c3                   	ret    
c00131f3:	90                   	nop

c00131f4 <Directory::write(unsigned long long, void*, int*)>:
c00131f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131f8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00131ff:	b8 0b 00 00 00       	mov    eax,0xb
c0013204:	80 fa 19             	cmp    dl,0x19
c0013207:	77 18                	ja     c0013221 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013209:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c0013210:	85 d2                	test   edx,edx
c0013212:	74 0d                	je     c0013221 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013214:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001321b:	19 c0                	sbb    eax,eax
c001321d:	83 e0 0a             	and    eax,0xa
c0013220:	40                   	inc    eax
c0013221:	c3                   	ret    

c0013222 <File::isAtty()>:
c0013222:	31 c0                	xor    eax,eax
c0013224:	c3                   	ret    
c0013225:	90                   	nop

c0013226 <Directory::isAtty()>:
c0013226:	31 c0                	xor    eax,eax
c0013228:	c3                   	ret    
c0013229:	90                   	nop

c001322a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001322a:	b8 0a 00 00 00       	mov    eax,0xa
c001322f:	c3                   	ret    

c0013230 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013230:	b8 0a 00 00 00       	mov    eax,0xa
c0013235:	c3                   	ret    

c0013236 <File::~File()>:
c0013236:	83 ec 0c             	sub    esp,0xc
c0013239:	ba 10 ad 02 c0       	mov    edx,0xc002ad10
c001323e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013242:	89 10                	mov    DWORD PTR [eax],edx
c0013244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013248:	83 ec 0c             	sub    esp,0xc
c001324b:	50                   	push   eax
c001324c:	e8 0b e7 ff ff       	call   c001195c <UnixFile::~UnixFile()>
c0013251:	83 c4 10             	add    esp,0x10
c0013254:	90                   	nop
c0013255:	83 c4 0c             	add    esp,0xc
c0013258:	c3                   	ret    
c0013259:	90                   	nop

c001325a <File::~File()>:
c001325a:	83 ec 0c             	sub    esp,0xc
c001325d:	83 ec 0c             	sub    esp,0xc
c0013260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013264:	e8 cd ff ff ff       	call   c0013236 <File::~File()>
c0013269:	83 c4 10             	add    esp,0x10
c001326c:	83 ec 08             	sub    esp,0x8
c001326f:	68 14 01 00 00       	push   0x114
c0013274:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013278:	e8 70 fc ff ff       	call   c0012eed <operator delete(void*, unsigned long)>
c001327d:	83 c4 10             	add    esp,0x10
c0013280:	83 c4 0c             	add    esp,0xc
c0013283:	c3                   	ret    

c0013284 <Directory::~Directory()>:
c0013284:	83 ec 0c             	sub    esp,0xc
c0013287:	ba 2c ad 02 c0       	mov    edx,0xc002ad2c
c001328c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013290:	89 10                	mov    DWORD PTR [eax],edx
c0013292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013296:	83 ec 0c             	sub    esp,0xc
c0013299:	50                   	push   eax
c001329a:	e8 bd e6 ff ff       	call   c001195c <UnixFile::~UnixFile()>
c001329f:	83 c4 10             	add    esp,0x10
c00132a2:	90                   	nop
c00132a3:	83 c4 0c             	add    esp,0xc
c00132a6:	c3                   	ret    
c00132a7:	90                   	nop

c00132a8 <Directory::~Directory()>:
c00132a8:	83 ec 0c             	sub    esp,0xc
c00132ab:	83 ec 0c             	sub    esp,0xc
c00132ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132b2:	e8 cd ff ff ff       	call   c0013284 <Directory::~Directory()>
c00132b7:	83 c4 10             	add    esp,0x10
c00132ba:	83 ec 08             	sub    esp,0x8
c00132bd:	68 14 01 00 00       	push   0x114
c00132c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132c6:	e8 22 fc ff ff       	call   c0012eed <operator delete(void*, unsigned long)>
c00132cb:	83 c4 10             	add    esp,0x10
c00132ce:	83 c4 0c             	add    esp,0xc
c00132d1:	c3                   	ret    

c00132d2 <Filesystem::Filesystem()>:
c00132d2:	ba ac ac 02 c0       	mov    edx,0xc002acac
c00132d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132db:	89 10                	mov    DWORD PTR [eax],edx
c00132dd:	8b 15 cc e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e7cc
c00132e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132e7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00132ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132ee:	a3 cc e7 02 c0       	mov    ds:0xc002e7cc,eax
c00132f3:	90                   	nop
c00132f4:	c3                   	ret    
c00132f5:	90                   	nop

c00132f6 <Filesystem::~Filesystem()>:
c00132f6:	ba ac ac 02 c0       	mov    edx,0xc002acac
c00132fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132ff:	89 10                	mov    DWORD PTR [eax],edx
c0013301:	90                   	nop
c0013302:	c3                   	ret    
c0013303:	90                   	nop

c0013304 <Filesystem::~Filesystem()>:
c0013304:	83 ec 0c             	sub    esp,0xc
c0013307:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001330b:	e8 e6 ff ff ff       	call   c00132f6 <Filesystem::~Filesystem()>
c0013310:	83 c4 04             	add    esp,0x4
c0013313:	83 ec 08             	sub    esp,0x8
c0013316:	6a 08                	push   0x8
c0013318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001331c:	e8 cc fb ff ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0013321:	83 c4 10             	add    esp,0x10
c0013324:	83 c4 0c             	add    esp,0xc
c0013327:	c3                   	ret    

c0013328 <Fs::getcwd(Process*, char*, int)>:
c0013328:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001332c:	31 c0                	xor    eax,eax
c001332e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013331:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013335:	7d 15                	jge    c001334c <Fs::getcwd(Process*, char*, int)+0x24>
c0013337:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001333b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0013342:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013345:	84 c9                	test   cl,cl
c0013347:	74 06                	je     c001334f <Fs::getcwd(Process*, char*, int)+0x27>
c0013349:	40                   	inc    eax
c001334a:	eb e2                	jmp    c001332e <Fs::getcwd(Process*, char*, int)+0x6>
c001334c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001334f:	31 c0                	xor    eax,eax
c0013351:	c3                   	ret    

c0013352 <Fs::initVFS()>:
c0013352:	83 ec 18             	sub    esp,0x18
c0013355:	6a 08                	push   0x8
c0013357:	e8 e4 c4 ff ff       	call   c000f840 <malloc>
c001335c:	89 04 24             	mov    DWORD PTR [esp],eax
c001335f:	e8 a4 dc 00 00       	call   c0021008 <FAT::FAT()>
c0013364:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001336b:	e8 d0 c4 ff ff       	call   c000f840 <malloc>
c0013370:	89 04 24             	mov    DWORD PTR [esp],eax
c0013373:	e8 e8 ee 00 00       	call   c0022260 <ISO9660::ISO9660()>
c0013378:	83 c4 1c             	add    esp,0x1c
c001337b:	c3                   	ret    

c001337c <Fs::standardiseFiles(char*, char const*, char const*)>:
c001337c:	55                   	push   ebp
c001337d:	57                   	push   edi
c001337e:	56                   	push   esi
c001337f:	53                   	push   ebx
c0013380:	81 ec 10 04 00 00    	sub    esp,0x410
c0013386:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c001338d:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013394:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c001339b:	68 00 04 00 00       	push   0x400
c00133a0:	6a 00                	push   0x0
c00133a2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00133a6:	56                   	push   esi
c00133a7:	e8 cc d3 fe ff       	call   c0000778 <memset>
c00133ac:	83 c4 10             	add    esp,0x10
c00133af:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00133b3:	75 0b                	jne    c00133c0 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00133b5:	50                   	push   eax
c00133b6:	50                   	push   eax
c00133b7:	57                   	push   edi
c00133b8:	56                   	push   esi
c00133b9:	e8 76 d4 fe ff       	call   c0000834 <strcpy>
c00133be:	eb 41                	jmp    c0013401 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00133c0:	8a 07                	mov    al,BYTE PTR [edi]
c00133c2:	3c 5c                	cmp    al,0x5c
c00133c4:	74 04                	je     c00133ca <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00133c6:	3c 2f                	cmp    al,0x2f
c00133c8:	75 18                	jne    c00133e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00133ca:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00133cd:	3c 60                	cmp    al,0x60
c00133cf:	7e 03                	jle    c00133d4 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00133d1:	83 e8 20             	sub    eax,0x20
c00133d4:	88 04 24             	mov    BYTE PTR [esp],al
c00133d7:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00133de:	50                   	push   eax
c00133df:	50                   	push   eax
c00133e0:	eb 18                	jmp    c00133fa <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00133e2:	50                   	push   eax
c00133e3:	50                   	push   eax
c00133e4:	55                   	push   ebp
c00133e5:	56                   	push   esi
c00133e6:	e8 49 d4 fe ff       	call   c0000834 <strcpy>
c00133eb:	5a                   	pop    edx
c00133ec:	59                   	pop    ecx
c00133ed:	68 34 c4 02 c0       	push   0xc002c434
c00133f2:	56                   	push   esi
c00133f3:	e8 7c d5 fe ff       	call   c0000974 <strcat>
c00133f8:	5d                   	pop    ebp
c00133f9:	58                   	pop    eax
c00133fa:	57                   	push   edi
c00133fb:	56                   	push   esi
c00133fc:	e8 73 d5 fe ff       	call   c0000974 <strcat>
c0013401:	83 c4 10             	add    esp,0x10
c0013404:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013407:	3c 60                	cmp    al,0x60
c0013409:	7e 03                	jle    c001340e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c001340b:	83 e8 20             	sub    eax,0x20
c001340e:	88 04 24             	mov    BYTE PTR [esp],al
c0013411:	88 03                	mov    BYTE PTR [ebx],al
c0013413:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001341a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0013420:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013424:	bf 03 00 00 00       	mov    edi,0x3
c0013429:	b8 03 00 00 00       	mov    eax,0x3
c001342e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0013431:	84 d2                	test   dl,dl
c0013433:	0f 84 91 00 00 00    	je     c00134ca <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013439:	8d 4f 01             	lea    ecx,[edi+0x1]
c001343c:	80 fa 5c             	cmp    dl,0x5c
c001343f:	74 05                	je     c0013446 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0013441:	80 fa 2f             	cmp    dl,0x2f
c0013444:	75 12                	jne    c0013458 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013446:	89 c5                	mov    ebp,eax
c0013448:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001344d:	74 09                	je     c0013458 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001344f:	40                   	inc    eax
c0013450:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013454:	89 cf                	mov    edi,ecx
c0013456:	eb d6                	jmp    c001342e <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013458:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001345d:	75 5b                	jne    c00134ba <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001345f:	80 fa 2e             	cmp    dl,0x2e
c0013462:	75 56                	jne    c00134ba <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013464:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013468:	74 19                	je     c0013483 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c001346a:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001346f:	74 53                	je     c00134c4 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013471:	89 f9                	mov    ecx,edi
c0013473:	41                   	inc    ecx
c0013474:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013477:	80 fa 2f             	cmp    dl,0x2f
c001347a:	74 f7                	je     c0013473 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001347c:	80 fa 5c             	cmp    dl,0x5c
c001347f:	74 f2                	je     c0013473 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013481:	eb d1                	jmp    c0013454 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013483:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013488:	74 3a                	je     c00134c4 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001348a:	83 f8 03             	cmp    eax,0x3
c001348d:	74 c5                	je     c0013454 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001348f:	41                   	inc    ecx
c0013490:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013493:	80 fa 2f             	cmp    dl,0x2f
c0013496:	74 f7                	je     c001348f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013498:	80 fa 5c             	cmp    dl,0x5c
c001349b:	74 f2                	je     c001348f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001349d:	48                   	dec    eax
c001349e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00134a2:	75 06                	jne    c00134aa <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00134a4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00134a8:	eb f3                	jmp    c001349d <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00134aa:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00134ae:	74 07                	je     c00134b7 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00134b0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00134b4:	48                   	dec    eax
c00134b5:	eb f3                	jmp    c00134aa <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00134b7:	40                   	inc    eax
c00134b8:	eb 9a                	jmp    c0013454 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134ba:	80 fa 2f             	cmp    dl,0x2f
c00134bd:	74 95                	je     c0013454 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134bf:	80 fa 5c             	cmp    dl,0x5c
c00134c2:	74 90                	je     c0013454 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134c4:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00134c7:	40                   	inc    eax
c00134c8:	eb 8a                	jmp    c0013454 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134ca:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00134ce:	83 ec 0c             	sub    esp,0xc
c00134d1:	53                   	push   ebx
c00134d2:	e8 bd d2 fe ff       	call   c0000794 <strlen>
c00134d7:	83 c4 10             	add    esp,0x10
c00134da:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00134df:	75 26                	jne    c0013507 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00134e1:	83 ec 0c             	sub    esp,0xc
c00134e4:	53                   	push   ebx
c00134e5:	e8 aa d2 fe ff       	call   c0000794 <strlen>
c00134ea:	83 c4 10             	add    esp,0x10
c00134ed:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00134f2:	74 26                	je     c001351a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00134f4:	83 ec 0c             	sub    esp,0xc
c00134f7:	53                   	push   ebx
c00134f8:	e8 97 d2 fe ff       	call   c0000794 <strlen>
c00134fd:	83 c4 10             	add    esp,0x10
c0013500:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013505:	eb c7                	jmp    c00134ce <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013507:	83 ec 0c             	sub    esp,0xc
c001350a:	53                   	push   ebx
c001350b:	e8 84 d2 fe ff       	call   c0000794 <strlen>
c0013510:	83 c4 10             	add    esp,0x10
c0013513:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013518:	74 c7                	je     c00134e1 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c001351a:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013520:	5b                   	pop    ebx
c0013521:	5e                   	pop    esi
c0013522:	5f                   	pop    edi
c0013523:	5d                   	pop    ebp
c0013524:	c3                   	ret    
c0013525:	90                   	nop

c0013526 <File::File(char const*, Process*)>:
c0013526:	83 ec 0c             	sub    esp,0xc
c0013529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001352d:	83 ec 08             	sub    esp,0x8
c0013530:	6a 00                	push   0x0
c0013532:	50                   	push   eax
c0013533:	e8 42 e2 ff ff       	call   c001177a <UnixFile::UnixFile(int)>
c0013538:	83 c4 10             	add    esp,0x10
c001353b:	ba 10 ad 02 c0       	mov    edx,0xc002ad10
c0013540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013544:	89 10                	mov    DWORD PTR [eax],edx
c0013546:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001354a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013554:	83 c0 0d             	add    eax,0xd
c0013557:	83 ec 04             	sub    esp,0x4
c001355a:	52                   	push   edx
c001355b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001355f:	50                   	push   eax
c0013560:	e8 17 fe ff ff       	call   c001337c <Fs::standardiseFiles(char*, char const*, char const*)>
c0013565:	83 c4 10             	add    esp,0x10
c0013568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001356c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001356f:	8d 50 bf             	lea    edx,[eax-0x41]
c0013572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013576:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001357c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013580:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013584:	90                   	nop
c0013585:	83 c4 0c             	add    esp,0xc
c0013588:	c3                   	ret    
c0013589:	90                   	nop

c001358a <File::open(FileOpenMode)>:
c001358a:	53                   	push   ebx
c001358b:	b8 0b 00 00 00       	mov    eax,0xb
c0013590:	83 ec 08             	sub    esp,0x8
c0013593:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013597:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001359e:	80 fa 19             	cmp    dl,0x19
c00135a1:	77 40                	ja     c00135e3 <File::open(FileOpenMode)+0x59>
c00135a3:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c00135aa:	85 d2                	test   edx,edx
c00135ac:	74 35                	je     c00135e3 <File::open(FileOpenMode)+0x59>
c00135ae:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135b4:	85 d2                	test   edx,edx
c00135b6:	74 2b                	je     c00135e3 <File::open(FileOpenMode)+0x59>
c00135b8:	b8 06 00 00 00       	mov    eax,0x6
c00135bd:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00135c1:	75 20                	jne    c00135e3 <File::open(FileOpenMode)+0x59>
c00135c3:	8b 02                	mov    eax,DWORD PTR [edx]
c00135c5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00135cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00135cf:	51                   	push   ecx
c00135d0:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00135d3:	51                   	push   ecx
c00135d4:	52                   	push   edx
c00135d5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00135d8:	83 c4 10             	add    esp,0x10
c00135db:	85 c0                	test   eax,eax
c00135dd:	75 04                	jne    c00135e3 <File::open(FileOpenMode)+0x59>
c00135df:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00135e3:	83 c4 08             	add    esp,0x8
c00135e6:	5b                   	pop    ebx
c00135e7:	c3                   	ret    

c00135e8 <File::close()>:
c00135e8:	53                   	push   ebx
c00135e9:	b8 0b 00 00 00       	mov    eax,0xb
c00135ee:	83 ec 08             	sub    esp,0x8
c00135f1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135f5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135fc:	80 fa 19             	cmp    dl,0x19
c00135ff:	77 41                	ja     c0013642 <File::close()+0x5a>
c0013601:	8b 1c 95 60 ec 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd13a0]
c0013608:	85 db                	test   ebx,ebx
c001360a:	74 36                	je     c0013642 <File::close()+0x5a>
c001360c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013613:	74 2d                	je     c0013642 <File::close()+0x5a>
c0013615:	b8 05 00 00 00       	mov    eax,0x5
c001361a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001361e:	74 22                	je     c0013642 <File::close()+0x5a>
c0013620:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013624:	8b 04 95 60 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd13a0]
c001362b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013631:	53                   	push   ebx
c0013632:	53                   	push   ebx
c0013633:	8b 10                	mov    edx,DWORD PTR [eax]
c0013635:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001363b:	50                   	push   eax
c001363c:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001363f:	83 c4 10             	add    esp,0x10
c0013642:	83 c4 08             	add    esp,0x8
c0013645:	5b                   	pop    ebx
c0013646:	c3                   	ret    
c0013647:	90                   	nop

c0013648 <File::seek(unsigned long long)>:
c0013648:	56                   	push   esi
c0013649:	53                   	push   ebx
c001364a:	b8 0b 00 00 00       	mov    eax,0xb
c001364f:	51                   	push   ecx
c0013650:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013654:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013658:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001365f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013663:	80 fa 19             	cmp    dl,0x19
c0013666:	77 31                	ja     c0013699 <File::seek(unsigned long long)+0x51>
c0013668:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c001366f:	85 d2                	test   edx,edx
c0013671:	74 26                	je     c0013699 <File::seek(unsigned long long)+0x51>
c0013673:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013679:	85 d2                	test   edx,edx
c001367b:	74 1c                	je     c0013699 <File::seek(unsigned long long)+0x51>
c001367d:	b8 05 00 00 00       	mov    eax,0x5
c0013682:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013686:	74 11                	je     c0013699 <File::seek(unsigned long long)+0x51>
c0013688:	8b 02                	mov    eax,DWORD PTR [edx]
c001368a:	53                   	push   ebx
c001368b:	51                   	push   ecx
c001368c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013692:	52                   	push   edx
c0013693:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013696:	83 c4 10             	add    esp,0x10
c0013699:	5a                   	pop    edx
c001369a:	5b                   	pop    ebx
c001369b:	5e                   	pop    esi
c001369c:	c3                   	ret    
c001369d:	90                   	nop

c001369e <File::tell(unsigned long long*)>:
c001369e:	83 ec 0c             	sub    esp,0xc
c00136a1:	b8 0b 00 00 00       	mov    eax,0xb
c00136a6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00136aa:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00136b1:	80 fa 19             	cmp    dl,0x19
c00136b4:	77 34                	ja     c00136ea <File::tell(unsigned long long*)+0x4c>
c00136b6:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c00136bd:	85 d2                	test   edx,edx
c00136bf:	74 29                	je     c00136ea <File::tell(unsigned long long*)+0x4c>
c00136c1:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00136c7:	85 d2                	test   edx,edx
c00136c9:	74 1f                	je     c00136ea <File::tell(unsigned long long*)+0x4c>
c00136cb:	b8 05 00 00 00       	mov    eax,0x5
c00136d0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00136d4:	74 14                	je     c00136ea <File::tell(unsigned long long*)+0x4c>
c00136d6:	50                   	push   eax
c00136d7:	8b 02                	mov    eax,DWORD PTR [edx]
c00136d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136dd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00136e3:	52                   	push   edx
c00136e4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00136e7:	83 c4 10             	add    esp,0x10
c00136ea:	83 c4 0c             	add    esp,0xc
c00136ed:	c3                   	ret    

c00136ee <File::rewind()>:
c00136ee:	83 ec 10             	sub    esp,0x10
c00136f1:	6a 00                	push   0x0
c00136f3:	6a 00                	push   0x0
c00136f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136f9:	e8 4a ff ff ff       	call   c0013648 <File::seek(unsigned long long)>
c00136fe:	83 c4 1c             	add    esp,0x1c
c0013701:	c3                   	ret    

c0013702 <File::unlink()>:
c0013702:	83 ec 0c             	sub    esp,0xc
c0013705:	b8 0b 00 00 00       	mov    eax,0xb
c001370a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001370e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013715:	80 f9 19             	cmp    cl,0x19
c0013718:	77 2f                	ja     c0013749 <File::unlink()+0x47>
c001371a:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0013721:	85 c9                	test   ecx,ecx
c0013723:	74 24                	je     c0013749 <File::unlink()+0x47>
c0013725:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001372b:	85 c9                	test   ecx,ecx
c001372d:	74 1a                	je     c0013749 <File::unlink()+0x47>
c001372f:	b8 06 00 00 00       	mov    eax,0x6
c0013734:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013738:	75 0f                	jne    c0013749 <File::unlink()+0x47>
c001373a:	83 c2 0d             	add    edx,0xd
c001373d:	50                   	push   eax
c001373e:	50                   	push   eax
c001373f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013741:	52                   	push   edx
c0013742:	51                   	push   ecx
c0013743:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013746:	83 c4 10             	add    esp,0x10
c0013749:	83 c4 0c             	add    esp,0xc
c001374c:	c3                   	ret    
c001374d:	90                   	nop

c001374e <File::rename(char const*)>:
c001374e:	83 ec 0c             	sub    esp,0xc
c0013751:	b8 0b 00 00 00       	mov    eax,0xb
c0013756:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001375a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013761:	80 f9 19             	cmp    cl,0x19
c0013764:	77 32                	ja     c0013798 <File::rename(char const*)+0x4a>
c0013766:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c001376d:	85 c9                	test   ecx,ecx
c001376f:	74 27                	je     c0013798 <File::rename(char const*)+0x4a>
c0013771:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013777:	85 c9                	test   ecx,ecx
c0013779:	74 1d                	je     c0013798 <File::rename(char const*)+0x4a>
c001377b:	b8 06 00 00 00       	mov    eax,0x6
c0013780:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013784:	75 12                	jne    c0013798 <File::rename(char const*)+0x4a>
c0013786:	83 c2 0d             	add    edx,0xd
c0013789:	50                   	push   eax
c001378a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001378c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013790:	52                   	push   edx
c0013791:	51                   	push   ecx
c0013792:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013795:	83 c4 10             	add    esp,0x10
c0013798:	83 c4 0c             	add    esp,0xc
c001379b:	c3                   	ret    

c001379c <File::chfatattr(unsigned char, unsigned char)>:
c001379c:	57                   	push   edi
c001379d:	b8 0b 00 00 00       	mov    eax,0xb
c00137a2:	56                   	push   esi
c00137a3:	53                   	push   ebx
c00137a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137a8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00137ac:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137b3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00137b7:	80 f9 19             	cmp    cl,0x19
c00137ba:	77 37                	ja     c00137f3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137bc:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c00137c3:	85 c9                	test   ecx,ecx
c00137c5:	74 2c                	je     c00137f3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137c7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137cd:	85 c9                	test   ecx,ecx
c00137cf:	74 22                	je     c00137f3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137d1:	b8 06 00 00 00       	mov    eax,0x6
c00137d6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137da:	75 17                	jne    c00137f3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137dc:	8b 39                	mov    edi,DWORD PTR [ecx]
c00137de:	89 f0                	mov    eax,esi
c00137e0:	83 c2 0d             	add    edx,0xd
c00137e3:	0f b6 f0             	movzx  esi,al
c00137e6:	0f b6 db             	movzx  ebx,bl
c00137e9:	56                   	push   esi
c00137ea:	53                   	push   ebx
c00137eb:	52                   	push   edx
c00137ec:	51                   	push   ecx
c00137ed:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00137f0:	83 c4 10             	add    esp,0x10
c00137f3:	5b                   	pop    ebx
c00137f4:	5e                   	pop    esi
c00137f5:	5f                   	pop    edi
c00137f6:	c3                   	ret    
c00137f7:	90                   	nop

c00137f8 <File::exists()>:
c00137f8:	83 ec 0c             	sub    esp,0xc
c00137fb:	31 c0                	xor    eax,eax
c00137fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013801:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013808:	80 f9 19             	cmp    cl,0x19
c001380b:	77 24                	ja     c0013831 <File::exists()+0x39>
c001380d:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0013814:	85 c9                	test   ecx,ecx
c0013816:	74 19                	je     c0013831 <File::exists()+0x39>
c0013818:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001381e:	85 c9                	test   ecx,ecx
c0013820:	74 0f                	je     c0013831 <File::exists()+0x39>
c0013822:	83 c2 0d             	add    edx,0xd
c0013825:	50                   	push   eax
c0013826:	50                   	push   eax
c0013827:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013829:	52                   	push   edx
c001382a:	51                   	push   ecx
c001382b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001382e:	83 c4 10             	add    esp,0x10
c0013831:	83 c4 0c             	add    esp,0xc
c0013834:	c3                   	ret    
c0013835:	90                   	nop

c0013836 <File::stat(unsigned long long*, bool*)>:
c0013836:	56                   	push   esi
c0013837:	53                   	push   ebx
c0013838:	50                   	push   eax
c0013839:	b8 0b 00 00 00       	mov    eax,0xb
c001383e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013842:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013846:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001384d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013851:	80 f9 19             	cmp    cl,0x19
c0013854:	77 3d                	ja     c0013893 <File::stat(unsigned long long*, bool*)+0x5d>
c0013856:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c001385d:	85 c9                	test   ecx,ecx
c001385f:	74 32                	je     c0013893 <File::stat(unsigned long long*, bool*)+0x5d>
c0013861:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013867:	85 c9                	test   ecx,ecx
c0013869:	74 28                	je     c0013893 <File::stat(unsigned long long*, bool*)+0x5d>
c001386b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001386d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013871:	74 13                	je     c0013886 <File::stat(unsigned long long*, bool*)+0x50>
c0013873:	83 ec 04             	sub    esp,0x4
c0013876:	56                   	push   esi
c0013877:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001387d:	51                   	push   ecx
c001387e:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013881:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013884:	eb 0a                	jmp    c0013890 <File::stat(unsigned long long*, bool*)+0x5a>
c0013886:	53                   	push   ebx
c0013887:	83 c2 0d             	add    edx,0xd
c001388a:	56                   	push   esi
c001388b:	52                   	push   edx
c001388c:	51                   	push   ecx
c001388d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013890:	83 c4 10             	add    esp,0x10
c0013893:	5a                   	pop    edx
c0013894:	5b                   	pop    ebx
c0013895:	5e                   	pop    esi
c0013896:	c3                   	ret    

c0013897 <Fs::setcwd(Process*, char*)>:
c0013897:	55                   	push   ebp
c0013898:	57                   	push   edi
c0013899:	56                   	push   esi
c001389a:	53                   	push   ebx
c001389b:	81 ec 20 02 00 00    	sub    esp,0x220
c00138a1:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00138a8:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00138ae:	57                   	push   edi
c00138af:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00138b6:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00138ba:	56                   	push   esi
c00138bb:	e8 bc fa ff ff       	call   c001337c <Fs::standardiseFiles(char*, char const*, char const*)>
c00138c0:	89 34 24             	mov    DWORD PTR [esp],esi
c00138c3:	e8 cc ce fe ff       	call   c0000794 <strlen>
c00138c8:	83 c4 10             	add    esp,0x10
c00138cb:	83 f8 02             	cmp    eax,0x2
c00138ce:	77 17                	ja     c00138e7 <Fs::setcwd(Process*, char*)+0x50>
c00138d0:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00138d5:	83 e8 41             	sub    eax,0x41
c00138d8:	83 f8 19             	cmp    eax,0x19
c00138db:	76 24                	jbe    c0013901 <Fs::setcwd(Process*, char*)+0x6a>
c00138dd:	b8 03 00 00 00       	mov    eax,0x3
c00138e2:	e9 e0 00 00 00       	jmp    c00139c7 <Fs::setcwd(Process*, char*)+0x130>
c00138e7:	83 ec 0c             	sub    esp,0xc
c00138ea:	56                   	push   esi
c00138eb:	e8 a4 ce fe ff       	call   c0000794 <strlen>
c00138f0:	83 c4 10             	add    esp,0x10
c00138f3:	83 f8 03             	cmp    eax,0x3
c00138f6:	75 34                	jne    c001392c <Fs::setcwd(Process*, char*)+0x95>
c00138f8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00138fd:	75 2d                	jne    c001392c <Fs::setcwd(Process*, char*)+0x95>
c00138ff:	eb cf                	jmp    c00138d0 <Fs::setcwd(Process*, char*)+0x39>
c0013901:	8b 14 85 60 ec 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd13a0]
c0013908:	b8 05 00 00 00       	mov    eax,0x5
c001390d:	85 d2                	test   edx,edx
c001390f:	0f 84 b2 00 00 00    	je     c00139c7 <Fs::setcwd(Process*, char*)+0x130>
c0013915:	b8 06 00 00 00       	mov    eax,0x6
c001391a:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013921:	0f 85 92 00 00 00    	jne    c00139b9 <Fs::setcwd(Process*, char*)+0x122>
c0013927:	e9 9b 00 00 00       	jmp    c00139c7 <Fs::setcwd(Process*, char*)+0x130>
c001392c:	83 ec 0c             	sub    esp,0xc
c001392f:	68 14 01 00 00       	push   0x114
c0013934:	e8 07 bf ff ff       	call   c000f840 <malloc>
c0013939:	83 c4 0c             	add    esp,0xc
c001393c:	89 c3                	mov    ebx,eax
c001393e:	55                   	push   ebp
c001393f:	56                   	push   esi
c0013940:	50                   	push   eax
c0013941:	e8 e0 fb ff ff       	call   c0013526 <File::File(char const*, Process*)>
c0013946:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001394b:	83 c4 0c             	add    esp,0xc
c001394e:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013952:	50                   	push   eax
c0013953:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013957:	50                   	push   eax
c0013958:	53                   	push   ebx
c0013959:	e8 d8 fe ff ff       	call   c0013836 <File::stat(unsigned long long*, bool*)>
c001395e:	83 c4 10             	add    esp,0x10
c0013961:	83 f8 02             	cmp    eax,0x2
c0013964:	74 04                	je     c001396a <Fs::setcwd(Process*, char*)+0xd3>
c0013966:	85 c0                	test   eax,eax
c0013968:	74 1c                	je     c0013986 <Fs::setcwd(Process*, char*)+0xef>
c001396a:	b8 01 00 00 00       	mov    eax,0x1
c001396f:	85 db                	test   ebx,ebx
c0013971:	74 54                	je     c00139c7 <Fs::setcwd(Process*, char*)+0x130>
c0013973:	83 ec 0c             	sub    esp,0xc
c0013976:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013978:	53                   	push   ebx
c0013979:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001397c:	83 c4 10             	add    esp,0x10
c001397f:	b8 01 00 00 00       	mov    eax,0x1
c0013984:	eb 41                	jmp    c00139c7 <Fs::setcwd(Process*, char*)+0x130>
c0013986:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001398b:	75 1c                	jne    c00139a9 <Fs::setcwd(Process*, char*)+0x112>
c001398d:	b8 02 00 00 00       	mov    eax,0x2
c0013992:	85 db                	test   ebx,ebx
c0013994:	74 31                	je     c00139c7 <Fs::setcwd(Process*, char*)+0x130>
c0013996:	83 ec 0c             	sub    esp,0xc
c0013999:	8b 03                	mov    eax,DWORD PTR [ebx]
c001399b:	53                   	push   ebx
c001399c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001399f:	83 c4 10             	add    esp,0x10
c00139a2:	b8 02 00 00 00       	mov    eax,0x2
c00139a7:	eb 1e                	jmp    c00139c7 <Fs::setcwd(Process*, char*)+0x130>
c00139a9:	85 db                	test   ebx,ebx
c00139ab:	74 0c                	je     c00139b9 <Fs::setcwd(Process*, char*)+0x122>
c00139ad:	83 ec 0c             	sub    esp,0xc
c00139b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139b2:	53                   	push   ebx
c00139b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00139b6:	83 c4 10             	add    esp,0x10
c00139b9:	50                   	push   eax
c00139ba:	50                   	push   eax
c00139bb:	56                   	push   esi
c00139bc:	57                   	push   edi
c00139bd:	e8 72 ce fe ff       	call   c0000834 <strcpy>
c00139c2:	83 c4 10             	add    esp,0x10
c00139c5:	31 c0                	xor    eax,eax
c00139c7:	81 c4 1c 02 00 00    	add    esp,0x21c
c00139cd:	5b                   	pop    ebx
c00139ce:	5e                   	pop    esi
c00139cf:	5f                   	pop    edi
c00139d0:	5d                   	pop    ebp
c00139d1:	c3                   	ret    

c00139d2 <Directory::Directory(char const*, Process*)>:
c00139d2:	83 ec 0c             	sub    esp,0xc
c00139d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139d9:	83 ec 08             	sub    esp,0x8
c00139dc:	6a 00                	push   0x0
c00139de:	50                   	push   eax
c00139df:	e8 96 dd ff ff       	call   c001177a <UnixFile::UnixFile(int)>
c00139e4:	83 c4 10             	add    esp,0x10
c00139e7:	ba 2c ad 02 c0       	mov    edx,0xc002ad2c
c00139ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139f0:	89 10                	mov    DWORD PTR [eax],edx
c00139f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00139f6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00139fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a00:	83 c0 0d             	add    eax,0xd
c0013a03:	83 ec 04             	sub    esp,0x4
c0013a06:	52                   	push   edx
c0013a07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a0b:	50                   	push   eax
c0013a0c:	e8 6b f9 ff ff       	call   c001337c <Fs::standardiseFiles(char*, char const*, char const*)>
c0013a11:	83 c4 10             	add    esp,0x10
c0013a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a18:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013a1b:	8d 50 bf             	lea    edx,[eax-0x41]
c0013a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a22:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a2c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013a30:	90                   	nop
c0013a31:	83 c4 0c             	add    esp,0xc
c0013a34:	c3                   	ret    
c0013a35:	90                   	nop

c0013a36 <Directory::open()>:
c0013a36:	53                   	push   ebx
c0013a37:	b8 0b 00 00 00       	mov    eax,0xb
c0013a3c:	83 ec 08             	sub    esp,0x8
c0013a3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a43:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013a4a:	80 fa 19             	cmp    dl,0x19
c0013a4d:	77 3d                	ja     c0013a8c <Directory::open()+0x56>
c0013a4f:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c0013a56:	85 d2                	test   edx,edx
c0013a58:	74 32                	je     c0013a8c <Directory::open()+0x56>
c0013a5a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013a60:	85 d2                	test   edx,edx
c0013a62:	74 28                	je     c0013a8c <Directory::open()+0x56>
c0013a64:	b8 06 00 00 00       	mov    eax,0x6
c0013a69:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013a6d:	75 1d                	jne    c0013a8c <Directory::open()+0x56>
c0013a6f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013a75:	50                   	push   eax
c0013a76:	8b 02                	mov    eax,DWORD PTR [edx]
c0013a78:	51                   	push   ecx
c0013a79:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013a7c:	51                   	push   ecx
c0013a7d:	52                   	push   edx
c0013a7e:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013a81:	83 c4 10             	add    esp,0x10
c0013a84:	85 c0                	test   eax,eax
c0013a86:	75 04                	jne    c0013a8c <Directory::open()+0x56>
c0013a88:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013a8c:	83 c4 08             	add    esp,0x8
c0013a8f:	5b                   	pop    ebx
c0013a90:	c3                   	ret    
c0013a91:	90                   	nop

c0013a92 <Directory::close()>:
c0013a92:	53                   	push   ebx
c0013a93:	b8 0b 00 00 00       	mov    eax,0xb
c0013a98:	83 ec 08             	sub    esp,0x8
c0013a9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013a9f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013aa6:	80 fa 19             	cmp    dl,0x19
c0013aa9:	77 41                	ja     c0013aec <Directory::close()+0x5a>
c0013aab:	8b 1c 95 60 ec 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd13a0]
c0013ab2:	85 db                	test   ebx,ebx
c0013ab4:	74 36                	je     c0013aec <Directory::close()+0x5a>
c0013ab6:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013abd:	74 2d                	je     c0013aec <Directory::close()+0x5a>
c0013abf:	b8 05 00 00 00       	mov    eax,0x5
c0013ac4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013ac8:	74 22                	je     c0013aec <Directory::close()+0x5a>
c0013aca:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013ace:	8b 04 95 60 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd13a0]
c0013ad5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013adb:	53                   	push   ebx
c0013adc:	53                   	push   ebx
c0013add:	8b 10                	mov    edx,DWORD PTR [eax]
c0013adf:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013ae5:	50                   	push   eax
c0013ae6:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013ae9:	83 c4 10             	add    esp,0x10
c0013aec:	83 c4 08             	add    esp,0x8
c0013aef:	5b                   	pop    ebx
c0013af0:	c3                   	ret    
c0013af1:	90                   	nop

c0013af2 <Directory::unlink()>:
c0013af2:	83 ec 0c             	sub    esp,0xc
c0013af5:	b8 0b 00 00 00       	mov    eax,0xb
c0013afa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013afe:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b05:	80 f9 19             	cmp    cl,0x19
c0013b08:	77 2f                	ja     c0013b39 <Directory::unlink()+0x47>
c0013b0a:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0013b11:	85 c9                	test   ecx,ecx
c0013b13:	74 24                	je     c0013b39 <Directory::unlink()+0x47>
c0013b15:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b1b:	85 c9                	test   ecx,ecx
c0013b1d:	74 1a                	je     c0013b39 <Directory::unlink()+0x47>
c0013b1f:	b8 06 00 00 00       	mov    eax,0x6
c0013b24:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b28:	75 0f                	jne    c0013b39 <Directory::unlink()+0x47>
c0013b2a:	83 c2 0d             	add    edx,0xd
c0013b2d:	50                   	push   eax
c0013b2e:	50                   	push   eax
c0013b2f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b31:	52                   	push   edx
c0013b32:	51                   	push   ecx
c0013b33:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013b36:	83 c4 10             	add    esp,0x10
c0013b39:	83 c4 0c             	add    esp,0xc
c0013b3c:	c3                   	ret    
c0013b3d:	90                   	nop

c0013b3e <Directory::rename(char const*)>:
c0013b3e:	83 ec 0c             	sub    esp,0xc
c0013b41:	b8 0b 00 00 00       	mov    eax,0xb
c0013b46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b4a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b51:	80 f9 19             	cmp    cl,0x19
c0013b54:	77 32                	ja     c0013b88 <Directory::rename(char const*)+0x4a>
c0013b56:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0013b5d:	85 c9                	test   ecx,ecx
c0013b5f:	74 27                	je     c0013b88 <Directory::rename(char const*)+0x4a>
c0013b61:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b67:	85 c9                	test   ecx,ecx
c0013b69:	74 1d                	je     c0013b88 <Directory::rename(char const*)+0x4a>
c0013b6b:	b8 06 00 00 00       	mov    eax,0x6
c0013b70:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b74:	75 12                	jne    c0013b88 <Directory::rename(char const*)+0x4a>
c0013b76:	83 c2 0d             	add    edx,0xd
c0013b79:	50                   	push   eax
c0013b7a:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b80:	52                   	push   edx
c0013b81:	51                   	push   ecx
c0013b82:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013b85:	83 c4 10             	add    esp,0x10
c0013b88:	83 c4 0c             	add    esp,0xc
c0013b8b:	c3                   	ret    

c0013b8c <Directory::exists()>:
c0013b8c:	83 ec 0c             	sub    esp,0xc
c0013b8f:	31 c0                	xor    eax,eax
c0013b91:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b95:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b9c:	80 f9 19             	cmp    cl,0x19
c0013b9f:	77 24                	ja     c0013bc5 <Directory::exists()+0x39>
c0013ba1:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0013ba8:	85 c9                	test   ecx,ecx
c0013baa:	74 19                	je     c0013bc5 <Directory::exists()+0x39>
c0013bac:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013bb2:	85 c9                	test   ecx,ecx
c0013bb4:	74 0f                	je     c0013bc5 <Directory::exists()+0x39>
c0013bb6:	83 c2 0d             	add    edx,0xd
c0013bb9:	50                   	push   eax
c0013bba:	50                   	push   eax
c0013bbb:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bbd:	52                   	push   edx
c0013bbe:	51                   	push   ecx
c0013bbf:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013bc2:	83 c4 10             	add    esp,0x10
c0013bc5:	83 c4 0c             	add    esp,0xc
c0013bc8:	c3                   	ret    
c0013bc9:	90                   	nop

c0013bca <Directory::read(dirent*)>:
c0013bca:	83 ec 1c             	sub    esp,0x1c
c0013bcd:	b8 0b 00 00 00       	mov    eax,0xb
c0013bd2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013bd6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013bdd:	80 fa 19             	cmp    dl,0x19
c0013be0:	77 30                	ja     c0013c12 <Directory::read(dirent*)+0x48>
c0013be2:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c0013be9:	85 d2                	test   edx,edx
c0013beb:	74 25                	je     c0013c12 <Directory::read(dirent*)+0x48>
c0013bed:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013bf4:	74 1c                	je     c0013c12 <Directory::read(dirent*)+0x48>
c0013bf6:	83 ec 0c             	sub    esp,0xc
c0013bf9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bfb:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013bff:	52                   	push   edx
c0013c00:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013c04:	6a 00                	push   0x0
c0013c06:	68 10 01 00 00       	push   0x110
c0013c0b:	51                   	push   ecx
c0013c0c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c0f:	83 c4 20             	add    esp,0x20
c0013c12:	83 c4 1c             	add    esp,0x1c
c0013c15:	c3                   	ret    

c0013c16 <Directory::create()>:
c0013c16:	83 ec 0c             	sub    esp,0xc
c0013c19:	b8 0b 00 00 00       	mov    eax,0xb
c0013c1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c22:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013c29:	80 f9 19             	cmp    cl,0x19
c0013c2c:	77 2f                	ja     c0013c5d <Directory::create()+0x47>
c0013c2e:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0013c35:	85 c9                	test   ecx,ecx
c0013c37:	74 24                	je     c0013c5d <Directory::create()+0x47>
c0013c39:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013c3f:	85 c9                	test   ecx,ecx
c0013c41:	74 1a                	je     c0013c5d <Directory::create()+0x47>
c0013c43:	b8 06 00 00 00       	mov    eax,0x6
c0013c48:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013c4c:	75 0f                	jne    c0013c5d <Directory::create()+0x47>
c0013c4e:	83 c2 0d             	add    edx,0xd
c0013c51:	50                   	push   eax
c0013c52:	50                   	push   eax
c0013c53:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c55:	52                   	push   edx
c0013c56:	51                   	push   ecx
c0013c57:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013c5a:	83 c4 10             	add    esp,0x10
c0013c5d:	83 c4 0c             	add    esp,0xc
c0013c60:	c3                   	ret    
c0013c61:	90                   	nop

c0013c62 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013c62:	b8 0a 00 00 00       	mov    eax,0xa
c0013c67:	c3                   	ret    

c0013c68 <Bus::Bus(char const*)>:
c0013c68:	83 ec 0c             	sub    esp,0xc
c0013c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c6f:	83 ec 08             	sub    esp,0x8
c0013c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c76:	50                   	push   eax
c0013c77:	e8 68 09 00 00       	call   c00145e4 <Device::Device(char const*)>
c0013c7c:	83 c4 10             	add    esp,0x10
c0013c7f:	ba 48 ad 02 c0       	mov    edx,0xc002ad48
c0013c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c88:	89 10                	mov    DWORD PTR [eax],edx
c0013c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c8e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013c98:	90                   	nop
c0013c99:	83 c4 0c             	add    esp,0xc
c0013c9c:	c3                   	ret    
c0013c9d:	90                   	nop

c0013c9e <Bus::~Bus()>:
c0013c9e:	83 ec 0c             	sub    esp,0xc
c0013ca1:	ba 48 ad 02 c0       	mov    edx,0xc002ad48
c0013ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013caa:	89 10                	mov    DWORD PTR [eax],edx
c0013cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cb0:	83 ec 0c             	sub    esp,0xc
c0013cb3:	50                   	push   eax
c0013cb4:	e8 0d 06 00 00       	call   c00142c6 <Device::~Device()>
c0013cb9:	83 c4 10             	add    esp,0x10
c0013cbc:	90                   	nop
c0013cbd:	83 c4 0c             	add    esp,0xc
c0013cc0:	c3                   	ret    
c0013cc1:	90                   	nop

c0013cc2 <Bus::~Bus()>:
c0013cc2:	83 ec 0c             	sub    esp,0xc
c0013cc5:	83 ec 0c             	sub    esp,0xc
c0013cc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ccc:	e8 cd ff ff ff       	call   c0013c9e <Bus::~Bus()>
c0013cd1:	83 c4 10             	add    esp,0x10
c0013cd4:	83 ec 08             	sub    esp,0x8
c0013cd7:	68 58 01 00 00       	push   0x158
c0013cdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ce0:	e8 08 f2 ff ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0013ce5:	83 c4 10             	add    esp,0x10
c0013ce8:	83 c4 0c             	add    esp,0xc
c0013ceb:	c3                   	ret    

c0013cec <Buzzer::Buzzer(char const*)>:
c0013cec:	83 ec 0c             	sub    esp,0xc
c0013cef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cf3:	83 ec 08             	sub    esp,0x8
c0013cf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cfa:	50                   	push   eax
c0013cfb:	e8 e4 08 00 00       	call   c00145e4 <Device::Device(char const*)>
c0013d00:	83 c4 10             	add    esp,0x10
c0013d03:	ba 74 ad 02 c0       	mov    edx,0xc002ad74
c0013d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d0c:	89 10                	mov    DWORD PTR [eax],edx
c0013d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d12:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013d1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d20:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013d2a:	90                   	nop
c0013d2b:	83 c4 0c             	add    esp,0xc
c0013d2e:	c3                   	ret    
c0013d2f:	90                   	nop

c0013d30 <Buzzer::~Buzzer()>:
c0013d30:	83 ec 0c             	sub    esp,0xc
c0013d33:	ba 74 ad 02 c0       	mov    edx,0xc002ad74
c0013d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d3c:	89 10                	mov    DWORD PTR [eax],edx
c0013d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d42:	83 ec 0c             	sub    esp,0xc
c0013d45:	50                   	push   eax
c0013d46:	e8 7b 05 00 00       	call   c00142c6 <Device::~Device()>
c0013d4b:	83 c4 10             	add    esp,0x10
c0013d4e:	90                   	nop
c0013d4f:	83 c4 0c             	add    esp,0xc
c0013d52:	c3                   	ret    
c0013d53:	90                   	nop

c0013d54 <Buzzer::~Buzzer()>:
c0013d54:	83 ec 0c             	sub    esp,0xc
c0013d57:	83 ec 0c             	sub    esp,0xc
c0013d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d5e:	e8 cd ff ff ff       	call   c0013d30 <Buzzer::~Buzzer()>
c0013d63:	83 c4 10             	add    esp,0x10
c0013d66:	83 ec 08             	sub    esp,0x8
c0013d69:	68 5c 01 00 00       	push   0x15c
c0013d6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d72:	e8 76 f1 ff ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0013d77:	83 c4 10             	add    esp,0x10
c0013d7a:	83 c4 0c             	add    esp,0xc
c0013d7d:	c3                   	ret    

c0013d7e <Buzzer::stop()>:
c0013d7e:	83 ec 14             	sub    esp,0x14
c0013d81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d85:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d87:	6a 00                	push   0x0
c0013d89:	50                   	push   eax
c0013d8a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013d8d:	83 c4 1c             	add    esp,0x1c
c0013d90:	c3                   	ret    

c0013d91 <beepThread(void*)>:
c0013d91:	53                   	push   ebx
c0013d92:	83 ec 08             	sub    esp,0x8
c0013d95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d99:	e8 f8 a0 00 00       	call   c001de96 <unlockScheduler()>
c0013d9e:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013da3:	52                   	push   edx
c0013da4:	52                   	push   edx
c0013da5:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013dab:	52                   	push   edx
c0013dac:	50                   	push   eax
c0013dad:	e8 32 a6 00 00       	call   c001e3e4 <nanoSleep(unsigned long long)>
c0013db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013db5:	e8 c4 ff ff ff       	call   c0013d7e <Buzzer::stop()>
c0013dba:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013dc2:	83 c4 18             	add    esp,0x18
c0013dc5:	5b                   	pop    ebx
c0013dc6:	e9 5f a5 00 00       	jmp    c001e32a <blockTask(TaskState)>
c0013dcb:	90                   	nop

c0013dcc <Buzzer::beep(int, int, bool)>:
c0013dcc:	57                   	push   edi
c0013dcd:	56                   	push   esi
c0013dce:	53                   	push   ebx
c0013dcf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013dd3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013dd7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ddb:	52                   	push   edx
c0013ddc:	52                   	push   edx
c0013ddd:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ddf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013de3:	56                   	push   esi
c0013de4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013de7:	83 c4 10             	add    esp,0x10
c0013dea:	89 f8                	mov    eax,edi
c0013dec:	84 c0                	test   al,al
c0013dee:	74 1f                	je     c0013e0f <Buzzer::beep(int, int, bool)+0x43>
c0013df0:	50                   	push   eax
c0013df1:	50                   	push   eax
c0013df2:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013df8:	99                   	cdq    
c0013df9:	52                   	push   edx
c0013dfa:	50                   	push   eax
c0013dfb:	e8 e4 a5 00 00       	call   c001e3e4 <nanoSleep(unsigned long long)>
c0013e00:	83 c4 10             	add    esp,0x10
c0013e03:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013e07:	5b                   	pop    ebx
c0013e08:	5e                   	pop    esi
c0013e09:	5f                   	pop    edi
c0013e0a:	e9 6f ff ff ff       	jmp    c0013d7e <Buzzer::stop()>
c0013e0f:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013e15:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0013e1a:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013e22:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013e26:	c7 44 24 14 91 3d 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013d91
c0013e2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013e32:	5b                   	pop    ebx
c0013e33:	5e                   	pop    esi
c0013e34:	5f                   	pop    edi
c0013e35:	e9 8c a1 00 00       	jmp    c001dfc6 <Process::createThread(void (*)(void*), void*, int)>

c0013e3a <User::loadClockSettings(int)>:
c0013e3a:	53                   	push   ebx
c0013e3b:	83 ec 14             	sub    esp,0x14
c0013e3e:	68 14 01 00 00       	push   0x114
c0013e43:	e8 f8 b9 ff ff       	call   c000f840 <malloc>
c0013e48:	83 c4 0c             	add    esp,0xc
c0013e4b:	89 c3                	mov    ebx,eax
c0013e4d:	ff 35 b4 1b 03 c0    	push   DWORD PTR ds:0xc0031bb4
c0013e53:	68 9c ad 02 c0       	push   0xc002ad9c
c0013e58:	50                   	push   eax
c0013e59:	e8 c8 f6 ff ff       	call   c0013526 <File::File(char const*, Process*)>
c0013e5e:	58                   	pop    eax
c0013e5f:	5a                   	pop    edx
c0013e60:	6a 01                	push   0x1
c0013e62:	53                   	push   ebx
c0013e63:	e8 22 f7 ff ff       	call   c001358a <File::open(FileOpenMode)>
c0013e68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e6b:	e8 78 f7 ff ff       	call   c00135e8 <File::close()>
c0013e70:	83 c4 10             	add    esp,0x10
c0013e73:	85 db                	test   ebx,ebx
c0013e75:	74 0f                	je     c0013e86 <User::loadClockSettings(int)+0x4c>
c0013e77:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e79:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013e7d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013e80:	83 c4 08             	add    esp,0x8
c0013e83:	5b                   	pop    ebx
c0013e84:	ff e0                	jmp    eax
c0013e86:	83 c4 08             	add    esp,0x8
c0013e89:	5b                   	pop    ebx
c0013e8a:	c3                   	ret    
c0013e8b:	90                   	nop

c0013e8c <Clock::Clock(char const*)>:
c0013e8c:	83 ec 0c             	sub    esp,0xc
c0013e8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e93:	83 ec 08             	sub    esp,0x8
c0013e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e9a:	50                   	push   eax
c0013e9b:	e8 44 07 00 00       	call   c00145e4 <Device::Device(char const*)>
c0013ea0:	83 c4 10             	add    esp,0x10
c0013ea3:	ba c4 ad 02 c0       	mov    edx,0xc002adc4
c0013ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eac:	89 10                	mov    DWORD PTR [eax],edx
c0013eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eb2:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013ebc:	90                   	nop
c0013ebd:	83 c4 0c             	add    esp,0xc
c0013ec0:	c3                   	ret    
c0013ec1:	90                   	nop

c0013ec2 <Clock::~Clock()>:
c0013ec2:	83 ec 0c             	sub    esp,0xc
c0013ec5:	ba c4 ad 02 c0       	mov    edx,0xc002adc4
c0013eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ece:	89 10                	mov    DWORD PTR [eax],edx
c0013ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed4:	83 ec 0c             	sub    esp,0xc
c0013ed7:	50                   	push   eax
c0013ed8:	e8 e9 03 00 00       	call   c00142c6 <Device::~Device()>
c0013edd:	83 c4 10             	add    esp,0x10
c0013ee0:	90                   	nop
c0013ee1:	83 c4 0c             	add    esp,0xc
c0013ee4:	c3                   	ret    
c0013ee5:	90                   	nop

c0013ee6 <Clock::~Clock()>:
c0013ee6:	83 ec 0c             	sub    esp,0xc
c0013ee9:	83 ec 0c             	sub    esp,0xc
c0013eec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ef0:	e8 cd ff ff ff       	call   c0013ec2 <Clock::~Clock()>
c0013ef5:	83 c4 10             	add    esp,0x10
c0013ef8:	83 ec 08             	sub    esp,0x8
c0013efb:	68 58 01 00 00       	push   0x158
c0013f00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f04:	e8 e4 ef ff ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0013f09:	83 c4 10             	add    esp,0x10
c0013f0c:	83 c4 0c             	add    esp,0xc
c0013f0f:	c3                   	ret    

c0013f10 <Clock::timeInSecondsLocal()>:
c0013f10:	53                   	push   ebx
c0013f11:	83 ec 14             	sub    esp,0x14
c0013f14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f18:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f1a:	50                   	push   eax
c0013f1b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013f1e:	0f b6 0d d4 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e7d4
c0013f25:	03 0d d8 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e7d8
c0013f2b:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f31:	89 cb                	mov    ebx,ecx
c0013f33:	c1 fb 1f             	sar    ebx,0x1f
c0013f36:	01 c8                	add    eax,ecx
c0013f38:	11 da                	adc    edx,ebx
c0013f3a:	83 c4 10             	add    esp,0x10
c0013f3d:	31 c9                	xor    ecx,ecx
c0013f3f:	80 3d d5 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e7d5,0x0
c0013f46:	74 05                	je     c0013f4d <Clock::timeInSecondsLocal()+0x3d>
c0013f48:	b9 08 07 00 00       	mov    ecx,0x708
c0013f4d:	31 db                	xor    ebx,ebx
c0013f4f:	01 c8                	add    eax,ecx
c0013f51:	11 da                	adc    edx,ebx
c0013f53:	83 c4 08             	add    esp,0x8
c0013f56:	5b                   	pop    ebx
c0013f57:	c3                   	ret    

c0013f58 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013f58:	57                   	push   edi
c0013f59:	56                   	push   esi
c0013f5a:	53                   	push   ebx
c0013f5b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013f5f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f63:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013f65:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f69:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013f6c:	0f b6 05 d4 e7 02 c0 	movzx  eax,BYTE PTR ds:0xc002e7d4
c0013f73:	03 05 d8 e7 02 c0    	add    eax,DWORD PTR ds:0xc002e7d8
c0013f79:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013f7f:	99                   	cdq    
c0013f80:	29 c6                	sub    esi,eax
c0013f82:	19 d7                	sbb    edi,edx
c0013f84:	89 f0                	mov    eax,esi
c0013f86:	89 fa                	mov    edx,edi
c0013f88:	31 f6                	xor    esi,esi
c0013f8a:	80 3d d5 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e7d5,0x0
c0013f91:	74 05                	je     c0013f98 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013f93:	be 08 07 00 00       	mov    esi,0x708
c0013f98:	31 ff                	xor    edi,edi
c0013f9a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013f9e:	29 f0                	sub    eax,esi
c0013fa0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fa4:	19 fa                	sbb    edx,edi
c0013fa6:	89 d8                	mov    eax,ebx
c0013fa8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013fac:	5b                   	pop    ebx
c0013fad:	5e                   	pop    esi
c0013fae:	5f                   	pop    edi
c0013faf:	ff e0                	jmp    eax

c0013fb1 <datetimeToSeconds(datetime_t)>:
c0013fb1:	55                   	push   ebp
c0013fb2:	57                   	push   edi
c0013fb3:	56                   	push   esi
c0013fb4:	53                   	push   ebx
c0013fb5:	83 ec 14             	sub    esp,0x14
c0013fb8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013fbc:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013fc0:	89 d3                	mov    ebx,edx
c0013fc2:	0f b6 c6             	movzx  eax,dh
c0013fc5:	c1 eb 10             	shr    ebx,0x10
c0013fc8:	48                   	dec    eax
c0013fc9:	66 81 eb 6c 07       	sub    bx,0x76c
c0013fce:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013fd2:	0f b6 f5             	movzx  esi,ch
c0013fd5:	89 cf                	mov    edi,ecx
c0013fd7:	6b f6 3c             	imul   esi,esi,0x3c
c0013fda:	c1 ef 10             	shr    edi,0x10
c0013fdd:	0f b6 c9             	movzx  ecx,cl
c0013fe0:	89 f8                	mov    eax,edi
c0013fe2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013fe8:	0f b6 f8             	movzx  edi,al
c0013feb:	0f b6 d2             	movzx  edx,dl
c0013fee:	01 fe                	add    esi,edi
c0013ff0:	01 f1                	add    ecx,esi
c0013ff2:	0f b7 f3             	movzx  esi,bx
c0013ff5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013ff9:	c1 f9 1f             	sar    ecx,0x1f
c0013ffc:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0014001:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014005:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001400a:	8b 0c 8d 00 ae 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5200]
c0014011:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0014015:	76 29                	jbe    c0014040 <datetimeToSeconds(datetime_t)+0x8f>
c0014017:	f6 c3 03             	test   bl,0x3
c001401a:	75 24                	jne    c0014040 <datetimeToSeconds(datetime_t)+0x8f>
c001401c:	31 d2                	xor    edx,edx
c001401e:	bf 64 00 00 00       	mov    edi,0x64
c0014023:	89 d8                	mov    eax,ebx
c0014025:	66 f7 f7             	div    di
c0014028:	66 85 d2             	test   dx,dx
c001402b:	75 12                	jne    c001403f <datetimeToSeconds(datetime_t)+0x8e>
c001402d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0014033:	bf 90 01 00 00       	mov    edi,0x190
c0014038:	99                   	cdq    
c0014039:	f7 ff                	idiv   edi
c001403b:	85 d2                	test   edx,edx
c001403d:	75 01                	jne    c0014040 <datetimeToSeconds(datetime_t)+0x8f>
c001403f:	41                   	inc    ecx
c0014040:	66 83 fb 46          	cmp    bx,0x46
c0014044:	76 45                	jbe    c001408b <datetimeToSeconds(datetime_t)+0xda>
c0014046:	bb 46 00 00 00       	mov    ebx,0x46
c001404b:	bf 64 00 00 00       	mov    edi,0x64
c0014050:	bd 90 01 00 00       	mov    ebp,0x190
c0014055:	b8 6d 01 00 00       	mov    eax,0x16d
c001405a:	f6 c3 03             	test   bl,0x3
c001405d:	75 23                	jne    c0014082 <datetimeToSeconds(datetime_t)+0xd1>
c001405f:	89 d8                	mov    eax,ebx
c0014061:	99                   	cdq    
c0014062:	f7 ff                	idiv   edi
c0014064:	b8 6e 01 00 00       	mov    eax,0x16e
c0014069:	85 d2                	test   edx,edx
c001406b:	75 15                	jne    c0014082 <datetimeToSeconds(datetime_t)+0xd1>
c001406d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0014073:	99                   	cdq    
c0014074:	f7 fd                	idiv   ebp
c0014076:	83 fa 01             	cmp    edx,0x1
c0014079:	19 c0                	sbb    eax,eax
c001407b:	f7 d0                	not    eax
c001407d:	05 6e 01 00 00       	add    eax,0x16e
c0014082:	01 c1                	add    ecx,eax
c0014084:	43                   	inc    ebx
c0014085:	39 f3                	cmp    ebx,esi
c0014087:	7c cc                	jl     c0014055 <datetimeToSeconds(datetime_t)+0xa4>
c0014089:	eb 35                	jmp    c00140c0 <datetimeToSeconds(datetime_t)+0x10f>
c001408b:	74 33                	je     c00140c0 <datetimeToSeconds(datetime_t)+0x10f>
c001408d:	b8 45 00 00 00       	mov    eax,0x45
c0014092:	89 c2                	mov    edx,eax
c0014094:	83 e2 03             	and    edx,0x3
c0014097:	39 f0                	cmp    eax,esi
c0014099:	7e 0f                	jle    c00140aa <datetimeToSeconds(datetime_t)+0xf9>
c001409b:	83 fa 01             	cmp    edx,0x1
c001409e:	19 d2                	sbb    edx,edx
c00140a0:	48                   	dec    eax
c00140a1:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00140a8:	eb e8                	jmp    c0014092 <datetimeToSeconds(datetime_t)+0xe1>
c00140aa:	b8 6d 01 00 00       	mov    eax,0x16d
c00140af:	85 d2                	test   edx,edx
c00140b1:	75 0b                	jne    c00140be <datetimeToSeconds(datetime_t)+0x10d>
c00140b3:	66 83 fb 01          	cmp    bx,0x1
c00140b7:	19 c0                	sbb    eax,eax
c00140b9:	05 6e 01 00 00       	add    eax,0x16e
c00140be:	29 c1                	sub    ecx,eax
c00140c0:	b8 80 51 01 00       	mov    eax,0x15180
c00140c5:	f7 e9                	imul   ecx
c00140c7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00140cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00140cf:	83 c4 14             	add    esp,0x14
c00140d2:	5b                   	pop    ebx
c00140d3:	5e                   	pop    esi
c00140d4:	5f                   	pop    edi
c00140d5:	5d                   	pop    ebp
c00140d6:	c3                   	ret    
c00140d7:	90                   	nop

c00140d8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00140d8:	57                   	push   edi
c00140d9:	56                   	push   esi
c00140da:	53                   	push   ebx
c00140db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140df:	8b 06                	mov    eax,DWORD PTR [esi]
c00140e1:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00140e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00140e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00140ec:	e8 c0 fe ff ff       	call   c0013fb1 <datetimeToSeconds(datetime_t)>
c00140f1:	59                   	pop    ecx
c00140f2:	0f b6 0d d4 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e7d4
c00140f9:	5b                   	pop    ebx
c00140fa:	03 0d d8 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e7d8
c0014100:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014106:	89 cb                	mov    ebx,ecx
c0014108:	c1 fb 1f             	sar    ebx,0x1f
c001410b:	29 c8                	sub    eax,ecx
c001410d:	19 da                	sbb    edx,ebx
c001410f:	31 c9                	xor    ecx,ecx
c0014111:	80 3d d5 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e7d5,0x0
c0014118:	74 05                	je     c001411f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001411a:	b9 08 07 00 00       	mov    ecx,0x708
c001411f:	31 db                	xor    ebx,ebx
c0014121:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0014125:	29 c8                	sub    eax,ecx
c0014127:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001412b:	19 da                	sbb    edx,ebx
c001412d:	89 f8                	mov    eax,edi
c001412f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014133:	5b                   	pop    ebx
c0014134:	5e                   	pop    esi
c0014135:	5f                   	pop    edi
c0014136:	ff e0                	jmp    eax

c0014138 <secondsToDatetime(unsigned long long)>:
c0014138:	55                   	push   ebp
c0014139:	57                   	push   edi
c001413a:	56                   	push   esi
c001413b:	53                   	push   ebx
c001413c:	83 ec 1c             	sub    esp,0x1c
c001413f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014143:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0014147:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001414b:	6a 00                	push   0x0
c001414d:	68 80 51 01 00       	push   0x15180
c0014152:	55                   	push   ebp
c0014153:	57                   	push   edi
c0014154:	e8 13 29 01 00       	call   c0026a6c <__udivdi3>
c0014159:	83 c4 10             	add    esp,0x10
c001415c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0014162:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014166:	6a 00                	push   0x0
c0014168:	68 80 51 01 00       	push   0x15180
c001416d:	55                   	push   ebp
c001416e:	57                   	push   edi
c001416f:	bf 10 0e 00 00       	mov    edi,0xe10
c0014174:	e8 f3 29 01 00       	call   c0026b6c <__umoddi3>
c0014179:	83 c4 10             	add    esp,0x10
c001417c:	99                   	cdq    
c001417d:	f7 ff                	idiv   edi
c001417f:	bf 3c 00 00 00       	mov    edi,0x3c
c0014184:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0014187:	89 d0                	mov    eax,edx
c0014189:	99                   	cdq    
c001418a:	f7 ff                	idiv   edi
c001418c:	85 db                	test   ebx,ebx
c001418e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014191:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0014194:	79 11                	jns    c00141a7 <secondsToDatetime(unsigned long long)+0x6f>
c0014196:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001419a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00141a0:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00141a5:	eb 07                	jmp    c00141ae <secondsToDatetime(unsigned long long)+0x76>
c00141a7:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00141ac:	89 d8                	mov    eax,ebx
c00141ae:	bf b4 05 00 00       	mov    edi,0x5b4
c00141b3:	99                   	cdq    
c00141b4:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00141b9:	f7 f9                	idiv   ecx
c00141bb:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00141c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00141c4:	31 d2                	xor    edx,edx
c00141c6:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00141ce:	01 c3                	add    ebx,eax
c00141d0:	89 d8                	mov    eax,ebx
c00141d2:	f7 f1                	div    ecx
c00141d4:	31 d2                	xor    edx,edx
c00141d6:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00141d9:	89 d8                	mov    eax,ebx
c00141db:	f7 f7                	div    edi
c00141dd:	31 d2                	xor    edx,edx
c00141df:	29 c1                	sub    ecx,eax
c00141e1:	89 d8                	mov    eax,ebx
c00141e3:	f7 f5                	div    ebp
c00141e5:	bd 6d 01 00 00       	mov    ebp,0x16d
c00141ea:	29 c1                	sub    ecx,eax
c00141ec:	31 d2                	xor    edx,edx
c00141ee:	89 c8                	mov    eax,ecx
c00141f0:	f7 f5                	div    ebp
c00141f2:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00141f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00141fb:	31 d2                	xor    edx,edx
c00141fd:	89 c8                	mov    eax,ecx
c00141ff:	f7 f5                	div    ebp
c0014201:	31 d2                	xor    edx,edx
c0014203:	01 c3                	add    ebx,eax
c0014205:	89 c8                	mov    eax,ecx
c0014207:	f7 f7                	div    edi
c0014209:	bf 99 00 00 00       	mov    edi,0x99
c001420e:	29 c3                	sub    ebx,eax
c0014210:	31 d2                	xor    edx,edx
c0014212:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001421a:	29 c3                	sub    ebx,eax
c001421c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001421f:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0014222:	bb 05 00 00 00       	mov    ebx,0x5
c0014227:	83 c1 02             	add    ecx,0x2
c001422a:	89 c8                	mov    eax,ecx
c001422c:	f7 f7                	div    edi
c001422e:	31 d2                	xor    edx,edx
c0014230:	89 c7                	mov    edi,eax
c0014232:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014238:	83 c0 02             	add    eax,0x2
c001423b:	f7 f3                	div    ebx
c001423d:	89 eb                	mov    ebx,ebp
c001423f:	29 c3                	sub    ebx,eax
c0014241:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014247:	88 1e                	mov    BYTE PTR [esi],bl
c0014249:	19 c0                	sbb    eax,eax
c001424b:	31 d2                	xor    edx,edx
c001424d:	83 e0 0c             	and    eax,0xc
c0014250:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014254:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001425c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014260:	83 f9 01             	cmp    ecx,0x1
c0014263:	0f 96 c2             	setbe  dl
c0014266:	41                   	inc    ecx
c0014267:	01 d0                	add    eax,edx
c0014269:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001426c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014270:	83 c4 1c             	add    esp,0x1c
c0014273:	89 f0                	mov    eax,esi
c0014275:	5b                   	pop    ebx
c0014276:	5e                   	pop    esi
c0014277:	5f                   	pop    edi
c0014278:	5d                   	pop    ebp
c0014279:	c2 04 00             	ret    0x4

c001427c <Clock::timeInDatetimeLocal()>:
c001427c:	53                   	push   ebx
c001427d:	83 ec 14             	sub    esp,0x14
c0014280:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014284:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014288:	e8 83 fc ff ff       	call   c0013f10 <Clock::timeInSecondsLocal()>
c001428d:	83 c4 0c             	add    esp,0xc
c0014290:	52                   	push   edx
c0014291:	50                   	push   eax
c0014292:	53                   	push   ebx
c0014293:	e8 a0 fe ff ff       	call   c0014138 <secondsToDatetime(unsigned long long)>
c0014298:	89 d8                	mov    eax,ebx
c001429a:	83 c4 14             	add    esp,0x14
c001429d:	5b                   	pop    ebx
c001429e:	c2 04 00             	ret    0x4
c00142a1:	90                   	nop

c00142a2 <Device::hibernate()>:
c00142a2:	c3                   	ret    
c00142a3:	90                   	nop

c00142a4 <Device::wake()>:
c00142a4:	c3                   	ret    
c00142a5:	90                   	nop

c00142a6 <Device::detect()>:
c00142a6:	c3                   	ret    
c00142a7:	90                   	nop

c00142a8 <Device::disableLegacy()>:
c00142a8:	c3                   	ret    
c00142a9:	90                   	nop

c00142aa <Device::powerSaving(PowerSavingLevel)>:
c00142aa:	c3                   	ret    
c00142ab:	90                   	nop

c00142ac <DriverlessDevice::close(int, int, void*)>:
c00142ac:	31 c0                	xor    eax,eax
c00142ae:	c3                   	ret    
c00142af:	90                   	nop

c00142b0 <DriverlessDevice::detect()>:
c00142b0:	c3                   	ret    
c00142b1:	90                   	nop

c00142b2 <DriverlessDevice::open(int, int, void*)>:
c00142b2:	83 ec 18             	sub    esp,0x18
c00142b5:	68 30 ae 02 c0       	push   0xc002ae30
c00142ba:	e8 b0 63 00 00       	call   c001a66f <Krnl::panic(char const*)>
c00142bf:	83 c8 ff             	or     eax,0xffffffff
c00142c2:	83 c4 1c             	add    esp,0x1c
c00142c5:	c3                   	ret    

c00142c6 <Device::~Device()>:
c00142c6:	ba 58 ae 02 c0       	mov    edx,0xc002ae58
c00142cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142cf:	89 10                	mov    DWORD PTR [eax],edx
c00142d1:	90                   	nop
c00142d2:	c3                   	ret    
c00142d3:	90                   	nop

c00142d4 <Device::~Device()>:
c00142d4:	83 ec 0c             	sub    esp,0xc
c00142d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00142db:	e8 e6 ff ff ff       	call   c00142c6 <Device::~Device()>
c00142e0:	83 c4 04             	add    esp,0x4
c00142e3:	83 ec 08             	sub    esp,0x8
c00142e6:	68 58 01 00 00       	push   0x158
c00142eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142ef:	e8 f9 eb ff ff       	call   c0012eed <operator delete(void*, unsigned long)>
c00142f4:	83 c4 10             	add    esp,0x10
c00142f7:	83 c4 0c             	add    esp,0xc
c00142fa:	c3                   	ret    
c00142fb:	90                   	nop

c00142fc <Device::findAndLoadDriver()>:
c00142fc:	c3                   	ret    
c00142fd:	90                   	nop

c00142fe <Device::preOpenPCI(PCIDeviceInfo)>:
c00142fe:	57                   	push   edi
c00142ff:	b9 09 00 00 00       	mov    ecx,0x9
c0014304:	56                   	push   esi
c0014305:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014309:	8d 74 24 10          	lea    esi,[esp+0x10]
c001430d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014317:	81 c7 18 01 00 00    	add    edi,0x118
c001431d:	fc                   	cld    
c001431e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014320:	5e                   	pop    esi
c0014321:	5f                   	pop    edi
c0014322:	c3                   	ret    
c0014323:	90                   	nop

c0014324 <Device::preOpenACPI(void*, char*, char*)>:
c0014324:	56                   	push   esi
c0014325:	53                   	push   ebx
c0014326:	83 ec 08             	sub    esp,0x8
c0014329:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001432d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014331:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001433b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001433f:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0014345:	6a 1e                	push   0x1e
c0014347:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001434d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014351:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0014357:	50                   	push   eax
c0014358:	e8 e7 c3 fe ff       	call   c0000744 <memcpy>
c001435d:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0014361:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014365:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c001436d:	83 c4 14             	add    esp,0x14
c0014370:	5b                   	pop    ebx
c0014371:	5e                   	pop    esi
c0014372:	e9 cd c3 fe ff       	jmp    c0000744 <memcpy>
c0014377:	90                   	nop

c0014378 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014378:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001437c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014381:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014388:	75 0b                	jne    c0014395 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c001438a:	8b 00                	mov    eax,DWORD PTR [eax]
c001438c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014390:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014393:	eb 1e                	jmp    c00143b3 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014395:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001439a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00143a0:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00143a6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00143a8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143b0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00143b3:	ff e0                	jmp    eax
c00143b5:	90                   	nop

c00143b6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00143b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143ba:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00143bf:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00143c6:	75 0b                	jne    c00143d3 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00143c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00143ca:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143ce:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00143d1:	eb 1e                	jmp    c00143f1 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00143d3:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c00143d8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00143de:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00143e4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00143e6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143ea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143ee:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00143f1:	ff e0                	jmp    eax
c00143f3:	90                   	nop

c00143f4 <Device::addChild(Device*)>:
c00143f4:	53                   	push   ebx
c00143f5:	83 ec 08             	sub    esp,0x8
c00143f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00143fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014400:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014406:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001440c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001440e:	85 d2                	test   edx,edx
c0014410:	74 04                	je     c0014416 <Device::addChild(Device*)+0x22>
c0014412:	89 d3                	mov    ebx,edx
c0014414:	eb f6                	jmp    c001440c <Device::addChild(Device*)+0x18>
c0014416:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014419:	83 ec 0c             	sub    esp,0xc
c001441c:	6a 08                	push   0x8
c001441e:	e8 1d b4 ff ff       	call   c000f840 <malloc>
c0014423:	89 03                	mov    DWORD PTR [ebx],eax
c0014425:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001442b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014432:	83 c4 18             	add    esp,0x18
c0014435:	5b                   	pop    ebx
c0014436:	c3                   	ret    
c0014437:	90                   	nop

c0014438 <Device::removeAllChildren()>:
c0014438:	56                   	push   esi
c0014439:	53                   	push   ebx
c001443a:	52                   	push   edx
c001443b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001443f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014445:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014448:	74 17                	je     c0014461 <Device::removeAllChildren()+0x29>
c001444a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001444d:	85 c0                	test   eax,eax
c001444f:	74 0c                	je     c001445d <Device::removeAllChildren()+0x25>
c0014451:	83 ec 0c             	sub    esp,0xc
c0014454:	8b 10                	mov    edx,DWORD PTR [eax]
c0014456:	50                   	push   eax
c0014457:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001445a:	83 c4 10             	add    esp,0x10
c001445d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001445f:	eb e4                	jmp    c0014445 <Device::removeAllChildren()+0xd>
c0014461:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014467:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001446d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014473:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001447a:	58                   	pop    eax
c001447b:	5b                   	pop    ebx
c001447c:	5e                   	pop    esi
c001447d:	c3                   	ret    

c001447e <Device::hibernateAll()>:
c001447e:	53                   	push   ebx
c001447f:	83 ec 14             	sub    esp,0x14
c0014482:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014486:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014488:	53                   	push   ebx
c0014489:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001448c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014492:	83 c4 10             	add    esp,0x10
c0014495:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014498:	74 0f                	je     c00144a9 <Device::hibernateAll()+0x2b>
c001449a:	83 ec 0c             	sub    esp,0xc
c001449d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144a0:	e8 d9 ff ff ff       	call   c001447e <Device::hibernateAll()>
c00144a5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144a7:	eb e9                	jmp    c0014492 <Device::hibernateAll()+0x14>
c00144a9:	83 c4 08             	add    esp,0x8
c00144ac:	5b                   	pop    ebx
c00144ad:	c3                   	ret    

c00144ae <Device::wakeAll()>:
c00144ae:	53                   	push   ebx
c00144af:	83 ec 14             	sub    esp,0x14
c00144b2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144b8:	53                   	push   ebx
c00144b9:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00144bc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144c2:	83 c4 10             	add    esp,0x10
c00144c5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144c8:	74 0f                	je     c00144d9 <Device::wakeAll()+0x2b>
c00144ca:	83 ec 0c             	sub    esp,0xc
c00144cd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144d0:	e8 d9 ff ff ff       	call   c00144ae <Device::wakeAll()>
c00144d5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144d7:	eb e9                	jmp    c00144c2 <Device::wakeAll()+0x14>
c00144d9:	83 c4 08             	add    esp,0x8
c00144dc:	5b                   	pop    ebx
c00144dd:	c3                   	ret    

c00144de <Device::detectAll()>:
c00144de:	53                   	push   ebx
c00144df:	83 ec 14             	sub    esp,0x14
c00144e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144e8:	53                   	push   ebx
c00144e9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00144ec:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144f2:	83 c4 10             	add    esp,0x10
c00144f5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144f8:	74 0f                	je     c0014509 <Device::detectAll()+0x2b>
c00144fa:	83 ec 0c             	sub    esp,0xc
c00144fd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014500:	e8 d9 ff ff ff       	call   c00144de <Device::detectAll()>
c0014505:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014507:	eb e9                	jmp    c00144f2 <Device::detectAll()+0x14>
c0014509:	83 c4 08             	add    esp,0x8
c001450c:	5b                   	pop    ebx
c001450d:	c3                   	ret    

c001450e <Device::disableLegacyAll()>:
c001450e:	53                   	push   ebx
c001450f:	83 ec 14             	sub    esp,0x14
c0014512:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014516:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014518:	53                   	push   ebx
c0014519:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001451c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014522:	83 c4 10             	add    esp,0x10
c0014525:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014528:	74 0f                	je     c0014539 <Device::disableLegacyAll()+0x2b>
c001452a:	83 ec 0c             	sub    esp,0xc
c001452d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014530:	e8 d9 ff ff ff       	call   c001450e <Device::disableLegacyAll()>
c0014535:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014537:	eb e9                	jmp    c0014522 <Device::disableLegacyAll()+0x14>
c0014539:	83 c4 08             	add    esp,0x8
c001453c:	5b                   	pop    ebx
c001453d:	c3                   	ret    

c001453e <Device::loadDriversForAll()>:
c001453e:	53                   	push   ebx
c001453f:	83 ec 08             	sub    esp,0x8
c0014542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014546:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001454c:	8b 18                	mov    ebx,DWORD PTR [eax]
c001454e:	85 db                	test   ebx,ebx
c0014550:	74 12                	je     c0014564 <Device::loadDriversForAll()+0x26>
c0014552:	83 ec 0c             	sub    esp,0xc
c0014555:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014558:	e8 e1 ff ff ff       	call   c001453e <Device::loadDriversForAll()>
c001455d:	83 c4 10             	add    esp,0x10
c0014560:	89 d8                	mov    eax,ebx
c0014562:	eb e8                	jmp    c001454c <Device::loadDriversForAll()+0xe>
c0014564:	83 c4 08             	add    esp,0x8
c0014567:	5b                   	pop    ebx
c0014568:	c3                   	ret    
c0014569:	90                   	nop

c001456a <Device::closeAll()>:
c001456a:	53                   	push   ebx
c001456b:	83 ec 08             	sub    esp,0x8
c001456e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014572:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014574:	6a 00                	push   0x0
c0014576:	6a 00                	push   0x0
c0014578:	6a 00                	push   0x0
c001457a:	53                   	push   ebx
c001457b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001457e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014584:	83 c4 10             	add    esp,0x10
c0014587:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001458a:	74 0f                	je     c001459b <Device::closeAll()+0x31>
c001458c:	83 ec 0c             	sub    esp,0xc
c001458f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014592:	e8 d3 ff ff ff       	call   c001456a <Device::closeAll()>
c0014597:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014599:	eb e9                	jmp    c0014584 <Device::closeAll()+0x1a>
c001459b:	83 c4 08             	add    esp,0x8
c001459e:	5b                   	pop    ebx
c001459f:	c3                   	ret    

c00145a0 <Device::powerSavingAll(PowerSavingLevel)>:
c00145a0:	56                   	push   esi
c00145a1:	53                   	push   ebx
c00145a2:	83 ec 0c             	sub    esp,0xc
c00145a5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00145a9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00145ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145af:	56                   	push   esi
c00145b0:	53                   	push   ebx
c00145b1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00145b4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145ba:	83 c4 10             	add    esp,0x10
c00145bd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145c0:	74 0f                	je     c00145d1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00145c2:	52                   	push   edx
c00145c3:	52                   	push   edx
c00145c4:	56                   	push   esi
c00145c5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145c8:	e8 d3 ff ff ff       	call   c00145a0 <Device::powerSavingAll(PowerSavingLevel)>
c00145cd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00145cf:	eb e9                	jmp    c00145ba <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00145d1:	58                   	pop    eax
c00145d2:	5b                   	pop    ebx
c00145d3:	5e                   	pop    esi
c00145d4:	c3                   	ret    
c00145d5:	90                   	nop

c00145d6 <Device::setName(char const*)>:
c00145d6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00145de:	e9 51 c2 fe ff       	jmp    c0000834 <strcpy>
c00145e3:	90                   	nop

c00145e4 <Device::Device(char const*)>:
c00145e4:	83 ec 1c             	sub    esp,0x1c
c00145e7:	ba 58 ae 02 c0       	mov    edx,0xc002ae58
c00145ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145f0:	89 10                	mov    DWORD PTR [eax],edx
c00145f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145f6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014600:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014604:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001460e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014612:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001461c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014620:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001462a:	83 ec 08             	sub    esp,0x8
c001462d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014631:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014635:	e8 9c ff ff ff       	call   c00145d6 <Device::setName(char const*)>
c001463a:	83 c4 10             	add    esp,0x10
c001463d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014645:	83 ec 0c             	sub    esp,0xc
c0014648:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001464c:	e8 ef b1 ff ff       	call   c000f840 <malloc>
c0014651:	83 c4 10             	add    esp,0x10
c0014654:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001465a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014661:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014665:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001466b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001466f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014675:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001467b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001467f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014685:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001468c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014690:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014697:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001469b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00146a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146a6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00146b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146b4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00146be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146c2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00146cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146d0:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00146da:	90                   	nop
c00146db:	83 c4 1c             	add    esp,0x1c
c00146de:	c3                   	ret    
c00146df:	90                   	nop

c00146e0 <Device::getName()>:
c00146e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146e4:	05 d0 00 00 00       	add    eax,0xd0
c00146e9:	c3                   	ret    

c00146ea <DriverlessDevice::DriverlessDevice(char const*)>:
c00146ea:	83 ec 0c             	sub    esp,0xc
c00146ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f1:	83 ec 08             	sub    esp,0x8
c00146f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146f8:	50                   	push   eax
c00146f9:	e8 e6 fe ff ff       	call   c00145e4 <Device::Device(char const*)>
c00146fe:	83 c4 10             	add    esp,0x10
c0014701:	ba 84 ae 02 c0       	mov    edx,0xc002ae84
c0014706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001470a:	89 10                	mov    DWORD PTR [eax],edx
c001470c:	90                   	nop
c001470d:	83 c4 0c             	add    esp,0xc
c0014710:	c3                   	ret    
c0014711:	90                   	nop

c0014712 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014712:	57                   	push   edi
c0014713:	56                   	push   esi
c0014714:	53                   	push   ebx
c0014715:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014719:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001471d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014721:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014727:	75 0c                	jne    c0014735 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014729:	52                   	push   edx
c001472a:	52                   	push   edx
c001472b:	53                   	push   ebx
c001472c:	56                   	push   esi
c001472d:	e8 78 42 01 00       	call   c00289aa <LinkedList<Device>::addElement(Device*)>
c0014732:	83 c4 10             	add    esp,0x10
c0014735:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001473b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001473e:	74 12                	je     c0014752 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014740:	50                   	push   eax
c0014741:	57                   	push   edi
c0014742:	56                   	push   esi
c0014743:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014746:	e8 c7 ff ff ff       	call   c0014712 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001474b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001474d:	83 c4 10             	add    esp,0x10
c0014750:	eb e9                	jmp    c001473b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014752:	5b                   	pop    ebx
c0014753:	5e                   	pop    esi
c0014754:	5f                   	pop    edi
c0014755:	c3                   	ret    

c0014756 <getDevicesOfType(DeviceType)>:
c0014756:	53                   	push   ebx
c0014757:	83 ec 14             	sub    esp,0x14
c001475a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001475e:	53                   	push   ebx
c001475f:	e8 22 43 01 00       	call   c0028a86 <LinkedList<Device>::LinkedList()>
c0014764:	83 c4 0c             	add    esp,0xc
c0014767:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001476b:	53                   	push   ebx
c001476c:	ff 35 48 e6 02 c0    	push   DWORD PTR ds:0xc002e648
c0014772:	e8 9b ff ff ff       	call   c0014712 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014777:	89 d8                	mov    eax,ebx
c0014779:	83 c4 18             	add    esp,0x18
c001477c:	5b                   	pop    ebx
c001477d:	c2 04 00             	ret    0x4

c0014780 <HardDiskController::HardDiskController(char const*)>:
c0014780:	83 ec 0c             	sub    esp,0xc
c0014783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014787:	83 ec 08             	sub    esp,0x8
c001478a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001478e:	50                   	push   eax
c001478f:	e8 50 fe ff ff       	call   c00145e4 <Device::Device(char const*)>
c0014794:	83 c4 10             	add    esp,0x10
c0014797:	ba b0 ae 02 c0       	mov    edx,0xc002aeb0
c001479c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147a0:	89 10                	mov    DWORD PTR [eax],edx
c00147a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147a6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00147b0:	90                   	nop
c00147b1:	83 c4 0c             	add    esp,0xc
c00147b4:	c3                   	ret    
c00147b5:	90                   	nop

c00147b6 <HardDiskController::~HardDiskController()>:
c00147b6:	83 ec 0c             	sub    esp,0xc
c00147b9:	ba b0 ae 02 c0       	mov    edx,0xc002aeb0
c00147be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c2:	89 10                	mov    DWORD PTR [eax],edx
c00147c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c8:	83 ec 0c             	sub    esp,0xc
c00147cb:	50                   	push   eax
c00147cc:	e8 f5 fa ff ff       	call   c00142c6 <Device::~Device()>
c00147d1:	83 c4 10             	add    esp,0x10
c00147d4:	90                   	nop
c00147d5:	83 c4 0c             	add    esp,0xc
c00147d8:	c3                   	ret    
c00147d9:	90                   	nop

c00147da <HardDiskController::~HardDiskController()>:
c00147da:	83 ec 0c             	sub    esp,0xc
c00147dd:	83 ec 0c             	sub    esp,0xc
c00147e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147e4:	e8 cd ff ff ff       	call   c00147b6 <HardDiskController::~HardDiskController()>
c00147e9:	83 c4 10             	add    esp,0x10
c00147ec:	83 ec 08             	sub    esp,0x8
c00147ef:	68 58 01 00 00       	push   0x158
c00147f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147f8:	e8 f0 e6 ff ff       	call   c0012eed <operator delete(void*, unsigned long)>
c00147fd:	83 c4 10             	add    esp,0x10
c0014800:	83 c4 0c             	add    esp,0xc
c0014803:	c3                   	ret    

c0014804 <PhysicalDisk::eject()>:
c0014804:	83 ec 18             	sub    esp,0x18
c0014807:	68 d4 ae 02 c0       	push   0xc002aed4
c001480c:	e8 bc e7 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0014811:	83 c8 ff             	or     eax,0xffffffff
c0014814:	83 c4 1c             	add    esp,0x1c
c0014817:	c3                   	ret    

c0014818 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014818:	83 ec 0c             	sub    esp,0xc
c001481b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001481f:	83 ec 08             	sub    esp,0x8
c0014822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014826:	50                   	push   eax
c0014827:	e8 b8 fd ff ff       	call   c00145e4 <Device::Device(char const*)>
c001482c:	83 c4 10             	add    esp,0x10
c001482f:	ba 04 af 02 c0       	mov    edx,0xc002af04
c0014834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014838:	89 10                	mov    DWORD PTR [eax],edx
c001483a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001483e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014849:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014854:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001485e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014862:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014866:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001486c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014870:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001487a:	90                   	nop
c001487b:	83 c4 0c             	add    esp,0xc
c001487e:	c3                   	ret    
c001487f:	90                   	nop

c0014880 <PhysicalDisk::startCache()>:
c0014880:	56                   	push   esi
c0014881:	53                   	push   ebx
c0014882:	83 ec 10             	sub    esp,0x10
c0014885:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014889:	6a 44                	push   0x44
c001488b:	e8 b0 af ff ff       	call   c000f840 <malloc>
c0014890:	89 c6                	mov    esi,eax
c0014892:	58                   	pop    eax
c0014893:	5a                   	pop    edx
c0014894:	53                   	push   ebx
c0014895:	56                   	push   esi
c0014896:	e8 29 27 00 00       	call   c0016fc4 <VCache::VCache(PhysicalDisk*)>
c001489b:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00148a1:	83 c4 14             	add    esp,0x14
c00148a4:	5b                   	pop    ebx
c00148a5:	5e                   	pop    esi
c00148a6:	c3                   	ret    
c00148a7:	90                   	nop

c00148a8 <PhysicalDisk::~PhysicalDisk()>:
c00148a8:	83 ec 0c             	sub    esp,0xc
c00148ab:	ba 04 af 02 c0       	mov    edx,0xc002af04
c00148b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148b4:	89 10                	mov    DWORD PTR [eax],edx
c00148b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148ba:	83 ec 0c             	sub    esp,0xc
c00148bd:	50                   	push   eax
c00148be:	e8 03 fa ff ff       	call   c00142c6 <Device::~Device()>
c00148c3:	83 c4 10             	add    esp,0x10
c00148c6:	90                   	nop
c00148c7:	83 c4 0c             	add    esp,0xc
c00148ca:	c3                   	ret    
c00148cb:	90                   	nop

c00148cc <PhysicalDisk::~PhysicalDisk()>:
c00148cc:	83 ec 0c             	sub    esp,0xc
c00148cf:	83 ec 0c             	sub    esp,0xc
c00148d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148d6:	e8 cd ff ff ff       	call   c00148a8 <PhysicalDisk::~PhysicalDisk()>
c00148db:	83 c4 10             	add    esp,0x10
c00148de:	83 ec 08             	sub    esp,0x8
c00148e1:	68 6c 01 00 00       	push   0x16c
c00148e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148ea:	e8 fe e5 ff ff       	call   c0012eed <operator delete(void*, unsigned long)>
c00148ef:	83 c4 10             	add    esp,0x10
c00148f2:	83 c4 0c             	add    esp,0xc
c00148f5:	c3                   	ret    

c00148f6 <FPU::FPU(char const*)>:
c00148f6:	83 ec 0c             	sub    esp,0xc
c00148f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148fd:	83 ec 08             	sub    esp,0x8
c0014900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014904:	50                   	push   eax
c0014905:	e8 da fc ff ff       	call   c00145e4 <Device::Device(char const*)>
c001490a:	83 c4 10             	add    esp,0x10
c001490d:	ba 48 af 02 c0       	mov    edx,0xc002af48
c0014912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014916:	89 10                	mov    DWORD PTR [eax],edx
c0014918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001491c:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014926:	90                   	nop
c0014927:	83 c4 0c             	add    esp,0xc
c001492a:	c3                   	ret    
c001492b:	90                   	nop

c001492c <FPU::~FPU()>:
c001492c:	83 ec 0c             	sub    esp,0xc
c001492f:	ba 48 af 02 c0       	mov    edx,0xc002af48
c0014934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014938:	89 10                	mov    DWORD PTR [eax],edx
c001493a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001493e:	83 ec 0c             	sub    esp,0xc
c0014941:	50                   	push   eax
c0014942:	e8 7f f9 ff ff       	call   c00142c6 <Device::~Device()>
c0014947:	83 c4 10             	add    esp,0x10
c001494a:	90                   	nop
c001494b:	83 c4 0c             	add    esp,0xc
c001494e:	c3                   	ret    
c001494f:	90                   	nop

c0014950 <FPU::~FPU()>:
c0014950:	83 ec 0c             	sub    esp,0xc
c0014953:	83 ec 0c             	sub    esp,0xc
c0014956:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001495a:	e8 cd ff ff ff       	call   c001492c <FPU::~FPU()>
c001495f:	83 c4 10             	add    esp,0x10
c0014962:	83 ec 08             	sub    esp,0x8
c0014965:	68 58 01 00 00       	push   0x158
c001496a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001496e:	e8 7a e5 ff ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0014973:	83 c4 10             	add    esp,0x10
c0014976:	83 c4 0c             	add    esp,0xc
c0014979:	c3                   	ret    

c001497a <setupFPU()>:
c001497a:	53                   	push   ebx
c001497b:	83 ec 08             	sub    esp,0x8
c001497e:	8b 15 48 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e648
c0014984:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001498b:	74 19                	je     c00149a6 <setupFPU()+0x2c>
c001498d:	83 ec 0c             	sub    esp,0xc
c0014990:	68 58 01 00 00       	push   0x158
c0014995:	e8 a6 ae ff ff       	call   c000f840 <malloc>
c001499a:	89 c3                	mov    ebx,eax
c001499c:	89 04 24             	mov    DWORD PTR [esp],eax
c001499f:	e8 56 0c 01 00       	call   c00255fa <AVX::AVX()>
c00149a4:	eb 5b                	jmp    c0014a01 <setupFPU()+0x87>
c00149a6:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00149ac:	84 c0                	test   al,al
c00149ae:	79 19                	jns    c00149c9 <setupFPU()+0x4f>
c00149b0:	83 ec 0c             	sub    esp,0xc
c00149b3:	68 58 01 00 00       	push   0x158
c00149b8:	e8 83 ae ff ff       	call   c000f840 <malloc>
c00149bd:	89 c3                	mov    ebx,eax
c00149bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00149c2:	e8 59 0d 01 00       	call   c0025720 <SSE::SSE()>
c00149c7:	eb 38                	jmp    c0014a01 <setupFPU()+0x87>
c00149c9:	a8 20                	test   al,0x20
c00149cb:	74 19                	je     c00149e6 <setupFPU()+0x6c>
c00149cd:	83 ec 0c             	sub    esp,0xc
c00149d0:	68 58 01 00 00       	push   0x158
c00149d5:	e8 66 ae ff ff       	call   c000f840 <malloc>
c00149da:	89 c3                	mov    ebx,eax
c00149dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00149df:	e8 a6 0c 01 00       	call   c002568a <MMX::MMX()>
c00149e4:	eb 1b                	jmp    c0014a01 <setupFPU()+0x87>
c00149e6:	a8 10                	test   al,0x10
c00149e8:	74 1c                	je     c0014a06 <setupFPU()+0x8c>
c00149ea:	83 ec 0c             	sub    esp,0xc
c00149ed:	68 58 01 00 00       	push   0x158
c00149f2:	e8 49 ae ff ff       	call   c000f840 <malloc>
c00149f7:	89 c3                	mov    ebx,eax
c00149f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00149fc:	e8 ad 0d 01 00       	call   c00257ae <x87::x87()>
c0014a01:	83 c4 10             	add    esp,0x10
c0014a04:	eb 24                	jmp    c0014a2a <setupFPU()+0xb0>
c0014a06:	83 e0 ef             	and    eax,0xffffffef
c0014a09:	83 ec 0c             	sub    esp,0xc
c0014a0c:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014a12:	68 34 af 02 c0       	push   0xc002af34
c0014a17:	e8 b1 e5 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0014a1c:	0f 20 c0             	mov    eax,cr0
c0014a1f:	83 c8 04             	or     eax,0x4
c0014a22:	0f 22 c0             	mov    cr0,eax
c0014a25:	31 db                	xor    ebx,ebx
c0014a27:	83 c4 10             	add    esp,0x10
c0014a2a:	89 d8                	mov    eax,ebx
c0014a2c:	83 c4 08             	add    esp,0x8
c0014a2f:	5b                   	pop    ebx
c0014a30:	c3                   	ret    
c0014a31:	90                   	nop

c0014a32 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014a32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014a36:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a3a:	c1 e0 04             	shl    eax,0x4
c0014a3d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014a41:	8d 50 10             	lea    edx,[eax+0x10]
c0014a44:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014a4a:	74 08                	je     c0014a54 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014a4c:	83 c0 04             	add    eax,0x4
c0014a4f:	39 d0                	cmp    eax,edx
c0014a51:	75 f1                	jne    c0014a44 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014a53:	c3                   	ret    
c0014a54:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014a5e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014a68:	eb e2                	jmp    c0014a4c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014a6a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014a6a:	57                   	push   edi
c0014a6b:	31 c0                	xor    eax,eax
c0014a6d:	56                   	push   esi
c0014a6e:	53                   	push   ebx
c0014a6f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014a73:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a77:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014a7b:	89 da                	mov    edx,ebx
c0014a7d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014a81:	c1 e2 04             	shl    edx,0x4
c0014a84:	01 ca                	add    edx,ecx
c0014a86:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014a8e:	74 16                	je     c0014aa6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014a90:	40                   	inc    eax
c0014a91:	83 f8 04             	cmp    eax,0x4
c0014a94:	75 f0                	jne    c0014a86 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014a96:	c7 44 24 10 78 af 02 c0 	mov    DWORD PTR [esp+0x10],0xc002af78
c0014a9e:	5b                   	pop    ebx
c0014a9f:	5e                   	pop    esi
c0014aa0:	5f                   	pop    edi
c0014aa1:	e9 c9 5b 00 00       	jmp    c001a66f <Krnl::panic(char const*)>
c0014aa6:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014aa9:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014aac:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014ab2:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014ab8:	5b                   	pop    ebx
c0014ab9:	5e                   	pop    esi
c0014aba:	5f                   	pop    edi
c0014abb:	c3                   	ret    

c0014abc <doubleFault(regs*, void*)>:
c0014abc:	55                   	push   ebp
c0014abd:	89 e5                	mov    ebp,esp
c0014abf:	83 ec 08             	sub    esp,0x8
c0014ac2:	83 ec 0c             	sub    esp,0xc
c0014ac5:	68 b3 af 02 c0       	push   0xc002afb3
c0014aca:	e8 a0 5b 00 00       	call   c001a66f <Krnl::panic(char const*)>
c0014acf:	83 c4 10             	add    esp,0x10
c0014ad2:	90                   	nop
c0014ad3:	c9                   	leave  
c0014ad4:	c3                   	ret    
c0014ad5:	90                   	nop

c0014ad6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014ad6:	56                   	push   esi
c0014ad7:	53                   	push   ebx
c0014ad8:	50                   	push   eax
c0014ad9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014add:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014ae1:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014ae6:	75 35                	jne    c0014b1d <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014ae8:	8d 43 20             	lea    eax,[ebx+0x20]
c0014aeb:	31 d2                	xor    edx,edx
c0014aed:	89 c1                	mov    ecx,eax
c0014aef:	c1 e1 04             	shl    ecx,0x4
c0014af2:	01 f1                	add    ecx,esi
c0014af4:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014afc:	74 3e                	je     c0014b3c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014afe:	42                   	inc    edx
c0014aff:	83 fa 04             	cmp    edx,0x4
c0014b02:	75 f0                	jne    c0014af4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014b04:	83 ec 0c             	sub    esp,0xc
c0014b07:	68 f8 af 02 c0       	push   0xc002aff8
c0014b0c:	e8 5e 5b 00 00       	call   c001a66f <Krnl::panic(char const*)>
c0014b11:	83 c4 10             	add    esp,0x10
c0014b14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014b19:	5a                   	pop    edx
c0014b1a:	5b                   	pop    ebx
c0014b1b:	5e                   	pop    esi
c0014b1c:	c3                   	ret    
c0014b1d:	83 ec 0c             	sub    esp,0xc
c0014b20:	56                   	push   esi
c0014b21:	e8 ba fb ff ff       	call   c00146e0 <Device::getName()>
c0014b26:	83 c4 10             	add    esp,0x10
c0014b29:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b2c:	75 ba                	jne    c0014ae8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b2e:	83 fb 0f             	cmp    ebx,0xf
c0014b31:	7f 29                	jg     c0014b5c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014b33:	0f b6 9b a0 d8 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2760]
c0014b3a:	eb ac                	jmp    c0014ae8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b3c:	8d 04 82             	lea    eax,[edx+eax*4]
c0014b3f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014b43:	8d 04 86             	lea    eax,[esi+eax*4]
c0014b46:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014b4c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b50:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014b56:	89 d8                	mov    eax,ebx
c0014b58:	5a                   	pop    edx
c0014b59:	5b                   	pop    ebx
c0014b5a:	5e                   	pop    esi
c0014b5b:	c3                   	ret    
c0014b5c:	83 ec 0c             	sub    esp,0xc
c0014b5f:	68 c0 af 02 c0       	push   0xc002afc0
c0014b64:	e8 06 5b 00 00       	call   c001a66f <Krnl::panic(char const*)>
c0014b69:	83 c4 10             	add    esp,0x10
c0014b6c:	e9 77 ff ff ff       	jmp    c0014ae8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b71:	90                   	nop

c0014b72 <InterruptController::clearAllHandlers(int, bool)>:
c0014b72:	56                   	push   esi
c0014b73:	53                   	push   ebx
c0014b74:	52                   	push   edx
c0014b75:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b79:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014b7d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014b82:	75 61                	jne    c0014be5 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014b84:	8d 46 20             	lea    eax,[esi+0x20]
c0014b87:	c1 e6 04             	shl    esi,0x4
c0014b8a:	c1 e0 04             	shl    eax,0x4
c0014b8d:	01 de                	add    esi,ebx
c0014b8f:	01 d8                	add    eax,ebx
c0014b91:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014b9b:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014ba5:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014baf:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014bb9:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014bc3:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014bcd:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014bd7:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014be1:	58                   	pop    eax
c0014be2:	5b                   	pop    ebx
c0014be3:	5e                   	pop    esi
c0014be4:	c3                   	ret    
c0014be5:	83 ec 0c             	sub    esp,0xc
c0014be8:	53                   	push   ebx
c0014be9:	e8 f2 fa ff ff       	call   c00146e0 <Device::getName()>
c0014bee:	83 c4 10             	add    esp,0x10
c0014bf1:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014bf4:	75 8e                	jne    c0014b84 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014bf6:	83 fe 0f             	cmp    esi,0xf
c0014bf9:	7f 09                	jg     c0014c04 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014bfb:	0f b6 b6 a0 d8 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2760]
c0014c02:	eb 80                	jmp    c0014b84 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c04:	83 ec 0c             	sub    esp,0xc
c0014c07:	68 34 b0 02 c0       	push   0xc002b034
c0014c0c:	e8 5e 5a 00 00       	call   c001a66f <Krnl::panic(char const*)>
c0014c11:	83 c4 10             	add    esp,0x10
c0014c14:	e9 6b ff ff ff       	jmp    c0014b84 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c19:	90                   	nop

c0014c1a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014c1a:	56                   	push   esi
c0014c1b:	53                   	push   ebx
c0014c1c:	52                   	push   edx
c0014c1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014c21:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014c25:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014c2a:	75 3a                	jne    c0014c66 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014c2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c30:	8d 50 20             	lea    edx,[eax+0x20]
c0014c33:	c1 e2 04             	shl    edx,0x4
c0014c36:	8d 04 16             	lea    eax,[esi+edx*1]
c0014c39:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014c3d:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014c43:	74 0b                	je     c0014c50 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014c45:	83 c0 04             	add    eax,0x4
c0014c48:	39 d0                	cmp    eax,edx
c0014c4a:	75 f1                	jne    c0014c3d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014c4c:	58                   	pop    eax
c0014c4d:	5b                   	pop    ebx
c0014c4e:	5e                   	pop    esi
c0014c4f:	c3                   	ret    
c0014c50:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014c5a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014c64:	eb df                	jmp    c0014c45 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014c66:	83 ec 0c             	sub    esp,0xc
c0014c69:	56                   	push   esi
c0014c6a:	e8 71 fa ff ff       	call   c00146e0 <Device::getName()>
c0014c6f:	83 c4 10             	add    esp,0x10
c0014c72:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014c75:	75 b5                	jne    c0014c2c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c77:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014c7c:	7f 11                	jg     c0014c8f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014c7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c82:	0f b6 80 a0 d8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2760]
c0014c89:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c8d:	eb 9d                	jmp    c0014c2c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c8f:	83 ec 0c             	sub    esp,0xc
c0014c92:	68 34 b0 02 c0       	push   0xc002b034
c0014c97:	e8 d3 59 00 00       	call   c001a66f <Krnl::panic(char const*)>
c0014c9c:	83 c4 10             	add    esp,0x10
c0014c9f:	eb 8b                	jmp    c0014c2c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014ca1 <nmiHandler(regs*, void*)>:
c0014ca1:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0014ca6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014caa:	e9 dd a2 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014caf <int_handler>:
c0014caf:	55                   	push   ebp
c0014cb0:	57                   	push   edi
c0014cb1:	56                   	push   esi
c0014cb2:	53                   	push   ebx
c0014cb3:	83 ec 0c             	sub    esp,0xc
c0014cb6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014cba:	80 3d a4 11 03 c0 00 	cmp    BYTE PTR ds:0xc00311a4,0x0
c0014cc1:	74 0b                	je     c0014cce <int_handler+0x1f>
c0014cc3:	fa                   	cli    
c0014cc4:	f4                   	hlt    
c0014cc5:	80 3d a4 11 03 c0 00 	cmp    BYTE PTR ds:0xc00311a4,0x0
c0014ccc:	75 f5                	jne    c0014cc3 <int_handler+0x14>
c0014cce:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0014cd3:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014cd6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014cdc:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014ce2:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014ce5:	83 f8 17             	cmp    eax,0x17
c0014ce8:	77 13                	ja     c0014cfd <int_handler+0x4e>
c0014cea:	83 ec 08             	sub    esp,0x8
c0014ced:	8b 17                	mov    edx,DWORD PTR [edi]
c0014cef:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014cf2:	0f b6 c0             	movzx  eax,al
c0014cf5:	50                   	push   eax
c0014cf6:	57                   	push   edi
c0014cf7:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014cfa:	83 c4 10             	add    esp,0x10
c0014cfd:	83 c3 15             	add    ebx,0x15
c0014d00:	c1 e3 04             	shl    ebx,0x4
c0014d03:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014d07:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014d0e:	31 db                	xor    ebx,ebx
c0014d10:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014d14:	85 c0                	test   eax,eax
c0014d16:	74 13                	je     c0014d2b <int_handler+0x7c>
c0014d18:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014d1b:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014d1f:	74 1c                	je     c0014d3d <int_handler+0x8e>
c0014d21:	83 ec 08             	sub    esp,0x8
c0014d24:	52                   	push   edx
c0014d25:	56                   	push   esi
c0014d26:	ff d0                	call   eax
c0014d28:	83 c4 10             	add    esp,0x10
c0014d2b:	43                   	inc    ebx
c0014d2c:	83 fb 04             	cmp    ebx,0x4
c0014d2f:	75 df                	jne    c0014d10 <int_handler+0x61>
c0014d31:	83 c4 0c             	add    esp,0xc
c0014d34:	31 c0                	xor    eax,eax
c0014d36:	5b                   	pop    ebx
c0014d37:	31 d2                	xor    edx,edx
c0014d39:	5e                   	pop    esi
c0014d3a:	5f                   	pop    edi
c0014d3b:	5d                   	pop    ebp
c0014d3c:	c3                   	ret    
c0014d3d:	83 ec 08             	sub    esp,0x8
c0014d40:	52                   	push   edx
c0014d41:	56                   	push   esi
c0014d42:	ff d0                	call   eax
c0014d44:	83 c4 10             	add    esp,0x10
c0014d47:	83 c4 0c             	add    esp,0xc
c0014d4a:	5b                   	pop    ebx
c0014d4b:	5e                   	pop    esi
c0014d4c:	5f                   	pop    edi
c0014d4d:	5d                   	pop    ebp
c0014d4e:	c3                   	ret    
c0014d4f:	90                   	nop

c0014d50 <InterruptController::InterruptController(char const*)>:
c0014d50:	83 ec 1c             	sub    esp,0x1c
c0014d53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d57:	83 ec 08             	sub    esp,0x8
c0014d5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014d5e:	50                   	push   eax
c0014d5f:	e8 80 f8 ff ff       	call   c00145e4 <Device::Device(char const*)>
c0014d64:	83 c4 10             	add    esp,0x10
c0014d67:	ba d0 b2 02 c0       	mov    edx,0xc002b2d0
c0014d6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d70:	89 10                	mov    DWORD PTR [eax],edx
c0014d72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d76:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014d80:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d88:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014d90:	7f 5e                	jg     c0014df0 <InterruptController::InterruptController(char const*)+0xa0>
c0014d92:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014d9a:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014d9f:	7f 49                	jg     c0014dea <InterruptController::InterruptController(char const*)+0x9a>
c0014da1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014da5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014da9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014db0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014db4:	01 ca                	add    edx,ecx
c0014db6:	83 c2 54             	add    edx,0x54
c0014db9:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014dc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dc5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014dc9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014dd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014dd4:	01 ca                	add    edx,ecx
c0014dd6:	81 c2 54 04 00 00    	add    edx,0x454
c0014ddc:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014de4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014de8:	eb b0                	jmp    c0014d9a <InterruptController::InterruptController(char const*)+0x4a>
c0014dea:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014dee:	eb 98                	jmp    c0014d88 <InterruptController::InterruptController(char const*)+0x38>
c0014df0:	90                   	nop
c0014df1:	83 c4 1c             	add    esp,0x1c
c0014df4:	c3                   	ret    
c0014df5:	90                   	nop

c0014df6 <InterruptController::~InterruptController()>:
c0014df6:	83 ec 0c             	sub    esp,0xc
c0014df9:	ba d0 b2 02 c0       	mov    edx,0xc002b2d0
c0014dfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e02:	89 10                	mov    DWORD PTR [eax],edx
c0014e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e08:	83 ec 0c             	sub    esp,0xc
c0014e0b:	50                   	push   eax
c0014e0c:	e8 b5 f4 ff ff       	call   c00142c6 <Device::~Device()>
c0014e11:	83 c4 10             	add    esp,0x10
c0014e14:	90                   	nop
c0014e15:	83 c4 0c             	add    esp,0xc
c0014e18:	c3                   	ret    
c0014e19:	90                   	nop

c0014e1a <InterruptController::~InterruptController()>:
c0014e1a:	83 ec 0c             	sub    esp,0xc
c0014e1d:	83 ec 0c             	sub    esp,0xc
c0014e20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e24:	e8 cd ff ff ff       	call   c0014df6 <InterruptController::~InterruptController()>
c0014e29:	83 c4 10             	add    esp,0x10
c0014e2c:	83 ec 08             	sub    esp,0x8
c0014e2f:	68 58 21 00 00       	push   0x2158
c0014e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e38:	e8 b0 e0 ff ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0014e3d:	83 c4 10             	add    esp,0x10
c0014e40:	83 c4 0c             	add    esp,0xc
c0014e43:	c3                   	ret    

c0014e44 <displayDebugInfo(regs*)>:
c0014e44:	55                   	push   ebp
c0014e45:	57                   	push   edi
c0014e46:	56                   	push   esi
c0014e47:	53                   	push   ebx
c0014e48:	83 ec 24             	sub    esp,0x24
c0014e4b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014e4f:	0f 20 c2             	mov    edx,cr0
c0014e52:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014e56:	0f 20 d7             	mov    edi,cr2
c0014e59:	0f 20 de             	mov    esi,cr3
c0014e5c:	0f 20 e5             	mov    ebp,cr4
c0014e5f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014e62:	68 6e b0 02 c0       	push   0xc002b06e
c0014e67:	e8 61 e1 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0014e6c:	59                   	pop    ecx
c0014e6d:	58                   	pop    eax
c0014e6e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014e71:	68 79 b0 02 c0       	push   0xc002b079
c0014e76:	e8 52 e1 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0014e7b:	58                   	pop    eax
c0014e7c:	5a                   	pop    edx
c0014e7d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014e80:	68 84 b0 02 c0       	push   0xc002b084
c0014e85:	e8 43 e1 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0014e8a:	59                   	pop    ecx
c0014e8b:	58                   	pop    eax
c0014e8c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014e8f:	68 8f b0 02 c0       	push   0xc002b08f
c0014e94:	e8 34 e1 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0014e99:	58                   	pop    eax
c0014e9a:	5a                   	pop    edx
c0014e9b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014e9e:	68 9a b0 02 c0       	push   0xc002b09a
c0014ea3:	e8 25 e1 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0014ea8:	59                   	pop    ecx
c0014ea9:	58                   	pop    eax
c0014eaa:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014ead:	68 a5 b0 02 c0       	push   0xc002b0a5
c0014eb2:	e8 16 e1 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0014eb7:	58                   	pop    eax
c0014eb8:	5a                   	pop    edx
c0014eb9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014ebc:	68 b0 b0 02 c0       	push   0xc002b0b0
c0014ec1:	e8 07 e1 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0014ec6:	59                   	pop    ecx
c0014ec7:	58                   	pop    eax
c0014ec8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014ecb:	68 bb b0 02 c0       	push   0xc002b0bb
c0014ed0:	e8 f8 e0 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0014ed5:	58                   	pop    eax
c0014ed6:	5a                   	pop    edx
c0014ed7:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014eda:	68 c6 b0 02 c0       	push   0xc002b0c6
c0014edf:	e8 e9 e0 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0014ee4:	59                   	pop    ecx
c0014ee5:	58                   	pop    eax
c0014ee6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ee9:	68 d5 b0 02 c0       	push   0xc002b0d5
c0014eee:	e8 da e0 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0014ef3:	58                   	pop    eax
c0014ef4:	5a                   	pop    edx
c0014ef5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014ef8:	68 e0 b0 02 c0       	push   0xc002b0e0
c0014efd:	e8 cb e0 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0014f02:	59                   	pop    ecx
c0014f03:	58                   	pop    eax
c0014f04:	57                   	push   edi
c0014f05:	68 eb b0 02 c0       	push   0xc002b0eb
c0014f0a:	e8 be e0 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0014f0f:	58                   	pop    eax
c0014f10:	5a                   	pop    edx
c0014f11:	56                   	push   esi
c0014f12:	68 f6 b0 02 c0       	push   0xc002b0f6
c0014f17:	e8 b1 e0 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0014f1c:	59                   	pop    ecx
c0014f1d:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0014f22:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f28:	e8 42 be ff ff       	call   c0010d6f <setActiveTerminal(VgaText*)>
c0014f2d:	58                   	pop    eax
c0014f2e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014f31:	5a                   	pop    edx
c0014f32:	c1 e0 05             	shl    eax,0x5
c0014f35:	05 00 d6 02 c0       	add    eax,0xc002d600
c0014f3a:	50                   	push   eax
c0014f3b:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0014f40:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f46:	e8 43 c2 ff ff       	call   c001118e <VgaText::puts(char const*)>
c0014f4b:	59                   	pop    ecx
c0014f4c:	58                   	pop    eax
c0014f4d:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0014f52:	68 01 b1 02 c0       	push   0xc002b101
c0014f57:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f5d:	e8 2c c2 ff ff       	call   c001118e <VgaText::puts(char const*)>
c0014f62:	58                   	pop    eax
c0014f63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f68:	5a                   	pop    edx
c0014f69:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f6c:	83 c0 0c             	add    eax,0xc
c0014f6f:	50                   	push   eax
c0014f70:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0014f75:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f7b:	e8 0e c2 ff ff       	call   c001118e <VgaText::puts(char const*)>
c0014f80:	59                   	pop    ecx
c0014f81:	58                   	pop    eax
c0014f82:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0014f87:	68 0a b1 02 c0       	push   0xc002b10a
c0014f8c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f92:	e8 f7 c1 ff ff       	call   c001118e <VgaText::puts(char const*)>
c0014f97:	58                   	pop    eax
c0014f98:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0014f9d:	5a                   	pop    edx
c0014f9e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014fa1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fa7:	e8 08 c2 ff ff       	call   c00111b4 <VgaText::putx(unsigned int)>
c0014fac:	59                   	pop    ecx
c0014fad:	58                   	pop    eax
c0014fae:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0014fb3:	68 12 b1 02 c0       	push   0xc002b112
c0014fb8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fbe:	e8 cb c1 ff ff       	call   c001118e <VgaText::puts(char const*)>
c0014fc3:	58                   	pop    eax
c0014fc4:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0014fc9:	5a                   	pop    edx
c0014fca:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014fcd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fd3:	e8 dc c1 ff ff       	call   c00111b4 <VgaText::putx(unsigned int)>
c0014fd8:	59                   	pop    ecx
c0014fd9:	58                   	pop    eax
c0014fda:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0014fdf:	68 1a b1 02 c0       	push   0xc002b11a
c0014fe4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fea:	e8 9f c1 ff ff       	call   c001118e <VgaText::puts(char const*)>
c0014fef:	58                   	pop    eax
c0014ff0:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0014ff5:	5a                   	pop    edx
c0014ff6:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014ff9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fff:	e8 b0 c1 ff ff       	call   c00111b4 <VgaText::putx(unsigned int)>
c0015004:	59                   	pop    ecx
c0015005:	58                   	pop    eax
c0015006:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001500b:	68 22 b1 02 c0       	push   0xc002b122
c0015010:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015016:	e8 73 c1 ff ff       	call   c001118e <VgaText::puts(char const*)>
c001501b:	58                   	pop    eax
c001501c:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015021:	5a                   	pop    edx
c0015022:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0015025:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001502b:	e8 84 c1 ff ff       	call   c00111b4 <VgaText::putx(unsigned int)>
c0015030:	59                   	pop    ecx
c0015031:	58                   	pop    eax
c0015032:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015037:	68 2a b1 02 c0       	push   0xc002b12a
c001503c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015042:	e8 47 c1 ff ff       	call   c001118e <VgaText::puts(char const*)>
c0015047:	58                   	pop    eax
c0015048:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001504d:	5a                   	pop    edx
c001504e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0015051:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015057:	e8 58 c1 ff ff       	call   c00111b4 <VgaText::putx(unsigned int)>
c001505c:	59                   	pop    ecx
c001505d:	58                   	pop    eax
c001505e:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015063:	68 32 b1 02 c0       	push   0xc002b132
c0015068:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001506e:	e8 1b c1 ff ff       	call   c001118e <VgaText::puts(char const*)>
c0015073:	58                   	pop    eax
c0015074:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015079:	5a                   	pop    edx
c001507a:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001507d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015083:	e8 2c c1 ff ff       	call   c00111b4 <VgaText::putx(unsigned int)>
c0015088:	59                   	pop    ecx
c0015089:	58                   	pop    eax
c001508a:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001508f:	68 3a b1 02 c0       	push   0xc002b13a
c0015094:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001509a:	e8 ef c0 ff ff       	call   c001118e <VgaText::puts(char const*)>
c001509f:	58                   	pop    eax
c00150a0:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c00150a5:	5a                   	pop    edx
c00150a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00150aa:	52                   	push   edx
c00150ab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150b1:	e8 fe c0 ff ff       	call   c00111b4 <VgaText::putx(unsigned int)>
c00150b6:	59                   	pop    ecx
c00150b7:	58                   	pop    eax
c00150b8:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c00150bd:	68 43 b1 02 c0       	push   0xc002b143
c00150c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c8:	e8 c1 c0 ff ff       	call   c001118e <VgaText::puts(char const*)>
c00150cd:	58                   	pop    eax
c00150ce:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c00150d3:	5a                   	pop    edx
c00150d4:	57                   	push   edi
c00150d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150db:	e8 d4 c0 ff ff       	call   c00111b4 <VgaText::putx(unsigned int)>
c00150e0:	59                   	pop    ecx
c00150e1:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c00150e6:	5f                   	pop    edi
c00150e7:	68 4b b1 02 c0       	push   0xc002b14b
c00150ec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150f2:	e8 97 c0 ff ff       	call   c001118e <VgaText::puts(char const*)>
c00150f7:	58                   	pop    eax
c00150f8:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c00150fd:	5a                   	pop    edx
c00150fe:	56                   	push   esi
c00150ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015105:	e8 aa c0 ff ff       	call   c00111b4 <VgaText::putx(unsigned int)>
c001510a:	59                   	pop    ecx
c001510b:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015110:	5e                   	pop    esi
c0015111:	68 53 b1 02 c0       	push   0xc002b153
c0015116:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001511c:	e8 6d c0 ff ff       	call   c001118e <VgaText::puts(char const*)>
c0015121:	5f                   	pop    edi
c0015122:	58                   	pop    eax
c0015123:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015128:	55                   	push   ebp
c0015129:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001512f:	e8 80 c0 ff ff       	call   c00111b4 <VgaText::putx(unsigned int)>
c0015134:	58                   	pop    eax
c0015135:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001513a:	5a                   	pop    edx
c001513b:	68 5b b1 02 c0       	push   0xc002b15b
c0015140:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015146:	e8 43 c0 ff ff       	call   c001118e <VgaText::puts(char const*)>
c001514b:	0f 21 c0             	mov    eax,db0
c001514e:	59                   	pop    ecx
c001514f:	5e                   	pop    esi
c0015150:	50                   	push   eax
c0015151:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015156:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001515c:	e8 53 c0 ff ff       	call   c00111b4 <VgaText::putx(unsigned int)>
c0015161:	5f                   	pop    edi
c0015162:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015167:	5d                   	pop    ebp
c0015168:	68 64 b1 02 c0       	push   0xc002b164
c001516d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015173:	e8 16 c0 ff ff       	call   c001118e <VgaText::puts(char const*)>
c0015178:	0f 21 c8             	mov    eax,db1
c001517b:	5a                   	pop    edx
c001517c:	59                   	pop    ecx
c001517d:	50                   	push   eax
c001517e:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015183:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015189:	e8 26 c0 ff ff       	call   c00111b4 <VgaText::putx(unsigned int)>
c001518e:	5e                   	pop    esi
c001518f:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015194:	5f                   	pop    edi
c0015195:	68 6c b1 02 c0       	push   0xc002b16c
c001519a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151a0:	e8 e9 bf ff ff       	call   c001118e <VgaText::puts(char const*)>
c00151a5:	0f 21 d0             	mov    eax,db2
c00151a8:	5d                   	pop    ebp
c00151a9:	5a                   	pop    edx
c00151aa:	50                   	push   eax
c00151ab:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c00151b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151b6:	e8 f9 bf ff ff       	call   c00111b4 <VgaText::putx(unsigned int)>
c00151bb:	59                   	pop    ecx
c00151bc:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c00151c1:	5e                   	pop    esi
c00151c2:	68 74 b1 02 c0       	push   0xc002b174
c00151c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151cd:	e8 bc bf ff ff       	call   c001118e <VgaText::puts(char const*)>
c00151d2:	0f 21 d8             	mov    eax,db3
c00151d5:	5f                   	pop    edi
c00151d6:	5d                   	pop    ebp
c00151d7:	50                   	push   eax
c00151d8:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c00151dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151e3:	e8 cc bf ff ff       	call   c00111b4 <VgaText::putx(unsigned int)>
c00151e8:	58                   	pop    eax
c00151e9:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c00151ee:	5a                   	pop    edx
c00151ef:	68 7c b1 02 c0       	push   0xc002b17c
c00151f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151fa:	e8 8f bf ff ff       	call   c001118e <VgaText::puts(char const*)>
c00151ff:	0f 21 f0             	mov    eax,db6
c0015202:	59                   	pop    ecx
c0015203:	5e                   	pop    esi
c0015204:	50                   	push   eax
c0015205:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001520a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015210:	e8 9f bf ff ff       	call   c00111b4 <VgaText::putx(unsigned int)>
c0015215:	5f                   	pop    edi
c0015216:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001521b:	5d                   	pop    ebp
c001521c:	68 84 b1 02 c0       	push   0xc002b184
c0015221:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015227:	e8 62 bf ff ff       	call   c001118e <VgaText::puts(char const*)>
c001522c:	0f 21 f8             	mov    eax,db7
c001522f:	5a                   	pop    edx
c0015230:	59                   	pop    ecx
c0015231:	50                   	push   eax
c0015232:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015237:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001523d:	e8 72 bf ff ff       	call   c00111b4 <VgaText::putx(unsigned int)>
c0015242:	5e                   	pop    esi
c0015243:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015246:	e8 50 85 00 00       	call   c001d79b <Thr::getDriverNameFromAddress(unsigned long)>
c001524b:	83 c4 10             	add    esp,0x10
c001524e:	85 c0                	test   eax,eax
c0015250:	74 7d                	je     c00152cf <displayDebugInfo(regs*)+0x48b>
c0015252:	89 c6                	mov    esi,eax
c0015254:	50                   	push   eax
c0015255:	50                   	push   eax
c0015256:	56                   	push   esi
c0015257:	68 8c b1 02 c0       	push   0xc002b18c
c001525c:	e8 6c dd ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0015261:	5a                   	pop    edx
c0015262:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015267:	59                   	pop    ecx
c0015268:	68 9a b1 02 c0       	push   0xc002b19a
c001526d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015273:	e8 16 bf ff ff       	call   c001118e <VgaText::puts(char const*)>
c0015278:	5f                   	pop    edi
c0015279:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001527e:	5d                   	pop    ebp
c001527f:	56                   	push   esi
c0015280:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015286:	e8 03 bf ff ff       	call   c001118e <VgaText::puts(char const*)>
c001528b:	58                   	pop    eax
c001528c:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015291:	5a                   	pop    edx
c0015292:	68 a6 b1 02 c0       	push   0xc002b1a6
c0015297:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001529d:	e8 ec be ff ff       	call   c001118e <VgaText::puts(char const*)>
c00152a2:	59                   	pop    ecx
c00152a3:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c00152a8:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00152ae:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00152b1:	e8 1c 85 00 00       	call   c001d7d2 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00152b6:	5b                   	pop    ebx
c00152b7:	5d                   	pop    ebp
c00152b8:	50                   	push   eax
c00152b9:	57                   	push   edi
c00152ba:	e8 f5 be ff ff       	call   c00111b4 <VgaText::putx(unsigned int)>
c00152bf:	58                   	pop    eax
c00152c0:	5a                   	pop    edx
c00152c1:	56                   	push   esi
c00152c2:	68 b2 b1 02 c0       	push   0xc002b1b2
c00152c7:	e8 01 dd ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c00152cc:	83 c4 10             	add    esp,0x10
c00152cf:	fa                   	cli    
c00152d0:	f4                   	hlt    
c00152d1:	eb fe                	jmp    c00152d1 <displayDebugInfo(regs*)+0x48d>

c00152d3 <x87EmulHandler(regs*, void*)>:
c00152d3:	53                   	push   ebx
c00152d4:	83 ec 14             	sub    esp,0x14
c00152d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00152db:	53                   	push   ebx
c00152dc:	e8 47 a8 00 00       	call   c001fb28 <Vm::x87Handler(regs*)>
c00152e1:	83 c4 10             	add    esp,0x10
c00152e4:	84 c0                	test   al,al
c00152e6:	74 05                	je     c00152ed <x87EmulHandler(regs*, void*)+0x1a>
c00152e8:	83 c4 08             	add    esp,0x8
c00152eb:	5b                   	pop    ebx
c00152ec:	c3                   	ret    
c00152ed:	83 ec 0c             	sub    esp,0xc
c00152f0:	68 c2 b1 02 c0       	push   0xc002b1c2
c00152f5:	e8 d3 dc ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c00152fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152fd:	e8 42 fb ff ff       	call   c0014e44 <displayDebugInfo(regs*)>

c0015302 <gpFault(regs*, void*)>:
c0015302:	53                   	push   ebx
c0015303:	83 ec 14             	sub    esp,0x14
c0015306:	c7 05 f4 e7 02 c0 a5 ee 01 c0 	mov    DWORD PTR ds:0xc002e7f4,0xc001eea5
c0015310:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015314:	53                   	push   ebx
c0015315:	e8 8b 9b 00 00       	call   c001eea5 <Vm::faultHandler(regs*)>
c001531a:	83 c4 10             	add    esp,0x10
c001531d:	84 c0                	test   al,al
c001531f:	74 05                	je     c0015326 <gpFault(regs*, void*)+0x24>
c0015321:	83 c4 08             	add    esp,0x8
c0015324:	5b                   	pop    ebx
c0015325:	c3                   	ret    
c0015326:	83 ec 0c             	sub    esp,0xc
c0015329:	68 d8 b1 02 c0       	push   0xc002b1d8
c001532e:	e8 9a dc ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0015333:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015336:	e8 09 fb ff ff       	call   c0014e44 <displayDebugInfo(regs*)>

c001533b <pgFault(regs*, void*)>:
c001533b:	83 ec 18             	sub    esp,0x18
c001533e:	68 f3 b1 02 c0       	push   0xc002b1f3
c0015343:	e8 85 dc ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0015348:	0f 20 d0             	mov    eax,cr2
c001534b:	5a                   	pop    edx
c001534c:	59                   	pop    ecx
c001534d:	50                   	push   eax
c001534e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015353:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015356:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001535c:	e8 ff d7 ff ff       	call   c0012b60 <VAS::tryLoadBackOffDisk(unsigned long)>
c0015361:	83 c4 10             	add    esp,0x10
c0015364:	84 c0                	test   al,al
c0015366:	74 04                	je     c001536c <pgFault(regs*, void*)+0x31>
c0015368:	83 c4 0c             	add    esp,0xc
c001536b:	c3                   	ret    
c001536c:	83 ec 0c             	sub    esp,0xc
c001536f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015373:	e8 cc fa ff ff       	call   c0014e44 <displayDebugInfo(regs*)>

c0015378 <otherISRHandler(regs*, void*)>:
c0015378:	53                   	push   ebx
c0015379:	83 ec 0c             	sub    esp,0xc
c001537c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015380:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015383:	50                   	push   eax
c0015384:	50                   	push   eax
c0015385:	68 00 b2 02 c0       	push   0xc002b200
c001538a:	e8 3e dc ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001538f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015392:	e8 ad fa ff ff       	call   c0014e44 <displayDebugInfo(regs*)>

c0015397 <opcodeFault(regs*, void*)>:
c0015397:	55                   	push   ebp
c0015398:	89 e5                	mov    ebp,esp
c001539a:	56                   	push   esi
c001539b:	53                   	push   ebx
c001539c:	83 ec 40             	sub    esp,0x40
c001539f:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c00153a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00153aa:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00153b0:	84 c0                	test   al,al
c00153b2:	74 24                	je     c00153d8 <opcodeFault(regs*, void*)+0x41>
c00153b4:	83 ec 0c             	sub    esp,0xc
c00153b7:	68 20 b2 02 c0       	push   0xc002b220
c00153bc:	e8 0c dc ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c00153c1:	83 c4 10             	add    esp,0x10
c00153c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153ca:	8d 50 19             	lea    edx,[eax+0x19]
c00153cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153d3:	e9 be 05 00 00       	jmp    c0015996 <opcodeFault(regs*, void*)+0x5ff>
c00153d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153db:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153de:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00153e1:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00153e5:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00153e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153ef:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00153f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f5:	8a 00                	mov    al,BYTE PTR [eax]
c00153f7:	3c f0                	cmp    al,0xf0
c00153f9:	75 17                	jne    c0015412 <opcodeFault(regs*, void*)+0x7b>
c00153fb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015401:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015404:	8d 50 01             	lea    edx,[eax+0x1]
c0015407:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001540d:	e9 da 00 00 00       	jmp    c00154ec <opcodeFault(regs*, void*)+0x155>
c0015412:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015415:	8a 00                	mov    al,BYTE PTR [eax]
c0015417:	3c f2                	cmp    al,0xf2
c0015419:	74 09                	je     c0015424 <opcodeFault(regs*, void*)+0x8d>
c001541b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001541e:	8a 00                	mov    al,BYTE PTR [eax]
c0015420:	3c f3                	cmp    al,0xf3
c0015422:	75 1b                	jne    c001543f <opcodeFault(regs*, void*)+0xa8>
c0015424:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015428:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001542b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015431:	8d 50 01             	lea    edx,[eax+0x1]
c0015434:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015437:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001543a:	e9 ad 00 00 00       	jmp    c00154ec <opcodeFault(regs*, void*)+0x155>
c001543f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015442:	8a 00                	mov    al,BYTE PTR [eax]
c0015444:	3c 66                	cmp    al,0x66
c0015446:	75 1f                	jne    c0015467 <opcodeFault(regs*, void*)+0xd0>
c0015448:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001544c:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015450:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015453:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015456:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015459:	8d 50 01             	lea    edx,[eax+0x1]
c001545c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001545f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015462:	e9 85 00 00 00       	jmp    c00154ec <opcodeFault(regs*, void*)+0x155>
c0015467:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001546a:	8a 00                	mov    al,BYTE PTR [eax]
c001546c:	3c 67                	cmp    al,0x67
c001546e:	75 18                	jne    c0015488 <opcodeFault(regs*, void*)+0xf1>
c0015470:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015474:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001547a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001547d:	8d 50 01             	lea    edx,[eax+0x1]
c0015480:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015483:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015486:	eb 64                	jmp    c00154ec <opcodeFault(regs*, void*)+0x155>
c0015488:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001548b:	8a 00                	mov    al,BYTE PTR [eax]
c001548d:	3c 2e                	cmp    al,0x2e
c001548f:	74 09                	je     c001549a <opcodeFault(regs*, void*)+0x103>
c0015491:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015494:	8a 00                	mov    al,BYTE PTR [eax]
c0015496:	3c 3e                	cmp    al,0x3e
c0015498:	75 18                	jne    c00154b2 <opcodeFault(regs*, void*)+0x11b>
c001549a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001549e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154a7:	8d 50 01             	lea    edx,[eax+0x1]
c00154aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154b0:	eb 3a                	jmp    c00154ec <opcodeFault(regs*, void*)+0x155>
c00154b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b5:	8a 00                	mov    al,BYTE PTR [eax]
c00154b7:	3c 36                	cmp    al,0x36
c00154b9:	74 1b                	je     c00154d6 <opcodeFault(regs*, void*)+0x13f>
c00154bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154be:	8a 00                	mov    al,BYTE PTR [eax]
c00154c0:	3c 26                	cmp    al,0x26
c00154c2:	74 12                	je     c00154d6 <opcodeFault(regs*, void*)+0x13f>
c00154c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c7:	8a 00                	mov    al,BYTE PTR [eax]
c00154c9:	3c 64                	cmp    al,0x64
c00154cb:	74 09                	je     c00154d6 <opcodeFault(regs*, void*)+0x13f>
c00154cd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d0:	8a 00                	mov    al,BYTE PTR [eax]
c00154d2:	3c 65                	cmp    al,0x65
c00154d4:	75 16                	jne    c00154ec <opcodeFault(regs*, void*)+0x155>
c00154d6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00154da:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154e3:	8d 50 01             	lea    edx,[eax+0x1]
c00154e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ef:	8a 00                	mov    al,BYTE PTR [eax]
c00154f1:	3c 0f                	cmp    al,0xf
c00154f3:	0f 85 ad 00 00 00    	jne    c00155a6 <opcodeFault(regs*, void*)+0x20f>
c00154f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154fc:	40                   	inc    eax
c00154fd:	8a 00                	mov    al,BYTE PTR [eax]
c00154ff:	3c c2                	cmp    al,0xc2
c0015501:	74 0e                	je     c0015511 <opcodeFault(regs*, void*)+0x17a>
c0015503:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015506:	40                   	inc    eax
c0015507:	8a 00                	mov    al,BYTE PTR [eax]
c0015509:	3c c3                	cmp    al,0xc3
c001550b:	0f 85 95 00 00 00    	jne    c00155a6 <opcodeFault(regs*, void*)+0x20f>
c0015511:	83 ec 0c             	sub    esp,0xc
c0015514:	68 43 b2 02 c0       	push   0xc002b243
c0015519:	e8 af da ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001551e:	83 c4 10             	add    esp,0x10
c0015521:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015524:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015527:	8d 50 01             	lea    edx,[eax+0x1]
c001552a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015530:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015533:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015536:	8a 00                	mov    al,BYTE PTR [eax]
c0015538:	8d 50 fe             	lea    edx,[eax-0x2]
c001553b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001553e:	88 10                	mov    BYTE PTR [eax],dl
c0015540:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015543:	50                   	push   eax
c0015544:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015547:	50                   	push   eax
c0015548:	8d 45 c4             	lea    eax,[ebp-0x3c]
c001554b:	50                   	push   eax
c001554c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001554f:	e8 e2 47 00 00       	call   c0019d36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015554:	83 c4 10             	add    esp,0x10
c0015557:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001555a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001555d:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015560:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015563:	01 d0                	add    eax,edx
c0015565:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015568:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001556e:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015571:	48                   	dec    eax
c0015572:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015578:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001557b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001557e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015581:	83 ec 04             	sub    esp,0x4
c0015584:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015587:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001558a:	50                   	push   eax
c001558b:	e8 24 ac fe ff       	call   c00001b4 <voodooXADD>
c0015590:	83 c4 10             	add    esp,0x10
c0015593:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015596:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015599:	01 c2                	add    edx,eax
c001559b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155a1:	e9 f0 03 00 00       	jmp    c0015996 <opcodeFault(regs*, void*)+0x5ff>
c00155a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155a9:	8a 00                	mov    al,BYTE PTR [eax]
c00155ab:	3c 0f                	cmp    al,0xf
c00155ad:	0f 85 8b 01 00 00    	jne    c001573e <opcodeFault(regs*, void*)+0x3a7>
c00155b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155b6:	40                   	inc    eax
c00155b7:	8a 00                	mov    al,BYTE PTR [eax]
c00155b9:	3c c7                	cmp    al,0xc7
c00155bb:	0f 86 7d 01 00 00    	jbe    c001573e <opcodeFault(regs*, void*)+0x3a7>
c00155c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155c4:	40                   	inc    eax
c00155c5:	8a 00                	mov    al,BYTE PTR [eax]
c00155c7:	3c cf                	cmp    al,0xcf
c00155c9:	0f 87 6f 01 00 00    	ja     c001573e <opcodeFault(regs*, void*)+0x3a7>
c00155cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155d2:	40                   	inc    eax
c00155d3:	8a 00                	mov    al,BYTE PTR [eax]
c00155d5:	83 c0 38             	add    eax,0x38
c00155d8:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00155db:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00155df:	75 0b                	jne    c00155ec <opcodeFault(regs*, void*)+0x255>
c00155e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00155e7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155ea:	eb 75                	jmp    c0015661 <opcodeFault(regs*, void*)+0x2ca>
c00155ec:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00155f0:	75 0b                	jne    c00155fd <opcodeFault(regs*, void*)+0x266>
c00155f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00155f8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155fb:	eb 64                	jmp    c0015661 <opcodeFault(regs*, void*)+0x2ca>
c00155fd:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015601:	75 0b                	jne    c001560e <opcodeFault(regs*, void*)+0x277>
c0015603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015606:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015609:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001560c:	eb 53                	jmp    c0015661 <opcodeFault(regs*, void*)+0x2ca>
c001560e:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015612:	75 0b                	jne    c001561f <opcodeFault(regs*, void*)+0x288>
c0015614:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015617:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001561a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001561d:	eb 42                	jmp    c0015661 <opcodeFault(regs*, void*)+0x2ca>
c001561f:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015623:	75 0b                	jne    c0015630 <opcodeFault(regs*, void*)+0x299>
c0015625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015628:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001562b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001562e:	eb 31                	jmp    c0015661 <opcodeFault(regs*, void*)+0x2ca>
c0015630:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015634:	75 0b                	jne    c0015641 <opcodeFault(regs*, void*)+0x2aa>
c0015636:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015639:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001563c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001563f:	eb 20                	jmp    c0015661 <opcodeFault(regs*, void*)+0x2ca>
c0015641:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015645:	75 0b                	jne    c0015652 <opcodeFault(regs*, void*)+0x2bb>
c0015647:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001564d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015650:	eb 0f                	jmp    c0015661 <opcodeFault(regs*, void*)+0x2ca>
c0015652:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015656:	75 09                	jne    c0015661 <opcodeFault(regs*, void*)+0x2ca>
c0015658:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001565b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001565e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015661:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015665:	74 10                	je     c0015677 <opcodeFault(regs*, void*)+0x2e0>
c0015667:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001566e:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015675:	eb 2d                	jmp    c00156a4 <opcodeFault(regs*, void*)+0x30d>
c0015677:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001567a:	c1 e0 18             	shl    eax,0x18
c001567d:	89 c2                	mov    edx,eax
c001567f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015682:	c1 e0 08             	shl    eax,0x8
c0015685:	25 00 00 ff 00       	and    eax,0xff0000
c001568a:	09 c2                	or     edx,eax
c001568c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001568f:	c1 e8 08             	shr    eax,0x8
c0015692:	25 00 ff 00 00       	and    eax,0xff00
c0015697:	09 c2                	or     edx,eax
c0015699:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001569c:	c1 e8 18             	shr    eax,0x18
c001569f:	09 d0                	or     eax,edx
c00156a1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00156a4:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00156a8:	75 0b                	jne    c00156b5 <opcodeFault(regs*, void*)+0x31e>
c00156aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ad:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156b0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00156b3:	eb 75                	jmp    c001572a <opcodeFault(regs*, void*)+0x393>
c00156b5:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00156b9:	75 0b                	jne    c00156c6 <opcodeFault(regs*, void*)+0x32f>
c00156bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156be:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156c1:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00156c4:	eb 64                	jmp    c001572a <opcodeFault(regs*, void*)+0x393>
c00156c6:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00156ca:	75 0b                	jne    c00156d7 <opcodeFault(regs*, void*)+0x340>
c00156cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156cf:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156d2:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00156d5:	eb 53                	jmp    c001572a <opcodeFault(regs*, void*)+0x393>
c00156d7:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00156db:	75 0b                	jne    c00156e8 <opcodeFault(regs*, void*)+0x351>
c00156dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156e3:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00156e6:	eb 42                	jmp    c001572a <opcodeFault(regs*, void*)+0x393>
c00156e8:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00156ec:	75 0b                	jne    c00156f9 <opcodeFault(regs*, void*)+0x362>
c00156ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156f4:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00156f7:	eb 31                	jmp    c001572a <opcodeFault(regs*, void*)+0x393>
c00156f9:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00156fd:	75 0b                	jne    c001570a <opcodeFault(regs*, void*)+0x373>
c00156ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015702:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015705:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015708:	eb 20                	jmp    c001572a <opcodeFault(regs*, void*)+0x393>
c001570a:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001570e:	75 0b                	jne    c001571b <opcodeFault(regs*, void*)+0x384>
c0015710:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015713:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015716:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015719:	eb 0f                	jmp    c001572a <opcodeFault(regs*, void*)+0x393>
c001571b:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001571f:	75 09                	jne    c001572a <opcodeFault(regs*, void*)+0x393>
c0015721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015724:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015727:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001572a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015730:	8d 50 02             	lea    edx,[eax+0x2]
c0015733:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015736:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015739:	e9 58 02 00 00       	jmp    c0015996 <opcodeFault(regs*, void*)+0x5ff>
c001573e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015741:	8a 00                	mov    al,BYTE PTR [eax]
c0015743:	3c 0f                	cmp    al,0xf
c0015745:	0f 85 76 01 00 00    	jne    c00158c1 <opcodeFault(regs*, void*)+0x52a>
c001574b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001574e:	40                   	inc    eax
c001574f:	8a 00                	mov    al,BYTE PTR [eax]
c0015751:	3c c7                	cmp    al,0xc7
c0015753:	0f 85 68 01 00 00    	jne    c00158c1 <opcodeFault(regs*, void*)+0x52a>
c0015759:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001575c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015762:	8d 50 01             	lea    edx,[eax+0x1]
c0015765:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015768:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001576b:	8d 45 ba             	lea    eax,[ebp-0x46]
c001576e:	50                   	push   eax
c001576f:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015772:	50                   	push   eax
c0015773:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015776:	50                   	push   eax
c0015777:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001577a:	e8 b7 45 00 00       	call   c0019d36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001577f:	83 c4 10             	add    esp,0x10
c0015782:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015785:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015788:	83 f0 01             	xor    eax,0x1
c001578b:	84 c0                	test   al,al
c001578d:	0f 84 2e 01 00 00    	je     c00158c1 <opcodeFault(regs*, void*)+0x52a>
c0015793:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015796:	3c 01                	cmp    al,0x1
c0015798:	0f 85 23 01 00 00    	jne    c00158c1 <opcodeFault(regs*, void*)+0x52a>
c001579e:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00157a1:	83 f0 01             	xor    eax,0x1
c00157a4:	84 c0                	test   al,al
c00157a6:	0f 84 15 01 00 00    	je     c00158c1 <opcodeFault(regs*, void*)+0x52a>
c00157ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157af:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00157b2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157b5:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00157bc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157bf:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00157c2:	89 c2                	mov    edx,eax
c00157c4:	b8 00 00 00 00       	mov    eax,0x0
c00157c9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157cc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00157d5:	ba 00 00 00 00       	mov    edx,0x0
c00157da:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00157dd:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00157e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e3:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00157e6:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00157e9:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00157f0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157f3:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157f6:	89 c2                	mov    edx,eax
c00157f8:	b8 00 00 00 00       	mov    eax,0x0
c00157fd:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015800:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015803:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015806:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015809:	ba 00 00 00 00       	mov    edx,0x0
c001580e:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015811:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015814:	e8 7b 86 00 00       	call   c001de94 <lockScheduler()>
c0015819:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001581c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001581f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015821:	89 c1                	mov    ecx,eax
c0015823:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015826:	89 cb                	mov    ebx,ecx
c0015828:	89 d0                	mov    eax,edx
c001582a:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001582d:	89 c6                	mov    esi,eax
c001582f:	89 f0                	mov    eax,esi
c0015831:	09 d8                	or     eax,ebx
c0015833:	85 c0                	test   eax,eax
c0015835:	75 21                	jne    c0015858 <opcodeFault(regs*, void*)+0x4c1>
c0015837:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001583a:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001583d:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015840:	89 01                	mov    DWORD PTR [ecx],eax
c0015842:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015848:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001584b:	83 c8 40             	or     eax,0x40
c001584e:	89 c2                	mov    edx,eax
c0015850:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015853:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015856:	eb 3e                	jmp    c0015896 <opcodeFault(regs*, void*)+0x4ff>
c0015858:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001585b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001585e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015860:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015863:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015866:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015869:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001586f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015872:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015875:	89 d0                	mov    eax,edx
c0015877:	31 d2                	xor    edx,edx
c0015879:	89 c3                	mov    ebx,eax
c001587b:	89 d6                	mov    esi,edx
c001587d:	89 da                	mov    edx,ebx
c001587f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015882:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015885:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015888:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001588b:	83 e0 bf             	and    eax,0xffffffbf
c001588e:	89 c2                	mov    edx,eax
c0015890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015893:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015896:	e8 fb 85 00 00       	call   c001de96 <unlockScheduler()>
c001589b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158a1:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00158a4:	01 c2                	add    edx,eax
c00158a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00158ac:	83 ec 0c             	sub    esp,0xc
c00158af:	68 52 b2 02 c0       	push   0xc002b252
c00158b4:	e8 14 d7 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c00158b9:	83 c4 10             	add    esp,0x10
c00158bc:	e9 d5 00 00 00       	jmp    c0015996 <opcodeFault(regs*, void*)+0x5ff>
c00158c1:	83 ec 0c             	sub    esp,0xc
c00158c4:	68 65 b2 02 c0       	push   0xc002b265
c00158c9:	e8 ff d6 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c00158ce:	83 c4 10             	add    esp,0x10
c00158d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158dd:	c1 e0 04             	shl    eax,0x4
c00158e0:	01 d0                	add    eax,edx
c00158e2:	83 c0 03             	add    eax,0x3
c00158e5:	8a 00                	mov    al,BYTE PTR [eax]
c00158e7:	0f b6 d8             	movzx  ebx,al
c00158ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ed:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158f6:	c1 e0 04             	shl    eax,0x4
c00158f9:	01 d0                	add    eax,edx
c00158fb:	83 c0 02             	add    eax,0x2
c00158fe:	8a 00                	mov    al,BYTE PTR [eax]
c0015900:	0f b6 c8             	movzx  ecx,al
c0015903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015906:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001590c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001590f:	c1 e0 04             	shl    eax,0x4
c0015912:	01 d0                	add    eax,edx
c0015914:	40                   	inc    eax
c0015915:	8a 00                	mov    al,BYTE PTR [eax]
c0015917:	0f b6 d0             	movzx  edx,al
c001591a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001591d:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015920:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015923:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015926:	c1 e0 04             	shl    eax,0x4
c0015929:	01 f0                	add    eax,esi
c001592b:	8a 00                	mov    al,BYTE PTR [eax]
c001592d:	0f b6 c0             	movzx  eax,al
c0015930:	83 ec 0c             	sub    esp,0xc
c0015933:	53                   	push   ebx
c0015934:	51                   	push   ecx
c0015935:	52                   	push   edx
c0015936:	50                   	push   eax
c0015937:	68 78 b2 02 c0       	push   0xc002b278
c001593c:	e8 8c d6 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0015941:	83 c4 20             	add    esp,0x20
c0015944:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015947:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001594a:	83 c0 03             	add    eax,0x3
c001594d:	8a 00                	mov    al,BYTE PTR [eax]
c001594f:	0f b6 d8             	movzx  ebx,al
c0015952:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015955:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015958:	83 c0 02             	add    eax,0x2
c001595b:	8a 00                	mov    al,BYTE PTR [eax]
c001595d:	0f b6 c8             	movzx  ecx,al
c0015960:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015963:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015966:	40                   	inc    eax
c0015967:	8a 00                	mov    al,BYTE PTR [eax]
c0015969:	0f b6 d0             	movzx  edx,al
c001596c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001596f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015972:	8a 00                	mov    al,BYTE PTR [eax]
c0015974:	0f b6 c0             	movzx  eax,al
c0015977:	83 ec 0c             	sub    esp,0xc
c001597a:	53                   	push   ebx
c001597b:	51                   	push   ecx
c001597c:	52                   	push   edx
c001597d:	50                   	push   eax
c001597e:	68 a0 b2 02 c0       	push   0xc002b2a0
c0015983:	e8 45 d6 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0015988:	83 c4 20             	add    esp,0x20
c001598b:	83 ec 0c             	sub    esp,0xc
c001598e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015991:	e8 ae f4 ff ff       	call   c0014e44 <displayDebugInfo(regs*)>
c0015996:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015999:	5b                   	pop    ebx
c001599a:	5e                   	pop    esi
c001599b:	5d                   	pop    ebp
c001599c:	c3                   	ret    

c001599d <displayProgramFault(char const*)>:
c001599d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00159a5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00159ab:	85 c0                	test   eax,eax
c00159ad:	74 15                	je     c00159c4 <displayProgramFault(char const*)+0x27>
c00159af:	83 ec 0c             	sub    esp,0xc
c00159b2:	6a 04                	push   0x4
c00159b4:	6a 0f                	push   0xf
c00159b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00159ba:	50                   	push   eax
c00159bb:	e8 90 b4 ff ff       	call   c0010e50 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00159c0:	83 c4 1c             	add    esp,0x1c
c00159c3:	c3                   	ret    
c00159c4:	c3                   	ret    

c00159c5 <setupInterruptController()>:
c00159c5:	55                   	push   ebp
c00159c6:	89 e5                	mov    ebp,esp
c00159c8:	53                   	push   ebx
c00159c9:	83 ec 24             	sub    esp,0x24
c00159cc:	b8 00 00 00 00       	mov    eax,0x0
c00159d1:	85 c0                	test   eax,eax
c00159d3:	0f 95 c0             	setne  al
c00159d6:	84 c0                	test   al,al
c00159d8:	74 5b                	je     c0015a35 <setupInterruptController()+0x70>
c00159da:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00159e1:	83 ec 0c             	sub    esp,0xc
c00159e4:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00159e7:	e8 54 9e ff ff       	call   c000f840 <malloc>
c00159ec:	83 c4 10             	add    esp,0x10
c00159ef:	89 c3                	mov    ebx,eax
c00159f1:	83 ec 0c             	sub    esp,0xc
c00159f4:	53                   	push   ebx
c00159f5:	e8 f2 ff 00 00       	call   c00259ec <APIC::APIC()>
c00159fa:	83 c4 10             	add    esp,0x10
c00159fd:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015a00:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015a03:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a06:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a08:	83 c0 08             	add    eax,0x8
c0015a0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a0d:	6a 00                	push   0x0
c0015a0f:	6a 00                	push   0x0
c0015a11:	6a 00                	push   0x0
c0015a13:	52                   	push   edx
c0015a14:	ff d0                	call   eax
c0015a16:	83 c4 10             	add    esp,0x10
c0015a19:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0015a1e:	83 ec 08             	sub    esp,0x8
c0015a21:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015a24:	50                   	push   eax
c0015a25:	e8 ca e9 ff ff       	call   c00143f4 <Device::addChild(Device*)>
c0015a2a:	83 c4 10             	add    esp,0x10
c0015a2d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a30:	e9 52 03 00 00       	jmp    c0015d87 <setupInterruptController()+0x3c2>
c0015a35:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0015a3a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015a40:	83 e0 01             	and    eax,0x1
c0015a43:	84 c0                	test   al,al
c0015a45:	0f 95 c0             	setne  al
c0015a48:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015a4b:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015a52:	83 ec 0c             	sub    esp,0xc
c0015a55:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015a58:	e8 e3 9d ff ff       	call   c000f840 <malloc>
c0015a5d:	83 c4 10             	add    esp,0x10
c0015a60:	89 c3                	mov    ebx,eax
c0015a62:	83 ec 0c             	sub    esp,0xc
c0015a65:	53                   	push   ebx
c0015a66:	e8 d9 04 01 00       	call   c0025f44 <PIC::PIC()>
c0015a6b:	83 c4 10             	add    esp,0x10
c0015a6e:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a71:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a74:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a77:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a79:	83 c0 08             	add    eax,0x8
c0015a7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7e:	6a 00                	push   0x0
c0015a80:	6a 00                	push   0x0
c0015a82:	6a 00                	push   0x0
c0015a84:	52                   	push   edx
c0015a85:	ff d0                	call   eax
c0015a87:	83 c4 10             	add    esp,0x10
c0015a8a:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015a8e:	74 73                	je     c0015b03 <setupInterruptController()+0x13e>
c0015a90:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a96:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a98:	83 c0 0c             	add    eax,0xc
c0015a9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a9d:	6a 00                	push   0x0
c0015a9f:	6a 00                	push   0x0
c0015aa1:	6a 00                	push   0x0
c0015aa3:	52                   	push   edx
c0015aa4:	ff d0                	call   eax
c0015aa6:	83 c4 10             	add    esp,0x10
c0015aa9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015aad:	74 15                	je     c0015ac4 <setupInterruptController()+0xff>
c0015aaf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ab2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab4:	83 c0 04             	add    eax,0x4
c0015ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab9:	83 ec 0c             	sub    esp,0xc
c0015abc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015abf:	ff d0                	call   eax
c0015ac1:	83 c4 10             	add    esp,0x10
c0015ac4:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015acb:	83 ec 0c             	sub    esp,0xc
c0015ace:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015ad1:	e8 6a 9d ff ff       	call   c000f840 <malloc>
c0015ad6:	83 c4 10             	add    esp,0x10
c0015ad9:	89 c3                	mov    ebx,eax
c0015adb:	83 ec 0c             	sub    esp,0xc
c0015ade:	53                   	push   ebx
c0015adf:	e8 08 ff 00 00       	call   c00259ec <APIC::APIC()>
c0015ae4:	83 c4 10             	add    esp,0x10
c0015ae7:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015aea:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015aed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015af0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af2:	83 c0 08             	add    eax,0x8
c0015af5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af7:	6a 00                	push   0x0
c0015af9:	6a 00                	push   0x0
c0015afb:	6a 00                	push   0x0
c0015afd:	52                   	push   edx
c0015afe:	ff d0                	call   eax
c0015b00:	83 c4 10             	add    esp,0x10
c0015b03:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0015b08:	83 ec 08             	sub    esp,0x8
c0015b0b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b0e:	50                   	push   eax
c0015b0f:	e8 e0 e8 ff ff       	call   c00143f4 <Device::addChild(Device*)>
c0015b14:	83 c4 10             	add    esp,0x10
c0015b17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1c:	83 c0 24             	add    eax,0x24
c0015b1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b21:	6a 00                	push   0x0
c0015b23:	68 78 53 01 c0       	push   0xc0015378
c0015b28:	6a 00                	push   0x0
c0015b2a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b2d:	ff d0                	call   eax
c0015b2f:	83 c4 10             	add    esp,0x10
c0015b32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b35:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b37:	83 c0 24             	add    eax,0x24
c0015b3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3c:	6a 00                	push   0x0
c0015b3e:	68 78 53 01 c0       	push   0xc0015378
c0015b43:	6a 01                	push   0x1
c0015b45:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b48:	ff d0                	call   eax
c0015b4a:	83 c4 10             	add    esp,0x10
c0015b4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b50:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b52:	83 c0 24             	add    eax,0x24
c0015b55:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b57:	6a 00                	push   0x0
c0015b59:	68 a1 4c 01 c0       	push   0xc0014ca1
c0015b5e:	6a 02                	push   0x2
c0015b60:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b63:	ff d0                	call   eax
c0015b65:	83 c4 10             	add    esp,0x10
c0015b68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6d:	83 c0 24             	add    eax,0x24
c0015b70:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b72:	6a 00                	push   0x0
c0015b74:	68 78 53 01 c0       	push   0xc0015378
c0015b79:	6a 03                	push   0x3
c0015b7b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b7e:	ff d0                	call   eax
c0015b80:	83 c4 10             	add    esp,0x10
c0015b83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b86:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b88:	83 c0 24             	add    eax,0x24
c0015b8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8d:	6a 00                	push   0x0
c0015b8f:	68 78 53 01 c0       	push   0xc0015378
c0015b94:	6a 04                	push   0x4
c0015b96:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b99:	ff d0                	call   eax
c0015b9b:	83 c4 10             	add    esp,0x10
c0015b9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba3:	83 c0 24             	add    eax,0x24
c0015ba6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba8:	6a 00                	push   0x0
c0015baa:	68 78 53 01 c0       	push   0xc0015378
c0015baf:	6a 05                	push   0x5
c0015bb1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bb4:	ff d0                	call   eax
c0015bb6:	83 c4 10             	add    esp,0x10
c0015bb9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bbe:	83 c0 24             	add    eax,0x24
c0015bc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc3:	6a 00                	push   0x0
c0015bc5:	68 97 53 01 c0       	push   0xc0015397
c0015bca:	6a 06                	push   0x6
c0015bcc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bcf:	ff d0                	call   eax
c0015bd1:	83 c4 10             	add    esp,0x10
c0015bd4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd9:	83 c0 24             	add    eax,0x24
c0015bdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bde:	6a 00                	push   0x0
c0015be0:	68 d3 52 01 c0       	push   0xc00152d3
c0015be5:	6a 07                	push   0x7
c0015be7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bea:	ff d0                	call   eax
c0015bec:	83 c4 10             	add    esp,0x10
c0015bef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf4:	83 c0 24             	add    eax,0x24
c0015bf7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf9:	6a 00                	push   0x0
c0015bfb:	68 bc 4a 01 c0       	push   0xc0014abc
c0015c00:	6a 08                	push   0x8
c0015c02:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c05:	ff d0                	call   eax
c0015c07:	83 c4 10             	add    esp,0x10
c0015c0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0f:	83 c0 24             	add    eax,0x24
c0015c12:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c14:	6a 00                	push   0x0
c0015c16:	68 78 53 01 c0       	push   0xc0015378
c0015c1b:	6a 09                	push   0x9
c0015c1d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c20:	ff d0                	call   eax
c0015c22:	83 c4 10             	add    esp,0x10
c0015c25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c28:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2a:	83 c0 24             	add    eax,0x24
c0015c2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2f:	6a 00                	push   0x0
c0015c31:	68 78 53 01 c0       	push   0xc0015378
c0015c36:	6a 0a                	push   0xa
c0015c38:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c3b:	ff d0                	call   eax
c0015c3d:	83 c4 10             	add    esp,0x10
c0015c40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c43:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c45:	83 c0 24             	add    eax,0x24
c0015c48:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c4a:	6a 00                	push   0x0
c0015c4c:	68 78 53 01 c0       	push   0xc0015378
c0015c51:	6a 0b                	push   0xb
c0015c53:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c56:	ff d0                	call   eax
c0015c58:	83 c4 10             	add    esp,0x10
c0015c5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c60:	83 c0 24             	add    eax,0x24
c0015c63:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c65:	6a 00                	push   0x0
c0015c67:	68 78 53 01 c0       	push   0xc0015378
c0015c6c:	6a 0c                	push   0xc
c0015c6e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c71:	ff d0                	call   eax
c0015c73:	83 c4 10             	add    esp,0x10
c0015c76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c79:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c7b:	83 c0 24             	add    eax,0x24
c0015c7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c80:	6a 00                	push   0x0
c0015c82:	68 02 53 01 c0       	push   0xc0015302
c0015c87:	6a 0d                	push   0xd
c0015c89:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c8c:	ff d0                	call   eax
c0015c8e:	83 c4 10             	add    esp,0x10
c0015c91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c94:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c96:	83 c0 24             	add    eax,0x24
c0015c99:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c9b:	6a 00                	push   0x0
c0015c9d:	68 3b 53 01 c0       	push   0xc001533b
c0015ca2:	6a 0e                	push   0xe
c0015ca4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ca7:	ff d0                	call   eax
c0015ca9:	83 c4 10             	add    esp,0x10
c0015cac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015caf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb1:	83 c0 24             	add    eax,0x24
c0015cb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb6:	6a 00                	push   0x0
c0015cb8:	68 78 53 01 c0       	push   0xc0015378
c0015cbd:	6a 0f                	push   0xf
c0015cbf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cc2:	ff d0                	call   eax
c0015cc4:	83 c4 10             	add    esp,0x10
c0015cc7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cca:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ccc:	83 c0 24             	add    eax,0x24
c0015ccf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd1:	6a 00                	push   0x0
c0015cd3:	68 78 53 01 c0       	push   0xc0015378
c0015cd8:	6a 10                	push   0x10
c0015cda:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cdd:	ff d0                	call   eax
c0015cdf:	83 c4 10             	add    esp,0x10
c0015ce2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ce5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ce7:	83 c0 24             	add    eax,0x24
c0015cea:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cec:	6a 00                	push   0x0
c0015cee:	68 78 53 01 c0       	push   0xc0015378
c0015cf3:	6a 11                	push   0x11
c0015cf5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cf8:	ff d0                	call   eax
c0015cfa:	83 c4 10             	add    esp,0x10
c0015cfd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d00:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d02:	83 c0 24             	add    eax,0x24
c0015d05:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d07:	6a 00                	push   0x0
c0015d09:	68 78 53 01 c0       	push   0xc0015378
c0015d0e:	6a 12                	push   0x12
c0015d10:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d13:	ff d0                	call   eax
c0015d15:	83 c4 10             	add    esp,0x10
c0015d18:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d1d:	83 c0 24             	add    eax,0x24
c0015d20:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d22:	6a 00                	push   0x0
c0015d24:	68 78 53 01 c0       	push   0xc0015378
c0015d29:	6a 13                	push   0x13
c0015d2b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d2e:	ff d0                	call   eax
c0015d30:	83 c4 10             	add    esp,0x10
c0015d33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d36:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d38:	83 c0 24             	add    eax,0x24
c0015d3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d3d:	6a 00                	push   0x0
c0015d3f:	68 78 53 01 c0       	push   0xc0015378
c0015d44:	6a 14                	push   0x14
c0015d46:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d49:	ff d0                	call   eax
c0015d4b:	83 c4 10             	add    esp,0x10
c0015d4e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d51:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d53:	83 c0 24             	add    eax,0x24
c0015d56:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d58:	6a 00                	push   0x0
c0015d5a:	68 78 53 01 c0       	push   0xc0015378
c0015d5f:	6a 1e                	push   0x1e
c0015d61:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d64:	ff d0                	call   eax
c0015d66:	83 c4 10             	add    esp,0x10
c0015d69:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d6e:	83 c0 24             	add    eax,0x24
c0015d71:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d73:	6a 00                	push   0x0
c0015d75:	68 43 c8 01 c0       	push   0xc001c843
c0015d7a:	6a 60                	push   0x60
c0015d7c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d7f:	ff d0                	call   eax
c0015d81:	83 c4 10             	add    esp,0x10
c0015d84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d87:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d8a:	c9                   	leave  
c0015d8b:	c3                   	ret    

c0015d8c <InterruptController::convertLegacyIRQNumber(int)>:
c0015d8c:	55                   	push   ebp
c0015d8d:	89 e5                	mov    ebp,esp
c0015d8f:	83 ec 08             	sub    esp,0x8
c0015d92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d95:	83 ec 0c             	sub    esp,0xc
c0015d98:	50                   	push   eax
c0015d99:	e8 42 e9 ff ff       	call   c00146e0 <Device::getName()>
c0015d9e:	83 c4 10             	add    esp,0x10
c0015da1:	8a 00                	mov    al,BYTE PTR [eax]
c0015da3:	3c 41                	cmp    al,0x41
c0015da5:	0f 94 c0             	sete   al
c0015da8:	84 c0                	test   al,al
c0015daa:	74 28                	je     c0015dd4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015dac:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015db0:	7f 12                	jg     c0015dc4 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015db2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015db5:	05 a0 d8 02 c0       	add    eax,0xc002d8a0
c0015dba:	8a 00                	mov    al,BYTE PTR [eax]
c0015dbc:	0f b6 c0             	movzx  eax,al
c0015dbf:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015dc2:	eb 10                	jmp    c0015dd4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015dc4:	83 ec 0c             	sub    esp,0xc
c0015dc7:	68 c0 af 02 c0       	push   0xc002afc0
c0015dcc:	e8 9e 48 00 00       	call   c001a66f <Krnl::panic(char const*)>
c0015dd1:	83 c4 10             	add    esp,0x10
c0015dd4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015dd7:	c9                   	leave  
c0015dd8:	c3                   	ret    
c0015dd9:	90                   	nop

c0015dda <startGUI(void*)>:
c0015dda:	55                   	push   ebp
c0015ddb:	89 e5                	mov    ebp,esp
c0015ddd:	53                   	push   ebx
c0015dde:	83 ec 04             	sub    esp,0x4
c0015de1:	e8 b0 80 00 00       	call   c001de96 <unlockScheduler()>
c0015de6:	8b 1d 48 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e648
c0015dec:	83 ec 08             	sub    esp,0x8
c0015def:	6a 01                	push   0x1
c0015df1:	68 10 b3 02 c0       	push   0xc002b310
c0015df6:	e8 f1 79 00 00       	call   c001d7ec <Thr::loadDLL(char const*, bool)>
c0015dfb:	83 c4 10             	add    esp,0x10
c0015dfe:	83 ec 08             	sub    esp,0x8
c0015e01:	53                   	push   ebx
c0015e02:	50                   	push   eax
c0015e03:	e8 18 7c 00 00       	call   c001da20 <Thr::executeDLL(unsigned long, void*)>
c0015e08:	83 c4 10             	add    esp,0x10
c0015e0b:	8b 1d 48 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e648
c0015e11:	83 ec 08             	sub    esp,0x8
c0015e14:	6a 01                	push   0x1
c0015e16:	68 2a b3 02 c0       	push   0xc002b32a
c0015e1b:	e8 cc 79 00 00       	call   c001d7ec <Thr::loadDLL(char const*, bool)>
c0015e20:	83 c4 10             	add    esp,0x10
c0015e23:	83 ec 08             	sub    esp,0x8
c0015e26:	53                   	push   ebx
c0015e27:	50                   	push   eax
c0015e28:	e8 f3 7b 00 00       	call   c001da20 <Thr::executeDLL(unsigned long, void*)>
c0015e2d:	83 c4 10             	add    esp,0x10
c0015e30:	90                   	nop
c0015e31:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e34:	c9                   	leave  
c0015e35:	c3                   	ret    

c0015e36 <startGUIVESA(void*)>:
c0015e36:	55                   	push   ebp
c0015e37:	89 e5                	mov    ebp,esp
c0015e39:	53                   	push   ebx
c0015e3a:	83 ec 04             	sub    esp,0x4
c0015e3d:	e8 54 80 00 00       	call   c001de96 <unlockScheduler()>
c0015e42:	8b 1d 48 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e648
c0015e48:	83 ec 08             	sub    esp,0x8
c0015e4b:	6a 01                	push   0x1
c0015e4d:	68 44 b3 02 c0       	push   0xc002b344
c0015e52:	e8 95 79 00 00       	call   c001d7ec <Thr::loadDLL(char const*, bool)>
c0015e57:	83 c4 10             	add    esp,0x10
c0015e5a:	83 ec 08             	sub    esp,0x8
c0015e5d:	53                   	push   ebx
c0015e5e:	50                   	push   eax
c0015e5f:	e8 bc 7b 00 00       	call   c001da20 <Thr::executeDLL(unsigned long, void*)>
c0015e64:	83 c4 10             	add    esp,0x10
c0015e67:	8b 1d 48 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e648
c0015e6d:	83 ec 08             	sub    esp,0x8
c0015e70:	6a 01                	push   0x1
c0015e72:	68 2a b3 02 c0       	push   0xc002b32a
c0015e77:	e8 70 79 00 00       	call   c001d7ec <Thr::loadDLL(char const*, bool)>
c0015e7c:	83 c4 10             	add    esp,0x10
c0015e7f:	83 ec 08             	sub    esp,0x8
c0015e82:	53                   	push   ebx
c0015e83:	50                   	push   eax
c0015e84:	e8 97 7b 00 00       	call   c001da20 <Thr::executeDLL(unsigned long, void*)>
c0015e89:	83 c4 10             	add    esp,0x10
c0015e8c:	90                   	nop
c0015e8d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e90:	c9                   	leave  
c0015e91:	c3                   	ret    

c0015e92 <sendKeyToTerminal(unsigned char)>:
c0015e92:	55                   	push   ebp
c0015e93:	89 e5                	mov    ebp,esp
c0015e95:	83 ec 28             	sub    esp,0x28
c0015e98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e9b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e9e:	a1 24 e7 02 c0       	mov    eax,ds:0xc002e724
c0015ea3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015ea7:	83 ec 08             	sub    esp,0x8
c0015eaa:	52                   	push   edx
c0015eab:	50                   	push   eax
c0015eac:	e8 db b4 ff ff       	call   c001138c <VgaText::receiveKey(unsigned char)>
c0015eb1:	83 c4 10             	add    esp,0x10
c0015eb4:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015eb8:	75 41                	jne    c0015efb <sendKeyToTerminal(unsigned char)+0x69>
c0015eba:	e8 fc 7f 00 00       	call   c001debb <lockStuff()>
c0015ebf:	a1 00 e8 02 c0       	mov    eax,ds:0xc002e800
c0015ec4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015ec7:	c7 05 00 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e800,0x0
c0015ed1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015ed5:	74 1f                	je     c0015ef6 <sendKeyToTerminal(unsigned char)+0x64>
c0015ed7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015eda:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015edd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015ee0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015ee3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015ee6:	83 ec 0c             	sub    esp,0xc
c0015ee9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015eec:	e8 bb 85 00 00       	call   c001e4ac <unblockTask(ThreadControlBlock*)>
c0015ef1:	83 c4 10             	add    esp,0x10
c0015ef4:	eb db                	jmp    c0015ed1 <sendKeyToTerminal(unsigned char)+0x3f>
c0015ef6:	e8 5a 83 00 00       	call   c001e255 <unlockStuff()>
c0015efb:	90                   	nop
c0015efc:	c9                   	leave  
c0015efd:	c3                   	ret    

c0015efe <sendKeyboardToken(KeyboardToken)>:
c0015efe:	55                   	push   ebp
c0015eff:	89 e5                	mov    ebp,esp
c0015f01:	83 ec 18             	sub    esp,0x18
c0015f04:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015f07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f0a:	0f b7 c0             	movzx  eax,ax
c0015f0d:	83 f2 01             	xor    edx,0x1
c0015f10:	88 90 20 e8 02 c0    	mov    BYTE PTR [eax-0x3ffd17e0],dl
c0015f16:	a1 08 e8 02 c0       	mov    eax,ds:0xc002e808
c0015f1b:	85 c0                	test   eax,eax
c0015f1d:	74 24                	je     c0015f43 <sendKeyboardToken(KeyboardToken)+0x45>
c0015f1f:	8b 0d 08 e8 02 c0    	mov    ecx,DWORD PTR ds:0xc002e808
c0015f25:	83 ec 04             	sub    esp,0x4
c0015f28:	68 20 e8 02 c0       	push   0xc002e820
c0015f2d:	83 ec 08             	sub    esp,0x8
c0015f30:	89 e2                	mov    edx,esp
c0015f32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f35:	89 02                	mov    DWORD PTR [edx],eax
c0015f37:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f3a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015f3e:	ff d1                	call   ecx
c0015f40:	83 c4 10             	add    esp,0x10
c0015f43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f46:	66 3d 03 02          	cmp    ax,0x203
c0015f4a:	75 07                	jne    c0015f53 <sendKeyboardToken(KeyboardToken)+0x55>
c0015f4c:	a0 20 e9 02 c0       	mov    al,ds:0xc002e920
c0015f51:	84 c0                	test   al,al
c0015f53:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015f57:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015f5a:	a0 28 ec 02 c0       	mov    al,ds:0xc002ec28
c0015f5f:	38 c2                	cmp    dl,al
c0015f61:	74 1c                	je     c0015f7f <sendKeyboardToken(KeyboardToken)+0x81>
c0015f63:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f66:	a2 28 ec 02 c0       	mov    ds:0xc002ec28,al
c0015f6b:	a0 28 ec 02 c0       	mov    al,ds:0xc002ec28
c0015f70:	0f b6 c0             	movzx  eax,al
c0015f73:	83 ec 0c             	sub    esp,0xc
c0015f76:	50                   	push   eax
c0015f77:	e8 70 a6 ff ff       	call   c00105ec <setTerminalScrollLock(bool)>
c0015f7c:	83 c4 10             	add    esp,0x10
c0015f7f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f82:	84 c0                	test   al,al
c0015f84:	0f 84 ae 00 00 00    	je     c0016038 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f8d:	66 3d 10 03          	cmp    ax,0x310
c0015f91:	75 06                	jne    c0015f99 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f93:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f9c:	66 3d 11 03          	cmp    ax,0x311
c0015fa0:	75 06                	jne    c0015fa8 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015fa2:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015fa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fab:	66 3d 12 03          	cmp    ax,0x312
c0015faf:	75 06                	jne    c0015fb7 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015fb1:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015fb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fba:	66 3d 13 03          	cmp    ax,0x313
c0015fbe:	75 06                	jne    c0015fc6 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015fc0:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015fc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc9:	66 3d 14 03          	cmp    ax,0x314
c0015fcd:	75 06                	jne    c0015fd5 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015fcf:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd8:	66 3d 15 03          	cmp    ax,0x315
c0015fdc:	75 06                	jne    c0015fe4 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015fde:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015fe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe7:	66 3d 16 03          	cmp    ax,0x316
c0015feb:	75 06                	jne    c0015ff3 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015fed:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015ff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff6:	66 3d 17 03          	cmp    ax,0x317
c0015ffa:	75 06                	jne    c0016002 <sendKeyboardToken(KeyboardToken)+0x104>
c0015ffc:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0016002:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016005:	66 3d 18 03          	cmp    ax,0x318
c0016009:	75 06                	jne    c0016011 <sendKeyboardToken(KeyboardToken)+0x113>
c001600b:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0016011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016014:	66 3d 19 03          	cmp    ax,0x319
c0016018:	75 06                	jne    c0016020 <sendKeyboardToken(KeyboardToken)+0x122>
c001601a:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0016020:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016023:	66 3d 1a 03          	cmp    ax,0x31a
c0016027:	0f 85 c9 00 00 00    	jne    c00160f6 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001602d:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0016033:	e9 be 00 00 00       	jmp    c00160f6 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016038:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001603b:	66 3d 10 03          	cmp    ax,0x310
c001603f:	75 0a                	jne    c001604b <sendKeyboardToken(KeyboardToken)+0x14d>
c0016041:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0016047:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001604b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001604e:	66 3d 11 03          	cmp    ax,0x311
c0016052:	75 0a                	jne    c001605e <sendKeyboardToken(KeyboardToken)+0x160>
c0016054:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001605a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001605e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016061:	66 3d 12 03          	cmp    ax,0x312
c0016065:	75 0a                	jne    c0016071 <sendKeyboardToken(KeyboardToken)+0x173>
c0016067:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001606d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016074:	66 3d 13 03          	cmp    ax,0x313
c0016078:	75 0a                	jne    c0016084 <sendKeyboardToken(KeyboardToken)+0x186>
c001607a:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0016080:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016084:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016087:	66 3d 14 03          	cmp    ax,0x314
c001608b:	75 0a                	jne    c0016097 <sendKeyboardToken(KeyboardToken)+0x199>
c001608d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0016093:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001609a:	66 3d 15 03          	cmp    ax,0x315
c001609e:	75 0a                	jne    c00160aa <sendKeyboardToken(KeyboardToken)+0x1ac>
c00160a0:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00160a6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ad:	66 3d 16 03          	cmp    ax,0x316
c00160b1:	75 0a                	jne    c00160bd <sendKeyboardToken(KeyboardToken)+0x1bf>
c00160b3:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00160b9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c0:	66 3d 17 03          	cmp    ax,0x317
c00160c4:	75 0a                	jne    c00160d0 <sendKeyboardToken(KeyboardToken)+0x1d2>
c00160c6:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00160cc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d3:	66 3d 18 03          	cmp    ax,0x318
c00160d7:	75 0a                	jne    c00160e3 <sendKeyboardToken(KeyboardToken)+0x1e5>
c00160d9:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00160df:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e6:	66 3d 19 03          	cmp    ax,0x319
c00160ea:	75 0a                	jne    c00160f6 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00160ec:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00160f2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f9:	66 3d 00 02          	cmp    ax,0x200
c00160fd:	75 2c                	jne    c001612b <sendKeyboardToken(KeyboardToken)+0x22d>
c00160ff:	a0 20 ec 02 c0       	mov    al,ds:0xc002ec20
c0016104:	83 f0 01             	xor    eax,0x1
c0016107:	84 c0                	test   al,al
c0016109:	74 20                	je     c001612b <sendKeyboardToken(KeyboardToken)+0x22d>
c001610b:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0016110:	6a 01                	push   0x1
c0016112:	6a 00                	push   0x0
c0016114:	68 da 5d 01 c0       	push   0xc0015dda
c0016119:	50                   	push   eax
c001611a:	e8 a7 7e 00 00       	call   c001dfc6 <Process::createThread(void (*)(void*), void*, int)>
c001611f:	83 c4 10             	add    esp,0x10
c0016122:	c6 05 20 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ec20,0x1
c0016129:	eb 33                	jmp    c001615e <sendKeyboardToken(KeyboardToken)+0x260>
c001612b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001612e:	66 3d 01 02          	cmp    ax,0x201
c0016132:	75 2a                	jne    c001615e <sendKeyboardToken(KeyboardToken)+0x260>
c0016134:	a0 20 ec 02 c0       	mov    al,ds:0xc002ec20
c0016139:	83 f0 01             	xor    eax,0x1
c001613c:	84 c0                	test   al,al
c001613e:	74 1e                	je     c001615e <sendKeyboardToken(KeyboardToken)+0x260>
c0016140:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0016145:	6a 01                	push   0x1
c0016147:	6a 00                	push   0x0
c0016149:	68 36 5e 01 c0       	push   0xc0015e36
c001614e:	50                   	push   eax
c001614f:	e8 72 7e 00 00       	call   c001dfc6 <Process::createThread(void (*)(void*), void*, int)>
c0016154:	83 c4 10             	add    esp,0x10
c0016157:	c6 05 20 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ec20,0x1
c001615e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016161:	66 3d 1d 03          	cmp    ax,0x31d
c0016165:	75 06                	jne    c001616d <sendKeyboardToken(KeyboardToken)+0x26f>
c0016167:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001616d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016170:	66 3d 1c 03          	cmp    ax,0x31c
c0016174:	75 06                	jne    c001617c <sendKeyboardToken(KeyboardToken)+0x27e>
c0016176:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001617c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001617f:	66 3d 1b 03          	cmp    ax,0x31b
c0016183:	75 06                	jne    c001618b <sendKeyboardToken(KeyboardToken)+0x28d>
c0016185:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001618b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001618e:	66 3d 1e 03          	cmp    ax,0x31e
c0016192:	75 06                	jne    c001619a <sendKeyboardToken(KeyboardToken)+0x29c>
c0016194:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001619a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001619d:	66 3d 1f 03          	cmp    ax,0x31f
c00161a1:	75 06                	jne    c00161a9 <sendKeyboardToken(KeyboardToken)+0x2ab>
c00161a3:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00161a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ac:	66 3d 1a 03          	cmp    ax,0x31a
c00161b0:	75 06                	jne    c00161b8 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00161b2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00161b8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00161bc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161bf:	83 f0 01             	xor    eax,0x1
c00161c2:	84 c0                	test   al,al
c00161c4:	74 77                	je     c001623d <sendKeyboardToken(KeyboardToken)+0x33f>
c00161c6:	a0 21 e9 02 c0       	mov    al,ds:0xc002e921
c00161cb:	84 c0                	test   al,al
c00161cd:	74 41                	je     c0016210 <sendKeyboardToken(KeyboardToken)+0x312>
c00161cf:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161d3:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00161d7:	74 2b                	je     c0016204 <sendKeyboardToken(KeyboardToken)+0x306>
c00161d9:	8b 15 24 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec24
c00161df:	89 d0                	mov    eax,edx
c00161e1:	c1 e0 02             	shl    eax,0x2
c00161e4:	01 d0                	add    eax,edx
c00161e6:	01 c0                	add    eax,eax
c00161e8:	a3 24 ec 02 c0       	mov    ds:0xc002ec24,eax
c00161ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161f0:	0f b7 c0             	movzx  eax,ax
c00161f3:	8d 50 d0             	lea    edx,[eax-0x30]
c00161f6:	a1 24 ec 02 c0       	mov    eax,ds:0xc002ec24
c00161fb:	01 d0                	add    eax,edx
c00161fd:	a3 24 ec 02 c0       	mov    ds:0xc002ec24,eax
c0016202:	eb 6d                	jmp    c0016271 <sendKeyboardToken(KeyboardToken)+0x373>
c0016204:	c7 05 24 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ec24,0x0
c001620e:	eb 61                	jmp    c0016271 <sendKeyboardToken(KeyboardToken)+0x373>
c0016210:	a1 24 ec 02 c0       	mov    eax,ds:0xc002ec24
c0016215:	85 c0                	test   eax,eax
c0016217:	74 18                	je     c0016231 <sendKeyboardToken(KeyboardToken)+0x333>
c0016219:	a1 24 ec 02 c0       	mov    eax,ds:0xc002ec24
c001621e:	0f b6 c0             	movzx  eax,al
c0016221:	83 ec 0c             	sub    esp,0xc
c0016224:	50                   	push   eax
c0016225:	e8 68 fc ff ff       	call   c0015e92 <sendKeyToTerminal(unsigned char)>
c001622a:	83 c4 10             	add    esp,0x10
c001622d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016231:	c7 05 24 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ec24,0x0
c001623b:	eb 34                	jmp    c0016271 <sendKeyboardToken(KeyboardToken)+0x373>
c001623d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016240:	66 3d 01 01          	cmp    ax,0x101
c0016244:	75 2b                	jne    c0016271 <sendKeyboardToken(KeyboardToken)+0x373>
c0016246:	a1 24 ec 02 c0       	mov    eax,ds:0xc002ec24
c001624b:	85 c0                	test   eax,eax
c001624d:	74 18                	je     c0016267 <sendKeyboardToken(KeyboardToken)+0x369>
c001624f:	a1 24 ec 02 c0       	mov    eax,ds:0xc002ec24
c0016254:	0f b6 c0             	movzx  eax,al
c0016257:	83 ec 0c             	sub    esp,0xc
c001625a:	50                   	push   eax
c001625b:	e8 32 fc ff ff       	call   c0015e92 <sendKeyToTerminal(unsigned char)>
c0016260:	83 c4 10             	add    esp,0x10
c0016263:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016267:	c7 05 24 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ec24,0x0
c0016271:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016274:	83 f0 01             	xor    eax,0x1
c0016277:	84 c0                	test   al,al
c0016279:	74 4c                	je     c00162c7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001627b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001627e:	83 f0 01             	xor    eax,0x1
c0016281:	84 c0                	test   al,al
c0016283:	74 42                	je     c00162c7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016285:	a0 20 e9 02 c0       	mov    al,ds:0xc002e920
c001628a:	83 f0 01             	xor    eax,0x1
c001628d:	84 c0                	test   al,al
c001628f:	74 36                	je     c00162c7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016291:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016294:	66 83 f8 1f          	cmp    ax,0x1f
c0016298:	76 09                	jbe    c00162a3 <sendKeyboardToken(KeyboardToken)+0x3a5>
c001629a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001629d:	66 83 f8 7e          	cmp    ax,0x7e
c00162a1:	76 12                	jbe    c00162b5 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162a6:	66 83 f8 0a          	cmp    ax,0xa
c00162aa:	74 09                	je     c00162b5 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162af:	66 83 f8 08          	cmp    ax,0x8
c00162b3:	75 12                	jne    c00162c7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162b8:	0f b6 c0             	movzx  eax,al
c00162bb:	83 ec 0c             	sub    esp,0xc
c00162be:	50                   	push   eax
c00162bf:	e8 ce fb ff ff       	call   c0015e92 <sendKeyToTerminal(unsigned char)>
c00162c4:	83 c4 10             	add    esp,0x10
c00162c7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00162ca:	83 f0 01             	xor    eax,0x1
c00162cd:	84 c0                	test   al,al
c00162cf:	74 4f                	je     c0016320 <sendKeyboardToken(KeyboardToken)+0x422>
c00162d1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162d4:	83 f0 01             	xor    eax,0x1
c00162d7:	84 c0                	test   al,al
c00162d9:	74 45                	je     c0016320 <sendKeyboardToken(KeyboardToken)+0x422>
c00162db:	a0 20 e9 02 c0       	mov    al,ds:0xc002e920
c00162e0:	84 c0                	test   al,al
c00162e2:	74 3c                	je     c0016320 <sendKeyboardToken(KeyboardToken)+0x422>
c00162e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162e7:	66 83 f8 3f          	cmp    ax,0x3f
c00162eb:	76 33                	jbe    c0016320 <sendKeyboardToken(KeyboardToken)+0x422>
c00162ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162f0:	66 83 f8 7f          	cmp    ax,0x7f
c00162f4:	77 2a                	ja     c0016320 <sendKeyboardToken(KeyboardToken)+0x422>
c00162f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162f9:	88 c2                	mov    dl,al
c00162fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162fe:	66 83 f8 5f          	cmp    ax,0x5f
c0016302:	76 04                	jbe    c0016308 <sendKeyboardToken(KeyboardToken)+0x40a>
c0016304:	b0 20                	mov    al,0x20
c0016306:	eb 02                	jmp    c001630a <sendKeyboardToken(KeyboardToken)+0x40c>
c0016308:	b0 00                	mov    al,0x0
c001630a:	29 c2                	sub    edx,eax
c001630c:	88 d0                	mov    al,dl
c001630e:	83 e8 40             	sub    eax,0x40
c0016311:	0f b6 c0             	movzx  eax,al
c0016314:	83 ec 0c             	sub    esp,0xc
c0016317:	50                   	push   eax
c0016318:	e8 75 fb ff ff       	call   c0015e92 <sendKeyToTerminal(unsigned char)>
c001631d:	83 c4 10             	add    esp,0x10
c0016320:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016323:	66 3d 00 03          	cmp    ax,0x300
c0016327:	75 0f                	jne    c0016338 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016329:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001632c:	83 f0 01             	xor    eax,0x1
c001632f:	84 c0                	test   al,al
c0016331:	74 05                	je     c0016338 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016333:	e8 e9 aa ff ff       	call   c0010e21 <doTerminalCycle()>
c0016338:	90                   	nop
c0016339:	c9                   	leave  
c001633a:	c3                   	ret    

c001633b <clearInternalKeybuffer(VgaText*)>:
c001633b:	55                   	push   ebp
c001633c:	89 e5                	mov    ebp,esp
c001633e:	83 ec 08             	sub    esp,0x8
c0016341:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016344:	05 34 11 00 00       	add    eax,0x1134
c0016349:	83 ec 0c             	sub    esp,0xc
c001634c:	50                   	push   eax
c001634d:	e8 42 a4 fe ff       	call   c0000794 <strlen>
c0016352:	83 c4 10             	add    esp,0x10
c0016355:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016358:	81 c2 34 11 00 00    	add    edx,0x1134
c001635e:	83 ec 04             	sub    esp,0x4
c0016361:	50                   	push   eax
c0016362:	6a 00                	push   0x0
c0016364:	52                   	push   edx
c0016365:	e8 0e a4 fe ff       	call   c0000778 <memset>
c001636a:	83 c4 10             	add    esp,0x10
c001636d:	90                   	nop
c001636e:	c9                   	leave  
c001636f:	c3                   	ret    

c0016370 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016370:	55                   	push   ebp
c0016371:	89 e5                	mov    ebp,esp
c0016373:	83 ec 18             	sub    esp,0x18
c0016376:	fb                   	sti    
c0016377:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001637e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016382:	0f 84 8a 00 00 00    	je     c0016412 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0016388:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001638b:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016391:	84 c0                	test   al,al
c0016393:	75 11                	jne    c00163a6 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0016395:	e8 fa 7a 00 00       	call   c001de94 <lockScheduler()>
c001639a:	e8 31 7e 00 00       	call   c001e1d0 <schedule()>
c001639f:	e8 f2 7a 00 00       	call   c001de96 <unlockScheduler()>
c00163a4:	eb e2                	jmp    c0016388 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00163a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00163a9:	8d 50 01             	lea    edx,[eax+0x1]
c00163ac:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00163af:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163b2:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00163b8:	88 10                	mov    BYTE PTR [eax],dl
c00163ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163bd:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00163c3:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00163c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163c9:	05 34 11 00 00       	add    eax,0x1134
c00163ce:	83 ec 0c             	sub    esp,0xc
c00163d1:	50                   	push   eax
c00163d2:	e8 bd a3 fe ff       	call   c0000794 <strlen>
c00163d7:	83 c4 10             	add    esp,0x10
c00163da:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163dd:	81 c2 34 11 00 00    	add    edx,0x1134
c00163e3:	8d 4a 01             	lea    ecx,[edx+0x1]
c00163e6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163e9:	81 c2 34 11 00 00    	add    edx,0x1134
c00163ef:	83 ec 04             	sub    esp,0x4
c00163f2:	50                   	push   eax
c00163f3:	51                   	push   ecx
c00163f4:	52                   	push   edx
c00163f5:	e8 82 a2 fe ff       	call   c000067c <memmove>
c00163fa:	83 c4 10             	add    esp,0x10
c00163fd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016400:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016403:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016407:	0f 85 71 ff ff ff    	jne    c001637e <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c001640d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016410:	eb 03                	jmp    c0016415 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0016412:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016415:	c9                   	leave  
c0016416:	c3                   	ret    
c0016417:	90                   	nop

c0016418 <Keyboard::Keyboard(char const*)>:
c0016418:	83 ec 0c             	sub    esp,0xc
c001641b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001641f:	83 ec 08             	sub    esp,0x8
c0016422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016426:	50                   	push   eax
c0016427:	e8 b8 e1 ff ff       	call   c00145e4 <Device::Device(char const*)>
c001642c:	83 c4 10             	add    esp,0x10
c001642f:	ba 68 b3 02 c0       	mov    edx,0xc002b368
c0016434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016438:	89 10                	mov    DWORD PTR [eax],edx
c001643a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001643e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016448:	c6 05 04 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e804,0x1
c001644f:	90                   	nop
c0016450:	83 c4 0c             	add    esp,0xc
c0016453:	c3                   	ret    

c0016454 <Keyboard::~Keyboard()>:
c0016454:	83 ec 0c             	sub    esp,0xc
c0016457:	ba 68 b3 02 c0       	mov    edx,0xc002b368
c001645c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016460:	89 10                	mov    DWORD PTR [eax],edx
c0016462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016466:	83 ec 0c             	sub    esp,0xc
c0016469:	50                   	push   eax
c001646a:	e8 57 de ff ff       	call   c00142c6 <Device::~Device()>
c001646f:	83 c4 10             	add    esp,0x10
c0016472:	90                   	nop
c0016473:	83 c4 0c             	add    esp,0xc
c0016476:	c3                   	ret    
c0016477:	90                   	nop

c0016478 <Keyboard::~Keyboard()>:
c0016478:	83 ec 0c             	sub    esp,0xc
c001647b:	83 ec 0c             	sub    esp,0xc
c001647e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016482:	e8 cd ff ff ff       	call   c0016454 <Keyboard::~Keyboard()>
c0016487:	83 c4 10             	add    esp,0x10
c001648a:	83 ec 08             	sub    esp,0x8
c001648d:	68 5c 01 00 00       	push   0x15c
c0016492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016496:	e8 52 ca ff ff       	call   c0012eed <operator delete(void*, unsigned long)>
c001649b:	83 c4 10             	add    esp,0x10
c001649e:	83 c4 0c             	add    esp,0xc
c00164a1:	c3                   	ret    

c00164a2 <LogicalDisk::close(int, int, void*)>:
c00164a2:	83 c8 ff             	or     eax,0xffffffff
c00164a5:	c3                   	ret    

c00164a6 <LogicalDisk::~LogicalDisk()>:
c00164a6:	83 ec 0c             	sub    esp,0xc
c00164a9:	ba 18 b4 02 c0       	mov    edx,0xc002b418
c00164ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b2:	89 10                	mov    DWORD PTR [eax],edx
c00164b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b8:	83 ec 0c             	sub    esp,0xc
c00164bb:	50                   	push   eax
c00164bc:	e8 05 de ff ff       	call   c00142c6 <Device::~Device()>
c00164c1:	83 c4 10             	add    esp,0x10
c00164c4:	90                   	nop
c00164c5:	83 c4 0c             	add    esp,0xc
c00164c8:	c3                   	ret    
c00164c9:	90                   	nop

c00164ca <LogicalDisk::~LogicalDisk()>:
c00164ca:	83 ec 0c             	sub    esp,0xc
c00164cd:	83 ec 0c             	sub    esp,0xc
c00164d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164d4:	e8 cd ff ff ff       	call   c00164a6 <LogicalDisk::~LogicalDisk()>
c00164d9:	83 c4 10             	add    esp,0x10
c00164dc:	83 ec 08             	sub    esp,0x8
c00164df:	68 74 01 00 00       	push   0x174
c00164e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164e8:	e8 00 ca ff ff       	call   c0012eed <operator delete(void*, unsigned long)>
c00164ed:	83 c4 10             	add    esp,0x10
c00164f0:	83 c4 0c             	add    esp,0xc
c00164f3:	c3                   	ret    

c00164f4 <LogicalDisk::open(int, int, void*)>:
c00164f4:	83 ec 18             	sub    esp,0x18
c00164f7:	68 94 b3 02 c0       	push   0xc002b394
c00164fc:	e8 6e 41 00 00       	call   c001a66f <Krnl::panic(char const*)>
c0016501:	83 c8 ff             	or     eax,0xffffffff
c0016504:	83 c4 1c             	add    esp,0x1c
c0016507:	c3                   	ret    

c0016508 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016508:	53                   	push   ebx
c0016509:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001650d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016511:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016515:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001651b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016521:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016527:	77 10                	ja     c0016539 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016529:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001652f:	89 d3                	mov    ebx,edx
c0016531:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016537:	72 05                	jb     c001653e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016539:	83 c8 ff             	or     eax,0xffffffff
c001653c:	89 c2                	mov    edx,eax
c001653e:	5b                   	pop    ebx
c001653f:	c3                   	ret    

c0016540 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016540:	56                   	push   esi
c0016541:	83 c8 ff             	or     eax,0xffffffff
c0016544:	53                   	push   ebx
c0016545:	89 c2                	mov    edx,eax
c0016547:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001654b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001654f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016553:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016559:	77 27                	ja     c0016582 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001655b:	89 d8                	mov    eax,ebx
c001655d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016563:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016569:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001656e:	89 c2                	mov    edx,eax
c0016570:	73 10                	jae    c0016582 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016572:	89 c8                	mov    eax,ecx
c0016574:	89 da                	mov    edx,ebx
c0016576:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001657c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016582:	5b                   	pop    ebx
c0016583:	5e                   	pop    esi
c0016584:	c3                   	ret    
c0016585:	90                   	nop

c0016586 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016586:	83 ec 1c             	sub    esp,0x1c
c0016589:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001658d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016591:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016595:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016599:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001659d:	89 04 24             	mov    DWORD PTR [esp],eax
c00165a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00165a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00165a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165ac:	83 ec 08             	sub    esp,0x8
c00165af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165b3:	50                   	push   eax
c00165b4:	e8 2b e0 ff ff       	call   c00145e4 <Device::Device(char const*)>
c00165b9:	83 c4 10             	add    esp,0x10
c00165bc:	ba 18 b4 02 c0       	mov    edx,0xc002b418
c00165c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165c5:	89 10                	mov    DWORD PTR [eax],edx
c00165c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165cb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165d6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165e1:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00165eb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165f7:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00165fd:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016603:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016607:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001660a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001660e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016614:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001661a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001661e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016622:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016628:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001662c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016636:	90                   	nop
c0016637:	83 c4 1c             	add    esp,0x1c
c001663a:	c3                   	ret    
c001663b:	90                   	nop

c001663c <LogicalDisk::assignDriveLetter()>:
c001663c:	55                   	push   ebp
c001663d:	57                   	push   edi
c001663e:	56                   	push   esi
c001663f:	53                   	push   ebx
c0016640:	83 ec 14             	sub    esp,0x14
c0016643:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016647:	8b 3d 40 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec40
c001664d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016653:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016657:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001665d:	8b 3d 44 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec44
c0016663:	3c 01                	cmp    al,0x1
c0016665:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016669:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001666d:	19 c0                	sbb    eax,eax
c001666f:	83 e0 02             	and    eax,0x2
c0016672:	83 c0 41             	add    eax,0x41
c0016675:	0f be e8             	movsx  ebp,al
c0016678:	3c 43                	cmp    al,0x43
c001667a:	75 10                	jne    c001668c <LogicalDisk::assignDriveLetter()+0x50>
c001667c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016683:	75 5d                	jne    c00166e2 <LogicalDisk::assignDriveLetter()+0xa6>
c0016685:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001668a:	75 56                	jne    c00166e2 <LogicalDisk::assignDriveLetter()+0xa6>
c001668c:	8d 75 bf             	lea    esi,[ebp-0x41]
c001668f:	ba 01 00 00 00       	mov    edx,0x1
c0016694:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016698:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001669c:	d3 e2                	shl    edx,cl
c001669e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00166a2:	89 d7                	mov    edi,edx
c00166a4:	89 d6                	mov    esi,edx
c00166a6:	c1 ff 1f             	sar    edi,0x1f
c00166a9:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00166ad:	21 f9                	and    ecx,edi
c00166af:	09 d1                	or     ecx,edx
c00166b1:	75 2f                	jne    c00166e2 <LogicalDisk::assignDriveLetter()+0xa6>
c00166b3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00166b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00166bb:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00166c1:	09 f2                	or     edx,esi
c00166c3:	89 15 40 ec 02 c0    	mov    DWORD PTR ds:0xc002ec40,edx
c00166c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166cd:	09 fa                	or     edx,edi
c00166cf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00166d3:	89 15 44 ec 02 c0    	mov    DWORD PTR ds:0xc002ec44,edx
c00166d9:	89 1c bd 60 ec 02 c0 	mov    DWORD PTR [edi*4-0x3ffd13a0],ebx
c00166e0:	eb 08                	jmp    c00166ea <LogicalDisk::assignDriveLetter()+0xae>
c00166e2:	45                   	inc    ebp
c00166e3:	40                   	inc    eax
c00166e4:	3c 5b                	cmp    al,0x5b
c00166e6:	75 90                	jne    c0016678 <LogicalDisk::assignDriveLetter()+0x3c>
c00166e8:	31 c0                	xor    eax,eax
c00166ea:	83 c4 14             	add    esp,0x14
c00166ed:	5b                   	pop    ebx
c00166ee:	5e                   	pop    esi
c00166ef:	5f                   	pop    edi
c00166f0:	5d                   	pop    ebp
c00166f1:	c3                   	ret    

c00166f2 <LogicalDisk::mount()>:
c00166f2:	56                   	push   esi
c00166f3:	53                   	push   ebx
c00166f4:	51                   	push   ecx
c00166f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166f9:	8b 1d cc e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7cc
c00166ff:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016709:	85 db                	test   ebx,ebx
c001670b:	74 50                	je     c001675d <LogicalDisk::mount()+0x6b>
c001670d:	e8 6d 77 00 00       	call   c001de7f <getIRQNestingLevel()>
c0016712:	52                   	push   edx
c0016713:	52                   	push   edx
c0016714:	50                   	push   eax
c0016715:	68 b8 b3 02 c0       	push   0xc002b3b8
c001671a:	e8 ae c8 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001671f:	83 c4 0c             	add    esp,0xc
c0016722:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016729:	8b 13                	mov    edx,DWORD PTR [ebx]
c001672b:	83 e8 41             	sub    eax,0x41
c001672e:	50                   	push   eax
c001672f:	56                   	push   esi
c0016730:	53                   	push   ebx
c0016731:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016734:	83 c4 10             	add    esp,0x10
c0016737:	84 c0                	test   al,al
c0016739:	74 08                	je     c0016743 <LogicalDisk::mount()+0x51>
c001673b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016741:	eb 1c                	jmp    c001675f <LogicalDisk::mount()+0x6d>
c0016743:	e8 37 77 00 00       	call   c001de7f <getIRQNestingLevel()>
c0016748:	51                   	push   ecx
c0016749:	51                   	push   ecx
c001674a:	50                   	push   eax
c001674b:	68 d3 b3 02 c0       	push   0xc002b3d3
c0016750:	e8 78 c8 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0016755:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016758:	83 c4 10             	add    esp,0x10
c001675b:	eb ac                	jmp    c0016709 <LogicalDisk::mount()+0x17>
c001675d:	31 c0                	xor    eax,eax
c001675f:	5a                   	pop    edx
c0016760:	5b                   	pop    ebx
c0016761:	5e                   	pop    esi
c0016762:	c3                   	ret    
c0016763:	90                   	nop

c0016764 <LogicalDisk::unmount()>:
c0016764:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016768:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016772:	c3                   	ret    
c0016773:	90                   	nop

c0016774 <LogicalDisk::eject()>:
c0016774:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016778:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001677e:	8b 10                	mov    edx,DWORD PTR [eax]
c0016780:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016784:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016787:	90                   	nop

c0016788 <LogicalDisk::unassignDriveLetter()>:
c0016788:	57                   	push   edi
c0016789:	56                   	push   esi
c001678a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001678e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016795:	84 c9                	test   cl,cl
c0016797:	75 0f                	jne    c00167a8 <LogicalDisk::unassignDriveLetter()+0x20>
c0016799:	c7 44 24 0c ee b3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b3ee
c00167a1:	5e                   	pop    esi
c00167a2:	5f                   	pop    edi
c00167a3:	e9 c7 3e 00 00       	jmp    c001a66f <Krnl::panic(char const*)>
c00167a8:	83 e9 41             	sub    ecx,0x41
c00167ab:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00167b2:	b8 01 00 00 00       	mov    eax,0x1
c00167b7:	c7 04 8d 60 ec 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd13a0],0x0
c00167c2:	d3 e0                	shl    eax,cl
c00167c4:	89 c7                	mov    edi,eax
c00167c6:	f7 d0                	not    eax
c00167c8:	c1 ff 1f             	sar    edi,0x1f
c00167cb:	21 05 40 ec 02 c0    	and    DWORD PTR ds:0xc002ec40,eax
c00167d1:	89 fe                	mov    esi,edi
c00167d3:	f7 d6                	not    esi
c00167d5:	21 35 44 ec 02 c0    	and    DWORD PTR ds:0xc002ec44,esi
c00167db:	5e                   	pop    esi
c00167dc:	5f                   	pop    edi
c00167dd:	c3                   	ret    

c00167de <LogicalDisk::read(unsigned long long, int, void*)>:
c00167de:	57                   	push   edi
c00167df:	56                   	push   esi
c00167e0:	53                   	push   ebx
c00167e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167e9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167f1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167f7:	77 41                	ja     c001683a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00167f9:	99                   	cdq    
c00167fa:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016800:	01 c8                	add    eax,ecx
c0016802:	11 da                	adc    edx,ebx
c0016804:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001680a:	19 d7                	sbb    edi,edx
c001680c:	72 33                	jb     c0016841 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001680e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016814:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001681a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001681e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016822:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016828:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001682e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016832:	5b                   	pop    ebx
c0016833:	5e                   	pop    esi
c0016834:	5f                   	pop    edi
c0016835:	e9 b0 0a 00 00       	jmp    c00172ea <VCache::read(unsigned long long, int, void*)>
c001683a:	b8 05 00 00 00       	mov    eax,0x5
c001683f:	eb 05                	jmp    c0016846 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016841:	b8 07 00 00 00       	mov    eax,0x7
c0016846:	5b                   	pop    ebx
c0016847:	5e                   	pop    esi
c0016848:	5f                   	pop    edi
c0016849:	c3                   	ret    

c001684a <LogicalDisk::write(unsigned long long, int, void*)>:
c001684a:	57                   	push   edi
c001684b:	56                   	push   esi
c001684c:	53                   	push   ebx
c001684d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016851:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016855:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016859:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001685d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016863:	77 41                	ja     c00168a6 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016865:	99                   	cdq    
c0016866:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001686c:	01 c8                	add    eax,ecx
c001686e:	11 da                	adc    edx,ebx
c0016870:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016876:	19 d7                	sbb    edi,edx
c0016878:	72 33                	jb     c00168ad <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001687a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016880:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016886:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001688a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001688e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016894:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001689a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001689e:	5b                   	pop    ebx
c001689f:	5e                   	pop    esi
c00168a0:	5f                   	pop    edi
c00168a1:	e9 4e 09 00 00       	jmp    c00171f4 <VCache::write(unsigned long long, int, void*)>
c00168a6:	b8 05 00 00 00       	mov    eax,0x5
c00168ab:	eb 05                	jmp    c00168b2 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00168ad:	b8 07 00 00 00       	mov    eax,0x7
c00168b2:	5b                   	pop    ebx
c00168b3:	5e                   	pop    esi
c00168b4:	5f                   	pop    edi
c00168b5:	c3                   	ret    

c00168b6 <Mouse::Mouse(char const*)>:
c00168b6:	83 ec 0c             	sub    esp,0xc
c00168b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168bd:	83 ec 08             	sub    esp,0x8
c00168c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168c4:	50                   	push   eax
c00168c5:	e8 1a dd ff ff       	call   c00145e4 <Device::Device(char const*)>
c00168ca:	83 c4 10             	add    esp,0x10
c00168cd:	ba 44 b4 02 c0       	mov    edx,0xc002b444
c00168d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168d6:	89 10                	mov    DWORD PTR [eax],edx
c00168d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168dc:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00168e6:	90                   	nop
c00168e7:	83 c4 0c             	add    esp,0xc
c00168ea:	c3                   	ret    
c00168eb:	90                   	nop

c00168ec <Mouse::~Mouse()>:
c00168ec:	83 ec 0c             	sub    esp,0xc
c00168ef:	ba 44 b4 02 c0       	mov    edx,0xc002b444
c00168f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168f8:	89 10                	mov    DWORD PTR [eax],edx
c00168fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168fe:	83 ec 0c             	sub    esp,0xc
c0016901:	50                   	push   eax
c0016902:	e8 bf d9 ff ff       	call   c00142c6 <Device::~Device()>
c0016907:	83 c4 10             	add    esp,0x10
c001690a:	90                   	nop
c001690b:	83 c4 0c             	add    esp,0xc
c001690e:	c3                   	ret    
c001690f:	90                   	nop

c0016910 <Mouse::~Mouse()>:
c0016910:	83 ec 0c             	sub    esp,0xc
c0016913:	83 ec 0c             	sub    esp,0xc
c0016916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001691a:	e8 cd ff ff ff       	call   c00168ec <Mouse::~Mouse()>
c001691f:	83 c4 10             	add    esp,0x10
c0016922:	83 ec 08             	sub    esp,0x8
c0016925:	68 58 01 00 00       	push   0x158
c001692a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001692e:	e8 ba c5 ff ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0016933:	83 c4 10             	add    esp,0x10
c0016936:	83 c4 0c             	add    esp,0xc
c0016939:	c3                   	ret    

c001693a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001693a:	55                   	push   ebp
c001693b:	57                   	push   edi
c001693c:	56                   	push   esi
c001693d:	53                   	push   ebx
c001693e:	81 ec 28 01 00 00    	sub    esp,0x128
c0016944:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001694b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016952:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016959:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016960:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016964:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016968:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001696f:	e8 6c dd ff ff       	call   c00146e0 <Device::getName()>
c0016974:	5a                   	pop    edx
c0016975:	59                   	pop    ecx
c0016976:	50                   	push   eax
c0016977:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001697b:	55                   	push   ebp
c001697c:	e8 b3 9e fe ff       	call   c0000834 <strcpy>
c0016981:	5b                   	pop    ebx
c0016982:	58                   	pop    eax
c0016983:	68 68 b4 02 c0       	push   0xc002b468
c0016988:	55                   	push   ebp
c0016989:	e8 e6 9f fe ff       	call   c0000974 <strcat>
c001698e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016995:	e8 a6 8e ff ff       	call   c000f840 <malloc>
c001699a:	83 c4 0c             	add    esp,0xc
c001699d:	89 c3                	mov    ebx,eax
c001699f:	57                   	push   edi
c00169a0:	56                   	push   esi
c00169a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169a9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00169b0:	55                   	push   ebp
c00169b1:	50                   	push   eax
c00169b2:	e8 cf fb ff ff       	call   c0016586 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00169b7:	83 c4 14             	add    esp,0x14
c00169ba:	53                   	push   ebx
c00169bb:	e8 7c fc ff ff       	call   c001663c <LogicalDisk::assignDriveLetter()>
c00169c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169c3:	89 c6                	mov    esi,eax
c00169c5:	e8 28 fd ff ff       	call   c00166f2 <LogicalDisk::mount()>
c00169ca:	58                   	pop    eax
c00169cb:	5a                   	pop    edx
c00169cc:	53                   	push   ebx
c00169cd:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169d4:	e8 1b da ff ff       	call   c00143f4 <Device::addChild(Device*)>
c00169d9:	59                   	pop    ecx
c00169da:	89 f0                	mov    eax,esi
c00169dc:	5b                   	pop    ebx
c00169dd:	0f be f0             	movsx  esi,al
c00169e0:	56                   	push   esi
c00169e1:	68 73 b4 02 c0       	push   0xc002b473
c00169e6:	e8 e2 c5 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c00169eb:	81 c4 2c 01 00 00    	add    esp,0x12c
c00169f1:	5b                   	pop    ebx
c00169f2:	5e                   	pop    esi
c00169f3:	5f                   	pop    edi
c00169f4:	5d                   	pop    ebp
c00169f5:	c3                   	ret    

c00169f6 <createPartitionsForDisk(PhysicalDisk*)>:
c00169f6:	55                   	push   ebp
c00169f7:	57                   	push   edi
c00169f8:	56                   	push   esi
c00169f9:	53                   	push   ebx
c00169fa:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016a00:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016a07:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016a0d:	3d 00 02 00 00       	cmp    eax,0x200
c0016a12:	74 27                	je     c0016a3b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016a14:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a1a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a20:	83 ec 10             	sub    esp,0x10
c0016a23:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a27:	99                   	cdq    
c0016a28:	c1 e6 0a             	shl    esi,0xa
c0016a2b:	52                   	push   edx
c0016a2c:	89 fd                	mov    ebp,edi
c0016a2e:	50                   	push   eax
c0016a2f:	55                   	push   ebp
c0016a30:	56                   	push   esi
c0016a31:	e8 36 00 01 00       	call   c0026a6c <__udivdi3>
c0016a36:	e9 b1 00 00 00       	jmp    c0016aec <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a3b:	83 ec 0c             	sub    esp,0xc
c0016a3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a40:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a44:	56                   	push   esi
c0016a45:	6a 01                	push   0x1
c0016a47:	6a 00                	push   0x0
c0016a49:	6a 00                	push   0x0
c0016a4b:	53                   	push   ebx
c0016a4c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a4f:	83 c4 20             	add    esp,0x20
c0016a52:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a5a:	75 0a                	jne    c0016a66 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a5c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a64:	74 2c                	je     c0016a92 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a66:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a6c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a72:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a78:	83 ec 10             	sub    esp,0x10
c0016a7b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a7f:	89 f7                	mov    edi,esi
c0016a81:	c1 e0 0a             	shl    eax,0xa
c0016a84:	c1 ff 1f             	sar    edi,0x1f
c0016a87:	57                   	push   edi
c0016a88:	56                   	push   esi
c0016a89:	52                   	push   edx
c0016a8a:	50                   	push   eax
c0016a8b:	e8 dc ff 00 00       	call   c0026a6c <__udivdi3>
c0016a90:	eb 5a                	jmp    c0016aec <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a92:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a99:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016aa0:	83 e1 7f             	and    ecx,0x7f
c0016aa3:	83 e0 7f             	and    eax,0x7f
c0016aa6:	01 c1                	add    ecx,eax
c0016aa8:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016aaf:	83 e0 7f             	and    eax,0x7f
c0016ab2:	01 c1                	add    ecx,eax
c0016ab4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016abb:	83 e0 7f             	and    eax,0x7f
c0016abe:	00 c1                	add    cl,al
c0016ac0:	74 41                	je     c0016b03 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016ac2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016ac8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016ace:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016ad4:	83 ec 10             	sub    esp,0x10
c0016ad7:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016adb:	89 f7                	mov    edi,esi
c0016add:	c1 e0 0a             	shl    eax,0xa
c0016ae0:	c1 ff 1f             	sar    edi,0x1f
c0016ae3:	57                   	push   edi
c0016ae4:	56                   	push   esi
c0016ae5:	52                   	push   edx
c0016ae6:	50                   	push   eax
c0016ae7:	e8 80 ff 00 00       	call   c0026a6c <__udivdi3>
c0016aec:	83 c4 14             	add    esp,0x14
c0016aef:	52                   	push   edx
c0016af0:	50                   	push   eax
c0016af1:	6a 00                	push   0x0
c0016af3:	6a 00                	push   0x0
c0016af5:	53                   	push   ebx
c0016af6:	e8 3f fe ff ff       	call   c001693a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016afb:	83 c4 20             	add    esp,0x20
c0016afe:	e9 79 01 00 00       	jmp    c0016c7c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016b03:	89 f0                	mov    eax,esi
c0016b05:	31 f6                	xor    esi,esi
c0016b07:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016b0e:	75 02                	jne    c0016b12 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016b10:	89 f1                	mov    ecx,esi
c0016b12:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b19:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b20:	c1 e2 08             	shl    edx,0x8
c0016b23:	c1 e7 10             	shl    edi,0x10
c0016b26:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016b2e:	09 fa                	or     edx,edi
c0016b30:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016b38:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016b3f:	83 c0 10             	add    eax,0x10
c0016b42:	09 fa                	or     edx,edi
c0016b44:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b4b:	c1 e7 18             	shl    edi,0x18
c0016b4e:	09 fa                	or     edx,edi
c0016b50:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b57:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b5b:	c1 e7 10             	shl    edi,0x10
c0016b5e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b65:	c1 e2 08             	shl    edx,0x8
c0016b68:	09 fa                	or     edx,edi
c0016b6a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b71:	09 fa                	or     edx,edi
c0016b73:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b7a:	c1 e7 18             	shl    edi,0x18
c0016b7d:	09 fa                	or     edx,edi
c0016b7f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b83:	46                   	inc    esi
c0016b84:	83 fe 04             	cmp    esi,0x4
c0016b87:	0f 85 7a ff ff ff    	jne    c0016b07 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b91:	83 f0 01             	xor    eax,0x1
c0016b94:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b98:	75 57                	jne    c0016bf1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b9e:	83 f0 01             	xor    eax,0x1
c0016ba1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016ba5:	75 4a                	jne    c0016bf1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016ba7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016bab:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016bb3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016bbb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016bc1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016bc7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016bcd:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016bd1:	89 f7                	mov    edi,esi
c0016bd3:	c1 e0 0a             	shl    eax,0xa
c0016bd6:	c1 ff 1f             	sar    edi,0x1f
c0016bd9:	57                   	push   edi
c0016bda:	56                   	push   esi
c0016bdb:	52                   	push   edx
c0016bdc:	50                   	push   eax
c0016bdd:	e8 8a fe 00 00       	call   c0026a6c <__udivdi3>
c0016be2:	83 c4 10             	add    esp,0x10
c0016be5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016be9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bed:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016bf1:	84 c9                	test   cl,cl
c0016bf3:	74 53                	je     c0016c48 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016bf5:	0f b6 c9             	movzx  ecx,cl
c0016bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bfc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c00:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c04:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c10:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016c14:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c1c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c24:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c28:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016c2c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016c30:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016c34:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016c38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c40:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c44:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c48:	31 ed                	xor    ebp,ebp
c0016c4a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c4e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c52:	89 f8                	mov    eax,edi
c0016c54:	09 f0                	or     eax,esi
c0016c56:	74 1e                	je     c0016c76 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c58:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c5c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c60:	89 d1                	mov    ecx,edx
c0016c62:	09 c1                	or     ecx,eax
c0016c64:	74 10                	je     c0016c76 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c66:	83 ec 0c             	sub    esp,0xc
c0016c69:	57                   	push   edi
c0016c6a:	56                   	push   esi
c0016c6b:	52                   	push   edx
c0016c6c:	50                   	push   eax
c0016c6d:	53                   	push   ebx
c0016c6e:	e8 c7 fc ff ff       	call   c001693a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c73:	83 c4 20             	add    esp,0x20
c0016c76:	45                   	inc    ebp
c0016c77:	83 fd 04             	cmp    ebp,0x4
c0016c7a:	75 ce                	jne    c0016c4a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c7c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c82:	5b                   	pop    ebx
c0016c83:	5e                   	pop    esi
c0016c84:	5f                   	pop    edi
c0016c85:	5d                   	pop    ebp
c0016c86:	c3                   	ret    
c0016c87:	90                   	nop

c0016c88 <Serial::Serial(char const*)>:
c0016c88:	83 ec 0c             	sub    esp,0xc
c0016c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c8f:	83 ec 08             	sub    esp,0x8
c0016c92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c96:	50                   	push   eax
c0016c97:	e8 48 d9 ff ff       	call   c00145e4 <Device::Device(char const*)>
c0016c9c:	83 c4 10             	add    esp,0x10
c0016c9f:	ba a0 b4 02 c0       	mov    edx,0xc002b4a0
c0016ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ca8:	89 10                	mov    DWORD PTR [eax],edx
c0016caa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cae:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016cb8:	90                   	nop
c0016cb9:	83 c4 0c             	add    esp,0xc
c0016cbc:	c3                   	ret    
c0016cbd:	90                   	nop

c0016cbe <Serial::~Serial()>:
c0016cbe:	83 ec 0c             	sub    esp,0xc
c0016cc1:	ba a0 b4 02 c0       	mov    edx,0xc002b4a0
c0016cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cca:	89 10                	mov    DWORD PTR [eax],edx
c0016ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd0:	83 ec 0c             	sub    esp,0xc
c0016cd3:	50                   	push   eax
c0016cd4:	e8 ed d5 ff ff       	call   c00142c6 <Device::~Device()>
c0016cd9:	83 c4 10             	add    esp,0x10
c0016cdc:	90                   	nop
c0016cdd:	83 c4 0c             	add    esp,0xc
c0016ce0:	c3                   	ret    
c0016ce1:	90                   	nop

c0016ce2 <Serial::~Serial()>:
c0016ce2:	83 ec 0c             	sub    esp,0xc
c0016ce5:	83 ec 0c             	sub    esp,0xc
c0016ce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cec:	e8 cd ff ff ff       	call   c0016cbe <Serial::~Serial()>
c0016cf1:	83 c4 10             	add    esp,0x10
c0016cf4:	83 ec 08             	sub    esp,0x8
c0016cf7:	68 58 01 00 00       	push   0x158
c0016cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d00:	e8 e8 c1 ff ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0016d05:	83 c4 10             	add    esp,0x10
c0016d08:	83 c4 0c             	add    esp,0xc
c0016d0b:	c3                   	ret    

c0016d0c <Timer::Timer(char const*)>:
c0016d0c:	83 ec 0c             	sub    esp,0xc
c0016d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d13:	83 ec 08             	sub    esp,0x8
c0016d16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d1a:	50                   	push   eax
c0016d1b:	e8 c4 d8 ff ff       	call   c00145e4 <Device::Device(char const*)>
c0016d20:	83 c4 10             	add    esp,0x10
c0016d23:	ba e4 b4 02 c0       	mov    edx,0xc002b4e4
c0016d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d2c:	89 10                	mov    DWORD PTR [eax],edx
c0016d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d32:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016d3c:	90                   	nop
c0016d3d:	83 c4 0c             	add    esp,0xc
c0016d40:	c3                   	ret    
c0016d41:	90                   	nop

c0016d42 <Timer::~Timer()>:
c0016d42:	83 ec 0c             	sub    esp,0xc
c0016d45:	ba e4 b4 02 c0       	mov    edx,0xc002b4e4
c0016d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d4e:	89 10                	mov    DWORD PTR [eax],edx
c0016d50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d54:	83 ec 0c             	sub    esp,0xc
c0016d57:	50                   	push   eax
c0016d58:	e8 69 d5 ff ff       	call   c00142c6 <Device::~Device()>
c0016d5d:	83 c4 10             	add    esp,0x10
c0016d60:	90                   	nop
c0016d61:	83 c4 0c             	add    esp,0xc
c0016d64:	c3                   	ret    
c0016d65:	90                   	nop

c0016d66 <Timer::~Timer()>:
c0016d66:	83 ec 0c             	sub    esp,0xc
c0016d69:	83 ec 0c             	sub    esp,0xc
c0016d6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d70:	e8 cd ff ff ff       	call   c0016d42 <Timer::~Timer()>
c0016d75:	83 c4 10             	add    esp,0x10
c0016d78:	83 ec 08             	sub    esp,0x8
c0016d7b:	68 5c 01 00 00       	push   0x15c
c0016d80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d84:	e8 64 c1 ff ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0016d89:	83 c4 10             	add    esp,0x10
c0016d8c:	83 c4 0c             	add    esp,0xc
c0016d8f:	c3                   	ret    

c0016d90 <Timer::read()>:
c0016d90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d94:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d9a:	c3                   	ret    

c0016d9b <timerHandler(unsigned long long)>:
c0016d9b:	55                   	push   ebp
c0016d9c:	57                   	push   edi
c0016d9d:	56                   	push   esi
c0016d9e:	53                   	push   ebx
c0016d9f:	83 ec 0c             	sub    esp,0xc
c0016da2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016da6:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016daa:	01 35 d0 ec 02 c0    	add    DWORD PTR ds:0xc002ecd0,esi
c0016db0:	11 3d d4 ec 02 c0    	adc    DWORD PTR ds:0xc002ecd4,edi
c0016db6:	80 3d 4d e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e64d,0x0
c0016dbd:	0f 84 07 01 00 00    	je     c0016eca <timerHandler(unsigned long long)+0x12f>
c0016dc3:	e8 f3 70 00 00       	call   c001debb <lockStuff()>
c0016dc8:	83 ec 0c             	sub    esp,0xc
c0016dcb:	68 9c 1b 03 c0       	push   0xc0031b9c
c0016dd0:	e8 09 1d 01 00       	call   c0028ade <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dd5:	c7 04 24 9c 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b9c
c0016ddc:	89 c3                	mov    ebx,eax
c0016dde:	e8 03 1d 01 00       	call   c0028ae6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016de3:	83 c4 10             	add    esp,0x10
c0016de6:	84 c0                	test   al,al
c0016de8:	74 60                	je     c0016e4a <timerHandler(unsigned long long)+0xaf>
c0016dea:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016df0:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016df3:	85 c0                	test   eax,eax
c0016df5:	0f 85 91 00 00 00    	jne    c0016e8c <timerHandler(unsigned long long)+0xf1>
c0016dfb:	e9 be 00 00 00       	jmp    c0016ebe <timerHandler(unsigned long long)+0x123>
c0016e00:	83 ec 0c             	sub    esp,0xc
c0016e03:	55                   	push   ebp
c0016e04:	e8 a3 76 00 00       	call   c001e4ac <unblockTask(ThreadControlBlock*)>
c0016e09:	83 c4 10             	add    esp,0x10
c0016e0c:	39 eb                	cmp    ebx,ebp
c0016e0e:	75 12                	jne    c0016e22 <timerHandler(unsigned long long)+0x87>
c0016e10:	83 ec 0c             	sub    esp,0xc
c0016e13:	68 9c 1b 03 c0       	push   0xc0031b9c
c0016e18:	e8 c1 1c 01 00       	call   c0028ade <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e1d:	89 c3                	mov    ebx,eax
c0016e1f:	83 c4 10             	add    esp,0x10
c0016e22:	83 ec 0c             	sub    esp,0xc
c0016e25:	68 9c 1b 03 c0       	push   0xc0031b9c
c0016e2a:	e8 b7 1c 01 00       	call   c0028ae6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e2f:	83 c4 10             	add    esp,0x10
c0016e32:	84 c0                	test   al,al
c0016e34:	75 b4                	jne    c0016dea <timerHandler(unsigned long long)+0x4f>
c0016e36:	83 ec 0c             	sub    esp,0xc
c0016e39:	68 9c 1b 03 c0       	push   0xc0031b9c
c0016e3e:	e8 9b 1c 01 00       	call   c0028ade <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e43:	83 c4 10             	add    esp,0x10
c0016e46:	39 d8                	cmp    eax,ebx
c0016e48:	74 a0                	je     c0016dea <timerHandler(unsigned long long)+0x4f>
c0016e4a:	83 ec 0c             	sub    esp,0xc
c0016e4d:	68 9c 1b 03 c0       	push   0xc0031b9c
c0016e52:	e8 87 1c 01 00       	call   c0028ade <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e57:	c7 04 24 9c 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b9c
c0016e5e:	89 c5                	mov    ebp,eax
c0016e60:	e8 9d 1c 01 00       	call   c0028b02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e65:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e68:	83 c4 10             	add    esp,0x10
c0016e6b:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e6e:	39 15 d0 ec 02 c0    	cmp    DWORD PTR ds:0xc002ecd0,edx
c0016e74:	a1 d4 ec 02 c0       	mov    eax,ds:0xc002ecd4
c0016e79:	19 c8                	sbb    eax,ecx
c0016e7b:	73 83                	jae    c0016e00 <timerHandler(unsigned long long)+0x65>
c0016e7d:	50                   	push   eax
c0016e7e:	50                   	push   eax
c0016e7f:	55                   	push   ebp
c0016e80:	68 9c 1b 03 c0       	push   0xc0031b9c
c0016e85:	e8 26 1d 01 00       	call   c0028bb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e8a:	eb 93                	jmp    c0016e1f <timerHandler(unsigned long long)+0x84>
c0016e8c:	80 3d 4c e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e64c,0x0
c0016e93:	74 29                	je     c0016ebe <timerHandler(unsigned long long)+0x123>
c0016e95:	39 c6                	cmp    esi,eax
c0016e97:	bb 00 00 00 00       	mov    ebx,0x0
c0016e9c:	19 df                	sbb    edi,ebx
c0016e9e:	72 19                	jb     c0016eb9 <timerHandler(unsigned long long)+0x11e>
c0016ea0:	e8 ef 6f 00 00       	call   c001de94 <lockScheduler()>
c0016ea5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eaa:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016ead:	e8 1e 73 00 00       	call   c001e1d0 <schedule()>
c0016eb2:	e8 df 6f 00 00       	call   c001de96 <unlockScheduler()>
c0016eb7:	eb 05                	jmp    c0016ebe <timerHandler(unsigned long long)+0x123>
c0016eb9:	29 f0                	sub    eax,esi
c0016ebb:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016ebe:	83 c4 0c             	add    esp,0xc
c0016ec1:	5b                   	pop    ebx
c0016ec2:	5e                   	pop    esi
c0016ec3:	5f                   	pop    edi
c0016ec4:	5d                   	pop    ebp
c0016ec5:	e9 8b 73 00 00       	jmp    c001e255 <unlockStuff()>
c0016eca:	83 c4 0c             	add    esp,0xc
c0016ecd:	5b                   	pop    ebx
c0016ece:	5e                   	pop    esi
c0016ecf:	5f                   	pop    edi
c0016ed0:	5d                   	pop    ebp
c0016ed1:	c3                   	ret    

c0016ed2 <setupTimer(int)>:
c0016ed2:	57                   	push   edi
c0016ed3:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0016ed8:	56                   	push   esi
c0016ed9:	53                   	push   ebx
c0016eda:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016ede:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ee4:	83 ec 0c             	sub    esp,0xc
c0016ee7:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016eed:	e8 ee d7 ff ff       	call   c00146e0 <Device::getName()>
c0016ef2:	83 c4 10             	add    esp,0x10
c0016ef5:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016ef8:	0f 85 8d 00 00 00    	jne    c0016f8b <setupTimer(int)+0xb9>
c0016efe:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0016f03:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f0a:	74 7f                	je     c0016f8b <setupTimer(int)+0xb9>
c0016f0c:	83 ec 0c             	sub    esp,0xc
c0016f0f:	68 5c 01 00 00       	push   0x15c
c0016f14:	e8 27 89 ff ff       	call   c000f840 <malloc>
c0016f19:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f1c:	89 c3                	mov    ebx,eax
c0016f1e:	e8 2b f7 00 00       	call   c002664e <PIT::PIT()>
c0016f23:	59                   	pop    ecx
c0016f24:	5f                   	pop    edi
c0016f25:	53                   	push   ebx
c0016f26:	ff 35 48 e6 02 c0    	push   DWORD PTR ds:0xc002e648
c0016f2c:	e8 c3 d4 ff ff       	call   c00143f4 <Device::addChild(Device*)>
c0016f31:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f33:	6a 00                	push   0x0
c0016f35:	6a 00                	push   0x0
c0016f37:	56                   	push   esi
c0016f38:	53                   	push   ebx
c0016f39:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f3c:	83 c4 14             	add    esp,0x14
c0016f3f:	68 60 01 00 00       	push   0x160
c0016f44:	e8 f7 88 ff ff       	call   c000f840 <malloc>
c0016f49:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f4c:	89 c7                	mov    edi,eax
c0016f4e:	e8 ab f5 00 00       	call   c00264fe <APICTimer::APICTimer()>
c0016f53:	6a 00                	push   0x0
c0016f55:	6a 00                	push   0x0
c0016f57:	56                   	push   esi
c0016f58:	57                   	push   edi
c0016f59:	e8 a2 f4 00 00       	call   c0026400 <APICTimer::open(int, int, void*)>
c0016f5e:	83 c4 20             	add    esp,0x20
c0016f61:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f63:	6a 00                	push   0x0
c0016f65:	6a 00                	push   0x0
c0016f67:	6a 00                	push   0x0
c0016f69:	53                   	push   ebx
c0016f6a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f6d:	58                   	pop    eax
c0016f6e:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0016f73:	5a                   	pop    edx
c0016f74:	57                   	push   edi
c0016f75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f7b:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f81:	e8 6e d4 ff ff       	call   c00143f4 <Device::addChild(Device*)>
c0016f86:	83 c4 10             	add    esp,0x10
c0016f89:	eb 33                	jmp    c0016fbe <setupTimer(int)+0xec>
c0016f8b:	83 ec 0c             	sub    esp,0xc
c0016f8e:	68 5c 01 00 00       	push   0x15c
c0016f93:	e8 a8 88 ff ff       	call   c000f840 <malloc>
c0016f98:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f9b:	89 c3                	mov    ebx,eax
c0016f9d:	e8 ac f6 00 00       	call   c002664e <PIT::PIT()>
c0016fa2:	58                   	pop    eax
c0016fa3:	5a                   	pop    edx
c0016fa4:	53                   	push   ebx
c0016fa5:	ff 35 48 e6 02 c0    	push   DWORD PTR ds:0xc002e648
c0016fab:	e8 44 d4 ff ff       	call   c00143f4 <Device::addChild(Device*)>
c0016fb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fb2:	6a 00                	push   0x0
c0016fb4:	6a 00                	push   0x0
c0016fb6:	56                   	push   esi
c0016fb7:	53                   	push   ebx
c0016fb8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fbb:	83 c4 20             	add    esp,0x20
c0016fbe:	89 d8                	mov    eax,ebx
c0016fc0:	5b                   	pop    ebx
c0016fc1:	5e                   	pop    esi
c0016fc2:	5f                   	pop    edi
c0016fc3:	c3                   	ret    

c0016fc4 <VCache::VCache(PhysicalDisk*)>:
c0016fc4:	53                   	push   ebx
c0016fc5:	83 ec 18             	sub    esp,0x18
c0016fc8:	ba 14 b5 02 c0       	mov    edx,0xc002b514
c0016fcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd1:	89 10                	mov    DWORD PTR [eax],edx
c0016fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016fde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016fe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fed:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016ff4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016ffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fff:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0017006:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001700d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017011:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0017018:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017020:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017024:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001702b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0017032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017036:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001703a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0017042:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017046:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001704a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001704e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017055:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001705d:	83 ec 0c             	sub    esp,0xc
c0017060:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017064:	e8 d7 87 ff ff       	call   c000f840 <malloc>
c0017069:	83 c4 10             	add    esp,0x10
c001706c:	89 c3                	mov    ebx,eax
c001706e:	83 ec 0c             	sub    esp,0xc
c0017071:	53                   	push   ebx
c0017072:	e8 3d 6f 00 00       	call   c001dfb4 <Mutex::Mutex()>
c0017077:	83 c4 10             	add    esp,0x10
c001707a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001707e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017081:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017085:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017089:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001708c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017090:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0017097:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001709b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00170a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00170a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170ac:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00170b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00170b8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00170bc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00170bf:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00170c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00170ca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170d4:	05 00 01 00 00       	add    eax,0x100
c00170d9:	c1 e0 04             	shl    eax,0x4
c00170dc:	83 ec 0c             	sub    esp,0xc
c00170df:	50                   	push   eax
c00170e0:	e8 5b 87 ff ff       	call   c000f840 <malloc>
c00170e5:	83 c4 10             	add    esp,0x10
c00170e8:	89 c2                	mov    edx,eax
c00170ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00170f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00170fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017100:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017104:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017108:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001710e:	c1 e0 07             	shl    eax,0x7
c0017111:	83 ec 0c             	sub    esp,0xc
c0017114:	50                   	push   eax
c0017115:	e8 26 87 ff ff       	call   c000f840 <malloc>
c001711a:	83 c4 10             	add    esp,0x10
c001711d:	89 c2                	mov    edx,eax
c001711f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017123:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0017126:	90                   	nop
c0017127:	83 c4 18             	add    esp,0x18
c001712a:	5b                   	pop    ebx
c001712b:	c3                   	ret    

c001712c <VCache::invalidateReadBuffer()>:
c001712c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017130:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0017136:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001713a:	c3                   	ret    
c001713b:	90                   	nop

c001713c <VCache::writeWriteBuffer()>:
c001713c:	53                   	push   ebx
c001713d:	83 ec 14             	sub    esp,0x14
c0017140:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017144:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017147:	8b 10                	mov    edx,DWORD PTR [eax]
c0017149:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001714c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001714f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0017152:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0017155:	50                   	push   eax
c0017156:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017159:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017160:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0017167:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001716b:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0017172:	83 c4 28             	add    esp,0x28
c0017175:	5b                   	pop    ebx
c0017176:	c3                   	ret    
c0017177:	90                   	nop

c0017178 <VCache::~VCache()>:
c0017178:	83 ec 0c             	sub    esp,0xc
c001717b:	ba 14 b5 02 c0       	mov    edx,0xc002b514
c0017180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017184:	89 10                	mov    DWORD PTR [eax],edx
c0017186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001718a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001718d:	84 c0                	test   al,al
c001718f:	74 0f                	je     c00171a0 <VCache::~VCache()+0x28>
c0017191:	83 ec 0c             	sub    esp,0xc
c0017194:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017198:	e8 9f ff ff ff       	call   c001713c <VCache::writeWriteBuffer()>
c001719d:	83 c4 10             	add    esp,0x10
c00171a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171a4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00171a7:	83 ec 0c             	sub    esp,0xc
c00171aa:	50                   	push   eax
c00171ab:	e8 a0 86 ff ff       	call   c000f850 <free>
c00171b0:	83 c4 10             	add    esp,0x10
c00171b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171b7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00171ba:	83 ec 0c             	sub    esp,0xc
c00171bd:	50                   	push   eax
c00171be:	e8 8d 86 ff ff       	call   c000f850 <free>
c00171c3:	83 c4 10             	add    esp,0x10
c00171c6:	90                   	nop
c00171c7:	83 c4 0c             	add    esp,0xc
c00171ca:	c3                   	ret    
c00171cb:	90                   	nop

c00171cc <VCache::~VCache()>:
c00171cc:	83 ec 0c             	sub    esp,0xc
c00171cf:	83 ec 0c             	sub    esp,0xc
c00171d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171d6:	e8 9d ff ff ff       	call   c0017178 <VCache::~VCache()>
c00171db:	83 c4 10             	add    esp,0x10
c00171de:	83 ec 08             	sub    esp,0x8
c00171e1:	6a 44                	push   0x44
c00171e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171e7:	e8 01 bd ff ff       	call   c0012eed <operator delete(void*, unsigned long)>
c00171ec:	83 c4 10             	add    esp,0x10
c00171ef:	83 c4 0c             	add    esp,0xc
c00171f2:	c3                   	ret    
c00171f3:	90                   	nop

c00171f4 <VCache::write(unsigned long long, int, void*)>:
c00171f4:	55                   	push   ebp
c00171f5:	57                   	push   edi
c00171f6:	56                   	push   esi
c00171f7:	53                   	push   ebx
c00171f8:	83 ec 28             	sub    esp,0x28
c00171fb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00171ff:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017203:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017207:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001720b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001720e:	e8 03 72 00 00       	call   c001e416 <Semaphore::acquire()>
c0017213:	83 c4 10             	add    esp,0x10
c0017216:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001721a:	74 0c                	je     c0017228 <VCache::write(unsigned long long, int, void*)+0x34>
c001721c:	83 ec 0c             	sub    esp,0xc
c001721f:	53                   	push   ebx
c0017220:	e8 07 ff ff ff       	call   c001712c <VCache::invalidateReadBuffer()>
c0017225:	83 c4 10             	add    esp,0x10
c0017228:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001722c:	74 66                	je     c0017294 <VCache::write(unsigned long long, int, void*)+0xa0>
c001722e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017231:	99                   	cdq    
c0017232:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017236:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017239:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001723c:	89 c1                	mov    ecx,eax
c001723e:	89 d0                	mov    eax,edx
c0017240:	31 f1                	xor    ecx,esi
c0017242:	31 f8                	xor    eax,edi
c0017244:	89 ca                	mov    edx,ecx
c0017246:	09 c2                	or     edx,eax
c0017248:	75 3e                	jne    c0017288 <VCache::write(unsigned long long, int, void*)+0x94>
c001724a:	83 fd 01             	cmp    ebp,0x1
c001724d:	75 39                	jne    c0017288 <VCache::write(unsigned long long, int, void*)+0x94>
c001724f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017252:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017258:	51                   	push   ecx
c0017259:	50                   	push   eax
c001725a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001725e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0017262:	0f af c8             	imul   ecx,eax
c0017265:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0017268:	51                   	push   ecx
c0017269:	e8 d6 94 fe ff       	call   c0000744 <memcpy>
c001726e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017271:	83 c4 10             	add    esp,0x10
c0017274:	40                   	inc    eax
c0017275:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017278:	83 c0 80             	add    eax,0xffffff80
c001727b:	75 57                	jne    c00172d4 <VCache::write(unsigned long long, int, void*)+0xe0>
c001727d:	83 ec 0c             	sub    esp,0xc
c0017280:	53                   	push   ebx
c0017281:	e8 b6 fe ff ff       	call   c001713c <VCache::writeWriteBuffer()>
c0017286:	eb 34                	jmp    c00172bc <VCache::write(unsigned long long, int, void*)+0xc8>
c0017288:	83 ec 0c             	sub    esp,0xc
c001728b:	53                   	push   ebx
c001728c:	e8 ab fe ff ff       	call   c001713c <VCache::writeWriteBuffer()>
c0017291:	83 c4 10             	add    esp,0x10
c0017294:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017297:	83 fd 7f             	cmp    ebp,0x7f
c001729a:	7f 25                	jg     c00172c1 <VCache::write(unsigned long long, int, void*)+0xcd>
c001729c:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001729f:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00172a2:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00172a5:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00172a9:	52                   	push   edx
c00172aa:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00172b0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00172b4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00172b7:	e8 88 94 fe ff       	call   c0000744 <memcpy>
c00172bc:	83 c4 10             	add    esp,0x10
c00172bf:	eb 13                	jmp    c00172d4 <VCache::write(unsigned long long, int, void*)+0xe0>
c00172c1:	83 ec 0c             	sub    esp,0xc
c00172c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00172c6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00172ca:	55                   	push   ebp
c00172cb:	57                   	push   edi
c00172cc:	56                   	push   esi
c00172cd:	50                   	push   eax
c00172ce:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00172d1:	83 c4 20             	add    esp,0x20
c00172d4:	83 ec 0c             	sub    esp,0xc
c00172d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172da:	e8 e5 76 00 00       	call   c001e9c4 <Semaphore::release()>
c00172df:	83 c4 2c             	add    esp,0x2c
c00172e2:	31 c0                	xor    eax,eax
c00172e4:	5b                   	pop    ebx
c00172e5:	5e                   	pop    esi
c00172e6:	5f                   	pop    edi
c00172e7:	5d                   	pop    ebp
c00172e8:	c3                   	ret    
c00172e9:	90                   	nop

c00172ea <VCache::read(unsigned long long, int, void*)>:
c00172ea:	55                   	push   ebp
c00172eb:	57                   	push   edi
c00172ec:	56                   	push   esi
c00172ed:	53                   	push   ebx
c00172ee:	83 ec 28             	sub    esp,0x28
c00172f1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00172f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172f9:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00172fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017301:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017305:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017309:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001730d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017310:	e8 01 71 00 00       	call   c001e416 <Semaphore::acquire()>
c0017315:	83 c4 10             	add    esp,0x10
c0017318:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001731c:	74 0c                	je     c001732a <VCache::read(unsigned long long, int, void*)+0x40>
c001731e:	83 ec 0c             	sub    esp,0xc
c0017321:	53                   	push   ebx
c0017322:	e8 15 fe ff ff       	call   c001713c <VCache::writeWriteBuffer()>
c0017327:	83 c4 10             	add    esp,0x10
c001732a:	83 fe 01             	cmp    esi,0x1
c001732d:	0f 85 80 00 00 00    	jne    c00173b3 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017333:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017336:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001733d:	75 74                	jne    c00173b3 <VCache::read(unsigned long long, int, void*)+0xc9>
c001733f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017342:	89 d1                	mov    ecx,edx
c0017344:	f7 d9                	neg    ecx
c0017346:	89 cf                	mov    edi,ecx
c0017348:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001734c:	c1 ff 1f             	sar    edi,0x1f
c001734f:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0017352:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017356:	89 ce                	mov    esi,ecx
c0017358:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001735c:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0017360:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017364:	89 cf                	mov    edi,ecx
c0017366:	74 0a                	je     c0017372 <VCache::read(unsigned long long, int, void*)+0x88>
c0017368:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001736b:	75 05                	jne    c0017372 <VCache::read(unsigned long long, int, void*)+0x88>
c001736d:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0017370:	74 1c                	je     c001738e <VCache::read(unsigned long long, int, void*)+0xa4>
c0017372:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017376:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017379:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c001737c:	83 ec 0c             	sub    esp,0xc
c001737f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017381:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017384:	52                   	push   edx
c0017385:	57                   	push   edi
c0017386:	56                   	push   esi
c0017387:	50                   	push   eax
c0017388:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001738b:	83 c4 20             	add    esp,0x20
c001738e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017391:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017397:	50                   	push   eax
c0017398:	52                   	push   edx
c0017399:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001739c:	48                   	dec    eax
c001739d:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c00173a1:	0f af c2             	imul   eax,edx
c00173a4:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00173a7:	50                   	push   eax
c00173a8:	55                   	push   ebp
c00173a9:	e8 96 93 fe ff       	call   c0000744 <memcpy>
c00173ae:	83 c4 10             	add    esp,0x10
c00173b1:	eb 21                	jmp    c00173d4 <VCache::read(unsigned long long, int, void*)+0xea>
c00173b3:	83 ec 0c             	sub    esp,0xc
c00173b6:	53                   	push   ebx
c00173b7:	e8 70 fd ff ff       	call   c001712c <VCache::invalidateReadBuffer()>
c00173bc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173bf:	8b 10                	mov    edx,DWORD PTR [eax]
c00173c1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00173c4:	56                   	push   esi
c00173c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173cd:	50                   	push   eax
c00173ce:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00173d1:	83 c4 20             	add    esp,0x20
c00173d4:	83 ec 0c             	sub    esp,0xc
c00173d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00173da:	e8 e5 75 00 00       	call   c001e9c4 <Semaphore::release()>
c00173df:	83 c4 2c             	add    esp,0x2c
c00173e2:	31 c0                	xor    eax,eax
c00173e4:	5b                   	pop    ebx
c00173e5:	5e                   	pop    esi
c00173e6:	5f                   	pop    edi
c00173e7:	5d                   	pop    ebp
c00173e8:	c3                   	ret    
c00173e9:	90                   	nop

c00173ea <Video::putrect(int, int, int, int, unsigned int)>:
c00173ea:	55                   	push   ebp
c00173eb:	57                   	push   edi
c00173ec:	56                   	push   esi
c00173ed:	53                   	push   ebx
c00173ee:	83 ec 1c             	sub    esp,0x1c
c00173f1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00173f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173f9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00173fd:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017401:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017405:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017409:	01 df                	add    edi,ebx
c001740b:	39 fb                	cmp    ebx,edi
c001740d:	7d 1f                	jge    c001742e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001740f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017413:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017417:	7d 12                	jge    c001742b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017419:	8b 16                	mov    edx,DWORD PTR [esi]
c001741b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001741f:	53                   	push   ebx
c0017420:	55                   	push   ebp
c0017421:	45                   	inc    ebp
c0017422:	56                   	push   esi
c0017423:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017426:	83 c4 10             	add    esp,0x10
c0017429:	eb e8                	jmp    c0017413 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001742b:	43                   	inc    ebx
c001742c:	eb dd                	jmp    c001740b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001742e:	83 c4 1c             	add    esp,0x1c
c0017431:	5b                   	pop    ebx
c0017432:	5e                   	pop    esi
c0017433:	5f                   	pop    edi
c0017434:	5d                   	pop    ebp
c0017435:	c3                   	ret    

c0017436 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017436:	55                   	push   ebp
c0017437:	57                   	push   edi
c0017438:	31 ff                	xor    edi,edi
c001743a:	56                   	push   esi
c001743b:	53                   	push   ebx
c001743c:	83 ec 1c             	sub    esp,0x1c
c001743f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017443:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017447:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001744e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017453:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017457:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001745b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001745f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017462:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017466:	01 f9                	add    ecx,edi
c0017468:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001746c:	7d 2f                	jge    c001749d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001746e:	31 f6                	xor    esi,esi
c0017470:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017474:	01 f2                	add    edx,esi
c0017476:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001747a:	7d 1a                	jge    c0017496 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001747c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001747f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017482:	46                   	inc    esi
c0017483:	51                   	push   ecx
c0017484:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017488:	52                   	push   edx
c0017489:	55                   	push   ebp
c001748a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001748d:	83 c4 10             	add    esp,0x10
c0017490:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017494:	eb da                	jmp    c0017470 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017496:	47                   	inc    edi
c0017497:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001749b:	eb c5                	jmp    c0017462 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001749d:	83 c4 1c             	add    esp,0x1c
c00174a0:	5b                   	pop    ebx
c00174a1:	5e                   	pop    esi
c00174a2:	5f                   	pop    edi
c00174a3:	5d                   	pop    ebp
c00174a4:	c3                   	ret    
c00174a5:	90                   	nop

c00174a6 <Video::blit(unsigned int*, int, int, int, int)>:
c00174a6:	55                   	push   ebp
c00174a7:	57                   	push   edi
c00174a8:	56                   	push   esi
c00174a9:	53                   	push   ebx
c00174aa:	83 ec 1c             	sub    esp,0x1c
c00174ad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174b1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00174b5:	85 c0                	test   eax,eax
c00174b7:	79 02                	jns    c00174bb <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00174b9:	31 c0                	xor    eax,eax
c00174bb:	c1 e0 02             	shl    eax,0x2
c00174be:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00174c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174c6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174ca:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00174ce:	39 d8                	cmp    eax,ebx
c00174d0:	7e 49                	jle    c001751b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174d2:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174d8:	7c 41                	jl     c001751b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174da:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00174de:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00174e2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00174e6:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00174ea:	39 f9                	cmp    ecx,edi
c00174ec:	7e 22                	jle    c0017510 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00174ee:	83 c5 04             	add    ebp,0x4
c00174f1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174f7:	7c 14                	jl     c001750d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00174f9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00174fb:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00174fe:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017502:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017506:	56                   	push   esi
c0017507:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001750a:	83 c4 10             	add    esp,0x10
c001750d:	47                   	inc    edi
c001750e:	eb d2                	jmp    c00174e2 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017510:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017514:	43                   	inc    ebx
c0017515:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017519:	eb ab                	jmp    c00174c6 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001751b:	83 c4 1c             	add    esp,0x1c
c001751e:	5b                   	pop    ebx
c001751f:	5e                   	pop    esi
c0017520:	5f                   	pop    edi
c0017521:	5d                   	pop    ebp
c0017522:	c3                   	ret    
c0017523:	90                   	nop

c0017524 <Video::clearScreen(unsigned int)>:
c0017524:	57                   	push   edi
c0017525:	56                   	push   esi
c0017526:	53                   	push   ebx
c0017527:	31 db                	xor    ebx,ebx
c0017529:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001752d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017533:	7e 1f                	jle    c0017554 <Video::clearScreen(unsigned int)+0x30>
c0017535:	31 ff                	xor    edi,edi
c0017537:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001753d:	7e 12                	jle    c0017551 <Video::clearScreen(unsigned int)+0x2d>
c001753f:	8b 06                	mov    eax,DWORD PTR [esi]
c0017541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017545:	53                   	push   ebx
c0017546:	57                   	push   edi
c0017547:	47                   	inc    edi
c0017548:	56                   	push   esi
c0017549:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001754c:	83 c4 10             	add    esp,0x10
c001754f:	eb e6                	jmp    c0017537 <Video::clearScreen(unsigned int)+0x13>
c0017551:	43                   	inc    ebx
c0017552:	eb d9                	jmp    c001752d <Video::clearScreen(unsigned int)+0x9>
c0017554:	5b                   	pop    ebx
c0017555:	5e                   	pop    esi
c0017556:	5f                   	pop    edi
c0017557:	c3                   	ret    

c0017558 <Video::putpixel(int, int, unsigned int)>:
c0017558:	c7 44 24 04 1c b5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b51c
c0017560:	e9 0a 31 00 00       	jmp    c001a66f <Krnl::panic(char const*)>
c0017565:	90                   	nop

c0017566 <Video::Video(char const*)>:
c0017566:	83 ec 0c             	sub    esp,0xc
c0017569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001756d:	83 ec 08             	sub    esp,0x8
c0017570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017574:	50                   	push   eax
c0017575:	e8 6a d0 ff ff       	call   c00145e4 <Device::Device(char const*)>
c001757a:	83 c4 10             	add    esp,0x10
c001757d:	ba a0 b5 02 c0       	mov    edx,0xc002b5a0
c0017582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017586:	89 10                	mov    DWORD PTR [eax],edx
c0017588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001758c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017596:	90                   	nop
c0017597:	83 c4 0c             	add    esp,0xc
c001759a:	c3                   	ret    
c001759b:	90                   	nop

c001759c <Video::~Video()>:
c001759c:	83 ec 0c             	sub    esp,0xc
c001759f:	ba a0 b5 02 c0       	mov    edx,0xc002b5a0
c00175a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175a8:	89 10                	mov    DWORD PTR [eax],edx
c00175aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ae:	83 ec 0c             	sub    esp,0xc
c00175b1:	50                   	push   eax
c00175b2:	e8 0f cd ff ff       	call   c00142c6 <Device::~Device()>
c00175b7:	83 c4 10             	add    esp,0x10
c00175ba:	90                   	nop
c00175bb:	83 c4 0c             	add    esp,0xc
c00175be:	c3                   	ret    
c00175bf:	90                   	nop

c00175c0 <Video::~Video()>:
c00175c0:	83 ec 0c             	sub    esp,0xc
c00175c3:	83 ec 0c             	sub    esp,0xc
c00175c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175ca:	e8 cd ff ff ff       	call   c001759c <Video::~Video()>
c00175cf:	83 c4 10             	add    esp,0x10
c00175d2:	83 ec 08             	sub    esp,0x8
c00175d5:	68 64 01 00 00       	push   0x164
c00175da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175de:	e8 0a b9 ff ff       	call   c0012eed <operator delete(void*, unsigned long)>
c00175e3:	83 c4 10             	add    esp,0x10
c00175e6:	83 c4 0c             	add    esp,0xc
c00175e9:	c3                   	ret    

c00175ea <Video::isMonochrome()>:
c00175ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175ee:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00175f4:	c3                   	ret    
c00175f5:	90                   	nop

c00175f6 <Video::getWidth()>:
c00175f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175fa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017600:	c3                   	ret    
c0017601:	90                   	nop

c0017602 <Video::getHeight()>:
c0017602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017606:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001760c:	c3                   	ret    
c001760d:	90                   	nop

c001760e <Video::drawCursor(int, int, unsigned char*, int)>:
c001760e:	55                   	push   ebp
c001760f:	57                   	push   edi
c0017610:	56                   	push   esi
c0017611:	53                   	push   ebx
c0017612:	83 ec 2c             	sub    esp,0x2c
c0017615:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017619:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001761d:	83 f8 01             	cmp    eax,0x1
c0017620:	19 c9                	sbb    ecx,ecx
c0017622:	31 db                	xor    ebx,ebx
c0017624:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017628:	89 cd                	mov    ebp,ecx
c001762a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017632:	f7 d5                	not    ebp
c0017634:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001763a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001763e:	01 d8                	add    eax,ebx
c0017640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017644:	56                   	push   esi
c0017645:	e8 b8 ff ff ff       	call   c0017602 <Video::getHeight()>
c001764a:	59                   	pop    ecx
c001764b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001764f:	7e 70                	jle    c00176c1 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017651:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017655:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017659:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001765c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017660:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017664:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001766b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001766f:	89 f8                	mov    eax,edi
c0017671:	83 c0 20             	add    eax,0x20
c0017674:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017678:	56                   	push   esi
c0017679:	e8 78 ff ff ff       	call   c00175f6 <Video::getWidth()>
c001767e:	5a                   	pop    edx
c001767f:	39 c7                	cmp    edi,eax
c0017681:	7d 34                	jge    c00176b7 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017683:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017688:	74 05                	je     c001768f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001768a:	8b 06                	mov    eax,DWORD PTR [esi]
c001768c:	55                   	push   ebp
c001768d:	eb 0d                	jmp    c001769c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001768f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017694:	74 12                	je     c00176a8 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017696:	8b 06                	mov    eax,DWORD PTR [esi]
c0017698:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001769c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176a0:	57                   	push   edi
c00176a1:	56                   	push   esi
c00176a2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176a5:	83 c4 10             	add    esp,0x10
c00176a8:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00176ac:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00176b0:	47                   	inc    edi
c00176b1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00176b5:	75 c1                	jne    c0017678 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00176b7:	43                   	inc    ebx
c00176b8:	83 fb 20             	cmp    ebx,0x20
c00176bb:	0f 85 79 ff ff ff    	jne    c001763a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00176c1:	83 c4 2c             	add    esp,0x2c
c00176c4:	5b                   	pop    ebx
c00176c5:	5e                   	pop    esi
c00176c6:	5f                   	pop    edi
c00176c7:	5d                   	pop    ebp
c00176c8:	c3                   	ret    
c00176c9:	90                   	nop

c00176ca <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00176ca:	55                   	push   ebp
c00176cb:	57                   	push   edi
c00176cc:	56                   	push   esi
c00176cd:	53                   	push   ebx
c00176ce:	83 ec 28             	sub    esp,0x28
c00176d1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00176d5:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00176d9:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00176dd:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00176e1:	c1 e7 08             	shl    edi,0x8
c00176e4:	01 c7                	add    edi,eax
c00176e6:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00176ea:	c1 e0 08             	shl    eax,0x8
c00176ed:	01 d0                	add    eax,edx
c00176ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176f7:	0f af c7             	imul   eax,edi
c00176fa:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017701:	50                   	push   eax
c0017702:	e8 39 81 ff ff       	call   c000f840 <malloc>
c0017707:	83 c4 10             	add    esp,0x10
c001770a:	89 c5                	mov    ebp,eax
c001770c:	85 c0                	test   eax,eax
c001770e:	75 15                	jne    c0017725 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017710:	83 ec 0c             	sub    esp,0xc
c0017713:	68 3d b5 02 c0       	push   0xc002b53d
c0017718:	e8 b0 b8 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001771d:	83 c4 10             	add    esp,0x10
c0017720:	e9 1c 01 00 00       	jmp    c0017841 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017725:	be 12 00 00 00       	mov    esi,0x12
c001772a:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001772e:	74 11                	je     c0017741 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017730:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017734:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017738:	c1 fe 03             	sar    esi,0x3
c001773b:	0f af f0             	imul   esi,eax
c001773e:	83 c6 12             	add    esi,0x12
c0017741:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017745:	74 04                	je     c001774b <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017747:	85 ff                	test   edi,edi
c0017749:	75 12                	jne    c001775d <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c001774b:	83 ec 0c             	sub    esp,0xc
c001774e:	68 54 b5 02 c0       	push   0xc002b554
c0017753:	e8 75 b8 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0017758:	e9 ce 00 00 00       	jmp    c001782b <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c001775d:	52                   	push   edx
c001775e:	52                   	push   edx
c001775f:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017763:	50                   	push   eax
c0017764:	68 69 b5 02 c0       	push   0xc002b569
c0017769:	e8 5f b8 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001776e:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017772:	83 c4 10             	add    esp,0x10
c0017775:	80 fa 02             	cmp    dl,0x2
c0017778:	0f 85 98 00 00 00    	jne    c0017816 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c001777e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017783:	75 10                	jne    c0017795 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017785:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017789:	75 0a                	jne    c0017795 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001778b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001778e:	83 e8 18             	sub    eax,0x18
c0017791:	a8 f7                	test   al,0xf7
c0017793:	74 0a                	je     c001779f <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017795:	83 ec 0c             	sub    esp,0xc
c0017798:	68 76 b5 02 c0       	push   0xc002b576
c001779d:	eb 7f                	jmp    c001781e <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c001779f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00177a7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00177af:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00177b3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00177bb:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00177bf:	75 0c                	jne    c00177cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00177c1:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00177c6:	c1 e0 18             	shl    eax,0x18
c00177c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177cd:	41                   	inc    ecx
c00177ce:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00177d3:	c1 e2 10             	shl    edx,0x10
c00177d6:	89 d0                	mov    eax,edx
c00177d8:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00177dd:	c1 e2 08             	shl    edx,0x8
c00177e0:	09 c2                	or     edx,eax
c00177e2:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00177e6:	09 c2                	or     edx,eax
c00177e8:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00177ec:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00177f0:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00177f4:	c1 f8 03             	sar    eax,0x3
c00177f7:	01 c6                	add    esi,eax
c00177f9:	89 c8                	mov    eax,ecx
c00177fb:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00177ff:	39 c7                	cmp    edi,eax
c0017801:	7f b0                	jg     c00177b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017803:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017807:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001780b:	39 14 24             	cmp    DWORD PTR [esp],edx
c001780e:	7e 22                	jle    c0017832 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017810:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017814:	eb 99                	jmp    c00177af <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017816:	50                   	push   eax
c0017817:	50                   	push   eax
c0017818:	52                   	push   edx
c0017819:	68 84 b5 02 c0       	push   0xc002b584
c001781e:	e8 aa b7 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0017823:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017826:	e8 25 80 ff ff       	call   c000f850 <free>
c001782b:	83 c4 10             	add    esp,0x10
c001782e:	31 ed                	xor    ebp,ebp
c0017830:	eb 0f                	jmp    c0017841 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017832:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017836:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017839:	89 38                	mov    DWORD PTR [eax],edi
c001783b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001783f:	89 08                	mov    DWORD PTR [eax],ecx
c0017841:	83 c4 1c             	add    esp,0x1c
c0017844:	89 e8                	mov    eax,ebp
c0017846:	5b                   	pop    ebx
c0017847:	5e                   	pop    esi
c0017848:	5f                   	pop    edi
c0017849:	5d                   	pop    ebp
c001784a:	c3                   	ret    
c001784b:	90                   	nop

c001784c <Video::putTGA(int, int, unsigned char*, int)>:
c001784c:	55                   	push   ebp
c001784d:	57                   	push   edi
c001784e:	56                   	push   esi
c001784f:	53                   	push   ebx
c0017850:	83 ec 28             	sub    esp,0x28
c0017853:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017857:	8d 44 24 18          	lea    eax,[esp+0x18]
c001785b:	50                   	push   eax
c001785c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017860:	50                   	push   eax
c0017861:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017865:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017869:	56                   	push   esi
c001786a:	e8 5b fe ff ff       	call   c00176ca <Video::tgaParse(unsigned char*, int, int*, int*)>
c001786f:	83 c4 20             	add    esp,0x20
c0017872:	85 c0                	test   eax,eax
c0017874:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017878:	74 35                	je     c00178af <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001787a:	89 c7                	mov    edi,eax
c001787c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017880:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017884:	39 d8                	cmp    eax,ebx
c0017886:	7e 27                	jle    c00178af <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017888:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001788c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017890:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017894:	39 e8                	cmp    eax,ebp
c0017896:	7e 14                	jle    c00178ac <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017898:	8b 06                	mov    eax,DWORD PTR [esi]
c001789a:	83 c7 04             	add    edi,0x4
c001789d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00178a0:	53                   	push   ebx
c00178a1:	55                   	push   ebp
c00178a2:	45                   	inc    ebp
c00178a3:	56                   	push   esi
c00178a4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00178a7:	83 c4 10             	add    esp,0x10
c00178aa:	eb e0                	jmp    c001788c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00178ac:	43                   	inc    ebx
c00178ad:	eb cd                	jmp    c001787c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00178af:	83 c4 1c             	add    esp,0x1c
c00178b2:	5b                   	pop    ebx
c00178b3:	5e                   	pop    esi
c00178b4:	5f                   	pop    edi
c00178b5:	5d                   	pop    ebp
c00178b6:	c3                   	ret    
c00178b7:	90                   	nop

c00178b8 <ACPI::close(int, int, void*)>:
c00178b8:	83 ec 1c             	sub    esp,0x1c
c00178bb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00178c3:	74 0a                	je     c00178cf <ACPI::close(int, int, void*)+0x17>
c00178c5:	b8 00 00 00 00       	mov    eax,0x0
c00178ca:	e9 9a 00 00 00       	jmp    c0017969 <ACPI::close(int, int, void*)+0xb1>
c00178cf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00178d4:	75 37                	jne    c001790d <ACPI::close(int, int, void*)+0x55>
c00178d6:	83 ec 0c             	sub    esp,0xc
c00178d9:	68 e0 b5 02 c0       	push   0xc002b5e0
c00178de:	e8 ea b6 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c00178e3:	83 c4 10             	add    esp,0x10
c00178e6:	a1 08 0d 03 c0       	mov    eax,ds:0xc0030d08
c00178eb:	85 c0                	test   eax,eax
c00178ed:	74 07                	je     c00178f6 <ACPI::close(int, int, void*)+0x3e>
c00178ef:	a1 08 0d 03 c0       	mov    eax,ds:0xc0030d08
c00178f4:	ff d0                	call   eax
c00178f6:	83 ec 0c             	sub    esp,0xc
c00178f9:	68 04 b7 02 c0       	push   0xc002b704
c00178fe:	e8 6c 2d 00 00       	call   c001a66f <Krnl::panic(char const*)>
c0017903:	83 c4 10             	add    esp,0x10
c0017906:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001790b:	eb 5c                	jmp    c0017969 <ACPI::close(int, int, void*)+0xb1>
c001790d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017912:	75 50                	jne    c0017964 <ACPI::close(int, int, void*)+0xac>
c0017914:	a1 04 0d 03 c0       	mov    eax,ds:0xc0030d04
c0017919:	85 c0                	test   eax,eax
c001791b:	74 07                	je     c0017924 <ACPI::close(int, int, void*)+0x6c>
c001791d:	a1 04 0d 03 c0       	mov    eax,ds:0xc0030d04
c0017922:	ff d0                	call   eax
c0017924:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017929:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001792e:	83 e0 02             	and    eax,0x2
c0017931:	74 1c                	je     c001794f <ACPI::close(int, int, void*)+0x97>
c0017933:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001793a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001793e:	89 c2                	mov    edx,eax
c0017940:	ec                   	in     al,dx
c0017941:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017945:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017949:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001794d:	eb da                	jmp    c0017929 <ACPI::close(int, int, void*)+0x71>
c001794f:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017956:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001795b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001795f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017963:	ee                   	out    dx,al
c0017964:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017969:	83 c4 1c             	add    esp,0x1c
c001796c:	c3                   	ret    

c001796d <findRSDP()>:
c001796d:	83 ec 1c             	sub    esp,0x1c
c0017970:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0017975:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001797b:	83 e0 04             	and    eax,0x4
c001797e:	84 c0                	test   al,al
c0017980:	75 07                	jne    c0017989 <findRSDP()+0x1c>
c0017982:	b8 00 00 00 00       	mov    eax,0x0
c0017987:	eb 6a                	jmp    c00179f3 <findRSDP()+0x86>
c0017989:	a1 94 e6 02 c0       	mov    eax,ds:0xc002e694
c001798e:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017993:	7f 1b                	jg     c00179b0 <findRSDP()+0x43>
c0017995:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001799a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179a0:	83 e2 fb             	and    edx,0xfffffffb
c00179a3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179a9:	b8 00 00 00 00       	mov    eax,0x0
c00179ae:	eb 43                	jmp    c00179f3 <findRSDP()+0x86>
c00179b0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00179b8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00179c0:	77 2c                	ja     c00179ee <findRSDP()+0x81>
c00179c2:	83 ec 04             	sub    esp,0x4
c00179c5:	6a 08                	push   0x8
c00179c7:	68 ed b5 02 c0       	push   0xc002b5ed
c00179cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179d0:	e8 6b 8c fe ff       	call   c0000640 <memcmp>
c00179d5:	83 c4 10             	add    esp,0x10
c00179d8:	85 c0                	test   eax,eax
c00179da:	0f 94 c0             	sete   al
c00179dd:	84 c0                	test   al,al
c00179df:	74 06                	je     c00179e7 <findRSDP()+0x7a>
c00179e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179e5:	eb 0c                	jmp    c00179f3 <findRSDP()+0x86>
c00179e7:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00179ec:	eb ca                	jmp    c00179b8 <findRSDP()+0x4b>
c00179ee:	b8 00 00 00 00       	mov    eax,0x0
c00179f3:	83 c4 1c             	add    esp,0x1c
c00179f6:	c3                   	ret    

c00179f7 <loadACPITables(unsigned char*)>:
c00179f7:	56                   	push   esi
c00179f8:	53                   	push   ebx
c00179f9:	83 ec 44             	sub    esp,0x44
c00179fc:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0017a01:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a07:	83 e0 04             	and    eax,0x4
c0017a0a:	84 c0                	test   al,al
c0017a0c:	0f 84 05 02 00 00    	je     c0017c17 <loadACPITables(unsigned char*)+0x220>
c0017a12:	a0 20 0f 03 c0       	mov    al,ds:0xc0030f20
c0017a17:	84 c0                	test   al,al
c0017a19:	74 75                	je     c0017a90 <loadACPITables(unsigned char*)+0x99>
c0017a1b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a1f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017a23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a27:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a2a:	83 e8 24             	sub    eax,0x24
c0017a2d:	c1 e8 03             	shr    eax,0x3
c0017a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a34:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017a3c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a40:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017a44:	0f 8d b2 00 00 00    	jge    c0017afc <loadACPITables(unsigned char*)+0x105>
c0017a4a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a4e:	83 c0 24             	add    eax,0x24
c0017a51:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a55:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a59:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017a5d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a61:	c1 e0 03             	shl    eax,0x3
c0017a64:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017a68:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a6c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a71:	89 c1                	mov    ecx,eax
c0017a73:	a1 0c 0d 03 c0       	mov    eax,ds:0xc0030d0c
c0017a78:	8d 50 01             	lea    edx,[eax+0x1]
c0017a7b:	89 15 0c 0d 03 c0    	mov    DWORD PTR ds:0xc0030d0c,edx
c0017a81:	89 ca                	mov    edx,ecx
c0017a83:	89 14 c5 24 0d 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf2dc],edx
c0017a8a:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017a8e:	eb ac                	jmp    c0017a3c <loadACPITables(unsigned char*)+0x45>
c0017a90:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a94:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a9f:	83 e8 24             	sub    eax,0x24
c0017aa2:	c1 e8 02             	shr    eax,0x2
c0017aa5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017aa9:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017ab1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017ab5:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017ab9:	7d 41                	jge    c0017afc <loadACPITables(unsigned char*)+0x105>
c0017abb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017abf:	83 c0 24             	add    eax,0x24
c0017ac2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017ac6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017aca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ace:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017ad2:	c1 e0 02             	shl    eax,0x2
c0017ad5:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017ad9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017add:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017adf:	a1 0c 0d 03 c0       	mov    eax,ds:0xc0030d0c
c0017ae4:	8d 50 01             	lea    edx,[eax+0x1]
c0017ae7:	89 15 0c 0d 03 c0    	mov    DWORD PTR ds:0xc0030d0c,edx
c0017aed:	89 ca                	mov    edx,ecx
c0017aef:	89 14 c5 24 0d 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf2dc],edx
c0017af6:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017afa:	eb b5                	jmp    c0017ab1 <loadACPITables(unsigned char*)+0xba>
c0017afc:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017b04:	a1 0c 0d 03 c0       	mov    eax,ds:0xc0030d0c
c0017b09:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017b0d:	0f 8d 05 01 00 00    	jge    c0017c18 <loadACPITables(unsigned char*)+0x221>
c0017b13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b17:	8b 04 c5 24 0d 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf2dc]
c0017b1e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b2e:	25 ff 0f 00 00       	and    eax,0xfff
c0017b33:	89 c6                	mov    esi,eax
c0017b35:	e8 1e a3 ff ff       	call   c0011e58 <Virt::getAKernelVAS()>
c0017b3a:	89 c3                	mov    ebx,eax
c0017b3c:	83 ec 0c             	sub    esp,0xc
c0017b3f:	6a 01                	push   0x1
c0017b41:	e8 77 a0 ff ff       	call   c0011bbd <Virt::allocateKernelVirtualPages(int)>
c0017b46:	83 c4 10             	add    esp,0x10
c0017b49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b4d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b53:	83 ec 0c             	sub    esp,0xc
c0017b56:	6a 01                	push   0x1
c0017b58:	6a 01                	push   0x1
c0017b5a:	50                   	push   eax
c0017b5b:	52                   	push   edx
c0017b5c:	53                   	push   ebx
c0017b5d:	e8 26 ab ff ff       	call   c0012688 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b62:	83 c4 20             	add    esp,0x20
c0017b65:	09 f0                	or     eax,esi
c0017b67:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b6f:	c1 e0 03             	shl    eax,0x3
c0017b72:	05 20 0d 03 c0       	add    eax,0xc0030d20
c0017b77:	83 ec 04             	sub    esp,0x4
c0017b7a:	6a 04                	push   0x4
c0017b7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b80:	50                   	push   eax
c0017b81:	e8 be 8b fe ff       	call   c0000744 <memcpy>
c0017b86:	83 c4 10             	add    esp,0x10
c0017b89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b8d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b98:	05 00 10 00 00       	add    eax,0x1000
c0017b9d:	c1 e8 0c             	shr    eax,0xc
c0017ba0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ba8:	89 04 24             	mov    DWORD PTR [esp],eax
c0017bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017baf:	25 ff 0f 00 00       	and    eax,0xfff
c0017bb4:	89 c6                	mov    esi,eax
c0017bb6:	e8 9d a2 ff ff       	call   c0011e58 <Virt::getAKernelVAS()>
c0017bbb:	89 c3                	mov    ebx,eax
c0017bbd:	83 ec 0c             	sub    esp,0xc
c0017bc0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017bc4:	e8 f4 9f ff ff       	call   c0011bbd <Virt::allocateKernelVirtualPages(int)>
c0017bc9:	83 c4 10             	add    esp,0x10
c0017bcc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bd0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bd6:	83 ec 0c             	sub    esp,0xc
c0017bd9:	6a 01                	push   0x1
c0017bdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017bdf:	50                   	push   eax
c0017be0:	52                   	push   edx
c0017be1:	53                   	push   ebx
c0017be2:	e8 a1 aa ff ff       	call   c0012688 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017be7:	83 c4 20             	add    esp,0x20
c0017bea:	09 f0                	or     eax,esi
c0017bec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bf0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017bf3:	83 ec 0c             	sub    esp,0xc
c0017bf6:	50                   	push   eax
c0017bf7:	e8 31 a4 ff ff       	call   c001202d <Virt::freeKernelVirtualPages(unsigned long)>
c0017bfc:	83 c4 10             	add    esp,0x10
c0017bff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c03:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017c07:	89 14 c5 24 0d 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf2dc],edx
c0017c0e:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017c12:	e9 ed fe ff ff       	jmp    c0017b04 <loadACPITables(unsigned char*)+0x10d>
c0017c17:	90                   	nop
c0017c18:	83 c4 44             	add    esp,0x44
c0017c1b:	5b                   	pop    ebx
c0017c1c:	5e                   	pop    esi
c0017c1d:	c3                   	ret    

c0017c1e <findRSDT(unsigned char*)>:
c0017c1e:	56                   	push   esi
c0017c1f:	53                   	push   ebx
c0017c20:	83 ec 44             	sub    esp,0x44
c0017c23:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0017c28:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c2e:	83 e0 04             	and    eax,0x4
c0017c31:	84 c0                	test   al,al
c0017c33:	75 0a                	jne    c0017c3f <findRSDT(unsigned char*)+0x21>
c0017c35:	b8 00 00 00 00       	mov    eax,0x0
c0017c3a:	e9 f7 00 00 00       	jmp    c0017d36 <findRSDT(unsigned char*)+0x118>
c0017c3f:	83 ec 04             	sub    esp,0x4
c0017c42:	6a 24                	push   0x24
c0017c44:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017c48:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017c4c:	50                   	push   eax
c0017c4d:	e8 f2 8a fe ff       	call   c0000744 <memcpy>
c0017c52:	83 c4 10             	add    esp,0x10
c0017c55:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017c59:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017c5d:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017c65:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c69:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c6d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c75:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c7d:	25 ff 0f 00 00       	and    eax,0xfff
c0017c82:	89 c6                	mov    esi,eax
c0017c84:	e8 cf a1 ff ff       	call   c0011e58 <Virt::getAKernelVAS()>
c0017c89:	89 c3                	mov    ebx,eax
c0017c8b:	83 ec 0c             	sub    esp,0xc
c0017c8e:	6a 02                	push   0x2
c0017c90:	e8 28 9f ff ff       	call   c0011bbd <Virt::allocateKernelVirtualPages(int)>
c0017c95:	83 c4 10             	add    esp,0x10
c0017c98:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017c9c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017ca2:	83 ec 0c             	sub    esp,0xc
c0017ca5:	6a 01                	push   0x1
c0017ca7:	6a 02                	push   0x2
c0017ca9:	50                   	push   eax
c0017caa:	52                   	push   edx
c0017cab:	53                   	push   ebx
c0017cac:	e8 d7 a9 ff ff       	call   c0012688 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017cb1:	83 c4 20             	add    esp,0x20
c0017cb4:	09 f0                	or     eax,esi
c0017cb6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017cba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cbe:	25 ff 0f 00 00       	and    eax,0xfff
c0017cc3:	89 c6                	mov    esi,eax
c0017cc5:	e8 8e a1 ff ff       	call   c0011e58 <Virt::getAKernelVAS()>
c0017cca:	89 c3                	mov    ebx,eax
c0017ccc:	83 ec 0c             	sub    esp,0xc
c0017ccf:	6a 02                	push   0x2
c0017cd1:	e8 e7 9e ff ff       	call   c0011bbd <Virt::allocateKernelVirtualPages(int)>
c0017cd6:	83 c4 10             	add    esp,0x10
c0017cd9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017cdd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017ce3:	83 ec 0c             	sub    esp,0xc
c0017ce6:	6a 01                	push   0x1
c0017ce8:	6a 02                	push   0x2
c0017cea:	50                   	push   eax
c0017ceb:	52                   	push   edx
c0017cec:	53                   	push   ebx
c0017ced:	e8 96 a9 ff ff       	call   c0012688 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017cf2:	83 c4 20             	add    esp,0x20
c0017cf5:	09 f0                	or     eax,esi
c0017cf7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017cfb:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017d00:	75 11                	jne    c0017d13 <findRSDT(unsigned char*)+0xf5>
c0017d02:	c6 05 20 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030f20,0x0
c0017d09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d0d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d11:	eb 1f                	jmp    c0017d32 <findRSDT(unsigned char*)+0x114>
c0017d13:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017d18:	75 11                	jne    c0017d2b <findRSDT(unsigned char*)+0x10d>
c0017d1a:	c6 05 20 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f20,0x1
c0017d21:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d25:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d29:	eb 07                	jmp    c0017d32 <findRSDT(unsigned char*)+0x114>
c0017d2b:	b8 00 00 00 00       	mov    eax,0x0
c0017d30:	eb 04                	jmp    c0017d36 <findRSDT(unsigned char*)+0x118>
c0017d32:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017d36:	83 c4 44             	add    esp,0x44
c0017d39:	5b                   	pop    ebx
c0017d3a:	5e                   	pop    esi
c0017d3b:	c3                   	ret    

c0017d3c <findDataTable(unsigned char*, char*)>:
c0017d3c:	83 ec 1c             	sub    esp,0x1c
c0017d3f:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0017d44:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d4a:	83 e0 04             	and    eax,0x4
c0017d4d:	84 c0                	test   al,al
c0017d4f:	75 07                	jne    c0017d58 <findDataTable(unsigned char*, char*)+0x1c>
c0017d51:	b8 00 00 00 00       	mov    eax,0x0
c0017d56:	eb 7c                	jmp    c0017dd4 <findDataTable(unsigned char*, char*)+0x98>
c0017d58:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017d60:	a1 0c 0d 03 c0       	mov    eax,ds:0xc0030d0c
c0017d65:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017d69:	7d 3a                	jge    c0017da5 <findDataTable(unsigned char*, char*)+0x69>
c0017d6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d6f:	c1 e0 03             	shl    eax,0x3
c0017d72:	05 20 0d 03 c0       	add    eax,0xc0030d20
c0017d77:	83 ec 04             	sub    esp,0x4
c0017d7a:	6a 04                	push   0x4
c0017d7c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d80:	50                   	push   eax
c0017d81:	e8 ba 88 fe ff       	call   c0000640 <memcmp>
c0017d86:	83 c4 10             	add    esp,0x10
c0017d89:	85 c0                	test   eax,eax
c0017d8b:	0f 94 c0             	sete   al
c0017d8e:	84 c0                	test   al,al
c0017d90:	74 0d                	je     c0017d9f <findDataTable(unsigned char*, char*)+0x63>
c0017d92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d96:	8b 04 c5 24 0d 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf2dc]
c0017d9d:	eb 35                	jmp    c0017dd4 <findDataTable(unsigned char*, char*)+0x98>
c0017d9f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017da3:	eb bb                	jmp    c0017d60 <findDataTable(unsigned char*, char*)+0x24>
c0017da5:	a0 20 0f 03 c0       	mov    al,ds:0xc0030f20
c0017daa:	84 c0                	test   al,al
c0017dac:	74 07                	je     c0017db5 <findDataTable(unsigned char*, char*)+0x79>
c0017dae:	b8 58 00 00 00       	mov    eax,0x58
c0017db3:	eb 05                	jmp    c0017dba <findDataTable(unsigned char*, char*)+0x7e>
c0017db5:	b8 52 00 00 00       	mov    eax,0x52
c0017dba:	83 ec 04             	sub    esp,0x4
c0017dbd:	50                   	push   eax
c0017dbe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017dc2:	68 28 b7 02 c0       	push   0xc002b728
c0017dc7:	e8 01 b2 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0017dcc:	83 c4 10             	add    esp,0x10
c0017dcf:	b8 00 00 00 00       	mov    eax,0x0
c0017dd4:	83 c4 1c             	add    esp,0x1c
c0017dd7:	c3                   	ret    

c0017dd8 <scanMADT()>:
c0017dd8:	53                   	push   ebx
c0017dd9:	83 ec 38             	sub    esp,0x38
c0017ddc:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0017de1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017de7:	83 e0 04             	and    eax,0x4
c0017dea:	84 c0                	test   al,al
c0017dec:	0f 84 63 04 00 00    	je     c0018255 <scanMADT()+0x47d>
c0017df2:	e8 76 fb ff ff       	call   c001796d <findRSDP()>
c0017df7:	a3 2c 0f 03 c0       	mov    ds:0xc0030f2c,eax
c0017dfc:	a1 2c 0f 03 c0       	mov    eax,ds:0xc0030f2c
c0017e01:	85 c0                	test   eax,eax
c0017e03:	75 19                	jne    c0017e1e <scanMADT()+0x46>
c0017e05:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0017e0a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e10:	83 e2 fb             	and    edx,0xfffffffb
c0017e13:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e19:	e9 3b 04 00 00       	jmp    c0018259 <scanMADT()+0x481>
c0017e1e:	a1 2c 0f 03 c0       	mov    eax,ds:0xc0030f2c
c0017e23:	83 ec 0c             	sub    esp,0xc
c0017e26:	50                   	push   eax
c0017e27:	e8 f2 fd ff ff       	call   c0017c1e <findRSDT(unsigned char*)>
c0017e2c:	83 c4 10             	add    esp,0x10
c0017e2f:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c0017e34:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0017e39:	85 c0                	test   eax,eax
c0017e3b:	75 19                	jne    c0017e56 <scanMADT()+0x7e>
c0017e3d:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0017e42:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e48:	83 e2 fb             	and    edx,0xfffffffb
c0017e4b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e51:	e9 03 04 00 00       	jmp    c0018259 <scanMADT()+0x481>
c0017e56:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0017e5b:	83 ec 0c             	sub    esp,0xc
c0017e5e:	50                   	push   eax
c0017e5f:	e8 93 fb ff ff       	call   c00179f7 <loadACPITables(unsigned char*)>
c0017e64:	83 c4 10             	add    esp,0x10
c0017e67:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0017e6c:	83 ec 08             	sub    esp,0x8
c0017e6f:	68 f6 b5 02 c0       	push   0xc002b5f6
c0017e74:	50                   	push   eax
c0017e75:	e8 c2 fe ff ff       	call   c0017d3c <findDataTable(unsigned char*, char*)>
c0017e7a:	83 c4 10             	add    esp,0x10
c0017e7d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017e81:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017e86:	75 19                	jne    c0017ea1 <scanMADT()+0xc9>
c0017e88:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0017e8d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e93:	83 e2 fe             	and    edx,0xfffffffe
c0017e96:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e9c:	e9 b8 03 00 00       	jmp    c0018259 <scanMADT()+0x481>
c0017ea1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017ea9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ead:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017eb0:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017eb4:	0f 87 9f 03 00 00    	ja     c0018259 <scanMADT()+0x481>
c0017eba:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017ec2:	0f 87 91 03 00 00    	ja     c0018259 <scanMADT()+0x481>
c0017ec8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ecc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ed4:	8d 50 01             	lea    edx,[eax+0x1]
c0017ed7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017edb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017edf:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ee3:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017ee7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eeb:	8d 50 01             	lea    edx,[eax+0x1]
c0017eee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ef2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ef6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017efa:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017efe:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017f03:	0f 86 4f 03 00 00    	jbe    c0018258 <scanMADT()+0x480>
c0017f09:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017f0e:	75 57                	jne    c0017f67 <scanMADT()+0x18f>
c0017f10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f14:	8d 50 01             	lea    edx,[eax+0x1]
c0017f17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f1b:	8a 15 20 11 03 c0    	mov    dl,BYTE PTR ds:0xc0031120
c0017f21:	0f b6 d2             	movzx  edx,dl
c0017f24:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f28:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f2c:	88 82 60 11 03 c0    	mov    BYTE PTR [edx-0x3ffceea0],al
c0017f32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f36:	8d 50 01             	lea    edx,[eax+0x1]
c0017f39:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f3d:	8a 15 20 11 03 c0    	mov    dl,BYTE PTR ds:0xc0031120
c0017f43:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017f46:	88 0d 20 11 03 c0    	mov    BYTE PTR ds:0xc0031120,cl
c0017f4c:	0f b6 d2             	movzx  edx,dl
c0017f4f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f53:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f57:	88 82 40 11 03 c0    	mov    BYTE PTR [edx-0x3ffceec0],al
c0017f5d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f62:	e9 da 02 00 00       	jmp    c0018241 <scanMADT()+0x469>
c0017f67:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017f6c:	0f 85 14 01 00 00    	jne    c0018086 <scanMADT()+0x2ae>
c0017f72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f76:	8d 50 01             	lea    edx,[eax+0x1]
c0017f79:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f7d:	8a 15 e0 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030fe0
c0017f83:	0f b6 d2             	movzx  edx,dl
c0017f86:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f8a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f8e:	88 82 00 10 03 c0    	mov    BYTE PTR [edx-0x3ffcf000],al
c0017f94:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017f98:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa0:	01 d0                	add    eax,edx
c0017fa2:	83 c0 2c             	add    eax,0x2c
c0017fa5:	8a 00                	mov    al,BYTE PTR [eax]
c0017fa7:	0f b6 d0             	movzx  edx,al
c0017faa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fae:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fb1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fb5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fb9:	0f b6 c0             	movzx  eax,al
c0017fbc:	c1 e0 08             	shl    eax,0x8
c0017fbf:	89 d1                	mov    ecx,edx
c0017fc1:	09 c1                	or     ecx,eax
c0017fc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fc7:	8d 50 02             	lea    edx,[eax+0x2]
c0017fca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fce:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fd2:	0f b6 c0             	movzx  eax,al
c0017fd5:	c1 e0 10             	shl    eax,0x10
c0017fd8:	09 c1                	or     ecx,eax
c0017fda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fde:	8d 50 03             	lea    edx,[eax+0x3]
c0017fe1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fe5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fe9:	0f b6 c0             	movzx  eax,al
c0017fec:	c1 e0 18             	shl    eax,0x18
c0017fef:	09 c1                	or     ecx,eax
c0017ff1:	89 ca                	mov    edx,ecx
c0017ff3:	a0 e0 0f 03 c0       	mov    al,ds:0xc0030fe0
c0017ff8:	0f b6 c0             	movzx  eax,al
c0017ffb:	89 14 85 20 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefe0],edx
c0018002:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018007:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001800b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001800f:	01 d0                	add    eax,edx
c0018011:	83 c0 2c             	add    eax,0x2c
c0018014:	8a 00                	mov    al,BYTE PTR [eax]
c0018016:	0f b6 d0             	movzx  edx,al
c0018019:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001801d:	8d 48 01             	lea    ecx,[eax+0x1]
c0018020:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018024:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018028:	0f b6 c0             	movzx  eax,al
c001802b:	c1 e0 08             	shl    eax,0x8
c001802e:	89 d1                	mov    ecx,edx
c0018030:	09 c1                	or     ecx,eax
c0018032:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018036:	8d 50 02             	lea    edx,[eax+0x2]
c0018039:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001803d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018041:	0f b6 c0             	movzx  eax,al
c0018044:	c1 e0 10             	shl    eax,0x10
c0018047:	09 c1                	or     ecx,eax
c0018049:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001804d:	8d 50 03             	lea    edx,[eax+0x3]
c0018050:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018054:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018058:	0f b6 c0             	movzx  eax,al
c001805b:	c1 e0 18             	shl    eax,0x18
c001805e:	09 c1                	or     ecx,eax
c0018060:	89 ca                	mov    edx,ecx
c0018062:	a0 e0 0f 03 c0       	mov    al,ds:0xc0030fe0
c0018067:	0f b6 c0             	movzx  eax,al
c001806a:	89 14 85 a0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef60],edx
c0018071:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018076:	a0 e0 0f 03 c0       	mov    al,ds:0xc0030fe0
c001807b:	40                   	inc    eax
c001807c:	a2 e0 0f 03 c0       	mov    ds:0xc0030fe0,al
c0018081:	e9 bb 01 00 00       	jmp    c0018241 <scanMADT()+0x469>
c0018086:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001808b:	0f 85 e9 00 00 00    	jne    c001817a <scanMADT()+0x3a2>
c0018091:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018095:	8d 50 01             	lea    edx,[eax+0x1]
c0018098:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001809c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180a0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180a4:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00180a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ac:	8d 50 01             	lea    edx,[eax+0x1]
c00180af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180b3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180b7:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180bb:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00180bf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180c7:	01 d0                	add    eax,edx
c00180c9:	83 c0 2c             	add    eax,0x2c
c00180cc:	8a 00                	mov    al,BYTE PTR [eax]
c00180ce:	0f b6 d0             	movzx  edx,al
c00180d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180d5:	8d 48 01             	lea    ecx,[eax+0x1]
c00180d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180dc:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180e0:	0f b6 c0             	movzx  eax,al
c00180e3:	c1 e0 08             	shl    eax,0x8
c00180e6:	89 d1                	mov    ecx,edx
c00180e8:	09 c1                	or     ecx,eax
c00180ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ee:	8d 50 02             	lea    edx,[eax+0x2]
c00180f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180f5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180f9:	0f b6 c0             	movzx  eax,al
c00180fc:	c1 e0 10             	shl    eax,0x10
c00180ff:	09 c1                	or     ecx,eax
c0018101:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018105:	8d 50 03             	lea    edx,[eax+0x3]
c0018108:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001810c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018110:	0f b6 c0             	movzx  eax,al
c0018113:	c1 e0 18             	shl    eax,0x18
c0018116:	09 c8                	or     eax,ecx
c0018118:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001811c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018121:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018125:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018129:	01 d0                	add    eax,edx
c001812b:	83 c0 2c             	add    eax,0x2c
c001812e:	8a 00                	mov    al,BYTE PTR [eax]
c0018130:	0f b6 c0             	movzx  eax,al
c0018133:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018137:	8d 4a 01             	lea    ecx,[edx+0x1]
c001813a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001813e:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0018142:	0f b6 d2             	movzx  edx,dl
c0018145:	c1 e2 08             	shl    edx,0x8
c0018148:	09 d0                	or     eax,edx
c001814a:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001814f:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018154:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018159:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001815d:	88 90 a0 d8 02 c0    	mov    BYTE PTR [eax-0x3ffd2760],dl
c0018163:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0018168:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001816d:	66 89 84 12 c0 0f 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf040],ax
c0018175:	e9 c7 00 00 00       	jmp    c0018241 <scanMADT()+0x469>
c001817a:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c001817f:	0f 85 b0 00 00 00    	jne    c0018235 <scanMADT()+0x45d>
c0018185:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018189:	8d 50 01             	lea    edx,[eax+0x1]
c001818c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018190:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018194:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018198:	0f b6 c0             	movzx  eax,al
c001819b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001819f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181a7:	01 d0                	add    eax,edx
c00181a9:	83 c0 2c             	add    eax,0x2c
c00181ac:	8a 00                	mov    al,BYTE PTR [eax]
c00181ae:	0f b6 d0             	movzx  edx,al
c00181b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181b5:	8d 48 01             	lea    ecx,[eax+0x1]
c00181b8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181bc:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00181c0:	0f b6 c0             	movzx  eax,al
c00181c3:	c1 e0 08             	shl    eax,0x8
c00181c6:	09 d0                	or     eax,edx
c00181c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00181cc:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00181d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181d5:	8d 50 01             	lea    edx,[eax+0x1]
c00181d8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181dc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181e0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00181e4:	0f b6 c0             	movzx  eax,al
c00181e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00181eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181ef:	c1 e0 08             	shl    eax,0x8
c00181f2:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00181f6:	89 c1                	mov    ecx,eax
c00181f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181fc:	c1 e0 18             	shl    eax,0x18
c00181ff:	89 c3                	mov    ebx,eax
c0018201:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0018206:	8d 50 01             	lea    edx,[eax+0x1]
c0018209:	89 15 30 0f 03 c0    	mov    DWORD PTR ds:0xc0030f30,edx
c001820f:	09 d9                	or     ecx,ebx
c0018211:	89 ca                	mov    edx,ecx
c0018213:	89 14 85 40 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0c0],edx
c001821a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001821e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018226:	68 58 b7 02 c0       	push   0xc002b758
c001822b:	e8 9d ad ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0018230:	83 c4 10             	add    esp,0x10
c0018233:	eb 0c                	jmp    c0018241 <scanMADT()+0x469>
c0018235:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001823a:	75 05                	jne    c0018241 <scanMADT()+0x469>
c001823c:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0018241:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018246:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001824a:	01 d0                	add    eax,edx
c001824c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018250:	e9 54 fc ff ff       	jmp    c0017ea9 <scanMADT()+0xd1>
c0018255:	90                   	nop
c0018256:	eb 01                	jmp    c0018259 <scanMADT()+0x481>
c0018258:	90                   	nop
c0018259:	83 c4 38             	add    esp,0x38
c001825c:	5b                   	pop    ebx
c001825d:	c3                   	ret    

c001825e <ACPI::ACPI()>:
c001825e:	83 ec 0c             	sub    esp,0xc
c0018261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018265:	83 ec 08             	sub    esp,0x8
c0018268:	68 fb b5 02 c0       	push   0xc002b5fb
c001826d:	50                   	push   eax
c001826e:	e8 71 c3 ff ff       	call   c00145e4 <Device::Device(char const*)>
c0018273:	83 c4 10             	add    esp,0x10
c0018276:	ba cc b7 02 c0       	mov    edx,0xc002b7cc
c001827b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001827f:	89 10                	mov    DWORD PTR [eax],edx
c0018281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018285:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001828c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018290:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001829a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001829e:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00182a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182ac:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00182b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182b7:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00182be:	e8 15 fb ff ff       	call   c0017dd8 <scanMADT()>
c00182c3:	90                   	nop
c00182c4:	83 c4 0c             	add    esp,0xc
c00182c7:	c3                   	ret    

c00182c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00182c8:	83 ec 2c             	sub    esp,0x2c
c00182cb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00182cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00182d3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00182d7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00182db:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00182e0:	88 d0                	mov    al,dl
c00182e2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00182e6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00182eb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00182f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182f7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00182fd:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018301:	0f 8d 97 00 00 00    	jge    c001839e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018307:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001830b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001830f:	83 c2 2a             	add    edx,0x2a
c0018312:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018316:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001831b:	75 78                	jne    c0018395 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001831d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018321:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018325:	83 c2 2a             	add    edx,0x2a
c0018328:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001832c:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0018330:	75 63                	jne    c0018395 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018332:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018337:	74 3a                	je     c0018373 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018339:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001833d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018341:	83 c2 2a             	add    edx,0x2a
c0018344:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018348:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001834c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001834f:	39 c2                	cmp    edx,eax
c0018351:	74 10                	je     c0018363 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018353:	83 ec 0c             	sub    esp,0xc
c0018356:	68 94 b7 02 c0       	push   0xc002b794
c001835b:	e8 0f 23 00 00       	call   c001a66f <Krnl::panic(char const*)>
c0018360:	83 c4 10             	add    esp,0x10
c0018363:	83 ec 0c             	sub    esp,0xc
c0018366:	68 00 b6 02 c0       	push   0xc002b600
c001836b:	e8 ff 22 00 00       	call   c001a66f <Krnl::panic(char const*)>
c0018370:	83 c4 10             	add    esp,0x10
c0018373:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018377:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001837b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001837f:	83 c2 2a             	add    edx,0x2a
c0018382:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018386:	8b 02                	mov    eax,DWORD PTR [edx]
c0018388:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001838b:	89 01                	mov    DWORD PTR [ecx],eax
c001838d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018390:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018395:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018399:	e9 55 ff ff ff       	jmp    c00182f3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001839e:	90                   	nop
c001839f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183a3:	83 c4 2c             	add    esp,0x2c
c00183a6:	c2 04 00             	ret    0x4
c00183a9:	90                   	nop

c00183aa <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00183aa:	83 ec 1c             	sub    esp,0x1c
c00183ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00183b1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00183b5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00183b9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00183be:	88 c8                	mov    al,cl
c00183c0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00183c4:	88 d0                	mov    al,dl
c00183c6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00183ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183ce:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183d8:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00183db:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00183df:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00183e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183e7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183ed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00183f1:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00183f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00183f8:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00183fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018401:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018407:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001840b:	8d 48 01             	lea    ecx,[eax+0x1]
c001840e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018412:	83 c2 2a             	add    edx,0x2a
c0018415:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018419:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001841d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018423:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018427:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001842a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001842e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018432:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018436:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001843c:	8d 50 01             	lea    edx,[eax+0x1]
c001843f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018443:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018449:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001844d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018453:	3d 00 02 00 00       	cmp    eax,0x200
c0018458:	75 10                	jne    c001846a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001845a:	83 ec 0c             	sub    esp,0xc
c001845d:	68 0f b6 02 c0       	push   0xc002b60f
c0018462:	e8 08 22 00 00       	call   c001a66f <Krnl::panic(char const*)>
c0018467:	83 c4 10             	add    esp,0x10
c001846a:	90                   	nop
c001846b:	83 c4 1c             	add    esp,0x1c
c001846e:	c3                   	ret    
c001846f:	90                   	nop

c0018470 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018470:	b8 00 00 00 00       	mov    eax,0x0
c0018475:	c3                   	ret    

c0018476 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018476:	83 ec 1c             	sub    esp,0x1c
c0018479:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001847d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018480:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018484:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0018489:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001848e:	83 ec 08             	sub    esp,0x8
c0018491:	52                   	push   edx
c0018492:	50                   	push   eax
c0018493:	e8 c0 69 ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c0018498:	83 c4 10             	add    esp,0x10
c001849b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001849f:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c00184a4:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00184a9:	83 ec 04             	sub    esp,0x4
c00184ac:	6a 01                	push   0x1
c00184ae:	52                   	push   edx
c00184af:	50                   	push   eax
c00184b0:	e8 b9 6a ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c00184b5:	83 c4 10             	add    esp,0x10
c00184b8:	90                   	nop
c00184b9:	83 c4 1c             	add    esp,0x1c
c00184bc:	c3                   	ret    
c00184bd:	90                   	nop

c00184be <ACPI::open(int, int, void*)>:
c00184be:	53                   	push   ebx
c00184bf:	83 ec 28             	sub    esp,0x28
c00184c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184c6:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00184cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184d1:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00184d8:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c00184dd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00184e3:	83 e0 04             	and    eax,0x4
c00184e6:	84 c0                	test   al,al
c00184e8:	74 47                	je     c0018531 <ACPI::open(int, int, void*)+0x73>
c00184ea:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c00184ef:	83 ec 08             	sub    esp,0x8
c00184f2:	68 2c b6 02 c0       	push   0xc002b62c
c00184f7:	50                   	push   eax
c00184f8:	e8 3f f8 ff ff       	call   c0017d3c <findDataTable(unsigned char*, char*)>
c00184fd:	83 c4 10             	add    esp,0x10
c0018500:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018504:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018509:	74 26                	je     c0018531 <ACPI::open(int, int, void*)+0x73>
c001850b:	83 ec 0c             	sub    esp,0xc
c001850e:	68 31 b6 02 c0       	push   0xc002b631
c0018513:	e8 b5 aa ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0018518:	83 c4 10             	add    esp,0x10
c001851b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001851f:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018526:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001852a:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018531:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018539:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001853d:	8a 00                	mov    al,BYTE PTR [eax]
c001853f:	3c 01                	cmp    al,0x1
c0018541:	75 28                	jne    c001856b <ACPI::open(int, int, void*)+0xad>
c0018543:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018547:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001854e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018552:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018559:	83 ec 0c             	sub    esp,0xc
c001855c:	68 42 b6 02 c0       	push   0xc002b642
c0018561:	e8 67 aa ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0018566:	83 c4 10             	add    esp,0x10
c0018569:	eb 25                	jmp    c0018590 <ACPI::open(int, int, void*)+0xd2>
c001856b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001856f:	8a 00                	mov    al,BYTE PTR [eax]
c0018571:	3c 02                	cmp    al,0x2
c0018573:	75 1b                	jne    c0018590 <ACPI::open(int, int, void*)+0xd2>
c0018575:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018579:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018580:	83 ec 0c             	sub    esp,0xc
c0018583:	68 4a b6 02 c0       	push   0xc002b64a
c0018588:	e8 40 aa ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001858d:	83 c4 10             	add    esp,0x10
c0018590:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018594:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001859a:	83 f0 01             	xor    eax,0x1
c001859d:	84 c0                	test   al,al
c001859f:	74 6a                	je     c001860b <ACPI::open(int, int, void*)+0x14d>
c00185a1:	83 ec 0c             	sub    esp,0xc
c00185a4:	68 52 b6 02 c0       	push   0xc002b652
c00185a9:	e8 1f aa ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c00185ae:	83 c4 10             	add    esp,0x10
c00185b1:	e8 9a 7b fe ff       	call   c0000150 <manualPCIProbe>
c00185b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00185ba:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00185bf:	75 28                	jne    c00185e9 <ACPI::open(int, int, void*)+0x12b>
c00185c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185c5:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185d0:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185d7:	83 ec 0c             	sub    esp,0xc
c00185da:	68 60 b6 02 c0       	push   0xc002b660
c00185df:	e8 e9 a9 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c00185e4:	83 c4 10             	add    esp,0x10
c00185e7:	eb 22                	jmp    c001860b <ACPI::open(int, int, void*)+0x14d>
c00185e9:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00185ee:	75 1b                	jne    c001860b <ACPI::open(int, int, void*)+0x14d>
c00185f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185f4:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185fb:	83 ec 0c             	sub    esp,0xc
c00185fe:	68 6a b6 02 c0       	push   0xc002b66a
c0018603:	e8 c5 a9 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0018608:	83 c4 10             	add    esp,0x10
c001860b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001860f:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018615:	84 c0                	test   al,al
c0018617:	74 13                	je     c001862c <ACPI::open(int, int, void*)+0x16e>
c0018619:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001861d:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018623:	83 f0 01             	xor    eax,0x1
c0018626:	0f b6 c0             	movzx  eax,al
c0018629:	40                   	inc    eax
c001862a:	eb 05                	jmp    c0018631 <ACPI::open(int, int, void*)+0x173>
c001862c:	b8 00 00 00 00       	mov    eax,0x0
c0018631:	83 ec 08             	sub    esp,0x8
c0018634:	50                   	push   eax
c0018635:	68 74 b6 02 c0       	push   0xc002b674
c001863a:	e8 8e a9 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001863f:	83 c4 10             	add    esp,0x10
c0018642:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018646:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001864c:	84 c0                	test   al,al
c001864e:	74 67                	je     c00186b7 <ACPI::open(int, int, void*)+0x1f9>
c0018650:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018658:	83 ec 0c             	sub    esp,0xc
c001865b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001865f:	e8 dc 71 ff ff       	call   c000f840 <malloc>
c0018664:	83 c4 10             	add    esp,0x10
c0018667:	89 c3                	mov    ebx,eax
c0018669:	83 ec 0c             	sub    esp,0xc
c001866c:	53                   	push   ebx
c001866d:	e8 26 a3 00 00       	call   c0022998 <PCI::PCI()>
c0018672:	83 c4 10             	add    esp,0x10
c0018675:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018679:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001867d:	83 ec 08             	sub    esp,0x8
c0018680:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018684:	50                   	push   eax
c0018685:	e8 6a bd ff ff       	call   c00143f4 <Device::addChild(Device*)>
c001868a:	83 c4 10             	add    esp,0x10
c001868d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018691:	8b 00                	mov    eax,DWORD PTR [eax]
c0018693:	83 c0 08             	add    eax,0x8
c0018696:	8b 00                	mov    eax,DWORD PTR [eax]
c0018698:	6a 00                	push   0x0
c001869a:	6a 00                	push   0x0
c001869c:	6a 00                	push   0x0
c001869e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00186a2:	ff d0                	call   eax
c00186a4:	83 c4 10             	add    esp,0x10
c00186a7:	83 ec 0c             	sub    esp,0xc
c00186aa:	68 7d b6 02 c0       	push   0xc002b67d
c00186af:	e8 19 a9 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c00186b4:	83 c4 10             	add    esp,0x10
c00186b7:	83 ec 0c             	sub    esp,0xc
c00186ba:	68 88 b6 02 c0       	push   0xc002b688
c00186bf:	e8 cb 46 00 00       	call   c001cd8f <Thr::loadKernelSymbolTable(char const*)>
c00186c4:	83 c4 10             	add    esp,0x10
c00186c7:	8b 1d 48 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e648
c00186cd:	83 ec 08             	sub    esp,0x8
c00186d0:	6a 01                	push   0x1
c00186d2:	68 a6 b6 02 c0       	push   0xc002b6a6
c00186d7:	e8 10 51 00 00       	call   c001d7ec <Thr::loadDLL(char const*, bool)>
c00186dc:	83 c4 10             	add    esp,0x10
c00186df:	83 ec 08             	sub    esp,0x8
c00186e2:	53                   	push   ebx
c00186e3:	50                   	push   eax
c00186e4:	e8 37 53 00 00       	call   c001da20 <Thr::executeDLL(unsigned long, void*)>
c00186e9:	83 c4 10             	add    esp,0x10
c00186ec:	8b 1d 48 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e648
c00186f2:	83 ec 08             	sub    esp,0x8
c00186f5:	6a 01                	push   0x1
c00186f7:	68 c3 b6 02 c0       	push   0xc002b6c3
c00186fc:	e8 eb 50 00 00       	call   c001d7ec <Thr::loadDLL(char const*, bool)>
c0018701:	83 c4 10             	add    esp,0x10
c0018704:	83 ec 08             	sub    esp,0x8
c0018707:	53                   	push   ebx
c0018708:	50                   	push   eax
c0018709:	e8 12 53 00 00       	call   c001da20 <Thr::executeDLL(unsigned long, void*)>
c001870e:	83 c4 10             	add    esp,0x10
c0018711:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0018716:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001871c:	83 e0 04             	and    eax,0x4
c001871f:	84 c0                	test   al,al
c0018721:	0f 84 d2 00 00 00    	je     c00187f9 <ACPI::open(int, int, void*)+0x33b>
c0018727:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001872e:	83 ec 0c             	sub    esp,0xc
c0018731:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018735:	e8 06 71 ff ff       	call   c000f840 <malloc>
c001873a:	83 c4 10             	add    esp,0x10
c001873d:	89 c3                	mov    ebx,eax
c001873f:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0018744:	83 ec 04             	sub    esp,0x4
c0018747:	50                   	push   eax
c0018748:	68 e0 b6 02 c0       	push   0xc002b6e0
c001874d:	53                   	push   ebx
c001874e:	e8 d3 ad ff ff       	call   c0013526 <File::File(char const*, Process*)>
c0018753:	83 c4 10             	add    esp,0x10
c0018756:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001875a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001875f:	74 17                	je     c0018778 <ACPI::open(int, int, void*)+0x2ba>
c0018761:	83 ec 0c             	sub    esp,0xc
c0018764:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018768:	e8 8b b0 ff ff       	call   c00137f8 <File::exists()>
c001876d:	83 c4 10             	add    esp,0x10
c0018770:	84 c0                	test   al,al
c0018772:	74 04                	je     c0018778 <ACPI::open(int, int, void*)+0x2ba>
c0018774:	b0 01                	mov    al,0x1
c0018776:	eb 02                	jmp    c001877a <ACPI::open(int, int, void*)+0x2bc>
c0018778:	b0 00                	mov    al,0x0
c001877a:	84 c0                	test   al,al
c001877c:	74 22                	je     c00187a0 <ACPI::open(int, int, void*)+0x2e2>
c001877e:	83 ec 08             	sub    esp,0x8
c0018781:	6a 01                	push   0x1
c0018783:	68 e0 b6 02 c0       	push   0xc002b6e0
c0018788:	e8 5f 50 00 00       	call   c001d7ec <Thr::loadDLL(char const*, bool)>
c001878d:	83 c4 10             	add    esp,0x10
c0018790:	83 ec 08             	sub    esp,0x8
c0018793:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018797:	50                   	push   eax
c0018798:	e8 83 52 00 00       	call   c001da20 <Thr::executeDLL(unsigned long, void*)>
c001879d:	83 c4 10             	add    esp,0x10
c00187a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00187a5:	74 1e                	je     c00187c5 <ACPI::open(int, int, void*)+0x307>
c00187a7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00187ac:	74 17                	je     c00187c5 <ACPI::open(int, int, void*)+0x307>
c00187ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00187b4:	83 c0 08             	add    eax,0x8
c00187b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00187b9:	83 ec 0c             	sub    esp,0xc
c00187bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00187c0:	ff d0                	call   eax
c00187c2:	83 c4 10             	add    esp,0x10
c00187c5:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c00187ca:	83 ec 08             	sub    esp,0x8
c00187cd:	68 fd b6 02 c0       	push   0xc002b6fd
c00187d2:	50                   	push   eax
c00187d3:	e8 64 f5 ff ff       	call   c0017d3c <findDataTable(unsigned char*, char*)>
c00187d8:	83 c4 10             	add    esp,0x10
c00187db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00187df:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00187e4:	74 13                	je     c00187f9 <ACPI::open(int, int, void*)+0x33b>
c00187e6:	83 ec 08             	sub    esp,0x8
c00187e9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00187ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00187f1:	e8 80 fc ff ff       	call   c0018476 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00187f6:	83 c4 10             	add    esp,0x10
c00187f9:	b8 00 00 00 00       	mov    eax,0x0
c00187fe:	83 c4 28             	add    esp,0x28
c0018801:	5b                   	pop    ebx
c0018802:	c3                   	ret    
c0018803:	90                   	nop

c0018804 <ACPI::sleep()>:
c0018804:	83 ec 0c             	sub    esp,0xc
c0018807:	a1 00 0d 03 c0       	mov    eax,ds:0xc0030d00
c001880c:	85 c0                	test   eax,eax
c001880e:	74 07                	je     c0018817 <ACPI::sleep()+0x13>
c0018810:	a1 00 0d 03 c0       	mov    eax,ds:0xc0030d00
c0018815:	ff d0                	call   eax
c0018817:	90                   	nop
c0018818:	83 c4 0c             	add    esp,0xc
c001881b:	c3                   	ret    

c001881c <CPU::close(int, int, void*)>:
c001881c:	31 c0                	xor    eax,eax
c001881e:	c3                   	ret    
c001881f:	90                   	nop

c0018820 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018820:	55                   	push   ebp
c0018821:	57                   	push   edi
c0018822:	56                   	push   esi
c0018823:	53                   	push   ebx
c0018824:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018828:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001882c:	89 ce                	mov    esi,ecx
c001882e:	89 d5                	mov    ebp,edx
c0018830:	80 f9 04             	cmp    cl,0x4
c0018833:	75 28                	jne    c001885d <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018835:	8d 42 f9             	lea    eax,[edx-0x7]
c0018838:	3c 03                	cmp    al,0x3
c001883a:	0f 86 63 01 00 00    	jbe    c00189a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018840:	80 fa 03             	cmp    dl,0x3
c0018843:	0f 84 5a 01 00 00    	je     c00189a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018849:	8d 7a f2             	lea    edi,[edx-0xe]
c001884c:	b8 70 da 02 c0       	mov    eax,0xc002da70
c0018851:	89 fb                	mov    ebx,edi
c0018853:	80 fb 01             	cmp    bl,0x1
c0018856:	77 4e                	ja     c00188a6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018858:	e9 52 01 00 00       	jmp    c00189af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001885d:	80 f9 05             	cmp    cl,0x5
c0018860:	75 4d                	jne    c00188af <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018862:	b8 80 da 02 c0       	mov    eax,0xc002da80
c0018867:	80 fa 03             	cmp    dl,0x3
c001886a:	0f 86 3f 01 00 00    	jbe    c00189af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018870:	8d 7a fa             	lea    edi,[edx-0x6]
c0018873:	b8 90 da 02 c0       	mov    eax,0xc002da90
c0018878:	89 fb                	mov    ebx,edi
c001887a:	80 fb 01             	cmp    bl,0x1
c001887d:	0f 86 2c 01 00 00    	jbe    c00189af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018883:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c0018888:	80 fa 08             	cmp    dl,0x8
c001888b:	0f 84 1e 01 00 00    	je     c00189af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018891:	89 d7                	mov    edi,edx
c0018893:	b8 b0 da 02 c0       	mov    eax,0xc002dab0
c0018898:	83 e7 fb             	and    edi,0xfffffffb
c001889b:	89 fb                	mov    ebx,edi
c001889d:	80 fb 09             	cmp    bl,0x9
c00188a0:	0f 84 09 01 00 00    	je     c00189af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a6:	31 c0                	xor    eax,eax
c00188a8:	89 eb                	mov    ebx,ebp
c00188aa:	0f b6 fb             	movzx  edi,bl
c00188ad:	eb 30                	jmp    c00188df <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00188af:	31 c0                	xor    eax,eax
c00188b1:	80 f9 06             	cmp    cl,0x6
c00188b4:	75 f2                	jne    c00188a8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188b6:	80 fa 0a             	cmp    dl,0xa
c00188b9:	77 ed                	ja     c00188a8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188bb:	bf de 05 00 00       	mov    edi,0x5de
c00188c0:	0f a3 d7             	bt     edi,edx
c00188c3:	73 e3                	jae    c00188a8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188c5:	b8 c0 da 02 c0       	mov    eax,0xc002dac0
c00188ca:	e9 e0 00 00 00       	jmp    c00189af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188cf:	39 c7                	cmp    edi,eax
c00188d1:	0f 84 d3 00 00 00    	je     c00189aa <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00188d7:	40                   	inc    eax
c00188d8:	3d d0 00 00 00       	cmp    eax,0xd0
c00188dd:	74 09                	je     c00188e8 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00188df:	89 f3                	mov    ebx,esi
c00188e1:	80 fb 0f             	cmp    bl,0xf
c00188e4:	75 f1                	jne    c00188d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00188e6:	eb e7                	jmp    c00188cf <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00188e8:	80 f9 10             	cmp    cl,0x10
c00188eb:	75 14                	jne    c0018901 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00188ed:	8d 42 fc             	lea    eax,[edx-0x4]
c00188f0:	83 e0 fb             	and    eax,0xfffffffb
c00188f3:	3c 02                	cmp    al,0x2
c00188f5:	76 34                	jbe    c001892b <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00188f7:	b8 e2 ba 02 c0       	mov    eax,0xc002bae2
c00188fc:	80 fa 02             	cmp    dl,0x2
c00188ff:	eb 24                	jmp    c0018925 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018901:	80 f9 11             	cmp    cl,0x11
c0018904:	75 13                	jne    c0018919 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018906:	b8 e2 ba 02 c0       	mov    eax,0xc002bae2
c001890b:	80 fa 03             	cmp    dl,0x3
c001890e:	0f 85 9b 00 00 00    	jne    c00189af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018914:	e9 91 00 00 00       	jmp    c00189aa <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018919:	80 f9 12             	cmp    cl,0x12
c001891c:	75 14                	jne    c0018932 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001891e:	b8 e2 ba 02 c0       	mov    eax,0xc002bae2
c0018923:	fe ca                	dec    dl
c0018925:	0f 85 84 00 00 00    	jne    c00189af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001892b:	b8 e0 da 02 c0       	mov    eax,0xc002dae0
c0018930:	eb 7d                	jmp    c00189af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018932:	80 f9 14             	cmp    cl,0x14
c0018935:	75 12                	jne    c0018949 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018937:	4a                   	dec    edx
c0018938:	b8 e2 ba 02 c0       	mov    eax,0xc002bae2
c001893d:	80 fa 01             	cmp    dl,0x1
c0018940:	77 6d                	ja     c00189af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018942:	b8 f0 da 02 c0       	mov    eax,0xc002daf0
c0018947:	eb 66                	jmp    c00189af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018949:	80 f9 15             	cmp    cl,0x15
c001894c:	75 31                	jne    c001897f <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001894e:	b8 00 db 02 c0       	mov    eax,0xc002db00
c0018953:	80 fa 01             	cmp    dl,0x1
c0018956:	74 57                	je     c00189af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018958:	b8 e2 ba 02 c0       	mov    eax,0xc002bae2
c001895d:	80 fa 13             	cmp    dl,0x13
c0018960:	76 0c                	jbe    c001896e <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018962:	80 fa 30             	cmp    dl,0x30
c0018965:	75 48                	jne    c00189af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018967:	b8 20 db 02 c0       	mov    eax,0xc002db20
c001896c:	eb 41                	jmp    c00189af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001896e:	b9 04 00 09 00       	mov    ecx,0x90004
c0018973:	0f a3 d1             	bt     ecx,edx
c0018976:	73 37                	jae    c00189af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018978:	b8 10 db 02 c0       	mov    eax,0xc002db10
c001897d:	eb 30                	jmp    c00189af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001897f:	b8 e2 ba 02 c0       	mov    eax,0xc002bae2
c0018984:	80 f9 16             	cmp    cl,0x16
c0018987:	75 26                	jne    c00189af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018989:	b8 30 db 02 c0       	mov    eax,0xc002db30
c001898e:	84 d2                	test   dl,dl
c0018990:	74 1d                	je     c00189af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018992:	b8 e2 ba 02 c0       	mov    eax,0xc002bae2
c0018997:	80 fa 30             	cmp    dl,0x30
c001899a:	75 13                	jne    c00189af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001899c:	b8 40 db 02 c0       	mov    eax,0xc002db40
c00189a1:	eb 0c                	jmp    c00189af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189a3:	b8 60 da 02 c0       	mov    eax,0xc002da60
c00189a8:	eb 05                	jmp    c00189af <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189aa:	b8 d0 da 02 c0       	mov    eax,0xc002dad0
c00189af:	5b                   	pop    ebx
c00189b0:	5e                   	pop    esi
c00189b1:	5f                   	pop    edi
c00189b2:	5d                   	pop    ebp
c00189b3:	c3                   	ret    

c00189b4 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00189b4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00189b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00189bc:	80 f9 04             	cmp    cl,0x4
c00189bf:	75 6b                	jne    c0018a2c <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00189c1:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c00189c6:	80 fa 01             	cmp    dl,0x1
c00189c9:	0f 86 92 02 00 00    	jbe    c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189cf:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c00189d4:	80 fa 02             	cmp    dl,0x2
c00189d7:	0f 84 84 02 00 00    	je     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189dd:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c00189e2:	80 fa 03             	cmp    dl,0x3
c00189e5:	0f 84 76 02 00 00    	je     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189eb:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c00189f0:	80 fa 04             	cmp    dl,0x4
c00189f3:	0f 84 68 02 00 00    	je     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189f9:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c00189fe:	80 fa 05             	cmp    dl,0x5
c0018a01:	0f 84 5a 02 00 00    	je     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a07:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018a0c:	80 fa 07             	cmp    dl,0x7
c0018a0f:	0f 84 4c 02 00 00    	je     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a15:	83 ea 08             	sub    edx,0x8
c0018a18:	b8 e2 ba 02 c0       	mov    eax,0xc002bae2
c0018a1d:	80 fa 01             	cmp    dl,0x1
c0018a20:	0f 87 3b 02 00 00    	ja     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a26:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018a2b:	c3                   	ret    
c0018a2c:	80 f9 05             	cmp    cl,0x5
c0018a2f:	75 45                	jne    c0018a76 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018a31:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018a34:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018a39:	80 f9 02             	cmp    cl,0x2
c0018a3c:	0f 86 1f 02 00 00    	jbe    c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a42:	80 fa 04             	cmp    dl,0x4
c0018a45:	0f 84 f3 01 00 00    	je     c0018c3e <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018a4b:	80 fa 07             	cmp    dl,0x7
c0018a4e:	0f 84 0d 02 00 00    	je     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a54:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018a59:	80 fa 08             	cmp    dl,0x8
c0018a5c:	0f 84 ff 01 00 00    	je     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a62:	b8 e2 ba 02 c0       	mov    eax,0xc002bae2
c0018a67:	80 fa 09             	cmp    dl,0x9
c0018a6a:	0f 85 f1 01 00 00    	jne    c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a70:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018a75:	c3                   	ret    
c0018a76:	80 f9 06             	cmp    cl,0x6
c0018a79:	0f 85 85 01 00 00    	jne    c0018c04 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018a7f:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018a84:	80 fa 01             	cmp    dl,0x1
c0018a87:	0f 84 d4 01 00 00    	je     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a8d:	8d 42 fb             	lea    eax,[edx-0x5]
c0018a90:	3c 01                	cmp    al,0x1
c0018a92:	0f 86 ac 01 00 00    	jbe    c0018c44 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a98:	80 fa 03             	cmp    dl,0x3
c0018a9b:	0f 84 a3 01 00 00    	je     c0018c44 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018aa1:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018aa4:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018aa9:	80 f9 01             	cmp    cl,0x1
c0018aac:	0f 86 af 01 00 00    	jbe    c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab2:	80 fa 09             	cmp    dl,0x9
c0018ab5:	0f 84 8f 01 00 00    	je     c0018c4a <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018abb:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018abe:	80 f9 01             	cmp    cl,0x1
c0018ac1:	0f 86 9a 01 00 00    	jbe    c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac7:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018acc:	80 fa 0d             	cmp    dl,0xd
c0018acf:	0f 84 8c 01 00 00    	je     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad5:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018ada:	80 fa 0e             	cmp    dl,0xe
c0018add:	0f 84 7e 01 00 00    	je     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae3:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018ae8:	80 fa 0f             	cmp    dl,0xf
c0018aeb:	0f 84 70 01 00 00    	je     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af1:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018af6:	80 fa 15             	cmp    dl,0x15
c0018af9:	0f 84 62 01 00 00    	je     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aff:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018b02:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018b07:	80 f9 01             	cmp    cl,0x1
c0018b0a:	0f 86 51 01 00 00    	jbe    c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b10:	80 fa 1a             	cmp    dl,0x1a
c0018b13:	0f 84 37 01 00 00    	je     c0018c50 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018b19:	80 fa 1c             	cmp    dl,0x1c
c0018b1c:	0f 84 34 01 00 00    	je     c0018c56 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018b22:	80 fa 1d             	cmp    dl,0x1d
c0018b25:	0f 84 36 01 00 00    	je     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b2b:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018b30:	80 fa 25             	cmp    dl,0x25
c0018b33:	0f 84 28 01 00 00    	je     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b39:	8d 4a da             	lea    ecx,[edx-0x26]
c0018b3c:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018b41:	80 f9 01             	cmp    cl,0x1
c0018b44:	0f 86 17 01 00 00    	jbe    c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b4a:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018b4f:	80 fa 2a             	cmp    dl,0x2a
c0018b52:	0f 84 09 01 00 00    	je     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b58:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018b5d:	80 fa 2c             	cmp    dl,0x2c
c0018b60:	0f 84 fb 00 00 00    	je     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b66:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018b6b:	80 fa 2d             	cmp    dl,0x2d
c0018b6e:	0f 84 ed 00 00 00    	je     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b74:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018b79:	80 fa 2e             	cmp    dl,0x2e
c0018b7c:	0f 84 df 00 00 00    	je     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b82:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018b87:	80 fa 2f             	cmp    dl,0x2f
c0018b8a:	0f 84 d1 00 00 00    	je     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b90:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018b93:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018b98:	80 f9 01             	cmp    cl,0x1
c0018b9b:	0f 86 c0 00 00 00    	jbe    c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba1:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018ba6:	80 fa 37             	cmp    dl,0x37
c0018ba9:	0f 84 b2 00 00 00    	je     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018baf:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018bb4:	80 fa 3a             	cmp    dl,0x3a
c0018bb7:	0f 84 a4 00 00 00    	je     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bbd:	b8 10 da 02 c0       	mov    eax,0xc002da10
c0018bc2:	80 fa 3c             	cmp    dl,0x3c
c0018bc5:	0f 84 96 00 00 00    	je     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bcb:	b8 20 da 02 c0       	mov    eax,0xc002da20
c0018bd0:	80 fa 3d             	cmp    dl,0x3d
c0018bd3:	0f 84 88 00 00 00    	je     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bd9:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018bde:	80 fa 3e             	cmp    dl,0x3e
c0018be1:	74 7e                	je     c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018be3:	8d 42 bb             	lea    eax,[edx-0x45]
c0018be6:	3c 01                	cmp    al,0x1
c0018be8:	76 72                	jbe    c0018c5c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018bea:	80 fa 3f             	cmp    dl,0x3f
c0018bed:	74 6d                	je     c0018c5c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018bef:	80 fa 4a             	cmp    dl,0x4a
c0018bf2:	74 0a                	je     c0018bfe <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018bf4:	b8 e2 ba 02 c0       	mov    eax,0xc002bae2
c0018bf9:	80 fa 4d             	cmp    dl,0x4d
c0018bfc:	75 63                	jne    c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bfe:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018c03:	c3                   	ret    
c0018c04:	b8 e2 ba 02 c0       	mov    eax,0xc002bae2
c0018c09:	80 f9 0b             	cmp    cl,0xb
c0018c0c:	75 0a                	jne    c0018c18 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018c0e:	fe ca                	dec    dl
c0018c10:	75 4f                	jne    c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c12:	b8 30 da 02 c0       	mov    eax,0xc002da30
c0018c17:	c3                   	ret    
c0018c18:	80 f9 0f             	cmp    cl,0xf
c0018c1b:	75 44                	jne    c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c1d:	b8 40 da 02 c0       	mov    eax,0xc002da40
c0018c22:	80 fa 02             	cmp    dl,0x2
c0018c25:	76 3a                	jbe    c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c27:	8d 42 fd             	lea    eax,[edx-0x3]
c0018c2a:	3c 01                	cmp    al,0x1
c0018c2c:	76 0a                	jbe    c0018c38 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018c2e:	b8 e2 ba 02 c0       	mov    eax,0xc002bae2
c0018c33:	80 fa 06             	cmp    dl,0x6
c0018c36:	75 29                	jne    c0018c61 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c38:	b8 50 da 02 c0       	mov    eax,0xc002da50
c0018c3d:	c3                   	ret    
c0018c3e:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018c43:	c3                   	ret    
c0018c44:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018c49:	c3                   	ret    
c0018c4a:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018c4f:	c3                   	ret    
c0018c50:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018c55:	c3                   	ret    
c0018c56:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018c5b:	c3                   	ret    
c0018c5c:	b8 10 da 02 c0       	mov    eax,0xc002da10
c0018c61:	c3                   	ret    

c0018c62 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018c62:	60                   	pusha  
c0018c63:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c6f:	9c                   	pushf  
c0018c70:	fa                   	cli    
c0018c71:	0f 09                	wbinvd 
c0018c73:	0f 30                	wrmsr  
c0018c75:	9d                   	popf   
c0018c76:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c7a:	89 02                	mov    DWORD PTR [edx],eax
c0018c7c:	61                   	popa   
c0018c7d:	c3                   	ret    

c0018c7e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018c7e:	60                   	pusha  
c0018c7f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c83:	9c                   	pushf  
c0018c84:	fa                   	cli    
c0018c85:	0f 09                	wbinvd 
c0018c87:	31 c0                	xor    eax,eax
c0018c89:	31 d2                	xor    edx,edx
c0018c8b:	0f 32                	rdmsr  
c0018c8d:	9d                   	popf   
c0018c8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c92:	89 02                	mov    DWORD PTR [edx],eax
c0018c94:	61                   	popa   
c0018c95:	c3                   	ret    

c0018c96 <CPU::AMD_K6_writeback(int, int, int)>:
c0018c96:	56                   	push   esi
c0018c97:	53                   	push   ebx
c0018c98:	83 ec 10             	sub    esp,0x10
c0018c9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c9f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018ca4:	75 5d                	jne    c0018d03 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ca6:	83 f8 08             	cmp    eax,0x8
c0018ca9:	75 09                	jne    c0018cb4 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018cab:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018cb0:	7e 13                	jle    c0018cc5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018cb2:	eb 30                	jmp    c0018ce4 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018cb4:	83 f8 06             	cmp    eax,0x6
c0018cb7:	7c 4a                	jl     c0018d03 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018cb9:	83 f8 07             	cmp    eax,0x7
c0018cbc:	7e 07                	jle    c0018cc5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018cbe:	83 f8 09             	cmp    eax,0x9
c0018cc1:	74 21                	je     c0018ce4 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018cc3:	eb 3e                	jmp    c0018d03 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018cc5:	89 e6                	mov    esi,esp
c0018cc7:	8b 1d 88 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e688
c0018ccd:	56                   	push   esi
c0018cce:	c1 eb 15             	shr    ebx,0x15
c0018cd1:	68 82 00 00 c0       	push   0xc0000082
c0018cd6:	83 e3 7e             	and    ebx,0x7e
c0018cd9:	e8 a0 ff ff ff       	call   c0018c7e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018cde:	56                   	push   esi
c0018cdf:	6a 00                	push   0x0
c0018ce1:	53                   	push   ebx
c0018ce2:	eb 12                	jmp    c0018cf6 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018ce4:	89 e3                	mov    ebx,esp
c0018ce6:	53                   	push   ebx
c0018ce7:	68 82 00 00 c0       	push   0xc0000082
c0018cec:	e8 8d ff ff ff       	call   c0018c7e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018cf1:	53                   	push   ebx
c0018cf2:	6a 00                	push   0x0
c0018cf4:	6a 00                	push   0x0
c0018cf6:	68 82 00 00 c0       	push   0xc0000082
c0018cfb:	e8 62 ff ff ff       	call   c0018c62 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018d00:	83 c4 18             	add    esp,0x18
c0018d03:	83 c4 10             	add    esp,0x10
c0018d06:	5b                   	pop    ebx
c0018d07:	5e                   	pop    esi
c0018d08:	c3                   	ret    
c0018d09:	90                   	nop

c0018d0a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018d0a:	55                   	push   ebp
c0018d0b:	57                   	push   edi
c0018d0c:	56                   	push   esi
c0018d0d:	53                   	push   ebx
c0018d0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d12:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018d16:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018d1a:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018d1e:	39 05 60 db 02 c0    	cmp    DWORD PTR ds:0xc002db60,eax
c0018d24:	75 23                	jne    c0018d49 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018d26:	a1 8c 11 03 c0       	mov    eax,ds:0xc003118c
c0018d2b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018d2f:	89 06                	mov    DWORD PTR [esi],eax
c0018d31:	a1 88 11 03 c0       	mov    eax,ds:0xc0031188
c0018d36:	89 07                	mov    DWORD PTR [edi],eax
c0018d38:	a1 84 11 03 c0       	mov    eax,ds:0xc0031184
c0018d3d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018d40:	a1 80 11 03 c0       	mov    eax,ds:0xc0031180
c0018d45:	89 02                	mov    DWORD PTR [edx],eax
c0018d47:	eb 3f                	jmp    c0018d88 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018d49:	31 c9                	xor    ecx,ecx
c0018d4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d4f:	0f a2                	cpuid  
c0018d51:	89 06                	mov    DWORD PTR [esi],eax
c0018d53:	89 1f                	mov    DWORD PTR [edi],ebx
c0018d55:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d59:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018d5c:	89 10                	mov    DWORD PTR [eax],edx
c0018d5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d62:	a3 60 db 02 c0       	mov    ds:0xc002db60,eax
c0018d67:	8b 06                	mov    eax,DWORD PTR [esi]
c0018d69:	a3 8c 11 03 c0       	mov    ds:0xc003118c,eax
c0018d6e:	8b 07                	mov    eax,DWORD PTR [edi]
c0018d70:	a3 88 11 03 c0       	mov    ds:0xc0031188,eax
c0018d75:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d78:	a3 84 11 03 c0       	mov    ds:0xc0031184,eax
c0018d7d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d81:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d83:	a3 80 11 03 c0       	mov    ds:0xc0031180,eax
c0018d88:	5b                   	pop    ebx
c0018d89:	5e                   	pop    esi
c0018d8a:	5f                   	pop    edi
c0018d8b:	5d                   	pop    ebp
c0018d8c:	c3                   	ret    
c0018d8d:	90                   	nop

c0018d8e <CPU::cpuidCheckEDX(unsigned int)>:
c0018d8e:	83 ec 10             	sub    esp,0x10
c0018d91:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d95:	50                   	push   eax
c0018d96:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d9a:	50                   	push   eax
c0018d9b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d9f:	50                   	push   eax
c0018da0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018da4:	50                   	push   eax
c0018da5:	6a 01                	push   0x1
c0018da7:	e8 5e ff ff ff       	call   c0018d0a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018db0:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018db4:	0f 95 c0             	setne  al
c0018db7:	83 c4 24             	add    esp,0x24
c0018dba:	c3                   	ret    
c0018dbb:	90                   	nop

c0018dbc <CPU::cpuidCheckECX(unsigned int)>:
c0018dbc:	83 ec 10             	sub    esp,0x10
c0018dbf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc3:	50                   	push   eax
c0018dc4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc8:	50                   	push   eax
c0018dc9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dcd:	50                   	push   eax
c0018dce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dd2:	50                   	push   eax
c0018dd3:	6a 01                	push   0x1
c0018dd5:	e8 30 ff ff ff       	call   c0018d0a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dde:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018de2:	0f 95 c0             	setne  al
c0018de5:	83 c4 24             	add    esp,0x24
c0018de8:	c3                   	ret    
c0018de9:	90                   	nop

c0018dea <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018dea:	83 ec 10             	sub    esp,0x10
c0018ded:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018df1:	50                   	push   eax
c0018df2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018df6:	50                   	push   eax
c0018df7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dfb:	50                   	push   eax
c0018dfc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e00:	50                   	push   eax
c0018e01:	6a 07                	push   0x7
c0018e03:	e8 02 ff ff ff       	call   c0018d0a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e0c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018e10:	0f 95 c0             	setne  al
c0018e13:	83 c4 24             	add    esp,0x24
c0018e16:	c3                   	ret    
c0018e17:	90                   	nop

c0018e18 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018e18:	83 ec 10             	sub    esp,0x10
c0018e1b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e1f:	50                   	push   eax
c0018e20:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e24:	50                   	push   eax
c0018e25:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e29:	50                   	push   eax
c0018e2a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e2e:	50                   	push   eax
c0018e2f:	6a 07                	push   0x7
c0018e31:	e8 d4 fe ff ff       	call   c0018d0a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e36:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e3a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e3e:	0f 95 c0             	setne  al
c0018e41:	83 c4 24             	add    esp,0x24
c0018e44:	c3                   	ret    
c0018e45:	90                   	nop

c0018e46 <CPU::CPU()>:
c0018e46:	83 ec 0c             	sub    esp,0xc
c0018e49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e4d:	83 ec 08             	sub    esp,0x8
c0018e50:	68 e2 ba 02 c0       	push   0xc002bae2
c0018e55:	50                   	push   eax
c0018e56:	e8 89 b7 ff ff       	call   c00145e4 <Device::Device(char const*)>
c0018e5b:	83 c4 10             	add    esp,0x10
c0018e5e:	ba bc bb 02 c0       	mov    edx,0xc002bbbc
c0018e63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e67:	89 10                	mov    DWORD PTR [eax],edx
c0018e69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e6d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e7b:	05 78 01 00 00       	add    eax,0x178
c0018e80:	83 ec 0c             	sub    esp,0xc
c0018e83:	50                   	push   eax
c0018e84:	e8 cf 61 ff ff       	call   c000f058 <GDT::GDT()>
c0018e89:	83 c4 10             	add    esp,0x10
c0018e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e90:	05 7c 09 00 00       	add    eax,0x97c
c0018e95:	83 ec 0c             	sub    esp,0xc
c0018e98:	50                   	push   eax
c0018e99:	e8 1c 64 ff ff       	call   c000f2ba <IDT::IDT()>
c0018e9e:	83 c4 10             	add    esp,0x10
c0018ea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ea5:	05 7c 11 00 00       	add    eax,0x117c
c0018eaa:	83 ec 0c             	sub    esp,0xc
c0018ead:	50                   	push   eax
c0018eae:	e8 3b 86 ff ff       	call   c00114ee <TSS::TSS()>
c0018eb3:	83 c4 10             	add    esp,0x10
c0018eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018eba:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018ec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ec5:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018ecf:	90                   	nop
c0018ed0:	83 c4 0c             	add    esp,0xc
c0018ed3:	c3                   	ret    

c0018ed4 <CPU::displayFeatures()>:
c0018ed4:	53                   	push   ebx
c0018ed5:	83 ec 10             	sub    esp,0x10
c0018ed8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018edc:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018ee2:	68 f0 b7 02 c0       	push   0xc002b7f0
c0018ee7:	e8 e1 a0 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0018eec:	59                   	pop    ecx
c0018eed:	58                   	pop    eax
c0018eee:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018ef4:	50                   	push   eax
c0018ef5:	68 01 b8 02 c0       	push   0xc002b801
c0018efa:	e8 ce a0 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0018eff:	58                   	pop    eax
c0018f00:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f06:	5a                   	pop    edx
c0018f07:	c1 e8 0e             	shr    eax,0xe
c0018f0a:	0f b6 c0             	movzx  eax,al
c0018f0d:	50                   	push   eax
c0018f0e:	68 12 b8 02 c0       	push   0xc002b812
c0018f13:	e8 b5 a0 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0018f18:	59                   	pop    ecx
c0018f19:	58                   	pop    eax
c0018f1a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f20:	66 c1 e8 06          	shr    ax,0x6
c0018f24:	0f b6 c0             	movzx  eax,al
c0018f27:	50                   	push   eax
c0018f28:	68 23 b8 02 c0       	push   0xc002b823
c0018f2d:	e8 9b a0 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0018f32:	c7 04 24 d0 bc 02 c0 	mov    DWORD PTR [esp],0xc002bcd0
c0018f39:	e8 8f a0 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0018f3e:	83 c4 10             	add    esp,0x10
c0018f41:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c0018f46:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018f4d:	74 05                	je     c0018f54 <CPU::displayFeatures()+0x80>
c0018f4f:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c0018f54:	52                   	push   edx
c0018f55:	52                   	push   edx
c0018f56:	50                   	push   eax
c0018f57:	68 34 b8 02 c0       	push   0xc002b834
c0018f5c:	e8 6c a0 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0018f61:	83 c4 10             	add    esp,0x10
c0018f64:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c0018f69:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018f70:	78 05                	js     c0018f77 <CPU::displayFeatures()+0xa3>
c0018f72:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c0018f77:	51                   	push   ecx
c0018f78:	51                   	push   ecx
c0018f79:	50                   	push   eax
c0018f7a:	68 4b b8 02 c0       	push   0xc002b84b
c0018f7f:	e8 49 a0 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0018f84:	83 c4 10             	add    esp,0x10
c0018f87:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c0018f8c:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018f93:	75 05                	jne    c0018f9a <CPU::displayFeatures()+0xc6>
c0018f95:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c0018f9a:	52                   	push   edx
c0018f9b:	52                   	push   edx
c0018f9c:	50                   	push   eax
c0018f9d:	68 62 b8 02 c0       	push   0xc002b862
c0018fa2:	e8 26 a0 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0018fa7:	83 c4 10             	add    esp,0x10
c0018faa:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c0018faf:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018fb6:	75 05                	jne    c0018fbd <CPU::displayFeatures()+0xe9>
c0018fb8:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c0018fbd:	51                   	push   ecx
c0018fbe:	51                   	push   ecx
c0018fbf:	50                   	push   eax
c0018fc0:	68 79 b8 02 c0       	push   0xc002b879
c0018fc5:	e8 03 a0 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0018fca:	83 c4 10             	add    esp,0x10
c0018fcd:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c0018fd2:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018fd9:	75 05                	jne    c0018fe0 <CPU::displayFeatures()+0x10c>
c0018fdb:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c0018fe0:	52                   	push   edx
c0018fe1:	52                   	push   edx
c0018fe2:	50                   	push   eax
c0018fe3:	68 90 b8 02 c0       	push   0xc002b890
c0018fe8:	e8 e0 9f ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0018fed:	83 c4 10             	add    esp,0x10
c0018ff0:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c0018ff5:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018ffc:	75 05                	jne    c0019003 <CPU::displayFeatures()+0x12f>
c0018ffe:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c0019003:	51                   	push   ecx
c0019004:	51                   	push   ecx
c0019005:	50                   	push   eax
c0019006:	68 a7 b8 02 c0       	push   0xc002b8a7
c001900b:	e8 bd 9f ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0019010:	83 c4 10             	add    esp,0x10
c0019013:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c0019018:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001901f:	75 05                	jne    c0019026 <CPU::displayFeatures()+0x152>
c0019021:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c0019026:	52                   	push   edx
c0019027:	52                   	push   edx
c0019028:	50                   	push   eax
c0019029:	68 be b8 02 c0       	push   0xc002b8be
c001902e:	e8 9a 9f ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0019033:	83 c4 10             	add    esp,0x10
c0019036:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c001903b:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0019042:	75 05                	jne    c0019049 <CPU::displayFeatures()+0x175>
c0019044:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c0019049:	51                   	push   ecx
c001904a:	51                   	push   ecx
c001904b:	50                   	push   eax
c001904c:	68 d5 b8 02 c0       	push   0xc002b8d5
c0019051:	e8 77 9f ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0019056:	83 c4 10             	add    esp,0x10
c0019059:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c001905e:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0019065:	75 05                	jne    c001906c <CPU::displayFeatures()+0x198>
c0019067:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c001906c:	52                   	push   edx
c001906d:	52                   	push   edx
c001906e:	50                   	push   eax
c001906f:	68 ec b8 02 c0       	push   0xc002b8ec
c0019074:	e8 54 9f ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0019079:	83 c4 10             	add    esp,0x10
c001907c:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c0019081:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0019088:	75 05                	jne    c001908f <CPU::displayFeatures()+0x1bb>
c001908a:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c001908f:	51                   	push   ecx
c0019090:	51                   	push   ecx
c0019091:	50                   	push   eax
c0019092:	68 03 b9 02 c0       	push   0xc002b903
c0019097:	e8 31 9f ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001909c:	83 c4 10             	add    esp,0x10
c001909f:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c00190a4:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00190ab:	75 05                	jne    c00190b2 <CPU::displayFeatures()+0x1de>
c00190ad:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c00190b2:	52                   	push   edx
c00190b3:	52                   	push   edx
c00190b4:	50                   	push   eax
c00190b5:	68 1a b9 02 c0       	push   0xc002b91a
c00190ba:	e8 0e 9f ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c00190bf:	83 c4 10             	add    esp,0x10
c00190c2:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c00190c7:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00190ce:	75 05                	jne    c00190d5 <CPU::displayFeatures()+0x201>
c00190d0:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c00190d5:	51                   	push   ecx
c00190d6:	51                   	push   ecx
c00190d7:	50                   	push   eax
c00190d8:	68 31 b9 02 c0       	push   0xc002b931
c00190dd:	e8 eb 9e ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c00190e2:	83 c4 10             	add    esp,0x10
c00190e5:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c00190ea:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00190f1:	75 05                	jne    c00190f8 <CPU::displayFeatures()+0x224>
c00190f3:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c00190f8:	52                   	push   edx
c00190f9:	52                   	push   edx
c00190fa:	50                   	push   eax
c00190fb:	68 48 b9 02 c0       	push   0xc002b948
c0019100:	e8 c8 9e ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0019105:	83 c4 10             	add    esp,0x10
c0019108:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c001910d:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019114:	78 05                	js     c001911b <CPU::displayFeatures()+0x247>
c0019116:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c001911b:	51                   	push   ecx
c001911c:	51                   	push   ecx
c001911d:	50                   	push   eax
c001911e:	68 5f b9 02 c0       	push   0xc002b95f
c0019123:	e8 a5 9e ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0019128:	83 c4 10             	add    esp,0x10
c001912b:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c0019130:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019137:	75 05                	jne    c001913e <CPU::displayFeatures()+0x26a>
c0019139:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c001913e:	52                   	push   edx
c001913f:	52                   	push   edx
c0019140:	50                   	push   eax
c0019141:	68 76 b9 02 c0       	push   0xc002b976
c0019146:	e8 82 9e ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001914b:	83 c4 18             	add    esp,0x18
c001914e:	5b                   	pop    ebx
c001914f:	c3                   	ret    

c0019150 <CPU::detectFeatures()>:
c0019150:	55                   	push   ebp
c0019151:	57                   	push   edi
c0019152:	56                   	push   esi
c0019153:	53                   	push   ebx
c0019154:	83 ec 50             	sub    esp,0x50
c0019157:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001915b:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0019165:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001916c:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0019172:	6a 0d                	push   0xd
c0019174:	6a 00                	push   0x0
c0019176:	57                   	push   edi
c0019177:	e8 fc 75 fe ff       	call   c0000778 <memset>
c001917c:	83 c4 10             	add    esp,0x10
c001917f:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0019184:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001918b:	0f 84 20 09 00 00    	je     c0019ab1 <CPU::detectFeatures()+0x961>
c0019191:	83 ec 0c             	sub    esp,0xc
c0019194:	6a 10                	push   0x10
c0019196:	e8 f3 fb ff ff       	call   c0018d8e <CPU::cpuidCheckEDX(unsigned int)>
c001919b:	83 e0 01             	and    eax,0x1
c001919e:	8d 14 00             	lea    edx,[eax+eax*1]
c00191a1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191a7:	83 e0 fd             	and    eax,0xfffffffd
c00191aa:	09 d0                	or     eax,edx
c00191ac:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191b2:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00191b9:	e8 d0 fb ff ff       	call   c0018d8e <CPU::cpuidCheckEDX(unsigned int)>
c00191be:	83 e0 01             	and    eax,0x1
c00191c1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00191c8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191ce:	83 e0 fb             	and    eax,0xfffffffb
c00191d1:	09 d0                	or     eax,edx
c00191d3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191d9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00191e0:	e8 a9 fb ff ff       	call   c0018d8e <CPU::cpuidCheckEDX(unsigned int)>
c00191e5:	83 e0 01             	and    eax,0x1
c00191e8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00191ef:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191f5:	83 e0 f7             	and    eax,0xfffffff7
c00191f8:	09 d0                	or     eax,edx
c00191fa:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019200:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019207:	e8 82 fb ff ff       	call   c0018d8e <CPU::cpuidCheckEDX(unsigned int)>
c001920c:	83 e0 01             	and    eax,0x1
c001920f:	c1 e0 04             	shl    eax,0x4
c0019212:	88 c2                	mov    dl,al
c0019214:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001921a:	83 e0 ef             	and    eax,0xffffffef
c001921d:	09 d0                	or     eax,edx
c001921f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019225:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001922c:	e8 5d fb ff ff       	call   c0018d8e <CPU::cpuidCheckEDX(unsigned int)>
c0019231:	83 e0 01             	and    eax,0x1
c0019234:	c1 e0 05             	shl    eax,0x5
c0019237:	88 c2                	mov    dl,al
c0019239:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001923f:	83 e0 df             	and    eax,0xffffffdf
c0019242:	09 d0                	or     eax,edx
c0019244:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001924a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019251:	e8 38 fb ff ff       	call   c0018d8e <CPU::cpuidCheckEDX(unsigned int)>
c0019256:	83 e0 01             	and    eax,0x1
c0019259:	8d 14 00             	lea    edx,[eax+eax*1]
c001925c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019262:	83 e0 fd             	and    eax,0xfffffffd
c0019265:	09 d0                	or     eax,edx
c0019267:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001926d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019274:	e8 15 fb ff ff       	call   c0018d8e <CPU::cpuidCheckEDX(unsigned int)>
c0019279:	83 e0 01             	and    eax,0x1
c001927c:	c1 e0 06             	shl    eax,0x6
c001927f:	88 c2                	mov    dl,al
c0019281:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019287:	83 e0 bf             	and    eax,0xffffffbf
c001928a:	09 d0                	or     eax,edx
c001928c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019292:	58                   	pop    eax
c0019293:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019297:	56                   	push   esi
c0019298:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001929c:	55                   	push   ebp
c001929d:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192a1:	50                   	push   eax
c00192a2:	8d 54 24 28          	lea    edx,[esp+0x28]
c00192a6:	52                   	push   edx
c00192a7:	6a 00                	push   0x0
c00192a9:	e8 5c fa ff ff       	call   c0018d0a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192ae:	83 c4 1c             	add    esp,0x1c
c00192b1:	6a 04                	push   0x4
c00192b3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00192b7:	50                   	push   eax
c00192b8:	57                   	push   edi
c00192b9:	e8 86 74 fe ff       	call   c0000744 <memcpy>
c00192be:	83 c4 0c             	add    esp,0xc
c00192c1:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00192c7:	6a 04                	push   0x4
c00192c9:	56                   	push   esi
c00192ca:	50                   	push   eax
c00192cb:	e8 74 74 fe ff       	call   c0000744 <memcpy>
c00192d0:	83 c4 0c             	add    esp,0xc
c00192d3:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00192d9:	6a 04                	push   0x4
c00192db:	55                   	push   ebp
c00192dc:	50                   	push   eax
c00192dd:	e8 62 74 fe ff       	call   c0000744 <memcpy>
c00192e2:	58                   	pop    eax
c00192e3:	5a                   	pop    edx
c00192e4:	68 8d b9 02 c0       	push   0xc002b98d
c00192e9:	57                   	push   edi
c00192ea:	e8 d1 75 fe ff       	call   c00008c0 <strcmp>
c00192ef:	83 c4 10             	add    esp,0x10
c00192f2:	85 c0                	test   eax,eax
c00192f4:	75 0f                	jne    c0019305 <CPU::detectFeatures()+0x1b5>
c00192f6:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019300:	e9 22 02 00 00       	jmp    c0019527 <CPU::detectFeatures()+0x3d7>
c0019305:	50                   	push   eax
c0019306:	50                   	push   eax
c0019307:	68 9a b9 02 c0       	push   0xc002b99a
c001930c:	57                   	push   edi
c001930d:	e8 ae 75 fe ff       	call   c00008c0 <strcmp>
c0019312:	83 c4 10             	add    esp,0x10
c0019315:	85 c0                	test   eax,eax
c0019317:	74 dd                	je     c00192f6 <CPU::detectFeatures()+0x1a6>
c0019319:	51                   	push   ecx
c001931a:	51                   	push   ecx
c001931b:	68 a7 b9 02 c0       	push   0xc002b9a7
c0019320:	57                   	push   edi
c0019321:	e8 9a 75 fe ff       	call   c00008c0 <strcmp>
c0019326:	83 c4 10             	add    esp,0x10
c0019329:	85 c0                	test   eax,eax
c001932b:	74 2a                	je     c0019357 <CPU::detectFeatures()+0x207>
c001932d:	52                   	push   edx
c001932e:	52                   	push   edx
c001932f:	68 b4 b9 02 c0       	push   0xc002b9b4
c0019334:	57                   	push   edi
c0019335:	e8 86 75 fe ff       	call   c00008c0 <strcmp>
c001933a:	83 c4 10             	add    esp,0x10
c001933d:	85 c0                	test   eax,eax
c001933f:	74 16                	je     c0019357 <CPU::detectFeatures()+0x207>
c0019341:	50                   	push   eax
c0019342:	50                   	push   eax
c0019343:	68 c1 b9 02 c0       	push   0xc002b9c1
c0019348:	57                   	push   edi
c0019349:	e8 72 75 fe ff       	call   c00008c0 <strcmp>
c001934e:	83 c4 10             	add    esp,0x10
c0019351:	85 c0                	test   eax,eax
c0019353:	74 48                	je     c001939d <CPU::detectFeatures()+0x24d>
c0019355:	eb 0f                	jmp    c0019366 <CPU::detectFeatures()+0x216>
c0019357:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019361:	e9 c1 01 00 00       	jmp    c0019527 <CPU::detectFeatures()+0x3d7>
c0019366:	50                   	push   eax
c0019367:	50                   	push   eax
c0019368:	68 ce b9 02 c0       	push   0xc002b9ce
c001936d:	57                   	push   edi
c001936e:	e8 4d 75 fe ff       	call   c00008c0 <strcmp>
c0019373:	83 c4 10             	add    esp,0x10
c0019376:	85 c0                	test   eax,eax
c0019378:	74 23                	je     c001939d <CPU::detectFeatures()+0x24d>
c001937a:	50                   	push   eax
c001937b:	50                   	push   eax
c001937c:	68 db b9 02 c0       	push   0xc002b9db
c0019381:	57                   	push   edi
c0019382:	e8 39 75 fe ff       	call   c00008c0 <strcmp>
c0019387:	83 c4 10             	add    esp,0x10
c001938a:	85 c0                	test   eax,eax
c001938c:	75 1e                	jne    c00193ac <CPU::detectFeatures()+0x25c>
c001938e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019398:	e9 8a 01 00 00       	jmp    c0019527 <CPU::detectFeatures()+0x3d7>
c001939d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00193a7:	e9 7b 01 00 00       	jmp    c0019527 <CPU::detectFeatures()+0x3d7>
c00193ac:	50                   	push   eax
c00193ad:	50                   	push   eax
c00193ae:	68 e8 b9 02 c0       	push   0xc002b9e8
c00193b3:	57                   	push   edi
c00193b4:	e8 07 75 fe ff       	call   c00008c0 <strcmp>
c00193b9:	83 c4 10             	add    esp,0x10
c00193bc:	85 c0                	test   eax,eax
c00193be:	75 0f                	jne    c00193cf <CPU::detectFeatures()+0x27f>
c00193c0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00193ca:	e9 58 01 00 00       	jmp    c0019527 <CPU::detectFeatures()+0x3d7>
c00193cf:	50                   	push   eax
c00193d0:	50                   	push   eax
c00193d1:	68 a7 b9 02 c0       	push   0xc002b9a7
c00193d6:	57                   	push   edi
c00193d7:	e8 e4 74 fe ff       	call   c00008c0 <strcmp>
c00193dc:	83 c4 10             	add    esp,0x10
c00193df:	85 c0                	test   eax,eax
c00193e1:	75 0f                	jne    c00193f2 <CPU::detectFeatures()+0x2a2>
c00193e3:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00193ed:	e9 35 01 00 00       	jmp    c0019527 <CPU::detectFeatures()+0x3d7>
c00193f2:	50                   	push   eax
c00193f3:	50                   	push   eax
c00193f4:	68 f5 b9 02 c0       	push   0xc002b9f5
c00193f9:	57                   	push   edi
c00193fa:	e8 c1 74 fe ff       	call   c00008c0 <strcmp>
c00193ff:	83 c4 10             	add    esp,0x10
c0019402:	85 c0                	test   eax,eax
c0019404:	75 0f                	jne    c0019415 <CPU::detectFeatures()+0x2c5>
c0019406:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019410:	e9 12 01 00 00       	jmp    c0019527 <CPU::detectFeatures()+0x3d7>
c0019415:	51                   	push   ecx
c0019416:	51                   	push   ecx
c0019417:	68 02 ba 02 c0       	push   0xc002ba02
c001941c:	57                   	push   edi
c001941d:	e8 9e 74 fe ff       	call   c00008c0 <strcmp>
c0019422:	83 c4 10             	add    esp,0x10
c0019425:	85 c0                	test   eax,eax
c0019427:	75 0f                	jne    c0019438 <CPU::detectFeatures()+0x2e8>
c0019429:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019433:	e9 ef 00 00 00       	jmp    c0019527 <CPU::detectFeatures()+0x3d7>
c0019438:	52                   	push   edx
c0019439:	52                   	push   edx
c001943a:	68 0f ba 02 c0       	push   0xc002ba0f
c001943f:	57                   	push   edi
c0019440:	e8 7b 74 fe ff       	call   c00008c0 <strcmp>
c0019445:	83 c4 10             	add    esp,0x10
c0019448:	85 c0                	test   eax,eax
c001944a:	75 0f                	jne    c001945b <CPU::detectFeatures()+0x30b>
c001944c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019456:	e9 cc 00 00 00       	jmp    c0019527 <CPU::detectFeatures()+0x3d7>
c001945b:	50                   	push   eax
c001945c:	50                   	push   eax
c001945d:	68 1c ba 02 c0       	push   0xc002ba1c
c0019462:	57                   	push   edi
c0019463:	e8 58 74 fe ff       	call   c00008c0 <strcmp>
c0019468:	83 c4 10             	add    esp,0x10
c001946b:	85 c0                	test   eax,eax
c001946d:	75 0f                	jne    c001947e <CPU::detectFeatures()+0x32e>
c001946f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019479:	e9 a9 00 00 00       	jmp    c0019527 <CPU::detectFeatures()+0x3d7>
c001947e:	50                   	push   eax
c001947f:	50                   	push   eax
c0019480:	68 29 ba 02 c0       	push   0xc002ba29
c0019485:	57                   	push   edi
c0019486:	e8 35 74 fe ff       	call   c00008c0 <strcmp>
c001948b:	83 c4 10             	add    esp,0x10
c001948e:	85 c0                	test   eax,eax
c0019490:	75 0f                	jne    c00194a1 <CPU::detectFeatures()+0x351>
c0019492:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001949c:	e9 86 00 00 00       	jmp    c0019527 <CPU::detectFeatures()+0x3d7>
c00194a1:	50                   	push   eax
c00194a2:	50                   	push   eax
c00194a3:	68 36 ba 02 c0       	push   0xc002ba36
c00194a8:	57                   	push   edi
c00194a9:	e8 12 74 fe ff       	call   c00008c0 <strcmp>
c00194ae:	83 c4 10             	add    esp,0x10
c00194b1:	85 c0                	test   eax,eax
c00194b3:	75 0c                	jne    c00194c1 <CPU::detectFeatures()+0x371>
c00194b5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00194bf:	eb 66                	jmp    c0019527 <CPU::detectFeatures()+0x3d7>
c00194c1:	50                   	push   eax
c00194c2:	50                   	push   eax
c00194c3:	68 43 ba 02 c0       	push   0xc002ba43
c00194c8:	57                   	push   edi
c00194c9:	e8 f2 73 fe ff       	call   c00008c0 <strcmp>
c00194ce:	83 c4 10             	add    esp,0x10
c00194d1:	85 c0                	test   eax,eax
c00194d3:	75 0c                	jne    c00194e1 <CPU::detectFeatures()+0x391>
c00194d5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00194df:	eb 46                	jmp    c0019527 <CPU::detectFeatures()+0x3d7>
c00194e1:	50                   	push   eax
c00194e2:	50                   	push   eax
c00194e3:	68 50 ba 02 c0       	push   0xc002ba50
c00194e8:	57                   	push   edi
c00194e9:	e8 d2 73 fe ff       	call   c00008c0 <strcmp>
c00194ee:	83 c4 10             	add    esp,0x10
c00194f1:	85 c0                	test   eax,eax
c00194f3:	74 e0                	je     c00194d5 <CPU::detectFeatures()+0x385>
c00194f5:	50                   	push   eax
c00194f6:	50                   	push   eax
c00194f7:	68 5d ba 02 c0       	push   0xc002ba5d
c00194fc:	57                   	push   edi
c00194fd:	e8 be 73 fe ff       	call   c00008c0 <strcmp>
c0019502:	83 c4 10             	add    esp,0x10
c0019505:	85 c0                	test   eax,eax
c0019507:	74 cc                	je     c00194d5 <CPU::detectFeatures()+0x385>
c0019509:	51                   	push   ecx
c001950a:	51                   	push   ecx
c001950b:	68 6a ba 02 c0       	push   0xc002ba6a
c0019510:	57                   	push   edi
c0019511:	e8 aa 73 fe ff       	call   c00008c0 <strcmp>
c0019516:	83 c4 10             	add    esp,0x10
c0019519:	85 c0                	test   eax,eax
c001951b:	74 b8                	je     c00194d5 <CPU::detectFeatures()+0x385>
c001951d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019527:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001952c:	0f 86 be 00 00 00    	jbe    c00195f0 <CPU::detectFeatures()+0x4a0>
c0019532:	83 ec 0c             	sub    esp,0xc
c0019535:	68 80 00 00 00       	push   0x80
c001953a:	e8 ab f8 ff ff       	call   c0018dea <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001953f:	83 e0 01             	and    eax,0x1
c0019542:	c1 e0 06             	shl    eax,0x6
c0019545:	88 c2                	mov    dl,al
c0019547:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001954d:	83 e0 bf             	and    eax,0xffffffbf
c0019550:	09 d0                	or     eax,edx
c0019552:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019558:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001955f:	e8 86 f8 ff ff       	call   c0018dea <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019564:	83 e0 01             	and    eax,0x1
c0019567:	c1 e0 04             	shl    eax,0x4
c001956a:	88 c2                	mov    dl,al
c001956c:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019572:	83 e0 ef             	and    eax,0xffffffef
c0019575:	09 d0                	or     eax,edx
c0019577:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001957d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019584:	e8 61 f8 ff ff       	call   c0018dea <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019589:	c1 e0 07             	shl    eax,0x7
c001958c:	88 c2                	mov    dl,al
c001958e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019594:	83 e0 7f             	and    eax,0x7f
c0019597:	09 d0                	or     eax,edx
c0019599:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001959f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00195a6:	e8 6d f8 ff ff       	call   c0018e18 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00195ab:	83 e0 01             	and    eax,0x1
c00195ae:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00195b5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00195bb:	83 e0 f7             	and    eax,0xfffffff7
c00195be:	09 d0                	or     eax,edx
c00195c0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00195c6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00195cd:	e8 46 f8 ff ff       	call   c0018e18 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00195d2:	83 c4 10             	add    esp,0x10
c00195d5:	83 e0 01             	and    eax,0x1
c00195d8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00195df:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00195e5:	83 e0 fb             	and    eax,0xfffffffb
c00195e8:	09 d0                	or     eax,edx
c00195ea:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00195f0:	83 ec 0c             	sub    esp,0xc
c00195f3:	56                   	push   esi
c00195f4:	55                   	push   ebp
c00195f5:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00195f9:	57                   	push   edi
c00195fa:	8d 44 24 28          	lea    eax,[esp+0x28]
c00195fe:	50                   	push   eax
c00195ff:	6a 01                	push   0x1
c0019601:	e8 04 f7 ff ff       	call   c0018d0a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019606:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001960a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019610:	88 ca                	mov    dl,cl
c0019612:	83 e0 f0             	and    eax,0xfffffff0
c0019615:	83 e2 0f             	and    edx,0xf
c0019618:	09 d0                	or     eax,edx
c001961a:	88 ca                	mov    dl,cl
c001961c:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019622:	c0 ea 04             	shr    dl,0x4
c0019625:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019629:	0f b6 c2             	movzx  eax,dl
c001962c:	83 c4 20             	add    esp,0x20
c001962f:	c1 e0 06             	shl    eax,0x6
c0019632:	89 c5                	mov    ebp,eax
c0019634:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001963a:	66 25 3f c0          	and    ax,0xc03f
c001963e:	09 e8                	or     eax,ebp
c0019640:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019647:	89 c8                	mov    eax,ecx
c0019649:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001964f:	c1 e8 08             	shr    eax,0x8
c0019652:	83 e2 3f             	and    edx,0x3f
c0019655:	83 e0 0f             	and    eax,0xf
c0019658:	89 c5                	mov    ebp,eax
c001965a:	c1 e5 06             	shl    ebp,0x6
c001965d:	09 d5                	or     ebp,edx
c001965f:	89 ea                	mov    edx,ebp
c0019661:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019667:	88 c2                	mov    dl,al
c0019669:	c0 ea 02             	shr    dl,0x2
c001966c:	89 d5                	mov    ebp,edx
c001966e:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019674:	83 e2 c0             	and    edx,0xffffffc0
c0019677:	09 d5                	or     ebp,edx
c0019679:	89 ea                	mov    edx,ebp
c001967b:	89 cd                	mov    ebp,ecx
c001967d:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019683:	c1 ed 0c             	shr    ebp,0xc
c0019686:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001968c:	83 e5 03             	and    ebp,0x3
c001968f:	83 e2 cf             	and    edx,0xffffffcf
c0019692:	c1 e5 04             	shl    ebp,0x4
c0019695:	09 d5                	or     ebp,edx
c0019697:	3c 06                	cmp    al,0x6
c0019699:	89 ea                	mov    edx,ebp
c001969b:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00196a1:	74 04                	je     c00196a7 <CPU::detectFeatures()+0x557>
c00196a3:	3c 0f                	cmp    al,0xf
c00196a5:	75 5c                	jne    c0019703 <CPU::detectFeatures()+0x5b3>
c00196a7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00196ab:	89 cd                	mov    ebp,ecx
c00196ad:	c1 ed 10             	shr    ebp,0x10
c00196b0:	c1 e5 04             	shl    ebp,0x4
c00196b3:	09 ea                	or     edx,ebp
c00196b5:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00196bb:	0f b6 d2             	movzx  edx,dl
c00196be:	66 81 e5 3f c0       	and    bp,0xc03f
c00196c3:	c1 e2 06             	shl    edx,0x6
c00196c6:	09 ea                	or     edx,ebp
c00196c8:	3c 0f                	cmp    al,0xf
c00196ca:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00196d1:	75 30                	jne    c0019703 <CPU::detectFeatures()+0x5b3>
c00196d3:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00196d9:	c1 e9 14             	shr    ecx,0x14
c00196dc:	83 e0 3f             	and    eax,0x3f
c00196df:	83 c1 0f             	add    ecx,0xf
c00196e2:	88 ca                	mov    dl,cl
c00196e4:	c0 e9 02             	shr    cl,0x2
c00196e7:	c1 e2 06             	shl    edx,0x6
c00196ea:	09 d0                	or     eax,edx
c00196ec:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00196f2:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00196f8:	83 e0 c0             	and    eax,0xffffffc0
c00196fb:	09 c1                	or     ecx,eax
c00196fd:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019703:	83 ec 0c             	sub    esp,0xc
c0019706:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001970d:	56                   	push   esi
c001970e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019712:	50                   	push   eax
c0019713:	57                   	push   edi
c0019714:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019718:	55                   	push   ebp
c0019719:	68 00 00 00 80       	push   0x80000000
c001971e:	e8 e7 f5 ff ff       	call   c0018d0a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019723:	83 c4 20             	add    esp,0x20
c0019726:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001972e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019732:	76 1e                	jbe    c0019752 <CPU::detectFeatures()+0x602>
c0019734:	83 ec 0c             	sub    esp,0xc
c0019737:	56                   	push   esi
c0019738:	50                   	push   eax
c0019739:	57                   	push   edi
c001973a:	55                   	push   ebp
c001973b:	68 01 00 00 80       	push   0x80000001
c0019740:	e8 c5 f5 ff ff       	call   c0018d0a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019745:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001974f:	83 c4 20             	add    esp,0x20
c0019752:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019758:	83 f8 01             	cmp    eax,0x1
c001975b:	75 6f                	jne    c00197cc <CPU::detectFeatures()+0x67c>
c001975d:	51                   	push   ecx
c001975e:	51                   	push   ecx
c001975f:	68 76 ba 02 c0       	push   0xc002ba76
c0019764:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019768:	56                   	push   esi
c0019769:	e8 c6 70 fe ff       	call   c0000834 <strcpy>
c001976e:	5f                   	pop    edi
c001976f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019775:	5d                   	pop    ebp
c0019776:	66 c1 e8 06          	shr    ax,0x6
c001977a:	0f b6 c0             	movzx  eax,al
c001977d:	50                   	push   eax
c001977e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019784:	c1 e8 0e             	shr    eax,0xe
c0019787:	0f b6 c0             	movzx  eax,al
c001978a:	50                   	push   eax
c001978b:	e8 24 f2 ff ff       	call   c00189b4 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019790:	5a                   	pop    edx
c0019791:	59                   	pop    ecx
c0019792:	50                   	push   eax
c0019793:	56                   	push   esi
c0019794:	e8 db 71 fe ff       	call   c0000974 <strcat>
c0019799:	5f                   	pop    edi
c001979a:	5d                   	pop    ebp
c001979b:	56                   	push   esi
c001979c:	53                   	push   ebx
c001979d:	e8 34 ae ff ff       	call   c00145d6 <Device::setName(char const*)>
c00197a2:	58                   	pop    eax
c00197a3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00197a9:	5a                   	pop    edx
c00197aa:	68 7d ba 02 c0       	push   0xc002ba7d
c00197af:	50                   	push   eax
c00197b0:	e8 0b 71 fe ff       	call   c00008c0 <strcmp>
c00197b5:	83 c4 10             	add    esp,0x10
c00197b8:	85 c0                	test   eax,eax
c00197ba:	0f 85 71 03 00 00    	jne    c0019b31 <CPU::detectFeatures()+0x9e1>
c00197c0:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00197c7:	e9 65 03 00 00       	jmp    c0019b31 <CPU::detectFeatures()+0x9e1>
c00197cc:	83 f8 02             	cmp    eax,0x2
c00197cf:	0f 85 b5 00 00 00    	jne    c001988a <CPU::detectFeatures()+0x73a>
c00197d5:	57                   	push   edi
c00197d6:	57                   	push   edi
c00197d7:	68 8f ba 02 c0       	push   0xc002ba8f
c00197dc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00197e0:	56                   	push   esi
c00197e1:	e8 4e 70 fe ff       	call   c0000834 <strcpy>
c00197e6:	5d                   	pop    ebp
c00197e7:	58                   	pop    eax
c00197e8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197ee:	66 c1 e8 06          	shr    ax,0x6
c00197f2:	0f b6 c0             	movzx  eax,al
c00197f5:	50                   	push   eax
c00197f6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197fc:	c1 e8 0e             	shr    eax,0xe
c00197ff:	0f b6 c0             	movzx  eax,al
c0019802:	50                   	push   eax
c0019803:	e8 18 f0 ff ff       	call   c0018820 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019808:	5a                   	pop    edx
c0019809:	59                   	pop    ecx
c001980a:	50                   	push   eax
c001980b:	56                   	push   esi
c001980c:	e8 63 71 fe ff       	call   c0000974 <strcat>
c0019811:	5f                   	pop    edi
c0019812:	5d                   	pop    ebp
c0019813:	56                   	push   esi
c0019814:	53                   	push   ebx
c0019815:	e8 bc ad ff ff       	call   c00145d6 <Device::setName(char const*)>
c001981a:	58                   	pop    eax
c001981b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019821:	5a                   	pop    edx
c0019822:	68 94 ba 02 c0       	push   0xc002ba94
c0019827:	50                   	push   eax
c0019828:	e8 93 70 fe ff       	call   c00008c0 <strcmp>
c001982d:	83 c4 10             	add    esp,0x10
c0019830:	85 c0                	test   eax,eax
c0019832:	75 20                	jne    c0019854 <CPU::detectFeatures()+0x704>
c0019834:	8b 15 48 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e648
c001983a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019840:	a8 01                	test   al,0x1
c0019842:	74 10                	je     c0019854 <CPU::detectFeatures()+0x704>
c0019844:	83 e0 fe             	and    eax,0xfffffffe
c0019847:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001984d:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019854:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001985a:	c1 e8 0e             	shr    eax,0xe
c001985d:	3c 05                	cmp    al,0x5
c001985f:	0f 85 cc 02 00 00    	jne    c0019b31 <CPU::detectFeatures()+0x9e1>
c0019865:	56                   	push   esi
c0019866:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001986c:	83 e0 0f             	and    eax,0xf
c001986f:	50                   	push   eax
c0019870:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019876:	66 c1 e8 06          	shr    ax,0x6
c001987a:	0f b6 c0             	movzx  eax,al
c001987d:	50                   	push   eax
c001987e:	6a 05                	push   0x5
c0019880:	e8 11 f4 ff ff       	call   c0018c96 <CPU::AMD_K6_writeback(int, int, int)>
c0019885:	e9 1f 02 00 00       	jmp    c0019aa9 <CPU::detectFeatures()+0x959>
c001988a:	8d 50 fd             	lea    edx,[eax-0x3]
c001988d:	83 fa 01             	cmp    edx,0x1
c0019890:	76 09                	jbe    c001989b <CPU::detectFeatures()+0x74b>
c0019892:	83 f8 06             	cmp    eax,0x6
c0019895:	0f 85 91 01 00 00    	jne    c0019a2c <CPU::detectFeatures()+0x8dc>
c001989b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198a1:	c1 ea 0e             	shr    edx,0xe
c00198a4:	80 fa 05             	cmp    dl,0x5
c00198a7:	75 7b                	jne    c0019924 <CPU::detectFeatures()+0x7d4>
c00198a9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198af:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00198b4:	66 81 fa 00 01       	cmp    dx,0x100
c00198b9:	75 0c                	jne    c00198c7 <CPU::detectFeatures()+0x777>
c00198bb:	51                   	push   ecx
c00198bc:	51                   	push   ecx
c00198bd:	68 9b ba 02 c0       	push   0xc002ba9b
c00198c2:	e9 dc 01 00 00       	jmp    c0019aa3 <CPU::detectFeatures()+0x953>
c00198c7:	66 81 fa 00 02       	cmp    dx,0x200
c00198cc:	75 0c                	jne    c00198da <CPU::detectFeatures()+0x78a>
c00198ce:	52                   	push   edx
c00198cf:	52                   	push   edx
c00198d0:	68 ae ba 02 c0       	push   0xc002baae
c00198d5:	e9 c9 01 00 00       	jmp    c0019aa3 <CPU::detectFeatures()+0x953>
c00198da:	66 81 fa 40 02       	cmp    dx,0x240
c00198df:	75 0c                	jne    c00198ed <CPU::detectFeatures()+0x79d>
c00198e1:	50                   	push   eax
c00198e2:	50                   	push   eax
c00198e3:	68 c0 ba 02 c0       	push   0xc002bac0
c00198e8:	e9 b6 01 00 00       	jmp    c0019aa3 <CPU::detectFeatures()+0x953>
c00198ed:	83 f8 06             	cmp    eax,0x6
c00198f0:	75 0c                	jne    c00198fe <CPU::detectFeatures()+0x7ae>
c00198f2:	50                   	push   eax
c00198f3:	50                   	push   eax
c00198f4:	68 d2 ba 02 c0       	push   0xc002bad2
c00198f9:	e9 a5 01 00 00       	jmp    c0019aa3 <CPU::detectFeatures()+0x953>
c00198fe:	83 f8 04             	cmp    eax,0x4
c0019901:	75 0c                	jne    c001990f <CPU::detectFeatures()+0x7bf>
c0019903:	50                   	push   eax
c0019904:	50                   	push   eax
c0019905:	68 de ba 02 c0       	push   0xc002bade
c001990a:	e9 94 01 00 00       	jmp    c0019aa3 <CPU::detectFeatures()+0x953>
c001990f:	83 f8 03             	cmp    eax,0x3
c0019912:	0f 85 19 02 00 00    	jne    c0019b31 <CPU::detectFeatures()+0x9e1>
c0019918:	50                   	push   eax
c0019919:	50                   	push   eax
c001991a:	68 e6 ba 02 c0       	push   0xc002bae6
c001991f:	e9 7f 01 00 00       	jmp    c0019aa3 <CPU::detectFeatures()+0x953>
c0019924:	80 fa 06             	cmp    dl,0x6
c0019927:	0f 85 db 00 00 00    	jne    c0019a08 <CPU::detectFeatures()+0x8b8>
c001992d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019933:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019938:	66 81 fa 80 01       	cmp    dx,0x180
c001993d:	75 0c                	jne    c001994b <CPU::detectFeatures()+0x7fb>
c001993f:	50                   	push   eax
c0019940:	50                   	push   eax
c0019941:	68 f1 ba 02 c0       	push   0xc002baf1
c0019946:	e9 58 01 00 00       	jmp    c0019aa3 <CPU::detectFeatures()+0x953>
c001994b:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019951:	66 f7 c1 80 ff       	test   cx,0xff80
c0019956:	75 0c                	jne    c0019964 <CPU::detectFeatures()+0x814>
c0019958:	50                   	push   eax
c0019959:	50                   	push   eax
c001995a:	68 01 bb 02 c0       	push   0xc002bb01
c001995f:	e9 3f 01 00 00       	jmp    c0019aa3 <CPU::detectFeatures()+0x953>
c0019964:	66 81 fa 40 02       	cmp    dx,0x240
c0019969:	75 0c                	jne    c0019977 <CPU::detectFeatures()+0x827>
c001996b:	55                   	push   ebp
c001996c:	55                   	push   ebp
c001996d:	68 08 bb 02 c0       	push   0xc002bb08
c0019972:	e9 2c 01 00 00       	jmp    c0019aa3 <CPU::detectFeatures()+0x953>
c0019977:	66 81 fa 80 02       	cmp    dx,0x280
c001997c:	75 0c                	jne    c001998a <CPU::detectFeatures()+0x83a>
c001997e:	57                   	push   edi
c001997f:	57                   	push   edi
c0019980:	68 11 bb 02 c0       	push   0xc002bb11
c0019985:	e9 19 01 00 00       	jmp    c0019aa3 <CPU::detectFeatures()+0x953>
c001998a:	66 81 fa 40 03       	cmp    dx,0x340
c001998f:	74 ed                	je     c001997e <CPU::detectFeatures()+0x82e>
c0019991:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019996:	75 0c                	jne    c00199a4 <CPU::detectFeatures()+0x854>
c0019998:	56                   	push   esi
c0019999:	56                   	push   esi
c001999a:	68 18 bb 02 c0       	push   0xc002bb18
c001999f:	e9 ff 00 00 00       	jmp    c0019aa3 <CPU::detectFeatures()+0x953>
c00199a4:	83 f8 06             	cmp    eax,0x6
c00199a7:	0f 84 45 ff ff ff    	je     c00198f2 <CPU::detectFeatures()+0x7a2>
c00199ad:	83 f8 04             	cmp    eax,0x4
c00199b0:	0f 84 4d ff ff ff    	je     c0019903 <CPU::detectFeatures()+0x7b3>
c00199b6:	83 f8 03             	cmp    eax,0x3
c00199b9:	0f 85 72 01 00 00    	jne    c0019b31 <CPU::detectFeatures()+0x9e1>
c00199bf:	51                   	push   ecx
c00199c0:	51                   	push   ecx
c00199c1:	68 21 bb 02 c0       	push   0xc002bb21
c00199c6:	53                   	push   ebx
c00199c7:	e8 0a ac ff ff       	call   c00145d6 <Device::setName(char const*)>
c00199cc:	b1 c1                	mov    cl,0xc1
c00199ce:	88 c8                	mov    al,cl
c00199d0:	e6 22                	out    0x22,al
c00199d2:	e4 23                	in     al,0x23
c00199d4:	88 c2                	mov    dl,al
c00199d6:	88 c8                	mov    al,cl
c00199d8:	e6 22                	out    0x22,al
c00199da:	88 d0                	mov    al,dl
c00199dc:	83 c8 10             	or     eax,0x10
c00199df:	e6 23                	out    0x23,al
c00199e1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00199e8:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00199eb:	89 d0                	mov    eax,edx
c00199ed:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00199f3:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00199f7:	40                   	inc    eax
c00199f8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00199fe:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019a03:	e9 a1 00 00 00       	jmp    c0019aa9 <CPU::detectFeatures()+0x959>
c0019a08:	83 f8 06             	cmp    eax,0x6
c0019a0b:	0f 84 e1 fe ff ff    	je     c00198f2 <CPU::detectFeatures()+0x7a2>
c0019a11:	83 f8 04             	cmp    eax,0x4
c0019a14:	0f 84 e9 fe ff ff    	je     c0019903 <CPU::detectFeatures()+0x7b3>
c0019a1a:	83 f8 03             	cmp    eax,0x3
c0019a1d:	0f 85 0e 01 00 00    	jne    c0019b31 <CPU::detectFeatures()+0x9e1>
c0019a23:	52                   	push   edx
c0019a24:	52                   	push   edx
c0019a25:	68 2c bb 02 c0       	push   0xc002bb2c
c0019a2a:	eb 77                	jmp    c0019aa3 <CPU::detectFeatures()+0x953>
c0019a2c:	83 f8 07             	cmp    eax,0x7
c0019a2f:	75 09                	jne    c0019a3a <CPU::detectFeatures()+0x8ea>
c0019a31:	50                   	push   eax
c0019a32:	50                   	push   eax
c0019a33:	68 36 bb 02 c0       	push   0xc002bb36
c0019a38:	eb 69                	jmp    c0019aa3 <CPU::detectFeatures()+0x953>
c0019a3a:	83 f8 0a             	cmp    eax,0xa
c0019a3d:	75 09                	jne    c0019a48 <CPU::detectFeatures()+0x8f8>
c0019a3f:	50                   	push   eax
c0019a40:	50                   	push   eax
c0019a41:	68 41 bb 02 c0       	push   0xc002bb41
c0019a46:	eb 5b                	jmp    c0019aa3 <CPU::detectFeatures()+0x953>
c0019a48:	83 f8 0b             	cmp    eax,0xb
c0019a4b:	75 09                	jne    c0019a56 <CPU::detectFeatures()+0x906>
c0019a4d:	50                   	push   eax
c0019a4e:	50                   	push   eax
c0019a4f:	68 49 bb 02 c0       	push   0xc002bb49
c0019a54:	eb 4d                	jmp    c0019aa3 <CPU::detectFeatures()+0x953>
c0019a56:	83 f8 08             	cmp    eax,0x8
c0019a59:	75 09                	jne    c0019a64 <CPU::detectFeatures()+0x914>
c0019a5b:	50                   	push   eax
c0019a5c:	50                   	push   eax
c0019a5d:	68 52 bb 02 c0       	push   0xc002bb52
c0019a62:	eb 3f                	jmp    c0019aa3 <CPU::detectFeatures()+0x953>
c0019a64:	83 f8 09             	cmp    eax,0x9
c0019a67:	75 09                	jne    c0019a72 <CPU::detectFeatures()+0x922>
c0019a69:	50                   	push   eax
c0019a6a:	50                   	push   eax
c0019a6b:	68 5a bb 02 c0       	push   0xc002bb5a
c0019a70:	eb 31                	jmp    c0019aa3 <CPU::detectFeatures()+0x953>
c0019a72:	83 f8 05             	cmp    eax,0x5
c0019a75:	75 09                	jne    c0019a80 <CPU::detectFeatures()+0x930>
c0019a77:	50                   	push   eax
c0019a78:	50                   	push   eax
c0019a79:	68 62 bb 02 c0       	push   0xc002bb62
c0019a7e:	eb 23                	jmp    c0019aa3 <CPU::detectFeatures()+0x953>
c0019a80:	83 f8 0c             	cmp    eax,0xc
c0019a83:	75 09                	jne    c0019a8e <CPU::detectFeatures()+0x93e>
c0019a85:	55                   	push   ebp
c0019a86:	55                   	push   ebp
c0019a87:	68 70 bb 02 c0       	push   0xc002bb70
c0019a8c:	eb 15                	jmp    c0019aa3 <CPU::detectFeatures()+0x953>
c0019a8e:	83 f8 0d             	cmp    eax,0xd
c0019a91:	75 09                	jne    c0019a9c <CPU::detectFeatures()+0x94c>
c0019a93:	57                   	push   edi
c0019a94:	57                   	push   edi
c0019a95:	68 7b bb 02 c0       	push   0xc002bb7b
c0019a9a:	eb 07                	jmp    c0019aa3 <CPU::detectFeatures()+0x953>
c0019a9c:	56                   	push   esi
c0019a9d:	56                   	push   esi
c0019a9e:	68 8f bb 02 c0       	push   0xc002bb8f
c0019aa3:	53                   	push   ebx
c0019aa4:	e8 2d ab ff ff       	call   c00145d6 <Device::setName(char const*)>
c0019aa9:	83 c4 10             	add    esp,0x10
c0019aac:	e9 80 00 00 00       	jmp    c0019b31 <CPU::detectFeatures()+0x9e1>
c0019ab1:	51                   	push   ecx
c0019ab2:	51                   	push   ecx
c0019ab3:	68 db b9 02 c0       	push   0xc002b9db
c0019ab8:	57                   	push   edi
c0019ab9:	e8 76 6d fe ff       	call   c0000834 <strcpy>
c0019abe:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019ac8:	e8 e1 67 fe ff       	call   c00002ae <is486>
c0019acd:	83 c4 10             	add    esp,0x10
c0019ad0:	85 c0                	test   eax,eax
c0019ad2:	74 2b                	je     c0019aff <CPU::detectFeatures()+0x9af>
c0019ad4:	52                   	push   edx
c0019ad5:	52                   	push   edx
c0019ad6:	68 9b bb 02 c0       	push   0xc002bb9b
c0019adb:	53                   	push   ebx
c0019adc:	e8 f5 aa ff ff       	call   c00145d6 <Device::setName(char const*)>
c0019ae1:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019ae8:	0f 20 c0             	mov    eax,cr0
c0019aeb:	83 e0 14             	and    eax,0x14
c0019aee:	83 c4 10             	add    esp,0x10
c0019af1:	83 f8 04             	cmp    eax,0x4
c0019af4:	75 1f                	jne    c0019b15 <CPU::detectFeatures()+0x9c5>
c0019af6:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019afd:	eb 32                	jmp    c0019b31 <CPU::detectFeatures()+0x9e1>
c0019aff:	50                   	push   eax
c0019b00:	50                   	push   eax
c0019b01:	68 a6 bb 02 c0       	push   0xc002bba6
c0019b06:	53                   	push   ebx
c0019b07:	e8 ca aa ff ff       	call   c00145d6 <Device::setName(char const*)>
c0019b0c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019b13:	eb d3                	jmp    c0019ae8 <CPU::detectFeatures()+0x998>
c0019b15:	e8 6f 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019b1a:	83 e0 01             	and    eax,0x1
c0019b1d:	8d 14 00             	lea    edx,[eax+eax*1]
c0019b20:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019b26:	83 e0 fd             	and    eax,0xfffffffd
c0019b29:	09 d0                	or     eax,edx
c0019b2b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019b31:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019b38:	83 c4 4c             	add    esp,0x4c
c0019b3b:	5b                   	pop    ebx
c0019b3c:	5e                   	pop    esi
c0019b3d:	5f                   	pop    edi
c0019b3e:	5d                   	pop    ebp
c0019b3f:	c3                   	ret    

c0019b40 <CPU::setupSMEP()>:
c0019b40:	0f 20 e0             	mov    eax,cr4
c0019b43:	0d 00 00 10 00       	or     eax,0x100000
c0019b48:	0f 22 e0             	mov    cr4,eax
c0019b4b:	c3                   	ret    

c0019b4c <CPU::setupUMIP()>:
c0019b4c:	0f 20 e0             	mov    eax,cr4
c0019b4f:	80 cc 08             	or     ah,0x8
c0019b52:	0f 22 e0             	mov    cr4,eax
c0019b55:	c3                   	ret    

c0019b56 <CPU::setupTSC()>:
c0019b56:	0f 20 e0             	mov    eax,cr4
c0019b59:	83 c8 04             	or     eax,0x4
c0019b5c:	0f 22 e0             	mov    cr4,eax
c0019b5f:	c3                   	ret    

c0019b60 <CPU::setupLargePages()>:
c0019b60:	0f 20 e0             	mov    eax,cr4
c0019b63:	83 c8 10             	or     eax,0x10
c0019b66:	0f 22 e0             	mov    cr4,eax
c0019b69:	c3                   	ret    

c0019b6a <CPU::setupPAT()>:
c0019b6a:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0019b6f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019b76:	74 2c                	je     c0019ba4 <CPU::setupPAT()+0x3a>
c0019b78:	53                   	push   ebx
c0019b79:	83 ec 10             	sub    esp,0x10
c0019b7c:	68 77 02 00 00       	push   0x277
c0019b81:	50                   	push   eax
c0019b82:	e8 61 52 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019b87:	83 e2 f8             	and    edx,0xfffffff8
c0019b8a:	83 ca 01             	or     edx,0x1
c0019b8d:	52                   	push   edx
c0019b8e:	50                   	push   eax
c0019b8f:	68 77 02 00 00       	push   0x277
c0019b94:	ff 35 48 e6 02 c0    	push   DWORD PTR ds:0xc002e648
c0019b9a:	e8 75 52 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019b9f:	83 c4 28             	add    esp,0x28
c0019ba2:	5b                   	pop    ebx
c0019ba3:	c3                   	ret    
c0019ba4:	c3                   	ret    
c0019ba5:	90                   	nop

c0019ba6 <CPU::setupMTRR()>:
c0019ba6:	c3                   	ret    
c0019ba7:	90                   	nop

c0019ba8 <CPU::setupGlobalPages()>:
c0019ba8:	0f 20 e0             	mov    eax,cr4
c0019bab:	0c 80                	or     al,0x80
c0019bad:	0f 22 e0             	mov    cr4,eax
c0019bb0:	c3                   	ret    
c0019bb1:	90                   	nop

c0019bb2 <CPU::allowUsermodeDataAccess()>:
c0019bb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bb6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019bbd:	74 03                	je     c0019bc2 <CPU::allowUsermodeDataAccess()+0x10>
c0019bbf:	0f 01 cb             	stac   
c0019bc2:	c3                   	ret    
c0019bc3:	90                   	nop

c0019bc4 <CPU::prohibitUsermodeDataAccess()>:
c0019bc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bc8:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019bcf:	74 03                	je     c0019bd4 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019bd1:	0f 01 ca             	clac   
c0019bd4:	c3                   	ret    
c0019bd5:	90                   	nop

c0019bd6 <CPU::setupSMAP()>:
c0019bd6:	0f 20 e0             	mov    eax,cr4
c0019bd9:	0d 00 00 20 00       	or     eax,0x200000
c0019bde:	0f 22 e0             	mov    cr4,eax
c0019be1:	eb e1                	jmp    c0019bc4 <CPU::prohibitUsermodeDataAccess()>
c0019be3:	90                   	nop

c0019be4 <CPU::setupFeatures()>:
c0019be4:	83 ec 0c             	sub    esp,0xc
c0019be7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019beb:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019bf2:	74 07                	je     c0019bfb <CPU::setupFeatures()+0x17>
c0019bf4:	52                   	push   edx
c0019bf5:	e8 46 ff ff ff       	call   c0019b40 <CPU::setupSMEP()>
c0019bfa:	58                   	pop    eax
c0019bfb:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019c02:	74 07                	je     c0019c0b <CPU::setupFeatures()+0x27>
c0019c04:	52                   	push   edx
c0019c05:	e8 cc ff ff ff       	call   c0019bd6 <CPU::setupSMAP()>
c0019c0a:	58                   	pop    eax
c0019c0b:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019c12:	74 07                	je     c0019c1b <CPU::setupFeatures()+0x37>
c0019c14:	52                   	push   edx
c0019c15:	e8 32 ff ff ff       	call   c0019b4c <CPU::setupUMIP()>
c0019c1a:	58                   	pop    eax
c0019c1b:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019c22:	74 07                	je     c0019c2b <CPU::setupFeatures()+0x47>
c0019c24:	52                   	push   edx
c0019c25:	e8 2c ff ff ff       	call   c0019b56 <CPU::setupTSC()>
c0019c2a:	58                   	pop    eax
c0019c2b:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019c32:	74 07                	je     c0019c3b <CPU::setupFeatures()+0x57>
c0019c34:	52                   	push   edx
c0019c35:	e8 26 ff ff ff       	call   c0019b60 <CPU::setupLargePages()>
c0019c3a:	59                   	pop    ecx
c0019c3b:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019c42:	74 07                	je     c0019c4b <CPU::setupFeatures()+0x67>
c0019c44:	52                   	push   edx
c0019c45:	e8 5e ff ff ff       	call   c0019ba8 <CPU::setupGlobalPages()>
c0019c4a:	58                   	pop    eax
c0019c4b:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019c52:	74 0c                	je     c0019c60 <CPU::setupFeatures()+0x7c>
c0019c54:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019c58:	83 c4 0c             	add    esp,0xc
c0019c5b:	e9 0a ff ff ff       	jmp    c0019b6a <CPU::setupPAT()>
c0019c60:	83 c4 0c             	add    esp,0xc
c0019c63:	c3                   	ret    

c0019c64 <CPU::open(int, int, void*)>:
c0019c64:	57                   	push   edi
c0019c65:	56                   	push   esi
c0019c66:	53                   	push   ebx
c0019c67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019c6b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c6f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019c75:	83 ec 0c             	sub    esp,0xc
c0019c78:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019c7e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019c84:	50                   	push   eax
c0019c85:	e8 4a 54 ff ff       	call   c000f0d4 <GDT::setup()>
c0019c8a:	83 c4 0c             	add    esp,0xc
c0019c8d:	6a 00                	push   0x0
c0019c8f:	68 ef be ad de       	push   0xdeadbeef
c0019c94:	57                   	push   edi
c0019c95:	e8 94 78 ff ff       	call   c001152e <TSS::setup(unsigned long, unsigned long)>
c0019c9a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019c9d:	e8 6c 78 ff ff       	call   c001150e <TSS::flush()>
c0019ca2:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019ca8:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cab:	e8 80 56 ff ff       	call   c000f330 <IDT::setup()>
c0019cb0:	b8 00 04 00 00       	mov    eax,0x400
c0019cb5:	0f 23 f8             	mov    db7,eax
c0019cb8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019cc2:	e8 1b 62 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0019cc7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019ccd:	89 30                	mov    DWORD PTR [eax],esi
c0019ccf:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019cd5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019cd8:	58                   	pop    eax
c0019cd9:	5a                   	pop    edx
c0019cda:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ce0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ce4:	e8 83 89 ff ff       	call   c001266c <VAS::setCPUSpecific(unsigned long)>
c0019ce9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cec:	e8 5f f4 ff ff       	call   c0019150 <CPU::detectFeatures()>
c0019cf1:	e8 cf bc ff ff       	call   c00159c5 <setupInterruptController()>
c0019cf6:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019cfc:	a1 60 e6 02 c0       	mov    eax,ds:0xc002e660
c0019d01:	83 e0 10             	and    eax,0x10
c0019d04:	83 f8 01             	cmp    eax,0x1
c0019d07:	19 c0                	sbb    eax,eax
c0019d09:	83 e0 46             	and    eax,0x46
c0019d0c:	83 c0 1e             	add    eax,0x1e
c0019d0f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d12:	e8 bb d1 ff ff       	call   c0016ed2 <setupTimer(int)>
c0019d17:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019d1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d20:	e8 bf fe ff ff       	call   c0019be4 <CPU::setupFeatures()>
c0019d25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d28:	e8 a7 f1 ff ff       	call   c0018ed4 <CPU::displayFeatures()>
c0019d2d:	83 c4 10             	add    esp,0x10
c0019d30:	31 c0                	xor    eax,eax
c0019d32:	5b                   	pop    ebx
c0019d33:	5e                   	pop    esi
c0019d34:	5f                   	pop    edi
c0019d35:	c3                   	ret    

c0019d36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019d36:	57                   	push   edi
c0019d37:	56                   	push   esi
c0019d38:	53                   	push   ebx
c0019d39:	51                   	push   ecx
c0019d3a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019d3e:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019d41:	0f 02 c0             	lar    eax,ax
c0019d44:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019d47:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019d4b:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019d4e:	88 ca                	mov    dl,cl
c0019d50:	c0 ea 06             	shr    dl,0x6
c0019d53:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019d57:	89 ca                	mov    edx,ecx
c0019d59:	66 c1 ea 03          	shr    dx,0x3
c0019d5d:	83 e2 07             	and    edx,0x7
c0019d60:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019d65:	88 17                	mov    BYTE PTR [edi],dl
c0019d67:	0f 84 a6 01 00 00    	je     c0019f13 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019d6d:	83 e1 07             	and    ecx,0x7
c0019d70:	80 f9 04             	cmp    cl,0x4
c0019d73:	0f 84 98 00 00 00    	je     c0019e11 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019d79:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d7e:	0f 95 c0             	setne  al
c0019d81:	80 f9 05             	cmp    cl,0x5
c0019d84:	0f 95 c2             	setne  dl
c0019d87:	08 c2                	or     dl,al
c0019d89:	74 79                	je     c0019e04 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019d8b:	84 c9                	test   cl,cl
c0019d8d:	75 05                	jne    c0019d94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019d8f:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d92:	eb 3c                	jmp    c0019dd0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d94:	80 f9 01             	cmp    cl,0x1
c0019d97:	75 05                	jne    c0019d9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019d99:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d9c:	eb 32                	jmp    c0019dd0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d9e:	80 f9 02             	cmp    cl,0x2
c0019da1:	75 05                	jne    c0019da8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019da3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019da6:	eb 28                	jmp    c0019dd0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019da8:	31 c0                	xor    eax,eax
c0019daa:	80 f9 03             	cmp    cl,0x3
c0019dad:	75 05                	jne    c0019db4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019daf:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019db2:	eb 1c                	jmp    c0019dd0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019db4:	80 f9 05             	cmp    cl,0x5
c0019db7:	75 05                	jne    c0019dbe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019db9:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019dbc:	eb 12                	jmp    c0019dd0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dbe:	80 f9 06             	cmp    cl,0x6
c0019dc1:	75 05                	jne    c0019dc8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019dc3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019dc6:	eb 08                	jmp    c0019dd0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dc8:	80 f9 07             	cmp    cl,0x7
c0019dcb:	75 03                	jne    c0019dd0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dcd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019dd0:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019dd5:	75 10                	jne    c0019de7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019dd7:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019ddb:	b9 03 00 00 00       	mov    ecx,0x3
c0019de0:	01 d0                	add    eax,edx
c0019de2:	e9 37 01 00 00       	jmp    c0019f1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019de7:	b9 02 00 00 00       	mov    ecx,0x2
c0019dec:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019df1:	0f 85 27 01 00 00    	jne    c0019f1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019df7:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019dfa:	b9 06 00 00 00       	mov    ecx,0x6
c0019dff:	e9 1a 01 00 00       	jmp    c0019f1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e04:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019e07:	b9 06 00 00 00       	mov    ecx,0x6
c0019e0c:	e9 0f 01 00 00       	jmp    c0019f20 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e11:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019e14:	88 ca                	mov    dl,cl
c0019e16:	c0 ea 06             	shr    dl,0x6
c0019e19:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019e1d:	89 ca                	mov    edx,ecx
c0019e1f:	66 c1 ea 03          	shr    dx,0x3
c0019e23:	83 e2 07             	and    edx,0x7
c0019e26:	80 e1 07             	and    cl,0x7
c0019e29:	75 05                	jne    c0019e30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019e2b:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019e2e:	eb 4c                	jmp    c0019e7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e30:	80 f9 01             	cmp    cl,0x1
c0019e33:	75 05                	jne    c0019e3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019e35:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019e38:	eb 42                	jmp    c0019e7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e3a:	80 f9 02             	cmp    cl,0x2
c0019e3d:	75 05                	jne    c0019e44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019e3f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019e42:	eb 38                	jmp    c0019e7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e44:	80 f9 03             	cmp    cl,0x3
c0019e47:	75 05                	jne    c0019e4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019e49:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019e4c:	eb 2e                	jmp    c0019e7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e4e:	80 f9 04             	cmp    cl,0x4
c0019e51:	75 12                	jne    c0019e65 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019e53:	f6 c4 60             	test   ah,0x60
c0019e56:	75 08                	jne    c0019e60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019e58:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019e5b:	8d 78 14             	lea    edi,[eax+0x14]
c0019e5e:	eb 1c                	jmp    c0019e7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e60:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019e63:	eb 17                	jmp    c0019e7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e65:	80 f9 05             	cmp    cl,0x5
c0019e68:	75 05                	jne    c0019e6f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019e6a:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019e6d:	eb 0d                	jmp    c0019e7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e6f:	80 f9 06             	cmp    cl,0x6
c0019e72:	75 05                	jne    c0019e79 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019e74:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019e77:	eb 03                	jmp    c0019e7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e79:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019e7c:	84 d2                	test   dl,dl
c0019e7e:	75 05                	jne    c0019e85 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019e80:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019e83:	eb 3c                	jmp    c0019ec1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e85:	80 fa 01             	cmp    dl,0x1
c0019e88:	75 05                	jne    c0019e8f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019e8a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e8d:	eb 32                	jmp    c0019ec1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e8f:	80 fa 02             	cmp    dl,0x2
c0019e92:	75 05                	jne    c0019e99 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019e94:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019e97:	eb 28                	jmp    c0019ec1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e99:	80 fa 03             	cmp    dl,0x3
c0019e9c:	75 05                	jne    c0019ea3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019e9e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019ea1:	eb 1e                	jmp    c0019ec1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ea3:	31 c0                	xor    eax,eax
c0019ea5:	80 fa 04             	cmp    dl,0x4
c0019ea8:	74 17                	je     c0019ec1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eaa:	80 fa 05             	cmp    dl,0x5
c0019ead:	75 05                	jne    c0019eb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019eaf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019eb2:	eb 0d                	jmp    c0019ec1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eb4:	80 fa 06             	cmp    dl,0x6
c0019eb7:	75 05                	jne    c0019ebe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019eb9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019ebc:	eb 03                	jmp    c0019ec1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ebe:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019ec1:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ec6:	0f 94 c2             	sete   dl
c0019ec9:	80 f9 05             	cmp    cl,0x5
c0019ecc:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019ed0:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019ed5:	d3 e0                	shl    eax,cl
c0019ed7:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019edb:	74 0a                	je     c0019ee7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019edd:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ee0:	b9 07 00 00 00       	mov    ecx,0x7
c0019ee5:	eb 37                	jmp    c0019f1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ee7:	01 f8                	add    eax,edi
c0019ee9:	b9 03 00 00 00       	mov    ecx,0x3
c0019eee:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ef3:	74 2b                	je     c0019f20 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ef5:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019efa:	75 0d                	jne    c0019f09 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019efc:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019f00:	01 c8                	add    eax,ecx
c0019f02:	b9 04 00 00 00       	mov    ecx,0x4
c0019f07:	eb 17                	jmp    c0019f20 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f09:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019f0c:	b9 07 00 00 00       	mov    ecx,0x7
c0019f11:	eb 0d                	jmp    c0019f20 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f13:	b9 02 00 00 00       	mov    ecx,0x2
c0019f18:	b2 01                	mov    dl,0x1
c0019f1a:	31 c0                	xor    eax,eax
c0019f1c:	eb 02                	jmp    c0019f20 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f1e:	31 d2                	xor    edx,edx
c0019f20:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019f24:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019f26:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019f2a:	88 11                	mov    BYTE PTR [ecx],dl
c0019f2c:	5a                   	pop    edx
c0019f2d:	5b                   	pop    ebx
c0019f2e:	5e                   	pop    esi
c0019f2f:	5f                   	pop    edi
c0019f30:	c3                   	ret    

c0019f31 <Krnl::smpEntry()>:
c0019f31:	eb fe                	jmp    c0019f31 <Krnl::smpEntry()>

c0019f33 <Krnl::startCPU(int)>:
c0019f33:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0019f38:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019f3f:	0f 84 36 01 00 00    	je     c001a07b <Krnl::startCPU(int)+0x148>
c0019f45:	53                   	push   ebx
c0019f46:	83 ec 08             	sub    esp,0x8
c0019f49:	e8 46 3f 00 00       	call   c001de94 <lockScheduler()>
c0019f4e:	52                   	push   edx
c0019f4f:	52                   	push   edx
c0019f50:	6a 1b                	push   0x1b
c0019f52:	ff 35 48 e6 02 c0    	push   DWORD PTR ds:0xc002e648
c0019f58:	e8 8b 4e ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019f5d:	59                   	pop    ecx
c0019f5e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019f63:	89 c3                	mov    ebx,eax
c0019f65:	58                   	pop    eax
c0019f66:	53                   	push   ebx
c0019f67:	68 e0 bb 02 c0       	push   0xc002bbe0
c0019f6c:	e8 5c 90 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0019f71:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f7f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f89:	c1 e0 18             	shl    eax,0x18
c0019f8c:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019f92:	83 c4 10             	add    esp,0x10
c0019f95:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019f9b:	09 c2                	or     edx,eax
c0019f9d:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019fa3:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019fa9:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019faf:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019fb5:	80 cd c5             	or     ch,0xc5
c0019fb8:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fbe:	f3 90                	pause  
c0019fc0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fc2:	0f ba e1 0c          	bt     ecx,0xc
c0019fc6:	72 f6                	jb     c0019fbe <Krnl::startCPU(int)+0x8b>
c0019fc8:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fce:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fd4:	09 c1                	or     ecx,eax
c0019fd6:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019fdc:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fe2:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019fe8:	80 cd 85             	or     ch,0x85
c0019feb:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019ff1:	f3 90                	pause  
c0019ff3:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019ff5:	0f ba e1 0c          	bt     ecx,0xc
c0019ff9:	72 f6                	jb     c0019ff1 <Krnl::startCPU(int)+0xbe>
c0019ffb:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a005:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a00b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a011:	09 c1                	or     ecx,eax
c001a013:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a019:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a01f:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a025:	81 c9 02 06 00 00    	or     ecx,0x602
c001a02b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a031:	f3 90                	pause  
c001a033:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a035:	0f ba e1 0c          	bt     ecx,0xc
c001a039:	72 f6                	jb     c001a031 <Krnl::startCPU(int)+0xfe>
c001a03b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a045:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a04b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a051:	09 c8                	or     eax,ecx
c001a053:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a059:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a05f:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a064:	0d 02 06 00 00       	or     eax,0x602
c001a069:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a06f:	f3 90                	pause  
c001a071:	8b 02                	mov    eax,DWORD PTR [edx]
c001a073:	0f ba e0 0c          	bt     eax,0xc
c001a077:	72 f6                	jb     c001a06f <Krnl::startCPU(int)+0x13c>
c001a079:	eb fe                	jmp    c001a079 <Krnl::startCPU(int)+0x146>
c001a07b:	c3                   	ret    

c001a07c <Krnl::startCPUs()>:
c001a07c:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001a081:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a087:	88 c2                	mov    dl,al
c001a089:	83 e2 0a             	and    edx,0xa
c001a08c:	80 fa 0a             	cmp    dl,0xa
c001a08f:	75 09                	jne    c001a09a <Krnl::startCPUs()+0x1e>
c001a091:	a8 01                	test   al,0x1
c001a093:	74 05                	je     c001a09a <Krnl::startCPUs()+0x1e>
c001a095:	e9 01 61 fe ff       	jmp    c000019b <prepareTramp>
c001a09a:	c3                   	ret    
c001a09b:	90                   	nop

c001a09c <EnvVarContainer::getEnv(char const*)>:
c001a09c:	57                   	push   edi
c001a09d:	56                   	push   esi
c001a09e:	53                   	push   ebx
c001a09f:	31 db                	xor    ebx,ebx
c001a0a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a0a5:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a0a7:	7e 2b                	jle    c001a0d4 <EnvVarContainer::getEnv(char const*)+0x38>
c001a0a9:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a0b0:	50                   	push   eax
c001a0b1:	50                   	push   eax
c001a0b2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0b5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a0b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a0bc:	e8 ff 67 fe ff       	call   c00008c0 <strcmp>
c001a0c1:	83 c4 10             	add    esp,0x10
c001a0c4:	85 c0                	test   eax,eax
c001a0c6:	75 09                	jne    c001a0d1 <EnvVarContainer::getEnv(char const*)+0x35>
c001a0c8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0cb:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a0cf:	eb 05                	jmp    c001a0d6 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a0d1:	43                   	inc    ebx
c001a0d2:	eb d1                	jmp    c001a0a5 <EnvVarContainer::getEnv(char const*)+0x9>
c001a0d4:	31 c0                	xor    eax,eax
c001a0d6:	5b                   	pop    ebx
c001a0d7:	5e                   	pop    esi
c001a0d8:	5f                   	pop    edi
c001a0d9:	c3                   	ret    

c001a0da <EnvVarContainer::setEnv(char const*, char const*)>:
c001a0da:	57                   	push   edi
c001a0db:	56                   	push   esi
c001a0dc:	53                   	push   ebx
c001a0dd:	83 ec 1c             	sub    esp,0x1c
c001a0e0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a0e4:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a0e8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a0ec:	57                   	push   edi
c001a0ed:	e8 a2 66 fe ff       	call   c0000794 <strlen>
c001a0f2:	40                   	inc    eax
c001a0f3:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0f6:	e8 45 57 ff ff       	call   c000f840 <malloc>
c001a0fb:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a102:	e8 8d 66 fe ff       	call   c0000794 <strlen>
c001a107:	40                   	inc    eax
c001a108:	89 04 24             	mov    DWORD PTR [esp],eax
c001a10b:	e8 30 57 ff ff       	call   c000f840 <malloc>
c001a110:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a113:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a117:	e8 78 66 fe ff       	call   c0000794 <strlen>
c001a11c:	83 c4 0c             	add    esp,0xc
c001a11f:	40                   	inc    eax
c001a120:	50                   	push   eax
c001a121:	6a 00                	push   0x0
c001a123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a127:	e8 4c 66 fe ff       	call   c0000778 <memset>
c001a12c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a12f:	e8 60 66 fe ff       	call   c0000794 <strlen>
c001a134:	83 c4 0c             	add    esp,0xc
c001a137:	40                   	inc    eax
c001a138:	50                   	push   eax
c001a139:	57                   	push   edi
c001a13a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a13e:	e8 01 66 fe ff       	call   c0000744 <memcpy>
c001a143:	89 34 24             	mov    DWORD PTR [esp],esi
c001a146:	e8 49 66 fe ff       	call   c0000794 <strlen>
c001a14b:	83 c4 0c             	add    esp,0xc
c001a14e:	40                   	inc    eax
c001a14f:	50                   	push   eax
c001a150:	6a 00                	push   0x0
c001a152:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a156:	e8 1d 66 fe ff       	call   c0000778 <memset>
c001a15b:	89 34 24             	mov    DWORD PTR [esp],esi
c001a15e:	e8 31 66 fe ff       	call   c0000794 <strlen>
c001a163:	83 c4 0c             	add    esp,0xc
c001a166:	40                   	inc    eax
c001a167:	50                   	push   eax
c001a168:	56                   	push   esi
c001a169:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a16d:	e8 d2 65 fe ff       	call   c0000744 <memcpy>
c001a172:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a174:	40                   	inc    eax
c001a175:	89 03                	mov    DWORD PTR [ebx],eax
c001a177:	c1 e0 03             	shl    eax,0x3
c001a17a:	5a                   	pop    edx
c001a17b:	59                   	pop    ecx
c001a17c:	50                   	push   eax
c001a17d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a180:	e8 a7 56 ff ff       	call   c000f82c <realloc>
c001a185:	83 c4 0c             	add    esp,0xc
c001a188:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a18b:	6a 08                	push   0x8
c001a18d:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a191:	52                   	push   edx
c001a192:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a194:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a198:	50                   	push   eax
c001a199:	e8 a6 65 fe ff       	call   c0000744 <memcpy>
c001a19e:	83 c4 20             	add    esp,0x20
c001a1a1:	5b                   	pop    ebx
c001a1a2:	5e                   	pop    esi
c001a1a3:	5f                   	pop    edi
c001a1a4:	c3                   	ret    
c001a1a5:	90                   	nop

c001a1a6 <EnvVarContainer::deleteEnv(char const*)>:
c001a1a6:	c3                   	ret    
c001a1a7:	90                   	nop

c001a1a8 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a1a8:	55                   	push   ebp
c001a1a9:	57                   	push   edi
c001a1aa:	56                   	push   esi
c001a1ab:	53                   	push   ebx
c001a1ac:	81 ec 38 01 00 00    	sub    esp,0x138
c001a1b2:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a1b9:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a1c0:	68 14 01 00 00       	push   0x114
c001a1c5:	e8 76 56 ff ff       	call   c000f840 <malloc>
c001a1ca:	83 c4 0c             	add    esp,0xc
c001a1cd:	89 c7                	mov    edi,eax
c001a1cf:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a1d2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a1d9:	50                   	push   eax
c001a1da:	e8 47 93 ff ff       	call   c0013526 <File::File(char const*, Process*)>
c001a1df:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a1e2:	e8 11 96 ff ff       	call   c00137f8 <File::exists()>
c001a1e7:	83 c4 10             	add    esp,0x10
c001a1ea:	84 c0                	test   al,al
c001a1ec:	75 31                	jne    c001a21f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a1ee:	51                   	push   ecx
c001a1ef:	51                   	push   ecx
c001a1f0:	6a 12                	push   0x12
c001a1f2:	57                   	push   edi
c001a1f3:	e8 92 93 ff ff       	call   c001358a <File::open(FileOpenMode)>
c001a1f8:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1fa:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a1fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a200:	e8 8f 65 fe ff       	call   c0000794 <strlen>
c001a205:	5a                   	pop    edx
c001a206:	31 d2                	xor    edx,edx
c001a208:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a20c:	51                   	push   ecx
c001a20d:	55                   	push   ebp
c001a20e:	52                   	push   edx
c001a20f:	50                   	push   eax
c001a210:	57                   	push   edi
c001a211:	ff d3                	call   ebx
c001a213:	83 c4 14             	add    esp,0x14
c001a216:	57                   	push   edi
c001a217:	e8 cc 93 ff ff       	call   c00135e8 <File::close()>
c001a21c:	83 c4 10             	add    esp,0x10
c001a21f:	31 db                	xor    ebx,ebx
c001a221:	50                   	push   eax
c001a222:	31 ed                	xor    ebp,ebp
c001a224:	68 00 01 00 00       	push   0x100
c001a229:	6a 00                	push   0x0
c001a22b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a22f:	50                   	push   eax
c001a230:	e8 43 65 fe ff       	call   c0000778 <memset>
c001a235:	58                   	pop    eax
c001a236:	5a                   	pop    edx
c001a237:	6a 01                	push   0x1
c001a239:	57                   	push   edi
c001a23a:	e8 4b 93 ff ff       	call   c001358a <File::open(FileOpenMode)>
c001a23f:	83 c4 10             	add    esp,0x10
c001a242:	83 ec 0c             	sub    esp,0xc
c001a245:	8b 07                	mov    eax,DWORD PTR [edi]
c001a247:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a24b:	51                   	push   ecx
c001a24c:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a250:	52                   	push   edx
c001a251:	6a 00                	push   0x0
c001a253:	6a 01                	push   0x1
c001a255:	57                   	push   edi
c001a256:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a259:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a25d:	83 c4 20             	add    esp,0x20
c001a260:	3c 0d                	cmp    al,0xd
c001a262:	0f 84 12 01 00 00    	je     c001a37a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a268:	85 db                	test   ebx,ebx
c001a26a:	0f 84 fd 00 00 00    	je     c001a36d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a270:	3c 0a                	cmp    al,0xa
c001a272:	74 13                	je     c001a287 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a274:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a279:	74 0c                	je     c001a287 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a27b:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a281:	0f 8e e6 00 00 00    	jle    c001a36d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a287:	83 ec 0c             	sub    esp,0xc
c001a28a:	8d 53 01             	lea    edx,[ebx+0x1]
c001a28d:	29 dd                	sub    ebp,ebx
c001a28f:	52                   	push   edx
c001a290:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a294:	e8 a7 55 ff ff       	call   c000f840 <malloc>
c001a299:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a29c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a2a0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a2a3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a2a7:	e8 94 55 ff ff       	call   c000f840 <malloc>
c001a2ac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a2b0:	83 c4 0c             	add    esp,0xc
c001a2b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a2b7:	52                   	push   edx
c001a2b8:	6a 00                	push   0x0
c001a2ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2be:	e8 b5 64 fe ff       	call   c0000778 <memset>
c001a2c3:	83 c4 0c             	add    esp,0xc
c001a2c6:	53                   	push   ebx
c001a2c7:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a2cb:	55                   	push   ebp
c001a2cc:	01 eb                	add    ebx,ebp
c001a2ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2d2:	e8 6d 64 fe ff       	call   c0000744 <memcpy>
c001a2d7:	83 c4 0c             	add    esp,0xc
c001a2da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a2de:	51                   	push   ecx
c001a2df:	6a 00                	push   0x0
c001a2e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a2e5:	e8 8e 64 fe ff       	call   c0000778 <memset>
c001a2ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a2ed:	e8 a2 64 fe ff       	call   c0000794 <strlen>
c001a2f2:	83 c4 0c             	add    esp,0xc
c001a2f5:	50                   	push   eax
c001a2f6:	53                   	push   ebx
c001a2f7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a2fb:	e8 44 64 fe ff       	call   c0000744 <memcpy>
c001a300:	5b                   	pop    ebx
c001a301:	58                   	pop    eax
c001a302:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a306:	68 f1 bb 02 c0       	push   0xc002bbf1
c001a30b:	e8 bd 8c ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001a310:	8b 06                	mov    eax,DWORD PTR [esi]
c001a312:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a315:	40                   	inc    eax
c001a316:	83 c4 10             	add    esp,0x10
c001a319:	89 06                	mov    DWORD PTR [esi],eax
c001a31b:	85 d2                	test   edx,edx
c001a31d:	75 0c                	jne    c001a32b <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a31f:	83 ec 0c             	sub    esp,0xc
c001a322:	6a 08                	push   0x8
c001a324:	e8 17 55 ff ff       	call   c000f840 <malloc>
c001a329:	eb 0c                	jmp    c001a337 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a32b:	c1 e0 03             	shl    eax,0x3
c001a32e:	51                   	push   ecx
c001a32f:	51                   	push   ecx
c001a330:	50                   	push   eax
c001a331:	52                   	push   edx
c001a332:	e8 f5 54 ff ff       	call   c000f82c <realloc>
c001a337:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a33a:	83 c4 10             	add    esp,0x10
c001a33d:	31 db                	xor    ebx,ebx
c001a33f:	52                   	push   edx
c001a340:	6a 08                	push   0x8
c001a342:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a346:	50                   	push   eax
c001a347:	8b 16                	mov    edx,DWORD PTR [esi]
c001a349:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a34c:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a350:	50                   	push   eax
c001a351:	e8 ee 63 fe ff       	call   c0000744 <memcpy>
c001a356:	83 c4 0c             	add    esp,0xc
c001a359:	68 00 01 00 00       	push   0x100
c001a35e:	6a 00                	push   0x0
c001a360:	55                   	push   ebp
c001a361:	31 ed                	xor    ebp,ebp
c001a363:	e8 10 64 fe ff       	call   c0000778 <memset>
c001a368:	83 c4 10             	add    esp,0x10
c001a36b:	eb 0d                	jmp    c001a37a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a36d:	3c 3d                	cmp    al,0x3d
c001a36f:	74 07                	je     c001a378 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a371:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a375:	45                   	inc    ebp
c001a376:	eb 02                	jmp    c001a37a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a378:	89 eb                	mov    ebx,ebp
c001a37a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a37f:	0f 85 bd fe ff ff    	jne    c001a242 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a385:	50                   	push   eax
c001a386:	50                   	push   eax
c001a387:	ff 36                	push   DWORD PTR [esi]
c001a389:	68 ff bb 02 c0       	push   0xc002bbff
c001a38e:	e8 3a 8c ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001a393:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a399:	5b                   	pop    ebx
c001a39a:	5e                   	pop    esi
c001a39b:	5f                   	pop    edi
c001a39c:	5d                   	pop    ebp
c001a39d:	c3                   	ret    

c001a39e <EnvVarContainer::__loadSystem()>:
c001a39e:	83 ec 10             	sub    esp,0x10
c001a3a1:	68 80 db 02 c0       	push   0xc002db80
c001a3a6:	68 2a bc 02 c0       	push   0xc002bc2a
c001a3ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3af:	e8 f4 fd ff ff       	call   c001a1a8 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a3b4:	83 c4 1c             	add    esp,0x1c
c001a3b7:	c3                   	ret    

c001a3b8 <EnvVarContainer::__loadUser()>:
c001a3b8:	c3                   	ret    
c001a3b9:	90                   	nop

c001a3ba <EnvVarContainer::EnvVarContainer(Process*)>:
c001a3ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3be:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a3c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a3cc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a3cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a3da:	90                   	nop
c001a3db:	c3                   	ret    

c001a3dc <EnvVarContainer::~EnvVarContainer()>:
c001a3dc:	83 ec 0c             	sub    esp,0xc
c001a3df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3e3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a3e6:	85 c0                	test   eax,eax
c001a3e8:	74 1d                	je     c001a407 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3ee:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3f0:	85 c0                	test   eax,eax
c001a3f2:	74 13                	je     c001a407 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a3f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a3fb:	83 ec 0c             	sub    esp,0xc
c001a3fe:	50                   	push   eax
c001a3ff:	e8 4c 54 ff ff       	call   c000f850 <free>
c001a404:	83 c4 10             	add    esp,0x10
c001a407:	90                   	nop
c001a408:	83 c4 0c             	add    esp,0xc
c001a40b:	c3                   	ret    

c001a40c <Krnl::getEnv(Process*, char const*)>:
c001a40c:	53                   	push   ebx
c001a40d:	83 ec 08             	sub    esp,0x8
c001a410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a414:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a418:	39 05 b4 1b 03 c0    	cmp    DWORD PTR ds:0xc0031bb4,eax
c001a41e:	74 04                	je     c001a424 <Krnl::getEnv(Process*, char const*)+0x18>
c001a420:	85 c0                	test   eax,eax
c001a422:	75 0b                	jne    c001a42f <Krnl::getEnv(Process*, char const*)+0x23>
c001a424:	a1 94 11 03 c0       	mov    eax,ds:0xc0031194
c001a429:	85 c0                	test   eax,eax
c001a42b:	75 19                	jne    c001a446 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a42d:	eb 27                	jmp    c001a456 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a42f:	52                   	push   edx
c001a430:	52                   	push   edx
c001a431:	53                   	push   ebx
c001a432:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a438:	e8 5f fc ff ff       	call   c001a09c <EnvVarContainer::getEnv(char const*)>
c001a43d:	83 c4 10             	add    esp,0x10
c001a440:	85 c0                	test   eax,eax
c001a442:	75 28                	jne    c001a46c <Krnl::getEnv(Process*, char const*)+0x60>
c001a444:	eb de                	jmp    c001a424 <Krnl::getEnv(Process*, char const*)+0x18>
c001a446:	52                   	push   edx
c001a447:	52                   	push   edx
c001a448:	53                   	push   ebx
c001a449:	50                   	push   eax
c001a44a:	e8 4d fc ff ff       	call   c001a09c <EnvVarContainer::getEnv(char const*)>
c001a44f:	83 c4 10             	add    esp,0x10
c001a452:	85 c0                	test   eax,eax
c001a454:	75 16                	jne    c001a46c <Krnl::getEnv(Process*, char const*)+0x60>
c001a456:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a45a:	a1 98 11 03 c0       	mov    eax,ds:0xc0031198
c001a45f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a463:	83 c4 08             	add    esp,0x8
c001a466:	5b                   	pop    ebx
c001a467:	e9 30 fc ff ff       	jmp    c001a09c <EnvVarContainer::getEnv(char const*)>
c001a46c:	83 c4 08             	add    esp,0x8
c001a46f:	5b                   	pop    ebx
c001a470:	c3                   	ret    

c001a471 <Krnl::setEnvSystem(char const*, char const*)>:
c001a471:	83 ec 10             	sub    esp,0x10
c001a474:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a478:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a47c:	ff 35 98 11 03 c0    	push   DWORD PTR ds:0xc0031198
c001a482:	e8 53 fc ff ff       	call   c001a0da <EnvVarContainer::setEnv(char const*, char const*)>
c001a487:	83 c4 1c             	add    esp,0x1c
c001a48a:	c3                   	ret    

c001a48b <Krnl::setEnvUser(char const*, char const*)>:
c001a48b:	a1 94 11 03 c0       	mov    eax,ds:0xc0031194
c001a490:	85 c0                	test   eax,eax
c001a492:	74 15                	je     c001a4a9 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a494:	83 ec 10             	sub    esp,0x10
c001a497:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a49b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a49f:	50                   	push   eax
c001a4a0:	e8 35 fc ff ff       	call   c001a0da <EnvVarContainer::setEnv(char const*, char const*)>
c001a4a5:	83 c4 1c             	add    esp,0x1c
c001a4a8:	c3                   	ret    
c001a4a9:	c3                   	ret    

c001a4aa <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a4aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4ae:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a4b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a4b8:	e9 1d fc ff ff       	jmp    c001a0da <EnvVarContainer::setEnv(char const*, char const*)>

c001a4bd <Krnl::deleteEnvSystem(char const*)>:
c001a4bd:	c3                   	ret    

c001a4be <Krnl::deleteEnvUser(char const*)>:
c001a4be:	c3                   	ret    

c001a4bf <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a4bf:	c3                   	ret    

c001a4c0 <Krnl::newProcessEnv(Process*)>:
c001a4c0:	83 ec 28             	sub    esp,0x28
c001a4c3:	6a 0c                	push   0xc
c001a4c5:	e8 76 53 ff ff       	call   c000f840 <malloc>
c001a4ca:	5a                   	pop    edx
c001a4cb:	59                   	pop    ecx
c001a4cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a4d0:	50                   	push   eax
c001a4d1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a4d5:	e8 e0 fe ff ff       	call   c001a3ba <EnvVarContainer::EnvVarContainer(Process*)>
c001a4da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4de:	83 c4 2c             	add    esp,0x2c
c001a4e1:	c3                   	ret    

c001a4e2 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a4e2:	56                   	push   esi
c001a4e3:	53                   	push   ebx
c001a4e4:	83 ec 10             	sub    esp,0x10
c001a4e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4eb:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a4f1:	6a 0c                	push   0xc
c001a4f3:	e8 48 53 ff ff       	call   c000f840 <malloc>
c001a4f8:	89 c3                	mov    ebx,eax
c001a4fa:	58                   	pop    eax
c001a4fb:	5a                   	pop    edx
c001a4fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a500:	53                   	push   ebx
c001a501:	e8 b4 fe ff ff       	call   c001a3ba <EnvVarContainer::EnvVarContainer(Process*)>
c001a506:	8b 06                	mov    eax,DWORD PTR [esi]
c001a508:	89 03                	mov    DWORD PTR [ebx],eax
c001a50a:	c1 e0 03             	shl    eax,0x3
c001a50d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a510:	e8 2b 53 ff ff       	call   c000f840 <malloc>
c001a515:	83 c4 0c             	add    esp,0xc
c001a518:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a51b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a51d:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a524:	52                   	push   edx
c001a525:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a528:	50                   	push   eax
c001a529:	e8 16 62 fe ff       	call   c0000744 <memcpy>
c001a52e:	89 d8                	mov    eax,ebx
c001a530:	83 c4 14             	add    esp,0x14
c001a533:	5b                   	pop    ebx
c001a534:	5e                   	pop    esi
c001a535:	c3                   	ret    

c001a536 <Krnl::loadSystemEnv()>:
c001a536:	53                   	push   ebx
c001a537:	83 ec 14             	sub    esp,0x14
c001a53a:	6a 0c                	push   0xc
c001a53c:	e8 ff 52 ff ff       	call   c000f840 <malloc>
c001a541:	89 c3                	mov    ebx,eax
c001a543:	58                   	pop    eax
c001a544:	5a                   	pop    edx
c001a545:	ff 35 b4 1b 03 c0    	push   DWORD PTR ds:0xc0031bb4
c001a54b:	53                   	push   ebx
c001a54c:	e8 69 fe ff ff       	call   c001a3ba <EnvVarContainer::EnvVarContainer(Process*)>
c001a551:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a554:	89 1d 98 11 03 c0    	mov    DWORD PTR ds:0xc0031198,ebx
c001a55a:	e8 3f fe ff ff       	call   c001a39e <EnvVarContainer::__loadSystem()>
c001a55f:	83 c4 18             	add    esp,0x18
c001a562:	5b                   	pop    ebx
c001a563:	c3                   	ret    

c001a564 <Krnl::loadUserEnv()>:
c001a564:	53                   	push   ebx
c001a565:	83 ec 14             	sub    esp,0x14
c001a568:	6a 0c                	push   0xc
c001a56a:	e8 d1 52 ff ff       	call   c000f840 <malloc>
c001a56f:	89 c3                	mov    ebx,eax
c001a571:	58                   	pop    eax
c001a572:	5a                   	pop    edx
c001a573:	ff 35 b4 1b 03 c0    	push   DWORD PTR ds:0xc0031bb4
c001a579:	53                   	push   ebx
c001a57a:	e8 3b fe ff ff       	call   c001a3ba <EnvVarContainer::EnvVarContainer(Process*)>
c001a57f:	89 1d 94 11 03 c0    	mov    DWORD PTR ds:0xc0031194,ebx
c001a585:	83 c4 18             	add    esp,0x18
c001a588:	5b                   	pop    ebx
c001a589:	c3                   	ret    

c001a58a <Krnl::flushEnv()>:
c001a58a:	c3                   	ret    

c001a58b <Krnl::getProcessTotalEnvCount(Process*)>:
c001a58b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a58f:	8b 15 94 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031194
c001a595:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a59b:	a1 98 11 03 c0       	mov    eax,ds:0xc0031198
c001a5a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5a2:	03 01                	add    eax,DWORD PTR [ecx]
c001a5a4:	85 d2                	test   edx,edx
c001a5a6:	74 02                	je     c001a5aa <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a5a8:	03 02                	add    eax,DWORD PTR [edx]
c001a5aa:	c3                   	ret    

c001a5ab <Krnl::getProcessEnvPair(Process*, int)>:
c001a5ab:	57                   	push   edi
c001a5ac:	8b 0d 94 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031194
c001a5b2:	56                   	push   esi
c001a5b3:	85 c9                	test   ecx,ecx
c001a5b5:	53                   	push   ebx
c001a5b6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a5ba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5be:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a5c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5c8:	8b 02                	mov    eax,DWORD PTR [edx]
c001a5ca:	75 47                	jne    c001a613 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a5cc:	39 c3                	cmp    ebx,eax
c001a5ce:	7c 47                	jl     c001a617 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a5d0:	8b 15 98 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031198
c001a5d6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a5d8:	01 c1                	add    ecx,eax
c001a5da:	39 d9                	cmp    ecx,ebx
c001a5dc:	7e 6c                	jle    c001a64a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a5de:	51                   	push   ecx
c001a5df:	89 d9                	mov    ecx,ebx
c001a5e1:	29 c1                	sub    ecx,eax
c001a5e3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a5e6:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a5ea:	53                   	push   ebx
c001a5eb:	68 4c bc 02 c0       	push   0xc002bc4c
c001a5f0:	e8 d8 89 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001a5f5:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a5fb:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a5fd:	a1 98 11 03 c0       	mov    eax,ds:0xc0031198
c001a602:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a605:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a609:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a60c:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a60f:	89 06                	mov    DWORD PTR [esi],eax
c001a611:	eb 51                	jmp    c001a664 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a613:	39 c3                	cmp    ebx,eax
c001a615:	7d 05                	jge    c001a61c <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a617:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a61a:	eb 20                	jmp    c001a63c <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a61c:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a61e:	8d 14 07             	lea    edx,[edi+eax*1]
c001a621:	39 da                	cmp    edx,ebx
c001a623:	7e 04                	jle    c001a629 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a625:	29 c3                	sub    ebx,eax
c001a627:	eb 10                	jmp    c001a639 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a629:	8b 0d 98 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031198
c001a62f:	03 11                	add    edx,DWORD PTR [ecx]
c001a631:	39 da                	cmp    edx,ebx
c001a633:	7e 15                	jle    c001a64a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a635:	29 c3                	sub    ebx,eax
c001a637:	29 fb                	sub    ebx,edi
c001a639:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a63c:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a640:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a643:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a646:	89 06                	mov    DWORD PTR [esi],eax
c001a648:	eb 1d                	jmp    c001a667 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a64a:	83 ec 0c             	sub    esp,0xc
c001a64d:	68 60 bc 02 c0       	push   0xc002bc60
c001a652:	e8 18 00 00 00       	call   c001a66f <Krnl::panic(char const*)>
c001a657:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a65d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a664:	83 c4 10             	add    esp,0x10
c001a667:	89 f0                	mov    eax,esi
c001a669:	5b                   	pop    ebx
c001a66a:	5e                   	pop    esi
c001a66b:	5f                   	pop    edi
c001a66c:	c2 04 00             	ret    0x4

c001a66f <Krnl::panic(char const*)>:
c001a66f:	55                   	push   ebp
c001a670:	89 e5                	mov    ebp,esp
c001a672:	53                   	push   ebx
c001a673:	83 ec 0c             	sub    esp,0xc
c001a676:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a679:	fa                   	cli    
c001a67a:	c6 05 a4 11 03 c0 01 	mov    BYTE PTR ds:0xc00311a4,0x1
c001a681:	53                   	push   ebx
c001a682:	c6 05 84 d5 02 c0 00 	mov    BYTE PTR ds:0xc002d584,0x0
c001a689:	68 7a bc 02 c0       	push   0xc002bc7a
c001a68e:	e8 3a 89 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001a693:	58                   	pop    eax
c001a694:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a699:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a69f:	e8 cb 66 ff ff       	call   c0010d6f <setActiveTerminal(VgaText*)>
c001a6a4:	83 c4 0c             	add    esp,0xc
c001a6a7:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a6ac:	6a 01                	push   0x1
c001a6ae:	6a 0f                	push   0xf
c001a6b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6b6:	e8 e5 60 ff ff       	call   c00107a0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a6bb:	58                   	pop    eax
c001a6bc:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a6c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6c7:	e8 44 69 ff ff       	call   c0011010 <VgaText::clearScreen()>
c001a6cc:	58                   	pop    eax
c001a6cd:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a6d2:	5a                   	pop    edx
c001a6d3:	68 93 bc 02 c0       	push   0xc002bc93
c001a6d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6de:	e8 ab 6a ff ff       	call   c001118e <VgaText::puts(char const*)>
c001a6e3:	59                   	pop    ecx
c001a6e4:	58                   	pop    eax
c001a6e5:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a6ea:	68 38 bd 02 c0       	push   0xc002bd38
c001a6ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6f5:	e8 94 6a ff ff       	call   c001118e <VgaText::puts(char const*)>
c001a6fa:	58                   	pop    eax
c001a6fb:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a700:	5a                   	pop    edx
c001a701:	68 af bc 02 c0       	push   0xc002bcaf
c001a706:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a70c:	e8 7d 6a ff ff       	call   c001118e <VgaText::puts(char const*)>
c001a711:	59                   	pop    ecx
c001a712:	58                   	pop    eax
c001a713:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a718:	53                   	push   ebx
c001a719:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a71f:	e8 6a 6a ff ff       	call   c001118e <VgaText::puts(char const*)>
c001a724:	58                   	pop    eax
c001a725:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a72a:	5a                   	pop    edx
c001a72b:	68 cf bc 02 c0       	push   0xc002bccf
c001a730:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a736:	e8 53 6a ff ff       	call   c001118e <VgaText::puts(char const*)>
c001a73b:	a1 a0 11 03 c0       	mov    eax,ds:0xc00311a0
c001a740:	83 c4 10             	add    esp,0x10
c001a743:	85 c0                	test   eax,eax
c001a745:	74 02                	je     c001a749 <Krnl::panic(char const*)+0xda>
c001a747:	ff d0                	call   eax
c001a749:	83 ec 0c             	sub    esp,0xc
c001a74c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a74f:	e8 47 30 00 00       	call   c001d79b <Thr::getDriverNameFromAddress(unsigned long)>
c001a754:	83 c4 10             	add    esp,0x10
c001a757:	89 c3                	mov    ebx,eax
c001a759:	85 c0                	test   eax,eax
c001a75b:	0f 84 50 02 00 00    	je     c001a9b1 <Krnl::panic(char const*)+0x342>
c001a761:	83 ec 08             	sub    esp,0x8
c001a764:	8b 15 b4 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bb4
c001a76a:	68 74 bd 02 c0       	push   0xc002bd74
c001a76f:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a775:	e8 14 6a ff ff       	call   c001118e <VgaText::puts(char const*)>
c001a77a:	58                   	pop    eax
c001a77b:	5a                   	pop    edx
c001a77c:	8b 15 b4 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bb4
c001a782:	68 af bc 02 c0       	push   0xc002bcaf
c001a787:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a78d:	e8 fc 69 ff ff       	call   c001118e <VgaText::puts(char const*)>
c001a792:	59                   	pop    ecx
c001a793:	58                   	pop    eax
c001a794:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a799:	53                   	push   ebx
c001a79a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7a0:	e8 e9 69 ff ff       	call   c001118e <VgaText::puts(char const*)>
c001a7a5:	83 c4 10             	add    esp,0x10
c001a7a8:	83 ec 08             	sub    esp,0x8
c001a7ab:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a7b0:	68 ce bc 02 c0       	push   0xc002bcce
c001a7b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7bb:	e8 ce 69 ff ff       	call   c001118e <VgaText::puts(char const*)>
c001a7c0:	58                   	pop    eax
c001a7c1:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a7c6:	5a                   	pop    edx
c001a7c7:	68 cc bd 02 c0       	push   0xc002bdcc
c001a7cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7d2:	e8 b7 69 ff ff       	call   c001118e <VgaText::puts(char const*)>
c001a7d7:	59                   	pop    ecx
c001a7d8:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a7dd:	5b                   	pop    ebx
c001a7de:	68 0c be 02 c0       	push   0xc002be0c
c001a7e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7e9:	e8 a0 69 ff ff       	call   c001118e <VgaText::puts(char const*)>
c001a7ee:	58                   	pop    eax
c001a7ef:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a7f4:	5a                   	pop    edx
c001a7f5:	68 ba bc 02 c0       	push   0xc002bcba
c001a7fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a800:	e8 89 69 ff ff       	call   c001118e <VgaText::puts(char const*)>
c001a805:	59                   	pop    ecx
c001a806:	5b                   	pop    ebx
c001a807:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a80a:	68 d2 bc 02 c0       	push   0xc002bcd2
c001a80f:	e8 b9 87 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001a814:	58                   	pop    eax
c001a815:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a818:	5a                   	pop    edx
c001a819:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a81c:	68 db bc 02 c0       	push   0xc002bcdb
c001a821:	e8 a7 87 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001a826:	59                   	pop    ecx
c001a827:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a82a:	5b                   	pop    ebx
c001a82b:	8b 00                	mov    eax,DWORD PTR [eax]
c001a82d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a830:	68 e4 bc 02 c0       	push   0xc002bce4
c001a835:	e8 93 87 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001a83a:	58                   	pop    eax
c001a83b:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a840:	5a                   	pop    edx
c001a841:	68 50 be 02 c0       	push   0xc002be50
c001a846:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a84c:	e8 3d 69 ff ff       	call   c001118e <VgaText::puts(char const*)>
c001a851:	59                   	pop    ecx
c001a852:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a857:	5b                   	pop    ebx
c001a858:	68 ed bc 02 c0       	push   0xc002bced
c001a85d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a863:	e8 26 69 ff ff       	call   c001118e <VgaText::puts(char const*)>
c001a868:	0f 20 c0             	mov    eax,cr0
c001a86b:	5a                   	pop    edx
c001a86c:	59                   	pop    ecx
c001a86d:	50                   	push   eax
c001a86e:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a873:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a879:	e8 36 69 ff ff       	call   c00111b4 <VgaText::putx(unsigned int)>
c001a87e:	5b                   	pop    ebx
c001a87f:	58                   	pop    eax
c001a880:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a885:	68 f7 bc 02 c0       	push   0xc002bcf7
c001a88a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a890:	e8 f9 68 ff ff       	call   c001118e <VgaText::puts(char const*)>
c001a895:	0f 20 d0             	mov    eax,cr2
c001a898:	5a                   	pop    edx
c001a899:	59                   	pop    ecx
c001a89a:	50                   	push   eax
c001a89b:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a8a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8a6:	e8 09 69 ff ff       	call   c00111b4 <VgaText::putx(unsigned int)>
c001a8ab:	5b                   	pop    ebx
c001a8ac:	58                   	pop    eax
c001a8ad:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a8b2:	68 01 bd 02 c0       	push   0xc002bd01
c001a8b7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8bd:	e8 cc 68 ff ff       	call   c001118e <VgaText::puts(char const*)>
c001a8c2:	0f 20 d8             	mov    eax,cr3
c001a8c5:	5a                   	pop    edx
c001a8c6:	59                   	pop    ecx
c001a8c7:	50                   	push   eax
c001a8c8:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a8cd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8d3:	e8 dc 68 ff ff       	call   c00111b4 <VgaText::putx(unsigned int)>
c001a8d8:	5b                   	pop    ebx
c001a8d9:	58                   	pop    eax
c001a8da:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a8df:	68 14 bd 02 c0       	push   0xc002bd14
c001a8e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8ea:	e8 9f 68 ff ff       	call   c001118e <VgaText::puts(char const*)>
c001a8ef:	0f 20 e0             	mov    eax,cr4
c001a8f2:	5a                   	pop    edx
c001a8f3:	59                   	pop    ecx
c001a8f4:	50                   	push   eax
c001a8f5:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a8fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a900:	e8 af 68 ff ff       	call   c00111b4 <VgaText::putx(unsigned int)>
c001a905:	5b                   	pop    ebx
c001a906:	58                   	pop    eax
c001a907:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a90c:	68 1e bd 02 c0       	push   0xc002bd1e
c001a911:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a917:	e8 72 68 ff ff       	call   c001118e <VgaText::puts(char const*)>
c001a91c:	5a                   	pop    edx
c001a91d:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a922:	59                   	pop    ecx
c001a923:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a929:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a92c:	50                   	push   eax
c001a92d:	e8 82 68 ff ff       	call   c00111b4 <VgaText::putx(unsigned int)>
c001a932:	5b                   	pop    ebx
c001a933:	58                   	pop    eax
c001a934:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a939:	68 35 bd 02 c0       	push   0xc002bd35
c001a93e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a944:	e8 45 68 ff ff       	call   c001118e <VgaText::puts(char const*)>
c001a949:	5a                   	pop    edx
c001a94a:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a94f:	59                   	pop    ecx
c001a950:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a956:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a959:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a95c:	50                   	push   eax
c001a95d:	e8 52 68 ff ff       	call   c00111b4 <VgaText::putx(unsigned int)>
c001a962:	5b                   	pop    ebx
c001a963:	58                   	pop    eax
c001a964:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a969:	68 35 bd 02 c0       	push   0xc002bd35
c001a96e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a974:	e8 15 68 ff ff       	call   c001118e <VgaText::puts(char const*)>
c001a979:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a97e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a981:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a987:	8b 12                	mov    edx,DWORD PTR [edx]
c001a989:	59                   	pop    ecx
c001a98a:	5b                   	pop    ebx
c001a98b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a98e:	50                   	push   eax
c001a98f:	e8 20 68 ff ff       	call   c00111b4 <VgaText::putx(unsigned int)>
c001a994:	83 c4 10             	add    esp,0x10
c001a997:	b2 fe                	mov    dl,0xfe
c001a999:	e4 60                	in     al,0x60
c001a99b:	3c 1c                	cmp    al,0x1c
c001a99d:	74 04                	je     c001a9a3 <Krnl::panic(char const*)+0x334>
c001a99f:	3c 5a                	cmp    al,0x5a
c001a9a1:	75 f6                	jne    c001a999 <Krnl::panic(char const*)+0x32a>
c001a9a3:	e4 64                	in     al,0x64
c001a9a5:	a8 02                	test   al,0x2
c001a9a7:	75 fa                	jne    c001a9a3 <Krnl::panic(char const*)+0x334>
c001a9a9:	88 d0                	mov    al,dl
c001a9ab:	e6 64                	out    0x64,al
c001a9ad:	fa                   	cli    
c001a9ae:	f4                   	hlt    
c001a9af:	eb e8                	jmp    c001a999 <Krnl::panic(char const*)+0x32a>
c001a9b1:	50                   	push   eax
c001a9b2:	50                   	push   eax
c001a9b3:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a9b8:	68 a0 bd 02 c0       	push   0xc002bda0
c001a9bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9c3:	e8 c6 67 ff ff       	call   c001118e <VgaText::puts(char const*)>
c001a9c8:	58                   	pop    eax
c001a9c9:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a9ce:	5a                   	pop    edx
c001a9cf:	68 af bc 02 c0       	push   0xc002bcaf
c001a9d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9da:	e8 af 67 ff ff       	call   c001118e <VgaText::puts(char const*)>
c001a9df:	59                   	pop    ecx
c001a9e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a9e5:	5b                   	pop    ebx
c001a9e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a9e9:	83 c0 0c             	add    eax,0xc
c001a9ec:	50                   	push   eax
c001a9ed:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a9f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9f8:	e8 91 67 ff ff       	call   c001118e <VgaText::puts(char const*)>
c001a9fd:	83 c4 10             	add    esp,0x10
c001aa00:	e9 a3 fd ff ff       	jmp    c001a7a8 <Krnl::panic(char const*)+0x139>

c001aa05 <Net::switchEndian16(unsigned short)>:
c001aa05:	83 ec 04             	sub    esp,0x4
c001aa08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa0c:	66 89 04 24          	mov    WORD PTR [esp],ax
c001aa10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa14:	c1 f8 08             	sar    eax,0x8
c001aa17:	89 c2                	mov    edx,eax
c001aa19:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa1d:	c1 e0 08             	shl    eax,0x8
c001aa20:	09 d0                	or     eax,edx
c001aa22:	83 c4 04             	add    esp,0x4
c001aa25:	c3                   	ret    

c001aa26 <Net::switchEndian32(unsigned int)>:
c001aa26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa2a:	c1 e8 18             	shr    eax,0x18
c001aa2d:	89 c2                	mov    edx,eax
c001aa2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa33:	c1 e0 08             	shl    eax,0x8
c001aa36:	25 00 00 ff 00       	and    eax,0xff0000
c001aa3b:	09 c2                	or     edx,eax
c001aa3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa41:	c1 e8 08             	shr    eax,0x8
c001aa44:	25 00 ff 00 00       	and    eax,0xff00
c001aa49:	09 c2                	or     edx,eax
c001aa4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa4f:	c1 e0 18             	shl    eax,0x18
c001aa52:	09 d0                	or     eax,edx
c001aa54:	c3                   	ret    

c001aa55 <Net::crc32Calc(unsigned char*, int)>:
c001aa55:	83 ec 10             	sub    esp,0x10
c001aa58:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aa5d:	75 07                	jne    c001aa66 <Net::crc32Calc(unsigned char*, int)+0x11>
c001aa5f:	b8 00 00 00 00       	mov    eax,0x0
c001aa64:	eb 7c                	jmp    c001aae2 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa66:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001aa6b:	7f 07                	jg     c001aa74 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aa6d:	b8 00 00 00 00       	mov    eax,0x0
c001aa72:	eb 6e                	jmp    c001aae2 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa74:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aa7c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aa84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa88:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aa8c:	7d 4e                	jge    c001aadc <Net::crc32Calc(unsigned char*, int)+0x87>
c001aa8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aa92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa96:	01 d0                	add    eax,edx
c001aa98:	8a 00                	mov    al,BYTE PTR [eax]
c001aa9a:	0f b6 c0             	movzx  eax,al
c001aa9d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aaa1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aaa9:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aaae:	7f 26                	jg     c001aad6 <Net::crc32Calc(unsigned char*, int)+0x81>
c001aab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aab4:	83 e0 01             	and    eax,0x1
c001aab7:	74 0d                	je     c001aac6 <Net::crc32Calc(unsigned char*, int)+0x71>
c001aab9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aabd:	d1 e8                	shr    eax,1
c001aabf:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aac4:	eb 06                	jmp    c001aacc <Net::crc32Calc(unsigned char*, int)+0x77>
c001aac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaca:	d1 e8                	shr    eax,1
c001aacc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aad0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aad4:	eb d3                	jmp    c001aaa9 <Net::crc32Calc(unsigned char*, int)+0x54>
c001aad6:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aada:	eb a8                	jmp    c001aa84 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aadc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aae0:	f7 d0                	not    eax
c001aae2:	83 c4 10             	add    esp,0x10
c001aae5:	c3                   	ret    

c001aae6 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aae6:	83 ec 1c             	sub    esp,0x1c
c001aae9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aaf1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aaf9:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aafe:	7f 14                	jg     c001ab14 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001ab00:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab04:	8d 50 01             	lea    edx,[eax+0x1]
c001ab07:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab0b:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ab0e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ab12:	eb e5                	jmp    c001aaf9 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001ab14:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab18:	8d 50 01             	lea    edx,[eax+0x1]
c001ab1b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab1f:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ab22:	83 ec 04             	sub    esp,0x4
c001ab25:	6a 06                	push   0x6
c001ab27:	8d 44 24 36          	lea    eax,[esp+0x36]
c001ab2b:	50                   	push   eax
c001ab2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab30:	e8 0f 5c fe ff       	call   c0000744 <memcpy>
c001ab35:	83 c4 10             	add    esp,0x10
c001ab38:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab3d:	83 ec 04             	sub    esp,0x4
c001ab40:	6a 06                	push   0x6
c001ab42:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ab46:	50                   	push   eax
c001ab47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab4b:	e8 f4 5b fe ff       	call   c0000744 <memcpy>
c001ab50:	83 c4 10             	add    esp,0x10
c001ab53:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab58:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab5c:	0f b7 c0             	movzx  eax,ax
c001ab5f:	c1 f8 08             	sar    eax,0x8
c001ab62:	89 c1                	mov    ecx,eax
c001ab64:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab68:	8d 50 01             	lea    edx,[eax+0x1]
c001ab6b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab6f:	88 ca                	mov    dl,cl
c001ab71:	88 10                	mov    BYTE PTR [eax],dl
c001ab73:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ab77:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab7b:	8d 48 01             	lea    ecx,[eax+0x1]
c001ab7e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ab82:	88 10                	mov    BYTE PTR [eax],dl
c001ab84:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ab88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab8c:	83 ec 04             	sub    esp,0x4
c001ab8f:	52                   	push   edx
c001ab90:	50                   	push   eax
c001ab91:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab95:	e8 aa 5b fe ff       	call   c0000744 <memcpy>
c001ab9a:	83 c4 10             	add    esp,0x10
c001ab9d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aba1:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001aba5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aba9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001abad:	83 ec 08             	sub    esp,0x8
c001abb0:	50                   	push   eax
c001abb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001abb5:	e8 9b fe ff ff       	call   c001aa55 <Net::crc32Calc(unsigned char*, int)>
c001abba:	83 c4 10             	add    esp,0x10
c001abbd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001abc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abc5:	c1 e8 18             	shr    eax,0x18
c001abc8:	89 c1                	mov    ecx,eax
c001abca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abce:	8d 50 01             	lea    edx,[eax+0x1]
c001abd1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abd5:	88 ca                	mov    dl,cl
c001abd7:	88 10                	mov    BYTE PTR [eax],dl
c001abd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abdd:	c1 e8 10             	shr    eax,0x10
c001abe0:	89 c1                	mov    ecx,eax
c001abe2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abe6:	8d 50 01             	lea    edx,[eax+0x1]
c001abe9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abed:	88 ca                	mov    dl,cl
c001abef:	88 10                	mov    BYTE PTR [eax],dl
c001abf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abf5:	c1 e8 08             	shr    eax,0x8
c001abf8:	89 c1                	mov    ecx,eax
c001abfa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abfe:	8d 50 01             	lea    edx,[eax+0x1]
c001ac01:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac05:	88 ca                	mov    dl,cl
c001ac07:	88 10                	mov    BYTE PTR [eax],dl
c001ac09:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac0d:	8d 50 01             	lea    edx,[eax+0x1]
c001ac10:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac14:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac18:	88 10                	mov    BYTE PTR [eax],dl
c001ac1a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac1e:	83 c4 1c             	add    esp,0x1c
c001ac21:	c3                   	ret    

c001ac22 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ac22:	83 ec 2c             	sub    esp,0x2c
c001ac25:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac29:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac2d:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ac32:	83 ec 04             	sub    esp,0x4
c001ac35:	6a 06                	push   0x6
c001ac37:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac3b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac3f:	83 c0 0e             	add    eax,0xe
c001ac42:	50                   	push   eax
c001ac43:	e8 fc 5a fe ff       	call   c0000744 <memcpy>
c001ac48:	83 c4 10             	add    esp,0x10
c001ac4b:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac50:	83 ec 04             	sub    esp,0x4
c001ac53:	6a 06                	push   0x6
c001ac55:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac59:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac5d:	83 c0 08             	add    eax,0x8
c001ac60:	50                   	push   eax
c001ac61:	e8 de 5a fe ff       	call   c0000744 <memcpy>
c001ac66:	83 c4 10             	add    esp,0x10
c001ac69:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac6e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac72:	8d 50 01             	lea    edx,[eax+0x1]
c001ac75:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac79:	8a 00                	mov    al,BYTE PTR [eax]
c001ac7b:	0f b6 c0             	movzx  eax,al
c001ac7e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ac83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac87:	8d 50 01             	lea    edx,[eax+0x1]
c001ac8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac8e:	8a 00                	mov    al,BYTE PTR [eax]
c001ac90:	0f b6 c0             	movzx  eax,al
c001ac93:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ac98:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ac9d:	c1 e0 08             	shl    eax,0x8
c001aca0:	89 c2                	mov    edx,eax
c001aca2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aca6:	09 d0                	or     eax,edx
c001aca8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001acac:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001acb0:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001acb5:	75 3a                	jne    c001acf1 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001acb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acbb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001acbe:	66 3d dc 05          	cmp    ax,0x5dc
c001acc2:	77 10                	ja     c001acd4 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001acc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acc8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001accb:	0f b7 c0             	movzx  eax,ax
c001acce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001acd2:	eb 1d                	jmp    c001acf1 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001acd4:	83 ec 0c             	sub    esp,0xc
c001acd7:	68 78 be 02 c0       	push   0xc002be78
c001acdc:	e8 ec 82 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001ace1:	83 c4 10             	add    esp,0x10
c001ace4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ace8:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001acec:	e9 c0 00 00 00       	jmp    c001adb1 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001acf1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001acf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acf9:	8b 00                	mov    eax,DWORD PTR [eax]
c001acfb:	83 ec 04             	sub    esp,0x4
c001acfe:	52                   	push   edx
c001acff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ad03:	50                   	push   eax
c001ad04:	e8 3b 5a fe ff       	call   c0000744 <memcpy>
c001ad09:	83 c4 10             	add    esp,0x10
c001ad0c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad10:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ad14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad18:	8d 50 01             	lea    edx,[eax+0x1]
c001ad1b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad1f:	8a 00                	mov    al,BYTE PTR [eax]
c001ad21:	0f b6 c0             	movzx  eax,al
c001ad24:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ad28:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad2c:	8d 50 01             	lea    edx,[eax+0x1]
c001ad2f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad33:	8a 00                	mov    al,BYTE PTR [eax]
c001ad35:	0f b6 c0             	movzx  eax,al
c001ad38:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad3c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad40:	8d 50 01             	lea    edx,[eax+0x1]
c001ad43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad47:	8a 00                	mov    al,BYTE PTR [eax]
c001ad49:	0f b6 c0             	movzx  eax,al
c001ad4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad54:	8d 50 01             	lea    edx,[eax+0x1]
c001ad57:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad5b:	8a 00                	mov    al,BYTE PTR [eax]
c001ad5d:	0f b6 c0             	movzx  eax,al
c001ad60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad68:	c1 e0 18             	shl    eax,0x18
c001ad6b:	89 c2                	mov    edx,eax
c001ad6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad71:	c1 e0 10             	shl    eax,0x10
c001ad74:	09 c2                	or     edx,eax
c001ad76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad7a:	c1 e0 08             	shl    eax,0x8
c001ad7d:	09 d0                	or     eax,edx
c001ad7f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ad83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad87:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad8b:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ad8f:	83 e8 04             	sub    eax,0x4
c001ad92:	83 ec 08             	sub    esp,0x8
c001ad95:	50                   	push   eax
c001ad96:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ad9a:	e8 b6 fc ff ff       	call   c001aa55 <Net::crc32Calc(unsigned char*, int)>
c001ad9f:	83 c4 10             	add    esp,0x10
c001ada2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ada6:	0f 94 c2             	sete   dl
c001ada9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001adad:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001adb0:	90                   	nop
c001adb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001adb5:	83 c4 2c             	add    esp,0x2c
c001adb8:	c2 04 00             	ret    0x4

c001adbb <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001adbb:	55                   	push   ebp
c001adbc:	57                   	push   edi
c001adbd:	56                   	push   esi
c001adbe:	53                   	push   ebx
c001adbf:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001adc5:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001adcc:	8a 1e                	mov    bl,BYTE PTR [esi]
c001adce:	8d 6e 01             	lea    ebp,[esi+0x1]
c001add1:	80 fb 40             	cmp    bl,0x40
c001add4:	75 1b                	jne    c001adf1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001add6:	8a 16                	mov    dl,BYTE PTR [esi]
c001add8:	84 d2                	test   dl,dl
c001adda:	0f 84 f1 00 00 00    	je     c001aed1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ade0:	8d 46 01             	lea    eax,[esi+0x1]
c001ade3:	80 fa 3a             	cmp    dl,0x3a
c001ade6:	74 04                	je     c001adec <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ade8:	89 c6                	mov    esi,eax
c001adea:	eb ea                	jmp    c001add6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001adec:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001adef:	89 c6                	mov    esi,eax
c001adf1:	50                   	push   eax
c001adf2:	6a 40                	push   0x40
c001adf4:	6a 00                	push   0x0
c001adf6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001adfa:	50                   	push   eax
c001adfb:	e8 78 59 fe ff       	call   c0000778 <memset>
c001ae00:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ae07:	31 c0                	xor    eax,eax
c001ae09:	83 c4 10             	add    esp,0x10
c001ae0c:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ae0e:	84 c9                	test   cl,cl
c001ae10:	0f 84 bb 00 00 00    	je     c001aed1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae16:	3d c7 00 00 00       	cmp    eax,0xc7
c001ae1b:	0f 8f b0 00 00 00    	jg     c001aed1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae21:	80 f9 0a             	cmp    cl,0xa
c001ae24:	0f 85 98 00 00 00    	jne    c001aec2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ae2a:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ae2f:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ae33:	a8 df                	test   al,0xdf
c001ae35:	0f 94 c1             	sete   cl
c001ae38:	3c 23                	cmp    al,0x23
c001ae3a:	0f 94 c2             	sete   dl
c001ae3d:	08 d1                	or     cl,dl
c001ae3f:	75 4a                	jne    c001ae8b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae41:	8d 50 f7             	lea    edx,[eax-0x9]
c001ae44:	80 fa 01             	cmp    dl,0x1
c001ae47:	76 42                	jbe    c001ae8b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae49:	3c 5b                	cmp    al,0x5b
c001ae4b:	75 42                	jne    c001ae8f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ae4d:	80 fb 40             	cmp    bl,0x40
c001ae50:	75 39                	jne    c001ae8b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae52:	83 ec 0c             	sub    esp,0xc
c001ae55:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ae59:	52                   	push   edx
c001ae5a:	e8 35 59 fe ff       	call   c0000794 <strlen>
c001ae5f:	83 c4 10             	add    esp,0x10
c001ae62:	83 f8 3f             	cmp    eax,0x3f
c001ae65:	77 6a                	ja     c001aed1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae67:	50                   	push   eax
c001ae68:	50                   	push   eax
c001ae69:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ae6d:	52                   	push   edx
c001ae6e:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae72:	52                   	push   edx
c001ae73:	e8 bc 59 fe ff       	call   c0000834 <strcpy>
c001ae78:	58                   	pop    eax
c001ae79:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae7d:	52                   	push   edx
c001ae7e:	e8 11 59 fe ff       	call   c0000794 <strlen>
c001ae83:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ae88:	83 c4 10             	add    esp,0x10
c001ae8b:	31 d2                	xor    edx,edx
c001ae8d:	eb 3a                	jmp    c001aec9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ae8f:	80 fb 40             	cmp    bl,0x40
c001ae92:	74 06                	je     c001ae9a <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ae94:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ae98:	eb 20                	jmp    c001aeba <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ae9a:	50                   	push   eax
c001ae9b:	50                   	push   eax
c001ae9c:	55                   	push   ebp
c001ae9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aea1:	50                   	push   eax
c001aea2:	e8 19 5a fe ff       	call   c00008c0 <strcmp>
c001aea7:	83 c4 10             	add    esp,0x10
c001aeaa:	85 c0                	test   eax,eax
c001aeac:	75 dd                	jne    c001ae8b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aeae:	eb e4                	jmp    c001ae94 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001aeb0:	8d 50 01             	lea    edx,[eax+0x1]
c001aeb3:	80 f9 3d             	cmp    cl,0x3d
c001aeb6:	74 1d                	je     c001aed5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001aeb8:	89 d0                	mov    eax,edx
c001aeba:	8a 08                	mov    cl,BYTE PTR [eax]
c001aebc:	84 c9                	test   cl,cl
c001aebe:	75 f0                	jne    c001aeb0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001aec0:	eb 0f                	jmp    c001aed1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aec2:	8d 50 01             	lea    edx,[eax+0x1]
c001aec5:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001aec9:	47                   	inc    edi
c001aeca:	89 d0                	mov    eax,edx
c001aecc:	e9 3b ff ff ff       	jmp    c001ae0c <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001aed1:	31 c0                	xor    eax,eax
c001aed3:	eb 33                	jmp    c001af08 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001aed5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aed9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001aedc:	50                   	push   eax
c001aedd:	50                   	push   eax
c001aede:	8d 44 24 60          	lea    eax,[esp+0x60]
c001aee2:	50                   	push   eax
c001aee3:	56                   	push   esi
c001aee4:	e8 d7 59 fe ff       	call   c00008c0 <strcmp>
c001aee9:	83 c4 10             	add    esp,0x10
c001aeec:	85 c0                	test   eax,eax
c001aeee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aef2:	75 97                	jne    c001ae8b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aef4:	51                   	push   ecx
c001aef5:	51                   	push   ecx
c001aef6:	52                   	push   edx
c001aef7:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001aefe:	e8 31 59 fe ff       	call   c0000834 <strcpy>
c001af03:	83 c4 10             	add    esp,0x10
c001af06:	b0 01                	mov    al,0x1
c001af08:	81 c4 2c 01 00 00    	add    esp,0x12c
c001af0e:	5b                   	pop    ebx
c001af0f:	5e                   	pop    esi
c001af10:	5f                   	pop    edi
c001af11:	5d                   	pop    ebp
c001af12:	c3                   	ret    

c001af13 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001af13:	57                   	push   edi
c001af14:	56                   	push   esi
c001af15:	53                   	push   ebx
c001af16:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001af1c:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001af23:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001af2a:	53                   	push   ebx
c001af2b:	e8 64 58 fe ff       	call   c0000794 <strlen>
c001af30:	89 34 24             	mov    DWORD PTR [esp],esi
c001af33:	89 c7                	mov    edi,eax
c001af35:	e8 5a 58 fe ff       	call   c0000794 <strlen>
c001af3a:	83 c4 10             	add    esp,0x10
c001af3d:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001af41:	3d ff 00 00 00       	cmp    eax,0xff
c001af46:	0f 87 d3 00 00 00    	ja     c001b01f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af4c:	57                   	push   edi
c001af4d:	57                   	push   edi
c001af4e:	56                   	push   esi
c001af4f:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001af53:	56                   	push   esi
c001af54:	e8 db 58 fe ff       	call   c0000834 <strcpy>
c001af59:	58                   	pop    eax
c001af5a:	5a                   	pop    edx
c001af5b:	68 34 c4 02 c0       	push   0xc002c434
c001af60:	56                   	push   esi
c001af61:	e8 0e 5a fe ff       	call   c0000974 <strcat>
c001af66:	59                   	pop    ecx
c001af67:	5f                   	pop    edi
c001af68:	53                   	push   ebx
c001af69:	56                   	push   esi
c001af6a:	e8 05 5a fe ff       	call   c0000974 <strcat>
c001af6f:	58                   	pop    eax
c001af70:	5a                   	pop    edx
c001af71:	68 c4 be 02 c0       	push   0xc002bec4
c001af76:	56                   	push   esi
c001af77:	e8 f8 59 fe ff       	call   c0000974 <strcat>
c001af7c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001af83:	e8 b8 48 ff ff       	call   c000f840 <malloc>
c001af88:	83 c4 0c             	add    esp,0xc
c001af8b:	89 c3                	mov    ebx,eax
c001af8d:	ff 35 b4 1b 03 c0    	push   DWORD PTR ds:0xc0031bb4
c001af93:	56                   	push   esi
c001af94:	50                   	push   eax
c001af95:	e8 8c 85 ff ff       	call   c0013526 <File::File(char const*, Process*)>
c001af9a:	83 c4 10             	add    esp,0x10
c001af9d:	85 db                	test   ebx,ebx
c001af9f:	74 7e                	je     c001b01f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001afa1:	51                   	push   ecx
c001afa2:	51                   	push   ecx
c001afa3:	6a 01                	push   0x1
c001afa5:	53                   	push   ebx
c001afa6:	e8 df 85 ff ff       	call   c001358a <File::open(FileOpenMode)>
c001afab:	83 c4 10             	add    esp,0x10
c001afae:	85 c0                	test   eax,eax
c001afb0:	74 08                	je     c001afba <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001afb2:	83 ec 0c             	sub    esp,0xc
c001afb5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afb7:	53                   	push   ebx
c001afb8:	eb 5f                	jmp    c001b019 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001afba:	52                   	push   edx
c001afbb:	8d 44 24 17          	lea    eax,[esp+0x17]
c001afbf:	50                   	push   eax
c001afc0:	8d 44 24 20          	lea    eax,[esp+0x20]
c001afc4:	50                   	push   eax
c001afc5:	53                   	push   ebx
c001afc6:	e8 6b 88 ff ff       	call   c0013836 <File::stat(unsigned long long*, bool*)>
c001afcb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001afcf:	83 c4 10             	add    esp,0x10
c001afd2:	89 c1                	mov    ecx,eax
c001afd4:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001afd8:	74 31                	je     c001b00b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001afda:	83 ec 0c             	sub    esp,0xc
c001afdd:	50                   	push   eax
c001afde:	e8 5d 48 ff ff       	call   c000f840 <malloc>
c001afe3:	89 c6                	mov    esi,eax
c001afe5:	58                   	pop    eax
c001afe6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afe8:	8d 54 24 20          	lea    edx,[esp+0x20]
c001afec:	52                   	push   edx
c001afed:	56                   	push   esi
c001afee:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aff2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aff6:	53                   	push   ebx
c001aff7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001affa:	83 c4 20             	add    esp,0x20
c001affd:	85 c0                	test   eax,eax
c001afff:	75 0a                	jne    c001b00b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b001:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b005:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b009:	74 18                	je     c001b023 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b00b:	83 ec 0c             	sub    esp,0xc
c001b00e:	53                   	push   ebx
c001b00f:	e8 d4 85 ff ff       	call   c00135e8 <File::close()>
c001b014:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b016:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b019:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b01c:	83 c4 10             	add    esp,0x10
c001b01f:	31 c0                	xor    eax,eax
c001b021:	eb 3b                	jmp    c001b05e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b023:	83 ec 0c             	sub    esp,0xc
c001b026:	53                   	push   ebx
c001b027:	e8 bc 85 ff ff       	call   c00135e8 <File::close()>
c001b02c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b02e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b031:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b034:	83 c4 0c             	add    esp,0xc
c001b037:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b03e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b045:	56                   	push   esi
c001b046:	e8 70 fd ff ff       	call   c001adbb <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b04b:	89 34 24             	mov    DWORD PTR [esp],esi
c001b04e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b052:	e8 f9 47 ff ff       	call   c000f850 <free>
c001b057:	83 c4 10             	add    esp,0x10
c001b05a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b05e:	81 c4 20 01 00 00    	add    esp,0x120
c001b064:	5b                   	pop    ebx
c001b065:	5e                   	pop    esi
c001b066:	5f                   	pop    edi
c001b067:	c3                   	ret    

c001b068 <Reg::getLine(char*, char*, char*)>:
c001b068:	57                   	push   edi
c001b069:	56                   	push   esi
c001b06a:	53                   	push   ebx
c001b06b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b06f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b073:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b077:	57                   	push   edi
c001b078:	56                   	push   esi
c001b079:	53                   	push   ebx
c001b07a:	68 c9 be 02 c0       	push   0xc002bec9
c001b07f:	e8 8f fe ff ff       	call   c001af13 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b084:	83 c4 10             	add    esp,0x10
c001b087:	84 c0                	test   al,al
c001b089:	75 10                	jne    c001b09b <Reg::getLine(char*, char*, char*)+0x33>
c001b08b:	57                   	push   edi
c001b08c:	56                   	push   esi
c001b08d:	53                   	push   ebx
c001b08e:	68 ee be 02 c0       	push   0xc002beee
c001b093:	e8 7b fe ff ff       	call   c001af13 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b098:	83 c4 10             	add    esp,0x10
c001b09b:	5b                   	pop    ebx
c001b09c:	5e                   	pop    esi
c001b09d:	5f                   	pop    edi
c001b09e:	c3                   	ret    

c001b09f <Reg::readInt(char*, char*, int*)>:
c001b09f:	55                   	push   ebp
c001b0a0:	57                   	push   edi
c001b0a1:	56                   	push   esi
c001b0a2:	53                   	push   ebx
c001b0a3:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b0a9:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b0ad:	57                   	push   edi
c001b0ae:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b0b5:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b0bc:	e8 a7 ff ff ff       	call   c001b068 <Reg::getLine(char*, char*, char*)>
c001b0c1:	83 c4 10             	add    esp,0x10
c001b0c4:	84 c0                	test   al,al
c001b0c6:	0f 84 b3 00 00 00    	je     c001b17f <Reg::readInt(char*, char*, int*)+0xe0>
c001b0cc:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b0d0:	80 fa 2b             	cmp    dl,0x2b
c001b0d3:	74 0c                	je     c001b0e1 <Reg::readInt(char*, char*, int*)+0x42>
c001b0d5:	80 fa 2d             	cmp    dl,0x2d
c001b0d8:	75 0e                	jne    c001b0e8 <Reg::readInt(char*, char*, int*)+0x49>
c001b0da:	ba 01 00 00 00       	mov    edx,0x1
c001b0df:	eb 0b                	jmp    c001b0ec <Reg::readInt(char*, char*, int*)+0x4d>
c001b0e1:	ba 01 00 00 00       	mov    edx,0x1
c001b0e6:	eb 02                	jmp    c001b0ea <Reg::readInt(char*, char*, int*)+0x4b>
c001b0e8:	31 d2                	xor    edx,edx
c001b0ea:	31 c0                	xor    eax,eax
c001b0ec:	be 0a 00 00 00       	mov    esi,0xa
c001b0f1:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b0f6:	75 20                	jne    c001b118 <Reg::readInt(char*, char*, int*)+0x79>
c001b0f8:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b0fc:	80 f9 78             	cmp    cl,0x78
c001b0ff:	75 0a                	jne    c001b10b <Reg::readInt(char*, char*, int*)+0x6c>
c001b101:	83 c2 02             	add    edx,0x2
c001b104:	be 10 00 00 00       	mov    esi,0x10
c001b109:	eb 0d                	jmp    c001b118 <Reg::readInt(char*, char*, int*)+0x79>
c001b10b:	80 f9 62             	cmp    cl,0x62
c001b10e:	75 08                	jne    c001b118 <Reg::readInt(char*, char*, int*)+0x79>
c001b110:	83 c2 02             	add    edx,0x2
c001b113:	be 02 00 00 00       	mov    esi,0x2
c001b118:	01 d7                	add    edi,edx
c001b11a:	31 d2                	xor    edx,edx
c001b11c:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b11e:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b122:	80 fb 0d             	cmp    bl,0xd
c001b125:	0f 94 c3             	sete   bl
c001b128:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b12d:	0f 94 c1             	sete   cl
c001b130:	08 cb                	or     bl,cl
c001b132:	75 3a                	jne    c001b16e <Reg::readInt(char*, char*, int*)+0xcf>
c001b134:	0f af d6             	imul   edx,esi
c001b137:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b13c:	83 fe 10             	cmp    esi,0x10
c001b13f:	75 26                	jne    c001b167 <Reg::readInt(char*, char*, int*)+0xc8>
c001b141:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b145:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b148:	89 e9                	mov    ecx,ebp
c001b14a:	80 f9 05             	cmp    cl,0x5
c001b14d:	77 06                	ja     c001b155 <Reg::readInt(char*, char*, int*)+0xb6>
c001b14f:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b153:	eb 16                	jmp    c001b16b <Reg::readInt(char*, char*, int*)+0xcc>
c001b155:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b159:	83 e9 61             	sub    ecx,0x61
c001b15c:	80 f9 05             	cmp    cl,0x5
c001b15f:	77 06                	ja     c001b167 <Reg::readInt(char*, char*, int*)+0xc8>
c001b161:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b165:	eb 04                	jmp    c001b16b <Reg::readInt(char*, char*, int*)+0xcc>
c001b167:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b16b:	47                   	inc    edi
c001b16c:	eb ae                	jmp    c001b11c <Reg::readInt(char*, char*, int*)+0x7d>
c001b16e:	84 c0                	test   al,al
c001b170:	74 02                	je     c001b174 <Reg::readInt(char*, char*, int*)+0xd5>
c001b172:	f7 da                	neg    edx
c001b174:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b17b:	89 10                	mov    DWORD PTR [eax],edx
c001b17d:	88 d8                	mov    al,bl
c001b17f:	81 c4 ec 00 00 00    	add    esp,0xec
c001b185:	5b                   	pop    ebx
c001b186:	5e                   	pop    esi
c001b187:	5f                   	pop    edi
c001b188:	5d                   	pop    ebp
c001b189:	c3                   	ret    

c001b18a <Reg::readString(char*, char*, char*, int)>:
c001b18a:	57                   	push   edi
c001b18b:	56                   	push   esi
c001b18c:	53                   	push   ebx
c001b18d:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b193:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b19a:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b19e:	57                   	push   edi
c001b19f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b1a6:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b1ad:	e8 b6 fe ff ff       	call   c001b068 <Reg::getLine(char*, char*, char*)>
c001b1b2:	83 c4 10             	add    esp,0x10
c001b1b5:	89 c6                	mov    esi,eax
c001b1b7:	84 c0                	test   al,al
c001b1b9:	74 44                	je     c001b1ff <Reg::readString(char*, char*, char*, int)+0x75>
c001b1bb:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b1c2:	31 c0                	xor    eax,eax
c001b1c4:	4a                   	dec    edx
c001b1c5:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b1c8:	84 c9                	test   cl,cl
c001b1ca:	74 0f                	je     c001b1db <Reg::readString(char*, char*, char*, int)+0x51>
c001b1cc:	39 c2                	cmp    edx,eax
c001b1ce:	7e 0b                	jle    c001b1db <Reg::readString(char*, char*, char*, int)+0x51>
c001b1d0:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b1d3:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b1d8:	40                   	inc    eax
c001b1d9:	eb ea                	jmp    c001b1c5 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b1db:	83 ec 0c             	sub    esp,0xc
c001b1de:	53                   	push   ebx
c001b1df:	e8 b0 55 fe ff       	call   c0000794 <strlen>
c001b1e4:	83 c4 10             	add    esp,0x10
c001b1e7:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b1ec:	75 11                	jne    c001b1ff <Reg::readString(char*, char*, char*, int)+0x75>
c001b1ee:	83 ec 0c             	sub    esp,0xc
c001b1f1:	53                   	push   ebx
c001b1f2:	e8 9d 55 fe ff       	call   c0000794 <strlen>
c001b1f7:	83 c4 10             	add    esp,0x10
c001b1fa:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b1ff:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b205:	89 f0                	mov    eax,esi
c001b207:	5b                   	pop    ebx
c001b208:	5e                   	pop    esi
c001b209:	5f                   	pop    edi
c001b20a:	c3                   	ret    

c001b20b <Reg::readBool(char*, char*, bool*)>:
c001b20b:	83 ec 20             	sub    esp,0x20
c001b20e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b212:	50                   	push   eax
c001b213:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b217:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b21b:	e8 7f fe ff ff       	call   c001b09f <Reg::readInt(char*, char*, int*)>
c001b220:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b225:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b229:	0f 95 02             	setne  BYTE PTR [edx]
c001b22c:	83 c4 2c             	add    esp,0x2c
c001b22f:	c3                   	ret    

c001b230 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b230:	53                   	push   ebx
c001b231:	83 ec 1c             	sub    esp,0x1c
c001b234:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b238:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b23c:	50                   	push   eax
c001b23d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b241:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b245:	e8 c1 ff ff ff       	call   c001b20b <Reg::readBool(char*, char*, bool*)>
c001b24a:	83 c4 10             	add    esp,0x10
c001b24d:	84 c0                	test   al,al
c001b24f:	74 04                	je     c001b255 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b251:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b255:	88 d8                	mov    al,bl
c001b257:	83 c4 18             	add    esp,0x18
c001b25a:	5b                   	pop    ebx
c001b25b:	c3                   	ret    

c001b25c <Reg::readIntWithDefault(char*, char*, int)>:
c001b25c:	53                   	push   ebx
c001b25d:	83 ec 1c             	sub    esp,0x1c
c001b260:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b264:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b268:	50                   	push   eax
c001b269:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b271:	e8 29 fe ff ff       	call   c001b09f <Reg::readInt(char*, char*, int*)>
c001b276:	83 c4 10             	add    esp,0x10
c001b279:	84 c0                	test   al,al
c001b27b:	74 04                	je     c001b281 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b27d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b281:	89 d8                	mov    eax,ebx
c001b283:	83 c4 18             	add    esp,0x18
c001b286:	5b                   	pop    ebx
c001b287:	c3                   	ret    

c001b288 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b288:	57                   	push   edi
c001b289:	56                   	push   esi
c001b28a:	53                   	push   ebx
c001b28b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b28f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b293:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b297:	56                   	push   esi
c001b298:	53                   	push   ebx
c001b299:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b29d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2a1:	e8 e4 fe ff ff       	call   c001b18a <Reg::readString(char*, char*, char*, int)>
c001b2a6:	83 c4 10             	add    esp,0x10
c001b2a9:	84 c0                	test   al,al
c001b2ab:	75 1b                	jne    c001b2c8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b2ad:	50                   	push   eax
c001b2ae:	56                   	push   esi
c001b2af:	4e                   	dec    esi
c001b2b0:	6a 00                	push   0x0
c001b2b2:	53                   	push   ebx
c001b2b3:	e8 c0 54 fe ff       	call   c0000778 <memset>
c001b2b8:	83 c4 0c             	add    esp,0xc
c001b2bb:	56                   	push   esi
c001b2bc:	57                   	push   edi
c001b2bd:	53                   	push   ebx
c001b2be:	89 fb                	mov    ebx,edi
c001b2c0:	e8 7f 54 fe ff       	call   c0000744 <memcpy>
c001b2c5:	83 c4 10             	add    esp,0x10
c001b2c8:	89 d8                	mov    eax,ebx
c001b2ca:	5b                   	pop    ebx
c001b2cb:	5e                   	pop    esi
c001b2cc:	5f                   	pop    edi
c001b2cd:	c3                   	ret    

c001b2ce <Sys::eject(regs*)>:
c001b2ce:	83 ec 0c             	sub    esp,0xc
c001b2d1:	83 ca ff             	or     edx,0xffffffff
c001b2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2d8:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b2db:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b2e0:	83 e9 41             	sub    ecx,0x41
c001b2e3:	83 f9 19             	cmp    ecx,0x19
c001b2e6:	77 18                	ja     c001b300 <Sys::eject(regs*)+0x32>
c001b2e8:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c001b2ef:	85 c9                	test   ecx,ecx
c001b2f1:	74 0d                	je     c001b300 <Sys::eject(regs*)+0x32>
c001b2f3:	83 ec 0c             	sub    esp,0xc
c001b2f6:	51                   	push   ecx
c001b2f7:	e8 78 b4 ff ff       	call   c0016774 <LogicalDisk::eject()>
c001b2fc:	83 c4 10             	add    esp,0x10
c001b2ff:	99                   	cdq    
c001b300:	83 c4 0c             	add    esp,0xc
c001b303:	c3                   	ret    

c001b304 <Sys::exit(regs*)>:
c001b304:	83 ec 18             	sub    esp,0x18
c001b307:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b30b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b30e:	e8 c4 35 00 00       	call   c001e8d7 <terminateTask(int)>
c001b313:	83 c8 ff             	or     eax,0xffffffff
c001b316:	83 c4 1c             	add    esp,0x1c
c001b319:	89 c2                	mov    edx,eax
c001b31b:	c3                   	ret    

c001b31c <Sys::getCwd(regs*)>:
c001b31c:	83 ec 10             	sub    esp,0x10
c001b31f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b323:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b326:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b329:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b32e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b331:	e8 f2 7f ff ff       	call   c0013328 <Fs::getcwd(Process*, char*, int)>
c001b336:	83 c4 1c             	add    esp,0x1c
c001b339:	99                   	cdq    
c001b33a:	c3                   	ret    

c001b33b <Sys::getPID(regs*)>:
c001b33b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b340:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b343:	8b 00                	mov    eax,DWORD PTR [eax]
c001b345:	99                   	cdq    
c001b346:	c3                   	ret    

c001b347 <Sys::getRAMData(regs*)>:
c001b347:	8b 0d 94 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e694
c001b34d:	6b 05 90 e6 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e690,0x64
c001b354:	99                   	cdq    
c001b355:	f7 f9                	idiv   ecx
c001b357:	c1 e0 18             	shl    eax,0x18
c001b35a:	09 c8                	or     eax,ecx
c001b35c:	99                   	cdq    
c001b35d:	c3                   	ret    

c001b35e <Sys::loadDLL(regs*)>:
c001b35e:	56                   	push   esi
c001b35f:	53                   	push   ebx
c001b360:	31 d2                	xor    edx,edx
c001b362:	51                   	push   ecx
c001b363:	b8 01 00 00 00       	mov    eax,0x1
c001b368:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b36c:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b370:	0f 84 8c 00 00 00    	je     c001b402 <Sys::loadDLL(regs*)+0xa4>
c001b376:	83 ec 0c             	sub    esp,0xc
c001b379:	68 14 01 00 00       	push   0x114
c001b37e:	e8 bd 44 ff ff       	call   c000f840 <malloc>
c001b383:	83 c4 0c             	add    esp,0xc
c001b386:	89 c3                	mov    ebx,eax
c001b388:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b38d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b390:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b393:	53                   	push   ebx
c001b394:	e8 8d 81 ff ff       	call   c0013526 <File::File(char const*, Process*)>
c001b399:	83 c4 10             	add    esp,0x10
c001b39c:	31 d2                	xor    edx,edx
c001b39e:	b8 02 00 00 00       	mov    eax,0x2
c001b3a3:	85 db                	test   ebx,ebx
c001b3a5:	74 5b                	je     c001b402 <Sys::loadDLL(regs*)+0xa4>
c001b3a7:	83 ec 0c             	sub    esp,0xc
c001b3aa:	53                   	push   ebx
c001b3ab:	e8 48 84 ff ff       	call   c00137f8 <File::exists()>
c001b3b0:	83 c4 10             	add    esp,0x10
c001b3b3:	84 c0                	test   al,al
c001b3b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3b7:	75 11                	jne    c001b3ca <Sys::loadDLL(regs*)+0x6c>
c001b3b9:	83 ec 0c             	sub    esp,0xc
c001b3bc:	53                   	push   ebx
c001b3bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3c0:	83 c4 10             	add    esp,0x10
c001b3c3:	b8 03 00 00 00       	mov    eax,0x3
c001b3c8:	eb 36                	jmp    c001b400 <Sys::loadDLL(regs*)+0xa2>
c001b3ca:	83 ec 0c             	sub    esp,0xc
c001b3cd:	53                   	push   ebx
c001b3ce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3d1:	58                   	pop    eax
c001b3d2:	5a                   	pop    edx
c001b3d3:	6a 00                	push   0x0
c001b3d5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b3d8:	e8 0f 24 00 00       	call   c001d7ec <Thr::loadDLL(char const*, bool)>
c001b3dd:	83 c4 10             	add    esp,0x10
c001b3e0:	89 c1                	mov    ecx,eax
c001b3e2:	31 d2                	xor    edx,edx
c001b3e4:	b8 04 00 00 00       	mov    eax,0x4
c001b3e9:	85 c9                	test   ecx,ecx
c001b3eb:	74 15                	je     c001b402 <Sys::loadDLL(regs*)+0xa4>
c001b3ed:	53                   	push   ebx
c001b3ee:	53                   	push   ebx
c001b3ef:	ff 35 48 e6 02 c0    	push   DWORD PTR ds:0xc002e648
c001b3f5:	51                   	push   ecx
c001b3f6:	e8 25 26 00 00       	call   c001da20 <Thr::executeDLL(unsigned long, void*)>
c001b3fb:	83 c4 10             	add    esp,0x10
c001b3fe:	31 c0                	xor    eax,eax
c001b400:	31 d2                	xor    edx,edx
c001b402:	59                   	pop    ecx
c001b403:	5b                   	pop    ebx
c001b404:	5e                   	pop    esi
c001b405:	c3                   	ret    

c001b406 <Sys::read(regs*)>:
c001b406:	57                   	push   edi
c001b407:	56                   	push   esi
c001b408:	53                   	push   ebx
c001b409:	83 ec 10             	sub    esp,0x10
c001b40c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b410:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b413:	83 f8 02             	cmp    eax,0x2
c001b416:	77 10                	ja     c001b428 <Sys::read(regs*)+0x22>
c001b418:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b41d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b420:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b426:	eb 0e                	jmp    c001b436 <Sys::read(regs*)+0x30>
c001b428:	83 ec 0c             	sub    esp,0xc
c001b42b:	50                   	push   eax
c001b42c:	e8 36 66 ff ff       	call   c0011a67 <getFromFileDescriptor(int)>
c001b431:	83 c4 10             	add    esp,0x10
c001b434:	89 c1                	mov    ecx,eax
c001b436:	83 c8 ff             	or     eax,0xffffffff
c001b439:	85 c9                	test   ecx,ecx
c001b43b:	89 c2                	mov    edx,eax
c001b43d:	74 28                	je     c001b467 <Sys::read(regs*)+0x61>
c001b43f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b447:	31 ff                	xor    edi,edi
c001b449:	83 ec 0c             	sub    esp,0xc
c001b44c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b44e:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b452:	52                   	push   edx
c001b453:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b456:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b459:	57                   	push   edi
c001b45a:	56                   	push   esi
c001b45b:	51                   	push   ecx
c001b45c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b45f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b463:	83 c4 20             	add    esp,0x20
c001b466:	99                   	cdq    
c001b467:	83 c4 10             	add    esp,0x10
c001b46a:	5b                   	pop    ebx
c001b46b:	5e                   	pop    esi
c001b46c:	5f                   	pop    edi
c001b46d:	c3                   	ret    

c001b46e <Sys::sbrk(regs*)>:
c001b46e:	56                   	push   esi
c001b46f:	53                   	push   ebx
c001b470:	83 ec 0c             	sub    esp,0xc
c001b473:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b477:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b47c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b47f:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001b485:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c001b488:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b48b:	68 09 bf 02 c0       	push   0xc002bf09
c001b490:	e8 38 7b ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001b495:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b498:	83 c4 10             	add    esp,0x10
c001b49b:	85 c0                	test   eax,eax
c001b49d:	75 0a                	jne    c001b4a9 <Sys::sbrk(regs*)+0x3b>
c001b49f:	50                   	push   eax
c001b4a0:	50                   	push   eax
c001b4a1:	53                   	push   ebx
c001b4a2:	68 25 bf 02 c0       	push   0xc002bf25
c001b4a7:	eb 54                	jmp    c001b4fd <Sys::sbrk(regs*)+0x8f>
c001b4a9:	79 0a                	jns    c001b4b5 <Sys::sbrk(regs*)+0x47>
c001b4ab:	56                   	push   esi
c001b4ac:	56                   	push   esi
c001b4ad:	53                   	push   ebx
c001b4ae:	68 38 bf 02 c0       	push   0xc002bf38
c001b4b3:	eb 48                	jmp    c001b4fd <Sys::sbrk(regs*)+0x8f>
c001b4b5:	3d 00 00 00 04       	cmp    eax,0x4000000
c001b4ba:	76 17                	jbe    c001b4d3 <Sys::sbrk(regs*)+0x65>
c001b4bc:	51                   	push   ecx
c001b4bd:	51                   	push   ecx
c001b4be:	53                   	push   ebx
c001b4bf:	68 4a bf 02 c0       	push   0xc002bf4a
c001b4c4:	e8 04 7b ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001b4c9:	83 c8 ff             	or     eax,0xffffffff
c001b4cc:	83 c4 10             	add    esp,0x10
c001b4cf:	89 c2                	mov    edx,eax
c001b4d1:	eb 36                	jmp    c001b509 <Sys::sbrk(regs*)+0x9b>
c001b4d3:	05 ff 0f 00 00       	add    eax,0xfff
c001b4d8:	56                   	push   esi
c001b4d9:	c1 e8 0c             	shr    eax,0xc
c001b4dc:	68 07 04 00 00       	push   0x407
c001b4e1:	50                   	push   eax
c001b4e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4e7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4ea:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b4f0:	e8 9f 6f ff ff       	call   c0012494 <VAS::allocatePages(int, int)>
c001b4f5:	58                   	pop    eax
c001b4f6:	5a                   	pop    edx
c001b4f7:	53                   	push   ebx
c001b4f8:	68 63 bf 02 c0       	push   0xc002bf63
c001b4fd:	e8 cb 7a ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001b502:	89 d8                	mov    eax,ebx
c001b504:	31 d2                	xor    edx,edx
c001b506:	83 c4 10             	add    esp,0x10
c001b509:	59                   	pop    ecx
c001b50a:	5b                   	pop    ebx
c001b50b:	5e                   	pop    esi
c001b50c:	c3                   	ret    

c001b50d <Sys::setCwd(regs*)>:
c001b50d:	83 ec 14             	sub    esp,0x14
c001b510:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b514:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b517:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b51c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b51f:	e8 73 83 ff ff       	call   c0013897 <Fs::setcwd(Process*, char*)>
c001b524:	83 c4 1c             	add    esp,0x1c
c001b527:	99                   	cdq    
c001b528:	c3                   	ret    

c001b529 <Sys::setTime(regs*)>:
c001b529:	55                   	push   ebp
c001b52a:	31 d2                	xor    edx,edx
c001b52c:	57                   	push   edi
c001b52d:	bf 18 00 00 00       	mov    edi,0x18
c001b532:	56                   	push   esi
c001b533:	53                   	push   ebx
c001b534:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b539:	83 ec 30             	sub    esp,0x30
c001b53c:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b540:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b543:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b546:	f7 f3                	div    ebx
c001b548:	89 d6                	mov    esi,edx
c001b54a:	31 d2                	xor    edx,edx
c001b54c:	f7 f3                	div    ebx
c001b54e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b551:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b555:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b55a:	31 d2                	xor    edx,edx
c001b55c:	f7 f3                	div    ebx
c001b55e:	31 d2                	xor    edx,edx
c001b560:	bb 0c 00 00 00       	mov    ebx,0xc
c001b565:	f7 f7                	div    edi
c001b567:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b56a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b56e:	0f b7 cd             	movzx  ecx,bp
c001b571:	56                   	push   esi
c001b572:	89 c7                	mov    edi,eax
c001b574:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b578:	c1 e6 10             	shl    esi,0x10
c001b57b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b57f:	83 e7 1f             	and    edi,0x1f
c001b582:	51                   	push   ecx
c001b583:	47                   	inc    edi
c001b584:	c1 e8 05             	shr    eax,0x5
c001b587:	31 d2                	xor    edx,edx
c001b589:	f7 f3                	div    ebx
c001b58b:	31 db                	xor    ebx,ebx
c001b58d:	52                   	push   edx
c001b58e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b592:	57                   	push   edi
c001b593:	68 89 bf 02 c0       	push   0xc002bf89
c001b598:	e8 30 7a ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001b59d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b5a1:	89 f8                	mov    eax,edi
c001b5a3:	31 c9                	xor    ecx,ecx
c001b5a5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b5a9:	88 c1                	mov    cl,al
c001b5ab:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b5b1:	88 d5                	mov    ch,dl
c001b5b3:	c1 e0 10             	shl    eax,0x10
c001b5b6:	0f b7 d1             	movzx  edx,cx
c001b5b9:	09 c2                	or     edx,eax
c001b5bb:	89 d8                	mov    eax,ebx
c001b5bd:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b5c2:	09 f0                	or     eax,esi
c001b5c4:	89 c3                	mov    ebx,eax
c001b5c6:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b5ca:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b5ce:	83 c4 18             	add    esp,0x18
c001b5d1:	53                   	push   ebx
c001b5d2:	52                   	push   edx
c001b5d3:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b5d7:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b5db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b5df:	e8 cd 89 ff ff       	call   c0013fb1 <datetimeToSeconds(datetime_t)>
c001b5e4:	83 c4 0c             	add    esp,0xc
c001b5e7:	52                   	push   edx
c001b5e8:	50                   	push   eax
c001b5e9:	56                   	push   esi
c001b5ea:	e8 49 8b ff ff       	call   c0014138 <secondsToDatetime(unsigned long long)>
c001b5ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b5f3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b5f7:	51                   	push   ecx
c001b5f8:	89 d6                	mov    esi,edx
c001b5fa:	51                   	push   ecx
c001b5fb:	c1 ee 10             	shr    esi,0x10
c001b5fe:	89 f3                	mov    ebx,esi
c001b600:	0f b6 f3             	movzx  esi,bl
c001b603:	56                   	push   esi
c001b604:	0f b6 f6             	movzx  esi,dh
c001b607:	0f b6 d2             	movzx  edx,dl
c001b60a:	56                   	push   esi
c001b60b:	52                   	push   edx
c001b60c:	89 c2                	mov    edx,eax
c001b60e:	c1 ea 10             	shr    edx,0x10
c001b611:	52                   	push   edx
c001b612:	0f b6 d4             	movzx  edx,ah
c001b615:	0f b6 c0             	movzx  eax,al
c001b618:	52                   	push   edx
c001b619:	50                   	push   eax
c001b61a:	68 a5 bf 02 c0       	push   0xc002bfa5
c001b61f:	e8 a9 79 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001b624:	83 c4 2c             	add    esp,0x2c
c001b627:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001b62c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b630:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b634:	53                   	push   ebx
c001b635:	51                   	push   ecx
c001b636:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b63c:	e8 97 8a ff ff       	call   c00140d8 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b641:	83 f0 01             	xor    eax,0x1
c001b644:	31 d2                	xor    edx,edx
c001b646:	0f b6 c0             	movzx  eax,al
c001b649:	83 c4 3c             	add    esp,0x3c
c001b64c:	5b                   	pop    ebx
c001b64d:	5e                   	pop    esi
c001b64e:	5f                   	pop    edi
c001b64f:	5d                   	pop    ebp
c001b650:	c3                   	ret    

c001b651 <Sys::timezone(regs*)>:
c001b651:	53                   	push   ebx
c001b652:	83 ec 08             	sub    esp,0x8
c001b655:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b659:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b65d:	75 17                	jne    c001b676 <Sys::timezone(regs*)+0x25>
c001b65f:	83 ec 0c             	sub    esp,0xc
c001b662:	68 c1 bf 02 c0       	push   0xc002bfc1
c001b667:	e8 61 79 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001b66c:	83 c8 ff             	or     eax,0xffffffff
c001b66f:	83 c4 10             	add    esp,0x10
c001b672:	89 c2                	mov    edx,eax
c001b674:	eb 20                	jmp    c001b696 <Sys::timezone(regs*)+0x45>
c001b676:	83 ec 0c             	sub    esp,0xc
c001b679:	68 f9 bf 02 c0       	push   0xc002bff9
c001b67e:	e8 4a 79 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001b683:	58                   	pop    eax
c001b684:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b687:	e8 ae 87 ff ff       	call   c0013e3a <User::loadClockSettings(int)>
c001b68c:	83 c4 10             	add    esp,0x10
c001b68f:	b8 01 00 00 00       	mov    eax,0x1
c001b694:	31 d2                	xor    edx,edx
c001b696:	83 c4 08             	add    esp,0x8
c001b699:	5b                   	pop    ebx
c001b69a:	c3                   	ret    

c001b69b <Sys::write(regs*)>:
c001b69b:	57                   	push   edi
c001b69c:	56                   	push   esi
c001b69d:	53                   	push   ebx
c001b69e:	83 ec 10             	sub    esp,0x10
c001b6a1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b6a5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b6a8:	83 f8 02             	cmp    eax,0x2
c001b6ab:	77 10                	ja     c001b6bd <Sys::write(regs*)+0x22>
c001b6ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6b5:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b6bb:	eb 0e                	jmp    c001b6cb <Sys::write(regs*)+0x30>
c001b6bd:	83 ec 0c             	sub    esp,0xc
c001b6c0:	50                   	push   eax
c001b6c1:	e8 a1 63 ff ff       	call   c0011a67 <getFromFileDescriptor(int)>
c001b6c6:	83 c4 10             	add    esp,0x10
c001b6c9:	89 c1                	mov    ecx,eax
c001b6cb:	83 c8 ff             	or     eax,0xffffffff
c001b6ce:	85 c9                	test   ecx,ecx
c001b6d0:	89 c2                	mov    edx,eax
c001b6d2:	74 28                	je     c001b6fc <Sys::write(regs*)+0x61>
c001b6d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b6dc:	31 ff                	xor    edi,edi
c001b6de:	83 ec 0c             	sub    esp,0xc
c001b6e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b6e3:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b6e7:	52                   	push   edx
c001b6e8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b6eb:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b6ee:	57                   	push   edi
c001b6ef:	56                   	push   esi
c001b6f0:	51                   	push   ecx
c001b6f1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b6f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b6f8:	83 c4 20             	add    esp,0x20
c001b6fb:	99                   	cdq    
c001b6fc:	83 c4 10             	add    esp,0x10
c001b6ff:	5b                   	pop    ebx
c001b700:	5e                   	pop    esi
c001b701:	5f                   	pop    edi
c001b702:	c3                   	ret    

c001b703 <Sys::wsbe(regs*)>:
c001b703:	57                   	push   edi
c001b704:	b9 0b 00 00 00       	mov    ecx,0xb
c001b709:	56                   	push   esi
c001b70a:	be 38 c0 02 c0       	mov    esi,0xc002c038
c001b70f:	53                   	push   ebx
c001b710:	83 ec 30             	sub    esp,0x30
c001b713:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b717:	fc                   	cld    
c001b718:	83 ec 0c             	sub    esp,0xc
c001b71b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b71d:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b721:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b726:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b729:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b72f:	8b 06                	mov    eax,DWORD PTR [esi]
c001b731:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b734:	57                   	push   edi
c001b735:	e8 5a 50 fe ff       	call   c0000794 <strlen>
c001b73a:	5a                   	pop    edx
c001b73b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b73f:	52                   	push   edx
c001b740:	31 d2                	xor    edx,edx
c001b742:	57                   	push   edi
c001b743:	52                   	push   edx
c001b744:	50                   	push   eax
c001b745:	56                   	push   esi
c001b746:	ff d3                	call   ebx
c001b748:	83 c4 14             	add    esp,0x14
c001b74b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b74f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b752:	e8 80 31 00 00       	call   c001e8d7 <terminateTask(int)>
c001b757:	83 c4 40             	add    esp,0x40
c001b75a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b75f:	5b                   	pop    ebx
c001b760:	31 d2                	xor    edx,edx
c001b762:	5e                   	pop    esi
c001b763:	5f                   	pop    edi
c001b764:	c3                   	ret    

c001b765 <Sys::yield(regs*)>:
c001b765:	57                   	push   edi
c001b766:	56                   	push   esi
c001b767:	53                   	push   ebx
c001b768:	e8 27 27 00 00       	call   c001de94 <lockScheduler()>
c001b76d:	e8 5e 2a 00 00       	call   c001e1d0 <schedule()>
c001b772:	e8 1f 27 00 00       	call   c001de96 <unlockScheduler()>
c001b777:	8b 35 d0 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ecd0
c001b77d:	8b 3d d4 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ecd4
c001b783:	89 f0                	mov    eax,esi
c001b785:	89 fb                	mov    ebx,edi
c001b787:	89 f1                	mov    ecx,esi
c001b789:	c1 e0 07             	shl    eax,0x7
c001b78c:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b790:	25 80 30 0f 00       	and    eax,0xf3080
c001b795:	c1 eb 17             	shr    ebx,0x17
c001b798:	31 c8                	xor    eax,ecx
c001b79a:	89 da                	mov    edx,ebx
c001b79c:	5b                   	pop    ebx
c001b79d:	5e                   	pop    esi
c001b79e:	5f                   	pop    edi
c001b79f:	c3                   	ret    

c001b7a0 <sysCallSeekDir(regs*)>:
c001b7a0:	31 c0                	xor    eax,eax
c001b7a2:	31 d2                	xor    edx,edx
c001b7a4:	c3                   	ret    

c001b7a5 <sysCallTellDir(regs*)>:
c001b7a5:	31 c0                	xor    eax,eax
c001b7a7:	31 d2                	xor    edx,edx
c001b7a9:	c3                   	ret    

c001b7aa <sysCallVerify(regs*)>:
c001b7aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7ae:	31 d2                	xor    edx,edx
c001b7b0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b7b3:	c3                   	ret    

c001b7b4 <sysFormatDisk(regs*)>:
c001b7b4:	56                   	push   esi
c001b7b5:	53                   	push   ebx
c001b7b6:	53                   	push   ebx
c001b7b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b7bb:	8b 1d cc e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7cc
c001b7c1:	eb 25                	jmp    c001b7e8 <sysFormatDisk(regs*)+0x34>
c001b7c3:	83 ec 0c             	sub    esp,0xc
c001b7c6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b7c9:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7cb:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b7ce:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b7d1:	50                   	push   eax
c001b7d2:	ff 34 85 60 ec 02 c0 	push   DWORD PTR [eax*4-0x3ffd13a0]
c001b7d9:	53                   	push   ebx
c001b7da:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b7dd:	83 c4 20             	add    esp,0x20
c001b7e0:	83 f8 08             	cmp    eax,0x8
c001b7e3:	75 12                	jne    c001b7f7 <sysFormatDisk(regs*)+0x43>
c001b7e5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b7e8:	85 db                	test   ebx,ebx
c001b7ea:	75 d7                	jne    c001b7c3 <sysFormatDisk(regs*)+0xf>
c001b7ec:	59                   	pop    ecx
c001b7ed:	b8 03 00 00 00       	mov    eax,0x3
c001b7f2:	31 d2                	xor    edx,edx
c001b7f4:	5b                   	pop    ebx
c001b7f5:	5e                   	pop    esi
c001b7f6:	c3                   	ret    
c001b7f7:	85 c0                	test   eax,eax
c001b7f9:	74 1b                	je     c001b816 <sysFormatDisk(regs*)+0x62>
c001b7fb:	83 f8 09             	cmp    eax,0x9
c001b7fe:	74 0b                	je     c001b80b <sysFormatDisk(regs*)+0x57>
c001b800:	59                   	pop    ecx
c001b801:	b8 02 00 00 00       	mov    eax,0x2
c001b806:	31 d2                	xor    edx,edx
c001b808:	5b                   	pop    ebx
c001b809:	5e                   	pop    esi
c001b80a:	c3                   	ret    
c001b80b:	59                   	pop    ecx
c001b80c:	b8 01 00 00 00       	mov    eax,0x1
c001b811:	31 d2                	xor    edx,edx
c001b813:	5b                   	pop    ebx
c001b814:	5e                   	pop    esi
c001b815:	c3                   	ret    
c001b816:	59                   	pop    ecx
c001b817:	31 c0                	xor    eax,eax
c001b819:	31 d2                	xor    edx,edx
c001b81b:	5b                   	pop    ebx
c001b81c:	5e                   	pop    esi
c001b81d:	c3                   	ret    

c001b81e <sysSetDiskVolumeLabel(regs*)>:
c001b81e:	56                   	push   esi
c001b81f:	53                   	push   ebx
c001b820:	53                   	push   ebx
c001b821:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b825:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b828:	83 f8 19             	cmp    eax,0x19
c001b82b:	77 29                	ja     c001b856 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b82d:	8b 0c 85 60 ec 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd13a0]
c001b834:	85 c9                	test   ecx,ecx
c001b836:	74 1e                	je     c001b856 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b838:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b83b:	85 d2                	test   edx,edx
c001b83d:	74 17                	je     c001b856 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b83f:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b845:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b847:	52                   	push   edx
c001b848:	50                   	push   eax
c001b849:	51                   	push   ecx
c001b84a:	53                   	push   ebx
c001b84b:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b84e:	83 c4 10             	add    esp,0x10
c001b851:	99                   	cdq    
c001b852:	59                   	pop    ecx
c001b853:	5b                   	pop    ebx
c001b854:	5e                   	pop    esi
c001b855:	c3                   	ret    
c001b856:	59                   	pop    ecx
c001b857:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b85c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b861:	5b                   	pop    ebx
c001b862:	5e                   	pop    esi
c001b863:	c3                   	ret    

c001b864 <sysGetDiskVolumeLabel(regs*)>:
c001b864:	57                   	push   edi
c001b865:	56                   	push   esi
c001b866:	53                   	push   ebx
c001b867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b86b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b86e:	83 fa 19             	cmp    edx,0x19
c001b871:	77 34                	ja     c001b8a7 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b873:	8b 0c 95 60 ec 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd13a0]
c001b87a:	85 c9                	test   ecx,ecx
c001b87c:	74 29                	je     c001b8a7 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b87e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b881:	85 db                	test   ebx,ebx
c001b883:	74 22                	je     c001b8a7 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b885:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b888:	85 c0                	test   eax,eax
c001b88a:	74 1b                	je     c001b8a7 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b88c:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b892:	83 ec 0c             	sub    esp,0xc
c001b895:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b897:	50                   	push   eax
c001b898:	53                   	push   ebx
c001b899:	52                   	push   edx
c001b89a:	51                   	push   ecx
c001b89b:	56                   	push   esi
c001b89c:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b89f:	83 c4 20             	add    esp,0x20
c001b8a2:	99                   	cdq    
c001b8a3:	5b                   	pop    ebx
c001b8a4:	5e                   	pop    esi
c001b8a5:	5f                   	pop    edi
c001b8a6:	c3                   	ret    
c001b8a7:	5b                   	pop    ebx
c001b8a8:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b8ad:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8b2:	5e                   	pop    esi
c001b8b3:	5f                   	pop    edi
c001b8b4:	c3                   	ret    

c001b8b5 <sysShutdown(regs*)>:
c001b8b5:	83 ec 0c             	sub    esp,0xc
c001b8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8bc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b8bf:	85 c0                	test   eax,eax
c001b8c1:	74 18                	je     c001b8db <sysShutdown(regs*)+0x26>
c001b8c3:	83 f8 01             	cmp    eax,0x1
c001b8c6:	74 38                	je     c001b900 <sysShutdown(regs*)+0x4b>
c001b8c8:	83 f8 02             	cmp    eax,0x2
c001b8cb:	74 24                	je     c001b8f1 <sysShutdown(regs*)+0x3c>
c001b8cd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8d2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8d7:	83 c4 0c             	add    esp,0xc
c001b8da:	c3                   	ret    
c001b8db:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001b8e0:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8e2:	6a 00                	push   0x0
c001b8e4:	6a 00                	push   0x0
c001b8e6:	6a 00                	push   0x0
c001b8e8:	50                   	push   eax
c001b8e9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b8ec:	83 c4 10             	add    esp,0x10
c001b8ef:	eb dc                	jmp    c001b8cd <sysShutdown(regs*)+0x18>
c001b8f1:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001b8f6:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8f8:	6a 00                	push   0x0
c001b8fa:	6a 00                	push   0x0
c001b8fc:	6a 01                	push   0x1
c001b8fe:	eb e8                	jmp    c001b8e8 <sysShutdown(regs*)+0x33>
c001b900:	a1 00 0d 03 c0       	mov    eax,ds:0xc0030d00
c001b905:	85 c0                	test   eax,eax
c001b907:	74 02                	je     c001b90b <sysShutdown(regs*)+0x56>
c001b909:	ff d0                	call   eax
c001b90b:	31 c0                	xor    eax,eax
c001b90d:	31 d2                	xor    edx,edx
c001b90f:	83 c4 0c             	add    esp,0xc
c001b912:	c3                   	ret    

c001b913 <sysCallRealpath(regs*)>:
c001b913:	83 ec 0c             	sub    esp,0xc
c001b916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b91a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b91d:	85 d2                	test   edx,edx
c001b91f:	74 07                	je     c001b928 <sysCallRealpath(regs*)+0x15>
c001b921:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b924:	85 c0                	test   eax,eax
c001b926:	75 0b                	jne    c001b933 <sysCallRealpath(regs*)+0x20>
c001b928:	b8 01 00 00 00       	mov    eax,0x1
c001b92d:	31 d2                	xor    edx,edx
c001b92f:	83 c4 0c             	add    esp,0xc
c001b932:	c3                   	ret    
c001b933:	51                   	push   ecx
c001b934:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b93a:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b93d:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b943:	51                   	push   ecx
c001b944:	52                   	push   edx
c001b945:	50                   	push   eax
c001b946:	e8 31 7a ff ff       	call   c001337c <Fs::standardiseFiles(char*, char const*, char const*)>
c001b94b:	83 c4 10             	add    esp,0x10
c001b94e:	31 c0                	xor    eax,eax
c001b950:	31 d2                	xor    edx,edx
c001b952:	83 c4 0c             	add    esp,0xc
c001b955:	c3                   	ret    

c001b956 <sysCallGetArgc(regs*)>:
c001b956:	83 ec 14             	sub    esp,0x14
c001b959:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b95e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b961:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b967:	68 64 c0 02 c0       	push   0xc002c064
c001b96c:	e8 5c 76 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001b971:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b976:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b979:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b97f:	83 c4 1c             	add    esp,0x1c
c001b982:	99                   	cdq    
c001b983:	c3                   	ret    

c001b984 <sysCallReadDir(regs*)>:
c001b984:	53                   	push   ebx
c001b985:	83 ec 18             	sub    esp,0x18
c001b988:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b98c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b98f:	83 f8 02             	cmp    eax,0x2
c001b992:	76 53                	jbe    c001b9e7 <sysCallReadDir(regs*)+0x63>
c001b994:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b997:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b99d:	77 4f                	ja     c001b9ee <sysCallReadDir(regs*)+0x6a>
c001b99f:	83 ec 0c             	sub    esp,0xc
c001b9a2:	50                   	push   eax
c001b9a3:	e8 bf 60 ff ff       	call   c0011a67 <getFromFileDescriptor(int)>
c001b9a8:	83 c4 10             	add    esp,0x10
c001b9ab:	85 c0                	test   eax,eax
c001b9ad:	74 50                	je     c001b9ff <sysCallReadDir(regs*)+0x7b>
c001b9af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b9b7:	83 ec 0c             	sub    esp,0xc
c001b9ba:	8b 10                	mov    edx,DWORD PTR [eax]
c001b9bc:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b9c0:	51                   	push   ecx
c001b9c1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9c4:	6a 00                	push   0x0
c001b9c6:	68 10 01 00 00       	push   0x110
c001b9cb:	50                   	push   eax
c001b9cc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b9cf:	83 c4 20             	add    esp,0x20
c001b9d2:	85 c0                	test   eax,eax
c001b9d4:	74 38                	je     c001ba0e <sysCallReadDir(regs*)+0x8a>
c001b9d6:	83 f8 07             	cmp    eax,0x7
c001b9d9:	74 0c                	je     c001b9e7 <sysCallReadDir(regs*)+0x63>
c001b9db:	b8 02 00 00 00       	mov    eax,0x2
c001b9e0:	31 d2                	xor    edx,edx
c001b9e2:	83 c4 18             	add    esp,0x18
c001b9e5:	5b                   	pop    ebx
c001b9e6:	c3                   	ret    
c001b9e7:	b8 01 00 00 00       	mov    eax,0x1
c001b9ec:	eb f2                	jmp    c001b9e0 <sysCallReadDir(regs*)+0x5c>
c001b9ee:	83 ec 08             	sub    esp,0x8
c001b9f1:	52                   	push   edx
c001b9f2:	68 7c c1 02 c0       	push   0xc002c17c
c001b9f7:	e8 d1 75 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001b9fc:	83 c4 10             	add    esp,0x10
c001b9ff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba04:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba09:	83 c4 18             	add    esp,0x18
c001ba0c:	5b                   	pop    ebx
c001ba0d:	c3                   	ret    
c001ba0e:	31 c0                	xor    eax,eax
c001ba10:	eb ce                	jmp    c001b9e0 <sysCallReadDir(regs*)+0x5c>

c001ba12 <sysCallIsATTY(regs*)>:
c001ba12:	83 ec 0c             	sub    esp,0xc
c001ba15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba19:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba1c:	83 f8 02             	cmp    eax,0x2
c001ba1f:	76 07                	jbe    c001ba28 <sysCallIsATTY(regs*)+0x16>
c001ba21:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ba26:	75 26                	jne    c001ba4e <sysCallIsATTY(regs*)+0x3c>
c001ba28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba2d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba30:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ba36:	85 c0                	test   eax,eax
c001ba38:	74 24                	je     c001ba5e <sysCallIsATTY(regs*)+0x4c>
c001ba3a:	83 ec 0c             	sub    esp,0xc
c001ba3d:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba3f:	50                   	push   eax
c001ba40:	ff 12                	call   DWORD PTR [edx]
c001ba42:	31 d2                	xor    edx,edx
c001ba44:	0f b6 c0             	movzx  eax,al
c001ba47:	83 c4 10             	add    esp,0x10
c001ba4a:	83 c4 0c             	add    esp,0xc
c001ba4d:	c3                   	ret    
c001ba4e:	83 ec 0c             	sub    esp,0xc
c001ba51:	50                   	push   eax
c001ba52:	e8 10 60 ff ff       	call   c0011a67 <getFromFileDescriptor(int)>
c001ba57:	83 c4 10             	add    esp,0x10
c001ba5a:	85 c0                	test   eax,eax
c001ba5c:	75 dc                	jne    c001ba3a <sysCallIsATTY(regs*)+0x28>
c001ba5e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba63:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba68:	83 c4 0c             	add    esp,0xc
c001ba6b:	c3                   	ret    

c001ba6c <sysCallSeek(regs*)>:
c001ba6c:	53                   	push   ebx
c001ba6d:	83 ec 08             	sub    esp,0x8
c001ba70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba74:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba77:	83 f8 02             	cmp    eax,0x2
c001ba7a:	76 4a                	jbe    c001bac6 <sysCallSeek(regs*)+0x5a>
c001ba7c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba81:	77 32                	ja     c001bab5 <sysCallSeek(regs*)+0x49>
c001ba83:	83 ec 0c             	sub    esp,0xc
c001ba86:	50                   	push   eax
c001ba87:	e8 db 5f ff ff       	call   c0011a67 <getFromFileDescriptor(int)>
c001ba8c:	83 c4 0c             	add    esp,0xc
c001ba8f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ba92:	31 db                	xor    ebx,ebx
c001ba94:	53                   	push   ebx
c001ba95:	51                   	push   ecx
c001ba96:	50                   	push   eax
c001ba97:	e8 ac 7b ff ff       	call   c0013648 <File::seek(unsigned long long)>
c001ba9c:	83 c4 10             	add    esp,0x10
c001ba9f:	85 c0                	test   eax,eax
c001baa1:	0f 95 c0             	setne  al
c001baa4:	31 d2                	xor    edx,edx
c001baa6:	0f b6 c0             	movzx  eax,al
c001baa9:	f7 d8                	neg    eax
c001baab:	83 d2 00             	adc    edx,0x0
c001baae:	83 c4 08             	add    esp,0x8
c001bab1:	f7 da                	neg    edx
c001bab3:	5b                   	pop    ebx
c001bab4:	c3                   	ret    
c001bab5:	83 ec 08             	sub    esp,0x8
c001bab8:	50                   	push   eax
c001bab9:	68 6f c0 02 c0       	push   0xc002c06f
c001babe:	e8 0a 75 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001bac3:	83 c4 10             	add    esp,0x10
c001bac6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bacb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bad0:	83 c4 08             	add    esp,0x8
c001bad3:	5b                   	pop    ebx
c001bad4:	c3                   	ret    

c001bad5 <sysCallTell(regs*)>:
c001bad5:	53                   	push   ebx
c001bad6:	83 ec 08             	sub    esp,0x8
c001bad9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001badd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bae0:	83 f8 02             	cmp    eax,0x2
c001bae3:	76 5e                	jbe    c001bb43 <sysCallTell(regs*)+0x6e>
c001bae5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001baea:	77 2d                	ja     c001bb19 <sysCallTell(regs*)+0x44>
c001baec:	83 ec 0c             	sub    esp,0xc
c001baef:	50                   	push   eax
c001baf0:	e8 72 5f ff ff       	call   c0011a67 <getFromFileDescriptor(int)>
c001baf5:	5a                   	pop    edx
c001baf6:	59                   	pop    ecx
c001baf7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bafa:	50                   	push   eax
c001bafb:	e8 9e 7b ff ff       	call   c001369e <File::tell(unsigned long long*)>
c001bb00:	83 c4 10             	add    esp,0x10
c001bb03:	85 c0                	test   eax,eax
c001bb05:	0f 95 c0             	setne  al
c001bb08:	31 d2                	xor    edx,edx
c001bb0a:	0f b6 c0             	movzx  eax,al
c001bb0d:	f7 d8                	neg    eax
c001bb0f:	83 d2 00             	adc    edx,0x0
c001bb12:	83 c4 08             	add    esp,0x8
c001bb15:	f7 da                	neg    edx
c001bb17:	5b                   	pop    ebx
c001bb18:	c3                   	ret    
c001bb19:	83 ec 08             	sub    esp,0x8
c001bb1c:	50                   	push   eax
c001bb1d:	68 89 c0 02 c0       	push   0xc002c089
c001bb22:	e8 a6 74 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001bb27:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb2a:	83 c4 10             	add    esp,0x10
c001bb2d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb33:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb3a:	31 d2                	xor    edx,edx
c001bb3c:	31 c0                	xor    eax,eax
c001bb3e:	83 c4 08             	add    esp,0x8
c001bb41:	5b                   	pop    ebx
c001bb42:	c3                   	ret    
c001bb43:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb48:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb4d:	83 c4 08             	add    esp,0x8
c001bb50:	5b                   	pop    ebx
c001bb51:	c3                   	ret    

c001bb52 <sysCallSize(regs*)>:
c001bb52:	53                   	push   ebx
c001bb53:	83 ec 18             	sub    esp,0x18
c001bb56:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb5a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb5d:	83 f8 02             	cmp    eax,0x2
c001bb60:	76 64                	jbe    c001bbc6 <sysCallSize(regs*)+0x74>
c001bb62:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb67:	77 33                	ja     c001bb9c <sysCallSize(regs*)+0x4a>
c001bb69:	83 ec 0c             	sub    esp,0xc
c001bb6c:	50                   	push   eax
c001bb6d:	e8 f5 5e ff ff       	call   c0011a67 <getFromFileDescriptor(int)>
c001bb72:	83 c4 0c             	add    esp,0xc
c001bb75:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bb79:	52                   	push   edx
c001bb7a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb7d:	50                   	push   eax
c001bb7e:	e8 b3 7c ff ff       	call   c0013836 <File::stat(unsigned long long*, bool*)>
c001bb83:	83 c4 10             	add    esp,0x10
c001bb86:	85 c0                	test   eax,eax
c001bb88:	0f 95 c0             	setne  al
c001bb8b:	31 d2                	xor    edx,edx
c001bb8d:	0f b6 c0             	movzx  eax,al
c001bb90:	f7 d8                	neg    eax
c001bb92:	83 d2 00             	adc    edx,0x0
c001bb95:	83 c4 18             	add    esp,0x18
c001bb98:	f7 da                	neg    edx
c001bb9a:	5b                   	pop    ebx
c001bb9b:	c3                   	ret    
c001bb9c:	83 ec 08             	sub    esp,0x8
c001bb9f:	50                   	push   eax
c001bba0:	68 a3 c0 02 c0       	push   0xc002c0a3
c001bba5:	e8 23 74 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001bbaa:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bbad:	83 c4 10             	add    esp,0x10
c001bbb0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbb6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbbd:	31 d2                	xor    edx,edx
c001bbbf:	31 c0                	xor    eax,eax
c001bbc1:	83 c4 18             	add    esp,0x18
c001bbc4:	5b                   	pop    ebx
c001bbc5:	c3                   	ret    
c001bbc6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbcb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbd0:	83 c4 18             	add    esp,0x18
c001bbd3:	5b                   	pop    ebx
c001bbd4:	c3                   	ret    

c001bbd5 <sysCallSizeFromFilename(regs*)>:
c001bbd5:	57                   	push   edi
c001bbd6:	56                   	push   esi
c001bbd7:	53                   	push   ebx
c001bbd8:	83 ec 20             	sub    esp,0x20
c001bbdb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bbdf:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bbe2:	83 fb 02             	cmp    ebx,0x2
c001bbe5:	0f 86 99 00 00 00    	jbe    c001bc84 <sysCallSizeFromFilename(regs*)+0xaf>
c001bbeb:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bbf1:	77 65                	ja     c001bc58 <sysCallSizeFromFilename(regs*)+0x83>
c001bbf3:	83 ec 0c             	sub    esp,0xc
c001bbf6:	68 14 01 00 00       	push   0x114
c001bbfb:	e8 40 3c ff ff       	call   c000f840 <malloc>
c001bc00:	83 c4 0c             	add    esp,0xc
c001bc03:	89 c6                	mov    esi,eax
c001bc05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc0a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc0d:	53                   	push   ebx
c001bc0e:	56                   	push   esi
c001bc0f:	e8 12 79 ff ff       	call   c0013526 <File::File(char const*, Process*)>
c001bc14:	83 c4 0c             	add    esp,0xc
c001bc17:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bc1b:	50                   	push   eax
c001bc1c:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bc1f:	56                   	push   esi
c001bc20:	e8 11 7c ff ff       	call   c0013836 <File::stat(unsigned long long*, bool*)>
c001bc25:	83 c4 10             	add    esp,0x10
c001bc28:	85 f6                	test   esi,esi
c001bc2a:	74 14                	je     c001bc40 <sysCallSizeFromFilename(regs*)+0x6b>
c001bc2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc30:	8b 16                	mov    edx,DWORD PTR [esi]
c001bc32:	83 ec 0c             	sub    esp,0xc
c001bc35:	56                   	push   esi
c001bc36:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bc39:	83 c4 10             	add    esp,0x10
c001bc3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc40:	85 c0                	test   eax,eax
c001bc42:	0f 95 c0             	setne  al
c001bc45:	31 d2                	xor    edx,edx
c001bc47:	0f b6 c0             	movzx  eax,al
c001bc4a:	f7 d8                	neg    eax
c001bc4c:	83 d2 00             	adc    edx,0x0
c001bc4f:	83 c4 20             	add    esp,0x20
c001bc52:	f7 da                	neg    edx
c001bc54:	5b                   	pop    ebx
c001bc55:	5e                   	pop    esi
c001bc56:	5f                   	pop    edi
c001bc57:	c3                   	ret    
c001bc58:	83 ec 08             	sub    esp,0x8
c001bc5b:	53                   	push   ebx
c001bc5c:	68 a3 c0 02 c0       	push   0xc002c0a3
c001bc61:	e8 67 73 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001bc66:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bc69:	83 c4 10             	add    esp,0x10
c001bc6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc72:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc79:	31 d2                	xor    edx,edx
c001bc7b:	83 c4 20             	add    esp,0x20
c001bc7e:	31 c0                	xor    eax,eax
c001bc80:	5b                   	pop    ebx
c001bc81:	5e                   	pop    esi
c001bc82:	5f                   	pop    edi
c001bc83:	c3                   	ret    
c001bc84:	83 c4 20             	add    esp,0x20
c001bc87:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc8c:	5b                   	pop    ebx
c001bc8d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc92:	5e                   	pop    esi
c001bc93:	5f                   	pop    edi
c001bc94:	c3                   	ret    

c001bc95 <sysCallClose(regs*)>:
c001bc95:	53                   	push   ebx
c001bc96:	83 ec 08             	sub    esp,0x8
c001bc99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc9d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bca0:	83 f8 02             	cmp    eax,0x2
c001bca3:	76 50                	jbe    c001bcf5 <sysCallClose(regs*)+0x60>
c001bca5:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bcaa:	74 58                	je     c001bd04 <sysCallClose(regs*)+0x6f>
c001bcac:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bcb1:	74 60                	je     c001bd13 <sysCallClose(regs*)+0x7e>
c001bcb3:	77 2f                	ja     c001bce4 <sysCallClose(regs*)+0x4f>
c001bcb5:	83 ec 0c             	sub    esp,0xc
c001bcb8:	50                   	push   eax
c001bcb9:	e8 a9 5d ff ff       	call   c0011a67 <getFromFileDescriptor(int)>
c001bcbe:	89 c3                	mov    ebx,eax
c001bcc0:	89 04 24             	mov    DWORD PTR [esp],eax
c001bcc3:	e8 20 79 ff ff       	call   c00135e8 <File::close()>
c001bcc8:	83 c4 10             	add    esp,0x10
c001bccb:	85 db                	test   ebx,ebx
c001bccd:	74 0c                	je     c001bcdb <sysCallClose(regs*)+0x46>
c001bccf:	83 ec 0c             	sub    esp,0xc
c001bcd2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bcd4:	53                   	push   ebx
c001bcd5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bcd8:	83 c4 10             	add    esp,0x10
c001bcdb:	31 c0                	xor    eax,eax
c001bcdd:	31 d2                	xor    edx,edx
c001bcdf:	83 c4 08             	add    esp,0x8
c001bce2:	5b                   	pop    ebx
c001bce3:	c3                   	ret    
c001bce4:	83 ec 08             	sub    esp,0x8
c001bce7:	50                   	push   eax
c001bce8:	68 a0 c1 02 c0       	push   0xc002c1a0
c001bced:	e8 db 72 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001bcf2:	83 c4 10             	add    esp,0x10
c001bcf5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcfa:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcff:	83 c4 08             	add    esp,0x8
c001bd02:	5b                   	pop    ebx
c001bd03:	c3                   	ret    
c001bd04:	83 ec 0c             	sub    esp,0xc
c001bd07:	68 be c0 02 c0       	push   0xc002c0be
c001bd0c:	e8 bc 72 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001bd11:	eb c5                	jmp    c001bcd8 <sysCallClose(regs*)+0x43>
c001bd13:	83 ec 0c             	sub    esp,0xc
c001bd16:	68 cc c0 02 c0       	push   0xc002c0cc
c001bd1b:	eb ef                	jmp    c001bd0c <sysCallClose(regs*)+0x77>

c001bd1d <sysCallOpenDir(regs*)>:
c001bd1d:	56                   	push   esi
c001bd1e:	53                   	push   ebx
c001bd1f:	53                   	push   ebx
c001bd20:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd24:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bd27:	85 f6                	test   esi,esi
c001bd29:	74 59                	je     c001bd84 <sysCallOpenDir(regs*)+0x67>
c001bd2b:	83 ec 0c             	sub    esp,0xc
c001bd2e:	68 14 01 00 00       	push   0x114
c001bd33:	e8 08 3b ff ff       	call   c000f840 <malloc>
c001bd38:	83 c4 0c             	add    esp,0xc
c001bd3b:	89 c6                	mov    esi,eax
c001bd3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd42:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd45:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd48:	56                   	push   esi
c001bd49:	e8 84 7c ff ff       	call   c00139d2 <Directory::Directory(char const*, Process*)>
c001bd4e:	83 c4 10             	add    esp,0x10
c001bd51:	85 f6                	test   esi,esi
c001bd53:	74 2f                	je     c001bd84 <sysCallOpenDir(regs*)+0x67>
c001bd55:	83 ec 0c             	sub    esp,0xc
c001bd58:	56                   	push   esi
c001bd59:	e8 d8 7c ff ff       	call   c0013a36 <Directory::open()>
c001bd5e:	83 c4 10             	add    esp,0x10
c001bd61:	85 c0                	test   eax,eax
c001bd63:	75 1f                	jne    c001bd84 <sysCallOpenDir(regs*)+0x67>
c001bd65:	83 ec 0c             	sub    esp,0xc
c001bd68:	56                   	push   esi
c001bd69:	e8 04 5a ff ff       	call   c0011772 <UnixFile::getFileDescriptor()>
c001bd6e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bd71:	83 c4 10             	add    esp,0x10
c001bd74:	89 02                	mov    DWORD PTR [edx],eax
c001bd76:	c1 f8 1f             	sar    eax,0x1f
c001bd79:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bd7c:	31 c0                	xor    eax,eax
c001bd7e:	59                   	pop    ecx
c001bd7f:	31 d2                	xor    edx,edx
c001bd81:	5b                   	pop    ebx
c001bd82:	5e                   	pop    esi
c001bd83:	c3                   	ret    
c001bd84:	59                   	pop    ecx
c001bd85:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd8a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd8f:	5b                   	pop    ebx
c001bd90:	5e                   	pop    esi
c001bd91:	c3                   	ret    

c001bd92 <sysCallCloseDir(regs*)>:
c001bd92:	53                   	push   ebx
c001bd93:	83 ec 08             	sub    esp,0x8
c001bd96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd9a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd9d:	83 f8 02             	cmp    eax,0x2
c001bda0:	76 47                	jbe    c001bde9 <sysCallCloseDir(regs*)+0x57>
c001bda2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bda7:	77 2f                	ja     c001bdd8 <sysCallCloseDir(regs*)+0x46>
c001bda9:	83 ec 0c             	sub    esp,0xc
c001bdac:	50                   	push   eax
c001bdad:	e8 b5 5c ff ff       	call   c0011a67 <getFromFileDescriptor(int)>
c001bdb2:	89 c3                	mov    ebx,eax
c001bdb4:	89 04 24             	mov    DWORD PTR [esp],eax
c001bdb7:	e8 d6 7c ff ff       	call   c0013a92 <Directory::close()>
c001bdbc:	83 c4 10             	add    esp,0x10
c001bdbf:	85 db                	test   ebx,ebx
c001bdc1:	74 0c                	je     c001bdcf <sysCallCloseDir(regs*)+0x3d>
c001bdc3:	83 ec 0c             	sub    esp,0xc
c001bdc6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdc8:	53                   	push   ebx
c001bdc9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bdcc:	83 c4 10             	add    esp,0x10
c001bdcf:	31 c0                	xor    eax,eax
c001bdd1:	31 d2                	xor    edx,edx
c001bdd3:	83 c4 08             	add    esp,0x8
c001bdd6:	5b                   	pop    ebx
c001bdd7:	c3                   	ret    
c001bdd8:	83 ec 08             	sub    esp,0x8
c001bddb:	50                   	push   eax
c001bddc:	68 c8 c1 02 c0       	push   0xc002c1c8
c001bde1:	e8 e7 71 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001bde6:	83 c4 10             	add    esp,0x10
c001bde9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdee:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdf3:	83 c4 08             	add    esp,0x8
c001bdf6:	5b                   	pop    ebx
c001bdf7:	c3                   	ret    

c001bdf8 <sysCallMakeDir(regs*)>:
c001bdf8:	56                   	push   esi
c001bdf9:	53                   	push   ebx
c001bdfa:	83 ec 10             	sub    esp,0x10
c001bdfd:	68 14 01 00 00       	push   0x114
c001be02:	e8 39 3a ff ff       	call   c000f840 <malloc>
c001be07:	83 c4 0c             	add    esp,0xc
c001be0a:	89 c3                	mov    ebx,eax
c001be0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be11:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be18:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be1b:	53                   	push   ebx
c001be1c:	e8 b1 7b ff ff       	call   c00139d2 <Directory::Directory(char const*, Process*)>
c001be21:	83 c4 10             	add    esp,0x10
c001be24:	85 db                	test   ebx,ebx
c001be26:	74 32                	je     c001be5a <sysCallMakeDir(regs*)+0x62>
c001be28:	83 ec 0c             	sub    esp,0xc
c001be2b:	53                   	push   ebx
c001be2c:	e8 e5 7d ff ff       	call   c0013c16 <Directory::create()>
c001be31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be34:	89 c6                	mov    esi,eax
c001be36:	e8 57 7c ff ff       	call   c0013a92 <Directory::close()>
c001be3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be40:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001be43:	83 c4 10             	add    esp,0x10
c001be46:	31 c0                	xor    eax,eax
c001be48:	59                   	pop    ecx
c001be49:	85 f6                	test   esi,esi
c001be4b:	5b                   	pop    ebx
c001be4c:	0f 95 c0             	setne  al
c001be4f:	5e                   	pop    esi
c001be50:	31 d2                	xor    edx,edx
c001be52:	f7 d8                	neg    eax
c001be54:	83 d2 00             	adc    edx,0x0
c001be57:	f7 da                	neg    edx
c001be59:	c3                   	ret    
c001be5a:	59                   	pop    ecx
c001be5b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be60:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be65:	5b                   	pop    ebx
c001be66:	5e                   	pop    esi
c001be67:	c3                   	ret    

c001be68 <sysCallWait(regs*)>:
c001be68:	83 ec 10             	sub    esp,0x10
c001be6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be6f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001be72:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be75:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001be78:	e8 ce 24 00 00       	call   c001e34b <waitTask(int, int*, int)>
c001be7d:	83 c4 1c             	add    esp,0x1c
c001be80:	99                   	cdq    
c001be81:	c3                   	ret    

c001be82 <sysCallNotImpl(regs*)>:
c001be82:	83 ec 18             	sub    esp,0x18
c001be85:	68 da c0 02 c0       	push   0xc002c0da
c001be8a:	e8 e0 e7 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001be8f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be94:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be99:	83 c4 1c             	add    esp,0x1c
c001be9c:	c3                   	ret    

c001be9d <sysPanic(regs*)>:
c001be9d:	83 ec 18             	sub    esp,0x18
c001bea0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bea4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bea7:	e8 c3 e7 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001beac:	c7 04 24 f4 c0 02 c0 	mov    DWORD PTR [esp],0xc002c0f4
c001beb3:	e8 b7 e7 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001beb8:	b8 01 00 00 00       	mov    eax,0x1
c001bebd:	31 d2                	xor    edx,edx
c001bebf:	83 c4 1c             	add    esp,0x1c
c001bec2:	c3                   	ret    

c001bec3 <sysCallRmdir(regs*)>:
c001bec3:	56                   	push   esi
c001bec4:	53                   	push   ebx
c001bec5:	83 ec 20             	sub    esp,0x20
c001bec8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001becc:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001becf:	68 14 01 00 00       	push   0x114
c001bed4:	e8 67 39 ff ff       	call   c000f840 <malloc>
c001bed9:	83 c4 0c             	add    esp,0xc
c001bedc:	89 c3                	mov    ebx,eax
c001bede:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bee3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bee6:	56                   	push   esi
c001bee7:	53                   	push   ebx
c001bee8:	e8 39 76 ff ff       	call   c0013526 <File::File(char const*, Process*)>
c001beed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bef0:	e8 0d 78 ff ff       	call   c0013702 <File::unlink()>
c001bef5:	83 c4 10             	add    esp,0x10
c001bef8:	85 db                	test   ebx,ebx
c001befa:	74 14                	je     c001bf10 <sysCallRmdir(regs*)+0x4d>
c001befc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf00:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf02:	83 ec 0c             	sub    esp,0xc
c001bf05:	53                   	push   ebx
c001bf06:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf09:	83 c4 10             	add    esp,0x10
c001bf0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf10:	85 c0                	test   eax,eax
c001bf12:	0f 95 c0             	setne  al
c001bf15:	31 d2                	xor    edx,edx
c001bf17:	0f b6 c0             	movzx  eax,al
c001bf1a:	f7 d8                	neg    eax
c001bf1c:	83 d2 00             	adc    edx,0x0
c001bf1f:	83 c4 14             	add    esp,0x14
c001bf22:	f7 da                	neg    edx
c001bf24:	5b                   	pop    ebx
c001bf25:	5e                   	pop    esi
c001bf26:	c3                   	ret    

c001bf27 <sysCallUnlink(regs*)>:
c001bf27:	56                   	push   esi
c001bf28:	53                   	push   ebx
c001bf29:	83 ec 20             	sub    esp,0x20
c001bf2c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bf30:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bf33:	68 14 01 00 00       	push   0x114
c001bf38:	e8 03 39 ff ff       	call   c000f840 <malloc>
c001bf3d:	83 c4 0c             	add    esp,0xc
c001bf40:	89 c3                	mov    ebx,eax
c001bf42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf47:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf4a:	56                   	push   esi
c001bf4b:	53                   	push   ebx
c001bf4c:	e8 d5 75 ff ff       	call   c0013526 <File::File(char const*, Process*)>
c001bf51:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf54:	e8 a9 77 ff ff       	call   c0013702 <File::unlink()>
c001bf59:	83 c4 10             	add    esp,0x10
c001bf5c:	85 db                	test   ebx,ebx
c001bf5e:	74 14                	je     c001bf74 <sysCallUnlink(regs*)+0x4d>
c001bf60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf64:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf66:	83 ec 0c             	sub    esp,0xc
c001bf69:	53                   	push   ebx
c001bf6a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf6d:	83 c4 10             	add    esp,0x10
c001bf70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf74:	85 c0                	test   eax,eax
c001bf76:	0f 95 c0             	setne  al
c001bf79:	31 d2                	xor    edx,edx
c001bf7b:	0f b6 c0             	movzx  eax,al
c001bf7e:	f7 d8                	neg    eax
c001bf80:	83 d2 00             	adc    edx,0x0
c001bf83:	83 c4 14             	add    esp,0x14
c001bf86:	f7 da                	neg    edx
c001bf88:	5b                   	pop    ebx
c001bf89:	5e                   	pop    esi
c001bf8a:	c3                   	ret    

c001bf8b <sysCallGetArgv(regs*)>:
c001bf8b:	83 ec 0c             	sub    esp,0xc
c001bf8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bf92:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bf95:	85 c0                	test   eax,eax
c001bf97:	78 2b                	js     c001bfc4 <sysCallGetArgv(regs*)+0x39>
c001bf99:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bf9f:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bfa2:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bfa8:	7d 1a                	jge    c001bfc4 <sysCallGetArgv(regs*)+0x39>
c001bfaa:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bfb1:	85 c0                	test   eax,eax
c001bfb3:	74 17                	je     c001bfcc <sysCallGetArgv(regs*)+0x41>
c001bfb5:	83 ec 08             	sub    esp,0x8
c001bfb8:	50                   	push   eax
c001bfb9:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bfbc:	e8 73 48 fe ff       	call   c0000834 <strcpy>
c001bfc1:	83 c4 10             	add    esp,0x10
c001bfc4:	31 c0                	xor    eax,eax
c001bfc6:	31 d2                	xor    edx,edx
c001bfc8:	83 c4 0c             	add    esp,0xc
c001bfcb:	c3                   	ret    
c001bfcc:	b8 01 00 00 00       	mov    eax,0x1
c001bfd1:	31 d2                	xor    edx,edx
c001bfd3:	83 c4 0c             	add    esp,0xc
c001bfd6:	c3                   	ret    

c001bfd7 <sysCallTTYName(regs*)>:
c001bfd7:	56                   	push   esi
c001bfd8:	53                   	push   ebx
c001bfd9:	53                   	push   ebx
c001bfda:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bfde:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bfe1:	85 c0                	test   eax,eax
c001bfe3:	74 5f                	je     c001c044 <sysCallTTYName(regs*)+0x6d>
c001bfe5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bfe8:	83 f8 02             	cmp    eax,0x2
c001bfeb:	77 3e                	ja     c001c02b <sysCallTTYName(regs*)+0x54>
c001bfed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bff2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bff5:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bffb:	85 db                	test   ebx,ebx
c001bffd:	74 45                	je     c001c044 <sysCallTTYName(regs*)+0x6d>
c001bfff:	83 ec 0c             	sub    esp,0xc
c001c002:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c004:	53                   	push   ebx
c001c005:	ff 10                	call   DWORD PTR [eax]
c001c007:	83 c4 10             	add    esp,0x10
c001c00a:	84 c0                	test   al,al
c001c00c:	74 41                	je     c001c04f <sysCallTTYName(regs*)+0x78>
c001c00e:	83 ec 08             	sub    esp,0x8
c001c011:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001c017:	53                   	push   ebx
c001c018:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c01b:	e8 14 48 fe ff       	call   c0000834 <strcpy>
c001c020:	83 c4 10             	add    esp,0x10
c001c023:	31 c0                	xor    eax,eax
c001c025:	59                   	pop    ecx
c001c026:	31 d2                	xor    edx,edx
c001c028:	5b                   	pop    ebx
c001c029:	5e                   	pop    esi
c001c02a:	c3                   	ret    
c001c02b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c030:	74 bb                	je     c001bfed <sysCallTTYName(regs*)+0x16>
c001c032:	83 ec 0c             	sub    esp,0xc
c001c035:	50                   	push   eax
c001c036:	e8 2c 5a ff ff       	call   c0011a67 <getFromFileDescriptor(int)>
c001c03b:	83 c4 10             	add    esp,0x10
c001c03e:	89 c3                	mov    ebx,eax
c001c040:	85 db                	test   ebx,ebx
c001c042:	75 bb                	jne    c001bfff <sysCallTTYName(regs*)+0x28>
c001c044:	59                   	pop    ecx
c001c045:	b8 01 00 00 00       	mov    eax,0x1
c001c04a:	31 d2                	xor    edx,edx
c001c04c:	5b                   	pop    ebx
c001c04d:	5e                   	pop    esi
c001c04e:	c3                   	ret    
c001c04f:	59                   	pop    ecx
c001c050:	b8 02 00 00 00       	mov    eax,0x2
c001c055:	31 d2                	xor    edx,edx
c001c057:	5b                   	pop    ebx
c001c058:	5e                   	pop    esi
c001c059:	c3                   	ret    

c001c05a <sysCallUSleep(regs*)>:
c001c05a:	83 ec 14             	sub    esp,0x14
c001c05d:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c062:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c066:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c06d:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c070:	01 ca                	add    edx,ecx
c001c072:	52                   	push   edx
c001c073:	50                   	push   eax
c001c074:	e8 6b 23 00 00       	call   c001e3e4 <nanoSleep(unsigned long long)>
c001c079:	31 c0                	xor    eax,eax
c001c07b:	31 d2                	xor    edx,edx
c001c07d:	83 c4 1c             	add    esp,0x1c
c001c080:	c3                   	ret    

c001c081 <sysCallSpawn(regs*)>:
c001c081:	56                   	push   esi
c001c082:	53                   	push   ebx
c001c083:	53                   	push   ebx
c001c084:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c088:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001c08b:	85 f6                	test   esi,esi
c001c08d:	75 08                	jne    c001c097 <sysCallSpawn(regs*)+0x16>
c001c08f:	59                   	pop    ecx
c001c090:	31 c0                	xor    eax,eax
c001c092:	31 d2                	xor    edx,edx
c001c094:	5b                   	pop    ebx
c001c095:	5e                   	pop    esi
c001c096:	c3                   	ret    
c001c097:	83 ec 0c             	sub    esp,0xc
c001c09a:	68 3f 07 00 00       	push   0x73f
c001c09f:	e8 9c 37 ff ff       	call   c000f840 <malloc>
c001c0a4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c0a7:	89 c6                	mov    esi,eax
c001c0a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0ae:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0b1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0b4:	56                   	push   esi
c001c0b5:	e8 2a 1a 00 00       	call   c001dae4 <Process::Process(char const*, Process*, char**)>
c001c0ba:	83 c4 20             	add    esp,0x20
c001c0bd:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c0c4:	75 c9                	jne    c001c08f <sysCallSpawn(regs*)+0xe>
c001c0c6:	83 ec 0c             	sub    esp,0xc
c001c0c9:	56                   	push   esi
c001c0ca:	e8 db 1f 00 00       	call   c001e0aa <Process::createUserThread()>
c001c0cf:	8b 06                	mov    eax,DWORD PTR [esi]
c001c0d1:	83 c4 10             	add    esp,0x10
c001c0d4:	99                   	cdq    
c001c0d5:	59                   	pop    ecx
c001c0d6:	5b                   	pop    ebx
c001c0d7:	5e                   	pop    esi
c001c0d8:	c3                   	ret    

c001c0d9 <sysCallGetEnv(regs*)>:
c001c0d9:	55                   	push   ebp
c001c0da:	57                   	push   edi
c001c0db:	56                   	push   esi
c001c0dc:	53                   	push   ebx
c001c0dd:	83 ec 28             	sub    esp,0x28
c001c0e0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c0e4:	68 03 c1 02 c0       	push   0xc002c103
c001c0e9:	e8 df 6e ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001c0ee:	5f                   	pop    edi
c001c0ef:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c0f2:	5d                   	pop    ebp
c001c0f3:	53                   	push   ebx
c001c0f4:	68 cc a9 02 c0       	push   0xc002a9cc
c001c0f9:	e8 cf 6e ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001c0fe:	58                   	pop    eax
c001c0ff:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c102:	5a                   	pop    edx
c001c103:	57                   	push   edi
c001c104:	68 0c c1 02 c0       	push   0xc002c10c
c001c109:	e8 bf 6e ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001c10e:	59                   	pop    ecx
c001c10f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c114:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c117:	e8 6f e4 ff ff       	call   c001a58b <Krnl::getProcessTotalEnvCount(Process*)>
c001c11c:	5a                   	pop    edx
c001c11d:	89 c5                	mov    ebp,eax
c001c11f:	59                   	pop    ecx
c001c120:	50                   	push   eax
c001c121:	68 16 c1 02 c0       	push   0xc002c116
c001c126:	e8 a2 6e ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001c12b:	83 c4 10             	add    esp,0x10
c001c12e:	39 ef                	cmp    edi,ebp
c001c130:	7c 15                	jl     c001c147 <sysCallGetEnv(regs*)+0x6e>
c001c132:	85 db                	test   ebx,ebx
c001c134:	75 0c                	jne    c001c142 <sysCallGetEnv(regs*)+0x69>
c001c136:	83 c4 1c             	add    esp,0x1c
c001c139:	31 c0                	xor    eax,eax
c001c13b:	5b                   	pop    ebx
c001c13c:	31 d2                	xor    edx,edx
c001c13e:	5e                   	pop    esi
c001c13f:	5f                   	pop    edi
c001c140:	5d                   	pop    ebp
c001c141:	c3                   	ret    
c001c142:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c145:	eb ef                	jmp    c001c136 <sysCallGetEnv(regs*)+0x5d>
c001c147:	83 ec 0c             	sub    esp,0xc
c001c14a:	68 22 c1 02 c0       	push   0xc002c122
c001c14f:	e8 79 6e ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001c154:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c158:	83 c4 0c             	add    esp,0xc
c001c15b:	57                   	push   edi
c001c15c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c162:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c165:	50                   	push   eax
c001c166:	e8 40 e4 ff ff       	call   c001a5ab <Krnl::getProcessEnvPair(Process*, int)>
c001c16b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c16f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c173:	68 a4 c4 02 c0       	push   0xc002c4a4
c001c178:	e8 50 6e ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001c17d:	83 c4 10             	add    esp,0x10
c001c180:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c183:	85 f6                	test   esi,esi
c001c185:	75 47                	jne    c001c1ce <sysCallGetEnv(regs*)+0xf5>
c001c187:	83 ec 0c             	sub    esp,0xc
c001c18a:	55                   	push   ebp
c001c18b:	e8 04 46 fe ff       	call   c0000794 <strlen>
c001c190:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c193:	89 c3                	mov    ebx,eax
c001c195:	e8 fa 45 fe ff       	call   c0000794 <strlen>
c001c19a:	5a                   	pop    edx
c001c19b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c19f:	59                   	pop    ecx
c001c1a0:	50                   	push   eax
c001c1a1:	68 25 c1 02 c0       	push   0xc002c125
c001c1a6:	e8 22 6e ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001c1ab:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c1ae:	e8 e1 45 fe ff       	call   c0000794 <strlen>
c001c1b3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c1b6:	89 c3                	mov    ebx,eax
c001c1b8:	e8 d7 45 fe ff       	call   c0000794 <strlen>
c001c1bd:	83 c4 10             	add    esp,0x10
c001c1c0:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c1c4:	83 c4 1c             	add    esp,0x1c
c001c1c7:	31 d2                	xor    edx,edx
c001c1c9:	5b                   	pop    ebx
c001c1ca:	5e                   	pop    esi
c001c1cb:	5f                   	pop    edi
c001c1cc:	5d                   	pop    ebp
c001c1cd:	c3                   	ret    
c001c1ce:	83 ec 0c             	sub    esp,0xc
c001c1d1:	68 be c4 02 c0       	push   0xc002c4be
c001c1d6:	e8 f2 6d ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001c1db:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c1de:	58                   	pop    eax
c001c1df:	5a                   	pop    edx
c001c1e0:	55                   	push   ebp
c001c1e1:	53                   	push   ebx
c001c1e2:	e8 4d 46 fe ff       	call   c0000834 <strcpy>
c001c1e7:	59                   	pop    ecx
c001c1e8:	5e                   	pop    esi
c001c1e9:	68 2f c1 02 c0       	push   0xc002c12f
c001c1ee:	53                   	push   ebx
c001c1ef:	e8 80 47 fe ff       	call   c0000974 <strcat>
c001c1f4:	5d                   	pop    ebp
c001c1f5:	58                   	pop    eax
c001c1f6:	57                   	push   edi
c001c1f7:	53                   	push   ebx
c001c1f8:	e8 77 47 fe ff       	call   c0000974 <strcat>
c001c1fd:	c7 04 24 d8 c4 02 c0 	mov    DWORD PTR [esp],0xc002c4d8
c001c204:	e8 c4 6d ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001c209:	83 c4 10             	add    esp,0x10
c001c20c:	e9 25 ff ff ff       	jmp    c001c136 <sysCallGetEnv(regs*)+0x5d>

c001c211 <sysAppSettings(regs*)>:
c001c211:	53                   	push   ebx
c001c212:	83 ec 08             	sub    esp,0x8
c001c215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c219:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c21c:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c222:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c227:	66 3d c0 09          	cmp    ax,0x9c0
c001c22b:	75 2f                	jne    c001c25c <sysAppSettings(regs*)+0x4b>
c001c22d:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c233:	83 e0 1f             	and    eax,0x1f
c001c236:	3c 01                	cmp    al,0x1
c001c238:	74 2e                	je     c001c268 <sysAppSettings(regs*)+0x57>
c001c23a:	3c 07                	cmp    al,0x7
c001c23c:	0f 84 bd 00 00 00    	je     c001c2ff <sysAppSettings(regs*)+0xee>
c001c242:	84 c0                	test   al,al
c001c244:	0f 84 dc 00 00 00    	je     c001c326 <sysAppSettings(regs*)+0x115>
c001c24a:	3c 08                	cmp    al,0x8
c001c24c:	74 6d                	je     c001c2bb <sysAppSettings(regs*)+0xaa>
c001c24e:	0f b6 c0             	movzx  eax,al
c001c251:	83 c4 08             	add    esp,0x8
c001c254:	05 e8 03 00 00       	add    eax,0x3e8
c001c259:	5b                   	pop    ebx
c001c25a:	99                   	cdq    
c001c25b:	c3                   	ret    
c001c25c:	b8 01 00 00 00       	mov    eax,0x1
c001c261:	31 d2                	xor    edx,edx
c001c263:	83 c4 08             	add    esp,0x8
c001c266:	5b                   	pop    ebx
c001c267:	c3                   	ret    
c001c268:	51                   	push   ecx
c001c269:	68 00 01 00 00       	push   0x100
c001c26e:	6a 00                	push   0x0
c001c270:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c275:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c278:	83 c0 0c             	add    eax,0xc
c001c27b:	50                   	push   eax
c001c27c:	e8 f7 44 fe ff       	call   c0000778 <memset>
c001c281:	83 c4 0c             	add    esp,0xc
c001c284:	68 ff 00 00 00       	push   0xff
c001c289:	53                   	push   ebx
c001c28a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c28f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c292:	83 c0 0c             	add    eax,0xc
c001c295:	50                   	push   eax
c001c296:	e8 a9 44 fe ff       	call   c0000744 <memcpy>
c001c29b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2a0:	5b                   	pop    ebx
c001c2a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2a4:	5a                   	pop    edx
c001c2a5:	8d 50 0c             	lea    edx,[eax+0xc]
c001c2a8:	52                   	push   edx
c001c2a9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2af:	e8 2e 49 ff ff       	call   c0010be2 <VgaText::setTitle(char*)>
c001c2b4:	83 c4 10             	add    esp,0x10
c001c2b7:	31 c0                	xor    eax,eax
c001c2b9:	eb a6                	jmp    c001c261 <sysAppSettings(regs*)+0x50>
c001c2bb:	83 ec 08             	sub    esp,0x8
c001c2be:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c2c4:	83 e0 0f             	and    eax,0xf
c001c2c7:	50                   	push   eax
c001c2c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2cd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2d6:	e8 f7 48 ff ff       	call   c0010bd2 <VgaText::setTitleColour(VgaColour)>
c001c2db:	58                   	pop    eax
c001c2dc:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c2e2:	5a                   	pop    edx
c001c2e3:	c1 e8 04             	shr    eax,0x4
c001c2e6:	83 e0 0f             	and    eax,0xf
c001c2e9:	50                   	push   eax
c001c2ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2ef:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2f8:	e8 c5 48 ff ff       	call   c0010bc2 <VgaText::setTitleTextColour(VgaColour)>
c001c2fd:	eb b5                	jmp    c001c2b4 <sysAppSettings(regs*)+0xa3>
c001c2ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c304:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c307:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c30d:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c313:	c0 e8 06             	shr    al,0x6
c001c316:	83 e0 01             	and    eax,0x1
c001c319:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c31f:	31 c0                	xor    eax,eax
c001c321:	e9 3b ff ff ff       	jmp    c001c261 <sysAppSettings(regs*)+0x50>
c001c326:	b8 02 00 00 00       	mov    eax,0x2
c001c32b:	e9 31 ff ff ff       	jmp    c001c261 <sysAppSettings(regs*)+0x50>

c001c330 <sysSetFatAttrib(regs*)>:
c001c330:	57                   	push   edi
c001c331:	56                   	push   esi
c001c332:	53                   	push   ebx
c001c333:	83 ec 1c             	sub    esp,0x1c
c001c336:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c33a:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c33d:	68 14 01 00 00       	push   0x114
c001c342:	e8 f9 34 ff ff       	call   c000f840 <malloc>
c001c347:	83 c4 0c             	add    esp,0xc
c001c34a:	89 c3                	mov    ebx,eax
c001c34c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c351:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c354:	57                   	push   edi
c001c355:	53                   	push   ebx
c001c356:	e8 cb 71 ff ff       	call   c0013526 <File::File(char const*, Process*)>
c001c35b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c35e:	83 c4 0c             	add    esp,0xc
c001c361:	0f b6 d4             	movzx  edx,ah
c001c364:	0f b6 c0             	movzx  eax,al
c001c367:	52                   	push   edx
c001c368:	50                   	push   eax
c001c369:	53                   	push   ebx
c001c36a:	e8 2d 74 ff ff       	call   c001379c <File::chfatattr(unsigned char, unsigned char)>
c001c36f:	83 c4 10             	add    esp,0x10
c001c372:	85 db                	test   ebx,ebx
c001c374:	74 14                	je     c001c38a <sysSetFatAttrib(regs*)+0x5a>
c001c376:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c37a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c37c:	83 ec 0c             	sub    esp,0xc
c001c37f:	53                   	push   ebx
c001c380:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c383:	83 c4 10             	add    esp,0x10
c001c386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c38a:	85 c0                	test   eax,eax
c001c38c:	0f 95 c0             	setne  al
c001c38f:	31 d2                	xor    edx,edx
c001c391:	0f b6 c0             	movzx  eax,al
c001c394:	f7 d8                	neg    eax
c001c396:	83 d2 00             	adc    edx,0x0
c001c399:	83 c4 10             	add    esp,0x10
c001c39c:	f7 da                	neg    edx
c001c39e:	5b                   	pop    ebx
c001c39f:	5e                   	pop    esi
c001c3a0:	5f                   	pop    edi
c001c3a1:	c3                   	ret    

c001c3a2 <sysPipe(regs*)>:
c001c3a2:	57                   	push   edi
c001c3a3:	56                   	push   esi
c001c3a4:	53                   	push   ebx
c001c3a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3a9:	83 ec 0c             	sub    esp,0xc
c001c3ac:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c3af:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c3b2:	6a 20                	push   0x20
c001c3b4:	e8 87 34 ff ff       	call   c000f840 <malloc>
c001c3b9:	89 c3                	mov    ebx,eax
c001c3bb:	58                   	pop    eax
c001c3bc:	5a                   	pop    edx
c001c3bd:	68 00 50 00 00       	push   0x5000
c001c3c2:	53                   	push   ebx
c001c3c3:	e8 4a 41 ff ff       	call   c0010512 <Pipe::Pipe(int)>
c001c3c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3cb:	e8 a2 53 ff ff       	call   c0011772 <UnixFile::getFileDescriptor()>
c001c3d0:	89 07                	mov    DWORD PTR [edi],eax
c001c3d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3d5:	e8 98 53 ff ff       	call   c0011772 <UnixFile::getFileDescriptor()>
c001c3da:	83 c4 10             	add    esp,0x10
c001c3dd:	89 06                	mov    DWORD PTR [esi],eax
c001c3df:	31 d2                	xor    edx,edx
c001c3e1:	5b                   	pop    ebx
c001c3e2:	31 c0                	xor    eax,eax
c001c3e4:	5e                   	pop    esi
c001c3e5:	5f                   	pop    edi
c001c3e6:	c3                   	ret    

c001c3e7 <sysGetUnixTime(regs*)>:
c001c3e7:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001c3ec:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c3f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c3f6:	e9 15 7b ff ff       	jmp    c0013f10 <Clock::timeInSecondsLocal()>

c001c3fb <string_ends_with(char const*, char const*)>:
c001c3fb:	57                   	push   edi
c001c3fc:	56                   	push   esi
c001c3fd:	53                   	push   ebx
c001c3fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c402:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c406:	83 ec 0c             	sub    esp,0xc
c001c409:	53                   	push   ebx
c001c40a:	e8 85 43 fe ff       	call   c0000794 <strlen>
c001c40f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c412:	89 c6                	mov    esi,eax
c001c414:	e8 7b 43 fe ff       	call   c0000794 <strlen>
c001c419:	83 c4 10             	add    esp,0x10
c001c41c:	39 c6                	cmp    esi,eax
c001c41e:	7d 06                	jge    c001c426 <string_ends_with(char const*, char const*)+0x2b>
c001c420:	5b                   	pop    ebx
c001c421:	31 c0                	xor    eax,eax
c001c423:	5e                   	pop    esi
c001c424:	5f                   	pop    edi
c001c425:	c3                   	ret    
c001c426:	83 ec 08             	sub    esp,0x8
c001c429:	29 c6                	sub    esi,eax
c001c42b:	57                   	push   edi
c001c42c:	01 f3                	add    ebx,esi
c001c42e:	53                   	push   ebx
c001c42f:	e8 8c 44 fe ff       	call   c00008c0 <strcmp>
c001c434:	83 c4 10             	add    esp,0x10
c001c437:	85 c0                	test   eax,eax
c001c439:	5b                   	pop    ebx
c001c43a:	0f 94 c0             	sete   al
c001c43d:	5e                   	pop    esi
c001c43e:	0f b6 c0             	movzx  eax,al
c001c441:	5f                   	pop    edi
c001c442:	c3                   	ret    

c001c443 <sysCallOpen(regs*)>:
c001c443:	56                   	push   esi
c001c444:	53                   	push   ebx
c001c445:	81 ec 04 01 00 00    	sub    esp,0x104
c001c44b:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c452:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c455:	85 c9                	test   ecx,ecx
c001c457:	0f 84 b3 00 00 00    	je     c001c510 <sysCallOpen(regs*)+0xcd>
c001c45d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c460:	85 c0                	test   eax,eax
c001c462:	0f 84 a8 00 00 00    	je     c001c510 <sysCallOpen(regs*)+0xcd>
c001c468:	52                   	push   edx
c001c469:	68 31 c1 02 c0       	push   0xc002c131
c001c46e:	50                   	push   eax
c001c46f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c473:	56                   	push   esi
c001c474:	e8 03 6f ff ff       	call   c001337c <Fs::standardiseFiles(char*, char const*, char const*)>
c001c479:	89 34 24             	mov    DWORD PTR [esp],esi
c001c47c:	e8 13 43 fe ff       	call   c0000794 <strlen>
c001c481:	83 c4 10             	add    esp,0x10
c001c484:	48                   	dec    eax
c001c485:	74 1d                	je     c001c4a4 <sysCallOpen(regs*)+0x61>
c001c487:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c48a:	eb 0f                	jmp    c001c49b <sysCallOpen(regs*)+0x58>
c001c48c:	80 fa 3a             	cmp    dl,0x3a
c001c48f:	74 0f                	je     c001c4a0 <sysCallOpen(regs*)+0x5d>
c001c491:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c495:	48                   	dec    eax
c001c496:	74 0c                	je     c001c4a4 <sysCallOpen(regs*)+0x61>
c001c498:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c49b:	80 fa 2e             	cmp    dl,0x2e
c001c49e:	75 ec                	jne    c001c48c <sysCallOpen(regs*)+0x49>
c001c4a0:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c4a4:	83 ec 08             	sub    esp,0x8
c001c4a7:	68 35 c1 02 c0       	push   0xc002c135
c001c4ac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4af:	e8 47 ff ff ff       	call   c001c3fb <string_ends_with(char const*, char const*)>
c001c4b4:	83 c4 10             	add    esp,0x10
c001c4b7:	85 c0                	test   eax,eax
c001c4b9:	75 17                	jne    c001c4d2 <sysCallOpen(regs*)+0x8f>
c001c4bb:	83 ec 08             	sub    esp,0x8
c001c4be:	68 56 c1 02 c0       	push   0xc002c156
c001c4c3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4c6:	e8 30 ff ff ff       	call   c001c3fb <string_ends_with(char const*, char const*)>
c001c4cb:	83 c4 10             	add    esp,0x10
c001c4ce:	85 c0                	test   eax,eax
c001c4d0:	74 51                	je     c001c523 <sysCallOpen(regs*)+0xe0>
c001c4d2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4d5:	83 ec 08             	sub    esp,0x8
c001c4d8:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c4de:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4e5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4e8:	ff 30                	push   DWORD PTR [eax]
c001c4ea:	68 3a c1 02 c0       	push   0xc002c13a
c001c4ef:	e8 d9 6a ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001c4f4:	c7 04 24 49 c1 02 c0 	mov    DWORD PTR [esp],0xc002c149
c001c4fb:	e8 cd 6a ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001c500:	83 c4 10             	add    esp,0x10
c001c503:	81 c4 04 01 00 00    	add    esp,0x104
c001c509:	31 c0                	xor    eax,eax
c001c50b:	31 d2                	xor    edx,edx
c001c50d:	5b                   	pop    ebx
c001c50e:	5e                   	pop    esi
c001c50f:	c3                   	ret    
c001c510:	81 c4 04 01 00 00    	add    esp,0x104
c001c516:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c51b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c520:	5b                   	pop    ebx
c001c521:	5e                   	pop    esi
c001c522:	c3                   	ret    
c001c523:	83 ec 08             	sub    esp,0x8
c001c526:	68 36 c1 02 c0       	push   0xc002c136
c001c52b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c52e:	e8 8d 43 fe ff       	call   c00008c0 <strcmp>
c001c533:	83 c4 10             	add    esp,0x10
c001c536:	85 c0                	test   eax,eax
c001c538:	74 98                	je     c001c4d2 <sysCallOpen(regs*)+0x8f>
c001c53a:	83 ec 08             	sub    esp,0x8
c001c53d:	68 35 c1 02 c0       	push   0xc002c135
c001c542:	56                   	push   esi
c001c543:	e8 b3 fe ff ff       	call   c001c3fb <string_ends_with(char const*, char const*)>
c001c548:	83 c4 10             	add    esp,0x10
c001c54b:	85 c0                	test   eax,eax
c001c54d:	75 83                	jne    c001c4d2 <sysCallOpen(regs*)+0x8f>
c001c54f:	83 ec 08             	sub    esp,0x8
c001c552:	68 5b c1 02 c0       	push   0xc002c15b
c001c557:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c55a:	e8 9c fe ff ff       	call   c001c3fb <string_ends_with(char const*, char const*)>
c001c55f:	83 c4 10             	add    esp,0x10
c001c562:	85 c0                	test   eax,eax
c001c564:	0f 85 d9 00 00 00    	jne    c001c643 <sysCallOpen(regs*)+0x200>
c001c56a:	83 ec 08             	sub    esp,0x8
c001c56d:	68 60 c1 02 c0       	push   0xc002c160
c001c572:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c575:	e8 81 fe ff ff       	call   c001c3fb <string_ends_with(char const*, char const*)>
c001c57a:	83 c4 10             	add    esp,0x10
c001c57d:	85 c0                	test   eax,eax
c001c57f:	0f 85 be 00 00 00    	jne    c001c643 <sysCallOpen(regs*)+0x200>
c001c585:	83 ec 08             	sub    esp,0x8
c001c588:	68 5c c1 02 c0       	push   0xc002c15c
c001c58d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c590:	e8 2b 43 fe ff       	call   c00008c0 <strcmp>
c001c595:	83 c4 10             	add    esp,0x10
c001c598:	85 c0                	test   eax,eax
c001c59a:	0f 84 a3 00 00 00    	je     c001c643 <sysCallOpen(regs*)+0x200>
c001c5a0:	83 ec 08             	sub    esp,0x8
c001c5a3:	68 5b c1 02 c0       	push   0xc002c15b
c001c5a8:	56                   	push   esi
c001c5a9:	e8 4d fe ff ff       	call   c001c3fb <string_ends_with(char const*, char const*)>
c001c5ae:	83 c4 10             	add    esp,0x10
c001c5b1:	85 c0                	test   eax,eax
c001c5b3:	0f 85 8a 00 00 00    	jne    c001c643 <sysCallOpen(regs*)+0x200>
c001c5b9:	83 ec 0c             	sub    esp,0xc
c001c5bc:	68 14 01 00 00       	push   0x114
c001c5c1:	e8 7a 32 ff ff       	call   c000f840 <malloc>
c001c5c6:	83 c4 0c             	add    esp,0xc
c001c5c9:	89 c6                	mov    esi,eax
c001c5cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5d0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c5d3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c5d6:	56                   	push   esi
c001c5d7:	e8 4a 6f ff ff       	call   c0013526 <File::File(char const*, Process*)>
c001c5dc:	83 c4 10             	add    esp,0x10
c001c5df:	85 f6                	test   esi,esi
c001c5e1:	0f 84 29 ff ff ff    	je     c001c510 <sysCallOpen(regs*)+0xcd>
c001c5e7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c5ea:	0f b6 c2             	movzx  eax,dl
c001c5ed:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c5f0:	89 d0                	mov    eax,edx
c001c5f2:	83 e0 01             	and    eax,0x1
c001c5f5:	f6 c2 02             	test   dl,0x2
c001c5f8:	74 03                	je     c001c5fd <sysCallOpen(regs*)+0x1ba>
c001c5fa:	83 c8 02             	or     eax,0x2
c001c5fd:	f6 c2 04             	test   dl,0x4
c001c600:	74 03                	je     c001c605 <sysCallOpen(regs*)+0x1c2>
c001c602:	83 c8 04             	or     eax,0x4
c001c605:	f6 c2 08             	test   dl,0x8
c001c608:	74 03                	je     c001c60d <sysCallOpen(regs*)+0x1ca>
c001c60a:	83 c8 0a             	or     eax,0xa
c001c60d:	83 e2 10             	and    edx,0x10
c001c610:	74 03                	je     c001c615 <sysCallOpen(regs*)+0x1d2>
c001c612:	83 c8 12             	or     eax,0x12
c001c615:	83 ec 08             	sub    esp,0x8
c001c618:	50                   	push   eax
c001c619:	56                   	push   esi
c001c61a:	e8 6b 6f ff ff       	call   c001358a <File::open(FileOpenMode)>
c001c61f:	83 c4 10             	add    esp,0x10
c001c622:	85 c0                	test   eax,eax
c001c624:	0f 85 e6 fe ff ff    	jne    c001c510 <sysCallOpen(regs*)+0xcd>
c001c62a:	83 ec 0c             	sub    esp,0xc
c001c62d:	56                   	push   esi
c001c62e:	e8 3f 51 ff ff       	call   c0011772 <UnixFile::getFileDescriptor()>
c001c633:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c636:	89 02                	mov    DWORD PTR [edx],eax
c001c638:	c1 f8 1f             	sar    eax,0x1f
c001c63b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c63e:	e9 bd fe ff ff       	jmp    c001c500 <sysCallOpen(regs*)+0xbd>
c001c643:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c646:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c64c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c653:	e9 ab fe ff ff       	jmp    c001c503 <sysCallOpen(regs*)+0xc0>

c001c658 <Sys::loadSyscalls()>:
c001c658:	c7 05 c0 11 03 c0 65 b7 01 c0 	mov    DWORD PTR ds:0xc00311c0,0xc001b765
c001c662:	c7 05 c4 11 03 c0 04 b3 01 c0 	mov    DWORD PTR ds:0xc00311c4,0xc001b304
c001c66c:	c7 05 c8 11 03 c0 6e b4 01 c0 	mov    DWORD PTR ds:0xc00311c8,0xc001b46e
c001c676:	c7 05 cc 11 03 c0 9b b6 01 c0 	mov    DWORD PTR ds:0xc00311cc,0xc001b69b
c001c680:	c7 05 d0 11 03 c0 06 b4 01 c0 	mov    DWORD PTR ds:0xc00311d0,0xc001b406
c001c68a:	c7 05 d4 11 03 c0 3b b3 01 c0 	mov    DWORD PTR ds:0xc00311d4,0xc001b33b
c001c694:	c7 05 d8 11 03 c0 1c b3 01 c0 	mov    DWORD PTR ds:0xc00311d8,0xc001b31c
c001c69e:	c7 05 dc 11 03 c0 0d b5 01 c0 	mov    DWORD PTR ds:0xc00311dc,0xc001b50d
c001c6a8:	c7 05 e4 11 03 c0 95 bc 01 c0 	mov    DWORD PTR ds:0xc00311e4,0xc001bc95
c001c6b2:	c7 05 e0 11 03 c0 43 c4 01 c0 	mov    DWORD PTR ds:0xc00311e0,0xc001c443
c001c6bc:	c7 05 e8 11 03 c0 1d bd 01 c0 	mov    DWORD PTR ds:0xc00311e8,0xc001bd1d
c001c6c6:	c7 05 ec 11 03 c0 84 b9 01 c0 	mov    DWORD PTR ds:0xc00311ec,0xc001b984
c001c6d0:	c7 05 f0 11 03 c0 a0 b7 01 c0 	mov    DWORD PTR ds:0xc00311f0,0xc001b7a0
c001c6da:	c7 05 f4 11 03 c0 a5 b7 01 c0 	mov    DWORD PTR ds:0xc00311f4,0xc001b7a5
c001c6e4:	c7 05 f8 11 03 c0 f8 bd 01 c0 	mov    DWORD PTR ds:0xc00311f8,0xc001bdf8
c001c6ee:	c7 05 fc 11 03 c0 92 bd 01 c0 	mov    DWORD PTR ds:0xc00311fc,0xc001bd92
c001c6f8:	c7 05 00 12 03 c0 6c ba 01 c0 	mov    DWORD PTR ds:0xc0031200,0xc001ba6c
c001c702:	c7 05 04 12 03 c0 d5 ba 01 c0 	mov    DWORD PTR ds:0xc0031204,0xc001bad5
c001c70c:	c7 05 08 12 03 c0 52 bb 01 c0 	mov    DWORD PTR ds:0xc0031208,0xc001bb52
c001c716:	c7 05 0c 12 03 c0 aa b7 01 c0 	mov    DWORD PTR ds:0xc003120c,0xc001b7aa
c001c720:	c7 05 10 12 03 c0 68 be 01 c0 	mov    DWORD PTR ds:0xc0031210,0xc001be68
c001c72a:	c7 05 14 12 03 c0 82 be 01 c0 	mov    DWORD PTR ds:0xc0031214,0xc001be82
c001c734:	c7 05 18 12 03 c0 82 be 01 c0 	mov    DWORD PTR ds:0xc0031218,0xc001be82
c001c73e:	c7 05 1c 12 03 c0 c3 be 01 c0 	mov    DWORD PTR ds:0xc003121c,0xc001bec3
c001c748:	c7 05 20 12 03 c0 27 bf 01 c0 	mov    DWORD PTR ds:0xc0031220,0xc001bf27
c001c752:	c7 05 24 12 03 c0 56 b9 01 c0 	mov    DWORD PTR ds:0xc0031224,0xc001b956
c001c75c:	c7 05 28 12 03 c0 8b bf 01 c0 	mov    DWORD PTR ds:0xc0031228,0xc001bf8b
c001c766:	c7 05 2c 12 03 c0 13 b9 01 c0 	mov    DWORD PTR ds:0xc003122c,0xc001b913
c001c770:	c7 05 30 12 03 c0 d7 bf 01 c0 	mov    DWORD PTR ds:0xc0031230,0xc001bfd7
c001c77a:	c7 05 34 12 03 c0 12 ba 01 c0 	mov    DWORD PTR ds:0xc0031234,0xc001ba12
c001c784:	c7 05 38 12 03 c0 5a c0 01 c0 	mov    DWORD PTR ds:0xc0031238,0xc001c05a
c001c78e:	c7 05 3c 12 03 c0 d5 bb 01 c0 	mov    DWORD PTR ds:0xc003123c,0xc001bbd5
c001c798:	c7 05 40 12 03 c0 81 c0 01 c0 	mov    DWORD PTR ds:0xc0031240,0xc001c081
c001c7a2:	c7 05 44 12 03 c0 d9 c0 01 c0 	mov    DWORD PTR ds:0xc0031244,0xc001c0d9
c001c7ac:	c7 05 48 12 03 c0 11 c2 01 c0 	mov    DWORD PTR ds:0xc0031248,0xc001c211
c001c7b6:	c7 05 4c 12 03 c0 b4 b7 01 c0 	mov    DWORD PTR ds:0xc003124c,0xc001b7b4
c001c7c0:	c7 05 50 12 03 c0 1e b8 01 c0 	mov    DWORD PTR ds:0xc0031250,0xc001b81e
c001c7ca:	c7 05 54 12 03 c0 64 b8 01 c0 	mov    DWORD PTR ds:0xc0031254,0xc001b864
c001c7d4:	c7 05 58 12 03 c0 30 c3 01 c0 	mov    DWORD PTR ds:0xc0031258,0xc001c330
c001c7de:	c7 05 5c 12 03 c0 9d be 01 c0 	mov    DWORD PTR ds:0xc003125c,0xc001be9d
c001c7e8:	c7 05 60 12 03 c0 b5 b8 01 c0 	mov    DWORD PTR ds:0xc0031260,0xc001b8b5
c001c7f2:	c7 05 64 12 03 c0 a2 c3 01 c0 	mov    DWORD PTR ds:0xc0031264,0xc001c3a2
c001c7fc:	c7 05 68 12 03 c0 e7 c3 01 c0 	mov    DWORD PTR ds:0xc0031268,0xc001c3e7
c001c806:	c7 05 6c 12 03 c0 5e b3 01 c0 	mov    DWORD PTR ds:0xc003126c,0xc001b35e
c001c810:	c7 05 70 12 03 c0 29 b5 01 c0 	mov    DWORD PTR ds:0xc0031270,0xc001b529
c001c81a:	c7 05 74 12 03 c0 51 b6 01 c0 	mov    DWORD PTR ds:0xc0031274,0xc001b651
c001c824:	c7 05 78 12 03 c0 ce b2 01 c0 	mov    DWORD PTR ds:0xc0031278,0xc001b2ce
c001c82e:	c7 05 7c 12 03 c0 03 b7 01 c0 	mov    DWORD PTR ds:0xc003127c,0xc001b703
c001c838:	c7 05 80 12 03 c0 47 b3 01 c0 	mov    DWORD PTR ds:0xc0031280,0xc001b347
c001c842:	c3                   	ret    

c001c843 <Sys::systemCall(regs*, void*)>:
c001c843:	53                   	push   ebx
c001c844:	83 ec 08             	sub    esp,0x8
c001c847:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c84b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c84e:	83 f8 7f             	cmp    eax,0x7f
c001c851:	77 16                	ja     c001c869 <Sys::systemCall(regs*, void*)+0x26>
c001c853:	8b 14 85 c0 11 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcee40]
c001c85a:	85 d2                	test   edx,edx
c001c85c:	74 0b                	je     c001c869 <Sys::systemCall(regs*, void*)+0x26>
c001c85e:	83 ec 0c             	sub    esp,0xc
c001c861:	53                   	push   ebx
c001c862:	ff d2                	call   edx
c001c864:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c867:	eb 0d                	jmp    c001c876 <Sys::systemCall(regs*, void*)+0x33>
c001c869:	52                   	push   edx
c001c86a:	52                   	push   edx
c001c86b:	50                   	push   eax
c001c86c:	68 65 c1 02 c0       	push   0xc002c165
c001c871:	e8 57 67 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001c876:	83 c4 10             	add    esp,0x10
c001c879:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c87e:	31 d2                	xor    edx,edx
c001c880:	83 c4 08             	add    esp,0x8
c001c883:	5b                   	pop    ebx
c001c884:	c3                   	ret    

c001c885 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c885:	55                   	push   ebp
c001c886:	57                   	push   edi
c001c887:	56                   	push   esi
c001c888:	53                   	push   ebx
c001c889:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c88f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c896:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c89d:	85 c0                	test   eax,eax
c001c89f:	0f 95 c1             	setne  cl
c001c8a2:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c8aa:	0f 94 c2             	sete   dl
c001c8ad:	84 d1                	test   cl,dl
c001c8af:	74 23                	je     c001c8d4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c8b1:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c8b7:	74 1b                	je     c001c8d4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c8b9:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c8bf:	89 da                	mov    edx,ebx
c001c8c1:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c8c7:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c8cd:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c8d4:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c8db:	05 ff 0f 00 00       	add    eax,0xfff
c001c8e0:	83 ec 0c             	sub    esp,0xc
c001c8e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c8e7:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c8ed:	c1 e8 0c             	shr    eax,0xc
c001c8f0:	89 ef                	mov    edi,ebp
c001c8f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c8f6:	c1 ef 0c             	shr    edi,0xc
c001c8f9:	6a 01                	push   0x1
c001c8fb:	e8 bd 52 ff ff       	call   c0011bbd <Virt::allocateKernelVirtualPages(int)>
c001c900:	89 c6                	mov    esi,eax
c001c902:	58                   	pop    eax
c001c903:	5a                   	pop    edx
c001c904:	57                   	push   edi
c001c905:	68 eb c1 02 c0       	push   0xc002c1eb
c001c90a:	e8 be 66 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001c90f:	59                   	pop    ecx
c001c910:	58                   	pop    eax
c001c911:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c915:	68 fd c1 02 c0       	push   0xc002c1fd
c001c91a:	e8 ae 66 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001c91f:	83 c4 10             	add    esp,0x10
c001c922:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c928:	0f 86 24 01 00 00    	jbe    c001ca52 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c92e:	c1 e7 0c             	shl    edi,0xc
c001c931:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c934:	89 df                	mov    edi,ebx
c001c936:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c93a:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c941:	01 dd                	add    ebp,ebx
c001c943:	29 fd                	sub    ebp,edi
c001c945:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c949:	0f 84 01 01 00 00    	je     c001ca50 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c94f:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c955:	76 05                	jbe    c001c95c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c957:	bd 00 10 00 00       	mov    ebp,0x1000
c001c95c:	83 ec 0c             	sub    esp,0xc
c001c95f:	31 d2                	xor    edx,edx
c001c961:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c968:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c96a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c96e:	50                   	push   eax
c001c96f:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c973:	50                   	push   eax
c001c974:	52                   	push   edx
c001c975:	55                   	push   ebp
c001c976:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c97d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c980:	83 c4 20             	add    esp,0x20
c001c983:	85 c0                	test   eax,eax
c001c985:	74 0a                	je     c001c991 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c987:	53                   	push   ebx
c001c988:	53                   	push   ebx
c001c989:	50                   	push   eax
c001c98a:	68 0f c2 02 c0       	push   0xc002c20f
c001c98f:	eb 0f                	jmp    c001c9a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c991:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c995:	74 20                	je     c001c9b7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c997:	51                   	push   ecx
c001c998:	51                   	push   ecx
c001c999:	6a 00                	push   0x0
c001c99b:	68 3a c2 02 c0       	push   0xc002c23a
c001c9a0:	e8 28 66 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001c9a5:	89 34 24             	mov    DWORD PTR [esp],esi
c001c9a8:	e8 80 56 ff ff       	call   c001202d <Virt::freeKernelVirtualPages(unsigned long)>
c001c9ad:	83 c4 10             	add    esp,0x10
c001c9b0:	31 c0                	xor    eax,eax
c001c9b2:	e9 55 01 00 00       	jmp    c001cb0c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c9b7:	e8 d8 14 00 00       	call   c001de94 <lockScheduler()>
c001c9bc:	e8 21 35 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001c9c1:	6a 07                	push   0x7
c001c9c3:	89 c5                	mov    ebp,eax
c001c9c5:	56                   	push   esi
c001c9c6:	50                   	push   eax
c001c9c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9cf:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9d5:	e8 ba 59 ff ff       	call   c0012394 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c9da:	83 c4 0c             	add    esp,0xc
c001c9dd:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9e4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9ea:	6a 00                	push   0x0
c001c9ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9f1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9f4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9fa:	e8 ff 57 ff ff       	call   c00121fe <VAS::mapOtherVASIn(bool, VAS*)>
c001c9ff:	58                   	pop    eax
c001ca00:	5a                   	pop    edx
c001ca01:	68 07 0c 00 00       	push   0xc07
c001ca06:	57                   	push   edi
c001ca07:	81 c7 00 10 00 00    	add    edi,0x1000
c001ca0d:	55                   	push   ebp
c001ca0e:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca15:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca1b:	6a 00                	push   0x0
c001ca1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca22:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca25:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca2b:	e8 1e 5d ff ff       	call   c001274e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca30:	83 c4 1c             	add    esp,0x1c
c001ca33:	68 00 10 00 00       	push   0x1000
c001ca38:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ca3c:	50                   	push   eax
c001ca3d:	56                   	push   esi
c001ca3e:	e8 01 3d fe ff       	call   c0000744 <memcpy>
c001ca43:	e8 4e 14 00 00       	call   c001de96 <unlockScheduler()>
c001ca48:	83 c4 10             	add    esp,0x10
c001ca4b:	e9 ea fe ff ff       	jmp    c001c93a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001ca50:	89 fb                	mov    ebx,edi
c001ca52:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001ca5a:	0f 86 9e 00 00 00    	jbe    c001cafe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001ca60:	e8 2f 14 00 00       	call   c001de94 <lockScheduler()>
c001ca65:	51                   	push   ecx
c001ca66:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ca6d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca73:	6a 00                	push   0x0
c001ca75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca7a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca7d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca83:	e8 76 57 ff ff       	call   c00121fe <VAS::mapOtherVASIn(bool, VAS*)>
c001ca88:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ca8c:	c1 e7 0c             	shl    edi,0xc
c001ca8f:	01 df                	add    edi,ebx
c001ca91:	83 c4 10             	add    esp,0x10
c001ca94:	39 fb                	cmp    ebx,edi
c001ca96:	74 61                	je     c001caf9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001ca98:	e8 45 34 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001ca9d:	6a 07                	push   0x7
c001ca9f:	89 c5                	mov    ebp,eax
c001caa1:	56                   	push   esi
c001caa2:	50                   	push   eax
c001caa3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001caa8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001caab:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cab1:	e8 de 58 ff ff       	call   c0012394 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cab6:	58                   	pop    eax
c001cab7:	5a                   	pop    edx
c001cab8:	68 07 0c 00 00       	push   0xc07
c001cabd:	53                   	push   ebx
c001cabe:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cac4:	55                   	push   ebp
c001cac5:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cacc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cad2:	6a 00                	push   0x0
c001cad4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cad9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cadc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cae2:	e8 67 5c ff ff       	call   c001274e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cae7:	83 c4 1c             	add    esp,0x1c
c001caea:	68 00 10 00 00       	push   0x1000
c001caef:	6a 00                	push   0x0
c001caf1:	56                   	push   esi
c001caf2:	e8 81 3c fe ff       	call   c0000778 <memset>
c001caf7:	eb 98                	jmp    c001ca91 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001caf9:	e8 98 13 00 00       	call   c001de96 <unlockScheduler()>
c001cafe:	83 ec 0c             	sub    esp,0xc
c001cb01:	56                   	push   esi
c001cb02:	e8 26 55 ff ff       	call   c001202d <Virt::freeKernelVirtualPages(unsigned long)>
c001cb07:	83 c4 10             	add    esp,0x10
c001cb0a:	b0 01                	mov    al,0x1
c001cb0c:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cb12:	5b                   	pop    ebx
c001cb13:	5e                   	pop    esi
c001cb14:	5f                   	pop    edi
c001cb15:	5d                   	pop    ebp
c001cb16:	c3                   	ret    

c001cb17 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cb17:	55                   	push   ebp
c001cb18:	57                   	push   edi
c001cb19:	56                   	push   esi
c001cb1a:	53                   	push   ebx
c001cb1b:	83 ec 48             	sub    esp,0x48
c001cb1e:	68 14 01 00 00       	push   0x114
c001cb23:	e8 18 2d ff ff       	call   c000f840 <malloc>
c001cb28:	83 c4 0c             	add    esp,0xc
c001cb2b:	89 c6                	mov    esi,eax
c001cb2d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cb31:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cb35:	50                   	push   eax
c001cb36:	e8 eb 69 ff ff       	call   c0013526 <File::File(char const*, Process*)>
c001cb3b:	58                   	pop    eax
c001cb3c:	5a                   	pop    edx
c001cb3d:	6a 01                	push   0x1
c001cb3f:	56                   	push   esi
c001cb40:	e8 45 6a ff ff       	call   c001358a <File::open(FileOpenMode)>
c001cb45:	83 c4 10             	add    esp,0x10
c001cb48:	85 c0                	test   eax,eax
c001cb4a:	0f 85 47 01 00 00    	jne    c001cc97 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb50:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cb58:	83 ec 0c             	sub    esp,0xc
c001cb5b:	6a 34                	push   0x34
c001cb5d:	e8 de 2c ff ff       	call   c000f840 <malloc>
c001cb62:	89 c3                	mov    ebx,eax
c001cb64:	58                   	pop    eax
c001cb65:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb67:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cb6b:	57                   	push   edi
c001cb6c:	53                   	push   ebx
c001cb6d:	6a 00                	push   0x0
c001cb6f:	6a 34                	push   0x34
c001cb71:	56                   	push   esi
c001cb72:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb75:	83 c4 20             	add    esp,0x20
c001cb78:	85 c0                	test   eax,eax
c001cb7a:	0f 85 17 01 00 00    	jne    c001cc97 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb80:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cb86:	0f 85 0b 01 00 00    	jne    c001cc97 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb8c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cb8f:	85 c0                	test   eax,eax
c001cb91:	0f 84 00 01 00 00    	je     c001cc97 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb97:	31 d2                	xor    edx,edx
c001cb99:	55                   	push   ebp
c001cb9a:	52                   	push   edx
c001cb9b:	50                   	push   eax
c001cb9c:	56                   	push   esi
c001cb9d:	e8 a6 6a ff ff       	call   c0013648 <File::seek(unsigned long long)>
c001cba2:	83 c4 10             	add    esp,0x10
c001cba5:	85 c0                	test   eax,eax
c001cba7:	0f 85 ea 00 00 00    	jne    c001cc97 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbad:	83 ec 0c             	sub    esp,0xc
c001cbb0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cbb3:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cbb7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cbbb:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cbbf:	0f af c2             	imul   eax,edx
c001cbc2:	50                   	push   eax
c001cbc3:	e8 78 2c ff ff       	call   c000f840 <malloc>
c001cbc8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cbca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cbce:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbd1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cbd5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cbd9:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cbdd:	0f af c2             	imul   eax,edx
c001cbe0:	99                   	cdq    
c001cbe1:	52                   	push   edx
c001cbe2:	50                   	push   eax
c001cbe3:	56                   	push   esi
c001cbe4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbe7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cbea:	83 c4 20             	add    esp,0x20
c001cbed:	85 c0                	test   eax,eax
c001cbef:	0f 84 a2 00 00 00    	je     c001cc97 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbf5:	31 d2                	xor    edx,edx
c001cbf7:	51                   	push   ecx
c001cbf8:	52                   	push   edx
c001cbf9:	50                   	push   eax
c001cbfa:	56                   	push   esi
c001cbfb:	e8 48 6a ff ff       	call   c0013648 <File::seek(unsigned long long)>
c001cc00:	83 c4 10             	add    esp,0x10
c001cc03:	85 c0                	test   eax,eax
c001cc05:	0f 85 8c 00 00 00    	jne    c001cc97 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cc0b:	83 ec 0c             	sub    esp,0xc
c001cc0e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cc12:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cc16:	31 ed                	xor    ebp,ebp
c001cc18:	0f af c2             	imul   eax,edx
c001cc1b:	50                   	push   eax
c001cc1c:	e8 1f 2c ff ff       	call   c000f840 <malloc>
c001cc21:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cc23:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cc27:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cc2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc2e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cc32:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cc36:	0f af c2             	imul   eax,edx
c001cc39:	99                   	cdq    
c001cc3a:	52                   	push   edx
c001cc3b:	50                   	push   eax
c001cc3c:	56                   	push   esi
c001cc3d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc40:	83 c4 20             	add    esp,0x20
c001cc43:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cc4b:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cc4f:	0f 86 80 00 00 00    	jbe    c001ccd5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cc55:	0f b7 fd             	movzx  edi,bp
c001cc58:	c1 e7 05             	shl    edi,0x5
c001cc5b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cc5f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cc62:	75 6b                	jne    c001cccf <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc64:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cc67:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc6b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cc6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc72:	52                   	push   edx
c001cc73:	31 d2                	xor    edx,edx
c001cc75:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cc78:	52                   	push   edx
c001cc79:	50                   	push   eax
c001cc7a:	56                   	push   esi
c001cc7b:	e8 c8 69 ff ff       	call   c0013648 <File::seek(unsigned long long)>
c001cc80:	83 c4 10             	add    esp,0x10
c001cc83:	85 c0                	test   eax,eax
c001cc85:	74 17                	je     c001cc9e <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cc87:	83 ec 0c             	sub    esp,0xc
c001cc8a:	68 66 c2 02 c0       	push   0xc002c266
c001cc8f:	e8 39 63 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001cc94:	83 c4 10             	add    esp,0x10
c001cc97:	31 c0                	xor    eax,eax
c001cc99:	e9 87 00 00 00       	jmp    c001cd25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cc9e:	83 ec 0c             	sub    esp,0xc
c001cca1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cca4:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cca7:	50                   	push   eax
c001cca8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ccac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ccb0:	56                   	push   esi
c001ccb1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001ccb5:	e8 cb fb ff ff       	call   c001c885 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001ccba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ccbe:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001ccc2:	83 c4 20             	add    esp,0x20
c001ccc5:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ccc9:	73 04                	jae    c001cccf <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cccb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cccf:	45                   	inc    ebp
c001ccd0:	e9 76 ff ff ff       	jmp    c001cc4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001ccd5:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ccd9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ccdd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cce1:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cce7:	83 ec 0c             	sub    esp,0xc
c001ccea:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001ccf0:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ccf5:	05 00 10 00 00       	add    eax,0x1000
c001ccfa:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ccfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd01:	e8 4a 2b ff ff       	call   c000f850 <free>
c001cd06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd09:	e8 42 2b ff ff       	call   c000f850 <free>
c001cd0e:	58                   	pop    eax
c001cd0f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd13:	e8 38 2b ff ff       	call   c000f850 <free>
c001cd18:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd1b:	e8 c8 68 ff ff       	call   c00135e8 <File::close()>
c001cd20:	83 c4 10             	add    esp,0x10
c001cd23:	b0 01                	mov    al,0x1
c001cd25:	83 c4 3c             	add    esp,0x3c
c001cd28:	5b                   	pop    ebx
c001cd29:	5e                   	pop    esi
c001cd2a:	5f                   	pop    edi
c001cd2b:	5d                   	pop    ebp
c001cd2c:	c3                   	ret    

c001cd2d <Thr::runtimeReferenceHelper()>:
c001cd2d:	83 ec 18             	sub    esp,0x18
c001cd30:	68 6e c2 02 c0       	push   0xc002c26e
c001cd35:	e8 93 62 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001cd3a:	fa                   	cli    
c001cd3b:	83 c4 10             	add    esp,0x10
c001cd3e:	eb fe                	jmp    c001cd3e <Thr::runtimeReferenceHelper()+0x11>

c001cd40 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cd40:	57                   	push   edi
c001cd41:	56                   	push   esi
c001cd42:	53                   	push   ebx
c001cd43:	31 db                	xor    ebx,ebx
c001cd45:	39 1d 60 1b 03 c0    	cmp    DWORD PTR ds:0xc0031b60,ebx
c001cd4b:	7e 3c                	jle    c001cd89 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cd4d:	8b 34 9d e0 1a 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce520]
c001cd54:	31 ff                	xor    edi,edi
c001cd56:	39 3c 9d e0 19 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce620],edi
c001cd5d:	7e 27                	jle    c001cd86 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cd5f:	50                   	push   eax
c001cd60:	50                   	push   eax
c001cd61:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd65:	8b 06                	mov    eax,DWORD PTR [esi]
c001cd67:	03 04 9d 60 1a 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce5a0]
c001cd6e:	50                   	push   eax
c001cd6f:	e8 4c 3b fe ff       	call   c00008c0 <strcmp>
c001cd74:	83 c4 10             	add    esp,0x10
c001cd77:	85 c0                	test   eax,eax
c001cd79:	75 05                	jne    c001cd80 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cd7b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cd7e:	eb 0b                	jmp    c001cd8b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cd80:	83 c6 10             	add    esi,0x10
c001cd83:	47                   	inc    edi
c001cd84:	eb d0                	jmp    c001cd56 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cd86:	43                   	inc    ebx
c001cd87:	eb bc                	jmp    c001cd45 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cd89:	31 c0                	xor    eax,eax
c001cd8b:	5b                   	pop    ebx
c001cd8c:	5e                   	pop    esi
c001cd8d:	5f                   	pop    edi
c001cd8e:	c3                   	ret    

c001cd8f <Thr::loadKernelSymbolTable(char const*)>:
c001cd8f:	55                   	push   ebp
c001cd90:	57                   	push   edi
c001cd91:	56                   	push   esi
c001cd92:	53                   	push   ebx
c001cd93:	83 ec 68             	sub    esp,0x68
c001cd96:	8b 35 b4 1b 03 c0    	mov    esi,DWORD PTR ds:0xc0031bb4
c001cd9c:	68 14 01 00 00       	push   0x114
c001cda1:	e8 9a 2a ff ff       	call   c000f840 <malloc>
c001cda6:	83 c4 0c             	add    esp,0xc
c001cda9:	89 c3                	mov    ebx,eax
c001cdab:	56                   	push   esi
c001cdac:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cdb0:	50                   	push   eax
c001cdb1:	e8 70 67 ff ff       	call   c0013526 <File::File(char const*, Process*)>
c001cdb6:	5e                   	pop    esi
c001cdb7:	5f                   	pop    edi
c001cdb8:	6a 01                	push   0x1
c001cdba:	53                   	push   ebx
c001cdbb:	e8 ca 67 ff ff       	call   c001358a <File::open(FileOpenMode)>
c001cdc0:	83 c4 10             	add    esp,0x10
c001cdc3:	85 c0                	test   eax,eax
c001cdc5:	74 0a                	je     c001cdd1 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cdc7:	83 ec 0c             	sub    esp,0xc
c001cdca:	68 90 c2 02 c0       	push   0xc002c290
c001cdcf:	eb 34                	jmp    c001ce05 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cdd1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cdd9:	83 ec 0c             	sub    esp,0xc
c001cddc:	6a 34                	push   0x34
c001cdde:	e8 5d 2a ff ff       	call   c000f840 <malloc>
c001cde3:	59                   	pop    ecx
c001cde4:	89 c7                	mov    edi,eax
c001cde6:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cdea:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cdec:	56                   	push   esi
c001cded:	57                   	push   edi
c001cdee:	6a 00                	push   0x0
c001cdf0:	6a 34                	push   0x34
c001cdf2:	53                   	push   ebx
c001cdf3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdf6:	83 c4 20             	add    esp,0x20
c001cdf9:	85 c0                	test   eax,eax
c001cdfb:	74 17                	je     c001ce14 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cdfd:	83 ec 0c             	sub    esp,0xc
c001ce00:	68 a7 c2 02 c0       	push   0xc002c2a7
c001ce05:	e8 65 d8 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001ce0a:	83 c4 10             	add    esp,0x10
c001ce0d:	31 c0                	xor    eax,eax
c001ce0f:	e9 31 02 00 00       	jmp    c001d045 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001ce14:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ce1a:	75 e1                	jne    c001cdfd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce1c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ce1f:	85 c0                	test   eax,eax
c001ce21:	74 da                	je     c001cdfd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce23:	52                   	push   edx
c001ce24:	31 d2                	xor    edx,edx
c001ce26:	52                   	push   edx
c001ce27:	50                   	push   eax
c001ce28:	53                   	push   ebx
c001ce29:	e8 1a 68 ff ff       	call   c0013648 <File::seek(unsigned long long)>
c001ce2e:	83 c4 10             	add    esp,0x10
c001ce31:	85 c0                	test   eax,eax
c001ce33:	75 c8                	jne    c001cdfd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce35:	83 ec 0c             	sub    esp,0xc
c001ce38:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce3c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce40:	31 ed                	xor    ebp,ebp
c001ce42:	0f af c2             	imul   eax,edx
c001ce45:	50                   	push   eax
c001ce46:	e8 f5 29 ff ff       	call   c000f840 <malloc>
c001ce4b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ce4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce51:	89 34 24             	mov    DWORD PTR [esp],esi
c001ce54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce58:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce5c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce60:	0f af c2             	imul   eax,edx
c001ce63:	99                   	cdq    
c001ce64:	52                   	push   edx
c001ce65:	50                   	push   eax
c001ce66:	53                   	push   ebx
c001ce67:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce6a:	83 c4 20             	add    esp,0x20
c001ce6d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce75:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ce7d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce85:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ce8d:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ce91:	0f 86 aa 00 00 00    	jbe    c001cf41 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ce97:	0f b7 f5             	movzx  esi,bp
c001ce9a:	6b f6 28             	imul   esi,esi,0x28
c001ce9d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cea1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cea4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cea8:	50                   	push   eax
c001cea9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cead:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ceb1:	8b 16                	mov    edx,DWORD PTR [esi]
c001ceb3:	6b c0 28             	imul   eax,eax,0x28
c001ceb6:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ceba:	89 d0                	mov    eax,edx
c001cebc:	31 d2                	xor    edx,edx
c001cebe:	52                   	push   edx
c001cebf:	50                   	push   eax
c001cec0:	53                   	push   ebx
c001cec1:	e8 82 67 ff ff       	call   c0013648 <File::seek(unsigned long long)>
c001cec6:	83 c4 0c             	add    esp,0xc
c001cec9:	6a 20                	push   0x20
c001cecb:	6a 00                	push   0x0
c001cecd:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ced1:	52                   	push   edx
c001ced2:	e8 a1 38 fe ff       	call   c0000778 <memset>
c001ced7:	58                   	pop    eax
c001ced8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ceda:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cede:	51                   	push   ecx
c001cedf:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cee3:	52                   	push   edx
c001cee4:	6a 00                	push   0x0
c001cee6:	6a 1f                	push   0x1f
c001cee8:	53                   	push   ebx
c001cee9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ceec:	83 c4 18             	add    esp,0x18
c001ceef:	68 be c2 02 c0       	push   0xc002c2be
c001cef4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cef8:	52                   	push   edx
c001cef9:	e8 c2 39 fe ff       	call   c00008c0 <strcmp>
c001cefe:	83 c4 10             	add    esp,0x10
c001cf01:	85 c0                	test   eax,eax
c001cf03:	75 0f                	jne    c001cf14 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cf05:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cf0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cf14:	50                   	push   eax
c001cf15:	50                   	push   eax
c001cf16:	68 c6 c2 02 c0       	push   0xc002c2c6
c001cf1b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cf1f:	50                   	push   eax
c001cf20:	e8 9b 39 fe ff       	call   c00008c0 <strcmp>
c001cf25:	83 c4 10             	add    esp,0x10
c001cf28:	85 c0                	test   eax,eax
c001cf2a:	75 0f                	jne    c001cf3b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cf2c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf3b:	45                   	inc    ebp
c001cf3c:	e9 4c ff ff ff       	jmp    c001ce8d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cf41:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cf46:	75 10                	jne    c001cf58 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cf48:	83 ec 0c             	sub    esp,0xc
c001cf4b:	68 ce c2 02 c0       	push   0xc002c2ce
c001cf50:	e8 1a d7 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001cf55:	83 c4 10             	add    esp,0x10
c001cf58:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cf5d:	75 10                	jne    c001cf6f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cf5f:	83 ec 0c             	sub    esp,0xc
c001cf62:	68 ce c2 02 c0       	push   0xc002c2ce
c001cf67:	e8 03 d7 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001cf6c:	83 c4 10             	add    esp,0x10
c001cf6f:	31 d2                	xor    edx,edx
c001cf71:	50                   	push   eax
c001cf72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf76:	52                   	push   edx
c001cf77:	50                   	push   eax
c001cf78:	53                   	push   ebx
c001cf79:	e8 ca 66 ff ff       	call   c0013648 <File::seek(unsigned long long)>
c001cf7e:	5a                   	pop    edx
c001cf7f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cf83:	e8 b8 28 ff ff       	call   c000f840 <malloc>
c001cf88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf8c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf90:	31 c9                	xor    ecx,ecx
c001cf92:	5e                   	pop    esi
c001cf93:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf95:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cf99:	55                   	push   ebp
c001cf9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf9e:	51                   	push   ecx
c001cf9f:	52                   	push   edx
c001cfa0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cfa4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cfa8:	53                   	push   ebx
c001cfa9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cfac:	83 c4 14             	add    esp,0x14
c001cfaf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cfb3:	e8 88 28 ff ff       	call   c000f840 <malloc>
c001cfb8:	89 c6                	mov    esi,eax
c001cfba:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cfbc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cfbf:	56                   	push   esi
c001cfc0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cfc4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cfc8:	51                   	push   ecx
c001cfc9:	52                   	push   edx
c001cfca:	53                   	push   ebx
c001cfcb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cfce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cfd2:	8b 15 60 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b60
c001cfd8:	83 c4 1c             	add    esp,0x1c
c001cfdb:	c1 e8 04             	shr    eax,0x4
c001cfde:	89 04 95 e0 19 03 c0 	mov    DWORD PTR [edx*4-0x3ffce620],eax
c001cfe5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cfe9:	31 d2                	xor    edx,edx
c001cfeb:	52                   	push   edx
c001cfec:	50                   	push   eax
c001cfed:	53                   	push   ebx
c001cfee:	e8 55 66 ff ff       	call   c0013648 <File::seek(unsigned long long)>
c001cff3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cff5:	31 d2                	xor    edx,edx
c001cff7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cffa:	56                   	push   esi
c001cffb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cfff:	52                   	push   edx
c001d000:	50                   	push   eax
c001d001:	53                   	push   ebx
c001d002:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d005:	83 c4 14             	add    esp,0x14
c001d008:	53                   	push   ebx
c001d009:	e8 da 65 ff ff       	call   c00135e8 <File::close()>
c001d00e:	5d                   	pop    ebp
c001d00f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d013:	e8 38 28 ff ff       	call   c000f850 <free>
c001d018:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d01b:	e8 30 28 ff ff       	call   c000f850 <free>
c001d020:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c001d025:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d029:	8d 50 01             	lea    edx,[eax+0x1]
c001d02c:	89 0c 85 e0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce520],ecx
c001d033:	89 34 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],esi
c001d03a:	89 15 60 1b 03 c0    	mov    DWORD PTR ds:0xc0031b60,edx
c001d040:	83 c4 10             	add    esp,0x10
c001d043:	b0 01                	mov    al,0x1
c001d045:	83 c4 5c             	add    esp,0x5c
c001d048:	5b                   	pop    ebx
c001d049:	5e                   	pop    esi
c001d04a:	5f                   	pop    edi
c001d04b:	5d                   	pop    ebp
c001d04c:	c3                   	ret    

c001d04d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d04d:	55                   	push   ebp
c001d04e:	57                   	push   edi
c001d04f:	56                   	push   esi
c001d050:	53                   	push   ebx
c001d051:	81 ec 68 03 00 00    	sub    esp,0x368
c001d057:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d05e:	8b 1d b4 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031bb4
c001d064:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d068:	68 14 01 00 00       	push   0x114
c001d06d:	e8 ce 27 ff ff       	call   c000f840 <malloc>
c001d072:	83 c4 0c             	add    esp,0xc
c001d075:	89 c5                	mov    ebp,eax
c001d077:	53                   	push   ebx
c001d078:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d07f:	50                   	push   eax
c001d080:	e8 a1 64 ff ff       	call   c0013526 <File::File(char const*, Process*)>
c001d085:	5e                   	pop    esi
c001d086:	5f                   	pop    edi
c001d087:	6a 01                	push   0x1
c001d089:	55                   	push   ebp
c001d08a:	e8 fb 64 ff ff       	call   c001358a <File::open(FileOpenMode)>
c001d08f:	83 c4 10             	add    esp,0x10
c001d092:	85 c0                	test   eax,eax
c001d094:	0f 85 8d 06 00 00    	jne    c001d727 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d09a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d0a2:	83 ec 0c             	sub    esp,0xc
c001d0a5:	6a 34                	push   0x34
c001d0a7:	e8 94 27 ff ff       	call   c000f840 <malloc>
c001d0ac:	5b                   	pop    ebx
c001d0ad:	89 c7                	mov    edi,eax
c001d0af:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d0b3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d0b6:	53                   	push   ebx
c001d0b7:	57                   	push   edi
c001d0b8:	6a 00                	push   0x0
c001d0ba:	6a 34                	push   0x34
c001d0bc:	55                   	push   ebp
c001d0bd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d0c0:	83 c4 20             	add    esp,0x20
c001d0c3:	85 c0                	test   eax,eax
c001d0c5:	0f 85 5c 06 00 00    	jne    c001d727 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0cb:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d0d1:	0f 85 50 06 00 00    	jne    c001d727 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0d7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d0da:	85 c0                	test   eax,eax
c001d0dc:	0f 84 45 06 00 00    	je     c001d727 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0e2:	31 d2                	xor    edx,edx
c001d0e4:	51                   	push   ecx
c001d0e5:	52                   	push   edx
c001d0e6:	50                   	push   eax
c001d0e7:	55                   	push   ebp
c001d0e8:	e8 5b 65 ff ff       	call   c0013648 <File::seek(unsigned long long)>
c001d0ed:	83 c4 10             	add    esp,0x10
c001d0f0:	85 c0                	test   eax,eax
c001d0f2:	0f 85 2f 06 00 00    	jne    c001d727 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0f8:	83 ec 0c             	sub    esp,0xc
c001d0fb:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d0fe:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d102:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d106:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d10a:	0f af c2             	imul   eax,edx
c001d10d:	50                   	push   eax
c001d10e:	e8 2d 27 ff ff       	call   c000f840 <malloc>
c001d113:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d116:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d11a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d11d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d121:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d125:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d129:	0f af c2             	imul   eax,edx
c001d12c:	99                   	cdq    
c001d12d:	52                   	push   edx
c001d12e:	50                   	push   eax
c001d12f:	55                   	push   ebp
c001d130:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d133:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d136:	83 c4 20             	add    esp,0x20
c001d139:	85 c0                	test   eax,eax
c001d13b:	0f 84 e6 05 00 00    	je     c001d727 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d141:	52                   	push   edx
c001d142:	31 d2                	xor    edx,edx
c001d144:	52                   	push   edx
c001d145:	50                   	push   eax
c001d146:	55                   	push   ebp
c001d147:	e8 fc 64 ff ff       	call   c0013648 <File::seek(unsigned long long)>
c001d14c:	83 c4 10             	add    esp,0x10
c001d14f:	85 c0                	test   eax,eax
c001d151:	0f 85 d0 05 00 00    	jne    c001d727 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d157:	83 ec 0c             	sub    esp,0xc
c001d15a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d15e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d162:	31 f6                	xor    esi,esi
c001d164:	0f af c2             	imul   eax,edx
c001d167:	50                   	push   eax
c001d168:	e8 d3 26 ff ff       	call   c000f840 <malloc>
c001d16d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d170:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d174:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d177:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d17b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d17f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d183:	0f af c2             	imul   eax,edx
c001d186:	99                   	cdq    
c001d187:	52                   	push   edx
c001d188:	50                   	push   eax
c001d189:	55                   	push   ebp
c001d18a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d18d:	83 c4 20             	add    esp,0x20
c001d190:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d194:	0f 86 8a 00 00 00    	jbe    c001d224 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d19a:	0f b7 de             	movzx  ebx,si
c001d19d:	c1 e3 05             	shl    ebx,0x5
c001d1a0:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d1a4:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d1a7:	75 75                	jne    c001d21e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d1a9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d1ac:	31 d2                	xor    edx,edx
c001d1ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d1b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1b9:	50                   	push   eax
c001d1ba:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d1bd:	52                   	push   edx
c001d1be:	50                   	push   eax
c001d1bf:	55                   	push   ebp
c001d1c0:	e8 83 64 ff ff       	call   c0013648 <File::seek(unsigned long long)>
c001d1c5:	83 c4 10             	add    esp,0x10
c001d1c8:	85 c0                	test   eax,eax
c001d1ca:	0f 85 57 05 00 00    	jne    c001d727 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d1d0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d1d7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d1da:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d1de:	31 d2                	xor    edx,edx
c001d1e0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d1e4:	83 ec 0c             	sub    esp,0xc
c001d1e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d1eb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1f2:	50                   	push   eax
c001d1f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d1f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1fb:	52                   	push   edx
c001d1fc:	50                   	push   eax
c001d1fd:	55                   	push   ebp
c001d1fe:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d201:	83 c4 1c             	add    esp,0x1c
c001d204:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d207:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d20a:	50                   	push   eax
c001d20b:	6a 00                	push   0x0
c001d20d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d211:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d215:	50                   	push   eax
c001d216:	e8 5d 35 fe ff       	call   c0000778 <memset>
c001d21b:	83 c4 10             	add    esp,0x10
c001d21e:	46                   	inc    esi
c001d21f:	e9 6c ff ff ff       	jmp    c001d190 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d224:	53                   	push   ebx
c001d225:	31 db                	xor    ebx,ebx
c001d227:	68 00 01 00 00       	push   0x100
c001d22c:	6a 00                	push   0x0
c001d22e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d232:	50                   	push   eax
c001d233:	e8 40 35 fe ff       	call   c0000778 <memset>
c001d238:	83 c4 0c             	add    esp,0xc
c001d23b:	68 00 01 00 00       	push   0x100
c001d240:	6a 00                	push   0x0
c001d242:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d249:	50                   	push   eax
c001d24a:	e8 29 35 fe ff       	call   c0000778 <memset>
c001d24f:	83 c4 10             	add    esp,0x10
c001d252:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d25a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d262:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d26a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d272:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d27a:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d27e:	0f 86 30 01 00 00    	jbe    c001d3b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d284:	0f b7 f3             	movzx  esi,bx
c001d287:	6b f6 28             	imul   esi,esi,0x28
c001d28a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d28e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d291:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d295:	52                   	push   edx
c001d296:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d29a:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d29e:	8b 06                	mov    eax,DWORD PTR [esi]
c001d2a0:	6b d2 28             	imul   edx,edx,0x28
c001d2a3:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d2a7:	31 d2                	xor    edx,edx
c001d2a9:	52                   	push   edx
c001d2aa:	50                   	push   eax
c001d2ab:	55                   	push   ebp
c001d2ac:	e8 97 63 ff ff       	call   c0013648 <File::seek(unsigned long long)>
c001d2b1:	83 c4 0c             	add    esp,0xc
c001d2b4:	6a 20                	push   0x20
c001d2b6:	6a 00                	push   0x0
c001d2b8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d2bf:	51                   	push   ecx
c001d2c0:	e8 b3 34 fe ff       	call   c0000778 <memset>
c001d2c5:	59                   	pop    ecx
c001d2c6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d2c9:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d2cd:	52                   	push   edx
c001d2ce:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d2d5:	51                   	push   ecx
c001d2d6:	6a 00                	push   0x0
c001d2d8:	6a 1f                	push   0x1f
c001d2da:	55                   	push   ebp
c001d2db:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d2de:	83 c4 1c             	add    esp,0x1c
c001d2e1:	6a 09                	push   0x9
c001d2e3:	68 e8 c2 02 c0       	push   0xc002c2e8
c001d2e8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d2ef:	51                   	push   ecx
c001d2f0:	e8 4b 33 fe ff       	call   c0000640 <memcmp>
c001d2f5:	83 c4 10             	add    esp,0x10
c001d2f8:	85 c0                	test   eax,eax
c001d2fa:	75 21                	jne    c001d31d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d2fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d300:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d304:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d308:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d30c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d30f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d316:	89 d0                	mov    eax,edx
c001d318:	40                   	inc    eax
c001d319:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d31d:	50                   	push   eax
c001d31e:	6a 09                	push   0x9
c001d320:	68 f2 c2 02 c0       	push   0xc002c2f2
c001d325:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d32c:	50                   	push   eax
c001d32d:	e8 0e 33 fe ff       	call   c0000640 <memcmp>
c001d332:	83 c4 10             	add    esp,0x10
c001d335:	85 c0                	test   eax,eax
c001d337:	75 21                	jne    c001d35a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d339:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d33d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d341:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d345:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d349:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d34c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d353:	89 d0                	mov    eax,edx
c001d355:	40                   	inc    eax
c001d356:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d35a:	50                   	push   eax
c001d35b:	50                   	push   eax
c001d35c:	68 be c2 02 c0       	push   0xc002c2be
c001d361:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d368:	50                   	push   eax
c001d369:	e8 52 35 fe ff       	call   c00008c0 <strcmp>
c001d36e:	83 c4 10             	add    esp,0x10
c001d371:	85 c0                	test   eax,eax
c001d373:	75 0f                	jne    c001d384 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d375:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d378:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d37c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d380:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d384:	50                   	push   eax
c001d385:	50                   	push   eax
c001d386:	68 c6 c2 02 c0       	push   0xc002c2c6
c001d38b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d392:	50                   	push   eax
c001d393:	e8 28 35 fe ff       	call   c00008c0 <strcmp>
c001d398:	83 c4 10             	add    esp,0x10
c001d39b:	85 c0                	test   eax,eax
c001d39d:	75 0f                	jne    c001d3ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d39f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d3a2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d3a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3aa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d3ae:	43                   	inc    ebx
c001d3af:	e9 c6 fe ff ff       	jmp    c001d27a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d3b4:	31 d2                	xor    edx,edx
c001d3b6:	50                   	push   eax
c001d3b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d3bb:	52                   	push   edx
c001d3bc:	50                   	push   eax
c001d3bd:	55                   	push   ebp
c001d3be:	e8 85 62 ff ff       	call   c0013648 <File::seek(unsigned long long)>
c001d3c3:	58                   	pop    eax
c001d3c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d3c8:	e8 73 24 ff ff       	call   c000f840 <malloc>
c001d3cd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3d0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d3d4:	31 d2                	xor    edx,edx
c001d3d6:	58                   	pop    eax
c001d3d7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d3db:	53                   	push   ebx
c001d3dc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d3e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3e4:	52                   	push   edx
c001d3e5:	50                   	push   eax
c001d3e6:	55                   	push   ebp
c001d3e7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3ea:	83 c4 14             	add    esp,0x14
c001d3ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3f1:	e8 4a 24 ff ff       	call   c000f840 <malloc>
c001d3f6:	31 d2                	xor    edx,edx
c001d3f8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d3fc:	83 c4 0c             	add    esp,0xc
c001d3ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d403:	52                   	push   edx
c001d404:	50                   	push   eax
c001d405:	55                   	push   ebp
c001d406:	e8 3d 62 ff ff       	call   c0013648 <File::seek(unsigned long long)>
c001d40b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d40e:	31 d2                	xor    edx,edx
c001d410:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d413:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d417:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d41b:	52                   	push   edx
c001d41c:	50                   	push   eax
c001d41d:	55                   	push   ebp
c001d41e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d421:	83 c4 20             	add    esp,0x20
c001d424:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d42c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d430:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d434:	0f 84 f1 02 00 00    	je     c001d72b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d43a:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d441:	31 d2                	xor    edx,edx
c001d443:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d447:	c1 e8 03             	shr    eax,0x3
c001d44a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d44e:	51                   	push   ecx
c001d44f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d453:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d457:	52                   	push   edx
c001d458:	50                   	push   eax
c001d459:	55                   	push   ebp
c001d45a:	e8 e9 61 ff ff       	call   c0013648 <File::seek(unsigned long long)>
c001d45f:	5b                   	pop    ebx
c001d460:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d464:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d46b:	e8 d0 23 ff ff       	call   c000f840 <malloc>
c001d470:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d473:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d477:	31 d2                	xor    edx,edx
c001d479:	5e                   	pop    esi
c001d47a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d47e:	50                   	push   eax
c001d47f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d483:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d487:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d48e:	52                   	push   edx
c001d48f:	50                   	push   eax
c001d490:	55                   	push   ebp
c001d491:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d494:	83 c4 20             	add    esp,0x20
c001d497:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d49f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d4a3:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d4a7:	0f 8d 62 02 00 00    	jge    c001d70f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d4ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d4b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4b5:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d4ba:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d4bd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d4c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4c5:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d4c9:	89 d8                	mov    eax,ebx
c001d4cb:	c1 e8 08             	shr    eax,0x8
c001d4ce:	89 c6                	mov    esi,eax
c001d4d0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d4d4:	c1 e6 04             	shl    esi,0x4
c001d4d7:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d4db:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d4de:	85 d2                	test   edx,edx
c001d4e0:	0f 85 bf 00 00 00    	jne    c001d5a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4e6:	83 ec 0c             	sub    esp,0xc
c001d4e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4ed:	03 06                	add    eax,DWORD PTR [esi]
c001d4ef:	50                   	push   eax
c001d4f0:	e8 4b f8 ff ff       	call   c001cd40 <Thr::getAddressOfKernelSymbol(char const*)>
c001d4f5:	83 c4 10             	add    esp,0x10
c001d4f8:	89 c2                	mov    edx,eax
c001d4fa:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d4ff:	85 c0                	test   eax,eax
c001d501:	0f 85 9e 00 00 00    	jne    c001d5a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d507:	83 ec 0c             	sub    esp,0xc
c001d50a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d50e:	03 06                	add    eax,DWORD PTR [esi]
c001d510:	50                   	push   eax
c001d511:	e8 df 0f ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d516:	83 c4 10             	add    esp,0x10
c001d519:	89 c2                	mov    edx,eax
c001d51b:	85 c0                	test   eax,eax
c001d51d:	0f 85 82 00 00 00    	jne    c001d5a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d523:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d527:	50                   	push   eax
c001d528:	50                   	push   eax
c001d529:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d52d:	03 06                	add    eax,DWORD PTR [esi]
c001d52f:	50                   	push   eax
c001d530:	68 fc c2 02 c0       	push   0xc002c2fc
c001d535:	e8 93 5a ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001d53a:	58                   	pop    eax
c001d53b:	5a                   	pop    edx
c001d53c:	68 16 c3 02 c0       	push   0xc002c316
c001d541:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d548:	50                   	push   eax
c001d549:	e8 e6 32 fe ff       	call   c0000834 <strcpy>
c001d54e:	59                   	pop    ecx
c001d54f:	58                   	pop    eax
c001d550:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d554:	03 06                	add    eax,DWORD PTR [esi]
c001d556:	50                   	push   eax
c001d557:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d55e:	50                   	push   eax
c001d55f:	e8 10 34 fe ff       	call   c0000974 <strcat>
c001d564:	58                   	pop    eax
c001d565:	5a                   	pop    edx
c001d566:	68 ac c3 02 c0       	push   0xc002c3ac
c001d56b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d572:	50                   	push   eax
c001d573:	e8 fc 33 fe ff       	call   c0000974 <strcat>
c001d578:	83 c4 10             	add    esp,0x10
c001d57b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d580:	0f 84 43 01 00 00    	je     c001d6c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d586:	83 ec 0c             	sub    esp,0xc
c001d589:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d590:	50                   	push   eax
c001d591:	e8 d9 d0 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001d596:	83 c4 10             	add    esp,0x10
c001d599:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d59d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d5a1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d5a5:	80 fb 01             	cmp    bl,0x1
c001d5a8:	75 7d                	jne    c001d627 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d5aa:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d5b1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d5b5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d5b9:	01 ce                	add    esi,ecx
c001d5bb:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d5c1:	0f 94 c0             	sete   al
c001d5c4:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5ca:	0f 94 c3             	sete   bl
c001d5cd:	09 c3                	or     ebx,eax
c001d5cf:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5d1:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d5d6:	74 36                	je     c001d60e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d5d8:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d5db:	84 db                	test   bl,bl
c001d5dd:	75 0a                	jne    c001d5e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d5df:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5e3:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5e7:	76 37                	jbe    c001d620 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5e9:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d5ed:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5f2:	0f 84 d1 00 00 00    	je     c001d6c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5f8:	83 ec 0c             	sub    esp,0xc
c001d5fb:	68 2d c3 02 c0       	push   0xc002c32d
c001d600:	e8 6a d0 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001d605:	83 c4 10             	add    esp,0x10
c001d608:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d60c:	eb 12                	jmp    c001d620 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d60e:	01 c1                	add    ecx,eax
c001d610:	84 db                	test   bl,bl
c001d612:	75 0c                	jne    c001d620 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d614:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d618:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d61c:	77 02                	ja     c001d620 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d61e:	01 d1                	add    ecx,edx
c001d620:	89 0e                	mov    DWORD PTR [esi],ecx
c001d622:	e9 df 00 00 00       	jmp    c001d706 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d627:	80 fb 02             	cmp    bl,0x2
c001d62a:	75 71                	jne    c001d69d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d62c:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d633:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d637:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d63b:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d641:	74 15                	je     c001d658 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d643:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d649:	74 0d                	je     c001d658 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d64b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d64f:	83 e8 04             	sub    eax,0x4
c001d652:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d656:	76 1f                	jbe    c001d677 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d658:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d65c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d661:	74 66                	je     c001d6c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d663:	83 ec 0c             	sub    esp,0xc
c001d666:	68 49 c3 02 c0       	push   0xc002c349
c001d66b:	e8 ff cf ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001d670:	83 c4 10             	add    esp,0x10
c001d673:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d677:	8b 06                	mov    eax,DWORD PTR [esi]
c001d679:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d67e:	74 13                	je     c001d693 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d680:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d684:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d68b:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d68f:	01 c8                	add    eax,ecx
c001d691:	eb 04                	jmp    c001d697 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d693:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d697:	01 c2                	add    edx,eax
c001d699:	89 16                	mov    DWORD PTR [esi],edx
c001d69b:	eb 69                	jmp    c001d706 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d69d:	0f b6 db             	movzx  ebx,bl
c001d6a0:	50                   	push   eax
c001d6a1:	50                   	push   eax
c001d6a2:	53                   	push   ebx
c001d6a3:	68 65 c3 02 c0       	push   0xc002c365
c001d6a8:	e8 20 59 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001d6ad:	83 c4 10             	add    esp,0x10
c001d6b0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d6b5:	74 12                	je     c001d6c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d6b7:	83 ec 0c             	sub    esp,0xc
c001d6ba:	68 70 c3 02 c0       	push   0xc002c370
c001d6bf:	e8 ab cf ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001d6c4:	83 c4 10             	add    esp,0x10
c001d6c7:	eb 3d                	jmp    c001d706 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d6c9:	83 ec 0c             	sub    esp,0xc
c001d6cc:	55                   	push   ebp
c001d6cd:	e8 16 5f ff ff       	call   c00135e8 <File::close()>
c001d6d2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6d5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d6d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6db:	59                   	pop    ecx
c001d6dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6e0:	e8 6b 21 ff ff       	call   c000f850 <free>
c001d6e5:	5b                   	pop    ebx
c001d6e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6ea:	e8 61 21 ff ff       	call   c000f850 <free>
c001d6ef:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6f2:	e8 59 21 ff ff       	call   c000f850 <free>
c001d6f7:	5e                   	pop    esi
c001d6f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6fc:	e8 4f 21 ff ff       	call   c000f850 <free>
c001d701:	83 c4 10             	add    esp,0x10
c001d704:	eb 21                	jmp    c001d727 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d706:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d70a:	e9 90 fd ff ff       	jmp    c001d49f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d70f:	83 ec 0c             	sub    esp,0xc
c001d712:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d716:	e8 35 21 ff ff       	call   c000f850 <free>
c001d71b:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d71f:	83 c4 10             	add    esp,0x10
c001d722:	e9 05 fd ff ff       	jmp    c001d42c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d727:	31 c0                	xor    eax,eax
c001d729:	eb 33                	jmp    c001d75e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d72b:	83 ec 0c             	sub    esp,0xc
c001d72e:	55                   	push   ebp
c001d72f:	e8 b4 5e ff ff       	call   c00135e8 <File::close()>
c001d734:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d737:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d73a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d73d:	58                   	pop    eax
c001d73e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d742:	e8 09 21 ff ff       	call   c000f850 <free>
c001d747:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d74a:	e8 01 21 ff ff       	call   c000f850 <free>
c001d74f:	5a                   	pop    edx
c001d750:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d754:	e8 f7 20 ff ff       	call   c000f850 <free>
c001d759:	83 c4 10             	add    esp,0x10
c001d75c:	b0 01                	mov    al,0x1
c001d75e:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d764:	5b                   	pop    ebx
c001d765:	5e                   	pop    esi
c001d766:	5f                   	pop    edi
c001d767:	5d                   	pop    ebp
c001d768:	c3                   	ret    

c001d769 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d769:	56                   	push   esi
c001d76a:	31 d2                	xor    edx,edx
c001d76c:	53                   	push   ebx
c001d76d:	8b 1d c0 13 03 c0    	mov    ebx,DWORD PTR ds:0xc00313c0
c001d773:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d777:	39 d3                	cmp    ebx,edx
c001d779:	7e 1b                	jle    c001d796 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d77b:	8b 04 95 e0 15 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcea20]
c001d782:	39 c8                	cmp    eax,ecx
c001d784:	77 0d                	ja     c001d793 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d786:	8b 34 95 e0 13 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcec20]
c001d78d:	01 c6                	add    esi,eax
c001d78f:	39 ce                	cmp    esi,ecx
c001d791:	77 05                	ja     c001d798 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d793:	42                   	inc    edx
c001d794:	eb e1                	jmp    c001d777 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d796:	31 c0                	xor    eax,eax
c001d798:	5b                   	pop    ebx
c001d799:	5e                   	pop    esi
c001d79a:	c3                   	ret    

c001d79b <Thr::getDriverNameFromAddress(unsigned long)>:
c001d79b:	53                   	push   ebx
c001d79c:	31 c0                	xor    eax,eax
c001d79e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d7a2:	8b 1d c0 13 03 c0    	mov    ebx,DWORD PTR ds:0xc00313c0
c001d7a8:	39 c3                	cmp    ebx,eax
c001d7aa:	7e 22                	jle    c001d7ce <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d7ac:	8b 14 85 e0 15 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcea20]
c001d7b3:	39 ca                	cmp    edx,ecx
c001d7b5:	77 14                	ja     c001d7cb <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d7b7:	03 14 85 e0 13 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcec20]
c001d7be:	39 ca                	cmp    edx,ecx
c001d7c0:	76 09                	jbe    c001d7cb <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d7c2:	8b 04 85 e0 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce820]
c001d7c9:	eb 05                	jmp    c001d7d0 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d7cb:	40                   	inc    eax
c001d7cc:	eb da                	jmp    c001d7a8 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d7ce:	31 c0                	xor    eax,eax
c001d7d0:	5b                   	pop    ebx
c001d7d1:	c3                   	ret    

c001d7d2 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d7d2:	53                   	push   ebx
c001d7d3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d7d7:	53                   	push   ebx
c001d7d8:	e8 8c ff ff ff       	call   c001d769 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d7dd:	5a                   	pop    edx
c001d7de:	31 d2                	xor    edx,edx
c001d7e0:	85 c0                	test   eax,eax
c001d7e2:	74 04                	je     c001d7e8 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d7e4:	89 da                	mov    edx,ebx
c001d7e6:	29 c2                	sub    edx,eax
c001d7e8:	89 d0                	mov    eax,edx
c001d7ea:	5b                   	pop    ebx
c001d7eb:	c3                   	ret    

c001d7ec <Thr::loadDLL(char const*, bool)>:
c001d7ec:	55                   	push   ebp
c001d7ed:	57                   	push   edi
c001d7ee:	56                   	push   esi
c001d7ef:	53                   	push   ebx
c001d7f0:	81 ec 34 01 00 00    	sub    esp,0x134
c001d7f6:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d7fd:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d804:	56                   	push   esi
c001d805:	68 88 c3 02 c0       	push   0xc002c388
c001d80a:	e8 be 57 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001d80f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d816:	e8 25 20 ff ff       	call   c000f840 <malloc>
c001d81b:	83 c4 0c             	add    esp,0xc
c001d81e:	89 c3                	mov    ebx,eax
c001d820:	ff 35 b4 1b 03 c0    	push   DWORD PTR ds:0xc0031bb4
c001d826:	56                   	push   esi
c001d827:	50                   	push   eax
c001d828:	e8 f9 5c ff ff       	call   c0013526 <File::File(char const*, Process*)>
c001d82d:	83 c4 10             	add    esp,0x10
c001d830:	85 db                	test   ebx,ebx
c001d832:	75 3c                	jne    c001d870 <Thr::loadDLL(char const*, bool)+0x84>
c001d834:	89 e8                	mov    eax,ebp
c001d836:	84 c0                	test   al,al
c001d838:	0f 84 d5 01 00 00    	je     c001da13 <Thr::loadDLL(char const*, bool)+0x227>
c001d83e:	57                   	push   edi
c001d83f:	57                   	push   edi
c001d840:	68 99 c3 02 c0       	push   0xc002c399
c001d845:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d849:	57                   	push   edi
c001d84a:	e8 e5 2f fe ff       	call   c0000834 <strcpy>
c001d84f:	58                   	pop    eax
c001d850:	5a                   	pop    edx
c001d851:	56                   	push   esi
c001d852:	57                   	push   edi
c001d853:	e8 1c 31 fe ff       	call   c0000974 <strcat>
c001d858:	59                   	pop    ecx
c001d859:	58                   	pop    eax
c001d85a:	68 ac c3 02 c0       	push   0xc002c3ac
c001d85f:	57                   	push   edi
c001d860:	e8 0f 31 fe ff       	call   c0000974 <strcat>
c001d865:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d868:	e8 02 ce ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001d86d:	83 c4 10             	add    esp,0x10
c001d870:	51                   	push   ecx
c001d871:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d875:	50                   	push   eax
c001d876:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d87a:	50                   	push   eax
c001d87b:	53                   	push   ebx
c001d87c:	e8 b5 5f ff ff       	call   c0013836 <File::stat(unsigned long long*, bool*)>
c001d881:	83 c4 10             	add    esp,0x10
c001d884:	85 db                	test   ebx,ebx
c001d886:	74 0c                	je     c001d894 <Thr::loadDLL(char const*, bool)+0xa8>
c001d888:	83 ec 0c             	sub    esp,0xc
c001d88b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d88d:	53                   	push   ebx
c001d88e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d891:	83 c4 10             	add    esp,0x10
c001d894:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d899:	75 0a                	jne    c001d8a5 <Thr::loadDLL(char const*, bool)+0xb9>
c001d89b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d89f:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d8a3:	75 3c                	jne    c001d8e1 <Thr::loadDLL(char const*, bool)+0xf5>
c001d8a5:	89 e8                	mov    eax,ebp
c001d8a7:	84 c0                	test   al,al
c001d8a9:	0f 84 4c 01 00 00    	je     c001d9fb <Thr::loadDLL(char const*, bool)+0x20f>
c001d8af:	51                   	push   ecx
c001d8b0:	51                   	push   ecx
c001d8b1:	68 99 c3 02 c0       	push   0xc002c399
c001d8b6:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d8ba:	53                   	push   ebx
c001d8bb:	e8 74 2f fe ff       	call   c0000834 <strcpy>
c001d8c0:	5f                   	pop    edi
c001d8c1:	58                   	pop    eax
c001d8c2:	56                   	push   esi
c001d8c3:	53                   	push   ebx
c001d8c4:	e8 ab 30 fe ff       	call   c0000974 <strcat>
c001d8c9:	58                   	pop    eax
c001d8ca:	5a                   	pop    edx
c001d8cb:	68 ac c3 02 c0       	push   0xc002c3ac
c001d8d0:	53                   	push   ebx
c001d8d1:	e8 9e 30 fe ff       	call   c0000974 <strcat>
c001d8d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d8d9:	e8 91 cd ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001d8de:	83 c4 10             	add    esp,0x10
c001d8e1:	e8 72 45 ff ff       	call   c0011e58 <Virt::getAKernelVAS()>
c001d8e6:	51                   	push   ecx
c001d8e7:	6a 03                	push   0x3
c001d8e9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d8ed:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d8f1:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d8f7:	83 d3 00             	adc    ebx,0x0
c001d8fa:	89 ca                	mov    edx,ecx
c001d8fc:	89 d1                	mov    ecx,edx
c001d8fe:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d902:	51                   	push   ecx
c001d903:	50                   	push   eax
c001d904:	e8 8b 4b ff ff       	call   c0012494 <VAS::allocatePages(int, int)>
c001d909:	5f                   	pop    edi
c001d90a:	89 c3                	mov    ebx,eax
c001d90c:	58                   	pop    eax
c001d90d:	53                   	push   ebx
c001d90e:	68 44 aa 02 c0       	push   0xc002aa44
c001d913:	e8 b5 56 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001d918:	89 34 24             	mov    DWORD PTR [esp],esi
c001d91b:	e8 74 2e fe ff       	call   c0000794 <strlen>
c001d920:	8b 3d c0 13 03 c0    	mov    edi,DWORD PTR ds:0xc00313c0
c001d926:	40                   	inc    eax
c001d927:	89 04 24             	mov    DWORD PTR [esp],eax
c001d92a:	e8 11 1f ff ff       	call   c000f840 <malloc>
c001d92f:	89 04 bd e0 17 03 c0 	mov    DWORD PTR [edi*4-0x3ffce820],eax
c001d936:	58                   	pop    eax
c001d937:	a1 c0 13 03 c0       	mov    eax,ds:0xc00313c0
c001d93c:	5a                   	pop    edx
c001d93d:	56                   	push   esi
c001d93e:	ff 34 85 e0 17 03 c0 	push   DWORD PTR [eax*4-0x3ffce820]
c001d945:	e8 ea 2e fe ff       	call   c0000834 <strcpy>
c001d94a:	a1 c0 13 03 c0       	mov    eax,ds:0xc00313c0
c001d94f:	8d 50 01             	lea    edx,[eax+0x1]
c001d952:	89 1c 85 e0 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffcea20],ebx
c001d959:	89 15 c0 13 03 c0    	mov    DWORD PTR ds:0xc00313c0,edx
c001d95f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d963:	83 c4 0c             	add    esp,0xc
c001d966:	89 14 85 e0 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec20],edx
c001d96d:	6a 01                	push   0x1
c001d96f:	53                   	push   ebx
c001d970:	56                   	push   esi
c001d971:	e8 d7 f6 ff ff       	call   c001d04d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d976:	83 c4 10             	add    esp,0x10
c001d979:	89 c7                	mov    edi,eax
c001d97b:	84 c0                	test   al,al
c001d97d:	0f 85 8c 00 00 00    	jne    c001da0f <Thr::loadDLL(char const*, bool)+0x223>
c001d983:	89 e8                	mov    eax,ebp
c001d985:	84 c0                	test   al,al
c001d987:	74 76                	je     c001d9ff <Thr::loadDLL(char const*, bool)+0x213>
c001d989:	83 ec 0c             	sub    esp,0xc
c001d98c:	68 ae c3 02 c0       	push   0xc002c3ae
c001d991:	e8 d9 cc ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001d996:	83 c4 10             	add    esp,0x10
c001d999:	eb 64                	jmp    c001d9ff <Thr::loadDLL(char const*, bool)+0x213>
c001d99b:	e8 b8 44 ff ff       	call   c0011e58 <Virt::getAKernelVAS()>
c001d9a0:	89 f5                	mov    ebp,esi
c001d9a2:	c1 e5 0c             	shl    ebp,0xc
c001d9a5:	52                   	push   edx
c001d9a6:	01 dd                	add    ebp,ebx
c001d9a8:	52                   	push   edx
c001d9a9:	55                   	push   ebp
c001d9aa:	50                   	push   eax
c001d9ab:	e8 5e 46 ff ff       	call   c001200e <VAS::getPageTableEntry(unsigned long)>
c001d9b0:	83 c4 10             	add    esp,0x10
c001d9b3:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d9b6:	75 0c                	jne    c001d9c4 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d9b8:	83 ec 0c             	sub    esp,0xc
c001d9bb:	55                   	push   ebp
c001d9bc:	e8 97 24 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001d9c1:	83 c4 10             	add    esp,0x10
c001d9c4:	46                   	inc    esi
c001d9c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d9c9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9cd:	05 ff 0f 00 00       	add    eax,0xfff
c001d9d2:	83 d2 00             	adc    edx,0x0
c001d9d5:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d9d9:	c1 ea 0c             	shr    edx,0xc
c001d9dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d9e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d9e4:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d9e8:	ba 00 00 00 00       	mov    edx,0x0
c001d9ed:	89 d0                	mov    eax,edx
c001d9ef:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d9f3:	72 a6                	jb     c001d99b <Thr::loadDLL(char const*, bool)+0x1af>
c001d9f5:	89 f8                	mov    eax,edi
c001d9f7:	84 c0                	test   al,al
c001d9f9:	75 18                	jne    c001da13 <Thr::loadDLL(char const*, bool)+0x227>
c001d9fb:	31 db                	xor    ebx,ebx
c001d9fd:	eb 14                	jmp    c001da13 <Thr::loadDLL(char const*, bool)+0x227>
c001d9ff:	83 ec 0c             	sub    esp,0xc
c001da02:	68 cd c3 02 c0       	push   0xc002c3cd
c001da07:	e8 63 cc ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001da0c:	83 c4 10             	add    esp,0x10
c001da0f:	31 f6                	xor    esi,esi
c001da11:	eb b2                	jmp    c001d9c5 <Thr::loadDLL(char const*, bool)+0x1d9>
c001da13:	81 c4 2c 01 00 00    	add    esp,0x12c
c001da19:	89 d8                	mov    eax,ebx
c001da1b:	5b                   	pop    ebx
c001da1c:	5e                   	pop    esi
c001da1d:	5f                   	pop    edi
c001da1e:	5d                   	pop    ebp
c001da1f:	c3                   	ret    

c001da20 <Thr::executeDLL(unsigned long, void*)>:
c001da20:	56                   	push   esi
c001da21:	53                   	push   ebx
c001da22:	52                   	push   edx
c001da23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da27:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001da2b:	85 db                	test   ebx,ebx
c001da2d:	75 10                	jne    c001da3f <Thr::executeDLL(unsigned long, void*)+0x1f>
c001da2f:	83 ec 0c             	sub    esp,0xc
c001da32:	68 e9 c3 02 c0       	push   0xc002c3e9
c001da37:	e8 33 cc ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001da3c:	83 c4 10             	add    esp,0x10
c001da3f:	50                   	push   eax
c001da40:	50                   	push   eax
c001da41:	53                   	push   ebx
c001da42:	68 13 c4 02 c0       	push   0xc002c413
c001da47:	e8 81 55 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001da4c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001da50:	89 d8                	mov    eax,ebx
c001da52:	83 c4 14             	add    esp,0x14
c001da55:	5b                   	pop    ebx
c001da56:	5e                   	pop    esi
c001da57:	ff e0                	jmp    eax
c001da59:	90                   	nop

c001da5a <changeTSS>:
c001da5a:	83 ec 14             	sub    esp,0x14
c001da5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da62:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001da65:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001da6a:	c1 e2 15             	shl    edx,0x15
c001da6d:	29 d0                	sub    eax,edx
c001da6f:	50                   	push   eax
c001da70:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001da75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da7b:	05 7c 11 00 00       	add    eax,0x117c
c001da80:	50                   	push   eax
c001da81:	e8 76 3a ff ff       	call   c00114fc <TSS::setESP(unsigned long)>
c001da86:	83 c4 1c             	add    esp,0x1c
c001da89:	c3                   	ret    

c001da8a <Process::addArgs(char**)>:
c001da8a:	57                   	push   edi
c001da8b:	56                   	push   esi
c001da8c:	53                   	push   ebx
c001da8d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da91:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001da95:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001da9f:	85 ff                	test   edi,edi
c001daa1:	74 3d                	je     c001dae0 <Process::addArgs(char**)+0x56>
c001daa3:	8b 07                	mov    eax,DWORD PTR [edi]
c001daa5:	85 c0                	test   eax,eax
c001daa7:	74 37                	je     c001dae0 <Process::addArgs(char**)+0x56>
c001daa9:	31 db                	xor    ebx,ebx
c001daab:	83 ec 0c             	sub    esp,0xc
c001daae:	50                   	push   eax
c001daaf:	e8 e0 2c fe ff       	call   c0000794 <strlen>
c001dab4:	40                   	inc    eax
c001dab5:	89 04 24             	mov    DWORD PTR [esp],eax
c001dab8:	e8 83 1d ff ff       	call   c000f840 <malloc>
c001dabd:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001dac4:	5a                   	pop    edx
c001dac5:	59                   	pop    ecx
c001dac6:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001dac9:	43                   	inc    ebx
c001daca:	50                   	push   eax
c001dacb:	e8 64 2d fe ff       	call   c0000834 <strcpy>
c001dad0:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001dad6:	83 c4 10             	add    esp,0x10
c001dad9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001dadc:	85 c0                	test   eax,eax
c001dade:	75 cb                	jne    c001daab <Process::addArgs(char**)+0x21>
c001dae0:	5b                   	pop    ebx
c001dae1:	5e                   	pop    esi
c001dae2:	5f                   	pop    edi
c001dae3:	c3                   	ret    

c001dae4 <Process::Process(char const*, Process*, char**)>:
c001dae4:	56                   	push   esi
c001dae5:	53                   	push   ebx
c001dae6:	83 ec 14             	sub    esp,0x14
c001dae9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daed:	05 0c 02 00 00       	add    eax,0x20c
c001daf2:	bb 07 00 00 00       	mov    ebx,0x7
c001daf7:	89 c6                	mov    esi,eax
c001daf9:	85 db                	test   ebx,ebx
c001dafb:	78 12                	js     c001db0f <Process::Process(char const*, Process*, char**)+0x2b>
c001dafd:	83 ec 0c             	sub    esp,0xc
c001db00:	56                   	push   esi
c001db01:	e8 1c b2 00 00       	call   c0028d22 <ThreadControlBlock::ThreadControlBlock()>
c001db06:	83 c4 10             	add    esp,0x10
c001db09:	83 c6 63             	add    esi,0x63
c001db0c:	4b                   	dec    ebx
c001db0d:	eb ea                	jmp    c001daf9 <Process::Process(char const*, Process*, char**)+0x15>
c001db0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db13:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001db1a:	83 ec 0c             	sub    esp,0xc
c001db1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db21:	e8 9a c9 ff ff       	call   c001a4c0 <Krnl::newProcessEnv(Process*)>
c001db26:	83 c4 10             	add    esp,0x10
c001db29:	89 c2                	mov    edx,eax
c001db2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db2f:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001db35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db39:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001db42:	a1 d0 db 02 c0       	mov    eax,ds:0xc002dbd0
c001db47:	8d 50 01             	lea    edx,[eax+0x1]
c001db4a:	89 15 d0 db 02 c0    	mov    DWORD PTR ds:0xc002dbd0,edx
c001db50:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db54:	89 02                	mov    DWORD PTR [edx],eax
c001db56:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001db5e:	83 ec 0c             	sub    esp,0xc
c001db61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001db65:	e8 d6 1c ff ff       	call   c000f840 <malloc>
c001db6a:	83 c4 10             	add    esp,0x10
c001db6d:	89 c3                	mov    ebx,eax
c001db6f:	83 ec 08             	sub    esp,0x8
c001db72:	6a 00                	push   0x0
c001db74:	53                   	push   ebx
c001db75:	e8 c2 4c ff ff       	call   c001283c <VAS::VAS(bool)>
c001db7a:	83 c4 10             	add    esp,0x10
c001db7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db81:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db8b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001db95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db99:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db9d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dba3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dba7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbad:	85 c0                	test   eax,eax
c001dbaf:	74 42                	je     c001dbf3 <Process::Process(char const*, Process*, char**)+0x10f>
c001dbb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbb5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbbb:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dbc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbc5:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dbcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbcf:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbd5:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dbdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbdf:	05 0c 01 00 00       	add    eax,0x10c
c001dbe4:	83 ec 08             	sub    esp,0x8
c001dbe7:	52                   	push   edx
c001dbe8:	50                   	push   eax
c001dbe9:	e8 46 2c fe ff       	call   c0000834 <strcpy>
c001dbee:	83 c4 10             	add    esp,0x10
c001dbf1:	eb 63                	jmp    c001dc56 <Process::Process(char const*, Process*, char**)+0x172>
c001dbf3:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001dbfb:	83 ec 0c             	sub    esp,0xc
c001dbfe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dc02:	e8 39 1c ff ff       	call   c000f840 <malloc>
c001dc07:	83 c4 10             	add    esp,0x10
c001dc0a:	89 c3                	mov    ebx,eax
c001dc0c:	83 ec 08             	sub    esp,0x8
c001dc0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc13:	53                   	push   ebx
c001dc14:	e8 e1 35 ff ff       	call   c00111fa <VgaText::VgaText(char const*)>
c001dc19:	83 c4 10             	add    esp,0x10
c001dc1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc20:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dc26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc2a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dc30:	83 ec 0c             	sub    esp,0xc
c001dc33:	50                   	push   eax
c001dc34:	e8 b4 29 ff ff       	call   c00105ed <addToTerminalCycle(VgaText*)>
c001dc39:	83 c4 10             	add    esp,0x10
c001dc3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc40:	05 0c 01 00 00       	add    eax,0x10c
c001dc45:	83 ec 08             	sub    esp,0x8
c001dc48:	68 32 c4 02 c0       	push   0xc002c432
c001dc4d:	50                   	push   eax
c001dc4e:	e8 e1 2b fe ff       	call   c0000834 <strcpy>
c001dc53:	83 c4 10             	add    esp,0x10
c001dc56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc5a:	83 c0 0c             	add    eax,0xc
c001dc5d:	83 ec 08             	sub    esp,0x8
c001dc60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc64:	50                   	push   eax
c001dc65:	e8 ca 2b fe ff       	call   c0000834 <strcpy>
c001dc6a:	83 c4 10             	add    esp,0x10
c001dc6d:	83 ec 08             	sub    esp,0x8
c001dc70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dc74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc78:	e8 0d fe ff ff       	call   c001da8a <Process::addArgs(char**)>
c001dc7d:	83 c4 10             	add    esp,0x10
c001dc80:	83 ec 08             	sub    esp,0x8
c001dc83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc8b:	e8 87 ee ff ff       	call   c001cb17 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dc90:	83 c4 10             	add    esp,0x10
c001dc93:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc97:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc9b:	83 f0 01             	xor    eax,0x1
c001dc9e:	88 c2                	mov    dl,al
c001dca0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dca4:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dcaa:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dcaf:	83 ec 08             	sub    esp,0x8
c001dcb2:	50                   	push   eax
c001dcb3:	68 30 c5 02 c0       	push   0xc002c530
c001dcb8:	e8 10 53 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001dcbd:	83 c4 10             	add    esp,0x10
c001dcc0:	90                   	nop
c001dcc1:	83 c4 14             	add    esp,0x14
c001dcc4:	5b                   	pop    ebx
c001dcc5:	5e                   	pop    esi
c001dcc6:	c3                   	ret    
c001dcc7:	90                   	nop

c001dcc8 <Process::Process(bool, char const*, Process*, char**)>:
c001dcc8:	56                   	push   esi
c001dcc9:	53                   	push   ebx
c001dcca:	83 ec 24             	sub    esp,0x24
c001dccd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dcd1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dcd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcd9:	05 0c 02 00 00       	add    eax,0x20c
c001dcde:	bb 07 00 00 00       	mov    ebx,0x7
c001dce3:	89 c6                	mov    esi,eax
c001dce5:	85 db                	test   ebx,ebx
c001dce7:	78 12                	js     c001dcfb <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dce9:	83 ec 0c             	sub    esp,0xc
c001dcec:	56                   	push   esi
c001dced:	e8 30 b0 00 00       	call   c0028d22 <ThreadControlBlock::ThreadControlBlock()>
c001dcf2:	83 c4 10             	add    esp,0x10
c001dcf5:	83 c6 63             	add    esi,0x63
c001dcf8:	4b                   	dec    ebx
c001dcf9:	eb ea                	jmp    c001dce5 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dcfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcff:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dd06:	83 ec 0c             	sub    esp,0xc
c001dd09:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dd0d:	e8 ae c7 ff ff       	call   c001a4c0 <Krnl::newProcessEnv(Process*)>
c001dd12:	83 c4 10             	add    esp,0x10
c001dd15:	89 c2                	mov    edx,eax
c001dd17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd1b:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dd21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd25:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dd2e:	a1 d0 db 02 c0       	mov    eax,ds:0xc002dbd0
c001dd33:	8d 50 01             	lea    edx,[eax+0x1]
c001dd36:	89 15 d0 db 02 c0    	mov    DWORD PTR ds:0xc002dbd0,edx
c001dd3c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dd40:	89 02                	mov    DWORD PTR [edx],eax
c001dd42:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001dd4a:	83 ec 0c             	sub    esp,0xc
c001dd4d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dd51:	e8 ea 1a ff ff       	call   c000f840 <malloc>
c001dd56:	83 c4 10             	add    esp,0x10
c001dd59:	89 c3                	mov    ebx,eax
c001dd5b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dd60:	83 ec 08             	sub    esp,0x8
c001dd63:	50                   	push   eax
c001dd64:	53                   	push   ebx
c001dd65:	e8 d2 4a ff ff       	call   c001283c <VAS::VAS(bool)>
c001dd6a:	83 c4 10             	add    esp,0x10
c001dd6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd71:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dd77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd7b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd89:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd8d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dd93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd97:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd9d:	85 c0                	test   eax,eax
c001dd9f:	74 42                	je     c001dde3 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dda1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dda5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ddab:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ddb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddb5:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001ddbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddbf:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ddc5:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001ddcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddcf:	05 0c 01 00 00       	add    eax,0x10c
c001ddd4:	83 ec 08             	sub    esp,0x8
c001ddd7:	52                   	push   edx
c001ddd8:	50                   	push   eax
c001ddd9:	e8 56 2a fe ff       	call   c0000834 <strcpy>
c001ddde:	83 c4 10             	add    esp,0x10
c001dde1:	eb 63                	jmp    c001de46 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dde3:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001ddeb:	83 ec 0c             	sub    esp,0xc
c001ddee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ddf2:	e8 49 1a ff ff       	call   c000f840 <malloc>
c001ddf7:	83 c4 10             	add    esp,0x10
c001ddfa:	89 c3                	mov    ebx,eax
c001ddfc:	83 ec 08             	sub    esp,0x8
c001ddff:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de03:	53                   	push   ebx
c001de04:	e8 f1 33 ff ff       	call   c00111fa <VgaText::VgaText(char const*)>
c001de09:	83 c4 10             	add    esp,0x10
c001de0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de10:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001de16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de1a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001de20:	83 ec 0c             	sub    esp,0xc
c001de23:	50                   	push   eax
c001de24:	e8 c4 27 ff ff       	call   c00105ed <addToTerminalCycle(VgaText*)>
c001de29:	83 c4 10             	add    esp,0x10
c001de2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de30:	05 0c 01 00 00       	add    eax,0x10c
c001de35:	83 ec 08             	sub    esp,0x8
c001de38:	68 32 c4 02 c0       	push   0xc002c432
c001de3d:	50                   	push   eax
c001de3e:	e8 f1 29 fe ff       	call   c0000834 <strcpy>
c001de43:	83 c4 10             	add    esp,0x10
c001de46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de4a:	83 c0 0c             	add    eax,0xc
c001de4d:	83 ec 08             	sub    esp,0x8
c001de50:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de54:	50                   	push   eax
c001de55:	e8 da 29 fe ff       	call   c0000834 <strcpy>
c001de5a:	83 c4 10             	add    esp,0x10
c001de5d:	83 ec 08             	sub    esp,0x8
c001de60:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001de64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de68:	e8 1d fc ff ff       	call   c001da8a <Process::addArgs(char**)>
c001de6d:	83 c4 10             	add    esp,0x10
c001de70:	90                   	nop
c001de71:	83 c4 24             	add    esp,0x24
c001de74:	5b                   	pop    ebx
c001de75:	5e                   	pop    esi
c001de76:	c3                   	ret    

c001de77 <disableIRQs()>:
c001de77:	fa                   	cli    
c001de78:	ff 05 8c 1b 03 c0    	inc    DWORD PTR ds:0xc0031b8c
c001de7e:	c3                   	ret    

c001de7f <getIRQNestingLevel()>:
c001de7f:	a1 8c 1b 03 c0       	mov    eax,ds:0xc0031b8c
c001de84:	c3                   	ret    

c001de85 <enableIRQs()>:
c001de85:	a1 8c 1b 03 c0       	mov    eax,ds:0xc0031b8c
c001de8a:	48                   	dec    eax
c001de8b:	a3 8c 1b 03 c0       	mov    ds:0xc0031b8c,eax
c001de90:	75 01                	jne    c001de93 <enableIRQs()+0xe>
c001de92:	fb                   	sti    
c001de93:	c3                   	ret    

c001de94 <lockScheduler()>:
c001de94:	eb e1                	jmp    c001de77 <disableIRQs()>

c001de96 <unlockScheduler()>:
c001de96:	eb ed                	jmp    c001de85 <enableIRQs()>

c001de98 <userModeEntryPoint(void*)>:
c001de98:	83 ec 0c             	sub    esp,0xc
c001de9b:	e8 f6 ff ff ff       	call   c001de96 <unlockScheduler()>
c001dea0:	fb                   	sti    
c001dea1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dea6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dea9:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001deaf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001deb3:	83 c4 0c             	add    esp,0xc
c001deb6:	e9 6f 24 fe ff       	jmp    c000032a <goToUsermode>

c001debb <lockStuff()>:
c001debb:	e8 b7 ff ff ff       	call   c001de77 <disableIRQs()>
c001dec0:	ff 05 88 1b 03 c0    	inc    DWORD PTR ds:0xc0031b88
c001dec6:	c3                   	ret    

c001dec7 <taskStartupFunction>:
c001dec7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001decc:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001decf:	c3                   	ret    

c001ded0 <updateTimeUsed()>:
c001ded0:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001ded5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dedb:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dee2:	74 50                	je     c001df34 <updateTimeUsed()+0x64>
c001dee4:	57                   	push   edi
c001dee5:	56                   	push   esi
c001dee6:	53                   	push   ebx
c001dee7:	0f 31                	rdtsc  
c001dee9:	89 c1                	mov    ecx,eax
c001deeb:	a3 c8 1b 03 c0       	mov    ds:0xc0031bc8,eax
c001def0:	2b 0d b8 1b 03 c0    	sub    ecx,DWORD PTR ds:0xc0031bb8
c001def6:	89 d3                	mov    ebx,edx
c001def8:	89 0d c0 1b 03 c0    	mov    DWORD PTR ds:0xc0031bc0,ecx
c001defe:	1b 1d bc 1b 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031bbc
c001df04:	a3 b8 1b 03 c0       	mov    ds:0xc0031bb8,eax
c001df09:	89 1d c4 1b 03 c0    	mov    DWORD PTR ds:0xc0031bc4,ebx
c001df0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df14:	89 15 cc 1b 03 c0    	mov    DWORD PTR ds:0xc0031bcc,edx
c001df1a:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001df1d:	89 15 bc 1b 03 c0    	mov    DWORD PTR ds:0xc0031bbc,edx
c001df23:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001df26:	01 f1                	add    ecx,esi
c001df28:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001df2b:	11 fb                	adc    ebx,edi
c001df2d:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001df30:	5b                   	pop    ebx
c001df31:	5e                   	pop    esi
c001df32:	5f                   	pop    edi
c001df33:	c3                   	ret    
c001df34:	c3                   	ret    

c001df35 <switchToThread(ThreadControlBlock*)>:
c001df35:	53                   	push   ebx
c001df36:	83 ec 08             	sub    esp,0x8
c001df39:	a1 88 1b 03 c0       	mov    eax,ds:0xc0031b88
c001df3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001df42:	85 c0                	test   eax,eax
c001df44:	75 30                	jne    c001df76 <switchToThread(ThreadControlBlock*)+0x41>
c001df46:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001df49:	3c ff                	cmp    al,0xff
c001df4b:	74 25                	je     c001df72 <switchToThread(ThreadControlBlock*)+0x3d>
c001df4d:	0f b6 d0             	movzx  edx,al
c001df50:	b8 84 03 00 00       	mov    eax,0x384
c001df55:	29 d0                	sub    eax,edx
c001df57:	c1 e0 10             	shl    eax,0x10
c001df5a:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001df5d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001df60:	e8 6b ff ff ff       	call   c001ded0 <updateTimeUsed()>
c001df65:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001df69:	83 c4 08             	add    esp,0x8
c001df6c:	5b                   	pop    ebx
c001df6d:	e9 f0 23 fe ff       	jmp    c0000362 <switchToThreadASM>
c001df72:	31 c0                	xor    eax,eax
c001df74:	eb e7                	jmp    c001df5d <switchToThread(ThreadControlBlock*)+0x28>
c001df76:	c7 05 84 1b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031b84,0x1
c001df80:	83 c4 08             	add    esp,0x8
c001df83:	5b                   	pop    ebx
c001df84:	c3                   	ret    
c001df85:	90                   	nop

c001df86 <Semaphore::Semaphore(int)>:
c001df86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df8e:	89 10                	mov    DWORD PTR [eax],edx
c001df90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df94:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001df9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df9f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dfa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfaa:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dfb1:	90                   	nop
c001dfb2:	c3                   	ret    
c001dfb3:	90                   	nop

c001dfb4 <Mutex::Mutex()>:
c001dfb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfb8:	6a 01                	push   0x1
c001dfba:	50                   	push   eax
c001dfbb:	e8 c6 ff ff ff       	call   c001df86 <Semaphore::Semaphore(int)>
c001dfc0:	83 c4 08             	add    esp,0x8
c001dfc3:	90                   	nop
c001dfc4:	c3                   	ret    
c001dfc5:	90                   	nop

c001dfc6 <Process::createThread(void (*)(void*), void*, int)>:
c001dfc6:	55                   	push   ebp
c001dfc7:	31 c9                	xor    ecx,ecx
c001dfc9:	57                   	push   edi
c001dfca:	56                   	push   esi
c001dfcb:	53                   	push   ebx
c001dfcc:	83 ec 1c             	sub    esp,0x1c
c001dfcf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dfd3:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001dfda:	89 f2                	mov    edx,esi
c001dfdc:	0f b7 c2             	movzx  eax,dx
c001dfdf:	83 e2 01             	and    edx,0x1
c001dfe2:	74 14                	je     c001dff8 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001dfe4:	d1 f8                	sar    eax,1
c001dfe6:	41                   	inc    ecx
c001dfe7:	89 c2                	mov    edx,eax
c001dfe9:	83 f9 10             	cmp    ecx,0x10
c001dfec:	75 ee                	jne    c001dfdc <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dfee:	83 c4 1c             	add    esp,0x1c
c001dff1:	31 c0                	xor    eax,eax
c001dff3:	5b                   	pop    ebx
c001dff4:	5e                   	pop    esi
c001dff5:	5f                   	pop    edi
c001dff6:	5d                   	pop    ebp
c001dff7:	c3                   	ret    
c001dff8:	83 ec 08             	sub    esp,0x8
c001dffb:	b8 01 00 00 00       	mov    eax,0x1
c001e000:	d3 e0                	shl    eax,cl
c001e002:	09 c6                	or     esi,eax
c001e004:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e00a:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e011:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001e014:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e017:	01 ce                	add    esi,ecx
c001e019:	89 f0                	mov    eax,esi
c001e01b:	c1 e0 05             	shl    eax,0x5
c001e01e:	01 c6                	add    esi,eax
c001e020:	8d 04 33             	lea    eax,[ebx+esi*1]
c001e023:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001e029:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e02f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e033:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e039:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001e03f:	89 ca                	mov    edx,ecx
c001e041:	f7 da                	neg    edx
c001e043:	c1 e2 15             	shl    edx,0x15
c001e046:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001e04c:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001e052:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001e056:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e060:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e066:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e06a:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001e070:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e07a:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e084:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001e08b:	50                   	push   eax
c001e08c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e090:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e095:	e8 16 ab 00 00       	call   c0028bb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e09a:	83 c4 10             	add    esp,0x10
c001e09d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e0a1:	83 c4 1c             	add    esp,0x1c
c001e0a4:	5b                   	pop    ebx
c001e0a5:	5e                   	pop    esi
c001e0a6:	5f                   	pop    edi
c001e0a7:	5d                   	pop    ebp
c001e0a8:	c3                   	ret    
c001e0a9:	90                   	nop

c001e0aa <Process::createUserThread()>:
c001e0aa:	83 ec 0c             	sub    esp,0xc
c001e0ad:	68 80 00 00 00       	push   0x80
c001e0b2:	6a 00                	push   0x0
c001e0b4:	68 98 de 01 c0       	push   0xc001de98
c001e0b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e0bd:	e8 04 ff ff ff       	call   c001dfc6 <Process::createThread(void (*)(void*), void*, int)>
c001e0c2:	83 c4 1c             	add    esp,0x1c
c001e0c5:	c3                   	ret    

c001e0c6 <setupMultitasking(void (*)())>:
c001e0c6:	56                   	push   esi
c001e0c7:	53                   	push   ebx
c001e0c8:	53                   	push   ebx
c001e0c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e0cd:	eb 10                	jmp    c001e0df <setupMultitasking(void (*)())+0x19>
c001e0cf:	83 ec 0c             	sub    esp,0xc
c001e0d2:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e0d7:	e8 26 aa 00 00       	call   c0028b02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e0dc:	83 c4 10             	add    esp,0x10
c001e0df:	83 ec 0c             	sub    esp,0xc
c001e0e2:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e0e7:	e8 fa a9 00 00       	call   c0028ae6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0ec:	83 c4 10             	add    esp,0x10
c001e0ef:	84 c0                	test   al,al
c001e0f1:	74 dc                	je     c001e0cf <setupMultitasking(void (*)())+0x9>
c001e0f3:	83 ec 0c             	sub    esp,0xc
c001e0f6:	68 3f 07 00 00       	push   0x73f
c001e0fb:	e8 40 17 ff ff       	call   c000f840 <malloc>
c001e100:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e107:	89 c3                	mov    ebx,eax
c001e109:	6a 00                	push   0x0
c001e10b:	68 36 c4 02 c0       	push   0xc002c436
c001e110:	6a 01                	push   0x1
c001e112:	50                   	push   eax
c001e113:	e8 b0 fb ff ff       	call   c001dcc8 <Process::Process(bool, char const*, Process*, char**)>
c001e118:	83 c4 18             	add    esp,0x18
c001e11b:	89 1d b4 1b 03 c0    	mov    DWORD PTR ds:0xc0031bb4,ebx
c001e121:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e127:	68 58 c5 02 c0       	push   0xc002c558
c001e12c:	e8 9c 4e ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001e131:	58                   	pop    eax
c001e132:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e138:	e8 32 2c ff ff       	call   c0010d6f <setActiveTerminal(VgaText*)>
c001e13d:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e145:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e14b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e14e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e158:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e15e:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e164:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e16e:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e178:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e182:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e188:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e18e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e198:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e19e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e1a8:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e1ae:	5a                   	pop    edx
c001e1af:	59                   	pop    ecx
c001e1b0:	68 32 c4 02 c0       	push   0xc002c432
c001e1b5:	50                   	push   eax
c001e1b6:	e8 79 26 fe ff       	call   c0000834 <strcpy>
c001e1bb:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e1c2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e1c6:	83 c4 14             	add    esp,0x14
c001e1c9:	5b                   	pop    ebx
c001e1ca:	5e                   	pop    esi
c001e1cb:	e9 84 21 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e1d0 <schedule()>:
c001e1d0:	a1 88 1b 03 c0       	mov    eax,ds:0xc0031b88
c001e1d5:	85 c0                	test   eax,eax
c001e1d7:	74 0b                	je     c001e1e4 <schedule()+0x14>
c001e1d9:	c7 05 84 1b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031b84,0x1
c001e1e3:	c3                   	ret    
c001e1e4:	53                   	push   ebx
c001e1e5:	83 ec 14             	sub    esp,0x14
c001e1e8:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e1ed:	e8 f4 a8 00 00       	call   c0028ae6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e1f2:	83 c4 10             	add    esp,0x10
c001e1f5:	84 c0                	test   al,al
c001e1f7:	75 38                	jne    c001e231 <schedule()+0x61>
c001e1f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1fe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e201:	4a                   	dec    edx
c001e202:	74 32                	je     c001e236 <schedule()+0x66>
c001e204:	83 ec 0c             	sub    esp,0xc
c001e207:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e20c:	e8 cd a8 00 00       	call   c0028ade <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e211:	c7 04 24 a8 1b 03 c0 	mov    DWORD PTR [esp],0xc0031ba8
c001e218:	89 c3                	mov    ebx,eax
c001e21a:	e8 e3 a8 00 00       	call   c0028b02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e21f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e226:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e229:	e8 07 fd ff ff       	call   c001df35 <switchToThread(ThreadControlBlock*)>
c001e22e:	83 c4 10             	add    esp,0x10
c001e231:	83 c4 08             	add    esp,0x8
c001e234:	5b                   	pop    ebx
c001e235:	c3                   	ret    
c001e236:	83 ec 08             	sub    esp,0x8
c001e239:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e240:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e246:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e24b:	e8 60 a9 00 00       	call   c0028bb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e250:	83 c4 10             	add    esp,0x10
c001e253:	eb af                	jmp    c001e204 <schedule()+0x34>

c001e255 <unlockStuff()>:
c001e255:	a1 88 1b 03 c0       	mov    eax,ds:0xc0031b88
c001e25a:	48                   	dec    eax
c001e25b:	a3 88 1b 03 c0       	mov    ds:0xc0031b88,eax
c001e260:	75 09                	jne    c001e26b <unlockStuff()+0x16>
c001e262:	a1 84 1b 03 c0       	mov    eax,ds:0xc0031b84
c001e267:	85 c0                	test   eax,eax
c001e269:	75 05                	jne    c001e270 <unlockStuff()+0x1b>
c001e26b:	e9 15 fc ff ff       	jmp    c001de85 <enableIRQs()>
c001e270:	83 ec 0c             	sub    esp,0xc
c001e273:	c7 05 84 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b84,0x0
c001e27d:	e8 4e ff ff ff       	call   c001e1d0 <schedule()>
c001e282:	83 c4 0c             	add    esp,0xc
c001e285:	e9 fb fb ff ff       	jmp    c001de85 <enableIRQs()>

c001e28a <Semaphore::tryAcquire()>:
c001e28a:	83 ec 0c             	sub    esp,0xc
c001e28d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e291:	e8 25 fc ff ff       	call   c001debb <lockStuff()>
c001e296:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e299:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e29b:	7c 0b                	jl     c001e2a8 <Semaphore::tryAcquire()+0x1e>
c001e29d:	e8 b3 ff ff ff       	call   c001e255 <unlockStuff()>
c001e2a2:	31 c0                	xor    eax,eax
c001e2a4:	83 c4 0c             	add    esp,0xc
c001e2a7:	c3                   	ret    
c001e2a8:	42                   	inc    edx
c001e2a9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e2ac:	e8 a4 ff ff ff       	call   c001e255 <unlockStuff()>
c001e2b1:	b0 01                	mov    al,0x1
c001e2b3:	83 c4 0c             	add    esp,0xc
c001e2b6:	c3                   	ret    
c001e2b7:	90                   	nop

c001e2b8 <Semaphore::assertLocked(char const*)>:
c001e2b8:	83 ec 0c             	sub    esp,0xc
c001e2bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e2c3:	e8 f3 fb ff ff       	call   c001debb <lockStuff()>
c001e2c8:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e2ca:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e2cd:	7c 05                	jl     c001e2d4 <Semaphore::assertLocked(char const*)+0x1c>
c001e2cf:	83 c4 0c             	add    esp,0xc
c001e2d2:	eb 81                	jmp    c001e255 <unlockStuff()>
c001e2d4:	83 ec 0c             	sub    esp,0xc
c001e2d7:	52                   	push   edx
c001e2d8:	e8 92 c3 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001e2dd:	83 c4 10             	add    esp,0x10
c001e2e0:	83 c4 0c             	add    esp,0xc
c001e2e3:	e9 6d ff ff ff       	jmp    c001e255 <unlockStuff()>

c001e2e8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e2e8:	83 ec 0c             	sub    esp,0xc
c001e2eb:	e8 8f fb ff ff       	call   c001de7f <getIRQNestingLevel()>
c001e2f0:	83 ec 08             	sub    esp,0x8
c001e2f3:	50                   	push   eax
c001e2f4:	68 8c c5 02 c0       	push   0xc002c58c
c001e2f9:	e8 cf 4c ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001e2fe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e302:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e307:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e30a:	e8 c1 fe ff ff       	call   c001e1d0 <schedule()>
c001e30f:	e8 82 fb ff ff       	call   c001de96 <unlockScheduler()>
c001e314:	e8 66 fb ff ff       	call   c001de7f <getIRQNestingLevel()>
c001e319:	5a                   	pop    edx
c001e31a:	59                   	pop    ecx
c001e31b:	50                   	push   eax
c001e31c:	68 c0 c5 02 c0       	push   0xc002c5c0
c001e321:	e8 a7 4c ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001e326:	83 c4 1c             	add    esp,0x1c
c001e329:	c3                   	ret    

c001e32a <blockTask(TaskState)>:
c001e32a:	83 ec 0c             	sub    esp,0xc
c001e32d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e331:	e8 5e fb ff ff       	call   c001de94 <lockScheduler()>
c001e336:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e33b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e33e:	e8 8d fe ff ff       	call   c001e1d0 <schedule()>
c001e343:	83 c4 0c             	add    esp,0xc
c001e346:	e9 4b fb ff ff       	jmp    c001de96 <unlockScheduler()>

c001e34b <waitTask(int, int*, int)>:
c001e34b:	83 ec 18             	sub    esp,0x18
c001e34e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e353:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e357:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e35a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e35e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e363:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e366:	6a 07                	push   0x7
c001e368:	e8 bd ff ff ff       	call   c001e32a <blockTask(TaskState)>
c001e36d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e372:	83 c4 10             	add    esp,0x10
c001e375:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e378:	85 d2                	test   edx,edx
c001e37a:	74 0a                	je     c001e386 <waitTask(int, int*, int)+0x3b>
c001e37c:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e37f:	89 02                	mov    DWORD PTR [edx],eax
c001e381:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e386:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e389:	83 c4 0c             	add    esp,0xc
c001e38c:	c3                   	ret    

c001e38d <nanoSleepUntil(unsigned long long)>:
c001e38d:	83 ec 0c             	sub    esp,0xc
c001e390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e394:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e398:	3b 05 d0 ec 02 c0    	cmp    eax,DWORD PTR ds:0xc002ecd0
c001e39e:	89 d1                	mov    ecx,edx
c001e3a0:	1b 0d d4 ec 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ecd4
c001e3a6:	73 04                	jae    c001e3ac <nanoSleepUntil(unsigned long long)+0x1f>
c001e3a8:	83 c4 0c             	add    esp,0xc
c001e3ab:	c3                   	ret    
c001e3ac:	e8 0a fb ff ff       	call   c001debb <lockStuff()>
c001e3b1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e3b7:	83 ec 08             	sub    esp,0x8
c001e3ba:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e3bd:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e3c0:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e3c6:	68 9c 1b 03 c0       	push   0xc0031b9c
c001e3cb:	e8 e0 a7 00 00       	call   c0028bb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e3d0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e3d7:	e8 4e ff ff ff       	call   c001e32a <blockTask(TaskState)>
c001e3dc:	83 c4 1c             	add    esp,0x1c
c001e3df:	e9 71 fe ff ff       	jmp    c001e255 <unlockStuff()>

c001e3e4 <nanoSleep(unsigned long long)>:
c001e3e4:	a1 d0 ec 02 c0       	mov    eax,ds:0xc002ecd0
c001e3e9:	8b 15 d4 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ecd4
c001e3ef:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e3f3:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e3f7:	eb 94                	jmp    c001e38d <nanoSleepUntil(unsigned long long)>

c001e3f9 <sleep(unsigned long long)>:
c001e3f9:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e401:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e406:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e40a:	01 ca                	add    edx,ecx
c001e40c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e410:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e414:	eb ce                	jmp    c001e3e4 <nanoSleep(unsigned long long)>

c001e416 <Semaphore::acquire()>:
c001e416:	83 ec 0c             	sub    esp,0xc
c001e419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e41d:	e8 99 fa ff ff       	call   c001debb <lockStuff()>
c001e422:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e425:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e427:	7d 0c                	jge    c001e435 <Semaphore::acquire()+0x1f>
c001e429:	42                   	inc    edx
c001e42a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e42d:	83 c4 0c             	add    esp,0xc
c001e430:	e9 20 fe ff ff       	jmp    c001e255 <unlockStuff()>
c001e435:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e43b:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e442:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e445:	85 d2                	test   edx,edx
c001e447:	74 2a                	je     c001e473 <Semaphore::acquire()+0x5d>
c001e449:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e44c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e452:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e455:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e45b:	83 ec 0c             	sub    esp,0xc
c001e45e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e461:	6a 05                	push   0x5
c001e463:	e8 c2 fe ff ff       	call   c001e32a <blockTask(TaskState)>
c001e468:	83 c4 10             	add    esp,0x10
c001e46b:	83 c4 0c             	add    esp,0xc
c001e46e:	e9 e2 fd ff ff       	jmp    c001e255 <unlockStuff()>
c001e473:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e479:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e47c:	eb d7                	jmp    c001e455 <Semaphore::acquire()+0x3f>

c001e47e <taskReturned>:
c001e47e:	83 ec 18             	sub    esp,0x18
c001e481:	68 f4 c5 02 c0       	push   0xc002c5f4
c001e486:	e8 e4 c1 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001e48b:	83 c4 10             	add    esp,0x10
c001e48e:	83 ec 0c             	sub    esp,0xc
c001e491:	6a 02                	push   0x2
c001e493:	e8 92 fe ff ff       	call   c001e32a <blockTask(TaskState)>
c001e498:	e8 f7 f9 ff ff       	call   c001de94 <lockScheduler()>
c001e49d:	e8 2e fd ff ff       	call   c001e1d0 <schedule()>
c001e4a2:	e8 ef f9 ff ff       	call   c001de96 <unlockScheduler()>
c001e4a7:	83 c4 10             	add    esp,0x10
c001e4aa:	eb e2                	jmp    c001e48e <taskReturned+0x10>

c001e4ac <unblockTask(ThreadControlBlock*)>:
c001e4ac:	53                   	push   ebx
c001e4ad:	83 ec 08             	sub    esp,0x8
c001e4b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e4b4:	e8 db f9 ff ff       	call   c001de94 <lockScheduler()>
c001e4b9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e4bc:	85 c0                	test   eax,eax
c001e4be:	74 5c                	je     c001e51c <unblockTask(ThreadControlBlock*)+0x70>
c001e4c0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e4c3:	48                   	dec    eax
c001e4c4:	74 31                	je     c001e4f7 <unblockTask(ThreadControlBlock*)+0x4b>
c001e4c6:	83 ec 0c             	sub    esp,0xc
c001e4c9:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e4ce:	e8 0b a6 00 00       	call   c0028ade <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4d3:	83 c4 10             	add    esp,0x10
c001e4d6:	85 c0                	test   eax,eax
c001e4d8:	75 17                	jne    c001e4f1 <unblockTask(ThreadControlBlock*)+0x45>
c001e4da:	eb 65                	jmp    c001e541 <unblockTask(ThreadControlBlock*)+0x95>
c001e4dc:	83 ec 08             	sub    esp,0x8
c001e4df:	50                   	push   eax
c001e4e0:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e4e5:	e8 ce a8 00 00       	call   c0028db8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e4ea:	83 c4 10             	add    esp,0x10
c001e4ed:	85 c0                	test   eax,eax
c001e4ef:	74 50                	je     c001e541 <unblockTask(ThreadControlBlock*)+0x95>
c001e4f1:	39 c3                	cmp    ebx,eax
c001e4f3:	75 e7                	jne    c001e4dc <unblockTask(ThreadControlBlock*)+0x30>
c001e4f5:	eb 1c                	jmp    c001e513 <unblockTask(ThreadControlBlock*)+0x67>
c001e4f7:	83 ec 0c             	sub    esp,0xc
c001e4fa:	68 e4 c6 02 c0       	push   0xc002c6e4
c001e4ff:	e8 c9 4a ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001e504:	c7 04 24 70 c6 02 c0 	mov    DWORD PTR [esp],0xc002c670
c001e50b:	e8 bd 4a ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001e510:	83 c4 10             	add    esp,0x10
c001e513:	83 c4 08             	add    esp,0x8
c001e516:	5b                   	pop    ebx
c001e517:	e9 7a f9 ff ff       	jmp    c001de96 <unlockScheduler()>
c001e51c:	83 ec 0c             	sub    esp,0xc
c001e51f:	68 28 c6 02 c0       	push   0xc002c628
c001e524:	e8 a4 4a ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001e529:	c7 04 24 70 c6 02 c0 	mov    DWORD PTR [esp],0xc002c670
c001e530:	e8 98 4a ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001e535:	83 c4 10             	add    esp,0x10
c001e538:	83 c4 08             	add    esp,0x8
c001e53b:	5b                   	pop    ebx
c001e53c:	e9 55 f9 ff ff       	jmp    c001de96 <unlockScheduler()>
c001e541:	83 ec 08             	sub    esp,0x8
c001e544:	53                   	push   ebx
c001e545:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e54a:	e8 61 a6 00 00       	call   c0028bb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e54f:	83 c4 10             	add    esp,0x10
c001e552:	83 c4 08             	add    esp,0x8
c001e555:	5b                   	pop    ebx
c001e556:	e9 3b f9 ff ff       	jmp    c001de96 <unlockScheduler()>

c001e55b <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e55b:	55                   	push   ebp
c001e55c:	57                   	push   edi
c001e55d:	56                   	push   esi
c001e55e:	53                   	push   ebx
c001e55f:	83 ec 1c             	sub    esp,0x1c
c001e562:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e566:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e569:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e56f:	85 ff                	test   edi,edi
c001e571:	7e 20                	jle    c001e593 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e573:	31 f6                	xor    esi,esi
c001e575:	83 ec 0c             	sub    esp,0xc
c001e578:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e57f:	46                   	inc    esi
c001e580:	e8 cb 12 ff ff       	call   c000f850 <free>
c001e585:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e588:	83 c4 10             	add    esp,0x10
c001e58b:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e591:	7f e2                	jg     c001e575 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e593:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e59d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e5a2:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e5a5:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e5a8:	d3 c0                	rol    eax,cl
c001e5aa:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e5b1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5b4:	89 f7                	mov    edi,esi
c001e5b6:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e5be:	0f 85 74 01 00 00    	jne    c001e738 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e5c4:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e5ca:	85 ed                	test   ebp,ebp
c001e5cc:	74 1b                	je     c001e5e9 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e5ce:	83 ec 0c             	sub    esp,0xc
c001e5d1:	55                   	push   ebp
c001e5d2:	e8 05 be ff ff       	call   c001a3dc <EnvVarContainer::~EnvVarContainer()>
c001e5d7:	59                   	pop    ecx
c001e5d8:	5e                   	pop    esi
c001e5d9:	6a 0c                	push   0xc
c001e5db:	55                   	push   ebp
c001e5dc:	e8 0c 49 ff ff       	call   c0012eed <operator delete(void*, unsigned long)>
c001e5e1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5e4:	83 c4 10             	add    esp,0x10
c001e5e7:	89 f7                	mov    edi,esi
c001e5e9:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5ef:	85 c0                	test   eax,eax
c001e5f1:	0f 84 aa 00 00 00    	je     c001e6a1 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e5f7:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e5fa:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e5fe:	31 c9                	xor    ecx,ecx
c001e600:	eb 10                	jmp    c001e612 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e602:	41                   	inc    ecx
c001e603:	83 f9 10             	cmp    ecx,0x10
c001e606:	0f 84 95 00 00 00    	je     c001e6a1 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e60c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e612:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e619:	d3 fa                	sar    edx,cl
c001e61b:	83 e2 01             	and    edx,0x1
c001e61e:	74 e2                	je     c001e602 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e620:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e623:	01 ca                	add    edx,ecx
c001e625:	89 d5                	mov    ebp,edx
c001e627:	c1 e5 05             	shl    ebp,0x5
c001e62a:	01 ea                	add    edx,ebp
c001e62c:	01 d0                	add    eax,edx
c001e62e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e634:	83 fd 07             	cmp    ebp,0x7
c001e637:	75 c9                	jne    c001e602 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e639:	05 40 02 00 00       	add    eax,0x240
c001e63e:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e641:	83 fd ff             	cmp    ebp,0xffffffff
c001e644:	0f 8c 08 01 00 00    	jl     c001e752 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e64a:	0f 84 b9 01 00 00    	je     c001e809 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e650:	85 ed                	test   ebp,ebp
c001e652:	0f 84 a0 01 00 00    	je     c001e7f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e658:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e65a:	75 a6                	jne    c001e602 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e65c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e662:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e666:	01 d0                	add    eax,edx
c001e668:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e66c:	83 ec 0c             	sub    esp,0xc
c001e66f:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e675:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e678:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e67e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e685:	50                   	push   eax
c001e686:	e8 21 fe ff ff       	call   c001e4ac <unblockTask(ThreadControlBlock*)>
c001e68b:	83 c4 10             	add    esp,0x10
c001e68e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e691:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e695:	89 f7                	mov    edi,esi
c001e697:	41                   	inc    ecx
c001e698:	83 f9 10             	cmp    ecx,0x10
c001e69b:	0f 85 6b ff ff ff    	jne    c001e60c <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e6a1:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e6a7:	85 c0                	test   eax,eax
c001e6a9:	74 5d                	je     c001e708 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e6ab:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e6b1:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e6b7:	74 4f                	je     c001e708 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e6b9:	83 ec 0c             	sub    esp,0xc
c001e6bc:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e6c1:	e8 18 a4 00 00       	call   c0028ade <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6c6:	c7 04 24 a8 1b 03 c0 	mov    DWORD PTR [esp],0xc0031ba8
c001e6cd:	89 c7                	mov    edi,eax
c001e6cf:	e8 12 a4 00 00       	call   c0028ae6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e6d4:	83 c4 10             	add    esp,0x10
c001e6d7:	84 c0                	test   al,al
c001e6d9:	0f 84 e4 00 00 00    	je     c001e7c3 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e6df:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6e2:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e6e8:	85 d2                	test   edx,edx
c001e6ea:	74 0f                	je     c001e6fb <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e6ec:	83 ec 0c             	sub    esp,0xc
c001e6ef:	8b 02                	mov    eax,DWORD PTR [edx]
c001e6f1:	52                   	push   edx
c001e6f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e6f5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6f8:	83 c4 10             	add    esp,0x10
c001e6fb:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e705:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e708:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e70e:	85 db                	test   ebx,ebx
c001e710:	74 16                	je     c001e728 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e712:	83 ec 0c             	sub    esp,0xc
c001e715:	53                   	push   ebx
c001e716:	e8 0d 3b ff ff       	call   c0012228 <VAS::~VAS()>
c001e71b:	58                   	pop    eax
c001e71c:	5a                   	pop    edx
c001e71d:	6a 10                	push   0x10
c001e71f:	53                   	push   ebx
c001e720:	e8 c8 47 ff ff       	call   c0012eed <operator delete(void*, unsigned long)>
c001e725:	83 c4 10             	add    esp,0x10
c001e728:	83 ec 0c             	sub    esp,0xc
c001e72b:	68 3d c4 02 c0       	push   0xc002c43d
c001e730:	e8 98 48 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001e735:	83 c4 10             	add    esp,0x10
c001e738:	83 ec 08             	sub    esp,0x8
c001e73b:	68 3f 07 00 00       	push   0x73f
c001e740:	68 4b c4 02 c0       	push   0xc002c44b
c001e745:	e8 83 48 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001e74a:	83 c4 2c             	add    esp,0x2c
c001e74d:	5b                   	pop    ebx
c001e74e:	5e                   	pop    esi
c001e74f:	5f                   	pop    edi
c001e750:	5d                   	pop    ebp
c001e751:	c3                   	ret    
c001e752:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e756:	83 ec 0c             	sub    esp,0xc
c001e759:	68 28 c7 02 c0       	push   0xc002c728
c001e75e:	e8 0c bf ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001e763:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e766:	83 c4 10             	add    esp,0x10
c001e769:	89 f7                	mov    edi,esi
c001e76b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e76f:	e9 8e fe ff ff       	jmp    c001e602 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e774:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e77a:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e780:	75 1c                	jne    c001e79e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e782:	83 ec 0c             	sub    esp,0xc
c001e785:	68 90 c7 02 c0       	push   0xc002c790
c001e78a:	e8 3e 48 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001e78f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e796:	e8 8f fb ff ff       	call   c001e32a <blockTask(TaskState)>
c001e79b:	83 c4 10             	add    esp,0x10
c001e79e:	83 ec 08             	sub    esp,0x8
c001e7a1:	56                   	push   esi
c001e7a2:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e7a7:	e8 04 a4 00 00       	call   c0028bb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e7ac:	c7 04 24 a8 1b 03 c0 	mov    DWORD PTR [esp],0xc0031ba8
c001e7b3:	e8 26 a3 00 00       	call   c0028ade <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7b8:	83 c4 10             	add    esp,0x10
c001e7bb:	39 f8                	cmp    eax,edi
c001e7bd:	0f 84 1c ff ff ff    	je     c001e6df <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e7c3:	83 ec 0c             	sub    esp,0xc
c001e7c6:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e7cb:	e8 0e a3 00 00       	call   c0028ade <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7d0:	c7 04 24 a8 1b 03 c0 	mov    DWORD PTR [esp],0xc0031ba8
c001e7d7:	89 c6                	mov    esi,eax
c001e7d9:	e8 24 a3 00 00       	call   c0028b02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e7de:	83 c4 10             	add    esp,0x10
c001e7e1:	39 f3                	cmp    ebx,esi
c001e7e3:	74 b9                	je     c001e79e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7e5:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e7e8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7eb:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e7f1:	75 ab                	jne    c001e79e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7f3:	e9 7c ff ff ff       	jmp    c001e774 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e7f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e7fc:	83 ec 0c             	sub    esp,0xc
c001e7ff:	68 5c c7 02 c0       	push   0xc002c75c
c001e804:	e9 55 ff ff ff       	jmp    c001e75e <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e809:	8b 36                	mov    esi,DWORD PTR [esi]
c001e80b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e80f:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e812:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e815:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e81b:	01 d7                	add    edi,edx
c001e81d:	89 f8                	mov    eax,edi
c001e81f:	e9 44 fe ff ff       	jmp    c001e668 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e824 <cleanerTaskFunction(void*)>:
c001e824:	53                   	push   ebx
c001e825:	83 ec 08             	sub    esp,0x8
c001e828:	e8 69 f6 ff ff       	call   c001de96 <unlockScheduler()>
c001e82d:	e8 62 f6 ff ff       	call   c001de94 <lockScheduler()>
c001e832:	80 3d 6c 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b6c,0x0
c001e839:	0f 85 8e 00 00 00    	jne    c001e8cd <cleanerTaskFunction(void*)+0xa9>
c001e83f:	83 ec 0c             	sub    esp,0xc
c001e842:	6a 02                	push   0x2
c001e844:	e8 9f fa ff ff       	call   c001e2e8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e849:	83 c4 10             	add    esp,0x10
c001e84c:	c6 05 6c 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b6c,0x0
c001e853:	e8 63 f6 ff ff       	call   c001debb <lockStuff()>
c001e858:	e8 37 f6 ff ff       	call   c001de94 <lockScheduler()>
c001e85d:	83 ec 0c             	sub    esp,0xc
c001e860:	68 90 1b 03 c0       	push   0xc0031b90
c001e865:	e8 7c a2 00 00       	call   c0028ae6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e86a:	83 c4 10             	add    esp,0x10
c001e86d:	84 c0                	test   al,al
c001e86f:	75 40                	jne    c001e8b1 <cleanerTaskFunction(void*)+0x8d>
c001e871:	83 ec 0c             	sub    esp,0xc
c001e874:	68 90 1b 03 c0       	push   0xc0031b90
c001e879:	e8 60 a2 00 00       	call   c0028ade <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e87e:	c7 04 24 90 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b90
c001e885:	89 c3                	mov    ebx,eax
c001e887:	e8 76 a2 00 00       	call   c0028b02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e88c:	c7 04 24 61 c4 02 c0 	mov    DWORD PTR [esp],0xc002c461
c001e893:	e8 35 47 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001e898:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e89b:	e8 bb fc ff ff       	call   c001e55b <cleanupTerminatedTask(ThreadControlBlock*)>
c001e8a0:	c7 04 24 7a c4 02 c0 	mov    DWORD PTR [esp],0xc002c47a
c001e8a7:	e8 21 47 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001e8ac:	83 c4 10             	add    esp,0x10
c001e8af:	eb ac                	jmp    c001e85d <cleanerTaskFunction(void*)+0x39>
c001e8b1:	e8 e0 f5 ff ff       	call   c001de96 <unlockScheduler()>
c001e8b6:	e8 9a f9 ff ff       	call   c001e255 <unlockStuff()>
c001e8bb:	e8 d4 f5 ff ff       	call   c001de94 <lockScheduler()>
c001e8c0:	80 3d 6c 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b6c,0x0
c001e8c7:	0f 84 72 ff ff ff    	je     c001e83f <cleanerTaskFunction(void*)+0x1b>
c001e8cd:	e8 c4 f5 ff ff       	call   c001de96 <unlockScheduler()>
c001e8d2:	e9 75 ff ff ff       	jmp    c001e84c <cleanerTaskFunction(void*)+0x28>

c001e8d7 <terminateTask(int)>:
c001e8d7:	83 ec 14             	sub    esp,0x14
c001e8da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8df:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e8e2:	83 c0 0c             	add    eax,0xc
c001e8e5:	50                   	push   eax
c001e8e6:	68 b8 c7 02 c0       	push   0xc002c7b8
c001e8eb:	e8 dd 46 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001e8f0:	e8 c6 f5 ff ff       	call   c001debb <lockStuff()>
c001e8f5:	e8 9a f5 ff ff       	call   c001de94 <lockScheduler()>
c001e8fa:	c7 04 24 8d c4 02 c0 	mov    DWORD PTR [esp],0xc002c48d
c001e901:	e8 c7 46 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001e906:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e90a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e90f:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e912:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e917:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e91a:	5a                   	pop    edx
c001e91b:	59                   	pop    ecx
c001e91c:	50                   	push   eax
c001e91d:	68 90 1b 03 c0       	push   0xc0031b90
c001e922:	e8 89 a2 00 00       	call   c0028bb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e927:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e92c:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e933:	c7 04 24 a7 c4 02 c0 	mov    DWORD PTR [esp],0xc002c4a7
c001e93a:	e8 8e 46 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001e93f:	83 c4 10             	add    esp,0x10
c001e942:	a1 68 1b 03 c0       	mov    eax,ds:0xc0031b68
c001e947:	85 c0                	test   eax,eax
c001e949:	74 5a                	je     c001e9a5 <terminateTask(int)+0xce>
c001e94b:	83 ec 0c             	sub    esp,0xc
c001e94e:	68 c1 c4 02 c0       	push   0xc002c4c1
c001e953:	e8 75 46 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001e958:	58                   	pop    eax
c001e959:	c6 05 6c 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b6c,0x1
c001e960:	ff 35 68 1b 03 c0    	push   DWORD PTR ds:0xc0031b68
c001e966:	e8 41 fb ff ff       	call   c001e4ac <unblockTask(ThreadControlBlock*)>
c001e96b:	c7 04 24 db c4 02 c0 	mov    DWORD PTR [esp],0xc002c4db
c001e972:	e8 56 46 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001e977:	83 c4 10             	add    esp,0x10
c001e97a:	e8 17 f5 ff ff       	call   c001de96 <unlockScheduler()>
c001e97f:	e8 d1 f8 ff ff       	call   c001e255 <unlockStuff()>
c001e984:	83 ec 0c             	sub    esp,0xc
c001e987:	68 13 c5 02 c0       	push   0xc002c513
c001e98c:	e8 3c 46 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001e991:	83 c4 10             	add    esp,0x10
c001e994:	e8 fb f4 ff ff       	call   c001de94 <lockScheduler()>
c001e999:	e8 32 f8 ff ff       	call   c001e1d0 <schedule()>
c001e99e:	e8 f3 f4 ff ff       	call   c001de96 <unlockScheduler()>
c001e9a3:	eb ef                	jmp    c001e994 <terminateTask(int)+0xbd>
c001e9a5:	83 ec 0c             	sub    esp,0xc
c001e9a8:	68 f5 c4 02 c0       	push   0xc002c4f5
c001e9ad:	e8 1b 46 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001e9b2:	83 c4 10             	add    esp,0x10
c001e9b5:	eb c3                	jmp    c001e97a <terminateTask(int)+0xa3>

c001e9b7 <Thr::terminateFromIRQ(int)>:
c001e9b7:	83 ec 18             	sub    esp,0x18
c001e9ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9be:	e8 14 ff ff ff       	call   c001e8d7 <terminateTask(int)>
c001e9c3:	90                   	nop

c001e9c4 <Semaphore::release()>:
c001e9c4:	83 ec 0c             	sub    esp,0xc
c001e9c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9cb:	e8 eb f4 ff ff       	call   c001debb <lockStuff()>
c001e9d0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e9d3:	85 d2                	test   edx,edx
c001e9d5:	74 1a                	je     c001e9f1 <Semaphore::release()+0x2d>
c001e9d7:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e9da:	83 ec 0c             	sub    esp,0xc
c001e9dd:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e9e0:	52                   	push   edx
c001e9e1:	e8 c6 fa ff ff       	call   c001e4ac <unblockTask(ThreadControlBlock*)>
c001e9e6:	83 c4 10             	add    esp,0x10
c001e9e9:	83 c4 0c             	add    esp,0xc
c001e9ec:	e9 64 f8 ff ff       	jmp    c001e255 <unlockStuff()>
c001e9f1:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e9f4:	83 c4 0c             	add    esp,0xc
c001e9f7:	e9 59 f8 ff ff       	jmp    c001e255 <unlockStuff()>

c001e9fc <__static_initialization_and_destruction_0(int, int)>:
c001e9fc:	83 ec 0c             	sub    esp,0xc
c001e9ff:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ea04:	0f 85 88 00 00 00    	jne    c001ea92 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ea0a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ea12:	75 7e                	jne    c001ea92 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ea14:	83 ec 0c             	sub    esp,0xc
c001ea17:	68 a8 1b 03 c0       	push   0xc0031ba8
c001ea1c:	e8 3f a3 00 00       	call   c0028d60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea21:	83 c4 10             	add    esp,0x10
c001ea24:	83 ec 04             	sub    esp,0x4
c001ea27:	68 70 d5 02 c0       	push   0xc002d570
c001ea2c:	68 a8 1b 03 c0       	push   0xc0031ba8
c001ea31:	68 20 8d 02 c0       	push   0xc0028d20
c001ea36:	e8 2c 44 ff ff       	call   c0012e67 <__cxa_atexit>
c001ea3b:	83 c4 10             	add    esp,0x10
c001ea3e:	83 ec 0c             	sub    esp,0xc
c001ea41:	68 9c 1b 03 c0       	push   0xc0031b9c
c001ea46:	e8 15 a3 00 00       	call   c0028d60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea4b:	83 c4 10             	add    esp,0x10
c001ea4e:	83 ec 04             	sub    esp,0x4
c001ea51:	68 70 d5 02 c0       	push   0xc002d570
c001ea56:	68 9c 1b 03 c0       	push   0xc0031b9c
c001ea5b:	68 20 8d 02 c0       	push   0xc0028d20
c001ea60:	e8 02 44 ff ff       	call   c0012e67 <__cxa_atexit>
c001ea65:	83 c4 10             	add    esp,0x10
c001ea68:	83 ec 0c             	sub    esp,0xc
c001ea6b:	68 90 1b 03 c0       	push   0xc0031b90
c001ea70:	e8 eb a2 00 00       	call   c0028d60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea75:	83 c4 10             	add    esp,0x10
c001ea78:	83 ec 04             	sub    esp,0x4
c001ea7b:	68 70 d5 02 c0       	push   0xc002d570
c001ea80:	68 90 1b 03 c0       	push   0xc0031b90
c001ea85:	68 20 8d 02 c0       	push   0xc0028d20
c001ea8a:	e8 d8 43 ff ff       	call   c0012e67 <__cxa_atexit>
c001ea8f:	83 c4 10             	add    esp,0x10
c001ea92:	90                   	nop
c001ea93:	83 c4 0c             	add    esp,0xc
c001ea96:	c3                   	ret    

c001ea97 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ea97:	83 ec 0c             	sub    esp,0xc
c001ea9a:	83 ec 08             	sub    esp,0x8
c001ea9d:	68 ff ff 00 00       	push   0xffff
c001eaa2:	6a 01                	push   0x1
c001eaa4:	e8 53 ff ff ff       	call   c001e9fc <__static_initialization_and_destruction_0(int, int)>
c001eaa9:	83 c4 10             	add    esp,0x10
c001eaac:	83 c4 0c             	add    esp,0xc
c001eaaf:	c3                   	ret    

c001eab0 <Vm::inbv(unsigned short)>:
c001eab0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eab4:	66 81 fa fe fe       	cmp    dx,0xfefe
c001eab9:	75 06                	jne    c001eac1 <Vm::inbv(unsigned short)+0x11>
c001eabb:	a0 ec 1b 03 c0       	mov    al,ds:0xc0031bec
c001eac0:	c3                   	ret    
c001eac1:	ec                   	in     al,dx
c001eac2:	c3                   	ret    

c001eac3 <Vm::outbv(unsigned short, unsigned char)>:
c001eac3:	53                   	push   ebx
c001eac4:	83 ec 08             	sub    esp,0x8
c001eac7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eacb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eacf:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ead4:	75 38                	jne    c001eb0e <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ead6:	0f b6 c3             	movzx  eax,bl
c001ead9:	51                   	push   ecx
c001eada:	51                   	push   ecx
c001eadb:	50                   	push   eax
c001eadc:	68 d7 c7 02 c0       	push   0xc002c7d7
c001eae1:	e8 e7 44 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001eae6:	8b 15 ec 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bec
c001eaec:	83 c4 10             	add    esp,0x10
c001eaef:	8d 42 01             	lea    eax,[edx+0x1]
c001eaf2:	88 9a 00 1c 03 c0    	mov    BYTE PTR [edx-0x3ffce400],bl
c001eaf8:	a3 ec 1b 03 c0       	mov    ds:0xc0031bec,eax
c001eafd:	83 f8 20             	cmp    eax,0x20
c001eb00:	75 0f                	jne    c001eb11 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eb02:	c7 05 ec 1b 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031bec,0x1f
c001eb0c:	eb 03                	jmp    c001eb11 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eb0e:	88 d8                	mov    al,bl
c001eb10:	ee                   	out    dx,al
c001eb11:	83 c4 08             	add    esp,0x8
c001eb14:	5b                   	pop    ebx
c001eb15:	c3                   	ret    

c001eb16 <Vm::realToLinear(unsigned short, unsigned short)>:
c001eb16:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eb1b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eb20:	c1 e0 04             	shl    eax,0x4
c001eb23:	01 d0                	add    eax,edx
c001eb25:	c3                   	ret    

c001eb26 <Vm::getSegment(unsigned int)>:
c001eb26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb2a:	c1 e8 10             	shr    eax,0x10
c001eb2d:	c3                   	ret    

c001eb2e <Vm::getOffset(unsigned int)>:
c001eb2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb32:	c3                   	ret    

c001eb33 <Vm::mainloop2()>:
c001eb33:	83 ec 0c             	sub    esp,0xc
c001eb36:	e8 59 f3 ff ff       	call   c001de94 <lockScheduler()>
c001eb3b:	83 ec 0c             	sub    esp,0xc
c001eb3e:	c6 05 e5 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031be5,0x1
c001eb45:	6a 02                	push   0x2
c001eb47:	e8 9c f7 ff ff       	call   c001e2e8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb51:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eb55:	52                   	push   edx
c001eb56:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eb5a:	52                   	push   edx
c001eb5b:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eb5f:	52                   	push   edx
c001eb60:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eb64:	50                   	push   eax
c001eb65:	e8 90 17 fe ff       	call   c00002fa <goToVM86>
c001eb6a:	83 c4 2c             	add    esp,0x2c
c001eb6d:	c3                   	ret    

c001eb6e <Vm::mainVm8086Loop(void*)>:
c001eb6e:	83 ec 0c             	sub    esp,0xc
c001eb71:	e8 20 f3 ff ff       	call   c001de96 <unlockScheduler()>
c001eb76:	83 c4 0c             	add    esp,0xc
c001eb79:	eb b8                	jmp    c001eb33 <Vm::mainloop2()>

c001eb7b <Vm::mainloop3(unsigned long)>:
c001eb7b:	53                   	push   ebx
c001eb7c:	83 ec 08             	sub    esp,0x8
c001eb7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb83:	e8 0c f3 ff ff       	call   c001de94 <lockScheduler()>
c001eb88:	83 ec 0c             	sub    esp,0xc
c001eb8b:	89 1d e0 1b 03 c0    	mov    DWORD PTR ds:0xc0031be0,ebx
c001eb91:	6a 02                	push   0x2
c001eb93:	c6 05 e4 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031be4,0x1
c001eb9a:	e8 49 f7 ff ff       	call   c001e2e8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb9f:	83 c4 18             	add    esp,0x18
c001eba2:	5b                   	pop    ebx
c001eba3:	eb 8e                	jmp    c001eb33 <Vm::mainloop2()>

c001eba5 <Vm::initialise8086()>:
c001eba5:	83 ec 0c             	sub    esp,0xc
c001eba8:	68 80 00 00 00       	push   0x80
c001ebad:	6a 00                	push   0x0
c001ebaf:	68 6e eb 01 c0       	push   0xc001eb6e
c001ebb4:	ff 35 b4 1b 03 c0    	push   DWORD PTR ds:0xc0031bb4
c001ebba:	e8 07 f4 ff ff       	call   c001dfc6 <Process::createThread(void (*)(void*), void*, int)>
c001ebbf:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ebc6:	a3 e8 1b 03 c0       	mov    ds:0xc0031be8,eax
c001ebcb:	68 00 01 00 00       	push   0x100
c001ebd0:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001ebd5:	6a 00                	push   0x0
c001ebd7:	6a 00                	push   0x0
c001ebd9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ebdf:	e8 a4 3a ff ff       	call   c0012688 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ebe4:	83 c4 2c             	add    esp,0x2c
c001ebe7:	c3                   	ret    

c001ebe8 <Vm::finish8086()>:
c001ebe8:	53                   	push   ebx
c001ebe9:	83 ec 08             	sub    esp,0x8
c001ebec:	e8 a3 f2 ff ff       	call   c001de94 <lockScheduler()>
c001ebf1:	80 3d e4 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031be4,0x0
c001ebf8:	75 0c                	jne    c001ec06 <Vm::finish8086()+0x1e>
c001ebfa:	e8 d1 f5 ff ff       	call   c001e1d0 <schedule()>
c001ebff:	e8 92 f2 ff ff       	call   c001de96 <unlockScheduler()>
c001ec04:	eb e6                	jmp    c001ebec <Vm::finish8086()+0x4>
c001ec06:	83 ec 0c             	sub    esp,0xc
c001ec09:	8b 1d e0 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031be0
c001ec0f:	ff 35 e8 1b 03 c0    	push   DWORD PTR ds:0xc0031be8
c001ec15:	c6 05 e4 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031be4,0x0
c001ec1c:	e8 8b f8 ff ff       	call   c001e4ac <unblockTask(ThreadControlBlock*)>
c001ec21:	e8 70 f2 ff ff       	call   c001de96 <unlockScheduler()>
c001ec26:	89 d8                	mov    eax,ebx
c001ec28:	83 c4 18             	add    esp,0x18
c001ec2b:	5b                   	pop    ebx
c001ec2c:	c3                   	ret    

c001ec2d <Vm::getOutput8086(unsigned char*)>:
c001ec2d:	83 ec 10             	sub    esp,0x10
c001ec30:	ff 35 ec 1b 03 c0    	push   DWORD PTR ds:0xc0031bec
c001ec36:	68 00 1c 03 c0       	push   0xc0031c00
c001ec3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec3f:	e8 00 1b fe ff       	call   c0000744 <memcpy>
c001ec44:	a1 ec 1b 03 c0       	mov    eax,ds:0xc0031bec
c001ec49:	c7 05 ec 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031bec,0x0
c001ec53:	83 c4 1c             	add    esp,0x1c
c001ec56:	c3                   	ret    

c001ec57 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ec57:	55                   	push   ebp
c001ec58:	57                   	push   edi
c001ec59:	56                   	push   esi
c001ec5a:	53                   	push   ebx
c001ec5b:	83 ec 2c             	sub    esp,0x2c
c001ec5e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ec62:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ec66:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ec6a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ec6e:	e8 21 f2 ff ff       	call   c001de94 <lockScheduler()>
c001ec73:	a0 e5 1b 03 c0       	mov    al,ds:0xc0031be5
c001ec78:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec7c:	84 c0                	test   al,al
c001ec7e:	75 0c                	jne    c001ec8c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ec80:	e8 4b f5 ff ff       	call   c001e1d0 <schedule()>
c001ec85:	e8 0c f2 ff ff       	call   c001de96 <unlockScheduler()>
c001ec8a:	eb e2                	jmp    c001ec6e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ec8c:	a1 e8 1b 03 c0       	mov    eax,ds:0xc0031be8
c001ec91:	c7 05 ec 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031bec,0x0
c001ec9b:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ec9f:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001eca3:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001eca7:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ecab:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ecaf:	50                   	push   eax
c001ecb0:	6a 20                	push   0x20
c001ecb2:	6a 00                	push   0x0
c001ecb4:	68 00 1c 03 c0       	push   0xc0031c00
c001ecb9:	e8 ba 1a fe ff       	call   c0000778 <memset>
c001ecbe:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ecc5:	e8 76 0b ff ff       	call   c000f840 <malloc>
c001ecca:	83 c4 0c             	add    esp,0xc
c001eccd:	89 c7                	mov    edi,eax
c001eccf:	ff 35 b4 1b 03 c0    	push   DWORD PTR ds:0xc0031bb4
c001ecd5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ecd9:	50                   	push   eax
c001ecda:	e8 47 48 ff ff       	call   c0013526 <File::File(char const*, Process*)>
c001ecdf:	83 c4 10             	add    esp,0x10
c001ece2:	85 ff                	test   edi,edi
c001ece4:	75 0a                	jne    c001ecf0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ece6:	83 ec 0c             	sub    esp,0xc
c001ece9:	68 f3 c7 02 c0       	push   0xc002c7f3
c001ecee:	eb 27                	jmp    c001ed17 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ecf0:	50                   	push   eax
c001ecf1:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ecf5:	50                   	push   eax
c001ecf6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ecfa:	50                   	push   eax
c001ecfb:	57                   	push   edi
c001ecfc:	e8 35 4b ff ff       	call   c0013836 <File::stat(unsigned long long*, bool*)>
c001ed01:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ed06:	83 c4 10             	add    esp,0x10
c001ed09:	89 e8                	mov    eax,ebp
c001ed0b:	84 c0                	test   al,al
c001ed0d:	74 19                	je     c001ed28 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ed0f:	83 ec 0c             	sub    esp,0xc
c001ed12:	68 07 c8 02 c0       	push   0xc002c807
c001ed17:	e8 53 b9 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001ed1c:	31 ed                	xor    ebp,ebp
c001ed1e:	e8 73 f1 ff ff       	call   c001de96 <unlockScheduler()>
c001ed23:	83 c4 10             	add    esp,0x10
c001ed26:	eb 75                	jmp    c001ed9d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed28:	50                   	push   eax
c001ed29:	50                   	push   eax
c001ed2a:	6a 01                	push   0x1
c001ed2c:	57                   	push   edi
c001ed2d:	e8 58 48 ff ff       	call   c001358a <File::open(FileOpenMode)>
c001ed32:	83 c4 10             	add    esp,0x10
c001ed35:	85 c0                	test   eax,eax
c001ed37:	74 17                	je     c001ed50 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ed39:	83 ec 0c             	sub    esp,0xc
c001ed3c:	68 20 c8 02 c0       	push   0xc002c820
c001ed41:	e8 29 b9 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001ed46:	e8 4b f1 ff ff       	call   c001de96 <unlockScheduler()>
c001ed4b:	83 c4 10             	add    esp,0x10
c001ed4e:	eb 4d                	jmp    c001ed9d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed50:	0f b7 f6             	movzx  esi,si
c001ed53:	50                   	push   eax
c001ed54:	0f b7 db             	movzx  ebx,bx
c001ed57:	50                   	push   eax
c001ed58:	56                   	push   esi
c001ed59:	53                   	push   ebx
c001ed5a:	e8 b7 fd ff ff       	call   c001eb16 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed5f:	5a                   	pop    edx
c001ed60:	8b 17                	mov    edx,DWORD PTR [edi]
c001ed62:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ed66:	51                   	push   ecx
c001ed67:	50                   	push   eax
c001ed68:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed6c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed70:	57                   	push   edi
c001ed71:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ed74:	83 c4 14             	add    esp,0x14
c001ed77:	57                   	push   edi
c001ed78:	e8 6b 48 ff ff       	call   c00135e8 <File::close()>
c001ed7d:	c6 05 e5 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031be5,0x0
c001ed84:	e8 0d f1 ff ff       	call   c001de96 <unlockScheduler()>
c001ed89:	59                   	pop    ecx
c001ed8a:	ff 35 e8 1b 03 c0    	push   DWORD PTR ds:0xc0031be8
c001ed90:	e8 17 f7 ff ff       	call   c001e4ac <unblockTask(ThreadControlBlock*)>
c001ed95:	83 c4 10             	add    esp,0x10
c001ed98:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ed9d:	83 c4 2c             	add    esp,0x2c
c001eda0:	89 e8                	mov    eax,ebp
c001eda2:	5b                   	pop    ebx
c001eda3:	5e                   	pop    esi
c001eda4:	5f                   	pop    edi
c001eda5:	5d                   	pop    ebp
c001eda6:	c3                   	ret    

c001eda7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001eda7:	57                   	push   edi
c001eda8:	56                   	push   esi
c001eda9:	53                   	push   ebx
c001edaa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001edae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edb2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001edb6:	83 e8 06             	sub    eax,0x6
c001edb9:	0f b7 c0             	movzx  eax,ax
c001edbc:	50                   	push   eax
c001edbd:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001edc2:	50                   	push   eax
c001edc3:	e8 4e fd ff ff       	call   c001eb16 <Vm::realToLinear(unsigned short, unsigned short)>
c001edc8:	5a                   	pop    edx
c001edc9:	5e                   	pop    esi
c001edca:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001edcd:	8d 56 fa             	lea    edx,[esi-0x6]
c001edd0:	81 e2 ff ff 00 00    	and    edx,0xffff
c001edd6:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001edd9:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001eddc:	83 c2 02             	add    edx,0x2
c001eddf:	66 89 10             	mov    WORD PTR [eax],dx
c001ede2:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ede5:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ede9:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001edec:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001edf0:	89 d6                	mov    esi,edx
c001edf2:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001edf8:	66 81 e6 ff fd       	and    si,0xfdff
c001edfd:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ee01:	74 07                	je     c001ee0a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ee03:	89 d6                	mov    esi,edx
c001ee05:	66 81 ce 00 02       	or     si,0x200
c001ee0a:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ee0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee13:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ee17:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ee1f:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ee22:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ee2a:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ee2d:	5b                   	pop    ebx
c001ee2e:	5e                   	pop    esi
c001ee2f:	5f                   	pop    edi
c001ee30:	c3                   	ret    

c001ee31 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ee31:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee36:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee3b:	c1 e0 04             	shl    eax,0x4
c001ee3e:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ee41:	c3                   	ret    

c001ee42 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ee42:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee47:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee4c:	c1 e0 04             	shl    eax,0x4
c001ee4f:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ee53:	c3                   	ret    

c001ee54 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ee54:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee59:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee5e:	c1 e0 04             	shl    eax,0x4
c001ee61:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ee64:	c3                   	ret    

c001ee65 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ee65:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee6a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee6f:	c1 e0 04             	shl    eax,0x4
c001ee72:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee76:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ee79:	c3                   	ret    

c001ee7a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ee7a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee7f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee84:	c1 e0 04             	shl    eax,0x4
c001ee87:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee8b:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ee8f:	c3                   	ret    

c001ee90 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ee90:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee95:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee9a:	c1 e0 04             	shl    eax,0x4
c001ee9d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eea1:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001eea4:	c3                   	ret    

c001eea5 <Vm::faultHandler(regs*)>:
c001eea5:	55                   	push   ebp
c001eea6:	57                   	push   edi
c001eea7:	56                   	push   esi
c001eea8:	53                   	push   ebx
c001eea9:	83 ec 1c             	sub    esp,0x1c
c001eeac:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eeb0:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001eeb3:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001eeb6:	0f b7 c1             	movzx  eax,cx
c001eeb9:	50                   	push   eax
c001eeba:	0f b7 c3             	movzx  eax,bx
c001eebd:	c1 e3 04             	shl    ebx,0x4
c001eec0:	50                   	push   eax
c001eec1:	e8 50 fc ff ff       	call   c001eb16 <Vm::realToLinear(unsigned short, unsigned short)>
c001eec6:	5a                   	pop    edx
c001eec7:	89 c5                	mov    ebp,eax
c001eec9:	5e                   	pop    esi
c001eeca:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001eece:	50                   	push   eax
c001eecf:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001eed3:	50                   	push   eax
c001eed4:	e8 3d fc ff ff       	call   c001eb16 <Vm::realToLinear(unsigned short, unsigned short)>
c001eed9:	01 cb                	add    ebx,ecx
c001eedb:	89 c6                	mov    esi,eax
c001eedd:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001eee1:	50                   	push   eax
c001eee2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eee6:	50                   	push   eax
c001eee7:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eeeb:	50                   	push   eax
c001eeec:	55                   	push   ebp
c001eeed:	53                   	push   ebx
c001eeee:	b3 06                	mov    bl,0x6
c001eef0:	68 39 c8 02 c0       	push   0xc002c839
c001eef5:	e8 d3 40 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001eefa:	83 c4 20             	add    esp,0x20
c001eefd:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ef02:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ef07:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ef0b:	3c 9d                	cmp    al,0x9d
c001ef0d:	0f 84 d7 02 00 00    	je     c001f1ea <Vm::faultHandler(regs*)+0x345>
c001ef13:	0f 87 a3 00 00 00    	ja     c001efbc <Vm::faultHandler(regs*)+0x117>
c001ef19:	3c 66                	cmp    al,0x66
c001ef1b:	0f 84 15 02 00 00    	je     c001f136 <Vm::faultHandler(regs*)+0x291>
c001ef21:	77 5f                	ja     c001ef82 <Vm::faultHandler(regs*)+0xdd>
c001ef23:	3c 36                	cmp    al,0x36
c001ef25:	0f 84 f1 01 00 00    	je     c001f11c <Vm::faultHandler(regs*)+0x277>
c001ef2b:	77 28                	ja     c001ef55 <Vm::faultHandler(regs*)+0xb0>
c001ef2d:	3c 26                	cmp    al,0x26
c001ef2f:	0f 84 99 01 00 00    	je     c001f0ce <Vm::faultHandler(regs*)+0x229>
c001ef35:	3c 2e                	cmp    al,0x2e
c001ef37:	0f 85 3b 07 00 00    	jne    c001f678 <Vm::faultHandler(regs*)+0x7d3>
c001ef3d:	83 ec 0c             	sub    esp,0xc
c001ef40:	31 db                	xor    ebx,ebx
c001ef42:	68 4e c8 02 c0       	push   0xc002c84e
c001ef47:	e8 81 40 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001ef4c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef4f:	83 c4 10             	add    esp,0x10
c001ef52:	45                   	inc    ebp
c001ef53:	eb b2                	jmp    c001ef07 <Vm::faultHandler(regs*)+0x62>
c001ef55:	3c 64                	cmp    al,0x64
c001ef57:	0f 84 8b 01 00 00    	je     c001f0e8 <Vm::faultHandler(regs*)+0x243>
c001ef5d:	0f 87 9f 01 00 00    	ja     c001f102 <Vm::faultHandler(regs*)+0x25d>
c001ef63:	3c 3e                	cmp    al,0x3e
c001ef65:	0f 85 0d 07 00 00    	jne    c001f678 <Vm::faultHandler(regs*)+0x7d3>
c001ef6b:	83 ec 0c             	sub    esp,0xc
c001ef6e:	b3 01                	mov    bl,0x1
c001ef70:	68 52 c8 02 c0       	push   0xc002c852
c001ef75:	e8 53 40 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001ef7a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef7d:	83 c4 10             	add    esp,0x10
c001ef80:	eb d0                	jmp    c001ef52 <Vm::faultHandler(regs*)+0xad>
c001ef82:	3c 6d                	cmp    al,0x6d
c001ef84:	0f 84 af 03 00 00    	je     c001f339 <Vm::faultHandler(regs*)+0x494>
c001ef8a:	77 15                	ja     c001efa1 <Vm::faultHandler(regs*)+0xfc>
c001ef8c:	3c 67                	cmp    al,0x67
c001ef8e:	0f 84 bf 01 00 00    	je     c001f153 <Vm::faultHandler(regs*)+0x2ae>
c001ef94:	3c 6c                	cmp    al,0x6c
c001ef96:	0f 84 3f 03 00 00    	je     c001f2db <Vm::faultHandler(regs*)+0x436>
c001ef9c:	e9 d7 06 00 00       	jmp    c001f678 <Vm::faultHandler(regs*)+0x7d3>
c001efa1:	3c 6f                	cmp    al,0x6f
c001efa3:	0f 84 a4 04 00 00    	je     c001f44d <Vm::faultHandler(regs*)+0x5a8>
c001efa9:	0f 82 11 04 00 00    	jb     c001f3c0 <Vm::faultHandler(regs*)+0x51b>
c001efaf:	3c 9c                	cmp    al,0x9c
c001efb1:	0f 84 ba 01 00 00    	je     c001f171 <Vm::faultHandler(regs*)+0x2cc>
c001efb7:	e9 bc 06 00 00       	jmp    c001f678 <Vm::faultHandler(regs*)+0x7d3>
c001efbc:	3c ec                	cmp    al,0xec
c001efbe:	0f 84 24 06 00 00    	je     c001f5e8 <Vm::faultHandler(regs*)+0x743>
c001efc4:	0f 87 93 00 00 00    	ja     c001f05d <Vm::faultHandler(regs*)+0x1b8>
c001efca:	3c e4                	cmp    al,0xe4
c001efcc:	0f 84 5c 05 00 00    	je     c001f52e <Vm::faultHandler(regs*)+0x689>
c001efd2:	77 6a                	ja     c001f03e <Vm::faultHandler(regs*)+0x199>
c001efd4:	3c cd                	cmp    al,0xcd
c001efd6:	0f 84 7e 02 00 00    	je     c001f25a <Vm::faultHandler(regs*)+0x3b5>
c001efdc:	3c cf                	cmp    al,0xcf
c001efde:	0f 85 94 06 00 00    	jne    c001f678 <Vm::faultHandler(regs*)+0x7d3>
c001efe4:	83 ec 0c             	sub    esp,0xc
c001efe7:	68 96 c8 02 c0       	push   0xc002c896
c001efec:	e8 dc 3f ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001eff1:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001eff4:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001eff7:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001effb:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001effe:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f002:	0d 00 02 02 00       	or     eax,0x20200
c001f007:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f00a:	56                   	push   esi
c001f00b:	53                   	push   ebx
c001f00c:	52                   	push   edx
c001f00d:	68 9c c8 02 c0       	push   0xc002c89c
c001f012:	e8 b6 3f ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f017:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f01b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f021:	66 c1 e8 09          	shr    ax,0x9
c001f025:	83 e0 01             	and    eax,0x1
c001f028:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f02b:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f02e:	83 c0 06             	add    eax,0x6
c001f031:	25 ff ff 00 00       	and    eax,0xffff
c001f036:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f039:	e9 95 02 00 00       	jmp    c001f2d3 <Vm::faultHandler(regs*)+0x42e>
c001f03e:	3c e6                	cmp    al,0xe6
c001f040:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f044:	0f 84 4e 05 00 00    	je     c001f598 <Vm::faultHandler(regs*)+0x6f3>
c001f04a:	0f 82 0a 05 00 00    	jb     c001f55a <Vm::faultHandler(regs*)+0x6b5>
c001f050:	3c e7                	cmp    al,0xe7
c001f052:	0f 84 69 05 00 00    	je     c001f5c1 <Vm::faultHandler(regs*)+0x71c>
c001f058:	e9 1b 06 00 00       	jmp    c001f678 <Vm::faultHandler(regs*)+0x7d3>
c001f05d:	3c ef                	cmp    al,0xef
c001f05f:	0f 84 e6 05 00 00    	je     c001f64b <Vm::faultHandler(regs*)+0x7a6>
c001f065:	77 37                	ja     c001f09e <Vm::faultHandler(regs*)+0x1f9>
c001f067:	3c ed                	cmp    al,0xed
c001f069:	0f 84 a3 05 00 00    	je     c001f612 <Vm::faultHandler(regs*)+0x76d>
c001f06f:	3c ee                	cmp    al,0xee
c001f071:	0f 85 01 06 00 00    	jne    c001f678 <Vm::faultHandler(regs*)+0x7d3>
c001f077:	52                   	push   edx
c001f078:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f07b:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f07e:	68 37 c9 02 c0       	push   0xc002c937
c001f083:	e8 45 3f ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f088:	59                   	pop    ecx
c001f089:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f08d:	5b                   	pop    ebx
c001f08e:	50                   	push   eax
c001f08f:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f093:	50                   	push   eax
c001f094:	e8 2a fa ff ff       	call   c001eac3 <Vm::outbv(unsigned short, unsigned char)>
c001f099:	e9 a5 05 00 00       	jmp    c001f643 <Vm::faultHandler(regs*)+0x79e>
c001f09e:	3c fa                	cmp    al,0xfa
c001f0a0:	0f 84 f7 01 00 00    	je     c001f29d <Vm::faultHandler(regs*)+0x3f8>
c001f0a6:	3c fb                	cmp    al,0xfb
c001f0a8:	0f 84 0a 02 00 00    	je     c001f2b8 <Vm::faultHandler(regs*)+0x413>
c001f0ae:	3c f3                	cmp    al,0xf3
c001f0b0:	0f 85 c2 05 00 00    	jne    c001f678 <Vm::faultHandler(regs*)+0x7d3>
c001f0b6:	83 ec 0c             	sub    esp,0xc
c001f0b9:	68 6f c8 02 c0       	push   0xc002c86f
c001f0be:	e8 0a 3f ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f0c3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0c6:	83 c4 10             	add    esp,0x10
c001f0c9:	e9 84 fe ff ff       	jmp    c001ef52 <Vm::faultHandler(regs*)+0xad>
c001f0ce:	83 ec 0c             	sub    esp,0xc
c001f0d1:	b3 02                	mov    bl,0x2
c001f0d3:	68 4a c8 02 c0       	push   0xc002c84a
c001f0d8:	e8 f0 3e ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f0dd:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0e0:	83 c4 10             	add    esp,0x10
c001f0e3:	e9 6a fe ff ff       	jmp    c001ef52 <Vm::faultHandler(regs*)+0xad>
c001f0e8:	83 ec 0c             	sub    esp,0xc
c001f0eb:	b3 03                	mov    bl,0x3
c001f0ed:	68 56 c8 02 c0       	push   0xc002c856
c001f0f2:	e8 d6 3e ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f0f7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0fa:	83 c4 10             	add    esp,0x10
c001f0fd:	e9 50 fe ff ff       	jmp    c001ef52 <Vm::faultHandler(regs*)+0xad>
c001f102:	83 ec 0c             	sub    esp,0xc
c001f105:	b3 04                	mov    bl,0x4
c001f107:	68 5a c8 02 c0       	push   0xc002c85a
c001f10c:	e8 bc 3e ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f111:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f114:	83 c4 10             	add    esp,0x10
c001f117:	e9 36 fe ff ff       	jmp    c001ef52 <Vm::faultHandler(regs*)+0xad>
c001f11c:	83 ec 0c             	sub    esp,0xc
c001f11f:	b3 05                	mov    bl,0x5
c001f121:	68 5e c8 02 c0       	push   0xc002c85e
c001f126:	e8 a2 3e ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f12b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f12e:	83 c4 10             	add    esp,0x10
c001f131:	e9 1c fe ff ff       	jmp    c001ef52 <Vm::faultHandler(regs*)+0xad>
c001f136:	83 ec 0c             	sub    esp,0xc
c001f139:	68 62 c8 02 c0       	push   0xc002c862
c001f13e:	e8 8a 3e ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f143:	83 c4 10             	add    esp,0x10
c001f146:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f149:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f14e:	e9 ff fd ff ff       	jmp    c001ef52 <Vm::faultHandler(regs*)+0xad>
c001f153:	50                   	push   eax
c001f154:	50                   	push   eax
c001f155:	6a 01                	push   0x1
c001f157:	68 67 c8 02 c0       	push   0xc002c867
c001f15c:	e8 6c 3e ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f161:	83 c4 10             	add    esp,0x10
c001f164:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f167:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f16c:	e9 e1 fd ff ff       	jmp    c001ef52 <Vm::faultHandler(regs*)+0xad>
c001f171:	83 ec 0c             	sub    esp,0xc
c001f174:	68 75 c8 02 c0       	push   0xc002c875
c001f179:	e8 4f 3e ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f17e:	83 c4 10             	add    esp,0x10
c001f181:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f184:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f189:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f18c:	74 2f                	je     c001f1bd <Vm::faultHandler(regs*)+0x318>
c001f18e:	83 ea 04             	sub    edx,0x4
c001f191:	25 ff 0d 00 00       	and    eax,0xdff
c001f196:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f19c:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f19f:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f1a2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1a8:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f1ac:	0f 84 bf 04 00 00    	je     c001f671 <Vm::faultHandler(regs*)+0x7cc>
c001f1b2:	80 cc 02             	or     ah,0x2
c001f1b5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f1b8:	e9 b4 04 00 00       	jmp    c001f671 <Vm::faultHandler(regs*)+0x7cc>
c001f1bd:	83 ea 02             	sub    edx,0x2
c001f1c0:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f1c6:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f1c9:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f1cd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1d3:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f1d7:	74 05                	je     c001f1de <Vm::faultHandler(regs*)+0x339>
c001f1d9:	80 cc 02             	or     ah,0x2
c001f1dc:	eb 03                	jmp    c001f1e1 <Vm::faultHandler(regs*)+0x33c>
c001f1de:	80 e4 fd             	and    ah,0xfd
c001f1e1:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f1e5:	e9 87 04 00 00       	jmp    c001f671 <Vm::faultHandler(regs*)+0x7cc>
c001f1ea:	83 ec 0c             	sub    esp,0xc
c001f1ed:	68 7c c8 02 c0       	push   0xc002c87c
c001f1f2:	e8 d6 3d ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f1f7:	83 c4 10             	add    esp,0x10
c001f1fa:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1ff:	74 28                	je     c001f229 <Vm::faultHandler(regs*)+0x384>
c001f201:	8b 06                	mov    eax,DWORD PTR [esi]
c001f203:	25 ff 0d 00 00       	and    eax,0xdff
c001f208:	0d 00 02 02 00       	or     eax,0x20200
c001f20d:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f210:	8b 06                	mov    eax,DWORD PTR [esi]
c001f212:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f218:	c1 e8 09             	shr    eax,0x9
c001f21b:	83 e0 01             	and    eax,0x1
c001f21e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f221:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f224:	83 c0 04             	add    eax,0x4
c001f227:	eb 24                	jmp    c001f24d <Vm::faultHandler(regs*)+0x3a8>
c001f229:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f22c:	0d 00 02 02 00       	or     eax,0x20200
c001f231:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f234:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f237:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f23d:	66 c1 e8 09          	shr    ax,0x9
c001f241:	83 e0 01             	and    eax,0x1
c001f244:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f247:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f24a:	83 c0 02             	add    eax,0x2
c001f24d:	25 ff ff 00 00       	and    eax,0xffff
c001f252:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f255:	e9 17 04 00 00       	jmp    c001f671 <Vm::faultHandler(regs*)+0x7cc>
c001f25a:	53                   	push   ebx
c001f25b:	53                   	push   ebx
c001f25c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f260:	50                   	push   eax
c001f261:	68 82 c8 02 c0       	push   0xc002c882
c001f266:	e8 62 3d ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f26b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f26f:	83 c4 10             	add    esp,0x10
c001f272:	3c ee                	cmp    al,0xee
c001f274:	75 10                	jne    c001f286 <Vm::faultHandler(regs*)+0x3e1>
c001f276:	83 ec 0c             	sub    esp,0xc
c001f279:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f27c:	e8 fa f8 ff ff       	call   c001eb7b <Vm::mainloop3(unsigned long)>
c001f281:	e9 c0 03 00 00       	jmp    c001f646 <Vm::faultHandler(regs*)+0x7a1>
c001f286:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f28a:	83 ec 0c             	sub    esp,0xc
c001f28d:	53                   	push   ebx
c001f28e:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f292:	53                   	push   ebx
c001f293:	55                   	push   ebp
c001f294:	50                   	push   eax
c001f295:	57                   	push   edi
c001f296:	e8 0c fb ff ff       	call   c001eda7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f29b:	eb 36                	jmp    c001f2d3 <Vm::faultHandler(regs*)+0x42e>
c001f29d:	83 ec 0c             	sub    esp,0xc
c001f2a0:	68 8c c8 02 c0       	push   0xc002c88c
c001f2a5:	e8 23 3d ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f2aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f2af:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f2b3:	e9 8b 03 00 00       	jmp    c001f643 <Vm::faultHandler(regs*)+0x79e>
c001f2b8:	83 ec 0c             	sub    esp,0xc
c001f2bb:	68 91 c8 02 c0       	push   0xc002c891
c001f2c0:	e8 08 3d ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f2c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f2ca:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f2ce:	e9 70 03 00 00       	jmp    c001f643 <Vm::faultHandler(regs*)+0x79e>
c001f2d3:	83 c4 20             	add    esp,0x20
c001f2d6:	e9 99 03 00 00       	jmp    c001f674 <Vm::faultHandler(regs*)+0x7cf>
c001f2db:	83 ec 0c             	sub    esp,0xc
c001f2de:	68 cf c8 02 c0       	push   0xc002c8cf
c001f2e3:	e8 e5 3c ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f2e8:	83 c4 10             	add    esp,0x10
c001f2eb:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f2ee:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2f3:	74 0d                	je     c001f302 <Vm::faultHandler(regs*)+0x45d>
c001f2f5:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f2fc:	0f 87 9e 01 00 00    	ja     c001f4a0 <Vm::faultHandler(regs*)+0x5fb>
c001f302:	83 ec 0c             	sub    esp,0xc
c001f305:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f309:	0f b7 db             	movzx  ebx,bx
c001f30c:	50                   	push   eax
c001f30d:	e8 9e f7 ff ff       	call   c001eab0 <Vm::inbv(unsigned short)>
c001f312:	83 c4 0c             	add    esp,0xc
c001f315:	0f b6 c0             	movzx  eax,al
c001f318:	50                   	push   eax
c001f319:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f31d:	50                   	push   eax
c001f31e:	53                   	push   ebx
c001f31f:	e8 41 fb ff ff       	call   c001ee65 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f324:	83 c4 10             	add    esp,0x10
c001f327:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f32a:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f32e:	74 03                	je     c001f333 <Vm::faultHandler(regs*)+0x48e>
c001f330:	48                   	dec    eax
c001f331:	eb 01                	jmp    c001f334 <Vm::faultHandler(regs*)+0x48f>
c001f333:	40                   	inc    eax
c001f334:	0f b7 c0             	movzx  eax,ax
c001f337:	eb 7f                	jmp    c001f3b8 <Vm::faultHandler(regs*)+0x513>
c001f339:	83 ec 0c             	sub    esp,0xc
c001f33c:	68 01 c9 02 c0       	push   0xc002c901
c001f341:	e8 87 3c ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f346:	83 c4 10             	add    esp,0x10
c001f349:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f34c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f351:	74 0d                	je     c001f360 <Vm::faultHandler(regs*)+0x4bb>
c001f353:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f35a:	0f 87 40 01 00 00    	ja     c001f4a0 <Vm::faultHandler(regs*)+0x5fb>
c001f360:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f363:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f367:	0f b7 db             	movzx  ebx,bx
c001f36a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f36f:	74 20                	je     c001f391 <Vm::faultHandler(regs*)+0x4ec>
c001f371:	ed                   	in     eax,dx
c001f372:	51                   	push   ecx
c001f373:	50                   	push   eax
c001f374:	56                   	push   esi
c001f375:	53                   	push   ebx
c001f376:	e8 15 fb ff ff       	call   c001ee90 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f37b:	83 c4 10             	add    esp,0x10
c001f37e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f381:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f385:	74 05                	je     c001f38c <Vm::faultHandler(regs*)+0x4e7>
c001f387:	83 e8 04             	sub    eax,0x4
c001f38a:	eb 27                	jmp    c001f3b3 <Vm::faultHandler(regs*)+0x50e>
c001f38c:	83 c0 04             	add    eax,0x4
c001f38f:	eb 22                	jmp    c001f3b3 <Vm::faultHandler(regs*)+0x50e>
c001f391:	66 ed                	in     ax,dx
c001f393:	0f b7 c0             	movzx  eax,ax
c001f396:	52                   	push   edx
c001f397:	50                   	push   eax
c001f398:	56                   	push   esi
c001f399:	53                   	push   ebx
c001f39a:	e8 db fa ff ff       	call   c001ee7a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f39f:	83 c4 10             	add    esp,0x10
c001f3a2:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f3a5:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3a9:	74 05                	je     c001f3b0 <Vm::faultHandler(regs*)+0x50b>
c001f3ab:	83 e8 02             	sub    eax,0x2
c001f3ae:	eb 03                	jmp    c001f3b3 <Vm::faultHandler(regs*)+0x50e>
c001f3b0:	83 c0 02             	add    eax,0x2
c001f3b3:	25 ff ff 00 00       	and    eax,0xffff
c001f3b8:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f3bb:	e9 b1 02 00 00       	jmp    c001f671 <Vm::faultHandler(regs*)+0x7cc>
c001f3c0:	83 ec 0c             	sub    esp,0xc
c001f3c3:	4b                   	dec    ebx
c001f3c4:	68 07 c9 02 c0       	push   0xc002c907
c001f3c9:	e8 ff 3b ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f3ce:	83 c4 10             	add    esp,0x10
c001f3d1:	80 fb 05             	cmp    bl,0x5
c001f3d4:	77 0a                	ja     c001f3e0 <Vm::faultHandler(regs*)+0x53b>
c001f3d6:	0f b6 db             	movzx  ebx,bl
c001f3d9:	ff 24 9d 78 c9 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3688]
c001f3e0:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f3e4:	eb 1b                	jmp    c001f401 <Vm::faultHandler(regs*)+0x55c>
c001f3e6:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f3ea:	eb 15                	jmp    c001f401 <Vm::faultHandler(regs*)+0x55c>
c001f3ec:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f3f0:	eb 0f                	jmp    c001f401 <Vm::faultHandler(regs*)+0x55c>
c001f3f2:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f3f6:	eb 09                	jmp    c001f401 <Vm::faultHandler(regs*)+0x55c>
c001f3f8:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f3fb:	eb 04                	jmp    c001f401 <Vm::faultHandler(regs*)+0x55c>
c001f3fd:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f401:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f406:	74 0d                	je     c001f415 <Vm::faultHandler(regs*)+0x570>
c001f408:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f40f:	0f 87 8b 00 00 00    	ja     c001f4a0 <Vm::faultHandler(regs*)+0x5fb>
c001f415:	53                   	push   ebx
c001f416:	53                   	push   ebx
c001f417:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f41b:	52                   	push   edx
c001f41c:	50                   	push   eax
c001f41d:	e8 0f fa ff ff       	call   c001ee31 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f422:	5e                   	pop    esi
c001f423:	0f b6 c0             	movzx  eax,al
c001f426:	5d                   	pop    ebp
c001f427:	50                   	push   eax
c001f428:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f42c:	50                   	push   eax
c001f42d:	e8 91 f6 ff ff       	call   c001eac3 <Vm::outbv(unsigned short, unsigned char)>
c001f432:	83 c4 10             	add    esp,0x10
c001f435:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f438:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f43c:	74 03                	je     c001f441 <Vm::faultHandler(regs*)+0x59c>
c001f43e:	48                   	dec    eax
c001f43f:	eb 01                	jmp    c001f442 <Vm::faultHandler(regs*)+0x59d>
c001f441:	40                   	inc    eax
c001f442:	0f b7 c0             	movzx  eax,ax
c001f445:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f448:	e9 24 02 00 00       	jmp    c001f671 <Vm::faultHandler(regs*)+0x7cc>
c001f44d:	83 ec 0c             	sub    esp,0xc
c001f450:	4b                   	dec    ebx
c001f451:	68 07 c9 02 c0       	push   0xc002c907
c001f456:	e8 72 3b ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f45b:	83 c4 10             	add    esp,0x10
c001f45e:	80 fb 05             	cmp    bl,0x5
c001f461:	77 0a                	ja     c001f46d <Vm::faultHandler(regs*)+0x5c8>
c001f463:	0f b6 db             	movzx  ebx,bl
c001f466:	ff 24 9d 90 c9 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3670]
c001f46d:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f471:	eb 1b                	jmp    c001f48e <Vm::faultHandler(regs*)+0x5e9>
c001f473:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f477:	eb 15                	jmp    c001f48e <Vm::faultHandler(regs*)+0x5e9>
c001f479:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f47d:	eb 0f                	jmp    c001f48e <Vm::faultHandler(regs*)+0x5e9>
c001f47f:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f483:	eb 09                	jmp    c001f48e <Vm::faultHandler(regs*)+0x5e9>
c001f485:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f488:	eb 04                	jmp    c001f48e <Vm::faultHandler(regs*)+0x5e9>
c001f48a:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f48e:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f491:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f496:	74 39                	je     c001f4d1 <Vm::faultHandler(regs*)+0x62c>
c001f498:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f49e:	76 31                	jbe    c001f4d1 <Vm::faultHandler(regs*)+0x62c>
c001f4a0:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f4a4:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f4a8:	51                   	push   ecx
c001f4a9:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f4ad:	51                   	push   ecx
c001f4ae:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f4b2:	51                   	push   ecx
c001f4b3:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f4b7:	51                   	push   ecx
c001f4b8:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4bc:	52                   	push   edx
c001f4bd:	50                   	push   eax
c001f4be:	50                   	push   eax
c001f4bf:	68 d4 c8 02 c0       	push   0xc002c8d4
c001f4c4:	e8 04 3b ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f4c9:	83 c4 20             	add    esp,0x20
c001f4cc:	e9 fb 01 00 00       	jmp    c001f6cc <Vm::faultHandler(regs*)+0x827>
c001f4d1:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f4d4:	0f b7 d3             	movzx  edx,bx
c001f4d7:	81 e6 00 04 00 00    	and    esi,0x400
c001f4dd:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f4e0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4e5:	74 1d                	je     c001f504 <Vm::faultHandler(regs*)+0x65f>
c001f4e7:	51                   	push   ecx
c001f4e8:	51                   	push   ecx
c001f4e9:	52                   	push   edx
c001f4ea:	50                   	push   eax
c001f4eb:	e8 64 f9 ff ff       	call   c001ee54 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f4f0:	83 c4 10             	add    esp,0x10
c001f4f3:	89 ea                	mov    edx,ebp
c001f4f5:	ef                   	out    dx,eax
c001f4f6:	85 f6                	test   esi,esi
c001f4f8:	74 05                	je     c001f4ff <Vm::faultHandler(regs*)+0x65a>
c001f4fa:	83 eb 04             	sub    ebx,0x4
c001f4fd:	eb 21                	jmp    c001f520 <Vm::faultHandler(regs*)+0x67b>
c001f4ff:	83 c3 04             	add    ebx,0x4
c001f502:	eb 1c                	jmp    c001f520 <Vm::faultHandler(regs*)+0x67b>
c001f504:	51                   	push   ecx
c001f505:	51                   	push   ecx
c001f506:	52                   	push   edx
c001f507:	50                   	push   eax
c001f508:	e8 35 f9 ff ff       	call   c001ee42 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f50d:	83 c4 10             	add    esp,0x10
c001f510:	89 ea                	mov    edx,ebp
c001f512:	66 ef                	out    dx,ax
c001f514:	85 f6                	test   esi,esi
c001f516:	74 05                	je     c001f51d <Vm::faultHandler(regs*)+0x678>
c001f518:	83 eb 02             	sub    ebx,0x2
c001f51b:	eb 03                	jmp    c001f520 <Vm::faultHandler(regs*)+0x67b>
c001f51d:	83 c3 02             	add    ebx,0x2
c001f520:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f526:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f529:	e9 43 01 00 00       	jmp    c001f671 <Vm::faultHandler(regs*)+0x7cc>
c001f52e:	53                   	push   ebx
c001f52f:	53                   	push   ebx
c001f530:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f534:	50                   	push   eax
c001f535:	68 0d c9 02 c0       	push   0xc002c90d
c001f53a:	e8 8e 3a ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f53f:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f546:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f54a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f54d:	e8 5e f5 ff ff       	call   c001eab0 <Vm::inbv(unsigned short)>
c001f552:	0f b6 c0             	movzx  eax,al
c001f555:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f558:	eb 5e                	jmp    c001f5b8 <Vm::faultHandler(regs*)+0x713>
c001f55a:	51                   	push   ecx
c001f55b:	51                   	push   ecx
c001f55c:	53                   	push   ebx
c001f55d:	68 13 c9 02 c0       	push   0xc002c913
c001f562:	e8 66 3a ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f567:	83 c4 10             	add    esp,0x10
c001f56a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f56f:	74 07                	je     c001f578 <Vm::faultHandler(regs*)+0x6d3>
c001f571:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f575:	ed                   	in     eax,dx
c001f576:	eb 14                	jmp    c001f58c <Vm::faultHandler(regs*)+0x6e7>
c001f578:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f57b:	66 31 db             	xor    bx,bx
c001f57e:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f581:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f585:	66 ed                	in     ax,dx
c001f587:	0f b7 c0             	movzx  eax,ax
c001f58a:	09 d8                	or     eax,ebx
c001f58c:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f58f:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f593:	e9 dc 00 00 00       	jmp    c001f674 <Vm::faultHandler(regs*)+0x7cf>
c001f598:	50                   	push   eax
c001f599:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f59c:	53                   	push   ebx
c001f59d:	68 19 c9 02 c0       	push   0xc002c919
c001f5a2:	e8 26 3a ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f5a7:	58                   	pop    eax
c001f5a8:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f5ac:	5a                   	pop    edx
c001f5ad:	50                   	push   eax
c001f5ae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5b2:	50                   	push   eax
c001f5b3:	e8 0b f5 ff ff       	call   c001eac3 <Vm::outbv(unsigned short, unsigned char)>
c001f5b8:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f5bc:	e9 85 00 00 00       	jmp    c001f646 <Vm::faultHandler(regs*)+0x7a1>
c001f5c1:	50                   	push   eax
c001f5c2:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f5c5:	53                   	push   ebx
c001f5c6:	68 22 c9 02 c0       	push   0xc002c922
c001f5cb:	e8 fd 39 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f5d0:	83 c4 10             	add    esp,0x10
c001f5d3:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5d7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5dc:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f5df:	74 03                	je     c001f5e4 <Vm::faultHandler(regs*)+0x73f>
c001f5e1:	ef                   	out    dx,eax
c001f5e2:	eb ab                	jmp    c001f58f <Vm::faultHandler(regs*)+0x6ea>
c001f5e4:	66 ef                	out    dx,ax
c001f5e6:	eb a7                	jmp    c001f58f <Vm::faultHandler(regs*)+0x6ea>
c001f5e8:	55                   	push   ebp
c001f5e9:	55                   	push   ebp
c001f5ea:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5ed:	68 2b c9 02 c0       	push   0xc002c92b
c001f5f2:	e8 d6 39 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f5f7:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f5fe:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f602:	89 04 24             	mov    DWORD PTR [esp],eax
c001f605:	e8 a6 f4 ff ff       	call   c001eab0 <Vm::inbv(unsigned short)>
c001f60a:	0f b6 c0             	movzx  eax,al
c001f60d:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f610:	eb 31                	jmp    c001f643 <Vm::faultHandler(regs*)+0x79e>
c001f612:	56                   	push   esi
c001f613:	56                   	push   esi
c001f614:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f617:	68 31 c9 02 c0       	push   0xc002c931
c001f61c:	e8 ac 39 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f621:	83 c4 10             	add    esp,0x10
c001f624:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f627:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f62c:	74 03                	je     c001f631 <Vm::faultHandler(regs*)+0x78c>
c001f62e:	ed                   	in     eax,dx
c001f62f:	eb 0d                	jmp    c001f63e <Vm::faultHandler(regs*)+0x799>
c001f631:	66 ed                	in     ax,dx
c001f633:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f636:	0f b7 c0             	movzx  eax,ax
c001f639:	66 31 d2             	xor    dx,dx
c001f63c:	09 d0                	or     eax,edx
c001f63e:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f641:	eb 2e                	jmp    c001f671 <Vm::faultHandler(regs*)+0x7cc>
c001f643:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f646:	83 c4 10             	add    esp,0x10
c001f649:	eb 29                	jmp    c001f674 <Vm::faultHandler(regs*)+0x7cf>
c001f64b:	50                   	push   eax
c001f64c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f64f:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f652:	68 40 c9 02 c0       	push   0xc002c940
c001f657:	e8 71 39 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f65c:	83 c4 10             	add    esp,0x10
c001f65f:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f662:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f667:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f66a:	74 03                	je     c001f66f <Vm::faultHandler(regs*)+0x7ca>
c001f66c:	ef                   	out    dx,eax
c001f66d:	eb 02                	jmp    c001f671 <Vm::faultHandler(regs*)+0x7cc>
c001f66f:	66 ef                	out    dx,ax
c001f671:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f674:	b0 01                	mov    al,0x1
c001f676:	eb 56                	jmp    c001f6ce <Vm::faultHandler(regs*)+0x829>
c001f678:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f67c:	51                   	push   ecx
c001f67d:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f681:	51                   	push   ecx
c001f682:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f686:	51                   	push   ecx
c001f687:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f68b:	51                   	push   ecx
c001f68c:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f690:	52                   	push   edx
c001f691:	50                   	push   eax
c001f692:	50                   	push   eax
c001f693:	68 49 c9 02 c0       	push   0xc002c949
c001f698:	e8 30 39 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c001f69d:	83 c4 20             	add    esp,0x20
c001f6a0:	83 ec 0c             	sub    esp,0xc
c001f6a3:	6a 60                	push   0x60
c001f6a5:	e8 06 f4 ff ff       	call   c001eab0 <Vm::inbv(unsigned short)>
c001f6aa:	83 c4 10             	add    esp,0x10
c001f6ad:	3c 1c                	cmp    al,0x1c
c001f6af:	74 04                	je     c001f6b5 <Vm::faultHandler(regs*)+0x810>
c001f6b1:	3c 5a                	cmp    al,0x5a
c001f6b3:	75 eb                	jne    c001f6a0 <Vm::faultHandler(regs*)+0x7fb>
c001f6b5:	3c 1c                	cmp    al,0x1c
c001f6b7:	74 04                	je     c001f6bd <Vm::faultHandler(regs*)+0x818>
c001f6b9:	3c 5a                	cmp    al,0x5a
c001f6bb:	75 0f                	jne    c001f6cc <Vm::faultHandler(regs*)+0x827>
c001f6bd:	83 ec 0c             	sub    esp,0xc
c001f6c0:	6a 60                	push   0x60
c001f6c2:	e8 e9 f3 ff ff       	call   c001eab0 <Vm::inbv(unsigned short)>
c001f6c7:	83 c4 10             	add    esp,0x10
c001f6ca:	eb e9                	jmp    c001f6b5 <Vm::faultHandler(regs*)+0x810>
c001f6cc:	31 c0                	xor    eax,eax
c001f6ce:	83 c4 1c             	add    esp,0x1c
c001f6d1:	5b                   	pop    ebx
c001f6d2:	5e                   	pop    esi
c001f6d3:	5f                   	pop    edi
c001f6d4:	5d                   	pop    ebp
c001f6d5:	c3                   	ret    

c001f6d6 <Vm::fpuInternalTo32(unsigned long long)>:
c001f6d6:	57                   	push   edi
c001f6d7:	56                   	push   esi
c001f6d8:	53                   	push   ebx
c001f6d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6e1:	89 d6                	mov    esi,edx
c001f6e3:	89 d7                	mov    edi,edx
c001f6e5:	89 c1                	mov    ecx,eax
c001f6e7:	c1 ef 14             	shr    edi,0x14
c001f6ea:	89 d3                	mov    ebx,edx
c001f6ec:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f6f2:	31 d2                	xor    edx,edx
c001f6f4:	89 f8                	mov    eax,edi
c001f6f6:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f6fc:	bf ff 00 00 00       	mov    edi,0xff
c001f701:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f706:	83 d2 ff             	adc    edx,0xffffffff
c001f709:	39 c7                	cmp    edi,eax
c001f70b:	bf 00 00 00 00       	mov    edi,0x0
c001f710:	19 d7                	sbb    edi,edx
c001f712:	72 15                	jb     c001f729 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f714:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f718:	c1 e0 17             	shl    eax,0x17
c001f71b:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f721:	09 f1                	or     ecx,esi
c001f723:	09 c1                	or     ecx,eax
c001f725:	89 cf                	mov    edi,ecx
c001f727:	eb 02                	jmp    c001f72b <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f729:	31 ff                	xor    edi,edi
c001f72b:	89 f8                	mov    eax,edi
c001f72d:	5b                   	pop    ebx
c001f72e:	5e                   	pop    esi
c001f72f:	5f                   	pop    edi
c001f730:	c3                   	ret    

c001f731 <Vm::fpuInternalTo64(unsigned long long)>:
c001f731:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f735:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f739:	c3                   	ret    

c001f73a <Vm::fpu32ToInternal(unsigned int)>:
c001f73a:	57                   	push   edi
c001f73b:	31 ff                	xor    edi,edi
c001f73d:	56                   	push   esi
c001f73e:	53                   	push   ebx
c001f73f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f743:	89 cb                	mov    ebx,ecx
c001f745:	89 ce                	mov    esi,ecx
c001f747:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f74d:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f753:	c1 e9 17             	shr    ecx,0x17
c001f756:	89 f0                	mov    eax,esi
c001f758:	0f b6 d1             	movzx  edx,cl
c001f75b:	81 c2 80 03 00 00    	add    edx,0x380
c001f761:	89 d1                	mov    ecx,edx
c001f763:	89 fa                	mov    edx,edi
c001f765:	c1 e1 14             	shl    ecx,0x14
c001f768:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f76c:	c1 e0 1d             	shl    eax,0x1d
c001f76f:	89 d7                	mov    edi,edx
c001f771:	89 c6                	mov    esi,eax
c001f773:	89 ca                	mov    edx,ecx
c001f775:	89 f0                	mov    eax,esi
c001f777:	09 fa                	or     edx,edi
c001f779:	09 da                	or     edx,ebx
c001f77b:	5b                   	pop    ebx
c001f77c:	5e                   	pop    esi
c001f77d:	5f                   	pop    edi
c001f77e:	c3                   	ret    

c001f77f <Vm::fpu64ToInternal(unsigned long long)>:
c001f77f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f783:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f787:	c3                   	ret    

c001f788 <Vm::fpuFloatToLong(unsigned long long)>:
c001f788:	57                   	push   edi
c001f789:	31 c0                	xor    eax,eax
c001f78b:	56                   	push   esi
c001f78c:	31 d2                	xor    edx,edx
c001f78e:	53                   	push   ebx
c001f78f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f793:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f797:	89 d9                	mov    ecx,ebx
c001f799:	c1 e9 14             	shr    ecx,0x14
c001f79c:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f7a2:	89 cf                	mov    edi,ecx
c001f7a4:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f7aa:	78 33                	js     c001f7df <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f7ac:	89 d9                	mov    ecx,ebx
c001f7ae:	89 f0                	mov    eax,esi
c001f7b0:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f7b6:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f7bc:	89 ca                	mov    edx,ecx
c001f7be:	b9 34 00 00 00       	mov    ecx,0x34
c001f7c3:	29 f9                	sub    ecx,edi
c001f7c5:	0f ad d0             	shrd   eax,edx,cl
c001f7c8:	d3 fa                	sar    edx,cl
c001f7ca:	f6 c1 20             	test   cl,0x20
c001f7cd:	74 05                	je     c001f7d4 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f7cf:	89 d0                	mov    eax,edx
c001f7d1:	c1 fa 1f             	sar    edx,0x1f
c001f7d4:	85 db                	test   ebx,ebx
c001f7d6:	79 07                	jns    c001f7df <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f7d8:	f7 d8                	neg    eax
c001f7da:	83 d2 00             	adc    edx,0x0
c001f7dd:	f7 da                	neg    edx
c001f7df:	5b                   	pop    ebx
c001f7e0:	5e                   	pop    esi
c001f7e1:	5f                   	pop    edi
c001f7e2:	c3                   	ret    

c001f7e3 <Vm::fpuULongToFloat(unsigned long long)>:
c001f7e3:	57                   	push   edi
c001f7e4:	31 c9                	xor    ecx,ecx
c001f7e6:	56                   	push   esi
c001f7e7:	53                   	push   ebx
c001f7e8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f7ec:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f7f0:	0f ba e7 14          	bt     edi,0x14
c001f7f4:	72 07                	jb     c001f7fd <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f7f6:	01 f6                	add    esi,esi
c001f7f8:	11 ff                	adc    edi,edi
c001f7fa:	41                   	inc    ecx
c001f7fb:	eb f3                	jmp    c001f7f0 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f7fd:	89 fa                	mov    edx,edi
c001f7ff:	89 f0                	mov    eax,esi
c001f801:	bb 33 04 00 00       	mov    ebx,0x433
c001f806:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f80c:	29 cb                	sub    ebx,ecx
c001f80e:	89 d9                	mov    ecx,ebx
c001f810:	5b                   	pop    ebx
c001f811:	c1 e1 14             	shl    ecx,0x14
c001f814:	5e                   	pop    esi
c001f815:	09 ca                	or     edx,ecx
c001f817:	5f                   	pop    edi
c001f818:	c3                   	ret    

c001f819 <Vm::fpuLongToFloat(long long)>:
c001f819:	56                   	push   esi
c001f81a:	31 c0                	xor    eax,eax
c001f81c:	53                   	push   ebx
c001f81d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f821:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f825:	39 c8                	cmp    eax,ecx
c001f827:	19 d8                	sbb    eax,ebx
c001f829:	7d 04                	jge    c001f82f <Vm::fpuLongToFloat(long long)+0x16>
c001f82b:	31 f6                	xor    esi,esi
c001f82d:	eb 0c                	jmp    c001f83b <Vm::fpuLongToFloat(long long)+0x22>
c001f82f:	f7 d9                	neg    ecx
c001f831:	be 01 00 00 00       	mov    esi,0x1
c001f836:	83 d3 00             	adc    ebx,0x0
c001f839:	f7 db                	neg    ebx
c001f83b:	31 c0                	xor    eax,eax
c001f83d:	0f ba e3 14          	bt     ebx,0x14
c001f841:	72 07                	jb     c001f84a <Vm::fpuLongToFloat(long long)+0x31>
c001f843:	01 c9                	add    ecx,ecx
c001f845:	11 db                	adc    ebx,ebx
c001f847:	40                   	inc    eax
c001f848:	eb f3                	jmp    c001f83d <Vm::fpuLongToFloat(long long)+0x24>
c001f84a:	ba 33 04 00 00       	mov    edx,0x433
c001f84f:	29 c2                	sub    edx,eax
c001f851:	89 c8                	mov    eax,ecx
c001f853:	c1 e2 14             	shl    edx,0x14
c001f856:	89 d9                	mov    ecx,ebx
c001f858:	89 f3                	mov    ebx,esi
c001f85a:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f860:	09 ca                	or     edx,ecx
c001f862:	84 db                	test   bl,bl
c001f864:	74 06                	je     c001f86c <Vm::fpuLongToFloat(long long)+0x53>
c001f866:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f86c:	5b                   	pop    ebx
c001f86d:	5e                   	pop    esi
c001f86e:	c3                   	ret    

c001f86f <Vm::fpuGet0()>:
c001f86f:	31 c0                	xor    eax,eax
c001f871:	31 d2                	xor    edx,edx
c001f873:	c3                   	ret    

c001f874 <Vm::fpuGet1()>:
c001f874:	b8 01 00 00 00       	mov    eax,0x1
c001f879:	31 d2                	xor    edx,edx
c001f87b:	c3                   	ret    

c001f87c <Vm::fpuGetPi()>:
c001f87c:	b8 03 00 00 00       	mov    eax,0x3
c001f881:	31 d2                	xor    edx,edx
c001f883:	c3                   	ret    

c001f884 <Vm::fpuGetLog2E()>:
c001f884:	83 ec 18             	sub    esp,0x18
c001f887:	68 a8 c9 02 c0       	push   0xc002c9a8
c001f88c:	e8 de ad ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001f891:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f896:	31 d2                	xor    edx,edx
c001f898:	83 c4 1c             	add    esp,0x1c
c001f89b:	c3                   	ret    

c001f89c <Vm::fpuGetLogE2()>:
c001f89c:	83 ec 18             	sub    esp,0x18
c001f89f:	68 b4 c9 02 c0       	push   0xc002c9b4
c001f8a4:	e8 c6 ad ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001f8a9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8ae:	31 d2                	xor    edx,edx
c001f8b0:	83 c4 1c             	add    esp,0x1c
c001f8b3:	c3                   	ret    

c001f8b4 <Vm::fpuGetLog210()>:
c001f8b4:	83 ec 18             	sub    esp,0x18
c001f8b7:	68 c0 c9 02 c0       	push   0xc002c9c0
c001f8bc:	e8 ae ad ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001f8c1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8c6:	31 d2                	xor    edx,edx
c001f8c8:	83 c4 1c             	add    esp,0x1c
c001f8cb:	c3                   	ret    

c001f8cc <Vm::fpuGetLog102()>:
c001f8cc:	83 ec 18             	sub    esp,0x18
c001f8cf:	68 cd c9 02 c0       	push   0xc002c9cd
c001f8d4:	e8 96 ad ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001f8d9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8de:	31 d2                	xor    edx,edx
c001f8e0:	83 c4 1c             	add    esp,0x1c
c001f8e3:	c3                   	ret    

c001f8e4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f8e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8e8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f8ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8f0:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f8f4:	0f 92 c0             	setb   al
c001f8f7:	c3                   	ret    

c001f8f8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f8f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f900:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f904:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f908:	09 c2                	or     edx,eax
c001f90a:	0f 94 c0             	sete   al
c001f90d:	c3                   	ret    

c001f90e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f90e:	57                   	push   edi
c001f90f:	56                   	push   esi
c001f910:	53                   	push   ebx
c001f911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f915:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f919:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f91d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f921:	57                   	push   edi
c001f922:	56                   	push   esi
c001f923:	53                   	push   ebx
c001f924:	51                   	push   ecx
c001f925:	e8 ce ff ff ff       	call   c001f8f8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f92a:	83 c4 10             	add    esp,0x10
c001f92d:	88 c2                	mov    dl,al
c001f92f:	31 c0                	xor    eax,eax
c001f931:	84 d2                	test   dl,dl
c001f933:	75 0c                	jne    c001f941 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f935:	57                   	push   edi
c001f936:	56                   	push   esi
c001f937:	53                   	push   ebx
c001f938:	51                   	push   ecx
c001f939:	e8 a6 ff ff ff       	call   c001f8e4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f93e:	83 c4 10             	add    esp,0x10
c001f941:	83 e0 01             	and    eax,0x1
c001f944:	5b                   	pop    ebx
c001f945:	88 c1                	mov    cl,al
c001f947:	83 e2 01             	and    edx,0x1
c001f94a:	a0 21 1c 03 c0       	mov    al,ds:0xc0031c21
c001f94f:	c1 e2 06             	shl    edx,0x6
c001f952:	83 e0 ba             	and    eax,0xffffffba
c001f955:	5e                   	pop    esi
c001f956:	09 c8                	or     eax,ecx
c001f958:	5f                   	pop    edi
c001f959:	09 d0                	or     eax,edx
c001f95b:	a2 21 1c 03 c0       	mov    ds:0xc0031c21,al
c001f960:	c3                   	ret    

c001f961 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f961:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f965:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f969:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f96d:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f971:	c3                   	ret    

c001f972 <Vm::fpuAbs(unsigned long long)>:
c001f972:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f976:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f97a:	c3                   	ret    

c001f97b <Vm::fpuChs(unsigned long long)>:
c001f97b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f97f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f983:	f7 d8                	neg    eax
c001f985:	83 d2 00             	adc    edx,0x0
c001f988:	f7 da                	neg    edx
c001f98a:	c3                   	ret    

c001f98b <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f98b:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f98f:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f994:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f998:	eb c7                	jmp    c001f961 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f99a <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f99a:	53                   	push   ebx
c001f99b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f99f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f9a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f9a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f9ab:	0f af ca             	imul   ecx,edx
c001f9ae:	0f af d8             	imul   ebx,eax
c001f9b1:	f7 e2                	mul    edx
c001f9b3:	01 d9                	add    ecx,ebx
c001f9b5:	5b                   	pop    ebx
c001f9b6:	01 ca                	add    edx,ecx
c001f9b8:	c3                   	ret    

c001f9b9 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f9b9:	83 ec 0c             	sub    esp,0xc
c001f9bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9cc:	e8 9b 70 00 00       	call   c0026a6c <__udivdi3>
c001f9d1:	83 c4 1c             	add    esp,0x1c
c001f9d4:	c3                   	ret    

c001f9d5 <Vm::fpuSquare(unsigned long long)>:
c001f9d5:	50                   	push   eax
c001f9d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f9de:	52                   	push   edx
c001f9df:	50                   	push   eax
c001f9e0:	52                   	push   edx
c001f9e1:	50                   	push   eax
c001f9e2:	e8 b3 ff ff ff       	call   c001f99a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f9e7:	83 c4 14             	add    esp,0x14
c001f9ea:	c3                   	ret    

c001f9eb <Vm::fpuGetReg(int)>:
c001f9eb:	83 ec 0c             	sub    esp,0xc
c001f9ee:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f9f3:	76 10                	jbe    c001fa05 <Vm::fpuGetReg(int)+0x1a>
c001f9f5:	83 ec 0c             	sub    esp,0xc
c001f9f8:	68 da c9 02 c0       	push   0xc002c9da
c001f9fd:	e8 6d ac ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001fa02:	83 c4 10             	add    esp,0x10
c001fa05:	a0 21 1c 03 c0       	mov    al,ds:0xc0031c21
c001fa0a:	b9 08 00 00 00       	mov    ecx,0x8
c001fa0f:	c0 e8 03             	shr    al,0x3
c001fa12:	83 e0 07             	and    eax,0x7
c001fa15:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa19:	99                   	cdq    
c001fa1a:	f7 f9                	idiv   ecx
c001fa1c:	8b 04 d5 24 1c 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce3dc]
c001fa23:	8b 14 d5 28 1c 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce3d8]
c001fa2a:	83 c4 0c             	add    esp,0xc
c001fa2d:	c3                   	ret    

c001fa2e <Vm::fpuSetReg(int, unsigned long long)>:
c001fa2e:	57                   	push   edi
c001fa2f:	56                   	push   esi
c001fa30:	52                   	push   edx
c001fa31:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fa35:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fa39:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa3e:	76 10                	jbe    c001fa50 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fa40:	83 ec 0c             	sub    esp,0xc
c001fa43:	68 ed c9 02 c0       	push   0xc002c9ed
c001fa48:	e8 22 ac ff ff       	call   c001a66f <Krnl::panic(char const*)>
c001fa4d:	83 c4 10             	add    esp,0x10
c001fa50:	a0 21 1c 03 c0       	mov    al,ds:0xc0031c21
c001fa55:	b9 08 00 00 00       	mov    ecx,0x8
c001fa5a:	c0 e8 03             	shr    al,0x3
c001fa5d:	83 e0 07             	and    eax,0x7
c001fa60:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa64:	99                   	cdq    
c001fa65:	f7 f9                	idiv   ecx
c001fa67:	89 34 d5 24 1c 03 c0 	mov    DWORD PTR [edx*8-0x3ffce3dc],esi
c001fa6e:	89 3c d5 28 1c 03 c0 	mov    DWORD PTR [edx*8-0x3ffce3d8],edi
c001fa75:	58                   	pop    eax
c001fa76:	5e                   	pop    esi
c001fa77:	5f                   	pop    edi
c001fa78:	c3                   	ret    

c001fa79 <Vm::fpuPush(unsigned long long)>:
c001fa79:	a0 21 1c 03 c0       	mov    al,ds:0xc0031c21
c001fa7e:	c0 e8 03             	shr    al,0x3
c001fa81:	83 e0 07             	and    eax,0x7
c001fa84:	83 c0 07             	add    eax,0x7
c001fa87:	88 c2                	mov    dl,al
c001fa89:	83 e0 07             	and    eax,0x7
c001fa8c:	83 e2 07             	and    edx,0x7
c001fa8f:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fa96:	8a 15 21 1c 03 c0    	mov    dl,BYTE PTR ds:0xc0031c21
c001fa9c:	83 e2 c7             	and    edx,0xffffffc7
c001fa9f:	09 ca                	or     edx,ecx
c001faa1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001faa5:	88 15 21 1c 03 c0    	mov    BYTE PTR ds:0xc0031c21,dl
c001faab:	89 0c c5 28 1c 03 c0 	mov    DWORD PTR [eax*8-0x3ffce3d8],ecx
c001fab2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fab6:	89 14 c5 24 1c 03 c0 	mov    DWORD PTR [eax*8-0x3ffce3dc],edx
c001fabd:	a1 64 1c 03 c0       	mov    eax,ds:0xc0031c64
c001fac2:	83 f8 08             	cmp    eax,0x8
c001fac5:	75 08                	jne    c001facf <Vm::fpuPush(unsigned long long)+0x56>
c001fac7:	80 0d 20 1c 03 c0 40 	or     BYTE PTR ds:0xc0031c20,0x40
c001face:	c3                   	ret    
c001facf:	40                   	inc    eax
c001fad0:	a3 64 1c 03 c0       	mov    ds:0xc0031c64,eax
c001fad5:	c3                   	ret    

c001fad6 <Vm::fpuPop()>:
c001fad6:	8a 0d 21 1c 03 c0    	mov    cl,BYTE PTR ds:0xc0031c21
c001fadc:	53                   	push   ebx
c001fadd:	c0 e9 03             	shr    cl,0x3
c001fae0:	8a 1d 21 1c 03 c0    	mov    bl,BYTE PTR ds:0xc0031c21
c001fae6:	83 e1 07             	and    ecx,0x7
c001fae9:	83 e3 c7             	and    ebx,0xffffffc7
c001faec:	8b 04 cd 24 1c 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce3dc]
c001faf3:	8b 14 cd 28 1c 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce3d8]
c001fafa:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fb01:	83 e1 38             	and    ecx,0x38
c001fb04:	09 d9                	or     ecx,ebx
c001fb06:	88 0d 21 1c 03 c0    	mov    BYTE PTR ds:0xc0031c21,cl
c001fb0c:	8b 0d 64 1c 03 c0    	mov    ecx,DWORD PTR ds:0xc0031c64
c001fb12:	85 c9                	test   ecx,ecx
c001fb14:	74 09                	je     c001fb1f <Vm::fpuPop()+0x49>
c001fb16:	49                   	dec    ecx
c001fb17:	89 0d 64 1c 03 c0    	mov    DWORD PTR ds:0xc0031c64,ecx
c001fb1d:	eb 07                	jmp    c001fb26 <Vm::fpuPop()+0x50>
c001fb1f:	80 0d 20 1c 03 c0 40 	or     BYTE PTR ds:0xc0031c20,0x40
c001fb26:	5b                   	pop    ebx
c001fb27:	c3                   	ret    

c001fb28 <Vm::x87Handler(regs*)>:
c001fb28:	55                   	push   ebp
c001fb29:	57                   	push   edi
c001fb2a:	56                   	push   esi
c001fb2b:	53                   	push   ebx
c001fb2c:	83 ec 1c             	sub    esp,0x1c
c001fb2f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fb33:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fb38:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fb3b:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fb43:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fb47:	50                   	push   eax
c001fb48:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fb4c:	50                   	push   eax
c001fb4d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fb51:	50                   	push   eax
c001fb52:	53                   	push   ebx
c001fb53:	e8 de a1 ff ff       	call   c0019d36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fb58:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fb5b:	83 c4 10             	add    esp,0x10
c001fb5e:	89 c6                	mov    esi,eax
c001fb60:	80 fa d9             	cmp    dl,0xd9
c001fb63:	0f 85 52 01 00 00    	jne    c001fcbb <Vm::x87Handler(regs*)+0x193>
c001fb69:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb6d:	8d 50 20             	lea    edx,[eax+0x20]
c001fb70:	80 fa 0e             	cmp    dl,0xe
c001fb73:	0f 87 86 00 00 00    	ja     c001fbff <Vm::x87Handler(regs*)+0xd7>
c001fb79:	0f b6 d2             	movzx  edx,dl
c001fb7c:	ff 24 95 00 ca 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3600]
c001fb83:	e8 e7 fc ff ff       	call   c001f86f <Vm::fpuGet0()>
c001fb88:	eb 05                	jmp    c001fb8f <Vm::x87Handler(regs*)+0x67>
c001fb8a:	e8 e5 fc ff ff       	call   c001f874 <Vm::fpuGet1()>
c001fb8f:	57                   	push   edi
c001fb90:	57                   	push   edi
c001fb91:	52                   	push   edx
c001fb92:	50                   	push   eax
c001fb93:	e8 e1 fe ff ff       	call   c001fa79 <Vm::fpuPush(unsigned long long)>
c001fb98:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb9c:	83 c4 10             	add    esp,0x10
c001fb9f:	b0 01                	mov    al,0x1
c001fba1:	e9 e3 09 00 00       	jmp    c0020589 <Vm::x87Handler(regs*)+0xa61>
c001fba6:	83 ec 0c             	sub    esp,0xc
c001fba9:	6a 00                	push   0x0
c001fbab:	e8 3b fe ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fbb0:	59                   	pop    ecx
c001fbb1:	5e                   	pop    esi
c001fbb2:	52                   	push   edx
c001fbb3:	50                   	push   eax
c001fbb4:	e8 c2 fd ff ff       	call   c001f97b <Vm::fpuChs(unsigned long long)>
c001fbb9:	eb 13                	jmp    c001fbce <Vm::x87Handler(regs*)+0xa6>
c001fbbb:	83 ec 0c             	sub    esp,0xc
c001fbbe:	6a 00                	push   0x0
c001fbc0:	e8 26 fe ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fbc5:	5f                   	pop    edi
c001fbc6:	5d                   	pop    ebp
c001fbc7:	52                   	push   edx
c001fbc8:	50                   	push   eax
c001fbc9:	e8 a4 fd ff ff       	call   c001f972 <Vm::fpuAbs(unsigned long long)>
c001fbce:	83 c4 0c             	add    esp,0xc
c001fbd1:	52                   	push   edx
c001fbd2:	50                   	push   eax
c001fbd3:	6a 00                	push   0x0
c001fbd5:	e8 54 fe ff ff       	call   c001fa2e <Vm::fpuSetReg(int, unsigned long long)>
c001fbda:	eb bc                	jmp    c001fb98 <Vm::x87Handler(regs*)+0x70>
c001fbdc:	e8 d3 fc ff ff       	call   c001f8b4 <Vm::fpuGetLog210()>
c001fbe1:	eb ac                	jmp    c001fb8f <Vm::x87Handler(regs*)+0x67>
c001fbe3:	e8 9c fc ff ff       	call   c001f884 <Vm::fpuGetLog2E()>
c001fbe8:	eb a5                	jmp    c001fb8f <Vm::x87Handler(regs*)+0x67>
c001fbea:	e8 8d fc ff ff       	call   c001f87c <Vm::fpuGetPi()>
c001fbef:	eb 9e                	jmp    c001fb8f <Vm::x87Handler(regs*)+0x67>
c001fbf1:	e8 d6 fc ff ff       	call   c001f8cc <Vm::fpuGetLog102()>
c001fbf6:	eb 97                	jmp    c001fb8f <Vm::x87Handler(regs*)+0x67>
c001fbf8:	e8 9f fc ff ff       	call   c001f89c <Vm::fpuGetLogE2()>
c001fbfd:	eb 90                	jmp    c001fb8f <Vm::x87Handler(regs*)+0x67>
c001fbff:	8d 50 40             	lea    edx,[eax+0x40]
c001fc02:	80 fa 07             	cmp    dl,0x7
c001fc05:	77 15                	ja     c001fc1c <Vm::x87Handler(regs*)+0xf4>
c001fc07:	83 ec 0c             	sub    esp,0xc
c001fc0a:	2d c0 00 00 00       	sub    eax,0xc0
c001fc0f:	50                   	push   eax
c001fc10:	e8 d6 fd ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fc15:	59                   	pop    ecx
c001fc16:	5e                   	pop    esi
c001fc17:	e9 75 ff ff ff       	jmp    c001fb91 <Vm::x87Handler(regs*)+0x69>
c001fc1c:	8d 50 38             	lea    edx,[eax+0x38]
c001fc1f:	80 fa 07             	cmp    dl,0x7
c001fc22:	77 3c                	ja     c001fc60 <Vm::x87Handler(regs*)+0x138>
c001fc24:	83 ec 0c             	sub    esp,0xc
c001fc27:	2d c8 00 00 00       	sub    eax,0xc8
c001fc2c:	50                   	push   eax
c001fc2d:	e8 b9 fd ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fc32:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc39:	89 c6                	mov    esi,eax
c001fc3b:	89 d7                	mov    edi,edx
c001fc3d:	e8 a9 fd ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fc42:	83 c4 0c             	add    esp,0xc
c001fc45:	52                   	push   edx
c001fc46:	50                   	push   eax
c001fc47:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc4b:	2d c8 00 00 00       	sub    eax,0xc8
c001fc50:	50                   	push   eax
c001fc51:	e8 d8 fd ff ff       	call   c001fa2e <Vm::fpuSetReg(int, unsigned long long)>
c001fc56:	83 c4 0c             	add    esp,0xc
c001fc59:	57                   	push   edi
c001fc5a:	56                   	push   esi
c001fc5b:	e9 73 ff ff ff       	jmp    c001fbd3 <Vm::x87Handler(regs*)+0xab>
c001fc60:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc64:	84 d2                	test   dl,dl
c001fc66:	75 0f                	jne    c001fc77 <Vm::x87Handler(regs*)+0x14f>
c001fc68:	83 ec 0c             	sub    esp,0xc
c001fc6b:	ff 36                	push   DWORD PTR [esi]
c001fc6d:	e8 c8 fa ff ff       	call   c001f73a <Vm::fpu32ToInternal(unsigned int)>
c001fc72:	e9 bf 00 00 00       	jmp    c001fd36 <Vm::x87Handler(regs*)+0x20e>
c001fc77:	80 fa 03             	cmp    dl,0x3
c001fc7a:	75 13                	jne    c001fc8f <Vm::x87Handler(regs*)+0x167>
c001fc7c:	e8 55 fe ff ff       	call   c001fad6 <Vm::fpuPop()>
c001fc81:	55                   	push   ebp
c001fc82:	55                   	push   ebp
c001fc83:	52                   	push   edx
c001fc84:	50                   	push   eax
c001fc85:	e8 4c fa ff ff       	call   c001f6d6 <Vm::fpuInternalTo32(unsigned long long)>
c001fc8a:	e9 88 00 00 00       	jmp    c001fd17 <Vm::x87Handler(regs*)+0x1ef>
c001fc8f:	80 fa 05             	cmp    dl,0x5
c001fc92:	75 0e                	jne    c001fca2 <Vm::x87Handler(regs*)+0x17a>
c001fc94:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fc97:	66 a3 22 1c 03 c0    	mov    ds:0xc0031c22,ax
c001fc9d:	e9 df 00 00 00       	jmp    c001fd81 <Vm::x87Handler(regs*)+0x259>
c001fca2:	31 c0                	xor    eax,eax
c001fca4:	80 fa 07             	cmp    dl,0x7
c001fca7:	0f 85 dc 08 00 00    	jne    c0020589 <Vm::x87Handler(regs*)+0xa61>
c001fcad:	66 a1 22 1c 03 c0    	mov    ax,ds:0xc0031c22
c001fcb3:	66 89 06             	mov    WORD PTR [esi],ax
c001fcb6:	e9 c6 00 00 00       	jmp    c001fd81 <Vm::x87Handler(regs*)+0x259>
c001fcbb:	80 fa d8             	cmp    dl,0xd8
c001fcbe:	0f 84 c9 00 00 00    	je     c001fd8d <Vm::x87Handler(regs*)+0x265>
c001fcc4:	80 fa dc             	cmp    dl,0xdc
c001fcc7:	0f 84 0d 02 00 00    	je     c001feda <Vm::x87Handler(regs*)+0x3b2>
c001fccd:	80 fa de             	cmp    dl,0xde
c001fcd0:	0f 84 cd 02 00 00    	je     c001ffa3 <Vm::x87Handler(regs*)+0x47b>
c001fcd6:	80 fa dd             	cmp    dl,0xdd
c001fcd9:	0f 84 5f 04 00 00    	je     c002013e <Vm::x87Handler(regs*)+0x616>
c001fcdf:	80 fa da             	cmp    dl,0xda
c001fce2:	0f 84 24 05 00 00    	je     c002020c <Vm::x87Handler(regs*)+0x6e4>
c001fce8:	80 fa df             	cmp    dl,0xdf
c001fceb:	0f 84 68 05 00 00    	je     c0020259 <Vm::x87Handler(regs*)+0x731>
c001fcf1:	31 c0                	xor    eax,eax
c001fcf3:	80 fa db             	cmp    dl,0xdb
c001fcf6:	0f 85 8d 08 00 00    	jne    c0020589 <Vm::x87Handler(regs*)+0xa61>
c001fcfc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd00:	80 fa 03             	cmp    dl,0x3
c001fd03:	0f 85 70 06 00 00    	jne    c0020379 <Vm::x87Handler(regs*)+0x851>
c001fd09:	e8 c8 fd ff ff       	call   c001fad6 <Vm::fpuPop()>
c001fd0e:	55                   	push   ebp
c001fd0f:	55                   	push   ebp
c001fd10:	52                   	push   edx
c001fd11:	50                   	push   eax
c001fd12:	e8 71 fa ff ff       	call   c001f788 <Vm::fpuFloatToLong(unsigned long long)>
c001fd17:	83 c4 10             	add    esp,0x10
c001fd1a:	89 06                	mov    DWORD PTR [esi],eax
c001fd1c:	eb 63                	jmp    c001fd81 <Vm::x87Handler(regs*)+0x259>
c001fd1e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd22:	84 d2                	test   dl,dl
c001fd24:	0f 85 e6 05 00 00    	jne    c0020310 <Vm::x87Handler(regs*)+0x7e8>
c001fd2a:	57                   	push   edi
c001fd2b:	57                   	push   edi
c001fd2c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd2f:	ff 36                	push   DWORD PTR [esi]
c001fd31:	e8 49 fa ff ff       	call   c001f77f <Vm::fpu64ToInternal(unsigned long long)>
c001fd36:	5e                   	pop    esi
c001fd37:	5f                   	pop    edi
c001fd38:	52                   	push   edx
c001fd39:	50                   	push   eax
c001fd3a:	e8 3a fd ff ff       	call   c001fa79 <Vm::fpuPush(unsigned long long)>
c001fd3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd43:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd46:	e9 51 fe ff ff       	jmp    c001fb9c <Vm::x87Handler(regs*)+0x74>
c001fd4b:	80 fa 03             	cmp    dl,0x3
c001fd4e:	0f 85 d7 06 00 00    	jne    c002042b <Vm::x87Handler(regs*)+0x903>
c001fd54:	57                   	push   edi
c001fd55:	57                   	push   edi
c001fd56:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd59:	ff 36                	push   DWORD PTR [esi]
c001fd5b:	e8 1f fa ff ff       	call   c001f77f <Vm::fpu64ToInternal(unsigned long long)>
c001fd60:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd67:	89 c6                	mov    esi,eax
c001fd69:	89 d7                	mov    edi,edx
c001fd6b:	e8 7b fc ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fd70:	57                   	push   edi
c001fd71:	56                   	push   esi
c001fd72:	52                   	push   edx
c001fd73:	50                   	push   eax
c001fd74:	e8 95 fb ff ff       	call   c001f90e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd79:	83 c4 20             	add    esp,0x20
c001fd7c:	e8 55 fd ff ff       	call   c001fad6 <Vm::fpuPop()>
c001fd81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd85:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd88:	e9 12 fe ff ff       	jmp    c001fb9f <Vm::x87Handler(regs*)+0x77>
c001fd8d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd91:	8d 50 40             	lea    edx,[eax+0x40]
c001fd94:	80 fa 07             	cmp    dl,0x7
c001fd97:	77 29                	ja     c001fdc2 <Vm::x87Handler(regs*)+0x29a>
c001fd99:	83 ec 0c             	sub    esp,0xc
c001fd9c:	2d c0 00 00 00       	sub    eax,0xc0
c001fda1:	50                   	push   eax
c001fda2:	e8 44 fc ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fda7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdae:	89 c6                	mov    esi,eax
c001fdb0:	89 d7                	mov    edi,edx
c001fdb2:	e8 34 fc ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fdb7:	57                   	push   edi
c001fdb8:	56                   	push   esi
c001fdb9:	52                   	push   edx
c001fdba:	50                   	push   eax
c001fdbb:	e8 a1 fb ff ff       	call   c001f961 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fdc0:	eb 2f                	jmp    c001fdf1 <Vm::x87Handler(regs*)+0x2c9>
c001fdc2:	8d 50 38             	lea    edx,[eax+0x38]
c001fdc5:	80 fa 07             	cmp    dl,0x7
c001fdc8:	77 2f                	ja     c001fdf9 <Vm::x87Handler(regs*)+0x2d1>
c001fdca:	83 ec 0c             	sub    esp,0xc
c001fdcd:	2d c8 00 00 00       	sub    eax,0xc8
c001fdd2:	50                   	push   eax
c001fdd3:	e8 13 fc ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fdd8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fddf:	89 c6                	mov    esi,eax
c001fde1:	89 d7                	mov    edi,edx
c001fde3:	e8 03 fc ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fde8:	57                   	push   edi
c001fde9:	56                   	push   esi
c001fdea:	52                   	push   edx
c001fdeb:	50                   	push   eax
c001fdec:	e8 a9 fb ff ff       	call   c001f99a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fdf1:	83 c4 1c             	add    esp,0x1c
c001fdf4:	e9 d8 fd ff ff       	jmp    c001fbd1 <Vm::x87Handler(regs*)+0xa9>
c001fdf9:	8d 50 30             	lea    edx,[eax+0x30]
c001fdfc:	80 fa 07             	cmp    dl,0x7
c001fdff:	77 0d                	ja     c001fe0e <Vm::x87Handler(regs*)+0x2e6>
c001fe01:	83 ec 0c             	sub    esp,0xc
c001fe04:	2d d0 00 00 00       	sub    eax,0xd0
c001fe09:	e9 99 03 00 00       	jmp    c00201a7 <Vm::x87Handler(regs*)+0x67f>
c001fe0e:	8d 50 28             	lea    edx,[eax+0x28]
c001fe11:	80 fa 07             	cmp    dl,0x7
c001fe14:	77 0d                	ja     c001fe23 <Vm::x87Handler(regs*)+0x2fb>
c001fe16:	83 ec 0c             	sub    esp,0xc
c001fe19:	2d d8 00 00 00       	sub    eax,0xd8
c001fe1e:	e9 c0 03 00 00       	jmp    c00201e3 <Vm::x87Handler(regs*)+0x6bb>
c001fe23:	8d 50 20             	lea    edx,[eax+0x20]
c001fe26:	80 fa 07             	cmp    dl,0x7
c001fe29:	77 1b                	ja     c001fe46 <Vm::x87Handler(regs*)+0x31e>
c001fe2b:	83 ec 0c             	sub    esp,0xc
c001fe2e:	2d e0 00 00 00       	sub    eax,0xe0
c001fe33:	50                   	push   eax
c001fe34:	e8 b2 fb ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fe39:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe40:	89 c6                	mov    esi,eax
c001fe42:	89 d7                	mov    edi,edx
c001fe44:	eb 22                	jmp    c001fe68 <Vm::x87Handler(regs*)+0x340>
c001fe46:	8d 50 18             	lea    edx,[eax+0x18]
c001fe49:	80 fa 07             	cmp    dl,0x7
c001fe4c:	77 2d                	ja     c001fe7b <Vm::x87Handler(regs*)+0x353>
c001fe4e:	83 ec 0c             	sub    esp,0xc
c001fe51:	6a 00                	push   0x0
c001fe53:	e8 93 fb ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fe58:	89 c6                	mov    esi,eax
c001fe5a:	89 d7                	mov    edi,edx
c001fe5c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe60:	2d e8 00 00 00       	sub    eax,0xe8
c001fe65:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe68:	e8 7e fb ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fe6d:	57                   	push   edi
c001fe6e:	56                   	push   esi
c001fe6f:	52                   	push   edx
c001fe70:	50                   	push   eax
c001fe71:	e8 15 fb ff ff       	call   c001f98b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe76:	e9 76 ff ff ff       	jmp    c001fdf1 <Vm::x87Handler(regs*)+0x2c9>
c001fe7b:	8d 50 10             	lea    edx,[eax+0x10]
c001fe7e:	80 fa 07             	cmp    dl,0x7
c001fe81:	77 1b                	ja     c001fe9e <Vm::x87Handler(regs*)+0x376>
c001fe83:	83 ec 0c             	sub    esp,0xc
c001fe86:	2d f0 00 00 00       	sub    eax,0xf0
c001fe8b:	50                   	push   eax
c001fe8c:	e8 5a fb ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fe91:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe98:	89 c6                	mov    esi,eax
c001fe9a:	89 d7                	mov    edi,edx
c001fe9c:	eb 22                	jmp    c001fec0 <Vm::x87Handler(regs*)+0x398>
c001fe9e:	3c f7                	cmp    al,0xf7
c001fea0:	0f 86 d1 03 00 00    	jbe    c0020277 <Vm::x87Handler(regs*)+0x74f>
c001fea6:	83 ec 0c             	sub    esp,0xc
c001fea9:	6a 00                	push   0x0
c001feab:	e8 3b fb ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001feb0:	89 c6                	mov    esi,eax
c001feb2:	89 d7                	mov    edi,edx
c001feb4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feb8:	2d f8 00 00 00       	sub    eax,0xf8
c001febd:	89 04 24             	mov    DWORD PTR [esp],eax
c001fec0:	e8 26 fb ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fec5:	57                   	push   edi
c001fec6:	56                   	push   esi
c001fec7:	52                   	push   edx
c001fec8:	50                   	push   eax
c001fec9:	e8 eb fa ff ff       	call   c001f9b9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fece:	83 c4 1c             	add    esp,0x1c
c001fed1:	52                   	push   edx
c001fed2:	50                   	push   eax
c001fed3:	6a 00                	push   0x0
c001fed5:	e9 51 02 00 00       	jmp    c002012b <Vm::x87Handler(regs*)+0x603>
c001feda:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fede:	8d 50 40             	lea    edx,[eax+0x40]
c001fee1:	80 fa 07             	cmp    dl,0x7
c001fee4:	77 37                	ja     c001ff1d <Vm::x87Handler(regs*)+0x3f5>
c001fee6:	83 ec 0c             	sub    esp,0xc
c001fee9:	2d c0 00 00 00       	sub    eax,0xc0
c001feee:	50                   	push   eax
c001feef:	e8 f7 fa ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fef4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fefb:	89 c6                	mov    esi,eax
c001fefd:	89 d7                	mov    edi,edx
c001feff:	e8 e7 fa ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001ff04:	57                   	push   edi
c001ff05:	56                   	push   esi
c001ff06:	52                   	push   edx
c001ff07:	50                   	push   eax
c001ff08:	e8 54 fa ff ff       	call   c001f961 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff0d:	83 c4 1c             	add    esp,0x1c
c001ff10:	52                   	push   edx
c001ff11:	50                   	push   eax
c001ff12:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff16:	2d c0 00 00 00       	sub    eax,0xc0
c001ff1b:	eb 3d                	jmp    c001ff5a <Vm::x87Handler(regs*)+0x432>
c001ff1d:	8d 50 38             	lea    edx,[eax+0x38]
c001ff20:	80 fa 07             	cmp    dl,0x7
c001ff23:	77 3b                	ja     c001ff60 <Vm::x87Handler(regs*)+0x438>
c001ff25:	83 ec 0c             	sub    esp,0xc
c001ff28:	2d c8 00 00 00       	sub    eax,0xc8
c001ff2d:	50                   	push   eax
c001ff2e:	e8 b8 fa ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001ff33:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff3a:	89 c6                	mov    esi,eax
c001ff3c:	89 d7                	mov    edi,edx
c001ff3e:	e8 a8 fa ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001ff43:	57                   	push   edi
c001ff44:	56                   	push   esi
c001ff45:	52                   	push   edx
c001ff46:	50                   	push   eax
c001ff47:	e8 4e fa ff ff       	call   c001f99a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff4c:	83 c4 1c             	add    esp,0x1c
c001ff4f:	52                   	push   edx
c001ff50:	50                   	push   eax
c001ff51:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff55:	2d c8 00 00 00       	sub    eax,0xc8
c001ff5a:	50                   	push   eax
c001ff5b:	e9 75 fc ff ff       	jmp    c001fbd5 <Vm::x87Handler(regs*)+0xad>
c001ff60:	83 c0 18             	add    eax,0x18
c001ff63:	3c 07                	cmp    al,0x7
c001ff65:	0f 87 3b 04 00 00    	ja     c00203a6 <Vm::x87Handler(regs*)+0x87e>
c001ff6b:	83 ec 0c             	sub    esp,0xc
c001ff6e:	6a 00                	push   0x0
c001ff70:	e8 76 fa ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001ff75:	89 c6                	mov    esi,eax
c001ff77:	89 d7                	mov    edi,edx
c001ff79:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff7d:	2d e8 00 00 00       	sub    eax,0xe8
c001ff82:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff85:	e8 61 fa ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001ff8a:	57                   	push   edi
c001ff8b:	56                   	push   esi
c001ff8c:	52                   	push   edx
c001ff8d:	50                   	push   eax
c001ff8e:	e8 f8 f9 ff ff       	call   c001f98b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff93:	83 c4 1c             	add    esp,0x1c
c001ff96:	52                   	push   edx
c001ff97:	50                   	push   eax
c001ff98:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff9c:	2d e8 00 00 00       	sub    eax,0xe8
c001ffa1:	eb b7                	jmp    c001ff5a <Vm::x87Handler(regs*)+0x432>
c001ffa3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffa7:	8d 50 40             	lea    edx,[eax+0x40]
c001ffaa:	80 fa 07             	cmp    dl,0x7
c001ffad:	77 3a                	ja     c001ffe9 <Vm::x87Handler(regs*)+0x4c1>
c001ffaf:	83 ec 0c             	sub    esp,0xc
c001ffb2:	2d c0 00 00 00       	sub    eax,0xc0
c001ffb7:	50                   	push   eax
c001ffb8:	e8 2e fa ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001ffbd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffc4:	89 c6                	mov    esi,eax
c001ffc6:	89 d7                	mov    edi,edx
c001ffc8:	e8 1e fa ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001ffcd:	57                   	push   edi
c001ffce:	56                   	push   esi
c001ffcf:	52                   	push   edx
c001ffd0:	50                   	push   eax
c001ffd1:	e8 8b f9 ff ff       	call   c001f961 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ffd6:	83 c4 1c             	add    esp,0x1c
c001ffd9:	52                   	push   edx
c001ffda:	50                   	push   eax
c001ffdb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffdf:	2d c0 00 00 00       	sub    eax,0xc0
c001ffe4:	e9 9e 01 00 00       	jmp    c0020187 <Vm::x87Handler(regs*)+0x65f>
c001ffe9:	8d 50 20             	lea    edx,[eax+0x20]
c001ffec:	80 fa 07             	cmp    dl,0x7
c001ffef:	77 3a                	ja     c002002b <Vm::x87Handler(regs*)+0x503>
c001fff1:	83 ec 0c             	sub    esp,0xc
c001fff4:	2d e0 00 00 00       	sub    eax,0xe0
c001fff9:	50                   	push   eax
c001fffa:	e8 ec f9 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001ffff:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020006:	89 c6                	mov    esi,eax
c0020008:	89 d7                	mov    edi,edx
c002000a:	e8 dc f9 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c002000f:	57                   	push   edi
c0020010:	56                   	push   esi
c0020011:	52                   	push   edx
c0020012:	50                   	push   eax
c0020013:	e8 73 f9 ff ff       	call   c001f98b <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020018:	83 c4 1c             	add    esp,0x1c
c002001b:	52                   	push   edx
c002001c:	50                   	push   eax
c002001d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020021:	2d e0 00 00 00       	sub    eax,0xe0
c0020026:	e9 5c 01 00 00       	jmp    c0020187 <Vm::x87Handler(regs*)+0x65f>
c002002b:	8d 50 18             	lea    edx,[eax+0x18]
c002002e:	80 fa 07             	cmp    dl,0x7
c0020031:	77 3b                	ja     c002006e <Vm::x87Handler(regs*)+0x546>
c0020033:	83 ec 0c             	sub    esp,0xc
c0020036:	6a 00                	push   0x0
c0020038:	e8 ae f9 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c002003d:	89 c6                	mov    esi,eax
c002003f:	89 d7                	mov    edi,edx
c0020041:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020045:	2d e8 00 00 00       	sub    eax,0xe8
c002004a:	89 04 24             	mov    DWORD PTR [esp],eax
c002004d:	e8 99 f9 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020052:	57                   	push   edi
c0020053:	56                   	push   esi
c0020054:	52                   	push   edx
c0020055:	50                   	push   eax
c0020056:	e8 30 f9 ff ff       	call   c001f98b <Vm::fpuSub(unsigned long long, unsigned long long)>
c002005b:	83 c4 1c             	add    esp,0x1c
c002005e:	52                   	push   edx
c002005f:	50                   	push   eax
c0020060:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020064:	2d e8 00 00 00       	sub    eax,0xe8
c0020069:	e9 19 01 00 00       	jmp    c0020187 <Vm::x87Handler(regs*)+0x65f>
c002006e:	8d 50 38             	lea    edx,[eax+0x38]
c0020071:	80 fa 07             	cmp    dl,0x7
c0020074:	77 37                	ja     c00200ad <Vm::x87Handler(regs*)+0x585>
c0020076:	83 ec 0c             	sub    esp,0xc
c0020079:	2d c8 00 00 00       	sub    eax,0xc8
c002007e:	50                   	push   eax
c002007f:	e8 67 f9 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020084:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002008b:	89 c6                	mov    esi,eax
c002008d:	89 d7                	mov    edi,edx
c002008f:	e8 57 f9 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020094:	57                   	push   edi
c0020095:	56                   	push   esi
c0020096:	52                   	push   edx
c0020097:	50                   	push   eax
c0020098:	e8 fd f8 ff ff       	call   c001f99a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002009d:	83 c4 1c             	add    esp,0x1c
c00200a0:	52                   	push   edx
c00200a1:	50                   	push   eax
c00200a2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200a6:	2d c8 00 00 00       	sub    eax,0xc8
c00200ab:	eb 7d                	jmp    c002012a <Vm::x87Handler(regs*)+0x602>
c00200ad:	3c f7                	cmp    al,0xf7
c00200af:	76 38                	jbe    c00200e9 <Vm::x87Handler(regs*)+0x5c1>
c00200b1:	83 ec 0c             	sub    esp,0xc
c00200b4:	6a 00                	push   0x0
c00200b6:	e8 30 f9 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c00200bb:	89 c6                	mov    esi,eax
c00200bd:	89 d7                	mov    edi,edx
c00200bf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200c3:	2d f8 00 00 00       	sub    eax,0xf8
c00200c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00200cb:	e8 1b f9 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c00200d0:	57                   	push   edi
c00200d1:	56                   	push   esi
c00200d2:	52                   	push   edx
c00200d3:	50                   	push   eax
c00200d4:	e8 e0 f8 ff ff       	call   c001f9b9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00200d9:	83 c4 1c             	add    esp,0x1c
c00200dc:	52                   	push   edx
c00200dd:	50                   	push   eax
c00200de:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200e2:	2d f8 00 00 00       	sub    eax,0xf8
c00200e7:	eb 41                	jmp    c002012a <Vm::x87Handler(regs*)+0x602>
c00200e9:	8d 50 10             	lea    edx,[eax+0x10]
c00200ec:	80 fa 07             	cmp    dl,0x7
c00200ef:	0f 87 5a 01 00 00    	ja     c002024f <Vm::x87Handler(regs*)+0x727>
c00200f5:	83 ec 0c             	sub    esp,0xc
c00200f8:	2d f0 00 00 00       	sub    eax,0xf0
c00200fd:	50                   	push   eax
c00200fe:	e8 e8 f8 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020103:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002010a:	89 c6                	mov    esi,eax
c002010c:	89 d7                	mov    edi,edx
c002010e:	e8 d8 f8 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020113:	57                   	push   edi
c0020114:	56                   	push   esi
c0020115:	52                   	push   edx
c0020116:	50                   	push   eax
c0020117:	e8 9d f8 ff ff       	call   c001f9b9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002011c:	83 c4 1c             	add    esp,0x1c
c002011f:	52                   	push   edx
c0020120:	50                   	push   eax
c0020121:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020125:	2d f0 00 00 00       	sub    eax,0xf0
c002012a:	50                   	push   eax
c002012b:	e8 fe f8 ff ff       	call   c001fa2e <Vm::fpuSetReg(int, unsigned long long)>
c0020130:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020134:	e8 9d f9 ff ff       	call   c001fad6 <Vm::fpuPop()>
c0020139:	e9 5e fa ff ff       	jmp    c001fb9c <Vm::x87Handler(regs*)+0x74>
c002013e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020142:	8d 50 30             	lea    edx,[eax+0x30]
c0020145:	80 fa 07             	cmp    dl,0x7
c0020148:	77 1d                	ja     c0020167 <Vm::x87Handler(regs*)+0x63f>
c002014a:	83 ec 0c             	sub    esp,0xc
c002014d:	6a 00                	push   0x0
c002014f:	e8 97 f8 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020154:	83 c4 0c             	add    esp,0xc
c0020157:	52                   	push   edx
c0020158:	50                   	push   eax
c0020159:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002015d:	2d d0 00 00 00       	sub    eax,0xd0
c0020162:	e9 f3 fd ff ff       	jmp    c001ff5a <Vm::x87Handler(regs*)+0x432>
c0020167:	8d 50 28             	lea    edx,[eax+0x28]
c002016a:	80 fa 07             	cmp    dl,0x7
c002016d:	77 28                	ja     c0020197 <Vm::x87Handler(regs*)+0x66f>
c002016f:	83 ec 0c             	sub    esp,0xc
c0020172:	6a 00                	push   0x0
c0020174:	e8 72 f8 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020179:	83 c4 0c             	add    esp,0xc
c002017c:	52                   	push   edx
c002017d:	50                   	push   eax
c002017e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020182:	2d d8 00 00 00       	sub    eax,0xd8
c0020187:	50                   	push   eax
c0020188:	e8 a1 f8 ff ff       	call   c001fa2e <Vm::fpuSetReg(int, unsigned long long)>
c002018d:	e8 44 f9 ff ff       	call   c001fad6 <Vm::fpuPop()>
c0020192:	e9 01 fa ff ff       	jmp    c001fb98 <Vm::x87Handler(regs*)+0x70>
c0020197:	8d 50 20             	lea    edx,[eax+0x20]
c002019a:	80 fa 07             	cmp    dl,0x7
c002019d:	77 30                	ja     c00201cf <Vm::x87Handler(regs*)+0x6a7>
c002019f:	83 ec 0c             	sub    esp,0xc
c00201a2:	2d e0 00 00 00       	sub    eax,0xe0
c00201a7:	50                   	push   eax
c00201a8:	e8 3e f8 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c00201ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201b4:	89 c6                	mov    esi,eax
c00201b6:	89 d7                	mov    edi,edx
c00201b8:	e8 2e f8 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c00201bd:	57                   	push   edi
c00201be:	56                   	push   esi
c00201bf:	52                   	push   edx
c00201c0:	50                   	push   eax
c00201c1:	e8 48 f7 ff ff       	call   c001f90e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201c6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201ca:	e9 54 02 00 00       	jmp    c0020423 <Vm::x87Handler(regs*)+0x8fb>
c00201cf:	8d 50 18             	lea    edx,[eax+0x18]
c00201d2:	80 fa 07             	cmp    dl,0x7
c00201d5:	0f 87 43 fb ff ff    	ja     c001fd1e <Vm::x87Handler(regs*)+0x1f6>
c00201db:	83 ec 0c             	sub    esp,0xc
c00201de:	2d e8 00 00 00       	sub    eax,0xe8
c00201e3:	50                   	push   eax
c00201e4:	e8 02 f8 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c00201e9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201f0:	89 c6                	mov    esi,eax
c00201f2:	89 d7                	mov    edi,edx
c00201f4:	e8 f2 f7 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c00201f9:	57                   	push   edi
c00201fa:	56                   	push   esi
c00201fb:	52                   	push   edx
c00201fc:	50                   	push   eax
c00201fd:	e8 0c f7 ff ff       	call   c001f90e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020202:	83 c4 20             	add    esp,0x20
c0020205:	e8 cc f8 ff ff       	call   c001fad6 <Vm::fpuPop()>
c002020a:	eb 62                	jmp    c002026e <Vm::x87Handler(regs*)+0x746>
c002020c:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020210:	0f 85 0f 01 00 00    	jne    c0020325 <Vm::x87Handler(regs*)+0x7fd>
c0020216:	83 ec 0c             	sub    esp,0xc
c0020219:	6a 01                	push   0x1
c002021b:	e8 cb f7 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020220:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020227:	89 c6                	mov    esi,eax
c0020229:	89 d7                	mov    edi,edx
c002022b:	e8 bb f7 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020230:	57                   	push   edi
c0020231:	56                   	push   esi
c0020232:	52                   	push   edx
c0020233:	50                   	push   eax
c0020234:	e8 d5 f6 ff ff       	call   c001f90e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020239:	83 c4 20             	add    esp,0x20
c002023c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020240:	e8 91 f8 ff ff       	call   c001fad6 <Vm::fpuPop()>
c0020245:	e8 8c f8 ff ff       	call   c001fad6 <Vm::fpuPop()>
c002024a:	e9 50 f9 ff ff       	jmp    c001fb9f <Vm::x87Handler(regs*)+0x77>
c002024f:	3c d9                	cmp    al,0xd9
c0020251:	0f 85 b5 02 00 00    	jne    c002050c <Vm::x87Handler(regs*)+0x9e4>
c0020257:	eb bd                	jmp    c0020216 <Vm::x87Handler(regs*)+0x6ee>
c0020259:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c002025d:	0f 85 ea 02 00 00    	jne    c002054d <Vm::x87Handler(regs*)+0xa25>
c0020263:	0f b7 05 20 1c 03 c0 	movzx  eax,WORD PTR ds:0xc0031c20
c002026a:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c002026e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020272:	e9 28 f9 ff ff       	jmp    c001fb9f <Vm::x87Handler(regs*)+0x77>
c0020277:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002027b:	84 d2                	test   dl,dl
c002027d:	75 0f                	jne    c002028e <Vm::x87Handler(regs*)+0x766>
c002027f:	83 ec 0c             	sub    esp,0xc
c0020282:	ff 36                	push   DWORD PTR [esi]
c0020284:	e8 b1 f4 ff ff       	call   c001f73a <Vm::fpu32ToInternal(unsigned int)>
c0020289:	e9 2c 01 00 00       	jmp    c00203ba <Vm::x87Handler(regs*)+0x892>
c002028e:	80 fa 01             	cmp    dl,0x1
c0020291:	75 0f                	jne    c00202a2 <Vm::x87Handler(regs*)+0x77a>
c0020293:	83 ec 0c             	sub    esp,0xc
c0020296:	ff 36                	push   DWORD PTR [esi]
c0020298:	e8 9d f4 ff ff       	call   c001f73a <Vm::fpu32ToInternal(unsigned int)>
c002029d:	e9 81 02 00 00       	jmp    c0020523 <Vm::x87Handler(regs*)+0x9fb>
c00202a2:	80 fa 04             	cmp    dl,0x4
c00202a5:	75 0f                	jne    c00202b6 <Vm::x87Handler(regs*)+0x78e>
c00202a7:	83 ec 0c             	sub    esp,0xc
c00202aa:	ff 36                	push   DWORD PTR [esi]
c00202ac:	e8 89 f4 ff ff       	call   c001f73a <Vm::fpu32ToInternal(unsigned int)>
c00202b1:	e9 86 01 00 00       	jmp    c002043c <Vm::x87Handler(regs*)+0x914>
c00202b6:	80 fa 05             	cmp    dl,0x5
c00202b9:	75 1b                	jne    c00202d6 <Vm::x87Handler(regs*)+0x7ae>
c00202bb:	83 ec 0c             	sub    esp,0xc
c00202be:	6a 00                	push   0x0
c00202c0:	e8 26 f7 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c00202c5:	89 c7                	mov    edi,eax
c00202c7:	89 d5                	mov    ebp,edx
c00202c9:	58                   	pop    eax
c00202ca:	ff 36                	push   DWORD PTR [esi]
c00202cc:	e8 69 f4 ff ff       	call   c001f73a <Vm::fpu32ToInternal(unsigned int)>
c00202d1:	e9 a3 01 00 00       	jmp    c0020479 <Vm::x87Handler(regs*)+0x951>
c00202d6:	80 fa 06             	cmp    dl,0x6
c00202d9:	75 0f                	jne    c00202ea <Vm::x87Handler(regs*)+0x7c2>
c00202db:	83 ec 0c             	sub    esp,0xc
c00202de:	ff 36                	push   DWORD PTR [esi]
c00202e0:	e8 55 f4 ff ff       	call   c001f73a <Vm::fpu32ToInternal(unsigned int)>
c00202e5:	e9 ae 01 00 00       	jmp    c0020498 <Vm::x87Handler(regs*)+0x970>
c00202ea:	31 c0                	xor    eax,eax
c00202ec:	80 fa 07             	cmp    dl,0x7
c00202ef:	0f 85 94 02 00 00    	jne    c0020589 <Vm::x87Handler(regs*)+0xa61>
c00202f5:	83 ec 0c             	sub    esp,0xc
c00202f8:	6a 00                	push   0x0
c00202fa:	e8 ec f6 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c00202ff:	89 c7                	mov    edi,eax
c0020301:	89 d5                	mov    ebp,edx
c0020303:	58                   	pop    eax
c0020304:	ff 36                	push   DWORD PTR [esi]
c0020306:	e8 2f f4 ff ff       	call   c001f73a <Vm::fpu32ToInternal(unsigned int)>
c002030b:	e9 cb 01 00 00       	jmp    c00204db <Vm::x87Handler(regs*)+0x9b3>
c0020310:	80 fa 03             	cmp    dl,0x3
c0020313:	0f 85 d3 01 00 00    	jne    c00204ec <Vm::x87Handler(regs*)+0x9c4>
c0020319:	e8 b8 f7 ff ff       	call   c001fad6 <Vm::fpuPop()>
c002031e:	51                   	push   ecx
c002031f:	51                   	push   ecx
c0020320:	e9 de 01 00 00       	jmp    c0020503 <Vm::x87Handler(regs*)+0x9db>
c0020325:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020329:	80 fa 01             	cmp    dl,0x1
c002032c:	75 09                	jne    c0020337 <Vm::x87Handler(regs*)+0x80f>
c002032e:	57                   	push   edi
c002032f:	57                   	push   edi
c0020330:	8b 06                	mov    eax,DWORD PTR [esi]
c0020332:	e9 e3 01 00 00       	jmp    c002051a <Vm::x87Handler(regs*)+0x9f2>
c0020337:	80 fa 04             	cmp    dl,0x4
c002033a:	75 12                	jne    c002034e <Vm::x87Handler(regs*)+0x826>
c002033c:	31 d2                	xor    edx,edx
c002033e:	51                   	push   ecx
c002033f:	51                   	push   ecx
c0020340:	8b 06                	mov    eax,DWORD PTR [esi]
c0020342:	52                   	push   edx
c0020343:	50                   	push   eax
c0020344:	e8 d0 f4 ff ff       	call   c001f819 <Vm::fpuLongToFloat(long long)>
c0020349:	e9 ee 00 00 00       	jmp    c002043c <Vm::x87Handler(regs*)+0x914>
c002034e:	31 c0                	xor    eax,eax
c0020350:	80 fa 07             	cmp    dl,0x7
c0020353:	0f 85 30 02 00 00    	jne    c0020589 <Vm::x87Handler(regs*)+0xa61>
c0020359:	83 ec 0c             	sub    esp,0xc
c002035c:	6a 00                	push   0x0
c002035e:	e8 88 f6 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020363:	89 c7                	mov    edi,eax
c0020365:	89 d5                	mov    ebp,edx
c0020367:	58                   	pop    eax
c0020368:	8b 06                	mov    eax,DWORD PTR [esi]
c002036a:	5a                   	pop    edx
c002036b:	31 d2                	xor    edx,edx
c002036d:	52                   	push   edx
c002036e:	50                   	push   eax
c002036f:	e8 a5 f4 ff ff       	call   c001f819 <Vm::fpuLongToFloat(long long)>
c0020374:	e9 62 01 00 00       	jmp    c00204db <Vm::x87Handler(regs*)+0x9b3>
c0020379:	84 d2                	test   dl,dl
c002037b:	75 0d                	jne    c002038a <Vm::x87Handler(regs*)+0x862>
c002037d:	31 d2                	xor    edx,edx
c002037f:	55                   	push   ebp
c0020380:	55                   	push   ebp
c0020381:	8b 06                	mov    eax,DWORD PTR [esi]
c0020383:	52                   	push   edx
c0020384:	50                   	push   eax
c0020385:	e9 d3 01 00 00       	jmp    c002055d <Vm::x87Handler(regs*)+0xa35>
c002038a:	31 c0                	xor    eax,eax
c002038c:	80 fa 02             	cmp    dl,0x2
c002038f:	0f 85 f4 01 00 00    	jne    c0020589 <Vm::x87Handler(regs*)+0xa61>
c0020395:	83 ec 0c             	sub    esp,0xc
c0020398:	6a 00                	push   0x0
c002039a:	e8 4c f6 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c002039f:	59                   	pop    ecx
c00203a0:	5f                   	pop    edi
c00203a1:	e9 6a f9 ff ff       	jmp    c001fd10 <Vm::x87Handler(regs*)+0x1e8>
c00203a6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00203aa:	84 d2                	test   dl,dl
c00203ac:	75 2a                	jne    c00203d8 <Vm::x87Handler(regs*)+0x8b0>
c00203ae:	50                   	push   eax
c00203af:	50                   	push   eax
c00203b0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203b3:	ff 36                	push   DWORD PTR [esi]
c00203b5:	e8 c5 f3 ff ff       	call   c001f77f <Vm::fpu64ToInternal(unsigned long long)>
c00203ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203c1:	89 c6                	mov    esi,eax
c00203c3:	89 d7                	mov    edi,edx
c00203c5:	e8 21 f6 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c00203ca:	57                   	push   edi
c00203cb:	56                   	push   esi
c00203cc:	52                   	push   edx
c00203cd:	50                   	push   eax
c00203ce:	e8 8e f5 ff ff       	call   c001f961 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00203d3:	e9 64 01 00 00       	jmp    c002053c <Vm::x87Handler(regs*)+0xa14>
c00203d8:	80 fa 01             	cmp    dl,0x1
c00203db:	75 11                	jne    c00203ee <Vm::x87Handler(regs*)+0x8c6>
c00203dd:	50                   	push   eax
c00203de:	50                   	push   eax
c00203df:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203e2:	ff 36                	push   DWORD PTR [esi]
c00203e4:	e8 96 f3 ff ff       	call   c001f77f <Vm::fpu64ToInternal(unsigned long long)>
c00203e9:	e9 35 01 00 00       	jmp    c0020523 <Vm::x87Handler(regs*)+0x9fb>
c00203ee:	80 fa 02             	cmp    dl,0x2
c00203f1:	0f 85 54 f9 ff ff    	jne    c001fd4b <Vm::x87Handler(regs*)+0x223>
c00203f7:	55                   	push   ebp
c00203f8:	55                   	push   ebp
c00203f9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203fc:	ff 36                	push   DWORD PTR [esi]
c00203fe:	e8 7c f3 ff ff       	call   c001f77f <Vm::fpu64ToInternal(unsigned long long)>
c0020403:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002040a:	89 c6                	mov    esi,eax
c002040c:	89 d7                	mov    edi,edx
c002040e:	e8 d8 f5 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020413:	57                   	push   edi
c0020414:	56                   	push   esi
c0020415:	52                   	push   edx
c0020416:	50                   	push   eax
c0020417:	e8 f2 f4 ff ff       	call   c001f90e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002041c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020420:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020423:	83 c4 20             	add    esp,0x20
c0020426:	e9 74 f7 ff ff       	jmp    c001fb9f <Vm::x87Handler(regs*)+0x77>
c002042b:	80 fa 04             	cmp    dl,0x4
c002042e:	75 2a                	jne    c002045a <Vm::x87Handler(regs*)+0x932>
c0020430:	51                   	push   ecx
c0020431:	51                   	push   ecx
c0020432:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020435:	ff 36                	push   DWORD PTR [esi]
c0020437:	e8 43 f3 ff ff       	call   c001f77f <Vm::fpu64ToInternal(unsigned long long)>
c002043c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020443:	89 c6                	mov    esi,eax
c0020445:	89 d7                	mov    edi,edx
c0020447:	e8 9f f5 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c002044c:	57                   	push   edi
c002044d:	56                   	push   esi
c002044e:	52                   	push   edx
c002044f:	50                   	push   eax
c0020450:	e8 36 f5 ff ff       	call   c001f98b <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020455:	e9 e2 00 00 00       	jmp    c002053c <Vm::x87Handler(regs*)+0xa14>
c002045a:	80 fa 05             	cmp    dl,0x5
c002045d:	75 28                	jne    c0020487 <Vm::x87Handler(regs*)+0x95f>
c002045f:	83 ec 0c             	sub    esp,0xc
c0020462:	6a 00                	push   0x0
c0020464:	e8 82 f5 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020469:	89 c7                	mov    edi,eax
c002046b:	89 d5                	mov    ebp,edx
c002046d:	58                   	pop    eax
c002046e:	5a                   	pop    edx
c002046f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020472:	ff 36                	push   DWORD PTR [esi]
c0020474:	e8 06 f3 ff ff       	call   c001f77f <Vm::fpu64ToInternal(unsigned long long)>
c0020479:	83 c4 10             	add    esp,0x10
c002047c:	55                   	push   ebp
c002047d:	57                   	push   edi
c002047e:	52                   	push   edx
c002047f:	50                   	push   eax
c0020480:	e8 06 f5 ff ff       	call   c001f98b <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020485:	eb 60                	jmp    c00204e7 <Vm::x87Handler(regs*)+0x9bf>
c0020487:	80 fa 06             	cmp    dl,0x6
c002048a:	75 2a                	jne    c00204b6 <Vm::x87Handler(regs*)+0x98e>
c002048c:	51                   	push   ecx
c002048d:	51                   	push   ecx
c002048e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020491:	ff 36                	push   DWORD PTR [esi]
c0020493:	e8 e7 f2 ff ff       	call   c001f77f <Vm::fpu64ToInternal(unsigned long long)>
c0020498:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002049f:	89 c6                	mov    esi,eax
c00204a1:	89 d7                	mov    edi,edx
c00204a3:	e8 43 f5 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c00204a8:	57                   	push   edi
c00204a9:	56                   	push   esi
c00204aa:	52                   	push   edx
c00204ab:	50                   	push   eax
c00204ac:	e8 08 f5 ff ff       	call   c001f9b9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204b1:	e9 86 00 00 00       	jmp    c002053c <Vm::x87Handler(regs*)+0xa14>
c00204b6:	31 c0                	xor    eax,eax
c00204b8:	80 fa 07             	cmp    dl,0x7
c00204bb:	0f 85 c8 00 00 00    	jne    c0020589 <Vm::x87Handler(regs*)+0xa61>
c00204c1:	83 ec 0c             	sub    esp,0xc
c00204c4:	6a 00                	push   0x0
c00204c6:	e8 20 f5 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c00204cb:	89 c7                	mov    edi,eax
c00204cd:	89 d5                	mov    ebp,edx
c00204cf:	58                   	pop    eax
c00204d0:	5a                   	pop    edx
c00204d1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204d4:	ff 36                	push   DWORD PTR [esi]
c00204d6:	e8 a4 f2 ff ff       	call   c001f77f <Vm::fpu64ToInternal(unsigned long long)>
c00204db:	83 c4 10             	add    esp,0x10
c00204de:	55                   	push   ebp
c00204df:	57                   	push   edi
c00204e0:	52                   	push   edx
c00204e1:	50                   	push   eax
c00204e2:	e8 d2 f4 ff ff       	call   c001f9b9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204e7:	83 c4 0c             	add    esp,0xc
c00204ea:	eb 53                	jmp    c002053f <Vm::x87Handler(regs*)+0xa17>
c00204ec:	31 c0                	xor    eax,eax
c00204ee:	80 fa 02             	cmp    dl,0x2
c00204f1:	0f 85 92 00 00 00    	jne    c0020589 <Vm::x87Handler(regs*)+0xa61>
c00204f7:	83 ec 0c             	sub    esp,0xc
c00204fa:	6a 00                	push   0x0
c00204fc:	e8 ea f4 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020501:	59                   	pop    ecx
c0020502:	5f                   	pop    edi
c0020503:	52                   	push   edx
c0020504:	50                   	push   eax
c0020505:	e8 27 f2 ff ff       	call   c001f731 <Vm::fpuInternalTo64(unsigned long long)>
c002050a:	eb 70                	jmp    c002057c <Vm::x87Handler(regs*)+0xa54>
c002050c:	31 c0                	xor    eax,eax
c002050e:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020513:	75 74                	jne    c0020589 <Vm::x87Handler(regs*)+0xa61>
c0020515:	50                   	push   eax
c0020516:	50                   	push   eax
c0020517:	0f b7 06             	movzx  eax,WORD PTR [esi]
c002051a:	31 d2                	xor    edx,edx
c002051c:	52                   	push   edx
c002051d:	50                   	push   eax
c002051e:	e8 f6 f2 ff ff       	call   c001f819 <Vm::fpuLongToFloat(long long)>
c0020523:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002052a:	89 c6                	mov    esi,eax
c002052c:	89 d7                	mov    edi,edx
c002052e:	e8 b8 f4 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020533:	57                   	push   edi
c0020534:	56                   	push   esi
c0020535:	52                   	push   edx
c0020536:	50                   	push   eax
c0020537:	e8 5e f4 ff ff       	call   c001f99a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002053c:	83 c4 1c             	add    esp,0x1c
c002053f:	52                   	push   edx
c0020540:	50                   	push   eax
c0020541:	6a 00                	push   0x0
c0020543:	e8 e6 f4 ff ff       	call   c001fa2e <Vm::fpuSetReg(int, unsigned long long)>
c0020548:	e9 f2 f7 ff ff       	jmp    c001fd3f <Vm::x87Handler(regs*)+0x217>
c002054d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020551:	80 fa 05             	cmp    dl,0x5
c0020554:	75 11                	jne    c0020567 <Vm::x87Handler(regs*)+0xa3f>
c0020556:	55                   	push   ebp
c0020557:	55                   	push   ebp
c0020558:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002055b:	ff 36                	push   DWORD PTR [esi]
c002055d:	e8 81 f2 ff ff       	call   c001f7e3 <Vm::fpuULongToFloat(unsigned long long)>
c0020562:	e9 cf f7 ff ff       	jmp    c001fd36 <Vm::x87Handler(regs*)+0x20e>
c0020567:	31 c0                	xor    eax,eax
c0020569:	80 fa 07             	cmp    dl,0x7
c002056c:	75 1b                	jne    c0020589 <Vm::x87Handler(regs*)+0xa61>
c002056e:	e8 63 f5 ff ff       	call   c001fad6 <Vm::fpuPop()>
c0020573:	51                   	push   ecx
c0020574:	51                   	push   ecx
c0020575:	52                   	push   edx
c0020576:	50                   	push   eax
c0020577:	e8 0c f2 ff ff       	call   c001f788 <Vm::fpuFloatToLong(unsigned long long)>
c002057c:	83 c4 10             	add    esp,0x10
c002057f:	89 06                	mov    DWORD PTR [esi],eax
c0020581:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020584:	e9 f8 f7 ff ff       	jmp    c001fd81 <Vm::x87Handler(regs*)+0x259>
c0020589:	83 c4 1c             	add    esp,0x1c
c002058c:	5b                   	pop    ebx
c002058d:	5e                   	pop    esi
c002058e:	5f                   	pop    edi
c002058f:	5d                   	pop    ebp
c0020590:	c3                   	ret    

c0020591 <__static_initialization_and_destruction_0(int, int)>:
c0020591:	83 ec 0c             	sub    esp,0xc
c0020594:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020599:	75 1a                	jne    c00205b5 <__static_initialization_and_destruction_0(int, int)+0x24>
c002059b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00205a3:	75 10                	jne    c00205b5 <__static_initialization_and_destruction_0(int, int)+0x24>
c00205a5:	83 ec 0c             	sub    esp,0xc
c00205a8:	68 20 1c 03 c0       	push   0xc0031c20
c00205ad:	e8 0e 88 00 00       	call   c0028dc0 <Vm::_FPUState::_FPUState()>
c00205b2:	83 c4 10             	add    esp,0x10
c00205b5:	90                   	nop
c00205b6:	83 c4 0c             	add    esp,0xc
c00205b9:	c3                   	ret    

c00205ba <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00205ba:	83 ec 0c             	sub    esp,0xc
c00205bd:	83 ec 08             	sub    esp,0x8
c00205c0:	68 ff ff 00 00       	push   0xffff
c00205c5:	6a 01                	push   0x1
c00205c7:	e8 c5 ff ff ff       	call   c0020591 <__static_initialization_and_destruction_0(int, int)>
c00205cc:	83 c4 10             	add    esp,0x10
c00205cf:	83 c4 0c             	add    esp,0xc
c00205d2:	c3                   	ret    
c00205d3:	90                   	nop

c00205d4 <FAT::getName()>:
c00205d4:	b8 3c ca 02 c0       	mov    eax,0xc002ca3c
c00205d9:	c3                   	ret    

c00205da <FAT::tell(void*, unsigned long long*)>:
c00205da:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00205df:	75 06                	jne    c00205e7 <FAT::tell(void*, unsigned long long*)+0xd>
c00205e1:	b8 04 00 00 00       	mov    eax,0x4
c00205e6:	c3                   	ret    
c00205e7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205ec:	75 06                	jne    c00205f4 <FAT::tell(void*, unsigned long long*)+0x1a>
c00205ee:	b8 04 00 00 00       	mov    eax,0x4
c00205f3:	c3                   	ret    
c00205f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205f8:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00205fb:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00205fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020602:	89 01                	mov    DWORD PTR [ecx],eax
c0020604:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020607:	b8 00 00 00 00       	mov    eax,0x0
c002060c:	c3                   	ret    
c002060d:	90                   	nop

c002060e <FAT::stat(void*, unsigned long long*)>:
c002060e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020613:	75 06                	jne    c002061b <FAT::stat(void*, unsigned long long*)+0xd>
c0020615:	b8 04 00 00 00       	mov    eax,0x4
c002061a:	c3                   	ret    
c002061b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020620:	75 06                	jne    c0020628 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020622:	b8 04 00 00 00       	mov    eax,0x4
c0020627:	c3                   	ret    
c0020628:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002062c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c002062f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020632:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020636:	89 01                	mov    DWORD PTR [ecx],eax
c0020638:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002063b:	b8 00 00 00 00       	mov    eax,0x0
c0020640:	c3                   	ret    
c0020641:	90                   	nop

c0020642 <FAT::~FAT()>:
c0020642:	83 ec 0c             	sub    esp,0xc
c0020645:	ba c0 ca 02 c0       	mov    edx,0xc002cac0
c002064a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002064e:	89 10                	mov    DWORD PTR [eax],edx
c0020650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020654:	83 ec 0c             	sub    esp,0xc
c0020657:	50                   	push   eax
c0020658:	e8 99 2c ff ff       	call   c00132f6 <Filesystem::~Filesystem()>
c002065d:	83 c4 10             	add    esp,0x10
c0020660:	90                   	nop
c0020661:	83 c4 0c             	add    esp,0xc
c0020664:	c3                   	ret    
c0020665:	90                   	nop

c0020666 <FAT::~FAT()>:
c0020666:	83 ec 0c             	sub    esp,0xc
c0020669:	83 ec 0c             	sub    esp,0xc
c002066c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020670:	e8 cd ff ff ff       	call   c0020642 <FAT::~FAT()>
c0020675:	83 c4 10             	add    esp,0x10
c0020678:	83 ec 08             	sub    esp,0x8
c002067b:	6a 08                	push   0x8
c002067d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020681:	e8 67 28 ff ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0020686:	83 c4 10             	add    esp,0x10
c0020689:	83 c4 0c             	add    esp,0xc
c002068c:	c3                   	ret    
c002068d:	90                   	nop

c002068e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c002068e:	83 ec 1c             	sub    esp,0x1c
c0020691:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020698:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002069d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206a1:	8b 04 85 a0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce360]
c00206a8:	83 f8 ff             	cmp    eax,0xffffffff
c00206ab:	75 34                	jne    c00206e1 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00206ad:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00206b1:	88 c2                	mov    dl,al
c00206b3:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c00206b8:	01 d0                	add    eax,edx
c00206ba:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00206be:	8b 15 80 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c80
c00206c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206c8:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c00206cf:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c00206d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00206d8:	89 14 85 20 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2e0],edx
c00206df:	eb 17                	jmp    c00206f8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00206e1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00206e5:	88 c2                	mov    dl,al
c00206e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206eb:	8b 04 85 a0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce360]
c00206f2:	01 d0                	add    eax,edx
c00206f4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00206f8:	83 ec 04             	sub    esp,0x4
c00206fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020703:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020707:	50                   	push   eax
c0020708:	e8 2b 66 fe ff       	call   c0006d38 <f_getlabel>
c002070d:	83 c4 10             	add    esp,0x10
c0020710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020714:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020719:	75 07                	jne    c0020722 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002071b:	b8 00 00 00 00       	mov    eax,0x0
c0020720:	eb 05                	jmp    c0020727 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020722:	b8 01 00 00 00       	mov    eax,0x1
c0020727:	83 c4 1c             	add    esp,0x1c
c002072a:	c3                   	ret    
c002072b:	90                   	nop

c002072c <FAT::setlabel(LogicalDisk*, int, char*)>:
c002072c:	57                   	push   edi
c002072d:	83 ec 58             	sub    esp,0x58
c0020730:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020738:	8d 54 24 10          	lea    edx,[esp+0x10]
c002073c:	b9 0f 00 00 00       	mov    ecx,0xf
c0020741:	b8 00 00 00 00       	mov    eax,0x0
c0020746:	fc                   	cld    
c0020747:	89 d7                	mov    edi,edx
c0020749:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002074b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002074f:	8b 04 85 a0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce360]
c0020756:	83 f8 ff             	cmp    eax,0xffffffff
c0020759:	75 34                	jne    c002078f <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002075b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002075f:	88 c2                	mov    dl,al
c0020761:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c0020766:	01 d0                	add    eax,edx
c0020768:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002076c:	8b 15 80 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c80
c0020772:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020776:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c002077d:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c0020782:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020786:	89 14 85 20 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2e0],edx
c002078d:	eb 17                	jmp    c00207a6 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c002078f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020793:	88 c2                	mov    dl,al
c0020795:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020799:	8b 04 85 a0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce360]
c00207a0:	01 d0                	add    eax,edx
c00207a2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207a6:	83 ec 08             	sub    esp,0x8
c00207a9:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00207ad:	8d 44 24 18          	lea    eax,[esp+0x18]
c00207b1:	50                   	push   eax
c00207b2:	e8 bd 01 fe ff       	call   c0000974 <strcat>
c00207b7:	83 c4 10             	add    esp,0x10
c00207ba:	83 ec 0c             	sub    esp,0xc
c00207bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00207c1:	50                   	push   eax
c00207c2:	e8 5f 67 fe ff       	call   c0006f26 <f_setlabel>
c00207c7:	83 c4 10             	add    esp,0x10
c00207ca:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00207ce:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00207d3:	75 07                	jne    c00207dc <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00207d5:	b8 00 00 00 00       	mov    eax,0x0
c00207da:	eb 05                	jmp    c00207e1 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00207dc:	b8 01 00 00 00       	mov    eax,0x1
c00207e1:	83 c4 58             	add    esp,0x58
c00207e4:	5f                   	pop    edi
c00207e5:	c3                   	ret    

c00207e6 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00207e6:	83 ec 2c             	sub    esp,0x2c
c00207e9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00207f1:	83 ec 08             	sub    esp,0x8
c00207f4:	68 60 ca 02 c0       	push   0xc002ca60
c00207f9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207fd:	e8 be 00 fe ff       	call   c00008c0 <strcmp>
c0020802:	83 c4 10             	add    esp,0x10
c0020805:	85 c0                	test   eax,eax
c0020807:	0f 94 c0             	sete   al
c002080a:	84 c0                	test   al,al
c002080c:	74 0d                	je     c002081b <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002080e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020816:	e9 a6 00 00 00       	jmp    c00208c1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002081b:	83 ec 08             	sub    esp,0x8
c002081e:	68 52 ca 02 c0       	push   0xc002ca52
c0020823:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020827:	e8 94 00 fe ff       	call   c00008c0 <strcmp>
c002082c:	83 c4 10             	add    esp,0x10
c002082f:	85 c0                	test   eax,eax
c0020831:	0f 94 c0             	sete   al
c0020834:	84 c0                	test   al,al
c0020836:	74 0a                	je     c0020842 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020838:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020840:	eb 7f                	jmp    c00208c1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020842:	83 ec 08             	sub    esp,0x8
c0020845:	68 58 ca 02 c0       	push   0xc002ca58
c002084a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002084e:	e8 6d 00 fe ff       	call   c00008c0 <strcmp>
c0020853:	83 c4 10             	add    esp,0x10
c0020856:	85 c0                	test   eax,eax
c0020858:	0f 94 c0             	sete   al
c002085b:	84 c0                	test   al,al
c002085d:	74 0a                	je     c0020869 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c002085f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020867:	eb 58                	jmp    c00208c1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020869:	83 ec 08             	sub    esp,0x8
c002086c:	68 2c 95 02 c0       	push   0xc002952c
c0020871:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020875:	e8 46 00 fe ff       	call   c00008c0 <strcmp>
c002087a:	83 c4 10             	add    esp,0x10
c002087d:	85 c0                	test   eax,eax
c002087f:	0f 94 c0             	sete   al
c0020882:	84 c0                	test   al,al
c0020884:	74 0a                	je     c0020890 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020886:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c002088e:	eb 31                	jmp    c00208c1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020890:	83 ec 08             	sub    esp,0x8
c0020893:	68 5e ca 02 c0       	push   0xc002ca5e
c0020898:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002089c:	e8 1f 00 fe ff       	call   c00008c0 <strcmp>
c00208a1:	83 c4 10             	add    esp,0x10
c00208a4:	85 c0                	test   eax,eax
c00208a6:	0f 94 c0             	sete   al
c00208a9:	84 c0                	test   al,al
c00208ab:	74 0a                	je     c00208b7 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00208ad:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00208b5:	eb 0a                	jmp    c00208c1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208b7:	b8 08 00 00 00       	mov    eax,0x8
c00208bc:	e9 04 01 00 00       	jmp    c00209c5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208c1:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00208c8:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00208cd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208d1:	8b 04 85 a0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce360]
c00208d8:	83 f8 ff             	cmp    eax,0xffffffff
c00208db:	75 34                	jne    c0020911 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00208dd:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00208e1:	88 c2                	mov    dl,al
c00208e3:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c00208e8:	01 d0                	add    eax,edx
c00208ea:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00208ee:	8b 15 80 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c80
c00208f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208f8:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c00208ff:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c0020904:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020908:	89 14 85 20 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2e0],edx
c002090f:	eb 17                	jmp    c0020928 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020911:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020915:	88 c2                	mov    dl,al
c0020917:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002091b:	8b 04 85 a0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce360]
c0020922:	01 d0                	add    eax,edx
c0020924:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020928:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002092c:	88 04 24             	mov    BYTE PTR [esp],al
c002092f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020933:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020937:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002093f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020944:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002094c:	83 ec 0c             	sub    esp,0xc
c002094f:	68 00 20 00 00       	push   0x2000
c0020954:	e8 e7 ee fe ff       	call   c000f840 <malloc>
c0020959:	83 c4 10             	add    esp,0x10
c002095c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020960:	68 00 20 00 00       	push   0x2000
c0020965:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020969:	8d 44 24 08          	lea    eax,[esp+0x8]
c002096d:	50                   	push   eax
c002096e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020972:	50                   	push   eax
c0020973:	e8 f9 69 fe ff       	call   c0007371 <f_mkfs>
c0020978:	83 c4 10             	add    esp,0x10
c002097b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002097f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020984:	75 07                	jne    c002098d <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020986:	b8 00 00 00 00       	mov    eax,0x0
c002098b:	eb 38                	jmp    c00209c5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002098d:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020992:	75 17                	jne    c00209ab <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020994:	83 ec 0c             	sub    esp,0xc
c0020997:	68 90 ca 02 c0       	push   0xc002ca90
c002099c:	e8 2c 26 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c00209a1:	83 c4 10             	add    esp,0x10
c00209a4:	b8 09 00 00 00       	mov    eax,0x9
c00209a9:	eb 1a                	jmp    c00209c5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209af:	83 ec 08             	sub    esp,0x8
c00209b2:	50                   	push   eax
c00209b3:	68 64 ca 02 c0       	push   0xc002ca64
c00209b8:	e8 10 26 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c00209bd:	83 c4 10             	add    esp,0x10
c00209c0:	b8 01 00 00 00       	mov    eax,0x1
c00209c5:	83 c4 2c             	add    esp,0x2c
c00209c8:	c3                   	ret    
c00209c9:	90                   	nop

c00209ca <FAT::tryMount(LogicalDisk*, int)>:
c00209ca:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00209d0:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c00209d5:	83 f8 14             	cmp    eax,0x14
c00209d8:	75 17                	jne    c00209f1 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00209da:	83 ec 0c             	sub    esp,0xc
c00209dd:	68 76 ca 02 c0       	push   0xc002ca76
c00209e2:	e8 88 9c ff ff       	call   c001a66f <Krnl::panic(char const*)>
c00209e7:	83 c4 10             	add    esp,0x10
c00209ea:	b0 00                	mov    al,0x0
c00209ec:	e9 d7 01 00 00       	jmp    c0020bc8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209f1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00209f8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00209fe:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020a04:	3d 00 02 00 00       	cmp    eax,0x200
c0020a09:	74 07                	je     c0020a12 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020a0b:	b0 00                	mov    al,0x0
c0020a0d:	e9 b6 01 00 00       	jmp    c0020bc8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a12:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020a1a:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a21:	8b 04 85 a0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce360]
c0020a28:	83 f8 ff             	cmp    eax,0xffffffff
c0020a2b:	74 07                	je     c0020a34 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020a2d:	b0 01                	mov    al,0x1
c0020a2f:	e9 94 01 00 00       	jmp    c0020bc8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a34:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020a3e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020a46:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020a4d:	88 c2                	mov    dl,al
c0020a4f:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c0020a54:	01 d0                	add    eax,edx
c0020a56:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020a5d:	8b 15 80 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c80
c0020a63:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a6a:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c0020a71:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c0020a76:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020a7d:	89 14 85 20 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2e0],edx
c0020a84:	83 ec 0c             	sub    esp,0xc
c0020a87:	68 54 02 00 00       	push   0x254
c0020a8c:	e8 af ed fe ff       	call   c000f840 <malloc>
c0020a91:	83 c4 10             	add    esp,0x10
c0020a94:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020a9b:	83 ec 04             	sub    esp,0x4
c0020a9e:	6a 00                	push   0x0
c0020aa0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020aa7:	50                   	push   eax
c0020aa8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020aaf:	e8 7b 44 fe ff       	call   c0004f2f <f_mount>
c0020ab4:	83 c4 10             	add    esp,0x10
c0020ab7:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020abe:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020ac6:	74 19                	je     c0020ae1 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020ac8:	83 ec 0c             	sub    esp,0xc
c0020acb:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020ad2:	e8 89 ed fe ff       	call   c000f860 <rfree>
c0020ad7:	83 c4 10             	add    esp,0x10
c0020ada:	b0 00                	mov    al,0x0
c0020adc:	e9 e7 00 00 00       	jmp    c0020bc8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020ae1:	83 ec 04             	sub    esp,0x4
c0020ae4:	68 00 01 00 00       	push   0x100
c0020ae9:	6a 00                	push   0x0
c0020aeb:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020af2:	50                   	push   eax
c0020af3:	e8 80 fc fd ff       	call   c0000778 <memset>
c0020af8:	83 c4 10             	add    esp,0x10
c0020afb:	83 ec 08             	sub    esp,0x8
c0020afe:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b05:	50                   	push   eax
c0020b06:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b0d:	50                   	push   eax
c0020b0e:	e8 61 fe fd ff       	call   c0000974 <strcat>
c0020b13:	83 c4 10             	add    esp,0x10
c0020b16:	83 ec 08             	sub    esp,0x8
c0020b19:	68 84 ca 02 c0       	push   0xc002ca84
c0020b1e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b25:	50                   	push   eax
c0020b26:	e8 49 fe fd ff       	call   c0000974 <strcat>
c0020b2b:	83 c4 10             	add    esp,0x10
c0020b2e:	83 ec 04             	sub    esp,0x4
c0020b31:	6a 01                	push   0x1
c0020b33:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020b3a:	50                   	push   eax
c0020b3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b3f:	50                   	push   eax
c0020b40:	e8 4c 44 fe ff       	call   c0004f91 <f_open>
c0020b45:	83 c4 10             	add    esp,0x10
c0020b48:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b4f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020b56:	85 c0                	test   eax,eax
c0020b58:	74 0a                	je     c0020b64 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020b5a:	78 2d                	js     c0020b89 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b5c:	83 e8 04             	sub    eax,0x4
c0020b5f:	83 f8 01             	cmp    eax,0x1
c0020b62:	77 25                	ja     c0020b89 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b64:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020b6c:	83 ec 0c             	sub    esp,0xc
c0020b6f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b73:	50                   	push   eax
c0020b74:	e8 6a 4f fe ff       	call   c0005ae3 <f_close>
c0020b79:	83 c4 10             	add    esp,0x10
c0020b7c:	90                   	nop
c0020b7d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020b85:	74 3a                	je     c0020bc1 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020b87:	eb 2d                	jmp    c0020bb6 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020b89:	83 ec 0c             	sub    esp,0xc
c0020b8c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b93:	e8 c8 ec fe ff       	call   c000f860 <rfree>
c0020b98:	83 c4 10             	add    esp,0x10
c0020b9b:	83 ec 04             	sub    esp,0x4
c0020b9e:	6a 00                	push   0x0
c0020ba0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020ba7:	50                   	push   eax
c0020ba8:	6a 00                	push   0x0
c0020baa:	e8 80 43 fe ff       	call   c0004f2f <f_mount>
c0020baf:	83 c4 10             	add    esp,0x10
c0020bb2:	b0 00                	mov    al,0x0
c0020bb4:	eb 12                	jmp    c0020bc8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020bb6:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c0020bbb:	40                   	inc    eax
c0020bbc:	a3 80 1c 03 c0       	mov    ds:0xc0031c80,eax
c0020bc1:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020bc8:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020bce:	c3                   	ret    
c0020bcf:	90                   	nop

c0020bd0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020bd0:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020bd6:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020bde:	74 0a                	je     c0020bea <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020be0:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020be8:	75 0a                	jne    c0020bf4 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020bea:	b8 04 00 00 00       	mov    eax,0x4
c0020bef:	e9 db 00 00 00       	jmp    c0020ccf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020bf4:	83 ec 08             	sub    esp,0x8
c0020bf7:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020bfe:	50                   	push   eax
c0020bff:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020c06:	e8 e2 54 fe ff       	call   c00060ed <f_readdir>
c0020c0b:	83 c4 10             	add    esp,0x10
c0020c0e:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020c15:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020c1b:	83 ec 0c             	sub    esp,0xc
c0020c1e:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020c25:	83 c0 1a             	add    eax,0x1a
c0020c28:	50                   	push   eax
c0020c29:	e8 66 fb fd ff       	call   c0000794 <strlen>
c0020c2e:	83 c4 10             	add    esp,0x10
c0020c31:	ba 00 00 00 00       	mov    edx,0x0
c0020c36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020c3a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020c3e:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020c45:	0f b6 c0             	movzx  eax,al
c0020c48:	83 e0 10             	and    eax,0x10
c0020c4b:	74 07                	je     c0020c54 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020c4d:	b8 02 00 00 00       	mov    eax,0x2
c0020c52:	eb 05                	jmp    c0020c59 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020c54:	b8 01 00 00 00       	mov    eax,0x1
c0020c59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c5d:	83 ec 08             	sub    esp,0x8
c0020c60:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020c67:	83 c0 1a             	add    eax,0x1a
c0020c6a:	50                   	push   eax
c0020c6b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c6f:	83 c0 10             	add    eax,0x10
c0020c72:	50                   	push   eax
c0020c73:	e8 bc fb fd ff       	call   c0000834 <strcpy>
c0020c78:	83 c4 10             	add    esp,0x10
c0020c7b:	83 ec 04             	sub    esp,0x4
c0020c7e:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020c85:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c89:	50                   	push   eax
c0020c8a:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020c91:	e8 ae fa fd ff       	call   c0000744 <memcpy>
c0020c96:	83 c4 10             	add    esp,0x10
c0020c99:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020ca0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020ca6:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020cad:	84 c0                	test   al,al
c0020caf:	75 07                	jne    c0020cb8 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020cb1:	b8 07 00 00 00       	mov    eax,0x7
c0020cb6:	eb 17                	jmp    c0020ccf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020cb8:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020cbf:	85 c0                	test   eax,eax
c0020cc1:	75 07                	jne    c0020cca <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020cc3:	b8 00 00 00 00       	mov    eax,0x0
c0020cc8:	eb 05                	jmp    c0020ccf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020cca:	b8 01 00 00 00       	mov    eax,0x1
c0020ccf:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020cd5:	c3                   	ret    

c0020cd6 <FAT::read(void*, unsigned long, void*, int*)>:
c0020cd6:	83 ec 1c             	sub    esp,0x1c
c0020cd9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cde:	74 07                	je     c0020ce7 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020ce0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020ce5:	75 07                	jne    c0020cee <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020ce7:	b8 04 00 00 00       	mov    eax,0x4
c0020cec:	eb 3d                	jmp    c0020d2b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020cee:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020cf2:	50                   	push   eax
c0020cf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020cf7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020cfb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cff:	e8 c9 46 fe ff       	call   c00053cd <f_read>
c0020d04:	83 c4 10             	add    esp,0x10
c0020d07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d0f:	89 c2                	mov    edx,eax
c0020d11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020d15:	89 10                	mov    DWORD PTR [eax],edx
c0020d17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d1b:	85 c0                	test   eax,eax
c0020d1d:	75 07                	jne    c0020d26 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020d1f:	b8 00 00 00 00       	mov    eax,0x0
c0020d24:	eb 05                	jmp    c0020d2b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020d26:	b8 01 00 00 00       	mov    eax,0x1
c0020d2b:	83 c4 1c             	add    esp,0x1c
c0020d2e:	c3                   	ret    
c0020d2f:	90                   	nop

c0020d30 <FAT::write(void*, unsigned long, void*, int*)>:
c0020d30:	83 ec 1c             	sub    esp,0x1c
c0020d33:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d38:	74 07                	je     c0020d41 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020d3a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020d3f:	75 07                	jne    c0020d48 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020d41:	b8 04 00 00 00       	mov    eax,0x4
c0020d46:	eb 3d                	jmp    c0020d85 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d48:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d4c:	50                   	push   eax
c0020d4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020d51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d55:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d59:	e8 ef 48 fe ff       	call   c000564d <f_write>
c0020d5e:	83 c4 10             	add    esp,0x10
c0020d61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d69:	89 c2                	mov    edx,eax
c0020d6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020d6f:	89 10                	mov    DWORD PTR [eax],edx
c0020d71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d75:	85 c0                	test   eax,eax
c0020d77:	75 07                	jne    c0020d80 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020d79:	b8 00 00 00 00       	mov    eax,0x0
c0020d7e:	eb 05                	jmp    c0020d85 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d80:	b8 01 00 00 00       	mov    eax,0x1
c0020d85:	83 c4 1c             	add    esp,0x1c
c0020d88:	c3                   	ret    
c0020d89:	90                   	nop

c0020d8a <FAT::close(void*)>:
c0020d8a:	83 ec 1c             	sub    esp,0x1c
c0020d8d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d92:	75 07                	jne    c0020d9b <FAT::close(void*)+0x11>
c0020d94:	b8 04 00 00 00       	mov    eax,0x4
c0020d99:	eb 36                	jmp    c0020dd1 <FAT::close(void*)+0x47>
c0020d9b:	83 ec 0c             	sub    esp,0xc
c0020d9e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020da2:	e8 3c 4d fe ff       	call   c0005ae3 <f_close>
c0020da7:	83 c4 10             	add    esp,0x10
c0020daa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020dae:	83 ec 0c             	sub    esp,0xc
c0020db1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020db5:	e8 96 ea fe ff       	call   c000f850 <free>
c0020dba:	83 c4 10             	add    esp,0x10
c0020dbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020dc1:	85 c0                	test   eax,eax
c0020dc3:	75 07                	jne    c0020dcc <FAT::close(void*)+0x42>
c0020dc5:	b8 00 00 00 00       	mov    eax,0x0
c0020dca:	eb 05                	jmp    c0020dd1 <FAT::close(void*)+0x47>
c0020dcc:	b8 01 00 00 00       	mov    eax,0x1
c0020dd1:	83 c4 1c             	add    esp,0x1c
c0020dd4:	c3                   	ret    
c0020dd5:	90                   	nop

c0020dd6 <FAT::closeDir(void*)>:
c0020dd6:	83 ec 1c             	sub    esp,0x1c
c0020dd9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020dde:	75 07                	jne    c0020de7 <FAT::closeDir(void*)+0x11>
c0020de0:	b8 04 00 00 00       	mov    eax,0x4
c0020de5:	eb 36                	jmp    c0020e1d <FAT::closeDir(void*)+0x47>
c0020de7:	83 ec 0c             	sub    esp,0xc
c0020dea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dee:	e8 d8 52 fe ff       	call   c00060cb <f_closedir>
c0020df3:	83 c4 10             	add    esp,0x10
c0020df6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020dfa:	83 ec 0c             	sub    esp,0xc
c0020dfd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e01:	e8 4a ea fe ff       	call   c000f850 <free>
c0020e06:	83 c4 10             	add    esp,0x10
c0020e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e0d:	85 c0                	test   eax,eax
c0020e0f:	75 07                	jne    c0020e18 <FAT::closeDir(void*)+0x42>
c0020e11:	b8 00 00 00 00       	mov    eax,0x0
c0020e16:	eb 05                	jmp    c0020e1d <FAT::closeDir(void*)+0x47>
c0020e18:	b8 01 00 00 00       	mov    eax,0x1
c0020e1d:	83 c4 1c             	add    esp,0x1c
c0020e20:	c3                   	ret    
c0020e21:	90                   	nop

c0020e22 <FAT::seek(void*, unsigned long long)>:
c0020e22:	83 ec 2c             	sub    esp,0x2c
c0020e25:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e2d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020e31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e35:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020e3a:	75 07                	jne    c0020e43 <FAT::seek(void*, unsigned long long)+0x21>
c0020e3c:	b8 04 00 00 00       	mov    eax,0x4
c0020e41:	eb 2f                	jmp    c0020e72 <FAT::seek(void*, unsigned long long)+0x50>
c0020e43:	83 ec 04             	sub    esp,0x4
c0020e46:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e4a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e4e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020e52:	e8 bb 4c fe ff       	call   c0005b12 <f_lseek>
c0020e57:	83 c4 10             	add    esp,0x10
c0020e5a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020e62:	85 c0                	test   eax,eax
c0020e64:	75 07                	jne    c0020e6d <FAT::seek(void*, unsigned long long)+0x4b>
c0020e66:	b8 00 00 00 00       	mov    eax,0x0
c0020e6b:	eb 05                	jmp    c0020e72 <FAT::seek(void*, unsigned long long)+0x50>
c0020e6d:	b8 01 00 00 00       	mov    eax,0x1
c0020e72:	83 c4 2c             	add    esp,0x2c
c0020e75:	c3                   	ret    

c0020e76 <fatWrapperReadDisk>:
c0020e76:	83 ec 1c             	sub    esp,0x1c
c0020e79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e7d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e81:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e85:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e88:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e90:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e95:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c0020e9c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ea0:	83 ec 0c             	sub    esp,0xc
c0020ea3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ea7:	52                   	push   edx
c0020ea8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020eac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020eb0:	50                   	push   eax
c0020eb1:	e8 28 59 ff ff       	call   c00167de <LogicalDisk::read(unsigned long long, int, void*)>
c0020eb6:	83 c4 20             	add    esp,0x20
c0020eb9:	83 c4 1c             	add    esp,0x1c
c0020ebc:	c3                   	ret    

c0020ebd <fatWrapperWriteDisk>:
c0020ebd:	83 ec 1c             	sub    esp,0x1c
c0020ec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ec4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020ec8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ecc:	89 04 24             	mov    DWORD PTR [esp],eax
c0020ecf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020ed3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020ed7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020edc:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c0020ee3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ee7:	83 ec 0c             	sub    esp,0xc
c0020eea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020eee:	52                   	push   edx
c0020eef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ef3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ef7:	50                   	push   eax
c0020ef8:	e8 4d 59 ff ff       	call   c001684a <LogicalDisk::write(unsigned long long, int, void*)>
c0020efd:	83 c4 20             	add    esp,0x20
c0020f00:	83 c4 1c             	add    esp,0x1c
c0020f03:	c3                   	ret    

c0020f04 <fatWrapperIoctl>:
c0020f04:	53                   	push   ebx
c0020f05:	83 ec 28             	sub    esp,0x28
c0020f08:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020f0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020f10:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020f14:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020f18:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020f1d:	75 31                	jne    c0020f50 <fatWrapperIoctl+0x4c>
c0020f1f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f23:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020f27:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f2c:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c0020f33:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f39:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020f3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020f43:	66 89 02             	mov    WORD PTR [edx],ax
c0020f46:	b8 00 00 00 00       	mov    eax,0x0
c0020f4b:	e9 b2 00 00 00       	jmp    c0021002 <fatWrapperIoctl+0xfe>
c0020f50:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020f55:	75 6a                	jne    c0020fc1 <fatWrapperIoctl+0xbd>
c0020f57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f5f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f64:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c0020f6b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f71:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020f77:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020f7d:	89 c8                	mov    eax,ecx
c0020f7f:	89 da                	mov    edx,ebx
c0020f81:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020f85:	c1 e0 0a             	shl    eax,0xa
c0020f88:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020f8d:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0020f94:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020f9a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020fa0:	89 cb                	mov    ebx,ecx
c0020fa2:	c1 fb 1f             	sar    ebx,0x1f
c0020fa5:	53                   	push   ebx
c0020fa6:	51                   	push   ecx
c0020fa7:	52                   	push   edx
c0020fa8:	50                   	push   eax
c0020fa9:	e8 be 5a 00 00       	call   c0026a6c <__udivdi3>
c0020fae:	83 c4 10             	add    esp,0x10
c0020fb1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020fb5:	89 01                	mov    DWORD PTR [ecx],eax
c0020fb7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020fba:	b8 00 00 00 00       	mov    eax,0x0
c0020fbf:	eb 41                	jmp    c0021002 <fatWrapperIoctl+0xfe>
c0020fc1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020fc6:	75 07                	jne    c0020fcf <fatWrapperIoctl+0xcb>
c0020fc8:	b8 00 00 00 00       	mov    eax,0x0
c0020fcd:	eb 33                	jmp    c0021002 <fatWrapperIoctl+0xfe>
c0020fcf:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020fd4:	75 19                	jne    c0020fef <fatWrapperIoctl+0xeb>
c0020fd6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020fda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020fde:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020fe2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020fe8:	b8 00 00 00 00       	mov    eax,0x0
c0020fed:	eb 13                	jmp    c0021002 <fatWrapperIoctl+0xfe>
c0020fef:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020ff4:	75 07                	jne    c0020ffd <fatWrapperIoctl+0xf9>
c0020ff6:	b8 00 00 00 00       	mov    eax,0x0
c0020ffb:	eb 05                	jmp    c0021002 <fatWrapperIoctl+0xfe>
c0020ffd:	b8 04 00 00 00       	mov    eax,0x4
c0021002:	83 c4 28             	add    esp,0x28
c0021005:	5b                   	pop    ebx
c0021006:	c3                   	ret    
c0021007:	90                   	nop

c0021008 <FAT::FAT()>:
c0021008:	83 ec 1c             	sub    esp,0x1c
c002100b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002100f:	83 ec 0c             	sub    esp,0xc
c0021012:	50                   	push   eax
c0021013:	e8 ba 22 ff ff       	call   c00132d2 <Filesystem::Filesystem()>
c0021018:	83 c4 10             	add    esp,0x10
c002101b:	ba c0 ca 02 c0       	mov    edx,0xc002cac0
c0021020:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021024:	89 10                	mov    DWORD PTR [eax],edx
c0021026:	c7 05 80 1c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031c80,0x0
c0021030:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021038:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c002103d:	7f 15                	jg     c0021054 <FAT::FAT()+0x4c>
c002103f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021043:	c7 04 85 a0 1c 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce360],0xffffffff
c002104e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021052:	eb e4                	jmp    c0021038 <FAT::FAT()+0x30>
c0021054:	90                   	nop
c0021055:	83 c4 1c             	add    esp,0x1c
c0021058:	c3                   	ret    
c0021059:	90                   	nop

c002105a <FAT::fixFilepath(char*)>:
c002105a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002105e:	8a 00                	mov    al,BYTE PTR [eax]
c0021060:	3c 40                	cmp    al,0x40
c0021062:	7e 2c                	jle    c0021090 <FAT::fixFilepath(char*)+0x36>
c0021064:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021068:	8a 00                	mov    al,BYTE PTR [eax]
c002106a:	83 e8 41             	sub    eax,0x41
c002106d:	88 c2                	mov    dl,al
c002106f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021073:	88 10                	mov    BYTE PTR [eax],dl
c0021075:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021079:	8a 00                	mov    al,BYTE PTR [eax]
c002107b:	0f be c0             	movsx  eax,al
c002107e:	8b 04 85 a0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce360]
c0021085:	83 c0 30             	add    eax,0x30
c0021088:	88 c2                	mov    dl,al
c002108a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002108e:	88 10                	mov    BYTE PTR [eax],dl
c0021090:	90                   	nop
c0021091:	c3                   	ret    

c0021092 <FAT::open(char const*, void**, FileOpenMode)>:
c0021092:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021098:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00210a0:	74 0a                	je     c00210ac <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00210a2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00210aa:	75 0a                	jne    c00210b6 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00210ac:	b8 04 00 00 00       	mov    eax,0x4
c00210b1:	e9 fd 00 00 00       	jmp    c00211b3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00210b6:	83 ec 08             	sub    esp,0x8
c00210b9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210c0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00210c4:	50                   	push   eax
c00210c5:	e8 6a f7 fd ff       	call   c0000834 <strcpy>
c00210ca:	83 c4 10             	add    esp,0x10
c00210cd:	83 ec 08             	sub    esp,0x8
c00210d0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00210d4:	50                   	push   eax
c00210d5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210dc:	e8 79 ff ff ff       	call   c002105a <FAT::fixFilepath(char*)>
c00210e1:	83 c4 10             	add    esp,0x10
c00210e4:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00210ec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210f3:	83 e0 01             	and    eax,0x1
c00210f6:	74 08                	je     c0021100 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00210f8:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021100:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021107:	83 e0 04             	and    eax,0x4
c002110a:	74 10                	je     c002111c <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002110c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021114:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002111c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021123:	83 e0 02             	and    eax,0x2
c0021126:	74 08                	je     c0021130 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021128:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021130:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021137:	83 e0 08             	and    eax,0x8
c002113a:	74 08                	je     c0021144 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002113c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021144:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002114b:	83 e0 10             	and    eax,0x10
c002114e:	74 08                	je     c0021158 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021150:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021158:	83 ec 0c             	sub    esp,0xc
c002115b:	68 50 02 00 00       	push   0x250
c0021160:	e8 db e6 fe ff       	call   c000f840 <malloc>
c0021165:	83 c4 10             	add    esp,0x10
c0021168:	89 c2                	mov    edx,eax
c002116a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021171:	89 10                	mov    DWORD PTR [eax],edx
c0021173:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002117b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021182:	8b 00                	mov    eax,DWORD PTR [eax]
c0021184:	83 ec 04             	sub    esp,0x4
c0021187:	52                   	push   edx
c0021188:	8d 54 24 10          	lea    edx,[esp+0x10]
c002118c:	52                   	push   edx
c002118d:	50                   	push   eax
c002118e:	e8 fe 3d fe ff       	call   c0004f91 <f_open>
c0021193:	83 c4 10             	add    esp,0x10
c0021196:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002119d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00211a5:	74 07                	je     c00211ae <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00211a7:	b8 01 00 00 00       	mov    eax,0x1
c00211ac:	eb 05                	jmp    c00211b3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00211ae:	b8 00 00 00 00       	mov    eax,0x0
c00211b3:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211b9:	c3                   	ret    

c00211ba <FAT::openDir(char const*, void**)>:
c00211ba:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00211c0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00211c8:	74 0a                	je     c00211d4 <FAT::openDir(char const*, void**)+0x1a>
c00211ca:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00211d2:	75 07                	jne    c00211db <FAT::openDir(char const*, void**)+0x21>
c00211d4:	b8 04 00 00 00       	mov    eax,0x4
c00211d9:	eb 7d                	jmp    c0021258 <FAT::openDir(char const*, void**)+0x9e>
c00211db:	83 ec 08             	sub    esp,0x8
c00211de:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00211e9:	50                   	push   eax
c00211ea:	e8 45 f6 fd ff       	call   c0000834 <strcpy>
c00211ef:	83 c4 10             	add    esp,0x10
c00211f2:	83 ec 08             	sub    esp,0x8
c00211f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00211f9:	50                   	push   eax
c00211fa:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021201:	e8 54 fe ff ff       	call   c002105a <FAT::fixFilepath(char*)>
c0021206:	83 c4 10             	add    esp,0x10
c0021209:	83 ec 0c             	sub    esp,0xc
c002120c:	6a 4c                	push   0x4c
c002120e:	e8 2d e6 fe ff       	call   c000f840 <malloc>
c0021213:	83 c4 10             	add    esp,0x10
c0021216:	89 c2                	mov    edx,eax
c0021218:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002121f:	89 10                	mov    DWORD PTR [eax],edx
c0021221:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021228:	8b 00                	mov    eax,DWORD PTR [eax]
c002122a:	83 ec 08             	sub    esp,0x8
c002122d:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021231:	52                   	push   edx
c0021232:	50                   	push   eax
c0021233:	e8 91 4d fe ff       	call   c0005fc9 <f_opendir>
c0021238:	83 c4 10             	add    esp,0x10
c002123b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021242:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002124a:	74 07                	je     c0021253 <FAT::openDir(char const*, void**)+0x99>
c002124c:	b8 01 00 00 00       	mov    eax,0x1
c0021251:	eb 05                	jmp    c0021258 <FAT::openDir(char const*, void**)+0x9e>
c0021253:	b8 00 00 00 00       	mov    eax,0x0
c0021258:	81 c4 1c 01 00 00    	add    esp,0x11c
c002125e:	c3                   	ret    
c002125f:	90                   	nop

c0021260 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021260:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021266:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002126e:	75 0a                	jne    c002127a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021270:	b8 04 00 00 00       	mov    eax,0x4
c0021275:	e9 c9 00 00 00       	jmp    c0021343 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002127a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021282:	75 0a                	jne    c002128e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021284:	b8 04 00 00 00       	mov    eax,0x4
c0021289:	e9 b5 00 00 00       	jmp    c0021343 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002128e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021296:	75 0a                	jne    c00212a2 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021298:	b8 04 00 00 00       	mov    eax,0x4
c002129d:	e9 a1 00 00 00       	jmp    c0021343 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212a2:	83 ec 08             	sub    esp,0x8
c00212a5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00212ac:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00212b3:	50                   	push   eax
c00212b4:	e8 7b f5 fd ff       	call   c0000834 <strcpy>
c00212b9:	83 c4 10             	add    esp,0x10
c00212bc:	83 ec 08             	sub    esp,0x8
c00212bf:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00212c6:	50                   	push   eax
c00212c7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00212ce:	e8 87 fd ff ff       	call   c002105a <FAT::fixFilepath(char*)>
c00212d3:	83 c4 10             	add    esp,0x10
c00212d6:	83 ec 08             	sub    esp,0x8
c00212d9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00212dd:	50                   	push   eax
c00212de:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00212e5:	50                   	push   eax
c00212e6:	e8 9d 4e fe ff       	call   c0006188 <f_stat>
c00212eb:	83 c4 10             	add    esp,0x10
c00212ee:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00212f5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00212fc:	85 c0                	test   eax,eax
c00212fe:	74 07                	je     c0021307 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021300:	83 f8 04             	cmp    eax,0x4
c0021303:	74 32                	je     c0021337 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021305:	eb 37                	jmp    c002133e <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021307:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002130b:	0f b6 c0             	movzx  eax,al
c002130e:	83 e0 10             	and    eax,0x10
c0021311:	0f 95 c2             	setne  dl
c0021314:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002131b:	88 10                	mov    BYTE PTR [eax],dl
c002131d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021320:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021324:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002132b:	89 01                	mov    DWORD PTR [ecx],eax
c002132d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021330:	b8 00 00 00 00       	mov    eax,0x0
c0021335:	eb 0c                	jmp    c0021343 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021337:	b8 02 00 00 00       	mov    eax,0x2
c002133c:	eb 05                	jmp    c0021343 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002133e:	b8 01 00 00 00       	mov    eax,0x1
c0021343:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021349:	c3                   	ret    

c002134a <FAT::unlink(char const*)>:
c002134a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021350:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021358:	75 07                	jne    c0021361 <FAT::unlink(char const*)+0x17>
c002135a:	b8 04 00 00 00       	mov    eax,0x4
c002135f:	eb 5c                	jmp    c00213bd <FAT::unlink(char const*)+0x73>
c0021361:	83 ec 08             	sub    esp,0x8
c0021364:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002136b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002136f:	50                   	push   eax
c0021370:	e8 bf f4 fd ff       	call   c0000834 <strcpy>
c0021375:	83 c4 10             	add    esp,0x10
c0021378:	83 ec 08             	sub    esp,0x8
c002137b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002137f:	50                   	push   eax
c0021380:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021387:	e8 ce fc ff ff       	call   c002105a <FAT::fixFilepath(char*)>
c002138c:	83 c4 10             	add    esp,0x10
c002138f:	83 ec 0c             	sub    esp,0xc
c0021392:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021396:	50                   	push   eax
c0021397:	e8 3e 51 fe ff       	call   c00064da <f_unlink>
c002139c:	83 c4 10             	add    esp,0x10
c002139f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00213a6:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00213ad:	85 c0                	test   eax,eax
c00213af:	75 07                	jne    c00213b8 <FAT::unlink(char const*)+0x6e>
c00213b1:	b8 00 00 00 00       	mov    eax,0x0
c00213b6:	eb 05                	jmp    c00213bd <FAT::unlink(char const*)+0x73>
c00213b8:	b8 01 00 00 00       	mov    eax,0x1
c00213bd:	81 c4 1c 01 00 00    	add    esp,0x11c
c00213c3:	c3                   	ret    

c00213c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00213c4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00213ca:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00213d1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00213d8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00213dc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00213e0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00213e8:	75 0a                	jne    c00213f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00213ea:	b8 04 00 00 00       	mov    eax,0x4
c00213ef:	e9 1c 01 00 00       	jmp    c0021510 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00213f4:	83 ec 08             	sub    esp,0x8
c00213f7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00213fe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021402:	50                   	push   eax
c0021403:	e8 2c f4 fd ff       	call   c0000834 <strcpy>
c0021408:	83 c4 10             	add    esp,0x10
c002140b:	83 ec 08             	sub    esp,0x8
c002140e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021412:	50                   	push   eax
c0021413:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002141a:	e8 3b fc ff ff       	call   c002105a <FAT::fixFilepath(char*)>
c002141f:	83 c4 10             	add    esp,0x10
c0021422:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002142a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021432:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021437:	83 e0 01             	and    eax,0x1
c002143a:	74 08                	je     c0021444 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002143c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021444:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021449:	83 e0 02             	and    eax,0x2
c002144c:	74 08                	je     c0021456 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c002144e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021456:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002145b:	83 e0 04             	and    eax,0x4
c002145e:	74 08                	je     c0021468 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021460:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021468:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002146d:	83 e0 08             	and    eax,0x8
c0021470:	74 08                	je     c002147a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021472:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002147a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002147f:	83 e0 01             	and    eax,0x1
c0021482:	74 08                	je     c002148c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021484:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002148c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021491:	83 e0 02             	and    eax,0x2
c0021494:	74 08                	je     c002149e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021496:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002149e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214a3:	83 e0 04             	and    eax,0x4
c00214a6:	74 08                	je     c00214b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00214a8:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00214b0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214b5:	83 e0 08             	and    eax,0x8
c00214b8:	74 08                	je     c00214c2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00214ba:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00214c2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00214c9:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00214d0:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00214d8:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00214e0:	83 ec 04             	sub    esp,0x4
c00214e3:	52                   	push   edx
c00214e4:	50                   	push   eax
c00214e5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00214e9:	50                   	push   eax
c00214ea:	e8 8d 56 fe ff       	call   c0006b7c <f_chmod>
c00214ef:	83 c4 10             	add    esp,0x10
c00214f2:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00214f9:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021500:	85 c0                	test   eax,eax
c0021502:	75 07                	jne    c002150b <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021504:	b8 00 00 00 00       	mov    eax,0x0
c0021509:	eb 05                	jmp    c0021510 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002150b:	b8 01 00 00 00       	mov    eax,0x1
c0021510:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021516:	c3                   	ret    
c0021517:	90                   	nop

c0021518 <FAT::rename(char const*, char const*)>:
c0021518:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002151e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021526:	74 0a                	je     c0021532 <FAT::rename(char const*, char const*)+0x1a>
c0021528:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021530:	75 0a                	jne    c002153c <FAT::rename(char const*, char const*)+0x24>
c0021532:	b8 04 00 00 00       	mov    eax,0x4
c0021537:	e9 98 00 00 00       	jmp    c00215d4 <FAT::rename(char const*, char const*)+0xbc>
c002153c:	83 ec 08             	sub    esp,0x8
c002153f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021546:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002154d:	50                   	push   eax
c002154e:	e8 e1 f2 fd ff       	call   c0000834 <strcpy>
c0021553:	83 c4 10             	add    esp,0x10
c0021556:	83 ec 08             	sub    esp,0x8
c0021559:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021560:	50                   	push   eax
c0021561:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021568:	e8 ed fa ff ff       	call   c002105a <FAT::fixFilepath(char*)>
c002156d:	83 c4 10             	add    esp,0x10
c0021570:	83 ec 08             	sub    esp,0x8
c0021573:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002157a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002157e:	50                   	push   eax
c002157f:	e8 b0 f2 fd ff       	call   c0000834 <strcpy>
c0021584:	83 c4 10             	add    esp,0x10
c0021587:	83 ec 08             	sub    esp,0x8
c002158a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002158e:	50                   	push   eax
c002158f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021596:	e8 bf fa ff ff       	call   c002105a <FAT::fixFilepath(char*)>
c002159b:	83 c4 10             	add    esp,0x10
c002159e:	83 ec 08             	sub    esp,0x8
c00215a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215a5:	50                   	push   eax
c00215a6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00215ad:	50                   	push   eax
c00215ae:	e8 d6 52 fe ff       	call   c0006889 <f_rename>
c00215b3:	83 c4 10             	add    esp,0x10
c00215b6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00215bd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00215c4:	85 c0                	test   eax,eax
c00215c6:	75 07                	jne    c00215cf <FAT::rename(char const*, char const*)+0xb7>
c00215c8:	b8 00 00 00 00       	mov    eax,0x0
c00215cd:	eb 05                	jmp    c00215d4 <FAT::rename(char const*, char const*)+0xbc>
c00215cf:	b8 01 00 00 00       	mov    eax,0x1
c00215d4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00215da:	c3                   	ret    
c00215db:	90                   	nop

c00215dc <FAT::mkdir(char const*)>:
c00215dc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00215e2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00215ea:	75 07                	jne    c00215f3 <FAT::mkdir(char const*)+0x17>
c00215ec:	b8 04 00 00 00       	mov    eax,0x4
c00215f1:	eb 5c                	jmp    c002164f <FAT::mkdir(char const*)+0x73>
c00215f3:	83 ec 08             	sub    esp,0x8
c00215f6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215fd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021601:	50                   	push   eax
c0021602:	e8 2d f2 fd ff       	call   c0000834 <strcpy>
c0021607:	83 c4 10             	add    esp,0x10
c002160a:	83 ec 08             	sub    esp,0x8
c002160d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021611:	50                   	push   eax
c0021612:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021619:	e8 3c fa ff ff       	call   c002105a <FAT::fixFilepath(char*)>
c002161e:	83 c4 10             	add    esp,0x10
c0021621:	83 ec 0c             	sub    esp,0xc
c0021624:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021628:	50                   	push   eax
c0021629:	e8 2f 50 fe ff       	call   c000665d <f_mkdir>
c002162e:	83 c4 10             	add    esp,0x10
c0021631:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021638:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002163f:	85 c0                	test   eax,eax
c0021641:	75 07                	jne    c002164a <FAT::mkdir(char const*)+0x6e>
c0021643:	b8 00 00 00 00       	mov    eax,0x0
c0021648:	eb 05                	jmp    c002164f <FAT::mkdir(char const*)+0x73>
c002164a:	b8 01 00 00 00       	mov    eax,0x1
c002164f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021655:	c3                   	ret    

c0021656 <FAT::exists(char const*)>:
c0021656:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002165c:	83 ec 08             	sub    esp,0x8
c002165f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021666:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002166a:	50                   	push   eax
c002166b:	e8 c4 f1 fd ff       	call   c0000834 <strcpy>
c0021670:	83 c4 10             	add    esp,0x10
c0021673:	83 ec 08             	sub    esp,0x8
c0021676:	8d 44 24 08          	lea    eax,[esp+0x8]
c002167a:	50                   	push   eax
c002167b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021682:	e8 d3 f9 ff ff       	call   c002105a <FAT::fixFilepath(char*)>
c0021687:	83 c4 10             	add    esp,0x10
c002168a:	83 ec 08             	sub    esp,0x8
c002168d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021694:	50                   	push   eax
c0021695:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021699:	50                   	push   eax
c002169a:	e8 e9 4a fe ff       	call   c0006188 <f_stat>
c002169f:	83 c4 10             	add    esp,0x10
c00216a2:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00216a9:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00216b0:	85 c0                	test   eax,eax
c00216b2:	75 04                	jne    c00216b8 <FAT::exists(char const*)+0x62>
c00216b4:	b0 01                	mov    al,0x1
c00216b6:	eb 02                	jmp    c00216ba <FAT::exists(char const*)+0x64>
c00216b8:	b0 00                	mov    al,0x0
c00216ba:	81 c4 2c 02 00 00    	add    esp,0x22c
c00216c0:	c3                   	ret    
c00216c1:	90                   	nop

c00216c2 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00216c2:	b8 08 00 00 00       	mov    eax,0x8
c00216c7:	c3                   	ret    

c00216c8 <ISO9660::seek(void*, unsigned long long)>:
c00216c8:	53                   	push   ebx
c00216c9:	b8 04 00 00 00       	mov    eax,0x4
c00216ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00216d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00216d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00216da:	85 d2                	test   edx,edx
c00216dc:	74 17                	je     c00216f5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00216de:	89 c8                	mov    eax,ecx
c00216e0:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00216e3:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00216e6:	b8 01 00 00 00       	mov    eax,0x1
c00216eb:	73 08                	jae    c00216f5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00216ed:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00216f0:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00216f3:	31 c0                	xor    eax,eax
c00216f5:	5b                   	pop    ebx
c00216f6:	c3                   	ret    
c00216f7:	90                   	nop

c00216f8 <ISO9660::tell(void*, unsigned long long*)>:
c00216f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00216fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021700:	85 d2                	test   edx,edx
c0021702:	74 12                	je     c0021716 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021704:	85 c0                	test   eax,eax
c0021706:	74 0e                	je     c0021716 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021708:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002170b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002170e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021711:	89 10                	mov    DWORD PTR [eax],edx
c0021713:	31 c0                	xor    eax,eax
c0021715:	c3                   	ret    
c0021716:	b8 04 00 00 00       	mov    eax,0x4
c002171b:	c3                   	ret    

c002171c <ISO9660::getName()>:
c002171c:	b8 1c cb 02 c0       	mov    eax,0xc002cb1c
c0021721:	c3                   	ret    

c0021722 <ISO9660::stat(void*, unsigned long long*)>:
c0021722:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021726:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002172a:	85 d2                	test   edx,edx
c002172c:	74 12                	je     c0021740 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002172e:	85 c0                	test   eax,eax
c0021730:	74 0e                	je     c0021740 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021732:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021735:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021738:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002173b:	89 10                	mov    DWORD PTR [eax],edx
c002173d:	31 c0                	xor    eax,eax
c002173f:	c3                   	ret    
c0021740:	b8 04 00 00 00       	mov    eax,0x4
c0021745:	c3                   	ret    

c0021746 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021746:	b8 01 00 00 00       	mov    eax,0x1
c002174b:	c3                   	ret    

c002174c <ISO9660::unlink(char const*)>:
c002174c:	b8 01 00 00 00       	mov    eax,0x1
c0021751:	c3                   	ret    

c0021752 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021752:	b8 01 00 00 00       	mov    eax,0x1
c0021757:	c3                   	ret    

c0021758 <ISO9660::rename(char const*, char const*)>:
c0021758:	b8 01 00 00 00       	mov    eax,0x1
c002175d:	c3                   	ret    

c002175e <ISO9660::mkdir(char const*)>:
c002175e:	b8 01 00 00 00       	mov    eax,0x1
c0021763:	c3                   	ret    

c0021764 <ISO9660::close(void*)>:
c0021764:	83 ec 0c             	sub    esp,0xc
c0021767:	b8 04 00 00 00       	mov    eax,0x4
c002176c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021770:	85 d2                	test   edx,edx
c0021772:	74 0e                	je     c0021782 <ISO9660::close(void*)+0x1e>
c0021774:	83 ec 0c             	sub    esp,0xc
c0021777:	52                   	push   edx
c0021778:	e8 d3 e0 fe ff       	call   c000f850 <free>
c002177d:	83 c4 10             	add    esp,0x10
c0021780:	31 c0                	xor    eax,eax
c0021782:	83 c4 0c             	add    esp,0xc
c0021785:	c3                   	ret    

c0021786 <ISO9660::closeDir(void*)>:
c0021786:	83 ec 0c             	sub    esp,0xc
c0021789:	b8 04 00 00 00       	mov    eax,0x4
c002178e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021792:	85 d2                	test   edx,edx
c0021794:	74 0e                	je     c00217a4 <ISO9660::closeDir(void*)+0x1e>
c0021796:	83 ec 0c             	sub    esp,0xc
c0021799:	52                   	push   edx
c002179a:	e8 b1 e0 fe ff       	call   c000f850 <free>
c002179f:	83 c4 10             	add    esp,0x10
c00217a2:	31 c0                	xor    eax,eax
c00217a4:	83 c4 0c             	add    esp,0xc
c00217a7:	c3                   	ret    

c00217a8 <ISO9660::~ISO9660()>:
c00217a8:	83 ec 0c             	sub    esp,0xc
c00217ab:	ba 80 cb 02 c0       	mov    edx,0xc002cb80
c00217b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217b4:	89 10                	mov    DWORD PTR [eax],edx
c00217b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217ba:	83 ec 0c             	sub    esp,0xc
c00217bd:	50                   	push   eax
c00217be:	e8 33 1b ff ff       	call   c00132f6 <Filesystem::~Filesystem()>
c00217c3:	83 c4 10             	add    esp,0x10
c00217c6:	90                   	nop
c00217c7:	83 c4 0c             	add    esp,0xc
c00217ca:	c3                   	ret    
c00217cb:	90                   	nop

c00217cc <ISO9660::~ISO9660()>:
c00217cc:	83 ec 0c             	sub    esp,0xc
c00217cf:	83 ec 0c             	sub    esp,0xc
c00217d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217d6:	e8 cd ff ff ff       	call   c00217a8 <ISO9660::~ISO9660()>
c00217db:	83 c4 10             	add    esp,0x10
c00217de:	83 ec 08             	sub    esp,0x8
c00217e1:	6a 08                	push   0x8
c00217e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217e7:	e8 01 17 ff ff       	call   c0012eed <operator delete(void*, unsigned long)>
c00217ec:	83 c4 10             	add    esp,0x10
c00217ef:	83 c4 0c             	add    esp,0xc
c00217f2:	c3                   	ret    

c00217f3 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00217f3:	55                   	push   ebp
c00217f4:	31 c9                	xor    ecx,ecx
c00217f6:	57                   	push   edi
c00217f7:	56                   	push   esi
c00217f8:	53                   	push   ebx
c00217f9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00217fd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021801:	89 eb                	mov    ebx,ebp
c0021803:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021807:	39 ce                	cmp    esi,ecx
c0021809:	7e 17                	jle    c0021822 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002180b:	31 d2                	xor    edx,edx
c002180d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021811:	7d 13                	jge    c0021826 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021813:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021817:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002181a:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002181d:	75 0d                	jne    c002182c <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002181f:	42                   	inc    edx
c0021820:	eb eb                	jmp    c002180d <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021822:	31 c0                	xor    eax,eax
c0021824:	eb 0a                	jmp    c0021830 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021826:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002182a:	eb 04                	jmp    c0021830 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002182c:	41                   	inc    ecx
c002182d:	43                   	inc    ebx
c002182e:	eb d7                	jmp    c0021807 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021830:	5b                   	pop    ebx
c0021831:	5e                   	pop    esi
c0021832:	5f                   	pop    edi
c0021833:	5d                   	pop    ebp
c0021834:	c3                   	ret    

c0021835 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021835:	56                   	push   esi
c0021836:	53                   	push   ebx
c0021837:	52                   	push   edx
c0021838:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002183c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021840:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021844:	39 0d 80 1d 03 c0    	cmp    DWORD PTR ds:0xc0031d80,ecx
c002184a:	75 08                	jne    c0021854 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c002184c:	38 05 d4 db 02 c0    	cmp    BYTE PTR ds:0xc002dbd4,al
c0021852:	74 2b                	je     c002187f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021854:	83 ec 0c             	sub    esp,0xc
c0021857:	a2 d4 db 02 c0       	mov    ds:0xc002dbd4,al
c002185c:	68 a0 1d 03 c0       	push   0xc0031da0
c0021861:	0f be c0             	movsx  eax,al
c0021864:	6a 01                	push   0x1
c0021866:	89 0d 80 1d 03 c0    	mov    DWORD PTR ds:0xc0031d80,ecx
c002186c:	31 db                	xor    ebx,ebx
c002186e:	53                   	push   ebx
c002186f:	51                   	push   ecx
c0021870:	ff 34 85 5c eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd14a4]
c0021877:	e8 62 4f ff ff       	call   c00167de <LogicalDisk::read(unsigned long long, int, void*)>
c002187c:	83 c4 20             	add    esp,0x20
c002187f:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021887:	c7 44 24 14 a0 1d 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031da0
c002188f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021893:	58                   	pop    eax
c0021894:	5b                   	pop    ebx
c0021895:	5e                   	pop    esi
c0021896:	e9 a9 ee fd ff       	jmp    c0000744 <memcpy>
c002189b:	90                   	nop

c002189c <ISO9660::tryMount(LogicalDisk*, int)>:
c002189c:	81 ec 10 08 00 00    	sub    esp,0x810
c00218a2:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00218a9:	83 c0 41             	add    eax,0x41
c00218ac:	0f be c0             	movsx  eax,al
c00218af:	50                   	push   eax
c00218b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00218b4:	50                   	push   eax
c00218b5:	6a 10                	push   0x10
c00218b7:	e8 79 ff ff ff       	call   c0021835 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218bc:	83 c4 10             	add    esp,0x10
c00218bf:	31 c0                	xor    eax,eax
c00218c1:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00218c6:	75 1d                	jne    c00218e5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218c8:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00218cd:	75 16                	jne    c00218e5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218cf:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00218d4:	75 0f                	jne    c00218e5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218d6:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00218db:	75 08                	jne    c00218e5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218dd:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00218e2:	0f 94 c0             	sete   al
c00218e5:	81 c4 0c 08 00 00    	add    esp,0x80c
c00218eb:	c3                   	ret    

c00218ec <ISO9660::read(void*, unsigned long, void*, int*)>:
c00218ec:	55                   	push   ebp
c00218ed:	57                   	push   edi
c00218ee:	56                   	push   esi
c00218ef:	53                   	push   ebx
c00218f0:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00218f6:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00218fd:	85 ed                	test   ebp,ebp
c00218ff:	0f 84 d6 01 00 00    	je     c0021adb <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021905:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002190d:	0f 84 c8 01 00 00    	je     c0021adb <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021913:	b8 01 00 00 00       	mov    eax,0x1
c0021918:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002191c:	0f 85 be 01 00 00    	jne    c0021ae0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021922:	31 d2                	xor    edx,edx
c0021924:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002192b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002192e:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021931:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021935:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021938:	89 04 24             	mov    DWORD PTR [esp],eax
c002193b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002193f:	01 f0                	add    eax,esi
c0021941:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021944:	11 fa                	adc    edx,edi
c0021946:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002194a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002194e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021952:	19 d1                	sbb    ecx,edx
c0021954:	72 0a                	jb     c0021960 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021956:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002195a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002195e:	eb 13                	jmp    c0021973 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021960:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021964:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021968:	29 f0                	sub    eax,esi
c002196a:	19 fa                	sbb    edx,edi
c002196c:	89 04 24             	mov    DWORD PTR [esp],eax
c002196f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021973:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021976:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021979:	0f a4 c2 0b          	shld   edx,eax,0xb
c002197d:	51                   	push   ecx
c002197e:	c1 e0 0b             	shl    eax,0xb
c0021981:	01 c6                	add    esi,eax
c0021983:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021987:	11 d7                	adc    edi,edx
c0021989:	50                   	push   eax
c002198a:	89 fa                	mov    edx,edi
c002198c:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021990:	89 f0                	mov    eax,esi
c0021992:	53                   	push   ebx
c0021993:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021997:	50                   	push   eax
c0021998:	e8 98 fe ff ff       	call   c0021835 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002199d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219a1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00219a4:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00219a8:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00219ae:	83 c4 10             	add    esp,0x10
c00219b1:	b8 00 08 00 00       	mov    eax,0x800
c00219b6:	29 d0                	sub    eax,edx
c00219b8:	39 c1                	cmp    ecx,eax
c00219ba:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00219be:	83 d9 00             	sbb    ecx,0x0
c00219c1:	7d 1c                	jge    c00219df <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00219c3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00219c8:	75 12                	jne    c00219dc <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00219ca:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00219d1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00219d7:	e9 fb 00 00 00       	jmp    c0021ad7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c00219dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00219df:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c00219e2:	31 d2                	xor    edx,edx
c00219e4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00219e8:	39 c2                	cmp    edx,eax
c00219ea:	7d 14                	jge    c0021a00 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c00219ec:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00219f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219f7:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00219fa:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00219fd:	42                   	inc    edx
c00219fe:	eb e8                	jmp    c00219e8 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021a00:	89 c3                	mov    ebx,eax
c0021a02:	85 c0                	test   eax,eax
c0021a04:	79 02                	jns    c0021a08 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021a06:	31 db                	xor    ebx,ebx
c0021a08:	99                   	cdq    
c0021a09:	01 c3                	add    ebx,eax
c0021a0b:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021a12:	01 c6                	add    esi,eax
c0021a14:	11 d7                	adc    edi,edx
c0021a16:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021a1a:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021a1e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021a21:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021a25:	29 c6                	sub    esi,eax
c0021a27:	19 d7                	sbb    edi,edx
c0021a29:	89 34 24             	mov    DWORD PTR [esp],esi
c0021a2c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021a30:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021a35:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021a38:	b8 00 00 00 00       	mov    eax,0x0
c0021a3d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021a41:	7d 3e                	jge    c0021a81 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021a43:	52                   	push   edx
c0021a44:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a48:	50                   	push   eax
c0021a49:	53                   	push   ebx
c0021a4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021a4e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021a52:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021a56:	50                   	push   eax
c0021a57:	e8 d9 fd ff ff       	call   c0021835 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a5c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021a64:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021a69:	81 c3 00 08 00 00    	add    ebx,0x800
c0021a6f:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021a77:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021a7c:	83 c4 10             	add    esp,0x10
c0021a7f:	eb af                	jmp    c0021a30 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021a81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a85:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021a88:	74 32                	je     c0021abc <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021a8a:	50                   	push   eax
c0021a8b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a8f:	50                   	push   eax
c0021a90:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a94:	50                   	push   eax
c0021a95:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021a99:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021a9d:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021aa1:	56                   	push   esi
c0021aa2:	e8 8e fd ff ff       	call   c0021835 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021aa7:	83 c4 0c             	add    esp,0xc
c0021aaa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021aae:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021ab2:	50                   	push   eax
c0021ab3:	53                   	push   ebx
c0021ab4:	e8 8b ec fd ff       	call   c0000744 <memcpy>
c0021ab9:	83 c4 10             	add    esp,0x10
c0021abc:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021ac3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021ac7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021acb:	89 38                	mov    DWORD PTR [eax],edi
c0021acd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ad1:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021ad4:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021ad7:	31 c0                	xor    eax,eax
c0021ad9:	eb 05                	jmp    c0021ae0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021adb:	b8 04 00 00 00       	mov    eax,0x4
c0021ae0:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021ae6:	5b                   	pop    ebx
c0021ae7:	5e                   	pop    esi
c0021ae8:	5f                   	pop    edi
c0021ae9:	5d                   	pop    ebp
c0021aea:	c3                   	ret    
c0021aeb:	90                   	nop

c0021aec <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021aec:	55                   	push   ebp
c0021aed:	57                   	push   edi
c0021aee:	56                   	push   esi
c0021aef:	53                   	push   ebx
c0021af0:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021af6:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021afd:	85 f6                	test   esi,esi
c0021aff:	0f 84 64 02 00 00    	je     c0021d69 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021b05:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021b0d:	0f 84 56 02 00 00    	je     c0021d69 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021b13:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021b16:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021b19:	75 0a                	jne    c0021b25 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021b1b:	b8 07 00 00 00       	mov    eax,0x7
c0021b20:	e9 49 02 00 00       	jmp    c0021d6e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021b25:	50                   	push   eax
c0021b26:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b2a:	50                   	push   eax
c0021b2b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b32:	53                   	push   ebx
c0021b33:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b35:	c1 e0 0b             	shl    eax,0xb
c0021b38:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021b3b:	c1 e8 0b             	shr    eax,0xb
c0021b3e:	50                   	push   eax
c0021b3f:	e8 f1 fc ff ff       	call   c0021835 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b44:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b47:	83 c4 10             	add    esp,0x10
c0021b4a:	89 c1                	mov    ecx,eax
c0021b4c:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021b4f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021b55:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021b58:	84 db                	test   bl,bl
c0021b5a:	0f 85 90 00 00 00    	jne    c0021bf0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021b60:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021b66:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b6c:	29 c7                	sub    edi,eax
c0021b6e:	89 fb                	mov    ebx,edi
c0021b70:	c1 fb 1f             	sar    ebx,0x1f
c0021b73:	01 f8                	add    eax,edi
c0021b75:	11 da                	adc    edx,ebx
c0021b77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b7f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021b82:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021b85:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021b88:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021b8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b8e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b92:	89 d8                	mov    eax,ebx
c0021b94:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021b97:	ba 00 00 00 00       	mov    edx,0x0
c0021b9c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021ba0:	b8 00 00 00 00       	mov    eax,0x0
c0021ba5:	73 0b                	jae    c0021bb2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021ba7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021baa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021bae:	29 f8                	sub    eax,edi
c0021bb0:	19 da                	sbb    edx,ebx
c0021bb2:	89 d3                	mov    ebx,edx
c0021bb4:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021bb7:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021bba:	09 c3                	or     ebx,eax
c0021bbc:	0f 84 59 ff ff ff    	je     c0021b1b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021bc2:	55                   	push   ebp
c0021bc3:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021bc7:	50                   	push   eax
c0021bc8:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021bcf:	53                   	push   ebx
c0021bd0:	8b 06                	mov    eax,DWORD PTR [esi]
c0021bd2:	c1 e0 0b             	shl    eax,0xb
c0021bd5:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021bd9:	c1 e8 0b             	shr    eax,0xb
c0021bdc:	50                   	push   eax
c0021bdd:	e8 53 fc ff ff       	call   c0021835 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021be2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021be5:	83 c4 10             	add    esp,0x10
c0021be8:	25 ff 07 00 00       	and    eax,0x7ff
c0021bed:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021bf0:	57                   	push   edi
c0021bf1:	6a 28                	push   0x28
c0021bf3:	6a 00                	push   0x0
c0021bf5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021bf9:	50                   	push   eax
c0021bfa:	e8 79 eb fd ff       	call   c0000778 <memset>
c0021bff:	31 d2                	xor    edx,edx
c0021c01:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021c04:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021c0a:	89 f8                	mov    eax,edi
c0021c0c:	83 c0 21             	add    eax,0x21
c0021c0f:	83 d2 00             	adc    edx,0x0
c0021c12:	89 c7                	mov    edi,eax
c0021c14:	89 d5                	mov    ebp,edx
c0021c16:	83 c4 10             	add    esp,0x10
c0021c19:	31 c9                	xor    ecx,ecx
c0021c1b:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021c22:	83 f9 28             	cmp    ecx,0x28
c0021c25:	88 04 24             	mov    BYTE PTR [esp],al
c0021c28:	0f 94 c2             	sete   dl
c0021c2b:	88 d0                	mov    al,dl
c0021c2d:	ba ff 07 00 00       	mov    edx,0x7ff
c0021c32:	39 fa                	cmp    edx,edi
c0021c34:	ba 00 00 00 00       	mov    edx,0x0
c0021c39:	19 ea                	sbb    edx,ebp
c0021c3b:	0f 92 c2             	setb   dl
c0021c3e:	09 c2                	or     edx,eax
c0021c40:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021c44:	0f 94 c0             	sete   al
c0021c47:	08 d0                	or     al,dl
c0021c49:	75 16                	jne    c0021c61 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c4b:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021c4f:	74 10                	je     c0021c61 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c51:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021c54:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021c58:	41                   	inc    ecx
c0021c59:	83 c7 01             	add    edi,0x1
c0021c5c:	83 d5 00             	adc    ebp,0x0
c0021c5f:	eb ba                	jmp    c0021c1b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021c61:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021c68:	83 ec 0c             	sub    esp,0xc
c0021c6b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021c6f:	57                   	push   edi
c0021c70:	e8 1f eb fd ff       	call   c0000794 <strlen>
c0021c75:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021c7d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c81:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021c88:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021c8b:	5a                   	pop    edx
c0021c8c:	25 ff 07 00 00       	and    eax,0x7ff
c0021c91:	01 c8                	add    eax,ecx
c0021c93:	59                   	pop    ecx
c0021c94:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021c9a:	83 e0 02             	and    eax,0x2
c0021c9d:	3c 01                	cmp    al,0x1
c0021c9f:	19 c0                	sbb    eax,eax
c0021ca1:	83 c0 02             	add    eax,0x2
c0021ca4:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021ca8:	57                   	push   edi
c0021ca9:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021cad:	50                   	push   eax
c0021cae:	e8 81 eb fd ff       	call   c0000834 <strcpy>
c0021cb3:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021cb7:	83 c4 10             	add    esp,0x10
c0021cba:	84 c0                	test   al,al
c0021cbc:	75 21                	jne    c0021cdf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021cbe:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021cc6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021cce:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021cd6:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021cdd:	eb 28                	jmp    c0021d07 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021cdf:	fe c8                	dec    al
c0021ce1:	75 24                	jne    c0021d07 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021ce3:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021ceb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021cf3:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021cfb:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021d02:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021d07:	0f b6 fb             	movzx  edi,bl
c0021d0a:	31 db                	xor    ebx,ebx
c0021d0c:	50                   	push   eax
c0021d0d:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021d14:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021d18:	50                   	push   eax
c0021d19:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021d20:	e8 1f ea fd ff       	call   c0000744 <memcpy>
c0021d25:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021d2c:	89 f9                	mov    ecx,edi
c0021d2e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021d34:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021d37:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021d3a:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021d3d:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021d40:	83 c4 10             	add    esp,0x10
c0021d43:	39 c7                	cmp    edi,eax
c0021d45:	89 df                	mov    edi,ebx
c0021d47:	19 d7                	sbb    edi,edx
c0021d49:	72 10                	jb     c0021d5b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021d4b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021d52:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021d59:	eb 0a                	jmp    c0021d65 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021d5b:	29 c8                	sub    eax,ecx
c0021d5d:	19 da                	sbb    edx,ebx
c0021d5f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021d62:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021d65:	31 c0                	xor    eax,eax
c0021d67:	eb 05                	jmp    c0021d6e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021d69:	b8 04 00 00 00       	mov    eax,0x4
c0021d6e:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021d74:	5b                   	pop    ebx
c0021d75:	5e                   	pop    esi
c0021d76:	5f                   	pop    edi
c0021d77:	5d                   	pop    ebp
c0021d78:	c3                   	ret    

c0021d79 <readRoot(unsigned int*, unsigned int*, char)>:
c0021d79:	81 ec 40 08 00 00    	sub    esp,0x840
c0021d7f:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021d87:	50                   	push   eax
c0021d88:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021d8c:	50                   	push   eax
c0021d8d:	6a 10                	push   0x10
c0021d8f:	e8 a1 fa ff ff       	call   c0021835 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d94:	83 c4 0c             	add    esp,0xc
c0021d97:	6a 22                	push   0x22
c0021d99:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021da0:	50                   	push   eax
c0021da1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021da5:	50                   	push   eax
c0021da6:	e8 99 e9 fd ff       	call   c0000744 <memcpy>
c0021dab:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021db2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021db6:	89 10                	mov    DWORD PTR [eax],edx
c0021db8:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021dbf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021dc3:	89 10                	mov    DWORD PTR [eax],edx
c0021dc5:	b0 01                	mov    al,0x1
c0021dc7:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021dcd:	c3                   	ret    

c0021dce <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021dce:	55                   	push   ebp
c0021dcf:	57                   	push   edi
c0021dd0:	56                   	push   esi
c0021dd1:	53                   	push   ebx
c0021dd2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021dd8:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021ddf:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021de6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021dea:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021dee:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021df2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021df6:	75 03                	jne    c0021dfb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021df8:	83 c3 02             	add    ebx,0x2
c0021dfb:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021dfe:	75 03                	jne    c0021e03 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021e00:	43                   	inc    ebx
c0021e01:	eb f8                	jmp    c0021dfb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021e03:	51                   	push   ecx
c0021e04:	68 00 01 00 00       	push   0x100
c0021e09:	6a 00                	push   0x0
c0021e0b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e0f:	50                   	push   eax
c0021e10:	e8 63 e9 fd ff       	call   c0000778 <memset>
c0021e15:	83 c4 10             	add    esp,0x10
c0021e18:	31 d2                	xor    edx,edx
c0021e1a:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021e1d:	84 c0                	test   al,al
c0021e1f:	74 21                	je     c0021e42 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021e21:	3c 2f                	cmp    al,0x2f
c0021e23:	75 0b                	jne    c0021e30 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021e25:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021e29:	bd 01 00 00 00       	mov    ebp,0x1
c0021e2e:	eb 14                	jmp    c0021e44 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021e30:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021e33:	80 f9 19             	cmp    cl,0x19
c0021e36:	77 03                	ja     c0021e3b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021e38:	83 e8 20             	sub    eax,0x20
c0021e3b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021e3f:	42                   	inc    edx
c0021e40:	eb d8                	jmp    c0021e1a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021e42:	31 ed                	xor    ebp,ebp
c0021e44:	83 ec 0c             	sub    esp,0xc
c0021e47:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021e4e:	e8 ed d9 fe ff       	call   c000f840 <malloc>
c0021e53:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021e5a:	89 c6                	mov    esi,eax
c0021e5c:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021e62:	c1 ef 0b             	shr    edi,0xb
c0021e65:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021e6c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021e70:	83 c4 10             	add    esp,0x10
c0021e73:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021e78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021e7c:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021e83:	74 28                	je     c0021ead <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021e85:	52                   	push   edx
c0021e86:	57                   	push   edi
c0021e87:	50                   	push   eax
c0021e88:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021e8c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021e93:	e8 9d f9 ff ff       	call   c0021835 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021e98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021e9c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021ea3:	05 00 08 00 00       	add    eax,0x800
c0021ea8:	83 c4 10             	add    esp,0x10
c0021eab:	eb cb                	jmp    c0021e78 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021ead:	83 ec 0c             	sub    esp,0xc
c0021eb0:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021eb4:	57                   	push   edi
c0021eb5:	e8 da e8 fd ff       	call   c0000794 <strlen>
c0021eba:	50                   	push   eax
c0021ebb:	57                   	push   edi
c0021ebc:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021ec3:	56                   	push   esi
c0021ec4:	e8 2a f9 ff ff       	call   c00217f3 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021ec9:	83 c4 20             	add    esp,0x20
c0021ecc:	85 c0                	test   eax,eax
c0021ece:	75 13                	jne    c0021ee3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021ed0:	83 ec 0c             	sub    esp,0xc
c0021ed3:	56                   	push   esi
c0021ed4:	e8 77 d9 fe ff       	call   c000f850 <free>
c0021ed9:	83 c4 10             	add    esp,0x10
c0021edc:	31 c0                	xor    eax,eax
c0021ede:	e9 b3 00 00 00       	jmp    c0021f96 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ee3:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021ee7:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021eeb:	c1 e7 08             	shl    edi,0x8
c0021eee:	c1 e2 10             	shl    edx,0x10
c0021ef1:	09 d7                	or     edi,edx
c0021ef3:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021ef7:	09 d7                	or     edi,edx
c0021ef9:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021efd:	c1 e2 18             	shl    edx,0x18
c0021f00:	09 d7                	or     edi,edx
c0021f02:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021f06:	89 d1                	mov    ecx,edx
c0021f08:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021f0c:	c1 e1 08             	shl    ecx,0x8
c0021f0f:	c1 e2 10             	shl    edx,0x10
c0021f12:	09 ca                	or     edx,ecx
c0021f14:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021f18:	09 ca                	or     edx,ecx
c0021f1a:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021f1e:	c1 e1 18             	shl    ecx,0x18
c0021f21:	09 ca                	or     edx,ecx
c0021f23:	89 e9                	mov    ecx,ebp
c0021f25:	84 c9                	test   cl,cl
c0021f27:	74 3c                	je     c0021f65 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021f29:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021f2d:	83 ec 0c             	sub    esp,0xc
c0021f30:	56                   	push   esi
c0021f31:	e8 1a d9 fe ff       	call   c000f850 <free>
c0021f36:	83 c4 0c             	add    esp,0xc
c0021f39:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f40:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021f45:	50                   	push   eax
c0021f46:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f4d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f54:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021f58:	52                   	push   edx
c0021f59:	57                   	push   edi
c0021f5a:	53                   	push   ebx
c0021f5b:	e8 6e fe ff ff       	call   c0021dce <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f60:	83 c4 20             	add    esp,0x20
c0021f63:	eb 31                	jmp    c0021f96 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021f65:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021f68:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021f6f:	d0 e8                	shr    al,1
c0021f71:	89 3b                	mov    DWORD PTR [ebx],edi
c0021f73:	83 e0 01             	and    eax,0x1
c0021f76:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021f7d:	83 ec 0c             	sub    esp,0xc
c0021f80:	89 13                	mov    DWORD PTR [ebx],edx
c0021f82:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021f89:	89 03                	mov    DWORD PTR [ebx],eax
c0021f8b:	56                   	push   esi
c0021f8c:	e8 bf d8 fe ff       	call   c000f850 <free>
c0021f91:	83 c4 10             	add    esp,0x10
c0021f94:	b0 01                	mov    al,0x1
c0021f96:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021f9c:	5b                   	pop    ebx
c0021f9d:	5e                   	pop    esi
c0021f9e:	5f                   	pop    edi
c0021f9f:	5d                   	pop    ebp
c0021fa0:	c3                   	ret    

c0021fa1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021fa1:	55                   	push   ebp
c0021fa2:	57                   	push   edi
c0021fa3:	56                   	push   esi
c0021fa4:	53                   	push   ebx
c0021fa5:	83 ec 20             	sub    esp,0x20
c0021fa8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021fac:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021fb0:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021fb4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021fbc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021fc4:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021fc9:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021fcf:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021fd5:	57                   	push   edi
c0021fd6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021fda:	50                   	push   eax
c0021fdb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021fdf:	50                   	push   eax
c0021fe0:	e8 94 fd ff ff       	call   c0021d79 <readRoot(unsigned int*, unsigned int*, char)>
c0021fe5:	5a                   	pop    edx
c0021fe6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021fea:	e8 a5 e7 fd ff       	call   c0000794 <strlen>
c0021fef:	83 c4 10             	add    esp,0x10
c0021ff2:	83 f8 03             	cmp    eax,0x3
c0021ff5:	77 17                	ja     c002200e <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021ff7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ffb:	89 03                	mov    DWORD PTR [ebx],eax
c0021ffd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022001:	89 06                	mov    DWORD PTR [esi],eax
c0022003:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c002200a:	b0 01                	mov    al,0x1
c002200c:	eb 19                	jmp    c0022027 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002200e:	50                   	push   eax
c002200f:	55                   	push   ebp
c0022010:	57                   	push   edi
c0022011:	56                   	push   esi
c0022012:	53                   	push   ebx
c0022013:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022017:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002201b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002201f:	e8 aa fd ff ff       	call   c0021dce <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022024:	83 c4 20             	add    esp,0x20
c0022027:	83 c4 1c             	add    esp,0x1c
c002202a:	5b                   	pop    ebx
c002202b:	5e                   	pop    esi
c002202c:	5f                   	pop    edi
c002202d:	5d                   	pop    ebp
c002202e:	c3                   	ret    
c002202f:	90                   	nop

c0022030 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0022030:	57                   	push   edi
c0022031:	56                   	push   esi
c0022032:	53                   	push   ebx
c0022033:	83 ec 10             	sub    esp,0x10
c0022036:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002203a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002203e:	85 ff                	test   edi,edi
c0022040:	0f 84 9d 00 00 00    	je     c00220e3 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022046:	85 f6                	test   esi,esi
c0022048:	0f 84 95 00 00 00    	je     c00220e3 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002204e:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0022053:	74 17                	je     c002206c <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0022055:	83 ec 0c             	sub    esp,0xc
c0022058:	68 37 cb 02 c0       	push   0xc002cb37
c002205d:	e8 6b 0f ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0022062:	83 c4 10             	add    esp,0x10
c0022065:	b8 03 00 00 00       	mov    eax,0x3
c002206a:	eb 7c                	jmp    c00220e8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002206c:	83 ec 0c             	sub    esp,0xc
c002206f:	6a 1c                	push   0x1c
c0022071:	e8 ca d7 fe ff       	call   c000f840 <malloc>
c0022076:	89 07                	mov    DWORD PTR [edi],eax
c0022078:	89 c3                	mov    ebx,eax
c002207a:	58                   	pop    eax
c002207b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002207f:	50                   	push   eax
c0022080:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022083:	50                   	push   eax
c0022084:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022088:	50                   	push   eax
c0022089:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002208d:	50                   	push   eax
c002208e:	56                   	push   esi
c002208f:	e8 0d ff ff ff       	call   c0021fa1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022094:	83 c4 20             	add    esp,0x20
c0022097:	84 c0                	test   al,al
c0022099:	74 07                	je     c00220a2 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002209b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00220a0:	74 0b                	je     c00220ad <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00220a2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00220a6:	b8 01 00 00 00       	mov    eax,0x1
c00220ab:	eb 3b                	jmp    c00220e8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00220ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220b1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00220b5:	89 03                	mov    DWORD PTR [ebx],eax
c00220b7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00220be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00220c9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220d0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00220d3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00220da:	8a 06                	mov    al,BYTE PTR [esi]
c00220dc:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00220df:	31 c0                	xor    eax,eax
c00220e1:	eb 05                	jmp    c00220e8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00220e3:	b8 04 00 00 00       	mov    eax,0x4
c00220e8:	83 c4 10             	add    esp,0x10
c00220eb:	5b                   	pop    ebx
c00220ec:	5e                   	pop    esi
c00220ed:	5f                   	pop    edi
c00220ee:	c3                   	ret    
c00220ef:	90                   	nop

c00220f0 <ISO9660::exists(char const*)>:
c00220f0:	83 ec 28             	sub    esp,0x28
c00220f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00220f7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00220fb:	52                   	push   edx
c00220fc:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00220ff:	52                   	push   edx
c0022100:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022104:	52                   	push   edx
c0022105:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022109:	52                   	push   edx
c002210a:	50                   	push   eax
c002210b:	e8 91 fe ff ff       	call   c0021fa1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022110:	83 c4 3c             	add    esp,0x3c
c0022113:	c3                   	ret    

c0022114 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022114:	56                   	push   esi
c0022115:	53                   	push   ebx
c0022116:	83 ec 14             	sub    esp,0x14
c0022119:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002211d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022121:	85 db                	test   ebx,ebx
c0022123:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022127:	0f 94 c2             	sete   dl
c002212a:	85 f6                	test   esi,esi
c002212c:	0f 94 c0             	sete   al
c002212f:	08 c2                	or     dl,al
c0022131:	75 68                	jne    c002219b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022133:	85 c9                	test   ecx,ecx
c0022135:	74 64                	je     c002219b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022137:	83 ec 0c             	sub    esp,0xc
c002213a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002213d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022141:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022147:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002214e:	50                   	push   eax
c002214f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022152:	50                   	push   eax
c0022153:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022157:	50                   	push   eax
c0022158:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002215c:	50                   	push   eax
c002215d:	51                   	push   ecx
c002215e:	e8 3e fe ff ff       	call   c0021fa1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022163:	83 c4 20             	add    esp,0x20
c0022166:	ba 01 00 00 00       	mov    edx,0x1
c002216b:	84 c0                	test   al,al
c002216d:	74 31                	je     c00221a0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002216f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022173:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002217a:	89 03                	mov    DWORD PTR [ebx],eax
c002217c:	ba 00 00 00 00       	mov    edx,0x0
c0022181:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022185:	85 c0                	test   eax,eax
c0022187:	0f 95 06             	setne  BYTE PTR [esi]
c002218a:	74 14                	je     c00221a0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002218c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022192:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022199:	eb 05                	jmp    c00221a0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002219b:	ba 04 00 00 00       	mov    edx,0x4
c00221a0:	83 c4 14             	add    esp,0x14
c00221a3:	89 d0                	mov    eax,edx
c00221a5:	5b                   	pop    ebx
c00221a6:	5e                   	pop    esi
c00221a7:	c3                   	ret    

c00221a8 <ISO9660::openDir(char const*, void**)>:
c00221a8:	57                   	push   edi
c00221a9:	56                   	push   esi
c00221aa:	53                   	push   ebx
c00221ab:	83 ec 10             	sub    esp,0x10
c00221ae:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00221b2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00221b6:	85 ff                	test   edi,edi
c00221b8:	0f 84 95 00 00 00    	je     c0022253 <ISO9660::openDir(char const*, void**)+0xab>
c00221be:	85 f6                	test   esi,esi
c00221c0:	0f 84 8d 00 00 00    	je     c0022253 <ISO9660::openDir(char const*, void**)+0xab>
c00221c6:	83 ec 0c             	sub    esp,0xc
c00221c9:	6a 1c                	push   0x1c
c00221cb:	e8 70 d6 fe ff       	call   c000f840 <malloc>
c00221d0:	89 07                	mov    DWORD PTR [edi],eax
c00221d2:	89 c3                	mov    ebx,eax
c00221d4:	59                   	pop    ecx
c00221d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00221d9:	50                   	push   eax
c00221da:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00221dd:	50                   	push   eax
c00221de:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221e2:	50                   	push   eax
c00221e3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221e7:	50                   	push   eax
c00221e8:	56                   	push   esi
c00221e9:	e8 b3 fd ff ff       	call   c0021fa1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00221ee:	83 c4 20             	add    esp,0x20
c00221f1:	84 c0                	test   al,al
c00221f3:	74 07                	je     c00221fc <ISO9660::openDir(char const*, void**)+0x54>
c00221f5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00221fa:	75 21                	jne    c002221d <ISO9660::openDir(char const*, void**)+0x75>
c00221fc:	0f b6 c0             	movzx  eax,al
c00221ff:	52                   	push   edx
c0022200:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022204:	50                   	push   eax
c0022205:	68 5d cb 02 c0       	push   0xc002cb5d
c002220a:	e8 be 0d ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c002220f:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022213:	83 c4 10             	add    esp,0x10
c0022216:	b8 01 00 00 00       	mov    eax,0x1
c002221b:	eb 3b                	jmp    c0022258 <ISO9660::openDir(char const*, void**)+0xb0>
c002221d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022221:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022225:	89 03                	mov    DWORD PTR [ebx],eax
c0022227:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002222e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022232:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022239:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022240:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022243:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002224a:	8a 06                	mov    al,BYTE PTR [esi]
c002224c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002224f:	31 c0                	xor    eax,eax
c0022251:	eb 05                	jmp    c0022258 <ISO9660::openDir(char const*, void**)+0xb0>
c0022253:	b8 04 00 00 00       	mov    eax,0x4
c0022258:	83 c4 10             	add    esp,0x10
c002225b:	5b                   	pop    ebx
c002225c:	5e                   	pop    esi
c002225d:	5f                   	pop    edi
c002225e:	c3                   	ret    
c002225f:	90                   	nop

c0022260 <ISO9660::ISO9660()>:
c0022260:	83 ec 0c             	sub    esp,0xc
c0022263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022267:	83 ec 0c             	sub    esp,0xc
c002226a:	50                   	push   eax
c002226b:	e8 62 10 ff ff       	call   c00132d2 <Filesystem::Filesystem()>
c0022270:	83 c4 10             	add    esp,0x10
c0022273:	ba 80 cb 02 c0       	mov    edx,0xc002cb80
c0022278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002227c:	89 10                	mov    DWORD PTR [eax],edx
c002227e:	90                   	nop
c002227f:	83 c4 0c             	add    esp,0xc
c0022282:	c3                   	ret    
c0022283:	90                   	nop

c0022284 <SoundChannel::~SoundChannel()>:
c0022284:	83 ec 0c             	sub    esp,0xc
c0022287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002228b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002228e:	83 ec 0c             	sub    esp,0xc
c0022291:	50                   	push   eax
c0022292:	e8 b9 d5 fe ff       	call   c000f850 <free>
c0022297:	83 c4 10             	add    esp,0x10
c002229a:	90                   	nop
c002229b:	83 c4 0c             	add    esp,0xc
c002229e:	c3                   	ret    
c002229f:	90                   	nop

c00222a0 <SoundChannel::setSpeed(float)>:
c00222a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00222a8:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00222ab:	c3                   	ret    

c00222ac <SoundChannel::getSpeed()>:
c00222ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222b0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00222b3:	c3                   	ret    

c00222b4 <SoundChannel::setVolume(int)>:
c00222b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222b8:	83 f8 64             	cmp    eax,0x64
c00222bb:	7e 05                	jle    c00222c2 <SoundChannel::setVolume(int)+0xe>
c00222bd:	b8 64 00 00 00       	mov    eax,0x64
c00222c2:	85 c0                	test   eax,eax
c00222c4:	79 02                	jns    c00222c8 <SoundChannel::setVolume(int)+0x14>
c00222c6:	31 c0                	xor    eax,eax
c00222c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00222cc:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00222cf:	c3                   	ret    

c00222d0 <SoundChannel::getVolume()>:
c00222d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222d4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00222d7:	c3                   	ret    

c00222d8 <SoundChannel::pause()>:
c00222d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222dc:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00222e0:	c3                   	ret    
c00222e1:	90                   	nop

c00222e2 <SoundChannel::SoundChannel(int, int, int, int)>:
c00222e2:	83 ec 1c             	sub    esp,0x1c
c00222e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00222e9:	e8 ea ff ff ff       	call   c00222d8 <SoundChannel::pause()>
c00222ee:	83 c4 04             	add    esp,0x4
c00222f1:	6a 50                	push   0x50
c00222f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00222f7:	e8 b8 ff ff ff       	call   c00222b4 <SoundChannel::setVolume(int)>
c00222fc:	83 c4 08             	add    esp,0x8
c00222ff:	a1 f8 cb 02 c0       	mov    eax,ds:0xc002cbf8
c0022304:	50                   	push   eax
c0022305:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022309:	e8 92 ff ff ff       	call   c00222a0 <SoundChannel::setSpeed(float)>
c002230e:	83 c4 08             	add    esp,0x8
c0022311:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022315:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022319:	89 10                	mov    DWORD PTR [eax],edx
c002231b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002231f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022323:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022326:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002232a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002232e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022331:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022336:	75 23                	jne    c002235b <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022338:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002233c:	8b 10                	mov    edx,DWORD PTR [eax]
c002233e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022342:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022345:	0f af c2             	imul   eax,edx
c0022348:	85 c0                	test   eax,eax
c002234a:	79 03                	jns    c002234f <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c002234c:	83 c0 03             	add    eax,0x3
c002234f:	c1 f8 02             	sar    eax,0x2
c0022352:	05 a0 0f 00 00       	add    eax,0xfa0
c0022357:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002235b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002235f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022363:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022366:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002236a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022375:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002237c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022380:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022383:	c1 e0 02             	shl    eax,0x2
c0022386:	83 ec 0c             	sub    esp,0xc
c0022389:	50                   	push   eax
c002238a:	e8 b1 d4 fe ff       	call   c000f840 <malloc>
c002238f:	83 c4 10             	add    esp,0x10
c0022392:	89 c2                	mov    edx,eax
c0022394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022398:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002239b:	83 ec 04             	sub    esp,0x4
c002239e:	8d 44 24 08          	lea    eax,[esp+0x8]
c00223a2:	50                   	push   eax
c00223a3:	6a 01                	push   0x1
c00223a5:	6a 04                	push   0x4
c00223a7:	e8 f3 67 fe ff       	call   c0008b9f <src_new>
c00223ac:	83 c4 10             	add    esp,0x10
c00223af:	89 c2                	mov    edx,eax
c00223b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223b5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00223b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223bc:	85 c0                	test   eax,eax
c00223be:	74 10                	je     c00223d0 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00223c0:	83 ec 0c             	sub    esp,0xc
c00223c3:	68 dc cb 02 c0       	push   0xc002cbdc
c00223c8:	e8 a2 82 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c00223cd:	83 c4 10             	add    esp,0x10
c00223d0:	a0 a0 29 03 c0       	mov    al,ds:0xc00329a0
c00223d5:	83 f0 01             	xor    eax,0x1
c00223d8:	84 c0                	test   al,al
c00223da:	74 57                	je     c0022433 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00223dc:	a1 fc cb 02 c0       	mov    eax,ds:0xc002cbfc
c00223e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00223e5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00223ed:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00223f5:	7f 35                	jg     c002242c <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00223f7:	83 ec 0c             	sub    esp,0xc
c00223fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00223fe:	e8 94 4f 00 00       	call   c0027397 <__floatsisf>
c0022403:	83 c4 10             	add    esp,0x10
c0022406:	8b 15 fc cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cbfc
c002240c:	83 ec 08             	sub    esp,0x8
c002240f:	52                   	push   edx
c0022410:	50                   	push   eax
c0022411:	e8 93 4b 00 00       	call   c0026fa9 <__mulsf3>
c0022416:	83 c4 10             	add    esp,0x10
c0022419:	89 c2                	mov    edx,eax
c002241b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002241f:	89 14 85 a0 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcda60],edx
c0022426:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002242a:	eb c1                	jmp    c00223ed <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c002242c:	c6 05 a0 29 03 c0 01 	mov    BYTE PTR ds:0xc00329a0,0x1
c0022433:	90                   	nop
c0022434:	83 c4 1c             	add    esp,0x1c
c0022437:	c3                   	ret    

c0022438 <SoundChannel::play()>:
c0022438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002243c:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022440:	c3                   	ret    
c0022441:	90                   	nop

c0022442 <SoundChannel::paused()>:
c0022442:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022446:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022449:	c3                   	ret    

c002244a <SoundChannel::getSampleRate()>:
c002244a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002244e:	8b 00                	mov    eax,DWORD PTR [eax]
c0022450:	c3                   	ret    
c0022451:	90                   	nop

c0022452 <SoundChannel::getBits()>:
c0022452:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022456:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022459:	c3                   	ret    

c002245a <SoundChannel::getBufferUsed()>:
c002245a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002245e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022461:	c3                   	ret    

c0022462 <SoundChannel::getBufferSize()>:
c0022462:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022466:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022469:	c3                   	ret    

c002246a <SoundChannel::unbuffer(float*, int, int)>:
c002246a:	56                   	push   esi
c002246b:	53                   	push   ebx
c002246c:	83 ec 40             	sub    esp,0x40
c002246f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022473:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022476:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002247a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002247d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022481:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022485:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022489:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002248d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022491:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022495:	e8 fd 4e 00 00       	call   c0027397 <__floatsisf>
c002249a:	5a                   	pop    edx
c002249b:	89 c6                	mov    esi,eax
c002249d:	ff 33                	push   DWORD PTR [ebx]
c002249f:	e8 f3 4e 00 00       	call   c0027397 <__floatsisf>
c00224a4:	59                   	pop    ecx
c00224a5:	5a                   	pop    edx
c00224a6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00224a9:	50                   	push   eax
c00224aa:	e8 fa 4a 00 00       	call   c0026fa9 <__mulsf3>
c00224af:	59                   	pop    ecx
c00224b0:	5a                   	pop    edx
c00224b1:	50                   	push   eax
c00224b2:	56                   	push   esi
c00224b3:	e8 b4 4c 00 00       	call   c002716c <__divsf3>
c00224b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00224bb:	e8 a7 61 00 00       	call   c0028667 <__extendsfdf2>
c00224c0:	59                   	pop    ecx
c00224c1:	5e                   	pop    esi
c00224c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00224c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00224ca:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00224d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00224d6:	50                   	push   eax
c00224d7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00224da:	e8 b5 62 fe ff       	call   c0008794 <src_process>
c00224df:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00224e3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00224e6:	83 c4 0c             	add    esp,0xc
c00224e9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00224ec:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00224ef:	29 d0                	sub    eax,edx
c00224f1:	c1 e0 02             	shl    eax,0x2
c00224f4:	50                   	push   eax
c00224f5:	8d 04 91             	lea    eax,[ecx+edx*4]
c00224f8:	50                   	push   eax
c00224f9:	51                   	push   ecx
c00224fa:	e8 7d e1 fd ff       	call   c000067c <memmove>
c00224ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022503:	83 c4 44             	add    esp,0x44
c0022506:	5b                   	pop    ebx
c0022507:	5e                   	pop    esi
c0022508:	c3                   	ret    
c0022509:	90                   	nop

c002250a <SoundChannel::buffer8(unsigned char*, int)>:
c002250a:	55                   	push   ebp
c002250b:	57                   	push   edi
c002250c:	56                   	push   esi
c002250d:	53                   	push   ebx
c002250e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022512:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022516:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022519:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002251d:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022520:	74 7a                	je     c002259c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022522:	85 ff                	test   edi,edi
c0022524:	7e 76                	jle    c002259c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022526:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002252a:	8d 70 01             	lea    esi,[eax+0x1]
c002252d:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022530:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022533:	8b 1c 9d a0 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcda60]
c002253a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002253d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022540:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022543:	74 5e                	je     c00225a3 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022545:	83 ff 01             	cmp    edi,0x1
c0022548:	74 4b                	je     c0022595 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002254a:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002254e:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022551:	8d 70 01             	lea    esi,[eax+0x1]
c0022554:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022557:	8b 1c 9d a0 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcda60]
c002255e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022561:	b8 02 00 00 00       	mov    eax,0x2
c0022566:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022569:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002256c:	75 23                	jne    c0022591 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002256e:	eb 27                	jmp    c0022597 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022570:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022575:	8d 71 01             	lea    esi,[ecx+0x1]
c0022578:	40                   	inc    eax
c0022579:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002257c:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002257f:	8b 1c 9d a0 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcda60]
c0022586:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022589:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002258c:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002258f:	74 06                	je     c0022597 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022591:	39 c7                	cmp    edi,eax
c0022593:	75 db                	jne    c0022570 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022595:	89 f8                	mov    eax,edi
c0022597:	5b                   	pop    ebx
c0022598:	5e                   	pop    esi
c0022599:	5f                   	pop    edi
c002259a:	5d                   	pop    ebp
c002259b:	c3                   	ret    
c002259c:	5b                   	pop    ebx
c002259d:	31 c0                	xor    eax,eax
c002259f:	5e                   	pop    esi
c00225a0:	5f                   	pop    edi
c00225a1:	5d                   	pop    ebp
c00225a2:	c3                   	ret    
c00225a3:	b8 01 00 00 00       	mov    eax,0x1
c00225a8:	eb ed                	jmp    c0022597 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00225aa <SoundDevice::SoundDevice(char const*)>:
c00225aa:	83 ec 1c             	sub    esp,0x1c
c00225ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225b1:	83 ec 08             	sub    esp,0x8
c00225b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225b8:	50                   	push   eax
c00225b9:	e8 26 20 ff ff       	call   c00145e4 <Device::Device(char const*)>
c00225be:	83 c4 10             	add    esp,0x10
c00225c1:	ba 08 cc 02 c0       	mov    edx,0xc002cc08
c00225c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225ca:	89 10                	mov    DWORD PTR [eax],edx
c00225cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225d0:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00225da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225de:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00225e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225f0:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00225f5:	7f 19                	jg     c0022610 <SoundDevice::SoundDevice(char const*)+0x66>
c00225f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225ff:	83 c2 54             	add    edx,0x54
c0022602:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002260a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002260e:	eb e0                	jmp    c00225f0 <SoundDevice::SoundDevice(char const*)+0x46>
c0022610:	90                   	nop
c0022611:	83 c4 1c             	add    esp,0x1c
c0022614:	c3                   	ret    
c0022615:	90                   	nop

c0022616 <SoundDevice::~SoundDevice()>:
c0022616:	53                   	push   ebx
c0022617:	83 ec 18             	sub    esp,0x18
c002261a:	ba 08 cc 02 c0       	mov    edx,0xc002cc08
c002261f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022623:	89 10                	mov    DWORD PTR [eax],edx
c0022625:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002262d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022632:	7f 46                	jg     c002267a <SoundDevice::~SoundDevice()+0x64>
c0022634:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022638:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002263c:	83 c2 54             	add    edx,0x54
c002263f:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022643:	85 c0                	test   eax,eax
c0022645:	74 2d                	je     c0022674 <SoundDevice::~SoundDevice()+0x5e>
c0022647:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002264b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002264f:	83 c2 54             	add    edx,0x54
c0022652:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022656:	85 db                	test   ebx,ebx
c0022658:	74 1a                	je     c0022674 <SoundDevice::~SoundDevice()+0x5e>
c002265a:	83 ec 0c             	sub    esp,0xc
c002265d:	53                   	push   ebx
c002265e:	e8 21 fc ff ff       	call   c0022284 <SoundChannel::~SoundChannel()>
c0022663:	83 c4 10             	add    esp,0x10
c0022666:	83 ec 08             	sub    esp,0x8
c0022669:	6a 2c                	push   0x2c
c002266b:	53                   	push   ebx
c002266c:	e8 7c 08 ff ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0022671:	83 c4 10             	add    esp,0x10
c0022674:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022678:	eb b3                	jmp    c002262d <SoundDevice::~SoundDevice()+0x17>
c002267a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002267e:	83 ec 0c             	sub    esp,0xc
c0022681:	50                   	push   eax
c0022682:	e8 3f 1c ff ff       	call   c00142c6 <Device::~Device()>
c0022687:	83 c4 10             	add    esp,0x10
c002268a:	90                   	nop
c002268b:	83 c4 18             	add    esp,0x18
c002268e:	5b                   	pop    ebx
c002268f:	c3                   	ret    

c0022690 <SoundDevice::~SoundDevice()>:
c0022690:	83 ec 0c             	sub    esp,0xc
c0022693:	83 ec 0c             	sub    esp,0xc
c0022696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002269a:	e8 77 ff ff ff       	call   c0022616 <SoundDevice::~SoundDevice()>
c002269f:	83 c4 10             	add    esp,0x10
c00226a2:	83 ec 08             	sub    esp,0x8
c00226a5:	68 e4 01 00 00       	push   0x1e4
c00226aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226ae:	e8 3a 08 ff ff       	call   c0012eed <operator delete(void*, unsigned long)>
c00226b3:	83 c4 10             	add    esp,0x10
c00226b6:	83 c4 0c             	add    esp,0xc
c00226b9:	c3                   	ret    

c00226ba <SoundDevice::getFreeChannelNum()>:
c00226ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00226be:	31 c0                	xor    eax,eax
c00226c0:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00226c8:	74 09                	je     c00226d3 <SoundDevice::getFreeChannelNum()+0x19>
c00226ca:	40                   	inc    eax
c00226cb:	83 f8 20             	cmp    eax,0x20
c00226ce:	75 f0                	jne    c00226c0 <SoundDevice::getFreeChannelNum()+0x6>
c00226d0:	83 c8 ff             	or     eax,0xffffffff
c00226d3:	c3                   	ret    

c00226d4 <SoundDevice::addChannel(SoundChannel*)>:
c00226d4:	56                   	push   esi
c00226d5:	53                   	push   ebx
c00226d6:	51                   	push   ecx
c00226d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00226db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00226df:	53                   	push   ebx
c00226e0:	e8 d5 ff ff ff       	call   c00226ba <SoundDevice::getFreeChannelNum()>
c00226e5:	5a                   	pop    edx
c00226e6:	83 f8 ff             	cmp    eax,0xffffffff
c00226e9:	74 51                	je     c002273c <SoundDevice::addChannel(SoundChannel*)+0x68>
c00226eb:	85 f6                	test   esi,esi
c00226ed:	74 4d                	je     c002273c <SoundDevice::addChannel(SoundChannel*)+0x68>
c00226ef:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00226f6:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00226fd:	75 30                	jne    c002272f <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00226ff:	83 ec 0c             	sub    esp,0xc
c0022702:	56                   	push   esi
c0022703:	e8 42 fd ff ff       	call   c002244a <SoundChannel::getSampleRate()>
c0022708:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002270e:	89 34 24             	mov    DWORD PTR [esp],esi
c0022711:	e8 3c fd ff ff       	call   c0022452 <SoundChannel::getBits()>
c0022716:	83 c4 0c             	add    esp,0xc
c0022719:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002271f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022721:	50                   	push   eax
c0022722:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022728:	53                   	push   ebx
c0022729:	ff 52 28             	call   DWORD PTR [edx+0x28]
c002272c:	83 c4 10             	add    esp,0x10
c002272f:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022735:	b8 01 00 00 00       	mov    eax,0x1
c002273a:	eb 03                	jmp    c002273f <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002273c:	83 c8 ff             	or     eax,0xffffffff
c002273f:	5a                   	pop    edx
c0022740:	5b                   	pop    ebx
c0022741:	5e                   	pop    esi
c0022742:	c3                   	ret    
c0022743:	90                   	nop

c0022744 <SoundDevice::removeChannel(int)>:
c0022744:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002274c:	83 fa 1f             	cmp    edx,0x1f
c002274f:	77 23                	ja     c0022774 <SoundDevice::removeChannel(int)+0x30>
c0022751:	8d 14 90             	lea    edx,[eax+edx*4]
c0022754:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002275b:	74 17                	je     c0022774 <SoundDevice::removeChannel(int)+0x30>
c002275d:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022767:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002276d:	75 05                	jne    c0022774 <SoundDevice::removeChannel(int)+0x30>
c002276f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022771:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022774:	c3                   	ret    
c0022775:	90                   	nop

c0022776 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022776:	57                   	push   edi
c0022777:	56                   	push   esi
c0022778:	53                   	push   ebx
c0022779:	31 db                	xor    ebx,ebx
c002277b:	83 ec 10             	sub    esp,0x10
c002277e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022782:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022786:	0f 8d cb 00 00 00    	jge    c0022857 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002278c:	83 ec 0c             	sub    esp,0xc
c002278f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022793:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022796:	e8 cc 5e 00 00       	call   c0028667 <__extendsfdf2>
c002279b:	83 c4 10             	add    esp,0x10
c002279e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227a2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227a6:	68 00 00 f0 3f       	push   0x3ff00000
c00227ab:	6a 00                	push   0x0
c00227ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227b5:	e8 39 4e 00 00       	call   c00275f3 <__adddf3>
c00227ba:	83 c4 10             	add    esp,0x10
c00227bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227c5:	68 00 00 e0 3f       	push   0x3fe00000
c00227ca:	6a 00                	push   0x0
c00227cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227d4:	e8 97 54 00 00       	call   c0027c70 <__muldf3>
c00227d9:	83 c4 10             	add    esp,0x10
c00227dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227e4:	68 00 00 60 40       	push   0x40600000
c00227e9:	6a 00                	push   0x0
c00227eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227f3:	e8 78 54 00 00       	call   c0027c70 <__muldf3>
c00227f8:	59                   	pop    ecx
c00227f9:	5f                   	pop    edi
c00227fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00227fe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002280a:	e8 34 5d 00 00       	call   c0028543 <__truncdfsf2>
c002280f:	5a                   	pop    edx
c0022810:	89 c7                	mov    edi,eax
c0022812:	59                   	pop    ecx
c0022813:	68 00 00 fe 42       	push   0x42fe0000
c0022818:	50                   	push   eax
c0022819:	e8 cf 4d 00 00       	call   c00275ed <__gesf2>
c002281e:	83 c4 10             	add    esp,0x10
c0022821:	85 c0                	test   eax,eax
c0022823:	78 06                	js     c002282b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022825:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022829:	eb 26                	jmp    c0022851 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002282b:	50                   	push   eax
c002282c:	50                   	push   eax
c002282d:	6a 00                	push   0x0
c002282f:	57                   	push   edi
c0022830:	e8 bc 4d 00 00       	call   c00275f1 <__lesf2>
c0022835:	83 c4 10             	add    esp,0x10
c0022838:	85 c0                	test   eax,eax
c002283a:	7f 06                	jg     c0022842 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002283c:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022840:	eb 0f                	jmp    c0022851 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022842:	83 ec 0c             	sub    esp,0xc
c0022845:	57                   	push   edi
c0022846:	e8 b1 5e 00 00       	call   c00286fc <lrintf>
c002284b:	83 c4 10             	add    esp,0x10
c002284e:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022851:	43                   	inc    ebx
c0022852:	e9 2b ff ff ff       	jmp    c0022782 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022857:	83 c4 10             	add    esp,0x10
c002285a:	5b                   	pop    ebx
c002285b:	5e                   	pop    esi
c002285c:	5f                   	pop    edi
c002285d:	c3                   	ret    

c002285e <SoundDevice::getAudio(int, float*, float*)>:
c002285e:	55                   	push   ebp
c002285f:	57                   	push   edi
c0022860:	56                   	push   esi
c0022861:	53                   	push   ebx
c0022862:	31 db                	xor    ebx,ebx
c0022864:	83 ec 20             	sub    esp,0x20
c0022867:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002286b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002286f:	c1 e0 02             	shl    eax,0x2
c0022872:	50                   	push   eax
c0022873:	6a 00                	push   0x0
c0022875:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022879:	e8 fa de fd ff       	call   c0000778 <memset>
c002287e:	83 c4 10             	add    esp,0x10
c0022881:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022885:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002288c:	85 c0                	test   eax,eax
c002288e:	0f 84 d7 00 00 00    	je     c002296b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022894:	83 ec 0c             	sub    esp,0xc
c0022897:	50                   	push   eax
c0022898:	e8 a5 fb ff ff       	call   c0022442 <SoundChannel::paused()>
c002289d:	83 c4 10             	add    esp,0x10
c00228a0:	84 c0                	test   al,al
c00228a2:	0f 85 c3 00 00 00    	jne    c002296b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228a8:	83 ec 0c             	sub    esp,0xc
c00228ab:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228b2:	e8 19 fa ff ff       	call   c00222d0 <SoundChannel::getVolume()>
c00228b7:	83 c4 10             	add    esp,0x10
c00228ba:	85 c0                	test   eax,eax
c00228bc:	0f 84 a9 00 00 00    	je     c002296b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228c2:	83 ec 0c             	sub    esp,0xc
c00228c5:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228cc:	e8 ff f9 ff ff       	call   c00222d0 <SoundChannel::getVolume()>
c00228d1:	83 ec 0c             	sub    esp,0xc
c00228d4:	50                   	push   eax
c00228d5:	e8 bd 4a 00 00       	call   c0027397 <__floatsisf>
c00228da:	59                   	pop    ecx
c00228db:	5d                   	pop    ebp
c00228dc:	31 ed                	xor    ebp,ebp
c00228de:	68 00 00 c8 42       	push   0x42c80000
c00228e3:	50                   	push   eax
c00228e4:	e8 83 48 00 00       	call   c002716c <__divsf3>
c00228e9:	83 c4 10             	add    esp,0x10
c00228ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00228f0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00228f4:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00228fa:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00228fe:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022905:	e8 60 fb ff ff       	call   c002246a <SoundChannel::unbuffer(float*, int, int)>
c002290a:	83 c4 20             	add    esp,0x20
c002290d:	89 c1                	mov    ecx,eax
c002290f:	39 cd                	cmp    ebp,ecx
c0022911:	7d 52                	jge    c0022965 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022913:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022917:	50                   	push   eax
c0022918:	50                   	push   eax
c0022919:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002291d:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022920:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022924:	e8 80 46 00 00       	call   c0026fa9 <__mulsf3>
c0022929:	5a                   	pop    edx
c002292a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002292e:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022934:	e8 5e 4a 00 00       	call   c0027397 <__floatsisf>
c0022939:	59                   	pop    ecx
c002293a:	5a                   	pop    edx
c002293b:	50                   	push   eax
c002293c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022940:	e8 27 48 00 00       	call   c002716c <__divsf3>
c0022945:	59                   	pop    ecx
c0022946:	5a                   	pop    edx
c0022947:	50                   	push   eax
c0022948:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002294c:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002294f:	e8 32 43 00 00       	call   c0026c86 <__addsf3>
c0022954:	83 c4 10             	add    esp,0x10
c0022957:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002295b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002295f:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022962:	45                   	inc    ebp
c0022963:	eb aa                	jmp    c002290f <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022965:	39 cf                	cmp    edi,ecx
c0022967:	7e 02                	jle    c002296b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022969:	89 cf                	mov    edi,ecx
c002296b:	43                   	inc    ebx
c002296c:	83 fb 20             	cmp    ebx,0x20
c002296f:	0f 85 10 ff ff ff    	jne    c0022885 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022975:	83 c4 1c             	add    esp,0x1c
c0022978:	89 f8                	mov    eax,edi
c002297a:	5b                   	pop    ebx
c002297b:	5e                   	pop    esi
c002297c:	5f                   	pop    edi
c002297d:	5d                   	pop    ebp
c002297e:	c3                   	ret    
c002297f:	90                   	nop

c0022980 <PCI::open(int, int, void*)>:
c0022980:	83 ec 18             	sub    esp,0x18
c0022983:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022987:	8b 10                	mov    edx,DWORD PTR [eax]
c0022989:	50                   	push   eax
c002298a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002298d:	31 c0                	xor    eax,eax
c002298f:	83 c4 1c             	add    esp,0x1c
c0022992:	c3                   	ret    
c0022993:	90                   	nop

c0022994 <PCI::close(int, int, void*)>:
c0022994:	31 c0                	xor    eax,eax
c0022996:	c3                   	ret    
c0022997:	90                   	nop

c0022998 <PCI::PCI()>:
c0022998:	83 ec 0c             	sub    esp,0xc
c002299b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002299f:	83 ec 08             	sub    esp,0x8
c00229a2:	68 38 cc 02 c0       	push   0xc002cc38
c00229a7:	50                   	push   eax
c00229a8:	e8 bb 12 ff ff       	call   c0013c68 <Bus::Bus(char const*)>
c00229ad:	83 c4 10             	add    esp,0x10
c00229b0:	ba a4 cc 02 c0       	mov    edx,0xc002cca4
c00229b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229b9:	89 10                	mov    DWORD PTR [eax],edx
c00229bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229bf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229c5:	0f b6 d0             	movzx  edx,al
c00229c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229cc:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00229d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229d7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229dd:	0f b6 d0             	movzx  edx,al
c00229e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e4:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00229e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229f3:	8d 50 01             	lea    edx,[eax+0x1]
c00229f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00229fa:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022a00:	0f b6 d0             	movzx  edx,al
c0022a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a07:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022a0b:	83 c9 c0             	or     ecx,0xffffffc0
c0022a0e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022a12:	90                   	nop
c0022a13:	83 c4 0c             	add    esp,0xc
c0022a16:	c3                   	ret    
c0022a17:	90                   	nop

c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022a18:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022a1c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022a21:	89 ca                	mov    edx,ecx
c0022a23:	c1 e0 10             	shl    eax,0x10
c0022a26:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022a2c:	09 d0                	or     eax,edx
c0022a2e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022a33:	c1 e2 08             	shl    edx,0x8
c0022a36:	09 d0                	or     eax,edx
c0022a38:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022a3d:	c1 e2 0b             	shl    edx,0xb
c0022a40:	09 d0                	or     eax,edx
c0022a42:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a47:	0d 00 00 00 80       	or     eax,0x80000000
c0022a4c:	ef                   	out    dx,eax
c0022a4d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a52:	ed                   	in     eax,dx
c0022a53:	83 e1 02             	and    ecx,0x2
c0022a56:	0f b6 c9             	movzx  ecx,cl
c0022a59:	c1 e1 03             	shl    ecx,0x3
c0022a5c:	d3 e8                	shr    eax,cl
c0022a5e:	c3                   	ret    
c0022a5f:	90                   	nop

c0022a60 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022a60:	6a 00                	push   0x0
c0022a62:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a67:	50                   	push   eax
c0022a68:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a6d:	50                   	push   eax
c0022a6e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a73:	50                   	push   eax
c0022a74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a78:	e8 9b ff ff ff       	call   c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a7d:	83 c4 14             	add    esp,0x14
c0022a80:	c3                   	ret    
c0022a81:	90                   	nop

c0022a82 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022a82:	6a 0e                	push   0xe
c0022a84:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a89:	50                   	push   eax
c0022a8a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a8f:	50                   	push   eax
c0022a90:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a95:	50                   	push   eax
c0022a96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a9a:	e8 79 ff ff ff       	call   c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a9f:	83 c4 14             	add    esp,0x14
c0022aa2:	0f b6 c0             	movzx  eax,al
c0022aa5:	c3                   	ret    

c0022aa6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022aa6:	55                   	push   ebp
c0022aa7:	57                   	push   edi
c0022aa8:	56                   	push   esi
c0022aa9:	53                   	push   ebx
c0022aaa:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022aaf:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022ab4:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022ab9:	6a 0a                	push   0xa
c0022abb:	56                   	push   esi
c0022abc:	55                   	push   ebp
c0022abd:	57                   	push   edi
c0022abe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022ac2:	e8 51 ff ff ff       	call   c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ac7:	6a 0a                	push   0xa
c0022ac9:	89 c3                	mov    ebx,eax
c0022acb:	56                   	push   esi
c0022acc:	0f b6 db             	movzx  ebx,bl
c0022acf:	55                   	push   ebp
c0022ad0:	57                   	push   edi
c0022ad1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022ad5:	e8 3e ff ff ff       	call   c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ada:	83 c4 28             	add    esp,0x28
c0022add:	25 00 ff 00 00       	and    eax,0xff00
c0022ae2:	09 d8                	or     eax,ebx
c0022ae4:	5b                   	pop    ebx
c0022ae5:	5e                   	pop    esi
c0022ae6:	5f                   	pop    edi
c0022ae7:	5d                   	pop    ebp
c0022ae8:	c3                   	ret    
c0022ae9:	90                   	nop

c0022aea <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022aea:	6a 08                	push   0x8
c0022aec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022af1:	50                   	push   eax
c0022af2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022af7:	50                   	push   eax
c0022af8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022afd:	50                   	push   eax
c0022afe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b02:	e8 11 ff ff ff       	call   c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b07:	83 c4 14             	add    esp,0x14
c0022b0a:	0f b6 c4             	movzx  eax,ah
c0022b0d:	c3                   	ret    

c0022b0e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022b0e:	6a 08                	push   0x8
c0022b10:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b15:	50                   	push   eax
c0022b16:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b1b:	50                   	push   eax
c0022b1c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b21:	50                   	push   eax
c0022b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b26:	e8 ed fe ff ff       	call   c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b2b:	83 c4 14             	add    esp,0x14
c0022b2e:	c3                   	ret    
c0022b2f:	90                   	nop

c0022b30 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022b30:	6a 3c                	push   0x3c
c0022b32:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b37:	50                   	push   eax
c0022b38:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b3d:	50                   	push   eax
c0022b3e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b43:	50                   	push   eax
c0022b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b48:	e8 cb fe ff ff       	call   c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b4d:	83 c4 14             	add    esp,0x14
c0022b50:	c3                   	ret    
c0022b51:	90                   	nop

c0022b52 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022b52:	6a 18                	push   0x18
c0022b54:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b59:	50                   	push   eax
c0022b5a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b5f:	50                   	push   eax
c0022b60:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b65:	50                   	push   eax
c0022b66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b6a:	e8 a9 fe ff ff       	call   c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b6f:	83 c4 14             	add    esp,0x14
c0022b72:	0f b6 c4             	movzx  eax,ah
c0022b75:	c3                   	ret    

c0022b76 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022b76:	55                   	push   ebp
c0022b77:	57                   	push   edi
c0022b78:	56                   	push   esi
c0022b79:	53                   	push   ebx
c0022b7a:	50                   	push   eax
c0022b7b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022b7f:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022b84:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022b89:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022b8e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022b95:	8d 43 12             	lea    eax,[ebx+0x12]
c0022b98:	83 c3 10             	add    ebx,0x10
c0022b9b:	0f b6 c0             	movzx  eax,al
c0022b9e:	0f b6 db             	movzx  ebx,bl
c0022ba1:	50                   	push   eax
c0022ba2:	51                   	push   ecx
c0022ba3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022ba7:	57                   	push   edi
c0022ba8:	55                   	push   ebp
c0022ba9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022bad:	e8 66 fe ff ff       	call   c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bb2:	53                   	push   ebx
c0022bb3:	89 c6                	mov    esi,eax
c0022bb5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022bb9:	c1 e6 10             	shl    esi,0x10
c0022bbc:	51                   	push   ecx
c0022bbd:	57                   	push   edi
c0022bbe:	55                   	push   ebp
c0022bbf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022bc3:	e8 50 fe ff ff       	call   c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bc8:	83 c4 2c             	add    esp,0x2c
c0022bcb:	0f b7 c0             	movzx  eax,ax
c0022bce:	5b                   	pop    ebx
c0022bcf:	09 f0                	or     eax,esi
c0022bd1:	5e                   	pop    esi
c0022bd2:	5f                   	pop    edi
c0022bd3:	5d                   	pop    ebp
c0022bd4:	c3                   	ret    
c0022bd5:	90                   	nop

c0022bd6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022bd6:	53                   	push   ebx
c0022bd7:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022bdc:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022be1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022be5:	c1 e1 10             	shl    ecx,0x10
c0022be8:	25 fc 00 00 00       	and    eax,0xfc
c0022bed:	09 c1                	or     ecx,eax
c0022bef:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bf4:	c1 e0 08             	shl    eax,0x8
c0022bf7:	09 c1                	or     ecx,eax
c0022bf9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022bfe:	c1 e0 0b             	shl    eax,0xb
c0022c01:	09 c1                	or     ecx,eax
c0022c03:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022c09:	89 c8                	mov    eax,ecx
c0022c0b:	ef                   	out    dx,eax
c0022c0c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c11:	ed                   	in     eax,dx
c0022c12:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022c17:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022c1c:	74 0a                	je     c0022c28 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022c1e:	0f b7 d8             	movzx  ebx,ax
c0022c21:	89 d0                	mov    eax,edx
c0022c23:	c1 e0 10             	shl    eax,0x10
c0022c26:	eb 05                	jmp    c0022c2d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022c28:	66 31 c0             	xor    ax,ax
c0022c2b:	89 d3                	mov    ebx,edx
c0022c2d:	09 c3                	or     ebx,eax
c0022c2f:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022c34:	89 c8                	mov    eax,ecx
c0022c36:	ef                   	out    dx,eax
c0022c37:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c3c:	89 d8                	mov    eax,ebx
c0022c3e:	ef                   	out    dx,eax
c0022c3f:	5b                   	pop    ebx
c0022c40:	c3                   	ret    
c0022c41:	90                   	nop

c0022c42 <PCI::checkBus(unsigned char)>:
c0022c42:	56                   	push   esi
c0022c43:	53                   	push   ebx
c0022c44:	31 db                	xor    ebx,ebx
c0022c46:	51                   	push   ecx
c0022c47:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022c4c:	52                   	push   edx
c0022c4d:	53                   	push   ebx
c0022c4e:	43                   	inc    ebx
c0022c4f:	56                   	push   esi
c0022c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c54:	e8 2b 03 00 00       	call   c0022f84 <PCI::checkDevice(unsigned char, unsigned char)>
c0022c59:	83 c4 10             	add    esp,0x10
c0022c5c:	83 fb 20             	cmp    ebx,0x20
c0022c5f:	75 eb                	jne    c0022c4c <PCI::checkBus(unsigned char)+0xa>
c0022c61:	58                   	pop    eax
c0022c62:	5b                   	pop    ebx
c0022c63:	5e                   	pop    esi
c0022c64:	c3                   	ret    
c0022c65:	90                   	nop

c0022c66 <PCI::foundDevice(PCIDeviceInfo)>:
c0022c66:	55                   	push   ebp
c0022c67:	57                   	push   edi
c0022c68:	56                   	push   esi
c0022c69:	53                   	push   ebx
c0022c6a:	83 ec 1c             	sub    esp,0x1c
c0022c6d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c71:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022c77:	0f 84 52 01 00 00    	je     c0022dcf <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c7d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022c81:	66 81 f9 06 04       	cmp    cx,0x406
c0022c86:	75 2c                	jne    c0022cb4 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022c88:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022c8d:	50                   	push   eax
c0022c8e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022c93:	50                   	push   eax
c0022c94:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022c99:	50                   	push   eax
c0022c9a:	56                   	push   esi
c0022c9b:	e8 b2 fe ff ff       	call   c0022b52 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022ca0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022ca4:	0f b6 c0             	movzx  eax,al
c0022ca7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022cab:	83 c4 2c             	add    esp,0x2c
c0022cae:	5b                   	pop    ebx
c0022caf:	5e                   	pop    esi
c0022cb0:	5f                   	pop    edi
c0022cb1:	5d                   	pop    ebp
c0022cb2:	eb 8e                	jmp    c0022c42 <PCI::checkBus(unsigned char)>
c0022cb4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022cb8:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022cbe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022cc2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022cc6:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022cca:	88 d3                	mov    bl,dl
c0022ccc:	85 c0                	test   eax,eax
c0022cce:	74 33                	je     c0022d03 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022cd0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022cd3:	85 d2                	test   edx,edx
c0022cd5:	74 28                	je     c0022cff <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022cd7:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022cdd:	31 ef                	xor    edi,ebp
c0022cdf:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022ce5:	75 18                	jne    c0022cff <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022ce7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022ceb:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022cf1:	75 0c                	jne    c0022cff <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022cf3:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022cf9:	0f 84 d0 00 00 00    	je     c0022dcf <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022cff:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d01:	eb c9                	jmp    c0022ccc <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022d03:	66 81 f9 01 06       	cmp    cx,0x601
c0022d08:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022d0c:	75 19                	jne    c0022d27 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022d0e:	83 ec 0c             	sub    esp,0xc
c0022d11:	68 64 01 00 00       	push   0x164
c0022d16:	e8 25 cb fe ff       	call   c000f840 <malloc>
c0022d1b:	89 c5                	mov    ebp,eax
c0022d1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d20:	e8 95 0f 00 00       	call   c0023cba <SATABus::SATABus()>
c0022d25:	eb 1e                	jmp    c0022d45 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022d27:	66 81 f9 01 01       	cmp    cx,0x101
c0022d2c:	75 60                	jne    c0022d8e <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022d2e:	83 ec 0c             	sub    esp,0xc
c0022d31:	68 70 02 00 00       	push   0x270
c0022d36:	e8 05 cb fe ff       	call   c000f840 <malloc>
c0022d3b:	89 c5                	mov    ebp,eax
c0022d3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d40:	e8 03 03 00 00       	call   c0023048 <IDE::IDE()>
c0022d45:	58                   	pop    eax
c0022d46:	5a                   	pop    edx
c0022d47:	55                   	push   ebp
c0022d48:	56                   	push   esi
c0022d49:	e8 a6 16 ff ff       	call   c00143f4 <Device::addChild(Device*)>
c0022d4e:	83 ec 1c             	sub    esp,0x1c
c0022d51:	b9 09 00 00 00       	mov    ecx,0x9
c0022d56:	fc                   	cld    
c0022d57:	89 e7                	mov    edi,esp
c0022d59:	89 de                	mov    esi,ebx
c0022d5b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d5d:	55                   	push   ebp
c0022d5e:	e8 9b 15 ff ff       	call   c00142fe <Device::preOpenPCI(PCIDeviceInfo)>
c0022d63:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022d66:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022d6a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022d72:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022d7a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022d82:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d85:	83 c4 4c             	add    esp,0x4c
c0022d88:	5b                   	pop    ebx
c0022d89:	5e                   	pop    esi
c0022d8a:	5f                   	pop    edi
c0022d8b:	5d                   	pop    ebp
c0022d8c:	ff e0                	jmp    eax
c0022d8e:	83 ec 0c             	sub    esp,0xc
c0022d91:	68 58 01 00 00       	push   0x158
c0022d96:	e8 a5 ca fe ff       	call   c000f840 <malloc>
c0022d9b:	89 c5                	mov    ebp,eax
c0022d9d:	58                   	pop    eax
c0022d9e:	5a                   	pop    edx
c0022d9f:	68 40 cc 02 c0       	push   0xc002cc40
c0022da4:	55                   	push   ebp
c0022da5:	e8 40 19 ff ff       	call   c00146ea <DriverlessDevice::DriverlessDevice(char const*)>
c0022daa:	59                   	pop    ecx
c0022dab:	5f                   	pop    edi
c0022dac:	55                   	push   ebp
c0022dad:	56                   	push   esi
c0022dae:	e8 41 16 ff ff       	call   c00143f4 <Device::addChild(Device*)>
c0022db3:	b9 09 00 00 00       	mov    ecx,0x9
c0022db8:	fc                   	cld    
c0022db9:	89 df                	mov    edi,ebx
c0022dbb:	89 de                	mov    esi,ebx
c0022dbd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022dbf:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022dc3:	83 c4 2c             	add    esp,0x2c
c0022dc6:	5b                   	pop    ebx
c0022dc7:	5e                   	pop    esi
c0022dc8:	5f                   	pop    edi
c0022dc9:	5d                   	pop    ebp
c0022dca:	e9 2f 15 ff ff       	jmp    c00142fe <Device::preOpenPCI(PCIDeviceInfo)>
c0022dcf:	83 c4 1c             	add    esp,0x1c
c0022dd2:	5b                   	pop    ebx
c0022dd3:	5e                   	pop    esi
c0022dd4:	5f                   	pop    edi
c0022dd5:	5d                   	pop    ebp
c0022dd6:	c3                   	ret    
c0022dd7:	90                   	nop

c0022dd8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022dd8:	55                   	push   ebp
c0022dd9:	57                   	push   edi
c0022dda:	56                   	push   esi
c0022ddb:	53                   	push   ebx
c0022ddc:	83 ec 5c             	sub    esp,0x5c
c0022ddf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022de3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022deb:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022df0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022df4:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022df8:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022dfd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022e01:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022e06:	6a 0c                	push   0xc
c0022e08:	55                   	push   ebp
c0022e09:	53                   	push   ebx
c0022e0a:	57                   	push   edi
c0022e0b:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022e12:	e8 01 fc ff ff       	call   c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e17:	55                   	push   ebp
c0022e18:	53                   	push   ebx
c0022e19:	57                   	push   edi
c0022e1a:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022e21:	e8 80 fc ff ff       	call   c0022aa6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022e26:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022e2b:	83 c4 24             	add    esp,0x24
c0022e2e:	55                   	push   ebp
c0022e2f:	53                   	push   ebx
c0022e30:	57                   	push   edi
c0022e31:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e35:	e8 f6 fc ff ff       	call   c0022b30 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022e3a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022e3e:	6a 3c                	push   0x3c
c0022e40:	55                   	push   ebp
c0022e41:	53                   	push   ebx
c0022e42:	57                   	push   edi
c0022e43:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022e4a:	e8 c9 fb ff ff       	call   c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e4f:	0f b6 c4             	movzx  eax,ah
c0022e52:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022e56:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022e5a:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022e5e:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0022e63:	83 c4 24             	add    esp,0x24
c0022e66:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022e6c:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022e73:	74 6c                	je     c0022ee1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e75:	31 f6                	xor    esi,esi
c0022e77:	8b 15 48 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e648
c0022e7d:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e83:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022e89:	7e 56                	jle    c0022ee1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e8b:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022e8e:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022e95:	39 cb                	cmp    ebx,ecx
c0022e97:	75 45                	jne    c0022ede <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e99:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022ea0:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022ea4:	75 38                	jne    c0022ede <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022ea6:	83 ec 0c             	sub    esp,0xc
c0022ea9:	68 5a cc 02 c0       	push   0xc002cc5a
c0022eae:	e8 1a 01 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0022eb3:	8b 15 48 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e648
c0022eb9:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022ebf:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022ec7:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022ecb:	52                   	push   edx
c0022ecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022ed0:	53                   	push   ebx
c0022ed1:	68 7f cc 02 c0       	push   0xc002cc7f
c0022ed6:	e8 f2 00 ff ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0022edb:	83 c4 20             	add    esp,0x20
c0022ede:	46                   	inc    esi
c0022edf:	eb 96                	jmp    c0022e77 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022ee1:	31 d2                	xor    edx,edx
c0022ee3:	83 ec 0c             	sub    esp,0xc
c0022ee6:	55                   	push   ebp
c0022ee7:	53                   	push   ebx
c0022ee8:	57                   	push   edi
c0022ee9:	52                   	push   edx
c0022eea:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022eee:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022ef5:	e8 7c fc ff ff       	call   c0022b76 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022efa:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022efe:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022f02:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022f06:	42                   	inc    edx
c0022f07:	83 c4 20             	add    esp,0x20
c0022f0a:	83 fa 06             	cmp    edx,0x6
c0022f0d:	75 d4                	jne    c0022ee3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022f0f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022f13:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022f17:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022f1b:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022f1f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022f23:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022f27:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022f2c:	86 e0                	xchg   al,ah
c0022f2e:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022f33:	55                   	push   ebp
c0022f34:	53                   	push   ebx
c0022f35:	57                   	push   edi
c0022f36:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022f3a:	e8 ab fb ff ff       	call   c0022aea <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022f3f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022f43:	55                   	push   ebp
c0022f44:	53                   	push   ebx
c0022f45:	57                   	push   edi
c0022f46:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022f4d:	e8 0e fb ff ff       	call   c0022a60 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f52:	83 ec 0c             	sub    esp,0xc
c0022f55:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022f5a:	b9 09 00 00 00       	mov    ecx,0x9
c0022f5f:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022f63:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022f67:	fc                   	cld    
c0022f68:	89 e7                	mov    edi,esp
c0022f6a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022f6c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022f73:	e8 ee fc ff ff       	call   c0022c66 <PCI::foundDevice(PCIDeviceInfo)>
c0022f78:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022f7e:	5b                   	pop    ebx
c0022f7f:	5e                   	pop    esi
c0022f80:	5f                   	pop    edi
c0022f81:	5d                   	pop    ebp
c0022f82:	c3                   	ret    
c0022f83:	90                   	nop

c0022f84 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022f84:	55                   	push   ebp
c0022f85:	57                   	push   edi
c0022f86:	56                   	push   esi
c0022f87:	53                   	push   ebx
c0022f88:	83 ec 0c             	sub    esp,0xc
c0022f8b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022f8f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022f94:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022f99:	6a 00                	push   0x0
c0022f9b:	56                   	push   esi
c0022f9c:	57                   	push   edi
c0022f9d:	55                   	push   ebp
c0022f9e:	e8 bd fa ff ff       	call   c0022a60 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fa3:	6a 00                	push   0x0
c0022fa5:	56                   	push   esi
c0022fa6:	57                   	push   edi
c0022fa7:	55                   	push   ebp
c0022fa8:	e8 2b fe ff ff       	call   c0022dd8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022fad:	83 c4 20             	add    esp,0x20
c0022fb0:	6a 00                	push   0x0
c0022fb2:	56                   	push   esi
c0022fb3:	57                   	push   edi
c0022fb4:	55                   	push   ebp
c0022fb5:	e8 c8 fa ff ff       	call   c0022a82 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022fba:	83 c4 10             	add    esp,0x10
c0022fbd:	84 c0                	test   al,al
c0022fbf:	79 27                	jns    c0022fe8 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022fc1:	bb 01 00 00 00       	mov    ebx,0x1
c0022fc6:	53                   	push   ebx
c0022fc7:	56                   	push   esi
c0022fc8:	57                   	push   edi
c0022fc9:	55                   	push   ebp
c0022fca:	e8 91 fa ff ff       	call   c0022a60 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fcf:	83 c4 10             	add    esp,0x10
c0022fd2:	66 40                	inc    ax
c0022fd4:	74 0c                	je     c0022fe2 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022fd6:	53                   	push   ebx
c0022fd7:	56                   	push   esi
c0022fd8:	57                   	push   edi
c0022fd9:	55                   	push   ebp
c0022fda:	e8 f9 fd ff ff       	call   c0022dd8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022fdf:	83 c4 10             	add    esp,0x10
c0022fe2:	43                   	inc    ebx
c0022fe3:	83 fb 08             	cmp    ebx,0x8
c0022fe6:	75 de                	jne    c0022fc6 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022fe8:	83 c4 0c             	add    esp,0xc
c0022feb:	5b                   	pop    ebx
c0022fec:	5e                   	pop    esi
c0022fed:	5f                   	pop    edi
c0022fee:	5d                   	pop    ebp
c0022fef:	c3                   	ret    

c0022ff0 <PCI::detect()>:
c0022ff0:	56                   	push   esi
c0022ff1:	53                   	push   ebx
c0022ff2:	53                   	push   ebx
c0022ff3:	31 db                	xor    ebx,ebx
c0022ff5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022ff9:	6a 00                	push   0x0
c0022ffb:	6a 00                	push   0x0
c0022ffd:	6a 00                	push   0x0
c0022fff:	56                   	push   esi
c0023000:	e8 7d fa ff ff       	call   c0022a82 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023005:	83 c4 10             	add    esp,0x10
c0023008:	a8 80                	test   al,0x80
c002300a:	75 21                	jne    c002302d <PCI::detect()+0x3d>
c002300c:	51                   	push   ecx
c002300d:	51                   	push   ecx
c002300e:	6a 00                	push   0x0
c0023010:	56                   	push   esi
c0023011:	e8 2c fc ff ff       	call   c0022c42 <PCI::checkBus(unsigned char)>
c0023016:	83 c4 10             	add    esp,0x10
c0023019:	eb 24                	jmp    c002303f <PCI::detect()+0x4f>
c002301b:	52                   	push   edx
c002301c:	52                   	push   edx
c002301d:	53                   	push   ebx
c002301e:	43                   	inc    ebx
c002301f:	56                   	push   esi
c0023020:	e8 1d fc ff ff       	call   c0022c42 <PCI::checkBus(unsigned char)>
c0023025:	83 c4 10             	add    esp,0x10
c0023028:	83 fb 08             	cmp    ebx,0x8
c002302b:	74 12                	je     c002303f <PCI::detect()+0x4f>
c002302d:	53                   	push   ebx
c002302e:	6a 00                	push   0x0
c0023030:	6a 00                	push   0x0
c0023032:	56                   	push   esi
c0023033:	e8 28 fa ff ff       	call   c0022a60 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023038:	83 c4 10             	add    esp,0x10
c002303b:	66 40                	inc    ax
c002303d:	74 dc                	je     c002301b <PCI::detect()+0x2b>
c002303f:	58                   	pop    eax
c0023040:	5b                   	pop    ebx
c0023041:	5e                   	pop    esi
c0023042:	c3                   	ret    
c0023043:	90                   	nop

c0023044 <IDE::close(int, int, void*)>:
c0023044:	83 c8 ff             	or     eax,0xffffffff
c0023047:	c3                   	ret    

c0023048 <IDE::IDE()>:
c0023048:	83 ec 0c             	sub    esp,0xc
c002304b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002304f:	83 ec 08             	sub    esp,0x8
c0023052:	68 c8 cc 02 c0       	push   0xc002ccc8
c0023057:	50                   	push   eax
c0023058:	e8 23 17 ff ff       	call   c0014780 <HardDiskController::HardDiskController(char const*)>
c002305d:	83 c4 10             	add    esp,0x10
c0023060:	ba 08 cf 02 c0       	mov    edx,0xc002cf08
c0023065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023069:	89 10                	mov    DWORD PTR [eax],edx
c002306b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002306f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023076:	90                   	nop
c0023077:	83 c4 0c             	add    esp,0xc
c002307a:	c3                   	ret    
c002307b:	90                   	nop

c002307c <IDE::prepareInterrupt(unsigned char)>:
c002307c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023081:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023085:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002308d:	c3                   	ret    

c002308e <selectDrive(unsigned char, unsigned char)>:
c002308e:	c3                   	ret    
c002308f:	90                   	nop

c0023090 <IDE::getBase(unsigned char)>:
c0023090:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023095:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023099:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00230a1:	c3                   	ret    

c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00230a2:	55                   	push   ebp
c00230a3:	57                   	push   edi
c00230a4:	56                   	push   esi
c00230a5:	53                   	push   ebx
c00230a6:	83 ec 1c             	sub    esp,0x1c
c00230a9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230ad:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230b1:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00230b4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00230b8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00230bc:	80 f9 03             	cmp    cl,0x3
c00230bf:	77 51                	ja     c0023112 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00230c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00230c5:	0f b6 f2             	movzx  esi,dl
c00230c8:	0f b6 db             	movzx  ebx,bl
c00230cb:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230ce:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00230d2:	83 ca 80             	or     edx,0xffffff80
c00230d5:	0f b6 d2             	movzx  edx,dl
c00230d8:	52                   	push   edx
c00230d9:	6a 0c                	push   0xc
c00230db:	56                   	push   esi
c00230dc:	57                   	push   edi
c00230dd:	e8 c0 ff ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230e2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00230e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00230eb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00230ef:	ee                   	out    dx,al
c00230f0:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00230f5:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00230f9:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00230fd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023101:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023109:	83 c4 2c             	add    esp,0x2c
c002310c:	5b                   	pop    ebx
c002310d:	5e                   	pop    esi
c002310e:	5f                   	pop    edi
c002310f:	5d                   	pop    ebp
c0023110:	eb 90                	jmp    c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023112:	80 fb 07             	cmp    bl,0x7
c0023115:	77 12                	ja     c0023129 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023117:	0f b6 d2             	movzx  edx,dl
c002311a:	0f b6 db             	movzx  ebx,bl
c002311d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023125:	89 da                	mov    edx,ebx
c0023127:	eb 2f                	jmp    c0023158 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023129:	80 fb 0d             	cmp    bl,0xd
c002312c:	77 13                	ja     c0023141 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002312e:	0f b6 d2             	movzx  edx,dl
c0023131:	0f b6 db             	movzx  ebx,bl
c0023134:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002313b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002313f:	eb 17                	jmp    c0023158 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023141:	80 fb 15             	cmp    bl,0x15
c0023144:	77 13                	ja     c0023159 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023146:	0f b6 d2             	movzx  edx,dl
c0023149:	0f b6 db             	movzx  ebx,bl
c002314c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023154:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023158:	ee                   	out    dx,al
c0023159:	83 c4 1c             	add    esp,0x1c
c002315c:	5b                   	pop    ebx
c002315d:	5e                   	pop    esi
c002315e:	5f                   	pop    edi
c002315f:	5d                   	pop    ebp
c0023160:	c3                   	ret    
c0023161:	90                   	nop

c0023162 <IDE::read(unsigned char, unsigned char)>:
c0023162:	55                   	push   ebp
c0023163:	57                   	push   edi
c0023164:	56                   	push   esi
c0023165:	53                   	push   ebx
c0023166:	83 ec 1c             	sub    esp,0x1c
c0023169:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002316d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023171:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023174:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023178:	3c 03                	cmp    al,0x3
c002317a:	77 43                	ja     c00231bf <IDE::read(unsigned char, unsigned char)+0x5d>
c002317c:	0f b6 f2             	movzx  esi,dl
c002317f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023182:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023186:	83 c8 80             	or     eax,0xffffff80
c0023189:	0f b6 c0             	movzx  eax,al
c002318c:	50                   	push   eax
c002318d:	6a 0c                	push   0xc
c002318f:	56                   	push   esi
c0023190:	57                   	push   edi
c0023191:	e8 0c ff ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023196:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002319b:	0f b6 c3             	movzx  eax,bl
c002319e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00231a2:	ec                   	in     al,dx
c00231a3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00231a7:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00231ac:	52                   	push   edx
c00231ad:	6a 0c                	push   0xc
c00231af:	56                   	push   esi
c00231b0:	57                   	push   edi
c00231b1:	e8 ec fe ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231b6:	83 c4 20             	add    esp,0x20
c00231b9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00231bd:	eb 49                	jmp    c0023208 <IDE::read(unsigned char, unsigned char)+0xa6>
c00231bf:	80 fb 07             	cmp    bl,0x7
c00231c2:	77 12                	ja     c00231d6 <IDE::read(unsigned char, unsigned char)+0x74>
c00231c4:	0f b6 d2             	movzx  edx,dl
c00231c7:	0f b6 c3             	movzx  eax,bl
c00231ca:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00231d2:	89 c2                	mov    edx,eax
c00231d4:	eb 31                	jmp    c0023207 <IDE::read(unsigned char, unsigned char)+0xa5>
c00231d6:	80 fb 0d             	cmp    bl,0xd
c00231d9:	77 13                	ja     c00231ee <IDE::read(unsigned char, unsigned char)+0x8c>
c00231db:	0f b6 d2             	movzx  edx,dl
c00231de:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00231e5:	0f b6 d3             	movzx  edx,bl
c00231e8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00231ec:	eb 19                	jmp    c0023207 <IDE::read(unsigned char, unsigned char)+0xa5>
c00231ee:	31 c0                	xor    eax,eax
c00231f0:	80 fb 15             	cmp    bl,0x15
c00231f3:	77 13                	ja     c0023208 <IDE::read(unsigned char, unsigned char)+0xa6>
c00231f5:	0f b6 d2             	movzx  edx,dl
c00231f8:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023200:	0f b6 d3             	movzx  edx,bl
c0023203:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023207:	ec                   	in     al,dx
c0023208:	83 c4 1c             	add    esp,0x1c
c002320b:	5b                   	pop    ebx
c002320c:	5e                   	pop    esi
c002320d:	5f                   	pop    edi
c002320e:	5d                   	pop    ebp
c002320f:	c3                   	ret    

c0023210 <IDE::waitInterrupt(unsigned char)>:
c0023210:	55                   	push   ebp
c0023211:	57                   	push   edi
c0023212:	56                   	push   esi
c0023213:	53                   	push   ebx
c0023214:	31 db                	xor    ebx,ebx
c0023216:	83 ec 0c             	sub    esp,0xc
c0023219:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002321d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023222:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002322a:	89 e8                	mov    eax,ebp
c002322c:	84 c0                	test   al,al
c002322e:	75 34                	jne    c0023264 <IDE::waitInterrupt(unsigned char)+0x54>
c0023230:	52                   	push   edx
c0023231:	6a 0c                	push   0xc
c0023233:	56                   	push   esi
c0023234:	57                   	push   edi
c0023235:	e8 28 ff ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c002323a:	83 c4 10             	add    esp,0x10
c002323d:	a8 01                	test   al,0x1
c002323f:	75 2b                	jne    c002326c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023241:	f6 c3 04             	test   bl,0x4
c0023244:	75 16                	jne    c002325c <IDE::waitInterrupt(unsigned char)+0x4c>
c0023246:	83 fb 32             	cmp    ebx,0x32
c0023249:	7e 11                	jle    c002325c <IDE::waitInterrupt(unsigned char)+0x4c>
c002324b:	50                   	push   eax
c002324c:	50                   	push   eax
c002324d:	6a 00                	push   0x0
c002324f:	68 80 96 98 00       	push   0x989680
c0023254:	e8 8b b1 ff ff       	call   c001e3e4 <nanoSleep(unsigned long long)>
c0023259:	83 c4 10             	add    esp,0x10
c002325c:	83 fb 3c             	cmp    ebx,0x3c
c002325f:	74 0b                	je     c002326c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023261:	43                   	inc    ebx
c0023262:	eb be                	jmp    c0023222 <IDE::waitInterrupt(unsigned char)+0x12>
c0023264:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002326c:	83 c4 0c             	add    esp,0xc
c002326f:	89 e8                	mov    eax,ebp
c0023271:	5b                   	pop    ebx
c0023272:	5e                   	pop    esi
c0023273:	5f                   	pop    edi
c0023274:	5d                   	pop    ebp
c0023275:	c3                   	ret    

c0023276 <ideChannel0IRQHandler(regs*, void*)>:
c0023276:	83 ec 10             	sub    esp,0x10
c0023279:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002327d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023284:	6a 07                	push   0x7
c0023286:	6a 00                	push   0x0
c0023288:	50                   	push   eax
c0023289:	e8 d4 fe ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c002328e:	83 c4 1c             	add    esp,0x1c
c0023291:	c3                   	ret    

c0023292 <ideChannel1IRQHandler(regs*, void*)>:
c0023292:	83 ec 10             	sub    esp,0x10
c0023295:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023299:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00232a0:	6a 07                	push   0x7
c00232a2:	6a 01                	push   0x1
c00232a4:	50                   	push   eax
c00232a5:	e8 b8 fe ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c00232aa:	83 c4 1c             	add    esp,0x1c
c00232ad:	c3                   	ret    

c00232ae <IDE::enableIRQs(unsigned char, bool)>:
c00232ae:	57                   	push   edi
c00232af:	56                   	push   esi
c00232b0:	be 04 00 00 00       	mov    esi,0x4
c00232b5:	53                   	push   ebx
c00232b6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00232bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00232bf:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00232c4:	0f 94 c0             	sete   al
c00232c7:	d1 e0                	shl    eax,1
c00232c9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00232d0:	0f b6 c0             	movzx  eax,al
c00232d3:	50                   	push   eax
c00232d4:	6a 0c                	push   0xc
c00232d6:	57                   	push   edi
c00232d7:	53                   	push   ebx
c00232d8:	e8 c5 fd ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232dd:	83 c4 10             	add    esp,0x10
c00232e0:	50                   	push   eax
c00232e1:	6a 0c                	push   0xc
c00232e3:	57                   	push   edi
c00232e4:	53                   	push   ebx
c00232e5:	e8 78 fe ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c00232ea:	83 c4 10             	add    esp,0x10
c00232ed:	4e                   	dec    esi
c00232ee:	75 f0                	jne    c00232e0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00232f0:	5b                   	pop    ebx
c00232f1:	5e                   	pop    esi
c00232f2:	5f                   	pop    edi
c00232f3:	c3                   	ret    

c00232f4 <IDE::open(int, int, void*)>:
c00232f4:	55                   	push   ebp
c00232f5:	57                   	push   edi
c00232f6:	56                   	push   esi
c00232f7:	53                   	push   ebx
c00232f8:	83 ec 1c             	sub    esp,0x1c
c00232fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00232ff:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023308:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023311:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023318:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002331f:	0f 85 b0 02 00 00    	jne    c00235d5 <IDE::open(int, int, void*)+0x2e1>
c0023325:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002332b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002332f:	83 e0 7f             	and    eax,0x7f
c0023332:	3c 05                	cmp    al,0x5
c0023334:	74 04                	je     c002333a <IDE::open(int, int, void*)+0x46>
c0023336:	3c 0f                	cmp    al,0xf
c0023338:	75 32                	jne    c002336c <IDE::open(int, int, void*)+0x78>
c002333a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023340:	83 e0 fc             	and    eax,0xfffffffc
c0023343:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002334a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023350:	83 e0 fc             	and    eax,0xfffffffc
c0023353:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002335a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023360:	83 e0 fc             	and    eax,0xfffffffc
c0023363:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002336a:	eb 14                	jmp    c0023380 <IDE::open(int, int, void*)+0x8c>
c002336c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023376:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023380:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023387:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002338e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023392:	89 c6                	mov    esi,eax
c0023394:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023399:	c1 e6 10             	shl    esi,0x10
c002339c:	89 e8                	mov    eax,ebp
c002339e:	89 fa                	mov    edx,edi
c00233a0:	c1 e0 0b             	shl    eax,0xb
c00233a3:	09 f0                	or     eax,esi
c00233a5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00233ac:	c1 e6 08             	shl    esi,0x8
c00233af:	09 c6                	or     esi,eax
c00233b1:	89 f0                	mov    eax,esi
c00233b3:	0d 08 00 00 80       	or     eax,0x80000008
c00233b8:	ef                   	out    dx,eax
c00233b9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00233be:	89 ca                	mov    edx,ecx
c00233c0:	ed                   	in     eax,dx
c00233c1:	c1 e8 10             	shr    eax,0x10
c00233c4:	3d ff ff 00 00       	cmp    eax,0xffff
c00233c9:	0f 84 f5 00 00 00    	je     c00234c4 <IDE::open(int, int, void*)+0x1d0>
c00233cf:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00233d5:	89 fa                	mov    edx,edi
c00233d7:	89 f0                	mov    eax,esi
c00233d9:	ef                   	out    dx,eax
c00233da:	b0 fe                	mov    al,0xfe
c00233dc:	89 ca                	mov    edx,ecx
c00233de:	ee                   	out    dx,al
c00233df:	89 f0                	mov    eax,esi
c00233e1:	89 fa                	mov    edx,edi
c00233e3:	ef                   	out    dx,eax
c00233e4:	89 ca                	mov    edx,ecx
c00233e6:	ed                   	in     eax,dx
c00233e7:	3c fe                	cmp    al,0xfe
c00233e9:	0f 85 a9 00 00 00    	jne    c0023498 <IDE::open(int, int, void*)+0x1a4>
c00233ef:	8b 15 48 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e648
c00233f5:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00233fc:	74 33                	je     c0023431 <IDE::open(int, int, void*)+0x13d>
c00233fe:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023404:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023408:	40                   	inc    eax
c0023409:	83 ec 0c             	sub    esp,0xc
c002340c:	0f b6 c0             	movzx  eax,al
c002340f:	50                   	push   eax
c0023410:	55                   	push   ebp
c0023411:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023415:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002341b:	51                   	push   ecx
c002341c:	e8 a7 4e ff ff       	call   c00182c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023421:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023426:	83 c4 1c             	add    esp,0x1c
c0023429:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002342f:	eb 0a                	jmp    c002343b <IDE::open(int, int, void*)+0x147>
c0023431:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002343b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023442:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023449:	c1 e1 10             	shl    ecx,0x10
c002344c:	c1 e0 08             	shl    eax,0x8
c002344f:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023454:	09 c1                	or     ecx,eax
c0023456:	89 fa                	mov    edx,edi
c0023458:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002345f:	c1 e0 0b             	shl    eax,0xb
c0023462:	09 c1                	or     ecx,eax
c0023464:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002346a:	89 c8                	mov    eax,ecx
c002346c:	ef                   	out    dx,eax
c002346d:	be fc 0c 00 00       	mov    esi,0xcfc
c0023472:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023478:	89 f2                	mov    edx,esi
c002347a:	ee                   	out    dx,al
c002347b:	89 c8                	mov    eax,ecx
c002347d:	89 fa                	mov    edx,edi
c002347f:	ef                   	out    dx,eax
c0023480:	89 f2                	mov    edx,esi
c0023482:	ed                   	in     eax,dx
c0023483:	0f b6 c0             	movzx  eax,al
c0023486:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002348c:	74 46                	je     c00234d4 <IDE::open(int, int, void*)+0x1e0>
c002348e:	83 ec 0c             	sub    esp,0xc
c0023491:	68 e0 cc 02 c0       	push   0xc002cce0
c0023496:	eb 34                	jmp    c00234cc <IDE::open(int, int, void*)+0x1d8>
c0023498:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00234a1:	75 17                	jne    c00234ba <IDE::open(int, int, void*)+0x1c6>
c00234a3:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00234a8:	74 07                	je     c00234b1 <IDE::open(int, int, void*)+0x1bd>
c00234aa:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00234af:	75 09                	jne    c00234ba <IDE::open(int, int, void*)+0x1c6>
c00234b1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00234b8:	eb 1a                	jmp    c00234d4 <IDE::open(int, int, void*)+0x1e0>
c00234ba:	83 ec 0c             	sub    esp,0xc
c00234bd:	68 e8 cc 02 c0       	push   0xc002cce8
c00234c2:	eb 08                	jmp    c00234cc <IDE::open(int, int, void*)+0x1d8>
c00234c4:	83 ec 0c             	sub    esp,0xc
c00234c7:	68 19 cd 02 c0       	push   0xc002cd19
c00234cc:	e8 9e 71 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c00234d1:	83 c4 10             	add    esp,0x10
c00234d4:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00234db:	79 1a                	jns    c00234f7 <IDE::open(int, int, void*)+0x203>
c00234dd:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00234e3:	83 e0 fc             	and    eax,0xfffffffc
c00234e6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00234ed:	83 c0 08             	add    eax,0x8
c00234f0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00234f7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00234fd:	89 c2                	mov    edx,eax
c00234ff:	83 e2 0f             	and    edx,0xf
c0023502:	66 83 fa 08          	cmp    dx,0x8
c0023506:	75 0a                	jne    c0023512 <IDE::open(int, int, void*)+0x21e>
c0023508:	83 e8 02             	sub    eax,0x2
c002350b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023512:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023518:	89 c2                	mov    edx,eax
c002351a:	83 e2 0f             	and    edx,0xf
c002351d:	66 83 fa 08          	cmp    dx,0x8
c0023521:	75 0a                	jne    c002352d <IDE::open(int, int, void*)+0x239>
c0023523:	83 e8 02             	sub    eax,0x2
c0023526:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002352d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023534:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002353b:	89 d0                	mov    eax,edx
c002353d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023540:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023544:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023548:	8d 4a 01             	lea    ecx,[edx+0x1]
c002354b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023550:	0f b6 c9             	movzx  ecx,cl
c0023553:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002355a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002355d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023561:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023565:	8d 50 02             	lea    edx,[eax+0x2]
c0023568:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002356d:	0f b6 d2             	movzx  edx,dl
c0023570:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023576:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023579:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002357d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023581:	8d 48 03             	lea    ecx,[eax+0x3]
c0023584:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023589:	0f b6 c9             	movzx  ecx,cl
c002358c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023592:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023595:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023599:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002359d:	8d 50 04             	lea    edx,[eax+0x4]
c00235a0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00235a6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00235ab:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00235b2:	66 85 f6             	test   si,si
c00235b5:	74 3e                	je     c00235f5 <IDE::open(int, int, void*)+0x301>
c00235b7:	0f b6 d2             	movzx  edx,dl
c00235ba:	83 c0 05             	add    eax,0x5
c00235bd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00235c0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00235c4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00235c8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00235ce:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00235d3:	eb 20                	jmp    c00235f5 <IDE::open(int, int, void*)+0x301>
c00235d5:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00235df:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00235e9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00235f0:	e9 02 ff ff ff       	jmp    c00234f7 <IDE::open(int, int, void*)+0x203>
c00235f5:	52                   	push   edx
c00235f6:	52                   	push   edx
c00235f7:	6a 00                	push   0x0
c00235f9:	53                   	push   ebx
c00235fa:	e8 7d fa ff ff       	call   c002307c <IDE::prepareInterrupt(unsigned char)>
c00235ff:	59                   	pop    ecx
c0023600:	5e                   	pop    esi
c0023601:	6a 01                	push   0x1
c0023603:	53                   	push   ebx
c0023604:	e8 73 fa ff ff       	call   c002307c <IDE::prepareInterrupt(unsigned char)>
c0023609:	83 c4 0c             	add    esp,0xc
c002360c:	6a 00                	push   0x0
c002360e:	6a 00                	push   0x0
c0023610:	53                   	push   ebx
c0023611:	e8 98 fc ff ff       	call   c00232ae <IDE::enableIRQs(unsigned char, bool)>
c0023616:	83 c4 0c             	add    esp,0xc
c0023619:	6a 00                	push   0x0
c002361b:	6a 01                	push   0x1
c002361d:	53                   	push   ebx
c002361e:	e8 8b fc ff ff       	call   c00232ae <IDE::enableIRQs(unsigned char, bool)>
c0023623:	83 c4 10             	add    esp,0x10
c0023626:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002362d:	74 40                	je     c002366f <IDE::open(int, int, void*)+0x37b>
c002362f:	83 ec 0c             	sub    esp,0xc
c0023632:	68 43 cd 02 c0       	push   0xc002cd43
c0023637:	e8 91 f9 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c002363c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002363f:	6a 01                	push   0x1
c0023641:	68 76 32 02 c0       	push   0xc0023276
c0023646:	6a 0e                	push   0xe
c0023648:	53                   	push   ebx
c0023649:	e8 2a 0d ff ff       	call   c0014378 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002364e:	83 c4 14             	add    esp,0x14
c0023651:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023657:	53                   	push   ebx
c0023658:	6a 01                	push   0x1
c002365a:	68 92 32 02 c0       	push   0xc0023292
c002365f:	6a 0f                	push   0xf
c0023661:	53                   	push   ebx
c0023662:	e8 11 0d ff ff       	call   c0014378 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023667:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002366d:	eb 4a                	jmp    c00236b9 <IDE::open(int, int, void*)+0x3c5>
c002366f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023679:	50                   	push   eax
c002367a:	6a 0f                	push   0xf
c002367c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023682:	68 5f cd 02 c0       	push   0xc002cd5f
c0023687:	e8 41 f9 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c002368c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002368f:	6a 00                	push   0x0
c0023691:	68 76 32 02 c0       	push   0xc0023276
c0023696:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002369c:	53                   	push   ebx
c002369d:	e8 d6 0c ff ff       	call   c0014378 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236a2:	83 c4 14             	add    esp,0x14
c00236a5:	53                   	push   ebx
c00236a6:	6a 00                	push   0x0
c00236a8:	68 92 32 02 c0       	push   0xc0023292
c00236ad:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00236b3:	53                   	push   ebx
c00236b4:	e8 bf 0c ff ff       	call   c0014378 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00236bb:	83 c4 20             	add    esp,0x20
c00236be:	83 ec 0c             	sub    esp,0xc
c00236c1:	53                   	push   ebx
c00236c2:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00236c5:	83 c4 0c             	add    esp,0xc
c00236c8:	6a 07                	push   0x7
c00236ca:	6a 00                	push   0x0
c00236cc:	53                   	push   ebx
c00236cd:	e8 90 fa ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c00236d2:	83 c4 0c             	add    esp,0xc
c00236d5:	6a 07                	push   0x7
c00236d7:	6a 01                	push   0x1
c00236d9:	53                   	push   ebx
c00236da:	e8 83 fa ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c00236df:	83 c4 0c             	add    esp,0xc
c00236e2:	6a 01                	push   0x1
c00236e4:	6a 00                	push   0x0
c00236e6:	53                   	push   ebx
c00236e7:	e8 c2 fb ff ff       	call   c00232ae <IDE::enableIRQs(unsigned char, bool)>
c00236ec:	83 c4 0c             	add    esp,0xc
c00236ef:	6a 01                	push   0x1
c00236f1:	6a 01                	push   0x1
c00236f3:	53                   	push   ebx
c00236f4:	e8 b5 fb ff ff       	call   c00232ae <IDE::enableIRQs(unsigned char, bool)>
c00236f9:	83 c4 2c             	add    esp,0x2c
c00236fc:	31 c0                	xor    eax,eax
c00236fe:	5b                   	pop    ebx
c00236ff:	5e                   	pop    esi
c0023700:	5f                   	pop    edi
c0023701:	5d                   	pop    ebp
c0023702:	c3                   	ret    
c0023703:	90                   	nop

c0023704 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023704:	55                   	push   ebp
c0023705:	57                   	push   edi
c0023706:	56                   	push   esi
c0023707:	53                   	push   ebx
c0023708:	83 ec 1c             	sub    esp,0x1c
c002370b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002370f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023713:	8d 50 f8             	lea    edx,[eax-0x8]
c0023716:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002371a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002371e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023722:	80 fa 03             	cmp    dl,0x3
c0023725:	77 5d                	ja     c0023784 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023727:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002372b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002372f:	0f b6 db             	movzx  ebx,bl
c0023732:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023735:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023739:	83 ca 80             	or     edx,0xffffff80
c002373c:	0f b6 d2             	movzx  edx,dl
c002373f:	52                   	push   edx
c0023740:	6a 0c                	push   0xc
c0023742:	53                   	push   ebx
c0023743:	56                   	push   esi
c0023744:	e8 59 f9 ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023749:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002374e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023752:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023756:	0f b6 c0             	movzx  eax,al
c0023759:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002375d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002375f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023764:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023768:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002376c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023770:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023778:	83 c4 2c             	add    esp,0x2c
c002377b:	5b                   	pop    ebx
c002377c:	5e                   	pop    esi
c002377d:	5f                   	pop    edi
c002377e:	5d                   	pop    ebp
c002377f:	e9 1e f9 ff ff       	jmp    c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023784:	3c 07                	cmp    al,0x7
c0023786:	77 10                	ja     c0023798 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023788:	0f b6 db             	movzx  ebx,bl
c002378b:	0f b6 d0             	movzx  edx,al
c002378e:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023796:	eb 2d                	jmp    c00237c5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023798:	3c 0d                	cmp    al,0xd
c002379a:	77 13                	ja     c00237af <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002379c:	0f b6 db             	movzx  ebx,bl
c002379f:	0f b6 c0             	movzx  eax,al
c00237a2:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00237a9:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00237ad:	eb 16                	jmp    c00237c5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00237af:	3c 15                	cmp    al,0x15
c00237b1:	77 14                	ja     c00237c7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00237b3:	0f b6 db             	movzx  ebx,bl
c00237b6:	0f b6 c0             	movzx  eax,al
c00237b9:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00237c1:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00237c5:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00237c7:	83 c4 1c             	add    esp,0x1c
c00237ca:	5b                   	pop    ebx
c00237cb:	5e                   	pop    esi
c00237cc:	5f                   	pop    edi
c00237cd:	5d                   	pop    ebp
c00237ce:	c3                   	ret    
c00237cf:	90                   	nop

c00237d0 <IDE::detect()>:
c00237d0:	55                   	push   ebp
c00237d1:	57                   	push   edi
c00237d2:	56                   	push   esi
c00237d3:	53                   	push   ebx
c00237d4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00237da:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00237e1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00237e8:	0f 85 be 02 00 00    	jne    c0023aac <IDE::detect()+0x2dc>
c00237ee:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00237f5:	31 f6                	xor    esi,esi
c00237f7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00237ff:	31 ed                	xor    ebp,ebp
c0023801:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023805:	c1 e0 06             	shl    eax,0x6
c0023808:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023810:	89 e8                	mov    eax,ebp
c0023812:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023816:	c1 e0 04             	shl    eax,0x4
c0023819:	83 c8 a0             	or     eax,0xffffffa0
c002381c:	0f b6 c0             	movzx  eax,al
c002381f:	50                   	push   eax
c0023820:	6a 06                	push   0x6
c0023822:	56                   	push   esi
c0023823:	53                   	push   ebx
c0023824:	e8 79 f8 ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023829:	83 c4 0c             	add    esp,0xc
c002382c:	6a 0c                	push   0xc
c002382e:	56                   	push   esi
c002382f:	53                   	push   ebx
c0023830:	e8 2d f9 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c0023835:	83 c4 0c             	add    esp,0xc
c0023838:	6a 0c                	push   0xc
c002383a:	56                   	push   esi
c002383b:	53                   	push   ebx
c002383c:	e8 21 f9 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c0023841:	83 c4 0c             	add    esp,0xc
c0023844:	6a 0c                	push   0xc
c0023846:	56                   	push   esi
c0023847:	53                   	push   ebx
c0023848:	e8 15 f9 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c002384d:	83 c4 0c             	add    esp,0xc
c0023850:	6a 0c                	push   0xc
c0023852:	56                   	push   esi
c0023853:	53                   	push   ebx
c0023854:	e8 09 f9 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c0023859:	68 ec 00 00 00       	push   0xec
c002385e:	6a 07                	push   0x7
c0023860:	56                   	push   esi
c0023861:	53                   	push   ebx
c0023862:	e8 3b f8 ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023867:	83 c4 1c             	add    esp,0x1c
c002386a:	6a 0c                	push   0xc
c002386c:	56                   	push   esi
c002386d:	53                   	push   ebx
c002386e:	e8 ef f8 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c0023873:	83 c4 0c             	add    esp,0xc
c0023876:	6a 0c                	push   0xc
c0023878:	56                   	push   esi
c0023879:	53                   	push   ebx
c002387a:	e8 e3 f8 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c002387f:	83 c4 0c             	add    esp,0xc
c0023882:	6a 0c                	push   0xc
c0023884:	56                   	push   esi
c0023885:	53                   	push   ebx
c0023886:	e8 d7 f8 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c002388b:	83 c4 0c             	add    esp,0xc
c002388e:	6a 0c                	push   0xc
c0023890:	56                   	push   esi
c0023891:	53                   	push   ebx
c0023892:	e8 cb f8 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c0023897:	83 c4 0c             	add    esp,0xc
c002389a:	6a 0c                	push   0xc
c002389c:	56                   	push   esi
c002389d:	53                   	push   ebx
c002389e:	e8 bf f8 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c00238a3:	83 c4 10             	add    esp,0x10
c00238a6:	84 c0                	test   al,al
c00238a8:	0f 84 8b 01 00 00    	je     c0023a39 <IDE::detect()+0x269>
c00238ae:	31 ff                	xor    edi,edi
c00238b0:	50                   	push   eax
c00238b1:	6a 0c                	push   0xc
c00238b3:	56                   	push   esi
c00238b4:	53                   	push   ebx
c00238b5:	e8 a8 f8 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c00238ba:	83 c4 10             	add    esp,0x10
c00238bd:	a8 01                	test   al,0x1
c00238bf:	0f 85 8e 01 00 00    	jne    c0023a53 <IDE::detect()+0x283>
c00238c5:	84 c0                	test   al,al
c00238c7:	78 04                	js     c00238cd <IDE::detect()+0xfd>
c00238c9:	a8 08                	test   al,0x8
c00238cb:	75 27                	jne    c00238f4 <IDE::detect()+0x124>
c00238cd:	47                   	inc    edi
c00238ce:	81 ff 17 01 00 00    	cmp    edi,0x117
c00238d4:	7e da                	jle    c00238b0 <IDE::detect()+0xe0>
c00238d6:	50                   	push   eax
c00238d7:	50                   	push   eax
c00238d8:	6a 00                	push   0x0
c00238da:	68 40 4b 4c 00       	push   0x4c4b40
c00238df:	e8 00 ab ff ff       	call   c001e3e4 <nanoSleep(unsigned long long)>
c00238e4:	83 c4 10             	add    esp,0x10
c00238e7:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00238ed:	75 c1                	jne    c00238b0 <IDE::detect()+0xe0>
c00238ef:	e9 5f 01 00 00       	jmp    c0023a53 <IDE::detect()+0x283>
c00238f4:	31 c9                	xor    ecx,ecx
c00238f6:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00238fa:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00238fe:	83 ec 0c             	sub    esp,0xc
c0023901:	68 80 00 00 00       	push   0x80
c0023906:	57                   	push   edi
c0023907:	6a 00                	push   0x0
c0023909:	56                   	push   esi
c002390a:	53                   	push   ebx
c002390b:	e8 f4 fd ff ff       	call   c0023704 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023910:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023915:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023919:	89 d1                	mov    ecx,edx
c002391b:	c1 e0 06             	shl    eax,0x6
c002391e:	01 d8                	add    eax,ebx
c0023920:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023927:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002392e:	89 f2                	mov    edx,esi
c0023930:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023936:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002393a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023940:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023944:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002394b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023953:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002395a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023962:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023968:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002396f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023975:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023979:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002397d:	83 c4 20             	add    esp,0x20
c0023980:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023983:	83 c0 02             	add    eax,0x2
c0023986:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002398c:	83 c7 02             	add    edi,0x2
c002398f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023992:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023998:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002399c:	75 e2                	jne    c0023980 <IDE::detect()+0x1b0>
c002399e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239a2:	c1 e0 06             	shl    eax,0x6
c00239a5:	01 d8                	add    eax,ebx
c00239a7:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00239ad:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00239b4:	66 c1 ea 09          	shr    dx,0x9
c00239b8:	83 e2 01             	and    edx,0x1
c00239bb:	84 c9                	test   cl,cl
c00239bd:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00239c3:	75 2f                	jne    c00239f4 <IDE::detect()+0x224>
c00239c5:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00239cb:	85 c0                	test   eax,eax
c00239cd:	74 66                	je     c0023a35 <IDE::detect()+0x265>
c00239cf:	50                   	push   eax
c00239d0:	55                   	push   ebp
c00239d1:	56                   	push   esi
c00239d2:	68 7b cd 02 c0       	push   0xc002cd7b
c00239d7:	e8 f1 f5 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c00239dc:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00239e3:	e8 58 be fe ff       	call   c000f840 <malloc>
c00239e8:	89 c7                	mov    edi,eax
c00239ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00239ed:	e8 78 06 00 00       	call   c002406a <ATA::ATA()>
c00239f2:	eb 28                	jmp    c0023a1c <IDE::detect()+0x24c>
c00239f4:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00239fa:	55                   	push   ebp
c00239fb:	56                   	push   esi
c00239fc:	68 aa cd 02 c0       	push   0xc002cdaa
c0023a01:	e8 c7 f5 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0023a06:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023a0d:	e8 2e be fe ff       	call   c000f840 <malloc>
c0023a12:	89 c7                	mov    edi,eax
c0023a14:	89 04 24             	mov    DWORD PTR [esp],eax
c0023a17:	e8 8e 0c 00 00       	call   c00246aa <ATAPI::ATAPI()>
c0023a1c:	5a                   	pop    edx
c0023a1d:	59                   	pop    ecx
c0023a1e:	57                   	push   edi
c0023a1f:	53                   	push   ebx
c0023a20:	e8 cf 09 ff ff       	call   c00143f4 <Device::addChild(Device*)>
c0023a25:	8b 07                	mov    eax,DWORD PTR [edi]
c0023a27:	53                   	push   ebx
c0023a28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023a2c:	6a 00                	push   0x0
c0023a2e:	57                   	push   edi
c0023a2f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023a32:	83 c4 20             	add    esp,0x20
c0023a35:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023a39:	4d                   	dec    ebp
c0023a3a:	74 0a                	je     c0023a46 <IDE::detect()+0x276>
c0023a3c:	bd 01 00 00 00       	mov    ebp,0x1
c0023a41:	e9 bb fd ff ff       	jmp    c0023801 <IDE::detect()+0x31>
c0023a46:	4e                   	dec    esi
c0023a47:	74 63                	je     c0023aac <IDE::detect()+0x2dc>
c0023a49:	be 01 00 00 00       	mov    esi,0x1
c0023a4e:	e9 ac fd ff ff       	jmp    c00237ff <IDE::detect()+0x2f>
c0023a53:	50                   	push   eax
c0023a54:	6a 04                	push   0x4
c0023a56:	56                   	push   esi
c0023a57:	53                   	push   ebx
c0023a58:	e8 05 f7 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c0023a5d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023a61:	83 c4 0c             	add    esp,0xc
c0023a64:	6a 05                	push   0x5
c0023a66:	56                   	push   esi
c0023a67:	53                   	push   ebx
c0023a68:	e8 f5 f6 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c0023a6d:	83 c4 10             	add    esp,0x10
c0023a70:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023a74:	80 fa 14             	cmp    dl,0x14
c0023a77:	75 04                	jne    c0023a7d <IDE::detect()+0x2ad>
c0023a79:	3c eb                	cmp    al,0xeb
c0023a7b:	eb 07                	jmp    c0023a84 <IDE::detect()+0x2b4>
c0023a7d:	3c 96                	cmp    al,0x96
c0023a7f:	75 b8                	jne    c0023a39 <IDE::detect()+0x269>
c0023a81:	80 fa 69             	cmp    dl,0x69
c0023a84:	75 b3                	jne    c0023a39 <IDE::detect()+0x269>
c0023a86:	68 a1 00 00 00       	push   0xa1
c0023a8b:	6a 07                	push   0x7
c0023a8d:	56                   	push   esi
c0023a8e:	53                   	push   ebx
c0023a8f:	e8 0e f6 ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a94:	5f                   	pop    edi
c0023a95:	58                   	pop    eax
c0023a96:	6a 00                	push   0x0
c0023a98:	68 40 42 0f 00       	push   0xf4240
c0023a9d:	e8 42 a9 ff ff       	call   c001e3e4 <nanoSleep(unsigned long long)>
c0023aa2:	83 c4 10             	add    esp,0x10
c0023aa5:	b1 01                	mov    cl,0x1
c0023aa7:	e9 4a fe ff ff       	jmp    c00238f6 <IDE::detect()+0x126>
c0023aac:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023ab2:	5b                   	pop    ebx
c0023ab3:	5e                   	pop    esi
c0023ab4:	5f                   	pop    edi
c0023ab5:	5d                   	pop    ebp
c0023ab6:	c3                   	ret    
c0023ab7:	90                   	nop

c0023ab8 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023ab8:	55                   	push   ebp
c0023ab9:	57                   	push   edi
c0023aba:	56                   	push   esi
c0023abb:	53                   	push   ebx
c0023abc:	83 ec 1c             	sub    esp,0x1c
c0023abf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023ac3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023ac7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023acb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023acf:	88 c3                	mov    bl,al
c0023ad1:	84 c0                	test   al,al
c0023ad3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023ad7:	0f 84 67 01 00 00    	je     c0023c44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023add:	83 ec 0c             	sub    esp,0xc
c0023ae0:	68 db cd 02 c0       	push   0xc002cddb
c0023ae5:	e8 e3 f4 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0023aea:	83 c4 10             	add    esp,0x10
c0023aed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023af1:	3c 01                	cmp    al,0x1
c0023af3:	75 17                	jne    c0023b0c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023af5:	83 ec 0c             	sub    esp,0xc
c0023af8:	b3 13                	mov    bl,0x13
c0023afa:	68 e7 cd 02 c0       	push   0xc002cde7
c0023aff:	e8 c9 f4 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0023b04:	83 c4 10             	add    esp,0x10
c0023b07:	e9 25 01 00 00       	jmp    c0023c31 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b0c:	3c 02                	cmp    al,0x2
c0023b0e:	0f 85 ef 00 00 00    	jne    c0023c03 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023b14:	d1 e6                	shl    esi,1
c0023b16:	09 ee                	or     esi,ebp
c0023b18:	52                   	push   edx
c0023b19:	89 f0                	mov    eax,esi
c0023b1b:	6a 01                	push   0x1
c0023b1d:	0f b6 f0             	movzx  esi,al
c0023b20:	c1 e6 06             	shl    esi,0x6
c0023b23:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023b2b:	50                   	push   eax
c0023b2c:	57                   	push   edi
c0023b2d:	e8 30 f6 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c0023b32:	83 c4 10             	add    esp,0x10
c0023b35:	89 c6                	mov    esi,eax
c0023b37:	a8 01                	test   al,0x1
c0023b39:	74 12                	je     c0023b4d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023b3b:	83 ec 0c             	sub    esp,0xc
c0023b3e:	b3 07                	mov    bl,0x7
c0023b40:	68 fc cd 02 c0       	push   0xc002cdfc
c0023b45:	e8 83 f4 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0023b4a:	83 c4 10             	add    esp,0x10
c0023b4d:	f7 c6 02 00 00 00    	test   esi,0x2
c0023b53:	74 12                	je     c0023b67 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023b55:	83 ec 0c             	sub    esp,0xc
c0023b58:	b3 03                	mov    bl,0x3
c0023b5a:	68 1a ce 02 c0       	push   0xc002ce1a
c0023b5f:	e8 69 f4 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0023b64:	83 c4 10             	add    esp,0x10
c0023b67:	f7 c6 04 00 00 00    	test   esi,0x4
c0023b6d:	74 12                	je     c0023b81 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023b6f:	83 ec 0c             	sub    esp,0xc
c0023b72:	b3 14                	mov    bl,0x14
c0023b74:	68 3a ce 02 c0       	push   0xc002ce3a
c0023b79:	e8 4f f4 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0023b7e:	83 c4 10             	add    esp,0x10
c0023b81:	f7 c6 08 00 00 00    	test   esi,0x8
c0023b87:	74 12                	je     c0023b9b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023b89:	83 ec 0c             	sub    esp,0xc
c0023b8c:	b3 03                	mov    bl,0x3
c0023b8e:	68 1a ce 02 c0       	push   0xc002ce1a
c0023b93:	e8 35 f4 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0023b98:	83 c4 10             	add    esp,0x10
c0023b9b:	f7 c6 10 00 00 00    	test   esi,0x10
c0023ba1:	74 12                	je     c0023bb5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023ba3:	83 ec 0c             	sub    esp,0xc
c0023ba6:	b3 15                	mov    bl,0x15
c0023ba8:	68 52 ce 02 c0       	push   0xc002ce52
c0023bad:	e8 1b f4 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0023bb2:	83 c4 10             	add    esp,0x10
c0023bb5:	f7 c6 20 00 00 00    	test   esi,0x20
c0023bbb:	74 12                	je     c0023bcf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023bbd:	83 ec 0c             	sub    esp,0xc
c0023bc0:	b3 03                	mov    bl,0x3
c0023bc2:	68 1a ce 02 c0       	push   0xc002ce1a
c0023bc7:	e8 01 f4 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0023bcc:	83 c4 10             	add    esp,0x10
c0023bcf:	f7 c6 40 00 00 00    	test   esi,0x40
c0023bd5:	74 12                	je     c0023be9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023bd7:	83 ec 0c             	sub    esp,0xc
c0023bda:	b3 16                	mov    bl,0x16
c0023bdc:	68 6c ce 02 c0       	push   0xc002ce6c
c0023be1:	e8 e7 f3 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0023be6:	83 c4 10             	add    esp,0x10
c0023be9:	89 f0                	mov    eax,esi
c0023beb:	84 c0                	test   al,al
c0023bed:	79 42                	jns    c0023c31 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023bef:	83 ec 0c             	sub    esp,0xc
c0023bf2:	b3 0d                	mov    bl,0xd
c0023bf4:	68 8d ce 02 c0       	push   0xc002ce8d
c0023bf9:	e8 cf f3 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0023bfe:	83 c4 10             	add    esp,0x10
c0023c01:	eb 2e                	jmp    c0023c31 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c03:	3c 03                	cmp    al,0x3
c0023c05:	75 14                	jne    c0023c1b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023c07:	83 ec 0c             	sub    esp,0xc
c0023c0a:	b3 17                	mov    bl,0x17
c0023c0c:	68 a1 ce 02 c0       	push   0xc002cea1
c0023c11:	e8 b7 f3 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0023c16:	83 c4 10             	add    esp,0x10
c0023c19:	eb 16                	jmp    c0023c31 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c1b:	3c 04                	cmp    al,0x4
c0023c1d:	75 12                	jne    c0023c31 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c1f:	83 ec 0c             	sub    esp,0xc
c0023c22:	b3 08                	mov    bl,0x8
c0023c24:	68 b7 ce 02 c0       	push   0xc002ceb7
c0023c29:	e8 9f f3 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0023c2e:	83 c4 10             	add    esp,0x10
c0023c31:	50                   	push   eax
c0023c32:	50                   	push   eax
c0023c33:	0f b6 c3             	movzx  eax,bl
c0023c36:	50                   	push   eax
c0023c37:	68 cf ce 02 c0       	push   0xc002cecf
c0023c3c:	e8 8c f3 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0023c41:	83 c4 10             	add    esp,0x10
c0023c44:	83 c4 1c             	add    esp,0x1c
c0023c47:	88 d8                	mov    al,bl
c0023c49:	5b                   	pop    ebx
c0023c4a:	5e                   	pop    esi
c0023c4b:	5f                   	pop    edi
c0023c4c:	5d                   	pop    ebp
c0023c4d:	c3                   	ret    

c0023c4e <IDE::polling(unsigned char, unsigned int)>:
c0023c4e:	57                   	push   edi
c0023c4f:	56                   	push   esi
c0023c50:	53                   	push   ebx
c0023c51:	bb 04 00 00 00       	mov    ebx,0x4
c0023c56:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023c5a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023c5f:	52                   	push   edx
c0023c60:	6a 0c                	push   0xc
c0023c62:	56                   	push   esi
c0023c63:	57                   	push   edi
c0023c64:	e8 f9 f4 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c0023c69:	83 c4 10             	add    esp,0x10
c0023c6c:	4b                   	dec    ebx
c0023c6d:	75 f0                	jne    c0023c5f <IDE::polling(unsigned char, unsigned int)+0x11>
c0023c6f:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023c74:	50                   	push   eax
c0023c75:	6a 0c                	push   0xc
c0023c77:	56                   	push   esi
c0023c78:	57                   	push   edi
c0023c79:	e8 e4 f4 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c0023c7e:	83 c4 10             	add    esp,0x10
c0023c81:	a8 01                	test   al,0x1
c0023c83:	74 12                	je     c0023c97 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023c85:	83 ec 0c             	sub    esp,0xc
c0023c88:	68 e9 ce 02 c0       	push   0xc002cee9
c0023c8d:	e8 3b f3 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0023c92:	83 c4 10             	add    esp,0x10
c0023c95:	eb 17                	jmp    c0023cae <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c97:	a8 20                	test   al,0x20
c0023c99:	75 0f                	jne    c0023caa <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023c9b:	4b                   	dec    ebx
c0023c9c:	74 10                	je     c0023cae <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c9e:	84 c0                	test   al,al
c0023ca0:	78 d2                	js     c0023c74 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ca2:	a8 08                	test   al,0x8
c0023ca4:	74 ce                	je     c0023c74 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ca6:	31 c0                	xor    eax,eax
c0023ca8:	eb 06                	jmp    c0023cb0 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023caa:	b0 01                	mov    al,0x1
c0023cac:	eb 02                	jmp    c0023cb0 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023cae:	b0 02                	mov    al,0x2
c0023cb0:	5b                   	pop    ebx
c0023cb1:	5e                   	pop    esi
c0023cb2:	5f                   	pop    edi
c0023cb3:	c3                   	ret    

c0023cb4 <SATABus::close(int, int, void*)>:
c0023cb4:	31 c0                	xor    eax,eax
c0023cb6:	c3                   	ret    
c0023cb7:	90                   	nop

c0023cb8 <SATABus::detect()>:
c0023cb8:	c3                   	ret    
c0023cb9:	90                   	nop

c0023cba <SATABus::SATABus()>:
c0023cba:	83 ec 0c             	sub    esp,0xc
c0023cbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cc1:	83 ec 08             	sub    esp,0x8
c0023cc4:	68 2c cf 02 c0       	push   0xc002cf2c
c0023cc9:	50                   	push   eax
c0023cca:	e8 b1 0a ff ff       	call   c0014780 <HardDiskController::HardDiskController(char const*)>
c0023ccf:	83 c4 10             	add    esp,0x10
c0023cd2:	ba e8 cf 02 c0       	mov    edx,0xc002cfe8
c0023cd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cdb:	89 10                	mov    DWORD PTR [eax],edx
c0023cdd:	83 ec 0c             	sub    esp,0xc
c0023ce0:	6a 50                	push   0x50
c0023ce2:	e8 5d c3 fe ff       	call   c0010044 <Phys::allocateContiguousPages(int)>
c0023ce7:	83 c4 10             	add    esp,0x10
c0023cea:	89 c2                	mov    edx,eax
c0023cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cf0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023cf6:	83 ec 0c             	sub    esp,0xc
c0023cf9:	6a 50                	push   0x50
c0023cfb:	e8 bd de fe ff       	call   c0011bbd <Virt::allocateKernelVirtualPages(int)>
c0023d00:	83 c4 10             	add    esp,0x10
c0023d03:	89 c2                	mov    edx,eax
c0023d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d09:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023d0f:	e8 44 e1 fe ff       	call   c0011e58 <Virt::getAKernelVAS()>
c0023d14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023d18:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023d1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023d22:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023d28:	83 ec 0c             	sub    esp,0xc
c0023d2b:	6a 03                	push   0x3
c0023d2d:	6a 50                	push   0x50
c0023d2f:	51                   	push   ecx
c0023d30:	52                   	push   edx
c0023d31:	50                   	push   eax
c0023d32:	e8 51 e9 fe ff       	call   c0012688 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023d37:	83 c4 20             	add    esp,0x20
c0023d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d3e:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d48:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023d4e:	83 ec 04             	sub    esp,0x4
c0023d51:	52                   	push   edx
c0023d52:	50                   	push   eax
c0023d53:	68 50 cf 02 c0       	push   0xc002cf50
c0023d58:	e8 70 f2 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0023d5d:	83 c4 10             	add    esp,0x10
c0023d60:	90                   	nop
c0023d61:	83 c4 0c             	add    esp,0xc
c0023d64:	c3                   	ret    
c0023d65:	90                   	nop

c0023d66 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023d66:	83 ec 0c             	sub    esp,0xc
c0023d69:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023d6d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023d70:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023d73:	09 c2                	or     edx,eax
c0023d75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d79:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023d7f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023d81:	31 c0                	xor    eax,eax
c0023d83:	c1 e9 08             	shr    ecx,0x8
c0023d86:	83 e1 0f             	and    ecx,0xf
c0023d89:	39 c8                	cmp    eax,ecx
c0023d8b:	74 0a                	je     c0023d97 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023d8d:	f6 c2 01             	test   dl,0x1
c0023d90:	74 18                	je     c0023daa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d92:	d1 ea                	shr    edx,1
c0023d94:	40                   	inc    eax
c0023d95:	eb f2                	jmp    c0023d89 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023d97:	83 ec 0c             	sub    esp,0xc
c0023d9a:	68 74 cf 02 c0       	push   0xc002cf74
c0023d9f:	e8 cb 68 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c0023da4:	83 c4 10             	add    esp,0x10
c0023da7:	83 c8 ff             	or     eax,0xffffffff
c0023daa:	83 c4 0c             	add    esp,0xc
c0023dad:	c3                   	ret    

c0023dae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023dae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023db2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023db5:	89 c2                	mov    edx,eax
c0023db7:	c1 ea 08             	shr    edx,0x8
c0023dba:	83 e2 0f             	and    edx,0xf
c0023dbd:	fe ca                	dec    dl
c0023dbf:	75 31                	jne    c0023df2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023dc1:	83 e0 0f             	and    eax,0xf
c0023dc4:	3c 03                	cmp    al,0x3
c0023dc6:	75 2a                	jne    c0023df2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023dc8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023dcb:	b8 02 00 00 00       	mov    eax,0x2
c0023dd0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023dd6:	74 1c                	je     c0023df4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023dd8:	b8 04 00 00 00       	mov    eax,0x4
c0023ddd:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023de3:	74 0f                	je     c0023df4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023de5:	31 c0                	xor    eax,eax
c0023de7:	83 fa 03             	cmp    edx,0x3
c0023dea:	0f 94 c0             	sete   al
c0023ded:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023df1:	c3                   	ret    
c0023df2:	31 c0                	xor    eax,eax
c0023df4:	c3                   	ret    
c0023df5:	90                   	nop

c0023df6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023df6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023dfa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dfd:	0f ba e2 0f          	bt     edx,0xf
c0023e01:	72 f7                	jb     c0023dfa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023e03:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e06:	83 ca 10             	or     edx,0x10
c0023e09:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e0c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e0f:	83 ca 01             	or     edx,0x1
c0023e12:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e15:	c3                   	ret    

c0023e16 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023e16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023e1a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e1d:	83 e2 fe             	and    edx,0xfffffffe
c0023e20:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e23:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e26:	83 e2 ef             	and    edx,0xffffffef
c0023e29:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e2c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e2f:	0f ba e2 0e          	bt     edx,0xe
c0023e33:	72 f7                	jb     c0023e2c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023e35:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e38:	0f ba e2 0f          	bt     edx,0xf
c0023e3c:	72 ee                	jb     c0023e2c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023e3e:	c3                   	ret    
c0023e3f:	90                   	nop

c0023e40 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023e40:	55                   	push   ebp
c0023e41:	57                   	push   edi
c0023e42:	56                   	push   esi
c0023e43:	53                   	push   ebx
c0023e44:	83 ec 1c             	sub    esp,0x1c
c0023e47:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023e4b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023e4f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023e53:	53                   	push   ebx
c0023e54:	89 fd                	mov    ebp,edi
c0023e56:	56                   	push   esi
c0023e57:	c1 e5 0a             	shl    ebp,0xa
c0023e5a:	e8 b7 ff ff ff       	call   c0023e16 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023e5f:	83 ec 0c             	sub    esp,0xc
c0023e62:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023e68:	01 e8                	add    eax,ebp
c0023e6a:	89 03                	mov    DWORD PTR [ebx],eax
c0023e6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023e6e:	68 00 04 00 00       	push   0x400
c0023e73:	6a 00                	push   0x0
c0023e75:	50                   	push   eax
c0023e76:	e8 fd c8 fd ff       	call   c0000778 <memset>
c0023e7b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023e81:	89 fa                	mov    edx,edi
c0023e83:	01 e8                	add    eax,ebp
c0023e85:	c1 e7 0d             	shl    edi,0xd
c0023e88:	89 03                	mov    DWORD PTR [ebx],eax
c0023e8a:	c1 e2 08             	shl    edx,0x8
c0023e8d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023e94:	81 c2 00 80 00 00    	add    edx,0x8000
c0023e9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023e9e:	89 d0                	mov    eax,edx
c0023ea0:	83 c4 1c             	add    esp,0x1c
c0023ea3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023ea9:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023eac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023eaf:	68 00 01 00 00       	push   0x100
c0023eb4:	6a 00                	push   0x0
c0023eb6:	50                   	push   eax
c0023eb7:	e8 bc c8 fd ff       	call   c0000778 <memset>
c0023ebc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023ec0:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023ec6:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023ecc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023ed0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023ed3:	83 c4 10             	add    esp,0x10
c0023ed6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023edd:	31 ff                	xor    edi,edi
c0023edf:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023ee5:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023eeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023eef:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023ef5:	83 c5 20             	add    ebp,0x20
c0023ef8:	01 f8                	add    eax,edi
c0023efa:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023efd:	52                   	push   edx
c0023efe:	68 00 01 00 00       	push   0x100
c0023f03:	6a 00                	push   0x0
c0023f05:	50                   	push   eax
c0023f06:	e8 6d c8 fd ff       	call   c0000778 <memset>
c0023f0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023f0f:	83 c4 10             	add    esp,0x10
c0023f12:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023f18:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023f1f:	01 f8                	add    eax,edi
c0023f21:	81 c7 00 01 00 00    	add    edi,0x100
c0023f27:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023f2a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023f30:	75 b3                	jne    c0023ee5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023f32:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023f36:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023f3a:	83 c4 1c             	add    esp,0x1c
c0023f3d:	5b                   	pop    ebx
c0023f3e:	5e                   	pop    esi
c0023f3f:	5f                   	pop    edi
c0023f40:	5d                   	pop    ebp
c0023f41:	e9 b0 fe ff ff       	jmp    c0023df6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023f46 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023f46:	55                   	push   ebp
c0023f47:	57                   	push   edi
c0023f48:	56                   	push   esi
c0023f49:	53                   	push   ebx
c0023f4a:	31 db                	xor    ebx,ebx
c0023f4c:	83 ec 0c             	sub    esp,0xc
c0023f4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023f53:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023f57:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023f5a:	f7 c7 01 00 00 00    	test   edi,0x1
c0023f60:	0f 84 aa 00 00 00    	je     c0024010 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f66:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023f6a:	89 d8                	mov    eax,ebx
c0023f6c:	c1 e0 07             	shl    eax,0x7
c0023f6f:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023f76:	55                   	push   ebp
c0023f77:	56                   	push   esi
c0023f78:	e8 31 fe ff ff       	call   c0023dae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023f7d:	5a                   	pop    edx
c0023f7e:	83 f8 01             	cmp    eax,0x1
c0023f81:	59                   	pop    ecx
c0023f82:	75 30                	jne    c0023fb4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023f84:	50                   	push   eax
c0023f85:	50                   	push   eax
c0023f86:	53                   	push   ebx
c0023f87:	68 99 cf 02 c0       	push   0xc002cf99
c0023f8c:	e8 3c f0 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0023f91:	83 c4 0c             	add    esp,0xc
c0023f94:	53                   	push   ebx
c0023f95:	55                   	push   ebp
c0023f96:	56                   	push   esi
c0023f97:	e8 a4 fe ff ff       	call   c0023e40 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f9c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023fa3:	e8 98 b8 fe ff       	call   c000f840 <malloc>
c0023fa8:	89 c5                	mov    ebp,eax
c0023faa:	89 04 24             	mov    DWORD PTR [esp],eax
c0023fad:	e8 60 0d 00 00       	call   c0024d12 <SATA::SATA()>
c0023fb2:	eb 33                	jmp    c0023fe7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023fb4:	83 f8 04             	cmp    eax,0x4
c0023fb7:	75 47                	jne    c0024000 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023fb9:	50                   	push   eax
c0023fba:	50                   	push   eax
c0023fbb:	53                   	push   ebx
c0023fbc:	68 b0 cf 02 c0       	push   0xc002cfb0
c0023fc1:	e8 07 f0 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0023fc6:	83 c4 0c             	add    esp,0xc
c0023fc9:	53                   	push   ebx
c0023fca:	55                   	push   ebp
c0023fcb:	56                   	push   esi
c0023fcc:	e8 6f fe ff ff       	call   c0023e40 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023fd1:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023fd8:	e8 63 b8 fe ff       	call   c000f840 <malloc>
c0023fdd:	89 c5                	mov    ebp,eax
c0023fdf:	89 04 24             	mov    DWORD PTR [esp],eax
c0023fe2:	e8 d7 10 00 00       	call   c00250be <SATAPI::SATAPI()>
c0023fe7:	5a                   	pop    edx
c0023fe8:	59                   	pop    ecx
c0023fe9:	55                   	push   ebp
c0023fea:	56                   	push   esi
c0023feb:	e8 04 04 ff ff       	call   c00143f4 <Device::addChild(Device*)>
c0023ff0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023ff3:	56                   	push   esi
c0023ff4:	6a 00                	push   0x0
c0023ff6:	53                   	push   ebx
c0023ff7:	55                   	push   ebp
c0023ff8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023ffb:	83 c4 20             	add    esp,0x20
c0023ffe:	eb 10                	jmp    c0024010 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024000:	50                   	push   eax
c0024001:	50                   	push   eax
c0024002:	53                   	push   ebx
c0024003:	68 c9 cf 02 c0       	push   0xc002cfc9
c0024008:	e8 c0 ef fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c002400d:	83 c4 10             	add    esp,0x10
c0024010:	d1 ef                	shr    edi,1
c0024012:	43                   	inc    ebx
c0024013:	83 fb 20             	cmp    ebx,0x20
c0024016:	0f 85 3e ff ff ff    	jne    c0023f5a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002401c:	83 c4 0c             	add    esp,0xc
c002401f:	5b                   	pop    ebx
c0024020:	5e                   	pop    esi
c0024021:	5f                   	pop    edi
c0024022:	5d                   	pop    ebp
c0024023:	c3                   	ret    

c0024024 <SATABus::open(int, int, void*)>:
c0024024:	83 ec 14             	sub    esp,0x14
c0024027:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002402b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024031:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024037:	52                   	push   edx
c0024038:	50                   	push   eax
c0024039:	e8 08 ff ff ff       	call   c0023f46 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002403e:	31 c0                	xor    eax,eax
c0024040:	83 c4 1c             	add    esp,0x1c
c0024043:	c3                   	ret    

c0024044 <ATA::close(int, int, void*)>:
c0024044:	83 ec 0c             	sub    esp,0xc
c0024047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002404b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024051:	85 c0                	test   eax,eax
c0024053:	74 0c                	je     c0024061 <ATA::close(int, int, void*)+0x1d>
c0024055:	83 ec 0c             	sub    esp,0xc
c0024058:	8b 10                	mov    edx,DWORD PTR [eax]
c002405a:	50                   	push   eax
c002405b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002405e:	83 c4 10             	add    esp,0x10
c0024061:	31 c0                	xor    eax,eax
c0024063:	83 c4 0c             	add    esp,0xc
c0024066:	c3                   	ret    
c0024067:	90                   	nop

c0024068 <ATA::powerSaving(PowerSavingLevel)>:
c0024068:	c3                   	ret    
c0024069:	90                   	nop

c002406a <ATA::ATA()>:
c002406a:	83 ec 0c             	sub    esp,0xc
c002406d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024071:	83 ec 04             	sub    esp,0x4
c0024074:	68 00 02 00 00       	push   0x200
c0024079:	68 b1 d0 02 c0       	push   0xc002d0b1
c002407e:	50                   	push   eax
c002407f:	e8 94 07 ff ff       	call   c0014818 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024084:	83 c4 10             	add    esp,0x10
c0024087:	ba 34 d0 02 c0       	mov    edx,0xc002d034
c002408c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024090:	89 10                	mov    DWORD PTR [eax],edx
c0024092:	90                   	nop
c0024093:	83 c4 0c             	add    esp,0xc
c0024096:	c3                   	ret    
c0024097:	90                   	nop

c0024098 <ATA::flush(bool)>:
c0024098:	53                   	push   ebx
c0024099:	83 ec 08             	sub    esp,0x8
c002409c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00240a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00240a5:	19 c0                	sbb    eax,eax
c00240a7:	83 e0 fd             	and    eax,0xfffffffd
c00240aa:	05 ea 00 00 00       	add    eax,0xea
c00240af:	50                   	push   eax
c00240b0:	6a 07                	push   0x7
c00240b2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240b9:	50                   	push   eax
c00240ba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240c0:	e8 dd ef ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240c5:	83 c4 0c             	add    esp,0xc
c00240c8:	6a 00                	push   0x0
c00240ca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240d1:	50                   	push   eax
c00240d2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240d8:	e8 71 fb ff ff       	call   c0023c4e <IDE::polling(unsigned char, unsigned int)>
c00240dd:	83 c4 18             	add    esp,0x18
c00240e0:	5b                   	pop    ebx
c00240e1:	c3                   	ret    

c00240e2 <ATA::readyForCommand()>:
c00240e2:	56                   	push   esi
c00240e3:	53                   	push   ebx
c00240e4:	31 db                	xor    ebx,ebx
c00240e6:	50                   	push   eax
c00240e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00240eb:	50                   	push   eax
c00240ec:	6a 0c                	push   0xc
c00240ee:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00240f5:	50                   	push   eax
c00240f6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00240fc:	e8 61 f0 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c0024101:	83 c4 10             	add    esp,0x10
c0024104:	a8 88                	test   al,0x88
c0024106:	74 23                	je     c002412b <ATA::readyForCommand()+0x49>
c0024108:	43                   	inc    ebx
c0024109:	83 fb 63             	cmp    ebx,0x63
c002410c:	7e dd                	jle    c00240eb <ATA::readyForCommand()+0x9>
c002410e:	51                   	push   ecx
c002410f:	51                   	push   ecx
c0024110:	6a 00                	push   0x0
c0024112:	68 40 42 0f 00       	push   0xf4240
c0024117:	e8 c8 a2 ff ff       	call   c001e3e4 <nanoSleep(unsigned long long)>
c002411c:	83 c4 10             	add    esp,0x10
c002411f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024125:	75 c4                	jne    c00240eb <ATA::readyForCommand()+0x9>
c0024127:	31 c0                	xor    eax,eax
c0024129:	eb 02                	jmp    c002412d <ATA::readyForCommand()+0x4b>
c002412b:	b0 01                	mov    al,0x1
c002412d:	5a                   	pop    edx
c002412e:	5b                   	pop    ebx
c002412f:	5e                   	pop    esi
c0024130:	c3                   	ret    
c0024131:	90                   	nop

c0024132 <ATA::access(unsigned long long, int, void*, bool)>:
c0024132:	55                   	push   ebp
c0024133:	57                   	push   edi
c0024134:	56                   	push   esi
c0024135:	53                   	push   ebx
c0024136:	83 ec 2c             	sub    esp,0x2c
c0024139:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002413d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024141:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024145:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024149:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002414d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024151:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024155:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002415b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002415f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024165:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024169:	c1 e0 06             	shl    eax,0x6
c002416c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024174:	74 5d                	je     c00241d3 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024176:	89 fa                	mov    edx,edi
c0024178:	89 f0                	mov    eax,esi
c002417a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002417e:	c1 ea 1c             	shr    edx,0x1c
c0024181:	89 d1                	mov    ecx,edx
c0024183:	09 c1                	or     ecx,eax
c0024185:	74 25                	je     c00241ac <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024187:	31 ed                	xor    ebp,ebp
c0024189:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024190:	89 fa                	mov    edx,edi
c0024192:	89 f0                	mov    eax,esi
c0024194:	0f ad d0             	shrd   eax,edx,cl
c0024197:	d3 ea                	shr    edx,cl
c0024199:	f6 c1 20             	test   cl,0x20
c002419c:	74 02                	je     c00241a0 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002419e:	89 d0                	mov    eax,edx
c00241a0:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00241a4:	45                   	inc    ebp
c00241a5:	83 fd 06             	cmp    ebp,0x6
c00241a8:	75 df                	jne    c0024189 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00241aa:	eb 76                	jmp    c0024222 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00241ac:	89 f0                	mov    eax,esi
c00241ae:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00241b3:	89 fa                	mov    edx,edi
c00241b5:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00241bc:	0f ac d0 10          	shrd   eax,edx,0x10
c00241c0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00241c5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00241c9:	c1 ee 18             	shr    esi,0x18
c00241cc:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00241d1:	eb 56                	jmp    c0024229 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00241d3:	6a 00                	push   0x0
c00241d5:	6a 3f                	push   0x3f
c00241d7:	57                   	push   edi
c00241d8:	56                   	push   esi
c00241d9:	e8 8e 29 00 00       	call   c0026b6c <__umoddi3>
c00241de:	83 c4 10             	add    esp,0x10
c00241e1:	40                   	inc    eax
c00241e2:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00241e6:	6a 00                	push   0x0
c00241e8:	68 f0 03 00 00       	push   0x3f0
c00241ed:	57                   	push   edi
c00241ee:	56                   	push   esi
c00241ef:	e8 78 28 00 00       	call   c0026a6c <__udivdi3>
c00241f4:	83 c4 10             	add    esp,0x10
c00241f7:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00241fc:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024203:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024208:	6a 00                	push   0x0
c002420a:	6a 3f                	push   0x3f
c002420c:	57                   	push   edi
c002420d:	56                   	push   esi
c002420e:	e8 59 28 00 00       	call   c0026a6c <__udivdi3>
c0024213:	83 c4 10             	add    esp,0x10
c0024216:	89 c6                	mov    esi,eax
c0024218:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002421d:	83 e6 0f             	and    esi,0xf
c0024220:	eb 07                	jmp    c0024229 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024222:	31 f6                	xor    esi,esi
c0024224:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024229:	bf 01 00 00 00       	mov    edi,0x1
c002422e:	50                   	push   eax
c002422f:	6a 00                	push   0x0
c0024231:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024238:	50                   	push   eax
c0024239:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002423d:	e8 6c f0 ff ff       	call   c00232ae <IDE::enableIRQs(unsigned char, bool)>
c0024242:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024245:	e8 98 fe ff ff       	call   c00240e2 <ATA::readyForCommand()>
c002424a:	83 c4 10             	add    esp,0x10
c002424d:	84 c0                	test   al,al
c002424f:	0f 84 5a 02 00 00    	je     c00244af <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024255:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002425b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024261:	c1 e0 04             	shl    eax,0x4
c0024264:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002426b:	09 c6                	or     esi,eax
c002426d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024272:	75 05                	jne    c0024279 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024274:	83 ce a0             	or     esi,0xffffffa0
c0024277:	eb 03                	jmp    c002427c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024279:	83 ce e0             	or     esi,0xffffffe0
c002427c:	89 f0                	mov    eax,esi
c002427e:	0f b6 f0             	movzx  esi,al
c0024281:	56                   	push   esi
c0024282:	6a 06                	push   0x6
c0024284:	51                   	push   ecx
c0024285:	52                   	push   edx
c0024286:	e8 17 ee ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002428b:	83 c4 10             	add    esp,0x10
c002428e:	6a 00                	push   0x0
c0024290:	6a 01                	push   0x1
c0024292:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024299:	50                   	push   eax
c002429a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242a0:	e8 fd ed ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242a5:	83 c4 10             	add    esp,0x10
c00242a8:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00242ad:	75 6e                	jne    c002431d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00242af:	6a 00                	push   0x0
c00242b1:	6a 08                	push   0x8
c00242b3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242ba:	50                   	push   eax
c00242bb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242c1:	e8 dc ed ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242c6:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00242cb:	50                   	push   eax
c00242cc:	6a 09                	push   0x9
c00242ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242d5:	50                   	push   eax
c00242d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242dc:	e8 c1 ed ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242e1:	83 c4 20             	add    esp,0x20
c00242e4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00242e9:	50                   	push   eax
c00242ea:	6a 0a                	push   0xa
c00242ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242f3:	50                   	push   eax
c00242f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242fa:	e8 a3 ed ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242ff:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024304:	50                   	push   eax
c0024305:	6a 0b                	push   0xb
c0024307:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002430e:	50                   	push   eax
c002430f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024315:	e8 88 ed ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002431a:	83 c4 20             	add    esp,0x20
c002431d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024322:	50                   	push   eax
c0024323:	6a 02                	push   0x2
c0024325:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002432c:	50                   	push   eax
c002432d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024333:	e8 6a ed ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024338:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002433d:	50                   	push   eax
c002433e:	6a 03                	push   0x3
c0024340:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024347:	50                   	push   eax
c0024348:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002434e:	e8 4f ed ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024353:	83 c4 20             	add    esp,0x20
c0024356:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002435b:	50                   	push   eax
c002435c:	6a 04                	push   0x4
c002435e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024365:	50                   	push   eax
c0024366:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002436c:	e8 31 ed ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024371:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024376:	50                   	push   eax
c0024377:	6a 05                	push   0x5
c0024379:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024380:	50                   	push   eax
c0024381:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024387:	e8 16 ed ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002438c:	83 c4 20             	add    esp,0x20
c002438f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024394:	0f 94 c0             	sete   al
c0024397:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002439c:	74 09                	je     c00243a7 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002439e:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00243a5:	eb 07                	jmp    c00243ae <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00243a7:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00243ae:	0f b6 c0             	movzx  eax,al
c00243b1:	50                   	push   eax
c00243b2:	6a 07                	push   0x7
c00243b4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243bb:	50                   	push   eax
c00243bc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243c2:	e8 db ec ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243c7:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00243cb:	83 c4 10             	add    esp,0x10
c00243ce:	85 f6                	test   esi,esi
c00243d0:	0f 84 ba 00 00 00    	je     c0024490 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00243d6:	50                   	push   eax
c00243d7:	6a 01                	push   0x1
c00243d9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243e0:	50                   	push   eax
c00243e1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243e7:	e8 62 f8 ff ff       	call   c0023c4e <IDE::polling(unsigned char, unsigned int)>
c00243ec:	83 c4 10             	add    esp,0x10
c00243ef:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00243f5:	84 c0                	test   al,al
c00243f7:	74 2c                	je     c0024425 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00243f9:	0f b6 f8             	movzx  edi,al
c00243fc:	0f b6 d2             	movzx  edx,dl
c00243ff:	57                   	push   edi
c0024400:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024407:	50                   	push   eax
c0024408:	52                   	push   edx
c0024409:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002440f:	e8 a4 f6 ff ff       	call   c0023ab8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024414:	c7 04 24 0c d0 02 c0 	mov    DWORD PTR [esp],0xc002d00c
c002441b:	e8 ad eb fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0024420:	e9 87 00 00 00       	jmp    c00244ac <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024425:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002442a:	74 33                	je     c002445f <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c002442c:	31 ed                	xor    ebp,ebp
c002442e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024432:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024436:	50                   	push   eax
c0024437:	50                   	push   eax
c0024438:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002443f:	50                   	push   eax
c0024440:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024446:	e8 45 ec ff ff       	call   c0023090 <IDE::getBase(unsigned char)>
c002444b:	89 c2                	mov    edx,eax
c002444d:	89 f8                	mov    eax,edi
c002444f:	66 ef                	out    dx,ax
c0024451:	45                   	inc    ebp
c0024452:	83 c4 10             	add    esp,0x10
c0024455:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002445b:	75 d1                	jne    c002442e <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002445d:	eb 23                	jmp    c0024482 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c002445f:	0f b6 d2             	movzx  edx,dl
c0024462:	51                   	push   ecx
c0024463:	51                   	push   ecx
c0024464:	52                   	push   edx
c0024465:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002446b:	e8 20 ec ff ff       	call   c0023090 <IDE::getBase(unsigned char)>
c0024470:	b9 00 01 00 00       	mov    ecx,0x100
c0024475:	89 c2                	mov    edx,eax
c0024477:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002447b:	fc                   	cld    
c002447c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002447f:	83 c4 10             	add    esp,0x10
c0024482:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002448a:	4e                   	dec    esi
c002448b:	e9 3e ff ff ff       	jmp    c00243ce <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024490:	31 ff                	xor    edi,edi
c0024492:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024497:	74 16                	je     c00244af <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024499:	50                   	push   eax
c002449a:	50                   	push   eax
c002449b:	31 c0                	xor    eax,eax
c002449d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00244a2:	0f 94 c0             	sete   al
c00244a5:	50                   	push   eax
c00244a6:	53                   	push   ebx
c00244a7:	e8 ec fb ff ff       	call   c0024098 <ATA::flush(bool)>
c00244ac:	83 c4 10             	add    esp,0x10
c00244af:	83 c4 2c             	add    esp,0x2c
c00244b2:	89 f8                	mov    eax,edi
c00244b4:	5b                   	pop    ebx
c00244b5:	5e                   	pop    esi
c00244b6:	5f                   	pop    edi
c00244b7:	5d                   	pop    ebp
c00244b8:	c3                   	ret    
c00244b9:	90                   	nop

c00244ba <ATA::read(unsigned long long, int, void*)>:
c00244ba:	57                   	push   edi
c00244bb:	b8 04 00 00 00       	mov    eax,0x4
c00244c0:	56                   	push   esi
c00244c1:	53                   	push   ebx
c00244c2:	83 ec 10             	sub    esp,0x10
c00244c5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00244c9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00244cd:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00244d0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00244d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00244d8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00244de:	77 3b                	ja     c002451b <ATA::read(unsigned long long, int, void*)+0x61>
c00244e0:	b8 06 00 00 00       	mov    eax,0x6
c00244e5:	85 d2                	test   edx,edx
c00244e7:	74 32                	je     c002451b <ATA::read(unsigned long long, int, void*)+0x61>
c00244e9:	50                   	push   eax
c00244ea:	50                   	push   eax
c00244eb:	6a 00                	push   0x0
c00244ed:	52                   	push   edx
c00244ee:	53                   	push   ebx
c00244ef:	57                   	push   edi
c00244f0:	56                   	push   esi
c00244f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00244f5:	e8 38 fc ff ff       	call   c0024132 <ATA::access(unsigned long long, int, void*, bool)>
c00244fa:	83 c4 20             	add    esp,0x20
c00244fd:	85 c0                	test   eax,eax
c00244ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024503:	75 11                	jne    c0024516 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024505:	01 1d a8 29 03 c0    	add    DWORD PTR ds:0xc00329a8,ebx
c002450b:	e8 02 c5 fe ff       	call   c0010a12 <VgaText::updateDiskUsage()>
c0024510:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024514:	eb 05                	jmp    c002451b <ATA::read(unsigned long long, int, void*)+0x61>
c0024516:	b8 01 00 00 00       	mov    eax,0x1
c002451b:	83 c4 10             	add    esp,0x10
c002451e:	5b                   	pop    ebx
c002451f:	5e                   	pop    esi
c0024520:	5f                   	pop    edi
c0024521:	c3                   	ret    

c0024522 <ATA::write(unsigned long long, int, void*)>:
c0024522:	57                   	push   edi
c0024523:	b8 04 00 00 00       	mov    eax,0x4
c0024528:	56                   	push   esi
c0024529:	53                   	push   ebx
c002452a:	83 ec 10             	sub    esp,0x10
c002452d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024531:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024535:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024538:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002453c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024540:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024546:	77 3b                	ja     c0024583 <ATA::write(unsigned long long, int, void*)+0x61>
c0024548:	b8 06 00 00 00       	mov    eax,0x6
c002454d:	85 d2                	test   edx,edx
c002454f:	74 32                	je     c0024583 <ATA::write(unsigned long long, int, void*)+0x61>
c0024551:	50                   	push   eax
c0024552:	50                   	push   eax
c0024553:	6a 01                	push   0x1
c0024555:	52                   	push   edx
c0024556:	53                   	push   ebx
c0024557:	57                   	push   edi
c0024558:	56                   	push   esi
c0024559:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002455d:	e8 d0 fb ff ff       	call   c0024132 <ATA::access(unsigned long long, int, void*, bool)>
c0024562:	83 c4 20             	add    esp,0x20
c0024565:	85 c0                	test   eax,eax
c0024567:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002456b:	75 11                	jne    c002457e <ATA::write(unsigned long long, int, void*)+0x5c>
c002456d:	01 1d a4 29 03 c0    	add    DWORD PTR ds:0xc00329a4,ebx
c0024573:	e8 9a c4 fe ff       	call   c0010a12 <VgaText::updateDiskUsage()>
c0024578:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002457c:	eb 05                	jmp    c0024583 <ATA::write(unsigned long long, int, void*)+0x61>
c002457e:	b8 01 00 00 00       	mov    eax,0x1
c0024583:	83 c4 10             	add    esp,0x10
c0024586:	5b                   	pop    ebx
c0024587:	5e                   	pop    esi
c0024588:	5f                   	pop    edi
c0024589:	c3                   	ret    

c002458a <ATA::detectCHS()>:
c002458a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002458e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024594:	c1 e0 06             	shl    eax,0x6
c0024597:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002459d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00245a7:	c7 44 24 04 17 d0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d017
c00245af:	e9 bb 60 ff ff       	jmp    c001a66f <Krnl::panic(char const*)>

c00245b4 <ATA::open(int, int, void*)>:
c00245b4:	53                   	push   ebx
c00245b5:	83 ec 08             	sub    esp,0x8
c00245b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00245bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00245c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00245c4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00245ca:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00245d0:	c1 e0 06             	shl    eax,0x6
c00245d3:	01 d0                	add    eax,edx
c00245d5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00245dc:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00245e2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00245e9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00245f3:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00245f9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024600:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024607:	75 0c                	jne    c0024615 <ATA::open(int, int, void*)+0x61>
c0024609:	83 ec 0c             	sub    esp,0xc
c002460c:	53                   	push   ebx
c002460d:	e8 78 ff ff ff       	call   c002458a <ATA::detectCHS()>
c0024612:	83 c4 10             	add    esp,0x10
c0024615:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002461b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024621:	c1 e0 06             	shl    eax,0x6
c0024624:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002462b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024635:	d1 e8                	shr    eax,1
c0024637:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002463d:	6a 04                	push   0x4
c002463f:	6a 0c                	push   0xc
c0024641:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024648:	50                   	push   eax
c0024649:	52                   	push   edx
c002464a:	e8 53 ea ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002464f:	90                   	nop
c0024650:	90                   	nop
c0024651:	6a 00                	push   0x0
c0024653:	6a 0c                	push   0xc
c0024655:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002465c:	50                   	push   eax
c002465d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024663:	e8 3a ea ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024668:	83 c4 14             	add    esp,0x14
c002466b:	53                   	push   ebx
c002466c:	e8 0f 02 ff ff       	call   c0014880 <PhysicalDisk::startCache()>
c0024671:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024674:	e8 7d 23 ff ff       	call   c00169f6 <createPartitionsForDisk(PhysicalDisk*)>
c0024679:	31 c0                	xor    eax,eax
c002467b:	83 c4 18             	add    esp,0x18
c002467e:	5b                   	pop    ebx
c002467f:	c3                   	ret    

c0024680 <ATAPI::write(unsigned long long, int, void*)>:
c0024680:	b8 03 00 00 00       	mov    eax,0x3
c0024685:	c3                   	ret    

c0024686 <ATAPI::close(int, int, void*)>:
c0024686:	83 ec 0c             	sub    esp,0xc
c0024689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002468d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024693:	85 c0                	test   eax,eax
c0024695:	74 0c                	je     c00246a3 <ATAPI::close(int, int, void*)+0x1d>
c0024697:	83 ec 0c             	sub    esp,0xc
c002469a:	8b 10                	mov    edx,DWORD PTR [eax]
c002469c:	50                   	push   eax
c002469d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00246a0:	83 c4 10             	add    esp,0x10
c00246a3:	31 c0                	xor    eax,eax
c00246a5:	83 c4 0c             	add    esp,0xc
c00246a8:	c3                   	ret    
c00246a9:	90                   	nop

c00246aa <ATAPI::ATAPI()>:
c00246aa:	83 ec 0c             	sub    esp,0xc
c00246ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246b1:	83 ec 04             	sub    esp,0x4
c00246b4:	68 00 08 00 00       	push   0x800
c00246b9:	68 51 d1 02 c0       	push   0xc002d151
c00246be:	50                   	push   eax
c00246bf:	e8 54 01 ff ff       	call   c0014818 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00246c4:	83 c4 10             	add    esp,0x10
c00246c7:	ba 6c d0 02 c0       	mov    edx,0xc002d06c
c00246cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246d0:	89 10                	mov    DWORD PTR [eax],edx
c00246d2:	90                   	nop
c00246d3:	83 c4 0c             	add    esp,0xc
c00246d6:	c3                   	ret    
c00246d7:	90                   	nop

c00246d8 <ATAPI::readyForCommand()>:
c00246d8:	56                   	push   esi
c00246d9:	53                   	push   ebx
c00246da:	31 db                	xor    ebx,ebx
c00246dc:	50                   	push   eax
c00246dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00246e1:	50                   	push   eax
c00246e2:	6a 0c                	push   0xc
c00246e4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00246eb:	50                   	push   eax
c00246ec:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00246f2:	e8 6b ea ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c00246f7:	83 c4 10             	add    esp,0x10
c00246fa:	a8 88                	test   al,0x88
c00246fc:	74 23                	je     c0024721 <ATAPI::readyForCommand()+0x49>
c00246fe:	43                   	inc    ebx
c00246ff:	83 fb 63             	cmp    ebx,0x63
c0024702:	7e dd                	jle    c00246e1 <ATAPI::readyForCommand()+0x9>
c0024704:	51                   	push   ecx
c0024705:	51                   	push   ecx
c0024706:	6a 00                	push   0x0
c0024708:	68 40 42 0f 00       	push   0xf4240
c002470d:	e8 d2 9c ff ff       	call   c001e3e4 <nanoSleep(unsigned long long)>
c0024712:	83 c4 10             	add    esp,0x10
c0024715:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002471b:	75 c4                	jne    c00246e1 <ATAPI::readyForCommand()+0x9>
c002471d:	31 c0                	xor    eax,eax
c002471f:	eb 02                	jmp    c0024723 <ATAPI::readyForCommand()+0x4b>
c0024721:	b0 01                	mov    al,0x1
c0024723:	5a                   	pop    edx
c0024724:	5b                   	pop    ebx
c0024725:	5e                   	pop    esi
c0024726:	c3                   	ret    
c0024727:	90                   	nop

c0024728 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024728:	55                   	push   ebp
c0024729:	57                   	push   edi
c002472a:	56                   	push   esi
c002472b:	53                   	push   ebx
c002472c:	83 ec 20             	sub    esp,0x20
c002472f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024733:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024737:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002473b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002473f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024743:	6a 01                	push   0x1
c0024745:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002474c:	50                   	push   eax
c002474d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024753:	e8 56 eb ff ff       	call   c00232ae <IDE::enableIRQs(unsigned char, bool)>
c0024758:	5e                   	pop    esi
c0024759:	58                   	pop    eax
c002475a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024761:	50                   	push   eax
c0024762:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024768:	e8 0f e9 ff ff       	call   c002307c <IDE::prepareInterrupt(unsigned char)>
c002476d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024770:	e8 63 ff ff ff       	call   c00246d8 <ATAPI::readyForCommand()>
c0024775:	83 c4 10             	add    esp,0x10
c0024778:	84 c0                	test   al,al
c002477a:	75 0a                	jne    c0024786 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002477c:	bb 01 00 00 00       	mov    ebx,0x1
c0024781:	e9 57 02 00 00       	jmp    c00249dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024786:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002478c:	c1 e0 04             	shl    eax,0x4
c002478f:	0f b6 c0             	movzx  eax,al
c0024792:	50                   	push   eax
c0024793:	6a 06                	push   0x6
c0024795:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002479c:	50                   	push   eax
c002479d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247a3:	e8 fa e8 ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247a8:	6a 00                	push   0x0
c00247aa:	6a 01                	push   0x1
c00247ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247b3:	50                   	push   eax
c00247b4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247ba:	e8 e3 e8 ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247bf:	83 c4 20             	add    esp,0x20
c00247c2:	0f b6 c3             	movzx  eax,bl
c00247c5:	0f b6 df             	movzx  ebx,bh
c00247c8:	50                   	push   eax
c00247c9:	6a 04                	push   0x4
c00247cb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247d2:	50                   	push   eax
c00247d3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247d9:	e8 c4 e8 ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247de:	53                   	push   ebx
c00247df:	6a 05                	push   0x5
c00247e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247e8:	50                   	push   eax
c00247e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247ef:	e8 ae e8 ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247f4:	83 c4 20             	add    esp,0x20
c00247f7:	68 a0 00 00 00       	push   0xa0
c00247fc:	6a 07                	push   0x7
c00247fe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024805:	50                   	push   eax
c0024806:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002480c:	e8 91 e8 ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024811:	83 c4 0c             	add    esp,0xc
c0024814:	6a 01                	push   0x1
c0024816:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002481d:	50                   	push   eax
c002481e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024824:	e8 25 f4 ff ff       	call   c0023c4e <IDE::polling(unsigned char, unsigned int)>
c0024829:	83 c4 10             	add    esp,0x10
c002482c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024832:	84 c0                	test   al,al
c0024834:	74 23                	je     c0024859 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024836:	0f b6 d8             	movzx  ebx,al
c0024839:	0f b6 d2             	movzx  edx,dl
c002483c:	53                   	push   ebx
c002483d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024844:	50                   	push   eax
c0024845:	52                   	push   edx
c0024846:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002484c:	e8 67 f2 ff ff       	call   c0023ab8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024851:	83 c4 10             	add    esp,0x10
c0024854:	e9 84 01 00 00       	jmp    c00249dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024859:	0f b6 d2             	movzx  edx,dl
c002485c:	53                   	push   ebx
c002485d:	53                   	push   ebx
c002485e:	52                   	push   edx
c002485f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024865:	e8 26 e8 ff ff       	call   c0023090 <IDE::getBase(unsigned char)>
c002486a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002486e:	b9 06 00 00 00       	mov    ecx,0x6
c0024873:	89 c2                	mov    edx,eax
c0024875:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024878:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002487c:	83 c4 10             	add    esp,0x10
c002487f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024885:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002488c:	85 db                	test   ebx,ebx
c002488e:	0f 84 ec 00 00 00    	je     c0024980 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024894:	51                   	push   ecx
c0024895:	51                   	push   ecx
c0024896:	52                   	push   edx
c0024897:	50                   	push   eax
c0024898:	e8 73 e9 ff ff       	call   c0023210 <IDE::waitInterrupt(unsigned char)>
c002489d:	83 c4 10             	add    esp,0x10
c00248a0:	84 c0                	test   al,al
c00248a2:	0f 84 d4 fe ff ff    	je     c002477c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00248a8:	56                   	push   esi
c00248a9:	56                   	push   esi
c00248aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248b1:	50                   	push   eax
c00248b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248b8:	e8 bf e7 ff ff       	call   c002307c <IDE::prepareInterrupt(unsigned char)>
c00248bd:	83 c4 0c             	add    esp,0xc
c00248c0:	6a 04                	push   0x4
c00248c2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248c9:	50                   	push   eax
c00248ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248d0:	e8 8d e8 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c00248d5:	83 c4 0c             	add    esp,0xc
c00248d8:	89 c6                	mov    esi,eax
c00248da:	6a 05                	push   0x5
c00248dc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248e3:	50                   	push   eax
c00248e4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248ea:	e8 73 e8 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c00248ef:	89 f1                	mov    ecx,esi
c00248f1:	0f b6 c0             	movzx  eax,al
c00248f4:	0f b6 f1             	movzx  esi,cl
c00248f7:	c1 e0 08             	shl    eax,0x8
c00248fa:	09 c6                	or     esi,eax
c00248fc:	d1 fe                	sar    esi,1
c00248fe:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024902:	83 c4 10             	add    esp,0x10
c0024905:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002490a:	74 41                	je     c002494d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002490c:	31 c9                	xor    ecx,ecx
c002490e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024914:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002491b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002491f:	75 0a                	jne    c002492b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024921:	01 c9                	add    ecx,ecx
c0024923:	01 cd                	add    ebp,ecx
c0024925:	4b                   	dec    ebx
c0024926:	e9 54 ff ff ff       	jmp    c002487f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002492b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024930:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024934:	51                   	push   ecx
c0024935:	51                   	push   ecx
c0024936:	52                   	push   edx
c0024937:	50                   	push   eax
c0024938:	e8 53 e7 ff ff       	call   c0023090 <IDE::getBase(unsigned char)>
c002493d:	89 c2                	mov    edx,eax
c002493f:	89 f0                	mov    eax,esi
c0024941:	66 ef                	out    dx,ax
c0024943:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024947:	83 c4 10             	add    esp,0x10
c002494a:	41                   	inc    ecx
c002494b:	eb c1                	jmp    c002490e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002494d:	31 f6                	xor    esi,esi
c002494f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024955:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002495c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024960:	75 06                	jne    c0024968 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024962:	01 f6                	add    esi,esi
c0024964:	01 f5                	add    ebp,esi
c0024966:	eb bd                	jmp    c0024925 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024968:	51                   	push   ecx
c0024969:	51                   	push   ecx
c002496a:	52                   	push   edx
c002496b:	50                   	push   eax
c002496c:	e8 1f e7 ff ff       	call   c0023090 <IDE::getBase(unsigned char)>
c0024971:	89 c2                	mov    edx,eax
c0024973:	66 ed                	in     ax,dx
c0024975:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002497a:	83 c4 10             	add    esp,0x10
c002497d:	46                   	inc    esi
c002497e:	eb cf                	jmp    c002494f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024980:	51                   	push   ecx
c0024981:	51                   	push   ecx
c0024982:	52                   	push   edx
c0024983:	50                   	push   eax
c0024984:	e8 87 e8 ff ff       	call   c0023210 <IDE::waitInterrupt(unsigned char)>
c0024989:	83 c4 10             	add    esp,0x10
c002498c:	84 c0                	test   al,al
c002498e:	0f 84 e8 fd ff ff    	je     c002477c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024994:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024999:	52                   	push   edx
c002499a:	52                   	push   edx
c002499b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249a2:	50                   	push   eax
c00249a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249a9:	e8 ce e6 ff ff       	call   c002307c <IDE::prepareInterrupt(unsigned char)>
c00249ae:	83 c4 10             	add    esp,0x10
c00249b1:	50                   	push   eax
c00249b2:	50                   	push   eax
c00249b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249ba:	50                   	push   eax
c00249bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249c1:	e8 ca e6 ff ff       	call   c0023090 <IDE::getBase(unsigned char)>
c00249c6:	8d 50 07             	lea    edx,[eax+0x7]
c00249c9:	ec                   	in     al,dx
c00249ca:	83 c4 10             	add    esp,0x10
c00249cd:	a8 88                	test   al,0x88
c00249cf:	74 0a                	je     c00249db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00249d1:	4b                   	dec    ebx
c00249d2:	75 dd                	jne    c00249b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00249d4:	bb 02 00 00 00       	mov    ebx,0x2
c00249d9:	eb 02                	jmp    c00249dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00249db:	31 db                	xor    ebx,ebx
c00249dd:	83 c4 1c             	add    esp,0x1c
c00249e0:	89 d8                	mov    eax,ebx
c00249e2:	5b                   	pop    ebx
c00249e3:	5e                   	pop    esi
c00249e4:	5f                   	pop    edi
c00249e5:	5d                   	pop    ebp
c00249e6:	c3                   	ret    
c00249e7:	90                   	nop

c00249e8 <ATAPI::diskRemoved()>:
c00249e8:	83 ec 18             	sub    esp,0x18
c00249eb:	68 5d d1 02 c0       	push   0xc002d15d
c00249f0:	e8 d8 e5 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c00249f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00249f9:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024a00:	83 c4 1c             	add    esp,0x1c
c0024a03:	c3                   	ret    

c0024a04 <ATAPI::eject()>:
c0024a04:	57                   	push   edi
c0024a05:	b9 03 00 00 00       	mov    ecx,0x3
c0024a0a:	53                   	push   ebx
c0024a0b:	83 ec 14             	sub    esp,0x14
c0024a0e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024a12:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024a16:	fc                   	cld    
c0024a17:	31 c0                	xor    eax,eax
c0024a19:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024a1b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024a20:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024a25:	50                   	push   eax
c0024a26:	50                   	push   eax
c0024a27:	6a 00                	push   0x0
c0024a29:	6a 00                	push   0x0
c0024a2b:	6a 00                	push   0x0
c0024a2d:	6a 02                	push   0x2
c0024a2f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024a33:	50                   	push   eax
c0024a34:	53                   	push   ebx
c0024a35:	e8 ee fc ff ff       	call   c0024728 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a3a:	83 c4 14             	add    esp,0x14
c0024a3d:	53                   	push   ebx
c0024a3e:	e8 a5 ff ff ff       	call   c00249e8 <ATAPI::diskRemoved()>
c0024a43:	83 c4 24             	add    esp,0x24
c0024a46:	31 c0                	xor    eax,eax
c0024a48:	5b                   	pop    ebx
c0024a49:	5f                   	pop    edi
c0024a4a:	c3                   	ret    
c0024a4b:	90                   	nop

c0024a4c <ATAPI::diskInserted()>:
c0024a4c:	53                   	push   ebx
c0024a4d:	83 ec 14             	sub    esp,0x14
c0024a50:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024a54:	68 74 d1 02 c0       	push   0xc002d174
c0024a59:	e8 6f e5 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0024a5e:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024a65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a68:	e8 13 fe fe ff       	call   c0014880 <PhysicalDisk::startCache()>
c0024a6d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024a71:	83 c4 18             	add    esp,0x18
c0024a74:	5b                   	pop    ebx
c0024a75:	e9 7c 1f ff ff       	jmp    c00169f6 <createPartitionsForDisk(PhysicalDisk*)>

c0024a7a <ATAPI::detectMedia()>:
c0024a7a:	56                   	push   esi
c0024a7b:	53                   	push   ebx
c0024a7c:	83 ec 28             	sub    esp,0x28
c0024a7f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024a83:	6a 0c                	push   0xc
c0024a85:	6a 00                	push   0x0
c0024a87:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024a8b:	56                   	push   esi
c0024a8c:	e8 e7 bc fd ff       	call   c0000778 <memset>
c0024a91:	58                   	pop    eax
c0024a92:	5a                   	pop    edx
c0024a93:	6a 00                	push   0x0
c0024a95:	6a 00                	push   0x0
c0024a97:	6a 00                	push   0x0
c0024a99:	6a 00                	push   0x0
c0024a9b:	56                   	push   esi
c0024a9c:	53                   	push   ebx
c0024a9d:	e8 86 fc ff ff       	call   c0024728 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024aa2:	83 c4 1c             	add    esp,0x1c
c0024aa5:	6a 0c                	push   0xc
c0024aa7:	6a 00                	push   0x0
c0024aa9:	56                   	push   esi
c0024aaa:	e8 c9 bc fd ff       	call   c0000778 <memset>
c0024aaf:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024ab4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024ab9:	59                   	pop    ecx
c0024aba:	58                   	pop    eax
c0024abb:	6a 01                	push   0x1
c0024abd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024ac1:	50                   	push   eax
c0024ac2:	6a 00                	push   0x0
c0024ac4:	6a 12                	push   0x12
c0024ac6:	56                   	push   esi
c0024ac7:	53                   	push   ebx
c0024ac8:	e8 5b fc ff ff       	call   c0024728 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024acd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024ad1:	83 c4 20             	add    esp,0x20
c0024ad4:	83 e0 7f             	and    eax,0x7f
c0024ad7:	3c 70                	cmp    al,0x70
c0024ad9:	74 15                	je     c0024af0 <ATAPI::detectMedia()+0x76>
c0024adb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024ae2:	75 0c                	jne    c0024af0 <ATAPI::detectMedia()+0x76>
c0024ae4:	83 ec 0c             	sub    esp,0xc
c0024ae7:	53                   	push   ebx
c0024ae8:	e8 5f ff ff ff       	call   c0024a4c <ATAPI::diskInserted()>
c0024aed:	83 c4 10             	add    esp,0x10
c0024af0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024af4:	83 e0 0f             	and    eax,0xf
c0024af7:	3c 02                	cmp    al,0x2
c0024af9:	75 1b                	jne    c0024b16 <ATAPI::detectMedia()+0x9c>
c0024afb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024b00:	75 2d                	jne    c0024b2f <ATAPI::detectMedia()+0xb5>
c0024b02:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b09:	74 24                	je     c0024b2f <ATAPI::detectMedia()+0xb5>
c0024b0b:	83 ec 0c             	sub    esp,0xc
c0024b0e:	53                   	push   ebx
c0024b0f:	e8 d4 fe ff ff       	call   c00249e8 <ATAPI::diskRemoved()>
c0024b14:	eb 16                	jmp    c0024b2c <ATAPI::detectMedia()+0xb2>
c0024b16:	84 c0                	test   al,al
c0024b18:	75 15                	jne    c0024b2f <ATAPI::detectMedia()+0xb5>
c0024b1a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b21:	75 0c                	jne    c0024b2f <ATAPI::detectMedia()+0xb5>
c0024b23:	83 ec 0c             	sub    esp,0xc
c0024b26:	53                   	push   ebx
c0024b27:	e8 20 ff ff ff       	call   c0024a4c <ATAPI::diskInserted()>
c0024b2c:	83 c4 10             	add    esp,0x10
c0024b2f:	83 c4 24             	add    esp,0x24
c0024b32:	5b                   	pop    ebx
c0024b33:	5e                   	pop    esi
c0024b34:	c3                   	ret    
c0024b35:	90                   	nop

c0024b36 <ATAPI::open(int, int, void*)>:
c0024b36:	53                   	push   ebx
c0024b37:	83 ec 08             	sub    esp,0x8
c0024b3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b3e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024b42:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b46:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024b4c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024b52:	c1 e0 06             	shl    eax,0x6
c0024b55:	01 d0                	add    eax,edx
c0024b57:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024b5e:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024b64:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024b6b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024b75:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024b7b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024b82:	6a 04                	push   0x4
c0024b84:	6a 0c                	push   0xc
c0024b86:	51                   	push   ecx
c0024b87:	52                   	push   edx
c0024b88:	e8 15 e5 ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b8d:	90                   	nop
c0024b8e:	90                   	nop
c0024b8f:	6a 00                	push   0x0
c0024b91:	6a 0c                	push   0xc
c0024b93:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b9a:	50                   	push   eax
c0024b9b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ba1:	e8 fc e4 ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ba6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024bad:	83 c4 14             	add    esp,0x14
c0024bb0:	53                   	push   ebx
c0024bb1:	e8 c4 fe ff ff       	call   c0024a7a <ATAPI::detectMedia()>
c0024bb6:	31 c0                	xor    eax,eax
c0024bb8:	83 c4 18             	add    esp,0x18
c0024bbb:	5b                   	pop    ebx
c0024bbc:	c3                   	ret    
c0024bbd:	90                   	nop

c0024bbe <ATAPI::read(unsigned long long, int, void*)>:
c0024bbe:	55                   	push   ebp
c0024bbf:	57                   	push   edi
c0024bc0:	56                   	push   esi
c0024bc1:	53                   	push   ebx
c0024bc2:	83 ec 1c             	sub    esp,0x1c
c0024bc5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024bc9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024bcd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024bd1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024bd8:	74 41                	je     c0024c1b <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024bda:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024bde:	b9 03 00 00 00       	mov    ecx,0x3
c0024be3:	fc                   	cld    
c0024be4:	31 c0                	xor    eax,eax
c0024be6:	86 fb                	xchg   bl,bh
c0024be8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024bea:	c1 c3 10             	rol    ebx,0x10
c0024bed:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024bf2:	89 e8                	mov    eax,ebp
c0024bf4:	86 fb                	xchg   bl,bh
c0024bf6:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024bfa:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024bfe:	50                   	push   eax
c0024bff:	50                   	push   eax
c0024c00:	55                   	push   ebp
c0024c01:	c1 e5 0b             	shl    ebp,0xb
c0024c04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024c08:	6a 00                	push   0x0
c0024c0a:	55                   	push   ebp
c0024c0b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024c0f:	50                   	push   eax
c0024c10:	56                   	push   esi
c0024c11:	e8 12 fb ff ff       	call   c0024728 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024c16:	83 c4 20             	add    esp,0x20
c0024c19:	eb 1a                	jmp    c0024c35 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024c1b:	83 ec 0c             	sub    esp,0xc
c0024c1e:	56                   	push   esi
c0024c1f:	e8 56 fe ff ff       	call   c0024a7a <ATAPI::detectMedia()>
c0024c24:	83 c4 10             	add    esp,0x10
c0024c27:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024c2e:	75 aa                	jne    c0024bda <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024c30:	b8 02 00 00 00       	mov    eax,0x2
c0024c35:	83 c4 1c             	add    esp,0x1c
c0024c38:	5b                   	pop    ebx
c0024c39:	5e                   	pop    esi
c0024c3a:	5f                   	pop    edi
c0024c3b:	5d                   	pop    ebp
c0024c3c:	c3                   	ret    
c0024c3d:	90                   	nop

c0024c3e <SATA::close(int, int, void*)>:
c0024c3e:	83 ec 0c             	sub    esp,0xc
c0024c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c45:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024c4b:	85 c0                	test   eax,eax
c0024c4d:	74 0c                	je     c0024c5b <SATA::close(int, int, void*)+0x1d>
c0024c4f:	83 ec 0c             	sub    esp,0xc
c0024c52:	8b 10                	mov    edx,DWORD PTR [eax]
c0024c54:	50                   	push   eax
c0024c55:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024c58:	83 c4 10             	add    esp,0x10
c0024c5b:	31 c0                	xor    eax,eax
c0024c5d:	83 c4 0c             	add    esp,0xc
c0024c60:	c3                   	ret    
c0024c61:	90                   	nop

c0024c62 <SATA::powerSaving(PowerSavingLevel)>:
c0024c62:	c3                   	ret    
c0024c63:	90                   	nop

c0024c64 <SATA::open(int, int, void*)>:
c0024c64:	56                   	push   esi
c0024c65:	53                   	push   ebx
c0024c66:	50                   	push   eax
c0024c67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c6f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024c79:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024c7f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024c89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c8d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024c97:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024c9d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024ca4:	e8 39 b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024ca9:	89 c6                	mov    esi,eax
c0024cab:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024cb1:	81 c6 00 10 00 00    	add    esi,0x1000
c0024cb7:	e8 26 b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024cbc:	39 c6                	cmp    esi,eax
c0024cbe:	74 10                	je     c0024cd0 <SATA::open(int, int, void*)+0x6c>
c0024cc0:	83 ec 0c             	sub    esp,0xc
c0024cc3:	68 9c d0 02 c0       	push   0xc002d09c
c0024cc8:	e8 a2 59 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c0024ccd:	83 c4 10             	add    esp,0x10
c0024cd0:	83 ec 0c             	sub    esp,0xc
c0024cd3:	6a 02                	push   0x2
c0024cd5:	e8 e3 ce fe ff       	call   c0011bbd <Virt::allocateKernelVirtualPages(int)>
c0024cda:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024ce0:	e8 73 d1 fe ff       	call   c0011e58 <Virt::getAKernelVAS()>
c0024ce5:	6a 03                	push   0x3
c0024ce7:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024ced:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024cf3:	50                   	push   eax
c0024cf4:	e8 9b d6 fe ff       	call   c0012394 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024cf9:	83 c4 14             	add    esp,0x14
c0024cfc:	53                   	push   ebx
c0024cfd:	e8 7e fb fe ff       	call   c0014880 <PhysicalDisk::startCache()>
c0024d02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024d05:	e8 ec 1c ff ff       	call   c00169f6 <createPartitionsForDisk(PhysicalDisk*)>
c0024d0a:	83 c4 14             	add    esp,0x14
c0024d0d:	31 c0                	xor    eax,eax
c0024d0f:	5b                   	pop    ebx
c0024d10:	5e                   	pop    esi
c0024d11:	c3                   	ret    

c0024d12 <SATA::SATA()>:
c0024d12:	83 ec 0c             	sub    esp,0xc
c0024d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d19:	83 ec 04             	sub    esp,0x4
c0024d1c:	68 00 02 00 00       	push   0x200
c0024d21:	68 b0 d0 02 c0       	push   0xc002d0b0
c0024d26:	50                   	push   eax
c0024d27:	e8 ec fa fe ff       	call   c0014818 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024d2c:	83 c4 10             	add    esp,0x10
c0024d2f:	ba 20 d1 02 c0       	mov    edx,0xc002d120
c0024d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d38:	89 10                	mov    DWORD PTR [eax],edx
c0024d3a:	90                   	nop
c0024d3b:	83 c4 0c             	add    esp,0xc
c0024d3e:	c3                   	ret    
c0024d3f:	90                   	nop

c0024d40 <SATA::access(unsigned long long, int, void*, bool)>:
c0024d40:	55                   	push   ebp
c0024d41:	57                   	push   edi
c0024d42:	56                   	push   esi
c0024d43:	53                   	push   ebx
c0024d44:	83 ec 2c             	sub    esp,0x2c
c0024d47:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024d4b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024d4f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024d53:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024d57:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024d5b:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024d60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024d64:	7e 10                	jle    c0024d76 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024d66:	83 ec 0c             	sub    esp,0xc
c0024d69:	68 c0 d0 02 c0       	push   0xc002d0c0
c0024d6e:	e8 fc 58 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c0024d73:	83 c4 10             	add    esp,0x10
c0024d76:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024d7c:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024d82:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d8c:	89 f0                	mov    eax,esi
c0024d8e:	c1 e0 07             	shl    eax,0x7
c0024d91:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d95:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024d9f:	53                   	push   ebx
c0024da0:	8d 46 02             	lea    eax,[esi+0x2]
c0024da3:	53                   	push   ebx
c0024da4:	c1 e0 07             	shl    eax,0x7
c0024da7:	bb 01 00 00 00       	mov    ebx,0x1
c0024dac:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024db0:	50                   	push   eax
c0024db1:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024db7:	e8 aa ef ff ff       	call   c0023d66 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024dbc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024dc0:	83 c4 10             	add    esp,0x10
c0024dc3:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024dc8:	0f 84 ce 01 00 00    	je     c0024f9c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024dce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024dd2:	c1 e0 09             	shl    eax,0x9
c0024dd5:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024dda:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024dde:	74 17                	je     c0024df7 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024de0:	51                   	push   ecx
c0024de1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024de5:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024de9:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024def:	e8 50 b9 fd ff       	call   c0000744 <memcpy>
c0024df4:	83 c4 10             	add    esp,0x10
c0024df7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024dfd:	8d 46 02             	lea    eax,[esi+0x2]
c0024e00:	c1 e0 07             	shl    eax,0x7
c0024e03:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024e07:	8b 00                	mov    eax,DWORD PTR [eax]
c0024e09:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024e0f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024e15:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024e19:	c1 e1 05             	shl    ecx,0x5
c0024e1c:	01 c8                	add    eax,ecx
c0024e1e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024e22:	8a 18                	mov    bl,BYTE PTR [eax]
c0024e24:	83 e1 01             	and    ecx,0x1
c0024e27:	83 e3 bf             	and    ebx,0xffffffbf
c0024e2a:	c1 e1 06             	shl    ecx,0x6
c0024e2d:	09 d9                	or     ecx,ebx
c0024e2f:	88 08                	mov    BYTE PTR [eax],cl
c0024e31:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024e33:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024e39:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024e3f:	89 08                	mov    DWORD PTR [eax],ecx
c0024e41:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e47:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024e4d:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024e53:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024e56:	52                   	push   edx
c0024e57:	68 90 00 00 00       	push   0x90
c0024e5c:	6a 00                	push   0x0
c0024e5e:	53                   	push   ebx
c0024e5f:	e8 14 b9 fd ff       	call   c0000778 <memset>
c0024e64:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024e6a:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024e6e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024e74:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024e78:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024e7c:	83 c4 10             	add    esp,0x10
c0024e7f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024e82:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024e88:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024e8e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024e93:	09 c8                	or     eax,ecx
c0024e95:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024e9b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024e9e:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024ea5:	66 25 00 7f          	and    ax,0x7f00
c0024ea9:	66 0d 27 80          	or     ax,0x8027
c0024ead:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024eb2:	66 89 03             	mov    WORD PTR [ebx],ax
c0024eb5:	19 c0                	sbb    eax,eax
c0024eb7:	83 e0 f0             	and    eax,0xfffffff0
c0024eba:	83 c0 35             	add    eax,0x35
c0024ebd:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024ec0:	89 f8                	mov    eax,edi
c0024ec2:	c1 e8 10             	shr    eax,0x10
c0024ec5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024ec8:	89 f8                	mov    eax,edi
c0024eca:	c1 e8 18             	shr    eax,0x18
c0024ecd:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024ed0:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024ed4:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024ed7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024edb:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024ede:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024ee2:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024ee6:	89 f3                	mov    ebx,esi
c0024ee8:	31 c0                	xor    eax,eax
c0024eea:	c1 e3 07             	shl    ebx,0x7
c0024eed:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024ef1:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024ef7:	80 e1 88             	and    cl,0x88
c0024efa:	74 0a                	je     c0024f06 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024efc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f01:	74 0a                	je     c0024f0d <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024f03:	40                   	inc    eax
c0024f04:	eb eb                	jmp    c0024ef1 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024f06:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f0b:	75 0a                	jne    c0024f17 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024f0d:	83 ec 0c             	sub    esp,0xc
c0024f10:	68 f9 d0 02 c0       	push   0xc002d0f9
c0024f15:	eb 56                	jmp    c0024f6d <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024f17:	b8 01 00 00 00       	mov    eax,0x1
c0024f1c:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024f20:	c1 e6 07             	shl    esi,0x7
c0024f23:	d3 e0                	shl    eax,cl
c0024f25:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024f29:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024f2f:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024f35:	85 c8                	test   eax,ecx
c0024f37:	74 20                	je     c0024f59 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024f39:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024f3f:	0f ba e1 1e          	bt     ecx,0x1e
c0024f43:	73 ea                	jae    c0024f2f <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024f45:	83 ec 0c             	sub    esp,0xc
c0024f48:	31 db                	xor    ebx,ebx
c0024f4a:	68 07 d1 02 c0       	push   0xc002d107
c0024f4f:	e8 1b 57 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c0024f54:	83 c4 10             	add    esp,0x10
c0024f57:	eb 43                	jmp    c0024f9c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f59:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024f5f:	0f ba e0 1e          	bt     eax,0x1e
c0024f63:	73 17                	jae    c0024f7c <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024f65:	83 ec 0c             	sub    esp,0xc
c0024f68:	68 07 d1 02 c0       	push   0xc002d107
c0024f6d:	e8 fd 56 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c0024f72:	bb 01 00 00 00       	mov    ebx,0x1
c0024f77:	83 c4 10             	add    esp,0x10
c0024f7a:	eb 20                	jmp    c0024f9c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f7c:	31 db                	xor    ebx,ebx
c0024f7e:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024f83:	75 17                	jne    c0024f9c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f85:	50                   	push   eax
c0024f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f8a:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024f90:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024f94:	e8 ab b7 fd ff       	call   c0000744 <memcpy>
c0024f99:	83 c4 10             	add    esp,0x10
c0024f9c:	83 c4 2c             	add    esp,0x2c
c0024f9f:	89 d8                	mov    eax,ebx
c0024fa1:	5b                   	pop    ebx
c0024fa2:	5e                   	pop    esi
c0024fa3:	5f                   	pop    edi
c0024fa4:	5d                   	pop    ebp
c0024fa5:	c3                   	ret    

c0024fa6 <SATA::read(unsigned long long, int, void*)>:
c0024fa6:	57                   	push   edi
c0024fa7:	b8 04 00 00 00       	mov    eax,0x4
c0024fac:	56                   	push   esi
c0024fad:	53                   	push   ebx
c0024fae:	83 ec 10             	sub    esp,0x10
c0024fb1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024fb5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024fb9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024fbc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024fc0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024fc4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024fca:	77 3b                	ja     c0025007 <SATA::read(unsigned long long, int, void*)+0x61>
c0024fcc:	b8 06 00 00 00       	mov    eax,0x6
c0024fd1:	85 d2                	test   edx,edx
c0024fd3:	74 32                	je     c0025007 <SATA::read(unsigned long long, int, void*)+0x61>
c0024fd5:	50                   	push   eax
c0024fd6:	50                   	push   eax
c0024fd7:	6a 00                	push   0x0
c0024fd9:	52                   	push   edx
c0024fda:	53                   	push   ebx
c0024fdb:	57                   	push   edi
c0024fdc:	56                   	push   esi
c0024fdd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024fe1:	e8 5a fd ff ff       	call   c0024d40 <SATA::access(unsigned long long, int, void*, bool)>
c0024fe6:	83 c4 20             	add    esp,0x20
c0024fe9:	85 c0                	test   eax,eax
c0024feb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024fef:	75 11                	jne    c0025002 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024ff1:	01 1d a8 29 03 c0    	add    DWORD PTR ds:0xc00329a8,ebx
c0024ff7:	e8 16 ba fe ff       	call   c0010a12 <VgaText::updateDiskUsage()>
c0024ffc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025000:	eb 05                	jmp    c0025007 <SATA::read(unsigned long long, int, void*)+0x61>
c0025002:	b8 01 00 00 00       	mov    eax,0x1
c0025007:	83 c4 10             	add    esp,0x10
c002500a:	5b                   	pop    ebx
c002500b:	5e                   	pop    esi
c002500c:	5f                   	pop    edi
c002500d:	c3                   	ret    

c002500e <SATA::write(unsigned long long, int, void*)>:
c002500e:	55                   	push   ebp
c002500f:	b8 04 00 00 00       	mov    eax,0x4
c0025014:	57                   	push   edi
c0025015:	56                   	push   esi
c0025016:	53                   	push   ebx
c0025017:	83 ec 1c             	sub    esp,0x1c
c002501a:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002501e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025022:	8d 75 ff             	lea    esi,[ebp-0x1]
c0025025:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0025029:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c002502d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025033:	77 56                	ja     c002508b <SATA::write(unsigned long long, int, void*)+0x7d>
c0025035:	b8 06 00 00 00       	mov    eax,0x6
c002503a:	85 ff                	test   edi,edi
c002503c:	74 4d                	je     c002508b <SATA::write(unsigned long long, int, void*)+0x7d>
c002503e:	89 ee                	mov    esi,ebp
c0025040:	c1 e6 09             	shl    esi,0x9
c0025043:	01 fe                	add    esi,edi
c0025045:	89 c8                	mov    eax,ecx
c0025047:	89 da                	mov    edx,ebx
c0025049:	83 c0 01             	add    eax,0x1
c002504c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025050:	83 d2 00             	adc    edx,0x0
c0025053:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025057:	50                   	push   eax
c0025058:	50                   	push   eax
c0025059:	6a 01                	push   0x1
c002505b:	57                   	push   edi
c002505c:	81 c7 00 02 00 00    	add    edi,0x200
c0025062:	6a 01                	push   0x1
c0025064:	53                   	push   ebx
c0025065:	51                   	push   ecx
c0025066:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002506a:	e8 d1 fc ff ff       	call   c0024d40 <SATA::access(unsigned long long, int, void*, bool)>
c002506f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025073:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025077:	83 c4 20             	add    esp,0x20
c002507a:	39 f7                	cmp    edi,esi
c002507c:	75 c7                	jne    c0025045 <SATA::write(unsigned long long, int, void*)+0x37>
c002507e:	01 2d a4 29 03 c0    	add    DWORD PTR ds:0xc00329a4,ebp
c0025084:	e8 89 b9 fe ff       	call   c0010a12 <VgaText::updateDiskUsage()>
c0025089:	31 c0                	xor    eax,eax
c002508b:	83 c4 1c             	add    esp,0x1c
c002508e:	5b                   	pop    ebx
c002508f:	5e                   	pop    esi
c0025090:	5f                   	pop    edi
c0025091:	5d                   	pop    ebp
c0025092:	c3                   	ret    
c0025093:	90                   	nop

c0025094 <SATAPI::write(unsigned long long, int, void*)>:
c0025094:	b8 03 00 00 00       	mov    eax,0x3
c0025099:	c3                   	ret    

c002509a <SATAPI::close(int, int, void*)>:
c002509a:	83 ec 0c             	sub    esp,0xc
c002509d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250a1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00250a7:	85 c0                	test   eax,eax
c00250a9:	74 0c                	je     c00250b7 <SATAPI::close(int, int, void*)+0x1d>
c00250ab:	83 ec 0c             	sub    esp,0xc
c00250ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00250b0:	50                   	push   eax
c00250b1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00250b4:	83 c4 10             	add    esp,0x10
c00250b7:	31 c0                	xor    eax,eax
c00250b9:	83 c4 0c             	add    esp,0xc
c00250bc:	c3                   	ret    
c00250bd:	90                   	nop

c00250be <SATAPI::SATAPI()>:
c00250be:	83 ec 0c             	sub    esp,0xc
c00250c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250c5:	83 ec 04             	sub    esp,0x4
c00250c8:	68 00 08 00 00       	push   0x800
c00250cd:	68 50 d1 02 c0       	push   0xc002d150
c00250d2:	50                   	push   eax
c00250d3:	e8 40 f7 fe ff       	call   c0014818 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00250d8:	83 c4 10             	add    esp,0x10
c00250db:	ba fc d1 02 c0       	mov    edx,0xc002d1fc
c00250e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250e4:	89 10                	mov    DWORD PTR [eax],edx
c00250e6:	90                   	nop
c00250e7:	83 c4 0c             	add    esp,0xc
c00250ea:	c3                   	ret    
c00250eb:	90                   	nop

c00250ec <SATAPI::diskRemoved()>:
c00250ec:	83 ec 18             	sub    esp,0x18
c00250ef:	68 5c d1 02 c0       	push   0xc002d15c
c00250f4:	e8 d4 de fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c00250f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00250fd:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025104:	83 c4 1c             	add    esp,0x1c
c0025107:	c3                   	ret    

c0025108 <SATAPI::diskInserted()>:
c0025108:	53                   	push   ebx
c0025109:	83 ec 14             	sub    esp,0x14
c002510c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025110:	68 73 d1 02 c0       	push   0xc002d173
c0025115:	e8 b3 de fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c002511a:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025121:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025124:	e8 57 f7 fe ff       	call   c0014880 <PhysicalDisk::startCache()>
c0025129:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002512d:	83 c4 18             	add    esp,0x18
c0025130:	5b                   	pop    ebx
c0025131:	e9 c0 18 ff ff       	jmp    c00169f6 <createPartitionsForDisk(PhysicalDisk*)>

c0025136 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025136:	55                   	push   ebp
c0025137:	57                   	push   edi
c0025138:	56                   	push   esi
c0025139:	53                   	push   ebx
c002513a:	83 ec 24             	sub    esp,0x24
c002513d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025141:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025145:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c002514b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002514f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025153:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0025159:	8d 5f 02             	lea    ebx,[edi+0x2]
c002515c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025162:	c1 e3 07             	shl    ebx,0x7
c0025165:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025169:	89 f8                	mov    eax,edi
c002516b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002516f:	c1 e0 07             	shl    eax,0x7
c0025172:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025176:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002517a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025184:	53                   	push   ebx
c0025185:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c002518b:	e8 d6 eb ff ff       	call   c0023d66 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025190:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025194:	83 c4 10             	add    esp,0x10
c0025197:	b8 01 00 00 00       	mov    eax,0x1
c002519c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00251a1:	0f 84 8a 01 00 00    	je     c0025331 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00251a7:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00251ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00251af:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00251b5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00251bb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00251bf:	c1 e1 05             	shl    ecx,0x5
c00251c2:	01 c8                	add    eax,ecx
c00251c4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00251c6:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00251cc:	81 c9 25 00 01 00    	or     ecx,0x10025
c00251d2:	89 08                	mov    DWORD PTR [eax],ecx
c00251d4:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00251da:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00251e0:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00251e6:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00251e9:	52                   	push   edx
c00251ea:	68 90 00 00 00       	push   0x90
c00251ef:	6a 00                	push   0x0
c00251f1:	53                   	push   ebx
c00251f2:	e8 81 b5 fd ff       	call   c0000778 <memset>
c00251f7:	83 c4 0c             	add    esp,0xc
c00251fa:	8d 43 40             	lea    eax,[ebx+0x40]
c00251fd:	6a 0c                	push   0xc
c00251ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025203:	50                   	push   eax
c0025204:	e8 3b b5 fd ff       	call   c0000744 <memcpy>
c0025209:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c002520f:	89 ea                	mov    edx,ebp
c0025211:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025217:	c1 ea 18             	shr    edx,0x18
c002521a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002521e:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025221:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025224:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025228:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002522e:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025234:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025239:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c002523d:	09 c8                	or     eax,ecx
c002523f:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025243:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025249:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002524c:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025253:	66 25 00 7f          	and    ax,0x7f00
c0025257:	66 0d 27 80          	or     ax,0x8027
c002525b:	66 89 03             	mov    WORD PTR [ebx],ax
c002525e:	89 e8                	mov    eax,ebp
c0025260:	c1 e8 10             	shr    eax,0x10
c0025263:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025266:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002526a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002526d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025271:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025274:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025278:	83 c4 10             	add    esp,0x10
c002527b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002527f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025283:	31 c0                	xor    eax,eax
c0025285:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002528b:	80 e1 88             	and    cl,0x88
c002528e:	74 0a                	je     c002529a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0025290:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025295:	74 0a                	je     c00252a1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025297:	40                   	inc    eax
c0025298:	eb eb                	jmp    c0025285 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c002529a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002529f:	75 0f                	jne    c00252b0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00252a1:	83 ec 0c             	sub    esp,0xc
c00252a4:	68 f9 d0 02 c0       	push   0xc002d0f9
c00252a9:	e8 c1 53 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c00252ae:	eb 3a                	jmp    c00252ea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00252b0:	b8 01 00 00 00       	mov    eax,0x1
c00252b5:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00252b9:	c1 e7 07             	shl    edi,0x7
c00252bc:	d3 e0                	shl    eax,cl
c00252be:	03 3c 24             	add    edi,DWORD PTR [esp]
c00252c1:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00252c7:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00252cd:	85 d0                	test   eax,edx
c00252cf:	74 23                	je     c00252f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00252d1:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c00252d7:	0f ba e2 1e          	bt     edx,0x1e
c00252db:	73 ea                	jae    c00252c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c00252dd:	83 ec 0c             	sub    esp,0xc
c00252e0:	68 8b d1 02 c0       	push   0xc002d18b
c00252e5:	e8 e3 dc fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c00252ea:	83 c4 10             	add    esp,0x10
c00252ed:	b8 01 00 00 00       	mov    eax,0x1
c00252f2:	eb 3d                	jmp    c0025331 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00252f4:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00252fa:	0f ba e0 1e          	bt     eax,0x1e
c00252fe:	73 0a                	jae    c002530a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025300:	83 ec 0c             	sub    esp,0xc
c0025303:	68 9e d1 02 c0       	push   0xc002d19e
c0025308:	eb db                	jmp    c00252e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c002530a:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c002530f:	74 1e                	je     c002532f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025311:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025316:	74 17                	je     c002532f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025318:	50                   	push   eax
c0025319:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002531d:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025323:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025327:	e8 18 b4 fd ff       	call   c0000744 <memcpy>
c002532c:	83 c4 10             	add    esp,0x10
c002532f:	31 c0                	xor    eax,eax
c0025331:	83 c4 1c             	add    esp,0x1c
c0025334:	5b                   	pop    ebx
c0025335:	5e                   	pop    esi
c0025336:	5f                   	pop    edi
c0025337:	5d                   	pop    ebp
c0025338:	c3                   	ret    
c0025339:	90                   	nop

c002533a <SATAPI::eject()>:
c002533a:	57                   	push   edi
c002533b:	b9 03 00 00 00       	mov    ecx,0x3
c0025340:	53                   	push   ebx
c0025341:	83 ec 14             	sub    esp,0x14
c0025344:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025348:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002534c:	fc                   	cld    
c002534d:	31 c0                	xor    eax,eax
c002534f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025351:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025356:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002535b:	50                   	push   eax
c002535c:	6a 00                	push   0x0
c002535e:	6a 00                	push   0x0
c0025360:	6a 00                	push   0x0
c0025362:	6a 00                	push   0x0
c0025364:	6a 02                	push   0x2
c0025366:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002536a:	50                   	push   eax
c002536b:	53                   	push   ebx
c002536c:	e8 c5 fd ff ff       	call   c0025136 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025371:	83 c4 14             	add    esp,0x14
c0025374:	53                   	push   ebx
c0025375:	e8 72 fd ff ff       	call   c00250ec <SATAPI::diskRemoved()>
c002537a:	83 c4 24             	add    esp,0x24
c002537d:	31 c0                	xor    eax,eax
c002537f:	5b                   	pop    ebx
c0025380:	5f                   	pop    edi
c0025381:	c3                   	ret    

c0025382 <SATAPI::detectMedia()>:
c0025382:	56                   	push   esi
c0025383:	53                   	push   ebx
c0025384:	83 ec 28             	sub    esp,0x28
c0025387:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002538b:	6a 0c                	push   0xc
c002538d:	6a 00                	push   0x0
c002538f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025393:	56                   	push   esi
c0025394:	e8 df b3 fd ff       	call   c0000778 <memset>
c0025399:	83 c4 0c             	add    esp,0xc
c002539c:	6a 00                	push   0x0
c002539e:	6a 00                	push   0x0
c00253a0:	6a 00                	push   0x0
c00253a2:	6a 00                	push   0x0
c00253a4:	6a 00                	push   0x0
c00253a6:	56                   	push   esi
c00253a7:	53                   	push   ebx
c00253a8:	e8 89 fd ff ff       	call   c0025136 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00253ad:	83 c4 1c             	add    esp,0x1c
c00253b0:	6a 0c                	push   0xc
c00253b2:	6a 00                	push   0x0
c00253b4:	56                   	push   esi
c00253b5:	e8 be b3 fd ff       	call   c0000778 <memset>
c00253ba:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00253bf:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00253c4:	83 c4 0c             	add    esp,0xc
c00253c7:	6a 01                	push   0x1
c00253c9:	8d 44 24 16          	lea    eax,[esp+0x16]
c00253cd:	50                   	push   eax
c00253ce:	6a 00                	push   0x0
c00253d0:	6a 00                	push   0x0
c00253d2:	6a 12                	push   0x12
c00253d4:	56                   	push   esi
c00253d5:	53                   	push   ebx
c00253d6:	e8 5b fd ff ff       	call   c0025136 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00253db:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00253df:	83 c4 20             	add    esp,0x20
c00253e2:	83 e0 7f             	and    eax,0x7f
c00253e5:	3c 70                	cmp    al,0x70
c00253e7:	74 15                	je     c00253fe <SATAPI::detectMedia()+0x7c>
c00253e9:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253f0:	75 0c                	jne    c00253fe <SATAPI::detectMedia()+0x7c>
c00253f2:	83 ec 0c             	sub    esp,0xc
c00253f5:	53                   	push   ebx
c00253f6:	e8 0d fd ff ff       	call   c0025108 <SATAPI::diskInserted()>
c00253fb:	83 c4 10             	add    esp,0x10
c00253fe:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025402:	83 e0 0f             	and    eax,0xf
c0025405:	3c 02                	cmp    al,0x2
c0025407:	75 1b                	jne    c0025424 <SATAPI::detectMedia()+0xa2>
c0025409:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002540e:	75 2d                	jne    c002543d <SATAPI::detectMedia()+0xbb>
c0025410:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025417:	74 24                	je     c002543d <SATAPI::detectMedia()+0xbb>
c0025419:	83 ec 0c             	sub    esp,0xc
c002541c:	53                   	push   ebx
c002541d:	e8 ca fc ff ff       	call   c00250ec <SATAPI::diskRemoved()>
c0025422:	eb 16                	jmp    c002543a <SATAPI::detectMedia()+0xb8>
c0025424:	84 c0                	test   al,al
c0025426:	75 15                	jne    c002543d <SATAPI::detectMedia()+0xbb>
c0025428:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002542f:	75 0c                	jne    c002543d <SATAPI::detectMedia()+0xbb>
c0025431:	83 ec 0c             	sub    esp,0xc
c0025434:	53                   	push   ebx
c0025435:	e8 ce fc ff ff       	call   c0025108 <SATAPI::diskInserted()>
c002543a:	83 c4 10             	add    esp,0x10
c002543d:	83 c4 24             	add    esp,0x24
c0025440:	5b                   	pop    ebx
c0025441:	5e                   	pop    esi
c0025442:	c3                   	ret    
c0025443:	90                   	nop

c0025444 <SATAPI::open(int, int, void*)>:
c0025444:	56                   	push   esi
c0025445:	53                   	push   ebx
c0025446:	50                   	push   eax
c0025447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002544b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002544f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025459:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002545f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002546d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025477:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002547d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025484:	e8 59 aa fe ff       	call   c000fee2 <Phys::allocatePage()>
c0025489:	89 c6                	mov    esi,eax
c002548b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025491:	81 c6 00 10 00 00    	add    esi,0x1000
c0025497:	e8 46 aa fe ff       	call   c000fee2 <Phys::allocatePage()>
c002549c:	39 c6                	cmp    esi,eax
c002549e:	74 10                	je     c00254b0 <SATAPI::open(int, int, void*)+0x6c>
c00254a0:	83 ec 0c             	sub    esp,0xc
c00254a3:	68 b3 d1 02 c0       	push   0xc002d1b3
c00254a8:	e8 c2 51 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c00254ad:	83 c4 10             	add    esp,0x10
c00254b0:	83 ec 0c             	sub    esp,0xc
c00254b3:	6a 02                	push   0x2
c00254b5:	e8 03 c7 fe ff       	call   c0011bbd <Virt::allocateKernelVirtualPages(int)>
c00254ba:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00254c0:	e8 93 c9 fe ff       	call   c0011e58 <Virt::getAKernelVAS()>
c00254c5:	6a 03                	push   0x3
c00254c7:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00254cd:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00254d3:	50                   	push   eax
c00254d4:	e8 bb ce fe ff       	call   c0012394 <VAS::mapPage(unsigned long, unsigned long, int)>
c00254d9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00254e0:	83 c4 14             	add    esp,0x14
c00254e3:	53                   	push   ebx
c00254e4:	e8 99 fe ff ff       	call   c0025382 <SATAPI::detectMedia()>
c00254e9:	83 c4 14             	add    esp,0x14
c00254ec:	31 c0                	xor    eax,eax
c00254ee:	5b                   	pop    ebx
c00254ef:	5e                   	pop    esi
c00254f0:	c3                   	ret    
c00254f1:	90                   	nop

c00254f2 <SATAPI::read(unsigned long long, int, void*)>:
c00254f2:	55                   	push   ebp
c00254f3:	57                   	push   edi
c00254f4:	56                   	push   esi
c00254f5:	53                   	push   ebx
c00254f6:	83 ec 1c             	sub    esp,0x1c
c00254f9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00254fd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025501:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025505:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002550c:	74 19                	je     c0025527 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002550e:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025513:	7e 2e                	jle    c0025543 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025515:	83 ec 0c             	sub    esp,0xc
c0025518:	68 c9 d1 02 c0       	push   0xc002d1c9
c002551d:	e8 4d 51 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c0025522:	83 c4 10             	add    esp,0x10
c0025525:	eb 1c                	jmp    c0025543 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025527:	83 ec 0c             	sub    esp,0xc
c002552a:	55                   	push   ebp
c002552b:	e8 52 fe ff ff       	call   c0025382 <SATAPI::detectMedia()>
c0025530:	83 c4 10             	add    esp,0x10
c0025533:	b8 02 00 00 00       	mov    eax,0x2
c0025538:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002553f:	75 cd                	jne    c002550e <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025541:	eb 49                	jmp    c002558c <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025543:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025547:	b9 03 00 00 00       	mov    ecx,0x3
c002554c:	fc                   	cld    
c002554d:	31 c0                	xor    eax,eax
c002554f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025551:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025556:	89 d8                	mov    eax,ebx
c0025558:	86 e0                	xchg   al,ah
c002555a:	c1 c0 10             	rol    eax,0x10
c002555d:	86 e0                	xchg   al,ah
c002555f:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025563:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025567:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002556b:	50                   	push   eax
c002556c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025570:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025574:	56                   	push   esi
c0025575:	53                   	push   ebx
c0025576:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002557a:	c1 e0 0b             	shl    eax,0xb
c002557d:	50                   	push   eax
c002557e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025582:	50                   	push   eax
c0025583:	55                   	push   ebp
c0025584:	e8 ad fb ff ff       	call   c0025136 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025589:	83 c4 20             	add    esp,0x20
c002558c:	83 c4 1c             	add    esp,0x1c
c002558f:	5b                   	pop    ebx
c0025590:	5e                   	pop    esi
c0025591:	5f                   	pop    edi
c0025592:	5d                   	pop    ebp
c0025593:	c3                   	ret    

c0025594 <AVX::open(int, int, void*)>:
c0025594:	83 ec 0c             	sub    esp,0xc
c0025597:	e8 3c 11 00 00       	call   c00266d8 <avxInit>
c002559c:	b8 00 00 00 00       	mov    eax,0x0
c00255a1:	83 c4 0c             	add    esp,0xc
c00255a4:	c3                   	ret    
c00255a5:	90                   	nop

c00255a6 <AVX::close(int, int, void*)>:
c00255a6:	83 ec 0c             	sub    esp,0xc
c00255a9:	e8 2b 11 00 00       	call   c00266d9 <avxClose>
c00255ae:	b8 00 00 00 00       	mov    eax,0x0
c00255b3:	83 c4 0c             	add    esp,0xc
c00255b6:	c3                   	ret    
c00255b7:	90                   	nop

c00255b8 <AVX::available()>:
c00255b8:	83 ec 0c             	sub    esp,0xc
c00255bb:	e8 10 11 00 00       	call   c00266d0 <avxDetect>
c00255c0:	85 c0                	test   eax,eax
c00255c2:	0f 95 c0             	setne  al
c00255c5:	83 c4 0c             	add    esp,0xc
c00255c8:	c3                   	ret    
c00255c9:	90                   	nop

c00255ca <AVX::save(void*)>:
c00255ca:	83 ec 0c             	sub    esp,0xc
c00255cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255d1:	83 ec 0c             	sub    esp,0xc
c00255d4:	50                   	push   eax
c00255d5:	e8 fc 10 00 00       	call   c00266d6 <avxSave>
c00255da:	83 c4 10             	add    esp,0x10
c00255dd:	90                   	nop
c00255de:	83 c4 0c             	add    esp,0xc
c00255e1:	c3                   	ret    

c00255e2 <AVX::load(void*)>:
c00255e2:	83 ec 0c             	sub    esp,0xc
c00255e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255e9:	83 ec 0c             	sub    esp,0xc
c00255ec:	50                   	push   eax
c00255ed:	e8 e5 10 00 00       	call   c00266d7 <avxLoad>
c00255f2:	83 c4 10             	add    esp,0x10
c00255f5:	90                   	nop
c00255f6:	83 c4 0c             	add    esp,0xc
c00255f9:	c3                   	ret    

c00255fa <AVX::AVX()>:
c00255fa:	83 ec 0c             	sub    esp,0xc
c00255fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025601:	83 ec 08             	sub    esp,0x8
c0025604:	68 2c d2 02 c0       	push   0xc002d22c
c0025609:	50                   	push   eax
c002560a:	e8 e7 f2 fe ff       	call   c00148f6 <FPU::FPU(char const*)>
c002560f:	83 c4 10             	add    esp,0x10
c0025612:	ba 3c d2 02 c0       	mov    edx,0xc002d23c
c0025617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002561b:	89 10                	mov    DWORD PTR [eax],edx
c002561d:	90                   	nop
c002561e:	83 c4 0c             	add    esp,0xc
c0025621:	c3                   	ret    

c0025622 <MMX::available()>:
c0025622:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0025627:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002562d:	83 e0 20             	and    eax,0x20
c0025630:	84 c0                	test   al,al
c0025632:	0f 95 c0             	setne  al
c0025635:	c3                   	ret    

c0025636 <MMX::open(int, int, void*)>:
c0025636:	83 ec 0c             	sub    esp,0xc
c0025639:	e8 1e 11 00 00       	call   c002675c <x87Init>
c002563e:	b8 00 00 00 00       	mov    eax,0x0
c0025643:	83 c4 0c             	add    esp,0xc
c0025646:	c3                   	ret    
c0025647:	90                   	nop

c0025648 <MMX::close(int, int, void*)>:
c0025648:	83 ec 0c             	sub    esp,0xc
c002564b:	e8 26 11 00 00       	call   c0026776 <x87Close>
c0025650:	b8 00 00 00 00       	mov    eax,0x0
c0025655:	83 c4 0c             	add    esp,0xc
c0025658:	c3                   	ret    
c0025659:	90                   	nop

c002565a <MMX::save(void*)>:
c002565a:	83 ec 0c             	sub    esp,0xc
c002565d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025661:	83 ec 0c             	sub    esp,0xc
c0025664:	50                   	push   eax
c0025665:	e8 e7 10 00 00       	call   c0026751 <x87Save>
c002566a:	83 c4 10             	add    esp,0x10
c002566d:	90                   	nop
c002566e:	83 c4 0c             	add    esp,0xc
c0025671:	c3                   	ret    

c0025672 <MMX::load(void*)>:
c0025672:	83 ec 0c             	sub    esp,0xc
c0025675:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025679:	83 ec 0c             	sub    esp,0xc
c002567c:	50                   	push   eax
c002567d:	e8 d5 10 00 00       	call   c0026757 <x87Load>
c0025682:	83 c4 10             	add    esp,0x10
c0025685:	90                   	nop
c0025686:	83 c4 0c             	add    esp,0xc
c0025689:	c3                   	ret    

c002568a <MMX::MMX()>:
c002568a:	83 ec 0c             	sub    esp,0xc
c002568d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025691:	83 ec 08             	sub    esp,0x8
c0025694:	68 6c d2 02 c0       	push   0xc002d26c
c0025699:	50                   	push   eax
c002569a:	e8 57 f2 fe ff       	call   c00148f6 <FPU::FPU(char const*)>
c002569f:	83 c4 10             	add    esp,0x10
c00256a2:	ba 7c d2 02 c0       	mov    edx,0xc002d27c
c00256a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256ab:	89 10                	mov    DWORD PTR [eax],edx
c00256ad:	90                   	nop
c00256ae:	83 c4 0c             	add    esp,0xc
c00256b1:	c3                   	ret    

c00256b2 <SSE::open(int, int, void*)>:
c00256b2:	83 ec 0c             	sub    esp,0xc
c00256b5:	e8 5a 10 00 00       	call   c0026714 <sseInit>
c00256ba:	b8 00 00 00 00       	mov    eax,0x0
c00256bf:	83 c4 0c             	add    esp,0xc
c00256c2:	c3                   	ret    
c00256c3:	90                   	nop

c00256c4 <SSE::close(int, int, void*)>:
c00256c4:	83 ec 0c             	sub    esp,0xc
c00256c7:	e8 58 10 00 00       	call   c0026724 <sseClose>
c00256cc:	b8 00 00 00 00       	mov    eax,0x0
c00256d1:	83 c4 0c             	add    esp,0xc
c00256d4:	c3                   	ret    
c00256d5:	90                   	nop

c00256d6 <SSE::available()>:
c00256d6:	83 ec 1c             	sub    esp,0x1c
c00256d9:	e8 12 10 00 00       	call   c00266f0 <absolutelyNoChanceInHell>
c00256de:	85 c0                	test   eax,eax
c00256e0:	0f 95 c0             	setne  al
c00256e3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00256e7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00256eb:	83 c4 1c             	add    esp,0x1c
c00256ee:	c3                   	ret    
c00256ef:	90                   	nop

c00256f0 <SSE::save(void*)>:
c00256f0:	83 ec 0c             	sub    esp,0xc
c00256f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256f7:	83 ec 0c             	sub    esp,0xc
c00256fa:	50                   	push   eax
c00256fb:	e8 08 10 00 00       	call   c0026708 <sseSave>
c0025700:	83 c4 10             	add    esp,0x10
c0025703:	90                   	nop
c0025704:	83 c4 0c             	add    esp,0xc
c0025707:	c3                   	ret    

c0025708 <SSE::load(void*)>:
c0025708:	83 ec 0c             	sub    esp,0xc
c002570b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002570f:	83 ec 0c             	sub    esp,0xc
c0025712:	50                   	push   eax
c0025713:	e8 f6 0f 00 00       	call   c002670e <sseLoad>
c0025718:	83 c4 10             	add    esp,0x10
c002571b:	90                   	nop
c002571c:	83 c4 0c             	add    esp,0xc
c002571f:	c3                   	ret    

c0025720 <SSE::SSE()>:
c0025720:	83 ec 0c             	sub    esp,0xc
c0025723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025727:	83 ec 08             	sub    esp,0x8
c002572a:	68 ac d2 02 c0       	push   0xc002d2ac
c002572f:	50                   	push   eax
c0025730:	e8 c1 f1 fe ff       	call   c00148f6 <FPU::FPU(char const*)>
c0025735:	83 c4 10             	add    esp,0x10
c0025738:	ba bc d2 02 c0       	mov    edx,0xc002d2bc
c002573d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025741:	89 10                	mov    DWORD PTR [eax],edx
c0025743:	90                   	nop
c0025744:	83 c4 0c             	add    esp,0xc
c0025747:	c3                   	ret    

c0025748 <x87::open(int, int, void*)>:
c0025748:	83 ec 0c             	sub    esp,0xc
c002574b:	e8 0c 10 00 00       	call   c002675c <x87Init>
c0025750:	b8 00 00 00 00       	mov    eax,0x0
c0025755:	83 c4 0c             	add    esp,0xc
c0025758:	c3                   	ret    
c0025759:	90                   	nop

c002575a <x87::close(int, int, void*)>:
c002575a:	83 ec 0c             	sub    esp,0xc
c002575d:	e8 14 10 00 00       	call   c0026776 <x87Close>
c0025762:	b8 00 00 00 00       	mov    eax,0x0
c0025767:	83 c4 0c             	add    esp,0xc
c002576a:	c3                   	ret    
c002576b:	90                   	nop

c002576c <x87::available()>:
c002576c:	83 ec 0c             	sub    esp,0xc
c002576f:	e8 c2 0f 00 00       	call   c0026736 <x87Detect>
c0025774:	85 c0                	test   eax,eax
c0025776:	0f 95 c0             	setne  al
c0025779:	83 c4 0c             	add    esp,0xc
c002577c:	c3                   	ret    
c002577d:	90                   	nop

c002577e <x87::save(void*)>:
c002577e:	83 ec 0c             	sub    esp,0xc
c0025781:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025785:	83 ec 0c             	sub    esp,0xc
c0025788:	50                   	push   eax
c0025789:	e8 c3 0f 00 00       	call   c0026751 <x87Save>
c002578e:	83 c4 10             	add    esp,0x10
c0025791:	90                   	nop
c0025792:	83 c4 0c             	add    esp,0xc
c0025795:	c3                   	ret    

c0025796 <x87::load(void*)>:
c0025796:	83 ec 0c             	sub    esp,0xc
c0025799:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002579d:	83 ec 0c             	sub    esp,0xc
c00257a0:	50                   	push   eax
c00257a1:	e8 b1 0f 00 00       	call   c0026757 <x87Load>
c00257a6:	83 c4 10             	add    esp,0x10
c00257a9:	90                   	nop
c00257aa:	83 c4 0c             	add    esp,0xc
c00257ad:	c3                   	ret    

c00257ae <x87::x87()>:
c00257ae:	83 ec 0c             	sub    esp,0xc
c00257b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257b5:	83 ec 08             	sub    esp,0x8
c00257b8:	68 ec d2 02 c0       	push   0xc002d2ec
c00257bd:	50                   	push   eax
c00257be:	e8 33 f1 fe ff       	call   c00148f6 <FPU::FPU(char const*)>
c00257c3:	83 c4 10             	add    esp,0x10
c00257c6:	ba fc d2 02 c0       	mov    edx,0xc002d2fc
c00257cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257cf:	89 10                	mov    DWORD PTR [eax],edx
c00257d1:	90                   	nop
c00257d2:	83 c4 0c             	add    esp,0xc
c00257d5:	c3                   	ret    

c00257d6 <APIC::disable()>:
c00257d6:	90                   	nop
c00257d7:	c3                   	ret    

c00257d8 <APIC::close(int, int, void*)>:
c00257d8:	55                   	push   ebp
c00257d9:	89 e5                	mov    ebp,esp
c00257db:	83 ec 08             	sub    esp,0x8
c00257de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00257e3:	83 c0 3c             	add    eax,0x3c
c00257e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00257e8:	83 ec 0c             	sub    esp,0xc
c00257eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257ee:	ff d0                	call   eax
c00257f0:	83 c4 10             	add    esp,0x10
c00257f3:	b8 00 00 00 00       	mov    eax,0x0
c00257f8:	c9                   	leave  
c00257f9:	c3                   	ret    

c00257fa <IOAPIC::close(int, int, void*)>:
c00257fa:	b8 00 00 00 00       	mov    eax,0x0
c00257ff:	c3                   	ret    

c0025800 <APIC::io_wait()>:
c0025800:	eb 00                	jmp    c0025802 <APIC::io_wait()+0x2>
c0025802:	eb 00                	jmp    c0025804 <APIC::io_wait()+0x4>
c0025804:	90                   	nop
c0025805:	c3                   	ret    

c0025806 <APIC::getBase()>:
c0025806:	55                   	push   ebp
c0025807:	89 e5                	mov    ebp,esp
c0025809:	83 ec 18             	sub    esp,0x18
c002580c:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0025811:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025817:	83 e0 08             	and    eax,0x8
c002581a:	84 c0                	test   al,al
c002581c:	75 07                	jne    c0025825 <APIC::getBase()+0x1f>
c002581e:	b8 00 00 00 00       	mov    eax,0x0
c0025823:	eb 21                	jmp    c0025846 <APIC::getBase()+0x40>
c0025825:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c002582a:	83 ec 08             	sub    esp,0x8
c002582d:	6a 1b                	push   0x1b
c002582f:	50                   	push   eax
c0025830:	e8 b3 95 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0025835:	83 c4 10             	add    esp,0x10
c0025838:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002583b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002583e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025841:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025846:	c9                   	leave  
c0025847:	c3                   	ret    

c0025848 <APIC::eoi(unsigned char)>:
c0025848:	55                   	push   ebp
c0025849:	89 e5                	mov    ebp,esp
c002584b:	83 ec 28             	sub    esp,0x28
c002584e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025851:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025854:	83 ec 0c             	sub    esp,0xc
c0025857:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002585a:	e8 a7 ff ff ff       	call   c0025806 <APIC::getBase()>
c002585f:	83 c4 10             	add    esp,0x10
c0025862:	05 b0 00 00 00       	add    eax,0xb0
c0025867:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002586a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002586d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025873:	90                   	nop
c0025874:	c9                   	leave  
c0025875:	c3                   	ret    

c0025876 <APIC::open(int, int, void*)>:
c0025876:	55                   	push   ebp
c0025877:	89 e5                	mov    ebp,esp
c0025879:	57                   	push   edi
c002587a:	56                   	push   esi
c002587b:	53                   	push   ebx
c002587c:	83 ec 2c             	sub    esp,0x2c
c002587f:	83 ec 0c             	sub    esp,0xc
c0025882:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025885:	e8 7c ff ff ff       	call   c0025806 <APIC::getBase()>
c002588a:	83 c4 10             	add    esp,0x10
c002588d:	89 c2                	mov    edx,eax
c002588f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025892:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025898:	0f b6 f8             	movzx  edi,al
c002589b:	89 d0                	mov    eax,edx
c002589d:	ba 00 00 00 00       	mov    edx,0x0
c00258a2:	89 c1                	mov    ecx,eax
c00258a4:	80 e5 ff             	and    ch,0xff
c00258a7:	89 cb                	mov    ebx,ecx
c00258a9:	0f b6 f2             	movzx  esi,dl
c00258ac:	89 d8                	mov    eax,ebx
c00258ae:	89 f2                	mov    edx,esi
c00258b0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00258b3:	8d 5f 08             	lea    ebx,[edi+0x8]
c00258b6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00258ba:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00258be:	83 e0 00             	and    eax,0x0
c00258c1:	09 d0                	or     eax,edx
c00258c3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00258c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258ca:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00258d0:	8d 50 01             	lea    edx,[eax+0x1]
c00258d3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00258d6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00258dc:	0f b6 d0             	movzx  edx,al
c00258df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258e2:	83 c2 08             	add    edx,0x8
c00258e5:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00258e9:	0f b6 c9             	movzx  ecx,cl
c00258ec:	81 c9 00 00 01 00    	or     ecx,0x10000
c00258f2:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00258f6:	83 ec 0c             	sub    esp,0xc
c00258f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258fc:	e8 05 ff ff ff       	call   c0025806 <APIC::getBase()>
c0025901:	83 c4 10             	add    esp,0x10
c0025904:	05 f0 00 00 00       	add    eax,0xf0
c0025909:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002590c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002590f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025911:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025914:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002591b:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025922:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025925:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025928:	89 10                	mov    DWORD PTR [eax],edx
c002592a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025931:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c0025936:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025939:	7d 7c                	jge    c00259b7 <APIC::open(int, int, void*)+0x141>
c002593b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002593e:	8b 04 85 40 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0c0]
c0025945:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025948:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002594b:	8b 04 85 40 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0c0]
c0025952:	c1 e8 08             	shr    eax,0x8
c0025955:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025959:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002595c:	8b 04 85 40 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0c0]
c0025963:	c1 e8 18             	shr    eax,0x18
c0025966:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025969:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002596d:	75 40                	jne    c00259af <APIC::open(int, int, void*)+0x139>
c002596f:	83 ec 0c             	sub    esp,0xc
c0025972:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025975:	e8 8c fe ff ff       	call   c0025806 <APIC::getBase()>
c002597a:	83 c4 10             	add    esp,0x10
c002597d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025981:	75 07                	jne    c002598a <APIC::open(int, int, void*)+0x114>
c0025983:	ba 60 03 00 00       	mov    edx,0x360
c0025988:	eb 05                	jmp    c002598f <APIC::open(int, int, void*)+0x119>
c002598a:	ba 50 03 00 00       	mov    edx,0x350
c002598f:	01 d0                	add    eax,edx
c0025991:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025994:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025997:	8b 00                	mov    eax,DWORD PTR [eax]
c0025999:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002599c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00259a3:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00259a7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00259aa:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00259ad:	89 10                	mov    DWORD PTR [eax],edx
c00259af:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00259b2:	e9 7a ff ff ff       	jmp    c0025931 <APIC::open(int, int, void*)+0xbb>
c00259b7:	b8 00 00 00 00       	mov    eax,0x0
c00259bc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00259bf:	5b                   	pop    ebx
c00259c0:	5e                   	pop    esi
c00259c1:	5f                   	pop    edi
c00259c2:	5d                   	pop    ebp
c00259c3:	c3                   	ret    

c00259c4 <IOAPIC::IOAPIC()>:
c00259c4:	83 ec 0c             	sub    esp,0xc
c00259c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259cb:	83 ec 08             	sub    esp,0x8
c00259ce:	68 2c d3 02 c0       	push   0xc002d32c
c00259d3:	50                   	push   eax
c00259d4:	e8 0b ec fe ff       	call   c00145e4 <Device::Device(char const*)>
c00259d9:	83 c4 10             	add    esp,0x10
c00259dc:	ba 54 d4 02 c0       	mov    edx,0xc002d454
c00259e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259e5:	89 10                	mov    DWORD PTR [eax],edx
c00259e7:	90                   	nop
c00259e8:	83 c4 0c             	add    esp,0xc
c00259eb:	c3                   	ret    

c00259ec <APIC::APIC()>:
c00259ec:	53                   	push   ebx
c00259ed:	83 ec 18             	sub    esp,0x18
c00259f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00259f4:	83 ec 08             	sub    esp,0x8
c00259f7:	68 34 d3 02 c0       	push   0xc002d334
c00259fc:	50                   	push   eax
c00259fd:	e8 4e f3 fe ff       	call   c0014d50 <InterruptController::InterruptController(char const*)>
c0025a02:	83 c4 10             	add    esp,0x10
c0025a05:	ba 0c d4 02 c0       	mov    edx,0xc002d40c
c0025a0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025a0e:	89 10                	mov    DWORD PTR [eax],edx
c0025a10:	a0 00 2a 03 c0       	mov    al,ds:0xc0032a00
c0025a15:	83 f0 01             	xor    eax,0x1
c0025a18:	84 c0                	test   al,al
c0025a1a:	0f 84 a1 00 00 00    	je     c0025ac1 <APIC::APIC()+0xd5>
c0025a20:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025a25:	a0 e0 0f 03 c0       	mov    al,ds:0xc0030fe0
c0025a2a:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025a2e:	0f 83 86 00 00 00    	jae    c0025aba <APIC::APIC()+0xce>
c0025a34:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025a3c:	83 ec 0c             	sub    esp,0xc
c0025a3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a43:	e8 f8 9d fe ff       	call   c000f840 <malloc>
c0025a48:	83 c4 10             	add    esp,0x10
c0025a4b:	89 c3                	mov    ebx,eax
c0025a4d:	83 ec 0c             	sub    esp,0xc
c0025a50:	53                   	push   ebx
c0025a51:	e8 6e ff ff ff       	call   c00259c4 <IOAPIC::IOAPIC()>
c0025a56:	83 c4 10             	add    esp,0x10
c0025a59:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025a5d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025a62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025a66:	89 14 85 e0 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd620],edx
c0025a6d:	a1 c0 29 03 c0       	mov    eax,ds:0xc00329c0
c0025a72:	40                   	inc    eax
c0025a73:	a3 c0 29 03 c0       	mov    ds:0xc00329c0,eax
c0025a78:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0025a7d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025a83:	83 ec 08             	sub    esp,0x8
c0025a86:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a8a:	50                   	push   eax
c0025a8b:	e8 64 e9 fe ff       	call   c00143f4 <Device::addChild(Device*)>
c0025a90:	83 c4 10             	add    esp,0x10
c0025a93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a99:	83 c0 08             	add    eax,0x8
c0025a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a9e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025aa3:	6a 00                	push   0x0
c0025aa5:	6a 00                	push   0x0
c0025aa7:	52                   	push   edx
c0025aa8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025aac:	ff d0                	call   eax
c0025aae:	83 c4 10             	add    esp,0x10
c0025ab1:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025ab5:	e9 6b ff ff ff       	jmp    c0025a25 <APIC::APIC()+0x39>
c0025aba:	c6 05 00 2a 03 c0 01 	mov    BYTE PTR ds:0xc0032a00,0x1
c0025ac1:	90                   	nop
c0025ac2:	83 c4 18             	add    esp,0x18
c0025ac5:	5b                   	pop    ebx
c0025ac6:	c3                   	ret    
c0025ac7:	90                   	nop

c0025ac8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025ac8:	55                   	push   ebp
c0025ac9:	89 e5                	mov    ebp,esp
c0025acb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ace:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025ad4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025ad7:	72 1d                	jb     c0025af6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025ad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025adc:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025ae2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ae5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025aeb:	01 d0                	add    eax,edx
c0025aed:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025af0:	73 04                	jae    c0025af6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025af2:	b0 01                	mov    al,0x1
c0025af4:	eb 02                	jmp    c0025af8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025af6:	b0 00                	mov    al,0x0
c0025af8:	5d                   	pop    ebp
c0025af9:	c3                   	ret    

c0025afa <IOAPIC::read(int)>:
c0025afa:	55                   	push   ebp
c0025afb:	89 e5                	mov    ebp,esp
c0025afd:	83 ec 10             	sub    esp,0x10
c0025b00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b03:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b09:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b0f:	0f b6 d0             	movzx  edx,al
c0025b12:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b15:	89 10                	mov    DWORD PTR [eax],edx
c0025b17:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b1a:	83 c0 10             	add    eax,0x10
c0025b1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b1f:	c9                   	leave  
c0025b20:	c3                   	ret    
c0025b21:	90                   	nop

c0025b22 <IOAPIC::open(int, int, void*)>:
c0025b22:	55                   	push   ebp
c0025b23:	89 e5                	mov    ebp,esp
c0025b25:	57                   	push   edi
c0025b26:	56                   	push   esi
c0025b27:	53                   	push   ebx
c0025b28:	83 ec 0c             	sub    esp,0xc
c0025b2b:	83 ec 0c             	sub    esp,0xc
c0025b2e:	68 5f d3 02 c0       	push   0xc002d35f
c0025b33:	e8 95 d4 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0025b38:	83 c4 10             	add    esp,0x10
c0025b3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b3e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b41:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025b47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b4a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b50:	8b 14 85 20 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcefe0]
c0025b57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b5a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025b60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b63:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b69:	8b 14 85 a0 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcef60]
c0025b70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b73:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025b79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b7c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025b82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b85:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b8b:	0f b6 f8             	movzx  edi,al
c0025b8e:	89 d0                	mov    eax,edx
c0025b90:	ba 00 00 00 00       	mov    edx,0x0
c0025b95:	89 c1                	mov    ecx,eax
c0025b97:	80 e5 ff             	and    ch,0xff
c0025b9a:	89 cb                	mov    ebx,ecx
c0025b9c:	0f b6 f2             	movzx  esi,dl
c0025b9f:	89 d8                	mov    eax,ebx
c0025ba1:	89 f2                	mov    edx,esi
c0025ba3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025ba6:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025ba9:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025bad:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025bb1:	83 e0 00             	and    eax,0x0
c0025bb4:	09 d0                	or     eax,edx
c0025bb6:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025bba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bbd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025bc3:	8d 50 01             	lea    edx,[eax+0x1]
c0025bc6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025bc9:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025bcf:	0f b6 d0             	movzx  edx,al
c0025bd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bd5:	83 c2 08             	add    edx,0x8
c0025bd8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025bdc:	0f b6 c9             	movzx  ecx,cl
c0025bdf:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025be5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025be9:	83 ec 08             	sub    esp,0x8
c0025bec:	6a 01                	push   0x1
c0025bee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bf1:	e8 04 ff ff ff       	call   c0025afa <IOAPIC::read(int)>
c0025bf6:	83 c4 10             	add    esp,0x10
c0025bf9:	c1 f8 10             	sar    eax,0x10
c0025bfc:	0f b6 c0             	movzx  eax,al
c0025bff:	8d 50 01             	lea    edx,[eax+0x1]
c0025c02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c05:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025c0b:	b8 00 00 00 00       	mov    eax,0x0
c0025c10:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025c13:	5b                   	pop    ebx
c0025c14:	5e                   	pop    esi
c0025c15:	5f                   	pop    edi
c0025c16:	5d                   	pop    ebp
c0025c17:	c3                   	ret    

c0025c18 <IOAPIC::write(int, int)>:
c0025c18:	55                   	push   ebp
c0025c19:	89 e5                	mov    ebp,esp
c0025c1b:	83 ec 10             	sub    esp,0x10
c0025c1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c21:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025c27:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025c2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c2d:	0f b6 d0             	movzx  edx,al
c0025c30:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c33:	89 10                	mov    DWORD PTR [eax],edx
c0025c35:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c38:	8d 50 10             	lea    edx,[eax+0x10]
c0025c3b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c3e:	89 02                	mov    DWORD PTR [edx],eax
c0025c40:	90                   	nop
c0025c41:	c9                   	leave  
c0025c42:	c3                   	ret    
c0025c43:	90                   	nop

c0025c44 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025c44:	55                   	push   ebp
c0025c45:	89 e5                	mov    ebp,esp
c0025c47:	53                   	push   ebx
c0025c48:	83 ec 2c             	sub    esp,0x2c
c0025c4b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c4e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025c51:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025c54:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025c57:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025c5a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c5d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025c60:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c63:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025c66:	88 d8                	mov    al,bl
c0025c68:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025c6b:	88 c8                	mov    al,cl
c0025c6d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c70:	88 d0                	mov    al,dl
c0025c72:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025c75:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c79:	83 c0 08             	add    eax,0x8
c0025c7c:	01 c0                	add    eax,eax
c0025c7e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025c81:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c85:	83 c0 08             	add    eax,0x8
c0025c88:	01 c0                	add    eax,eax
c0025c8a:	40                   	inc    eax
c0025c8b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025c8e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c91:	50                   	push   eax
c0025c92:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c95:	e8 60 fe ff ff       	call   c0025afa <IOAPIC::read(int)>
c0025c9a:	83 c4 08             	add    esp,0x8
c0025c9d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025ca0:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025ca7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025caa:	c1 e0 18             	shl    eax,0x18
c0025cad:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025cb0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025cb3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025cb6:	52                   	push   edx
c0025cb7:	50                   	push   eax
c0025cb8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cbb:	e8 58 ff ff ff       	call   c0025c18 <IOAPIC::write(int, int)>
c0025cc0:	83 c4 0c             	add    esp,0xc
c0025cc3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025cc6:	50                   	push   eax
c0025cc7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cca:	e8 2b fe ff ff       	call   c0025afa <IOAPIC::read(int)>
c0025ccf:	83 c4 08             	add    esp,0x8
c0025cd2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025cd5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025cdc:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025ce3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025cea:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025cee:	74 09                	je     c0025cf9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025cf0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025cf7:	eb 07                	jmp    c0025d00 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025cf9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025d00:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025d04:	74 09                	je     c0025d0f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025d06:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025d0d:	eb 07                	jmp    c0025d16 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025d0f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025d16:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025d1d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025d21:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025d24:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025d27:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d2a:	52                   	push   edx
c0025d2b:	50                   	push   eax
c0025d2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d2f:	e8 e4 fe ff ff       	call   c0025c18 <IOAPIC::write(int, int)>
c0025d34:	83 c4 0c             	add    esp,0xc
c0025d37:	90                   	nop
c0025d38:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025d3b:	c9                   	leave  
c0025d3c:	c3                   	ret    
c0025d3d:	90                   	nop

c0025d3e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025d3e:	55                   	push   ebp
c0025d3f:	89 e5                	mov    ebp,esp
c0025d41:	57                   	push   edi
c0025d42:	56                   	push   esi
c0025d43:	53                   	push   ebx
c0025d44:	83 ec 2c             	sub    esp,0x2c
c0025d47:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025d4a:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025d4d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d51:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025d55:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025d59:	74 5a                	je     c0025db5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d5b:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025d5f:	7f 44                	jg     c0025da5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025d61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d64:	05 a0 d8 02 c0       	add    eax,0xc002d8a0
c0025d69:	8a 00                	mov    al,BYTE PTR [eax]
c0025d6b:	0f b6 c0             	movzx  eax,al
c0025d6e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025d71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d74:	66 8b 84 00 c0 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf040]
c0025d7c:	0f b7 c0             	movzx  eax,ax
c0025d7f:	83 e0 02             	and    eax,0x2
c0025d82:	85 c0                	test   eax,eax
c0025d84:	74 04                	je     c0025d8a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025d86:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025d8a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d8d:	66 8b 84 00 c0 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf040]
c0025d95:	0f b7 c0             	movzx  eax,ax
c0025d98:	83 e0 08             	and    eax,0x8
c0025d9b:	85 c0                	test   eax,eax
c0025d9d:	74 16                	je     c0025db5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d9f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025da3:	eb 10                	jmp    c0025db5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025da5:	83 ec 0c             	sub    esp,0xc
c0025da8:	68 70 d3 02 c0       	push   0xc002d370
c0025dad:	e8 bd 48 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c0025db2:	83 c4 10             	add    esp,0x10
c0025db5:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025db9:	a1 c0 29 03 c0       	mov    eax,ds:0xc00329c0
c0025dbe:	83 ec 08             	sub    esp,0x8
c0025dc1:	50                   	push   eax
c0025dc2:	68 a8 d3 02 c0       	push   0xc002d3a8
c0025dc7:	e8 01 d2 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0025dcc:	83 c4 10             	add    esp,0x10
c0025dcf:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025dd6:	a1 c0 29 03 c0       	mov    eax,ds:0xc00329c0
c0025ddb:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025dde:	7d 67                	jge    c0025e47 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025de0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025de3:	8b 04 85 e0 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd620]
c0025dea:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ded:	83 ec 08             	sub    esp,0x8
c0025df0:	52                   	push   edx
c0025df1:	50                   	push   eax
c0025df2:	e8 d1 fc ff ff       	call   c0025ac8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025df7:	83 c4 10             	add    esp,0x10
c0025dfa:	84 c0                	test   al,al
c0025dfc:	74 44                	je     c0025e42 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025dfe:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025e01:	8b 1c 85 e0 29 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd620]
c0025e08:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025e0c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025e0f:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025e13:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e16:	83 c0 20             	add    eax,0x20
c0025e19:	0f b6 f0             	movzx  esi,al
c0025e1c:	b8 00 00 00 00       	mov    eax,0x0
c0025e21:	99                   	cdq    
c0025e22:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025e25:	0f b6 c9             	movzx  ecx,cl
c0025e28:	83 ec 04             	sub    esp,0x4
c0025e2b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025e2e:	57                   	push   edi
c0025e2f:	56                   	push   esi
c0025e30:	52                   	push   edx
c0025e31:	50                   	push   eax
c0025e32:	51                   	push   ecx
c0025e33:	53                   	push   ebx
c0025e34:	e8 0b fe ff ff       	call   c0025c44 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025e39:	83 c4 20             	add    esp,0x20
c0025e3c:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025e40:	eb 05                	jmp    c0025e47 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025e42:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025e45:	eb 8f                	jmp    c0025dd6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025e47:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025e4a:	83 f0 01             	xor    eax,0x1
c0025e4d:	84 c0                	test   al,al
c0025e4f:	74 10                	je     c0025e61 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025e51:	83 ec 0c             	sub    esp,0xc
c0025e54:	68 bf d3 02 c0       	push   0xc002d3bf
c0025e59:	e8 11 48 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c0025e5e:	83 c4 10             	add    esp,0x10
c0025e61:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025e65:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025e6c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025e70:	7f 65                	jg     c0025ed7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025e72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e75:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e78:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e7f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e82:	01 ca                	add    edx,ecx
c0025e84:	83 c2 54             	add    edx,0x54
c0025e87:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025e8b:	85 c0                	test   eax,eax
c0025e8d:	75 43                	jne    c0025ed2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025e8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e92:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e95:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e9c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e9f:	01 ca                	add    edx,ecx
c0025ea1:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025ea4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025ea7:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025eab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025eae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025eb1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025eb8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ebb:	01 ca                	add    edx,ecx
c0025ebd:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025ec3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025ec6:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025eca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ecd:	83 e8 20             	sub    eax,0x20
c0025ed0:	eb 1a                	jmp    c0025eec <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025ed2:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025ed5:	eb 95                	jmp    c0025e6c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025ed7:	83 ec 0c             	sub    esp,0xc
c0025eda:	68 cc d3 02 c0       	push   0xc002d3cc
c0025edf:	e8 8b 47 ff ff       	call   c001a66f <Krnl::panic(char const*)>
c0025ee4:	83 c4 10             	add    esp,0x10
c0025ee7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025eec:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025eef:	5b                   	pop    ebx
c0025ef0:	5e                   	pop    esi
c0025ef1:	5f                   	pop    edi
c0025ef2:	5d                   	pop    ebp
c0025ef3:	c3                   	ret    

c0025ef4 <PIC::disable()>:
c0025ef4:	55                   	push   ebp
c0025ef5:	89 e5                	mov    ebp,esp
c0025ef7:	83 ec 10             	sub    esp,0x10
c0025efa:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025f00:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025f04:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f07:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025f0b:	ee                   	out    dx,al
c0025f0c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025f12:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025f16:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025f19:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025f1d:	ee                   	out    dx,al
c0025f1e:	90                   	nop
c0025f1f:	c9                   	leave  
c0025f20:	c3                   	ret    
c0025f21:	90                   	nop

c0025f22 <PIC::close(int, int, void*)>:
c0025f22:	55                   	push   ebp
c0025f23:	89 e5                	mov    ebp,esp
c0025f25:	83 ec 08             	sub    esp,0x8
c0025f28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f2d:	83 c0 3c             	add    eax,0x3c
c0025f30:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f32:	83 ec 0c             	sub    esp,0xc
c0025f35:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f38:	ff d0                	call   eax
c0025f3a:	83 c4 10             	add    esp,0x10
c0025f3d:	b8 00 00 00 00       	mov    eax,0x0
c0025f42:	c9                   	leave  
c0025f43:	c3                   	ret    

c0025f44 <PIC::PIC()>:
c0025f44:	83 ec 0c             	sub    esp,0xc
c0025f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f4b:	83 ec 08             	sub    esp,0x8
c0025f4e:	68 78 d4 02 c0       	push   0xc002d478
c0025f53:	50                   	push   eax
c0025f54:	e8 f7 ed fe ff       	call   c0014d50 <InterruptController::InterruptController(char const*)>
c0025f59:	83 c4 10             	add    esp,0x10
c0025f5c:	ba a4 d4 02 c0       	mov    edx,0xc002d4a4
c0025f61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f65:	89 10                	mov    DWORD PTR [eax],edx
c0025f67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f6b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f71:	0f b6 d0             	movzx  edx,al
c0025f74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f78:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f83:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f89:	0f b6 d0             	movzx  edx,al
c0025f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f90:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f99:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f9f:	8d 50 01             	lea    edx,[eax+0x1]
c0025fa2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025fa6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025fac:	0f b6 d0             	movzx  edx,al
c0025faf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fb3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025fb7:	83 e1 3f             	and    ecx,0x3f
c0025fba:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fc2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fc8:	0f b6 d0             	movzx  edx,al
c0025fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fcf:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fda:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fe0:	0f b6 d0             	movzx  edx,al
c0025fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fe7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ff0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ff6:	8d 50 01             	lea    edx,[eax+0x1]
c0025ff9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025ffd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026003:	0f b6 d0             	movzx  edx,al
c0026006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002600a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002600e:	83 e1 3f             	and    ecx,0x3f
c0026011:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026015:	90                   	nop
c0026016:	83 c4 0c             	add    esp,0xc
c0026019:	c3                   	ret    

c002601a <PIC::ioWait()>:
c002601a:	eb 00                	jmp    c002601c <PIC::ioWait()+0x2>
c002601c:	eb 00                	jmp    c002601e <PIC::ioWait()+0x4>
c002601e:	90                   	nop
c002601f:	c3                   	ret    

c0026020 <PIC::getIRQReg(int)>:
c0026020:	55                   	push   ebp
c0026021:	89 e5                	mov    ebp,esp
c0026023:	83 ec 10             	sub    esp,0x10
c0026026:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026029:	0f b6 c0             	movzx  eax,al
c002602c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026032:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026035:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026038:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002603c:	ee                   	out    dx,al
c002603d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026040:	0f b6 c0             	movzx  eax,al
c0026043:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026049:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002604c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002604f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026053:	ee                   	out    dx,al
c0026054:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002605a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002605e:	89 c2                	mov    edx,eax
c0026060:	ec                   	in     al,dx
c0026061:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026064:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026067:	0f b6 c0             	movzx  eax,al
c002606a:	c1 e0 08             	shl    eax,0x8
c002606d:	89 c1                	mov    ecx,eax
c002606f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026075:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026079:	89 c2                	mov    edx,eax
c002607b:	ec                   	in     al,dx
c002607c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002607f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026082:	0f b6 c0             	movzx  eax,al
c0026085:	09 c8                	or     eax,ecx
c0026087:	c9                   	leave  
c0026088:	c3                   	ret    
c0026089:	90                   	nop

c002608a <PIC::eoi(unsigned char)>:
c002608a:	55                   	push   ebp
c002608b:	89 e5                	mov    ebp,esp
c002608d:	83 ec 14             	sub    esp,0x14
c0026090:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026093:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026096:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002609a:	75 1e                	jne    c00260ba <PIC::eoi(unsigned char)+0x30>
c002609c:	6a 0b                	push   0xb
c002609e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260a1:	e8 7a ff ff ff       	call   c0026020 <PIC::getIRQReg(int)>
c00260a6:	83 c4 08             	add    esp,0x8
c00260a9:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00260ad:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00260b1:	25 80 00 00 00       	and    eax,0x80
c00260b6:	85 c0                	test   eax,eax
c00260b8:	74 5f                	je     c0026119 <PIC::eoi(unsigned char)+0x8f>
c00260ba:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00260be:	75 2d                	jne    c00260ed <PIC::eoi(unsigned char)+0x63>
c00260c0:	6a 0b                	push   0xb
c00260c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260c5:	e8 56 ff ff ff       	call   c0026020 <PIC::getIRQReg(int)>
c00260ca:	83 c4 08             	add    esp,0x8
c00260cd:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00260d1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00260d4:	66 85 c0             	test   ax,ax
c00260d7:	78 14                	js     c00260ed <PIC::eoi(unsigned char)+0x63>
c00260d9:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00260df:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00260e3:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00260e6:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00260ea:	ee                   	out    dx,al
c00260eb:	eb 2d                	jmp    c002611a <PIC::eoi(unsigned char)+0x90>
c00260ed:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00260f1:	76 12                	jbe    c0026105 <PIC::eoi(unsigned char)+0x7b>
c00260f3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00260f9:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00260fd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026100:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026104:	ee                   	out    dx,al
c0026105:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002610b:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002610f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026112:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026116:	ee                   	out    dx,al
c0026117:	eb 01                	jmp    c002611a <PIC::eoi(unsigned char)+0x90>
c0026119:	90                   	nop
c002611a:	c9                   	leave  
c002611b:	c3                   	ret    

c002611c <PIC::remap()>:
c002611c:	55                   	push   ebp
c002611d:	89 e5                	mov    ebp,esp
c002611f:	83 ec 48             	sub    esp,0x48
c0026122:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026129:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026130:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026136:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026139:	89 c2                	mov    edx,eax
c002613b:	ec                   	in     al,dx
c002613c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002613f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026142:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026145:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002614b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002614e:	89 c2                	mov    edx,eax
c0026150:	ec                   	in     al,dx
c0026151:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026154:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026157:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002615a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026160:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026164:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026167:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002616a:	ee                   	out    dx,al
c002616b:	83 ec 0c             	sub    esp,0xc
c002616e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026171:	e8 a4 fe ff ff       	call   c002601a <PIC::ioWait()>
c0026176:	83 c4 10             	add    esp,0x10
c0026179:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002617f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026183:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026186:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026189:	ee                   	out    dx,al
c002618a:	83 ec 0c             	sub    esp,0xc
c002618d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026190:	e8 85 fe ff ff       	call   c002601a <PIC::ioWait()>
c0026195:	83 c4 10             	add    esp,0x10
c0026198:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002619b:	0f b6 c0             	movzx  eax,al
c002619e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00261a4:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00261a7:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00261aa:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00261ad:	ee                   	out    dx,al
c00261ae:	83 ec 0c             	sub    esp,0xc
c00261b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261b4:	e8 61 fe ff ff       	call   c002601a <PIC::ioWait()>
c00261b9:	83 c4 10             	add    esp,0x10
c00261bc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00261bf:	0f b6 c0             	movzx  eax,al
c00261c2:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00261c8:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00261cb:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00261ce:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00261d1:	ee                   	out    dx,al
c00261d2:	83 ec 0c             	sub    esp,0xc
c00261d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261d8:	e8 3d fe ff ff       	call   c002601a <PIC::ioWait()>
c00261dd:	83 c4 10             	add    esp,0x10
c00261e0:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00261e6:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00261ea:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00261ed:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00261f0:	ee                   	out    dx,al
c00261f1:	83 ec 0c             	sub    esp,0xc
c00261f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261f7:	e8 1e fe ff ff       	call   c002601a <PIC::ioWait()>
c00261fc:	83 c4 10             	add    esp,0x10
c00261ff:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026205:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026209:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002620c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002620f:	ee                   	out    dx,al
c0026210:	83 ec 0c             	sub    esp,0xc
c0026213:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026216:	e8 ff fd ff ff       	call   c002601a <PIC::ioWait()>
c002621b:	83 c4 10             	add    esp,0x10
c002621e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026224:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026228:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002622b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002622e:	ee                   	out    dx,al
c002622f:	83 ec 0c             	sub    esp,0xc
c0026232:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026235:	e8 e0 fd ff ff       	call   c002601a <PIC::ioWait()>
c002623a:	83 c4 10             	add    esp,0x10
c002623d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026243:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026247:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002624a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002624d:	ee                   	out    dx,al
c002624e:	83 ec 0c             	sub    esp,0xc
c0026251:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026254:	e8 c1 fd ff ff       	call   c002601a <PIC::ioWait()>
c0026259:	83 c4 10             	add    esp,0x10
c002625c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026260:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026266:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026269:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002626c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002626f:	ee                   	out    dx,al
c0026270:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026274:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002627a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002627d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026280:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026283:	ee                   	out    dx,al
c0026284:	90                   	nop
c0026285:	c9                   	leave  
c0026286:	c3                   	ret    
c0026287:	90                   	nop

c0026288 <PIC::open(int, int, void*)>:
c0026288:	55                   	push   ebp
c0026289:	89 e5                	mov    ebp,esp
c002628b:	83 ec 18             	sub    esp,0x18
c002628e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026294:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026298:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002629b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002629f:	ee                   	out    dx,al
c00262a0:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00262a6:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00262aa:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00262ad:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00262b1:	ee                   	out    dx,al
c00262b2:	83 ec 0c             	sub    esp,0xc
c00262b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262b8:	e8 5f fe ff ff       	call   c002611c <PIC::remap()>
c00262bd:	83 c4 10             	add    esp,0x10
c00262c0:	b8 00 00 00 00       	mov    eax,0x0
c00262c5:	c9                   	leave  
c00262c6:	c3                   	ret    
c00262c7:	90                   	nop

c00262c8 <APICTimer::close(int, int, void*)>:
c00262c8:	b8 00 00 00 00       	mov    eax,0x0
c00262cd:	c3                   	ret    

c00262ce <apicTimerHandler(regs*, void*)>:
c00262ce:	83 ec 0c             	sub    esp,0xc
c00262d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00262d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00262d7:	99                   	cdq    
c00262d8:	52                   	push   edx
c00262d9:	50                   	push   eax
c00262da:	6a 00                	push   0x0
c00262dc:	68 00 ca 9a 3b       	push   0x3b9aca00
c00262e1:	e8 86 07 00 00       	call   c0026a6c <__udivdi3>
c00262e6:	83 c4 10             	add    esp,0x10
c00262e9:	83 ec 08             	sub    esp,0x8
c00262ec:	52                   	push   edx
c00262ed:	50                   	push   eax
c00262ee:	e8 a8 0a ff ff       	call   c0016d9b <timerHandler(unsigned long long)>
c00262f3:	83 c4 10             	add    esp,0x10
c00262f6:	90                   	nop
c00262f7:	83 c4 0c             	add    esp,0xc
c00262fa:	c3                   	ret    
c00262fb:	90                   	nop

c00262fc <APICTimer::write(int)>:
c00262fc:	53                   	push   ebx
c00262fd:	83 ec 28             	sub    esp,0x28
c0026300:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026304:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026308:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002630e:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0026313:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026319:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002631f:	83 ec 0c             	sub    esp,0xc
c0026322:	50                   	push   eax
c0026323:	e8 de f4 ff ff       	call   c0025806 <APIC::getBase()>
c0026328:	83 c4 10             	add    esp,0x10
c002632b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002632f:	a1 d0 ec 02 c0       	mov    eax,ds:0xc002ecd0
c0026334:	8b 15 d4 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ecd4
c002633a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002633e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026346:	05 e0 03 00 00       	add    eax,0x3e0
c002634b:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026355:	05 80 03 00 00       	add    eax,0x380
c002635a:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026360:	fb                   	sti    
c0026361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026365:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026369:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002636e:	83 d2 00             	adc    edx,0x0
c0026371:	89 c1                	mov    ecx,eax
c0026373:	89 d3                	mov    ebx,edx
c0026375:	a1 d0 ec 02 c0       	mov    eax,ds:0xc002ecd0
c002637a:	8b 15 d4 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ecd4
c0026380:	39 c8                	cmp    eax,ecx
c0026382:	89 d0                	mov    eax,edx
c0026384:	19 d8                	sbb    eax,ebx
c0026386:	73 02                	jae    c002638a <APICTimer::write(int)+0x8e>
c0026388:	eb d7                	jmp    c0026361 <APICTimer::write(int)+0x65>
c002638a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002638e:	05 20 03 00 00       	add    eax,0x320
c0026393:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026399:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002639d:	05 90 03 00 00       	add    eax,0x390
c00263a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00263a4:	f7 d0                	not    eax
c00263a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00263aa:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00263ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00263b2:	ba 00 00 00 00       	mov    edx,0x0
c00263b7:	f7 f3                	div    ebx
c00263b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00263bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00263c1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00263c7:	0d 00 00 02 00       	or     eax,0x20000
c00263cc:	89 c2                	mov    edx,eax
c00263ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263d2:	05 20 03 00 00       	add    eax,0x320
c00263d7:	89 10                	mov    DWORD PTR [eax],edx
c00263d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263dd:	05 e0 03 00 00       	add    eax,0x3e0
c00263e2:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00263e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263ec:	05 80 03 00 00       	add    eax,0x380
c00263f1:	89 c2                	mov    edx,eax
c00263f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00263f7:	89 02                	mov    DWORD PTR [edx],eax
c00263f9:	90                   	nop
c00263fa:	83 c4 28             	add    esp,0x28
c00263fd:	5b                   	pop    ebx
c00263fe:	c3                   	ret    
c00263ff:	90                   	nop

c0026400 <APICTimer::open(int, int, void*)>:
c0026400:	57                   	push   edi
c0026401:	56                   	push   esi
c0026402:	53                   	push   ebx
c0026403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026407:	8b 00                	mov    eax,DWORD PTR [eax]
c0026409:	83 c0 24             	add    eax,0x24
c002640c:	8b 00                	mov    eax,DWORD PTR [eax]
c002640e:	83 ec 08             	sub    esp,0x8
c0026411:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026415:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026419:	ff d0                	call   eax
c002641b:	83 c4 10             	add    esp,0x10
c002641e:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0026423:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026429:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002642f:	83 ec 0c             	sub    esp,0xc
c0026432:	50                   	push   eax
c0026433:	e8 ce f3 ff ff       	call   c0025806 <APIC::getBase()>
c0026438:	83 c4 10             	add    esp,0x10
c002643b:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026445:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002644b:	0f b6 f8             	movzx  edi,al
c002644e:	89 d0                	mov    eax,edx
c0026450:	ba 00 00 00 00       	mov    edx,0x0
c0026455:	89 c1                	mov    ecx,eax
c0026457:	80 e5 ff             	and    ch,0xff
c002645a:	89 cb                	mov    ebx,ecx
c002645c:	0f b6 f2             	movzx  esi,dl
c002645f:	89 d8                	mov    eax,ebx
c0026461:	89 f2                	mov    edx,esi
c0026463:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026467:	8d 5f 08             	lea    ebx,[edi+0x8]
c002646a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002646e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026472:	83 e0 00             	and    eax,0x0
c0026475:	09 d0                	or     eax,edx
c0026477:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002647b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002647f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026485:	8d 50 01             	lea    edx,[eax+0x1]
c0026488:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002648c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026492:	0f b6 d0             	movzx  edx,al
c0026495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026499:	83 c2 08             	add    edx,0x8
c002649c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00264a0:	0f b6 c9             	movzx  ecx,cl
c00264a3:	81 c9 00 00 01 00    	or     ecx,0x10000
c00264a9:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00264ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264b1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00264b5:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00264bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00264c3:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00264c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00264cd:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00264d3:	83 ec 0c             	sub    esp,0xc
c00264d6:	51                   	push   ecx
c00264d7:	6a 01                	push   0x1
c00264d9:	68 ce 62 02 c0       	push   0xc00262ce
c00264de:	52                   	push   edx
c00264df:	50                   	push   eax
c00264e0:	e8 93 de fe ff       	call   c0014378 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00264e5:	83 c4 20             	add    esp,0x20
c00264e8:	89 c2                	mov    edx,eax
c00264ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264ee:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00264f4:	b8 00 00 00 00       	mov    eax,0x0
c00264f9:	5b                   	pop    ebx
c00264fa:	5e                   	pop    esi
c00264fb:	5f                   	pop    edi
c00264fc:	c3                   	ret    
c00264fd:	90                   	nop

c00264fe <APICTimer::APICTimer()>:
c00264fe:	83 ec 0c             	sub    esp,0xc
c0026501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026505:	83 ec 08             	sub    esp,0x8
c0026508:	68 e4 d4 02 c0       	push   0xc002d4e4
c002650d:	50                   	push   eax
c002650e:	e8 f9 07 ff ff       	call   c0016d0c <Timer::Timer(char const*)>
c0026513:	83 c4 10             	add    esp,0x10
c0026516:	ba f8 d4 02 c0       	mov    edx,0xc002d4f8
c002651b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002651f:	89 10                	mov    DWORD PTR [eax],edx
c0026521:	90                   	nop
c0026522:	83 c4 0c             	add    esp,0xc
c0026525:	c3                   	ret    

c0026526 <PIT::write(int)>:
c0026526:	83 ec 10             	sub    esp,0x10
c0026529:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002652d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026531:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026537:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002653b:	a3 04 2a 03 c0       	mov    ds:0xc0032a04,eax
c0026540:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026545:	99                   	cdq    
c0026546:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002654a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002654e:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026555:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002655a:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002655e:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026563:	ee                   	out    dx,al
c0026564:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026568:	0f b6 c0             	movzx  eax,al
c002656b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026572:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026576:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002657a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002657f:	ee                   	out    dx,al
c0026580:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026584:	c1 f8 08             	sar    eax,0x8
c0026587:	0f b6 c0             	movzx  eax,al
c002658a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026591:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026595:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026599:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002659e:	ee                   	out    dx,al
c002659f:	90                   	nop
c00265a0:	83 c4 10             	add    esp,0x10
c00265a3:	c3                   	ret    

c00265a4 <pitHandler(regs*, void*)>:
c00265a4:	83 ec 0c             	sub    esp,0xc
c00265a7:	a1 04 2a 03 c0       	mov    eax,ds:0xc0032a04
c00265ac:	99                   	cdq    
c00265ad:	52                   	push   edx
c00265ae:	50                   	push   eax
c00265af:	6a 00                	push   0x0
c00265b1:	68 00 ca 9a 3b       	push   0x3b9aca00
c00265b6:	e8 b1 04 00 00       	call   c0026a6c <__udivdi3>
c00265bb:	83 c4 10             	add    esp,0x10
c00265be:	83 ec 08             	sub    esp,0x8
c00265c1:	52                   	push   edx
c00265c2:	50                   	push   eax
c00265c3:	e8 d3 07 ff ff       	call   c0016d9b <timerHandler(unsigned long long)>
c00265c8:	83 c4 10             	add    esp,0x10
c00265cb:	90                   	nop
c00265cc:	83 c4 0c             	add    esp,0xc
c00265cf:	c3                   	ret    

c00265d0 <PIT::open(int, int, void*)>:
c00265d0:	83 ec 0c             	sub    esp,0xc
c00265d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00265d9:	83 c0 24             	add    eax,0x24
c00265dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00265de:	83 ec 08             	sub    esp,0x8
c00265e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00265e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00265e9:	ff d0                	call   eax
c00265eb:	83 c4 10             	add    esp,0x10
c00265ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265f2:	83 ec 0c             	sub    esp,0xc
c00265f5:	6a 00                	push   0x0
c00265f7:	6a 01                	push   0x1
c00265f9:	68 a4 65 02 c0       	push   0xc00265a4
c00265fe:	6a 00                	push   0x0
c0026600:	50                   	push   eax
c0026601:	e8 72 dd fe ff       	call   c0014378 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026606:	83 c4 20             	add    esp,0x20
c0026609:	89 c2                	mov    edx,eax
c002660b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002660f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026615:	b8 00 00 00 00       	mov    eax,0x0
c002661a:	83 c4 0c             	add    esp,0xc
c002661d:	c3                   	ret    

c002661e <PIT::close(int, int, void*)>:
c002661e:	83 ec 0c             	sub    esp,0xc
c0026621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026625:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002662f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026633:	6a 01                	push   0x1
c0026635:	68 a4 65 02 c0       	push   0xc00265a4
c002663a:	6a 00                	push   0x0
c002663c:	50                   	push   eax
c002663d:	e8 74 dd fe ff       	call   c00143b6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026642:	83 c4 10             	add    esp,0x10
c0026645:	b8 00 00 00 00       	mov    eax,0x0
c002664a:	83 c4 0c             	add    esp,0xc
c002664d:	c3                   	ret    

c002664e <PIT::PIT()>:
c002664e:	83 ec 0c             	sub    esp,0xc
c0026651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026655:	83 ec 08             	sub    esp,0x8
c0026658:	68 20 d5 02 c0       	push   0xc002d520
c002665d:	50                   	push   eax
c002665e:	e8 a9 06 ff ff       	call   c0016d0c <Timer::Timer(char const*)>
c0026663:	83 c4 10             	add    esp,0x10
c0026666:	ba 48 d5 02 c0       	mov    edx,0xc002d548
c002666b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002666f:	89 10                	mov    DWORD PTR [eax],edx
c0026671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026675:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002667b:	0f b6 d0             	movzx  edx,al
c002667e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026682:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002668d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026693:	0f b6 d0             	movzx  edx,al
c0026696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002669a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002669f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266a3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266a9:	8d 50 01             	lea    edx,[eax+0x1]
c00266ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00266b0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00266b6:	0f b6 d0             	movzx  edx,al
c00266b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266bd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00266c1:	83 e1 3f             	and    ecx,0x3f
c00266c4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00266c8:	90                   	nop
c00266c9:	83 c4 0c             	add    esp,0xc
c00266cc:	c3                   	ret    
c00266cd:	66 90                	xchg   ax,ax
c00266cf:	90                   	nop

c00266d0 <avxDetect>:
c00266d0:	b8 00 00 00 00       	mov    eax,0x0
c00266d5:	c3                   	ret    

c00266d6 <avxSave>:
c00266d6:	c3                   	ret    

c00266d7 <avxLoad>:
c00266d7:	c3                   	ret    

c00266d8 <avxInit>:
c00266d8:	c3                   	ret    

c00266d9 <avxClose>:
c00266d9:	c3                   	ret    

c00266da <wouldSheSayYes>:
c00266da:	c3                   	ret    
c00266db:	49                   	dec    ecx
c00266dc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00266e0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00266e4:	75 20                	jne    c0026706 <sseDetect.noSSE+0x1>
c00266e6:	4e                   	dec    esi
c00266e7:	79 61                	jns    c002674a <x87Detect+0x14>
c00266e9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00266ee:	66 90                	xchg   ax,ax

c00266f0 <absolutelyNoChanceInHell>:
c00266f0:	b8 01 00 00 00       	mov    eax,0x1
c00266f5:	0f a2                	cpuid  
c00266f7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00266fd:	74 06                	je     c0026705 <sseDetect.noSSE>
c00266ff:	b8 01 00 00 00       	mov    eax,0x1
c0026704:	c3                   	ret    

c0026705 <sseDetect.noSSE>:
c0026705:	31 c0                	xor    eax,eax
c0026707:	c3                   	ret    

c0026708 <sseSave>:
c0026708:	0f ae 44 24 08       	fxsave [esp+0x8]
c002670d:	c3                   	ret    

c002670e <sseLoad>:
c002670e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026713:	c3                   	ret    

c0026714 <sseInit>:
c0026714:	e8 43 00 00 00       	call   c002675c <x87Init>
c0026719:	0f 20 e0             	mov    eax,cr4
c002671c:	66 0d 00 06          	or     ax,0x600
c0026720:	0f 22 e0             	mov    cr4,eax
c0026723:	c3                   	ret    

c0026724 <sseClose>:
c0026724:	c3                   	ret    
c0026725:	66 90                	xchg   ax,ax
c0026727:	66 90                	xchg   ax,ax
c0026729:	66 90                	xchg   ax,ax
c002672b:	66 90                	xchg   ax,ax
c002672d:	66 90                	xchg   ax,ax
c002672f:	90                   	nop

c0026730 <value_37F>:
c0026730:	7f 03                	jg     c0026735 <value_37A+0x1>

c0026732 <value_37E>:
c0026732:	7e 03                	jle    c0026737 <x87Detect+0x1>

c0026734 <value_37A>:
c0026734:	7a 03                	jp     c0026739 <x87Detect+0x3>

c0026736 <x87Detect>:
c0026736:	b8 01 00 00 00       	mov    eax,0x1
c002673b:	0f a2                	cpuid  
c002673d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026743:	74 06                	je     c002674b <x87Detect.nox87>
c0026745:	b8 01 00 00 00       	mov    eax,0x1
c002674a:	c3                   	ret    

c002674b <x87Detect.nox87>:
c002674b:	b8 00 00 00 00       	mov    eax,0x0
c0026750:	c3                   	ret    

c0026751 <x87Save>:
c0026751:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026756:	c3                   	ret    

c0026757 <x87Load>:
c0026757:	dd 64 24 08          	frstor [esp+0x8]
c002675b:	c3                   	ret    

c002675c <x87Init>:
c002675c:	9b db e3             	finit  
c002675f:	0f 20 c0             	mov    eax,cr0
c0026762:	66 25 fb ff          	and    ax,0xfffb
c0026766:	66 0d 22 00          	or     ax,0x22
c002676a:	0f 22 c0             	mov    cr0,eax
c002676d:	0f 06                	clts   
c002676f:	d9 2d 34 67 02 c0    	fldcw  WORD PTR ds:0xc0026734
c0026775:	c3                   	ret    

c0026776 <x87Close>:
c0026776:	c3                   	ret    
c0026777:	90                   	nop

c0026778 <__do_global_ctors_aux>:
c0026778:	a1 bc 92 02 c0       	mov    eax,ds:0xc00292bc
c002677d:	83 f8 ff             	cmp    eax,0xffffffff
c0026780:	74 1a                	je     c002679c <__do_global_ctors_aux+0x24>
c0026782:	55                   	push   ebp
c0026783:	89 e5                	mov    ebp,esp
c0026785:	53                   	push   ebx
c0026786:	52                   	push   edx
c0026787:	bb bc 92 02 c0       	mov    ebx,0xc00292bc
c002678c:	ff d0                	call   eax
c002678e:	83 eb 04             	sub    ebx,0x4
c0026791:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026793:	83 f8 ff             	cmp    eax,0xffffffff
c0026796:	75 f4                	jne    c002678c <__do_global_ctors_aux+0x14>
c0026798:	58                   	pop    eax
c0026799:	5b                   	pop    ebx
c002679a:	5d                   	pop    ebp
c002679b:	c3                   	ret    
c002679c:	c3                   	ret    
c002679d:	66 90                	xchg   ax,ax
c002679f:	90                   	nop

c00267a0 <__divdi3>:
c00267a0:	55                   	push   ebp
c00267a1:	57                   	push   edi
c00267a2:	56                   	push   esi
c00267a3:	53                   	push   ebx
c00267a4:	83 ec 1c             	sub    esp,0x1c
c00267a7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00267ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00267af:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00267b2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00267b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00267ba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00267be:	85 db                	test   ebx,ebx
c00267c0:	0f 88 8e 00 00 00    	js     c0026854 <__divdi3+0xb4>
c00267c6:	89 dd                	mov    ebp,ebx
c00267c8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00267d0:	89 d3                	mov    ebx,edx
c00267d2:	85 d2                	test   edx,edx
c00267d4:	79 0d                	jns    c00267e3 <__divdi3+0x43>
c00267d6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00267da:	f7 d8                	neg    eax
c00267dc:	83 d2 00             	adc    edx,0x0
c00267df:	f7 da                	neg    edx
c00267e1:	89 d3                	mov    ebx,edx
c00267e3:	89 c7                	mov    edi,eax
c00267e5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00267e8:	85 db                	test   ebx,ebx
c00267ea:	75 48                	jne    c0026834 <__divdi3+0x94>
c00267ec:	39 ef                	cmp    edi,ebp
c00267ee:	76 24                	jbe    c0026814 <__divdi3+0x74>
c00267f0:	89 ea                	mov    edx,ebp
c00267f2:	f7 f7                	div    edi
c00267f4:	89 c1                	mov    ecx,eax
c00267f6:	31 f6                	xor    esi,esi
c00267f8:	89 c8                	mov    eax,ecx
c00267fa:	89 f2                	mov    edx,esi
c00267fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026800:	85 c9                	test   ecx,ecx
c0026802:	74 07                	je     c002680b <__divdi3+0x6b>
c0026804:	f7 d8                	neg    eax
c0026806:	83 d2 00             	adc    edx,0x0
c0026809:	f7 da                	neg    edx
c002680b:	83 c4 1c             	add    esp,0x1c
c002680e:	5b                   	pop    ebx
c002680f:	5e                   	pop    esi
c0026810:	5f                   	pop    edi
c0026811:	5d                   	pop    ebp
c0026812:	c3                   	ret    
c0026813:	90                   	nop
c0026814:	85 ff                	test   edi,edi
c0026816:	75 0b                	jne    c0026823 <__divdi3+0x83>
c0026818:	b8 01 00 00 00       	mov    eax,0x1
c002681d:	31 d2                	xor    edx,edx
c002681f:	f7 f3                	div    ebx
c0026821:	89 c7                	mov    edi,eax
c0026823:	31 d2                	xor    edx,edx
c0026825:	89 e8                	mov    eax,ebp
c0026827:	f7 f7                	div    edi
c0026829:	89 c6                	mov    esi,eax
c002682b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002682e:	f7 f7                	div    edi
c0026830:	89 c1                	mov    ecx,eax
c0026832:	eb c4                	jmp    c00267f8 <__divdi3+0x58>
c0026834:	39 eb                	cmp    ebx,ebp
c0026836:	77 3c                	ja     c0026874 <__divdi3+0xd4>
c0026838:	0f bd f3             	bsr    esi,ebx
c002683b:	83 f6 1f             	xor    esi,0x1f
c002683e:	75 40                	jne    c0026880 <__divdi3+0xe0>
c0026840:	39 eb                	cmp    ebx,ebp
c0026842:	72 09                	jb     c002684d <__divdi3+0xad>
c0026844:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026847:	0f 87 97 00 00 00    	ja     c00268e4 <__divdi3+0x144>
c002684d:	b9 01 00 00 00       	mov    ecx,0x1
c0026852:	eb a4                	jmp    c00267f8 <__divdi3+0x58>
c0026854:	f7 d9                	neg    ecx
c0026856:	83 d3 00             	adc    ebx,0x0
c0026859:	f7 db                	neg    ebx
c002685b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002685e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026862:	89 dd                	mov    ebp,ebx
c0026864:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002686c:	e9 5f ff ff ff       	jmp    c00267d0 <__divdi3+0x30>
c0026871:	8d 76 00             	lea    esi,[esi+0x0]
c0026874:	31 f6                	xor    esi,esi
c0026876:	31 c9                	xor    ecx,ecx
c0026878:	e9 7b ff ff ff       	jmp    c00267f8 <__divdi3+0x58>
c002687d:	8d 76 00             	lea    esi,[esi+0x0]
c0026880:	b8 20 00 00 00       	mov    eax,0x20
c0026885:	29 f0                	sub    eax,esi
c0026887:	89 f1                	mov    ecx,esi
c0026889:	d3 e3                	shl    ebx,cl
c002688b:	89 fa                	mov    edx,edi
c002688d:	88 c1                	mov    cl,al
c002688f:	d3 ea                	shr    edx,cl
c0026891:	09 da                	or     edx,ebx
c0026893:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026897:	89 f1                	mov    ecx,esi
c0026899:	d3 e7                	shl    edi,cl
c002689b:	89 eb                	mov    ebx,ebp
c002689d:	88 c1                	mov    cl,al
c002689f:	d3 eb                	shr    ebx,cl
c00268a1:	89 f1                	mov    ecx,esi
c00268a3:	d3 e5                	shl    ebp,cl
c00268a5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00268a8:	88 c1                	mov    cl,al
c00268aa:	d3 ea                	shr    edx,cl
c00268ac:	09 d5                	or     ebp,edx
c00268ae:	89 e8                	mov    eax,ebp
c00268b0:	89 da                	mov    edx,ebx
c00268b2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00268b6:	89 d3                	mov    ebx,edx
c00268b8:	89 c5                	mov    ebp,eax
c00268ba:	f7 e7                	mul    edi
c00268bc:	39 d3                	cmp    ebx,edx
c00268be:	72 18                	jb     c00268d8 <__divdi3+0x138>
c00268c0:	74 0a                	je     c00268cc <__divdi3+0x12c>
c00268c2:	89 e9                	mov    ecx,ebp
c00268c4:	31 f6                	xor    esi,esi
c00268c6:	e9 2d ff ff ff       	jmp    c00267f8 <__divdi3+0x58>
c00268cb:	90                   	nop
c00268cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00268cf:	89 f1                	mov    ecx,esi
c00268d1:	d3 e7                	shl    edi,cl
c00268d3:	39 c7                	cmp    edi,eax
c00268d5:	73 eb                	jae    c00268c2 <__divdi3+0x122>
c00268d7:	90                   	nop
c00268d8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00268db:	31 f6                	xor    esi,esi
c00268dd:	e9 16 ff ff ff       	jmp    c00267f8 <__divdi3+0x58>
c00268e2:	66 90                	xchg   ax,ax
c00268e4:	31 c9                	xor    ecx,ecx
c00268e6:	e9 0d ff ff ff       	jmp    c00267f8 <__divdi3+0x58>
c00268eb:	90                   	nop

c00268ec <__moddi3>:
c00268ec:	55                   	push   ebp
c00268ed:	57                   	push   edi
c00268ee:	56                   	push   esi
c00268ef:	53                   	push   ebx
c00268f0:	83 ec 2c             	sub    esp,0x2c
c00268f3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00268f7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00268fb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00268ff:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026903:	85 db                	test   ebx,ebx
c0026905:	0f 88 85 00 00 00    	js     c0026990 <__moddi3+0xa4>
c002690b:	89 de                	mov    esi,ebx
c002690d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026915:	89 d7                	mov    edi,edx
c0026917:	85 d2                	test   edx,edx
c0026919:	79 09                	jns    c0026924 <__moddi3+0x38>
c002691b:	f7 d8                	neg    eax
c002691d:	83 d2 00             	adc    edx,0x0
c0026920:	f7 da                	neg    edx
c0026922:	89 d7                	mov    edi,edx
c0026924:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026928:	89 cd                	mov    ebp,ecx
c002692a:	85 ff                	test   edi,edi
c002692c:	75 52                	jne    c0026980 <__moddi3+0x94>
c002692e:	89 c3                	mov    ebx,eax
c0026930:	39 f0                	cmp    eax,esi
c0026932:	76 24                	jbe    c0026958 <__moddi3+0x6c>
c0026934:	89 c8                	mov    eax,ecx
c0026936:	89 f2                	mov    edx,esi
c0026938:	f7 f3                	div    ebx
c002693a:	89 d6                	mov    esi,edx
c002693c:	89 f0                	mov    eax,esi
c002693e:	31 d2                	xor    edx,edx
c0026940:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026944:	85 c9                	test   ecx,ecx
c0026946:	74 07                	je     c002694f <__moddi3+0x63>
c0026948:	f7 d8                	neg    eax
c002694a:	83 d2 00             	adc    edx,0x0
c002694d:	f7 da                	neg    edx
c002694f:	83 c4 2c             	add    esp,0x2c
c0026952:	5b                   	pop    ebx
c0026953:	5e                   	pop    esi
c0026954:	5f                   	pop    edi
c0026955:	5d                   	pop    ebp
c0026956:	c3                   	ret    
c0026957:	90                   	nop
c0026958:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002695c:	85 db                	test   ebx,ebx
c002695e:	75 0d                	jne    c002696d <__moddi3+0x81>
c0026960:	b8 01 00 00 00       	mov    eax,0x1
c0026965:	31 d2                	xor    edx,edx
c0026967:	f7 f7                	div    edi
c0026969:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002696d:	89 f0                	mov    eax,esi
c002696f:	31 d2                	xor    edx,edx
c0026971:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026975:	f7 f7                	div    edi
c0026977:	89 e8                	mov    eax,ebp
c0026979:	f7 f7                	div    edi
c002697b:	89 d6                	mov    esi,edx
c002697d:	eb bd                	jmp    c002693c <__moddi3+0x50>
c002697f:	90                   	nop
c0026980:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026984:	39 f7                	cmp    edi,esi
c0026986:	76 20                	jbe    c00269a8 <__moddi3+0xbc>
c0026988:	89 c8                	mov    eax,ecx
c002698a:	89 f2                	mov    edx,esi
c002698c:	eb b2                	jmp    c0026940 <__moddi3+0x54>
c002698e:	66 90                	xchg   ax,ax
c0026990:	f7 d9                	neg    ecx
c0026992:	83 d3 00             	adc    ebx,0x0
c0026995:	f7 db                	neg    ebx
c0026997:	89 de                	mov    esi,ebx
c0026999:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00269a1:	e9 6f ff ff ff       	jmp    c0026915 <__moddi3+0x29>
c00269a6:	66 90                	xchg   ax,ax
c00269a8:	0f bd c7             	bsr    eax,edi
c00269ab:	83 f0 1f             	xor    eax,0x1f
c00269ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00269b2:	75 24                	jne    c00269d8 <__moddi3+0xec>
c00269b4:	39 f7                	cmp    edi,esi
c00269b6:	72 06                	jb     c00269be <__moddi3+0xd2>
c00269b8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00269bc:	77 0c                	ja     c00269ca <__moddi3+0xde>
c00269be:	89 e9                	mov    ecx,ebp
c00269c0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00269c4:	19 fe                	sbb    esi,edi
c00269c6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00269ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00269ce:	89 f2                	mov    edx,esi
c00269d0:	e9 6b ff ff ff       	jmp    c0026940 <__moddi3+0x54>
c00269d5:	8d 76 00             	lea    esi,[esi+0x0]
c00269d8:	b8 20 00 00 00       	mov    eax,0x20
c00269dd:	89 c2                	mov    edx,eax
c00269df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00269e3:	29 da                	sub    edx,ebx
c00269e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00269e9:	88 d9                	mov    cl,bl
c00269eb:	d3 e7                	shl    edi,cl
c00269ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00269f1:	88 d1                	mov    cl,dl
c00269f3:	d3 e8                	shr    eax,cl
c00269f5:	09 c7                	or     edi,eax
c00269f7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00269fb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00269ff:	89 d8                	mov    eax,ebx
c0026a01:	88 d9                	mov    cl,bl
c0026a03:	d3 e7                	shl    edi,cl
c0026a05:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a09:	89 f3                	mov    ebx,esi
c0026a0b:	88 d1                	mov    cl,dl
c0026a0d:	d3 eb                	shr    ebx,cl
c0026a0f:	89 c7                	mov    edi,eax
c0026a11:	88 c1                	mov    cl,al
c0026a13:	d3 e6                	shl    esi,cl
c0026a15:	89 e8                	mov    eax,ebp
c0026a17:	88 d1                	mov    cl,dl
c0026a19:	d3 e8                	shr    eax,cl
c0026a1b:	09 f0                	or     eax,esi
c0026a1d:	89 f9                	mov    ecx,edi
c0026a1f:	d3 e5                	shl    ebp,cl
c0026a21:	89 da                	mov    edx,ebx
c0026a23:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026a27:	89 d3                	mov    ebx,edx
c0026a29:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a2d:	89 c6                	mov    esi,eax
c0026a2f:	89 d1                	mov    ecx,edx
c0026a31:	39 d3                	cmp    ebx,edx
c0026a33:	72 27                	jb     c0026a5c <__moddi3+0x170>
c0026a35:	74 21                	je     c0026a58 <__moddi3+0x16c>
c0026a37:	29 f5                	sub    ebp,esi
c0026a39:	19 cb                	sbb    ebx,ecx
c0026a3b:	89 de                	mov    esi,ebx
c0026a3d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026a41:	d3 e6                	shl    esi,cl
c0026a43:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026a47:	89 f9                	mov    ecx,edi
c0026a49:	d3 ed                	shr    ebp,cl
c0026a4b:	09 ee                	or     esi,ebp
c0026a4d:	89 f0                	mov    eax,esi
c0026a4f:	d3 eb                	shr    ebx,cl
c0026a51:	89 da                	mov    edx,ebx
c0026a53:	e9 e8 fe ff ff       	jmp    c0026940 <__moddi3+0x54>
c0026a58:	39 c5                	cmp    ebp,eax
c0026a5a:	73 db                	jae    c0026a37 <__moddi3+0x14b>
c0026a5c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026a60:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026a64:	89 d1                	mov    ecx,edx
c0026a66:	89 c6                	mov    esi,eax
c0026a68:	eb cd                	jmp    c0026a37 <__moddi3+0x14b>
c0026a6a:	66 90                	xchg   ax,ax

c0026a6c <__udivdi3>:
c0026a6c:	55                   	push   ebp
c0026a6d:	57                   	push   edi
c0026a6e:	56                   	push   esi
c0026a6f:	53                   	push   ebx
c0026a70:	83 ec 1c             	sub    esp,0x1c
c0026a73:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026a77:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026a7b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026a7f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026a83:	85 d2                	test   edx,edx
c0026a85:	75 41                	jne    c0026ac8 <__udivdi3+0x5c>
c0026a87:	39 f7                	cmp    edi,esi
c0026a89:	76 15                	jbe    c0026aa0 <__udivdi3+0x34>
c0026a8b:	89 e8                	mov    eax,ebp
c0026a8d:	89 f2                	mov    edx,esi
c0026a8f:	f7 f7                	div    edi
c0026a91:	31 db                	xor    ebx,ebx
c0026a93:	89 da                	mov    edx,ebx
c0026a95:	83 c4 1c             	add    esp,0x1c
c0026a98:	5b                   	pop    ebx
c0026a99:	5e                   	pop    esi
c0026a9a:	5f                   	pop    edi
c0026a9b:	5d                   	pop    ebp
c0026a9c:	c3                   	ret    
c0026a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0026aa0:	89 f9                	mov    ecx,edi
c0026aa2:	85 ff                	test   edi,edi
c0026aa4:	75 0b                	jne    c0026ab1 <__udivdi3+0x45>
c0026aa6:	b8 01 00 00 00       	mov    eax,0x1
c0026aab:	31 d2                	xor    edx,edx
c0026aad:	f7 f7                	div    edi
c0026aaf:	89 c1                	mov    ecx,eax
c0026ab1:	31 d2                	xor    edx,edx
c0026ab3:	89 f0                	mov    eax,esi
c0026ab5:	f7 f1                	div    ecx
c0026ab7:	89 c3                	mov    ebx,eax
c0026ab9:	89 e8                	mov    eax,ebp
c0026abb:	f7 f1                	div    ecx
c0026abd:	89 da                	mov    edx,ebx
c0026abf:	83 c4 1c             	add    esp,0x1c
c0026ac2:	5b                   	pop    ebx
c0026ac3:	5e                   	pop    esi
c0026ac4:	5f                   	pop    edi
c0026ac5:	5d                   	pop    ebp
c0026ac6:	c3                   	ret    
c0026ac7:	90                   	nop
c0026ac8:	39 f2                	cmp    edx,esi
c0026aca:	77 1c                	ja     c0026ae8 <__udivdi3+0x7c>
c0026acc:	0f bd da             	bsr    ebx,edx
c0026acf:	83 f3 1f             	xor    ebx,0x1f
c0026ad2:	75 24                	jne    c0026af8 <__udivdi3+0x8c>
c0026ad4:	39 f2                	cmp    edx,esi
c0026ad6:	72 08                	jb     c0026ae0 <__udivdi3+0x74>
c0026ad8:	39 ef                	cmp    edi,ebp
c0026ada:	0f 87 84 00 00 00    	ja     c0026b64 <__udivdi3+0xf8>
c0026ae0:	b8 01 00 00 00       	mov    eax,0x1
c0026ae5:	eb ac                	jmp    c0026a93 <__udivdi3+0x27>
c0026ae7:	90                   	nop
c0026ae8:	31 db                	xor    ebx,ebx
c0026aea:	31 c0                	xor    eax,eax
c0026aec:	89 da                	mov    edx,ebx
c0026aee:	83 c4 1c             	add    esp,0x1c
c0026af1:	5b                   	pop    ebx
c0026af2:	5e                   	pop    esi
c0026af3:	5f                   	pop    edi
c0026af4:	5d                   	pop    ebp
c0026af5:	c3                   	ret    
c0026af6:	66 90                	xchg   ax,ax
c0026af8:	b8 20 00 00 00       	mov    eax,0x20
c0026afd:	29 d8                	sub    eax,ebx
c0026aff:	88 d9                	mov    cl,bl
c0026b01:	d3 e2                	shl    edx,cl
c0026b03:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026b07:	89 fa                	mov    edx,edi
c0026b09:	88 c1                	mov    cl,al
c0026b0b:	d3 ea                	shr    edx,cl
c0026b0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b11:	09 d1                	or     ecx,edx
c0026b13:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b17:	88 d9                	mov    cl,bl
c0026b19:	d3 e7                	shl    edi,cl
c0026b1b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b1f:	89 f7                	mov    edi,esi
c0026b21:	88 c1                	mov    cl,al
c0026b23:	d3 ef                	shr    edi,cl
c0026b25:	88 d9                	mov    cl,bl
c0026b27:	d3 e6                	shl    esi,cl
c0026b29:	89 ea                	mov    edx,ebp
c0026b2b:	88 c1                	mov    cl,al
c0026b2d:	d3 ea                	shr    edx,cl
c0026b2f:	09 d6                	or     esi,edx
c0026b31:	89 f0                	mov    eax,esi
c0026b33:	89 fa                	mov    edx,edi
c0026b35:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b39:	89 d7                	mov    edi,edx
c0026b3b:	89 c6                	mov    esi,eax
c0026b3d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b41:	39 d7                	cmp    edi,edx
c0026b43:	72 13                	jb     c0026b58 <__udivdi3+0xec>
c0026b45:	74 09                	je     c0026b50 <__udivdi3+0xe4>
c0026b47:	89 f0                	mov    eax,esi
c0026b49:	31 db                	xor    ebx,ebx
c0026b4b:	e9 43 ff ff ff       	jmp    c0026a93 <__udivdi3+0x27>
c0026b50:	88 d9                	mov    cl,bl
c0026b52:	d3 e5                	shl    ebp,cl
c0026b54:	39 c5                	cmp    ebp,eax
c0026b56:	73 ef                	jae    c0026b47 <__udivdi3+0xdb>
c0026b58:	8d 46 ff             	lea    eax,[esi-0x1]
c0026b5b:	31 db                	xor    ebx,ebx
c0026b5d:	e9 31 ff ff ff       	jmp    c0026a93 <__udivdi3+0x27>
c0026b62:	66 90                	xchg   ax,ax
c0026b64:	31 c0                	xor    eax,eax
c0026b66:	e9 28 ff ff ff       	jmp    c0026a93 <__udivdi3+0x27>
c0026b6b:	90                   	nop

c0026b6c <__umoddi3>:
c0026b6c:	55                   	push   ebp
c0026b6d:	57                   	push   edi
c0026b6e:	56                   	push   esi
c0026b6f:	53                   	push   ebx
c0026b70:	83 ec 1c             	sub    esp,0x1c
c0026b73:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026b77:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b7b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026b7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026b83:	89 da                	mov    edx,ebx
c0026b85:	85 c0                	test   eax,eax
c0026b87:	75 37                	jne    c0026bc0 <__umoddi3+0x54>
c0026b89:	39 df                	cmp    edi,ebx
c0026b8b:	76 13                	jbe    c0026ba0 <__umoddi3+0x34>
c0026b8d:	89 f0                	mov    eax,esi
c0026b8f:	f7 f7                	div    edi
c0026b91:	89 d0                	mov    eax,edx
c0026b93:	31 d2                	xor    edx,edx
c0026b95:	83 c4 1c             	add    esp,0x1c
c0026b98:	5b                   	pop    ebx
c0026b99:	5e                   	pop    esi
c0026b9a:	5f                   	pop    edi
c0026b9b:	5d                   	pop    ebp
c0026b9c:	c3                   	ret    
c0026b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0026ba0:	89 fd                	mov    ebp,edi
c0026ba2:	85 ff                	test   edi,edi
c0026ba4:	75 0b                	jne    c0026bb1 <__umoddi3+0x45>
c0026ba6:	b8 01 00 00 00       	mov    eax,0x1
c0026bab:	31 d2                	xor    edx,edx
c0026bad:	f7 f7                	div    edi
c0026baf:	89 c5                	mov    ebp,eax
c0026bb1:	89 d8                	mov    eax,ebx
c0026bb3:	31 d2                	xor    edx,edx
c0026bb5:	f7 f5                	div    ebp
c0026bb7:	89 f0                	mov    eax,esi
c0026bb9:	f7 f5                	div    ebp
c0026bbb:	89 d0                	mov    eax,edx
c0026bbd:	eb d4                	jmp    c0026b93 <__umoddi3+0x27>
c0026bbf:	90                   	nop
c0026bc0:	89 f1                	mov    ecx,esi
c0026bc2:	39 d8                	cmp    eax,ebx
c0026bc4:	76 0a                	jbe    c0026bd0 <__umoddi3+0x64>
c0026bc6:	89 f0                	mov    eax,esi
c0026bc8:	83 c4 1c             	add    esp,0x1c
c0026bcb:	5b                   	pop    ebx
c0026bcc:	5e                   	pop    esi
c0026bcd:	5f                   	pop    edi
c0026bce:	5d                   	pop    ebp
c0026bcf:	c3                   	ret    
c0026bd0:	0f bd e8             	bsr    ebp,eax
c0026bd3:	83 f5 1f             	xor    ebp,0x1f
c0026bd6:	75 1c                	jne    c0026bf4 <__umoddi3+0x88>
c0026bd8:	39 d8                	cmp    eax,ebx
c0026bda:	72 04                	jb     c0026be0 <__umoddi3+0x74>
c0026bdc:	39 f7                	cmp    edi,esi
c0026bde:	77 08                	ja     c0026be8 <__umoddi3+0x7c>
c0026be0:	89 da                	mov    edx,ebx
c0026be2:	29 fe                	sub    esi,edi
c0026be4:	19 c2                	sbb    edx,eax
c0026be6:	89 f1                	mov    ecx,esi
c0026be8:	89 c8                	mov    eax,ecx
c0026bea:	83 c4 1c             	add    esp,0x1c
c0026bed:	5b                   	pop    ebx
c0026bee:	5e                   	pop    esi
c0026bef:	5f                   	pop    edi
c0026bf0:	5d                   	pop    ebp
c0026bf1:	c3                   	ret    
c0026bf2:	66 90                	xchg   ax,ax
c0026bf4:	ba 20 00 00 00       	mov    edx,0x20
c0026bf9:	29 ea                	sub    edx,ebp
c0026bfb:	89 e9                	mov    ecx,ebp
c0026bfd:	d3 e0                	shl    eax,cl
c0026bff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026c03:	89 f8                	mov    eax,edi
c0026c05:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026c09:	88 d1                	mov    cl,dl
c0026c0b:	d3 e8                	shr    eax,cl
c0026c0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026c11:	09 c1                	or     ecx,eax
c0026c13:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026c17:	89 e9                	mov    ecx,ebp
c0026c19:	d3 e7                	shl    edi,cl
c0026c1b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026c1f:	89 d8                	mov    eax,ebx
c0026c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026c25:	88 d1                	mov    cl,dl
c0026c27:	d3 e8                	shr    eax,cl
c0026c29:	89 c7                	mov    edi,eax
c0026c2b:	89 e9                	mov    ecx,ebp
c0026c2d:	d3 e3                	shl    ebx,cl
c0026c2f:	89 f0                	mov    eax,esi
c0026c31:	88 d1                	mov    cl,dl
c0026c33:	d3 e8                	shr    eax,cl
c0026c35:	09 d8                	or     eax,ebx
c0026c37:	89 e9                	mov    ecx,ebp
c0026c39:	d3 e6                	shl    esi,cl
c0026c3b:	89 f3                	mov    ebx,esi
c0026c3d:	89 fa                	mov    edx,edi
c0026c3f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026c43:	89 d1                	mov    ecx,edx
c0026c45:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026c49:	89 c6                	mov    esi,eax
c0026c4b:	89 d7                	mov    edi,edx
c0026c4d:	39 d1                	cmp    ecx,edx
c0026c4f:	72 27                	jb     c0026c78 <__umoddi3+0x10c>
c0026c51:	74 21                	je     c0026c74 <__umoddi3+0x108>
c0026c53:	89 ca                	mov    edx,ecx
c0026c55:	29 f3                	sub    ebx,esi
c0026c57:	19 fa                	sbb    edx,edi
c0026c59:	89 d0                	mov    eax,edx
c0026c5b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026c5f:	d3 e0                	shl    eax,cl
c0026c61:	89 e9                	mov    ecx,ebp
c0026c63:	d3 eb                	shr    ebx,cl
c0026c65:	09 d8                	or     eax,ebx
c0026c67:	d3 ea                	shr    edx,cl
c0026c69:	83 c4 1c             	add    esp,0x1c
c0026c6c:	5b                   	pop    ebx
c0026c6d:	5e                   	pop    esi
c0026c6e:	5f                   	pop    edi
c0026c6f:	5d                   	pop    ebp
c0026c70:	c3                   	ret    
c0026c71:	8d 76 00             	lea    esi,[esi+0x0]
c0026c74:	39 c3                	cmp    ebx,eax
c0026c76:	73 db                	jae    c0026c53 <__umoddi3+0xe7>
c0026c78:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026c7c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026c80:	89 d7                	mov    edi,edx
c0026c82:	89 c6                	mov    esi,eax
c0026c84:	eb cd                	jmp    c0026c53 <__umoddi3+0xe7>

c0026c86 <__addsf3>:
c0026c86:	55                   	push   ebp
c0026c87:	89 e5                	mov    ebp,esp
c0026c89:	57                   	push   edi
c0026c8a:	56                   	push   esi
c0026c8b:	53                   	push   ebx
c0026c8c:	83 ec 08             	sub    esp,0x8
c0026c8f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026c92:	89 fa                	mov    edx,edi
c0026c94:	89 f8                	mov    eax,edi
c0026c96:	c1 f8 17             	sar    eax,0x17
c0026c99:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c9c:	c1 e2 08             	shl    edx,0x8
c0026c9f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026ca5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026ca8:	89 de                	mov    esi,ebx
c0026caa:	c1 fe 17             	sar    esi,0x17
c0026cad:	c1 e3 08             	shl    ebx,0x8
c0026cb0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026cb6:	31 f0                	xor    eax,esi
c0026cb8:	0f 88 3b 01 00 00    	js     c0026df9 <__addsf3+0x173>
c0026cbe:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026cc1:	29 f1                	sub    ecx,esi
c0026cc3:	85 c9                	test   ecx,ecx
c0026cc5:	7e 54                	jle    c0026d1b <__addsf3+0x95>
c0026cc7:	89 f0                	mov    eax,esi
c0026cc9:	84 c0                	test   al,al
c0026ccb:	75 10                	jne    c0026cdd <__addsf3+0x57>
c0026ccd:	85 db                	test   ebx,ebx
c0026ccf:	0f 84 aa 02 00 00    	je     c0026f7f <__addsf3+0x2f9>
c0026cd5:	49                   	dec    ecx
c0026cd6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026cd9:	74 38                	je     c0026d13 <__addsf3+0x8d>
c0026cdb:	eb 13                	jmp    c0026cf0 <__addsf3+0x6a>
c0026cdd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ce0:	f7 d0                	not    eax
c0026ce2:	84 c0                	test   al,al
c0026ce4:	0f 84 95 02 00 00    	je     c0026f7f <__addsf3+0x2f9>
c0026cea:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026cf0:	83 f9 1f             	cmp    ecx,0x1f
c0026cf3:	0f 8f 86 02 00 00    	jg     c0026f7f <__addsf3+0x2f9>
c0026cf9:	89 de                	mov    esi,ebx
c0026cfb:	d3 ee                	shr    esi,cl
c0026cfd:	b8 20 00 00 00       	mov    eax,0x20
c0026d02:	29 c8                	sub    eax,ecx
c0026d04:	89 c1                	mov    ecx,eax
c0026d06:	d3 e3                	shl    ebx,cl
c0026d08:	31 c0                	xor    eax,eax
c0026d0a:	85 db                	test   ebx,ebx
c0026d0c:	0f 95 c0             	setne  al
c0026d0f:	09 f0                	or     eax,esi
c0026d11:	01 d0                	add    eax,edx
c0026d13:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d16:	e9 b6 00 00 00       	jmp    c0026dd1 <__addsf3+0x14b>
c0026d1b:	74 5c                	je     c0026d79 <__addsf3+0xf3>
c0026d1d:	89 f1                	mov    ecx,esi
c0026d1f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026d22:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d25:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d29:	75 14                	jne    c0026d3f <__addsf3+0xb9>
c0026d2b:	85 d2                	test   edx,edx
c0026d2d:	0f 84 4c 02 00 00    	je     c0026f7f <__addsf3+0x2f9>
c0026d33:	49                   	dec    ecx
c0026d34:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d37:	0f 84 94 00 00 00    	je     c0026dd1 <__addsf3+0x14b>
c0026d3d:	eb 12                	jmp    c0026d51 <__addsf3+0xcb>
c0026d3f:	89 f0                	mov    eax,esi
c0026d41:	f7 d0                	not    eax
c0026d43:	84 c0                	test   al,al
c0026d45:	0f 84 34 02 00 00    	je     c0026f7f <__addsf3+0x2f9>
c0026d4b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026d51:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d54:	83 f9 1f             	cmp    ecx,0x1f
c0026d57:	0f 8f 22 02 00 00    	jg     c0026f7f <__addsf3+0x2f9>
c0026d5d:	89 d7                	mov    edi,edx
c0026d5f:	d3 ef                	shr    edi,cl
c0026d61:	b8 20 00 00 00       	mov    eax,0x20
c0026d66:	29 c8                	sub    eax,ecx
c0026d68:	89 c1                	mov    ecx,eax
c0026d6a:	d3 e2                	shl    edx,cl
c0026d6c:	31 c0                	xor    eax,eax
c0026d6e:	85 d2                	test   edx,edx
c0026d70:	0f 95 c0             	setne  al
c0026d73:	09 f8                	or     eax,edi
c0026d75:	01 d8                	add    eax,ebx
c0026d77:	eb 58                	jmp    c0026dd1 <__addsf3+0x14b>
c0026d79:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d7c:	8d 70 01             	lea    esi,[eax+0x1]
c0026d7f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026d85:	75 32                	jne    c0026db9 <__addsf3+0x133>
c0026d87:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d8b:	75 1f                	jne    c0026dac <__addsf3+0x126>
c0026d8d:	85 d2                	test   edx,edx
c0026d8f:	0f 84 e0 01 00 00    	je     c0026f75 <__addsf3+0x2ef>
c0026d95:	85 db                	test   ebx,ebx
c0026d97:	0f 84 e2 01 00 00    	je     c0026f7f <__addsf3+0x2f9>
c0026d9d:	89 d0                	mov    eax,edx
c0026d9f:	01 d8                	add    eax,ebx
c0026da1:	0f 89 a9 01 00 00    	jns    c0026f50 <__addsf3+0x2ca>
c0026da7:	e9 9d 01 00 00       	jmp    c0026f49 <__addsf3+0x2c3>
c0026dac:	85 d2                	test   edx,edx
c0026dae:	0f 85 cb 01 00 00    	jne    c0026f7f <__addsf3+0x2f9>
c0026db4:	e9 bc 01 00 00       	jmp    c0026f75 <__addsf3+0x2ef>
c0026db9:	31 c0                	xor    eax,eax
c0026dbb:	89 f1                	mov    ecx,esi
c0026dbd:	f7 d1                	not    ecx
c0026dbf:	84 c9                	test   cl,cl
c0026dc1:	0f 84 90 01 00 00    	je     c0026f57 <__addsf3+0x2d1>
c0026dc7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026dca:	d1 e8                	shr    eax,1
c0026dcc:	e9 86 01 00 00       	jmp    c0026f57 <__addsf3+0x2d1>
c0026dd1:	85 c0                	test   eax,eax
c0026dd3:	0f 89 7e 01 00 00    	jns    c0026f57 <__addsf3+0x2d1>
c0026dd9:	46                   	inc    esi
c0026dda:	89 f2                	mov    edx,esi
c0026ddc:	f7 d2                	not    edx
c0026dde:	84 d2                	test   dl,dl
c0026de0:	0f 84 6f 01 00 00    	je     c0026f55 <__addsf3+0x2cf>
c0026de6:	89 c2                	mov    edx,eax
c0026de8:	83 e2 01             	and    edx,0x1
c0026deb:	d1 e8                	shr    eax,1
c0026ded:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026df2:	09 d0                	or     eax,edx
c0026df4:	e9 5e 01 00 00       	jmp    c0026f57 <__addsf3+0x2d1>
c0026df9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026dfd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026e00:	89 f0                	mov    eax,esi
c0026e02:	0f b6 c0             	movzx  eax,al
c0026e05:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026e08:	29 c1                	sub    ecx,eax
c0026e0a:	85 c9                	test   ecx,ecx
c0026e0c:	7e 55                	jle    c0026e63 <__addsf3+0x1dd>
c0026e0e:	85 c0                	test   eax,eax
c0026e10:	75 11                	jne    c0026e23 <__addsf3+0x19d>
c0026e12:	85 db                	test   ebx,ebx
c0026e14:	0f 84 65 01 00 00    	je     c0026f7f <__addsf3+0x2f9>
c0026e1a:	49                   	dec    ecx
c0026e1b:	75 19                	jne    c0026e36 <__addsf3+0x1b0>
c0026e1d:	89 d0                	mov    eax,edx
c0026e1f:	29 d8                	sub    eax,ebx
c0026e21:	eb 38                	jmp    c0026e5b <__addsf3+0x1d5>
c0026e23:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e26:	f7 d0                	not    eax
c0026e28:	84 c0                	test   al,al
c0026e2a:	0f 84 4f 01 00 00    	je     c0026f7f <__addsf3+0x2f9>
c0026e30:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026e36:	83 f9 1f             	cmp    ecx,0x1f
c0026e39:	0f 8f 40 01 00 00    	jg     c0026f7f <__addsf3+0x2f9>
c0026e3f:	89 de                	mov    esi,ebx
c0026e41:	d3 ee                	shr    esi,cl
c0026e43:	b8 20 00 00 00       	mov    eax,0x20
c0026e48:	29 c8                	sub    eax,ecx
c0026e4a:	89 c1                	mov    ecx,eax
c0026e4c:	d3 e3                	shl    ebx,cl
c0026e4e:	31 c0                	xor    eax,eax
c0026e50:	85 db                	test   ebx,ebx
c0026e52:	0f 95 c0             	setne  al
c0026e55:	09 f0                	or     eax,esi
c0026e57:	29 c2                	sub    edx,eax
c0026e59:	89 d0                	mov    eax,edx
c0026e5b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e5e:	e9 af 00 00 00       	jmp    c0026f12 <__addsf3+0x28c>
c0026e63:	74 5c                	je     c0026ec1 <__addsf3+0x23b>
c0026e65:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026e68:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e6b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e6f:	75 14                	jne    c0026e85 <__addsf3+0x1ff>
c0026e71:	85 d2                	test   edx,edx
c0026e73:	0f 84 06 01 00 00    	je     c0026f7f <__addsf3+0x2f9>
c0026e79:	48                   	dec    eax
c0026e7a:	75 1b                	jne    c0026e97 <__addsf3+0x211>
c0026e7c:	89 d8                	mov    eax,ebx
c0026e7e:	29 d0                	sub    eax,edx
c0026e80:	e9 8d 00 00 00       	jmp    c0026f12 <__addsf3+0x28c>
c0026e85:	89 f1                	mov    ecx,esi
c0026e87:	f7 d1                	not    ecx
c0026e89:	84 c9                	test   cl,cl
c0026e8b:	0f 84 ee 00 00 00    	je     c0026f7f <__addsf3+0x2f9>
c0026e91:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e97:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e9a:	83 f8 1f             	cmp    eax,0x1f
c0026e9d:	0f 8f dc 00 00 00    	jg     c0026f7f <__addsf3+0x2f9>
c0026ea3:	89 d7                	mov    edi,edx
c0026ea5:	88 c1                	mov    cl,al
c0026ea7:	d3 ef                	shr    edi,cl
c0026ea9:	b9 20 00 00 00       	mov    ecx,0x20
c0026eae:	29 c1                	sub    ecx,eax
c0026eb0:	d3 e2                	shl    edx,cl
c0026eb2:	31 c0                	xor    eax,eax
c0026eb4:	85 d2                	test   edx,edx
c0026eb6:	0f 95 c0             	setne  al
c0026eb9:	09 f8                	or     eax,edi
c0026ebb:	29 c3                	sub    ebx,eax
c0026ebd:	89 d8                	mov    eax,ebx
c0026ebf:	eb 51                	jmp    c0026f12 <__addsf3+0x28c>
c0026ec1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ec4:	40                   	inc    eax
c0026ec5:	a8 fe                	test   al,0xfe
c0026ec7:	75 3d                	jne    c0026f06 <__addsf3+0x280>
c0026ec9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026ecd:	0f 85 a7 00 00 00    	jne    c0026f7a <__addsf3+0x2f4>
c0026ed3:	85 d2                	test   edx,edx
c0026ed5:	75 12                	jne    c0026ee9 <__addsf3+0x263>
c0026ed7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026eda:	85 db                	test   ebx,ebx
c0026edc:	0f 85 9d 00 00 00    	jne    c0026f7f <__addsf3+0x2f9>
c0026ee2:	31 ff                	xor    edi,edi
c0026ee4:	e9 96 00 00 00       	jmp    c0026f7f <__addsf3+0x2f9>
c0026ee9:	85 db                	test   ebx,ebx
c0026eeb:	0f 84 8e 00 00 00    	je     c0026f7f <__addsf3+0x2f9>
c0026ef1:	89 d0                	mov    eax,edx
c0026ef3:	29 d8                	sub    eax,ebx
c0026ef5:	79 06                	jns    c0026efd <__addsf3+0x277>
c0026ef7:	89 d8                	mov    eax,ebx
c0026ef9:	29 d0                	sub    eax,edx
c0026efb:	eb 5a                	jmp    c0026f57 <__addsf3+0x2d1>
c0026efd:	bf 00 00 00 00       	mov    edi,0x0
c0026f02:	74 7b                	je     c0026f7f <__addsf3+0x2f9>
c0026f04:	eb 4a                	jmp    c0026f50 <__addsf3+0x2ca>
c0026f06:	89 d0                	mov    eax,edx
c0026f08:	29 d8                	sub    eax,ebx
c0026f0a:	79 12                	jns    c0026f1e <__addsf3+0x298>
c0026f0c:	89 d8                	mov    eax,ebx
c0026f0e:	29 d0                	sub    eax,edx
c0026f10:	eb 09                	jmp    c0026f1b <__addsf3+0x295>
c0026f12:	85 c0                	test   eax,eax
c0026f14:	79 41                	jns    c0026f57 <__addsf3+0x2d1>
c0026f16:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f1b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026f1e:	31 f6                	xor    esi,esi
c0026f20:	85 c0                	test   eax,eax
c0026f22:	74 33                	je     c0026f57 <__addsf3+0x2d1>
c0026f24:	0f bd c8             	bsr    ecx,eax
c0026f27:	83 f1 1f             	xor    ecx,0x1f
c0026f2a:	d3 e0                	shl    eax,cl
c0026f2c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026f30:	39 ca                	cmp    edx,ecx
c0026f32:	7f 10                	jg     c0026f44 <__addsf3+0x2be>
c0026f34:	29 d1                	sub    ecx,edx
c0026f36:	41                   	inc    ecx
c0026f37:	d3 e8                	shr    eax,cl
c0026f39:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f3c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026f42:	eb 13                	jmp    c0026f57 <__addsf3+0x2d1>
c0026f44:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f47:	29 ce                	sub    esi,ecx
c0026f49:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f4e:	eb 07                	jmp    c0026f57 <__addsf3+0x2d1>
c0026f50:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f53:	eb 02                	jmp    c0026f57 <__addsf3+0x2d1>
c0026f55:	31 c0                	xor    eax,eax
c0026f57:	89 c2                	mov    edx,eax
c0026f59:	c1 ea 08             	shr    edx,0x8
c0026f5c:	a8 7f                	test   al,0x7f
c0026f5e:	0f 95 c1             	setne  cl
c0026f61:	09 d1                	or     ecx,edx
c0026f63:	83 e1 01             	and    ecx,0x1
c0026f66:	c1 e8 07             	shr    eax,0x7
c0026f69:	21 c8                	and    eax,ecx
c0026f6b:	c1 e6 17             	shl    esi,0x17
c0026f6e:	09 d6                	or     esi,edx
c0026f70:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026f73:	eb 0a                	jmp    c0026f7f <__addsf3+0x2f9>
c0026f75:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f78:	eb 05                	jmp    c0026f7f <__addsf3+0x2f9>
c0026f7a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026f7f:	89 f8                	mov    eax,edi
c0026f81:	5a                   	pop    edx
c0026f82:	59                   	pop    ecx
c0026f83:	5b                   	pop    ebx
c0026f84:	5e                   	pop    esi
c0026f85:	5f                   	pop    edi
c0026f86:	5d                   	pop    ebp
c0026f87:	c3                   	ret    

c0026f88 <__subsf3>:
c0026f88:	55                   	push   ebp
c0026f89:	89 e5                	mov    ebp,esp
c0026f8b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f8e:	05 00 00 00 80       	add    eax,0x80000000
c0026f93:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026f96:	5d                   	pop    ebp
c0026f97:	e9 ea fc ff ff       	jmp    c0026c86 <__addsf3>

c0026f9c <__negsf2>:
c0026f9c:	55                   	push   ebp
c0026f9d:	89 e5                	mov    ebp,esp
c0026f9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026fa2:	05 00 00 00 80       	add    eax,0x80000000
c0026fa7:	5d                   	pop    ebp
c0026fa8:	c3                   	ret    

c0026fa9 <__mulsf3>:
c0026fa9:	55                   	push   ebp
c0026faa:	89 e5                	mov    ebp,esp
c0026fac:	57                   	push   edi
c0026fad:	56                   	push   esi
c0026fae:	53                   	push   ebx
c0026faf:	83 ec 1c             	sub    esp,0x1c
c0026fb2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026fb5:	89 f0                	mov    eax,esi
c0026fb7:	89 f1                	mov    ecx,esi
c0026fb9:	c1 f9 17             	sar    ecx,0x17
c0026fbc:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026fbf:	c1 e0 08             	shl    eax,0x8
c0026fc2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026fc7:	89 c1                	mov    ecx,eax
c0026fc9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026fcc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026fcf:	89 c7                	mov    edi,eax
c0026fd1:	c1 ff 17             	sar    edi,0x17
c0026fd4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026fd8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026fdb:	89 f8                	mov    eax,edi
c0026fdd:	0f b6 c0             	movzx  eax,al
c0026fe0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026fe3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026fe7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026fea:	42                   	inc    edx
c0026feb:	80 e2 fe             	and    dl,0xfe
c0026fee:	75 7b                	jne    c002706b <__mulsf3+0xc2>
c0026ff0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026ff4:	74 54                	je     c002704a <__mulsf3+0xa1>
c0026ff6:	85 c9                	test   ecx,ecx
c0026ff8:	0f 85 64 01 00 00    	jne    c0027162 <__mulsf3+0x1b9>
c0026ffe:	8d 57 01             	lea    edx,[edi+0x1]
c0027001:	80 e2 fe             	and    dl,0xfe
c0027004:	75 1f                	jne    c0027025 <__mulsf3+0x7c>
c0027006:	85 c0                	test   eax,eax
c0027008:	b8 00 00 00 00       	mov    eax,0x0
c002700d:	74 29                	je     c0027038 <__mulsf3+0x8f>
c002700f:	53                   	push   ebx
c0027010:	53                   	push   ebx
c0027011:	50                   	push   eax
c0027012:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027015:	e8 96 05 00 00       	call   c00275b0 <__nesf2>
c002701a:	83 c4 10             	add    esp,0x10
c002701d:	85 c0                	test   eax,eax
c002701f:	0f 85 3a 01 00 00    	jne    c002715f <__mulsf3+0x1b6>
c0027025:	85 ff                	test   edi,edi
c0027027:	0f 89 35 01 00 00    	jns    c0027162 <__mulsf3+0x1b9>
c002702d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0027033:	e9 2a 01 00 00       	jmp    c0027162 <__mulsf3+0x1b9>
c0027038:	51                   	push   ecx
c0027039:	51                   	push   ecx
c002703a:	50                   	push   eax
c002703b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002703e:	e8 6d 05 00 00       	call   c00275b0 <__nesf2>
c0027043:	83 c4 10             	add    esp,0x10
c0027046:	85 c0                	test   eax,eax
c0027048:	eb 15                	jmp    c002705f <__mulsf3+0xb6>
c002704a:	85 c9                	test   ecx,ecx
c002704c:	74 0b                	je     c0027059 <__mulsf3+0xb0>
c002704e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027051:	01 c9                	add    ecx,ecx
c0027053:	78 16                	js     c002706b <__mulsf3+0xc2>
c0027055:	89 d3                	mov    ebx,edx
c0027057:	eb f5                	jmp    c002704e <__mulsf3+0xa5>
c0027059:	89 f8                	mov    eax,edi
c002705b:	f7 d0                	not    eax
c002705d:	84 c0                	test   al,al
c002705f:	75 c4                	jne    c0027025 <__mulsf3+0x7c>
c0027061:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0027066:	e9 f7 00 00 00       	jmp    c0027162 <__mulsf3+0x1b9>
c002706b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002706e:	c1 e6 08             	shl    esi,0x8
c0027071:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0027077:	8d 57 01             	lea    edx,[edi+0x1]
c002707a:	80 e2 fe             	and    dl,0xfe
c002707d:	75 63                	jne    c00270e2 <__mulsf3+0x139>
c002707f:	85 c0                	test   eax,eax
c0027081:	74 2f                	je     c00270b2 <__mulsf3+0x109>
c0027083:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027087:	0f 89 d2 00 00 00    	jns    c002715f <__mulsf3+0x1b6>
c002708d:	52                   	push   edx
c002708e:	52                   	push   edx
c002708f:	6a 00                	push   0x0
c0027091:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027094:	e8 dc 04 00 00       	call   c0027575 <__eqsf2>
c0027099:	83 c4 10             	add    esp,0x10
c002709c:	85 c0                	test   eax,eax
c002709e:	0f 85 bb 00 00 00    	jne    c002715f <__mulsf3+0x1b6>
c00270a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00270a7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00270ad:	e9 b0 00 00 00       	jmp    c0027162 <__mulsf3+0x1b9>
c00270b2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00270b5:	50                   	push   eax
c00270b6:	50                   	push   eax
c00270b7:	6a 00                	push   0x0
c00270b9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270bc:	e8 b4 04 00 00       	call   c0027575 <__eqsf2>
c00270c1:	83 c4 10             	add    esp,0x10
c00270c4:	85 c0                	test   eax,eax
c00270c6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00270c9:	75 0c                	jne    c00270d7 <__mulsf3+0x12e>
c00270cb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00270cf:	0f 89 8a 00 00 00    	jns    c002715f <__mulsf3+0x1b6>
c00270d5:	eb cd                	jmp    c00270a4 <__mulsf3+0xfb>
c00270d7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00270da:	01 f6                	add    esi,esi
c00270dc:	78 04                	js     c00270e2 <__mulsf3+0x139>
c00270de:	89 c3                	mov    ebx,eax
c00270e0:	eb f5                	jmp    c00270d7 <__mulsf3+0x12e>
c00270e2:	89 c8                	mov    eax,ecx
c00270e4:	0d 00 00 00 80       	or     eax,0x80000000
c00270e9:	81 ce 00 00 00 80    	or     esi,0x80000000
c00270ef:	f7 e6                	mul    esi
c00270f1:	85 c0                	test   eax,eax
c00270f3:	0f 95 c0             	setne  al
c00270f6:	0f b6 c0             	movzx  eax,al
c00270f9:	09 c2                	or     edx,eax
c00270fb:	78 03                	js     c0027100 <__mulsf3+0x157>
c00270fd:	01 d2                	add    edx,edx
c00270ff:	4b                   	dec    ebx
c0027100:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027106:	7f 22                	jg     c002712a <__mulsf3+0x181>
c0027108:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002710e:	85 db                	test   ebx,ebx
c0027110:	7f 23                	jg     c0027135 <__mulsf3+0x18c>
c0027112:	83 fb e9             	cmp    ebx,0xffffffe9
c0027115:	7c 1a                	jl     c0027131 <__mulsf3+0x188>
c0027117:	81 ca 00 00 00 80    	or     edx,0x80000000
c002711d:	b9 01 00 00 00       	mov    ecx,0x1
c0027122:	29 d9                	sub    ecx,ebx
c0027124:	d3 ea                	shr    edx,cl
c0027126:	31 db                	xor    ebx,ebx
c0027128:	eb 0b                	jmp    c0027135 <__mulsf3+0x18c>
c002712a:	bb ff 00 00 00       	mov    ebx,0xff
c002712f:	eb 02                	jmp    c0027133 <__mulsf3+0x18a>
c0027131:	31 db                	xor    ebx,ebx
c0027133:	31 d2                	xor    edx,edx
c0027135:	89 d0                	mov    eax,edx
c0027137:	c1 e8 08             	shr    eax,0x8
c002713a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002713d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027143:	09 fb                	or     ebx,edi
c0027145:	c1 e3 17             	shl    ebx,0x17
c0027148:	09 c3                	or     ebx,eax
c002714a:	f6 c2 7f             	test   dl,0x7f
c002714d:	0f 95 c1             	setne  cl
c0027150:	09 c8                	or     eax,ecx
c0027152:	83 e0 01             	and    eax,0x1
c0027155:	c1 ea 07             	shr    edx,0x7
c0027158:	21 c2                	and    edx,eax
c002715a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002715d:	eb 03                	jmp    c0027162 <__mulsf3+0x1b9>
c002715f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027162:	89 f0                	mov    eax,esi
c0027164:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027167:	5b                   	pop    ebx
c0027168:	5e                   	pop    esi
c0027169:	5f                   	pop    edi
c002716a:	5d                   	pop    ebp
c002716b:	c3                   	ret    

c002716c <__divsf3>:
c002716c:	55                   	push   ebp
c002716d:	89 e5                	mov    ebp,esp
c002716f:	57                   	push   edi
c0027170:	56                   	push   esi
c0027171:	53                   	push   ebx
c0027172:	83 ec 1c             	sub    esp,0x1c
c0027175:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027178:	89 d8                	mov    eax,ebx
c002717a:	89 d9                	mov    ecx,ebx
c002717c:	c1 f9 17             	sar    ecx,0x17
c002717f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027182:	c1 e0 08             	shl    eax,0x8
c0027185:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002718a:	89 c1                	mov    ecx,eax
c002718c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002718f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027192:	89 c7                	mov    edi,eax
c0027194:	c1 ff 17             	sar    edi,0x17
c0027197:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002719b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002719e:	89 f8                	mov    eax,edi
c00271a0:	0f b6 c0             	movzx  eax,al
c00271a3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00271a6:	29 c6                	sub    esi,eax
c00271a8:	83 c6 7f             	add    esi,0x7f
c00271ab:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00271ae:	42                   	inc    edx
c00271af:	80 e2 fe             	and    dl,0xfe
c00271b2:	0f 85 9c 00 00 00    	jne    c0027254 <__divsf3+0xe8>
c00271b8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00271bc:	74 33                	je     c00271f1 <__divsf3+0x85>
c00271be:	85 c9                	test   ecx,ecx
c00271c0:	0f 85 c7 01 00 00    	jne    c002738d <__divsf3+0x221>
c00271c6:	8d 57 01             	lea    edx,[edi+0x1]
c00271c9:	80 e2 fe             	and    dl,0xfe
c00271cc:	75 2f                	jne    c00271fd <__divsf3+0x91>
c00271ce:	85 c0                	test   eax,eax
c00271d0:	74 2b                	je     c00271fd <__divsf3+0x91>
c00271d2:	51                   	push   ecx
c00271d3:	51                   	push   ecx
c00271d4:	6a 00                	push   0x0
c00271d6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271d9:	e8 d2 03 00 00       	call   c00275b0 <__nesf2>
c00271de:	83 c4 10             	add    esp,0x10
c00271e1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00271e4:	85 c0                	test   eax,eax
c00271e6:	0f 85 a1 01 00 00    	jne    c002738d <__divsf3+0x221>
c00271ec:	e9 92 01 00 00       	jmp    c0027383 <__divsf3+0x217>
c00271f1:	85 c9                	test   ecx,ecx
c00271f3:	75 1b                	jne    c0027210 <__divsf3+0xa4>
c00271f5:	8d 57 01             	lea    edx,[edi+0x1]
c00271f8:	80 e2 fe             	and    dl,0xfe
c00271fb:	74 1e                	je     c002721b <__divsf3+0xaf>
c00271fd:	85 ff                	test   edi,edi
c00271ff:	0f 89 88 01 00 00    	jns    c002738d <__divsf3+0x221>
c0027205:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002720b:	e9 7d 01 00 00       	jmp    c002738d <__divsf3+0x221>
c0027210:	8d 56 ff             	lea    edx,[esi-0x1]
c0027213:	01 c9                	add    ecx,ecx
c0027215:	78 3d                	js     c0027254 <__divsf3+0xe8>
c0027217:	89 d6                	mov    esi,edx
c0027219:	eb f5                	jmp    c0027210 <__divsf3+0xa4>
c002721b:	85 c0                	test   eax,eax
c002721d:	b8 00 00 00 00       	mov    eax,0x0
c0027222:	74 18                	je     c002723c <__divsf3+0xd0>
c0027224:	52                   	push   edx
c0027225:	52                   	push   edx
c0027226:	50                   	push   eax
c0027227:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002722a:	e8 81 03 00 00       	call   c00275b0 <__nesf2>
c002722f:	83 c4 10             	add    esp,0x10
c0027232:	85 c0                	test   eax,eax
c0027234:	0f 85 50 01 00 00    	jne    c002738a <__divsf3+0x21e>
c002723a:	eb c1                	jmp    c00271fd <__divsf3+0x91>
c002723c:	56                   	push   esi
c002723d:	56                   	push   esi
c002723e:	50                   	push   eax
c002723f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027242:	e8 69 03 00 00       	call   c00275b0 <__nesf2>
c0027247:	83 c4 10             	add    esp,0x10
c002724a:	85 c0                	test   eax,eax
c002724c:	0f 84 31 01 00 00    	je     c0027383 <__divsf3+0x217>
c0027252:	eb a9                	jmp    c00271fd <__divsf3+0x91>
c0027254:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027257:	c1 e3 08             	shl    ebx,0x8
c002725a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027260:	8d 57 01             	lea    edx,[edi+0x1]
c0027263:	80 e2 fe             	and    dl,0xfe
c0027266:	75 71                	jne    c00272d9 <__divsf3+0x16d>
c0027268:	85 c0                	test   eax,eax
c002726a:	ba 00 00 00 00       	mov    edx,0x0
c002726f:	74 2f                	je     c00272a0 <__divsf3+0x134>
c0027271:	51                   	push   ecx
c0027272:	51                   	push   ecx
c0027273:	52                   	push   edx
c0027274:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027277:	e8 f9 02 00 00       	call   c0027575 <__eqsf2>
c002727c:	83 c4 10             	add    esp,0x10
c002727f:	85 c0                	test   eax,eax
c0027281:	0f 85 03 01 00 00    	jne    c002738a <__divsf3+0x21e>
c0027287:	31 d2                	xor    edx,edx
c0027289:	89 d3                	mov    ebx,edx
c002728b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002728e:	31 f8                	xor    eax,edi
c0027290:	0f 89 f7 00 00 00    	jns    c002738d <__divsf3+0x221>
c0027296:	bb 00 00 00 80       	mov    ebx,0x80000000
c002729b:	e9 ed 00 00 00       	jmp    c002738d <__divsf3+0x221>
c00272a0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00272a3:	50                   	push   eax
c00272a4:	50                   	push   eax
c00272a5:	52                   	push   edx
c00272a6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272a9:	e8 c7 02 00 00       	call   c0027575 <__eqsf2>
c00272ae:	83 c4 10             	add    esp,0x10
c00272b1:	85 c0                	test   eax,eax
c00272b3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00272b6:	75 16                	jne    c00272ce <__divsf3+0x162>
c00272b8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00272bb:	31 fb                	xor    ebx,edi
c00272bd:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00272c3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00272c9:	e9 bf 00 00 00       	jmp    c002738d <__divsf3+0x221>
c00272ce:	8d 46 01             	lea    eax,[esi+0x1]
c00272d1:	01 db                	add    ebx,ebx
c00272d3:	78 04                	js     c00272d9 <__divsf3+0x16d>
c00272d5:	89 c6                	mov    esi,eax
c00272d7:	eb f5                	jmp    c00272ce <__divsf3+0x162>
c00272d9:	89 c8                	mov    eax,ecx
c00272db:	0d 00 00 00 80       	or     eax,0x80000000
c00272e0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00272e6:	31 d2                	xor    edx,edx
c00272e8:	39 d8                	cmp    eax,ebx
c00272ea:	72 07                	jb     c00272f3 <__divsf3+0x187>
c00272ec:	29 d8                	sub    eax,ebx
c00272ee:	ba 01 00 00 00       	mov    edx,0x1
c00272f3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00272fa:	01 d2                	add    edx,edx
c00272fc:	89 c1                	mov    ecx,eax
c00272fe:	01 c0                	add    eax,eax
c0027300:	85 c9                	test   ecx,ecx
c0027302:	78 04                	js     c0027308 <__divsf3+0x19c>
c0027304:	39 c3                	cmp    ebx,eax
c0027306:	77 05                	ja     c002730d <__divsf3+0x1a1>
c0027308:	29 d8                	sub    eax,ebx
c002730a:	83 ca 01             	or     edx,0x1
c002730d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027310:	75 e8                	jne    c00272fa <__divsf3+0x18e>
c0027312:	85 c0                	test   eax,eax
c0027314:	0f 95 c0             	setne  al
c0027317:	0f b6 c0             	movzx  eax,al
c002731a:	c1 e2 06             	shl    edx,0x6
c002731d:	09 c2                	or     edx,eax
c002731f:	78 03                	js     c0027324 <__divsf3+0x1b8>
c0027321:	01 d2                	add    edx,edx
c0027323:	4e                   	dec    esi
c0027324:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002732a:	7f 22                	jg     c002734e <__divsf3+0x1e2>
c002732c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027332:	85 f6                	test   esi,esi
c0027334:	7f 23                	jg     c0027359 <__divsf3+0x1ed>
c0027336:	83 fe e9             	cmp    esi,0xffffffe9
c0027339:	7c 1a                	jl     c0027355 <__divsf3+0x1e9>
c002733b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027341:	b9 01 00 00 00       	mov    ecx,0x1
c0027346:	29 f1                	sub    ecx,esi
c0027348:	d3 ea                	shr    edx,cl
c002734a:	31 f6                	xor    esi,esi
c002734c:	eb 0b                	jmp    c0027359 <__divsf3+0x1ed>
c002734e:	be ff 00 00 00       	mov    esi,0xff
c0027353:	eb 02                	jmp    c0027357 <__divsf3+0x1eb>
c0027355:	31 f6                	xor    esi,esi
c0027357:	31 d2                	xor    edx,edx
c0027359:	89 d0                	mov    eax,edx
c002735b:	c1 e8 08             	shr    eax,0x8
c002735e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027361:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027367:	09 fe                	or     esi,edi
c0027369:	c1 e6 17             	shl    esi,0x17
c002736c:	09 c6                	or     esi,eax
c002736e:	f6 c2 7f             	test   dl,0x7f
c0027371:	0f 95 c1             	setne  cl
c0027374:	09 c8                	or     eax,ecx
c0027376:	83 e0 01             	and    eax,0x1
c0027379:	c1 ea 07             	shr    edx,0x7
c002737c:	21 c2                	and    edx,eax
c002737e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027381:	eb 0a                	jmp    c002738d <__divsf3+0x221>
c0027383:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027388:	eb 03                	jmp    c002738d <__divsf3+0x221>
c002738a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002738d:	89 d8                	mov    eax,ebx
c002738f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027392:	5b                   	pop    ebx
c0027393:	5e                   	pop    esi
c0027394:	5f                   	pop    edi
c0027395:	5d                   	pop    ebp
c0027396:	c3                   	ret    

c0027397 <__floatsisf>:
c0027397:	55                   	push   ebp
c0027398:	89 e5                	mov    ebp,esp
c002739a:	53                   	push   ebx
c002739b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002739e:	85 d2                	test   edx,edx
c00273a0:	7e 2b                	jle    c00273cd <__floatsisf+0x36>
c00273a2:	0f bd ca             	bsr    ecx,edx
c00273a5:	83 f1 1f             	xor    ecx,0x1f
c00273a8:	d3 e2                	shl    edx,cl
c00273aa:	89 d0                	mov    eax,edx
c00273ac:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273b1:	89 c3                	mov    ebx,eax
c00273b3:	c1 eb 08             	shr    ebx,0x8
c00273b6:	80 e2 7f             	and    dl,0x7f
c00273b9:	0f 95 c2             	setne  dl
c00273bc:	09 da                	or     edx,ebx
c00273be:	83 e2 01             	and    edx,0x1
c00273c1:	c1 e8 07             	shr    eax,0x7
c00273c4:	21 c2                	and    edx,eax
c00273c6:	b8 9e 00 00 00       	mov    eax,0x9e
c00273cb:	eb 32                	jmp    c00273ff <__floatsisf+0x68>
c00273cd:	b8 00 00 00 00       	mov    eax,0x0
c00273d2:	74 34                	je     c0027408 <__floatsisf+0x71>
c00273d4:	f7 da                	neg    edx
c00273d6:	0f bd ca             	bsr    ecx,edx
c00273d9:	83 f1 1f             	xor    ecx,0x1f
c00273dc:	d3 e2                	shl    edx,cl
c00273de:	89 d0                	mov    eax,edx
c00273e0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273e5:	89 c3                	mov    ebx,eax
c00273e7:	c1 eb 08             	shr    ebx,0x8
c00273ea:	80 e2 7f             	and    dl,0x7f
c00273ed:	0f 95 c2             	setne  dl
c00273f0:	09 da                	or     edx,ebx
c00273f2:	83 e2 01             	and    edx,0x1
c00273f5:	c1 e8 07             	shr    eax,0x7
c00273f8:	21 c2                	and    edx,eax
c00273fa:	b8 9e 01 00 00       	mov    eax,0x19e
c00273ff:	29 c8                	sub    eax,ecx
c0027401:	c1 e0 17             	shl    eax,0x17
c0027404:	09 d8                	or     eax,ebx
c0027406:	01 d0                	add    eax,edx
c0027408:	5b                   	pop    ebx
c0027409:	5d                   	pop    ebp
c002740a:	c3                   	ret    

c002740b <__floatunsisf>:
c002740b:	55                   	push   ebp
c002740c:	89 e5                	mov    ebp,esp
c002740e:	53                   	push   ebx
c002740f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027412:	31 c0                	xor    eax,eax
c0027414:	85 d2                	test   edx,edx
c0027416:	74 32                	je     c002744a <__floatunsisf+0x3f>
c0027418:	0f bd ca             	bsr    ecx,edx
c002741b:	83 f1 1f             	xor    ecx,0x1f
c002741e:	d3 e2                	shl    edx,cl
c0027420:	89 d0                	mov    eax,edx
c0027422:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027427:	89 c3                	mov    ebx,eax
c0027429:	c1 eb 08             	shr    ebx,0x8
c002742c:	80 e2 7f             	and    dl,0x7f
c002742f:	0f 95 c2             	setne  dl
c0027432:	09 da                	or     edx,ebx
c0027434:	83 e2 01             	and    edx,0x1
c0027437:	c1 e8 07             	shr    eax,0x7
c002743a:	21 c2                	and    edx,eax
c002743c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027441:	29 c8                	sub    eax,ecx
c0027443:	c1 e0 17             	shl    eax,0x17
c0027446:	09 d8                	or     eax,ebx
c0027448:	01 d0                	add    eax,edx
c002744a:	5b                   	pop    ebx
c002744b:	5d                   	pop    ebp
c002744c:	c3                   	ret    

c002744d <__fixsfsi>:
c002744d:	55                   	push   ebp
c002744e:	89 e5                	mov    ebp,esp
c0027450:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027453:	89 d1                	mov    ecx,edx
c0027455:	c1 e1 08             	shl    ecx,0x8
c0027458:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002745e:	c1 fa 17             	sar    edx,0x17
c0027461:	78 1c                	js     c002747f <__fixsfsi+0x32>
c0027463:	83 ea 7f             	sub    edx,0x7f
c0027466:	31 c0                	xor    eax,eax
c0027468:	83 fa 1e             	cmp    edx,0x1e
c002746b:	77 40                	ja     c00274ad <__fixsfsi+0x60>
c002746d:	89 c8                	mov    eax,ecx
c002746f:	0d 00 00 00 80       	or     eax,0x80000000
c0027474:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027479:	29 d1                	sub    ecx,edx
c002747b:	d3 e8                	shr    eax,cl
c002747d:	eb 2e                	jmp    c00274ad <__fixsfsi+0x60>
c002747f:	31 c0                	xor    eax,eax
c0027481:	81 c2 81 00 00 00    	add    edx,0x81
c0027487:	78 24                	js     c00274ad <__fixsfsi+0x60>
c0027489:	83 fa 1e             	cmp    edx,0x1e
c002748c:	7e 09                	jle    c0027497 <__fixsfsi+0x4a>
c002748e:	83 fa 1f             	cmp    edx,0x1f
c0027491:	75 18                	jne    c00274ab <__fixsfsi+0x5e>
c0027493:	85 c9                	test   ecx,ecx
c0027495:	75 14                	jne    c00274ab <__fixsfsi+0x5e>
c0027497:	89 c8                	mov    eax,ecx
c0027499:	0d 00 00 00 80       	or     eax,0x80000000
c002749e:	b9 1f 00 00 00       	mov    ecx,0x1f
c00274a3:	29 d1                	sub    ecx,edx
c00274a5:	d3 e8                	shr    eax,cl
c00274a7:	f7 d8                	neg    eax
c00274a9:	eb 02                	jmp    c00274ad <__fixsfsi+0x60>
c00274ab:	31 c0                	xor    eax,eax
c00274ad:	5d                   	pop    ebp
c00274ae:	c3                   	ret    

c00274af <__fixunssfsi>:
c00274af:	55                   	push   ebp
c00274b0:	89 e5                	mov    ebp,esp
c00274b2:	53                   	push   ebx
c00274b3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00274b6:	89 d3                	mov    ebx,edx
c00274b8:	c1 fb 17             	sar    ebx,0x17
c00274bb:	83 eb 7f             	sub    ebx,0x7f
c00274be:	31 c0                	xor    eax,eax
c00274c0:	83 fb 1f             	cmp    ebx,0x1f
c00274c3:	77 18                	ja     c00274dd <__fixunssfsi+0x2e>
c00274c5:	89 d0                	mov    eax,edx
c00274c7:	c1 e0 08             	shl    eax,0x8
c00274ca:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00274cf:	0d 00 00 00 80       	or     eax,0x80000000
c00274d4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00274d9:	29 d9                	sub    ecx,ebx
c00274db:	d3 e8                	shr    eax,cl
c00274dd:	5b                   	pop    ebx
c00274de:	5d                   	pop    ebp
c00274df:	c3                   	ret    

c00274e0 <__cmpsf2>:
c00274e0:	55                   	push   ebp
c00274e1:	89 e5                	mov    ebp,esp
c00274e3:	57                   	push   edi
c00274e4:	56                   	push   esi
c00274e5:	53                   	push   ebx
c00274e6:	83 ec 24             	sub    esp,0x24
c00274e9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274ef:	e8 4f 10 00 00       	call   c0028543 <__truncdfsf2>
c00274f4:	5a                   	pop    edx
c00274f5:	59                   	pop    ecx
c00274f6:	89 c3                	mov    ebx,eax
c00274f8:	c1 e8 17             	shr    eax,0x17
c00274fb:	0f b6 f0             	movzx  esi,al
c00274fe:	89 d8                	mov    eax,ebx
c0027500:	c1 e8 1f             	shr    eax,0x1f
c0027503:	31 c6                	xor    esi,eax
c0027505:	c1 e3 08             	shl    ebx,0x8
c0027508:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002750b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002750e:	e8 30 10 00 00       	call   c0028543 <__truncdfsf2>
c0027513:	83 c4 10             	add    esp,0x10
c0027516:	89 c1                	mov    ecx,eax
c0027518:	c1 e9 17             	shr    ecx,0x17
c002751b:	0f b6 c9             	movzx  ecx,cl
c002751e:	89 c7                	mov    edi,eax
c0027520:	c1 ef 1f             	shr    edi,0x1f
c0027523:	89 ca                	mov    edx,ecx
c0027525:	31 fa                	xor    edx,edi
c0027527:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002752a:	c1 e0 08             	shl    eax,0x8
c002752d:	89 c2                	mov    edx,eax
c002752f:	89 d8                	mov    eax,ebx
c0027531:	09 d0                	or     eax,edx
c0027533:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027538:	09 f0                	or     eax,esi
c002753a:	75 08                	jne    c0027544 <__cmpsf2+0x64>
c002753c:	31 c0                	xor    eax,eax
c002753e:	39 f9                	cmp    ecx,edi
c0027540:	75 0c                	jne    c002754e <__cmpsf2+0x6e>
c0027542:	eb 29                	jmp    c002756d <__cmpsf2+0x8d>
c0027544:	b8 01 00 00 00       	mov    eax,0x1
c0027549:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002754c:	7f 1f                	jg     c002756d <__cmpsf2+0x8d>
c002754e:	83 c8 ff             	or     eax,0xffffffff
c0027551:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027554:	7c 17                	jl     c002756d <__cmpsf2+0x8d>
c0027556:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002755c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027562:	b8 01 00 00 00       	mov    eax,0x1
c0027567:	39 d3                	cmp    ebx,edx
c0027569:	77 02                	ja     c002756d <__cmpsf2+0x8d>
c002756b:	19 c0                	sbb    eax,eax
c002756d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027570:	5b                   	pop    ebx
c0027571:	5e                   	pop    esi
c0027572:	5f                   	pop    edi
c0027573:	5d                   	pop    ebp
c0027574:	c3                   	ret    

c0027575 <__eqsf2>:
c0027575:	55                   	push   ebp
c0027576:	89 e5                	mov    ebp,esp
c0027578:	83 ec 24             	sub    esp,0x24
c002757b:	6a 01                	push   0x1
c002757d:	83 ec 0c             	sub    esp,0xc
c0027580:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027583:	e8 df 10 00 00       	call   c0028667 <__extendsfdf2>
c0027588:	83 c4 10             	add    esp,0x10
c002758b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002758e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027591:	52                   	push   edx
c0027592:	50                   	push   eax
c0027593:	50                   	push   eax
c0027594:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027597:	e8 cb 10 00 00       	call   c0028667 <__extendsfdf2>
c002759c:	59                   	pop    ecx
c002759d:	59                   	pop    ecx
c002759e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275a1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275a4:	52                   	push   edx
c00275a5:	50                   	push   eax
c00275a6:	e8 35 ff ff ff       	call   c00274e0 <__cmpsf2>
c00275ab:	83 c4 20             	add    esp,0x20
c00275ae:	c9                   	leave  
c00275af:	c3                   	ret    

c00275b0 <__nesf2>:
c00275b0:	eb c3                	jmp    c0027575 <__eqsf2>

c00275b2 <__gtsf2>:
c00275b2:	55                   	push   ebp
c00275b3:	89 e5                	mov    ebp,esp
c00275b5:	83 ec 24             	sub    esp,0x24
c00275b8:	6a ff                	push   0xffffffff
c00275ba:	83 ec 0c             	sub    esp,0xc
c00275bd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275c0:	e8 a2 10 00 00       	call   c0028667 <__extendsfdf2>
c00275c5:	83 c4 10             	add    esp,0x10
c00275c8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275cb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275ce:	52                   	push   edx
c00275cf:	50                   	push   eax
c00275d0:	50                   	push   eax
c00275d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00275d4:	e8 8e 10 00 00       	call   c0028667 <__extendsfdf2>
c00275d9:	59                   	pop    ecx
c00275da:	59                   	pop    ecx
c00275db:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275de:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275e1:	52                   	push   edx
c00275e2:	50                   	push   eax
c00275e3:	e8 f8 fe ff ff       	call   c00274e0 <__cmpsf2>
c00275e8:	83 c4 20             	add    esp,0x20
c00275eb:	c9                   	leave  
c00275ec:	c3                   	ret    

c00275ed <__gesf2>:
c00275ed:	eb c3                	jmp    c00275b2 <__gtsf2>

c00275ef <__ltsf2>:
c00275ef:	eb 84                	jmp    c0027575 <__eqsf2>

c00275f1 <__lesf2>:
c00275f1:	eb 82                	jmp    c0027575 <__eqsf2>

c00275f3 <__adddf3>:
c00275f3:	55                   	push   ebp
c00275f4:	89 e5                	mov    ebp,esp
c00275f6:	57                   	push   edi
c00275f7:	56                   	push   esi
c00275f8:	53                   	push   ebx
c00275f9:	83 ec 24             	sub    esp,0x24
c00275fc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00275ff:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027602:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027605:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027608:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002760b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002760e:	89 c8                	mov    eax,ecx
c0027610:	89 ce                	mov    esi,ecx
c0027612:	c1 fe 14             	sar    esi,0x14
c0027615:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027618:	89 fb                	mov    ebx,edi
c002761a:	89 fa                	mov    edx,edi
c002761c:	c1 e2 0b             	shl    edx,0xb
c002761f:	c1 e0 0b             	shl    eax,0xb
c0027622:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027627:	c1 eb 15             	shr    ebx,0x15
c002762a:	09 d8                	or     eax,ebx
c002762c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002762f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027632:	c1 fe 14             	sar    esi,0x14
c0027635:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027638:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002763b:	89 f3                	mov    ebx,esi
c002763d:	c1 e3 0b             	shl    ebx,0xb
c0027640:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027643:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027646:	c1 e3 0b             	shl    ebx,0xb
c0027649:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002764f:	c1 ee 15             	shr    esi,0x15
c0027652:	09 f3                	or     ebx,esi
c0027654:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027657:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002765a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002765d:	0f 88 5f 02 00 00    	js     c00278c2 <__adddf3+0x2cf>
c0027663:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027666:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027669:	85 db                	test   ebx,ebx
c002766b:	0f 8e c7 00 00 00    	jle    c0027738 <__adddf3+0x145>
c0027671:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027678:	75 1a                	jne    c0027694 <__adddf3+0xa1>
c002767a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002767d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027680:	0f 84 b2 05 00 00    	je     c0027c38 <__adddf3+0x645>
c0027686:	4b                   	dec    ebx
c0027687:	75 23                	jne    c00276ac <__adddf3+0xb9>
c0027689:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002768c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002768f:	e9 99 00 00 00       	jmp    c002772d <__adddf3+0x13a>
c0027694:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027697:	f7 d6                	not    esi
c0027699:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002769f:	0f 84 93 05 00 00    	je     c0027c38 <__adddf3+0x645>
c00276a5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00276ac:	83 fb 1f             	cmp    ebx,0x1f
c00276af:	7e 42                	jle    c00276f3 <__adddf3+0x100>
c00276b1:	83 fb 3f             	cmp    ebx,0x3f
c00276b4:	0f 8f 7e 05 00 00    	jg     c0027c38 <__adddf3+0x645>
c00276ba:	83 e3 1f             	and    ebx,0x1f
c00276bd:	89 d9                	mov    ecx,ebx
c00276bf:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00276c2:	d3 ef                	shr    edi,cl
c00276c4:	31 db                	xor    ebx,ebx
c00276c6:	85 c9                	test   ecx,ecx
c00276c8:	74 15                	je     c00276df <__adddf3+0xec>
c00276ca:	be 20 00 00 00       	mov    esi,0x20
c00276cf:	29 ce                	sub    esi,ecx
c00276d1:	89 f1                	mov    ecx,esi
c00276d3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276d6:	d3 e6                	shl    esi,cl
c00276d8:	31 db                	xor    ebx,ebx
c00276da:	85 f6                	test   esi,esi
c00276dc:	0f 95 c3             	setne  bl
c00276df:	31 c9                	xor    ecx,ecx
c00276e1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00276e5:	0f 95 c1             	setne  cl
c00276e8:	09 cf                	or     edi,ecx
c00276ea:	09 fb                	or     ebx,edi
c00276ec:	01 da                	add    edx,ebx
c00276ee:	83 d0 00             	adc    eax,0x0
c00276f1:	eb 3a                	jmp    c002772d <__adddf3+0x13a>
c00276f3:	bf 20 00 00 00       	mov    edi,0x20
c00276f8:	29 df                	sub    edi,ebx
c00276fa:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276fd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027700:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027703:	d3 e6                	shl    esi,cl
c0027705:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027708:	88 d9                	mov    cl,bl
c002770a:	d3 ef                	shr    edi,cl
c002770c:	09 fe                	or     esi,edi
c002770e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027711:	88 d9                	mov    cl,bl
c0027713:	d3 ef                	shr    edi,cl
c0027715:	89 fb                	mov    ebx,edi
c0027717:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002771a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002771d:	d3 e7                	shl    edi,cl
c002771f:	85 ff                	test   edi,edi
c0027721:	0f 95 c1             	setne  cl
c0027724:	0f b6 c9             	movzx  ecx,cl
c0027727:	09 ce                	or     esi,ecx
c0027729:	01 f2                	add    edx,esi
c002772b:	11 d8                	adc    eax,ebx
c002772d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027730:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027733:	e9 52 01 00 00       	jmp    c002788a <__adddf3+0x297>
c0027738:	0f 84 d5 00 00 00    	je     c0027813 <__adddf3+0x220>
c002773e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027741:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027744:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027747:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002774a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027751:	75 20                	jne    c0027773 <__adddf3+0x180>
c0027753:	89 d6                	mov    esi,edx
c0027755:	09 c6                	or     esi,eax
c0027757:	0f 84 db 04 00 00    	je     c0027c38 <__adddf3+0x645>
c002775d:	4b                   	dec    ebx
c002775e:	75 29                	jne    c0027789 <__adddf3+0x196>
c0027760:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027763:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027766:	01 d1                	add    ecx,edx
c0027768:	11 c6                	adc    esi,eax
c002776a:	89 f0                	mov    eax,esi
c002776c:	89 ca                	mov    edx,ecx
c002776e:	e9 17 01 00 00       	jmp    c002788a <__adddf3+0x297>
c0027773:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027776:	f7 d6                	not    esi
c0027778:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002777e:	0f 84 b4 04 00 00    	je     c0027c38 <__adddf3+0x645>
c0027784:	0d 00 00 00 80       	or     eax,0x80000000
c0027789:	83 fb 1f             	cmp    ebx,0x1f
c002778c:	7e 48                	jle    c00277d6 <__adddf3+0x1e3>
c002778e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027791:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027794:	83 fb 3f             	cmp    ebx,0x3f
c0027797:	0f 8f 9b 04 00 00    	jg     c0027c38 <__adddf3+0x645>
c002779d:	83 e3 1f             	and    ebx,0x1f
c00277a0:	89 d9                	mov    ecx,ebx
c00277a2:	89 c7                	mov    edi,eax
c00277a4:	d3 ef                	shr    edi,cl
c00277a6:	31 db                	xor    ebx,ebx
c00277a8:	85 c9                	test   ecx,ecx
c00277aa:	74 12                	je     c00277be <__adddf3+0x1cb>
c00277ac:	be 20 00 00 00       	mov    esi,0x20
c00277b1:	29 ce                	sub    esi,ecx
c00277b3:	89 f1                	mov    ecx,esi
c00277b5:	d3 e0                	shl    eax,cl
c00277b7:	31 db                	xor    ebx,ebx
c00277b9:	85 c0                	test   eax,eax
c00277bb:	0f 95 c3             	setne  bl
c00277be:	31 c0                	xor    eax,eax
c00277c0:	85 d2                	test   edx,edx
c00277c2:	0f 95 c0             	setne  al
c00277c5:	09 c7                	or     edi,eax
c00277c7:	09 fb                	or     ebx,edi
c00277c9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277cc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00277cf:	01 da                	add    edx,ebx
c00277d1:	83 d6 00             	adc    esi,0x0
c00277d4:	eb 39                	jmp    c002780f <__adddf3+0x21c>
c00277d6:	be 20 00 00 00       	mov    esi,0x20
c00277db:	29 de                	sub    esi,ebx
c00277dd:	89 c7                	mov    edi,eax
c00277df:	89 f1                	mov    ecx,esi
c00277e1:	d3 e7                	shl    edi,cl
c00277e3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00277e6:	89 d7                	mov    edi,edx
c00277e8:	88 d9                	mov    cl,bl
c00277ea:	d3 ef                	shr    edi,cl
c00277ec:	89 f9                	mov    ecx,edi
c00277ee:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277f1:	09 cf                	or     edi,ecx
c00277f3:	88 d9                	mov    cl,bl
c00277f5:	d3 e8                	shr    eax,cl
c00277f7:	89 f1                	mov    ecx,esi
c00277f9:	d3 e2                	shl    edx,cl
c00277fb:	85 d2                	test   edx,edx
c00277fd:	0f 95 c2             	setne  dl
c0027800:	0f b6 d2             	movzx  edx,dl
c0027803:	09 d7                	or     edi,edx
c0027805:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027808:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002780b:	01 fa                	add    edx,edi
c002780d:	11 c6                	adc    esi,eax
c002780f:	89 f0                	mov    eax,esi
c0027811:	eb 77                	jmp    c002788a <__adddf3+0x297>
c0027813:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027816:	46                   	inc    esi
c0027817:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002781a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027820:	75 41                	jne    c0027863 <__adddf3+0x270>
c0027822:	89 d3                	mov    ebx,edx
c0027824:	09 c3                	or     ebx,eax
c0027826:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002782d:	75 27                	jne    c0027856 <__adddf3+0x263>
c002782f:	85 db                	test   ebx,ebx
c0027831:	0f 84 fb 03 00 00    	je     c0027c32 <__adddf3+0x63f>
c0027837:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002783a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002783d:	0f 84 f5 03 00 00    	je     c0027c38 <__adddf3+0x645>
c0027843:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027846:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027849:	85 c0                	test   eax,eax
c002784b:	0f 89 91 03 00 00    	jns    c0027be2 <__adddf3+0x5ef>
c0027851:	e9 85 03 00 00       	jmp    c0027bdb <__adddf3+0x5e8>
c0027856:	85 db                	test   ebx,ebx
c0027858:	0f 85 da 03 00 00    	jne    c0027c38 <__adddf3+0x645>
c002785e:	e9 cf 03 00 00       	jmp    c0027c32 <__adddf3+0x63f>
c0027863:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027866:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027869:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002786c:	f7 d1                	not    ecx
c002786e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027874:	0f 84 70 03 00 00    	je     c0027bea <__adddf3+0x5f7>
c002787a:	d1 ea                	shr    edx,1
c002787c:	89 c1                	mov    ecx,eax
c002787e:	c1 e1 1f             	shl    ecx,0x1f
c0027881:	09 ca                	or     edx,ecx
c0027883:	d1 e8                	shr    eax,1
c0027885:	e9 6f 03 00 00       	jmp    c0027bf9 <__adddf3+0x606>
c002788a:	85 c0                	test   eax,eax
c002788c:	0f 89 67 03 00 00    	jns    c0027bf9 <__adddf3+0x606>
c0027892:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027895:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027898:	f7 d1                	not    ecx
c002789a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00278a0:	0f 84 44 03 00 00    	je     c0027bea <__adddf3+0x5f7>
c00278a6:	89 d1                	mov    ecx,edx
c00278a8:	d1 e9                	shr    ecx,1
c00278aa:	83 e2 01             	and    edx,0x1
c00278ad:	09 ca                	or     edx,ecx
c00278af:	89 c1                	mov    ecx,eax
c00278b1:	c1 e1 1f             	shl    ecx,0x1f
c00278b4:	09 ca                	or     edx,ecx
c00278b6:	d1 e8                	shr    eax,1
c00278b8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00278bd:	e9 37 03 00 00       	jmp    c0027bf9 <__adddf3+0x606>
c00278c2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00278c5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00278cb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00278ce:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00278d1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00278d7:	29 de                	sub    esi,ebx
c00278d9:	85 f6                	test   esi,esi
c00278db:	0f 8e bd 00 00 00    	jle    c002799e <__adddf3+0x3ab>
c00278e1:	85 db                	test   ebx,ebx
c00278e3:	75 17                	jne    c00278fc <__adddf3+0x309>
c00278e5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00278e8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00278eb:	0f 84 47 03 00 00    	je     c0027c38 <__adddf3+0x645>
c00278f1:	4e                   	dec    esi
c00278f2:	75 20                	jne    c0027914 <__adddf3+0x321>
c00278f4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00278f7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00278fa:	eb 5b                	jmp    c0027957 <__adddf3+0x364>
c00278fc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00278ff:	f7 d3                	not    ebx
c0027901:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027907:	0f 84 2b 03 00 00    	je     c0027c38 <__adddf3+0x645>
c002790d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027914:	83 fe 1f             	cmp    esi,0x1f
c0027917:	7e 49                	jle    c0027962 <__adddf3+0x36f>
c0027919:	83 fe 3f             	cmp    esi,0x3f
c002791c:	0f 8f 16 03 00 00    	jg     c0027c38 <__adddf3+0x645>
c0027922:	83 e6 1f             	and    esi,0x1f
c0027925:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027928:	89 f1                	mov    ecx,esi
c002792a:	d3 ef                	shr    edi,cl
c002792c:	31 db                	xor    ebx,ebx
c002792e:	85 f6                	test   esi,esi
c0027930:	74 13                	je     c0027945 <__adddf3+0x352>
c0027932:	b9 20 00 00 00       	mov    ecx,0x20
c0027937:	29 f1                	sub    ecx,esi
c0027939:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002793c:	d3 e6                	shl    esi,cl
c002793e:	31 db                	xor    ebx,ebx
c0027940:	85 f6                	test   esi,esi
c0027942:	0f 95 c3             	setne  bl
c0027945:	31 c9                	xor    ecx,ecx
c0027947:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002794b:	0f 95 c1             	setne  cl
c002794e:	09 cf                	or     edi,ecx
c0027950:	09 fb                	or     ebx,edi
c0027952:	29 da                	sub    edx,ebx
c0027954:	83 d8 00             	sbb    eax,0x0
c0027957:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002795a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002795d:	e9 aa 01 00 00       	jmp    c0027b0c <__adddf3+0x519>
c0027962:	bf 20 00 00 00       	mov    edi,0x20
c0027967:	29 f7                	sub    edi,esi
c0027969:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002796c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002796f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027972:	d3 e3                	shl    ebx,cl
c0027974:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027977:	89 f1                	mov    ecx,esi
c0027979:	d3 ef                	shr    edi,cl
c002797b:	09 fb                	or     ebx,edi
c002797d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027980:	89 f1                	mov    ecx,esi
c0027982:	d3 ef                	shr    edi,cl
c0027984:	89 fe                	mov    esi,edi
c0027986:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027989:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002798c:	d3 e7                	shl    edi,cl
c002798e:	85 ff                	test   edi,edi
c0027990:	0f 95 c1             	setne  cl
c0027993:	0f b6 c9             	movzx  ecx,cl
c0027996:	09 cb                	or     ebx,ecx
c0027998:	29 da                	sub    edx,ebx
c002799a:	19 f0                	sbb    eax,esi
c002799c:	eb b9                	jmp    c0027957 <__adddf3+0x364>
c002799e:	0f 84 cd 00 00 00    	je     c0027a71 <__adddf3+0x47e>
c00279a4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00279a7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279aa:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279ad:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279b1:	75 1b                	jne    c00279ce <__adddf3+0x3db>
c00279b3:	89 d6                	mov    esi,edx
c00279b5:	09 c6                	or     esi,eax
c00279b7:	0f 84 7b 02 00 00    	je     c0027c38 <__adddf3+0x645>
c00279bd:	4b                   	dec    ebx
c00279be:	75 24                	jne    c00279e4 <__adddf3+0x3f1>
c00279c0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279c3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00279c6:	29 d1                	sub    ecx,edx
c00279c8:	19 c6                	sbb    esi,eax
c00279ca:	89 ca                	mov    edx,ecx
c00279cc:	eb 61                	jmp    c0027a2f <__adddf3+0x43c>
c00279ce:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00279d1:	f7 d6                	not    esi
c00279d3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00279d9:	0f 84 59 02 00 00    	je     c0027c38 <__adddf3+0x645>
c00279df:	0d 00 00 00 80       	or     eax,0x80000000
c00279e4:	83 fb 1f             	cmp    ebx,0x1f
c00279e7:	7e 4d                	jle    c0027a36 <__adddf3+0x443>
c00279e9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279ec:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279ef:	83 fb 3f             	cmp    ebx,0x3f
c00279f2:	0f 8f 40 02 00 00    	jg     c0027c38 <__adddf3+0x645>
c00279f8:	83 e3 1f             	and    ebx,0x1f
c00279fb:	89 d9                	mov    ecx,ebx
c00279fd:	89 c7                	mov    edi,eax
c00279ff:	d3 ef                	shr    edi,cl
c0027a01:	31 db                	xor    ebx,ebx
c0027a03:	85 c9                	test   ecx,ecx
c0027a05:	74 12                	je     c0027a19 <__adddf3+0x426>
c0027a07:	be 20 00 00 00       	mov    esi,0x20
c0027a0c:	29 ce                	sub    esi,ecx
c0027a0e:	89 f1                	mov    ecx,esi
c0027a10:	d3 e0                	shl    eax,cl
c0027a12:	31 db                	xor    ebx,ebx
c0027a14:	85 c0                	test   eax,eax
c0027a16:	0f 95 c3             	setne  bl
c0027a19:	31 c0                	xor    eax,eax
c0027a1b:	85 d2                	test   edx,edx
c0027a1d:	0f 95 c0             	setne  al
c0027a20:	09 c7                	or     edi,eax
c0027a22:	09 fb                	or     ebx,edi
c0027a24:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a27:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a2a:	29 da                	sub    edx,ebx
c0027a2c:	83 de 00             	sbb    esi,0x0
c0027a2f:	89 f0                	mov    eax,esi
c0027a31:	e9 d6 00 00 00       	jmp    c0027b0c <__adddf3+0x519>
c0027a36:	be 20 00 00 00       	mov    esi,0x20
c0027a3b:	29 de                	sub    esi,ebx
c0027a3d:	89 c7                	mov    edi,eax
c0027a3f:	89 f1                	mov    ecx,esi
c0027a41:	d3 e7                	shl    edi,cl
c0027a43:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a46:	89 d7                	mov    edi,edx
c0027a48:	88 d9                	mov    cl,bl
c0027a4a:	d3 ef                	shr    edi,cl
c0027a4c:	89 f9                	mov    ecx,edi
c0027a4e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a51:	09 cf                	or     edi,ecx
c0027a53:	88 d9                	mov    cl,bl
c0027a55:	d3 e8                	shr    eax,cl
c0027a57:	89 f1                	mov    ecx,esi
c0027a59:	d3 e2                	shl    edx,cl
c0027a5b:	85 d2                	test   edx,edx
c0027a5d:	0f 95 c2             	setne  dl
c0027a60:	0f b6 d2             	movzx  edx,dl
c0027a63:	09 d7                	or     edi,edx
c0027a65:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a68:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a6b:	29 fa                	sub    edx,edi
c0027a6d:	19 c6                	sbb    esi,eax
c0027a6f:	eb be                	jmp    c0027a2f <__adddf3+0x43c>
c0027a71:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027a74:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027a77:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027a7d:	75 6a                	jne    c0027ae9 <__adddf3+0x4f6>
c0027a7f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a83:	75 58                	jne    c0027add <__adddf3+0x4ea>
c0027a85:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027a88:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027a8b:	89 d6                	mov    esi,edx
c0027a8d:	09 c6                	or     esi,eax
c0027a8f:	75 17                	jne    c0027aa8 <__adddf3+0x4b5>
c0027a91:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a94:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a97:	85 db                	test   ebx,ebx
c0027a99:	0f 85 99 01 00 00    	jne    c0027c38 <__adddf3+0x645>
c0027a9f:	31 ff                	xor    edi,edi
c0027aa1:	31 c9                	xor    ecx,ecx
c0027aa3:	e9 90 01 00 00       	jmp    c0027c38 <__adddf3+0x645>
c0027aa8:	85 db                	test   ebx,ebx
c0027aaa:	0f 84 88 01 00 00    	je     c0027c38 <__adddf3+0x645>
c0027ab0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027ab3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027ab6:	85 c0                	test   eax,eax
c0027ab8:	79 10                	jns    c0027aca <__adddf3+0x4d7>
c0027aba:	31 c9                	xor    ecx,ecx
c0027abc:	f7 da                	neg    edx
c0027abe:	0f 95 c1             	setne  cl
c0027ac1:	01 c8                	add    eax,ecx
c0027ac3:	f7 d8                	neg    eax
c0027ac5:	e9 2f 01 00 00       	jmp    c0027bf9 <__adddf3+0x606>
c0027aca:	31 ff                	xor    edi,edi
c0027acc:	31 c9                	xor    ecx,ecx
c0027ace:	89 c3                	mov    ebx,eax
c0027ad0:	09 d3                	or     ebx,edx
c0027ad2:	0f 84 60 01 00 00    	je     c0027c38 <__adddf3+0x645>
c0027ad8:	e9 05 01 00 00       	jmp    c0027be2 <__adddf3+0x5ef>
c0027add:	31 ff                	xor    edi,edi
c0027adf:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027ae4:	e9 4f 01 00 00       	jmp    c0027c38 <__adddf3+0x645>
c0027ae9:	89 c1                	mov    ecx,eax
c0027aeb:	89 d0                	mov    eax,edx
c0027aed:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027af0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027af3:	89 ca                	mov    edx,ecx
c0027af5:	85 c9                	test   ecx,ecx
c0027af7:	79 2c                	jns    c0027b25 <__adddf3+0x532>
c0027af9:	31 c9                	xor    ecx,ecx
c0027afb:	f7 d8                	neg    eax
c0027afd:	0f 95 c1             	setne  cl
c0027b00:	01 ca                	add    edx,ecx
c0027b02:	f7 da                	neg    edx
c0027b04:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027b07:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027b0a:	eb 19                	jmp    c0027b25 <__adddf3+0x532>
c0027b0c:	85 c0                	test   eax,eax
c0027b0e:	0f 89 e5 00 00 00    	jns    c0027bf9 <__adddf3+0x606>
c0027b14:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b19:	89 c1                	mov    ecx,eax
c0027b1b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b1e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027b21:	89 d0                	mov    eax,edx
c0027b23:	89 ca                	mov    edx,ecx
c0027b25:	85 d2                	test   edx,edx
c0027b27:	74 59                	je     c0027b82 <__adddf3+0x58f>
c0027b29:	0f bd da             	bsr    ebx,edx
c0027b2c:	83 f3 1f             	xor    ebx,0x1f
c0027b2f:	88 d9                	mov    cl,bl
c0027b31:	d3 e2                	shl    edx,cl
c0027b33:	bf 20 00 00 00       	mov    edi,0x20
c0027b38:	89 f9                	mov    ecx,edi
c0027b3a:	29 d9                	sub    ecx,ebx
c0027b3c:	89 c6                	mov    esi,eax
c0027b3e:	d3 ee                	shr    esi,cl
c0027b40:	09 d6                	or     esi,edx
c0027b42:	88 d9                	mov    cl,bl
c0027b44:	d3 e0                	shl    eax,cl
c0027b46:	89 c2                	mov    edx,eax
c0027b48:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b4b:	25 ff 07 00 00       	and    eax,0x7ff
c0027b50:	39 d8                	cmp    eax,ebx
c0027b52:	7f 22                	jg     c0027b76 <__adddf3+0x583>
c0027b54:	29 c3                	sub    ebx,eax
c0027b56:	43                   	inc    ebx
c0027b57:	88 d9                	mov    cl,bl
c0027b59:	d3 ea                	shr    edx,cl
c0027b5b:	29 df                	sub    edi,ebx
c0027b5d:	89 f9                	mov    ecx,edi
c0027b5f:	89 f0                	mov    eax,esi
c0027b61:	d3 e0                	shl    eax,cl
c0027b63:	09 c2                	or     edx,eax
c0027b65:	89 f0                	mov    eax,esi
c0027b67:	88 d9                	mov    cl,bl
c0027b69:	d3 e8                	shr    eax,cl
c0027b6b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b6e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027b74:	eb 6f                	jmp    c0027be5 <__adddf3+0x5f2>
c0027b76:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b79:	29 d8                	sub    eax,ebx
c0027b7b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b7e:	89 f0                	mov    eax,esi
c0027b80:	eb 59                	jmp    c0027bdb <__adddf3+0x5e8>
c0027b82:	85 c0                	test   eax,eax
c0027b84:	74 6a                	je     c0027bf0 <__adddf3+0x5fd>
c0027b86:	0f bd c8             	bsr    ecx,eax
c0027b89:	83 f1 1f             	xor    ecx,0x1f
c0027b8c:	d3 e0                	shl    eax,cl
c0027b8e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b91:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b97:	83 c1 20             	add    ecx,0x20
c0027b9a:	39 cb                	cmp    ebx,ecx
c0027b9c:	7f 35                	jg     c0027bd3 <__adddf3+0x5e0>
c0027b9e:	29 d9                	sub    ecx,ebx
c0027ba0:	8d 71 01             	lea    esi,[ecx+0x1]
c0027ba3:	83 fe 1f             	cmp    esi,0x1f
c0027ba6:	7e 09                	jle    c0027bb1 <__adddf3+0x5be>
c0027ba8:	83 e9 1f             	sub    ecx,0x1f
c0027bab:	d3 e8                	shr    eax,cl
c0027bad:	89 c3                	mov    ebx,eax
c0027baf:	eb 11                	jmp    c0027bc2 <__adddf3+0x5cf>
c0027bb1:	b9 20 00 00 00       	mov    ecx,0x20
c0027bb6:	29 f1                	sub    ecx,esi
c0027bb8:	89 c3                	mov    ebx,eax
c0027bba:	d3 e3                	shl    ebx,cl
c0027bbc:	89 f1                	mov    ecx,esi
c0027bbe:	d3 e8                	shr    eax,cl
c0027bc0:	89 c2                	mov    edx,eax
c0027bc2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bc5:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027bca:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bcd:	89 d0                	mov    eax,edx
c0027bcf:	89 da                	mov    edx,ebx
c0027bd1:	eb 26                	jmp    c0027bf9 <__adddf3+0x606>
c0027bd3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027bd6:	29 cf                	sub    edi,ecx
c0027bd8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027bdb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027be0:	eb 17                	jmp    c0027bf9 <__adddf3+0x606>
c0027be2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027be5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027be8:	eb 0f                	jmp    c0027bf9 <__adddf3+0x606>
c0027bea:	31 d2                	xor    edx,edx
c0027bec:	31 c0                	xor    eax,eax
c0027bee:	eb 09                	jmp    c0027bf9 <__adddf3+0x606>
c0027bf0:	89 c2                	mov    edx,eax
c0027bf2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027bf9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027bfc:	c1 e1 14             	shl    ecx,0x14
c0027bff:	89 c3                	mov    ebx,eax
c0027c01:	c1 eb 0b             	shr    ebx,0xb
c0027c04:	09 d9                	or     ecx,ebx
c0027c06:	89 d3                	mov    ebx,edx
c0027c08:	c1 eb 0b             	shr    ebx,0xb
c0027c0b:	c1 e0 15             	shl    eax,0x15
c0027c0e:	09 d8                	or     eax,ebx
c0027c10:	89 c7                	mov    edi,eax
c0027c12:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027c18:	0f 95 c0             	setne  al
c0027c1b:	89 c6                	mov    esi,eax
c0027c1d:	09 f3                	or     ebx,esi
c0027c1f:	83 e3 01             	and    ebx,0x1
c0027c22:	c1 ea 0a             	shr    edx,0xa
c0027c25:	21 da                	and    edx,ebx
c0027c27:	89 f8                	mov    eax,edi
c0027c29:	01 d0                	add    eax,edx
c0027c2b:	83 d1 00             	adc    ecx,0x0
c0027c2e:	89 c7                	mov    edi,eax
c0027c30:	eb 06                	jmp    c0027c38 <__adddf3+0x645>
c0027c32:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027c35:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027c38:	89 f8                	mov    eax,edi
c0027c3a:	89 ca                	mov    edx,ecx
c0027c3c:	83 c4 24             	add    esp,0x24
c0027c3f:	5b                   	pop    ebx
c0027c40:	5e                   	pop    esi
c0027c41:	5f                   	pop    edi
c0027c42:	5d                   	pop    ebp
c0027c43:	c3                   	ret    

c0027c44 <__subdf3>:
c0027c44:	55                   	push   ebp
c0027c45:	89 e5                	mov    ebp,esp
c0027c47:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c4a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027c4d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c53:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027c56:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027c59:	5d                   	pop    ebp
c0027c5a:	e9 94 f9 ff ff       	jmp    c00275f3 <__adddf3>

c0027c5f <__negdf2>:
c0027c5f:	55                   	push   ebp
c0027c60:	89 e5                	mov    ebp,esp
c0027c62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027c65:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c68:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c6e:	5d                   	pop    ebp
c0027c6f:	c3                   	ret    

c0027c70 <__muldf3>:
c0027c70:	55                   	push   ebp
c0027c71:	89 e5                	mov    ebp,esp
c0027c73:	57                   	push   edi
c0027c74:	56                   	push   esi
c0027c75:	53                   	push   ebx
c0027c76:	83 ec 24             	sub    esp,0x24
c0027c79:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027c7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027c7f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c82:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c85:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027c88:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027c8b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c8e:	89 c8                	mov    eax,ecx
c0027c90:	c1 f8 14             	sar    eax,0x14
c0027c93:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c96:	89 f8                	mov    eax,edi
c0027c98:	89 fb                	mov    ebx,edi
c0027c9a:	c1 e3 0b             	shl    ebx,0xb
c0027c9d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027ca0:	c1 e1 0b             	shl    ecx,0xb
c0027ca3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027ca9:	c1 e8 15             	shr    eax,0x15
c0027cac:	09 c1                	or     ecx,eax
c0027cae:	89 d6                	mov    esi,edx
c0027cb0:	89 d0                	mov    eax,edx
c0027cb2:	c1 f8 14             	sar    eax,0x14
c0027cb5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027cb8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027cbb:	89 c3                	mov    ebx,eax
c0027cbd:	c1 e3 0b             	shl    ebx,0xb
c0027cc0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027cc3:	c1 e6 0b             	shl    esi,0xb
c0027cc6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027ccc:	c1 e8 15             	shr    eax,0x15
c0027ccf:	09 c6                	or     esi,eax
c0027cd1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027cd4:	25 ff 07 00 00       	and    eax,0x7ff
c0027cd9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027cdc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cdf:	25 ff 07 00 00       	and    eax,0x7ff
c0027ce4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027ce7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027cea:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027ced:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027cf4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027cf7:	40                   	inc    eax
c0027cf8:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cfd:	0f 85 8d 00 00 00    	jne    c0027d90 <__muldf3+0x120>
c0027d03:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d06:	09 c8                	or     eax,ecx
c0027d08:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027d0c:	74 44                	je     c0027d52 <__muldf3+0xe2>
c0027d0e:	85 c0                	test   eax,eax
c0027d10:	0f 85 31 02 00 00    	jne    c0027f47 <__muldf3+0x2d7>
c0027d16:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d19:	40                   	inc    eax
c0027d1a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d1f:	75 13                	jne    c0027d34 <__muldf3+0xc4>
c0027d21:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027d24:	09 f1                	or     ecx,esi
c0027d26:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d2a:	74 22                	je     c0027d4e <__muldf3+0xde>
c0027d2c:	85 c9                	test   ecx,ecx
c0027d2e:	0f 85 0d 02 00 00    	jne    c0027f41 <__muldf3+0x2d1>
c0027d34:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027d38:	0f 89 09 02 00 00    	jns    c0027f47 <__muldf3+0x2d7>
c0027d3e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027d41:	05 00 00 00 80       	add    eax,0x80000000
c0027d46:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d49:	e9 f9 01 00 00       	jmp    c0027f47 <__muldf3+0x2d7>
c0027d4e:	85 c9                	test   ecx,ecx
c0027d50:	eb 2e                	jmp    c0027d80 <__muldf3+0x110>
c0027d52:	85 c0                	test   eax,eax
c0027d54:	74 20                	je     c0027d76 <__muldf3+0x106>
c0027d56:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027d59:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d5c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d5f:	c1 ef 1f             	shr    edi,0x1f
c0027d62:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027d65:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027d68:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d6b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d6e:	09 f9                	or     ecx,edi
c0027d70:	78 1e                	js     c0027d90 <__muldf3+0x120>
c0027d72:	89 c3                	mov    ebx,eax
c0027d74:	eb e0                	jmp    c0027d56 <__muldf3+0xe6>
c0027d76:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d79:	f7 d0                	not    eax
c0027d7b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027d80:	75 b2                	jne    c0027d34 <__muldf3+0xc4>
c0027d82:	31 ff                	xor    edi,edi
c0027d84:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027d8b:	e9 b7 01 00 00       	jmp    c0027f47 <__muldf3+0x2d7>
c0027d90:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d93:	40                   	inc    eax
c0027d94:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d99:	75 57                	jne    c0027df2 <__muldf3+0x182>
c0027d9b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027d9e:	09 f0                	or     eax,esi
c0027da0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027da4:	74 23                	je     c0027dc9 <__muldf3+0x159>
c0027da6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027daa:	0f 89 91 01 00 00    	jns    c0027f41 <__muldf3+0x2d1>
c0027db0:	85 c0                	test   eax,eax
c0027db2:	0f 85 89 01 00 00    	jne    c0027f41 <__muldf3+0x2d1>
c0027db8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027dbb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027dc1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027dc4:	e9 7e 01 00 00       	jmp    c0027f47 <__muldf3+0x2d7>
c0027dc9:	85 c0                	test   eax,eax
c0027dcb:	75 0c                	jne    c0027dd9 <__muldf3+0x169>
c0027dcd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027dd1:	0f 89 6a 01 00 00    	jns    c0027f41 <__muldf3+0x2d1>
c0027dd7:	eb df                	jmp    c0027db8 <__muldf3+0x148>
c0027dd9:	01 f6                	add    esi,esi
c0027ddb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027dde:	c1 ea 1f             	shr    edx,0x1f
c0027de1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027de4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027de7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027dea:	09 d6                	or     esi,edx
c0027dec:	78 04                	js     c0027df2 <__muldf3+0x182>
c0027dee:	89 c3                	mov    ebx,eax
c0027df0:	eb e7                	jmp    c0027dd9 <__muldf3+0x169>
c0027df2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027df8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027dfe:	89 c8                	mov    eax,ecx
c0027e00:	f7 e6                	mul    esi
c0027e02:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027e05:	89 c7                	mov    edi,eax
c0027e07:	89 c8                	mov    eax,ecx
c0027e09:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027e0c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027e0f:	89 c1                	mov    ecx,eax
c0027e11:	89 f0                	mov    eax,esi
c0027e13:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027e16:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027e19:	89 c6                	mov    esi,eax
c0027e1b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e1e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027e21:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027e24:	31 c0                	xor    eax,eax
c0027e26:	01 f1                	add    ecx,esi
c0027e28:	0f 92 c0             	setb   al
c0027e2b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027e2e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027e31:	83 d6 00             	adc    esi,0x0
c0027e34:	01 c7                	add    edi,eax
c0027e36:	83 d6 00             	adc    esi,0x0
c0027e39:	01 ca                	add    edx,ecx
c0027e3b:	0f 92 c1             	setb   cl
c0027e3e:	0f b6 c9             	movzx  ecx,cl
c0027e41:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027e44:	83 d6 00             	adc    esi,0x0
c0027e47:	01 cf                	add    edi,ecx
c0027e49:	83 d6 00             	adc    esi,0x0
c0027e4c:	31 c9                	xor    ecx,ecx
c0027e4e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027e51:	0f 95 c1             	setne  cl
c0027e54:	09 cf                	or     edi,ecx
c0027e56:	85 f6                	test   esi,esi
c0027e58:	78 0c                	js     c0027e66 <__muldf3+0x1f6>
c0027e5a:	01 f6                	add    esi,esi
c0027e5c:	89 f8                	mov    eax,edi
c0027e5e:	c1 e8 1f             	shr    eax,0x1f
c0027e61:	09 c6                	or     esi,eax
c0027e63:	01 ff                	add    edi,edi
c0027e65:	4b                   	dec    ebx
c0027e66:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027e6c:	0f 8f 85 00 00 00    	jg     c0027ef7 <__muldf3+0x287>
c0027e72:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027e78:	85 db                	test   ebx,ebx
c0027e7a:	0f 8f 84 00 00 00    	jg     c0027f04 <__muldf3+0x294>
c0027e80:	83 fb cc             	cmp    ebx,0xffffffcc
c0027e83:	7c 79                	jl     c0027efe <__muldf3+0x28e>
c0027e85:	ba 01 00 00 00       	mov    edx,0x1
c0027e8a:	29 da                	sub    edx,ebx
c0027e8c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e92:	83 fa 1f             	cmp    edx,0x1f
c0027e95:	7e 30                	jle    c0027ec7 <__muldf3+0x257>
c0027e97:	83 fa 20             	cmp    edx,0x20
c0027e9a:	75 0b                	jne    c0027ea7 <__muldf3+0x237>
c0027e9c:	31 c0                	xor    eax,eax
c0027e9e:	85 ff                	test   edi,edi
c0027ea0:	0f 95 c0             	setne  al
c0027ea3:	89 c7                	mov    edi,eax
c0027ea5:	eb 1a                	jmp    c0027ec1 <__muldf3+0x251>
c0027ea7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027eaa:	89 f0                	mov    eax,esi
c0027eac:	d3 e0                	shl    eax,cl
c0027eae:	09 f8                	or     eax,edi
c0027eb0:	0f 95 c0             	setne  al
c0027eb3:	0f b6 c0             	movzx  eax,al
c0027eb6:	89 c7                	mov    edi,eax
c0027eb8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027ebd:	29 d9                	sub    ecx,ebx
c0027ebf:	d3 ee                	shr    esi,cl
c0027ec1:	09 f7                	or     edi,esi
c0027ec3:	31 db                	xor    ebx,ebx
c0027ec5:	eb 3b                	jmp    c0027f02 <__muldf3+0x292>
c0027ec7:	83 c3 1f             	add    ebx,0x1f
c0027eca:	89 f0                	mov    eax,esi
c0027ecc:	88 d9                	mov    cl,bl
c0027ece:	d3 e0                	shl    eax,cl
c0027ed0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ed3:	89 f8                	mov    eax,edi
c0027ed5:	88 d1                	mov    cl,dl
c0027ed7:	d3 e8                	shr    eax,cl
c0027ed9:	89 c1                	mov    ecx,eax
c0027edb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027ede:	09 c8                	or     eax,ecx
c0027ee0:	88 d9                	mov    cl,bl
c0027ee2:	d3 e7                	shl    edi,cl
c0027ee4:	31 db                	xor    ebx,ebx
c0027ee6:	85 ff                	test   edi,edi
c0027ee8:	0f 95 c3             	setne  bl
c0027eeb:	89 df                	mov    edi,ebx
c0027eed:	09 c7                	or     edi,eax
c0027eef:	88 d1                	mov    cl,dl
c0027ef1:	d3 ee                	shr    esi,cl
c0027ef3:	31 db                	xor    ebx,ebx
c0027ef5:	eb 0d                	jmp    c0027f04 <__muldf3+0x294>
c0027ef7:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027efc:	eb 02                	jmp    c0027f00 <__muldf3+0x290>
c0027efe:	31 db                	xor    ebx,ebx
c0027f00:	31 ff                	xor    edi,edi
c0027f02:	31 f6                	xor    esi,esi
c0027f04:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f07:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027f0a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027f0f:	09 c3                	or     ebx,eax
c0027f11:	c1 e3 14             	shl    ebx,0x14
c0027f14:	89 f0                	mov    eax,esi
c0027f16:	c1 e8 0b             	shr    eax,0xb
c0027f19:	09 c3                	or     ebx,eax
c0027f1b:	89 f8                	mov    eax,edi
c0027f1d:	c1 e8 0b             	shr    eax,0xb
c0027f20:	c1 e6 15             	shl    esi,0x15
c0027f23:	09 c6                	or     esi,eax
c0027f25:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027f2b:	0f 95 c1             	setne  cl
c0027f2e:	09 c8                	or     eax,ecx
c0027f30:	83 e0 01             	and    eax,0x1
c0027f33:	c1 ef 0a             	shr    edi,0xa
c0027f36:	21 c7                	and    edi,eax
c0027f38:	01 f7                	add    edi,esi
c0027f3a:	83 d3 00             	adc    ebx,0x0
c0027f3d:	89 da                	mov    edx,ebx
c0027f3f:	eb 03                	jmp    c0027f44 <__muldf3+0x2d4>
c0027f41:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027f44:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027f47:	89 f8                	mov    eax,edi
c0027f49:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027f4c:	83 c4 24             	add    esp,0x24
c0027f4f:	5b                   	pop    ebx
c0027f50:	5e                   	pop    esi
c0027f51:	5f                   	pop    edi
c0027f52:	5d                   	pop    ebp
c0027f53:	c3                   	ret    

c0027f54 <__divdf3>:
c0027f54:	55                   	push   ebp
c0027f55:	89 e5                	mov    ebp,esp
c0027f57:	57                   	push   edi
c0027f58:	56                   	push   esi
c0027f59:	53                   	push   ebx
c0027f5a:	83 ec 2c             	sub    esp,0x2c
c0027f5d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027f60:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027f63:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027f66:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027f69:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027f6c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027f6f:	89 ce                	mov    esi,ecx
c0027f71:	89 c8                	mov    eax,ecx
c0027f73:	c1 f8 14             	sar    eax,0x14
c0027f76:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027f79:	89 f8                	mov    eax,edi
c0027f7b:	89 fb                	mov    ebx,edi
c0027f7d:	c1 e3 0b             	shl    ebx,0xb
c0027f80:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027f83:	c1 e6 0b             	shl    esi,0xb
c0027f86:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027f8c:	c1 e8 15             	shr    eax,0x15
c0027f8f:	09 c6                	or     esi,eax
c0027f91:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027f94:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027f97:	89 c2                	mov    edx,eax
c0027f99:	c1 fa 14             	sar    edx,0x14
c0027f9c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027f9f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027fa2:	89 de                	mov    esi,ebx
c0027fa4:	c1 e6 0b             	shl    esi,0xb
c0027fa7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027faa:	c1 e0 0b             	shl    eax,0xb
c0027fad:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027fb2:	c1 eb 15             	shr    ebx,0x15
c0027fb5:	09 d8                	or     eax,ebx
c0027fb7:	89 c2                	mov    edx,eax
c0027fb9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027fbc:	25 ff 07 00 00       	and    eax,0x7ff
c0027fc1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027fc4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027fc7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027fcd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027fd0:	29 d8                	sub    eax,ebx
c0027fd2:	05 ff 03 00 00       	add    eax,0x3ff
c0027fd7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027fda:	46                   	inc    esi
c0027fdb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027fe1:	0f 85 a5 00 00 00    	jne    c002808c <__divdf3+0x138>
c0027fe7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027fea:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027fed:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027ff1:	74 2a                	je     c002801d <__divdf3+0xc9>
c0027ff3:	85 f6                	test   esi,esi
c0027ff5:	0f 85 cc 02 00 00    	jne    c00282c7 <__divdf3+0x373>
c0027ffb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ffe:	40                   	inc    eax
c0027fff:	a9 fe 07 00 00       	test   eax,0x7fe
c0028004:	75 26                	jne    c002802c <__divdf3+0xd8>
c0028006:	85 db                	test   ebx,ebx
c0028008:	74 22                	je     c002802c <__divdf3+0xd8>
c002800a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002800d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028010:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028013:	09 d0                	or     eax,edx
c0028015:	0f 85 ac 02 00 00    	jne    c00282c7 <__divdf3+0x373>
c002801b:	eb 63                	jmp    c0028080 <__divdf3+0x12c>
c002801d:	85 f6                	test   esi,esi
c002801f:	75 22                	jne    c0028043 <__divdf3+0xef>
c0028021:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028024:	40                   	inc    eax
c0028025:	a9 fe 07 00 00       	test   eax,0x7fe
c002802a:	74 36                	je     c0028062 <__divdf3+0x10e>
c002802c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028030:	0f 89 91 02 00 00    	jns    c00282c7 <__divdf3+0x373>
c0028036:	89 f8                	mov    eax,edi
c0028038:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002803e:	e9 80 02 00 00       	jmp    c00282c3 <__divdf3+0x36f>
c0028043:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028046:	01 f6                	add    esi,esi
c0028048:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002804b:	c1 ef 1f             	shr    edi,0x1f
c002804e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028051:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0028054:	8d 48 ff             	lea    ecx,[eax-0x1]
c0028057:	09 f7                	or     edi,esi
c0028059:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002805c:	78 2e                	js     c002808c <__divdf3+0x138>
c002805e:	89 c8                	mov    eax,ecx
c0028060:	eb e1                	jmp    c0028043 <__divdf3+0xef>
c0028062:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028065:	09 d0                	or     eax,edx
c0028067:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002806b:	74 0f                	je     c002807c <__divdf3+0x128>
c002806d:	85 c0                	test   eax,eax
c002806f:	74 bb                	je     c002802c <__divdf3+0xd8>
c0028071:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028074:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028077:	e9 4b 02 00 00       	jmp    c00282c7 <__divdf3+0x373>
c002807c:	85 c0                	test   eax,eax
c002807e:	75 ac                	jne    c002802c <__divdf3+0xd8>
c0028080:	31 ff                	xor    edi,edi
c0028082:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0028087:	e9 3b 02 00 00       	jmp    c00282c7 <__divdf3+0x373>
c002808c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002808f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028092:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028098:	75 6b                	jne    c0028105 <__divdf3+0x1b1>
c002809a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002809d:	09 d6                	or     esi,edx
c002809f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00280a3:	74 28                	je     c00280cd <__divdf3+0x179>
c00280a5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00280a8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00280ab:	85 f6                	test   esi,esi
c00280ad:	0f 85 14 02 00 00    	jne    c00282c7 <__divdf3+0x373>
c00280b3:	31 ff                	xor    edi,edi
c00280b5:	31 c9                	xor    ecx,ecx
c00280b7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00280ba:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00280bd:	0f 89 04 02 00 00    	jns    c00282c7 <__divdf3+0x373>
c00280c3:	b9 00 00 00 80       	mov    ecx,0x80000000
c00280c8:	e9 fa 01 00 00       	jmp    c00282c7 <__divdf3+0x373>
c00280cd:	85 f6                	test   esi,esi
c00280cf:	75 1b                	jne    c00280ec <__divdf3+0x198>
c00280d1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00280d4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00280d7:	25 00 00 00 80       	and    eax,0x80000000
c00280dc:	31 c9                	xor    ecx,ecx
c00280de:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00280e3:	89 cf                	mov    edi,ecx
c00280e5:	89 c1                	mov    ecx,eax
c00280e7:	e9 db 01 00 00       	jmp    c00282c7 <__divdf3+0x373>
c00280ec:	01 d2                	add    edx,edx
c00280ee:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280f1:	c1 eb 1f             	shr    ebx,0x1f
c00280f4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280f7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00280fa:	8d 48 01             	lea    ecx,[eax+0x1]
c00280fd:	09 da                	or     edx,ebx
c00280ff:	78 04                	js     c0028105 <__divdf3+0x1b1>
c0028101:	89 c8                	mov    eax,ecx
c0028103:	eb e7                	jmp    c00280ec <__divdf3+0x198>
c0028105:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028108:	81 ce 00 00 00 80    	or     esi,0x80000000
c002810e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028114:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028117:	39 d6                	cmp    esi,edx
c0028119:	77 0d                	ja     c0028128 <__divdf3+0x1d4>
c002811b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002811e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028121:	72 1b                	jb     c002813e <__divdf3+0x1ea>
c0028123:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028126:	75 16                	jne    c002813e <__divdf3+0x1ea>
c0028128:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002812b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002812e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028131:	83 de 00             	sbb    esi,0x0
c0028134:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028137:	ba 01 00 00 00       	mov    edx,0x1
c002813c:	eb 02                	jmp    c0028140 <__divdf3+0x1ec>
c002813e:	31 d2                	xor    edx,edx
c0028140:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028147:	31 ff                	xor    edi,edi
c0028149:	01 ff                	add    edi,edi
c002814b:	89 d1                	mov    ecx,edx
c002814d:	c1 e9 1f             	shr    ecx,0x1f
c0028150:	09 cf                	or     edi,ecx
c0028152:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028155:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028158:	89 da                	mov    edx,ebx
c002815a:	89 f3                	mov    ebx,esi
c002815c:	8d 34 36             	lea    esi,[esi+esi*1]
c002815f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028162:	c1 e9 1f             	shr    ecx,0x1f
c0028165:	09 ce                	or     esi,ecx
c0028167:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002816a:	01 c9                	add    ecx,ecx
c002816c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002816f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028172:	85 db                	test   ebx,ebx
c0028174:	78 29                	js     c002819f <__divdf3+0x24b>
c0028176:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028179:	72 07                	jb     c0028182 <__divdf3+0x22e>
c002817b:	75 3c                	jne    c00281b9 <__divdf3+0x265>
c002817d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028180:	77 37                	ja     c00281b9 <__divdf3+0x265>
c0028182:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028185:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028188:	31 d2                	xor    edx,edx
c002818a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002818d:	0f 97 c2             	seta   dl
c0028190:	29 d6                	sub    esi,edx
c0028192:	89 d9                	mov    ecx,ebx
c0028194:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028197:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002819a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002819d:	eb 17                	jmp    c00281b6 <__divdf3+0x262>
c002819f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00281a2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00281a5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00281a8:	0f 97 c1             	seta   cl
c00281ab:	0f b6 c9             	movzx  ecx,cl
c00281ae:	29 ce                	sub    esi,ecx
c00281b0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00281b3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00281b6:	83 ca 01             	or     edx,0x1
c00281b9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00281bc:	75 8b                	jne    c0028149 <__divdf3+0x1f5>
c00281be:	c1 e7 09             	shl    edi,0x9
c00281c1:	89 d1                	mov    ecx,edx
c00281c3:	c1 e9 17             	shr    ecx,0x17
c00281c6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00281c9:	09 f3                	or     ebx,esi
c00281cb:	0f 95 c3             	setne  bl
c00281ce:	0f b6 db             	movzx  ebx,bl
c00281d1:	c1 e2 09             	shl    edx,0x9
c00281d4:	09 d3                	or     ebx,edx
c00281d6:	89 ca                	mov    edx,ecx
c00281d8:	09 fa                	or     edx,edi
c00281da:	78 0c                	js     c00281e8 <__divdf3+0x294>
c00281dc:	01 d2                	add    edx,edx
c00281de:	89 d9                	mov    ecx,ebx
c00281e0:	c1 e9 1f             	shr    ecx,0x1f
c00281e3:	09 ca                	or     edx,ecx
c00281e5:	01 db                	add    ebx,ebx
c00281e7:	48                   	dec    eax
c00281e8:	3d fe 07 00 00       	cmp    eax,0x7fe
c00281ed:	0f 8f 83 00 00 00    	jg     c0028276 <__divdf3+0x322>
c00281f3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00281f9:	85 c0                	test   eax,eax
c00281fb:	0f 8f 82 00 00 00    	jg     c0028283 <__divdf3+0x32f>
c0028201:	83 f8 cc             	cmp    eax,0xffffffcc
c0028204:	7c 77                	jl     c002827d <__divdf3+0x329>
c0028206:	be 01 00 00 00       	mov    esi,0x1
c002820b:	29 c6                	sub    esi,eax
c002820d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028213:	83 fe 1f             	cmp    esi,0x1f
c0028216:	7e 2f                	jle    c0028247 <__divdf3+0x2f3>
c0028218:	83 fe 20             	cmp    esi,0x20
c002821b:	75 0a                	jne    c0028227 <__divdf3+0x2d3>
c002821d:	85 db                	test   ebx,ebx
c002821f:	0f 95 c3             	setne  bl
c0028222:	0f b6 db             	movzx  ebx,bl
c0028225:	eb 1a                	jmp    c0028241 <__divdf3+0x2ed>
c0028227:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002822a:	89 d7                	mov    edi,edx
c002822c:	d3 e7                	shl    edi,cl
c002822e:	89 f9                	mov    ecx,edi
c0028230:	09 d9                	or     ecx,ebx
c0028232:	0f 95 c3             	setne  bl
c0028235:	0f b6 db             	movzx  ebx,bl
c0028238:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002823d:	29 c1                	sub    ecx,eax
c002823f:	d3 ea                	shr    edx,cl
c0028241:	09 d3                	or     ebx,edx
c0028243:	31 c0                	xor    eax,eax
c0028245:	eb 3a                	jmp    c0028281 <__divdf3+0x32d>
c0028247:	83 c0 1f             	add    eax,0x1f
c002824a:	89 d7                	mov    edi,edx
c002824c:	88 c1                	mov    cl,al
c002824e:	d3 e7                	shl    edi,cl
c0028250:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028253:	89 df                	mov    edi,ebx
c0028255:	89 f1                	mov    ecx,esi
c0028257:	d3 ef                	shr    edi,cl
c0028259:	89 f9                	mov    ecx,edi
c002825b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002825e:	09 cf                	or     edi,ecx
c0028260:	88 c1                	mov    cl,al
c0028262:	d3 e3                	shl    ebx,cl
c0028264:	85 db                	test   ebx,ebx
c0028266:	0f 95 c3             	setne  bl
c0028269:	0f b6 db             	movzx  ebx,bl
c002826c:	09 fb                	or     ebx,edi
c002826e:	89 f1                	mov    ecx,esi
c0028270:	d3 ea                	shr    edx,cl
c0028272:	31 c0                	xor    eax,eax
c0028274:	eb 0d                	jmp    c0028283 <__divdf3+0x32f>
c0028276:	b8 ff 07 00 00       	mov    eax,0x7ff
c002827b:	eb 02                	jmp    c002827f <__divdf3+0x32b>
c002827d:	31 c0                	xor    eax,eax
c002827f:	31 db                	xor    ebx,ebx
c0028281:	31 d2                	xor    edx,edx
c0028283:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028286:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028289:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002828f:	09 c8                	or     eax,ecx
c0028291:	c1 e0 14             	shl    eax,0x14
c0028294:	89 d1                	mov    ecx,edx
c0028296:	c1 e9 0b             	shr    ecx,0xb
c0028299:	09 c8                	or     eax,ecx
c002829b:	89 c6                	mov    esi,eax
c002829d:	89 d9                	mov    ecx,ebx
c002829f:	c1 e9 0b             	shr    ecx,0xb
c00282a2:	c1 e2 15             	shl    edx,0x15
c00282a5:	09 ca                	or     edx,ecx
c00282a7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00282ad:	0f 95 c0             	setne  al
c00282b0:	09 c1                	or     ecx,eax
c00282b2:	83 e1 01             	and    ecx,0x1
c00282b5:	c1 eb 0a             	shr    ebx,0xa
c00282b8:	21 cb                	and    ebx,ecx
c00282ba:	01 d3                	add    ebx,edx
c00282bc:	89 d8                	mov    eax,ebx
c00282be:	83 d6 00             	adc    esi,0x0
c00282c1:	89 f2                	mov    edx,esi
c00282c3:	89 c7                	mov    edi,eax
c00282c5:	89 d1                	mov    ecx,edx
c00282c7:	89 f8                	mov    eax,edi
c00282c9:	89 ca                	mov    edx,ecx
c00282cb:	83 c4 2c             	add    esp,0x2c
c00282ce:	5b                   	pop    ebx
c00282cf:	5e                   	pop    esi
c00282d0:	5f                   	pop    edi
c00282d1:	5d                   	pop    ebp
c00282d2:	c3                   	ret    

c00282d3 <__floatsidf>:
c00282d3:	55                   	push   ebp
c00282d4:	89 e5                	mov    ebp,esp
c00282d6:	56                   	push   esi
c00282d7:	53                   	push   ebx
c00282d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00282db:	85 db                	test   ebx,ebx
c00282dd:	7e 15                	jle    c00282f4 <__floatsidf+0x21>
c00282df:	0f bd cb             	bsr    ecx,ebx
c00282e2:	83 f1 1f             	xor    ecx,0x1f
c00282e5:	d3 e3                	shl    ebx,cl
c00282e7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282ed:	b8 1e 04 00 00       	mov    eax,0x41e
c00282f2:	eb 21                	jmp    c0028315 <__floatsidf+0x42>
c00282f4:	b8 00 00 00 00       	mov    eax,0x0
c00282f9:	ba 00 00 00 00       	mov    edx,0x0
c00282fe:	74 2a                	je     c002832a <__floatsidf+0x57>
c0028300:	f7 db                	neg    ebx
c0028302:	0f bd cb             	bsr    ecx,ebx
c0028305:	83 f1 1f             	xor    ecx,0x1f
c0028308:	d3 e3                	shl    ebx,cl
c002830a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028310:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028315:	29 c8                	sub    eax,ecx
c0028317:	c1 e0 14             	shl    eax,0x14
c002831a:	89 c1                	mov    ecx,eax
c002831c:	89 de                	mov    esi,ebx
c002831e:	c1 ee 0b             	shr    esi,0xb
c0028321:	09 f1                	or     ecx,esi
c0028323:	89 ca                	mov    edx,ecx
c0028325:	c1 e3 15             	shl    ebx,0x15
c0028328:	89 d8                	mov    eax,ebx
c002832a:	5b                   	pop    ebx
c002832b:	5e                   	pop    esi
c002832c:	5d                   	pop    ebp
c002832d:	c3                   	ret    

c002832e <__floatunsidf>:
c002832e:	55                   	push   ebp
c002832f:	89 e5                	mov    ebp,esp
c0028331:	56                   	push   esi
c0028332:	53                   	push   ebx
c0028333:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028336:	85 db                	test   ebx,ebx
c0028338:	74 2a                	je     c0028364 <__floatunsidf+0x36>
c002833a:	0f bd cb             	bsr    ecx,ebx
c002833d:	83 f1 1f             	xor    ecx,0x1f
c0028340:	d3 e3                	shl    ebx,cl
c0028342:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028348:	b8 1e 04 00 00       	mov    eax,0x41e
c002834d:	29 c8                	sub    eax,ecx
c002834f:	c1 e0 14             	shl    eax,0x14
c0028352:	89 c1                	mov    ecx,eax
c0028354:	89 de                	mov    esi,ebx
c0028356:	c1 ee 0b             	shr    esi,0xb
c0028359:	09 f1                	or     ecx,esi
c002835b:	89 ca                	mov    edx,ecx
c002835d:	c1 e3 15             	shl    ebx,0x15
c0028360:	89 d8                	mov    eax,ebx
c0028362:	eb 04                	jmp    c0028368 <__floatunsidf+0x3a>
c0028364:	31 c0                	xor    eax,eax
c0028366:	31 d2                	xor    edx,edx
c0028368:	5b                   	pop    ebx
c0028369:	5e                   	pop    esi
c002836a:	5d                   	pop    ebp
c002836b:	c3                   	ret    

c002836c <__fixdfsi>:
c002836c:	55                   	push   ebp
c002836d:	89 e5                	mov    ebp,esp
c002836f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028372:	89 d1                	mov    ecx,edx
c0028374:	c1 e1 0b             	shl    ecx,0xb
c0028377:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002837d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028380:	c1 e8 15             	shr    eax,0x15
c0028383:	09 c1                	or     ecx,eax
c0028385:	c1 fa 14             	sar    edx,0x14
c0028388:	78 1f                	js     c00283a9 <__fixdfsi+0x3d>
c002838a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028390:	31 c0                	xor    eax,eax
c0028392:	83 fa 1e             	cmp    edx,0x1e
c0028395:	77 40                	ja     c00283d7 <__fixdfsi+0x6b>
c0028397:	89 c8                	mov    eax,ecx
c0028399:	0d 00 00 00 80       	or     eax,0x80000000
c002839e:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283a3:	29 d1                	sub    ecx,edx
c00283a5:	d3 e8                	shr    eax,cl
c00283a7:	eb 2e                	jmp    c00283d7 <__fixdfsi+0x6b>
c00283a9:	31 c0                	xor    eax,eax
c00283ab:	81 c2 01 04 00 00    	add    edx,0x401
c00283b1:	78 24                	js     c00283d7 <__fixdfsi+0x6b>
c00283b3:	83 fa 1e             	cmp    edx,0x1e
c00283b6:	7e 09                	jle    c00283c1 <__fixdfsi+0x55>
c00283b8:	83 fa 1f             	cmp    edx,0x1f
c00283bb:	75 18                	jne    c00283d5 <__fixdfsi+0x69>
c00283bd:	85 c9                	test   ecx,ecx
c00283bf:	75 14                	jne    c00283d5 <__fixdfsi+0x69>
c00283c1:	89 c8                	mov    eax,ecx
c00283c3:	0d 00 00 00 80       	or     eax,0x80000000
c00283c8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283cd:	29 d1                	sub    ecx,edx
c00283cf:	d3 e8                	shr    eax,cl
c00283d1:	f7 d8                	neg    eax
c00283d3:	eb 02                	jmp    c00283d7 <__fixdfsi+0x6b>
c00283d5:	31 c0                	xor    eax,eax
c00283d7:	5d                   	pop    ebp
c00283d8:	c3                   	ret    

c00283d9 <__fixunsdfsi>:
c00283d9:	55                   	push   ebp
c00283da:	89 e5                	mov    ebp,esp
c00283dc:	53                   	push   ebx
c00283dd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00283e0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00283e3:	89 d3                	mov    ebx,edx
c00283e5:	c1 fb 14             	sar    ebx,0x14
c00283e8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00283ee:	31 c0                	xor    eax,eax
c00283f0:	83 fb 1f             	cmp    ebx,0x1f
c00283f3:	77 1d                	ja     c0028412 <__fixunsdfsi+0x39>
c00283f5:	89 d0                	mov    eax,edx
c00283f7:	c1 e0 0b             	shl    eax,0xb
c00283fa:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00283ff:	c1 e9 15             	shr    ecx,0x15
c0028402:	09 c8                	or     eax,ecx
c0028404:	0d 00 00 00 80       	or     eax,0x80000000
c0028409:	b9 1f 00 00 00       	mov    ecx,0x1f
c002840e:	29 d9                	sub    ecx,ebx
c0028410:	d3 e8                	shr    eax,cl
c0028412:	5b                   	pop    ebx
c0028413:	5d                   	pop    ebp
c0028414:	c3                   	ret    

c0028415 <__cmpdf2>:
c0028415:	55                   	push   ebp
c0028416:	89 e5                	mov    ebp,esp
c0028418:	57                   	push   edi
c0028419:	56                   	push   esi
c002841a:	53                   	push   ebx
c002841b:	83 ec 0c             	sub    esp,0xc
c002841e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028421:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028424:	89 ca                	mov    edx,ecx
c0028426:	c1 ea 14             	shr    edx,0x14
c0028429:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002842f:	89 cb                	mov    ebx,ecx
c0028431:	c1 fb 1f             	sar    ebx,0x1f
c0028434:	31 da                	xor    edx,ebx
c0028436:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028439:	89 df                	mov    edi,ebx
c002843b:	c1 e7 0b             	shl    edi,0xb
c002843e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028441:	c1 e1 0b             	shl    ecx,0xb
c0028444:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002844a:	c1 eb 15             	shr    ebx,0x15
c002844d:	09 d9                	or     ecx,ebx
c002844f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028452:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028455:	89 ce                	mov    esi,ecx
c0028457:	c1 ee 14             	shr    esi,0x14
c002845a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028460:	89 cb                	mov    ebx,ecx
c0028462:	c1 fb 1f             	sar    ebx,0x1f
c0028465:	31 de                	xor    esi,ebx
c0028467:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002846a:	89 df                	mov    edi,ebx
c002846c:	c1 e7 0b             	shl    edi,0xb
c002846f:	c1 e1 0b             	shl    ecx,0xb
c0028472:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028478:	c1 eb 15             	shr    ebx,0x15
c002847b:	09 d9                	or     ecx,ebx
c002847d:	89 d3                	mov    ebx,edx
c002847f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028485:	43                   	inc    ebx
c0028486:	83 fb 01             	cmp    ebx,0x1
c0028489:	77 08                	ja     c0028493 <__cmpdf2+0x7e>
c002848b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002848e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028491:	75 68                	jne    c00284fb <__cmpdf2+0xe6>
c0028493:	89 f3                	mov    ebx,esi
c0028495:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002849b:	43                   	inc    ebx
c002849c:	83 fb 01             	cmp    ebx,0x1
c002849f:	77 06                	ja     c00284a7 <__cmpdf2+0x92>
c00284a1:	89 fb                	mov    ebx,edi
c00284a3:	09 cb                	or     ebx,ecx
c00284a5:	75 54                	jne    c00284fb <__cmpdf2+0xe6>
c00284a7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00284aa:	09 f8                	or     eax,edi
c00284ac:	09 c8                	or     eax,ecx
c00284ae:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00284b1:	75 12                	jne    c00284c5 <__cmpdf2+0xb0>
c00284b3:	8d 42 01             	lea    eax,[edx+0x1]
c00284b6:	83 f8 01             	cmp    eax,0x1
c00284b9:	77 0a                	ja     c00284c5 <__cmpdf2+0xb0>
c00284bb:	8d 5e 01             	lea    ebx,[esi+0x1]
c00284be:	31 c0                	xor    eax,eax
c00284c0:	83 fb 01             	cmp    ebx,0x1
c00284c3:	76 36                	jbe    c00284fb <__cmpdf2+0xe6>
c00284c5:	b8 01 00 00 00       	mov    eax,0x1
c00284ca:	39 f2                	cmp    edx,esi
c00284cc:	7f 2d                	jg     c00284fb <__cmpdf2+0xe6>
c00284ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00284d3:	7c 26                	jl     c00284fb <__cmpdf2+0xe6>
c00284d5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00284d8:	77 07                	ja     c00284e1 <__cmpdf2+0xcc>
c00284da:	72 16                	jb     c00284f2 <__cmpdf2+0xdd>
c00284dc:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00284df:	76 0a                	jbe    c00284eb <__cmpdf2+0xd6>
c00284e1:	89 d0                	mov    eax,edx
c00284e3:	c1 f8 1f             	sar    eax,0x1f
c00284e6:	83 c8 01             	or     eax,0x1
c00284e9:	eb 10                	jmp    c00284fb <__cmpdf2+0xe6>
c00284eb:	b8 00 00 00 00       	mov    eax,0x0
c00284f0:	73 09                	jae    c00284fb <__cmpdf2+0xe6>
c00284f2:	89 d0                	mov    eax,edx
c00284f4:	c1 f8 1f             	sar    eax,0x1f
c00284f7:	83 e0 02             	and    eax,0x2
c00284fa:	48                   	dec    eax
c00284fb:	83 c4 0c             	add    esp,0xc
c00284fe:	5b                   	pop    ebx
c00284ff:	5e                   	pop    esi
c0028500:	5f                   	pop    edi
c0028501:	5d                   	pop    ebp
c0028502:	c3                   	ret    

c0028503 <__eqdf2>:
c0028503:	55                   	push   ebp
c0028504:	89 e5                	mov    ebp,esp
c0028506:	50                   	push   eax
c0028507:	6a 01                	push   0x1
c0028509:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002850c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002850f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028512:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028515:	e8 fb fe ff ff       	call   c0028415 <__cmpdf2>
c002851a:	83 c4 18             	add    esp,0x18
c002851d:	c9                   	leave  
c002851e:	c3                   	ret    

c002851f <__nedf2>:
c002851f:	eb e2                	jmp    c0028503 <__eqdf2>

c0028521 <__gtdf2>:
c0028521:	55                   	push   ebp
c0028522:	89 e5                	mov    ebp,esp
c0028524:	50                   	push   eax
c0028525:	6a ff                	push   0xffffffff
c0028527:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002852a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002852d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028530:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028533:	e8 dd fe ff ff       	call   c0028415 <__cmpdf2>
c0028538:	83 c4 18             	add    esp,0x18
c002853b:	c9                   	leave  
c002853c:	c3                   	ret    

c002853d <__gedf2>:
c002853d:	eb e2                	jmp    c0028521 <__gtdf2>

c002853f <__ltdf2>:
c002853f:	eb c2                	jmp    c0028503 <__eqdf2>

c0028541 <__ledf2>:
c0028541:	eb c0                	jmp    c0028503 <__eqdf2>

c0028543 <__truncdfsf2>:
c0028543:	55                   	push   ebp
c0028544:	89 e5                	mov    ebp,esp
c0028546:	57                   	push   edi
c0028547:	56                   	push   esi
c0028548:	53                   	push   ebx
c0028549:	83 ec 0c             	sub    esp,0xc
c002854c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002854f:	89 d1                	mov    ecx,edx
c0028551:	c1 f9 14             	sar    ecx,0x14
c0028554:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028557:	89 df                	mov    edi,ebx
c0028559:	c1 e7 0b             	shl    edi,0xb
c002855c:	89 d0                	mov    eax,edx
c002855e:	c1 e0 0b             	shl    eax,0xb
c0028561:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028566:	c1 eb 15             	shr    ebx,0x15
c0028569:	09 d8                	or     eax,ebx
c002856b:	89 cb                	mov    ebx,ecx
c002856d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028573:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028579:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002857f:	0f 86 9e 00 00 00    	jbe    c0028623 <__truncdfsf2+0xe0>
c0028585:	85 db                	test   ebx,ebx
c0028587:	75 0a                	jne    c0028593 <__truncdfsf2+0x50>
c0028589:	c1 fa 17             	sar    edx,0x17
c002858c:	30 d2                	xor    dl,dl
c002858e:	e9 84 00 00 00       	jmp    c0028617 <__truncdfsf2+0xd4>
c0028593:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028599:	83 fe 83             	cmp    esi,0xffffff83
c002859c:	7d 4b                	jge    c00285e9 <__truncdfsf2+0xa6>
c002859e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00285a3:	29 f1                	sub    ecx,esi
c00285a5:	83 f9 1f             	cmp    ecx,0x1f
c00285a8:	7f 6b                	jg     c0028615 <__truncdfsf2+0xd2>
c00285aa:	0d 00 00 00 80       	or     eax,0x80000000
c00285af:	89 c3                	mov    ebx,eax
c00285b1:	d3 eb                	shr    ebx,cl
c00285b3:	be 01 00 00 00       	mov    esi,0x1
c00285b8:	d3 e6                	shl    esi,cl
c00285ba:	4e                   	dec    esi
c00285bb:	21 f0                	and    eax,esi
c00285bd:	09 f8                	or     eax,edi
c00285bf:	0f 95 c0             	setne  al
c00285c2:	0f b6 c0             	movzx  eax,al
c00285c5:	09 c3                	or     ebx,eax
c00285c7:	89 d9                	mov    ecx,ebx
c00285c9:	c1 e9 08             	shr    ecx,0x8
c00285cc:	f6 c3 7f             	test   bl,0x7f
c00285cf:	0f 95 c0             	setne  al
c00285d2:	09 c8                	or     eax,ecx
c00285d4:	83 e0 01             	and    eax,0x1
c00285d7:	c1 eb 07             	shr    ebx,0x7
c00285da:	21 c3                	and    ebx,eax
c00285dc:	81 e2 00 00 00 80    	and    edx,0x80000000
c00285e2:	09 d1                	or     ecx,edx
c00285e4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00285e7:	eb 76                	jmp    c002865f <__truncdfsf2+0x11c>
c00285e9:	83 c6 80             	add    esi,0xffffff80
c00285ec:	7e 1d                	jle    c002860b <__truncdfsf2+0xc8>
c00285ee:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00285f4:	75 0b                	jne    c0028601 <__truncdfsf2+0xbe>
c00285f6:	09 f8                	or     eax,edi
c00285f8:	74 09                	je     c0028603 <__truncdfsf2+0xc0>
c00285fa:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00285ff:	eb 02                	jmp    c0028603 <__truncdfsf2+0xc0>
c0028601:	31 c0                	xor    eax,eax
c0028603:	c1 fa 17             	sar    edx,0x17
c0028606:	80 ca ff             	or     dl,0xff
c0028609:	eb 0e                	jmp    c0028619 <__truncdfsf2+0xd6>
c002860b:	c1 fa 1f             	sar    edx,0x1f
c002860e:	c1 e2 08             	shl    edx,0x8
c0028611:	09 ca                	or     edx,ecx
c0028613:	eb 04                	jmp    c0028619 <__truncdfsf2+0xd6>
c0028615:	31 d2                	xor    edx,edx
c0028617:	31 c0                	xor    eax,eax
c0028619:	c1 e2 17             	shl    edx,0x17
c002861c:	c1 e8 08             	shr    eax,0x8
c002861f:	09 d0                	or     eax,edx
c0028621:	eb 3c                	jmp    c002865f <__truncdfsf2+0x11c>
c0028623:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028629:	89 ca                	mov    edx,ecx
c002862b:	c1 fa 0b             	sar    edx,0xb
c002862e:	c1 e2 08             	shl    edx,0x8
c0028631:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028634:	31 db                	xor    ebx,ebx
c0028636:	85 ff                	test   edi,edi
c0028638:	0f 95 c3             	setne  bl
c002863b:	09 d8                	or     eax,ebx
c002863d:	89 c3                	mov    ebx,eax
c002863f:	c1 eb 08             	shr    ebx,0x8
c0028642:	a8 7f                	test   al,0x7f
c0028644:	0f 95 c2             	setne  dl
c0028647:	89 d6                	mov    esi,edx
c0028649:	09 de                	or     esi,ebx
c002864b:	83 e6 01             	and    esi,0x1
c002864e:	c1 e8 07             	shr    eax,0x7
c0028651:	21 f0                	and    eax,esi
c0028653:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028656:	09 ca                	or     edx,ecx
c0028658:	c1 e2 17             	shl    edx,0x17
c002865b:	09 da                	or     edx,ebx
c002865d:	01 d0                	add    eax,edx
c002865f:	83 c4 0c             	add    esp,0xc
c0028662:	5b                   	pop    ebx
c0028663:	5e                   	pop    esi
c0028664:	5f                   	pop    edi
c0028665:	5d                   	pop    ebp
c0028666:	c3                   	ret    

c0028667 <__extendsfdf2>:
c0028667:	55                   	push   ebp
c0028668:	89 e5                	mov    ebp,esp
c002866a:	57                   	push   edi
c002866b:	56                   	push   esi
c002866c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002866f:	89 d1                	mov    ecx,edx
c0028671:	c1 f9 17             	sar    ecx,0x17
c0028674:	c1 e2 08             	shl    edx,0x8
c0028677:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002867d:	89 c8                	mov    eax,ecx
c002867f:	80 e4 f8             	and    ah,0xf8
c0028682:	8d 71 01             	lea    esi,[ecx+0x1]
c0028685:	81 e6 fe 00 00 00    	and    esi,0xfe
c002868b:	75 27                	jne    c00286b4 <__extendsfdf2+0x4d>
c002868d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028693:	75 18                	jne    c00286ad <__extendsfdf2+0x46>
c0028695:	85 d2                	test   edx,edx
c0028697:	74 20                	je     c00286b9 <__extendsfdf2+0x52>
c0028699:	41                   	inc    ecx
c002869a:	01 d2                	add    edx,edx
c002869c:	79 fb                	jns    c0028699 <__extendsfdf2+0x32>
c002869e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00286a4:	29 c8                	sub    eax,ecx
c00286a6:	05 81 03 00 00       	add    eax,0x381
c00286ab:	eb 0c                	jmp    c00286b9 <__extendsfdf2+0x52>
c00286ad:	05 00 07 00 00       	add    eax,0x700
c00286b2:	eb 05                	jmp    c00286b9 <__extendsfdf2+0x52>
c00286b4:	05 80 03 00 00       	add    eax,0x380
c00286b9:	c1 e0 14             	shl    eax,0x14
c00286bc:	89 c1                	mov    ecx,eax
c00286be:	89 d0                	mov    eax,edx
c00286c0:	c1 e8 0b             	shr    eax,0xb
c00286c3:	09 c1                	or     ecx,eax
c00286c5:	c1 e2 15             	shl    edx,0x15
c00286c8:	89 d0                	mov    eax,edx
c00286ca:	89 ca                	mov    edx,ecx
c00286cc:	5e                   	pop    esi
c00286cd:	5f                   	pop    edi
c00286ce:	5d                   	pop    ebp
c00286cf:	c3                   	ret    

c00286d0 <fabs>:
c00286d0:	83 ec 0c             	sub    esp,0xc
c00286d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00286da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00286de:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00286e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00286e7:	dd 04 24             	fld    QWORD PTR [esp]
c00286ea:	83 c4 0c             	add    esp,0xc
c00286ed:	c3                   	ret    
c00286ee:	66 90                	xchg   ax,ax

c00286f0 <lrint>:
c00286f0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00286f4:	83 ec 04             	sub    esp,0x4
c00286f7:	db 1c 24             	fistp  DWORD PTR [esp]
c00286fa:	58                   	pop    eax
c00286fb:	c3                   	ret    

c00286fc <lrintf>:
c00286fc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028700:	83 ec 04             	sub    esp,0x4
c0028703:	db 1c 24             	fistp  DWORD PTR [esp]
c0028706:	58                   	pop    eax
c0028707:	c3                   	ret    

Disassembly of section .init:

c0028708 <_init>:
c0028708:	55                   	push   ebp
c0028709:	89 e5                	mov    ebp,esp
c002870b:	e8 08 7a fd ff       	call   c0000118 <frame_dummy>
c0028710:	e8 63 e0 ff ff       	call   c0026778 <__do_global_ctors_aux>
c0028715:	5d                   	pop    ebp
c0028716:	c3                   	ret    

Disassembly of section .fini:

c0028717 <_fini>:
c0028717:	55                   	push   ebp
c0028718:	89 e5                	mov    ebp,esp
c002871a:	e8 89 79 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002871f:	5d                   	pop    ebp
c0028720:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028722 <Computer::~Computer()>:
c0028722:	83 ec 0c             	sub    esp,0xc
c0028725:	ba 68 a2 02 c0       	mov    edx,0xc002a268
c002872a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872e:	89 10                	mov    DWORD PTR [eax],edx
c0028730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028734:	83 ec 0c             	sub    esp,0xc
c0028737:	50                   	push   eax
c0028738:	e8 89 bb fe ff       	call   c00142c6 <Device::~Device()>
c002873d:	83 c4 10             	add    esp,0x10
c0028740:	90                   	nop
c0028741:	83 c4 0c             	add    esp,0xc
c0028744:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028746 <Computer::~Computer()>:
c0028746:	83 ec 0c             	sub    esp,0xc
c0028749:	83 ec 0c             	sub    esp,0xc
c002874c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028750:	e8 cd ff ff ff       	call   c0028722 <Computer::~Computer()>
c0028755:	83 c4 10             	add    esp,0x10
c0028758:	83 ec 08             	sub    esp,0x8
c002875b:	68 ec 01 00 00       	push   0x1ec
c0028760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028764:	e8 84 a7 fe ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0028769:	83 c4 10             	add    esp,0x10
c002876c:	83 c4 0c             	add    esp,0xc
c002876f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028770 <idleCommon()>:
c0028770:	83 ec 0c             	sub    esp,0xc
c0028773:	e8 1c 57 ff ff       	call   c001de94 <lockScheduler()>
c0028778:	e8 53 5a ff ff       	call   c001e1d0 <schedule()>
c002877d:	83 c4 0c             	add    esp,0xc
c0028780:	e9 11 57 ff ff       	jmp    c001de96 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028786 <LinkedList<UnixFile>::~LinkedList()>:
c0028786:	90                   	nop
c0028787:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028788 <LinkedList<UnixFile>::LinkedList()>:
c0028788:	83 ec 0c             	sub    esp,0xc
c002878b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002878f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028795:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028799:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287af:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287cb:	83 ec 0c             	sub    esp,0xc
c00287ce:	68 3a a5 02 c0       	push   0xc002a53a
c00287d3:	e8 f5 a7 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c00287d8:	83 c4 10             	add    esp,0x10
c00287db:	90                   	nop
c00287dc:	83 c4 0c             	add    esp,0xc
c00287df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00287e0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00287e0:	83 ec 0c             	sub    esp,0xc
c00287e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00287e8:	75 10                	jne    c00287fa <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00287ea:	83 ec 0c             	sub    esp,0xc
c00287ed:	68 54 a5 02 c0       	push   0xc002a554
c00287f2:	e8 78 1e ff ff       	call   c001a66f <Krnl::panic(char const*)>
c00287f7:	83 c4 10             	add    esp,0x10
c00287fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0028800:	85 c0                	test   eax,eax
c0028802:	74 34                	je     c0028838 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028808:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002880b:	85 c0                	test   eax,eax
c002880d:	74 29                	je     c0028838 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002880f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028813:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028816:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002881a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002881d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028821:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028825:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002882f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028836:	eb 65                	jmp    c002889d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883c:	8b 00                	mov    eax,DWORD PTR [eax]
c002883e:	85 c0                	test   eax,eax
c0028840:	75 4b                	jne    c002888d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028846:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028849:	85 c0                	test   eax,eax
c002884b:	75 40                	jne    c002888d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002884d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028851:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028855:	89 10                	mov    DWORD PTR [eax],edx
c0028857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002885f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028866:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028869:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028874:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028877:	85 c0                	test   eax,eax
c0028879:	74 22                	je     c002889d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002887b:	83 ec 0c             	sub    esp,0xc
c002887e:	68 76 a5 02 c0       	push   0xc002a576
c0028883:	e8 e7 1d ff ff       	call   c001a66f <Krnl::panic(char const*)>
c0028888:	83 c4 10             	add    esp,0x10
c002888b:	eb 10                	jmp    c002889d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002888d:	83 ec 0c             	sub    esp,0xc
c0028890:	68 80 a5 02 c0       	push   0xc002a580
c0028895:	e8 d5 1d ff ff       	call   c001a66f <Krnl::panic(char const*)>
c002889a:	83 c4 10             	add    esp,0x10
c002889d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288a4:	8d 50 01             	lea    edx,[eax+0x1]
c00288a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ab:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288ae:	90                   	nop
c00288af:	83 c4 0c             	add    esp,0xc
c00288b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00288b4 <LinkedList<UnixFile>::getFirstElement()>:
c00288b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00288ba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00288bc <LinkedList<UnixFile>::removeFirst()>:
c00288bc:	83 ec 0c             	sub    esp,0xc
c00288bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00288c5:	85 c0                	test   eax,eax
c00288c7:	75 12                	jne    c00288db <LinkedList<UnixFile>::removeFirst()+0x1f>
c00288c9:	83 ec 0c             	sub    esp,0xc
c00288cc:	68 8c a5 02 c0       	push   0xc002a58c
c00288d1:	e8 99 1d ff ff       	call   c001a66f <Krnl::panic(char const*)>
c00288d6:	83 c4 10             	add    esp,0x10
c00288d9:	eb 7e                	jmp    c0028959 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00288db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288e5:	85 c0                	test   eax,eax
c00288e7:	74 10                	je     c00288f9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00288e9:	83 ec 0c             	sub    esp,0xc
c00288ec:	68 d7 a5 02 c0       	push   0xc002a5d7
c00288f1:	e8 79 1d ff ff       	call   c001a66f <Krnl::panic(char const*)>
c00288f6:	83 c4 10             	add    esp,0x10
c00288f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00288ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028902:	85 c0                	test   eax,eax
c0028904:	75 33                	jne    c0028939 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028914:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002891b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028922:	83 f8 01             	cmp    eax,0x1
c0028925:	74 21                	je     c0028948 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028927:	83 ec 0c             	sub    esp,0xc
c002892a:	68 b0 a5 02 c0       	push   0xc002a5b0
c002892f:	e8 3b 1d ff ff       	call   c001a66f <Krnl::panic(char const*)>
c0028934:	83 c4 10             	add    esp,0x10
c0028937:	eb 0f                	jmp    c0028948 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002893d:	8b 00                	mov    eax,DWORD PTR [eax]
c002893f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028946:	89 10                	mov    DWORD PTR [eax],edx
c0028948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002894f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028956:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028959:	83 c4 0c             	add    esp,0xc
c002895c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002895e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002895e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028962:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028965:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028966 <DriverlessDevice::~DriverlessDevice()>:
c0028966:	ba 84 ae 02 c0       	mov    edx,0xc002ae84
c002896b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002896f:	89 10                	mov    DWORD PTR [eax],edx
c0028971:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028975:	50                   	push   eax
c0028976:	e8 4b b9 fe ff       	call   c00142c6 <Device::~Device()>
c002897b:	83 c4 04             	add    esp,0x4
c002897e:	90                   	nop
c002897f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028980 <DriverlessDevice::~DriverlessDevice()>:
c0028980:	83 ec 0c             	sub    esp,0xc
c0028983:	83 ec 0c             	sub    esp,0xc
c0028986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002898a:	e8 d7 ff ff ff       	call   c0028966 <DriverlessDevice::~DriverlessDevice()>
c002898f:	83 c4 10             	add    esp,0x10
c0028992:	83 ec 08             	sub    esp,0x8
c0028995:	68 58 01 00 00       	push   0x158
c002899a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002899e:	e8 4a a5 fe ff       	call   c0012eed <operator delete(void*, unsigned long)>
c00289a3:	83 c4 10             	add    esp,0x10
c00289a6:	83 c4 0c             	add    esp,0xc
c00289a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00289aa <LinkedList<Device>::addElement(Device*)>:
c00289aa:	83 ec 0c             	sub    esp,0xc
c00289ad:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00289b2:	75 10                	jne    c00289c4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00289b4:	83 ec 0c             	sub    esp,0xc
c00289b7:	68 54 a5 02 c0       	push   0xc002a554
c00289bc:	e8 ae 1c ff ff       	call   c001a66f <Krnl::panic(char const*)>
c00289c1:	83 c4 10             	add    esp,0x10
c00289c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00289ca:	85 c0                	test   eax,eax
c00289cc:	74 3a                	je     c0028a08 <LinkedList<Device>::addElement(Device*)+0x5e>
c00289ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289d5:	85 c0                	test   eax,eax
c00289d7:	74 2f                	je     c0028a08 <LinkedList<Device>::addElement(Device*)+0x5e>
c00289d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289dd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289e4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00289ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289f2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00289f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289fc:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a06:	eb 68                	jmp    c0028a70 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a0e:	85 c0                	test   eax,eax
c0028a10:	75 4e                	jne    c0028a60 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a19:	85 c0                	test   eax,eax
c0028a1b:	75 43                	jne    c0028a60 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028a1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a25:	89 10                	mov    DWORD PTR [eax],edx
c0028a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a2b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a2f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a39:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a47:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a4a:	85 c0                	test   eax,eax
c0028a4c:	74 22                	je     c0028a70 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a4e:	83 ec 0c             	sub    esp,0xc
c0028a51:	68 76 a5 02 c0       	push   0xc002a576
c0028a56:	e8 14 1c ff ff       	call   c001a66f <Krnl::panic(char const*)>
c0028a5b:	83 c4 10             	add    esp,0x10
c0028a5e:	eb 10                	jmp    c0028a70 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a60:	83 ec 0c             	sub    esp,0xc
c0028a63:	68 80 a5 02 c0       	push   0xc002a580
c0028a68:	e8 02 1c ff ff       	call   c001a66f <Krnl::panic(char const*)>
c0028a6d:	83 c4 10             	add    esp,0x10
c0028a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a77:	8d 50 01             	lea    edx,[eax+0x1]
c0028a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a7e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a81:	90                   	nop
c0028a82:	83 c4 0c             	add    esp,0xc
c0028a85:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028a86 <LinkedList<Device>::LinkedList()>:
c0028a86:	83 ec 0c             	sub    esp,0xc
c0028a89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a8d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a97:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028aa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ac9:	83 ec 0c             	sub    esp,0xc
c0028acc:	68 3a a5 02 c0       	push   0xc002a53a
c0028ad1:	e8 f7 a4 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0028ad6:	83 c4 10             	add    esp,0x10
c0028ad9:	90                   	nop
c0028ada:	83 c4 0c             	add    esp,0xc
c0028add:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028ade <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028ade:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ae2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ae4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028ae6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028ae6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aea:	8b 00                	mov    eax,DWORD PTR [eax]
c0028aec:	85 c0                	test   eax,eax
c0028aee:	75 0e                	jne    c0028afe <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028af0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028af4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028af7:	85 c0                	test   eax,eax
c0028af9:	75 03                	jne    c0028afe <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028afb:	b0 01                	mov    al,0x1
c0028afd:	c3                   	ret    
c0028afe:	b0 00                	mov    al,0x0
c0028b00:	90                   	nop
c0028b01:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028b02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028b02:	83 ec 0c             	sub    esp,0xc
c0028b05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b09:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b0b:	85 c0                	test   eax,eax
c0028b0d:	75 15                	jne    c0028b24 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028b0f:	83 ec 0c             	sub    esp,0xc
c0028b12:	68 8c a5 02 c0       	push   0xc002a58c
c0028b17:	e8 53 1b ff ff       	call   c001a66f <Krnl::panic(char const*)>
c0028b1c:	83 c4 10             	add    esp,0x10
c0028b1f:	e9 88 00 00 00       	jmp    c0028bac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b2b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b2e:	85 c0                	test   eax,eax
c0028b30:	0f 95 c0             	setne  al
c0028b33:	84 c0                	test   al,al
c0028b35:	74 10                	je     c0028b47 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028b37:	83 ec 0c             	sub    esp,0xc
c0028b3a:	68 d7 a5 02 c0       	push   0xc002a5d7
c0028b3f:	e8 2b 1b ff ff       	call   c001a66f <Krnl::panic(char const*)>
c0028b44:	83 c4 10             	add    esp,0x10
c0028b47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b4d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b50:	85 c0                	test   eax,eax
c0028b52:	0f 94 c0             	sete   al
c0028b55:	84 c0                	test   al,al
c0028b57:	74 33                	je     c0028b8c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028b59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b5d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b72:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b75:	83 f8 01             	cmp    eax,0x1
c0028b78:	74 21                	je     c0028b9b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b7a:	83 ec 0c             	sub    esp,0xc
c0028b7d:	68 b0 a5 02 c0       	push   0xc002a5b0
c0028b82:	e8 e8 1a ff ff       	call   c001a66f <Krnl::panic(char const*)>
c0028b87:	83 c4 10             	add    esp,0x10
c0028b8a:	eb 0f                	jmp    c0028b9b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b90:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b92:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028b95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b99:	89 10                	mov    DWORD PTR [eax],edx
c0028b9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b9f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ba2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028ba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bac:	83 c4 0c             	add    esp,0xc
c0028baf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028bb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028bb0:	83 ec 0c             	sub    esp,0xc
c0028bb3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028bb8:	75 10                	jne    c0028bca <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028bba:	83 ec 0c             	sub    esp,0xc
c0028bbd:	68 54 a5 02 c0       	push   0xc002a554
c0028bc2:	e8 a8 1a ff ff       	call   c001a66f <Krnl::panic(char const*)>
c0028bc7:	83 c4 10             	add    esp,0x10
c0028bca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bce:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bd0:	85 c0                	test   eax,eax
c0028bd2:	74 34                	je     c0028c08 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028bd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bdb:	85 c0                	test   eax,eax
c0028bdd:	74 29                	je     c0028c08 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028bdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028be6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bea:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028bed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bf5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bff:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c06:	eb 65                	jmp    c0028c6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c0e:	85 c0                	test   eax,eax
c0028c10:	75 4b                	jne    c0028c5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c19:	85 c0                	test   eax,eax
c0028c1b:	75 40                	jne    c0028c5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c25:	89 10                	mov    DWORD PTR [eax],edx
c0028c27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c2b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c2f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c39:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c47:	85 c0                	test   eax,eax
c0028c49:	74 22                	je     c0028c6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c4b:	83 ec 0c             	sub    esp,0xc
c0028c4e:	68 76 a5 02 c0       	push   0xc002a576
c0028c53:	e8 17 1a ff ff       	call   c001a66f <Krnl::panic(char const*)>
c0028c58:	83 c4 10             	add    esp,0x10
c0028c5b:	eb 10                	jmp    c0028c6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c5d:	83 ec 0c             	sub    esp,0xc
c0028c60:	68 80 a5 02 c0       	push   0xc002a580
c0028c65:	e8 05 1a ff ff       	call   c001a66f <Krnl::panic(char const*)>
c0028c6a:	83 c4 10             	add    esp,0x10
c0028c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c71:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c74:	8d 50 01             	lea    edx,[eax+0x1]
c0028c77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c7b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c7e:	90                   	nop
c0028c7f:	83 c4 0c             	add    esp,0xc
c0028c82:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028c84 <ACPI::~ACPI()>:
c0028c84:	83 ec 0c             	sub    esp,0xc
c0028c87:	ba cc b7 02 c0       	mov    edx,0xc002b7cc
c0028c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c90:	89 10                	mov    DWORD PTR [eax],edx
c0028c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c96:	83 ec 0c             	sub    esp,0xc
c0028c99:	50                   	push   eax
c0028c9a:	e8 27 b6 fe ff       	call   c00142c6 <Device::~Device()>
c0028c9f:	83 c4 10             	add    esp,0x10
c0028ca2:	90                   	nop
c0028ca3:	83 c4 0c             	add    esp,0xc
c0028ca6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028ca8 <ACPI::~ACPI()>:
c0028ca8:	83 ec 0c             	sub    esp,0xc
c0028cab:	83 ec 0c             	sub    esp,0xc
c0028cae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cb2:	e8 cd ff ff ff       	call   c0028c84 <ACPI::~ACPI()>
c0028cb7:	83 c4 10             	add    esp,0x10
c0028cba:	83 ec 08             	sub    esp,0x8
c0028cbd:	68 68 12 00 00       	push   0x1268
c0028cc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cc6:	e8 22 a2 fe ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0028ccb:	83 c4 10             	add    esp,0x10
c0028cce:	83 c4 0c             	add    esp,0xc
c0028cd1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028cd2 <CPU::~CPU()>:
c0028cd2:	83 ec 0c             	sub    esp,0xc
c0028cd5:	ba bc bb 02 c0       	mov    edx,0xc002bbbc
c0028cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cde:	89 10                	mov    DWORD PTR [eax],edx
c0028ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce4:	83 ec 0c             	sub    esp,0xc
c0028ce7:	50                   	push   eax
c0028ce8:	e8 d9 b5 fe ff       	call   c00142c6 <Device::~Device()>
c0028ced:	83 c4 10             	add    esp,0x10
c0028cf0:	90                   	nop
c0028cf1:	83 c4 0c             	add    esp,0xc
c0028cf4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028cf6 <CPU::~CPU()>:
c0028cf6:	83 ec 0c             	sub    esp,0xc
c0028cf9:	83 ec 0c             	sub    esp,0xc
c0028cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d00:	e8 cd ff ff ff       	call   c0028cd2 <CPU::~CPU()>
c0028d05:	83 c4 10             	add    esp,0x10
c0028d08:	83 ec 08             	sub    esp,0x8
c0028d0b:	68 98 11 00 00       	push   0x1198
c0028d10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d14:	e8 d4 a1 fe ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0028d19:	83 c4 10             	add    esp,0x10
c0028d1c:	83 c4 0c             	add    esp,0xc
c0028d1f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028d20 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028d20:	90                   	nop
c0028d21:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028d22 <ThreadControlBlock::ThreadControlBlock()>:
c0028d22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d26:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028d2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d31:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028d38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d3c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028d43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d47:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028d4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d52:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028d56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d5a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028d5e:	90                   	nop
c0028d5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028d60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028d60:	83 ec 0c             	sub    esp,0xc
c0028d63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d67:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d71:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d87:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d91:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d9c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028da3:	83 ec 0c             	sub    esp,0xc
c0028da6:	68 3a a5 02 c0       	push   0xc002a53a
c0028dab:	e8 1d a2 fe ff       	call   c0012fcd <Dbg::kprintf(char const*, ...)>
c0028db0:	83 c4 10             	add    esp,0x10
c0028db3:	90                   	nop
c0028db4:	83 c4 0c             	add    esp,0xc
c0028db7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028db8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028db8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028dbc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028dbf:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028dc0 <Vm::_FPUState::_FPUState()>:
c0028dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dc4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028dcb:	90                   	nop
c0028dcc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028dce <PCI::~PCI()>:
c0028dce:	83 ec 0c             	sub    esp,0xc
c0028dd1:	ba a4 cc 02 c0       	mov    edx,0xc002cca4
c0028dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dda:	89 10                	mov    DWORD PTR [eax],edx
c0028ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028de0:	83 ec 0c             	sub    esp,0xc
c0028de3:	50                   	push   eax
c0028de4:	e8 b5 ae fe ff       	call   c0013c9e <Bus::~Bus()>
c0028de9:	83 c4 10             	add    esp,0x10
c0028dec:	90                   	nop
c0028ded:	83 c4 0c             	add    esp,0xc
c0028df0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028df2 <PCI::~PCI()>:
c0028df2:	83 ec 0c             	sub    esp,0xc
c0028df5:	83 ec 0c             	sub    esp,0xc
c0028df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dfc:	e8 cd ff ff ff       	call   c0028dce <PCI::~PCI()>
c0028e01:	83 c4 10             	add    esp,0x10
c0028e04:	83 ec 08             	sub    esp,0x8
c0028e07:	68 58 01 00 00       	push   0x158
c0028e0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e10:	e8 d8 a0 fe ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0028e15:	83 c4 10             	add    esp,0x10
c0028e18:	83 c4 0c             	add    esp,0xc
c0028e1b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028e1c <IDE::~IDE()>:
c0028e1c:	83 ec 0c             	sub    esp,0xc
c0028e1f:	ba 08 cf 02 c0       	mov    edx,0xc002cf08
c0028e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e28:	89 10                	mov    DWORD PTR [eax],edx
c0028e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e2e:	83 ec 0c             	sub    esp,0xc
c0028e31:	50                   	push   eax
c0028e32:	e8 7f b9 fe ff       	call   c00147b6 <HardDiskController::~HardDiskController()>
c0028e37:	83 c4 10             	add    esp,0x10
c0028e3a:	90                   	nop
c0028e3b:	83 c4 0c             	add    esp,0xc
c0028e3e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028e40 <IDE::~IDE()>:
c0028e40:	83 ec 0c             	sub    esp,0xc
c0028e43:	83 ec 0c             	sub    esp,0xc
c0028e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e4a:	e8 cd ff ff ff       	call   c0028e1c <IDE::~IDE()>
c0028e4f:	83 c4 10             	add    esp,0x10
c0028e52:	83 ec 08             	sub    esp,0x8
c0028e55:	68 70 02 00 00       	push   0x270
c0028e5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e5e:	e8 8a a0 fe ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0028e63:	83 c4 10             	add    esp,0x10
c0028e66:	83 c4 0c             	add    esp,0xc
c0028e69:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028e6a <SATABus::~SATABus()>:
c0028e6a:	83 ec 0c             	sub    esp,0xc
c0028e6d:	ba e8 cf 02 c0       	mov    edx,0xc002cfe8
c0028e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e76:	89 10                	mov    DWORD PTR [eax],edx
c0028e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e7c:	83 ec 0c             	sub    esp,0xc
c0028e7f:	50                   	push   eax
c0028e80:	e8 31 b9 fe ff       	call   c00147b6 <HardDiskController::~HardDiskController()>
c0028e85:	83 c4 10             	add    esp,0x10
c0028e88:	90                   	nop
c0028e89:	83 c4 0c             	add    esp,0xc
c0028e8c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028e8e <SATABus::~SATABus()>:
c0028e8e:	83 ec 0c             	sub    esp,0xc
c0028e91:	83 ec 0c             	sub    esp,0xc
c0028e94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e98:	e8 cd ff ff ff       	call   c0028e6a <SATABus::~SATABus()>
c0028e9d:	83 c4 10             	add    esp,0x10
c0028ea0:	83 ec 08             	sub    esp,0x8
c0028ea3:	68 64 01 00 00       	push   0x164
c0028ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eac:	e8 3c a0 fe ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0028eb1:	83 c4 10             	add    esp,0x10
c0028eb4:	83 c4 0c             	add    esp,0xc
c0028eb7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028eb8 <ATA::~ATA()>:
c0028eb8:	83 ec 0c             	sub    esp,0xc
c0028ebb:	ba 34 d0 02 c0       	mov    edx,0xc002d034
c0028ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ec4:	89 10                	mov    DWORD PTR [eax],edx
c0028ec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eca:	83 ec 0c             	sub    esp,0xc
c0028ecd:	50                   	push   eax
c0028ece:	e8 d5 b9 fe ff       	call   c00148a8 <PhysicalDisk::~PhysicalDisk()>
c0028ed3:	83 c4 10             	add    esp,0x10
c0028ed6:	90                   	nop
c0028ed7:	83 c4 0c             	add    esp,0xc
c0028eda:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028edc <ATA::~ATA()>:
c0028edc:	83 ec 0c             	sub    esp,0xc
c0028edf:	83 ec 0c             	sub    esp,0xc
c0028ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee6:	e8 cd ff ff ff       	call   c0028eb8 <ATA::~ATA()>
c0028eeb:	83 c4 10             	add    esp,0x10
c0028eee:	83 ec 08             	sub    esp,0x8
c0028ef1:	68 7c 01 00 00       	push   0x17c
c0028ef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028efa:	e8 ee 9f fe ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0028eff:	83 c4 10             	add    esp,0x10
c0028f02:	83 c4 0c             	add    esp,0xc
c0028f05:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028f06 <ATAPI::~ATAPI()>:
c0028f06:	83 ec 0c             	sub    esp,0xc
c0028f09:	ba 6c d0 02 c0       	mov    edx,0xc002d06c
c0028f0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f12:	89 10                	mov    DWORD PTR [eax],edx
c0028f14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f18:	83 ec 0c             	sub    esp,0xc
c0028f1b:	50                   	push   eax
c0028f1c:	e8 87 b9 fe ff       	call   c00148a8 <PhysicalDisk::~PhysicalDisk()>
c0028f21:	83 c4 10             	add    esp,0x10
c0028f24:	90                   	nop
c0028f25:	83 c4 0c             	add    esp,0xc
c0028f28:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028f2a <ATAPI::~ATAPI()>:
c0028f2a:	83 ec 0c             	sub    esp,0xc
c0028f2d:	83 ec 0c             	sub    esp,0xc
c0028f30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f34:	e8 cd ff ff ff       	call   c0028f06 <ATAPI::~ATAPI()>
c0028f39:	83 c4 10             	add    esp,0x10
c0028f3c:	83 ec 08             	sub    esp,0x8
c0028f3f:	68 80 01 00 00       	push   0x180
c0028f44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f48:	e8 a0 9f fe ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0028f4d:	83 c4 10             	add    esp,0x10
c0028f50:	83 c4 0c             	add    esp,0xc
c0028f53:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028f54 <SATA::~SATA()>:
c0028f54:	83 ec 0c             	sub    esp,0xc
c0028f57:	ba 20 d1 02 c0       	mov    edx,0xc002d120
c0028f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f60:	89 10                	mov    DWORD PTR [eax],edx
c0028f62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f66:	83 ec 0c             	sub    esp,0xc
c0028f69:	50                   	push   eax
c0028f6a:	e8 39 b9 fe ff       	call   c00148a8 <PhysicalDisk::~PhysicalDisk()>
c0028f6f:	83 c4 10             	add    esp,0x10
c0028f72:	90                   	nop
c0028f73:	83 c4 0c             	add    esp,0xc
c0028f76:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028f78 <SATA::~SATA()>:
c0028f78:	83 ec 0c             	sub    esp,0xc
c0028f7b:	83 ec 0c             	sub    esp,0xc
c0028f7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f82:	e8 cd ff ff ff       	call   c0028f54 <SATA::~SATA()>
c0028f87:	83 c4 10             	add    esp,0x10
c0028f8a:	83 ec 08             	sub    esp,0x8
c0028f8d:	68 7c 01 00 00       	push   0x17c
c0028f92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f96:	e8 52 9f fe ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0028f9b:	83 c4 10             	add    esp,0x10
c0028f9e:	83 c4 0c             	add    esp,0xc
c0028fa1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028fa2 <SATAPI::~SATAPI()>:
c0028fa2:	83 ec 0c             	sub    esp,0xc
c0028fa5:	ba fc d1 02 c0       	mov    edx,0xc002d1fc
c0028faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fae:	89 10                	mov    DWORD PTR [eax],edx
c0028fb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb4:	83 ec 0c             	sub    esp,0xc
c0028fb7:	50                   	push   eax
c0028fb8:	e8 eb b8 fe ff       	call   c00148a8 <PhysicalDisk::~PhysicalDisk()>
c0028fbd:	83 c4 10             	add    esp,0x10
c0028fc0:	90                   	nop
c0028fc1:	83 c4 0c             	add    esp,0xc
c0028fc4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028fc6 <SATAPI::~SATAPI()>:
c0028fc6:	83 ec 0c             	sub    esp,0xc
c0028fc9:	83 ec 0c             	sub    esp,0xc
c0028fcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fd0:	e8 cd ff ff ff       	call   c0028fa2 <SATAPI::~SATAPI()>
c0028fd5:	83 c4 10             	add    esp,0x10
c0028fd8:	83 ec 08             	sub    esp,0x8
c0028fdb:	68 80 01 00 00       	push   0x180
c0028fe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fe4:	e8 04 9f fe ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0028fe9:	83 c4 10             	add    esp,0x10
c0028fec:	83 c4 0c             	add    esp,0xc
c0028fef:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028ff0 <AVX::~AVX()>:
c0028ff0:	83 ec 0c             	sub    esp,0xc
c0028ff3:	ba 3c d2 02 c0       	mov    edx,0xc002d23c
c0028ff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ffc:	89 10                	mov    DWORD PTR [eax],edx
c0028ffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029002:	83 ec 0c             	sub    esp,0xc
c0029005:	50                   	push   eax
c0029006:	e8 21 b9 fe ff       	call   c001492c <FPU::~FPU()>
c002900b:	83 c4 10             	add    esp,0x10
c002900e:	90                   	nop
c002900f:	83 c4 0c             	add    esp,0xc
c0029012:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029014 <AVX::~AVX()>:
c0029014:	83 ec 0c             	sub    esp,0xc
c0029017:	83 ec 0c             	sub    esp,0xc
c002901a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002901e:	e8 cd ff ff ff       	call   c0028ff0 <AVX::~AVX()>
c0029023:	83 c4 10             	add    esp,0x10
c0029026:	83 ec 08             	sub    esp,0x8
c0029029:	68 58 01 00 00       	push   0x158
c002902e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029032:	e8 b6 9e fe ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0029037:	83 c4 10             	add    esp,0x10
c002903a:	83 c4 0c             	add    esp,0xc
c002903d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002903e <MMX::~MMX()>:
c002903e:	83 ec 0c             	sub    esp,0xc
c0029041:	ba 7c d2 02 c0       	mov    edx,0xc002d27c
c0029046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002904a:	89 10                	mov    DWORD PTR [eax],edx
c002904c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029050:	83 ec 0c             	sub    esp,0xc
c0029053:	50                   	push   eax
c0029054:	e8 d3 b8 fe ff       	call   c001492c <FPU::~FPU()>
c0029059:	83 c4 10             	add    esp,0x10
c002905c:	90                   	nop
c002905d:	83 c4 0c             	add    esp,0xc
c0029060:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029062 <MMX::~MMX()>:
c0029062:	83 ec 0c             	sub    esp,0xc
c0029065:	83 ec 0c             	sub    esp,0xc
c0029068:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002906c:	e8 cd ff ff ff       	call   c002903e <MMX::~MMX()>
c0029071:	83 c4 10             	add    esp,0x10
c0029074:	83 ec 08             	sub    esp,0x8
c0029077:	68 58 01 00 00       	push   0x158
c002907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029080:	e8 68 9e fe ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0029085:	83 c4 10             	add    esp,0x10
c0029088:	83 c4 0c             	add    esp,0xc
c002908b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002908c <SSE::~SSE()>:
c002908c:	83 ec 0c             	sub    esp,0xc
c002908f:	ba bc d2 02 c0       	mov    edx,0xc002d2bc
c0029094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029098:	89 10                	mov    DWORD PTR [eax],edx
c002909a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002909e:	83 ec 0c             	sub    esp,0xc
c00290a1:	50                   	push   eax
c00290a2:	e8 85 b8 fe ff       	call   c001492c <FPU::~FPU()>
c00290a7:	83 c4 10             	add    esp,0x10
c00290aa:	90                   	nop
c00290ab:	83 c4 0c             	add    esp,0xc
c00290ae:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00290b0 <SSE::~SSE()>:
c00290b0:	83 ec 0c             	sub    esp,0xc
c00290b3:	83 ec 0c             	sub    esp,0xc
c00290b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ba:	e8 cd ff ff ff       	call   c002908c <SSE::~SSE()>
c00290bf:	83 c4 10             	add    esp,0x10
c00290c2:	83 ec 08             	sub    esp,0x8
c00290c5:	68 58 01 00 00       	push   0x158
c00290ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ce:	e8 1a 9e fe ff       	call   c0012eed <operator delete(void*, unsigned long)>
c00290d3:	83 c4 10             	add    esp,0x10
c00290d6:	83 c4 0c             	add    esp,0xc
c00290d9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00290da <x87::~x87()>:
c00290da:	83 ec 0c             	sub    esp,0xc
c00290dd:	ba fc d2 02 c0       	mov    edx,0xc002d2fc
c00290e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e6:	89 10                	mov    DWORD PTR [eax],edx
c00290e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ec:	83 ec 0c             	sub    esp,0xc
c00290ef:	50                   	push   eax
c00290f0:	e8 37 b8 fe ff       	call   c001492c <FPU::~FPU()>
c00290f5:	83 c4 10             	add    esp,0x10
c00290f8:	90                   	nop
c00290f9:	83 c4 0c             	add    esp,0xc
c00290fc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00290fe <x87::~x87()>:
c00290fe:	83 ec 0c             	sub    esp,0xc
c0029101:	83 ec 0c             	sub    esp,0xc
c0029104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029108:	e8 cd ff ff ff       	call   c00290da <x87::~x87()>
c002910d:	83 c4 10             	add    esp,0x10
c0029110:	83 ec 08             	sub    esp,0x8
c0029113:	68 58 01 00 00       	push   0x158
c0029118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002911c:	e8 cc 9d fe ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0029121:	83 c4 10             	add    esp,0x10
c0029124:	83 c4 0c             	add    esp,0xc
c0029127:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029128 <IOAPIC::~IOAPIC()>:
c0029128:	83 ec 0c             	sub    esp,0xc
c002912b:	ba 54 d4 02 c0       	mov    edx,0xc002d454
c0029130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029134:	89 10                	mov    DWORD PTR [eax],edx
c0029136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002913a:	83 ec 0c             	sub    esp,0xc
c002913d:	50                   	push   eax
c002913e:	e8 83 b1 fe ff       	call   c00142c6 <Device::~Device()>
c0029143:	83 c4 10             	add    esp,0x10
c0029146:	90                   	nop
c0029147:	83 c4 0c             	add    esp,0xc
c002914a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002914c <IOAPIC::~IOAPIC()>:
c002914c:	83 ec 0c             	sub    esp,0xc
c002914f:	83 ec 0c             	sub    esp,0xc
c0029152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029156:	e8 cd ff ff ff       	call   c0029128 <IOAPIC::~IOAPIC()>
c002915b:	83 c4 10             	add    esp,0x10
c002915e:	83 ec 08             	sub    esp,0x8
c0029161:	68 68 01 00 00       	push   0x168
c0029166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002916a:	e8 7e 9d fe ff       	call   c0012eed <operator delete(void*, unsigned long)>
c002916f:	83 c4 10             	add    esp,0x10
c0029172:	83 c4 0c             	add    esp,0xc
c0029175:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029176 <APIC::~APIC()>:
c0029176:	83 ec 0c             	sub    esp,0xc
c0029179:	ba 0c d4 02 c0       	mov    edx,0xc002d40c
c002917e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029182:	89 10                	mov    DWORD PTR [eax],edx
c0029184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029188:	83 ec 0c             	sub    esp,0xc
c002918b:	50                   	push   eax
c002918c:	e8 65 bc fe ff       	call   c0014df6 <InterruptController::~InterruptController()>
c0029191:	83 c4 10             	add    esp,0x10
c0029194:	90                   	nop
c0029195:	83 c4 0c             	add    esp,0xc
c0029198:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002919a <APIC::~APIC()>:
c002919a:	83 ec 0c             	sub    esp,0xc
c002919d:	83 ec 0c             	sub    esp,0xc
c00291a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291a4:	e8 cd ff ff ff       	call   c0029176 <APIC::~APIC()>
c00291a9:	83 c4 10             	add    esp,0x10
c00291ac:	83 ec 08             	sub    esp,0x8
c00291af:	68 58 21 00 00       	push   0x2158
c00291b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291b8:	e8 30 9d fe ff       	call   c0012eed <operator delete(void*, unsigned long)>
c00291bd:	83 c4 10             	add    esp,0x10
c00291c0:	83 c4 0c             	add    esp,0xc
c00291c3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00291c4 <PIC::~PIC()>:
c00291c4:	83 ec 0c             	sub    esp,0xc
c00291c7:	ba a4 d4 02 c0       	mov    edx,0xc002d4a4
c00291cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d0:	89 10                	mov    DWORD PTR [eax],edx
c00291d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d6:	83 ec 0c             	sub    esp,0xc
c00291d9:	50                   	push   eax
c00291da:	e8 17 bc fe ff       	call   c0014df6 <InterruptController::~InterruptController()>
c00291df:	83 c4 10             	add    esp,0x10
c00291e2:	90                   	nop
c00291e3:	83 c4 0c             	add    esp,0xc
c00291e6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00291e8 <PIC::~PIC()>:
c00291e8:	83 ec 0c             	sub    esp,0xc
c00291eb:	83 ec 0c             	sub    esp,0xc
c00291ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291f2:	e8 cd ff ff ff       	call   c00291c4 <PIC::~PIC()>
c00291f7:	83 c4 10             	add    esp,0x10
c00291fa:	83 ec 08             	sub    esp,0x8
c00291fd:	68 58 21 00 00       	push   0x2158
c0029202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029206:	e8 e2 9c fe ff       	call   c0012eed <operator delete(void*, unsigned long)>
c002920b:	83 c4 10             	add    esp,0x10
c002920e:	83 c4 0c             	add    esp,0xc
c0029211:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029212 <APICTimer::~APICTimer()>:
c0029212:	83 ec 0c             	sub    esp,0xc
c0029215:	ba f8 d4 02 c0       	mov    edx,0xc002d4f8
c002921a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002921e:	89 10                	mov    DWORD PTR [eax],edx
c0029220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029224:	83 ec 0c             	sub    esp,0xc
c0029227:	50                   	push   eax
c0029228:	e8 15 db fe ff       	call   c0016d42 <Timer::~Timer()>
c002922d:	83 c4 10             	add    esp,0x10
c0029230:	90                   	nop
c0029231:	83 c4 0c             	add    esp,0xc
c0029234:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029236 <APICTimer::~APICTimer()>:
c0029236:	83 ec 0c             	sub    esp,0xc
c0029239:	83 ec 0c             	sub    esp,0xc
c002923c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029240:	e8 cd ff ff ff       	call   c0029212 <APICTimer::~APICTimer()>
c0029245:	83 c4 10             	add    esp,0x10
c0029248:	83 ec 08             	sub    esp,0x8
c002924b:	68 60 01 00 00       	push   0x160
c0029250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029254:	e8 94 9c fe ff       	call   c0012eed <operator delete(void*, unsigned long)>
c0029259:	83 c4 10             	add    esp,0x10
c002925c:	83 c4 0c             	add    esp,0xc
c002925f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029260 <PIT::~PIT()>:
c0029260:	83 ec 0c             	sub    esp,0xc
c0029263:	ba 48 d5 02 c0       	mov    edx,0xc002d548
c0029268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002926c:	89 10                	mov    DWORD PTR [eax],edx
c002926e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029272:	83 ec 0c             	sub    esp,0xc
c0029275:	50                   	push   eax
c0029276:	e8 c7 da fe ff       	call   c0016d42 <Timer::~Timer()>
c002927b:	83 c4 10             	add    esp,0x10
c002927e:	90                   	nop
c002927f:	83 c4 0c             	add    esp,0xc
c0029282:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029284 <PIT::~PIT()>:
c0029284:	83 ec 0c             	sub    esp,0xc
c0029287:	83 ec 0c             	sub    esp,0xc
c002928a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002928e:	e8 cd ff ff ff       	call   c0029260 <PIT::~PIT()>
c0029293:	83 c4 10             	add    esp,0x10
c0029296:	83 ec 08             	sub    esp,0x8
c0029299:	68 5c 01 00 00       	push   0x15c
c002929e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292a2:	e8 46 9c fe ff       	call   c0012eed <operator delete(void*, unsigned long)>
c00292a7:	83 c4 10             	add    esp,0x10
c00292aa:	83 c4 0c             	add    esp,0xc
c00292ad:	c3                   	ret    
